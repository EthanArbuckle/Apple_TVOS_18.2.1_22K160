void sub_1000063B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000063CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v2 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = 0LL;
}

void sub_1000063DC(uint64_t a1)
{
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v2 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 40)];
  double v4 = v3;
  double v5 = (double)*(unint64_t *)(a1 + 48);

  if (v4 >= v5)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1LL;
    v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: learning period exceeded max time of %llu seconds",  "-[WiFiNWReliabilityMonitor waitForNetworkToBeReliableWithTimeout:withTimeout:withMgrCallback:]_block_invoke_2",  *(void *)(a1 + 48));
    }
LABEL_37:
    objc_autoreleasePoolPop(v32);
    *(_BYTE *)(*(void *)(a1 + 32) + 65LL) = 0;
    [*(id *)(a1 + 32) _evaluationComplete:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)];
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = *(unsigned __int8 *)(v6 + 65);
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    id v8 = *(id *)(v6 + 16);
    id v9 = [v8 countByEnumeratingWithState:&v40 objects:v45 count:16];
    if (v9)
    {
      id v10 = v9;
      LODWORD(v11) = 0;
      if (v7) {
        unint64_t v12 = 16LL;
      }
      else {
        unint64_t v12 = 8LL;
      }
      uint64_t v13 = *(void *)v41;
      while (2)
      {
        for (i = 0LL; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v41 != v13) {
            objc_enumerationMutation(v8);
          }
          v15 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)i);
          if (([v15 isSessionReliable:v12] & 1) == 0)
          {
            v20 = objc_autoreleasePoolPush();
            v21 = (void *)qword_100219F60;
            if (qword_100219F60)
            {
              v22 = (void *)objc_claimAutoreleasedReturnValue([v15 description]);
              [v21 WFLog:3, "%s: session:%@ is not yet reliable for atleast %lu samples", "-[WiFiNWReliabilityMonitor waitForNetworkToBeReliableWithTimeout:withTimeout:withMgrCallback:]_block_invoke_2", v22, v12 message];
            }

            objc_autoreleasePoolPop(v20);

            goto LABEL_25;
          }

          unint64_t v16 = (unint64_t)[v15 getSampleCount:1];
          BOOL v17 = v12 > v16;
          v12 -= v16;
          if (!v17)
          {

            *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0LL;
            v31 = objc_autoreleasePoolPush();
            v32 = v31;
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: network is reliable!",  "-[WiFiNWReliabilityMonitor waitForNetworkToBeReliableWithTimeout:withTimeout:withMgrCallback:]_block_invoke_2",  v35);
            }
            goto LABEL_37;
          }

          uint64_t v11 = (v11 + v16);
        }

        id v10 = [v8 countByEnumeratingWithState:&v40 objects:v45 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }

    else
    {
      uint64_t v11 = 0LL;
    }

    v18 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      uint64_t v19 = 16LL;
      if (!*(_BYTE *)(*(void *)(a1 + 32) + 65LL)) {
        uint64_t v19 = 8LL;
      }
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s Available samples: %d less than threshold: %d!",  "-[WiFiNWReliabilityMonitor waitForNetworkToBeReliableWithTimeout:withTimeout:withMgrCallback:]_block_invoke_2",  v11,  v19);
    }

    objc_autoreleasePoolPop(v18);
LABEL_25:
    *(_BYTE *)(*(void *)(a1 + 32) + 65LL) = 0;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    id v23 = *(id *)(*(void *)(a1 + 32) + 16LL);
    id v24 = [v23 countByEnumeratingWithState:&v36 objects:v44 count:16];
    if (v24)
    {
      id v25 = v24;
      unint64_t v26 = 0LL;
      int v27 = 0;
      uint64_t v28 = *(void *)v37;
      while (2)
      {
        v29 = 0LL;
        int v30 = v27 + (_DWORD)v25;
        do
        {
          if (*(void *)v37 != v28) {
            objc_enumerationMutation(v23);
          }
          v26 += (unint64_t)[*(id *)(*((void *)&v36 + 1) + 8 * (void)v29) getSampleCount:1];
          if (v26 > 0xF)
          {
            int v30 = v27 + (_DWORD)v29 + 1;
            goto LABEL_39;
          }

          v29 = (char *)v29 + 1;
        }

        while (v25 != v29);
        id v25 = [v23 countByEnumeratingWithState:&v36 objects:v44 count:16];
        int v27 = v30;
        if (v25) {
          continue;
        }
        break;
      }
    }

    else
    {
      int v30 = 0;
    }

LABEL_39:
    uint64_t v33 = [*(id *)(*(void *)(a1 + 32) + 16) count] - v30;
    if ((int)v33 >= 1)
    {
      objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "removeObjectsInRange:", v30, v33);
      v34 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Discarded %d sessions",  "-[WiFiNWReliabilityMonitor waitForNetworkToBeReliableWithTimeout:withTimeout:withMgrCallback:]_block_invoke_2",  v33);
      }
      objc_autoreleasePoolPop(v34);
    }
  }

    objc_autoreleasePoolPop(v15);
LABEL_40:
    dispatch_release(v12);
    id v8 = (NSMutableDictionary *)v43[3];
    _Block_object_dispose(&v42, 8);
    objc_autoreleasePoolPop(v11);
    goto LABEL_14;
  }

  if (valuePtr != 5) {
    goto LABEL_13;
  }
  id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (!v8)
  {
    id v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null params",  "__WiFiManagerCopyDualPowerOverrideParams");
    }
    objc_autoreleasePoolPop(v9);
    goto LABEL_13;
  }

              double v3 = v45;
              goto LABEL_44;
            }
          }

          if (v27 == ++v28) {
            goto LABEL_39;
          }
        }
      }

      double v3 = v45;
LABEL_45:
      LODWORD(v16) = sub_10007332C((uint64_t)v3, v14);
      sub_100071D74((uint64_t)v3, v19, 0);
      goto LABEL_46;
    }

    v21 = v11;
    __int128 v43 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: known BSSIDs list is empty for network %@!", "WiFiManagerStoreLeakyAPData", v5 message];
    }
    objc_autoreleasePoolPop(v43);
    LODWORD(v16) = 0;
  }

  uint64_t v11 = v21;
LABEL_46:
  unint64_t v12 = v47;
LABEL_47:
  sub_10003A310(v11, v16);

  if (v23) {
    CFRelease(v23);
  }
  if ((_DWORD)v16) {
    sub_100061B50(v40, 2LL, (uint64_t)v3);
  }
}

  CFStringAppend(theString, @" Rst");
  if ((a1 & 0x20000) == 0)
  {
LABEL_20:
    if ((a1 & 0x40000) == 0) {
      return;
    }
LABEL_41:
    CFStringAppend(theString, @" VrtR");
    return;
  }

          CFRelease(v4);
LABEL_40:
          if (values) {
            CFRelease(values);
          }
          return;
        }
      }

      BOOL v17 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s WPA auth type (%d) has no WPA IE",  "WiFiNetworkUpdateWPARSNAuthType",  valuePtr);
      }
    }

    else
    {
      if (valuePtr != 8 && valuePtr != 12) {
        goto LABEL_39;
      }
      double v5 = (const __CFDictionary *)sub_1000951FC(a1, @"RSN_IE");
      if (v5)
      {
        uint64_t v6 = v5;
        int v7 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, v5);
        if (v7)
        {
          id v8 = v7;
          id v9 = (const __CFArray *)CFDictionaryGetValue(v6, @"IE_KEY_RSN_AUTHSELS");
          if (v9 && CFArrayGetCount(v9) < 2) {
            goto LABEL_35;
          }
          CFDictionaryReplaceValue(v8, @"IE_KEY_RSN_AUTHSELS", v4);
          id v10 = @"RSN_IE";
LABEL_34:
          sub_10009582C(a1, v10, v8);
LABEL_35:
          CFRelease(v8);
          goto LABEL_39;
        }

        goto LABEL_39;
      }

      BOOL v17 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s RSN auth type (%d) has no RSN IE",  "WiFiNetworkUpdateWPARSNAuthType",  valuePtr);
      }
    }

    objc_autoreleasePoolPop(v17);
    goto LABEL_39;
  }

  uint64_t v11 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: build number failed for mode(%d)",  "WiFiNetworkUpdateWPARSNAuthType",  valuePtr);
  }
  objc_autoreleasePoolPop(v11);
}

        ++v19;
      }

      while (v19 != Count);
      if (v20 == -1)
      {
LABEL_46:
        v31 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3 message:"PNO networks not from background scan candidates (known networks). Nothing to do."];
        }
        objc_autoreleasePoolPop(v31);
      }

      else
      {
        uint64_t v28 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 3576), v20);
        v29 = *(const void **)(a4 + 3504);
        if (v29 && CFEqual(v29, v28))
        {
          int v30 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3 message:"Previous network is the same as PNO network. Nothing to do."];
          }
          objc_autoreleasePoolPop(v30);
        }

        else
        {
          v32 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "Previous network is different from PNO network. Promoting %@.", sub_100095BC8(v28) message];
          }
          objc_autoreleasePoolPop(v32);
          sub_1000D3650(a4, v28);
        }

        *(_DWORD *)(a4 + 192) = 5;
        sub_1000D0428(a4);
        if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
        {
          sub_1000F5F98(a4, 6uLL);
        }

        else
        {
          objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "autoJoinStartedWithTrigger:interfaceName:",  6,  sub_100043E8C(*(void *)(a4 + 64)));
          sub_1000D0A5C(a4, 2LL, (uint64_t)"__WiFiDeviceManagerPromotePNONetworks");
        }
      }
    }

    goto LABEL_6;
  }

              [v17 beginTransaction:v18 completionHandler:v16];
              break;
            case 3u:
              v19[0] = _NSConcreteStackBlock;
              v19[1] = 3221225472LL;
              v19[2] = sub_10011340C;
              v19[3] = &unk_1001E5188;
              v19[4] = a2;
              unint64_t v16 = v19;
              goto LABEL_38;
            default:
              return;
          }

          break;
        default:
          return;
      }
    }
  }

  else
  {
    v15 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: CATSUpdate APPLE80211KEY_CATS_APP_BITMAP key not found",  "WiFiDeviceManagerCatsP2PUpdate");
    }
    objc_autoreleasePoolPop(v15);
  }
}

void sub_100006E9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_100006EC0(uint64_t a1, void *a2, _BYTE *a3)
{
  id result = [a2 data];
  if ((int)result <= -76)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
    *a3 = 1;
  }

  if (++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) >= *(_DWORD *)(a1 + 48)) {
    *a3 = 1;
  }
  return result;
}

void sub_1000071CC(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(a1 + 32) + 25LL))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2 == 8 || v2 == 1)
    {
      double v4 = objc_autoreleasePoolPush();
      double v5 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[WiFiUserInteractionMonitor sharedInstance]( &OBJC_CLASS___WiFiUserInteractionMonitor,  "sharedInstance"));
        objc_msgSend( v5,  "WFLog:message:",  3,  "%s: realtime app state changed to %d",  "-[WiFiAIRAgent _userInteractivityChangedCallback:]_block_invoke",  objc_msgSend(v6, "isRealTimeAppActive"));
      }

      objc_autoreleasePoolPop(v4);
      int v7 = (void *)objc_claimAutoreleasedReturnValue( +[WiFiUserInteractionMonitor sharedInstance]( &OBJC_CLASS___WiFiUserInteractionMonitor,  "sharedInstance"));
      unsigned __int8 v8 = [v7 isRealTimeAppActive];

      if ((v8 & 1) == 0)
      {
        [*(id *)(*(void *)(a1 + 32) + 8) terminateNetworkReliabilityEvaluation];
        [*(id *)(a1 + 32) _evaluationComplete:5];
      }
    }
  }

void sub_100007520(id a1, void *a2, unint64_t a3)
{
  id v5 = a2;
  if (v5)
  {
    [v5 _userInteractivityChangedCallback:a3];
  }

  else
  {
    double v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null agent",  "-[WiFiAIRAgent waitForConfirmationWithTimeout:withBssEnvironment:withMgrCallback:]_block_invoke");
    }
    objc_autoreleasePoolPop(v4);
  }
}

id sub_1000075A0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_evaluationComplete:",  objc_msgSend(*(id *)(a1 + 32), "convertFromNWReliabilityMonitorResult:", a2));
}

void sub_10000782C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1002197C8;
  qword_1002197C8 = (uint64_t)v1;
}

void sub_1000078AC(uint64_t a1, void *a2)
{
  id v10 = a2;
  double v3 = (void *)objc_claimAutoreleasedReturnValue([v10 ambiguousSSIDs]);
  double v4 = objc_autoreleasePoolPush();
  id v5 = (void *)qword_100219F60;
  if (qword_100219F60)
  {
    id v6 = [@"AmbiguousSSIDs" UTF8String];
    id v7 = objc_claimAutoreleasedReturnValue([v3 description]);
    objc_msgSend(v5, "WFLog:message:", 3, "%s: %s\n", v6, objc_msgSend(v7, "UTF8String"));
  }

  objc_autoreleasePoolPop(v4);
  unsigned __int8 v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000079C4;
  block[3] = &unk_1001E2648;
  block[4] = *(void *)(a1 + 32);
  id v12 = v3;
  id v9 = v3;
  dispatch_sync(v8, block);
}

void sub_1000079C4(uint64_t a1)
{
}

void sub_100007AF4(_Unwind_Exception *a1)
{
}

uint64_t sub_100007E8C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) queryLOITypeAtLatestLocation];
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, id))(result + 16))(result, v2);
  }
  return result;
}

void sub_1000081E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

id sub_100008228(id result, void *a2, uint64_t a3)
{
  id v3 = result;
  if (a2)
  {
    if (!a3)
    {
      __int128 v11 = 0u;
      __int128 v12 = 0u;
      __int128 v9 = 0u;
      __int128 v10 = 0u;
      uint64_t result = [a2 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (result)
      {
        id v5 = result;
        uint64_t v6 = *(void *)v10;
        do
        {
          id v7 = 0LL;
          do
          {
            if (*(void *)v10 != v6) {
              objc_enumerationMutation(a2);
            }
            unsigned __int8 v8 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)v7);
            if (![v8 type]) {
              *(_BYTE *)(*(void *)(*((void *)v3 + 5) + 8LL) + 24LL) = 1;
            }
            if ([v8 type] == (id)1) {
              *(_BYTE *)(*(void *)(*((void *)v3 + 6) + 8LL) + 24LL) = 1;
            }
            id v7 = (char *)v7 + 1;
          }

          while (v5 != v7);
          uint64_t result = [a2 countByEnumeratingWithState:&v9 objects:v13 count:16];
          id v5 = result;
        }

        while (result);
      }
    }
  }

  if (!*(_BYTE *)(*(void *)(*((void *)v3 + 7) + 8LL) + 24LL)) {
    return (id)dispatch_semaphore_signal(*((dispatch_semaphore_t *)v3 + 4));
  }
  return result;
}

id sub_100008368(id result, void *a2, uint64_t a3)
{
  id v3 = result;
  if (a2)
  {
    if (!a3)
    {
      __int128 v11 = 0u;
      __int128 v12 = 0u;
      __int128 v9 = 0u;
      __int128 v10 = 0u;
      uint64_t result = [a2 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (result)
      {
        id v5 = result;
        uint64_t v6 = *(void *)v10;
        do
        {
          id v7 = 0LL;
          do
          {
            if (*(void *)v10 != v6) {
              objc_enumerationMutation(a2);
            }
            unsigned __int8 v8 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)v7);
            if (![v8 type] || objc_msgSend(v8, "type") == (id)1) {
              *(_BYTE *)(*(void *)(*((void *)v3 + 5) + 8LL) + 24LL) = 1;
            }
            id v7 = (char *)v7 + 1;
          }

          while (v5 != v7);
          uint64_t result = [a2 countByEnumeratingWithState:&v9 objects:v13 count:16];
          id v5 = result;
        }

        while (result);
      }
    }
  }

  if (!*(_BYTE *)(*(void *)(*((void *)v3 + 6) + 8LL) + 24LL)) {
    return (id)dispatch_semaphore_signal(*((dispatch_semaphore_t *)v3 + 4));
  }
  return result;
}

void sub_1000085C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000085D8(uint64_t a1, uint64_t a2)
{
}

void sub_1000085E8(uint64_t a1)
{
}

id sub_1000085F4(uint64_t a1)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setBestLongitudeReading:*(double *)(a1 + 56)];
}

LABEL_24:
          if ((id)++v9 != v6) {
            continue;
          }
          v18 = [v4 countByEnumeratingWithState:&v22 objects:v26 count:16];
          uint64_t v6 = v18;
          if (!v18) {
            goto LABEL_37;
          }
          goto LABEL_3;
        default:
          NSLog(@"%s: unhandled field %@", v7, v10);
          goto LABEL_24;
      }
    }
  }

    objc_autoreleasePoolPop(v12);
    LOBYTE(v11) = 0;
    return (char)v11;
  }

  [v7 timeIntervalSinceNow];
  if (v8 <= -120.0)
  {
    __int128 v12 = objc_autoreleasePoolPush();
    uint64_t v13 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      v14 = "%s: location is older than 120 secs";
      goto LABEL_22;
    }

    goto LABEL_24;
  }

  __int128 v9 = v8 <= -60.0 && v8 <= -30.0;
  __int128 v10 = 500.0;
  if (!v9) {
    __int128 v10 = 300.0;
  }
  __int128 v11 = -[WiFiAnalyticsManager copyStoredNetworksAvailableAtLocationWithinDistanceInBand:distance:band:]( self,  "copyStoredNetworksAvailableAtLocationWithinDistanceInBand:distance:band:",  a3,  2LL,  v10);
  if (v11)
  {
    *a4 = v11;
    LOBYTE(v11) = 1;
  }

  return (char)v11;
}

  v15 = (_DWORD)v6 == 12 || (v6 & 0xFFFFFFFD) == 4;
  if (a5 && v15) {
    CFRelease(a5);
  }
}
}

    BOOL v17 = 0;
    if (!v14)
    {
LABEL_25:
      v21 = !v17;
      if (a3) {
        v21 = 1;
      }
      if ((v21 & 1) != 0) {
        goto LABEL_60;
      }
      v20 = objc_autoreleasePoolPush();
      v82 = v14;
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: examining <%@> network set %@ for a network service matching BSD name %@ and interface type %@", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", Name, SetID, v84, kSCNetworkInterfaceTypeIEEE80211 message];
      }
      goto LABEL_30;
    }

  CFStringAppend(theString, @" AuJo");
  if ((a1 & 4) == 0)
  {
LABEL_5:
    if ((a1 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }

          BOOL v17 = a1;
          v18 = 0LL;
          goto LABEL_25;
        }
      }
    }

    else
    {
      __int128 v10 = sub_100095BC8(a2);
      if (v10)
      {
        __int128 v11 = v10;
        __int128 v12 = (const __CFDictionary *)sub_1000951FC(a1, @"userPreferredNetworkNames");
        uint64_t v13 = v12
            ? CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, v12)
            : CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        v14 = v13;
        if (v13)
        {
          if (a3) {
            CFDictionarySetValue(v13, v11, a3);
          }
          else {
            CFDictionaryRemoveValue(v13, v11);
          }
          uint64_t v19 = CFDictionaryGetCount(v14);
          unint64_t v16 = @"userPreferredNetworkNames";
          if (v19) {
            goto LABEL_16;
          }
          goto LABEL_24;
        }
      }
    }
  }

  uint64_t v28 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "SlowWiFi: stage:%d reason:%d",  valuePtr,  HIDWORD(valuePtr));
  }
  objc_autoreleasePoolPop(v28);
  if ((int)valuePtr >= 2 && SHIDWORD(valuePtr) <= 14 && HIDWORD(valuePtr) != 13)
  {
    uint64_t v29 = (_BYTE *)(a3 + 7240);
    int v30 = *(unsigned __int8 *)(a3 + 7240);
    v31 = objc_autoreleasePoolPush();
    if (!v30)
    {
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "SlowWiFiHUD: action:%d reason:%d HUD_update:start",  valuePtr,  HIDWORD(valuePtr));
      }
      objc_autoreleasePoolPop(v31);
      *(double *)(a3 + 7200) = v9;
      *(void *)(a3 + 7232) = valuePtr;
      *(void *)(a3 + 7224) = 35LL;
      v32 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3 message:"SlowWiFi HUD: starting display"];
      }
      objc_autoreleasePoolPop(v32);
      uint64_t v33 = objc_autoreleasePoolPush();
      *(void *)(a3 + 7176) = 0LL;
      v34 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Slow WiFi: %llus",  *(void *)(a3 + 7216));
      if (!*v29)
      {
        uint64_t v35 = v34;
        void *v29 = 1;
        if (MGGetBoolAnswer(@"InternalBuild"))
        {
          __int128 v36 = *(void (**)(uint64_t, uint64_t, NSString *, void))(a3 + 4544);
          if (v36) {
            v36(a3, 17LL, v35, *(void *)(a3 + 4552));
          }
        }

        __int128 v37 = *(dispatch_source_s **)(a3 + 7208);
        __int128 v38 = dispatch_time(0LL, 1000000000LL);
        dispatch_source_set_timer(v37, v38, 0xFFFFFFFFFFFFFFFFLL, 0LL);
      }

      objc_autoreleasePoolPop(v33);
      if (v15) {
        goto LABEL_34;
      }
      goto LABEL_35;
    }

    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "SlowWiFiHUD: previous_stage:%d current_stage:%d previous_reason:%d current_reason:%d remaining_display_duration: %lld current_HUD_update:increment timeSinceFirstNotification:%lld",  *(unsigned int *)(a3 + 7232),  valuePtr,  *(unsigned int *)(a3 + 7236),  HIDWORD(valuePtr),  *(void *)(a3 + 7224),  (uint64_t)(v9 - *(double *)(a3 + 7200)));
    }
    objc_autoreleasePoolPop(v31);
    *(void *)(a3 + 7224) = 35LL;
  }

  if (v15) {
LABEL_34:
  }
    CFRelease(v15);
LABEL_35:
  objc_autoreleasePoolPop(v7);
}

  if ((a2 & 2) != 0 && (v3[1] & 8) != 0)
  {
    memset(v20, 0, sizeof(v20));
    v21 = 1LL;
    return sub_1000DC1AC(a1, (uint64_t)v20);
  }

  return result;
}

    uint64_t v28 = sub_100095BC8(v9);
    if (v28
      && (v29 = v28, (int v30 = *(void **)(a1 + 3712)) != 0LL)
      && ([v30 containsObject:v29] & 1) != 0)
    {
      v31 = (const void **)&kCFBooleanTrue;
    }

    else
    {
      v31 = (const void **)&kCFBooleanFalse;
    }

    sub_10009582C((uint64_t)v9, @"AmbiguousSSIDs", *v31);
    objc_autoreleasePoolPop(objc_autoreleasePoolPush());
    objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "setCachedCurrentKnownNetworkRef:interfaceName:",  v9,  a2);
    v32 = sub_1000951FC((uint64_t)v9, @"WPA_IE");
    uint64_t v33 = sub_1000951FC((uint64_t)v7, @"WPA_IE");
    v34 = sub_1000951FC((uint64_t)v9, @"RSN_IE");
    uint64_t v35 = sub_1000951FC((uint64_t)v7, @"RSN_IE");
    __int128 v36 = v35;
    if (a3 && v34 && v32 && v35 && !v33) {
      sub_10009582C((uint64_t)v9, @"WPA_IE", 0LL);
    }
    __int128 v37 = sub_100094E60((uint64_t)kCFAllocatorDefault, (uint64_t)v9);
    if (v37)
    {
      __int128 v38 = v37;
      if (v34 && v32 && v36 && !v33) {
        sub_10009582C((uint64_t)v38, @"WPA_IE", 0LL);
      }
      objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "setCachedCurrentNetworkRef:interfaceName:",  v38,  a2);
      CFRelease(v38);
    }

    else
    {
      objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "setCachedCurrentNetworkRef:interfaceName:",  v9,  a2);
    }

    goto LABEL_46;
  }

  objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "setCachedCurrentNetworkRef:interfaceName:",  0,  a2);
  objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "setCachedCurrentKnownNetworkRef:interfaceName:",  0,  a2);
  return 0LL;
}

    objc_autoreleasePoolPop(v7);
    __int128 v10 = 0LL;
    goto LABEL_25;
  }

  if (sub_10009EAF4((const __CFDictionary **)a2))
  {
    id v7 = objc_autoreleasePoolPush();
    unsigned __int8 v8 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      __int128 v37 = sub_100095BC8(a2);
      __int128 v9 = "%s: disabled because %@ is an infrequently joined public network";
      goto LABEL_23;
    }

    goto LABEL_24;
  }

  if (sub_1000A4B04((uint64_t)a2))
  {
    id v7 = objc_autoreleasePoolPush();
    unsigned __int8 v8 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      __int128 v37 = sub_100095BC8(a2);
      __int128 v9 = "%s: accessory network (%@) is not suitable for autojoin";
      goto LABEL_23;
    }

    goto LABEL_24;
  }

  if (!a3 && sub_10009DBF8((CFDictionaryRef *)a2))
  {
    id v7 = objc_autoreleasePoolPush();
    unsigned __int8 v8 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      __int128 v37 = sub_100095BC8(a2);
      __int128 v38 = 0LL;
      __int128 v9 = "%s: disabled for Fully Loaded Network %@ isFilteringAJCandidates %d";
      goto LABEL_23;
    }

    goto LABEL_24;
  }

  if (sub_1000FD054(a1, a2))
  {
    id v7 = objc_autoreleasePoolPush();
    unsigned __int8 v8 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      __int128 v37 = sub_100095BC8(a2);
      __int128 v38 = a3;
      __int128 v9 = "%s: disabled for missing password Network %@ isFilteringAJCandidates %d";
      goto LABEL_23;
    }

    goto LABEL_24;
  }

  __int128 v12 = sub_1000A335C((uint64_t)a2);
  __int128 v43 = 0.0;
  v44 = 0LL;
  uint64_t v13 = [*(id *)(a1 + 6632) isNetworkTemporarilyDenyListedForAutoJoin:v12];
  v14 = [*(id *)(a1 + 6632) isNetworkInDenyListedState:1 scanResult:v12];
  __int128 v42 = v12;
  v15 = [*(id *)(a1 + 6632) isNetworkDenyListedForAutoJoinDueToTrigDisc:v12 RSSI:&v44 timestamp:&v43];
  if (a3) {
    unint64_t v16 = 0;
  }
  else {
    unint64_t v16 = v14;
  }
  BOOL v17 = v16 | v13;
  v18 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: Network '%@', isFilteringAJCandidates %d, isSSIDTemporarilyDenylisted %d, isBSSIDDenylisted %d, isTDDenylisted %d", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", sub_100095BC8(a2), a3, v13, v14, v15 message];
  }
  objc_autoreleasePoolPop(v18);
  __int128 v10 = (v17 | v15) ^ 1;
  if (a3)
  {
    if ((v15 & 1) != 0 || sub_1000FD410(a1, a2))
    {
      uint64_t v19 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: disabled for non-TD, non-onDemand problematic Network %@ isFilteringAJCandidates %d", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", sub_100095BC8(a2), 1 message];
      }
      objc_autoreleasePoolPop(v19);
      __int128 v10 = 1LL;
    }
  }

  else
  {
    if (((v17 ^ 1 | v15) & 1) == 0)
    {
      id v23 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: Not considering problematic Network %@ isSSIDTemporarilyDenylisted %d isBSSIDDenylisted %d isFilteringAJCa ndidates %d isTDDenylisted %d", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", sub_100095BC8(a2), v13, v14, 0, v15 message];
      }
      goto LABEL_112;
    }

    if ((_DWORD)v15)
    {
      else {
        __int128 v10 = v10;
      }
    }

    if (sub_1000FD1E4(a1, a2))
    {
      id v24 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "Use problematic network %@ for auto-join, as rssi improved", sub_100095BC8(a2) message];
      }
      objc_autoreleasePoolPop(v24);
      __int128 v10 = 1LL;
    }

    id v25 = (const void *)sub_100043E8C(*(void *)(a1 + 64));
    unint64_t v26 = sub_1000DEA34(a1, v25, 1);
    if (v26)
    {
      int v27 = v26;
      if (!sub_100095318((BOOL)v26) && CFEqual(v27, a2))
      {
        uint64_t v28 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: skipping current network %@ as auto-join candidate", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", sub_100095BC8(a2) message];
        }
        objc_autoreleasePoolPop(v28);
        __int128 v10 = 0LL;
      }

      CFRelease(v27);
    }
  }

  v20 = *(const void **)(a1 + 3504);
  if (v20
    && CFEqual(v20, a2)
    && !sub_100053B28(*(void *)(a1 + 64))
    && !-[WiFiUserInteractionMonitor isCellularDataUsable]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isCellularDataUsable"))
  {
    id v23 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: %@ previously disconnected network and no alternative network interface - ok to autojoin", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", sub_100095BC8(a2) message];
    }
    goto LABEL_115;
  }

  if (-[WiFiUserInteractionMonitor isPriorityNetwork:]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isPriorityNetwork:",  a2))
  {
    v21 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: current network %@ is a Priority Network", "__WiFiDeviceManagerKnownNetworkSuitabilityCheck", sub_100095BC8(a2) message];
    }
    objc_autoreleasePoolPop(v21);
    if (!-[WiFiUserInteractionMonitor isRealTimeAppActive]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isRealTimeAppActive"))
    {
      id v23 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Priority Network with no RT traffic - ok to autojoin",  "__WiFiDeviceManagerKnownNetworkSuitabilityCheck",  v36);
      }
      goto LABEL_115;
    }

    v22 = sub_100096BF4((uint64_t)a2, @"RSSI");
    id v23 = objc_autoreleasePoolPush();
    if ((uint64_t)v22 >= -70)
    {
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Priority Network with RT traffic and Favorable RSSI - ok to autojoin",  "__WiFiDeviceManagerKnownNetworkSuitabilityCheck",  v36);
      }
LABEL_115:
      __int128 v10 = 1LL;
      goto LABEL_116;
    }

    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Priority Network with RT traffic and Unfavorable RSSI - defer autojoin",  "__WiFiDeviceManagerKnownNetworkSuitabilityCheck",  v36,  v38,  v39,  v40,  v41);
    }
  }

  else if (-[WiFiUserInteractionMonitor isPublicNetwork:]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isPublicNetwork:",  a2) {
         || sub_10009EFD8((uint64_t)a2)
  }
         && -[WiFiUserInteractionMonitor isCellularDataUsable]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isCellularDataUsable"))
  {
    if ([*(id *)(a1 + 8928) confidence] == (id)2)
    {
      objc_msgSend(objc_msgSend(*(id *)(a1 + 8928), "settledDate"), "timeIntervalSinceNow");
      int v30 = v29;
      objc_msgSend(objc_msgSend(*(id *)(a1 + 8928), "settledDate"), "timeIntervalSinceNow");
      if (v30 < 0.0) {
        v31 = -v31;
      }
      if (v31 < 300.0
        && (-[WiFiUserInteractionMonitor isCarModeActive]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isCarModeActive")
         || (*(_DWORD *)(a1 + 3344) | 2) == 6))
      {
        id v23 = objc_autoreleasePoolPush();
        v32 = (void *)qword_100219F60;
        if (qword_100219F60)
        {
          objc_msgSend(objc_msgSend(*(id *)(a1 + 8928), "settledDate"), "timeIntervalSinceNow");
          v34 = v33;
          objc_msgSend(objc_msgSend(*(id *)(a1 + 8928), "settledDate"), "timeIntervalSinceNow");
          if (v34 < 0.0) {
            uint64_t v35 = -v35;
          }
          objc_msgSend( v32,  "WFLog:message:",  3,  "%s: Public, Carrier (no cellular), or Outdoor Network, High Confidence Settlement (%.3fs ago, timeout=%ds), Driving - defer autojoin",  "__WiFiDeviceManagerKnownNetworkSuitabilityCheck",  *(void *)&v35,  300,  v39,  v40,  v41);
        }
      }

      else if (-[WiFiUserInteractionMonitor isLowQualityNetwork:]( +[WiFiUserInteractionMonitor sharedInstance]( &OBJC_CLASS___WiFiUserInteractionMonitor,  "sharedInstance"),  "isLowQualityNetwork:",  a2))
      {
        id v23 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Public, Carrier (no cellular), or Outdoor Network, High Confidence Settlement, Low Quality - defer autojoin",  "__WiFiDeviceManagerKnownNetworkSuitabilityCheck",  v36,  v38,  v39,  v40,  v41);
        }
      }

      else
      {
        if (!-[WiFiUserInteractionMonitor isRealTimeAppActive]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isRealTimeAppActive")
          || !-[WiFiUserInteractionMonitor isCellularInexpensive5G]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isCellularInexpensive5G"))
        {
          id v23 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Public, Carrier (no cellular), or Outdoor Network, High Confidence Settlement, Ok Quality with no RT t raffic or Expensive Cellular - ok to autojoin",  "__WiFiDeviceManagerKnownNetworkSuitabilityCheck",  v36);
          }
          goto LABEL_115;
        }

        id v23 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Public, Carrier (no cellular), or Outdoor Network, High Confidence Settlement, Ok Quality with RT traffi c and Inexpensive Cellular - defer autojoin",  "__WiFiDeviceManagerKnownNetworkSuitabilityCheck",  v36,  v38,  v39,  v40,  v41);
        }
      }
    }

    else if (-[WiFiUserInteractionMonitor isCarModeActive]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isCarModeActive") {
           || (*(_DWORD *)(a1 + 3344) | 2) == 6)
    }
    {
      id v23 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Public, Carrier (no cellular), or Outdoor Network, Low Confidence Settlement, Driving - defer autojoin",  "__WiFiDeviceManagerKnownNetworkSuitabilityCheck",  v36,  v38,  v39,  v40,  v41);
      }
    }

    else if (-[WiFiUserInteractionMonitor isLowQualityNetwork:]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isLowQualityNetwork:",  a2))
    {
      id v23 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Public, Carrier (no cellular), or Outdoor Network, Low Confidence Settlement, Low Quality, Not Driving - defer autojoin",  "__WiFiDeviceManagerKnownNetworkSuitabilityCheck",  v36,  v38,  v39,  v40,  v41);
      }
    }

    else
    {
      if (!-[WiFiUserInteractionMonitor isRealTimeAppActive]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isRealTimeAppActive")
        || !-[WiFiUserInteractionMonitor isCellularInexpensive5G]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isCellularInexpensive5G"))
      {
        id v23 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Public, Carrier (no cellular), or Outdoor Network, Low Confidence Settlement, Ok Quality, Not Driving wi th no RT traffic or Expensive Cellular - ok to autojoin",  "__WiFiDeviceManagerKnownNetworkSuitabilityCheck",  v36);
        }
        goto LABEL_115;
      }

      id v23 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Public, Carrier (no cellular), or Outdoor Network, Low Confidence Settlement, Ok Quality, Not Driving with RT traffic and Inexpensive Cellular - defer autojoin",  "__WiFiDeviceManagerKnownNetworkSuitabilityCheck",  v36,  v38,  v39,  v40,  v41);
      }
    }
  }

  else
  {
    if (!-[WiFiUserInteractionMonitor isRealTimeAppActive]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isRealTimeAppActive")
      || !-[WiFiUserInteractionMonitor isCellularInexpensive5G]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isCellularInexpensive5G"))
    {
      id v23 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Non-Public, Non-Carrier (or cellular available), Non-Outdoor Network, with RT traffic and Inexpensive Cell ular - ok to autojoin",  "__WiFiDeviceManagerKnownNetworkSuitabilityCheck",  v36);
      }
      goto LABEL_115;
    }

    id v23 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Non-Public, Non-Carrier (or cellular available), Non-Outdoor Network, with RT traffic and Inexpensive Cellul ar - defer autojoin",  "__WiFiDeviceManagerKnownNetworkSuitabilityCheck",  v36,  v38,  v39,  v40,  v41);
    }
  }

LABEL_37:
  objc_autoreleasePoolPop(context);
  return v3;
}

    objc_autoreleasePoolPop(v33);
    goto LABEL_38;
  }

  sub_100091280(*(void *)(v15 + 88), (uint64_t)sub_10003BE9C, v15);
  *(void *)(v15 + 80) = a3;
  *(_DWORD *)(v15 + 56) = a4;
  *(void *)&v22 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  buffer[0] = v22;
  buffer[1] = v22;
  if (proc_name(a4, buffer, 0x20u) < 1) {
    id v23 = 0LL;
  }
  else {
    id v23 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)buffer, 0x8000100u);
  }
  *(void *)(v15 + 64) = v23;
  id v24 = CFUUIDCreate(kCFAllocatorDefault);
  *(void *)(v15 + 72) = v24;
  if (!v24) {
    goto LABEL_38;
  }
  id v25 = CFUUIDCreateString(kCFAllocatorDefault, v24);
  unint64_t v26 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "Creating client for %@ (%@)", v23, v25 message];
  }
  objc_autoreleasePoolPop(v26);
  if (v25) {
    CFRelease(v25);
  }
  int v27 = *a7;
  *(_OWORD *)(v15 + 36) = a7[1];
  *(_OWORD *)(v15 + 20) = v27;
  uint64_t v28 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  *(void *)(v15 + 120) = v28;
  if (!v28) {
    goto LABEL_38;
  }
  uint64_t v29 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  *(void *)(v15 + 160) = v29;
  if (!v29) {
    goto LABEL_38;
  }
  int v30 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  *(void *)(v15 + 16_Block_object_dispose(va, 8) = v30;
  if (!v30) {
    goto LABEL_38;
  }
  return v15;
}

  CFStringAppend(theString, @" LQM");
  if ((a1 & 0x80000000) == 0)
  {
LABEL_18:
    if ((a1 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }

      v31 = (const __CFArray *)sub_1000951FC((uint64_t)a2, @"NaiRealmName");
      if (v31)
      {
        v32 = v31;
        uint64_t v33 = CFArrayGetCount(v31);
        if (!(_DWORD)v2 && v33 >= 1)
        {
          v34 = 0LL;
          while (1)
          {
            id v2 = (uint64_t)CFArrayGetValueAtIndex(v32, v34);
            if (v2)
            {
              uint64_t v35 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:3, "%s:%d found NAI Realm in accounts %@", "WiFiNetworkIsScannedNetworkMatchingHS20Account", 5646, v2 message];
              }
              objc_autoreleasePoolPop(v35);
              __int128 v36 = (const __CFArray *)CFDictionaryGetValue(v5, @"ANQP_NAI_REALM_LIST");
              if (v36)
              {
                __int128 v37 = v36;
                __int128 v38 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  [(id)qword_100219F60 WFLog:3, "%s:%d found NaiRealmArray count %ld %@", "WiFiNetworkIsScannedNetworkMatchingHS20Account", 5650, CFArrayGetCount(v37), v37 message];
                }
                objc_autoreleasePoolPop(v38);
                if (CFArrayGetCount(v37) >= 1)
                {
                  __int128 v39 = 0LL;
                  while (1)
                  {
                    __int128 v40 = (const __CFDictionary *)CFArrayGetValueAtIndex(v37, v39);
                    if (v40)
                    {
                      __int128 v41 = CFDictionaryGetValue(v40, @"ANQP_NAI_REALM_NAME");
                      if (v41)
                      {
                        __int128 v42 = v41;
                        if (CFEqual(v41, (CFTypeRef)v2)) {
                          break;
                        }
                      }
                    }

                    if (++v39 >= CFArrayGetCount(v37)) {
                      goto LABEL_53;
                    }
                  }

                  v45 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    [(id)qword_100219F60 WFLog:3, "%s: found response from NAI Realm %@, marking %@ provisioned", "WiFiNetworkIsScannedNetworkMatchingHS20Account", v42, sub_100095BC8(a1) message];
                  }
                  objc_autoreleasePoolPop(v45);
                  __int128 v43 = 0;
                  id v2 = 1LL;
                  goto LABEL_55;
                }
              }

  if (a4 && (v9 & 1) == 0)
  {
    __int128 v40 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Invoking WiFiClientSensingCallback",  "WiFiDeviceManagerSensingEnableAsync");
    }
    objc_autoreleasePoolPop(v40);
    a4(a1, a2, 0LL, v10, a5);
  }

  _Block_object_dispose(&v50, 8);
  _Block_object_dispose(&v54, 8);
  return v10;
}

  -[WiFiUserNotificationHistory handleNotificationResponseForSSID:type:response:]( -[WiFiUserNotificationManager notificationHistory](self, "notificationHistory"),  "handleNotificationResponseForSSID:type:response:",  v27,  v26,  v25);
  if (self->_queue && -[WiFiUserNotificationManager callback](self, "callback"))
  {
    queue = (dispatch_queue_s *)self->_queue;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100135C7C;
    block[3] = &unk_1001E6380;
    block[4] = self;
    void block[5] = v22;
    v50 = v26;
    v51 = v25;
    dispatch_sync(queue, block);
  }

  if (a5) {
    (*((void (**)(id))a5 + 2))(a5);
  }
  -[WiFiUserNotificationManager setVisibleRequest:](self, "setVisibleRequest:", 0LL);
}

void sub_100008B6C(id a1)
{
  qword_1002197E0 = objc_alloc_init(&OBJC_CLASS___WiFiAnalyticsManager);
}

void sub_100009694(_Unwind_Exception *a1)
{
}

void sub_1000096AC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) deviceAnalyticsClient])
  {
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = objc_msgSend( objc_msgSend( *(id *)(a1 + 32),  "deviceAnalyticsClient"),  "neighborChannelsForBSS:ssid:",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
    id v2 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
    id v3 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    id v4 = [v2 countByEnumeratingWithState:&v24 objects:v29 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v25;
      do
      {
        id v7 = 0LL;
        do
        {
          if (*(void *)v25 != v6) {
            objc_enumerationMutation(v2);
          }
          [v3 addObject:*(void *)(*((void *)&v24 + 1) + 8 * (void)v7)];
          id v7 = (char *)v7 + 1;
        }

        while (v5 != v7);
        id v5 = [v2 countByEnumeratingWithState:&v24 objects:v29 count:16];
      }

      while (v5);
    }

    unsigned __int8 v8 = +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "deviceAnalyticsClient"),  "rssiRoamTriggerForBSS:ssid:",  *(void *)(a1 + 40),  *(void *)(a1 + 48)));
    id v9 = objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "deviceAnalyticsClient"),  "neighborsForBSS:ssid:",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
    id v10 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
    if (v9)
    {
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      id v11 = [v9 countByEnumeratingWithState:&v20 objects:v28 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v21;
        do
        {
          v14 = 0LL;
          do
          {
            if (*(void *)v21 != v13) {
              objc_enumerationMutation(v9);
            }
            [v10 addObject:*(void *)(*((void *)&v20 + 1) + 8 * (void)v14)];
            v14 = (char *)v14 + 1;
          }

          while (v12 != v14);
          id v12 = [v9 countByEnumeratingWithState:&v20 objects:v28 count:16];
        }

        while (v12);
      }
    }

    id v15 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
    id v16 = v15;
    if (v3) {
      [v15 setObject:v3 forKey:@"ADAPTIVE_ROAM_CHANNELS_INFO"];
    }
    if (v10) {
      [v16 setObject:v10 forKey:@"SCAN_BSSID_LIST"];
    }
  }

  else
  {
    id v16 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
    unsigned __int8 v8 = (NSNumber *)&off_100204680;
  }

  [v16 setObject:v8 forKey:@"ADAPTIVE_ROAM_RSSI_TRIGGER"];
  if ([*(id *)(a1 + 32) wifiManager])
  {
    if (sub_10006B4D8((uint64_t)[*(id *)(a1 + 32) wifiManager]))
    {
      BOOL v17 = (dispatch_queue_s *)sub_10006B4D8((uint64_t)[*(id *)(a1 + 32) wifiManager]);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      v19[2] = sub_100009984;
      v19[3] = &unk_1001E2778;
      uint64_t v18 = *(void *)(a1 + 32);
      v19[4] = v16;
      v19[5] = v18;
      dispatch_sync(v17, v19);
    }
  }

id sub_100009984(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: request %@", "-[WiFiAnalyticsManager getAdaptiveRoamParams:ssid:]_block_invoke", *(void *)(a1 + 32) message];
  }
  objc_autoreleasePoolPop(v2);
  sub_10008370C((uint64_t)[*(id *)(a1 + 40) wifiManager], *(void *)(a1 + 32));
  return [*(id *)(a1 + 40) setRoamParamsQueryPending:0];
}

int sub_10000A0E8(id a1, unsigned int a2, unsigned int a3)
{
  return sub_100098F54(a2, a3);
}

void sub_10000A548( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10000A560(uint64_t a1, uint64_t a2)
{
}

void sub_10000A570(uint64_t a1)
{
}

void sub_10000A57C(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  id v3 = objc_msgSend(objc_msgSend(v2, "deviceAnalyticsClient"), "copyAllStoredNetworkSsidsWithTrait:", 0);
  if (v3)
  {
    id v4 = v3;
    objc_msgSend(objc_msgSend(v2, "movingNetworkSsidsCache"), "removeAllObjects");
    [*(id *)(*(void *)(a1 + 32) + 40) addObjectsFromArray:v4];
  }

  id v5 = objc_msgSend(objc_msgSend(v2, "deviceAnalyticsClient"), "copyAllStoredNetworkSsidsWithTrait:", 1);
  if (v5)
  {
    uint64_t v6 = v5;
    objc_msgSend(objc_msgSend(v2, "omnipresentNetworkSsidsCache"), "removeAllObjects");
    objc_msgSend(objc_msgSend(v2, "omnipresentNetworkSsidsCache"), "addObjectsFromArray:", v6);
  }

  id v7 = objc_msgSend(objc_msgSend(v2, "deviceAnalyticsClient"), "copyAllStoredNetworkSsidsWithTrait:", 2);
  if (v7)
  {
    unsigned __int8 v8 = v7;
    objc_msgSend(objc_msgSend(v2, "historicallyBadLinkQualityNetworkSsidsCache"), "removeAllObjects");
    objc_msgSend(objc_msgSend(v2, "historicallyBadLinkQualityNetworkSsidsCache"), "addObjectsFromArray:", v8);
  }

  objc_msgSend(v2, "setDateTraitCachesUpdated:", +[NSDate date](NSDate, "date"));
  [v2 setTraitsCacheUpdateBusy:0];
  id v9 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: Network traits caches updated at %@", "-[WiFiAnalyticsManager updateNetworkTraitsCache]_block_invoke", objc_msgSend(v2, "dateTraitCachesUpdated") message];
  }
  objc_autoreleasePoolPop(v9);
  id v10 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: Moving Networks: %@", "-[WiFiAnalyticsManager updateNetworkTraitsCache]_block_invoke", objc_msgSend(v2, "movingNetworkSsidsCache") message];
  }
  objc_autoreleasePoolPop(v10);
  id v11 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: Omnipresent Networks: %@", "-[WiFiAnalyticsManager updateNetworkTraitsCache]_block_invoke", objc_msgSend(v2, "omnipresentNetworkSsidsCache") message];
  }
  objc_autoreleasePoolPop(v11);
  id v12 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: HistoricallyBadQuality networks: %@", "-[WiFiAnalyticsManager updateNetworkTraitsCache]_block_invoke", objc_msgSend(v2, "historicallyBadLinkQualityNetworkSsidsCache") message];
  }
  objc_autoreleasePoolPop(v12);
}

LABEL_22:
  id v15 = (void *)v26[5];
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(v31, 8);
  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(&v36, 8);
  return v15;
}

      CFRelease(v5);
      goto LABEL_23;
    }

    unsigned __int8 v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: invalid device managers info",  "__WiFiManagerCompanionAssistedAJTimeout");
    }
    objc_autoreleasePoolPop(v8);
    if (v5) {
      goto LABEL_22;
    }
  }

  else
  {
    id v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: corecaptureOnAssistedAJFailure not enabled",  "__WiFiManagerCompanionAssistedAJTimeout");
    }
    objc_autoreleasePoolPop(v10);
  }

    __int128 v20 = objc_autoreleasePoolPush();
    v82 = v14;
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: examining <Automatic> network set %@ for a network service matching BSD name %@ and interface type %@", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", SetID, v84, kSCNetworkInterfaceTypeIEEE80211, v75 message];
    }
LABEL_30:
    objc_autoreleasePoolPop(v20);
    __int128 v22 = SCNetworkSetCopyServices(v11);
    __int128 v23 = v22;
    if (!v22 || CFArrayGetCount(v22) < 1) {
      goto LABEL_62;
    }
    __int128 v24 = 0LL;
    __int128 v25 = 1;
    do
    {
      __int128 v26 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v23, v24);
      if (v26)
      {
        __int128 v27 = v26;
        Interface = SCNetworkServiceGetInterface(v26);
        if (Interface)
        {
          uint64_t v29 = Interface;
          BSDName = SCNetworkInterfaceGetBSDName(Interface);
          InterfaceType = SCNetworkInterfaceGetInterfaceType(v29);
          v32 = InterfaceType;
          if (!BSDName)
          {
            if (!InterfaceType) {
              goto LABEL_53;
            }
            uint64_t v35 = CFEqual(InterfaceType, kSCNetworkInterfaceTypeIEEE80211);
            goto LABEL_49;
          }

          uint64_t v33 = CFEqual(BSDName, v84);
          v34 = v33;
          if (v32)
          {
            uint64_t v35 = CFEqual(v32, kSCNetworkInterfaceTypeIEEE80211);
            if (v34 && v35)
            {
              __int128 v36 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:4, "%s: FOUND network service %@ with matching BSD name %@ and interface type %@", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", SCNetworkServiceGetServiceID(v27), BSDName, v32 message];
              }
              __int128 v25 = 0;
LABEL_52:
              objc_autoreleasePoolPop(v36);
              goto LABEL_53;
            }

            if (v34)
            {
LABEL_47:
              __int128 v36 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:4, "%s: network service %@ with matching BSD name %@ but interface type %@ is present", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", SCNetworkServiceGetServiceID(v27), BSDName, v32 message];
              }
              goto LABEL_52;
            }

  __int128 v23 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Status of networks with deleted keychain password, count: %ld",  "WiFiManagerCheckForUnexpectedPasswordDelete",  CFArrayGetCount(a1[275]));
  }
  objc_autoreleasePoolPop(v23);
  if (v12) {
    CFRelease(v12);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v14) {
    CFRelease(v14);
  }
}

      [(id)v2[374] timeIntervalSinceReferenceDate];
      __int128 v22 = v21;
      __int128 v23 = objc_autoreleasePoolPush();
      if (sub_10006AA50((void *)v1, @"isWiFiPNLMigrationComplete") == kCFBooleanTrue)
      {
        SCPreferencesSynchronize(*(SCPreferencesRef *)(v1 + 920));
        __int128 v24 = sub_10006AA50((void *)v1, @"List of known networks");
        if (v24)
        {
          __int128 v25 = sub_10003A530(v24);
          if (v25)
          {
            __int128 v26 = v25;
            __int128 v27 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
            if (CFArrayGetCount(v26) >= 1)
            {
              uint64_t v28 = 0LL;
              do
              {
                ValueAtIndex = (CFDictionaryRef *)CFArrayGetValueAtIndex(v26, v28);
                if (ValueAtIndex)
                {
                  int v30 = sub_1000A063C(ValueAtIndex);
                  if (v30)
                  {
                    v31 = v30;
                    if (![v30 addedAt] && !objc_msgSend(v31, "lastJoinedByUserAt"))
                    {
                      v32 = (NSDate *)[v31 updatedAt];
                      if (!v32)
                      {
                        v32 = (NSDate *)[v31 lastJoinedBySystemAt];
                        if (!v32) {
                          v32 = +[NSDate date](&OBJC_CLASS___NSDate, "date");
                        }
                      }

                      [v31 setAddedAt:v32];
                    }

                    uint64_t v33 = [v31 identifier];
                    v34 = [v31 externalForm];
                    if (v33 && v34) {
                      [v27 setObject:v34 forKeyedSubscript:v33];
                    }
                  }
                }

                ++v28;
              }

              while (CFArrayGetCount(v26) > v28);
            }

            [*(id *)(v1 + 944) addEntriesFromDictionary:v27];
            [*(id *)(v1 + 944) synchronize];
            CFRelease(v26);
            id v2 = &ACAccountStoreDidChangeNotification_ptr;
          }
        }
      }

      objc_autoreleasePoolPop(v23);
      uint64_t v35 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"/Library/Preferences/SystemConfiguration/%@",  @"com.apple.wifi-networks.plist");
      -[NSFileManager copyItemAtPath:toPath:error:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "copyItemAtPath:toPath:error:",  v35,  -[NSString stringByAppendingPathExtension:](v35, "stringByAppendingPathExtension:", @"backup"),  0LL);
      sub_10006D08C((void *)v1, @"List of known networks", 0LL, 0);
      __int128 v36 = objc_autoreleasePoolPush();
      __int128 v37 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        [(id)v2[374] timeIntervalSinceReferenceDate];
        objc_msgSend( v37,  "WFLog:message:",  3,  "%s: PNL migration to unified KVS took %fs",  "WiFiManagerMigratePNL",  v38 - v22);
      }

      objc_autoreleasePoolPop(v36);
      goto LABEL_44;
    }

    +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
    unsigned __int8 v8 = v7;
    id v9 = *(const __SCPreferences **)(v1 + 912);
    id v10 = *(const __SCPreferences **)(v1 + 920);
    id v11 = (void *)sub_10003AFF4((uint64_t)"__WiFiManagerMigratePNLToStandaloneClassC");
    if (!sub_10003A25C(v9))
    {
      v78 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Could not acquire lock oldPrefs",  "__WiFiManagerMigratePNLToStandaloneClassC");
      }
      objc_autoreleasePoolPop(v78);
      id v2 = &ACAccountStoreDidChangeNotification_ptr;
      goto LABEL_19;
    }

    SCPreferencesSynchronize(v9);
    id v12 = SCPreferencesCopyKeyList(v9);
    uint64_t v13 = v12;
    v83 = v11;
    if (v12)
    {
      v97.length = CFArrayGetCount(v12);
      v97.location = 0LL;
      if (!CFArrayContainsValue(v13, v97, @"List of known networks"))
      {
        id v16 = v6;
        id v15 = 0;
        BOOL v17 = 1;
        goto LABEL_15;
      }

      Value = SCPreferencesGetValue(v9, @"List of known networks");
      if (!Value) {
        goto LABEL_9;
      }
      if (sub_10003A25C(v10))
      {
        if (!SCPreferencesSetValue(v10, @"List of known networks", Value))
        {
          id v16 = v6;
          v81 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Could not set records",  "__WiFiManagerMigratePNLToStandaloneClassC");
          }
          objc_autoreleasePoolPop(v81);
          BOOL v17 = 0;
          id v15 = 0;
          goto LABEL_11;
        }

  id v16 = sub_10003BEDC((uint64_t)deviceManager);
  if (sub_100050F18(v16, 0x64u))
  {
    BOOL v17 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WiFiBatteryMgmt :  Default Power index cannot be set!",  "-[WiFiBatteryManager setupDevice:]");
    }
    objc_autoreleasePoolPop(v17);
  }

  uint64_t v18 = sub_10003BEDC((uint64_t)self->_deviceManager);
  uint64_t v19 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WiFiBatteryMgmt :  Default thermal index cannot be set!",  "-[WiFiBatteryManager setupDevice:]");
  }
  __int128 v20 = 1;
LABEL_30:
  objc_autoreleasePoolPop(v19);
  return v20;
}

  return v12;
}

  CFRelease(v13);
  __int128 v20 = v19;
  if (v11) {
    goto LABEL_25;
  }
LABEL_26:
  if (ExternalRepresentation) {
LABEL_27:
  }
    CFRelease(ExternalRepresentation);
  return v20;
}

    __int128 v24 = sub_100012CEC((uint64_t)v19);
    if (v24)
    {
      __int128 v25 = v24;
      sub_10003A920(v24, a4, a5);
      CFRelease(v16);
      id v16 = v25;
    }

    CFRelease(v16);
    __int128 v26 = (CFDictionaryRef)v19;
    goto LABEL_25;
  }

  CFDictionaryGetValueIfPresent(a3, @"kWiFiHostApWiFiNetworkIeValidKey", (const void **)&v31);
  if (!v31 || !*(_DWORD *)(a5 + 6756) || !v7[1264]) {
    goto LABEL_36;
  }
  uint64_t v18 = (const __CFString *)CFDictionaryGetValue(a3, @"WiFiHostApWiFiNetworkIeSsidKey");
  if (!v18)
  {
    uint64_t v28 = objc_autoreleasePoolPush();
    uint64_t v29 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      int v30 = "Failed to get Network SSID Info";
      goto LABEL_51;
    }

          __int128 v21 = objc_autoreleasePoolPush();
          __int128 v22 = (void *)qword_100219F60;
          if (qword_100219F60)
          {
            __int128 v23 = sub_100095BC8(v10);
            __int128 v24 = v11;
            __int128 v25 = v12;
            __int128 v26 = Mutable;
            __int128 v27 = sub_1000971AC((uint64_t)v10);
            uint64_t v28 = sub_1000974EC((uint64_t)v10);
            uint64_t v29 = v27;
            Mutable = v26;
            v63 = v25;
            id v11 = v24;
            v62 = v23;
            id v7 = v65;
            a1 = v66;
            [v22 WFLog:4, "%s: network %@ excluded from BGScan: isWoWBlacklisted=%d isAJBlacklisted=%d isTDBlacklisted=%d isAdHoc=%d isWoWAllowed=%d isAutoJoinAllowedInLockdownMode=%d isKnownNetworkDisallowed=%d", "WiFiDeviceManagerSetBackgroundScan", v62, v63, v69, v68, v29, v28, v20, v70 message];
          }

          objc_autoreleasePoolPop(v21);
          id v5 = v67;
          goto LABEL_25;
        }

    *(_DWORD *)(a1 + 3344) = a2;
    *(double *)(a1 + 3352) = a3;
    sub_1000160F8(*(void *)(a1 + 120), a2, a3);
    sub_100055A60(*(void *)(a1 + 64), *(_DWORD *)(a1 + 3344) > 1u);
    id v10 = *(void **)(a1 + 7320);
    if (v10) {
      [v10 setMotionState:sub_10008FDAC(*(_DWORD *)(a1 + 3344))];
    }
    uint64_t result = +[WiFiRoamManager sharedWiFiRoamManager](&OBJC_CLASS___WiFiRoamManager, "sharedWiFiRoamManager");
    if (result)
    {
      [(id)result setDeviceMotionState:*(unsigned int *)(a1 + 3344)];
      return 0LL;
    }

    return result;
  }

  id v12 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null deviceManager",  "WiFiDeviceManagerSetMotionState");
  }
  objc_autoreleasePoolPop(v12);
  return 4294963396LL;
}

  objc_autoreleasePoolPop(v7);
  if (v8) {
    CFRelease(v8);
  }
  return v3;
}

    CFRelease(v6);
  }

  else
  {
    ValueAtIndex = 0LL;
  }

  if (CFStringCompare((CFStringRef)value, @"kAutoJoinBlacklistSet", 0LL))
  {
    if (CFStringCompare((CFStringRef)value, @"kAutoJoinBlacklistClear", 0LL)) {
      goto LABEL_34;
    }
    if (ValueAtIndex)
    {
      if (valuePtr != 13)
      {
        id v11 = sub_1000A335C((uint64_t)ValueAtIndex);
        [*(id *)(a1 + 6632) removeNetworkDenyListInfoWithReason:valuePtr forScanResult:v11];

        goto LABEL_34;
      }

      goto LABEL_71;
    }

  objc_autoreleasePoolPop(v6);
}

void sub_10000B4C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36)
{
}

void sub_10000B518(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v8 = [a2 objectForKeyedSubscript:@"cachedSsid"];
  id v9 = [a2 objectForKeyedSubscript:@"cachedDate"];
  id v10 = [a2 objectForKeyedSubscript:@"cachedUsageDict"];
  if (!v8 || !v9 || (id v11 = v10) == 0LL)
  {
    [*(id *)(a1 + 32) addIndex:a3];
    return;
  }

  [v9 timeIntervalSinceNow];
  if (v12 < -43200.0)
  {
    id v16 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: Will remove object from usageCache for ssid %@", "-[WiFiAnalyticsManager getNetworkUsageDictionary:]_block_invoke", v8 message];
    }
    objc_autoreleasePoolPop(v16);
    [*(id *)(a1 + 32) addIndex:a3];
  }

  else
  {
    double v13 = -v12;
    uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8LL);
    if (*(double *)(v14 + 24) < v13)
    {
      *(double *)(v14 + 24) = v13;
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = a3;
      *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL) = v8;
    }

    if ([v8 isEqualToString:*(void *)(a1 + 40)])
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 1;
      id v15 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: Using object from usageCache for ssid %@", "-[WiFiAnalyticsManager getNetworkUsageDictionary:]_block_invoke", *(void *)(a1 + 40) message];
      }
      objc_autoreleasePoolPop(v15);
      *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL) = v11;
LABEL_15:
      *a4 = 1;
    }
  }

uint64_t sub_10000B77C()
{
  return 0LL;
}

uint64_t sub_10000B784()
{
  return 0LL;
}

LABEL_18:
        uint64_t v14 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: errorListArray is NULL! ",  "-[WiFiSoftErrorManager fetchSoftErrorContext:softErrorType:]");
        }
        break;
    }
  }

  else
  {
    uint64_t v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null deviceContext",  "-[WiFiSoftErrorManager fetchSoftErrorContext:softErrorType:]");
    }
  }

  objc_autoreleasePoolPop(v14);
  id v11 = 0LL;
  id v9 = 0LL;
LABEL_21:

  return v11;
}

            sub_10014BE90(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 24LL, 0LL, 0, 0);
            if (!v10) {
              return;
            }
            goto LABEL_19;
          }

          double v13 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "Already ranging, will not dispatch report.");
          }
          objc_autoreleasePoolPop(v13);
        }
      }
    }

    else
    {
      uint64_t v18 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null deviceEventMasks",  "WiFiClientDispatchRangingReportEvent",  valuePtr);
      }
      objc_autoreleasePoolPop(v18);
    }
  }

      id v2 = (void *)*v5;

      return v2;
    }

    return (void *)v2[114];
  }

  return v2;
}

  sub_10003A8FC((vm_address_t)a2, a3);
  return 0LL;
}

  sub_10003A8FC((vm_address_t)a2, a3);
  sub_10003A8FC((vm_address_t)a4, a5);
  return 0LL;
}

    *a4 = v14;
    goto LABEL_19;
  }

  return v8;
}

  if (*(_BYTE *)(a1 + 256) && *(_DWORD *)(a1 + 268))
  {
    id v15 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Roam test mode enabled. AP Environment is forced to type %d",  *(unsigned int *)(a1 + 268));
    }
    objc_autoreleasePoolPop(v15);
    if (v5) {
      CFRelease(v5);
    }
    return *(unsigned int *)(a1 + 268);
  }

  id v16 = 2592000LL;
  uint64_t v6 = sub_1000D91B0(a1, a2, 1);
  if (*(_BYTE *)(a1 + 256))
  {
    v60 = *(unsigned int *)(a1 + 260);
    BOOL v17 = *(_DWORD *)(a1 + 264);
    if (v17) {
      id v16 = v17;
    }
    else {
      id v16 = 2592000LL;
    }
  }

  else
  {
    v60 = 259200LL;
  }

  v66 = sub_1000951FC((uint64_t)a2, @"BSSID");
  uint64_t v18 = (const __CFArray *)sub_100096710((uint64_t)a2);
  uint64_t v19 = v18;
  if ((_DWORD)v13 || v18)
  {
    v62 = v13;
    v63 = v6;
    v65 = a2;
    if (v18)
    {
      if (CFArrayGetCount(v18) < 1)
      {
        theArray = 0LL;
        __int128 v21 = 0LL;
        v61 = 0LL;
        __int128 v20 = 0LL;
      }

      else
      {
        __int128 v20 = 0LL;
        v61 = 0LL;
        __int128 v21 = 0LL;
        __int128 v22 = 0LL;
        theArray = 0LL;
        do
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, v22);
          if (ValueAtIndex)
          {
            __int128 v24 = ValueAtIndex;
            Value = (const __CFDate *)CFDictionaryGetValue(ValueAtIndex, @"lastRoamed");
            if (Value)
            {
              __int128 v26 = Value;
              __int128 v27 = CFDictionaryGetValue(v24, @"BSSID");
              if (v27)
              {
                if (!v66
                  || (uint64_t v28 = v27, CFEqual(v66, v27))
                  || CFDateGetTimeIntervalSinceDate(v5, v26) <= (double)v16)
                {
                  v31 = (const __CFNumber *)CFDictionaryGetValue(v24, @"CHANNEL_FLAGS");
                  if (v31)
                  {
                    valuePtr[0] = 0;
                    CFNumberGetValue(v31, kCFNumberIntType, valuePtr);
                    if ((valuePtr[0] & 8) != 0)
                    {
                      __int128 v21 = (v21 + 1);
                    }

                    else if ((valuePtr[0] & 0x10) != 0)
                    {
                      v61 = (v61 + 1);
                    }

                    else
                    {
                      __int128 v20 = ((valuePtr[0] >> 13) & 1) + v20;
                    }
                  }
                }

                else
                {
                  uint64_t v29 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    [(id)qword_100219F60 WFLog:3, "%s: BSSID %@ has not been seen for more than %d secs.", "__WiFiDeviceManagerEvaluateAPEnvironment", v28, v16 message];
                  }
                  objc_autoreleasePoolPop(v29);
                  Mutable = theArray;
                  if (theArray
                    || (Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks)) != 0LL)
                  {
                    theArray = Mutable;
                    CFArrayAppendValue(Mutable, v28);
                  }

                  else
                  {
                    theArray = 0LL;
                  }
                }
              }
            }
          }

          ++v22;
        }

        while (v22 < CFArrayGetCount(v19));
      }

      uint64_t v33 = objc_autoreleasePoolPush();
      v32 = v61;
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: WiFiRoam : BSS List info for network : %@ : chanCount5GHz: [%d] chanCount24GHz: [%d] chanCount6GHz: [%d]", "__WiFiDeviceManagerEvaluateAPEnvironment", sub_100095BC8(v65), v61, v21, v20 message];
      }
      objc_autoreleasePoolPop(v33);
      if ((_DWORD)v62)
      {
        else {
          __int128 v21 = v21;
        }
        else {
          v32 = v61;
        }
        else {
          __int128 v20 = v20;
        }
      }
    }

    else
    {
      theArray = 0LL;
      __int128 v21 = *(unsigned __int8 *)(a1 + 3814);
      v32 = *(unsigned __int8 *)(a1 + 3815);
      __int128 v20 = *(unsigned __int8 *)(a1 + 3816);
    }

    v34 = (v32 + v21 + v20);
    if (sub_100055A54(*(void *)(a1 + 64)))
    {
      uint64_t v35 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: WiFiRoam : AP environment for network : %@ : bssCount: [%d] chanCount5GHz: [%d] chanCount24GHz: [%d] chanCount6GHz: [%d]", "__WiFiDeviceManagerEvaluateAPEnvironment", sub_100095BC8(v65), v34, v32, v21, v20 message];
      }
      objc_autoreleasePoolPop(v35);
      if (v34 >= 4)
      {
        __int128 v36 = 0;
        if ((_DWORD)v20) {
          __int128 v37 = (_DWORD)v21 == 0;
        }
        else {
          __int128 v37 = 1;
        }
        if (v37 || (_DWORD)v32 == 0) {
          id v7 = 4LL;
        }
        else {
          id v7 = 6LL;
        }
        goto LABEL_129;
      }

      if ((_DWORD)v34 == 3 || v32 > 1 || v21 > 1 || v20 >= 2)
      {
        else {
          v45 = 6;
        }
        if ((_DWORD)v20) {
          id v7 = v45;
        }
        else {
          id v7 = 4LL;
        }
        __int128 v36 = 1;
LABEL_129:
        if ((_DWORD)v20 && _os_feature_enabled_impl("CoreWiFi", "WiFi6E"))
        {
          if ((_DWORD)v7 == 4) {
            v51 = 6;
          }
          else {
            v51 = v7;
          }
          if (v51 == 3) {
            id v7 = 5LL;
          }
          else {
            id v7 = v51;
          }
        }

        goto LABEL_137;
      }

      if (v63)
      {
        __int128 v43 = sub_10009A340((uint64_t)v63);
        v44 = (const __CFDate *)sub_10009A1FC(v63);
        if (v44)
        {
          __int128 v43 = v43 + CFDateGetTimeIntervalSinceDate(v5, v44);
LABEL_123:
          if (v43 < (double)v60)
          {
            v53 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WiFiRoam : network usage requirement has not been met (%f < %d). Returning learning environment.",  "__WiFiDeviceManagerEvaluateAPEnvironment",  *(void *)&v43,  v60);
            }
            id v7 = 1LL;
            __int128 v40 = v65;
            uint64_t v6 = v63;
            goto LABEL_150;
          }

          if ((_DWORD)v34 == 2)
          {
            __int128 v36 = 0;
            id v7 = 3LL;
          }

          else
          {
            __int128 v36 = 0;
            if ((_DWORD)v34 == 1) {
              id v7 = 2LL;
            }
            else {
              id v7 = 1LL;
            }
          }

          goto LABEL_129;
        }
      }

      else
      {
        v49 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: Network : %@ is not in known network list", "__WiFiDeviceManagerEvaluateAPEnvironment", sub_100095BC8(v65) message];
        }
        objc_autoreleasePoolPop(v49);
        __int128 v43 = 0.0;
      }

      v50 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: WiFiRoam : failed to get last association date for %@.", "__WiFiDeviceManagerEvaluateAPEnvironment", sub_100095BC8(v65) message];
      }
      objc_autoreleasePoolPop(v50);
      goto LABEL_123;
    }

    __int128 v39 = v32;
    __int128 v36 = 0;
    id v7 = 4LL;
    if (v34 > 2)
    {
LABEL_137:
      __int128 v40 = v65;
      goto LABEL_138;
    }

    __int128 v40 = v65;
    if (v39 > 1 || v21 > 1)
    {
LABEL_138:
      uint64_t v6 = v63;
      if (v63 && sub_1000A58CC((uint64_t)v63))
      {
        if ((_DWORD)v7 == 5)
        {
          v52 = objc_autoreleasePoolPush();
          id v7 = 3LL;
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WiFiRoam : AP environment downgraded from TriBandSingleAP to DualBandSingleAp due to 6Emode",  "__WiFiDeviceManagerEvaluateAPEnvironment");
          }
        }

        else
        {
          if ((_DWORD)v7 != 6) {
            goto LABEL_148;
          }
          v52 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WiFiRoam : AP environment downgraded from TriBandMultiAP to MultiAp due to 6Emode",  "__WiFiDeviceManagerEvaluateAPEnvironment");
          }
          id v7 = 4LL;
        }

        objc_autoreleasePoolPop(v52);
      }

    LODWORD(v12) = 0;
    double v13 = 3;
LABEL_22:
    *(_DWORD *)(a1 + 68_Block_object_dispose(va, 8) = v13;
    goto LABEL_23;
  }

  id v7 = *(_DWORD *)(a1 + 664);
  *(_DWORD *)(a1 + 664) = v7 + 1;
  if (v7 > 1)
  {
    LODWORD(v12) = 0;
    *(_DWORD *)(a1 + 664) = 0;
LABEL_21:
    double v13 = 4;
    goto LABEL_22;
  }

  if (v6 > 0x90)
  {
    id v8 = (v6 & 0x80000007) == 5;
    id v9 = 4;
  }

  else
  {
    id v8 = (v6 & 7) == 0;
    id v9 = -4;
  }

  if (!v8) {
    id v9 = -v9;
  }
  double v12 = (v6 + v9);
  __int128 v37 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: CarPlay channel - orginal(%d) adjacent(%d)",  "__WiFiDeviceManagerScanCarPlayRemainingChannels",  *(unsigned int *)(a1 + 668),  v12);
  }
  objc_autoreleasePoolPop(v37);
LABEL_23:
  uint64_t v14 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: CarPlay scan state %d",  "__WiFiDeviceManagerScanCarPlayRemainingChannels",  *(unsigned int *)(a1 + 688));
  }
  objc_autoreleasePoolPop(v14);
  id v15 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (!v15)
  {
    __int128 v21 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Couldn't allocate suppChannelList",  "__WiFiDeviceManagerScanCarPlayRemainingChannels");
    }
    objc_autoreleasePoolPop(v21);
    goto LABEL_33;
  }

  id v16 = v15;
  BOOL v17 = *(void *)(a1 + 64);
  uint64_t v18 = (const void *)sub_100043E8C(v17);
  uint64_t v19 = sub_100044EB0(v17, v18, v16);
  if ((_DWORD)v19)
  {
    id v11 = v19;
    __int128 v20 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Couldn't get supported channels",  "__WiFiDeviceManagerScanCarPlayRemainingChannels");
    }
    objc_autoreleasePoolPop(v20);
    goto LABEL_81;
  }

  __int128 v22 = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
  __int128 v23 = *(_DWORD *)(a1 + 688);
  if (v23 == 4)
  {
LABEL_37:
    sub_100103660(a1);
    goto LABEL_39;
  }

  if (v23 != 3)
  {
    if (v23 != 2) {
      goto LABEL_39;
    }
    goto LABEL_37;
  }

  *(_DWORD *)(a1 + 6160) = 0;
LABEL_39:
  if (CFArrayGetCount(v16) >= 1)
  {
    for (i = 0LL; i < CFArrayGetCount(v16); ++i)
    {
      valuePtr = -1431655766;
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, i);
      if (ValueAtIndex)
      {
        __int128 v26 = ValueAtIndex;
        Value = (void *)CFDictionaryGetValue(ValueAtIndex, @"SUP_CHANNEL");
        uint64_t v28 = (void *)CFDictionaryGetValue(v26, @"SUP_CHANNEL_FLAGS");
        if (Value)
        {
          if (v28)
          {
            *(_OWORD *)keys = *(_OWORD *)off_1001E4F98;
            values[0] = Value;
            values[1] = v28;
            uint64_t v29 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
            if (!v29)
            {
              __int128 v38 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Couldn't allocate channelEntry",  "__WiFiDeviceManagerScanCarPlayRemainingChannels");
              }
              objc_autoreleasePoolPop(v38);
              id v11 = 4294963394LL;
LABEL_78:
              uint64_t v33 = v22;
              goto LABEL_79;
            }

            int v30 = v29;
            CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &valuePtr);
            v31 = *(_DWORD *)(a1 + 688);
            if (v31 == 4)
            {
              if (valuePtr >= 36) {
                goto LABEL_58;
              }
            }

            else
            {
              if (v31 == 2)
              {
                if ((_DWORD)v12 == valuePtr)
                {
                  if (v22) {
                    CFStringAppendFormat(v22, 0LL, @"%@ ", Value);
                  }
                  CFArrayAppendValue(v4, v30);
                  break;
                }

                goto LABEL_61;
              }

              if (v31 == 3 && valuePtr <= 14)
              {
LABEL_58:
                if (v22) {
                  CFStringAppendFormat(v22, 0LL, @"%@ ", Value);
                }
                CFArrayAppendValue(v4, v30);
              }
            }

    v85.length = CFArrayGetCount((CFArrayRef)a2);
    v85.location = 0LL;
    CFArraySortValues((CFMutableArrayRef)a2, v85, (CFComparatorFunction)sub_10009C3F0, 0LL);
    id v16 = *(const __CFDictionary **)(a1 + 32);
    if (!v16) {
      goto LABEL_69;
    }
    if (sub_100134DA8(v16, (CFArrayRef)a2))
    {
      BOOL v17 = *(double *)(a1 + 40);
      uint64_t v18 = v9 - v17;
      uint64_t v19 = v17 == 0.0;
      __int128 v20 = 0.0;
      if (!v19) {
        __int128 v20 = v18;
      }
      if (v20 > 1800.0) {
        __int128 v20 = 1800.0;
      }
      *(double *)(a1 + 4_Block_object_dispose(va, 8) = *(double *)(a1 + 48) + v20;
      __int128 v21 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        __int128 v22 = "monitored";
        if (!*(_BYTE *)(a1 + 56)) {
          __int128 v22 = "unmonitored";
        }
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "ATJManager: device still at %s atj point for %f seconds",  v22,  *(void *)(a1 + 48));
      }

      objc_autoreleasePoolPop(v21);
      __int128 v23 = *(__CFDictionary **)(a1 + 32);
      if (v23)
      {
        a2 = 0LL;
LABEL_101:
        v69 = CFAbsoluteTimeGetCurrent();
        v70 = CFDateCreate(kCFAllocatorDefault, v69);
        if (v70)
        {
          v71 = v70;
          CFDictionarySetValue(v23, @"atjHistTblEntLastSeenTimeStamp", v70);
          CFRelease(v71);
        }

    NETRBErrorLog((uint64_t)"xpc_dictionary_create() failed", v27, v28, v29, v30, v31, v32, v33, v43);
    goto LABEL_10;
  }

  if (xpc_dictionary_get_uint64(a3, off_100219688) == 2003)
  {
    __int128 v26 = "service object destroyed before service completed";
    goto LABEL_9;
  }

  uint64_t v35 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (!v35) {
    goto LABEL_18;
  }
  v34 = v35;
  uint64 = xpc_dictionary_get_uint64(a3, off_100219688);
  else {
    __int128 v41 = 5003LL;
  }
  xpc_dictionary_set_uint64(v34, netrbClientNotificationKey, v41);
  if (v10 != 1014 || uint64 != 2000)
  {
    goto LABEL_17;
  }

  __int128 v42 = xpc_dictionary_get_uint64(a3, off_100219678);
  if (v42)
  {
    __int128 v38 = v42;
    __int128 v36 = netrbClientErrorCode;
    __int128 v37 = v34;
    goto LABEL_16;
  }

LABEL_29:
      }
    }

    else
    {
      id v15 = 0LL;
    }

    __int128 v25 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s:(Soft Error):Slow AutoJoin Error Detected !",  "-[WiFiSoftErrorManager wifiSoftErrorWiFiAutoJoinEventHandler:]");
    }
    objc_autoreleasePoolPop(v25);
    -[WiFiSoftErrorContext setErrorState:](v31, "setErrorState:", 2LL);
    -[WiFiSoftErrorManager wifiSoftErrorsInProcessStateSet:](self, "wifiSoftErrorsInProcessStateSet:", 4LL);
    -[WiFiSoftErrorManager WiFiSoftErrorReporting:deviceContext:displayString:]( self,  "WiFiSoftErrorReporting:deviceContext:displayString:",  4LL,  a3,  0LL);
    -[WiFiSoftErrorManager wifiSoftErrorMitigation:mitigationContext:]( self,  "wifiSoftErrorMitigation:mitigationContext:",  4LL,  a3);
LABEL_33:

    __int128 v26 = v29;
LABEL_34:

    return;
  }

  uint64_t v28 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: failed to alloc autoJoinDelayedError",  "-[WiFiSoftErrorManager wifiSoftErrorWiFiAutoJoinEventHandler:]");
  }
LABEL_42:
  objc_autoreleasePoolPop(v28);
}

        id v5 = cf[0];
        if (cf[1]) {
          ((void (*)(uint64_t *, CFTypeRef, void, void, uint64_t, CFTypeRef))cf[1])( a1,  v7[1],  0LL,  0LL,  82LL,  v9[0]);
        }
        goto LABEL_49;
      case 0xA:
        if (BYTE8(v10))
        {
          a1[586] = 0LL;
          a1[587] = 0LL;
        }

        if (cf[1]) {
          ((void (*)(uint64_t *, CFTypeRef, uint64_t, CFTypeRef))cf[1])(a1, v7[1], 82LL, v9[0]);
        }
        if (v7[1])
        {
          CFRelease(v7[1]);
          v7[1] = 0LL;
        }

        if (cf[0])
        {
          CFRelease(cf[0]);
          cf[0] = 0LL;
        }

        if (v9[1])
        {
          CFRelease(v9[1]);
          v9[1] = 0LL;
        }

        break;
      case 0xB:
        sub_1000577BC( (uint64_t)a1,  v7[1],  (uint64_t)cf[0],  (void (*)(uint64_t, const void *, uint64_t, uint64_t))cf[1],  (uint64_t)v9[0]);
        if (cf[0])
        {
          CFRelease(cf[0]);
          cf[0] = 0LL;
        }

        if (v7[1])
        {
          CFRelease(v7[1]);
          v7[1] = 0LL;
        }

        break;
      case 0xC:
        if (BYTE8(v10))
        {
          a1[643] = 0LL;
          a1[644] = 0LL;
        }

        id v5 = cf[0];
        if (cf[1]) {
          ((void (*)(uint64_t *, CFTypeRef, void, uint64_t, CFTypeRef))cf[1])(a1, v7[1], 0LL, 82LL, v9[0]);
        }
LABEL_49:
        if (v7[1])
        {
          CFRelease(v7[1]);
          v7[1] = 0LL;
        }

  objc_autoreleasePoolPop(v18);
  if (v7) {
LABEL_21:
  }
    CFRelease(v7);
}

  objc_autoreleasePoolPop(v18);
LABEL_22:
  CFRelease(v9);
}

  CFStringAppend(theString, @" ScCu");
  if ((a1 & 0x80) == 0)
  {
LABEL_10:
    if ((a1 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }

        __int128 v26 = (const __CFNumber *)CFDictionaryGetValue(v21, @"trigDisconnectCount");
        if (!v26) {
          goto LABEL_35;
        }
        CFNumberGetValue(v26, kCFNumberIntType, &valuePtr);
        if ((v44 & 1) != 0)
        {
          if (!v42) {
            goto LABEL_35;
          }
          __int128 v27 = valuePtr & 0xFF00 | (v46 + valuePtr);
        }

        else
        {
          __int128 v27 = v46 | (valuePtr << 8);
        }

        v46 = v27;
LABEL_35:
        uint64_t v28 = CFEqual(v23, a2);
        uint64_t v29 = a3;
        if ((_DWORD)a3 == 5 && v28)
        {
          v46 = 0;
          v47 = 0;
        }

        int v30 = v19;
        MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, v21);
        if (!MutableCopy) {
          goto LABEL_48;
        }
        v32 = MutableCopy;
        uint64_t v33 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v47);
        if (v33)
        {
          v34 = v33;
          CFDictionarySetValue(v32, @"beaconLossCount", v33);
          CFRelease(v34);
        }

        uint64_t v35 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v46);
        if (v35)
        {
          __int128 v36 = v35;
          CFDictionarySetValue(v32, @"trigDisconnectCount", v35);
          CFRelease(v36);
        }

        CFArrayInsertValueAtIndex(v17, v18, v32);
        CFRelease(v32);
        __int128 v37 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: %@ - bcnloss:%d (%d %d) trgDisc:%d (%d %d)", "WiFiNetworkSetBssDisconnectReason", v23, BYTE1(v47) + v47, v47, BYTE1(v47), BYTE1(v46) + v46, v46, BYTE1(v46), v38 message];
        }
        objc_autoreleasePoolPop(v37);
        uint64_t v19 = v30;
        a3 = v29;
LABEL_46:
        ++v18;
      }

      while (v18 < CFArrayGetCount(v15));
    }

    sub_10009582C(v38, @"networkKnownBSSListKey", v17);
LABEL_48:
    CFRelease(v17);
  }

  if (cf) {
    CFRelease(cf);
  }
}

    objc_autoreleasePoolPop(v17);
    goto LABEL_15;
  }

  if (!a2)
  {
    BOOL v17 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: current network is null",  "__WiFiDeviceManagerShowColocatedJoinNotification");
    }
    goto LABEL_29;
  }

  if (!a3)
  {
    BOOL v17 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: candidate manager is nil",  "__WiFiDeviceManagerShowColocatedJoinNotification");
    }
    goto LABEL_29;
  }

  id v7 = (void *)sub_100095BC8(a2);
  if (!v7)
  {
    BOOL v17 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: current network name is null",  "__WiFiDeviceManagerShowColocatedJoinNotification");
    }
    goto LABEL_29;
  }

  id v8 = v7;
  CFRetain(a2);
  CFRetain(a3);
  a1[1122] = (uint64_t)a2;
  a1[494] = (uint64_t)a3;
  id v9 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: dispatching user assisted colocated network join alert for candidate/s",  "__WiFiDeviceManagerShowColocatedJoinNotification");
  }
  objc_autoreleasePoolPop(v9);
  values = v8;
  keys = @"SSID_STR";
  id v10 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)&keys,  (const void **)&values,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!v10)
  {
    BOOL v17 = objc_autoreleasePoolPush();
    uint64_t v18 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      __int128 v21 = "__WiFiDeviceManagerShowColocatedJoinNotification";
      uint64_t v19 = "%s: failed to create additionalInformation";
      goto LABEL_28;
    }

    goto LABEL_29;
  }

  id v11 = v10;
  double v12 = sub_100043E8C(a1[8]);
  double v13 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: type=%@(%d)", "__WiFiDeviceManagerDispatchStandaloneLimitedNetworkNotification", sub_10003B428(0xDu), 13 message];
  }
  objc_autoreleasePoolPop(v13);
  uint64_t v14 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t, void, const void *, CFDictionaryRef, uint64_t))a1[493];
  if (v14)
  {
    id v15 = v14(a1, v12, 13LL, 0LL, a3, v11, a1[495]);
    if (v15)
    {
      id v16 = (const void *)v15;
      sub_100091278(v15, (uint64_t)sub_10011097C, (uint64_t)a1);
      sub_1000ABC98((uint64_t)v16, a1[30]);
      a1[28] = (uint64_t)CFRetain(v16);
      sub_10010D14C((uint64_t)a1, @"autoJoinWaiting", 0LL, 0LL);
    }

    else
    {
      __int128 v20 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: failed to create notification for type %@(%d)", "__WiFiDeviceManagerDispatchStandaloneLimitedNetworkNotification", sub_10003B428(0xDu), 13 message];
      }
      objc_autoreleasePoolPop(v20);
    }
  }

  CFRelease(v11);
LABEL_15:
  objc_autoreleasePoolPop(v6);
}

    objc_autoreleasePoolPop(v8);
    goto LABEL_18;
  }

  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: ResponseType=%@", "__WiFiDeviceManagerProcessColocatedJoinNotification", sub_1000ABE6C(v6) message];
  }
  objc_autoreleasePoolPop(v8);
  Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    id v8 = objc_autoreleasePoolPush();
    __int128 v23 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      __int128 v25 = "__WiFiDeviceManagerProcessColocatedJoinNotification";
      __int128 v22 = "%s: metric is null";
      goto LABEL_28;
    }

    goto LABEL_29;
  }

  id v10 = Mutable;
  CFDictionarySetValue(Mutable, @"BannerType", @"limitednetworkjoin");
  if (v6 - 2 < 2)
  {
    CFDictionarySetValue(v10, @"UserAction", @"dismissed");
    id v11 = (const void *)a1[1122];
    if (v11)
    {
      CFRelease(v11);
      a1[1122] = 0LL;
    }

    goto LABEL_16;
  }

  if (v6 == 1)
  {
    CFDictionarySetValue(v10, @"UserAction", @"join");
    double v12 = (const __CFDictionary *)sub_10004CE2C(a2);
    if (v12)
    {
      Value = CFDictionaryGetValue(v12, @"SSID_STR");
      if (Value)
      {
        uint64_t v14 = Value;
        id v15 = sub_1000FAAA8((uint64_t)a1, (uint64_t)Value);
        if (v15)
        {
          id v16 = (CFDictionaryRef *)sub_1000A1DEC(v15, [v15 properties]);
          if (v16)
          {
            BOOL v17 = v16;
            if (!sub_100098BF8((uint64_t)v16))
            {
              uint64_t v19 = 0LL;
              goto LABEL_20;
            }

            uint64_t v18 = sub_100095408(v17);
            if (v18)
            {
              uint64_t v19 = v18;
              sub_100099C50(v7, v18);
LABEL_20:
              CFRelease(v17);
              __int128 v20 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: disabling device manager",  "__WiFiDeviceManagerProcessColocatedJoinNotification");
              }
              objc_autoreleasePoolPop(v20);
              sub_1000D03E4((uint64_t)a1);
              CFRetain(v7);
              a1[1121] = v7;
              __int128 v21 = (dispatch_queue_s *)a1[30];
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472LL;
              block[2] = sub_1000FAC44;
              block[3] = &unk_1001E2C30;
              block[4] = a1;
              void block[5] = v7;
              dispatch_async(v21, block);
              sub_100039588((uint64_t)@"com.apple.wifi.6eNotification", (uint64_t)v10);
              if (v19) {
                CFRelease(v19);
              }
              goto LABEL_17;
            }

            __int128 v24 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:4, "%s: failed to retrieve password for %@", "__WiFiDeviceManagerProcessColocatedJoinNotification", v14 message];
            }
          }

          else
          {
            __int128 v24 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:4, "%s: failed to  %@", "__WiFiDeviceManagerProcessColocatedJoinNotification", v14 message];
            }
          }
        }

        else
        {
          __int128 v24 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:4, "%s: no matching profile for %@", "__WiFiDeviceManagerProcessColocatedJoinNotification", v14 message];
          }
        }
      }

      else
      {
        __int128 v24 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: no SSID in additional information",  "__WiFiDeviceManagerProcessColocatedJoinNotification",  v26);
        }
      }
    }

    else
    {
      __int128 v24 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4, "%s: notification for %@ is missing additional information", "__WiFiDeviceManagerProcessColocatedJoinNotification", sub_100095BC8(v7) message];
      }
    }

    objc_autoreleasePoolPop(v24);
    goto LABEL_17;
  }

LABEL_45:
}

          objc_autoreleasePoolPop(v15);
          if (*(void *)(a1 + 1720))
          {
            __int128 v22 = objc_alloc_init(&OBJC_CLASS___NSDate);
            __int128 v23 = [*(id *)(a1 + 1720) compare:v22];
            __int128 v24 = objc_autoreleasePoolPush();
            if (v23 == (id)-1LL)
            {
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:3, "%s: enabling user auto join due to time (date: %@)", "__WiFiManagerCheckUserAutoJoinEnable", *(void *)(a1 + 1720) message];
              }
              objc_autoreleasePoolPop(v24);
              sub_10006570C(a1, 1LL, 5LL, 0LL);
            }

            else
            {
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:3, "%s: keeping user auto join disabled, not past date %@", "__WiFiManagerCheckUserAutoJoinEnable", *(void *)(a1 + 1720) message];
              }
              objc_autoreleasePoolPop(v24);
            }

            if (v22) {
              CFRelease(v22);
            }
          }

          else
          {
            __int128 v25 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: no user auto join expiration date",  "__WiFiManagerCheckUserAutoJoinEnable");
            }
            objc_autoreleasePoolPop(v25);
          }

          goto LABEL_35;
        }

        __int128 v21 = *(unsigned __int8 *)(a1 + 1704);
        id v15 = objc_autoreleasePoolPush();
        if (!v21)
        {
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: already past geofence. Checking motion activity.",  "__WiFiManagerCheckUserAutoJoinEnable");
          }
          objc_autoreleasePoolPop(v15);
          id v8 = 0LL;
          goto LABEL_30;
        }

        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: no disabled location",  "__WiFiManagerCheckUserAutoJoinEnable");
        }
      }
    }

    else
    {
      id v15 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: wifi not authroized for location services",  "__WiFiManagerCheckUserAutoJoinEnable");
      }
    }

    id v8 = 0LL;
    goto LABEL_45;
  }

    objc_autoreleasePoolPop(v30);
    __int128 v20 = 0LL;
LABEL_46:
    Mutable = 0LL;
LABEL_47:
    if (*(_BYTE *)(a3 + 55))
    {
      v31 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3 message:"!!!! End simulating wifi-assist override condition (Debug Mode) !!!!"];
      }
      objc_autoreleasePoolPop(v31);
      *(_BYTE *)(a3 + 52) = 0;
      *(_WORD *)(a3 + 54) = 0;
    }

    if (v20) {
      CFRelease(v20);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
LABEL_55:
    if (*(void *)(a3 + 240))
    {
      CFRetain((CFTypeRef)a3);
      v32 = *(dispatch_queue_s **)(a3 + 240);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000FE580;
      block[3] = &unk_1001E4328;
      block[4] = &v183;
      void block[5] = &v179;
      block[6] = a3;
      block[7] = a2;
      dispatch_async(v32, block);
    }

    else
    {
      uint64_t v33 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null queue.",  "__WiFiDeviceManagerLinkEventCallback");
      }
      objc_autoreleasePoolPop(v33);
      v34 = (const void *)v184[3];
      if (v34)
      {
        CFRelease(v34);
        v184[3] = 0LL;
      }

      uint64_t v35 = (const void *)v180[3];
      if (v35)
      {
        CFRelease(v35);
        v180[3] = 0LL;
      }
    }

    _Block_object_dispose(&v179, 8);
    _Block_object_dispose(&v183, 8);
  }

  __int128 v36 = (_WORD *)(a3 + 8558);
  if (!Value)
  {
    if (+[WiFiAIRAgent sharedInstance](&OBJC_CLASS___WiFiAIRAgent, "sharedInstance")
      && -[WiFiAIRAgent isInterfaceRankingInProgress]( +[WiFiAIRAgent sharedInstance](&OBJC_CLASS___WiFiAIRAgent, "sharedInstance"),  "isInterfaceRankingInProgress"))
    {
      sub_10001DE98();
      -[WiFiAIRAgent terminateRequest]( +[WiFiAIRAgent sharedInstance](&OBJC_CLASS___WiFiAIRAgent, "sharedInstance"),  "terminateRequest");
    }

    if (!v9)
    {
      __int128 v39 = *(const void **)(a3 + 3504);
      if (v39)
      {
        id v9 = (void *)CFRetain(v39);
      }

      else
      {
        id v9 = sub_100052664(*(void *)(a3 + 64));
        if (v9)
        {
          v142 = sub_1000D91B0(a3, v9, 1);
          if (v142)
          {
            v143 = v142;
            CFRelease(v9);
            id v9 = v143;
          }
        }
      }
    }

    *__int128 v36 = 0;
    sub_1000EB060(a3, (uint64_t)a2);
    sub_1000D004C((const void *)a3);
    *(_BYTE *)(a3 + 3403) = 0;
    *(void *)(a3 + 340_Block_object_dispose(va, 8) = 0LL;
    *(CFAbsoluteTime *)(a3 + 3416) = CFAbsoluteTimeGetCurrent();
    *(_BYTE *)(a3 + 3405) = 0;
    *(CFAbsoluteTime *)(a3 + 6904) = CFAbsoluteTimeGetCurrent();
    *(void *)(a3 + 6896) = 0LL;
    sub_1000CF880(a3, 1, 0);
    if (v170[1800]) {
      sub_100045C2C(*(void *)(a3 + 64), 0, 0, 0LL);
    }
    __int128 v40 = objc_autoreleasePoolPush();
    __int128 v41 = sub_1000449EC(*(void *)(a3 + 64), a2);
    if (v41)
    {
      __int128 v42 = v41;
      __int128 v43 = CFDictionaryGetValue(v41, @"DEAUTH_EA");
      if (v43)
      {
        v44 = v43;
        v45 = *(void *)(a3 + 3504);
        if (v45)
        {
          v46 = sub_1000951FC(v45, @"BSSID");
          if (v46)
          {
            v47 = (uint64_t)v46;
            if (CFEqual(v46, v44))
            {
              v48 = (const __CFNumber *)CFDictionaryGetValue(v42, @"DEAUTH_REASON");
              if (v48)
              {
                LODWORD(v183) = -1431655766;
                if (CFNumberGetValue(v48, kCFNumberIntType, &v183))
                {
                  v49 = sub_1000A335C(*(void *)(a3 + 3504));
                  v50 = v183;
                  if ((_DWORD)v183 == 15)
                  {
                    [*(id *)(a3 + 6632) isNetworkInDenyListedState:1 scanResult:v49];
                    v50 = v183;
                  }

                  v51 = sub_1000D1BDC(a3, 4LL, v50, v47, 5LL);
                  [*(id *)(a3 + 6632) setNetworkDenyListInfo:v51 forScanResult:v49];
                }
              }
            }
          }
        }
      }

      CFRelease(v42);
    }

    v52 = *(_DWORD *)(a3 + 3272);
    objc_autoreleasePoolPop(v40);
    valuePtr[0] = 0;
    v175 = -1431655766;
    v176 = 0;
    v174 = 0;
    v53 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LINKDOWN_REASON_CODE");
    v54 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LINKDOWN_IS_INVOL");
    v55 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LINKDOWN_SUBREASON_CODE");
    v168 = v52;
    if (v53)
    {
      CFNumberGetValue(v53, kCFNumberIntType, valuePtr);
      if (valuePtr[0] == 1000)
      {
        v57 = 3LL;
        LOBYTE(v56) = 1;
        if (!v55)
        {
LABEL_109:
          if (v54) {
            CFNumberGetValue(v54, kCFNumberSInt8Type, &v174);
          }
          v58 = valuePtr[0];
          if (v9 && valuePtr[0] == 4)
          {
            else {
              v59 = 1031LL;
            }
            v60 = sub_1000A335C((uint64_t)v9);
            v61 = [*(id *)(a3 + 6632) isNetworkInDenyListedState:3 scanResult:v60];
            else {
              v58 = v59;
            }
          }

          else if (!v9)
          {
            goto LABEL_218;
          }

          if (sub_100097700((uint64_t)v9))
          {
            v62 = valuePtr[0];
            v167 = v57;
            if (v174)
            {
              if (valuePtr[0] == 1 && v176 == 7) {
                v62 = 1;
              }
              else {
                v62 = 255;
              }
            }

            LODWORD(v183) = v62;
            v99 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v183);
            sub_10009582C((uint64_t)v9, @"lastDisconnectReasonKey", v99);
            Current = CFAbsoluteTimeGetCurrent();
            v101 = CFDateCreate(kCFAllocatorDefault, Current);
            sub_10009582C((uint64_t)v9, @"lastDisconnectTimestampKey", v101);
            if (v170[1640])
            {
              if (v174)
              {
                if (valuePtr[0] == 1 && v176 == 3)
                {
                  v102 = (const __CFString *)sub_100095BC8(v9);
                  v103 = sub_100094CE8(v102);
                  if (v103)
                  {
                    v104 = v103;
                    sub_10009582C((uint64_t)v103, @"lastDisconnectTimestampKey", v101);
                    CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 6880), v104);
                    v105 = objc_autoreleasePoolPush();
                    v106 = (void *)qword_100219F60;
                    if (qword_100219F60)
                    {
                      context = v105;
                      v107 = sub_100095BC8(v9);
                      [v106 WFLog:3, "%s: Blacklisting %@ hotspot: reason (%d) subreason (%d) \n", "__WiFiDeviceManagerLinkEventCallback", v107, valuePtr[0], v176 message];
                      v105 = context;
                    }

                    objc_autoreleasePoolPop(v105);
                    CFRelease(v104);
                  }
                }
              }
            }

            v108 = *(const void **)(a3 + 6928);
            if (v108)
            {
              CFRelease(v108);
              *(void *)(a3 + 692_Block_object_dispose(va, 8) = 0LL;
            }

            *(void *)(a3 + 692_Block_object_dispose(va, 8) = 0LL;
            *(_DWORD *)(a3 + 6452) = *(_DWORD *)(a3 + 6200);
            *(_DWORD *)(a3 + 644_Block_object_dispose(va, 8) = v183;
            sub_1000325B0((unsigned int *)(a3 + 6448));
            if (v99) {
              CFRelease(v99);
            }
            if (v101) {
              CFRelease(v101);
            }
            v57 = v167;
          }

        __int128 v26 = 0;
        int v30 = 20.0;
        goto LABEL_46;
      }
    }
  }

  uint64_t v18 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: found prominent open network (%@) with highest popularity score %ld", "-[WiFiScanResultsPreparer topRecommendableNetwork]", sub_100095BC8(v38), v37 message];
  }
  objc_autoreleasePoolPop(v18);
  uint64_t v19 = -[WiFiScanObserverNetwork initWithWiFiNetworkRef:]( objc_alloc(&OBJC_CLASS___WiFiScanObserverNetwork),  "initWithWiFiNetworkRef:",  v38);
  if (!v19) {
    return 0LL;
  }
  __int128 v20 = v19;
  __int128 v21 = -[WiFiAvailabilityEngine findRecommendationsForScannedNetwork:]( -[WiFiScanResultsPreparer engine](v36, "engine"),  "findRecommendationsForScannedNetwork:",  v19);
  if ((unint64_t)[v21 count] < 2)
  {
    __int128 v26 = [v21 anyObject];
    if (v26) {
      goto LABEL_66;
    }
  }

  else
  {
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v22 = [v21 countByEnumeratingWithState:&v39 objects:v47 count:16];
    if (!v22)
    {
LABEL_70:
      int v30 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: found matches (%lu) in availability engine but SSIDs didn't match with %@", "-[WiFiScanResultsPreparer topRecommendableNetwork]", objc_msgSend(v21, "count"), -[WiFiScanObserverNetwork SSID](v20, "SSID") message];
      }
      goto LABEL_72;
    }

    __int128 v23 = v22;
    __int128 v24 = *(void *)v40;
LABEL_51:
    __int128 v25 = 0LL;
    while (1)
    {
      if (*(void *)v40 != v24) {
        objc_enumerationMutation(v21);
      }
      __int128 v26 = *(id *)(*((void *)&v39 + 1) + 8 * v25);
      if (objc_msgSend( objc_msgSend(v26, "SSID"),  "isEqualToString:",  -[WiFiScanObserverNetwork SSID](v20, "SSID"))) {
        break;
      }
      if (v23 == (id)++v25)
      {
        __int128 v23 = [v21 countByEnumeratingWithState:&v39 objects:v47 count:16];
        if (v23) {
          goto LABEL_51;
        }
        goto LABEL_70;
      }
    }

    if (!v26) {
      goto LABEL_70;
    }
LABEL_66:
    if (objc_msgSend(objc_msgSend(v26, "network"), "source") == (id)2
      && [v26 unwantedNetworkName])
    {
      int v30 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: recommendation (%@) found but network name (%@) is considered unwanted", "-[WiFiScanResultsPreparer topRecommendableNetwork]", v26, objc_msgSend(v26, "SSID") message];
      }
LABEL_72:
      objc_autoreleasePoolPop(v30);
      __int128 v26 = 0LL;
    }
  }

  return v26;
}

void sub_10000DCC0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Launching TapToRadar:errorType:%u",  "-[WiFiSoftErrorManager WiFiSoftErrorReporting:deviceContext:displayString:]_block_invoke",  *(unsigned int *)(a1 + 64));
  }
  objc_autoreleasePoolPop(v2);
  [*(id *)(a1 + 32) launchTapToRadar:*(unsigned int *)(a1 + 64) displayString:*(void *)(a1 + 48) deviceContext:*(void *)(a1 + 56)];
  id v3 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0LL;
  }

void sub_10000DE28(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Perform mitigation action: for Event:%u",  *(unsigned int *)(a1 + 48));
  }
  objc_autoreleasePoolPop(v2);
  int v3 = *(_DWORD *)(a1 + 48);
  switch(v3)
  {
    case 1:
      id v4 = *(void **)(a1 + 32);
      uint64_t v5 = 1LL;
      goto LABEL_10;
    case 2:
      sub_1000C553C(*(void *)(a1 + 40), 0LL);
      uint64_t v6 = *(void **)(a1 + 32);
      uint64_t v7 = 2LL;
      goto LABEL_12;
    case 3:
    case 5:
    case 6:
    case 7:
      return;
    case 4:
      id v4 = *(void **)(a1 + 32);
      uint64_t v5 = 4LL;
      goto LABEL_10;
    case 8:
      sub_1000EDFE8(*(void *)(a1 + 40), 0LL, 0LL, 0LL, 0LL, 0LL);
      uint64_t v6 = *(void **)(a1 + 32);
      uint64_t v7 = 8LL;
LABEL_12:
      [v6 recordMitigation:v7];
      break;
    default:
      if (v3 == 16)
      {
        id v4 = *(void **)(a1 + 32);
        uint64_t v5 = 16LL;
LABEL_10:
        [v4 wifiSoftErrorsInProcessStateUnset:v5];
      }

      break;
  }

LABEL_19:
    id v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: invalid softErrorType:%u",  "-[WiFiSoftErrorManager wifiSoftErrorCounterUpdate:]",  v3);
    }
    objc_autoreleasePoolPop(v4);
  }

  else
  {
    switch(a3)
    {
      case 1:
        ++self->_errorCounters.wifiToggleErrorCount;
        break;
      case 2:
        ++self->_errorCounters.noNetworksFoundErrorCount;
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_19;
      case 4:
        ++self->_errorCounters.slowAutoJoinErrorCount;
        break;
      case 8:
        ++self->_errorCounters.txDataStallErrorCount;
        break;
      default:
        if (a3 != 16) {
          goto LABEL_19;
        }
        ++self->_errorCounters.rxDataStallErrorCount;
        break;
    }
  }

    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: invalid softErrorType:%u",  "-[WiFiSoftErrorManager wifiSoftErrorUserConfirmationUpdate:withDeviceContext:]",  v4);
    }
    objc_autoreleasePoolPop(v6);
  }

  else
  {
    switch((int)v4)
    {
      case 1:
        ++self->_errorCounters.wifiToggleErrorUserConfirmCount;
        break;
      case 2:
        ++self->_errorCounters.noNetworksFoundErrorUserConfirmCount;
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_19;
      case 4:
        ++self->_errorCounters.slowAutoJoinErrorUserConfirmCount;
        break;
      case 8:
        ++self->_errorCounters.txDataStallErrorUserConfirmCount;
        break;
      default:
        if ((_DWORD)v4 != 16) {
          goto LABEL_19;
        }
        ++self->_errorCounters.rxDataStallErrorUserConfirmCount;
        break;
    }
  }

      objc_autoreleasePoolPop(v10);
      goto LABEL_10;
    }

  BOOL v17 = sub_10003DF80(a2);
  if (a3)
  {
    if (v17)
    {
      uint64_t v18 = *(const void **)(a1 + 1056);
      if (v18) {
        CFRelease(v18);
      }
      *(void *)(a1 + 1056) = a2;
      CFRetain(a2);
    }

    if (a5) {
      goto LABEL_25;
    }
  }

  else if (v17)
  {
    __int128 v20 = *(const void **)(a1 + 1056);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(a1 + 1056) = 0LL;
    }
  }

  if (*(unsigned __int8 *)(a1 + 1041) != a3 || *(unsigned __int8 *)(a1 + 1043) != a3)
  {
    *(_BYTE *)(a1 + 1043) = a3;
    if (a3) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = a4;
    }
    if (!a3) {
      LOBYTE(a5) = 0;
    }
    goto LABEL_41;
  }

  if (a3 && (_os_feature_enabled_impl("WiFiManager", "EnableNANPHS") & v14) == 1)
  {
    __int128 v21 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"Bringing up NANPHS MIS Discovery is already enabled"];
    }
    objc_autoreleasePoolPop(v21);
LABEL_25:
    uint64_t v19 = 0;
    *(_BYTE *)(a1 + 1043) = a3;
LABEL_41:
    *(_BYTE *)(a1 + 1042) = v19;
    *(_BYTE *)(a1 + 1044) = a5;
    *(void *)&context = a1;
    *((void *)&context + 1) = 0xAAAAAAAA00000021LL;
    *(void *)&uint64_t v29 = &v39;
    *((void *)&v29 + 1) = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
    __int128 v22 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      __int128 v23 = "disabled";
      if (*(_BYTE *)(a1 + 1043) == 1) {
        __int128 v24 = "enabled";
      }
      else {
        __int128 v24 = "disabled";
      }
      if (*(_BYTE *)(a1 + 1041) == 1) {
        __int128 v23 = "enabled";
      }
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "MIS Discovery Req state %s Current state %s", v24, v23);
    }

    objc_autoreleasePoolPop(v22);
    return;
  }

  __int128 v25 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    if (*(_BYTE *)(a1 + 1041) == 1) {
      __int128 v26 = "enabled";
    }
    else {
      __int128 v26 = "disabled";
    }
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "MIS Discovery is already %s", v26);
  }

  objc_autoreleasePoolPop(v25);
  if (a3)
  {
    __int128 v38 = 0LL;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    v34 = 0u;
    uint64_t v35 = 0u;
    v32 = 0u;
    uint64_t v33 = 0u;
    int v30 = 0u;
    v31 = 0u;
    context = 0u;
    uint64_t v29 = 0u;
    LODWORD(context) = v13;
    v27[0] = a1;
    v27[1] = 0xAAAAAAAA0000004DLL;
    v27[2] = &context;
    v27[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v27);
  }

  *(_OWORD *)&v5->_availableResource = xmmword_10017F870;
  __int128 v21 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  pendingRequests = v5->_pendingRequests;
  v5->_pendingRequests = v21;

  __int128 v23 = (void *)objc_claimAutoreleasedReturnValue(-[WiFiBatteryManager pendingRequests](v5, "pendingRequests"));
  if (!v23)
  {
    __int128 v25 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WiFiBatteryMgmt :  null pending requests!",  "-[WiFiBatteryManager initWithContext:]");
    }
LABEL_23:
    objc_autoreleasePoolPop(v25);
    __int128 v26 = v5->_pendingRequests;
    v5->_pendingRequests = 0LL;

    __int128 v27 = v5->_wifiClientDescriptionRef;
    v5->_wifiClientDescriptionRef = 0LL;

    uint64_t v28 = v5->_cpmsAgent;
    v5->_cpmsAgent = 0LL;

    uint64_t v29 = v5->_wifiPpmClientRef;
    v5->_wifiPpmClientRef = 0LL;

    int v30 = v5->_cachedBudget;
    v5->_cachedBudget = 0LL;

    return 0LL;
  }

  return v5;
}

    id v4 = 0LL;
    goto LABEL_11;
  }

  if (![v2 length])
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      double v12 = 136315138;
      double v13 = "WiFiSecurityRemovePasswordFromPasswordBackup_block_invoke";
      id v11 = "%s: error: empty ssid";
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  int v3 = sub_1000AE514(*(void **)(a1 + 32));
  id v4 = v3;
  if (!v3 || !-[NSMutableString length](v3, "length"))
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    double v12 = 136315138;
    double v13 = "WiFiSecurityRemovePasswordFromPasswordBackup_block_invoke";
    id v8 = "%s: error: empty ssid hash";
    id v9 = 12;
    goto LABEL_10;
  }

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(NSMutableString **)(a1 + 32);
    double v12 = 136315650;
    double v13 = "WiFiSecurityRemovePasswordFromPasswordBackup_block_invoke";
    uint64_t v14 = 2112;
    id v15 = v5;
    id v16 = 2112;
    BOOL v17 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%s: ssid %@ (%@)",  (uint8_t *)&v12,  0x20u);
  }

  uint64_t v6 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  [v6 setObject:kSecClassGenericPassword forKey:kSecClass];
  [v6 setObject:v4 forKey:kSecAttrAccount];
  [v6 setObject:@"AirPort" forKey:kSecAttrService];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = SecItemDelete((CFDictionaryRef)v6);
  uint64_t v7 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  if (v7 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    double v12 = 136315650;
    double v13 = "WiFiSecurityRemovePasswordFromPasswordBackup_block_invoke";
    uint64_t v14 = 2112;
    id v15 = v4;
    id v16 = 1024;
    LODWORD(v17) = v7;
    id v8 = "%s:[%@] error result %d \n";
    id v9 = 28;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v12, v9);
  }

  sub_10003A8FC((vm_address_t)a2, a3);
  sub_10003A8FC((vm_address_t)a4, a5);
  sub_10003A8FC((vm_address_t)a6, a7);
  return 0LL;
}

  if (v2[3806]) {
    [*(id *)(a1 + 6632) removeExpiredDenyListedState:3];
  }
  if (!*v2 && !*(_DWORD *)(a1 + 5336))
  {
    uint64_t v14 = *(_DWORD *)(a1 + 5220);
    if (v14)
    {
      id v15 = IOPMAssertionRelease(v14);
      if ((_DWORD)v15)
      {
        id v16 = v15;
        BOOL v17 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s MIS session not active: release MIS PM Assertion, error=%d",  "WiFiDeviceManagerHeartbeatHadler",  v16);
        }
        objc_autoreleasePoolPop(v17);
      }

      *(_DWORD *)(a1 + 5220) = 0;
    }
  }

void sub_10000F790(void *a1, void *a2, int a3, CFTypeRef a4)
{
  id v8 = objc_initWeak(&location, a2);

  if (!a2)
  {
    id v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s:SoftErrorManagerRef is NULL!",  "WiFiSoftErrorManagerEvent");
    }
    goto LABEL_14;
  }

  if (!a1)
  {
    id v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: deviceManager is NULL!",  "WiFiSoftErrorManagerEvent");
    }
LABEL_14:
    objc_autoreleasePoolPop(v11);
    goto LABEL_9;
  }

  if (a3 == 4) {
    goto LABEL_7;
  }
  if (a3 != 12 && a3 != 6) {
    goto LABEL_8;
  }
  if (a4)
  {
LABEL_7:
    a4 = CFRetain(a4);
LABEL_8:
    id v9 = objc_loadWeakRetained(&location);
    [v9 updateReportingPreference];

    id v10 = (dispatch_queue_s *)qword_100219F80;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10000F930;
    block[3] = &unk_1001E28D0;
    objc_copyWeak(v13, &location);
    int v14 = a3;
    v13[1] = a1;
    v13[2] = (id)a4;
    dispatch_async(v10, block);
    objc_destroyWeak(v13);
  }

LABEL_9:
  objc_destroyWeak(&location);
}

        id v15 = SCPreferencesRemoveValue(v9, @"List of known networks");
        id v16 = v6;
        if (v15)
        {
          BOOL v17 = 1;
          if (!Value)
          {
LABEL_15:
            uint64_t v1 = v86;
            id v2 = &ACAccountStoreDidChangeNotification_ptr;
            uint64_t v6 = v16;
            id v11 = v83;
            if (v13) {
              CFRelease(v13);
            }
LABEL_19:

            uint64_t v18 = objc_autoreleasePoolPush();
            uint64_t v19 = (void *)qword_100219F60;
            if (qword_100219F60)
            {
              [(id)v2[374] timeIntervalSinceReferenceDate];
              objc_msgSend( v19,  "WFLog:message:",  3,  "%s: PNL migration to class C standalone plist took %fs",  "WiFiManagerMigratePNL",  v20 - v8);
            }

            objc_autoreleasePoolPop(v18);
            goto LABEL_22;
          }
        }

        else
        {
          v80 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Could not remove value",  "__WiFiManagerMigratePNLToStandaloneClassC");
          }
          objc_autoreleasePoolPop(v80);
          BOOL v17 = 0;
          if (!Value) {
            goto LABEL_15;
          }
        }

  if (!qword_100219950) {
    pthread_once(&stru_100219020, (void (*)(void))sub_1000949D8);
  }
  Instance = _CFRuntimeCreateInstance(a1);
  id v11 = (_WORD *)Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = 0LL;
    *(void *)(Instance + 24) = 0LL;
    double v12 = (CFMutableDictionaryRef *)(Instance + 16);
    if (cf) {
      MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, (CFDictionaryRef)cf);
    }
    else {
      MutableCopy = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    }
    *double v12 = MutableCopy;
    if (MutableCopy)
    {
      int v14 = (CFBooleanRef)CFDictionaryGetValue(MutableCopy, @"HIDDEN_NETWORK");
      if (v14) {
        id v15 = v14 == kCFBooleanTrue;
      }
      else {
        id v15 = 0;
      }
      if (v15)
      {
        id v16 = v14;
        CFDictionaryRemoveValue(*v12, @"HIDDEN_NETWORK");
        CFDictionarySetValue(*v12, @"UserDirected", v16);
      }

      v11[12] = -1;
      return v11;
    }

    CFRelease(v11);
    return 0LL;
  }

  return v11;
}

    if (!a2) {
      return;
    }
    goto LABEL_10;
  }

  double v13 = 0LL;
  if (v8) {
LABEL_10:
  }
    CFRelease(v8);
LABEL_11:
  *(void *)(a1 + 5456) = v13;
  *(_BYTE *)(a1 + 33) = sub_10004D620(*(void *)(a1 + 64));
  *(_BYTE *)(a1 + 6994) = sub_10004D708(*(void *)(a1 + 64));
  *(void *)(a1 + 152) = 0LL;
  *(_DWORD *)(a1 + 540_Block_object_dispose(va, 8) = 100;
  id v15 = *(dispatch_queue_s **)(a1 + 240);
  if (v15) {
    sub_1000CD56C(a1, v15);
  }
  if (sub_10004D62C(*(void *)(a1 + 64), &v26))
  {
    id v16 = v26;
    BOOL v17 = 1;
  }

  else
  {
    BOOL v17 = 0;
    id v16 = 0;
  }

  sub_100014AC8(*(void *)(a1 + 120), v17, v16);
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v19 = (const void *)sub_100043E8C(v18);
  __int128 v20 = sub_100040538(v18, v19);
  __int128 v21 = v20;
  if (v20 && sub_100095B4C((uint64_t)v20))
  {
    __int128 v22 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: Disconnecting from EAP Network %@ on restart", "WiFiDeviceManagerOpen", sub_100095BC8(v21) message];
    }
    objc_autoreleasePoolPop(v22);
    __int128 v23 = (const void *)sub_100043E8C(*(void *)(a1 + 64));
    sub_1000CE074(a1, v23, 1010LL, "WiFiDeviceManagerOpen", 3600LL);
  }

  __int128 v24 = *(void (**)(uint64_t, const void *, const __CFString *, const CFBooleanRef, void))(a1 + 4736);
  if (v24) {
    v24(a1, v21, @"ForcedDisassoc", kCFBooleanTrue, *(void *)(a1 + 4744));
  }
  if (v21) {
    CFRelease(v21);
  }
  sub_1000CE334(a1, 0);
  *(_BYTE *)(a1 + 700_Block_object_dispose(va, 8) = sub_10004D698(*(void *)(a1 + 64));
  *(_BYTE *)(a1 + 6992) = sub_10004D6A4(*(void *)(a1 + 64));
  *(_BYTE *)(a1 + 6993) = sub_10004D6B0(*(void *)(a1 + 64));
  sub_1000CE480(a1);
  sub_1000CE6E0(a1);
  *(_BYTE *)(a1 + 7352) = 0;
  *(_BYTE *)(a1 + 8592) = 0;
  *(_DWORD *)(a1 + 856_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 8576) = 0LL;
  *(_OWORD *)(a1 + 8596) = 0u;
  *(_OWORD *)(a1 + 8612) = 0u;
  *(_OWORD *)(a1 + 862_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 8644) = 0u;
  *(_OWORD *)(a1 + 8660) = 0u;
  *(_OWORD *)(a1 + 8676) = 0u;
  *(_OWORD *)(a1 + 8692) = 0u;
  *(void *)(a1 + 870_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 8716) = 0;
  return v3;
}

  if (sub_10004B9CC(*(void *)(a3 + 64)))
  {
    *(_BYTE *)(a3 + 5354) = 0;
    *(_WORD *)(a3 + 5352) = 0;
    id v9 = *(void *)(a3 + 5432);
    id v10 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      if (v9) {
        id v11 = "%s: null dynamicstoreref keys";
      }
      else {
        id v11 = "%s: null dynamicstoreref";
      }
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, v11, "__WiFiDeviceManagerHotspotTransportTypeMetric");
    }

    objc_autoreleasePoolPop(v10);
    if (!*(_BYTE *)(a3 + 5212))
    {
      __int128 v26 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "MIS is already %s on %@", "Disabled", sub_10004CE34() message];
      }
      objc_autoreleasePoolPop(v26);
      _os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin");
LABEL_56:
      objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "autoJoinStartedWithTrigger:interfaceName:",  10,  sub_100043E8C(*(void *)(a3 + 64)));
      sub_1000D0A5C(a3, 2LL, (uint64_t)"__WiFiDeviceManagerDynamicStoreCallback");
      return;
    }

    *(_BYTE *)(a3 + 5212) = 0;
    double v12 = *(unsigned __int8 *)(a3 + 5211);
    double v13 = objc_autoreleasePoolPush();
    if (v12)
    {
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3 message:"MIS Disabled: Attempting to disable MIS Service"];
      }
      objc_autoreleasePoolPop(v13);
      __int128 v41 = 0LL;
      __int128 v39 = 0u;
      __int128 v40 = 0u;
      __int128 v37 = 0u;
      *(void *)&__int128 v38 = 5LL;
      uint64_t v35 = 0u;
      __int128 v36 = 0u;
      uint64_t v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      DWORD2(v31) = 5;
      *((void *)&v38 + 1) = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"%@", @"Dynamic Store");
      sub_1000DC1AC(a3, (uint64_t)&v31);
      *(_BYTE *)(a3 + 5376) = 0;
      sub_1000DC604(a3);
      if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
      {
        sub_1000F5F98(a3, 0xAuLL);
        return;
      }

      goto LABEL_56;
    }

    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "MIS is already %s on %@", "Disabled", sub_10004CE34() message];
    }
    objc_autoreleasePoolPop(v13);
  }

  else
  {
    id v15 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4 message:"__WiFiDeviceManagerDynamicStoreCallback: MIS not supported on device"];
    }
    objc_autoreleasePoolPop(v15);
    __int128 v41 = 0LL;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    uint64_t v35 = 0u;
    __int128 v36 = 0u;
    uint64_t v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    DWORD1(v31) = 3;
    sub_1000DC1AC(a3, (uint64_t)&v31);
  }

  if (CFStringCompare(Value, @"airplay", 0LL) == kCFCompareEqualTo)
  {
    *(_BYTE *)(a1 + 5490) = v5 == kCFBooleanTrue;
    id v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s manager->latencySensitiveServices.airplayOverInfra:%u",  "WiFiDeviceManagerSetAppPolicy",  *(unsigned __int8 *)(a1 + 5490));
    }
    objc_autoreleasePoolPop(v11);
    -[WiFiUserInteractionMonitor updateIsAirplayActiveOverInfra:]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "updateIsAirplayActiveOverInfra:",  v5 == kCFBooleanTrue);
  }

  if (CFStringCompare(Value, @"kApple80211KeyGameModeUUIDString", 0LL) == kCFCompareEqualTo)
  {
    *(_BYTE *)(a1 + 5492) = v5 == kCFBooleanTrue;
    double v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s manager->latencySensitiveServices.gameMode:%u",  "WiFiDeviceManagerSetAppPolicy",  *(unsigned __int8 *)(a1 + 5492));
    }
    objc_autoreleasePoolPop(v12);
    sub_1000EA48C(a1, *(unsigned __int8 *)(a1 + 5492));
  }

  if (*(_BYTE *)(a1 + 3400) && sub_10004B9C0(*(void *)(a1 + 64)))
  {
    double v13 = (const void *)sub_100040CF8(*(void *)(a1 + 64));
    sub_1000D00D8(a1, v13);
  }

  int v14 = sub_10004FEF0(*(void *)(a1 + 64), Value, v5);
  sub_1000EB060(a1, 0LL);
  id v15 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s()CATS App update: device=%p deviceManager:%p\n ",  "WiFiDeviceManagerSetAppPolicy",  a1,  *(void *)(a1 + 64));
  }
  objc_autoreleasePoolPop(v15);
  if (*(_BYTE *)(a1 + 433)) {
    sub_1000F5218(a1, 5LL);
  }
  return v14;
}

  objc_autoreleasePoolPop(v4);

  if (v8) {
    CFRelease(v8);
  }
  [*(id *)(a1 + 8776) setAssociatedNetwork:v9];

LABEL_12:
  objc_autoreleasePoolPop(v2);
}

  -[WiFiUserInteractionMonitor setAppAwareDetails:](v2, "setAppAwareDetails:", 0LL);
  double v12 = -[WiFiUserInteractionMonitorNetworkAgent initWithUUID:andDescription:]( objc_alloc(&OBJC_CLASS___WiFiUserInteractionMonitorNetworkAgent),  "initWithUUID:andDescription:",  @"A2CB4344-1CC7-47EF-8D25-FB68B047620F",  @"APPLE80211KEY_REAL_TIME_MEDIA_TRAFFIC_UUID");
  -[WiFiUserInteractionMonitor setRtTrafficAgent:](v2, "setRtTrafficAgent:", v12);

  id v4 = (WiFiUserInteractionMonitor *)objc_claimAutoreleasedReturnValue(-[WiFiUserInteractionMonitor rtTrafficAgent](v2, "rtTrafficAgent"));
  if (v4)
  {
    double v13 = (void *)objc_claimAutoreleasedReturnValue(-[WiFiUserInteractionMonitor rtTrafficAgent](v2, "rtTrafficAgent"));
    [v13 registerStateChangeCallback:&stru_1001E69D8 withCallbackContext:v2];

    notify_register_check("com.apple.airport.userNotification", &dword_100219ED0);
    -[WiFiUserInteractionMonitor setNavigating:](v2, "setNavigating:", 0LL);
    int v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    -[WiFiUserInteractionMonitor setRunningForegroundApps:](v2, "setRunningForegroundApps:", v14);

    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    -[WiFiUserInteractionMonitor setRunningNetworkingApps:](v2, "setRunningNetworkingApps:", v15);

    -[WiFiUserInteractionMonitor setSetupCompleted:](v2, "setSetupCompleted:", 0LL);
    -[WiFiUserInteractionMonitor setInitialSetupCompleted:](v2, "setInitialSetupCompleted:", 0LL);
    v2->_ctServerConnectionRef = 0LL;
    if (&__CTServerConnectionCreateWithIdentifier)
    {
      v2->_ctServerConnectionRef = (__CTServerConnection *)_CTServerConnectionCreateWithIdentifier( kCFAllocatorDefault,  @"com.apple.wifid.WiFiUserInteractionMonitor",  0LL,  0LL);
      id v16 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: created a CT server connection %p",  "-[WiFiUserInteractionMonitor _initPrivate]",  v2->_ctServerConnectionRef);
      }
      objc_autoreleasePoolPop(v16);
    }

    -[WiFiUserInteractionMonitor setCellularL3MBPS:](v2, "setCellularL3MBPS:", 0.0);
    -[WiFiUserInteractionMonitor setCellularL3PPS:](v2, "setCellularL3PPS:", 0LL);
    -[WiFiUserInteractionMonitor setCellularIfTotalBytes:](v2, "setCellularIfTotalBytes:", 0LL);
    -[WiFiUserInteractionMonitor setCellularIfTotalPackets:](v2, "setCellularIfTotalPackets:", 0LL);
    -[WiFiUserInteractionMonitor setWifiL3MBPS:](v2, "setWifiL3MBPS:", 0.0);
    -[WiFiUserInteractionMonitor setWifiL3PPS:](v2, "setWifiL3PPS:", 0LL);
    -[WiFiUserInteractionMonitor setWifiIfTotalBytes:](v2, "setWifiIfTotalBytes:", 0LL);
    -[WiFiUserInteractionMonitor setWifiIfTotalPackets:](v2, "setWifiIfTotalPackets:", 0LL);
    -[WiFiUserInteractionMonitor setWifiIfTotalInputBytes:](v2, "setWifiIfTotalInputBytes:", 0LL);
    -[WiFiUserInteractionMonitor setWifiIfTotalOutputBytes:](v2, "setWifiIfTotalOutputBytes:", 0LL);
    -[WiFiUserInteractionMonitor setWifiIfTotalInputPackets:](v2, "setWifiIfTotalInputPackets:", 0LL);
    -[WiFiUserInteractionMonitor setWifiIfTotalOutputPackets:](v2, "setWifiIfTotalOutputPackets:", 0LL);
    -[WiFiUserInteractionMonitor setPeriodicTasksLastRanAt:](v2, "setPeriodicTasksLastRanAt:", 0LL);
    BOOL v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    -[WiFiUserInteractionMonitor setOverrideNetworkState:](v2, "setOverrideNetworkState:", v17);

    -[WiFiUserInteractionMonitor setIsFirstUserUnlocked:](v2, "setIsFirstUserUnlocked:", 0LL);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    -[WiFiUserInteractionMonitor setAppAttributes:](v2, "setAppAttributes:", v18);

    -[WiFiUserInteractionMonitor setGameNotifyToken:](v2, "setGameNotifyToken:", 0LL);
    internalQueue = (dispatch_queue_s *)v2->_internalQueue;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_10013FF1C;
    handler[3] = &unk_1001E6A00;
    id v4 = v2;
    __int128 v22 = v4;
    notify_register_dispatch("com.apple.system.console_mode_changed", &v2->_gameNotifyToken, internalQueue, handler);
    id v2 = v22;
  }

void sub_10000F91C(_Unwind_Exception *a1)
{
}

void sub_10000F930(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained wifiSoftErrorEventHandler:*(void *)(a1 + 40) eventType:*(unsigned int *)(a1 + 56) eventData:*(void *)(a1 + 48)];
}

id sub_10000F970(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = [v1 getErrorCounters];
  }

  else
  {
    uint64_t v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s:SoftErrorManagerRef is NULL!",  "WiFiSoftErrorManagerGetErrorCounters");
    }
    objc_autoreleasePoolPop(v5);
    id v3 = 0LL;
  }

  return v3;
}

void sub_10000FC28(_Unwind_Exception *a1)
{
}

LABEL_10:
  id v15 = v11;
LABEL_11:
  objc_autoreleasePoolPop(v15);
  id v16 = 0;
LABEL_24:
  objc_autoreleasePoolPop(v3);
  return v16;
}

        if (++v5 >= CFArrayGetCount(*(CFArrayRef *)(qword_100219860 + 32))) {
          goto LABEL_20;
        }
      }

      id v10 = objc_autoreleasePoolPush();
      id v11 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        double v12 = "WiFiMetricsManagerGetDeviceMetricsFromInterfaceName: Couldn't get WiFiDeviceRef";
        goto LABEL_18;
      }

    id v11 = BytePtr[1] + 2LL;
    v7 += v11;
    BytePtr += v11;
  }

  while (1)
  {
    double v13 = *((unsigned __int8 *)v9 + 2);
    id v15 = (char *)v9 + v13;
    id v9 = (unsigned __int16 *)(v15 + 3);
  }

  id v16 = *(_OWORD *)(v9 + 2);
  v2[16] = *((_BYTE *)v9 + 20);
  *(_OWORD *)id v2 = v16;
  BytePtr = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%s", v2);
LABEL_24:
  free(v2);
  return BytePtr;
}

    __int128 v21 = 0LL;
    goto LABEL_11;
  }

  if (([v10 options] & 1) != 0
    && objc_msgSend( objc_msgSend(v10, "peerAddress"),  "isEqual:",  objc_msgSend([WiFiMACAddress alloc], "initWithAddress:", 0)))
  {
    *(_BYTE *)(a1 + 5490) = v17;
    id v11 = +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance");
    -[WiFiUserInteractionMonitor updateIsAirplayActiveOverInfra:](v11, "updateIsAirplayActiveOverInfra:", v17);
  }

  double v12 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s manager->latencySensitiveServices.airplayOverInfra:%u",  "WiFiDeviceManagerAppTrafficRegistration",  *(unsigned __int8 *)(a1 + 5490));
  }
  objc_autoreleasePoolPop(v12);
  sub_1000EB060(a1, 0LL);
  if (*(_BYTE *)(a1 + 433)) {
    sub_1000F5218(a1, 4LL);
  }
  double v13 = 0LL;
LABEL_18:

  return v13;
}

  v33[0] = a6;
  __int128 v25 = CFNumberCreate(0LL, kCFNumberCFIndexType, v33);
  if (!v25)
  {
    __int128 v26 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: probeTimeoutSecsRef is NULL !",  "__WiFiDeviceManagerTriggerActiveProbe");
    }
    __int128 v25 = 0LL;
LABEL_46:
    uint64_t v28 = 0LL;
LABEL_53:
    uint64_t v29 = 4294963394LL;
    goto LABEL_29;
  }

    Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
    if (!Mutable)
    {
LABEL_17:
      *(void *)(a1 + 1120) = 0LL;
      *(void *)(a1 + 1112) = 0LL;
      return 1LL;
    }

    id v9 = Mutable;
    id v10 = *(const __CFArray **)(a1 + 1104);
    if (!v10 || (Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 1104)), double v12 = Count - 1, Count < 1))
    {
LABEL_13:
      double v13 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        int v14 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@*} %@",  @"AUTOJOIN",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Attempting auto-join for networks in following order: %@",  v9)),  "UTF8String"));
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          id v15 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v14, "UTF8String")),  "UTF8String");
          *(_DWORD *)buf = 136446210;
          v64 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
        }
      }

      objc_autoreleasePoolPop(v13);
      CFRelease(v9);
      goto LABEL_17;
    }

    id v16 = Count;
    BOOL v17 = 0LL;
    while (1)
    {
      uint64_t v18 = CFArrayGetValueAtIndex(v10, v17);
      if (v18)
      {
        uint64_t v19 = v18;
        if (sub_100097264(v18)) {
          __int128 v20 = (const __CFString *)sub_1000951FC((uint64_t)v19, @"BSSID");
        }
        else {
          __int128 v20 = (const __CFString *)sub_100095BC8(v19);
        }
        CFStringAppend(v9, v20);
        if (sub_100095318((BOOL)v19))
        {
          __int128 v21 = sub_1000998D0((uint64_t)v19);
          CFStringAppend(v9, @"(");
          if (v21) {
            __int128 v22 = @"HS2.0-h";
          }
          else {
            __int128 v22 = @"HS2.0-r";
          }
          CFStringAppend(v9, v22);
          __int128 v23 = sub_100108C9C(a1, v19);
          __int128 v24 = @",";
          if (v23)
          {
LABEL_31:
            CFStringAppend(v9, v24);
            CFStringAppend(v9, @"HS");
          }

          __int128 v26 = sub_1000DAF1C(a1, v19);
          __int128 v27 = @",";
          if (v26)
          {
LABEL_33:
            CFStringAppend(v9, v27);
            CFStringAppend(v9, @"C");
          }

          uint64_t v28 = sub_1000971AC((uint64_t)v19);
          uint64_t v29 = @",";
          if (v28)
          {
LABEL_35:
            CFStringAppend(v9, v29);
            CFStringAppend(v9, @"A");
          }

          int v30 = sub_100095B4C((uint64_t)v19);
          v31 = @",";
          if (v30)
          {
LABEL_37:
            CFStringAppend(v9, v31);
            CFStringAppend(v9, @"EAP");
          }

          v32 = sub_1000957F4((BOOL)v19);
          uint64_t v33 = @",";
          if (v32)
          {
LABEL_39:
            CFStringAppend(v9, v33);
            CFStringAppend(v9, @"WEP");
          }

          v34 = sub_100096E90((uint64_t)v19);
          uint64_t v35 = @",";
          if (v34)
          {
LABEL_41:
            CFStringAppend(v9, v35);
            CFStringAppend(v9, @"W");
          }

          __int128 v36 = sub_100096D08((const __CFDictionary *)v19);
          __int128 v37 = @",";
          if (v36)
          {
LABEL_43:
            CFStringAppend(v9, v37);
            CFStringAppend(v9, @"SAE");
          }

          __int128 v38 = sub_100096A74((uint64_t)v19);
          if (v17 >= v12) {
            CFStringAppendFormat(v9, 0LL, @", %@"), v38);
          }
          else {
            CFStringAppendFormat(v9, 0LL, @", %@, "), v38);
          }
          goto LABEL_47;
        }

        __int128 v25 = sub_100108C9C(a1, v19);
        __int128 v24 = CFSTR("(");
        if (v25) {
          goto LABEL_31;
        }
        __int128 v39 = sub_1000DAF1C(a1, v19);
        __int128 v27 = CFSTR("(");
        if (v39) {
          goto LABEL_33;
        }
        __int128 v40 = sub_1000971AC((uint64_t)v19);
        uint64_t v29 = CFSTR("(");
        if (v40) {
          goto LABEL_35;
        }
        __int128 v41 = sub_100095B4C((uint64_t)v19);
        v31 = CFSTR("(");
        if (v41) {
          goto LABEL_37;
        }
        __int128 v42 = sub_1000957F4((BOOL)v19);
        uint64_t v33 = CFSTR("(");
        if (v42) {
          goto LABEL_39;
        }
        __int128 v43 = sub_100096E90((uint64_t)v19);
        uint64_t v35 = CFSTR("(");
        if (v43) {
          goto LABEL_41;
        }
        v44 = sub_100096D08((const __CFDictionary *)v19);
        __int128 v37 = CFSTR("(");
        if (v44) {
          goto LABEL_43;
        }
        v62 = sub_100096A74((uint64_t)v19);
        CFStringAppendFormat(v9, 0LL, @"(%@), ", v62);
      }

  objc_autoreleasePoolPop(v6);
}

    id v16 = NSPOSIXErrorDomain;
    BOOL v17 = 22LL;
    goto LABEL_15;
  }

  uint64_t v18 = v12;
  uint64_t v19 = a3;
LABEL_16:
  if ([v19 response])
  {
    __int128 v20 = (void (**)(id, NSError *, void))[a3 response];
    v20[2](v20, v18, 0LL);
  }
}

  objc_autoreleasePoolPop(v7);
}

  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

LABEL_20:
      double v13 = (char *)v13 + 1;
    }

    while (v10 != v13);
    __int128 v21 = [v8 countByEnumeratingWithState:&v30 objects:v34 count:16];
    id v10 = v21;
    id v11 = (v11 + (_DWORD)v13);
  }

  while (v21);
LABEL_36:
  __int128 v23 = objc_autoreleasePoolPush();
  __int128 v24 = v28;
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: isLateRoam: %d",  "-[WiFiRoamManager detectLateRoam]",  v28 & 1);
  }
  objc_autoreleasePoolPop(v23);
  id v3 = v27;
LABEL_43:
  __int128 v22 = v24 & 1;
LABEL_44:
  objc_autoreleasePoolPop(v3);
  return v22;
}

    double v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s WiFiMetricsManagerRecordColocatedSSIDData: Failed to find WiFiMetricsDeviceMetricsRef for event",  "WiFiMetricsManagerRecordColocatedSSIDData");
    }
    objc_autoreleasePoolPop(v13);
  }

  __int128 v21 = 0LL;
  __int128 v22 = 0;
LABEL_21:
  sub_10014BB68(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, (uint64_t)v18, v19, (uint64_t)v21, v22, v14, 0);
  if (v8) {
    CFRelease(v8);
  }
  if (a5) {
    CFRelease(a5);
  }
  if (a3) {
    CFRelease(a3);
  }
}

    uint64_t v19 = (unint64_t)sub_10003DCF8(a1, a2);
LABEL_21:
    if (((v19 >> a3) & 1) == 0) {
      return;
    }
    __int128 v20 = a3;
    __int128 v21 = sub_10003BEDC(a2);
    __int128 v22 = (const void *)sub_10004CE2C(v21);
    if (v22)
    {
      __int128 v23 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, v22);
      __int128 v24 = v23;
      if (v23)
      {
        BytePtr = CFDataGetBytePtr(v23);
        Length = CFDataGetLength(v24);
        if (!a4) {
          goto LABEL_41;
        }
      }

      else
      {
        Length = 0;
        BytePtr = 0LL;
        if (!a4) {
          goto LABEL_41;
        }
      }
    }

    else
    {
      Length = 0;
      BytePtr = 0LL;
      __int128 v24 = 0LL;
      if (!a4) {
        goto LABEL_41;
      }
    }

    __int128 v27 = CFGetTypeID(a4);
    if (v27 == CFDataGetTypeID())
    {
      uint64_t v28 = CFDataGetBytePtr((CFDataRef)a4);
      uint64_t v29 = CFDataGetLength((CFDataRef)a4);
LABEL_43:
      v44 = *(_DWORD *)(a1 + 96);
      v45 = (vm_address_t)BytePtr;
      v46 = Length;
      v47 = v20;
      v48 = (uint64_t)v28;
      goto LABEL_44;
    }

    if (a3 == 10)
    {
      uint64_t v28 = sub_100012CEC((uint64_t)a4);
      if (!v28)
      {
LABEL_42:
        uint64_t v29 = 0;
        goto LABEL_43;
      }

      int v30 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, v28);
      if (!v30)
      {
        CFRelease(v28);
        v44 = *(_DWORD *)(a1 + 96);
        v45 = (vm_address_t)BytePtr;
        v46 = Length;
        v47 = v20;
        v48 = 0LL;
        uint64_t v29 = 0;
LABEL_44:
        sub_10014BE90(v44, v45, v46, v47, v48, v29, 0);
        if (!v24) {
          return;
        }
LABEL_45:
        CFRelease(v24);
        return;
      }

      v31 = v30;
      v32 = CFDataGetBytePtr(v30);
      uint64_t v33 = CFDataGetLength(v31);
      CFRelease(v28);
      v34 = *(_DWORD *)(a1 + 96);
      uint64_t v35 = (vm_address_t)BytePtr;
      __int128 v36 = Length;
      __int128 v37 = v20;
      __int128 v38 = (uint64_t)v32;
      __int128 v39 = v33;
LABEL_39:
      sub_10014BE90(v34, v35, v36, v37, v38, v39, 0);
      CFRelease(v31);
      if (!v24) {
        return;
      }
      goto LABEL_45;
    }

    __int128 v42 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, a4);
    if (v42)
    {
      v31 = v42;
      __int128 v43 = CFDataGetBytePtr(v42);
      __int128 v39 = CFDataGetLength(v31);
      v34 = *(_DWORD *)(a1 + 96);
      uint64_t v35 = (vm_address_t)BytePtr;
      __int128 v36 = Length;
      __int128 v37 = v20;
      __int128 v38 = (uint64_t)v43;
      goto LABEL_39;
    }

    objc_autoreleasePoolPop(v15);
    return 0LL;
  }

  id v11 = sub_100094E60((uint64_t)kCFAllocatorDefault, (uint64_t)ValueAtIndex);
  if (!v11)
  {
    id v15 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null networkCopy",  "WiFiManagerSetNetworkProperty",  v18);
    }
    goto LABEL_20;
  }

  double v12 = v11;
  sub_10009582C((uint64_t)v11, a3, a4);
  double v13 = sub_100077498(a1, v12, 1u);
  CFRelease(v12);
  return v13;
}

  sub_10003A8FC((vm_address_t)a2, a3);
  return 0LL;
}

  sub_10003A8FC((vm_address_t)a2, a3);
  sub_10003A8FC((vm_address_t)a4, a5);
  return 0LL;
}

  objc_autoreleasePoolPop(v8);
}

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100011D84(id a1)
{
  if (objc_opt_class(&OBJC_CLASS___MCProfileConnection)) {
    qword_100219800 = objc_alloc_init(&OBJC_CLASS___ManagedConfigWrapper);
  }
}

void sub_100012050(uint64_t a1)
{
}

void sub_100012158(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: failed to initialize ManagedConfiguration <%@>", "-[ManagedConfigWrapper MCInitialize]_block_invoke", a2 message];
    }
  }

  else
  {
    [*(id *)(a1 + 32) setMcInitialized:1];
    id v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: ManagedConfiguration initialized",  "-[ManagedConfigWrapper MCInitialize]_block_invoke",  v4);
    }
  }

  objc_autoreleasePoolPop(v3);
}

id sub_100012284(uint64_t a1)
{
  return [*(id *)(a1 + 32) MCSettingsDidChange:0];
}

uint64_t sub_100012900()
{
  uint64_t result = qword_100219810;
  if (!qword_100219810)
  {
    pthread_once(&stru_1002189F8, (void (*)(void))sub_10001293C);
    return qword_100219810;
  }

  return result;
}

uint64_t sub_10001293C()
{
  uint64_t result = _CFRuntimeRegisterClass(&unk_1001E2B10);
  qword_100219810 = result;
  return result;
}

void *sub_100012960(const __CFAllocator *a1, CFDictionaryRef theDict)
{
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, @"PolicyType");
    if (Value)
    {
      uint64_t v5 = Value;
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID != CFGetTypeID(v5)) {
        return 0LL;
      }
    }
  }

  if (!qword_100219810) {
    pthread_once(&stru_1002189F8, (void (*)(void))sub_10001293C);
  }
  uint64_t Instance = _CFRuntimeCreateInstance(a1);
  id v8 = (void *)Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = 0LL;
    CFMutableDictionaryRef v9 = theDict
       ? CFDictionaryCreateMutableCopy(a1, 0LL, theDict)
       : CFDictionaryCreateMutable(a1, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v8[2] = v9;
    if (!v9)
    {
      CFRelease(v8);
      return 0LL;
    }
  }

  return v8;
}

void *sub_100012A4C(const __CFAllocator *a1, const void *a2, const void *a3, const void *a4)
{
  if (!a2) {
    return 0LL;
  }
  Mutable = CFDictionaryCreateMutable(a1, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return 0LL;
  }
  CFMutableDictionaryRef v9 = Mutable;
  CFDictionaryAddValue(Mutable, @"PolicyType", a2);
  if (a3)
  {
    CFDictionaryAddValue(v9, @"PolicyUUID", a3);
    id v10 = 0LL;
    CFStringRef v11 = 0LL;
    if (!a4)
    {
LABEL_6:
      double v12 = sub_100012960(a1, v9);
      if (v11) {
        CFRelease(v11);
      }
      if (v10) {
        CFRelease(v10);
      }
      goto LABEL_10;
    }

LABEL_5:
    CFDictionaryAddValue(v9, @"PolicyProperties", a4);
    goto LABEL_6;
  }

  int v14 = CFUUIDCreate(a1);
  if (v14)
  {
    id v10 = v14;
    CFStringRef v11 = CFUUIDCreateString(a1, v14);
    CFDictionaryAddValue(v9, @"PolicyUUID", v11);
    if (!a4) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  double v12 = 0LL;
LABEL_10:
  CFRelease(v9);
  return v12;
}

  objc_autoreleasePoolPop(v12);
  return Copy;
}

    objc_autoreleasePoolPop(v4);
  }

  _Block_object_dispose(&v8, 8);
}

    objc_autoreleasePoolPop(v3);
  }

  _Block_object_dispose(&v7, 8);
}

    objc_autoreleasePoolPop(v3);
  }

  _Block_object_dispose(&v7, 8);
}

  objc_autoreleasePoolPop(v2);
}

  if (!(_DWORD)a3 && *(void *)(a7 + 704)) {
    goto LABEL_13;
  }
LABEL_7:
  CFMutableDictionaryRef v9 = sub_1000AB9E4((uint64_t)kCFAllocatorDefault, a3, a4, a1, a2, a5, a6);
  id v10 = (const void *)v9;
  if (v9)
  {
    sub_1000ABD28(v9, (uint64_t)sub_10008C2D8, a7);
    if (sub_1000ABAA4((uint64_t)v10))
    {
      context[0] = 0xAAAAAAAAFFFFF0C1LL;
      context[1] = v10;
      CFSetApplyFunction(*(CFSetRef *)(a7 + 136), (CFSetApplierFunction)sub_10008C588, context);
      if (LODWORD(context[0]) == -3903)
      {
        CFStringRef v11 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Notification %d not supported",  sub_1000ABA94((uint64_t)v10));
        }
        objc_autoreleasePoolPop(v11);
        CFRelease(v10);
        goto LABEL_13;
      }

      byte_100219930 = 1;
    }
  }

  if (!(_DWORD)a3 && *(void *)(a7 + 704)) {
    goto LABEL_13;
  }
LABEL_7:
  CFMutableDictionaryRef v9 = sub_1000AADBC((uint64_t)kCFAllocatorDefault, a1, a2, a5, a6);
  id v10 = (const void *)v9;
  if (v9)
  {
    sub_1000ABD28(v9, (uint64_t)sub_10008C2D8, a7);
    if (sub_1000ABAA4((uint64_t)v10))
    {
      context[0] = 0xAAAAAAAAFFFFF0C1LL;
      context[1] = v10;
      CFSetApplyFunction(*(CFSetRef *)(a7 + 136), (CFSetApplierFunction)sub_10008C588, context);
      if (LODWORD(context[0]) == -3903)
      {
        CFStringRef v11 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Notification %d not supported",  sub_1000ABA94((uint64_t)v10));
        }
        objc_autoreleasePoolPop(v11);
        CFRelease(v10);
        goto LABEL_13;
      }

      byte_100219930 = 1;
    }
  }

void sub_100012B70(uint64_t a1, void *value)
{
  if (a1)
  {
    if (value) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), @"PolicyUUID", value);
    }
  }

const void *sub_100012B90(uint64_t a1)
{
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"PolicyUUID");
}

void sub_100012BA0(uint64_t a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (v3)
  {
    CFNumberRef v4 = v3;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), @"PolicyType", v3);
    CFRelease(v4);
  }

uint64_t sub_100012C04(uint64_t a1)
{
  uint64_t v1 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"PolicyType");
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    return valuePtr;
  }

  return v1;
}

void sub_100012C54(uint64_t a1, const void *a2, const void *a3)
{
  Value = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"PolicyProperties");
  if (Value)
  {
    if (a3) {
      CFDictionarySetValue(Value, a2, a3);
    }
    else {
      CFDictionaryRemoveValue(Value, a2);
    }
  }

CFDictionaryRef sub_100012CAC(uint64_t a1, const void *a2)
{
  uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"PolicyProperties");
  if (result) {
    return (const __CFDictionary *)CFDictionaryGetValue(result, a2);
  }
  return result;
}

CFDictionaryRef sub_100012CEC(uint64_t a1)
{
  return CFDictionaryCreateCopy(kCFAllocatorDefault, *(CFDictionaryRef *)(a1 + 16));
}

__CFArray *sub_100012D04(const __CFArray *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  CFNumberRef v3 = Mutable;
  if (a1)
  {
    if (Mutable)
    {
      CFIndex Count = CFArrayGetCount(a1);
      if (Count >= 1)
      {
        CFIndex v5 = Count;
        for (CFIndex i = 0LL; i != v5; ++i)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, i);
          if (ValueAtIndex)
          {
            id v8 = sub_100012960(kCFAllocatorDefault, ValueAtIndex);
            if (v8)
            {
              CFMutableDictionaryRef v9 = v8;
              CFArrayAppendValue(v3, v8);
              CFRelease(v9);
            }
          }
        }
      }
    }
  }

  return v3;
}

__CFArray *sub_100012DBC(const __CFArray *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  CFNumberRef v3 = Mutable;
  if (a1)
  {
    if (Mutable)
    {
      CFIndex Count = CFArrayGetCount(a1);
      if (Count >= 1)
      {
        CFIndex v5 = Count;
        for (CFIndex i = 0LL; i != v5; ++i)
        {
          ValueAtIndex = (CFDictionaryRef *)CFArrayGetValueAtIndex(a1, i);
          if (ValueAtIndex)
          {
            CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, ValueAtIndex[2]);
            if (Copy)
            {
              CFDictionaryRef v9 = Copy;
              CFArrayAppendValue(v3, Copy);
              CFRelease(v9);
            }
          }
        }
      }
    }
  }

  return v3;
}

void sub_100012E74(void *a1)
{
  if (!a1) {
    sub_1001539D4();
  }
  CFTypeID v2 = CFGetTypeID(a1);
  uint64_t v3 = qword_100219810;
  if (!qword_100219810)
  {
    pthread_once(&stru_1002189F8, (void (*)(void))sub_10001293C);
    uint64_t v3 = qword_100219810;
  }

  if (v2 != v3) {
    sub_1001539FC();
  }
  CFNumberRef v4 = (const void *)a1[2];
  if (v4)
  {
    CFRelease(v4);
    a1[2] = 0LL;
  }

BOOL sub_100012EE8(uint64_t a1, uint64_t a2)
{
  Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"PolicyUUID");
  CFNumberRef v4 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 16), @"PolicyUUID");
  if (Value) {
    BOOL v5 = v4 == 0LL;
  }
  else {
    BOOL v5 = 1;
  }
  return !v5 && CFStringCompare(Value, v4, 0LL) == kCFCompareEqualTo;
}

CFStringRef sub_100012F60(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v4 = sub_100012C04(a1);
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"PolicyUUID");
  return CFStringCreateWithFormat(kCFAllocatorDefault, a2, @"%d %@", v4, Value);
}

CFStringRef sub_100012FCC(uint64_t a1)
{
  uint64_t v2 = sub_100012C04(a1);
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), @"PolicyUUID");
  return CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"%d %@", v2, Value);
}

NSString *sub_100013210(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const char *)[a1 UTF8String];
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = ether_aton(v2);
      if (v4) {
        return +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%02x:%02x:%02x:%02x:%02x:%02x",  v4->octet[0],  v4->octet[1],  v4->octet[2],  v4->octet[3],  v4->octet[4],  v4->octet[5]);
      }
      id v8 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: badly formatted MAC address: %s",  "_reformatMacAddress",  v3);
      }
      uint64_t v7 = v8;
    }

    else
    {
      uint64_t v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4, "%s: invalid MAC address: %@", "_reformatMacAddress", a1 message];
      }
      uint64_t v7 = v6;
    }

    objc_autoreleasePoolPop(v7);
  }

  return 0LL;
}

void sub_100013534(id a1)
{
  qword_100219818 = objc_alloc_init(&OBJC_CLASS___WiFiCWFInterface);
}

id sub_10001394C(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  id v8 = objc_alloc_init(&OBJC_CLASS___CWFSensingResult);
  objc_msgSend(v8, "setData:", objc_msgSend(a3, "copy"));
  id v9 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  [v9 setObject:a5 forKeyedSubscript:@"CWF_ACCESSORY_UUID"];
  [v9 setObject:v8 forKeyedSubscript:@"SensingResult"];
  objc_msgSend( v9,  "setObject:forKeyedSubscript:",  +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"CWFHomeKitErrorDomain",  a4,  0),  @"WiFiInterfaceReturn");
  return -[NSNotificationCenter postNotificationName:object:userInfo:]( +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"),  "postNotificationName:object:userInfo:",  @"SensingResult",  0LL,  v9);
}

uint64_t sub_100013FE8(uint64_t a1, uint64_t a2, dispatch_queue_s *a3)
{
  if (!a2) {
    goto LABEL_65;
  }
  if (!qword_100219838) {
    pthread_once(&stru_100218E50, (void (*)(void))sub_1000207AC);
  }
  uint64_t Instance = _CFRuntimeCreateInstance(a1);
  if (!Instance) {
    goto LABEL_65;
  }
  uint64_t v7 = Instance;
  bzero((void *)(Instance + 16), 0xC78uLL);
  *(void *)(v7 + 32) = a2;
  *(_WORD *)(v7 + 220) = 256;
  *(_DWORD *)(v7 + 224) = 0;
  *(_DWORD *)(v7 + 2752) = 0;
  *(_BYTE *)(v7 + 160) = 1;
  *(CFAbsoluteTime *)(v7 + 80) = CFAbsoluteTimeGetCurrent();
  *(void *)(v7 + 16) = 1LL;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  *(void *)(v7 + 24) = Mutable;
  if (!Mutable
    || (CFMutableArrayRef v9 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks), (*(void *)(v7 + 320) = v9) == 0LL)
    || (id v10 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM),
        dispatch_queue_t v11 = dispatch_queue_create("WiFiLQAManager", v10),
        (*(void *)(v7 + 296) = v11) == 0LL))
  {
LABEL_48:
    uint64_t v35 = *(dispatch_object_s **)(v7 + 296);
    if (v35) {
      dispatch_release(v35);
    }
    __int128 v36 = *(dispatch_object_s **)(v7 + 536);
    if (v36)
    {
      dispatch_release(v36);
      *(void *)(v7 + 536) = 0LL;
    }

    __int128 v37 = *(dispatch_object_s **)(v7 + 336);
    if (v37)
    {
      dispatch_release(v37);
      *(void *)(v7 + 336) = 0LL;
    }

    __int128 v38 = *(dispatch_object_s **)(v7 + 2896);
    if (v38)
    {
      dispatch_release(v38);
      *(void *)(v7 + 2896) = 0LL;
    }

    __int128 v39 = *(dispatch_object_s **)(v7 + 2912);
    if (v39) {
      dispatch_release(v39);
    }
    __int128 v40 = *(const void **)(v7 + 24);
    if (v40)
    {
      CFRelease(v40);
      *(void *)(v7 + 24) = 0LL;
    }

    __int128 v41 = *(const void **)(v7 + 320);
    if (v41)
    {
      CFRelease(v41);
      *(void *)(v7 + 320) = 0LL;
    }

    __int128 v42 = *(const void **)(v7 + 112);
    if (v42)
    {
      CFRelease(v42);
      *(void *)(v7 + 112) = 0LL;
    }

    CFRelease((CFTypeRef)v7);
LABEL_65:
    v34 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: LQAManager Create Failed\n", "WiFiLQAMgrCreate");
    }
    uint64_t v7 = 0LL;
    goto LABEL_68;
  }

  dispatch_source_t v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, a3);
  *(void *)(v7 + 336) = v12;
  if (!v12)
  {
    v44 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: failed to create activeProbe.timer",  "WiFiLQAMgrCreate");
    }
    goto LABEL_73;
  }

  dispatch_set_context(v12, (void *)v7);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 336), (dispatch_function_t)sub_100014814);
  *(void *)(v7 + 344) = 0x100000005B8LL;
  *(_DWORD *)(v7 + 352) = 32;
  uint64_t v13 = sub_100043E8C(*(void *)(v7 + 32));
  if (!v13)
  {
    __int128 v20 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: IfName is NULL", "__WiFiLQAMgrSetActiveProbeSize");
    }
    goto LABEL_20;
  }

  int v14 = (const __CFString *)v13;
  *(_OWORD *)buffer = 0u;
  __int128 v47 = 0u;
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  CFStringGetCString(v14, buffer, 16LL, SystemEncoding);
  int v16 = socket(2, 2, 0);
  if (v16 == -1)
  {
    __int128 v20 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Socket failed to open",  "__WiFiLQAMgrSetActiveProbeSize");
    }
LABEL_20:
    objc_autoreleasePoolPop(v20);
    goto LABEL_24;
  }

  int v17 = v16;
  if (ioctl(v16, 0xC0206933uLL, buffer) == -1)
  {
    uint64_t v19 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: ioctl(SIOCGIFMTU) failed",  "__WiFiLQAMgrSetActiveProbeSize",  v45,  *(void *)buffer,  *(void *)&buffer[8]);
    }
  }

  else
  {
    uint64_t v18 = v47;
    if ((int)v47 >= 37)
    {
      *(int32x2_t *)(v7 + 344) = vmin_s32(vdup_n_s32(v47), (int32x2_t)0x100000005B8LL);
      *(_DWORD *)(v7 + 352) = 32;
    }

    uint64_t v19 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  2,  "%s: MTU Size: %d",  "__WiFiLQAMgrSetActiveProbeSize",  v18,  *(void *)buffer,  *(void *)&buffer[8]);
    }
  }

  objc_autoreleasePoolPop(v19);
  close(v17);
LABEL_24:
  *(_BYTE *)(v7 + 637) = 0;
  *(_DWORD *)(v7 + 632) = 1;
  *(void *)(v7 + 640) = 0xFFFFFFB0FFFFFFB5LL;
  *(_DWORD *)(v7 + 656) = 10;
  *(void *)(v7 + 664) = 0x402E000000000000LL;
  *(_BYTE *)(v7 + 639) = 1;
  *(_BYTE *)(v7 + 716) = 1;
  *(void *)(v7 + 720) = 0x3F00000000000005LL;
  *(_DWORD *)(v7 + 72_Block_object_dispose(va, 8) = 3;
  *(_BYTE *)(v7 + 780) = 1;
  *(void *)(v7 + 784) = 0x3F4000000000000FLL;
  *(void *)(v7 + 792) = 0x3F0000000000000FLL;
  *(_BYTE *)(v7 + 860) = 1;
  *(void *)(v7 + 864) = 0x3F4CCCCD00000005LL;
  *(void *)(v7 + 872) = 0x3F0000000000000FLL;
  *(_BYTE *)(v7 + 880) = 1;
  *(void *)(v7 + 884) = 0x3F00000000000003LL;
  *(_BYTE *)(v7 + 896) = 1;
  *(void *)(v7 + 904) = 0x4024000000000000LL;
  *(_BYTE *)(v7 + 912) = 1;
  *(_DWORD *)(v7 + 916) = 1;
  *(_WORD *)(v7 + 920) = 20481;
  *(_BYTE *)(v7 + 128_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(v7 + 924) = 1;
  *(void *)(v7 + 92_Block_object_dispose(va, 8) = 0x3E80000000000005LL;
  *(_DWORD *)(v7 + 936) = 0;
  *(void *)(v7 + 704) = 0x3DCCCCCD3E99999ALL;
  *(_BYTE *)(v7 + 98_Block_object_dispose(va, 8) = 1;
  *(void *)(v7 + 992) = 0x3F4000000000000FLL;
  *(void *)(v7 + 1000) = 0xFFFFFFFFLL;
  *(_BYTE *)(v7 + 106_Block_object_dispose(va, 8) = 1;
  *(void *)(v7 + 1072) = 0x3F4CCCCD00000005LL;
  *(void *)(v7 + 1080) = 0xFFFFFFFFLL;
  *(_BYTE *)(v7 + 108_Block_object_dispose(va, 8) = 1;
  *(void *)(v7 + 1092) = 0x3DCCCCCD00000005LL;
  *(_DWORD *)(v7 + 1100) = 0;
  *(_DWORD *)(v7 + 712) = 1028443341;
  *(_BYTE *)(v7 + 1152) = 1;
  *(void *)(v7 + 1156) = 0x3F0000000000000FLL;
  *(void *)(v7 + 1164) = 0xFFFFFFFFLL;
  *(_BYTE *)(v7 + 1232) = 1;
  *(void *)(v7 + 1236) = 0x3F00000000000005LL;
  *(void *)(v7 + 1244) = 0xFFFFFFFFLL;
  *(void *)(v7 + 64_Block_object_dispose(va, 8) = 0xFFFFFFA6FFFFFFABLL;
  *(_OWORD *)(v7 + 672) = xmmword_10017F150;
  *(_OWORD *)(v7 + 68_Block_object_dispose(va, 8) = xmmword_10017F160;
  *(_OWORD *)(v7 + 8_Block_object_dispose(va, 8) = xmmword_10017F170;
  *(_DWORD *)(v7 + 104) = 0;
  *(_BYTE *)(v7 + 10_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(v7 + 278_Block_object_dispose(va, 8) = 0;
  *(void *)(v7 + 280_Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(v7 + 2816) = 0;
  *(_OWORD *)(v7 + 120) = 0u;
  *(_OWORD *)(v7 + 136) = 0u;
  *(void *)(v7 + 152) = 0LL;
  CFMutableSetRef v21 = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
  *(void *)(v7 + 112) = v21;
  if (!v21) {
    goto LABEL_48;
  }
  dispatch_source_t v22 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, a3);
  *(void *)(v7 + 536) = v22;
  if (!v22)
  {
    v44 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: failed to create roamTimer", "WiFiLQAMgrCreate");
    }
LABEL_73:
    objc_autoreleasePoolPop(v44);
    goto LABEL_48;
  }

  dispatch_set_context(v22, (void *)v7);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 536), (dispatch_function_t)sub_100014874);
  if (!*(_DWORD *)(v7 + 420)
    && notify_register_mach_port( "com.apple.symptoms.managed_events.wifi-trigger-disconnect",  (mach_port_t *)(v7 + 420),  0,  (int *)(v7 + 416)))
  {
    goto LABEL_48;
  }

  if (!*(_DWORD *)(v7 + 444)
    && notify_register_mach_port( "com.apple.symptoms.managed_events.dns-failure",  (mach_port_t *)(v7 + 444),  0,  (int *)(v7 + 440)))
  {
    goto LABEL_48;
  }

  *(_DWORD *)(v7 + 1256) = 0;
  qword_100219828 = v7;
  CFMutableArrayRef v23 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  *(void *)(v7 + 256) = v23;
  if (!v23) {
    goto LABEL_48;
  }
  CFMutableArrayRef v24 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  *(void *)(v7 + 264) = v24;
  if (!v24) {
    goto LABEL_48;
  }
  if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 7)
  {
    __int128 v25 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4 message:"Audio accessory detected\n"];
    }
    objc_autoreleasePoolPop(v25);
    *(_BYTE *)(v7 + 2824) = 1;
    *(void *)(v7 + 640) = 0xFFFFFFABFFFFFFB0LL;
  }

  *(_BYTE *)(v7 + 2784) = 0;
  *(_WORD *)(v7 + 2825) = 0;
  *(_BYTE *)(v7 + 2836) = 0;
  *(void *)(v7 + 282_Block_object_dispose(va, 8) = 0LL;
  __int128 v26 = objc_autoreleasePoolPush();
  __int128 v27 = (void *)qword_100219F60;
  if (qword_100219F60)
  {
    int v28 = _os_feature_enabled_impl("WiFiManager", "ColocatedScopeTransition");
    uint64_t v29 = "disabled";
    if (v28) {
      uint64_t v29 = "enabled";
    }
    objc_msgSend(v27, "WFLog:message:", 3, "%s: ColocatedScopeTransition Feature is %s", "WiFiLQAMgrCreate", v29);
  }

  objc_autoreleasePoolPop(v26);
  int v30 = -[WiFiTrafficEngManager initWithArgs:](objc_alloc(&OBJC_CLASS___WiFiTrafficEngManager), "initWithArgs:", v7);
  *(void *)(v7 + 2960) = v30;
  if (!v30) {
    goto LABEL_48;
  }
  v31 = -[WiFiTrafficEngManager trafficEng](v30, "trafficEng");
  *(void *)(v7 + 296_Block_object_dispose(va, 8) = v31;
  if (!v31) {
    goto LABEL_48;
  }
  *(_WORD *)(v7 + 2905) = 0;
  *(_DWORD *)(v7 + 290_Block_object_dispose(va, 8) = 1;
  *(_BYTE *)(v7 + 292_Block_object_dispose(va, 8) = 0;
  dispatch_queue_t v32 = dispatch_queue_create("TrafficEngineering", 0LL);
  *(void *)(v7 + 2912) = v32;
  if (!v32) {
    goto LABEL_48;
  }
  if (sub_1000550E0(*(void *)(v7 + 32)))
  {
    dispatch_source_t v33 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, a3);
    *(void *)(v7 + 2896) = v33;
    dispatch_set_context(v33, (void *)v7);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 2896), (dispatch_function_t)sub_100014A4C);
  }

  *(_BYTE *)(v7 + 2904) = 0;
  *(void *)(v7 + 2920) = 0LL;
  *(_WORD *)(v7 + 2977) = 8;
  *(void *)(v7 + 3192) = 0LL;
  v34 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 2, "%s: LQAManager Created\n", "WiFiLQAMgrCreate");
  }
LABEL_68:
  objc_autoreleasePoolPop(v34);
  return v7;
}

void sub_100014814(uint64_t a1)
{
  if (a1)
  {
    sub_10002157C(a1);
  }

  else
  {
    uint64_t v1 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQA mgr is null",  "__WiFiLQAMgrActiveProbeTimerCallback");
    }
    objc_autoreleasePoolPop(v1);
  }

void sub_100014874(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: LQA mgr is null", "__WiFiLQAMgrRoamTimerCallback");
    }
    goto LABEL_24;
  }

  if (!*(_BYTE *)(a1 + 632))
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQA mgr is disabled",  "__WiFiLQAMgrRoamTimerCallback");
    }
    goto LABEL_24;
  }

  uint64_t v2 = *(const __CFArray **)(a1 + 24);
  if (!v2)
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: LQM table is NULL",  "__WiFiLQAMgrRoamTimerCallback");
    }
    goto LABEL_24;
  }

  if (!CFArrayGetCount(v2))
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQM table is empty",  "__WiFiLQAMgrRoamTimerCallback");
    }
    goto LABEL_24;
  }

  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0LL);
  if (!ValueAtIndex)
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: Latest LQM Report is NULL",  "__WiFiLQAMgrRoamTimerCallback");
    }
LABEL_24:
    objc_autoreleasePoolPop(v6);
    return;
  }

  unsigned int valuePtr = *(_DWORD *)(a1 + 2788);
  if (!valuePtr)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"RSSI");
    if (!Value) {
      return;
    }
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  }

  if (*(_DWORD *)(a1 + 20) == 4)
  {
    BOOL v5 = *(void (**)(uint64_t, void, void, void, void))(a1 + 544);
    if (v5) {
      v5(a1, *(void *)(a1 + 40), *(void *)(a1 + 552), valuePtr, 0LL);
    }
    *(_BYTE *)(a1 + 392) = 0;
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 336), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 536), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
  }

void sub_100014A4C(uint64_t a1)
{
  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 2968), "__sendEventToPeers");
    sub_100020758(a1);
  }

  else
  {
    uint64_t v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQA mgr is null",  "__WiFiLQAMgrTrafficEngTimerCallback");
    }
    objc_autoreleasePoolPop(v2);
  }

uint64_t sub_100014AC8(uint64_t a1, char a2, int a3)
{
  if (a1)
  {
    *(_BYTE *)(a1 + 632) = a2;
    *(_BYTE *)(a1 + 637) = a3;
    if (a3) {
      BOOL v4 = *(_BYTE *)(a1 + 638) != 0;
    }
    else {
      BOOL v4 = 0;
    }
    sub_100014BB4((_OWORD *)a1, v4);
    BOOL v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: LQAConfigChange En: %d lqaMode: %d fallbackPref %d override %d askToDisc %d AggrTD %d rnfState %d",  "WiFiLQAMgrSetLQAEnable",  *(unsigned __int8 *)(a1 + 632),  *(unsigned int *)(a1 + 16),  *(unsigned __int8 *)(a1 + 221),  *(unsigned __int8 *)(a1 + 634),  *(unsigned __int8 *)(a1 + 636),  *(unsigned __int8 *)(a1 + 637),  *(unsigned __int8 *)(a1 + 638));
    }
  }

  else
  {
    BOOL v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManagerRef is NULL",  "WiFiLQAMgrSetLQAEnable",  v7,  v8,  v9,  v10,  v11,  v12,  v13);
    }
  }

  objc_autoreleasePoolPop(v5);
  return 4294963396LL;
}

void sub_100014BB4(_OWORD *a1, int a2)
{
  if (a1)
  {
    uint64_t v2 = (_OWORD *)((char *)a1 + 716);
    if (a2)
    {
      __int128 v3 = unk_100218DA0;
      _OWORD *v2 = xmmword_100218D90;
      *(_OWORD *)((char *)a1 + 732) = v3;
      __int128 v4 = unk_100218DC0;
      *(_OWORD *)((char *)a1 + 74_Block_object_dispose(va, 8) = xmmword_100218DB0;
      *(_OWORD *)((char *)a1 + 764) = v4;
      __int128 v5 = unk_100218DE0;
      *(_OWORD *)((char *)a1 + 924) = xmmword_100218DD0;
      *(_OWORD *)((char *)a1 + 940) = v5;
      __int128 v6 = unk_100218E00;
      *(_OWORD *)((char *)a1 + 956) = xmmword_100218DF0;
      *(_OWORD *)((char *)a1 + 972) = v6;
      __int128 v7 = xmmword_100218E10;
      __int128 v8 = unk_100218E20;
      __int128 v9 = xmmword_100218E30;
      a1[71] = unk_100218E40;
      a1[70] = v9;
      a1[69] = v8;
      a1[68] = v7;
    }

    else
    {
      __int128 v10 = unk_100218D60;
      _OWORD *v2 = xmmword_100218D50;
      *(_OWORD *)((char *)a1 + 732) = v10;
      __int128 v11 = unk_100218D80;
      *(_OWORD *)((char *)a1 + 74_Block_object_dispose(va, 8) = xmmword_100218D70;
      *(_OWORD *)((char *)a1 + 764) = v11;
    }
  }

  else
  {
    uint64_t v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4 message:"manager is NULL!"];
    }
    objc_autoreleasePoolPop(v12);
  }

uint64_t sub_100014C80(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t result = 0LL;
    *(_BYTE *)(a1 + 639) = a2 == 0;
  }

  else
  {
    __int128 v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s, LQAManagerRef is NULL", "WiFiLQAMgrSetXCTestMode");
    }
    objc_autoreleasePoolPop(v4);
    return 4294963396LL;
  }

  return result;
}

uint64_t sub_100014CFC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    *(_BYTE *)(a1 + 634) = *(_BYTE *)(a2 + 4);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    *(_BYTE *)(a1 + 637) = *(_BYTE *)(a2 + 6);
    byte_100219830 = *(_BYTE *)(a1 + 636) != 0;
    __int128 v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: LQAConfigChange En: %d lqaMode: %d fallbackPref %d override %d askToDisc %d AggrTD %d rnfState %d",  "WiFiLQAMgrSetLQAConfig",  *(unsigned __int8 *)(a1 + 632),  *(unsigned int *)(a1 + 16),  *(unsigned __int8 *)(a1 + 221),  *(unsigned __int8 *)(a1 + 634),  *(unsigned __int8 *)(a1 + 636),  *(unsigned __int8 *)(a1 + 637),  *(unsigned __int8 *)(a1 + 638));
    }
    uint64_t v4 = 0LL;
  }

  else
  {
    __int128 v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s, LQAManagerRef is NULL", "WiFiLQAMgrSetLQAConfig");
    }
    uint64_t v4 = 4294963396LL;
  }

  objc_autoreleasePoolPop(v3);
  return v4;
}

uint64_t sub_100014DF8(uint64_t a1, int a2)
{
  if (a1)
  {
    *(_BYTE *)(a1 + 63_Block_object_dispose(va, 8) = a2;
    if (a2) {
      BOOL v3 = *(_BYTE *)(a1 + 637) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    int v4 = !v3;
    sub_100014BB4((_OWORD *)a1, v4);
    __int128 v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: LQAConfigChange En: %d lqaMode: %d fallbackPref %d override %d askToDisc %d AggrTD %d rnfState %d",  "WiFiLQAMgrSetRNFState",  *(unsigned __int8 *)(a1 + 632),  *(unsigned int *)(a1 + 16),  *(unsigned __int8 *)(a1 + 221),  *(unsigned __int8 *)(a1 + 634),  *(unsigned __int8 *)(a1 + 636),  *(unsigned __int8 *)(a1 + 637),  *(unsigned __int8 *)(a1 + 638));
    }
    uint64_t v6 = 0LL;
  }

  else
  {
    __int128 v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s, LQAManagerRef is NULL", "WiFiLQAMgrSetRNFState");
    }
    uint64_t v6 = 4294963396LL;
  }

  objc_autoreleasePoolPop(v5);
  return v6;
}

uint64_t sub_100014EE0(unsigned __int8 *context, uint64_t a2)
{
  if (!context)
  {
    __int128 v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManagerRef is NULL",  "WiFiLQAMgrSetSystemWakeState",  v6);
    }
    goto LABEL_11;
  }

  if (context[160] == (_DWORD)a2)
  {
    __int128 v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, systemPowerOn was set to %d",  "WiFiLQAMgrSetSystemWakeState",  a2);
    }
LABEL_11:
    objc_autoreleasePoolPop(v5);
    return 4294963396LL;
  }

  context[160] = a2;
  if ((_DWORD)a2) {
    *((CFAbsoluteTime *)context + 10) = CFAbsoluteTimeGetCurrent();
  }
  else {
    dispatch_async_f(*((dispatch_queue_t *)context + 364), context, (dispatch_function_t)sub_100014FC0);
  }
  uint64_t result = 0LL;
  context[177] = 0;
  *((void *)context + 23) = 0LL;
  return result;
}

void sub_100014FC0(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  if (*(_BYTE *)(a1 + 2905) == 1)
  {
    objc_msgSend(*(id *)(a1 + 2968), "__invalidateDiscovery");
    *(_BYTE *)(a1 + 2905) = 0;
  }

  objc_autoreleasePoolPop(v2);
}

uint64_t sub_100015000(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t result = 0LL;
    *(void *)(a1 + 16_Block_object_dispose(va, 8) = a2;
    if ((a2 & 0x11) != 0 && *(_BYTE *)(a1 + 2785))
    {
      int v4 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4 message:"Trigger Disconnecting using Cached decision"];
      }
      objc_autoreleasePoolPop(v4);
      *(_DWORD *)(a1 + 2820) = 10;
      sub_1000150D0(a1, 0LL);
      return 0LL;
    }
  }

  else
  {
    __int128 v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManagerRef is NULL",  "WiFiLQAMgrSetAppNetworkUsageState");
    }
    objc_autoreleasePoolPop(v5);
    return 4294963396LL;
  }

  return result;
}

void sub_1000150D0(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return;
  }
  if (!*(_BYTE *)(a1 + 632))
  {
    int v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: LQA is disabled", "__WiFiLQAMgrTriggerDisconnect");
    }
    goto LABEL_35;
  }

  if (*(_BYTE *)(a1 + 176))
  {
    int v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LinkEvent happened, Do not Trigger Disconnect",  "__WiFiLQAMgrTriggerDisconnect");
    }
    goto LABEL_35;
  }

  BOOL v3 = *(const __CFArray **)(a1 + 24);
  if (!v3)
  {
    int v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: LQM table is NULL",  "__WiFiLQAMgrTriggerDisconnect");
    }
    goto LABEL_35;
  }

  if (!CFArrayGetCount(v3))
  {
    int v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQM table is empty",  "__WiFiLQAMgrTriggerDisconnect");
    }
    goto LABEL_35;
  }

  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0LL);
  if (!ValueAtIndex)
  {
    int v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: Latest LQM Report is NULL",  "__WiFiLQAMgrTriggerDisconnect");
    }
LABEL_35:
    objc_autoreleasePoolPop(v14);
    return;
  }

  unsigned int valuePtr = *(_DWORD *)(a1 + 2788);
  if (!valuePtr)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"RSSI");
    if (!Value) {
      return;
    }
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  }

  if (*(double *)(a1 + 136) == 0.0)
  {
    double v7 = 0.0;
  }

  else
  {
    double v7 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 136);
    __int128 v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Trigger disconnect evaluation took %2.2f",  "__WiFiLQAMgrTriggerDisconnect",  *(void *)&v7);
    }
    objc_autoreleasePoolPop(v8);
    *(void *)(a1 + 136) = 0LL;
  }

  __int128 v9 = *(void (**)(uint64_t, void, void, void, uint64_t))(a1 + 544);
  if (v9) {
    v9(a1, *(void *)(a1 + 40), *(void *)(a1 + 552), valuePtr, a2);
  }
  -[WiFiUsageMonitor addTriggerDisconnectEvent:isAlerted:isConfirmed:isExecuted:]( +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance"),  "addTriggerDisconnectEvent:isAlerted:isConfirmed:isExecuted:",  *(void *)(a1 + 40),  0LL,  0LL,  1LL);
  __int128 v10 = +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance");
  -[WiFiUsageMonitor setTdLogic_end:evalTime:rssi:roamTime:forInterface:]( v10,  "setTdLogic_end:evalTime:rssi:roamTime:forInterface:",  *(unsigned int *)(a1 + 2820),  (int)valuePtr,  *(void *)(a1 + 40),  v7,  *(double *)(a1 + 192));
  if (&_symptom_create)
  {
    uint64_t v11 = symptom_create("com.apple.wifimanager.trigger-disconnect");
    symptom_send(v11);
    uint64_t v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  2,  "%s: Notified Symptoms about Trigger Disconnected network",  "__WiFiLQAMgrTriggerDisconnect");
    }
    objc_autoreleasePoolPop(v12);
  }

  *(_BYTE *)(a1 + 392) = 0;
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 336), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 536), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
  uint64_t v13 = *(dispatch_source_s **)(a1 + 2896);
  if (v13) {
    dispatch_source_set_timer(v13, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
  }
  *(_BYTE *)(a1 + 2904) = 0;
}

uint64_t sub_1000153D8(uint64_t a1, uint64_t a2, int a3)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 2752) == a3) {
      return 4294963396LL;
    }
    *(_DWORD *)(a1 + 2752) = a3;
    *(CFAbsoluteTime *)(a1 + 2760) = CFAbsoluteTimeGetCurrent();
    int v4 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      __int128 v5 = "Alive";
      if (a3 == 1) {
        __int128 v5 = "Expired";
      }
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: GatewayARPState %s",  "WiFiLQAMgrSetGatewayARPState",  v5);
    }

    uint64_t v6 = 0LL;
  }

  else
  {
    int v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManagerRef is NULL",  "WiFiLQAMgrSetGatewayARPState");
    }
    uint64_t v6 = 4294963396LL;
  }

  objc_autoreleasePoolPop(v4);
  return v6;
}

uint64_t sub_1000154BC(uint64_t result, char a2)
{
  if (result)
  {
    if (*(_BYTE *)(result + 632)) {
      *(_BYTE *)(result + 221) = a2;
    }
  }

  return result;
}

uint64_t sub_1000154D0(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 216) = a2;
  }
  return result;
}

uint64_t sub_1000154DC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 208);
  }
  return result;
}

void sub_1000154E8(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    int v4 = *(const void **)(a1 + 208);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 20_Block_object_dispose(va, 8) = 0LL;
    }

    if (cf) {
      *(void *)(a1 + 20_Block_object_dispose(va, 8) = CFRetain(cf);
    }
  }

void sub_10001552C(uint64_t a1, double a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (a1 && *(_BYTE *)(a1 + 632))
  {
    double v5 = Current - a2;
    if (a2 == 0.0) {
      double v5 = -1.0;
    }
    *(double *)(a1 + 280) = v5;
  }

void sub_100015578(uint64_t a1)
{
  uint64_t valuePtr = 32LL;
  uint64_t v13 = 3LL;
  if (a1 && *(_BYTE *)(a1 + 632) && *(_DWORD *)(a1 + 16) == 2)
  {
    uint64_t v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: initProbeHappened %d lqaState %d",  "WiFiLQAMgrSetWiFiPrimaryInterface",  *(unsigned __int8 *)(a1 + 357),  *(unsigned int *)(a1 + 20));
    }
    objc_autoreleasePoolPop(v2);
    if (*(_DWORD *)(a1 + 20))
    {
      uint64_t v3 = *(void *)(a1 + 400);
      if (*(_BYTE *)(a1 + 357))
      {
        if (v3) {
          return;
        }
        goto LABEL_24;
      }

      if (!v3)
      {
LABEL_24:
        uint64_t v11 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: No Router IP Address",  "WiFiLQAMgrSetWiFiPrimaryInterface");
        }
        objc_autoreleasePoolPop(v11);
        return;
      }

      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFNumberRef v5 = CFNumberCreate(0LL, kCFNumberCFIndexType, &valuePtr);
      uint64_t v6 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
      double v7 = v6;
      if (v5 && v6)
      {
        CFArrayAppendValue(v6, v5);
        CFDictionarySetValue(Mutable, @"kWiFiLqaMgrProbeSize", v7);
        CFNumberRef v8 = CFNumberCreate(0LL, kCFNumberCFIndexType, &v13);
        CFDictionarySetValue(Mutable, @"kWiFiLqaMgrNumProbes", v8);
        *(_BYTE *)(a1 + 357) = 1;
        __int128 v9 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        *(void *)(a1 + 384) = v9;
        if (sub_1000157E8(a1, Mutable, v9, (uint64_t)sub_100015DEC, a1))
        {
          __int128 v10 = *(const void **)(a1 + 384);
          if (v10)
          {
            CFRelease(v10);
            *(void *)(a1 + 384) = 0LL;
          }
        }

        if (v8) {
          CFRelease(v8);
        }
      }

      else
      {
        uint64_t v12 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, probeSizeRef OR probeSizeArr is NULL",  "WiFiLQAMgrSetWiFiPrimaryInterface");
        }
        objc_autoreleasePoolPop(v12);
        if (!v5) {
          goto LABEL_19;
        }
      }

      CFRelease(v5);
LABEL_19:
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (v7) {
        CFRelease(v7);
      }
    }
  }

uint64_t sub_1000157E8(uint64_t a1, const __CFDictionary *a2, __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  uint64_t valuePtr = *(unsigned int *)(a1 + 352);
  uint64_t v41 = 0LL;
  uint64_t v38 = 0LL;
  uint64_t v39 = 1LL;
  if (*(_DWORD *)(a1 + 20))
  {
    double v7 = a3;
    CFMutableDictionaryRef Mutable = a3;
    if (!a3
      && (Mutable = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks)) == 0LL || (CFTypeID TypeID = CFDictionaryGetTypeID(), TypeID != CFGetTypeID(Mutable)))
    {
      dispatch_source_t v33 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: probeHandle is NULL or incorrect type",  "WiFiLQAMgrEnqueueDiagnosticProbe");
      }
      objc_autoreleasePoolPop(v33);
      uint64_t v31 = 4294963394LL;
      goto LABEL_44;
    }

    __int128 v37 = v7;
    if (a2)
    {
      Value = CFDictionaryGetValue(a2, @"kWiFiLqaMgrNumProbes");
      uint64_t v13 = CFDictionaryGetValue(a2, @"kWiFiLqaMgrProbeSize");
      int v14 = CFDictionaryGetValue(a2, @"kWiFiLqaMgrProbeTimeoutSecs");
      id v15 = CFDictionaryGetValue(a2, @"kWiFiLqaMgrIpv4Addr");
      int v16 = CFDictionaryGetValue(a2, @"kWiFiLqaMgrProbeTrafficClass");
      uint64_t v41 = *(unsigned int *)(a1 + 884);
      if (Value)
      {
        CFDictionarySetValue(Mutable, @"kWiFiLqaMgrNumProbes", Value);
        if (!v13) {
          goto LABEL_8;
        }
        goto LABEL_14;
      }
    }

    else
    {
      int v16 = 0LL;
      id v15 = 0LL;
      int v14 = 0LL;
      uint64_t v13 = 0LL;
      uint64_t v41 = *(unsigned int *)(a1 + 884);
    }

    CFNumberRef v21 = CFNumberCreate(0LL, kCFNumberCFIndexType, &v41);
    if (!v21)
    {
      uint64_t v35 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: numProbesDefRef is NULL",  "WiFiLQAMgrEnqueueDiagnosticProbe");
      }
      goto LABEL_62;
    }

    CFNumberRef v22 = v21;
    CFDictionarySetValue(Mutable, @"kWiFiLqaMgrNumProbes", v21);
    CFRelease(v22);
    if (!v13)
    {
LABEL_8:
      CFNumberRef v17 = CFNumberCreate(0LL, kCFNumberCFIndexType, &valuePtr);
      if (v17)
      {
        CFNumberRef v18 = v17;
        uint64_t v19 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
        if (!v19)
        {
          __int128 v36 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: probeSizeArr is NULL",  "WiFiLQAMgrEnqueueDiagnosticProbe");
          }
          objc_autoreleasePoolPop(v36);
          __int128 v20 = 0LL;
          uint64_t v31 = 4294963394LL;
          double v7 = v37;
          goto LABEL_41;
        }

        uint64_t v13 = v19;
        CFArrayAppendValue(v19, v18);
        __int128 v20 = v13;
LABEL_15:
        CFDictionarySetValue(Mutable, @"kWiFiLqaMgrProbeSize", v13);
        if (v14)
        {
          CFDictionarySetValue(Mutable, @"kWiFiLqaMgrProbeTimeoutSecs", v14);
          if (v15) {
            goto LABEL_21;
          }
        }

        else
        {
          CFNumberRef v23 = CFNumberCreate(0LL, kCFNumberCFIndexType, &v39);
          if (!v23)
          {
            int v30 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: probeTimeoutSecsDefRef is NULL",  "WiFiLQAMgrEnqueueDiagnosticProbe");
            }
            goto LABEL_39;
          }

          CFNumberRef v24 = v23;
          CFDictionarySetValue(Mutable, @"kWiFiLqaMgrProbeTimeoutSecs", v23);
          CFRelease(v24);
          if (v15) {
            goto LABEL_21;
          }
        }

        id v15 = *(const void **)(a1 + 400);
        if (v15)
        {
LABEL_21:
          CFDictionarySetValue(Mutable, @"kWiFiLqaMgrIpv4Addr", v15);
          if (v16) {
            CFDictionarySetValue(Mutable, @"kWiFiLqaMgrProbeTrafficClass", v16);
          }
          CFDictionarySetValue(Mutable, @"kWiFiLqaMgrIgnoreProbe", kCFBooleanFalse);
          if (a4)
          {
            uint64_t v38 = a4;
            CFNumberRef v25 = CFNumberCreate(0LL, kCFNumberCFIndexType, &v38);
            double v7 = v37;
            if (!v25)
            {
              int v30 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: probeCallback is NULL",  "WiFiLQAMgrEnqueueDiagnosticProbe");
              }
              goto LABEL_40;
            }

            CFNumberRef v26 = v25;
            CFDictionarySetValue(Mutable, @"kWiFiLqaMgrDiagCallback", v25);
            CFRelease(v26);
            if (!a5) {
              goto LABEL_32;
            }
          }

          else
          {
            __int128 v27 = objc_autoreleasePoolPush();
            double v7 = v37;
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Callback is NULL",  "WiFiLQAMgrEnqueueDiagnosticProbe");
            }
            objc_autoreleasePoolPop(v27);
            if (!a5) {
              goto LABEL_32;
            }
          }

          uint64_t v38 = a5;
          CFNumberRef v28 = CFNumberCreate(0LL, kCFNumberCFIndexType, &v38);
          if (v28)
          {
            CFNumberRef v29 = v28;
            CFDictionarySetValue(Mutable, @"kWiFiLqaMgrDiagCbContext", v28);
            CFRelease(v29);
LABEL_32:
            if (sub_10001D328((void *)a1, Mutable))
            {
              int v30 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Scheduling Probe Failed",  "WiFiLQAMgrEnqueueDiagnosticProbe");
              }
              goto LABEL_40;
            }

            uint64_t v31 = 0LL;
            if (!v18)
            {
LABEL_42:
              if (v20) {
                CFRelease(v20);
              }
              goto LABEL_44;
            }

LABEL_41:
            CFRelease(v18);
            goto LABEL_42;
          }

          int v30 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: callbackCtxt is NULL",  "WiFiLQAMgrEnqueueDiagnosticProbe");
          }
LABEL_40:
          objc_autoreleasePoolPop(v30);
          uint64_t v31 = 4294963394LL;
          if (!v18) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }

        int v30 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: DiagProbe ipv4Addr is NULL",  "WiFiLQAMgrEnqueueDiagnosticProbe");
        }
LABEL_39:
        double v7 = v37;
        goto LABEL_40;
      }

      uint64_t v35 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: probeSizeDefRef is NULL",  "WiFiLQAMgrEnqueueDiagnosticProbe");
      }
LABEL_62:
      objc_autoreleasePoolPop(v35);
      uint64_t v31 = 4294963394LL;
      double v7 = v37;
LABEL_44:
      if (!v7 && Mutable) {
        CFRelease(Mutable);
      }
      return v31;
    }

    CFNumberRef v28 = 0LL;
    goto LABEL_42;
  }

  Value = CFDictionaryGetValue((CFDictionaryRef)a4, @"LINK_CHANGED_IS_LINKDOWN");
  if (CFDictionaryGetValue((CFDictionaryRef)a4, @"LINKDOWN_REASON_CODE") != 7)
  {
    if (!Value && *(_BYTE *)(a1 + 181)) {
      *(_BYTE *)(a1 + 180) = 1;
    }
    goto LABEL_20;
  }

  *(_WORD *)(a1 + 180) = 256;
  uint64_t v11 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "link recovery started, suppressing transient UI state for %d seconds",  4);
  }
  objc_autoreleasePoolPop(v11);
  uint64_t v12 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, a4);
  uint64_t v13 = sub_10003BEDC(a2);
  int v14 = (const void *)sub_10004CE2C(v13);
  if (!v14)
  {
    CFNumberRef v18 = 0LL;
    CFNumberRef v17 = 0LL;
    int v16 = 0LL;
    if (v12) {
      goto LABEL_36;
    }
LABEL_47:
    __int128 v40 = 0LL;
    uint64_t v41 = 0LL;
    goto LABEL_48;
  }

  id v15 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, v14);
  int v16 = v15;
  if (!v15)
  {
    CFNumberRef v18 = 0LL;
    CFNumberRef v17 = 0LL;
    if (v12) {
      goto LABEL_36;
    }
    goto LABEL_47;
  }

  CFNumberRef v17 = CFDataGetBytePtr(v15);
  CFNumberRef v18 = CFDataGetLength(v16);
  if (!v12) {
    goto LABEL_47;
  }
LABEL_36:
  __int128 v40 = CFDataGetBytePtr(v12);
  uint64_t v41 = CFDataGetLength(v12);
LABEL_48:
  v49 = dispatch_time(0LL, 4000000000LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10003E464;
  block[3] = &unk_1001E3248;
  void block[4] = a1;
  void block[5] = v17;
  v51 = 1;
  block[6] = v18;
  block[7] = v40;
  block[8] = v41;
  dispatch_after(v49, (dispatch_queue_t)qword_100219F80, block);
  if (v12) {
    CFRelease(v12);
  }
  if (v16) {
    CFRelease(v16);
  }
}

  int v14 = *(void *)(a1 + 232);
  objc_autoreleasePoolPop(v2);
  _Block_object_dispose(v18, 8);
  return v14;
}

    objc_autoreleasePoolPop(v24);
    uint64_t v12 = 0LL;
    uint64_t v6 = 0LL;
    goto LABEL_21;
  }

  uint64_t v6 = v5;
  ValueAtIndex = CFArrayGetValueAtIndex(v5, 0LL);
  if (!ValueAtIndex)
  {
    __int128 v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null device manager",  "WiFiManagerCheckForUnexpectedPasswordDelete");
    }
    goto LABEL_48;
  }

  CFNumberRef v8 = (uint64_t)ValueAtIndex;
  __int128 v9 = (const void *)sub_1000D8D08((uint64_t)ValueAtIndex);
  __int128 v10 = objc_autoreleasePoolPush();
  if (!v9)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Most recently joined network is null",  "WiFiManagerCheckForUnexpectedPasswordDelete");
    }
    goto LABEL_48;
  }

  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: Most recently joined network was: %@", "WiFiManagerCheckForUnexpectedPasswordDelete", v9 message];
  }
  objc_autoreleasePoolPop(v10);
  uint64_t v11 = sub_1000D92D0(v8, a2);
  if (!v11)
  {
    __int128 v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: no matching network in known networks list",  "WiFiManagerCheckForUnexpectedPasswordDelete");
    }
LABEL_48:
    objc_autoreleasePoolPop(v10);
    uint64_t v12 = 0LL;
    goto LABEL_21;
  }

  uint64_t v12 = v11;
  if (!CFEqual(v11, v9))
  {
LABEL_21:
    int v14 = 0LL;
    goto LABEL_22;
  }

  uint64_t v13 = sub_100095408((CFDictionaryRef *)a2);
  if (v13)
  {
    int v14 = (CFDateRef)v13;
    id v15 = objc_autoreleasePoolPush();
    int v16 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      CFNumberRef v17 = sub_100095BC8(v12);
      CFNumberRef v18 = (const void *)sub_1000D8D08(v8);
      [v16 WFLog:3, "%s: Not recording password for matchingNetworkCopy %@ and previously joined network %@", "WiFiManagerCheckForUnexpectedPasswordDelete", v17, sub_100095BC8(v18) message];
    }

    objc_autoreleasePoolPop(v15);
    goto LABEL_22;
  }

  double Current = CFAbsoluteTimeGetCurrent();
  int v14 = CFDateCreate(kCFAllocatorDefault, Current);
  sub_10009DCC8(v12, v14);
  CFArrayAppendValue(a1[275], v12);
  __int128 v20 = objc_autoreleasePoolPush();
  CFNumberRef v21 = (void *)qword_100219F60;
  if (qword_100219F60)
  {
    CFNumberRef v22 = sub_100095BC8(v12);
    [v21 WFLog:3, "%s: Recording that the password for %@ is not in the keychain. Network count with deleted passwords is now %ld", "WiFiManagerCheckForUnexpectedPasswordDelete", v22, CFArrayGetCount(a1[275]) message];
  }

  objc_autoreleasePoolPop(v20);
  if (v14)
  {
    CFRelease(v14);
    goto LABEL_21;
  }

  v44 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "[NWTRANSIT]: Network %@ meets Colocated Privacy Guidelines", 0 message];
  }
  objc_autoreleasePoolPop(v44);
  *(_BYTE *)(a4 + 2160) = 1;
  if (sub_10007D140((const __CFArray *)a4))
  {
    uint64_t v45 = *(const __CFArray **)(a4 + 2152);
    v46 = a4;
    goto LABEL_45;
  }

  if (!v64)
  {
    v55 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"[NWTRANSIT]: Invalidate Colocated Cache"];
    }
    objc_autoreleasePoolPop(v55);
    v56 = *(const void **)(a4 + 2152);
    if (v56)
    {
      CFRelease(v56);
      *(void *)(a4 + 2152) = 0LL;
    }

    *(_BYTE *)(a4 + 2160) = 0;
    *(void *)(a4 + 216_Block_object_dispose(va, 8) = 0LL;
    v46 = a4;
    uint64_t v45 = 0LL;
LABEL_45:
    sub_10008CEFC(v46, v45);
  }

    objc_autoreleasePoolPop(v16);
    return 4294963396LL;
  }

  *(_BYTE *)(a1 + 3400) = v6;
  *__int128 v10 = v5 == kCFBooleanTrue;
  CFNumberRef v23 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: FT call started/ended ? %d ",  "WiFiDeviceManagerSetAppPolicy",  v6);
  }
  objc_autoreleasePoolPop(v23);
  sub_1000EAEB8(a1, v6);
LABEL_8:
  if (CFStringCompare(Value, @"WiFiCallingUUID", 0LL) == kCFCompareEqualTo)
  {
    if (*(unsigned __int8 *)(a1 + 3400) != (_DWORD)v6)
    {
      uint64_t v19 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WiFi call started/ended ? %d ",  "WiFiDeviceManagerSetAppPolicy",  v6);
      }
      objc_autoreleasePoolPop(v19);
      *(_BYTE *)(a1 + 3400) = v6;
      __int128 v20 = *(void **)(a1 + 7320);
      if (v20) {
        [v20 setCallState:(*(unsigned __int8 *)(a1 + 3401) | v6) != 0];
      }
      if (!(_DWORD)v6)
      {
        else {
          sub_1000D66BC(a1, 1);
        }
      }

      values = v5;
      keys = @"IO80211InterfaceCallStatus";
      CFNumberRef v24 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)&keys,  (const void **)&values,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      if (v24)
      {
        CFNumberRef v25 = v24;
        CFNumberRef v26 = *(void *)(a1 + 64);
        __int128 v27 = (const void *)sub_100043E8C(v26);
        sub_100055B68(v26, v27, v25);
        CFRelease(v25);
      }

      goto LABEL_9;
    }

    return 4294963396LL;
  }

  objc_autoreleasePoolPop(v6);
  return v26;
}

LABEL_14:
    CFNumberRef v18 = 0LL;
    __int128 v20 = 0LL;
    goto LABEL_15;
  }

  v34 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Ignoring diagnostic probe in unassociated state and submitting empty metric",  "WiFiLQAMgrEnqueueDiagnosticProbe");
  }
  objc_autoreleasePoolPop(v34);
  return 4294963394LL;
}

  if (*(_DWORD *)(a1 + 20)) {
    goto LABEL_28;
  }
  if (a2) {
    CFNumberRef v18 = CFRetain(a2);
  }
  else {
    CFNumberRef v18 = sub_100040538(*(void *)(a1 + 32), v14);
  }
  uint64_t v19 = v18;
  if (!v18)
  {
    CFNumberRef v23 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      CFNumberRef v24 = *(int *)(a1 + 20);
      else {
        CFNumberRef v25 = *(&off_1001E2D88 + v24);
      }
      [(id)qword_100219F60 WFLog:4, "%s: LQAManager LQM Event in %@", "WiFiLQAMgrLQMNotify", v25 message];
    }

  CFMutableDictionaryRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
  if (Mutable) {
    CFRelease(Mutable);
  }
  CFNumberRef v18 = sub_100079C2C(*(void *)(qword_100219860 + 16));
  *(void *)(a2 + 96_Block_object_dispose(va, 8) = CFStringCreateWithFormat(0LL, 0LL, @"%d", v18);
  uint64_t v19 = sub_1000968A4((uint64_t)a3);
  if (v19)
  {
    __int128 v20 = v19;
    v146.id location = 0LL;
    v146.length = 3LL;
    CFDataGetBytes(v19, v146, (UInt8 *)(a2 + 888));
    CFRelease(v20);
  }

  CFNumberRef v21 = (const __CFNumber *)sub_100096A74((uint64_t)a3);
  if (v21) {
    CFNumberGetValue(v21, kCFNumberSInt32Type, (void *)(a2 + 864));
  }
  CFNumberRef v22 = (const __CFNumber *)sub_10009A36C((uint64_t)a3);
  if (v22) {
    CFNumberGetValue(v22, kCFNumberSInt32Type, (void *)(a2 + 868));
  }
  *(_DWORD *)(a2 + 872) = sub_10009A3FC((uint64_t)a3);
  *(_DWORD *)(a2 + 876) = sub_10009A3DC((uint64_t)a3);
  CFNumberRef v23 = sub_1000972F0(a3);
  if (sub_100095318((BOOL)a3)) {
    v23 |= 0x20u;
  }
  CFNumberRef v24 = (const __CFNumber *)sub_1000951FC((uint64_t)a3, @"NetworkAtLocationOfInterestType");
  if (v24)
  {
    *(_DWORD *)uint64_t valuePtr = 0;
    CFNumberGetValue(v24, kCFNumberSInt32Type, valuePtr);
    CFNumberRef v25 = v23 | 0x1000;
    if (*(_DWORD *)valuePtr != 2) {
      CFNumberRef v25 = v23;
    }
    if (*(_DWORD *)valuePtr == 5) {
      CFNumberRef v23 = v25 | 0x2000;
    }
    else {
      CFNumberRef v23 = v25;
    }
  }

  if (sub_1000A0010(a3)) {
    v23 |= 0x4000u;
  }
  if (sub_1000951FC((uint64_t)a3, @"WiFiAutoInstantHotspotJoining") == kCFBooleanTrue)
  {
    else {
      CFNumberRef v26 = 0x80000;
    }
    v23 |= v26;
  }

  __int128 v27 = sub_1000951FC((uint64_t)a3, @"WiFiNetworkAttributeIsLowQuality");
  CFNumberRef v28 = v23 | 0x800000;
  if (!v27) {
    CFNumberRef v28 = v23;
  }
  *(_DWORD *)(a2 + 884) = v28;
  CFNumberRef v29 = v138;
  if (v8)
  {
    *(_DWORD *)(a2 + 884) = v28 | 0x8000;
    int v30 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s QFALOG : wps in probe response present ",  "__WiFiMetricsManagerCopyLinkChangeNetworkParams");
    }
    objc_autoreleasePoolPop(v30);
  }

  if (v139) {
    *(_DWORD *)(a2 + 884) |= 0x10000u;
  }
  if (v138) {
    *(_DWORD *)(a2 + 884) |= 8u;
  }
  *(_BYTE *)(a2 + 892) = sub_100098EA8((uint64_t)a3);
  else {
    uint64_t v31 = 0;
  }
  *(_DWORD *)uint64_t valuePtr = -1431655766;
  dispatch_queue_t v32 = sub_10005439C(a1, valuePtr);
  v137 = a1;
  if ((_DWORD)v32)
  {
    dispatch_source_t v33 = v32;
    v34 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: fail to get auth type (%d)",  "__WiFiGetAuthType",  v33);
    }
    objc_autoreleasePoolPop(v34);
    uint64_t v35 = 111;
  }

  else
  {
    __int128 v36 = *(unsigned int *)valuePtr;
    __int128 v37 = sub_1000957F4((BOOL)a3);
    uint64_t v35 = sub_100027DE8(v36, v37, v31);
  }

  *(_DWORD *)(a2 + 90_Block_object_dispose(va, 8) = v35;
  if (sub_100097F2C((BOOL)a3) || sub_100095B4C((uint64_t)a3))
  {
    uint64_t v38 = (unint64_t)sub_1000951FC((uint64_t)a3, @"WPA_IE");
    uint64_t v39 = (const __CFDictionary *)sub_1000951FC((uint64_t)a3, @"RSN_IE");
    if ((unint64_t)v39 | v38)
    {
      __int128 v40 = v39;
      if (v39)
      {
        *(_WORD *)(a2 + 894) = 2;
        Value = (const __CFNumber *)CFDictionaryGetValue(v39, @"IE_KEY_RSN_MCIPHER");
        __int128 v42 = (const __CFArray *)CFDictionaryGetValue(v40, @"IE_KEY_RSN_UCIPHERS");
        __int128 v43 = (const __CFArray *)CFDictionaryGetValue(v40, @"IE_KEY_RSN_AUTHSELS");
        v44 = (const __CFDictionary *)CFDictionaryGetValue(v40, @"IE_KEY_RSN_CAPS");
        if (!Value) {
          goto LABEL_87;
        }
      }

      else
      {
        if (!v38) {
          goto LABEL_111;
        }
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (!sub_10003AE00(TypeID, (CFTypeRef)v38)) {
          goto LABEL_111;
        }
        *(_WORD *)(a2 + 894) = 1;
        Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v38, @"IE_KEY_WPA_MCIPHER");
        __int128 v42 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v38, @"IE_KEY_WPA_UCIPHERS");
        __int128 v43 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v38, @"IE_KEY_WPA_AUTHSELS");
        v44 = 0LL;
        if (!Value) {
          goto LABEL_87;
        }
      }

      *(_WORD *)(a2 + 896) = (unsigned __int16)sub_100039AFC(Value);
LABEL_87:
      if (v42)
      {
        *(_WORD *)(a2 + 89_Block_object_dispose(va, 8) = 0;
        if (CFArrayGetCount(v42) >= 1)
        {
          uint64_t v45 = 0LL;
          do
          {
            v46 = (const __CFNumber *)CFArrayGetValueAtIndex(v42, v45);
            *(_WORD *)(a2 + 898) |= (unsigned __int16)sub_100039AFC(v46);
            ++v45;
          }

          while (v45 < CFArrayGetCount(v42));
        }
      }

      if (v43)
      {
        *(_DWORD *)(a2 + 900) = 0;
        if (CFArrayGetCount(v43) >= 1)
        {
          __int128 v47 = 0LL;
          do
          {
            v48 = (const __CFNumber *)CFArrayGetValueAtIndex(v43, v47);
            if (v48
              && (*(_DWORD *)uint64_t valuePtr = -1431655766, CFNumberGetValue(v48, kCFNumberSInt32Type, valuePtr))
              && (*(_DWORD *)valuePtr - 1) <= 0x18)
            {
              v49 = dword_10017F1BC[*(_DWORD *)valuePtr - 1];
            }

            else
            {
              v49 = 0;
            }

            *(_DWORD *)(a2 + 900) |= v49;
            ++v47;
          }

          while (v47 < CFArrayGetCount(v43));
        }
      }

      CFNumberRef v29 = v138;
      if (v44)
      {
        *(_DWORD *)(a2 + 904) = 0;
        v50 = (const __CFBoolean *)CFDictionaryGetValue(v44, @"PRE_AUTH");
        if (v50 && CFBooleanGetValue(v50)) {
          *(_DWORD *)(a2 + 904) |= 1u;
        }
        v51 = (const __CFBoolean *)CFDictionaryGetValue(v44, @"NO_PAIRWISE");
        if (v51 && CFBooleanGetValue(v51)) {
          *(_DWORD *)(a2 + 904) |= 2u;
        }
      }
    }
  }

    objc_autoreleasePoolPop(v11);
    return;
  }

  CFNumberRef v8 = sub_10006C77C(v7);
  if (!v8)
  {
    uint64_t v11 = objc_autoreleasePoolPush();
    uint64_t v12 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      uint64_t v13 = "Error copying devices";
      goto LABEL_13;
    }

    goto LABEL_14;
  }

  __int128 v9 = v8;
  __int128 v10 = sub_10003BEF4(a1, v8);
  if (v10) {
    CFRelease(v10);
  }
  CFRelease(v9);
}

          sub_10014BE90(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 46LL, 0LL, 0, 0);
          if (!v10) {
            return;
          }
          goto LABEL_15;
        }
      }
    }

    else
    {
      CFNumberRef v17 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null deviceEventMasks",  "WiFiClientDispatchTdConfirmedEvent",  valuePtr);
      }
      objc_autoreleasePoolPop(v17);
    }
  }

          sub_10014BE90(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 22LL, 0LL, 0, 0);
          if (!v10) {
            return;
          }
          goto LABEL_15;
        }
      }
    }

    else
    {
      CFNumberRef v17 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null deviceEventMasks",  "WiFiClientDispatchVirtInterfaceStateChangeEvent",  valuePtr);
      }
      objc_autoreleasePoolPop(v17);
    }
  }

      free(v9);
    }

    else
    {
      uint64_t v3 = 0LL;
    }

    free(v7);
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  CFRelease(v5);
  return v3;
}

      free(v9);
    }

    else
    {
      uint64_t v3 = 0LL;
    }

    free(v7);
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  CFRelease(v5);
  return v3;
}

    objc_autoreleasePoolPop(v6);
    return 0LL;
  }

  if (a2 == 9)
  {
    if (*(_DWORD *)v12 == 1) {
      return result;
    }
    goto LABEL_28;
  }

  if (a2 == 10)
  {
    if (!*(_DWORD *)v12) {
      return result;
    }
    goto LABEL_28;
  }

  if (a2 == 30 && *(_DWORD *)v12 != 5)
  {
    CFNumberRef v5 = (void (*)(uint64_t *, void, uint64_t, uint64_t))a1[623];
    if (v5) {
      v5(a1, 0LL, a1[624], 1LL);
    }
    goto LABEL_28;
  }

  return result;
}

      if (cf)
      {
        CFRelease(cf);
        cf = 0LL;
      }

      double v7 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Error copying hardware version %d",  "WiFiDeviceGetHardwareVersion",  v5);
      }
      objc_autoreleasePoolPop(v7);
      return cf;
    }
  }

  else
  {
    CFNumberRef v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null device", "WiFiDeviceGetHardwareVersion");
    }
    objc_autoreleasePoolPop(v8);
    return 0LL;
  }

  return result;
}

  CFNumberRef v8 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    __int128 v9 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@-} %@",  @"IP",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"IPv4 Primary interface is %@ and IPv6 Primary Interface is %@",  qword_100219898,  qword_1002198A0)),  "UTF8String"));
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v12 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v9, "UTF8String")),  "UTF8String");
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
    }
  }

  objc_autoreleasePoolPop(v8);
  if (v2) {
    CFRelease(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v6;
}

  int v16 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s:Country code changed, purging scan cache\n",  "__WiFiDeviceProcessCountryCodeChangedEvent");
  }
  objc_autoreleasePoolPop(v16);
  sub_10004F26C((uint64_t)a1, 1);
  CFNumberRef v17 = (void (*)(void *, uint64_t, void))a1[556];
  if (v17) {
    v17(a1, a2, a1[557]);
  }
}

        __int128 v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      int v16 = [v5 countByEnumeratingWithState:&v18 objects:v28 count:16];
      CFNumberRef v8 = v16;
    }

    while (v16);
  }
}

  CFRelease(v7);
LABEL_15:
  objc_autoreleasePoolPop(v4);
  return v8;
}

  if (&WiFiCloudSyncEngineCreate
    && a5
    && *(void *)(a3 + 1136)
    && CWFIsAutoJoinRetryTrigger(objc_msgSend(objc_msgSend(a5, "autoJoinParameters"), "trigger"))
    && ![a5 error]
    && !*(_BYTE *)(a3 + 1128))
  {
    uint64_t v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Starting cloud sync engine after AJ retry",  "__WiFiManagerDeviceAutoJoinCallback");
    }
    objc_autoreleasePoolPop(v13);
    *(_BYTE *)(a3 + 112_Block_object_dispose(va, 8) = 1;
    WiFiCloudSyncEngineScheduleWithQueue(*(void *)(a3 + 1136), qword_100219F88);
    CFRetain(*(CFTypeRef *)(a3 + 1136));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10008BCD0;
    block[3] = &unk_1001E2620;
    void block[4] = a3;
    dispatch_async((dispatch_queue_t)qword_100219F88, block);
  }

  CFNumberRef v8 = (void *)sub_1000951FC((uint64_t)a1, @"RSN_IE");
  if (v8)
  {
    __int128 v9 = [v8 objectForKey:@"IE_KEY_RSN_AUTHSELS"];
    if (([v9 containsObject:&off_100204728] & 1) != 0
      || [v9 containsObject:&off_100204740])
    {
      objc_msgSend( v82,  "setSupportedSecurityTypes:",  (unint64_t)objc_msgSend(v82, "supportedSecurityTypes") | 0x80);
    }

    if (([v9 containsObject:&off_100204758] & 1) != 0
      || ([v9 containsObject:&off_100204770] & 1) != 0
      || ([v9 containsObject:&off_100204788] & 1) != 0
      || [v9 containsObject:&off_1002047A0])
    {
      objc_msgSend( v82,  "setSupportedSecurityTypes:",  (unint64_t)objc_msgSend(v82, "supportedSecurityTypes") | 0x20);
    }

    if (([v9 containsObject:&off_1002047B8] & 1) != 0
      || ([v9 containsObject:&off_1002047D0] & 1) != 0
      || ([v9 containsObject:&off_1002047E8] & 1) != 0
      || [v9 containsObject:&off_100204800])
    {
      objc_msgSend( v82,  "setSupportedSecurityTypes:",  (unint64_t)objc_msgSend(v82, "supportedSecurityTypes") | 0x40);
      if (sub_100098068(a1[2])) {
        objc_msgSend( v82,  "setSupportedSecurityTypes:",  (unint64_t)objc_msgSend(v82, "supportedSecurityTypes") | 0x10);
      }
    }

    if (([v9 containsObject:&off_100204818] & 1) != 0
      || ([v9 containsObject:&off_100204830] & 1) != 0
      || [v9 containsObject:&off_100204848])
    {
      objc_msgSend( v82,  "setSupportedSecurityTypes:",  (unint64_t)objc_msgSend(v82, "supportedSecurityTypes") | 0x10);
    }
  }

  __int128 v10 = (void *)sub_1000951FC((uint64_t)a1, @"WPA_IE");
  if (v10)
  {
    uint64_t v11 = [v10 objectForKey:@"IE_KEY_WPA_AUTHSELS"];
    if (([v11 containsObject:&off_100204758] & 1) != 0
      || [v11 containsObject:&off_100204770])
    {
      objc_msgSend(v82, "setSupportedSecurityTypes:", (unint64_t)objc_msgSend(v82, "supportedSecurityTypes") | 8);
    }
  }

  if (![v82 supportedSecurityTypes]) {
    [v82 setSupportedSecurityTypes:512];
  }
  if (&_CNForgetSSID)
  {
    uint64_t v12 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
    objc_msgSend( v12,  "setObject:forKeyedSubscript:",  sub_1000951FC((uint64_t)a1, kCNSCaptiveNetworkProperty),  kCNSCaptiveNetworkProperty);
    objc_msgSend( v12,  "setObject:forKeyedSubscript:",  sub_1000951FC((uint64_t)a1, kCNSCaptivePortalAPIProperty),  kCNSCaptivePortalAPIProperty);
    objc_msgSend( v12,  "setObject:forKeyedSubscript:",  sub_1000951FC((uint64_t)a1, kCNSCaptivePortalUserPortalURLProperty),  kCNSCaptivePortalUserPortalURLProperty);
    objc_msgSend( v12,  "setObject:forKeyedSubscript:",  sub_1000951FC((uint64_t)a1, kCNSCaptivePortalVenueInfoURLProperty),  kCNSCaptivePortalVenueInfoURLProperty);
    objc_msgSend( v12,  "setObject:forKeyedSubscript:",  sub_1000951FC((uint64_t)a1, kCNSCaptivePortalCanExtendSessionProperty),  kCNSCaptivePortalCanExtendSessionProperty);
    objc_msgSend( v12,  "setObject:forKeyedSubscript:",  sub_1000951FC((uint64_t)a1, kCNSCaptivePortalSessionExpirationProperty),  kCNSCaptivePortalSessionExpirationProperty);
    objc_msgSend( v12,  "setObject:forKeyedSubscript:",  sub_1000951FC((uint64_t)a1, kCNSNetworkWasCaptiveProperty),  kCNSNetworkWasCaptiveProperty);
    objc_msgSend( v12,  "setObject:forKeyedSubscript:",  sub_1000951FC((uint64_t)a1, kCNSDisabledByCaptiveProperty),  kCNSDisabledByCaptiveProperty);
    objc_msgSend( v12,  "setObject:forKeyedSubscript:",  sub_1000951FC((uint64_t)a1, kCNSCaptiveBypassProperty),  kCNSCaptiveBypassProperty);
    objc_msgSend( v12,  "setObject:forKeyedSubscript:",  sub_1000951FC((uint64_t)a1, kCNSIsWhitelistedCaptiveNetworkProperty),  kCNSIsWhitelistedCaptiveNetworkProperty);
    objc_msgSend( v12,  "setObject:forKeyedSubscript:",  sub_1000951FC((uint64_t)a1, kCNSWhitelistedCaptiveNetworkProbeDateProperty),  kCNSWhitelistedCaptiveNetworkProbeDateProperty);
    objc_msgSend( v12,  "setObject:forKeyedSubscript:",  sub_1000951FC((uint64_t)a1, kCNSBrokenBackhaulPromptDateProperty),  kCNSBrokenBackhaulPromptDateProperty);
    objc_msgSend( v12,  "setObject:forKeyedSubscript:",  sub_1000951FC((uint64_t)a1, kCNSBrokenBackhaulUseCellularProperty),  kCNSBrokenBackhaulUseCellularProperty);
    objc_msgSend( v12,  "setObject:forKeyedSubscript:",  sub_1000951FC((uint64_t)a1, kCNSCaptiveNetworkWebSheetLoginDateProperty),  kCNSCaptiveNetworkWebSheetLoginDateProperty);
    objc_msgSend( v12,  "setObject:forKeyedSubscript:",  sub_1000951FC((uint64_t)a1, @"DisabledByCaptiveReason"),  @"DisabledByCaptiveReason");
    if ([v12 count]) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0LL;
    }
    [v82 setCaptiveProfile:v13];
  }

  else {
    int v14 = 2LL;
  }
  [v82 setHiddenState:v14];
  objc_msgSend(v82, "setPayloadUUID:", sub_1000951FC((uint64_t)a1, @"PayloadUUID"));
  [v82 setAutoJoinDisabled:!sub_10009A128((uint64_t)a1)];
  id v15 = sub_10009E6CC((uint64_t)a1);
  if (v15 == 1) {
    int v16 = 1LL;
  }
  else {
    int v16 = 2LL * (v15 == 2);
  }
  [v82 setLowDataMode:v16];
  objc_msgSend(v82, "setBundleID:", sub_1000951FC((uint64_t)a1, @"BundleIdentifier"));
  objc_msgSend(v82, "setLastJoinedBySystemAt:", sub_1000951FC((uint64_t)a1, @"lastAutoJoined"));
  objc_msgSend(v82, "setLastJoinedByUserAt:", sub_1000951FC((uint64_t)a1, @"lastJoined"));
  CFNumberRef v17 = objc_msgSend( (id)sub_1000951FC((uint64_t)a1, @"WiFiManagerKnownNetworksEventType"),  "intValue");
  CFNumberRef v18 = objc_msgSend((id)sub_1000951FC((uint64_t)a1, @"WiFiNetworkAttributeSource"), "intValue");
  uint64_t v19 = objc_msgSend((id)sub_1000951FC((uint64_t)a1, @"NetworkOriginator"), "intValue");
  __int128 v20 = 10LL;
  switch(v19)
  {
    case 0u:
      if (!objc_msgSend(v82, "bundleID", 10)) {
        goto LABEL_58;
      }
      __int128 v20 = 14LL;
      break;
    case 1u:
    case 6u:
      __int128 v20 = 15LL;
      break;
    case 2u:
      break;
    default:
LABEL_58:
      __int128 v20 = 17LL;
      if (v19 != 3 && v18 != 1)
      {
        if (v19 == 4)
        {
          __int128 v20 = 7LL;
        }

        else if (v19 == 5)
        {
          __int128 v20 = 12LL;
        }

        else if (objc_msgSend(v82, "payloadUUID", 17))
        {
LABEL_69:
          __int128 v20 = 9LL;
        }

        else
        {
          __int128 v20 = 16LL;
          if (v17 != 14 && v18 != 2)
          {
            __int128 v20 = 5LL;
            switch(v17)
            {
              case 1u:
                goto LABEL_70;
              case 2u:
              case 4u:
              case 7u:
              case 8u:
              case 9u:
              case 0xAu:
                goto LABEL_154;
              case 3u:
                __int128 v20 = 8LL;
                break;
              case 5u:
                __int128 v20 = 13LL;
                break;
              case 6u:
                __int128 v20 = 6LL;
                break;
              case 0xBu:
                __int128 v20 = 11LL;
                break;
              default:
                if (v17 == 17) {
                  goto LABEL_69;
                }
LABEL_154:
                __int128 v20 = 0LL;
                break;
            }
          }
        }
      }

      break;
  }

  if (v14) {
LABEL_15:
  }
    CFRelease(v14);
LABEL_16:
  sub_10003A8FC((vm_address_t)a2, a3);
  return 0LL;
}

  sub_10003A8FC((vm_address_t)a2, a3);
  sub_10003A8FC((vm_address_t)a4, a5);
  return 0LL;
}

  objc_autoreleasePoolPop(v9);
}

    objc_autoreleasePoolPop(v14);
    goto LABEL_15;
  }

  CFNumberRef v18 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: network is NULL",  "__WiFiDeviceManagerUserForcedAssociationScanCallback");
  }
  objc_autoreleasePoolPop(v18);
  sub_1000ECFA0(v8, 0LL, 1LL);
LABEL_15:
  free(a6);
}

    objc_autoreleasePoolPop(v11);
    goto LABEL_15;
  }

  __int128 v9 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: allow problematic network %@ for auto-join (rssi: %d(%d))", "__WiFiDeviceManagerHasNetworkRssiImproved", sub_100095BC8(a2), v7, v6 message];
  }
  objc_autoreleasePoolPop(v9);
  __int128 v10 = 1LL;
LABEL_16:
  objc_autoreleasePoolPop(v4);
  return v10;
}

    sub_100095F10((uint64_t)a2, (uint64_t)ValueAtIndex);
  }

  objc_autoreleasePoolPop(v9);
}

  objc_autoreleasePoolPop(v6);
}

            if (++v9 == v8) {
              return 0LL;
            }
          }

          uint64_t v11 = ValueAtIndex;
          uint64_t v12 = 0LL;
          while (1)
          {
            uint64_t v13 = CFArrayGetValueAtIndex(theArray, v12);
            if (v13)
            {
              int v14 = sub_1000951FC((uint64_t)v13, @"BSSID");
              if (v14)
              {
                if (CFEqual(v11, v14)) {
                  return 1LL;
                }
              }
            }

            if (Count == ++v12) {
              goto LABEL_14;
            }
          }
        }

        else
        {
          return 0LL;
        }
      }
    }
  }

  return result;
}
  }

  uint64_t v12 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)));
  uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8LL);
  int v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

  *(NDR_record_t *)(a2 + 24) = v6;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v6;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v6;
  return result;
}

  uint64_t v11 = *((unsigned __int8 *)v20 + 24);
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  return v11;
}

  uint64_t v11 = *((unsigned __int8 *)v20 + 24);
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  return v11;
}

void sub_100015DEC(int a1, CFArrayRef theArray, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = 0LL;
  uint64_t valuePtr = 0LL;
  if (a4)
  {
    double v7 = *(const void **)(a4 + 384);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a4 + 384) = 0LL;
    }

    if (*(_BYTE *)(a4 + 632))
    {
      if (a3)
      {
        int v14 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Init Probe gave an error %ld",  "__WiFiLQAMgrInitProbeResultCallBack",  a3);
        }
      }

      else if (theArray)
      {
        if (CFArrayGetCount(theArray))
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0LL);
          Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrNumProbesSent");
          if (Value) {
            CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr);
          }
          __int128 v10 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrNumProbesFail");
          if (v10)
          {
            CFNumberGetValue(v10, kCFNumberCFIndexType, &v16);
            uint64_t v11 = v16;
          }

          else
          {
            uint64_t v11 = 0LL;
          }

          uint64_t v12 = valuePtr;
          uint64_t v13 = objc_autoreleasePoolPush();
          if (v12 && v11 == v12)
          {
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Gateway NOT pingeable",  "__WiFiLQAMgrInitProbeResultCallBack");
            }
            objc_autoreleasePoolPop(v13);
            *(_BYTE *)(a4 + 35_Block_object_dispose(va, 8) = 0;
          }

          else
          {
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Gateway pingeable",  "__WiFiLQAMgrInitProbeResultCallBack");
            }
            objc_autoreleasePoolPop(v13);
            *(_BYTE *)(a4 + 35_Block_object_dispose(va, 8) = 1;
          }

          return;
        }

        int v14 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: zero elements in probeResultRef",  "__WiFiLQAMgrInitProbeResultCallBack",  v15);
        }
      }

      else
      {
        int v14 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: probeResultRef is null",  "__WiFiLQAMgrInitProbeResultCallBack",  v15);
        }
      }

      objc_autoreleasePoolPop(v14);
    }
  }

void sub_100015FDC(uint64_t a1, const __CFString *a2, CFDictionaryRef theDict)
{
  if (a1 && *(_BYTE *)(a1 + 632))
  {
    Value = (const __CFString *)CFDictionaryGetValue(theDict, kSCPropNetIPv4ARPResolvedIPAddress);
    if (Value)
    {
      uint64_t v6 = Value;
      *(_DWORD *)(a1 + 2832) |= 2u;
      if (+[WiFiRoamManager sharedWiFiRoamManager](&OBJC_CLASS___WiFiRoamManager, "sharedWiFiRoamManager")) {
        objc_msgSend( +[WiFiRoamManager sharedWiFiRoamManager](WiFiRoamManager, "sharedWiFiRoamManager"),  "setIpAddrAssigned:",  1);
      }
      double v7 = *(const void **)(a1 + 400);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(a1 + 400) = 0LL;
      }

      CFNumberRef v8 = *(const void **)(a1 + 40);
      if (v8)
      {
        CFRelease(v8);
        *(void *)(a1 + 40) = 0LL;
      }

      *(void *)(a1 + 400) = CFStringCreateCopy(kCFAllocatorDefault, v6);
      *(void *)(a1 + 40) = CFStringCreateCopy(kCFAllocatorDefault, a2);
    }

    else
    {
      __int128 v9 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager IPAddr is NULL",  "WiFiLQAMgrSetRouterIpv4Addr");
      }
      objc_autoreleasePoolPop(v9);
    }
  }

uint64_t sub_1000160F8(uint64_t result, int a2, double a3)
{
  if (result && *(_BYTE *)(result + 632) && *(_DWORD *)(result + 2768) != a2)
  {
    *(_DWORD *)(result + 276_Block_object_dispose(va, 8) = a2;
    *(double *)(result + 2776) = a3;
  }

  return result;
}

uint64_t sub_10001611C(uint64_t result, char a2)
{
  if (result) {
    *(_BYTE *)(result + 2784) = a2;
  }
  return result;
}

void sub_100016128(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    *(void *)(a1 + 1272) = a2;
    uint64_t f = dispatch_mach_create_f("com.apple.wifimanager.link-quality", a2, a1, sub_100016260);
    *(void *)(a1 + 424) = f;
    if (f) {
      dispatch_mach_connect(f, *(unsigned int *)(a1 + 420), 0LL, 0LL);
    }
    uint64_t v5 = dispatch_mach_create_f("com.apple.wifimanager.link-quality-dns-fail", a2, a1, sub_1000163D4);
    *(void *)(a1 + 44_Block_object_dispose(va, 8) = v5;
    if (v5) {
      dispatch_mach_connect(v5, *(unsigned int *)(a1 + 444), 0LL, 0LL);
    }
    uint64_t v6 = *(dispatch_object_s **)(a1 + 336);
    if (v6) {
      dispatch_activate(v6);
    }
    double v7 = *(dispatch_object_s **)(a1 + 536);
    if (v7) {
      dispatch_activate(v7);
    }
    if (sub_1000550E0(*(void *)(a1 + 32)))
    {
      CFNumberRef v8 = *(dispatch_object_s **)(a1 + 2896);
      if (v8) {
        dispatch_activate(v8);
      }
    }
  }

  else
  {
    __int128 v9 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      __int128 v10 = "manager";
      if (a1) {
        __int128 v10 = "queue";
      }
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: LQA %s is null", "WiFiLQAMgrScheduleWithQueue", v10);
    }

    objc_autoreleasePoolPop(v9);
  }

void sub_100016260(uint64_t a1, unint64_t a2)
{
  uint64_t state64 = 0LL;
  if (!&_managed_event_fetch) {
    return;
  }
  if (!a1)
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQA mgr is null",  "__WiFiLQAMgrTriggetDisconnectSymptomsCallback");
    }
    goto LABEL_16;
  }

  if (a2 <= 8 && ((1LL << a2) & 0x182) != 0) {
    return;
  }
  if (!*(_BYTE *)(a1 + 632))
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQA mgr is disabled",  "__WiFiLQAMgrTriggetDisconnectSymptomsCallback");
    }
LABEL_16:
    objc_autoreleasePoolPop(v6);
    return;
  }

  uint64_t state = notify_get_state(*(_DWORD *)(a1 + 416), &state64);
  if ((_DWORD)state)
  {
    uint64_t v4 = state;
    uint64_t v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Unable to get Symptoms Event ID Error %d",  "__WiFiLQAMgrTriggetDisconnectSymptomsCallback",  v4);
    }
    objc_autoreleasePoolPop(v5);
  }

  else
  {
    CFRetain((CFTypeRef)a1);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100024160;
    v7[3] = &unk_1001E2D68;
    v7[4] = a1;
    managed_event_fetch_series(state64, 7LL, v7);
  }

void sub_1000163D4(uint64_t a1, unint64_t a2)
{
  uint64_t state64 = 0LL;
  if (&_managed_event_fetch && (a2 > 8 || ((1LL << a2) & 0x182) == 0))
  {
    if (a1)
    {
      uint64_t state = notify_get_state(*(_DWORD *)(a1 + 440), &state64);
      uint64_t v4 = objc_autoreleasePoolPush();
      if ((_DWORD)state)
      {
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Unable to get Symptoms Event ID Error %d",  "__WiFiLQAMgrDNSFailureSymptomsCallback",  state);
        }
        objc_autoreleasePoolPop(v4);
      }

      else
      {
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s called at %f",  "__WiFiLQAMgrDNSFailureSymptomsCallback",  CFAbsoluteTimeGetCurrent());
        }
        objc_autoreleasePoolPop(v4);
        *(_DWORD *)(a1 + 2820) = 8;
        sub_100021AB4((CFTypeRef)a1, 0, 1);
        -[WiFiUsageMonitor addFaultEvent:forInterface:]( +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance"),  "addFaultEvent:forInterface:",  18LL,  *(void *)(a1 + 40));
      }
    }

    else
    {
      uint64_t v5 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQA mgr is null",  "__WiFiLQAMgrDNSFailureSymptomsCallback");
      }
      objc_autoreleasePoolPop(v5);
    }
  }

void sub_10001653C(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    *(_BYTE *)(a1 + 2976) = 1;
    uint64_t v3 = *(dispatch_source_s **)(a1 + 536);
    if (v3) {
      dispatch_source_cancel(v3);
    }
    uint64_t v4 = *(dispatch_source_s **)(a1 + 336);
    if (v4) {
      dispatch_source_cancel(v4);
    }
    uint64_t v5 = *(dispatch_source_s **)(a1 + 2896);
    if (v5) {
      dispatch_source_cancel(v5);
    }
    *(_BYTE *)(a1 + 2904) = 0;
    if (*(void *)(a1 + 424))
    {
      dispatch_mach_cancel();
      dispatch_release(*(dispatch_object_t *)(a1 + 424));
      *(void *)(a1 + 424) = 0LL;
    }

    if (*(void *)(a1 + 448))
    {
      dispatch_mach_cancel();
      dispatch_release(*(dispatch_object_t *)(a1 + 448));
      *(void *)(a1 + 44_Block_object_dispose(va, 8) = 0LL;
    }

    if (*(void *)(a1 + 1264))
    {
      Main = CFRunLoopGetMain();
      CFRunLoopRemoveSource(Main, *(CFRunLoopSourceRef *)(a1 + 1264), kCFRunLoopDefaultMode);
    }

    *(void *)(a1 + 1272) = 0LL;
  }

  else
  {
    double v7 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      CFNumberRef v8 = "manager";
      if (a1) {
        CFNumberRef v8 = "queue";
      }
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQA %s is null",  "WiFiLQAMgrUnscheduleFromQueue",  v8);
    }

    objc_autoreleasePoolPop(v7);
  }

void sub_10001664C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 544) = a2;
      *(void *)(a1 + 552) = a3;
      return;
    }

    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, Triggered Disconnect Callback is NULL",  "WiFiLQAMgrRegisterTriggerDisconnectCallback");
    }
  }

  else
  {
    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManagerRef is NULL",  "WiFiLQAMgrRegisterTriggerDisconnectCallback");
    }
  }

  objc_autoreleasePoolPop(v3);
}

void sub_1000166F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    *(void *)(a1 + 616) = a2;
    *(void *)(a1 + 624) = a3;
  }

  else
  {
    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManagerRef is NULL",  "WiFiLQAMgrRegisterTDConfirmedCallback");
    }
    objc_autoreleasePoolPop(v3);
  }

void sub_100016768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a2)
    {
      *(void *)(a1 + 560) = a2;
      *(void *)(a1 + 56_Block_object_dispose(va, 8) = a3;
      return;
    }

    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, GetApEnvironment Callback is NULL",  "WiFiLQAMgrRegisterGetAPEnvironmentCallback");
    }
  }

  else
  {
    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManagerRef is NULL",  "WiFiLQAMgrRegisterGetAPEnvironmentCallback");
    }
  }

  objc_autoreleasePoolPop(v3);
}

uint64_t sub_100016810(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 576) = a2;
  *(void *)(result + 584) = a3;
  return result;
}

id sub_10001681C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void **)(a1 + 608);
    if (v1) {
      return [v1 copy];
    }
  }

  else
  {
    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: lqaMgr null", "WiFiLQAMgrCopyColocatedScopeSsids");
    }
    objc_autoreleasePoolPop(v3);
  }

  return 0LL;
}

float sub_100016898(uint64_t a1, const void *a2, const __CFDictionary *a3, unsigned int a4)
{
  double v7 = objc_autoreleasePoolPush();
  char valuePtr = 0;
  CFNumberRef v8 = +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance");
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  float v10 = 0.0;
  if (!a1) {
    goto LABEL_452;
  }
  if (!a3)
  {
    CFNumberRef v23 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: lqmDict is null", "WiFiLQAMgrLQMNotify", v263);
    }
    goto LABEL_245;
  }

  double v11 = Current;
  uint64_t v12 = (const __CFNumber *)CFDictionaryGetValue(a3, @"LINK_CHANGED_IS_LINKDOWN");
  if (v12)
  {
    CFNumberGetValue(v12, kCFNumberSInt8Type, &valuePtr);
    if (valuePtr) {
      goto LABEL_452;
    }
  }

  uint64_t v13 = (const __CFString *)sub_100043E8C(*(void *)(a1 + 32));
  int v14 = v13;
  uint64_t v293 = a1;
  if (v13)
  {
    uint64_t v15 = *(const void **)(a1 + 40);
    if (v15)
    {
      if (CFEqual(v13, v15)) {
        goto LABEL_14;
      }
      uint64_t v16 = *(const void **)(a1 + 40);
      if (v16)
      {
        CFRelease(v16);
        *(void *)(a1 + 40) = 0LL;
      }
    }

    *(void *)(a1 + 40) = CFStringCreateCopy(kCFAllocatorDefault, v14);
  }

  else
  {
    CFNumberRef v17 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: Main Interface is Null", "WiFiLQAMgrLQMNotify");
    }
    objc_autoreleasePoolPop(v17);
    a1 = v293;
  }

LABEL_245:
    objc_autoreleasePoolPop(v23);
    goto LABEL_452;
  }

  sub_100019404(a1, v18);
  *(_DWORD *)(a1 + 20) = 1;
  __int128 v20 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    uint64_t v21 = *(int *)(a1 + 20);
    else {
      CFNumberRef v22 = *(&off_1001E2D88 + v21);
    }
    [(id)qword_100219F60 WFLog:3, "%s: %@", "__WiFiLQAMgrSetState", v22 message];
  }

  objc_autoreleasePoolPop(v20);
  *(CFAbsoluteTime *)(a1 + 64) = CFAbsoluteTimeGetCurrent();
  CFRelease(v19);
LABEL_28:
  v288 = v8;
  v289 = v7;
  -[WiFiPerfPerAssoc ingestLQMUpdate:]( +[WiFiPerfPerAssoc sharedInstance](&OBJC_CLASS___WiFiPerfPerAssoc, "sharedInstance"),  "ingestLQMUpdate:",  a3);
  CFNumberRef v26 = (const __CFDictionary *)CFDictionaryGetValue(a3, @"ROAM_STATE");
  v292 = a3;
  if (v26)
  {
    __int128 v27 = v26;
    CFNumberRef v28 = (const __CFArray *)CFDictionaryGetValue(v26, @"ROAM_CACHE");
    CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
    if (Mutable)
    {
      int v30 = Mutable;
      uint64_t v31 = sub_100095BC8(*(const void **)(a1 + 48));
      dispatch_queue_t v32 = sub_100096968(*(const __CFArray **)(v293 + 48));
      dispatch_source_t v33 = CFDictionaryGetValue(v27, @"RSSI");
      v34 = CFDictionaryGetValue(v27, @"ROAM_SCAN_COUNT");
      uint64_t v35 = CFDictionaryGetValue(v27, @"ROAM_SCAN_AGE");
      v262 = v31;
      a1 = v293;
      CFStringAppendFormat(v30, 0LL, @"CurrentBSS {%@ - %@} {%@dbm, %@, %@ms ", v262, v32, v33, v34, v35);
      if (*(_BYTE *)(v293 + 248)) {
        __int128 v36 = "edgeBSS";
      }
      else {
        __int128 v36 = "";
      }
      CFStringAppendFormat(v30, 0LL, @"%s} RoamCache - {", v36);
      if (v28)
      {
        int Count = CFArrayGetCount(v28);
        if (!Count)
        {
LABEL_42:
          CFRelease(v30);
          a3 = v292;
          goto LABEL_43;
        }

        if (Count >= 1)
        {
          CFIndex v38 = 0LL;
          uint64_t v39 = Count;
          do
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v28, v38);
            if (!ValueAtIndex) {
              goto LABEL_42;
            }
            uint64_t v41 = ValueAtIndex;
            __int128 v42 = CFDictionaryGetValue(ValueAtIndex, @"BSSID");
            __int128 v43 = CFDictionaryGetValue(v41, @"RSSI");
            v44 = CFDictionaryGetValue(v41, @"CHANNEL");
            uint64_t v45 = CFDictionaryGetValue(v41, @"CHANNEL_FLAGS");
            v264 = v43;
            a1 = v293;
            CFStringAppendFormat(v30, 0LL, @"{%@, %@, %@, %@}", v42, v264, v44, v45);
          }

          while (v39 != ++v38);
        }
      }

      CFStringAppend(v30, @"}");
      v46 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%@", v30 message];
      }
      objc_autoreleasePoolPop(v46);
      goto LABEL_42;
    }
  }

LABEL_43:
  value = 0LL;
  if (*(void *)(a1 + 24))
  {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, a3);
    if (MutableCopy)
    {
      v48 = MutableCopy;
      CFAbsoluteTime v295 = CFAbsoluteTimeGetCurrent();
      CFNumberRef v49 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &v295);
      if (!v49)
      {
        v250 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: CFNumberCreate for timestamp failed",  "__WiFiLQAMgrAddLQMEntry");
        }
        objc_autoreleasePoolPop(v250);
        goto LABEL_373;
      }

      cuint64_t f = v49;
      CFDictionaryAddValue(v48, @"kWiFiLqaMgrLqmSampleLocalTimestamp", v49);
      int ValueIfPresent = CFDictionaryGetValueIfPresent(a3, @"TXRX_STATS_VALID", (const void **)&value);
      v51 = value;
      if (ValueIfPresent) {
        BOOL v52 = value == 0LL;
      }
      else {
        BOOL v52 = 1;
      }
      int v54 = v52 || value == kCFBooleanTrue;
      int v291 = v54;
      int v338 = 0;
      unsigned int v339 = 0;
      __int16 v337 = 0;
      __int16 v336 = 0;
      int v335 = 0;
      uint64_t v333 = 0LL;
      uint64_t v334 = 0LL;
      uint64_t v331 = 0LL;
      uint64_t v332 = 0LL;
      uint64_t v330 = 0LL;
      unsigned int v329 = 0;
      v327 = 0LL;
      v328 = 0LL;
      v325 = 0LL;
      v326 = 0LL;
      v323 = 0LL;
      v324 = 0LL;
      v321 = 0LL;
      v322 = 0LL;
      v319 = 0LL;
      v320 = 0LL;
      v317 = 0LL;
      v318 = 0LL;
      v315 = 0LL;
      v316 = 0LL;
      v313 = 0LL;
      v314 = 0LL;
      v311 = 0LL;
      v312 = 0LL;
      v309 = 0LL;
      v310 = 0LL;
      v307 = 0LL;
      v308 = 0LL;
      uint64_t v305 = 0LL;
      v306 = 0LL;
      uint64_t v304 = 0LL;
      uint64_t v303 = 0LL;
      uint64_t v302 = 0LL;
      v55 = (const __CFNumber *)CFDictionaryGetValue(v48, @"RSSI");
      if (!v55) {
        goto LABEL_311;
      }
      CFNumberGetValue(v55, kCFNumberSInt32Type, &v339);
      *(_DWORD *)(a1 + 278_Block_object_dispose(va, 8) = v339;
      if (CFDictionaryGetValueIfPresent(v48, @"PER_CORE_RSSI", (const void **)&v313))
      {
        sub_10003B774((const __CFArray *)v313, &v305, &v304);
        v299[0] = 0LL;
        if (CFDictionaryGetValueIfPresent(v48, @"PER_CORE_RSSI", (const void **)v299))
        {
          if (v299[0])
          {
            v56 = CFDictionaryGetValue(v48, @"LQMTIMESTAMP");
            if (v56)
            {
              __int128 keys = *(_OWORD *)off_1001E2D10;
              *(void *)&__int128 values = v56;
              *((void **)&values + 1) = v299[0];
              CFDictionaryRef v57 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)&keys,  (const void **)&values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
              CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 264), 0LL, v57);
              int v58 = CFArrayGetCount(*(CFArrayRef *)(a1 + 264));
              if (v58 >= 4)
              {
                do
                {
                  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 264), (v58 - 1));
                  int v58 = CFArrayGetCount(*(CFArrayRef *)(a1 + 264));
                }

                while (v58 > 3);
              }

              if (v57) {
                CFRelease(v57);
              }
            }
          }
        }
      }

      if (CFDictionaryGetValueIfPresent(v48, @"PER_CORE_NOISE", (const void **)&v312)
        && !sub_10003B774((const __CFArray *)v312, &v303, &v302))
      {
        v312 = 0LL;
      }

      if (CFDictionaryGetValueIfPresent(v48, @"CCA_STATS", (const void **)&v308) && v308)
      {
        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v308, @"CCA_OTHER_TOTAL", (const void **)&v309)
          && v309)
        {
          CFNumberGetValue((CFNumberRef)v309, kCFNumberSInt8Type, (char *)&v336 + 1);
        }

        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v308, @"CCA_INTERFERENCE_TOTAL", (const void **)&v310)
          && v310)
        {
          CFNumberGetValue((CFNumberRef)v310, kCFNumberSInt8Type, &v336);
        }
      }

      unint64_t v301 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v59 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v59 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v299 = v59;
      __int128 v300 = v59;
      if (CFDictionaryGetValueIfPresent(v48, @"MLO_LQM_STATS", (const void **)&v306))
      {
        if (*(_DWORD *)(a1 + 3036))
        {
          uint64_t v60 = 0LL;
          uint64_t v61 = a1 + 3040;
          do
          {
            uint64_t v62 = v61 + v60;
            if (*(_BYTE *)(v61 + v60))
            {
              __int128 v63 = *(_OWORD *)(v62 + 16);
              *(_OWORD *)v299 = *(_OWORD *)v62;
              __int128 v300 = v63;
              unint64_t v301 = *(void *)(v62 + 32);
            }

            v60 += 40LL;
          }

          while (v60 != 120);
        }

        if (v306 && CFArrayGetCount((CFArrayRef)v306) >= 1)
        {
          CFIndex v64 = 0LL;
          do
          {
            v65 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v306, v64);
            if (v65) {
              sub_10001CA7C(a1, v65, v64);
            }
            ++v64;
          }

          while (CFArrayGetCount((CFArrayRef)v306) > v64);
        }

        if (*(_DWORD *)(a1 + 3036))
        {
          uint64_t v66 = 0LL;
          uint64_t v67 = 0LL;
          uint64_t v68 = a1 + 3040;
          do
          {
            if (*(_BYTE *)(v68 + v66)) {
              uint64_t v67 = v68 + v66;
            }
            v66 += 40LL;
          }

          while (v66 != 120);
          if (v67) {
            sub_1000D99C4((uint64_t)v299, v67);
          }
        }

        v69 = +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance");
        if (v69)
        {
          uint64_t v70 = *(void *)(a1 + 40);
          __int128 v71 = *(_OWORD *)(a1 + 3176);
          __int128 keys = *(_OWORD *)(a1 + 3160);
          __int128 v341 = v71;
          -[WiFiUsageMonitor updateWithMLORuntimeConfig:forInterface:]( v69,  "updateWithMLORuntimeConfig:forInterface:",  &keys,  v70);
        }
      }

      v72 = (const __CFNumber *)sub_100096A74(*(void *)(a1 + 48));
      if (v72) {
        CFNumberGetValue(v72, kCFNumberSInt16Type, (void *)(a1 + 2840));
      }
      *(_WORD *)(a1 + 2842) = sub_10009A3FC(*(void *)(a1 + 48));
      if ((_DWORD)v332) {
        BOOL v73 = SHIDWORD(v332) < (int)v332 / 2 && *(_DWORD *)(a1 + 2788) < *(_DWORD *)(a1 + 640) || HIDWORD(v332) == 0;
      }
      else {
        BOOL v73 = 0;
      }
      LOBYTE(values) = 0;
      LOBYTE(v297[0]) = 0;
      *(void *)&__int128 keys = 0LL;
      int v74 = CFArrayGetCount(*(CFArrayRef *)(a1 + 264));
      v290 = v48;
      if (v74 > 0)
      {
        BOOL v280 = v73;
        __int16 v75 = 0;
        __int16 v76 = 0;
        unsigned __int8 v77 = 0;
        unsigned __int8 v78 = 0;
        if (v74 >= 3) {
          uint64_t v79 = 3LL;
        }
        else {
          uint64_t v79 = v74;
        }
        unint64_t v80 = v79 + 1;
        int v282 = v79;
        v285 = v51;
        unsigned int v81 = v79 - 1;
        while (1)
        {
          v82 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 264), v81);
          if (!v82) {
            break;
          }
          else {
            BOOL v83 = 1;
          }
          if (!v83 && CFArrayGetCount((CFArrayRef)keys) == 2)
          {
            v84 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)keys, 0LL);
            v85 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)keys, 1LL);
            if (v84)
            {
              CFNumberGetValue(v84, kCFNumberSInt8Type, &values);
              if ((char)values >= 0xFFFFFF81)
              {
                ++v78;
                v76 += (char)values;
              }
            }

            a1 = v293;
            if (v85)
            {
              CFNumberGetValue(v85, kCFNumberSInt8Type, v297);
              if (SLOBYTE(v297[0]) >= 0xFFFFFF81)
              {
                ++v77;
                v75 += SLOBYTE(v297[0]);
              }
            }
          }

          --v80;
          --v81;
          if (v80 <= 1)
          {
            if (v282 < v78) {
              sub_100153A24();
            }
            if (v282 < v77) {
              sub_100153A4C();
            }
            if (v78) {
              v76 /= (__int16)v78;
            }
            if (v77) {
              v75 /= (__int16)v77;
            }
            a3 = v292;
            int v86 = v76;
            if (!v78) {
              int v86 = -1;
            }
            *(_DWORD *)(a1 + 2792) = v86;
            int v87 = v75;
            if (!v78) {
              int v87 = -1;
            }
            *(_DWORD *)(a1 + 2796) = v87;
            if ((v280 & _os_feature_enabled_impl("WiFiManager", "FastTDRssiDecay")) == 1)
            {
              v88 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Last RSSI:%d Core0 AvgRssCFIndex i = %d Core1 AvgRssCFIndex i = %d",  *(unsigned int *)(a1 + 2788),  (char)v76,  (char)v75);
              }
              objc_autoreleasePoolPop(v88);
              if ((_BYTE)v76)
              {
                v48 = v290;
                v51 = v285;
                if (*(_DWORD *)(a1 + 2788) <= (char)v76)
                {
                  uint64_t v89 = 0LL;
                }

                else
                {
                  *(_DWORD *)(a1 + 278_Block_object_dispose(va, 8) = (char)v76;
                  uint64_t v89 = 1LL;
                }
              }

              else
              {
                v51 = v285;
                if ((_BYTE)v75 && *(_DWORD *)(a1 + 2788) > (char)v75)
                {
                  *(_DWORD *)(a1 + 278_Block_object_dispose(va, 8) = (char)v75;
                  uint64_t v89 = 2LL;
                }

                else
                {
                  uint64_t v89 = 0LL;
                }

                v48 = v290;
              }

              goto LABEL_197;
            }

            uint64_t v89 = 0LL;
LABEL_187:
            v48 = v290;
            v51 = v285;
            goto LABEL_197;
          }
        }

        v247 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQAManager: paramDict is NULL!",  "__WiFiLQAMgrAvgValidPerCoreRssiSamples");
        }
        objc_autoreleasePoolPop(v247);
        uint64_t v89 = 0LL;
        a3 = v292;
        goto LABEL_187;
      }

      v253 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQAManager: perCoreRssiHistory is Empty!",  "__WiFiLQAMgrAvgValidPerCoreRssiSamples");
      }
      objc_autoreleasePoolPop(v253);
      uint64_t v89 = 0LL;
      a3 = v292;
LABEL_197:
      int v90 = v51 ? v291 : 0;
      if ((v90 & 1) == 0 && CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 88) <= *(double *)(a1 + 96))
      {
LABEL_311:
        if (!v291)
        {
LABEL_372:
          CFRelease(cf);
LABEL_373:
          CFRelease(v48);
          goto LABEL_374;
        }

        CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), 0LL, v48);
        int v170 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
        double v171 = CFAbsoluteTimeGetCurrent();
        v299[0] = 0LL;
        if (v170 >= 7)
        {
          double v172 = v171;
          while (1)
          {
            CFIndex v173 = (v170 - 1);
            v174 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v173);
            if (!v174) {
              break;
            }
            v175 = (const __CFNumber *)CFDictionaryGetValue(v174, @"kWiFiLqaMgrLqmSampleLocalTimestamp");
            if (!v175)
            {
              v248 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s LqmSampleLocalTimestamp numberRef is NULL at index:%d!",  "__WiFiLQAMgrAddLQMEntry",  v173);
              }
              goto LABEL_515;
            }

            CFNumberGetValue(v175, kCFNumberDoubleType, v299);
            if (*(double *)v299 == 0.0)
            {
              v248 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s LqmSampleLocalTimestamp Value is NULL at index:%d!",  "__WiFiLQAMgrAddLQMEntry",  v173);
              }
              goto LABEL_515;
            }

            if (v172 - *(double *)v299 > 30.0)
            {
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), v173);
              int v170 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
              if (v170 > 6) {
                continue;
              }
            }

            goto LABEL_319;
          }

          v248 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: LQM Report at %d index is NULL",  "__WiFiLQAMgrAddLQMEntry",  v173);
          }
LABEL_515:
          objc_autoreleasePoolPop(v248);
          goto LABEL_372;
        }

    objc_autoreleasePoolPop(v32);
  }

    if (!CFStringGetLength(Mutable)) {
      goto LABEL_68;
    }
    CFNumberRef v25 = objc_autoreleasePoolPush();
    CFNumberRef v26 = (void *)qword_100219F60;
    if (!qword_100219F60)
    {
LABEL_67:
      objc_autoreleasePoolPop(v25);
LABEL_68:
      *(void *)(a1 + 1136) = v22;
      if (CFStringGetLength(Mutable))
      {
        v64.length = CFStringGetLength(Mutable);
        v64.id location = 0LL;
        CFStringDelete(Mutable, v64);
      }

      uint64_t v31 = *(void *)(a1 + 1136);
      if (v31 < CFArrayGetCount(*(CFArrayRef *)(a1 + 3544)))
      {
        __int128 values = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 1144), a2);
        cuint64_t f = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1LL, &kCFTypeArrayCallBacks);
        dispatch_queue_t v32 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
        dispatch_source_t v33 = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 1144));
        v34 = (const __CFDictionary **)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3544), *(void *)(a1 + 1136));
        if (v33)
        {
          uint64_t v35 = *(const __CFArray **)(a1 + 1104);
          if (v35)
          {
            __int128 v36 = CFArrayGetCount(v35);
            if (v36 >= 1)
            {
              __int128 v37 = v36;
              for (CFIndex i = 0LL; i != v37; ++i)
              {
                uint64_t v39 = (const __CFDictionary **)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1104), i);
                if (v39)
                {
                  __int128 v40 = v39;
                  if (sub_1000971F8(v39))
                  {
                    if (sub_100098FAC(v34, v40))
                    {
                      uint64_t v41 = (void *)sub_1000951FC((uint64_t)v40, @"CHANNEL");
                      if (v41)
                      {
                        __int128 v42 = v41;
                        __int128 v43 = (void *)sub_1000951FC((uint64_t)v40, @"CHANNEL_FLAGS");
                        if (v43)
                        {
                          v44 = v43;
                          if (CFArrayGetCount(v32) < 1)
                          {
LABEL_85:
                            *(_OWORD *)__int128 keys = *(_OWORD *)off_1001E4F98;
                            v59[0] = v42;
                            v59[1] = v44;
                            v48 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)v59,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
                            if (v48)
                            {
                              CFNumberRef v49 = v48;
                              CFArrayAppendValue(v32, v48);
                              CFRelease(v49);
                            }
                          }

                          else
                          {
                            uint64_t v45 = 0LL;
                            while (1)
                            {
                              v46 = (const __CFDictionary *)CFArrayGetValueAtIndex(v32, v45);
                              if (v46)
                              {
                                Value = CFDictionaryGetValue(v46, @"CHANNEL");
                                if (CFEqual(v42, Value)) {
                                  break;
                                }
                              }

                              if (++v45 >= CFArrayGetCount(v32)) {
                                goto LABEL_85;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

        sub_1000FD888(a1);
        *(_DWORD *)(a1 + 5612) = 10;
        if (CFArrayGetCount(v32) < 1)
        {
          v51 = cf;
          v50 = sub_1001036C0(a1, (const __CFArray *)v34, cf, 0, 7LL);
          if (!cf)
          {
LABEL_91:
            if (v32) {
              CFRelease(v32);
            }
            if ((_DWORD)v50)
            {
              if (!Mutable) {
                return sub_100105840(a1, v50);
              }
LABEL_95:
              CFRelease(Mutable);
              return sub_100105840(a1, v50);
            }

            v55 = 0;
            int v54 = 5LL;
            if (!Mutable)
            {
LABEL_102:
              if (!v55) {
                return v54;
              }
              v56 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1104), *(void *)(a1 + 1112));
              if (!v56 || sub_100097264(v56)) {
                ++*(void *)(a1 + 1112);
              }
              return sub_10010824C(a1);
            }

LABEL_319:
        LODWORD(v297[0]) = 0;
        LODWORD(v32_Block_object_dispose(va, 8) = 0;
        LODWORD(v327) = 0;
        *(void *)&__int128 keys = 0LL;
        *(void *)&__int128 values = 0LL;
        if (*(void *)(a1 + 24))
        {
          int v176 = *(_DWORD *)(a1 + 2768);
          v177 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0LL);
          if (v177)
          {
            double v178 = 0.0;
            float v179 = v178;
            if (*(_BYTE *)(a1 + 2824))
            {
              LODWORD(v327) = sub_1000209D8(a1);
            }

            else
            {
              LODWORD(v327) = *(_DWORD *)(a1 + 2788);
              if (!(_DWORD)v327)
              {
                v180 = (const __CFNumber *)CFDictionaryGetValue(v177, @"RSSI");
                if (!v180) {
                  goto LABEL_371;
                }
                CFNumberGetValue(v180, kCFNumberSInt32Type, &v327);
              }
            }

            if (v179 < 20.0)
            {
              if (dword_100218E60 == -1)
              {
                ++dword_100219840;
              }

              else if (dword_100218E60 < 21)
              {
                int v183 = dword_100219840;
                if (v183 >= 10)
                {
                  v184 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    [(id)qword_100219F60 WFLog:3 message:"RSSI_WIN: Beacon PER is consistenyly below < 20Percent. Switch to default RSSI Window"];
                  }
                  objc_autoreleasePoolPop(v184);
                  if (*(_BYTE *)(a1 + 2977) != 8)
                  {
                    *(_BYTE *)(a1 + 2977) = 8;
                    sub_100020D3C(a1);
                  }

                  dword_100219840 = 0;
                }
              }

              else
              {
                dword_100219840 = 1;
              }

              goto LABEL_371;
            }

            if (v179 > 20.0 && v179 < 60.0)
            {
              if (dword_100218E60 == -1)
              {
                int v181 = dword_100219844 + 1;
              }

              else
              {
                if ((dword_100218E60 - 61) > 0xFFFFFFD6)
                {
                  int v185 = dword_100219844;
                  if (v185 >= 5)
                  {
                    if (*(_BYTE *)(v293 + 2977) != 4 && v176 != 1)
                    {
                      v186 = objc_autoreleasePoolPush();
                      if (qword_100219F60) {
                        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "RSSI_WIN: Beacon PER is consistenyly below > 20Percent. Switch to RSSI Win = %d",  4);
                      }
                      objc_autoreleasePoolPop(v186);
                      *(_BYTE *)(v293 + 2977) = 4;
                      sub_100020D3C(v293);
                    }

                    dword_100219844 = 0;
                  }

                  goto LABEL_370;
                }

                int v181 = 1;
              }

              dword_100219844 = v181;
LABEL_370:
              a1 = v293;
              goto LABEL_371;
            }

            if (v179 > 60.0)
            {
              if (dword_100218E60 == -1)
              {
                int v182 = dword_100219848 + 1;
              }

              else
              {
                if (dword_100218E60 > 59)
                {
                  int v244 = dword_100219848;
                  if (dword_100218E60 != 60) {
                    int v244 = ++dword_100219848;
                  }
                  if (v244 >= 5)
                  {
                    v245 = objc_autoreleasePoolPush();
                    if (qword_100219F60) {
                      [(id)qword_100219F60 WFLog:3 message:"RSSI_WIN: Collected more than 5 samples of High Beacon PER > 60 Percent "];
                    }
                    objc_autoreleasePoolPop(v245);
                    if (*(_BYTE *)(v293 + 2977) != 2 && v176 != 1)
                    {
                      v246 = objc_autoreleasePoolPush();
                      if (qword_100219F60) {
                        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "RSSI_WIN: Beacon PER is consistenyly below > 60Percent. Switch to RSSI Win = %d",  2);
                      }
                      objc_autoreleasePoolPop(v246);
                      *(_BYTE *)(v293 + 2977) = 2;
                      sub_100020D3C(v293);
                    }

                    dword_100219848 = 0;
                  }

                  goto LABEL_370;
                }

                int v182 = 1;
              }

              dword_100219848 = v182;
              goto LABEL_370;
            }

  *(_DWORD *)(a3 + 6200) = 0;
  if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
  {
    sub_1000F6C7C(a3);
    sub_1000FEEF8(a3);
  }

  sub_1000D3350(a3);
  uint64_t v164 = *(void *)(a3 + 64);
  sub_10004D99C(v164, Value != 0LL);
  if (v9) {
    CFRelease(v9);
  }
}

LABEL_371:
            dword_100218E60 = (int)v179;
            goto LABEL_372;
          }

          v256 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: Latest LQM Report is NULL",  "__WiFiLQAMgrMonitorBeaconPER");
          }
        }

        else
        {
          v256 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: LQM table is NULL",  "__WiFiLQAMgrMonitorBeaconPER");
          }
        }

        objc_autoreleasePoolPop(v256);
        float v179 = 0.0;
        goto LABEL_371;
      }

      *(CFAbsoluteTime *)(a1 + 8_Block_object_dispose(va, 8) = CFAbsoluteTimeGetCurrent();
      double v91 = 0.0;
      double v92 = 0.0;
      uint64_t v286 = v89;
      if (HIDWORD(v334) && v335)
      {
        kdebug_trace(731381844LL, 0LL, 0LL, 0LL, 0LL);
        v93 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:4 message:"Tx failure is observed"];
        }
        objc_autoreleasePoolPop(v93);
      }

      v94 = v308;
      v95 = v313;
      v96 = objc_autoreleasePoolPush();
      v97 = (void *)qword_100219F60;
      if (v94)
      {
        if (!v95)
        {
          if (qword_100219F60)
          {
            v107 = sub_100095BC8(*(const void **)(a1 + 48));
            v108 = sub_10008FDAC(*(_DWORD *)(a1 + 2768));
            if ((_DWORD)v332)
            {
              double v109 = 0.0;
            }

            else
            {
              double v109 = 0.0;
            }

            uint64_t v124 = *(unsigned __int16 *)(a1 + 2840);
            uint64_t v125 = *(unsigned __int16 *)(a1 + 2842);
            double v126 = (float)(*(float *)(a1 + 1076) * 100.0);
            if (HIDWORD(v334))
            {
              double v127 = (double)v335 / (double)SHIDWORD(v334) * 100.0;
              uint64_t v128 = v334;
              double v129 = (double)(int)v334 / (double)SHIDWORD(v334) * 100.0;
            }

            else
            {
              double v127 = 0.0;
              uint64_t v128 = v334;
              double v129 = 0.0;
            }

            double v133 = 0.0;
            if (HIDWORD(v333)) {
              double v133 = (double)(int)v333 / (double)SHIDWORD(v333) * 100.0;
            }
            uint64_t v134 = *(void *)(a1 + 208);
            v135 = "F";
            if (v90) {
              v135 = "T";
            }
            uint64_t v268 = *(void *)(a1 + 208);
            a1 = v293;
            [v97 WFLog:3, "%s(%@:%@): InfraUptime:%.1fsecs Channel: %d Bandwidth: %dMhz Rssi: %d Cca: %d (S:%d O:%d I:%d) Snr: %hd Bc nPer: %.1f%% (%d, %.1f%%) TxFrameCnt: %d TxPer: %.1f%% TxReTrans: %d TxRetryRatio: %0.1f%% RxFrameCnt: %d RxRetryFrames: %d RxRetryRatio: %0.1f%% TxRate: %d RxRate: %d FBRate: %d TxFwFrms: %d TxFwFail: %d  time: %.1fsecs fgApp: %@ V: %s", v134, "__WiFiLQAMgrLogStats", v107, v108, *(void *)&v91, v124, v125, v339, SHIBYTE(v337), (char)v337, SHIBYTE(v336), (char)v336, SHIWORD(v338), *(void *)&v109, v332, *(void *)&v126, HIDWORD(v334), *(void *)&v127, v128, *(void *)&v129, HIDWORD(v333), v333, *(void *)&v133, HIDWORD(v331), v331, HIDWORD(v330), v330, v329, *(void *)&v92, v268, v135 message];
          }

          goto LABEL_275;
        }

        if (qword_100219F60)
        {
          v98 = sub_100095BC8(*(const void **)(a1 + 48));
          v99 = sub_10008FDAC(*(_DWORD *)(a1 + 2768));
          double v100 = 0.0;
          if (HIDWORD(v334))
          {
            double v101 = (double)v335 / (double)SHIDWORD(v334) * 100.0;
            uint64_t v102 = v334;
            double v103 = (double)(int)v334 / (double)SHIDWORD(v334) * 100.0;
          }

          else
          {
            double v101 = 0.0;
            uint64_t v102 = v334;
            double v103 = 0.0;
          }

          uint64_t v113 = *(unsigned __int16 *)(a1 + 2840);
          uint64_t v114 = *(unsigned __int16 *)(a1 + 2842);
          double v115 = (float)(*(float *)(a1 + 1076) * 100.0);
          v283 = v96;
          if (HIDWORD(v333)) {
            double v116 = (double)(int)v333 / (double)SHIDWORD(v333) * 100.0;
          }
          else {
            double v116 = 0.0;
          }
          a1 = v293;
          if (v90) {
            v117 = "T";
          }
          else {
            v117 = "F";
          }
          [v97 WFLog:3, "%s(%@:%@): InfraUptime:%.1fsecs Channel: %d Bandwidth: %dMhz Rssi: %d {%ld %ld} Cca: %d (S:%d O:%d I:%d) Snr : %hd BcnPer: %.1f%% (%d, %.1f%%) TxFrameCnt: %d TxPer: %.1f%% TxReTrans: %d TxRetryRatio: %0.1f%% RxFrameCn t: %d RxRetryFrames: %d RxRetryRatio: %0.1f%% TxRate: %d RxRate: %d FBRate: %d TxFwFrms: %d TxFwFail: %d Noi se: %d {%ld %ld %ld} time: %.1fsecs fgApp: %@ V: %s", "__WiFiLQAMgrLogStats", v98, v99, *(void *)&v91, v113, v114, v339, v305, v304, SHIBYTE(v337), (char)v337, SHIBYTE(v336), (char)v336, SHIWORD(v338), *(void *)&v100, v332, *(void *)&v115, HIDWORD(v334), *(void *)&v101, v102, *(void *)&v103, HIDWORD(v333), v333, *(void *)&v116, HIDWORD(v331), v331, HIDWORD(v330), v330, v329, (__int16)v338, v303, v302, v302 - v303, *(void *)&v92, *(void *)(v293 + 208), v117 message];
          a3 = v292;
LABEL_259:
          v48 = v290;
          v96 = v283;
        }
      }

      else
      {
        if (!v95)
        {
          if (qword_100219F60)
          {
            v110 = sub_100095BC8(*(const void **)(a1 + 48));
            v111 = sub_10008FDAC(*(_DWORD *)(a1 + 2768));
            if ((_DWORD)v332)
            {
              double v112 = 0.0;
            }

            else
            {
              double v112 = 0.0;
            }

            if (HIDWORD(v334))
            {
              double v136 = (double)v335 / (double)SHIDWORD(v334) * 100.0;
              uint64_t v137 = v334;
              double v138 = (double)(int)v334 / (double)SHIDWORD(v334) * 100.0;
            }

            else
            {
              double v136 = 0.0;
              uint64_t v137 = v334;
              double v138 = 0.0;
            }

            double v139 = 0.0;
            if (HIDWORD(v333)) {
              double v139 = (double)(int)v333 / (double)SHIDWORD(v333) * 100.0;
            }
            v140 = "F";
            if (v90) {
              v140 = "T";
            }
            [v97 WFLog:3, "%s(%@:%@): InfraUptime:%.1fsecs Channel: %d Bandwidth: %dMhz Rssi: %d Cca: %d Snr: %hd  BcnPer: %.1f%% (%d, %.1f%%) TxFrameCnt: %d TxPer: %.1f%% TxReTrans: %d TxRetryRatio: %0.1f%% RxFrameCnt : %d RxRetryFrames: %d RxRetryRatio: %0.1f%% TxRate: %d RxRate: %d FBRate: %d TxFwFrms: %d TxFwFail: %d time: %.1fsecs fgApp: %@ V: %s", v331, "__WiFiLQAMgrLogStats", v110, v111, *(void *)&v91, *(unsigned __int16 *)(a1 + 2840), *(unsigned __int16 *)(a1 + 2842), v339, SHIBYTE(v337), SHIWORD(v338), *(void *)&v112, v332, (float)(*(float *)(a1 + 1076) * 100.0), HIDWORD(v334), *(void *)&v136, v137, *(void *)&v138, HIDWORD(v333), v333, *(void *)&v139, HIDWORD(v331), v331, HIDWORD(v330), v330, v329, *(void *)&v92, *(void *)(a1 + 208), v140, v266, v267, v269 message];
          }

          goto LABEL_275;
        }

        if (qword_100219F60)
        {
          v104 = sub_100095BC8(*(const void **)(a1 + 48));
          v105 = sub_10008FDAC(*(_DWORD *)(a1 + 2768));
          if ((_DWORD)v332)
          {
            double v106 = 0.0;
          }

          else
          {
            double v106 = 0.0;
          }

          uint64_t v118 = *(unsigned __int16 *)(a1 + 2840);
          uint64_t v119 = *(unsigned __int16 *)(a1 + 2842);
          double v120 = (float)(*(float *)(a1 + 1076) * 100.0);
          v283 = v96;
          if (HIDWORD(v334))
          {
            double v121 = (double)v335 / (double)SHIDWORD(v334) * 100.0;
            uint64_t v122 = v334;
            double v123 = (double)(int)v334 / (double)SHIDWORD(v334) * 100.0;
          }

          else
          {
            double v121 = 0.0;
            uint64_t v122 = v334;
            double v123 = 0.0;
          }

          double v130 = 0.0;
          if (HIDWORD(v333)) {
            double v130 = (double)(int)v333 / (double)SHIDWORD(v333) * 100.0;
          }
          uint64_t v131 = *(void *)(a1 + 208);
          if (v90) {
            v132 = "T";
          }
          else {
            v132 = "F";
          }
          a1 = v293;
          [v97 WFLog:3, "%s(%@:%@): InfraUptime:%.1fsecs Channel: %d Bandwidth: %dMhz Rssi: %d {%ld %ld} Cca: %d Snr: %hd BcnPer: %.1 f%% (%d, %.1f%%) TxFrameCnt: %d TxPer: %.1f%% TxReTrans: %d TxRetryRatio: %0.1f%% RxFrameCnt: %d RxRetryFram es: %d RxRetryRatio: %0.1f%% TxRate: %d RxRate: %d FBRate: %d TxFwFrms: %d TxFwFail: %d Noise: %d {%ld %ld % ld} time: %.1fsecs fgApp: %@ V: %s", "__WiFiLQAMgrLogStats", v104, v105, *(void *)&v91, v118, v119, v339, v305, v304, SHIBYTE(v337), SHIWORD(v338), *(void *)&v106, v332, *(void *)&v120, HIDWORD(v334), *(void *)&v121, v122, *(void *)&v123, HIDWORD(v333), v333, *(void *)&v130, HIDWORD(v331), v331, HIDWORD(v330), v330, v329, (__int16)v338, v303, v302, v302 - v303, *(void *)&v92, v131, v132 message];
          goto LABEL_259;
        }
      }

LABEL_275:
      objc_autoreleasePoolPop(v96);
      v141 = objc_autoreleasePoolPush();
      if (+[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance"))
      {
        uint64_t v142 = 0LL;
        v284 = v141;
        uint64_t v278 = v142;
        v143 = (void *)sub_100055194(*(void *)(a1 + 32), *(const void **)(a1 + 40));
        id v276 = [v143 objectForKey:@"LQM_SUMMARY_RX_CRS"];
        id v144 = [v143 objectForKey:@"LQM_SUMMARY_RX_PLCP"];
        id v277 = [v143 objectForKey:@"LQM_SUMMARY_RX_GOOD_PLCPS"];
        v281 = v143;
        id v145 = [v143 objectForKey:@"LQM_SUMMARY_DBG_LOG_LIST"];
        __int128 values = 0u;
        __int128 v343 = 0u;
        __int128 v344 = 0u;
        __int128 v345 = 0u;
        id v146 = [v145 countByEnumeratingWithState:&values objects:&keys count:16];
        if (v146)
        {
          id v147 = v146;
          uint64_t v148 = *(void *)v343;
          do
          {
            for (CFIndex i = 0LL; i != v147; CFIndex i = (char *)i + 1)
            {
              if (*(void *)v343 != v148) {
                objc_enumerationMutation(v145);
              }
              uint64_t v150 = *(void *)(*((void *)&values + 1) + 8LL * (void)i);
              v151 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:4, "LQM-WiFi: %@\n", v150 message];
              }
              objc_autoreleasePoolPop(v151);
            }

            id v147 = [v145 countByEnumeratingWithState:&values objects:&keys count:16];
          }

          while (v147);
        }

        id v152 = [[WiFiUsageLQMUserSample alloc] initWithInterfaceName:*(void *)(v293 + 40)];
        *(void *)(v293 + 3192) = v152;
        uint64_t v153 = 0x7FFFFFFFFFFFFFFFLL;
        if (v313) {
          uint64_t v154 = v305;
        }
        else {
          uint64_t v154 = 0x7FFFFFFFFFFFFFFFLL;
        }
        uint64_t v155 = v304;
        if (!v313) {
          uint64_t v155 = 0x7FFFFFFFFFFFFFFFLL;
        }
        uint64_t v271 = v155;
        uint64_t v272 = v154;
        uint64_t v274 = (__int16)v338;
        uint64_t v275 = (int)v339;
        uint64_t v156 = v303;
        if (!v312) {
          uint64_t v156 = 0x7FFFFFFFFFFFFFFFLL;
        }
        uint64_t v273 = v156;
        uint64_t v157 = v302;
        if (!v312) {
          uint64_t v157 = 0x7FFFFFFFFFFFFFFFLL;
        }
        uint64_t v270 = v157;
        uint64_t v158 = SHIWORD(v338);
        uint64_t v159 = (char)v337;
        uint64_t v160 = SHIBYTE(v336);
        uint64_t v161 = (char)v336;
        uint64_t v162 = SHIBYTE(v337);
        if (v276) {
          uint64_t v153 = (uint64_t)[v276 unsignedIntegerValue];
        }
        if (v144) {
          uint64_t v163 = (uint64_t)[v144 unsignedIntegerValue];
        }
        else {
          uint64_t v163 = 0x7FFFFFFFFFFFFFFFLL;
        }
        if (v277) {
          uint64_t v164 = (uint64_t)[v277 unsignedIntegerValue];
        }
        else {
          uint64_t v164 = 0x7FFFFFFFFFFFFFFFLL;
        }
        uint64_t v265 = v153;
        a1 = v293;
        [v152 populateWithRssi:v275 rssi0:v272 rssi1:v271 rssiMode:v286 noise:v274 noise0:v273 noise1:v270 snr:v158 selfCca:v159 otherCca:v160 interference:v161 totalReportedCca:v162 b eaconPer:v278 rxCrsGlitch:v265 rxBadPLCP:v163 rxStart:v164 rxBphyCrsGlitch:0x7FFFFFFFFFFFFFFFLL rxBphyBadPLCP:0x7FFFFFFFFFFFFFFFLL sampleDuration:(unint64_t)*(double *)(v293 + 96)];
        [*(id *)(v293 + 3192) populateWithTxFrames:SHIDWORD(v334) RxFrames:SHIDWORD(v333) TxFails:v335 TxRetries:(int)v334 RxRetries:(int)v333 TxRate:SHIDWORD(v331) RxRate:(int)v331 txRTS:0x7FFFFFFFFFFFFFFFLL txRTSFail:0x7FFFFFFFFFFFFFFFLL txMpdu:0x7FFFFFFFFFFFFFFFLL txAMPDU:0x7FFFFFFFFFFFFFFFLL];
        int v165 = sub_1000F46D0();
        [*(id *)(v293 + 3192) populateWithMotionState:sub_10008FDAC(*(_DWORD *)(v293 + 2768)) andAppState:v165 & 0xFFFFFF];
        if (v306 && CFArrayGetCount((CFArrayRef)v306) >= 1)
        {
          CFIndex v166 = 0LL;
          uint64_t v167 = v293 + 3040;
          do
          {
            v168 = *(void **)(v293 + 3192);
            __int128 v169 = *(_OWORD *)(v167 + 16);
            v297[0] = *(_OWORD *)v167;
            v297[1] = v169;
            uint64_t v298 = *(void *)(v167 + 32);
            [v168 populateWithPerMLOLinkStats:v297];
            ++v166;
            v167 += 40LL;
          }

          while (CFArrayGetCount((CFArrayRef)v306) > v166);
        }

        a3 = v292;
        v48 = v290;
        v141 = v284;
      }

      objc_autoreleasePoolPop(v141);
      goto LABEL_311;
    }

    v249 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: CFDictionaryCreateMutableCopy failed",  "__WiFiLQAMgrAddLQMEntry");
    }
  }

  else
  {
    v249 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: LQM table is NULL",  "__WiFiLQAMgrAddLQMEntry");
    }
  }

  objc_autoreleasePoolPop(v249);
LABEL_374:
  v187 = *(const __CFArray **)(a1 + 24);
  if (!v187)
  {
    v251 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: LQM table is NULL",  "__WiFiLQAMgrAddRSSIHistory");
    }
    goto LABEL_540;
  }

  if (!CFArrayGetCount(v187))
  {
    v251 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: LQM table is empty", "__WiFiLQAMgrAddRSSIHistory");
    }
    goto LABEL_540;
  }

  v188 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0LL);
  if (!v188)
  {
    v251 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: Latest LQM Report is NULL",  "__WiFiLQAMgrAddRSSIHistory");
    }
LABEL_540:
    objc_autoreleasePoolPop(v251);
    goto LABEL_384;
  }

  v189 = v188;
  v190 = CFDictionaryGetValue(v188, @"RSSI");
  if (v190)
  {
    v191 = v190;
    v192 = CFDictionaryGetValue(v189, @"LQMTIMESTAMP");
    if (v192)
    {
      v193 = v192;
      CFNumberRef v194 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 2768));
      if (v194)
      {
        CFNumberRef v195 = v194;
        __int128 keys = *(_OWORD *)off_1001E2CF8;
        *(void *)&__int128 v341 = @"motion-state";
        *(void *)&__int128 values = v193;
        *((void *)&values + 1) = v191;
        *(void *)&__int128 v343 = v194;
        CFDictionaryRef v196 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)&keys,  (const void **)&values,  3LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 256), 0LL, v196);
        int v197 = CFArrayGetCount(*(CFArrayRef *)(a1 + 256));
        if (v197 >= 21)
        {
          do
          {
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 256), (v197 - 1));
            int v197 = CFArrayGetCount(*(CFArrayRef *)(a1 + 256));
          }

          while (v197 > 20);
        }

        CFRelease(v195);
        if (v196) {
          CFRelease(v196);
        }
      }

      else
      {
        v254 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQAManager: failed to allocate motionStateRef!",  "__WiFiLQAMgrAddRSSIHistory");
        }
        objc_autoreleasePoolPop(v254);
        a1 = v293;
      }
    }
  }

LABEL_384:
  if (+[WiFiAIRAgent sharedInstance](&OBJC_CLASS___WiFiAIRAgent, "sharedInstance")
    && -[WiFiAIRAgent isInterfaceRankingInProgress]( +[WiFiAIRAgent sharedInstance](&OBJC_CLASS___WiFiAIRAgent, "sharedInstance"),  "isInterfaceRankingInProgress"))
  {
    -[WiFiAIRAgent ingestLQMUpdate:]( +[WiFiAIRAgent sharedInstance](&OBJC_CLASS___WiFiAIRAgent, "sharedInstance"),  "ingestLQMUpdate:",  a3);
  }

  *(_BYTE *)(a1 + 50_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(void *)(a1 + 512) = 0LL;
  *(_DWORD *)(a1 + 48_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 496) = 0LL;
  *(_BYTE *)(a1 + 52_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 2800) = 0;
  *(_BYTE *)(a1 + 2816) = 0;
  if (*(void *)(a1 + 24))
  {
    if (*(void *)(a1 + 48))
    {
      int v198 = sub_1000209D8(a1);
      int v199 = sub_1000992D0(0LL);
      uint64_t v200 = 0LL;
      BOOL v201 = v198 > -66 && v199 == 2;
      int v202 = v198 + 50;
      if (!v201) {
        int v202 = v198;
      }
      while (v202 < dword_100218D08[v200 + 1] || v202 > dword_100218D08[v200])
      {
        v200 += 3LL;
        if (v200 == 18) {
          goto LABEL_397;
        }
      }

      float v10 = *(float *)&dword_100218D08[v200 + 2];
      goto LABEL_399;
    }

    v252 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: Current Network is NULL",  "__WiFiLQAMgrComputeLinkScore");
    }
  }

  else
  {
    v252 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: LQM table is NULL",  "__WiFiLQAMgrComputeLinkScore");
    }
  }

  objc_autoreleasePoolPop(v252);
LABEL_397:
  float v10 = 0.0;
LABEL_399:
  if (!*(_BYTE *)(a1 + 632))
  {
LABEL_451:
    CFNumberRef v8 = v288;
    double v7 = v289;
    goto LABEL_452;
  }

  int v203 = *(_DWORD *)(a1 + 20);
  if ((v203 - 2) < 3)
  {
    v204 = *(const __CFArray **)(a1 + 24);
    if (v204)
    {
      if (CFArrayGetCount(v204))
      {
        v205 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0LL);
        if (v205)
        {
          if (*(_BYTE *)(a1 + 2824))
          {
            int v206 = sub_1000209D8(a1);
            LODWORD(keys) = v206;
          }

          else
          {
            v210 = v205;
            int v206 = *(_DWORD *)(a1 + 2788);
            LODWORD(keys) = v206;
            if (!v206)
            {
              v211 = (const __CFNumber *)CFDictionaryGetValue(v210, @"RSSI");
              if (!v211) {
                goto LABEL_430;
              }
              CFNumberGetValue(v211, kCFNumberSInt32Type, &keys);
              int v206 = keys;
            }
          }

          if (v206 > *(_DWORD *)(a1 + 640)
            || v206 > *(_DWORD *)(a1 + 644)
            && *(double *)(a1 + 2808) != 0.0
            && CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 2808) >= 5.0)
          {
            v212 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: LQAManager: GoodLinkRssi %d +veCrossTime %.1f",  "__WiFiLQAMgrIsLinkGood",  keys,  CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 2808) + 5.0);
            }
            objc_autoreleasePoolPop(v212);
            if (!sub_100020B80(a1))
            {
              v213 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: LinkIsGood, ending Evaluation",  "WiFiLQAMgrLQMNotify");
              }
              objc_autoreleasePoolPop(v213);
              -[WiFiUsageMonitor setTdLogic_end:evalTime:rssi:roamTime:forInterface:]( +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance"),  "setTdLogic_end:evalTime:rssi:roamTime:forInterface:",  0LL,  *(int *)(a1 + 2788),  *(void *)(a1 + 40),  CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 136),  *(double *)(a1 + 192));
              *(_BYTE *)(a1 + 2785) = 0;
              *(void *)(a1 + 136) = 0LL;
              *(_BYTE *)(a1 + 392) = 0;
              *(_DWORD *)(a1 + 20) = 1;
              v214 = objc_autoreleasePoolPush();
              CFNumberRef v8 = v288;
              double v7 = v289;
              if (qword_100219F60)
              {
                uint64_t v215 = *(int *)(a1 + 20);
                else {
                  v216 = *(&off_1001E2D88 + v215);
                }
                [(id)qword_100219F60 WFLog:3, "%s: %@", "__WiFiLQAMgrSetState", v216 message];
              }

              objc_autoreleasePoolPop(v214);
              dispatch_source_set_timer( *(dispatch_source_t *)(a1 + 336),  0xFFFFFFFFFFFFFFFFLL,  0xFFFFFFFFFFFFFFFFLL,  0LL);
              dispatch_source_set_timer( *(dispatch_source_t *)(a1 + 536),  0xFFFFFFFFFFFFFFFFLL,  0xFFFFFFFFFFFFFFFFLL,  0LL);
              if (!*(_BYTE *)(a1 + 288) && &_symptom_create && (*(_DWORD *)(a1 + 16) - 1) <= 1)
              {
                uint64_t v239 = symptom_create("com.apple.wifimanager.link-quality");
                symptom_set_qualifier(v239, 0LL, 0LL);
                unint64_t v240 = sub_10001B928(*(void *)(a1 + 48));
                symptom_set_qualifier(v239, v240, 1LL);
                symptom_send(v239);
                v241 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  2,  "%s: Notified Symptoms that Bssid: %llX +ve crossed good link",  "WiFiLQAMgrLQMNotify",  v240);
                }
                objc_autoreleasePoolPop(v241);
              }

              *(_BYTE *)(a1 + 28_Block_object_dispose(va, 8) = 0;
              *(_DWORD *)(a1 + 48_Block_object_dispose(va, 8) = 0;
              *(_BYTE *)(a1 + 356) = 0;
              sub_10001BA7C(a1, *(CFTypeRef *)(a1 + 376));
              v242 = *(const void **)(a1 + 376);
              if (v242)
              {
                CFRelease(v242);
                *(void *)(a1 + 376) = 0LL;
              }

              if (sub_10001BB38(a1) && *(_BYTE *)(a1 + 177))
              {
                *(_BYTE *)(a1 + 177) = 0;
                double v243 = *(double *)(a1 + 184);
                if (v243 != 0.0) {
                  *(double *)(a1 + 192) = v11 - v243;
                }
                *(void *)(a1 + 184) = 0LL;
                sub_10003E8CC( *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(const void **)(a1 + 48),  *(_DWORD *)(a1 + 224),  0LL,  1LL,  0);
              }

              goto LABEL_452;
            }
          }

LABEL_430:
          if (!*(_BYTE *)(a1 + 288)) {
            goto LABEL_449;
          }
          v217 = *(const __CFArray **)(a1 + 24);
          if (v217)
          {
            if (CFArrayGetCount(v217))
            {
              v218 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0LL);
              if (v218)
              {
                if (*(_BYTE *)(a1 + 2824))
                {
                  int v219 = sub_1000209D8(a1);
                  LODWORD(keys) = v219;
                }

                else
                {
                  int v219 = *(_DWORD *)(a1 + 2788);
                  LODWORD(keys) = v219;
                  if (!v219)
                  {
                    v221 = (const __CFNumber *)CFDictionaryGetValue(v218, @"RSSI");
                    if (!v221) {
                      goto LABEL_449;
                    }
                    CFNumberGetValue(v221, kCFNumberSInt32Type, &keys);
                    int v219 = keys;
                  }
                }

                if (v219 > *(_DWORD *)(a1 + 644) || !&_symptom_create || (*(_DWORD *)(a1 + 16) - 1) > 1)
                {
LABEL_449:
                  *(_DWORD *)(a1 + 2820) = 1;
                  goto LABEL_451;
                }

                uint64_t v222 = symptom_create("com.apple.wifimanager.link-quality");
                symptom_set_qualifier(v222, 1LL, 0LL);
                unint64_t v223 = sub_10001B928(*(void *)(a1 + 48));
                symptom_set_qualifier(v222, v223, 1LL);
                symptom_send(v222);
                *(_BYTE *)(a1 + 28_Block_object_dispose(va, 8) = 0;
                v224 = objc_autoreleasePoolPush();
                v225 = (void *)qword_100219F60;
                if (!qword_100219F60)
                {
LABEL_448:
                  objc_autoreleasePoolPop(v224);
                  goto LABEL_449;
                }

                unint64_t v263 = v223;
                v226 = "%s: Notified Symptoms that Bssid: %llX -ve crossed poor link";
                uint64_t v227 = 2LL;
LABEL_447:
                objc_msgSend(v225, "WFLog:message:", v227, v226, "__WiFiLQAMgrSendPendingSymptomsEventIfLinkBad", v263);
                goto LABEL_448;
              }

              v224 = objc_autoreleasePoolPush();
              v225 = (void *)qword_100219F60;
              if (!qword_100219F60) {
                goto LABEL_448;
              }
              v226 = "%s, LQAManager: Latest LQM Report is NULL";
            }

            else
            {
              v224 = objc_autoreleasePoolPush();
              v225 = (void *)qword_100219F60;
              if (!qword_100219F60) {
                goto LABEL_448;
              }
              v226 = "%s: LQM table is empty";
            }
          }

          else
          {
            v224 = objc_autoreleasePoolPush();
            v225 = (void *)qword_100219F60;
            if (!qword_100219F60) {
              goto LABEL_448;
            }
            v226 = "%s, LQAManager: LQM table is NULL";
          }

          uint64_t v227 = 4LL;
          goto LABEL_447;
        }

        v255 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: Latest LQM Report is NULL",  "__WiFiLQAMgrIsLinkGood");
        }
      }

      else
      {
        v255 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: LQM table is empty", "__WiFiLQAMgrIsLinkGood");
        }
      }
    }

    else
    {
      v255 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: LQM table is NULL",  "__WiFiLQAMgrIsLinkGood");
      }
    }

    objc_autoreleasePoolPop(v255);
    goto LABEL_430;
  }

  if (v203 != 1)
  {
    v220 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Bogus state %d",  "WiFiLQAMgrLQMNotify",  *(unsigned int *)(a1 + 20));
    }
    objc_autoreleasePoolPop(v220);
    goto LABEL_451;
  }

  *(void *)(a1 + 280_Block_object_dispose(va, 8) = 0LL;
  v207 = *(const __CFArray **)(a1 + 24);
  if (!v207)
  {
    v257 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: LQM table is NULL",  "__WiFiLQAMgrIsLinkBad");
    }
    goto LABEL_571;
  }

  if (!CFArrayGetCount(v207))
  {
    v257 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: LQM table is empty", "__WiFiLQAMgrIsLinkBad");
    }
    goto LABEL_571;
  }

  v208 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0LL);
  if (!v208)
  {
    v257 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: Latest LQM Report is NULL",  "__WiFiLQAMgrIsLinkBad");
    }
LABEL_571:
    objc_autoreleasePoolPop(v257);
    goto LABEL_572;
  }

  if (*(_BYTE *)(a1 + 2824))
  {
    int v209 = sub_1000209D8(a1);
    LODWORD(keys) = v209;
  }

  else
  {
    int v209 = *(_DWORD *)(a1 + 2788);
    LODWORD(keys) = v209;
    if (!v209)
    {
      v230 = (const __CFNumber *)CFDictionaryGetValue(v208, @"RSSI");
      if (!v230) {
        goto LABEL_572;
      }
      CFNumberGetValue(v230, kCFNumberSInt32Type, &keys);
      int v209 = keys;
    }
  }

  if (v209 <= *(_DWORD *)(a1 + 644))
  {
    v231 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: LQAManager BadLinkRssi %d",  "__WiFiLQAMgrIsLinkBad",  keys);
    }
    objc_autoreleasePoolPop(v231);
    sub_100020B80(a1);
    CFNumberRef v8 = v288;
    double v7 = v289;
    if (&_symptom_create && (*(_DWORD *)(a1 + 16) - 1) <= 1)
    {
      uint64_t v232 = symptom_create("com.apple.wifimanager.link-quality");
      symptom_set_qualifier(v232, 1LL, 0LL);
      unint64_t v233 = sub_10001B928(*(void *)(a1 + 48));
      symptom_set_qualifier(v232, v233, 1LL);
      symptom_send(v232);
      v234 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  2,  "%s: Notified Symptoms that Bssid: %llX -ve crossed poor link",  "__WiFiLQAMgrIsLinkBad",  v233);
      }
      objc_autoreleasePoolPop(v234);
    }

    goto LABEL_469;
  }

  if (!sub_100020B80(a1))
  {
LABEL_572:
    *(void *)&__int128 keys = 0LL;
    *(void *)&__int128 values = 0LL;
    LODWORD(v299[0]) = 0;
    LODWORD(v297[0]) = 0;
    *(void *)(a1 + 136) = 0LL;
    int v258 = CFDictionaryGetValueIfPresent(a3, @"RXBEACONSCHED", (const void **)&values);
    uint64_t v259 = values;
    if (v258 && (void)values)
    {
      CFNumberGetValue((CFNumberRef)values, kCFNumberIntType, v297);
      uint64_t v259 = values;
    }

    if ((void)keys)
    {
      if (v259)
      {
        unint64_t v260 = *(void *)(a1 + 240) + SLODWORD(v299[0]);
        unint64_t v261 = *(void *)(a1 + 232) + SLODWORD(v297[0]);
        *(void *)(a1 + 232) = v261;
        *(void *)(a1 + 240) = v260;
        if (v261)
        {
          *(float *)&CFAbsoluteTime Current = (float)((float)((float)v260 / (float)v261) * -0.5) + 1.0;
          *(_DWORD *)(a1 + 1076) = LODWORD(Current);
          *(_DWORD *)(a1 + 1240) = LODWORD(Current);
        }
      }
    }

    goto LABEL_451;
  }

  *(_BYTE *)(a1 + 28_Block_object_dispose(va, 8) = 1;
  CFNumberRef v8 = v288;
  double v7 = v289;
LABEL_469:
  v235 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: LinkIsBad, starting Evaluation",  "WiFiLQAMgrLQMNotify");
  }
  objc_autoreleasePoolPop(v235);
  *(_DWORD *)(a1 + 20) = 2;
  v236 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    uint64_t v237 = *(int *)(a1 + 20);
    else {
      v238 = *(&off_1001E2D88 + v237);
    }
    [(id)qword_100219F60 WFLog:3, "%s: %@", "__WiFiLQAMgrSetState", v238 message];
  }

  objc_autoreleasePoolPop(v236);
  *(_DWORD *)(a1 + 48_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 2820) = 1;
LABEL_452:
  if (v8)
  {
    uint64_t v228 = *(void *)(a1 + 3192);
    if (v228)
    {
      -[WiFiUsageMonitor updateLinkQuality:forInterface:supportsLinkRecommendations:]( v8,  "updateLinkQuality:forInterface:supportsLinkRecommendations:",  v228,  *(void *)(a1 + 40),  a4,  Current);

      *(void *)(a1 + 3192) = 0LL;
    }
  }

  objc_autoreleasePoolPop(v7);
  return v10;
}

void sub_100019404(uint64_t a1, const void *a2)
{
  unsigned int valuePtr = 0;
  id v4 = +[WiFiRoamManager sharedWiFiRoamManager](&OBJC_CLASS___WiFiRoamManager, "sharedWiFiRoamManager");
  if (a1)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(const void **)(a1 + 48);
    if (a2) {
      BOOL v7 = v6 == 0LL;
    }
    else {
      BOOL v7 = 1;
    }
    uint64_t v8 = !v7;
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
    }

    *(_BYTE *)(a1 + 592) = 0;
    if (a2)
    {
      *(void *)(a1 + 4_Block_object_dispose(va, 8) = CFRetain(a2);
      __int128 v9 = *(uint64_t (**)(uint64_t, const void *, void))(a1 + 560);
      if (v9) {
        int v10 = v9(a1, a2, *(void *)(a1 + 568));
      }
      else {
        int v10 = 0;
      }
      *(_DWORD *)(a1 + 224) = v10;
      uint64_t v12 = (const __CFNumber *)sub_100096A74((uint64_t)a2);
      if (v12) {
        CFNumberGetValue(v12, kCFNumberSInt32Type, &valuePtr);
      }
      uint64_t v13 = sub_1000992D0((uint64_t)a2);
      uint64_t v14 = v13;
      if (v5) {
        [v5 setLinkUpWithBSSEnvironment:*(int *)(a1 + 224) band:v13 roam:v8 inCharging:*(_BYTE *)(a1 + 2784) != 0 motionState:*(unsigned int *)(a1 + 2768)];
      }
      if ((_DWORD)v14 == 1 && *(_DWORD *)(a1 + 224) > 2u)
      {
        *(_BYTE *)(a1 + 2836) = 1;
        *(_DWORD *)(a1 + 2832) |= 1u;
        *(_DWORD *)(a1 + 282_Block_object_dispose(va, 8) = sub_100096BF4((uint64_t)a2, @"RSSI");
        uint64_t v15 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Reassoc Needed. linkUpRssi (%d) Current band (%d) Env (%d) ",  *(unsigned int *)(a1 + 2828),  v14,  *(unsigned int *)(a1 + 224));
        }
        objc_autoreleasePoolPop(v15);
      }

      else
      {
        *(_BYTE *)(a1 + 2836) = 0;
      }

      uint64_t v16 = objc_autoreleasePoolPush();
      *(_DWORD *)(a1 + 56) = 0;
      uint64_t v17 = *(void *)(a1 + 48);
      if (v17)
      {
        CFTypeRef v18 = sub_1000951FC(v17, @"BSSID");
        uint64_t v19 = sub_100095BC8(*(const void **)(a1 + 48));
        if (+[WiFiAnalyticsManager sharedWiFiAnalyticsManager]( &OBJC_CLASS___WiFiAnalyticsManager,  "sharedWiFiAnalyticsManager")
          && objc_msgSend( +[WiFiAnalyticsManager sharedWiFiAnalyticsManager]( WiFiAnalyticsManager,  "sharedWiFiAnalyticsManager"),  "deviceAnalyticsClient"))
        {
          *(_DWORD *)(a1 + 56) = objc_msgSend( objc_msgSend( +[WiFiAnalyticsManager sharedWiFiAnalyticsManager]( WiFiAnalyticsManager,  "sharedWiFiAnalyticsManager"),  "deviceAnalyticsClient"),  "autoLeaveRssiForBSS:ssid:",  v18,  v19);
        }

        if ((v8 & 1) == 0)
        {
          if (_os_feature_enabled_impl("WiFiManager", "ColocatedScopeTransition"))
          {
            id v20 = objc_msgSend( +[WiFiAnalyticsManager sharedWiFiAnalyticsManager]( WiFiAnalyticsManager,  "sharedWiFiAnalyticsManager"),  "copyColocatedScopeIdForNetwork:",  *(void *)(a1 + 48));
            if (v20)
            {
              uint64_t v21 = v20;
              CFNumberRef v22 = *(const void **)(a1 + 608);
              if (v22)
              {
                CFRelease(v22);
                *(void *)(a1 + 60_Block_object_dispose(va, 8) = 0LL;
              }

              id v23 = objc_msgSend( +[WiFiAnalyticsManager sharedWiFiAnalyticsManager]( WiFiAnalyticsManager,  "sharedWiFiAnalyticsManager"),  "copyAllStoredNetworkSsidsWithColocatedScopeId:",  v21);
              if (v23)
              {
                uint64_t v24 = v23;
                if ((unint64_t)[v23 count] >= 2
                  && [v24 containsObject:v19])
                {
                  *(void *)(a1 + 600) = [v24 count];
                  *(void *)(a1 + 60_Block_object_dispose(va, 8) = v24;
                }

                else
                {
                  CFRelease(v24);
                }
              }
            }
          }
        }

        CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
        CFNumberRef v25 = Mutable;
        if (Mutable)
        {
          if (*(_DWORD *)(a1 + 56)) {
            CFStringAppendFormat(Mutable, 0LL, @" AutoLeaveRssi %d ", *(unsigned int *)(a1 + 56));
          }
          if (*(void *)(a1 + 600)) {
            CFStringAppendFormat(v25, 0LL, @" colocatedScope networks %lu ", *(void *)(a1 + 600));
          }
        }
      }

      else
      {
        CFNumberRef v25 = 0LL;
      }

      objc_autoreleasePoolPop(v16);
      __int128 v27 = objc_autoreleasePoolPush();
      CFNumberRef v28 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        if ((_DWORD)v8) {
          CFNumberRef v29 = "Roamed";
        }
        else {
          CFNumberRef v29 = "Joined";
        }
        int v30 = sub_100095BC8(a2);
        uint64_t v31 = sub_1000951FC((uint64_t)a2, @"BSSID");
        dispatch_queue_t v32 = sub_100096BF4((uint64_t)a2, @"RSSI");
        uint64_t v33 = valuePtr;
        v34 = sub_10003B2EC(*(_DWORD *)(a1 + 224));
        uint64_t v35 = &stru_1001EB6E0;
        if (v25) {
          uint64_t v35 = v25;
        }
        [v28 WFLog:3, "%s: %s SSID: %@ BSSID: %@ RSSI: %ld Chan: %d ApEnv: %@(%d) %@", "__WiFiLQAMgrSetCurrentNetwork", v29, v30, v31, v32, v33, v34, *(unsigned int *)(a1 + 224), v35 message];
      }

      objc_autoreleasePoolPop(v27);
      if (v25) {
        CFRelease(v25);
      }
    }

    else
    {
      *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
      *(_DWORD *)(a1 + 224) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      *(_BYTE *)(a1 + 2836) = 0;
      *(void *)(a1 + 282_Block_object_dispose(va, 8) = 0LL;
      if (v5)
      {
        [v5 setIpAddrAssigned:0];
        [v5 setLinkDown];
      }

      *(void *)(a1 + 600) = 0LL;
      double v11 = *(const void **)(a1 + 608);
      if (v11)
      {
        CFRelease(v11);
        *(void *)(a1 + 60_Block_object_dispose(va, 8) = 0LL;
      }
    }

    *(_DWORD *)(a1 + 1076) = 1061997773;
    *(_DWORD *)(a1 + 1240) = 1061997773;
    *(void *)(a1 + 232) = 0LL;
    *(void *)(a1 + 240) = 0LL;
  }

uint64_t sub_100019814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v229 = 0;
  int v228 = 0;
  __int16 v227 = 0;
  memset(v226, 0, sizeof(v226));
  if (!a1)
  {
    int v10 = objc_autoreleasePoolPush();
    double v11 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_11;
    }
    uint64_t v12 = "%s: LQAMgrRef is null";
    goto LABEL_157;
  }

  if (!*(_BYTE *)(a1 + 632))
  {
    int v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  2,  "%s: LQA is disabled",  "__WiFiLQAMgrCheckTriggerDisconnect",  *(void *)&v192);
    }
    goto LABEL_11;
  }

  int v4 = *(_DWORD *)(a1 + 20);
  if (v4 == 1)
  {
    int v10 = objc_autoreleasePoolPush();
    double v11 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_11;
    }
    uint64_t v12 = "%s: Trigger Disconnect check in GoodLinkState";
    goto LABEL_157;
  }

  if (!v4)
  {
    int v10 = objc_autoreleasePoolPush();
    double v11 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_11;
    }
    uint64_t v12 = "%s: Trigger Disconnect check in UnassociatedState";
    goto LABEL_157;
  }

  int v7 = *(_DWORD *)(a1 + 16);
  int v8 = *(unsigned __int8 *)(a1 + 633);
  *(_BYTE *)(a1 + 2785) = 0;
  if (!*(_BYTE *)(a1 + 2824) && *(_BYTE *)(a1 + 221) && !(*(unsigned __int8 *)(a1 + 634) | v8))
  {
    int v10 = objc_autoreleasePoolPush();
    double v11 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_11;
    }
    uint64_t v12 = "%s: Better inf not available";
    goto LABEL_9;
  }

  double Current = CFAbsoluteTimeGetCurrent();
  if (*(_BYTE *)(a1 + 161))
  {
    int v10 = objc_autoreleasePoolPush();
    double v11 = (void *)qword_100219F60;
    if (!qword_100219F60)
    {
LABEL_11:
      objc_autoreleasePoolPop(v10);
      goto LABEL_12;
    }

    uint64_t v12 = "%s Wait for callback";
    goto LABEL_9;
  }

  double v16 = Current;
  -[WiFiUsageMonitor addTriggerDisconnectEvent:isAlerted:isConfirmed:isExecuted:]( +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance"),  "addTriggerDisconnectEvent:isAlerted:isConfirmed:isExecuted:",  *(void *)(a1 + 40),  1LL,  0LL,  0LL);
  -[WiFiUsageMonitor setTdLogic_alertedBy:forInterface:]( +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance"),  "setTdLogic_alertedBy:forInterface:",  *(unsigned int *)(a1 + 2820),  *(void *)(a1 + 40));
  *(_BYTE *)(a1 + 176) = 0;
  double v17 = *(double *)(a1 + 64);
  if (v17 == 0.0) {
    double v18 = 0.0;
  }
  else {
    double v18 = v16 - v17;
  }
  if (!sub_100020B80(a1) && *(double *)(a1 + 64) != 0.0 && v18 <= *(double *)(a1 + 680))
  {
    int v10 = objc_autoreleasePoolPush();
    double v11 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_11;
    }
    double v192 = v18;
    uint64_t v12 = "%s: Bypassed, Link established just before %2.2f secs";
    goto LABEL_9;
  }

  double v19 = *(double *)(a1 + 80);
  if (v19 == 0.0) {
    double v20 = 0.0;
  }
  else {
    double v20 = v16 - v19;
  }
  if (!sub_100020B80(a1) && *(double *)(a1 + 80) != 0.0 && v20 <= *(double *)(a1 + 672))
  {
    int v10 = objc_autoreleasePoolPush();
    double v11 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_11;
    }
    double v192 = v20;
    uint64_t v12 = "%s: Bypassed, System woke up before %2.2f secs";
LABEL_9:
    uint64_t v13 = 3LL;
LABEL_10:
    objc_msgSend(v11, "WFLog:message:", v13, v12, "__WiFiLQAMgrCheckTriggerDisconnect", *(void *)&v192);
    goto LABEL_11;
  }

  int v193 = sub_10001BB38(a1);
  int v198 = v7;
  if (!CFArrayGetCount(*(CFArrayRef *)(a1 + 24))) {
    goto LABEL_130;
  }
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0LL);
  if (!ValueAtIndex) {
    goto LABEL_130;
  }
  CFNumberRef v22 = ValueAtIndex;
  uint64_t v230 = 0LL;
  *(void *)v231 = 0LL;
  double valuePtr = 0.0;
  if (!*(_BYTE *)(a1 + 637) || !*(_BYTE *)(a1 + 638)) {
    goto LABEL_55;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrLqmSampleLocalTimestamp");
  if (!Value)
  {
    int v185 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s LqmSampleLocalTimestamp numberRef is NULL!",  "__WiFiLQAMgrCheckForPossibleRoam");
    }
    goto LABEL_502;
  }

  CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
  if (valuePtr == 0.0)
  {
    int v185 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s sampleTimestamp is NULL!",  "__WiFiLQAMgrCheckForPossibleRoam");
    }
LABEL_502:
    objc_autoreleasePoolPop(v185);
    goto LABEL_55;
  }

  id v24 = +[WiFiRoamManager sharedWiFiRoamManager](&OBJC_CLASS___WiFiRoamManager, "sharedWiFiRoamManager", valuePtr);
  CFNumberRef v25 = v24;
  if (!v24) {
    goto LABEL_525;
  }
  [v24 roamScanEndTimestamp];
  if (v26 == 0.0 || v26 < valuePtr) {
    goto LABEL_525;
  }
  __int128 v27 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s Using roam state from WiFiRoamManager",  "__WiFiLQAMgrCheckForPossibleRoam");
  }
  objc_autoreleasePoolPop(v27);
  CFNumberRef v28 = (const __CFDictionary *)[v25 roamState];
  if (!v28)
  {
LABEL_525:
    CFNumberRef v28 = (const __CFDictionary *)CFDictionaryGetValue(v22, @"ROAM_STATE");
    if (!v28) {
      goto LABEL_55;
    }
  }

  CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v28, @"ROAM_SCAN_COUNT");
  if (!v29) {
    goto LABEL_55;
  }
  CFNumberGetValue(v29, kCFNumberIntType, v231);
  if (!v231[0]) {
    goto LABEL_55;
  }
  int v30 = (const __CFNumber *)CFDictionaryGetValue(v28, @"ROAM_SCAN_AGE");
  if (!v30) {
    goto LABEL_55;
  }
  CFNumberGetValue(v30, kCFNumberIntType, &v231[1]);
  if (v231[0] && v231[1] < 2000)
  {
LABEL_44:
    char v31 = 0;
    goto LABEL_56;
  }

  if (v231[0] && v231[1] > 10000)
  {
LABEL_55:
    char v31 = 1;
    goto LABEL_56;
  }

  contextb = v22;
  uint64_t v157 = a3;
  uint64_t v158 = (const __CFNumber *)CFDictionaryGetValue(v28, @"RSSI");
  if (!v158)
  {
LABEL_522:
    char v31 = 1;
    a3 = v157;
    CFNumberRef v22 = contextb;
    goto LABEL_56;
  }

  CFNumberGetValue(v158, kCFNumberIntType, (char *)&v230 + 4);
  uint64_t v159 = (const __CFArray *)CFDictionaryGetValue(v28, @"ROAM_CACHE");
  if (v159)
  {
    uint64_t v160 = v159;
    int Count = CFArrayGetCount(v159);
    if (Count >= 1)
    {
      CFIndex v162 = 0LL;
      CFIndex v163 = Count;
      uint64_t v164 = Count;
      BOOL v165 = 1;
      while (1)
      {
        CFIndex v166 = (const __CFDictionary *)CFArrayGetValueAtIndex(v160, v162);
        if (!v166) {
          break;
        }
        uint64_t v167 = (const __CFNumber *)CFDictionaryGetValue(v166, @"RSSI");
        if (!v167)
        {
          v190 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: roamCandidateRssi is NULL!",  "__WiFiLQAMgrCheckForPossibleRoam");
          }
          goto LABEL_521;
        }

        CFNumberGetValue(v167, kCFNumberIntType, &v230);
        if ((int)v230 >= -89)
        {
          if ((int)v230 - HIDWORD(v230) >= 5)
          {
            double v168 = *(double *)(a1 + 184);
            if (v168 == 0.0)
            {
              double v170 = 0.0;
            }

            else
            {
              CFAbsoluteTime v169 = CFAbsoluteTimeGetCurrent();
              double v168 = *(double *)(a1 + 184);
              double v170 = v169 - v168;
            }

            if (v168 == 0.0) {
              goto LABEL_483;
            }
            if (*(_BYTE *)(a1 + 177) && v170 < 5.0)
            {
              if (!v165) {
                goto LABEL_409;
              }
LABEL_483:
              char v31 = 1;
              goto LABEL_410;
            }
          }
        }

        BOOL v165 = ++v162 < v163;
        if (v164 == v162) {
          goto LABEL_409;
        }
      }

      v190 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: roamCandidateDictRef is NULL!",  "__WiFiLQAMgrCheckForPossibleRoam");
      }
LABEL_521:
      objc_autoreleasePoolPop(v190);
      goto LABEL_522;
    }
  }

LABEL_409:
  char v31 = 0;
LABEL_410:
  a3 = v157;
  CFNumberRef v22 = contextb;
  if (v25 && [v25 isLastRoamDueToBeaconLost])
  {
    double v171 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: latest roam was due to beacon lost, skip waiting for roam for trigger disconnect",  "__WiFiLQAMgrCheckForPossibleRoam");
    }
    objc_autoreleasePoolPop(v171);
    goto LABEL_44;
  }

LABEL_56:
  LOBYTE(v227) = v31;
  uint64_t v213 = *(unsigned __int8 *)(a1 + 248);
  LODWORD(valuePtr) = 0;
  uint64_t v230 = 0LL;
  *(void *)v231 = 0LL;
  char v32 = *(_BYTE *)(a1 + 637);
  if (!v32) {
    goto LABEL_129;
  }
  char v32 = *(_BYTE *)(a1 + 638);
  if (!v32) {
    goto LABEL_129;
  }
  int v33 = CFArrayGetCount(*(CFArrayRef *)(a1 + 256));
  if (v33 <= 3)
  {
    v186 = objc_autoreleasePoolPush();
    v187 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      v188 = "Insufficient samples for walk out detection";
      uint64_t v189 = 2LL;
LABEL_512:
      objc_msgSend(v187, "WFLog:message:", v189, v188, v191);
      goto LABEL_516;
    }

    goto LABEL_516;
  }

  v34 = (const __CFNumber *)CFDictionaryGetValue(v22, @"RSSI");
  if (!v34)
  {
    v186 = objc_autoreleasePoolPush();
    v187 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_516;
    }
    v191 = "__WiFiLQAMgrDetectWalkOut";
    v188 = "%s: LQAManager: rssiNumRef from lqmDict is NULL!";
LABEL_511:
    uint64_t v189 = 4LL;
    goto LABEL_512;
  }

  CFNumberGetValue(v34, kCFNumberSInt32Type, v231);
  uint64_t v35 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 256), v33 - 1);
  if (!v35)
  {
    v186 = objc_autoreleasePoolPush();
    v187 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_516;
    }
    v191 = "__WiFiLQAMgrDetectWalkOut";
    v188 = "%s: LQAManager: paramDict is NULL!";
    goto LABEL_511;
  }

  __int128 v36 = v35;
  __int128 v37 = (const __CFNumber *)CFDictionaryGetValue(v35, @"RSSI");
  if (!v37)
  {
    v186 = objc_autoreleasePoolPush();
    v187 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      v191 = "__WiFiLQAMgrDetectWalkOut";
      v188 = "%s: LQAManager: rssiNumRef is NULL!";
      goto LABEL_511;
    }

        int v10 = v29;
LABEL_5:
        objc_autoreleasePoolPop(v10);
LABEL_6:
        pthread_mutex_unlock(&stru_100218F08);
        CFRelease(*(CFTypeRef *)(a1 + 32));
        return;
    }

    objc_msgSend(v30, "WFLog:message:", 3, v31, "__WiFiLQAMgrTriggetDisconnectSymptomsCallback_block_invoke");
    goto LABEL_56;
  }

      sub_10006EF98(a3, 0, 0LL);
      goto LABEL_78;
    }

  objc_autoreleasePoolPop(v6);
}

  BOOL v62 = v30;
  char v31 = sub_1000A1C1C((uint64_t)a2);
  BOOL v61 = v31 != sub_1000A1C1C((uint64_t)v13);
  char v32 = (const __CFDate *)sub_10009E798((uint64_t)v13);
  int v33 = (const __CFDate *)sub_10009E798((uint64_t)a2);
  if (v33 && (!v32 || CFDateCompare(v32, v33, 0LL) == kCFCompareLessThan))
  {
    CFMutableStringRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    uint64_t v35 = sub_1000951FC((uint64_t)a2, @"NetworkQualityResponsiveness");
    CFDictionaryAddValue(Mutable, @"networkQualityResponsiveness", v35);
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000082LL;
    context[2] = Mutable;
    context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }

  __int128 v36 = v69 && v68;
  BOOL v70 = v18 ^ v20;
  if (v71)
  {
    sub_100095F10((uint64_t)v13, (uint64_t)a2);
    __int128 v9 = v19;
    __int128 v37 = sub_1000951FC((uint64_t)v13, @"WiFiNetworkUserAcceptedRecommendationAt");
    CFIndex v38 = sub_1000951FC((uint64_t)a2, @"WiFiNetworkUserAcceptedRecommendationAt");
    if (v37 && !v38) {
      sub_10009582C((uint64_t)v13, @"WiFiNetworkUserAcceptedRecommendationAt", 0LL);
    }
    CFRetain(v13);
    CFArrayRemoveValueAtIndex(v11, v76[0]);
    uint64_t v39 = v75;
    if (*(_DWORD *)(a1 + 312) == 4) {
      uint64_t v39 = --v75;
    }
    CFArrayInsertValueAtIndex(v11, v39, v13);
    uint64_t v40 = v67 != sub_100097324(v13);
    uint64_t v41 = sub_10009A128((uint64_t)v13);
    uint64_t v42 = v41 != sub_10009A128((uint64_t)a2);
    uint64_t v43 = (CFDictionaryRef *)sub_100094E60((uint64_t)kCFAllocatorDefault, (uint64_t)v13);
    CFRelease(v13);
  }

  else
  {
    CFArrayRemoveValueAtIndex(v11, v76[0]);
    CFArrayInsertValueAtIndex(v11, v76[0], a2);
    uint64_t v43 = (CFDictionaryRef *)sub_100094E60((uint64_t)kCFAllocatorDefault, (uint64_t)a2);
    uint64_t v40 = 0LL;
    uint64_t v42 = 0LL;
    __int128 v9 = v19;
  }

  uint64_t v44 = sub_10007332C(a1, v11);
  sub_100071D74(a1, v43, 0);
LABEL_74:
  sub_10003A310(v8, v44);

  if (!v44)
  {
    v48 = 0LL;
    if (!v43) {
      return v48;
    }
    goto LABEL_102;
  }

  if (v36)
  {
    if (&WiFiCloudSyncEngineCreate)
    {
      int v45 = *(const void **)(a1 + 1136);
      if (v45)
      {
        if (v43)
        {
          CFRetain(v45);
          CFRetain(v43);
          CFIndex v46 = (dispatch_queue_s *)qword_100219F88;
          v73[0] = _NSConcreteStackBlock;
          v73[1] = 3221225472LL;
          v73[2] = sub_100078A0C;
          v73[3] = &unk_1001E2C30;
          v73[4] = a1;
          v73[5] = v43;
          double v47 = v73;
LABEL_98:
          dispatch_async(v46, v47);
        }
      }
    }
  }

  else if (&WiFiCloudSyncEngineCreate)
  {
    CFNumberRef v49 = *(const void **)(a1 + 1136);
    if (v49)
    {
      if (v43)
      {
        CFRetain(v49);
        CFRetain(v43);
        CFIndex v46 = (dispatch_queue_s *)qword_100219F88;
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_100078A44;
        block[3] = &unk_1001E2C30;
        void block[4] = a1;
        void block[5] = v43;
        double v47 = block;
        goto LABEL_98;
      }
    }
  }

  v50 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: hiddenChanged=%d captiveChanged=%d pskToOpen=%d didLowDataModeChanged=%d didWpa3Change=%d addedAtChanged=%d us erJoinedAtChanged=%d autoJoinedAtChanged=%d, didPrivacyProxyPreferenceChange=%d autoJoinChanged=%d",  "WiFiManagerUpdateNetwork",  v40,  v66,  v36,  v65,  v70,  v64,  v63,  v62,  v61,  v42);
  }
  objc_autoreleasePoolPop(v50);
  v51 = sub_1000630EC(a1);
  sub_100061B50(v51, 2LL, a1);
  sub_1000746CC(a1, v43, 2u);
  v48 = 1LL;
  if (v43) {
LABEL_102:
  }
    CFRelease(v43);
  return v48;
}

      sub_100106AF8(a1);
      [*(id *)(a1 + 3648) setScanResultsWithAutoJoinSessionCompletion:v5 complete:0];
      sub_100107114(a1, *(const __CFArray **)(a1 + 1104));
      sub_100107114(a1, *(const __CFArray **)(a1 + 3560));
      sub_100107114(a1, *(const __CFArray **)(a1 + 3552));
      uint64_t v6 = 0LL;
LABEL_355:
      uint64_t v140 = sub_100109988((_DWORD *)a1, v6);
LABEL_312:
      *(_DWORD *)(a1 + 3272) = v140;
      if (v140 <= 1)
      {
LABEL_313:
        int v154 = off_1001E37B0;
LABEL_337:
        sub_10010D14C(a1, *v154, 0LL, 0LL);
LABEL_338:
        v51 = *(_DWORD *)(a1 + 3272);
LABEL_339:
        if (v51 <= 1)
        {
          CFIndex v163 = *(void **)(a1 + 3264);
          if (v163)
          {

            *(void *)(a1 + 3264) = 0LL;
          }

          return;
        }
      }

        uint64_t v40 = 0;
LABEL_57:
        goto LABEL_59;
      }

      __int128 v36 = objc_autoreleasePoolPush();
      __int128 v37 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        BOOL v61 = "WiFiDeviceManagerSetBackgroundScan";
        CFIndex v38 = "%s: User disabled auto join. Skip programming SSID into background scan";
        goto LABEL_48;
      }
    }

    else
    {
      __int128 v36 = objc_autoreleasePoolPush();
      __int128 v37 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        CFIndex v38 = "Device is inactive since boot. Skip programming SSID into background scan";
LABEL_48:
        objc_msgSend(v37, "WFLog:message:", 3, v38, v61);
      }
    }

    objc_autoreleasePoolPop(v36);
    uint64_t v39 = 0LL;
    uint64_t v40 = 0;
    goto LABEL_83;
  }

  char v31 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3 message:"Device NOT POWERED. Skip programming Background Scan"];
  }
  objc_autoreleasePoolPop(v31);
  int v30 = 4294963396LL;
LABEL_107:
  objc_autoreleasePoolPop(v2);
  return v30;
}

        uint64_t v12 = 0LL;
        goto LABEL_61;
      }

      if (CFEqual(v9, a2))
      {
        if ((valuePtr & 0x200000000000LL) != 0 && Count >= 1)
        {
          double v16 = 0LL;
          double v17 = 0;
          do
          {
            double v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3728), v16);
            if (v18)
            {
              double v19 = v18;
              if (CFEqual(v9, a2))
              {
                double v20 = (const __CFNumber *)sub_1000951FC((uint64_t)v19, @"CHANNEL_FLAGS");
                if (v20)
                {
                  CFNumberGetValue(v20, kCFNumberIntType, &valuePtr);
                  uint64_t v21 = sub_100095BC8(v19);
                  CFNumberRef v22 = valuePtr;
                  if ((valuePtr & 0x2000) == 0)
                  {
                    if (CFEqual(v9, v21))
                    {
                      uint64_t v14 = objc_autoreleasePoolPush();
                      if (qword_100219F60) {
                        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: same ssid is found with 6E disabled, do same ssid roaming",  "WiFiDeviceManagerNetworkTransitionAction");
                      }
                      goto LABEL_60;
                    }

                    CFNumberRef v22 = valuePtr;
                  }

                  if ((v22 & 0x2000) == 0 && !CFEqual(v9, v21)) {
                    double v17 = 1;
                  }
                }
              }
            }

            ++v16;
          }

          while (Count != v16);
          if (!v17) {
            goto LABEL_51;
          }
          id v23 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: different ssid is found with 6E disabled, do ssid transition",  "WiFiDeviceManagerNetworkTransitionAction");
          }
LABEL_48:
          objc_autoreleasePoolPop(v23);
          uint64_t v12 = 2LL;
LABEL_61:
          CFRelease(v8);
          return v12;
        }

          CFNumberRef v29 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: bssidDataRef is NULL",  "WiFiDeviceManagerSetRoam");
          }
          goto LABEL_60;
        }

        double v18 = *(const void **)(a1 + 3504);
        if (v18)
        {
          double v19 = *(const __CFArray **)(a1 + 3520);
          if (!v19) {
            goto LABEL_27;
          }
          v34.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 3520));
          v34.id location = 0LL;
          FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v19, v34, v18);
          if (FirstIndexOfValue == -1
            || (ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3520), FirstIndexOfValue)) == 0LL)
          {
            double v19 = 0LL;
          }

          else
          {
            CFNumberRef v22 = ValueAtIndex;
            double v19 = sub_10009C498((uint64_t)ValueAtIndex);
            if ((_DWORD)v19)
            {
              id v23 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:3, "Detected multiAP environment for %@", sub_100095BC8(v22) message];
              }
LABEL_25:
              objc_autoreleasePoolPop(v23);
            }
          }

LABEL_516:
    objc_autoreleasePoolPop(v186);
    char v32 = 0;
    goto LABEL_129;
  }

  context = v22;
  uint64_t v200 = a3;
  uint64_t v202 = a2;
  CFNumberGetValue(v37, kCFNumberSInt32Type, (char *)&v230 + 4);
  CFIndex v38 = (const __CFNumber *)CFDictionaryGetValue(v36, @"motion-state");
  if (!v38)
  {
    v186 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQAManager: motionStateRef is NULL!",  "__WiFiLQAMgrDetectWalkOut");
    }
    goto LABEL_516;
  }

  CFNumberGetValue(v38, kCFNumberIntType, &valuePtr);
  uint64_t v39 = 0LL;
  uint64_t v40 = 0LL;
  uint64_t v41 = 0LL;
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  uint64_t v44 = 0LL;
  int v45 = 0;
  CFIndex v46 = (v33 - 2);
  double v47 = 0.0;
  do
  {
    v48 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 256), v46);
    if (!v48)
    {
      v65 = objc_autoreleasePoolPush();
      a3 = v200;
      a2 = v202;
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQAManager: paramDict is NULL!",  "__WiFiLQAMgrDetectWalkOut");
      }
      goto LABEL_117;
    }

    CFNumberRef v49 = v48;
    v50 = (const __CFNumber *)CFDictionaryGetValue(v48, @"RSSI");
    if (!v50)
    {
      v65 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQAManager: rssiNumRef is NULL!",  "__WiFiLQAMgrDetectWalkOut");
      }
      goto LABEL_471;
    }

    CFNumberGetValue(v50, kCFNumberSInt32Type, &v230);
    v51 = (const __CFNumber *)CFDictionaryGetValue(v49, @"motion-state");
    if (!v51)
    {
      v65 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQAManager: motionStateRef is NULL!",  "__WiFiLQAMgrDetectWalkOut");
      }
LABEL_471:
      a3 = v200;
      a2 = v202;
LABEL_117:
      objc_autoreleasePoolPop(v65);
      goto LABEL_118;
    }

    CFNumberGetValue(v51, kCFNumberIntType, &v231[1]);
    int v52 = v231[1];
    int v53 = v230;
    if (LODWORD(valuePtr) != 2 || v231[1] != 2) {
      goto LABEL_110;
    }
    if ((int)v230 <= SHIDWORD(v230))
    {
      uint64_t v43 = 0LL;
      uint64_t v40 = 0LL;
      uint64_t v39 = 0LL;
      uint64_t v44 = (v44 + 1);
      if ((_DWORD)v42) {
        uint64_t v42 = v42;
      }
      else {
        uint64_t v42 = HIDWORD(v230);
      }
      uint64_t v41 = v230;
    }

    else if ((int)v230 - HIDWORD(v230) >= 2)
    {
      uint64_t v44 = 0LL;
      uint64_t v42 = 0LL;
      uint64_t v41 = 0LL;
      int v54 = 0;
      uint64_t v43 = (v43 + 1);
      if ((_DWORD)v39) {
        uint64_t v39 = v39;
      }
      else {
        uint64_t v39 = HIDWORD(v230);
      }
      uint64_t v40 = v230;
      goto LABEL_85;
    }

    int v54 = v42 - v41;
    if ((int)v44 > 2 && v54 > 11)
    {
      int v55 = 1;
      double v56 = 0.9;
      goto LABEL_97;
    }

    if ((int)v44 >= 3 && v54 > 7)
    {
      double v56 = 0.75;
      int v55 = 1;
      goto LABEL_97;
    }

LABEL_85:
    BOOL v57 = (_DWORD)v44 == 3 && (int)v42 < -80;
    int v58 = v57;
    BOOL v59 = v54 > 4;
    BOOL v60 = (v58 & v59) == 0;
    if ((v58 & v59) != 0) {
      int v55 = 1;
    }
    else {
      int v55 = v45;
    }
    if (v60) {
      double v56 = v47;
    }
    else {
      double v56 = 0.5;
    }
LABEL_97:
    BOOL v61 = (int)v43 > 2;
    BOOL v62 = (int)v40 - (int)v39 > 5;
    if (v61 && v62) {
      int v45 = 0;
    }
    else {
      int v45 = v55;
    }
    if (v61 && v62) {
      double v47 = 0.0;
    }
    else {
      double v47 = v56;
    }
    int v52 = 2;
    if ((_DWORD)v213 && v231[0] <= -70)
    {
      __int128 v63 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        CFIndex v64 = "YES";
        if (!v45) {
          CFIndex v64 = "NO";
        }
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "Walkout(%d %d): %s (%f) +veSlope{ %d %d %d } -veSlope { %d %d %d }",  v213,  HIDWORD(v230),  v64,  *(void *)&v47,  v43,  v40,  v39,  v44,  v42,  v41);
      }

      objc_autoreleasePoolPop(v63);
      int v53 = v230;
      int v52 = v231[1];
    }

  int v58 = *(const void **)(a1 + 5672);
  if (v58)
  {
    CFRelease(v58);
    *(void *)(a1 + 5672) = 0LL;
  }

  *(void *)(a1 + 472_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 4736) = 0LL;
  if (v68) {
    v68(a1, a2, v35, a4, v34, v66);
  }
  BOOL v59 = *(const void **)(a1 + 5680);
  if (v59)
  {
    CFRelease(v59);
    *(void *)(a1 + 5680) = 0LL;
  }

  *int v7 = 0;
  sub_10004F9BC(a1);
  if (v12) {
    CFRelease(v12);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v8) {
    CFRelease(v8);
  }
}

  if (*(_DWORD *)(a1 + 688)) {
    return 10LL;
  }
LABEL_87:
  *(_DWORD *)(a1 + 68_Block_object_dispose(va, 8) = 0;
  uint64_t v41 = *(double *)(a1 + 680);
  uint64_t v42 = 0.5;
  if (v41 == 0.0 || (v43 = v41 + v41, uint64_t v42 = 4.0, v43 > 4.0)) {
    uint64_t v43 = v42;
  }
  *(double *)(a1 + 680) = v43;
  uint64_t v44 = v43 - v43 * 0.1;
  int v45 = v43 + v43 * 0.1;
  CFIndex v46 = arc4random();
  double v47 = v44 + (double)(v46 + ((v46 / 0x7FFFFFFF) | ((v46 / 0x7FFFFFFF) << 31))) / 2147483650.0 * (v45 - v44);
  v48 = *(dispatch_source_s **)(a1 + 312);
  CFNumberRef v49 = dispatch_time(0LL, (uint64_t)(v47 * 1000000000.0));
  dispatch_source_set_timer(v48, v49, 0xFFFFFFFFFFFFFFFFLL, 0LL);
  v50 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    v51 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@-} %@",  @"AUTOJOIN",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s: Performing next automatic assocation in %.3f(%.3f) seconds",  "__WiFiDeviceManagerScanCarPlayRemainingChannels",  *(void *)&v47,  *(void *)(a1 + 680))),  "UTF8String"));
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      int v52 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v51, "UTF8String")),  "UTF8String");
      LODWORD(keys[0]) = 136446210;
      *(void **)((char *)keys + 4) = (void *)v52;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  (uint8_t *)keys,  0xCu);
    }
  }

  objc_autoreleasePoolPop(v50);
  return 1LL;
}

LABEL_110:
    HIDWORD(v230) = v53;
    LODWORD(valuePtr) = v52;
    BOOL v57 = v46-- <= 0;
  }

  while (!v57);
  if ((_DWORD)v213)
  {
    a3 = v200;
    a2 = v202;
    if (v45 && v231[0] <= -70)
    {
      int v45 = 1;
      sub_10003AD28(context, @"userCoverageWalkout", 1LL);
      sub_10003AD94(context, @"userCoverageWalkoutConfidenceScore", v47);
      v65 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "User Walkout detected with score %f", *(void *)&v47);
        int v45 = 1;
      }

      goto LABEL_117;
    }
  }

  else
  {
    a3 = v200;
    a2 = v202;
  }

      uint64_t v5 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: SSID is NULL!",  "WiFiDeviceManagerProcessWoWBlacklistCommandsAndCopyResponse");
      }
      goto LABEL_45;
    }

LABEL_118:
  if ((_DWORD)v213) {
    BOOL v66 = v45 == 0;
  }
  else {
    BOOL v66 = 1;
  }
  char v32 = !v66 && (int)v41 < -70;
  if (v47 < 0.5) {
    char v32 = 0;
  }
LABEL_129:
  HIBYTE(v227) = v32;
LABEL_130:
  memset(v226, 0, sizeof(v226));
  if (!sub_10001E0B4(a1, v226))
  {
    int v10 = objc_autoreleasePoolPush();
    double v11 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_11;
    }
    uint64_t v12 = "%s: Failed to extract metrics from Lqm, exiting!";
    goto LABEL_157;
  }

  int v68 = 0;
  int v69 = *(unsigned __int8 *)(a1 + 638);
  if (*(_BYTE *)(a1 + 637)) {
    BOOL v70 = v69 == 0;
  }
  else {
    BOOL v70 = 1;
  }
  uint64_t v71 = !v70;
  double v72 = *(double *)(a1 + 2776);
  if (v72 == 0.0) {
    double v73 = 0.0;
  }
  else {
    double v73 = v16 - v72;
  }
  int v74 = *(_DWORD *)(a1 + 2768);
  if (v74 != 2 || !(_DWORD)v71) {
    goto LABEL_146;
  }
  if (v73 <= *(double *)(a1 + 688))
  {
    int v68 = 0;
  }

  else
  {
    __int16 v75 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: Usr walking for %.2f secs, using aggressive TD checks", "__WiFiLQAMgrCheckTriggerDisconnect", *(void *)&v73 message];
    }
    objc_autoreleasePoolPop(v75);
    int v74 = *(_DWORD *)(a1 + 2768);
    int v68 = 1;
LABEL_146:
    if (v74 == 4) {
      int v76 = v71;
    }
    else {
      int v76 = 0;
    }
    if (v76 == 1)
    {
      if (v73 > *(double *)(a1 + 696))
      {
        unsigned __int8 v77 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:4, "%s: Usr in Automotive for %.2f secs, using aggressive TD checks", "__WiFiLQAMgrCheckTriggerDisconnect", *(void *)&v73 message];
        }
        objc_autoreleasePoolPop(v77);
        int v68 = 1;
      }

      float v78 = *(float *)(a1 + 704);
LABEL_160:
      int v79 = *(_DWORD *)(a1 + 2788);
      if (v79 <= *(_DWORD *)(a1 + 652))
      {
        float v78 = *(float *)(a1 + 712);
      }

      else if (v79 <= *(_DWORD *)(a1 + 648))
      {
        float v78 = *(float *)(a1 + 708);
      }

      if (*(_BYTE *)(a1 + 732)
        && *(int *)&v226[4] >= *(_DWORD *)(a1 + 736)
        && (float)(*(float *)(a1 + 740) * (float)*(int *)&v226[4]) <= (float)*(int *)v226
        && *(int *)&v226[8] > *(_DWORD *)(a1 + 744) * *(_DWORD *)&v226[4])
      {
        int v80 = 1;
        *(_BYTE *)(a1 + 2816) = 1;
      }

      else
      {
        int v80 = 0;
      }

      goto LABEL_171;
    }
  }

  float v78 = *(float *)(a1 + 704);
  if ((v71 & 1) != 0) {
    goto LABEL_160;
  }
  int v80 = 0;
  int v79 = *(_DWORD *)(a1 + 2788);
LABEL_171:
  uint64_t v81 = 0LL;
  int v82 = v71 ^ 1;
  int v83 = *(_DWORD *)(a1 + 648);
  if (v79 <= v83) {
    char v84 = v71;
  }
  else {
    char v84 = 0;
  }
  float v85 = (float)*(int *)v226;
  int v86 = *(_DWORD *)&v226[4];
  float v87 = (float)*(int *)&v226[4];
  uint64_t v88 = -64LL;
  while (2)
  {
    if ((v84 & 1) != 0)
    {
      uint64_t v89 = a1 + 16 * v81;
      uint64_t v90 = v89 + 1088;
      uint64_t v91 = v89 + 924;
      if (v79 <= *(_DWORD *)(a1 + 652)) {
        uint64_t v91 = v90;
      }
    }

    else
    {
      uint64_t v91 = a1 + v88 + 780;
    }

    uint64_t v92 = a1 + v88 + 1152;
    if (v79 > v83) {
      uint64_t v92 = v91;
    }
    if (v68) {
      uint64_t v91 = v92;
    }
    if (*(_BYTE *)v91
      && *(int *)&v226[4] >= *(_DWORD *)(v91 + 4)
      && (float)(*(float *)(v91 + 8) * v87) <= v85
      && *(int *)&v226[8] > *(_DWORD *)(v91 + 12) * *(_DWORD *)&v226[4])
    {
      int v80 = 1;
      if ((v71 & 1) != 0) {
        goto LABEL_190;
      }
LABEL_203:
      int v93 = 0;
      BOOL v94 = v79 > v83;
LABEL_204:
      uint64_t v95 = a1 + 860;
      int v96 = 1;
      goto LABEL_205;
    }

    ++v81;
    v88 += 16LL;
    if (v88) {
      continue;
    }
    break;
  }

  if ((v71 & 1) == 0) {
    goto LABEL_203;
  }
LABEL_190:
  if (*(_BYTE *)(a1 + 860)
    && *(int *)&v226[28] > *(_DWORD *)(a1 + 864)
    && (float)((float)(1.0 - *(float *)(a1 + 868)) * (float)*(int *)&v226[28]) > (float)*(int *)&v226[32]
    && (*(int *)&v226[4] < *(_DWORD *)(a1 + 872) || (float)(*(float *)(a1 + 876) * v87) <= v85))
  {
    int v93 = 1;
    *(_BYTE *)(a1 + 2816) = 1;
  }

  else
  {
    int v93 = 0;
  }

  BOOL v57 = v79 <= v83;
  BOOL v94 = v79 > v83;
  if (!v57) {
    int v82 = 1;
  }
  if (v82 == 1) {
    goto LABEL_204;
  }
  uint64_t v95 = a1 + 1232;
  int v96 = 0;
  BOOL v94 = 0;
  if (v79 > *(_DWORD *)(a1 + 652)) {
    uint64_t v95 = a1 + 1068;
  }
LABEL_205:
  if (!v68) {
    BOOL v94 = 1;
  }
  if (!v94) {
    uint64_t v95 = a1 + 1232;
  }
  if (*(_BYTE *)v95
    && *(int *)&v226[28] > *(_DWORD *)(v95 + 4)
    && (float)((float)(1.0 - *(float *)(v95 + 8)) * (float)*(int *)&v226[28]) > (float)*(int *)&v226[32]
    && (v86 < *(_DWORD *)(v95 + 12) || (float)(*(float *)(v95 + 16) * v87) <= v85))
  {
    int v93 = 1;
  }

  if ((_DWORD)v71
    && *(_BYTE *)(a1 + 780)
    && *(int *)&v226[20] >= *(_DWORD *)(a1 + 784)
    && (float)(*(float *)(a1 + 788) * (float)*(int *)&v226[20]) <= (float)*(int *)&v226[16]
    && (v86 < *(_DWORD *)(a1 + 792) || (float)(*(float *)(a1 + 796) * v87) <= v85))
  {
    int v206 = 1;
    *(_BYTE *)(a1 + 2816) = 1;
  }

  else
  {
    int v206 = 0;
  }

  uint64_t v97 = 0LL;
  uint64_t v98 = -80LL;
  while (1)
  {
    if (v96)
    {
      uint64_t v99 = a1 + v98 + 860;
    }

    else
    {
      uint64_t v99 = a1 + 20 * v97 + 1152;
      if (v79 > *(_DWORD *)(a1 + 652)) {
        uint64_t v99 = a1 + 20 * v97 + 988;
      }
    }

    if (!v94) {
      uint64_t v99 = a1 + v98 + 1232;
    }
    if (*(_BYTE *)v99
      && *(int *)&v226[20] >= *(_DWORD *)(v99 + 4)
      && (float)(*(float *)(v99 + 8) * (float)*(int *)&v226[20]) <= (float)*(int *)&v226[16]
      && (v86 < *(_DWORD *)(v99 + 12) || (float)(*(float *)(v99 + 16) * v87) <= v85))
    {
      break;
    }

    ++v97;
    v98 += 20LL;
    if (!v98) {
      goto LABEL_235;
    }
  }

  int v206 = 1;
LABEL_235:
  double v100 = 0.0;
  if (*(_DWORD *)(a1 + 2752) == 1) {
    double v100 = v16 - *(double *)(a1 + 2760);
  }
  if (*(_BYTE *)(a1 + 896) && v100 >= *(double *)(a1 + 904))
  {
    int v214 = 1;
    *(_BYTE *)(a1 + 2816) = 1;
  }

  else
  {
    int v214 = 0;
  }

  if (*(_BYTE *)(a1 + 912) && *(_DWORD *)(a1 + 488) >= *(_DWORD *)(a1 + 916))
  {
    int v207 = 1;
    *(_BYTE *)(a1 + 2816) = 1;
  }

  else
  {
    int v207 = 0;
  }

  uint64_t v196 = *(int *)(a1 + 56);
  if (!(_DWORD)v196)
  {
    if (!*(_BYTE *)(a1 + 880))
    {
      unsigned int v208 = 0;
      goto LABEL_265;
    }

    goto LABEL_260;
  }

  LODWORD(valuePtr) = 0;
  double v101 = *(const __CFArray **)(a1 + 24);
  if (!v101)
  {
    int v10 = objc_autoreleasePoolPush();
    double v11 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_11;
    }
    uint64_t v12 = "%s, LQAManager: LQM table is NULL";
    goto LABEL_157;
  }

  if (!CFArrayGetCount(v101))
  {
    int v10 = objc_autoreleasePoolPush();
    double v11 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_11;
    }
    uint64_t v12 = "%s: LQM table is empty";
    goto LABEL_157;
  }

  uint64_t v102 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0LL);
  if (!v102)
  {
    int v10 = objc_autoreleasePoolPush();
    double v11 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_11;
    }
    uint64_t v12 = "%s, LQAManager: Latest LQM Report is NULL";
LABEL_157:
    uint64_t v13 = 4LL;
    goto LABEL_10;
  }

  if (*(_BYTE *)(a1 + 2824))
  {
    int v103 = sub_1000209D8(a1);
    goto LABEL_256;
  }

  v104 = v102;
  int v103 = *(_DWORD *)(a1 + 2788);
  LODWORD(valuePtr) = v103;
  if (v103)
  {
LABEL_256:
    int v106 = *(_DWORD *)(a1 + 56);
    if (!*(_BYTE *)(a1 + 880))
    {
      unsigned int v208 = v106 >= v103;
      goto LABEL_265;
    }

    if (v106 >= v103)
    {
      unsigned int v208 = 1;
      if (!a2)
      {
        int contexta = 0;
        goto LABEL_273;
      }

  *(double *)(a1 + 40) = v9;
  sub_100134140(a1);
  return a2;
}

LABEL_262:
      goto LABEL_265;
    }

LABEL_260:
    unsigned int v208 = 0;
    if (a2 && *(_BYTE *)(a1 + 358)) {
      goto LABEL_262;
    }
LABEL_265:
    int contexta = 0;
    if (!a2 || !*(_BYTE *)(a1 + 635)) {
      goto LABEL_273;
    }
    v107 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Simulating probe failure decision",  "__WiFiLQAMgrCheckTriggerDisconnect");
    }
    objc_autoreleasePoolPop(v107);
LABEL_270:
    v108 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s autoLeaveDecision:%d probesSent:%ld probesFailed:%ld",  "__WiFiLQAMgrCheckTriggerDisconnect",  v208,  a2,  a3);
    }
    objc_autoreleasePoolPop(v108);
    int contexta = 1;
LABEL_273:
    BOOL v109 = sub_100020DA0(a1, &v227, (_BYTE *)&v227 + 1);
    unsigned int v110 = v93 | v80 | v206 | v214;
    if (v208) {
      unsigned int v110 = 1;
    }
    int v205 = v109;
    if (v109) {
      uint64_t v14 = 1LL;
    }
    else {
      uint64_t v14 = v110;
    }
    int v111 = *(_DWORD *)(a1 + 16);
    char v201 = a3;
    char v203 = a2;
    uint64_t v194 = v71;
    int v195 = v69;
    int v204 = v93;
    if (v111)
    {
      if (v111 == 2)
      {
        if ((contexta & 1) != 0)
        {
          uint64_t v14 = 1LL;
        }

        else if (*(_BYTE *)(a1 + 358))
        {
          uint64_t v14 = 0LL;
        }

        else
        {
          uint64_t v14 = v14;
        }
      }

      else if (v111 == 1)
      {
        uint64_t v14 = v207 | v14;
      }

      else
      {
        uint64_t v14 = v109 || v208 != 0;
      }
    }

    int v197 = HIBYTE(v227);
    BOOL v112 = HIBYTE(v227) != 0;
    if ((_BYTE)v227) {
      int v113 = v14;
    }
    else {
      int v113 = 0;
    }
    BOOL v114 = *(_BYTE *)(a1 + 248) != 0;
    BOOL v115 = (*(void *)(a1 + 168) & 0x11LL) != 0;
    BOOL v116 = *(_BYTE *)(a1 + 633) != 0;
    -[WiFiUsageMonitor addTriggerDisconnectEvent:isAlerted:isConfirmed:isExecuted:]( +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance"),  "addTriggerDisconnectEvent:isAlerted:isConfirmed:isExecuted:",  *(void *)(a1 + 40),  0LL,  v14,  0LL);
    v117 = +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance");
    uint64_t v118 = *(void *)(a1 + 40);
    LOBYTE(valuePtr) = v80;
    BYTE1(valuePtr) = v204;
    BYTE2(valuePtr) = v206;
    BYTE3(valuePtr) = v214;
    BYTE4(valuePtr) = v207;
    BYTE5(valuePtr) = v208;
    BYTE6(valuePtr) = contexta;
    HIBYTE(valuePtr) = v205;
    int v216 = v198;
    char v217 = v68;
    BOOL v218 = v112;
    int v199 = v113;
    char v219 = v113;
    BOOL v220 = v114;
    BOOL v221 = v115;
    BOOL v222 = v116;
    int v223 = v228;
    __int16 v224 = v229;
    uint64_t v225 = v196;
    -[WiFiUsageMonitor setTdLogic_decisionState:forInterface:]( v117,  "setTdLogic_decisionState:forInterface:",  &valuePtr,  v118);
    if ((_DWORD)v14)
    {
      uint64_t v119 = *(void (**)(void, void))(a1 + 616);
      if (v119) {
        v119(*(void *)(a1 + 624), 0LL);
      }
    }

    char v120 = HIBYTE(v227);
    *(_BYTE *)(a1 + 273) = HIBYTE(v227);
    char v121 = v227;
    *(_BYTE *)(a1 + 272) = v227;
    if (v207) {
      int v122 = 16;
    }
    else {
      int v122 = 0;
    }
    if (contexta) {
      int v123 = 32;
    }
    else {
      int v123 = 0;
    }
    if (v214) {
      int v124 = 64;
    }
    else {
      int v124 = 0;
    }
    int v125 = v122 | v124 | v123 | (2 * v80) | (8 * v204) | (4 * v206) | v14 | (v208 << 22) | (v205 << 23);
    if (v113) {
      int v126 = 0;
    }
    else {
      int v126 = 1024;
    }
    int v127 = *(unsigned __int8 *)(a1 + 248);
    uint64_t v128 = (v68 << 7) | ((v197 != 0) << 8) | v126 | v125 | (v127 << 9) | (*(unsigned __int8 *)(a1 + 2816) << 21) | (((*(_BYTE *)(a1 + 168) & 0x11) != 0) << 14);
    unsigned int v129 = *(unsigned __int8 *)(a1 + 2744);
    if (v129 < 0xA)
    {
      uint64_t v130 = v194;
      if (*(_BYTE *)(a1 + 2745))
      {
        v184 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  2,  "%s: curRecord %d is busy",  "__WiFiLQAMgrGetNextLQAMetricsRecordIdx",  *(unsigned __int8 *)(a1 + 2744));
        }
      }

      else
      {
        uint64_t v131 = (unsigned __int8 *)(a1 + 1296);
        unsigned int v132 = *(unsigned __int8 *)(a1 + 1296);
        if (v132 < 0xB)
        {
          if (v132 == 10)
          {
            double v133 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  2,  "%s: submittotalRecords %d",  "__WiFiLQAMgrGetNextLQAMetricsRecordIdx",  *v131);
            }
            objc_autoreleasePoolPop(v133);
            sub_10002F72C((_BYTE *)(a1 + 1296));
            unsigned int v129 = 0;
            *(_BYTE *)(a1 + 1296) = 0;
            *(_BYTE *)(a1 + 2744) = 0;
            char v120 = HIBYTE(v227);
            char v121 = v227;
            LOBYTE(v127) = *(_BYTE *)(a1 + 248);
          }

          int v134 = 1;
          *(_BYTE *)(a1 + 2745) = 1;
          uint64_t v135 = a1 + 144LL * v129;
          *(int32x2_t *)&__int128 v136 = vrev64_s32(*(int32x2_t *)v226);
          *((void *)&v136 + 1) = __PAIR64__(*(unsigned int *)&v226[28], *(unsigned int *)&v226[8]);
          *(_OWORD *)(v135 + 1304) = v136;
          char v137 = v226[36];
          *(_DWORD *)(v135 + 1320) = *(_DWORD *)&v226[32];
          *(int32x4_t *)(v135 + 1324) = vzip2q_s32( *(int32x4_t *)&v226[12],  vzip1q_s32( *(int32x4_t *)&v226[12],  vdupq_lane_s32(*(int32x2_t *)&v226[12], 0)));
          *(_BYTE *)(v135 + 1341) = v14;
          *(_BYTE *)(v135 + 1340) = v137;
          *(_BYTE *)(v135 + 1342) = v214;
          *(_BYTE *)(v135 + 1344) = v120;
          *(_BYTE *)(v135 + 1345) = v121;
          *(_BYTE *)(v135 + 1346) = v127;
          *(_BYTE *)(v135 + 1347) = v207;
          *(double *)(v135 + 1376) = v73;
          *(_BYTE *)(v135 + 1343) = *(_DWORD *)(a1 + 2768);
          *(void *)(v135 + 1400) = *(void *)(a1 + 280);
          *(_BYTE *)(v135 + 1440) = v208;
          *(_BYTE *)(v135 + 1441) = *(_DWORD *)(a1 + 56);
          *(_BYTE *)(v135 + 1442) = contexta;
          *(_BYTE *)(v135 + 1443) = v203;
          *(_BYTE *)(v135 + 1444) = v201;
          goto LABEL_316;
        }

        v184 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Err total records %d",  "__WiFiLQAMgrGetNextLQAMetricsRecordIdx",  *v131);
        }
      }

      objc_autoreleasePoolPop(v184);
      int v134 = 0;
      unsigned int v129 = 255;
      goto LABEL_316;
    }

    int v183 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Invalid curRecord %d",  "__WiFiLQAMgrGetNextLQAMetricsRecordIdx",  *(unsigned __int8 *)(a1 + 2744));
    }
    objc_autoreleasePoolPop(v183);
    int v134 = 0;
    unsigned int v129 = 255;
    uint64_t v130 = v194;
LABEL_316:
    if (*(_BYTE *)(a1 + 633))
    {
      uint64_t v138 = v128;
      goto LABEL_318;
    }

    if (((v14 ^ 1) & 1) == 0 && v208 && !v205)
    {
      if (!*(_BYTE *)(a1 + 357))
      {
        uint64_t v155 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Overriding AutoLeave (User Preference Adaptive) TriggerDisconnect decision for Probes",  "__WiFiLQAMgrCheckTriggerDisconnect");
        }
        objc_autoreleasePoolPop(v155);
        *(_BYTE *)(a1 + 357) = 1;
        *(_BYTE *)(a1 + 392) = 1;
        sub_10002157C(a1);
        uint64_t v140 = 0LL;
        int v142 = 0;
        uint64_t v14 = 0LL;
        uint64_t v141 = 0x1000000LL;
        goto LABEL_348;
      }

      if (contexta)
      {
        v143 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Proceeding with AutoLeave (User Preference Adaptive) TriggerDisconnect",  "__WiFiLQAMgrCheckTriggerDisconnect");
        }
        objc_autoreleasePoolPop(v143);
        goto LABEL_347;
      }
    }

    uint64_t v138 = v128;
    if (!v193) {
      goto LABEL_318;
    }
    id v144 = +[WiFiRoamManager sharedWiFiRoamManager](&OBJC_CLASS___WiFiRoamManager, "sharedWiFiRoamManager");
    if ((v130 & v14 & 1) != 0)
    {
      int v145 = v199 ^ 1;
      if (v197) {
        int v145 = 1;
      }
      if (*(_DWORD *)(a1 + 2788) <= *(_DWORD *)(a1 + 648) && v145)
      {
        id v146 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Not Triggering Roaming - userWalkout %d, possibleRoam %d\n",  "__WiFiLQAMgrCheckTriggerDisconnect",  HIBYTE(v227),  v227);
        }
        objc_autoreleasePoolPop(v146);
        uint64_t v128 = v128 | 0xC0000;
        if ((_DWORD)v14)
        {
LABEL_322:
          if (!*(_BYTE *)(a1 + 2824))
          {
            if (&_managed_event_fetch)
            {
              *(_DWORD *)(a1 + 492) = 0;
              if (sub_100021AB4((CFTypeRef)a1, 1, 0))
              {
                uint64_t v140 = 0LL;
                uint64_t v141 = 0LL;
                int v142 = 0;
                uint64_t v14 = 0LL;
                *(_BYTE *)(a1 + 161) = 1;
LABEL_348:
                char v147 = v134 ^ 1;
                if (*(_BYTE *)(a1 + 161)) {
                  char v147 = 1;
                }
                if ((v147 & 1) == 0)
                {
                  *(_BYTE *)(a1 + 144LL * v129 + 1341) = v14;
                  if ((_DWORD)v14)
                  {
                    if (*(double *)(a1 + 136) != 0.0) {
                    if (*(double *)(a1 + 120) != 0.0)
                    }
                  }

                  sub_100021DB0((_BYTE *)a1, v129);
                }

LABEL_357:
                double v148 = *(double *)(a1 + 184);
                if (v148 != 0.0) {
                  *(double *)(a1 + 192) = v16 - v148;
                }
                -[WiFiUsageMonitor setTdLogic_execState:forInterface:]( +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance"),  "setTdLogic_execState:forInterface:",  v130 | ((unint64_t)(v195 != 0) << 8) | v140,  v141,  *(void *)(a1 + 40));
                if (*(_BYTE *)(a1 + 161)) {
                  goto LABEL_13;
                }
                if (v142)
                {
                  v149 = objc_autoreleasePoolPush();
                  uint64_t v150 = (void *)qword_100219F60;
                  if (qword_100219F60)
                  {
LABEL_365:
                    contextc = v149;
                    objc_msgSend( v150,  "WFLog:message:",  3,  "%s: TrgDiscStatus %u [Rssi %d TxFrms %d TxFail %d TxRet %d fwFrms %d fwFail %d fwRtry %d RxFrms %d BcnSch %d BcnRx %d walkout %d possibleRoam %d Awd %d initPr %ld UnGw %f FgApp %ld SympScore %ld UsrInput %ld]",  "__WiFiLQAMgrCheckTriggerDisconnect",  v128,  *(unsigned int *)&v226[36],  *(unsigned int *)&v226[4],  *(unsigned int *)v226,  *(unsigned int *)&v226[8],  *(unsigned int *)&v226[20],  *(unsigned int *)&v226[16],  *(unsigned int *)&v226[24],  *(unsigned int *)&v226[12],  *(unsigned int *)&v226[28],  *(unsigned int *)&v226[32],  HIBYTE(v227),  v227,  0,  *(unsigned __int8 *)(a1 + 358),  *(void *)&v100,  sub_10001DD2C(a1),  0,  *(unsigned __int8 *)(a1 + 1288));
                    v149 = contextc;
                  }
                }

                else
                {
                  if (byte_100219830 != 1) {
                    goto LABEL_13;
                  }
                  v149 = objc_autoreleasePoolPush();
                  uint64_t v150 = (void *)qword_100219F60;
                  if (qword_100219F60) {
                    goto LABEL_365;
                  }
                }

                objc_autoreleasePoolPop(v149);
                goto LABEL_13;
              }
            }
          }

          if (!sub_10001DD2C(a1))
          {
            *(_BYTE *)(a1 + 161) = 0;
            v151 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  2,  "%s Foreground Networking App not present. Cache TrgDisc decision",  "__WiFiLQAMgrCheckTriggerDisconnect");
            }
            objc_autoreleasePoolPop(v151);
            uint64_t v141 = 0LL;
            uint64_t v14 = 0LL;
            int v142 = 1;
            *(_BYTE *)(a1 + 2785) = 1;
            uint64_t v140 = 0x100000000000000LL;
            goto LABEL_348;
          }

          if (*(_BYTE *)(a1 + 633))
          {
            uint64_t v140 = 0LL;
            uint64_t v141 = 0LL;
            uint64_t v14 = 0LL;
            *(_BYTE *)(a1 + 161) = 0;
LABEL_337:
            int v142 = 1;
            goto LABEL_348;
          }

          if (*(_BYTE *)(a1 + 636))
          {
            if (*(_BYTE *)(a1 + 1288))
            {
              uint64_t v156 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  2,  "%s Suppress TrgDisc decision with User's previous input",  "__WiFiLQAMgrCheckTriggerDisconnect");
              }
              objc_autoreleasePoolPop(v156);
              uint64_t v140 = 0LL;
              uint64_t v14 = 0LL;
              *(_BYTE *)(a1 + 161) = 0;
              uint64_t v141 = 1LL;
              goto LABEL_337;
            }

            if (*(void *)(a1 + 1280) || !sub_100021B90(a1))
            {
              uint64_t v140 = 0LL;
              int v142 = 0;
              uint64_t v14 = 0LL;
              *(_BYTE *)(a1 + 161) = 1;
              uint64_t v141 = 256LL;
              goto LABEL_348;
            }
          }

          uint64_t v140 = 0LL;
          uint64_t v141 = 0LL;
          int v142 = 0;
          uint64_t v14 = 1LL;
          goto LABEL_348;
        }

LABEL_347:
        uint64_t v140 = 0LL;
        uint64_t v141 = 0LL;
        int v142 = 0;
        goto LABEL_348;
      }
    }

    else
    {
      int v145 = v199 ^ 1;
      if (v197) {
        int v145 = 1;
      }
    }

    if (v205) {
      int v152 = v145;
    }
    else {
      int v152 = 0;
    }
    if (v152 == 1)
    {
      uint64_t v153 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Use Reduced Roam time for fast disconnect - userWalkout %d, possibleRoam %d\n",  "__WiFiLQAMgrCheckTriggerDisconnect",  HIBYTE(v227),  v227);
      }
      objc_autoreleasePoolPop(v153);
    }

    if (*(_BYTE *)(a1 + 177))
    {
      else {
        LOBYTE(v154) = 0;
      }
      if (*(int *)&v226[4] >= 5)
      {
        if ((v154 & 1) == 0)
        {
          sub_10003E8CC( *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(const void **)(a1 + 48),  *(_DWORD *)(a1 + 224),  0LL,  1LL,  0);
          *(_BYTE *)(a1 + 177) = 0;
          v180 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Improved PER, TxFrms %d TxFail %d",  "__WiFiLQAMgrCheckTriggerDisconnect",  *(unsigned int *)&v226[4],  *(unsigned int *)v226);
          }
          objc_autoreleasePoolPop(v180);
          uint64_t v140 = 0LL;
          int v142 = 0;
          uint64_t v14 = 0LL;
          uint64_t v128 = v128 | 0x60000;
          uint64_t v141 = 0x10000LL;
          goto LABEL_348;
        }
      }
    }

    if ((_DWORD)v14 && !*(_BYTE *)(a1 + 177))
    {
      *(double *)(a1 + 184) = v16;
      *(void *)(a1 + 192) = 0LL;
      sub_10003E8CC( *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(const void **)(a1 + 48),  *(_DWORD *)(a1 + 224),  1LL,  0LL,  0);
      if (sub_100053CFC(*(void *)(a1 + 32)) && v144)
      {
        double v178 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Attempting host triggered roam based on TdCheck",  "__WiFiLQAMgrCheckTriggerDisconnect");
        }
        objc_autoreleasePoolPop(v178);
        [v144 setLastRoamStatusFailedNoCandidateTs:0.0];
        objc_msgSend( +[WiFiRoamManager sharedWiFiRoamManager](WiFiRoamManager, "sharedWiFiRoamManager"),  "roamWithReason:bandPreference:",  6,  0);
      }

      *(_BYTE *)(a1 + 177) = 1;
      float v179 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Overriding TriggerDisconnect decision for Roam",  "__WiFiLQAMgrCheckTriggerDisconnect");
      }
      objc_autoreleasePoolPop(v179);
      uint64_t v140 = 0LL;
      uint64_t v14 = 0LL;
      uint64_t v128 = v128 | 0x50000;
    }

    else
    {
      uint64_t v138 = v128 | 0x40000;
      double v172 = *(double *)(a1 + 184);
      if (v172 == 0.0) {
        double v173 = 0.0;
      }
      else {
        double v173 = v16 - v172;
      }
      if (!v144
        || (([v144 lastRoamStatusFailedNoCandidateTs], v174 == 0.0) ? (double v175 = 0.0) : (double v175 = v16 - v174),
            v173 == 0.0 || v175 == 0.0))
      {
        if (!(_DWORD)v14) {
          goto LABEL_318;
        }
      }

      else
      {
        if (v173 > v175)
        {
          if ((v134 & 1) == 0)
          {
            *(_DWORD *)(a1 + 2800) = v138;
LABEL_321:
            uint64_t v128 = v138;
            if ((_DWORD)v14) {
              goto LABEL_322;
            }
            goto LABEL_347;
          }

          [v144 lastRoamStatusFailedNoCandidateTs];
          unsigned int v139 = v129;
          *(void *)(a1 + 144LL * v129 + 1432) = (unint64_t)(v16 - v176);
          *(_DWORD *)(a1 + 2800) = v138;
LABEL_320:
          *(_DWORD *)(a1 + 144LL * v139 + 1384) = v138;
          goto LABEL_321;
        }

        double v181 = v16 - *(double *)(a1 + 184);
        if (v181 > 10.0 || (v181 > 5.0 ? (int v182 = v152) : (int v182 = 0), ((v182 | v14 ^ 1) & 1) != 0))
        {
LABEL_318:
          *(_DWORD *)(a1 + 2800) = v138;
          if (!v134) {
            goto LABEL_321;
          }
          unsigned int v139 = v129;
          goto LABEL_320;
        }
      }

      if (!*(_BYTE *)(a1 + 177) || v173 > 10.0) {
        goto LABEL_318;
      }
      v177 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Not Roamed for %2.2f secs",  "__WiFiLQAMgrCheckTriggerDisconnect",  *(void *)&v173);
      }
      objc_autoreleasePoolPop(v177);
      uint64_t v128 = v128 | 0x140000;
      if (!v134)
      {
        uint64_t v14 = 0LL;
        uint64_t v140 = 0LL;
        uint64_t v141 = (uint64_t)&_mh_execute_header;
        int v142 = 1;
        goto LABEL_357;
      }

      uint64_t v140 = 0LL;
      uint64_t v14 = 0LL;
      *(void *)(a1 + 144LL * v129 + 1432) = 10LL;
    }

    int v142 = 1;
    uint64_t v141 = (uint64_t)&_mh_execute_header;
    goto LABEL_348;
  }

  v105 = (const __CFNumber *)CFDictionaryGetValue(v104, @"RSSI");
  if (v105)
  {
    CFNumberGetValue(v105, kCFNumberSInt32Type, &valuePtr);
    int v103 = LODWORD(valuePtr);
    goto LABEL_256;
  }

LABEL_12:
  uint64_t v14 = 0LL;
LABEL_13:
  *(_DWORD *)(a1 + 48_Block_object_dispose(va, 8) = 0;
  return v14;
}

  CFRelease(v3);
  CFRelease(v5);
  if (v6) {
    CFRelease(v6);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    goto LABEL_23;
  }
}

    objc_autoreleasePoolPop(v8);
    return;
  }

  if (!a3)
  {
    int v8 = objc_autoreleasePoolPush();
    __int128 v9 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      int v10 = "%s: no Network object!";
      goto LABEL_11;
    }

    goto LABEL_12;
  }

  if (!qword_100219860) {
    return;
  }
  if (sub_100071B54(*(void *)(qword_100219860 + 16)))
  {
    int v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Camera is in Foreground",  "WiFiMetricsManagerSubmitAssociationFailure");
    }
    goto LABEL_12;
  }

  double v11 = sub_100096BF4((uint64_t)a3, @"CHANNEL");
  BOOL v62 = sub_100096BF4((uint64_t)a3, @"RSSI");
  uint64_t v12 = (const __CFString *)sub_1000951FC((uint64_t)a3, @"BSSID");
  if (!sub_1000957F4((BOOL)a3))
  {
    BOOL v60 = v11;
    theString = v12;
    double v19 = 0LL;
    double v20 = 0LL;
    BOOL v66 = kCFAllocatorDefault;
LABEL_28:
    CFNumberRef v22 = 1;
LABEL_29:
    id v23 = sub_100097324(a3);
    id v24 = "Hidden ";
    if (!v23) {
      id v24 = "";
    }
    v65 = v24;
    else {
      CFNumberRef v25 = "";
    }
    else {
      double v26 = "";
    }
    cuint64_t f = v19;
    CFIndex v64 = v22;
    if (sub_100096D08((const __CFDictionary *)a3))
    {
      __int128 v27 = "WPA3 ";
    }

    else if (sub_100098058((uint64_t)a3))
    {
      __int128 v27 = "WPA2 ";
    }

    else if (sub_100097FF4((uint64_t)a3))
    {
      __int128 v27 = "WPA ";
    }

    else
    {
      __int128 v27 = "";
    }

    uint64_t v67 = v20;
    if (!v20) {
      double v20 = "";
    }
    if (sub_1000982F4((BOOL)a3)) {
      int v30 = "WAPI PSK ";
    }
    else {
      int v30 = "";
    }
    char v31 = sub_100098358((BOOL)a3);
    char v32 = "WAPI CERT ";
    if (!v31) {
      char v32 = "";
    }
    CFNumberRef v29 = CFStringCreateWithFormat(v66, 0LL, @"%s%s%s%s%s%s%s", v65, v25, v26, v27, v20, v30, v32);
    Length = CFStringGetLength(v29);
    v34 = (unsigned int *)malloc((int)Length + 27LL);
    if (v34)
    {
      uint64_t v35 = v34;
      bzero(v34, (int)Length + 27LL);
      if ((_DWORD)Length) {
        CFStringGetCString(v29, (char *)v35 + 26, ((uint64_t)&_mh_execute_header + (Length << 32)) >> 32, 0);
      }
      *uint64_t v35 = a2;
      *(unsigned int *)((char *)v35 + 11) = v60;
      *(unsigned int *)((char *)v35 + 15) = v62;
      *(unsigned int *)((char *)v35 + 19) = a4;
      __int128 v36 = (const void *)sub_100043E8C(a1);
      __int128 v37 = sub_1000449EC(a1, v36);
      if (v37)
      {
        CFIndex v38 = v37;
        Value = (const __CFString *)CFDictionaryGetValue(v37, @"DEAUTH_EA");
        if (Value)
        {
          uint64_t v40 = Value;
          uint64_t v41 = (int)(CFStringGetLength(Value) + 1);
          uint64_t v42 = (char *)malloc(v41);
          if (v42)
          {
            uint64_t v43 = v42;
            bzero(v42, v41);
            if (CFStringGetCString(v40, v43, v41, 0))
            {
              uint64_t v44 = ether_aton(v43);
              if (v44)
              {
                int v45 = *(_WORD *)v44->octet;
                *((_BYTE *)v35 + 10) = v44->octet[2];
                *((_WORD *)v35 + 4) = v45;
              }
            }

            free(v43);
          }
        }

        CFIndex v46 = (const __CFNumber *)CFDictionaryGetValue(v38, @"DEAUTH_REASON");
        if (v46) {
          CFNumberGetValue(v46, kCFNumberIntType, v35 + 1);
        }
        CFRelease(v38);
      }

      if (theString)
      {
        double v47 = (int)(CFStringGetLength(theString) + 1);
        v48 = (char *)malloc(v47);
        if (v48)
        {
          CFNumberRef v49 = v48;
          bzero(v48, v47);
          if (CFStringGetCString(theString, v49, v47, 0))
          {
            v50 = ether_aton(v49);
            if (v50)
            {
              v51 = *(_WORD *)v50->octet;
              *((_BYTE *)v35 + 25) = v50->octet[2];
              *(_WORD *)((char *)v35 + 23) = v51;
            }
          }

          free(v49);
        }
      }

      int v52 = objc_autoreleasePoolPush();
      int v53 = objc_autoreleasePoolPush();
      int v54 = objc_alloc(&OBJC_CLASS___WAMessage);
      int v55 = [v54 initWithMetricName:kWAMessageMetricNameAssociationFailure options:7];
      if (v55)
      {
        double v56 = v55;
        objc_msgSend( v55,  "addFieldForKey:value:options:",  kWAMessageKeyError,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *v35),  7);
        objc_msgSend( v56,  "addFieldForKey:value:options:",  kWAMessageKeyDeauthReason,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v35[1]),  7);
        sub_100039B54(v56, kWAMessageKeyDeauthSourceOUI, (uint64_t)(v35 + 2), 3u, 1);
        objc_msgSend( v56,  "addFieldForKey:value:options:",  kWAMessageKeyChannel,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)((char *)v35 + 11)),  7);
        objc_msgSend( v56,  "addFieldForKey:value:options:",  kWAMessageKeyRSSI,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)((char *)v35 + 15)),  7);
        sub_100039B54(v56, kWAMessageKeyBSSIDOUI, (uint64_t)v35 + 23, 3u, 1);
        objc_msgSend( v56,  "addFieldForKey:value:options:",  kWAMessageKeySecurityString,  +[NSString stringWithCString:encoding:]( NSString,  "stringWithCString:encoding:",  (char *)v35 + 26,  1),  7);
        if (!sub_100036E74(v56, a3, 6LL))
        {
          BOOL v57 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to append SSID/BSSID to WAMessage",  "__WiFiMetricsManagerWAMessageSubmitAssociationFailure");
          }
          objc_autoreleasePoolPop(v57);
        }

        int v58 = kWAMessageKeyMetricDate;
        -[NSDate timeIntervalSinceReferenceDate]( +[NSDate date](&OBJC_CLASS___NSDate, "date"),  "timeIntervalSinceReferenceDate");
        objc_msgSend( v56,  "addFieldForKey:value:options:",  v58,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"),  6);
        sub_10002891C(v56);
      }

      else
      {
        BOOL v59 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to alloc WAMessage for AssociationFailure",  "__WiFiMetricsManagerWAMessageSubmitAssociationFailure");
        }
        objc_autoreleasePoolPop(v59);
      }

      objc_autoreleasePoolPop(v53);
      free(v35);
      objc_autoreleasePoolPop(v52);
    }

    if ((v64 & 1) != 0) {
      goto LABEL_82;
    }
    goto LABEL_81;
  }

  if (sub_1000951FC((uint64_t)a3, @"WEP_AUTH_Flags"))
  {
    uint64_t v13 = sub_100096BF4((uint64_t)a3, @"WEP_AUTH_Flags");
    uint64_t v14 = kCFAllocatorDefault;
    uint64_t v15 = "40 Bit";
    double v16 = "Open";
    double v17 = "Hashed";
    double v18 = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"WEP network: %s %s %s (0x%lx)", v15, v16, v17, v13);
  }

  else
  {
    uint64_t v14 = kCFAllocatorDefault;
    double v18 = CFStringCreateWithCString(kCFAllocatorDefault, "WEP network", 0);
  }

  double v19 = v18;
  if (!v18)
  {
    BOOL v66 = v14;
    BOOL v60 = v11;
    theString = v12;
    double v20 = 0LL;
    goto LABEL_28;
  }

  uint64_t v21 = (int)(CFStringGetLength(v18) + 1);
  double v20 = (char *)malloc(v21);
  bzero(v20, v21);
  if (CFStringGetCString(v19, v20, v21, 0))
  {
    CFNumberRef v22 = 0;
    BOOL v66 = v14;
    BOOL v60 = v11;
    theString = v12;
    goto LABEL_29;
  }

  uint64_t v67 = v20;
  cuint64_t f = v19;
  CFNumberRef v28 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: unable to retrieve WEP security string!",  "WiFiMetricsManagerSubmitAssociationFailure");
  }
  objc_autoreleasePoolPop(v28);
  CFNumberRef v29 = 0LL;
LABEL_81:
  CFRelease(cf);
LABEL_82:
  if (v29) {
    CFRelease(v29);
  }
  if (v67) {
    free(v67);
  }
}

    objc_autoreleasePoolPop(v8);
    goto LABEL_6;
  }

  uint64_t v5 = sub_10006C77C(v4);
  if (!v5)
  {
    int v8 = objc_autoreleasePoolPush();
    __int128 v9 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      int v10 = "Error copying devices";
      goto LABEL_11;
    }

    goto LABEL_12;
  }

  uint64_t v6 = v5;
  int v7 = sub_10003BEF4(a1, v5);
  if (v7) {
    CFRelease(v7);
  }
  CFRelease(v6);
LABEL_6:
  sub_10003CBE8(a1, a2, 2u, 0LL);
}

    objc_autoreleasePoolPop(v10);
    goto LABEL_6;
  }

  int v7 = sub_10006C77C(v6);
  if (!v7)
  {
    int v10 = objc_autoreleasePoolPush();
    double v11 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      uint64_t v12 = "Error copying devices";
      goto LABEL_11;
    }

    goto LABEL_12;
  }

  int v8 = v7;
  __int128 v9 = sub_10003BEF4(a1, v7);
  if (v9) {
    CFRelease(v9);
  }
  CFRelease(v8);
LABEL_6:
  sub_10003CBE8(a1, a2, 0x11u, a3);
}

  objc_autoreleasePoolPop(v2);
}

  _Block_object_dispose(&v16, 8);
}

  _Block_object_dispose(&v10, 8);
}

    CFRelease(v12);
  }

  sub_10003A8FC((vm_address_t)a4, a5);
  return 0LL;
}

    CFRelease(v12);
  }

  sub_10003A8FC((vm_address_t)a4, a5);
  return 0LL;
}

  sub_10003A8FC((vm_address_t)a2, a3);
  return 0LL;
}

    if (CFArrayGetCount(v4) <= ++v5) {
      goto LABEL_13;
    }
  }

  __int128 v9 = v7;
  int v10 = @"APPLE80211KEY_AWDL_INFO_ASSISTED_DISCOVERY_FOLLOW";
LABEL_11:
  if (!sub_1000951FC(v9, v10)) {
    goto LABEL_12;
  }
  double v11 = sub_100094E60((uint64_t)kCFAllocatorDefault, v7);
LABEL_14:
  CFRelease(v4);
  return v11;
}

  objc_autoreleasePoolPop(v4);
  return v11;
}

                    CFRelease(a4);
                    double v17 = v16;
                    goto LABEL_13;
                  }

                  CFNumberRef v29 = NSPOSIXErrorDomain;
                  char v31 = NSLocalizedDescriptionKey;
                  int v30 = @"IP configuration not matching for SSID transition";
                }

                else
                {
                  CFNumberRef v29 = NSPOSIXErrorDomain;
                  char v31 = NSLocalizedDescriptionKey;
                  int v30 = @"Known network profile private MAC policy not matching for SSID transition";
                }

                char v32 = v30;
                double v16 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v29,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL));
                CFRelease(v11);
                uint64_t v15 = 0LL;
                double v18 = 0LL;
                goto LABEL_12;
              }

              char v31 = NSLocalizedDescriptionKey;
              char v32 = @"Failed to translate CWFNetworkProfile to WiFiNetworkRef";
              double v26 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL);
              __int128 v27 = NSPOSIXErrorDomain;
              CFNumberRef v28 = 22LL;
            }

            else
            {
              char v31 = NSLocalizedDescriptionKey;
              char v32 = @"Known network profile not suitable for auto-join";
              double v26 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL);
              __int128 v27 = NSPOSIXErrorDomain;
              CFNumberRef v28 = 1LL;
            }

            double v17 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v27,  v28,  v26);
            CFRelease(v11);
LABEL_25:
            uint64_t v15 = 0LL;
            double v18 = 0LL;
            goto LABEL_13;
          }

          id v24 = NSPOSIXErrorDomain;
          char v31 = NSLocalizedDescriptionKey;
          CFNumberRef v25 = @"Failed to translate CWFNetworkProfile to WiFiNetworkRef";
        }

        else
        {
          id v24 = NSPOSIXErrorDomain;
          char v31 = NSLocalizedDescriptionKey;
          CFNumberRef v25 = @"No known network specified";
        }

        char v32 = v25;
        uint64_t v21 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL);
        CFNumberRef v22 = v24;
        id v23 = 22LL;
LABEL_21:
        double v17 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v22,  v23,  v21);
        goto LABEL_25;
      }

      double v19 = NSPOSIXErrorDomain;
      char v31 = NSLocalizedDescriptionKey;
      double v20 = @"No auto-join manager configured";
    }

    else
    {
      double v19 = NSPOSIXErrorDomain;
      char v31 = NSLocalizedDescriptionKey;
      double v20 = @"No device manager configured";
    }

    char v32 = v20;
    uint64_t v21 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL);
    CFNumberRef v22 = v19;
    id v23 = 6LL;
    goto LABEL_21;
  }

        if (v10)
        {
          uint64_t v15 = ((_DWORD)v10 - 1);
          if ((int)v10 - 1 >= 0)
          {
            do
            {
              double v16 = [*(id *)(v5 + 6888) objectAtIndexedSubscript:v15];
              if (v16
                && (double v17 = v16, [v16 hotspotDevice])
                && (-[NSDate timeIntervalSinceDate:]( +[NSDate date](NSDate, "date"),  "timeIntervalSinceDate:",  [v17 lastNotifiedAt]),  v18 <= 1800.0))
              {
                if (objc_msgSend( *(id *)(v5 + 6728),  "isEqualHotspotDevices:compareTo:",  objc_msgSend(v17, "hotspotDevice"),  a2))
                {
                  double v11 = NSPOSIXErrorDomain;
                  uint64_t v40 = NSLocalizedDescriptionKey;
                  uint64_t v12 = @"Hotspot not responded by user";
                  goto LABEL_43;
                }
              }

              else
              {
                [*(id *)(v5 + 6888) removeObjectAtIndex:v15];
              }
            }

            while (v15-- >= 1);
          }
        }

        if (v8 >= 1)
        {
          double v20 = 0LL;
          while (!objc_msgSend( *(id *)(v5 + 6728),  "isEqualHotspotDevices:compareTo:",  CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 6872), v20),  a2))
          {
            if (v8 == ++v20) {
              goto LABEL_27;
            }
          }

          CFNumberRef v29 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Hotspot blacklisted: Peer declined \n",  "__WiFiDeviceManagerUnifiedAutoJoinAllowHotspot");
          }
          objc_autoreleasePoolPop(v29);
          double v11 = NSPOSIXErrorDomain;
          uint64_t v40 = NSLocalizedDescriptionKey;
          uint64_t v12 = @"Hotspot declined/rejected by peer";
          goto LABEL_43;
        }

  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);
  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(&v32, 8);
  return v8;
}

unint64_t sub_10001B928(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: curNetwork is NULL", "__WiFiLQAMgrGetCurBssid");
    }
    goto LABEL_12;
  }

  uint64_t v1 = (const __CFString *)sub_1000951FC(a1, @"BSSID");
  if (!v1)
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: curNetwork BSSID is NULL",  "__WiFiLQAMgrGetCurBssid");
    }
    goto LABEL_12;
  }

  if (!CFStringGetCString(v1, buffer, 19LL, 0))
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: CString conversion failure",  "__WiFiLQAMgrGetCurBssid");
    }
LABEL_12:
    objc_autoreleasePoolPop(v6);
    return 0LL;
  }

  unint64_t result = (unint64_t)ether_aton(buffer);
  if (result)
  {
    uint64_t v3 = (unsigned __int8 *)result;
    uint64_t v4 = 0LL;
    unint64_t result = 0LL;
    do
    {
      unsigned int v5 = *v3++;
      result |= (unint64_t)v5 << v4;
      v4 += 8LL;
    }

    while (v4 != 48);
  }

  return result;
}

void sub_10001BA7C(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    if (cf)
    {
      CFRetain(cf);
      uint64_t v4 = *(dispatch_queue_s **)(a1 + 296);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10001D438;
      block[3] = &unk_1001E2C30;
      void block[4] = a1;
      void block[5] = cf;
      dispatch_async(v4, block);
    }
  }

  else
  {
    unsigned int v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: LQAMgr is NULL", "WiFiLQAMgrIgnoreDiagnosticProbe");
    }
    objc_autoreleasePoolPop(v5);
  }

uint64_t sub_10001BB38(uint64_t a1)
{
  if (!a1) {
    return 1LL;
  }
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    BOOL v3 = sub_1000992D0(v2) != 1;
  }
  else {
    BOOL v3 = 1;
  }
  if (!*(_BYTE *)(a1 + 637) || !*(_BYTE *)(a1 + 638)) {
    return (*(_DWORD *)(a1 + 224) - 3) < 4;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 224);
  if (v4 != 3) {
    BOOL v3 = 0;
  }
  BOOL v5 = v4 > 6;
  int v6 = (1 << v4) & 0x52;
  return !v5 && v6 != 0 || v3;
}

void sub_10001BBC8(uint64_t a1, const void *a2, uint64_t a3, char a4)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (a1)
  {
    double v9 = Current;
    if ((_DWORD)a3 != 2)
    {
      if ((_DWORD)a3 == 1)
      {
        if (*(_BYTE *)(a1 + 1296))
        {
          sub_10002F72C((_BYTE *)(a1 + 1296));
          int v10 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: submittotalRecords %d",  "WiFiLQAMgrLinkStateNotify",  *(unsigned __int8 *)(a1 + 1296));
          }
          objc_autoreleasePoolPop(v10);
        }

        *(_BYTE *)(a1 + 1296) = 0;
        *(_BYTE *)(a1 + 2744) = 0;
        *(_BYTE *)(a1 + 161) = 0;
        *(_BYTE *)(a1 + 200) = 0;
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 24));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 256));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 264));
        *(_DWORD *)(a1 + 278_Block_object_dispose(va, 8) = 0;
        *(_BYTE *)(a1 + 28_Block_object_dispose(va, 8) = 0;
        *(_DWORD *)(a1 + 20) = 0;
        double v11 = objc_autoreleasePoolPush();
        if (qword_100219F60)
        {
          uint64_t v12 = *(int *)(a1 + 20);
          else {
            uint64_t v13 = *(&off_1001E2D88 + v12);
          }
          [(id)qword_100219F60 WFLog:3, "%s: %@", "__WiFiLQAMgrSetState", v13 message];
        }

        objc_autoreleasePoolPop(v11);
        if (*(double *)(a1 + 136) != 0.0)
        {
          double v18 = +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance");
          else {
            double v19 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 136);
          }
          -[WiFiUsageMonitor setTdLogic_end:evalTime:rssi:roamTime:forInterface:]( v18,  "setTdLogic_end:evalTime:rssi:roamTime:forInterface:",  13LL,  *(int *)(a1 + 2788),  *(void *)(a1 + 40),  v19,  *(double *)(a1 + 192));
        }

        *(_BYTE *)(a1 + 392) = 0;
        dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 336), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
        dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 536), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
        double v20 = *(dispatch_source_s **)(a1 + 2896);
        if (v20) {
          dispatch_source_set_timer(v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
        }
        *(_BYTE *)(a1 + 2904) = 0;
        *(_BYTE *)(a1 + 356) = 0;
        sub_10001BA7C(a1, *(CFTypeRef *)(a1 + 376));
        uint64_t v21 = *(const void **)(a1 + 376);
        if (v21)
        {
          CFRelease(v21);
          *(void *)(a1 + 376) = 0LL;
        }

        *(_WORD *)(a1 + 357) = 0;
        sub_10001BA7C(a1, *(CFTypeRef *)(a1 + 384));
        CFNumberRef v22 = *(const void **)(a1 + 384);
        if (v22)
        {
          CFRelease(v22);
          *(void *)(a1 + 384) = 0LL;
        }

        *(void *)(a1 + 360) = 0LL;
        *(_DWORD *)(a1 + 2752) = 0;
        sub_100019404(a1, 0LL);
        *(_BYTE *)(a1 + 128_Block_object_dispose(va, 8) = 0;
        *(_WORD *)(a1 + 176) = 1;
        double v23 = *(double *)(a1 + 184);
        if (v23 != 0.0) {
          *(double *)(a1 + 192) = v9 - v23;
        }
        *(void *)(a1 + 184) = 0LL;
        dispatch_async_f(*(dispatch_queue_t *)(a1 + 2912), (void *)a1, (dispatch_function_t)sub_100014FC0);
        *(_OWORD *)(a1 + 2936) = 0u;
        goto LABEL_72;
      }

      if ((_DWORD)a3)
      {
        uint64_t v14 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Unknown Link State Notification %d",  "WiFiLQAMgrLinkStateNotify",  a3);
        }
        objc_autoreleasePoolPop(v14);
        goto LABEL_72;
      }
    }

    if (a2)
    {
      if ((_DWORD)a3)
      {
        if (*(_DWORD *)(a1 + 20))
        {
LABEL_42:
          if ((_DWORD)a3 == 2 && *(_BYTE *)(a1 + 1296))
          {
            sub_10002F72C((_BYTE *)(a1 + 1296));
            id v24 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: submittotalRecords %d",  "WiFiLQAMgrLinkStateNotify",  *(unsigned __int8 *)(a1 + 1296));
            }
            objc_autoreleasePoolPop(v24);
          }

          goto LABEL_47;
        }
      }

      else if (!*(_DWORD *)(a1 + 20))
      {
LABEL_47:
        *(_BYTE *)(a1 + 1296) = 0;
        *(_BYTE *)(a1 + 2744) = 0;
        *(_BYTE *)(a1 + 161) = 0;
        *(_BYTE *)(a1 + 200) = 0;
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 24));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 256));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 264));
        *(_BYTE *)(a1 + 24_Block_object_dispose(va, 8) = a4;
        sub_100019404(a1, a2);
        *(_BYTE *)(a1 + 28_Block_object_dispose(va, 8) = 0;
        *(_DWORD *)(a1 + 20) = 1;
        CFNumberRef v25 = objc_autoreleasePoolPush();
        if (qword_100219F60)
        {
          uint64_t v26 = *(int *)(a1 + 20);
          else {
            __int128 v27 = *(&off_1001E2D88 + v26);
          }
          [(id)qword_100219F60 WFLog:3, "%s: %@", "__WiFiLQAMgrSetState", v27 message];
        }

        objc_autoreleasePoolPop(v25);
        if ((_DWORD)a3)
        {
          CFNumberRef v28 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Roam: ending Evaluation",  "WiFiLQAMgrLinkStateNotify");
          }
          objc_autoreleasePoolPop(v28);
          if (*(double *)(a1 + 136) != 0.0)
          {
            CFNumberRef v29 = +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance");
            else {
              double v30 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 136);
            }
            -[WiFiUsageMonitor setTdLogic_end:evalTime:rssi:roamTime:forInterface:]( v29,  "setTdLogic_end:evalTime:rssi:roamTime:forInterface:",  14LL,  *(int *)(a1 + 2788),  *(void *)(a1 + 40),  v30,  *(double *)(a1 + 192));
          }
        }

        else
        {
          char v31 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: LinkUp: ending Evaluation",  "WiFiLQAMgrLinkStateNotify");
          }
          objc_autoreleasePoolPop(v31);
        }

        *(_BYTE *)(a1 + 392) = 0;
        dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 336), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
        dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 536), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
        *(_BYTE *)(a1 + 356) = 0;
        sub_10001BA7C(a1, *(CFTypeRef *)(a1 + 376));
        char v32 = *(const void **)(a1 + 376);
        if (v32)
        {
          CFRelease(v32);
          *(void *)(a1 + 376) = 0LL;
        }

        *(void *)(a1 + 360) = 0LL;
        *(_BYTE *)(a1 + 128_Block_object_dispose(va, 8) = 0;
        if (!(_DWORD)a3) {
          *(CFAbsoluteTime *)(a1 + 64) = CFAbsoluteTimeGetCurrent();
        }
        *(_WORD *)(a1 + 176) = 1;
        double v33 = *(double *)(a1 + 184);
        if (v33 != 0.0) {
          *(double *)(a1 + 192) = v9 - v33;
        }
        *(void *)(a1 + 184) = 0LL;
        if (&_symptom_create)
        {
          if ((*(_DWORD *)(a1 + 16) - 1) <= 1)
          {
            uint64_t v34 = symptom_create("com.apple.wifimanager.link-quality");
            symptom_set_qualifier(v34, 0LL, 0LL);
            unint64_t v35 = sub_10001B928(*(void *)(a1 + 48));
            symptom_set_qualifier(v34, v35, 1LL);
            symptom_send(v34);
          }
        }

LABEL_72:
        *(void *)(a1 + 280_Block_object_dispose(va, 8) = 0LL;
        *(_BYTE *)(a1 + 2816) = 0;
        return;
      }

      uint64_t v15 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        uint64_t v16 = *(int *)(a1 + 20);
        else {
          double v17 = *(&off_1001E2D88 + v16);
        }
        [(id)qword_100219F60 WFLog:4, "%s: Unexpected Event %d currState %@", "WiFiLQAMgrLinkStateNotify", a3, v17 message];
      }

      objc_autoreleasePoolPop(v15);
      goto LABEL_42;
    }

    __int128 v36 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: curNetwork is NULL in Event %d",  "WiFiLQAMgrLinkStateNotify",  a3);
    }
    objc_autoreleasePoolPop(v36);
  }

          goto LABEL_73;
        }

  int v52 = sub_100095BC8(v41);
  int v53 = sub_100095BC8(a3);
  if (!CFEqual(v52, v53) || !sub_100095B4C((uint64_t)a3) && !sub_10009DF44((uint64_t)a3))
  {
    int v55 = 0;
    double v56 = v153 == 1008;
    if ((_DWORD)v153 == 1008 || (_DWORD)v153 == 1011)
    {
      int v58 = sub_100095BC8(v41);
      BOOL v59 = sub_100095BC8(a3);
      if (!CFEqual(v58, v59))
      {
        uint64_t v98 = sub_10004CE48(*(void *)(a1 + 64));
        uint64_t v99 = sub_100096BF4((uint64_t)a3, @"RSSI");
        double v100 = objc_autoreleasePoolPush();
        double v101 = (void *)qword_100219F60;
        if (qword_100219F60)
        {
          int contexta = v100;
          id v144 = sub_100095BC8(a3);
          [v101 WFLog:3, "%s: user switching to %@(%d), leaving %@(%d) ", "WiFiDeviceManagerAssociateAsync", v144, v99, sub_100095BC8(v41), v98 message];
          double v100 = contexta;
        }

        objc_autoreleasePoolPop(v100);
        int v55 = (int)v98 > *(_DWORD *)(a1 + 128);
        if (!a3) {
          goto LABEL_103;
        }
        goto LABEL_97;
      }

      int v55 = 0;
      if (a3)
      {
LABEL_97:
        if (v56 && *(_BYTE *)(a1 + 5211) && *(unsigned __int8 *)(a1 + 5210) == -*(_BYTE *)(a1 + 5209))
        {
          LODWORD(v174) = 0;
          CFIndex v64 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: MIS state is enabled. Force-disabling before association type (%d).",  "WiFiDeviceManagerAssociateAsync",  1008);
          }
          objc_autoreleasePoolPop(v64);
          double v170 = 0LL;
          double v168 = 0u;
          CFAbsoluteTime v169 = 0u;
          BOOL v165 = 0u;
          CFIndex v166 = 6LL;
          CFIndex v163 = 0u;
          uint64_t v164 = 0u;
          uint64_t v161 = 0u;
          CFIndex v162 = 0u;
          uint64_t v159 = 0u;
          uint64_t v160 = 0u;
          DWORD2(v159) = 6;
          uint64_t v167 = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"%@", @"Network Transition");
          sub_1000DC1AC(a1, (uint64_t)&v159);
          sub_1000DBCC0(a1, 0LL, 1, 0, (unsigned int *)&v174);
        }
      }

void sub_10001C21C(uint64_t a1)
{
  uint64_t v2 = *(dispatch_source_s **)(a1 + 2896);
  if (v2) {
    dispatch_source_set_timer(v2, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
  }
  *(_BYTE *)(a1 + 2904) = 0;
}

double sub_10001C254(uint64_t a1, CFDictionaryRef theDict)
{
  __int16 valuePtr = 0;
  __int16 v13 = 0;
  __int16 v12 = 0;
  value = 0LL;
  uint64_t v11 = 0LL;
  double v9 = 0LL;
  if (a1 && theDict)
  {
    unsigned int v4 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RT_TRAFFIC_STATE");
    if (v4) {
      CFNumberGetValue(v4, kCFNumberSInt8Type, (char *)&valuePtr + 1);
    }
    int ValueIfPresent = CFDictionaryGetValueIfPresent(theDict, @"QUAL_SCORE", (const void **)&value);
    int v6 = value;
    if (ValueIfPresent && value)
    {
      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"P95_TX_LATENCY_SCORE", (const void **)&v9)
        && v9)
      {
        CFNumberGetValue((CFNumberRef)v9, kCFNumberSInt32Type, (char *)&v11 + 4);
      }

      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"LINK_RECOMMENDATION_FLAGS", (const void **)&v9)
        && v9)
      {
        CFNumberGetValue((CFNumberRef)v9, kCFNumberSInt32Type, &v11);
      }

      int v6 = value;
    }

    if (v6)
    {
      int v7 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: channel score: chq=%u, tx-lat=%u, rx-lat=%u, tx-loss=%u, rx-loss=%u, txPer=%.1f%%, p95-lat=%u, RT=0x%x, li nk-recommendation=0x%x\n",  "WiFiLQAMgrLinkRecommendationNotify",  (char)valuePtr,  SHIBYTE(v13),  (char)v13,  SHIBYTE(v12),  (char)v12,  *(float *)(a1 + 2952),  HIDWORD(v11),  HIBYTE(valuePtr),  v11);
      }
      objc_autoreleasePoolPop(v7);
      *(_BYTE *)(a1 + 2945) = valuePtr;
      *(_BYTE *)(a1 + 2946) = HIBYTE(v13);
      *(_BYTE *)(a1 + 2947) = v13;
      *(_BYTE *)(a1 + 294_Block_object_dispose(va, 8) = HIBYTE(v12);
      *(_BYTE *)(a1 + 2949) = v12;
      *(_BYTE *)(a1 + 2944) = HIBYTE(valuePtr);
      *(_DWORD *)(a1 + 2936) = HIDWORD(v11);
      *(_DWORD *)(a1 + 2940) = v11;
    }

    else
    {
      double result = 0.0;
      *(_OWORD *)(a1 + 2936) = 0u;
    }
  }

  return result;
}

uint64_t sub_10001C4D8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 2936);
}

__n128 sub_10001C4E0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a1 + 2980);
  __int128 v3 = *(_OWORD *)(a1 + 2996);
  *(_OWORD *)(a2 + 2_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 3008);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void sub_10001C4F8(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v44 = 0LL;
  uint64_t valuePtr = 0LL;
  uint64_t v42 = 0LL;
  uint64_t v43 = 0LL;
  uint64_t v41 = 0LL;
  int v40 = 0;
  if (theDict)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LQM_TX_STATS_TX_SUCCESS");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&valuePtr + 4);
      int v5 = HIDWORD(valuePtr);
    }

    else
    {
      int v5 = 0;
    }

    int v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_DROP_MISC");
    if (v6)
    {
      CFNumberGetValue(v6, kCFNumberSInt32Type, (char *)&v44 + 4);
      int v7 = HIDWORD(v44);
    }

    else
    {
      int v7 = 0;
    }

    int v8 = v7 + v5;
    double v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_NO_BUFF");
    if (v9)
    {
      CFNumberGetValue(v9, kCFNumberSInt32Type, &v44);
      int v10 = v44;
    }

    else
    {
      int v10 = 0;
    }

    int v11 = v8 + v10;
    __int16 v12 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_NO_RESOURCE");
    if (v12)
    {
      CFNumberGetValue(v12, kCFNumberSInt32Type, (char *)&v43 + 4);
      int v13 = HIDWORD(v43);
    }

    else
    {
      int v13 = 0;
    }

    int v14 = v11 + v13;
    uint64_t v15 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_NO_ACK");
    if (v15)
    {
      CFNumberGetValue(v15, kCFNumberSInt32Type, &v43);
      int v16 = v43;
    }

    else
    {
      int v16 = 0;
    }

    int v17 = v14 + v16;
    double v18 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_CHIP_MODE_ERROR");
    if (v18)
    {
      CFNumberGetValue(v18, kCFNumberSInt32Type, (char *)&v42 + 4);
      int v19 = HIDWORD(v42);
    }

    else
    {
      int v19 = 0;
    }

    int v20 = v17 + v19;
    uint64_t v21 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_EXPIRED");
    if (v21)
    {
      CFNumberGetValue(v21, kCFNumberSInt32Type, &v42);
      int v22 = v42;
    }

    else
    {
      int v22 = 0;
    }

    int v23 = v20 + v22;
    id v24 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_FAIL");
    if (v24)
    {
      CFNumberGetValue(v24, kCFNumberSInt32Type, &valuePtr);
      int v25 = valuePtr;
    }

    else
    {
      int v25 = 0;
    }

    int v26 = v23 + v25;
    __int128 v27 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_FW_FREE_PACKET");
    if (v27)
    {
      CFNumberGetValue(v27, kCFNumberSInt32Type, (char *)&v41 + 4);
      int v28 = HIDWORD(v41);
    }

    else
    {
      int v28 = 0;
    }

    int v29 = v26 + v28;
    double v30 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"APPLE80211KEY_LQM_TX_STATS_TX_MAX_RETRIES");
    if (v30)
    {
      CFNumberGetValue(v30, kCFNumberSInt32Type, &v41);
      int v31 = v41;
    }

    else
    {
      int v31 = 0;
    }

    int v32 = v29 + v31;
    double v33 = (const __CFNumber *)CFDictionaryGetValue( theDict,  @"APPLE80211KEY_LQM_TX_STATS_TX_FORCE_LIFETIME_EXPIRED");
    if (v33)
    {
      CFNumberGetValue(v33, kCFNumberSInt32Type, &v40);
      int v34 = v40;
    }

    else
    {
      int v34 = 0;
    }

    int v35 = v32 + v34;
    if (v35)
    {
      double v36 = (double)v35;
      float v37 = (double)(v35 - HIDWORD(valuePtr)) / (double)v35 * 100.0;
      *(float *)(a1 + 2952) = v37;
      CFIndex v38 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "LQM-TX: Success:%d(%.1f%%) FwFail:%d(%.1f%%) FwMaxRetries:%d(%.1f%%) NoACK:%d(%.1f%%) MiscDrops:%d(%.1f%%) NoB uf:%d(%.1f%%) FwNoRes:%d(%.1f%%) ChipErr:%d(%.1f%%) Exp:%d(%.1f%%) FwFcdExpiry:%d(%.1f%%) FwFree:%d(%.1f%%)",  HIDWORD(valuePtr),  (double)SHIDWORD(valuePtr) / v36 * 100.0,  valuePtr,  (double)(int)valuePtr / v36 * 100.0,  v41,  (double)(int)v41 / v36 * 100.0,  v43,  (double)(int)v43 / v36 * 100.0,  HIDWORD(v44),  (double)SHIDWORD(v44) / v36 * 100.0,  v44,  (double)(int)v44 / v36 * 100.0,  HIDWORD(v43),  (double)SHIDWORD(v43) / v36 * 100.0,  HIDWORD(v42),  (double)SHIDWORD(v42) / v36 * 100.0,  v42,  (double)(int)v42 / v36 * 100.0,  v40,  (double)v40 / v36 * 100.0,  HIDWORD(v41),  (double)SHIDWORD(v41) / v36 * 100.0);
      }
      objc_autoreleasePoolPop(v38);
    }

    else
    {
      *(_DWORD *)(a1 + 2952) = 0;
    }
  }

  else
  {
    uint64_t v39 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: txStatsRef is null", "WiFiLQAMgrLqmTxNotify");
    }
    objc_autoreleasePoolPop(v39);
  }

void sub_10001C908(uint64_t a1, CFDictionaryRef theDict)
{
  value = 0LL;
  __int16 valuePtr = 0;
  int v9 = 0;
  uint64_t v8 = 0LL;
  if (a1 && theDict)
  {
    int ValueIfPresent = CFDictionaryGetValueIfPresent(theDict, @"MLO_PREF_BAND_CHANGE_CNT", (const void **)&value);
    int v5 = 0;
    if (ValueIfPresent)
    {
      if (value)
      {
        CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &v8);
        int v5 = v8;
      }
    }

    uint64_t v6 = HIBYTE(valuePtr);
    *(_BYTE *)(a1 + 3024) = HIBYTE(valuePtr);
    int v7 = valuePtr;
    *(_BYTE *)(a1 + 3025) = valuePtr;
    *(_DWORD *)(a1 + 3032) = v9;
    *(_DWORD *)(a1 + 302_Block_object_dispose(va, 8) = HIDWORD(v8);
    *(_DWORD *)(a1 + 3036) = v5;
    *(void *)(a1 + 3160) = v6;
    memset_pattern16((void *)(a1 + 3168), &unk_10017F180, 0xCuLL);
    *(_DWORD *)(a1 + 3180) = 3;
    *(_BYTE *)(a1 + 3184) = v7 != 0;
  }

uint64_t sub_10001CA7C(uint64_t result, CFDictionaryRef theDict, unsigned int a3)
{
  CFArrayRef theArray = 0LL;
  value = 0LL;
  CFStringRef theString = 0LL;
  char valuePtr = 0;
  __int16 v21 = 0;
  int v20 = 0;
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v17 = 0LL;
  int v16 = 0;
  __int16 v15 = 0;
  memset(buffer, 170, 19);
  if (result && theDict)
  {
    uint64_t v5 = result;
    if (CFDictionaryGetValueIfPresent(theDict, @"PER_CORE_RSSI", (const void **)&theArray)
      && theArray
      && CFArrayGetCount(theArray) >= 1)
    {
      CFIndex v6 = 0LL;
      do
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, v6);
        value = ValueAtIndex;
        if (ValueAtIndex) {
          CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt8Type, (char *)&v21 + v6);
        }
        ++v6;
      }

      while (CFArrayGetCount(theArray) > v6);
    }

    __n128 result = CFDictionaryGetValueIfPresent(theDict, @"BSSID", (const void **)&theString);
    if ((_DWORD)result)
    {
      __n128 result = (uint64_t)theString;
      if (theString)
      {
        CFStringGetCString(theString, buffer, 19LL, 0);
        __n128 result = (uint64_t)ether_aton(buffer);
        if (result)
        {
          int v8 = *(_DWORD *)result;
          uint64_t v9 = v5 + 40LL * a3 + 3040;
          *(_WORD *)(v9 + 7) = *(_WORD *)(result + 4);
          *(_DWORD *)(v9 + 3) = v8;
        }
      }
    }

    uint64_t v10 = v5 + 40LL * a3;
    *(_BYTE *)(v10 + 3040) = valuePtr;
    char v11 = v16;
    *(_WORD *)(v10 + 3041) = *(_WORD *)(v10 + 3041) & 0x700 | BYTE2(v16) | ((_WORD)v16 << 14) | ((v15 & 7) << 11);
    *(_DWORD *)(v10 + 3052) = v20;
    *(_DWORD *)(v10 + 3076) = v17;
    *(_DWORD *)(v10 + 3072) = HIDWORD(v17);
    *(_DWORD *)(v10 + 3064) = HIDWORD(v18);
    *(_DWORD *)(v10 + 3056) = HIDWORD(v19);
    *(_DWORD *)(v10 + 3060) = v19;
    *(_DWORD *)(v10 + 306_Block_object_dispose(va, 8) = v18;
    *(_WORD *)(v10 + 3049) = v21;
    if ((v11 & 3) << 14)
    {
      int v13 = v11 & 3;
      if (v13 == 1)
      {
        uint64_t v14 = v5 + 4LL * a3;
        int v12 = 2;
      }

      else
      {
        if (v13 != 3) {
          return result;
        }
        uint64_t v14 = v5 + 4LL * a3;
        int v12 = 1;
      }

      *(_DWORD *)(v14 + 316_Block_object_dispose(va, 8) = v12;
    }

    else
    {
      int v12 = 0;
      *(_DWORD *)(v5 + 4LL * a3 + 316_Block_object_dispose(va, 8) = 0;
    }

    if (*(_BYTE *)(v10 + 3040)) {
      *(_DWORD *)(v5 + 3180) = v12;
    }
  }

  return result;
}

void sub_10001CE8C(uint64_t a1, CFDictionaryRef theDict)
{
  int v20 = 0LL;
  value = 0LL;
  unsigned int valuePtr = 0;
  __int16 v18 = 0;
  __int16 v17 = 0;
  unsigned int v16 = 0;
  unsigned int v15 = 0;
  uint64_t v14 = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  __int16 v13 = 0;
  if (a1 && theDict)
  {
    if (CFDictionaryGetValueIfPresent(theDict, @"OBSS_PWREST_CORE0", (const void **)&v20)
      && v20
      && CFArrayGetCount((CFArrayRef)v20) >= 1)
    {
      CFIndex v4 = 0LL;
      do
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex((CFArrayRef)v20, v4);
        value = ValueAtIndex;
        if (ValueAtIndex) {
          CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt8Type, (char *)&v23 + v4);
        }
        ++v4;
      }

      while (v4 < CFArrayGetCount((CFArrayRef)v20));
    }

    if (CFDictionaryGetValueIfPresent(theDict, @"OBSS_PWREST_CORE1", (const void **)&v20)
      && v20
      && CFArrayGetCount((CFArrayRef)v20) >= 1)
    {
      CFIndex v6 = 0LL;
      do
      {
        int v7 = (void *)CFArrayGetValueAtIndex((CFArrayRef)v20, v6);
        value = v7;
        if (v7) {
          CFNumberGetValue((CFNumberRef)v7, kCFNumberSInt8Type, (char *)&v22 + v6);
        }
        ++v6;
      }

      while (v6 < CFArrayGetCount((CFArrayRef)v20));
    }

    if (!CFDictionaryGetValueIfPresent(theDict, @"OBSS_MIT_SOI", (const void **)&v20)
      || !v20
      || CFArrayGetCount((CFArrayRef)v20) < 1)
    {
      goto LABEL_52;
    }

    CFIndex v8 = 0LL;
    do
    {
      uint64_t v9 = (void *)CFArrayGetValueAtIndex((CFArrayRef)v20, v8);
      value = v9;
      if (v9) {
        CFNumberGetValue((CFNumberRef)v9, kCFNumberSInt8Type, (char *)&v13 + v8);
      }
      ++v8;
    }

    while (v8 < CFArrayGetCount((CFArrayRef)v20));
    if (!(_BYTE)v13)
    {
LABEL_52:
      LOBYTE(v13) = *(_DWORD *)(a1 + 2792);
      HIBYTE(v13) = *(_DWORD *)(a1 + 2796);
    }

    uint64_t v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s OBSS MIT -> time = %u sec, shouldApply = %u, IsApplied = %u, currBw = %u, mitBw = %u, plcp %u, fcs %u, rxfram es %u rxPer %u%%\n",  "WiFiLQAMgrObssMitInfoNotify",  valuePtr,  HIBYTE(v18),  v18,  HIBYTE(v17),  v17,  v16,  v15,  HIDWORD(v14),  v14);
    }
    objc_autoreleasePoolPop(v10);
    char v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s OBSS MIT -> soi (%d, %d), pwr0 (%d, %d, %d, %d, %d, %d, %d, %d)\n",  "WiFiLQAMgrObssMitInfoNotify",  (char)v13,  SHIBYTE(v13),  (char)v23,  SBYTE1(v23),  SBYTE2(v23),  SBYTE3(v23),  SBYTE4(v23),  SBYTE5(v23),  SBYTE6(v23),  SHIBYTE(v23));
    }
    objc_autoreleasePoolPop(v11);
    *(_BYTE *)(a1 + 2982) = HIBYTE(v17);
    *(_BYTE *)(a1 + 2981) = v18;
    *(_DWORD *)(a1 + 3000) = valuePtr;
    *(_BYTE *)(a1 + 2983) = v17;
    *(_DWORD *)(a1 + 298_Block_object_dispose(va, 8) = v15;
    *(_DWORD *)(a1 + 2992) = HIDWORD(v14);
    *(_DWORD *)(a1 + 2996) = v14;
    *(_DWORD *)(a1 + 2984) = v16;
    *(_BYTE *)(a1 + 2980) = HIBYTE(v18);
    *(_WORD *)(a1 + 3020) = v13;
    uint64_t v12 = v22;
    *(void *)(a1 + 3004) = v23;
    *(void *)(a1 + 3012) = v12;
  }

uint64_t sub_10001D328(void *a1, CFTypeRef cf)
{
  if (a1)
  {
    v8[0] = 0LL;
    v8[1] = v8;
    v8[2] = 0x2020000000LL;
    unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
    if (cf) {
      CFTypeRef v3 = CFRetain(cf);
    }
    else {
      CFTypeRef v3 = 0LL;
    }
    unint64_t v9 = (unint64_t)v3;
    CFRetain(a1);
    CFIndex v6 = (dispatch_queue_s *)a1[37];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000234D8;
    block[3] = &unk_1001E2D48;
    void block[4] = v8;
    void block[5] = a1;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
    return 0LL;
  }

  else
  {
    CFIndex v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: LQAMgr is NULL", "__WiFiLQAMgrScheduleProbe");
    }
    objc_autoreleasePoolPop(v4);
    return 4294963365LL;
  }

void sub_10001D420(_Unwind_Exception *a1)
{
}

void sub_10001D438(uint64_t a1)
{
  uint64_t v2 = *(const __CFArray **)(*(void *)(a1 + 32) + 320LL);
  v6.length = CFArrayGetCount(v2);
  v6.id location = 0LL;
  int v3 = CFArrayContainsValue(v2, v6, *(const void **)(a1 + 40));
  CFIndex v4 = *(__CFDictionary **)(a1 + 40);
  if (v3 || *(__CFDictionary **)(*(void *)(a1 + 32) + 312LL) == v4)
  {
    CFDictionarySetValue(v4, @"kWiFiLqaMgrIgnoreProbe", kCFBooleanTrue);
  }

  else
  {
    uint64_t v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Invalid Handle",  "WiFiLQAMgrIgnoreDiagnosticProbe_block_invoke");
    }
    objc_autoreleasePoolPop(v5);
  }

  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t sub_10001D4F8(uint64_t a1)
{
  if (a1) {
    return (*(_DWORD *)(a1 + 644) + *(_DWORD *)(a1 + 656));
  }
  uint64_t v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: LQAMgr is NULL", "WiFiLQAMgrTrgDiscPnoRssiThres");
  }
  objc_autoreleasePoolPop(v2);
  return 0LL;
}

uint64_t sub_10001D56C(_DWORD *a1, const void *a2, int a3, double a4)
{
  if (!a1)
  {
    uint64_t v22 = objc_autoreleasePoolPush();
    uint64_t v23 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_16;
    }
    id v24 = "%s: LQAMgr is NULL";
    goto LABEL_34;
  }

  if (!a2)
  {
    uint64_t v22 = objc_autoreleasePoolPush();
    uint64_t v23 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_16;
    }
    id v24 = "%s: network is NULL";
    goto LABEL_34;
  }

  double v9 = v8;
  uint64_t v10 = sub_100096BF4((uint64_t)a2, @"RSSI");
  char v11 = v10;
  if (!(_DWORD)v10)
  {
    uint64_t v22 = objc_autoreleasePoolPush();
    uint64_t v23 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_16;
    }
    id v24 = "%s: rssi is 0";
LABEL_34:
    uint64_t v25 = 4LL;
    goto LABEL_15;
  }

  double v12 = v9 - a4;
  int v13 = a1[164];
  int v14 = v13 + a1[161];
  int v15 = v13 + a3;
  if ((v13 + a3 <= (int)v10 || v14 <= (int)v10) && (v12 >= 60.0 || a1[692] == 1 || a1[160] + 5 <= (int)v10))
  {
    uint64_t v22 = objc_autoreleasePoolPush();
    int v26 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      __int128 v27 = sub_100095BC8(a2);
      if (v15 >= v14) {
        uint64_t v28 = v14;
      }
      else {
        uint64_t v28 = v15;
      }
      [v26 WFLog:4, "%s: Allowed TriggerDisconnected network %@ for auto-join, RSSI: %d, Thres: %d timeFromLastTD:%2.2f seconds", "WiFiLQAMgrAllowNetworkForAutoJoin", v27, v11, v28, *(void *)&v12 message];
    }

    uint64_t v20 = 1LL;
    goto LABEL_26;
  }

  unsigned int v16 = objc_autoreleasePoolPush();
  __int16 v17 = (void *)qword_100219F60;
  if (qword_100219F60)
  {
    __int16 v18 = sub_100095BC8(a2);
    if (v15 >= v14) {
      uint64_t v19 = v14;
    }
    else {
      uint64_t v19 = v15;
    }
    [v17 WFLog:4, "%s: Skipping TriggerDisconnected network %@ for auto-join, RSSI: %d, Thres: %d timeFromLastTD:%2.2f seconds", "WiFiLQAMgrAllowNetworkForAutoJoin", v18, v11, v19, *(void *)&v12 message];
  }

  objc_autoreleasePoolPop(v16);
  uint64_t v20 = 0LL;
  if ((int)v11 >= -89 && &_symptom_create)
  {
    uint64_t v21 = symptom_create("com.apple.wifimanager.auto-join-scan");
    symptom_send(v21);
    uint64_t v22 = objc_autoreleasePoolPush();
    uint64_t v23 = (void *)qword_100219F60;
    if (!qword_100219F60)
    {
LABEL_16:
      uint64_t v20 = 0LL;
LABEL_26:
      objc_autoreleasePoolPop(v22);
      return v20;
    }

    id v24 = "%s: Notified Symptoms about found Trigger Disconnected network";
    uint64_t v25 = 2LL;
LABEL_15:
    objc_msgSend(v23, "WFLog:message:", v25, v24, "WiFiLQAMgrAllowNetworkForAutoJoin");
    goto LABEL_16;
  }

  return v20;
}

uint64_t sub_10001D7EC(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = *(unsigned __int8 *)(a1 + 2892);
  }
  else {
    uint64_t v1 = 0LL;
  }
  uint64_t v2 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    int v3 = "TRUE";
    if (!(_DWORD)v1) {
      int v3 = "FALSE";
    }
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: criticalAppState:%s",  "WiFiLQAMgrIsCriticalAppState",  v3);
  }

  objc_autoreleasePoolPop(v2);
  return v1;
}

BOOL sub_10001D874(BOOL result)
{
  if (result)
  {
    uint64_t v1 = (unsigned int *)result;
    uint64_t state64 = 0LL;
    uint64_t state = notify_get_state(*(_DWORD *)(result + 440), &state64);
    if ((_DWORD)state)
    {
      uint64_t v3 = state;
      CFIndex v4 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Unable to get Symptoms Event ID Error %d",  "__WiFiLQAMgrForceSymptomsScoreFetch",  v3);
      }
      objc_autoreleasePoolPop(v4);
    }

    else
    {
      v1[705] = 7;
      sub_100021AB4(v1, 0, 1);
    }

    uint64_t v5 = v1[126];
    uint64_t v6 = v1[131];
    int v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: DNS Symptoms netscore:%d datastallscore:%d",  "WiFiLQAMgrIsSymptomsScorePoor",  v5,  v6);
    }
    objc_autoreleasePoolPop(v7);
    return (v5 < 0x1A || v6 <= 0x19) && v1[129] == v1[130];
  }

  return result;
}

void sub_10001D984(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: DNS Symptoms reseting scores",  "WiFiLQAMgrResetDNSFailureSymptomsScores");
    }
    objc_autoreleasePoolPop(v2);
    *(_DWORD *)(a1 + 504) = 50;
    *(_DWORD *)(a1 + 524) = 0xFFFF;
    sub_10001DA0C(a1);
    sub_10001DC80(a1, 0);
  }

void sub_10001DA0C(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return;
  }
  uint64_t v3 = Mutable;
  CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 512));
  if (!v4)
  {
    CFNumberRef v10 = v3;
LABEL_23:
    CFRelease(v10);
    return;
  }

  CFNumberRef v5 = v4;
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 516));
  if (!v6)
  {
    CFNumberRef v7 = 0LL;
    goto LABEL_27;
  }

  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 520));
  if (!v7)
  {
LABEL_27:
    CFNumberRef v8 = 0LL;
    goto LABEL_28;
  }

  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 492));
  if (!v8)
  {
LABEL_28:
    CFNumberRef v9 = 0LL;
    goto LABEL_29;
  }

  CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 524));
  if (!v9)
  {
LABEL_29:
    CFNumberRef v10 = 0LL;
    goto LABEL_30;
  }

  CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 500));
  if (!v10)
  {
LABEL_30:
    CFNumberRef v11 = 0LL;
    goto LABEL_12;
  }

  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 504));
  if (v11)
  {
    CFDictionarySetValue(v3, @"IO80211DPSSymptomsInputARPFail", v5);
    CFDictionarySetValue(v3, @"IO80211DPSSymptomsInputDNSServersTotal", v6);
    CFDictionarySetValue(v3, @"IO80211DPSSymptomsInputDNSServersImpacted", v7);
    CFDictionarySetValue(v3, @"IO80211DPSSymptomsInputUserImpactFlags", v8);
    CFDictionarySetValue(v3, @"IO80211DPSSymptomsInputDataStallScore", v9);
    CFDictionarySetValue(v3, @"IO80211DPSSymptomsInputAppPolicyScore", v10);
    CFDictionarySetValue(v3, @"IO80211DPSSymptomsInputNetScore", v11);
    double v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"DNS Symptoms: updating APPLE80211_IOC_DPS_SYMPTOMS_INPUT"];
    }
    objc_autoreleasePoolPop(v12);
    sub_10003EC6C(*(void *)(a1 + 32), *(const void **)(a1 + 40), 487LL, 0LL, (uint64_t)v3);
  }

void sub_10001DC80(uint64_t a1, int a2)
{
  if (a1)
  {
    CFNumberRef v4 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      CFNumberRef v5 = "true";
      if (!a2) {
        CFNumberRef v5 = "false";
      }
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: setting dnsFailureHandled to %s",  "WiFiLQAMgrSetDNSFailureTriggerStatus",  v5);
    }

    objc_autoreleasePoolPop(v4);
    *(_BYTE *)(a1 + 531) = a2;
  }

uint64_t sub_10001DD0C(uint64_t a1)
{
  if (a1) {
    return *(int *)(a1 + 644);
  }
  else {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
}

uint64_t sub_10001DD2C(uint64_t a1)
{
  if (!a1)
  {
    CFNumberRef v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQAMgr is NULL",  "__WiFiLQAMgrDoesForegroundAppUseWiFi");
    }
    uint64_t v3 = 0LL;
LABEL_17:
    objc_autoreleasePoolPop(v6);
    return v3;
  }

  if (!*(_BYTE *)(a1 + 2824))
  {
    BOOL v1 = (~*(_DWORD *)(a1 + 492) & 5) != 0 && (*(_DWORD *)(a1 + 492) & 0x20) == 0;
    if (v1 && (*(_DWORD *)(a1 + 492) & 0xB) != 9)
    {
      if (!-[WiFiUserInteractionMonitor isNetworkingAppInForeground]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isNetworkingAppInForeground")) {
        return 0LL;
      }
      CFNumberRef v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: user interaction monitor indicates FG networking app active",  "__WiFiLQAMgrDoesForegroundAppUseWiFi");
      }
      uint64_t v3 = 1LL;
      goto LABEL_17;
    }
  }

  return 1LL;
}

BOOL sub_10001DE24(uint64_t a1)
{
  if (a1) {
    return sub_10001DD2C(a1) != 0;
  }
  uint64_t v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: LQAMgr is NULL", "WiFiLQAMgrForegroundAppUsesWiFi");
  }
  objc_autoreleasePoolPop(v2);
  return 0LL;
}

uint64_t sub_10001DE98()
{
  return 4294963393LL;
}

void sub_10001DEA0(uint64_t a1)
{
  if (!a1)
  {
    CFNumberRef v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: WiFiLQAMgrRef is NULL",  "WiFiLQAMgrCaptureInstantaneousLQForMetricsReporting");
    }
    goto LABEL_24;
  }

  uint64_t v2 = *(const __CFArray **)(a1 + 24);
  if (!v2)
  {
    CFNumberRef v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQAManager: LQM table is NULL",  "WiFiLQAMgrCaptureInstantaneousLQForMetricsReporting");
    }
    goto LABEL_24;
  }

  if (!CFArrayGetCount(v2))
  {
    CFNumberRef v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQAManager: LQM table is empty",  "WiFiLQAMgrCaptureInstantaneousLQForMetricsReporting");
    }
LABEL_24:
    objc_autoreleasePoolPop(v9);
    return;
  }

  uint64_t v3 = *(const void **)(a1 + 144);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 144) = 0LL;
  }

  *(_OWORD *)bytes = 0u;
  memset(v11, 0, sizeof(v11));
  int v4 = sub_10001E0B4(a1, bytes);
  CFNumberRef v5 = objc_autoreleasePoolPush();
  if (!v4)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to extract metrics from Lqm, exiting!",  "WiFiLQAMgrCaptureInstantaneousLQForMetricsReporting");
    }
    CFNumberRef v8 = v5;
    goto LABEL_16;
  }

  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  2,  "%s: TxFail:%d TxFrames:%d TxReTrans:%d rxFrames:%d FwTxFail:%d FwTxFrames:%d FwTxReTrans:%d beaconSched:%d beaconR ecv:%d rssi:%d ccaTotal:%d ccaSelf:%d ccaOther:%d ccaInterference:%d",  "WiFiLQAMgrCaptureInstantaneousLQForMetricsReporting",  *(unsigned int *)bytes,  *(unsigned int *)&bytes[4],  *(unsigned int *)&bytes[8],  *(unsigned int *)&bytes[12],  v11[0],  v11[1],  v11[2],  v11[3],  v11[4],  v11[5],  SLOBYTE(v11[6]),  SBYTE1(v11[6]),  SBYTE2(v11[6]),  SHIBYTE(v11[6]));
  }
  objc_autoreleasePoolPop(v5);
  CFDataRef v6 = CFDataCreate(kCFAllocatorDefault, bytes, 44LL);
  *(void *)(a1 + 144) = v6;
  if (!v6)
  {
    CFNumberRef v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to create CFData",  "WiFiLQAMgrCaptureInstantaneousLQForMetricsReporting");
    }
    CFNumberRef v8 = v7;
LABEL_16:
    objc_autoreleasePoolPop(v8);
  }

uint64_t sub_10001E0B4(uint64_t a1, _DWORD *a2)
{
  uint64_t v39 = 0LL;
  valuePtr[0] = 0LL;
  uint64_t v38 = 0LL;
  CFNumberRef v36 = 0LL;
  CFNumberRef v37 = 0LL;
  CFNumberRef v34 = 0LL;
  CFNumberRef number = 0LL;
  CFNumberRef v32 = 0LL;
  CFNumberRef v33 = 0LL;
  CFNumberRef v30 = 0LL;
  CFNumberRef v31 = 0LL;
  CFNumberRef v28 = 0LL;
  CFNumberRef v29 = 0LL;
  CFNumberRef v26 = 0LL;
  CFNumberRef v27 = 0LL;
  CFNumberRef v24 = 0LL;
  CFNumberRef v25 = 0LL;
  value = 0LL;
  CFDictionaryRef theDict = 0LL;
  if (!a1)
  {
    uint64_t v19 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: WiFiLQAMgrRef is NULL",  "__WiFiLQAMgrExtractFromLqm");
    }
    goto LABEL_73;
  }

  if (!a2)
  {
    uint64_t v19 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: metrics is NULL", "__WiFiLQAMgrExtractFromLqm");
    }
LABEL_73:
    objc_autoreleasePoolPop(v19);
    return 0LL;
  }

  if (*(void *)(a1 + 24))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
    if (Count < 1)
    {
LABEL_71:
      uint64_t v19 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQAManager No LQMDicts",  "__WiFiLQAMgrExtractFromLqm");
      }
    }

    else
    {
      CFIndex v6 = Count;
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0LL);
      uint64_t v7 = 0LL;
      CFIndex v8 = 0LL;
      double AbsoluteTime = 0.0;
      do
      {
        CFNumberRef v10 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v8);
        CFNumberRef v11 = v10;
        if (v10)
        {
          int ValueIfPresent = CFDictionaryGetValueIfPresent(v10, @"LQMTIMESTAMP", (const void **)&value);
          int v13 = value;
          if (ValueIfPresent) {
            BOOL v14 = value == 0LL;
          }
          else {
            BOOL v14 = 1;
          }
          if (!v14)
          {
            double AbsoluteTime = CFDateGetAbsoluteTime((CFDateRef)value);
            int v13 = value;
          }

          if (v13)
          {
            if (Current - AbsoluteTime <= *(double *)(a1 + 664))
            {
              if (CFDictionaryGetValueIfPresent(v11, @"TXFWFAIL", (const void **)&v32) && v32)
              {
                CFNumberGetValue(v32, kCFNumberIntType, &v39);
                a2[4] += v39;
              }

              if (CFDictionaryGetValueIfPresent(v11, @"TXFWFRAMES", (const void **)&v30) && v30)
              {
                CFNumberGetValue(v30, kCFNumberIntType, (char *)&v38 + 4);
                a2[5] += HIDWORD(v38);
              }

              if (CFDictionaryGetValueIfPresent(v11, @"TXFWRETRANS", (const void **)&v31) && v31)
              {
                CFNumberGetValue(v31, kCFNumberIntType, &v38);
                a2[6] += v38;
              }

              if (!number || !v34 || !v33)
              {
                uint64_t v19 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: txFailRef / txReTransRef / txFramesRef NULL",  "__WiFiLQAMgrExtractFromLqm");
                }
                goto LABEL_73;
              }

              ++v7;
              int v15 = a2[1] + LODWORD(valuePtr[0]);
              *a2 += HIDWORD(valuePtr[0]);
              a2[1] = v15;
              a2[2] += HIDWORD(v39);
            }
          }

          else
          {
            unsigned int v16 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: No Timestamp in LQM Record",  "__WiFiLQAMgrExtractFromLqm");
            }
            objc_autoreleasePoolPop(v16);
          }
        }

        ++v8;
      }

      while (v6 != v8);
      if (!v7 || !ValueAtIndex) {
        goto LABEL_71;
      }
      if (CFArrayGetCount(*(CFArrayRef *)(a1 + 24))) {
        CFNumberRef v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0LL);
      }
      if (v11)
      {
        int v17 = CFDictionaryGetValueIfPresent(v11, @"CCA_STATS", (const void **)&theDict);
        uint64_t v18 = 1LL;
        if (v17 && theDict)
        {
          uint64_t v18 = 1LL;
          if (CFDictionaryGetValueIfPresent(theDict, @"CCA_INTERFERENCE_TOTAL", (const void **)&v26) && v26)
          {
            uint64_t v18 = 1LL;
            CFNumberGetValue(v26, kCFNumberSInt8Type, (char *)a2 + 43);
          }
        }

        return v18;
      }

      uint64_t v19 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: lqmDict is NULL!", "__WiFiLQAMgrExtractFromLqm");
      }
    }

    goto LABEL_73;
  }

  return 0LL;
}

void sub_10001E644(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 144);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 144) = 0LL;
  }

void sub_10001E670( uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, unint64_t *a6, unint64_t *a7, unint64_t *a8)
{
  if (!a1)
  {
    CFNumberRef v27 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: WiFiLQAMgrRef is NULL",  "WiFiLQAMgrGetInstantaneousLQForMetricsReporting");
    }
    goto LABEL_34;
  }

  CFIndex v8 = *(const __CFData **)(a1 + 144);
  if (!v8)
  {
    CFNumberRef v27 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: CFData not allocated",  "WiFiLQAMgrGetInstantaneousLQForMetricsReporting");
    }
LABEL_34:
    objc_autoreleasePoolPop(v27);
    return;
  }

  BytePtr = CFDataGetBytePtr(v8);
  int v17 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  2,  "%s: TxFail:%d TxFrames:%d TxReTrans:%d rxFrames:%d FwTxFail:%d FwTxFrames:%d FwTxReTrans:%d beaconSched:%d beaconR ecv:%d rssi:%d ccaTotal:%d ccaSelf:%d ccaOther:%d ccaInterference:%d",  "WiFiLQAMgrGetInstantaneousLQForMetricsReporting",  *(unsigned int *)BytePtr,  *((unsigned int *)BytePtr + 1),  *((unsigned int *)BytePtr + 2),  *((unsigned int *)BytePtr + 3),  *((unsigned int *)BytePtr + 4),  *((unsigned int *)BytePtr + 5),  *((unsigned int *)BytePtr + 6),  *((unsigned int *)BytePtr + 7),  *((unsigned int *)BytePtr + 8),  *((unsigned int *)BytePtr + 9),  *((char *)BytePtr + 40),  *((char *)BytePtr + 41),  *((char *)BytePtr + 42),  *((char *)BytePtr + 43));
  }
  objc_autoreleasePoolPop(v17);
  if (a2) {
    *a2 = *((char *)BytePtr + 40);
  }
  if (a3) {
    *a3 = *((char *)BytePtr + 41);
  }
  if (a4) {
    *a4 = *((char *)BytePtr + 42);
  }
  if (a5) {
    *a5 = *((char *)BytePtr + 43);
  }
  if (a6)
  {
    int v18 = *((_DWORD *)BytePtr + 1);
    if (v18) {
      unint64_t v19 = (unint64_t)((double)*(int *)BytePtr / (double)v18 * 100.0);
    }
    else {
      unint64_t v19 = 0LL;
    }
    *a6 = v19;
  }

  if (a7)
  {
    int v20 = *((_DWORD *)BytePtr + 7);
    if (!v20
      || (v21 = *((_DWORD *)BytePtr + 8), v22 = __OFSUB__(v20, v21), int v23 = v20 - v21, (v23 < 0) ^ v22 | (v23 == 0)))
    {
      unint64_t v24 = 0LL;
    }

    else
    {
      unint64_t v24 = (unint64_t)((double)v23 / (double)v20 * 100.0);
    }

    *a7 = v24;
  }

  if (a8)
  {
    int v25 = *((_DWORD *)BytePtr + 5);
    if (v25) {
      unint64_t v26 = (unint64_t)((double)*((int *)BytePtr + 4) / (double)v25 * 100.0);
    }
    else {
      unint64_t v26 = 0LL;
    }
    *a8 = v26;
  }

void sub_10001E8C4(uint64_t a1, CFDictionaryRef theDict)
{
  if (a1)
  {
    if (theDict)
    {
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, theDict);
      if (MutableCopy)
      {
        CFNumberRef v5 = MutableCopy;
        if (*(void *)(a1 + 152)
          || (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks),  (*(void *)(a1 + 152) = Mutable) != 0LL))
        {
          for (uint64_t i = 0LL; i != 9; ++i)
          {
            value = 0LL;
            int valuePtr = 0;
            CFIndex v8 = off_1001E2C50[i];
            else {
              BOOL v9 = 1;
            }
            if (!v9)
            {
              CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
              CFNumberRef number = 0LL;
              int v16 = 0;
              else {
                BOOL v10 = 1;
              }
              if (!v10) {
                CFNumberGetValue(number, kCFNumberIntType, &v16);
              }
              v16 += valuePtr;
              CFNumberRef v11 = CFNumberCreate(0LL, kCFNumberIntType, &v16);
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 152), v8, v11);
              CFDictionarySetValue(v5, v8, v11);
              if (v11) {
                CFRelease(v11);
              }
            }
          }

          double v12 = *(const void **)(a1 + 152);
          if (v12)
          {
            CFRelease(v12);
            *(void *)(a1 + 152) = 0LL;
          }

          CFMutableDictionaryRef v13 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, v5);
          *(void *)(a1 + 152) = v13;
          if (v13) {
            goto LABEL_25;
          }
          BOOL v14 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s coalescedUndispatchedLQMEvent is NULL!!!",  "WiFiLQAMgrCoalesceUndispatchedLQMEvent");
          }
        }

        else
        {
          BOOL v14 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: coalescedUndispatchedLQMEvent create failed",  "WiFiLQAMgrCoalesceUndispatchedLQMEvent");
          }
        }

        objc_autoreleasePoolPop(v14);
LABEL_25:
        CFRelease(v5);
        return;
      }

      int v15 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: lqmDictCopy is NULL",  "WiFiLQAMgrCoalesceUndispatchedLQMEvent");
      }
    }

    else
    {
      int v15 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: lqmDict is NULL",  "WiFiLQAMgrCoalesceUndispatchedLQMEvent");
      }
    }
  }

  else
  {
    int v15 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: WiFiLQAMgrRef is NULL",  "WiFiLQAMgrCoalesceUndispatchedLQMEvent");
    }
  }

  objc_autoreleasePoolPop(v15);
}

CFDictionaryRef sub_10001EB88(uint64_t a1)
{
  if (!a1)
  {
    double v12 = objc_autoreleasePoolPush();
    int v15 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      int v16 = "%s: WiFiLQAMgrRef is NULL";
LABEL_10:
      int v17 = v12;
      objc_msgSend(v15, "WFLog:message:", 4, v16, "WiFiLQAMgrCopyCoalescedUndispatchedLQMEvent");
      double v12 = v17;
    }

LABEL_11:
    CFDictionaryRef Copy = 0LL;
    goto LABEL_5;
  }

  BOOL v1 = *(const __CFDictionary **)(a1 + 152);
  if (!v1)
  {
    double v12 = objc_autoreleasePoolPush();
    int v15 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      int v16 = "%s: coalescedUndispatchedLQMEvent is NULL";
      goto LABEL_10;
    }

    goto LABEL_11;
  }

  CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, v1);
  Value = CFDictionaryGetValue(Copy, @"RSSI");
  int v23 = CFDictionaryGetValue(Copy, @"CCA");
  BOOL v22 = CFDictionaryGetValue(Copy, @"SNR");
  int v21 = CFDictionaryGetValue(Copy, @"TXFAIL");
  int v20 = CFDictionaryGetValue(Copy, @"TXFRAMES");
  unint64_t v19 = CFDictionaryGetValue(Copy, @"TXFWFRAMES");
  uint64_t v3 = CFDictionaryGetValue(Copy, @"TXFWFAIL");
  int v4 = CFDictionaryGetValue(Copy, @"TXRETRANS");
  CFNumberRef v5 = CFDictionaryGetValue(Copy, @"RXFRAMES");
  CFIndex v6 = CFDictionaryGetValue(Copy, @"RXRETRYFRMS");
  uint64_t v7 = CFDictionaryGetValue(Copy, @"RXBEACONFRMS");
  CFIndex v8 = CFDictionaryGetValue(Copy, @"RXBEACONSCHED");
  BOOL v9 = CFDictionaryGetValue(Copy, @"RXRATE");
  BOOL v10 = CFDictionaryGetValue(Copy, @"TXRATE");
  CFNumberRef v11 = CFDictionaryGetValue(Copy, @"TXFBRATE");
  double v12 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    int v18 = v5;
    CFMutableDictionaryRef v13 = v12;
    [(id)qword_100219F60 WFLog:3, "%s: Rssi: %@ Snr:%@ Cca: %@ TxFrames: %@ TxFail: %@ BcnRx: %@ BcnSch: %@  RxFrames: %@ RxRetries: %@ TxRate: %@ Rx Rate: %@ FBRate: %@ TxFwFrms: %@ TxFwFail:%@ TxRetries: %@", "WiFiLQAMgrCopyCoalescedUndispatchedLQMEvent", Value, v22, v23, v20, v21, v7, v8, v18, v6, v10, v9, v11, v19, v3, v4 message];
    double v12 = v13;
  }

      objc_autoreleasePoolPop(v11);
    }

    CFRelease(v9);
    if (v6) {
      goto LABEL_88;
    }
  }

  else
  {
    BOOL v66 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"Device manager not present"];
    }
    objc_autoreleasePoolPop(v66);
    if (v6) {
LABEL_88:
    }
      CFRelease(v6);
  }

  objc_autoreleasePoolPop(context);
}

    objc_autoreleasePoolPop(v7);
    return;
  }

  int v4 = sub_10006C77C(v3);
  if (!v4)
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    CFIndex v8 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      BOOL v9 = "Error copying devices";
      goto LABEL_10;
    }

    goto LABEL_11;
  }

  CFNumberRef v5 = v4;
  CFIndex v6 = sub_10003BEF4(a1, v4);
  if (v6) {
    CFRelease(v6);
  }
  CFRelease(v5);
}

    double v12 = 0LL;
    goto LABEL_33;
  }

  int v15 = objc_autoreleasePoolPush();
  int v16 = v15;
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Filtering WAPI networks",  "__WiFiDeviceProcessScanDoneEvent");
  }
  objc_autoreleasePoolPop(v16);
  int v17 = kCFAllocatorDefault;
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    BOOL v14 = Mutable;
    if (CFArrayGetCount(v12) >= 1)
    {
      unint64_t v19 = 0LL;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v12, v19);
        int v21 = ValueAtIndex;
        if (ValueAtIndex && sub_100098380((BOOL)ValueAtIndex))
        {
          BOOL v22 = v7;
          int v23 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: filtered out WAPI network %@", "__WiFiDeviceProcessScanDoneEvent", sub_100095BC8(v21) message];
          }
          objc_autoreleasePoolPop(v23);
          uint64_t v7 = v22;
        }

        else
        {
          CFArrayAppendValue(v14, v21);
        }

        ++v19;
      }

      while (v19 < CFArrayGetCount(v12));
    }

    CFRelease(v12);
    goto LABEL_25;
  }

    CFNumberRef v5 = v3;
    goto LABEL_12;
  }

    int v4 = (void *)CFRetain(cf);
LABEL_12:
    *(void *)(a1 + 1936) = v4;
    CFIndex v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: updating blacklist: %@", "__WiFiManagerSetUserNotificationBlacklist", cf message];
    }
LABEL_14:
    objc_autoreleasePoolPop(v6);
    return;
  }

  if (([v4 isEqualToDictionary:cf] & 1) == 0)
  {
    CFNumberRef v5 = *(const void **)(a1 + 1936);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 1936) = 0LL;
    }

    goto LABEL_11;
  }

        v17 &= sub_10003A310(v10, v15);
        goto LABEL_15;
      }

      int v16 = v6;
      int v79 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Could not acquire lock newPrefs",  "__WiFiManagerMigratePNLToStandaloneClassC");
      }
    }

    else
    {
      int v16 = v6;
      int v79 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Could not fetch keyList",  "__WiFiManagerMigratePNLToStandaloneClassC");
      }
    }

    objc_autoreleasePoolPop(v79);
    int v17 = 0;
    int v15 = 0;
    goto LABEL_15;
  }

  unsigned __int8 v77 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s:manager is null", "WiFiManagerMigratePNL");
  }
  objc_autoreleasePoolPop(v77);
}

  CFIndex v8 = objc_autoreleasePoolPush();
LABEL_17:
  objc_autoreleasePoolPop(v8);
  double v12 = 0LL;
LABEL_22:
  sub_10009582C((uint64_t)a2, @"UpdateReason", 0LL);
  return v12;
}

  objc_autoreleasePoolPop(v7);
}

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

    CFRelease(v8);
  }

  return 0LL;
}

    CFRelease(v8);
  }

  return 0LL;
}

    CFRelease(v8);
  }

  return 0LL;
}

  CFRelease(v15);
LABEL_12:
  sub_10003A8FC((vm_address_t)a2, a3);
  return 0LL;
}

    CFRelease(v8);
  }

  return 0LL;
}

    CFRelease(v4);
  }

  return 0LL;
}

    sub_10010E744(a1);
    goto LABEL_12;
  }

  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null manager.",  "__WiFiDeviceManagerDpsHUDTimerExpiryHandler");
  }
LABEL_12:
  objc_autoreleasePoolPop(v2);
}

  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v20, 8);
}

  if (!v4) {
    goto LABEL_26;
  }
  int v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  int v16 = (void *)objc_claimAutoreleasedReturnValue([v15 stringForKey:@"DextCrashUserNotification"]);
  int v17 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:2, "%s WiFiDextCrashSoftError UserNotification setting:%@", "WiFiDextCrashSoftErrorPopupDisabled", v16 message];
  }
  objc_autoreleasePoolPop(v17);
  if (v16 && ![v16 caseInsensitiveCompare:@"Disable"])
  {

LABEL_26:
    int v21 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WiFiDextCrashSoftError Disabled",  "WiFiDextCrashedSoftErrorHandler");
    }
LABEL_28:
    objc_autoreleasePoolPop(v21);
    BOOL v22 = 0LL;
    goto LABEL_29;
  }

  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_10013C5B0;
  v25[3] = &unk_1001E6798;
  v25[4] = &v26;
  if ([v4 askToLaunchTapToRadarWithMessage:@"WiFi DriverKit Processs Crash Detected" completionHandler:v25])
  {
    int v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSURL URLWithString:]( &OBJC_CLASS___NSURL,  "URLWithString:",  @"tap-to-radar://new?Title=WiFi%20Dext%20Crash%20Detected&AutoDiagnostics=phone&Description=Dext%20crash%20detected%20Attaching%20coredumps&ComponentID=621547&ComponentName=WiFi%20Connectivity&ComponentVersion=iOS&Classification=Crash/Hang/Data%20Loss&ExtensionIdentifiers=com.apple.DiagnosticExtensions.WiFi"));
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_10013C6A8;
    v24[3] = &unk_1001E6798;
    v24[4] = &v26;
    unint64_t v19 = [v4 tapToRadarWithURL:v18 completionHandler:v24];
    int v20 = *((unsigned __int8 *)v27 + 24);
  }

  else
  {
    int v20 = *((unsigned __int8 *)v27 + 24);
  }

  BOOL v22 = v20 != 0;
LABEL_29:

  _Block_object_dispose(&v26, 8);
  return v22;
}

  return (char)v5;
}

void sub_10001EE08(uint64_t a1, char a2)
{
  if (a1)
  {
    *(_BYTE *)(a1 + 2826) = a2;
  }

  else
  {
    uint64_t v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: WiFiLQAMgrRef is NULL",  "WiFiLQAMgrAwdlRealTimeModeStatus");
    }
    objc_autoreleasePoolPop(v2);
  }

void sub_10001EE78(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(const void **)(a1 + 152);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 152) = 0LL;
    }
  }

  else
  {
    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: WiFiLQAMgrRef is NULL",  "WiFiLQAMgrResetCoalescedUndispatchedLQMEvent");
    }
    objc_autoreleasePoolPop(v3);
  }

uint64_t sub_10001EEF8(uint64_t a1, CFDictionaryRef theDict)
{
  value = 0LL;
  BOOL v57 = 0LL;
  uint64_t result = 4294963396LL;
  int valuePtr = 0;
  if (!a1 || !theDict) {
    return result;
  }
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscPoorRssiThres", (const void **)&v57) && v57)
  {
    CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    *(_DWORD *)(a1 + 644) = valuePtr;
  }

  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscRssiHysterisis", (const void **)&v57) && v57)
  {
    CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    *(_DWORD *)(a1 + 640) = valuePtr + *(_DWORD *)(a1 + 644);
  }

  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscAjoinRssiHysterisis", (const void **)&v57) && v57)
  {
    CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    *(_DWORD *)(a1 + 656) = valuePtr;
  }

  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscNumActiveProbes", (const void **)&v57) && v57)
  {
    CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    *(_DWORD *)(a1 + 884) = valuePtr;
  }

  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscActiveProbePer", (const void **)&v57) && v57)
  {
    CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    float v5 = (double)valuePtr * 0.01;
    *(float *)(a1 + 88_Block_object_dispose((const void *)(v1 - 48), 8) = v5;
  }

  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscCcaThres", (const void **)&v57) && v57)
  {
    CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    *(_BYTE *)(a1 + 921) = valuePtr;
  }

  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscRapidLqmEnable", (const void **)&v57) && v57)
  {
    CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    *(_BYTE *)(a1 + 10_Block_object_dispose((const void *)(v1 - 48), 8) = valuePtr;
  }

  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscSympFailCreditThres", (const void **)&v57) && v57)
  {
    CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    *(_DWORD *)(a1 + 916) = valuePtr;
  }

  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscMode", (const void **)&v57) && v57)
  {
    CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
    *(_DWORD *)(a1 + 16) = valuePtr;
  }

  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscTxPerSigEnable", (const void **)&value) && value)
  {
    Boolean v6 = CFEqual(value, kCFBooleanTrue);
    int v53 = 0LL;
    int v54 = 0LL;
    int v52 = 0LL;
    LODWORD(v50) = 0;
    LODWORD(number) = 0;
    int v51 = 0;
    if (!CFDictionaryGetValueIfPresent(theDict, @"trgDiscTblIndex", (const void **)&v54)
      || !CFDictionaryGetValueIfPresent(theDict, @"trgDiscTxPerThres", (const void **)&v53)
      || !CFDictionaryGetValueIfPresent(theDict, @"trgDiscMinTxFrames", (const void **)&v52)
      || !v54
      || !v53
      || !v52)
    {
      goto LABEL_162;
    }

    CFNumberGetValue((CFNumberRef)v54, kCFNumberIntType, &v50);
    CFNumberGetValue((CFNumberRef)v53, kCFNumberIntType, &number);
    CFNumberGetValue((CFNumberRef)v52, kCFNumberIntType, &v51);
    if ((_DWORD)v50 == 2)
    {
      *(_BYTE *)(a1 + 108_Block_object_dispose((const void *)(v1 - 48), 8) = v6;
      *(_DWORD *)(a1 + 1092) = v51;
      float v8 = (double)(int)number * 0.01;
      *(float *)(a1 + 1096) = v8;
      if (v57) {
        *(_DWORD *)(a1 + 1100) = valuePtr;
      }
    }

    else if ((_DWORD)v50 == 1)
    {
      *(_BYTE *)(a1 + 924) = v6;
      *(_DWORD *)(a1 + 92_Block_object_dispose((const void *)(v1 - 48), 8) = v51;
      float v9 = (double)(int)number * 0.01;
      *(float *)(a1 + 932) = v9;
      if (v57) {
        *(_DWORD *)(a1 + 936) = valuePtr;
      }
    }

    else
    {
      if ((_DWORD)v50) {
        goto LABEL_92;
      }
      *(_BYTE *)(a1 + 716) = v6;
      *(_DWORD *)(a1 + 720) = v51;
      float v7 = (double)(int)number * 0.01;
      *(float *)(a1 + 724) = v7;
      if (v57) {
        *(_DWORD *)(a1 + 72_Block_object_dispose((const void *)(v1 - 48), 8) = valuePtr;
      }
    }
  }

  Boolean v10 = CFEqual(value, kCFBooleanTrue);
  int v53 = 0LL;
  int v54 = 0LL;
  int v52 = 0LL;
  CFNumberRef number = 0LL;
  CFNumberRef v50 = 0LL;
  int v51 = 0;
  uint64_t v47 = 0LL;
  uint64_t v48 = 0LL;
  if (!CFDictionaryGetValueIfPresent(theDict, @"trgDiscTblIndex", (const void **)&v54)
    || !CFDictionaryGetValueIfPresent(theDict, @"trgDiscFwTxPerThres", (const void **)&v53)
    || !CFDictionaryGetValueIfPresent(theDict, @"trgDiscMinFwTxFrames", (const void **)&v52)
    || !v54
    || !v53
    || !v52)
  {
LABEL_162:
    CFMutableDictionaryRef v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: TrgDiscTxPerThres - Missing Params\n",  "WiFiLQAMgrSetTrgDiscParams",  v46);
    }
LABEL_164:
    objc_autoreleasePoolPop(v13);
    return 0LL;
  }

  CFNumberGetValue((CFNumberRef)v54, kCFNumberIntType, &v51);
  CFNumberGetValue((CFNumberRef)v53, kCFNumberIntType, (char *)&v48 + 4);
  CFNumberGetValue((CFNumberRef)v52, kCFNumberIntType, &v48);
  switch(v51)
  {
    case 2:
      *(_BYTE *)(a1 + 1152) = v10;
      *(_DWORD *)(a1 + 1156) = v48;
      float v14 = (double)SHIDWORD(v48) * 0.01;
      *(float *)(a1 + 1160) = v14;
      if (number)
      {
        float v15 = (double)SHIDWORD(v47) * 0.01;
        *(float *)(a1 + 116_Block_object_dispose((const void *)(v1 - 48), 8) = v15;
      }

      if (v50) {
        *(_DWORD *)(a1 + 1164) = v47;
      }
      break;
    case 1:
      *(_BYTE *)(a1 + 98_Block_object_dispose((const void *)(v1 - 48), 8) = v10;
      *(_DWORD *)(a1 + 992) = v48;
      float v16 = (double)SHIDWORD(v48) * 0.01;
      *(float *)(a1 + 996) = v16;
      if (number)
      {
        float v17 = (double)SHIDWORD(v47) * 0.01;
        *(float *)(a1 + 1004) = v17;
      }

      if (v50) {
        *(_DWORD *)(a1 + 1000) = v47;
      }
      break;
    case 0:
      *(_BYTE *)(a1 + 780) = v10;
      *(_DWORD *)(a1 + 784) = v48;
      float v11 = (double)SHIDWORD(v48) * 0.01;
      *(float *)(a1 + 78_Block_object_dispose((const void *)(v1 - 48), 8) = v11;
      if (number)
      {
        float v12 = (double)SHIDWORD(v47) * 0.01;
        *(float *)(a1 + 796) = v12;
      }

      if (v50) {
        *(_DWORD *)(a1 + 792) = v47;
      }
      break;
    default:
LABEL_92:
      CFMutableDictionaryRef v13 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: TrgDiscTxPerThres - Invalid TblIndex <0, %d>\n",  "WiFiLQAMgrSetTrgDiscParams",  3);
      }
      goto LABEL_164;
  }

LABEL_102:
  if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscBcnPerSigEnable", (const void **)&value))
  {
    if (value)
    {
      Boolean v18 = CFEqual(value, kCFBooleanTrue);
      int v53 = 0LL;
      int v54 = 0LL;
      LODWORD(v52) = 0;
      LODWORD(v50) = 0;
      if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscBcnPerThres", (const void **)&v54))
      {
        if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscMinBcnSched", (const void **)&v53))
        {
          if (v54 && v53)
          {
            CFNumberGetValue((CFNumberRef)v54, kCFNumberIntType, &v52);
            CFNumberGetValue((CFNumberRef)v53, kCFNumberIntType, &v50);
            *(_BYTE *)(a1 + 860) = v18;
            int v19 = (int)v52;
            *(_DWORD *)(a1 + 864) = (_DWORD)v50;
            float v20 = (double)v19 * 0.01;
            *(float *)(a1 + 86_Block_object_dispose((const void *)(v1 - 48), 8) = v20;
            if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscTxPerThres", (const void **)&v57) && v57)
            {
              CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
              float v21 = (double)valuePtr * 0.01;
              *(float *)(a1 + 876) = v21;
            }

            if (CFDictionaryGetValueIfPresent(theDict, @"trgDiscMinTxFrames", (const void **)&v57) && v57)
            {
              CFNumberGetValue((CFNumberRef)v57, kCFNumberIntType, &valuePtr);
              *(_DWORD *)(a1 + 872) = valuePtr;
            }
          }

          goto LABEL_114;
        }
      }
    }

    goto LABEL_162;
  }

          uint64_t v81 = v35;
          goto LABEL_156;
        }
      }

      return 4294963396LL;
    case 0xA:
      int v125 = *(const void **)(v337 + 8);
      int v124 = *(const void **)(v337 + 16);
      int v127 = *(void (**)(uint64_t, const void *, uint64_t, uint64_t))(v337 + 24);
      int v126 = *(void *)(v337 + 32);
      uint64_t v128 = *(const __CFString **)(v337 + 40);
      unsigned int v129 = sub_10004FB0C(a2);
      if (v129)
      {
        uint64_t v130 = (uint64_t)v129;
        *(void *)(a2 + 468_Block_object_dispose((const void *)(v1 - 48), 8) = v127;
        *(void *)(a2 + 4696) = v126;
        uint64_t v131 = *(const void **)(a2 + 4704);
        if (v131)
        {
          CFRelease(v131);
          *(void *)(a2 + 4704) = 0LL;
        }

        if (v124) {
          unsigned int v132 = CFRetain(v124);
        }
        else {
          unsigned int v132 = 0LL;
        }
        *(void *)(a2 + 4704) = v132;
        uint64_t v164 = *(const void **)(a2 + 4712);
        if (v164)
        {
          CFRelease(v164);
          *(void *)(a2 + 4712) = 0LL;
        }

        if (v128) {
          BOOL v165 = CFRetain(v128);
        }
        else {
          BOOL v165 = 0LL;
        }
        *(void *)(a2 + 4712) = v165;
        *(CFAbsoluteTime *)(a2 + 4720) = CFAbsoluteTimeGetCurrent();
        float v9 = sub_100132600( v130,  v125,  (const __CFDictionary *)v124,  (void (*)(void, const void *, void, void))sub_1000576B8,  a2,  v128);
        if (!(_DWORD)v9) {
          return v9;
        }
        CFIndex v166 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: WiFiVirtualInterfaceStartAwdl() returned error %d.",  "__WiFiDeviceStartAwdlQueued",  v9);
        }
      }

      else
      {
        CFIndex v166 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: not an AWDL interface.",  "__WiFiDeviceStartAwdlQueued");
        }
        float v9 = 4294963393LL;
      }

      objc_autoreleasePoolPop(v166);
      if (v127)
      {
        v127(a2, v125, v9, v126);
        sub_10004F9BC(a2);
        *(void *)(a2 + 468_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
        *(void *)(a2 + 4696) = 0LL;
        uint64_t v298 = *(const void **)(a2 + 4704);
        if (v298)
        {
          CFRelease(v298);
          *(void *)(a2 + 4704) = 0LL;
        }

        v299 = *(const void **)(a2 + 4712);
        if (v299)
        {
          CFRelease(v299);
          *(void *)(a2 + 4712) = 0LL;
        }
      }

      return v9;
    case 0xB:
      CFNumberRef v36 = *(const void **)(v337 + 8);
      uint64_t v35 = *(__CFArray **)(v337 + 16);
      float v9 = sub_1000577BC( a2,  v36,  (uint64_t)v35,  *(void (**)(uint64_t, const void *, uint64_t, uint64_t))(v337 + 24),  *(void *)(v337 + 32));
      sub_100128C88(*(void *)(a2 + 176), 0LL, 0LL, 0LL);
      if (v36) {
        CFRelease(v36);
      }
      goto LABEL_101;
    case 0xC:
      int v51 = *(void *)(v337 + 8);
      int v52 = *(const __CFArray **)(v337 + 16);
      LODWORD(v2) = *(_DWORD *)(v337 + 40);
      *(_OWORD *)(a2 + 5144) = *(_OWORD *)(v337 + 24);
      CFArrayRef theArray = v51;
      if (v51)
      {
        int v53 = kCFAllocatorDefault;
        if (v52 && CFArrayGetCount(v52))
        {
          int v54 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
          if (CFArrayGetCount(v52) >= 1)
          {
            int v55 = 0LL;
            do
            {
              double v56 = (const __CFDictionary *)CFArrayGetValueAtIndex(v52, v55);
              if (v56)
              {
                BOOL v57 = CFDictionaryCreateMutableCopy(v53, 0LL, v56);
                if (v57)
                {
                  int v58 = v57;
                  LOBYTE(buf) = 0;
                  BOOL v59 = (const __CFNumber *)CFDictionaryGetValue(v57, @"RANGING_PEER_FLAGS");
                  if (v59) {
                    CFNumberGetValue(v59, kCFNumberSInt8Type, &buf);
                  }
                  if (*(_BYTE *)(a2 + 5956)) {
                    LOBYTE(buf) = buf | 2;
                  }
                  if (*(_BYTE *)(a2 + 5957)) {
                    LOBYTE(buf) = buf | 8;
                  }
                  if ((MGGetBoolAnswer(@"InternalBuild") & 1) == 0 && sub_10005DCE0())
                  {
                    BOOL v60 = objc_autoreleasePoolPush();
                    if (qword_100219F60) {
                      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: debug profile installed, enabling ranging log dump",  "__WiFiDeviceRangingStartAsyncQueued");
                    }
                    objc_autoreleasePoolPop(v60);
                    LOBYTE(buf) = buf | 2;
                    int v53 = kCFAllocatorDefault;
                  }

                  BOOL v61 = CFNumberCreate(v53, kCFNumberSInt8Type, &buf);
                  if (v61)
                  {
                    BOOL v62 = v61;
                    CFDictionarySetValue(v58, @"RANGING_PEER_FLAGS", v61);
                    CFRelease(v62);
                  }

                  CFArrayAppendValue(v54, v58);
                  CFRelease(v58);
                  int v53 = kCFAllocatorDefault;
                }
              }

              ++v55;
            }

            while (v55 < CFArrayGetCount(v52));
          }

          __int128 v63 = objc_autoreleasePoolPush();
          CFIndex v64 = theArray;
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "Attempting APPLE80211_IOC_RANGING_START on %@ to %ld peers", theArray, CFArrayGetCount(v54) message];
          }
          v65 = (double)v2;
          objc_autoreleasePoolPop(v63);
          for (mm = 6; ; --mm)
          {
            uint64_t v67 = Apple80211RangeAsync(*(void *)(a2 + 16), v54, v65);
            float v9 = v67;
            if ((int)v67 <= 15)
            {
              if ((_DWORD)v67 != -3905) {
                break;
              }
            }

            else if ((_DWORD)v67 != 61 && (_DWORD)v67 != 16)
            {
              goto LABEL_153;
            }

            if (!mm) {
              break;
            }
            usleep(0x7A120u);
          }

          if (!(_DWORD)v67) {
            goto LABEL_154;
          }
LABEL_153:
          sub_100046714((uint64_t *)a2, v64, 0LL, v9);
LABEL_154:
          if (v54)
          {
            uint64_t v81 = v54;
LABEL_156:
            CFRelease(v81);
          }

          return v9;
        }

        v297 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: empty peers.",  "__WiFiDeviceRangingStartAsyncQueued");
        }
      }

      else
      {
        v297 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null ifName.",  "__WiFiDeviceRangingStartAsyncQueued");
        }
      }

      objc_autoreleasePoolPop(v297);
      int v54 = 0LL;
      float v9 = 4294963396LL;
      CFIndex v64 = theArray;
      goto LABEL_153;
    case 0xD:
      uint64_t v90 = *(const void **)(v337 + 8);
      LODWORD(buf) = *(void *)(v337 + 16);
      BOOL v116 = sub_1000446C8(a2, v90);
      if (v116)
      {
        v117 = CFGetTypeID(v116);
        if (v117 == sub_10012FE70())
        {
          int v93 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:4, "Set display State command is not supported by %@", v90 message];
          }
LABEL_135:
          uint64_t v118 = v93;
LABEL_141:
          objc_autoreleasePoolPop(v118);
          float v9 = 4294963396LL;
        }

        else
        {
          for (nn = 6; ; --nn)
          {
            uint64_t v156 = Apple80211Set(*(void *)(a2 + 16), 365LL, 0LL, &buf, 4LL);
            float v9 = v156;
            if ((_DWORD)v156 != -3905 && (_DWORD)v156 != 61 && (_DWORD)v156 != 16) {
              break;
            }
            if (!nn) {
              break;
            }
            usleep(0x7A120u);
          }
        }

  float v14 = *(void **)(a1 + 176);
  if (v14) {
    sub_100128F78(v14, *(dispatch_queue_t *)(a1 + 64), (void (__cdecl *)(void *))sub_10004B57C, (void *)a1);
  }
  sub_10004B73C(a1);
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    context.version = 6LL;
    float v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &context);
    if (v16)
    {
      float v17 = v16;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      if (Mutable)
      {
        int v19 = Mutable;
        CFDictionaryAddValue(Mutable, @"VIRT_IF_ROLE", v17);
        float v20 = *(const void **)(a1 + 5976);
        if (v20)
        {
          CFRelease(v20);
          *(void *)(a1 + 5976) = 0LL;
        }

        *(void *)(a1 + 5976) = sub_10012FED8( a1,  (uint64_t)kCFAllocatorDefault,  v19,  *(void *)(a1 + 64),  (void (*)(uint64_t, _OWORD *))sub_10005CF98);
        CFRelease(v17);
        float v21 = v19;
      }

      else
      {
        CFNumberRef v33 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null intfDict.",  "__WiFiDeviceCreateAwdlInterface");
        }
        objc_autoreleasePoolPop(v33);
        float v21 = v17;
      }

      CFRelease(v21);
      goto LABEL_114;
    }

    float v15 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null role.", "__WiFiDeviceCreateAwdlInterface");
    }
  }

  else
  {
    float v15 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL is not supported",  "WiFiDeviceScheduleWithQueue");
    }
  }

  objc_autoreleasePoolPop(v15);
LABEL_114:
  if (*(char *)(a1 + 28) < 0)
  {
    context.version = (CFIndex)@"ap1";
    int valuePtr = 7LL;
    BOOL v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
    if (v22)
    {
      int v23 = v22;
      unint64_t v24 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      if (v24)
      {
        int v25 = v24;
        CFDictionaryAddValue(v24, @"VIRT_IF_ROLE", v23);
        CFDictionaryAddValue(v25, @"VIRT_IF_NAME", @"ap1");
        CFNumberRef v27 = sub_10004F408(a1, v26, v25, &context);
        uint64_t v28 = objc_autoreleasePoolPush();
        if ((_DWORD)v27)
        {
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:4, "Error creating %@  interface %d", context.version, v27 message];
          }
        }

        else if (qword_100219F60)
        {
          [(id)qword_100219F60 WFLog:4, "%s: Created %@ interface", "__WiFiDeviceCreateHostApInterface", context.version message];
        }

        objc_autoreleasePoolPop(v28);
        CFRelease(v23);
        uint64_t v29 = v25;
      }

      else
      {
        uint64_t v35 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null intfDict.",  "__WiFiDeviceCreateHostApInterface");
        }
        objc_autoreleasePoolPop(v35);
        uint64_t v29 = v23;
      }

      CFRelease(v29);
    }

    else
    {
      uint64_t v34 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null role.", "__WiFiDeviceCreateHostApInterface");
      }
      objc_autoreleasePoolPop(v34);
    }
  }

  sub_10004B9D8(a1);
  *(_BYTE *)(a1 + 5904) = 1;
  CFNumberRef v30 = *(unsigned int (**)(uint64_t, void))(a1 + 4968);
  if (v30 && v30(a1, *(void *)(a1 + 4976))) {
    sub_10004BDEC(a1, 1);
  }
  CFNumberRef v31 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: exiting", "WiFiDeviceScheduleWithQueue");
  }
  objc_autoreleasePoolPop(v31);
}

          CFRelease(Mutable);
          goto LABEL_103;
        }

        uint64_t v35 = v34;
        if (sub_100095318((BOOL)v5))
        {
          if ((v35 & 1) != 0) {
            goto LABEL_56;
          }
        }

        else
        {
          else {
            uint64_t v41 = 1;
          }
          if ((v41 & 1) != 0) {
            goto LABEL_56;
          }
        }

        v72.id location = 0LL;
        v72.length = v32;
        if (!CFArrayContainsValue(Mutable, v72, v5))
        {
          CFArrayInsertValueAtIndex(Mutable, 0LL, v5);
          BOOL v60 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: adding Captive/HS2.0 network %@ to PNO list", "WiFiDeviceManagerSetBackgroundScan", sub_100095BC8(v5) message];
          }
          objc_autoreleasePoolPop(v60);
          ++v32;
          int v40 = 1;
          goto LABEL_57;
        }

LABEL_114:
  BOOL v22 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: TrgDiscConfig - RSSI Configs\n",  "WiFiLQAMgrSetTrgDiscParams");
  }
  objc_autoreleasePoolPop(v22);
  int v23 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s:--------------------------------------------------\n",  "WiFiLQAMgrSetTrgDiscParams");
  }
  objc_autoreleasePoolPop(v23);
  unint64_t v24 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: RssiBrcks: {%2d %2d %2d} GoodRssi: %3d ajRssi: %3d lqaEnable: %1d monitorOnly: %1d wifiFallPref: %1d lqaMode: %1d askToTD: %1d rnf: %d atd: %d\n",  "WiFiLQAMgrSetTrgDiscParams",  *(unsigned int *)(a1 + 644),  *(unsigned int *)(a1 + 648),  *(unsigned int *)(a1 + 652),  *(unsigned int *)(a1 + 640),  *(unsigned int *)(a1 + 656),  *(unsigned __int8 *)(a1 + 632),  *(unsigned __int8 *)(a1 + 633),  *(unsigned __int8 *)(a1 + 634),  *(unsigned int *)(a1 + 16),  *(unsigned __int8 *)(a1 + 636),  *(unsigned __int8 *)(a1 + 638),  *(unsigned __int8 *)(a1 + 637));
  }
  objc_autoreleasePoolPop(v24);
  int v25 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s:--------------------------------------------------\n",  "WiFiLQAMgrSetTrgDiscParams");
  }
  objc_autoreleasePoolPop(v25);
  unint64_t v26 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: TrgDiscConfig - Tx PER Sig\n",  "WiFiLQAMgrSetTrgDiscParams");
  }
  objc_autoreleasePoolPop(v26);
  CFNumberRef v27 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s:--------------------------------------------------\n",  "WiFiLQAMgrSetTrgDiscParams");
  }
  objc_autoreleasePoolPop(v27);
  uint64_t v28 = 0LL;
  uint64_t v29 = 0LL;
  do
  {
    CFNumberRef v30 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s:Indx: %1d Enable: %1d TxPer: {%2.1f %2.1f %2.1f} MinTxFrms: {%2u %2u %2u} RetryFactor: {%2u %2u %2u}\n",  "WiFiLQAMgrSetTrgDiscParams",  v29,  *(unsigned __int8 *)(a1 + v28 + 716),  (float)(*(float *)(a1 + v28 + 724) * 100.0),  (float)(*(float *)(a1 + v28 + 932) * 100.0),  (float)(*(float *)(a1 + v28 + 1096) * 100.0),  *(unsigned int *)(a1 + v28 + 720),  *(unsigned int *)(a1 + v28 + 928),  *(unsigned int *)(a1 + v28 + 1092),  *(unsigned int *)(a1 + v28 + 728),  *(unsigned int *)(a1 + v28 + 936),  *(unsigned int *)(a1 + v28 + 1100));
    }
    objc_autoreleasePoolPop(v30);
    uint64_t v29 = (v29 + 1);
    v28 += 16LL;
  }

  while (v28 != 64);
  CFNumberRef v31 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s:--------------------------------------------------\n",  "WiFiLQAMgrSetTrgDiscParams");
  }
  objc_autoreleasePoolPop(v31);
  CFNumberRef v32 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: TrgDiscConfig - FW Tx PER Sig\n",  "WiFiLQAMgrSetTrgDiscParams");
  }
  objc_autoreleasePoolPop(v32);
  CFNumberRef v33 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s:--------------------------------------------------\n",  "WiFiLQAMgrSetTrgDiscParams");
  }
  objc_autoreleasePoolPop(v33);
  uint64_t v34 = 0LL;
  uint64_t v35 = 0LL;
  do
  {
    CFNumberRef v36 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s:Indx: %1d Enable: %1d FwTxPer: {%2.1f %2.1f %2.1f} FwMinTxFrms: {%2u %2u %2u} TxPer: {%02.1f %02.1f %02.1f} m inHostFrames: {%2u %2u %2u}\n",  "WiFiLQAMgrSetTrgDiscParams",  v35,  *(unsigned __int8 *)(a1 + v34 + 780),  (float)(*(float *)(a1 + v34 + 788) * 100.0),  (float)(*(float *)(a1 + v34 + 996) * 100.0),  (float)(*(float *)(a1 + v34 + 1160) * 100.0),  *(unsigned int *)(a1 + v34 + 784),  *(unsigned int *)(a1 + v34 + 992),  *(unsigned int *)(a1 + v34 + 1156),  (float)(*(float *)(a1 + v34 + 796) * 100.0),  (float)(*(float *)(a1 + v34 + 1004) * 100.0),  (float)(*(float *)(a1 + v34 + 1168) * 100.0),  *(unsigned int *)(a1 + v34 + 792),  *(unsigned int *)(a1 + v34 + 1000),  *(unsigned int *)(a1 + v34 + 1164));
    }
    objc_autoreleasePoolPop(v36);
    uint64_t v35 = (v35 + 1);
    v34 += 20LL;
  }

  while (v34 != 80);
  CFNumberRef v37 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s:--------------------------------------------------\n",  "WiFiLQAMgrSetTrgDiscParams");
  }
  objc_autoreleasePoolPop(v37);
  uint64_t v38 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: TrgDiscConfig - BCN PER Sig\n",  "WiFiLQAMgrSetTrgDiscParams");
  }
  objc_autoreleasePoolPop(v38);
  uint64_t v39 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s:--------------------------------------------------\n",  "WiFiLQAMgrSetTrgDiscParams");
  }
  objc_autoreleasePoolPop(v39);
  int v40 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Enable: %1d BcnTxPer: {%2.1f %2.1f %2.1f} MinBcnSched: {%2d %2d %2d} TxPer: {%2.1f %2.1f %2.1f} minHostFrames: {%2u %2u %2u}\n",  "WiFiLQAMgrSetTrgDiscParams",  *(unsigned __int8 *)(a1 + 860),  (float)(*(float *)(a1 + 868) * 100.0),  (float)(*(float *)(a1 + 1076) * 100.0),  (float)(*(float *)(a1 + 1240) * 100.0),  *(unsigned int *)(a1 + 864),  *(unsigned int *)(a1 + 1072),  *(unsigned int *)(a1 + 1236),  (float)(*(float *)(a1 + 876) * 100.0),  (float)(*(float *)(a1 + 1084) * 100.0),  (float)(*(float *)(a1 + 1248) * 100.0),  *(unsigned int *)(a1 + 872),  *(unsigned int *)(a1 + 1080),  *(unsigned int *)(a1 + 1244));
  }
  objc_autoreleasePoolPop(v40);
  uint64_t v41 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s:--------------------------------------------------\n",  "WiFiLQAMgrSetTrgDiscParams");
  }
  objc_autoreleasePoolPop(v41);
  uint64_t v42 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: TrgDiscConfig - Misc Sig\n",  "WiFiLQAMgrSetTrgDiscParams");
  }
  objc_autoreleasePoolPop(v42);
  uint64_t v43 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s:--------------------------------------------------\n",  "WiFiLQAMgrSetTrgDiscParams");
  }
  objc_autoreleasePoolPop(v43);
  uint64_t v44 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: ActPrEnable: %1d NumActProbes: %3d ActPrTxPer: %2.1f simulateProbeFailureState: %1d sympSigEnable: %1d sympThr es: %3d GwArpSigEnable: %1d gwArpTime: %f ccaSigEnable: %1d ccaThres: %3d\n",  "WiFiLQAMgrSetTrgDiscParams",  *(unsigned __int8 *)(a1 + 880),  *(unsigned int *)(a1 + 884),  (float)(*(float *)(a1 + 888) * 100.0),  *(unsigned __int8 *)(a1 + 635),  *(unsigned __int8 *)(a1 + 912),  *(unsigned int *)(a1 + 916),  *(unsigned __int8 *)(a1 + 896),  *(void *)(a1 + 904),  *(unsigned __int8 *)(a1 + 920),  *(unsigned __int8 *)(a1 + 921));
  }
  objc_autoreleasePoolPop(v44);
  int v45 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s:--------------------------------------------------\n",  "WiFiLQAMgrSetTrgDiscParams");
  }
  objc_autoreleasePoolPop(v45);
  return 4294963396LL;
}

uint64_t sub_10001FEF8(uint64_t a1, __int16 a2)
{
  if (a1)
  {
    *(_WORD *)(a1 + 2892) = a2;
    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "[TrafficEngineering]: Critical AppState = %d NonCritical AppState = %d",  a2,  HIBYTE(a2));
    }
    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManagerRef is NULL",  "WiFiLQAMgrSetLQATrafficConfig");
    }
    uint64_t v4 = 4294963396LL;
  }

  objc_autoreleasePoolPop(v3);
  return v4;
}

__CFDictionary *sub_10001FFA4(const UInt8 *a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFDataRef v3 = CFDataCreate(kCFAllocatorDefault, a1 + 2856, 8LL);
    if (v3)
    {
      CFDataRef v4 = v3;
      CFDictionaryAddValue(Mutable, @"BSSID", v3);
      CFRelease(v4);
      CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, a1 + 2864);
      if (!v5) {
        goto LABEL_12;
      }
      CFNumberRef v6 = v5;
      CFDictionarySetValue(Mutable, @"LINK_HEALTH", v5);
      CFRelease(v6);
      CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, a1 + 2872);
      if (!v7) {
        goto LABEL_12;
      }
      CFNumberRef v8 = v7;
      CFDictionarySetValue(Mutable, @"CHANNEL", v7);
      CFRelease(v8);
      CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, a1 + 2876);
      if (!v9) {
        goto LABEL_12;
      }
      CFNumberRef v10 = v9;
      CFDictionarySetValue(Mutable, @"CHANNEL_WIDTH", v9);
      CFRelease(v10);
      CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, a1 + 2885);
      if (!v11) {
        goto LABEL_12;
      }
      CFNumberRef v12 = v11;
      CFDictionarySetValue(Mutable, @"CCA_SELF_TOTAL", v11);
      CFRelease(v12);
      CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, a1 + 2886);
      if (!v13) {
        goto LABEL_12;
      }
      CFNumberRef v14 = v13;
      CFDictionarySetValue(Mutable, @"CCA_OTHER_TOTAL", v13);
      CFRelease(v14);
      CFNumberRef v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, a1 + 2887);
      if (!v15) {
        goto LABEL_12;
      }
      CFNumberRef v16 = v15;
      CFDictionarySetValue(Mutable, @"CCA_INTERFERENCE_TOTAL", v15);
      CFRelease(v16);
      CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, a1 + 2880);
      if (v17)
      {
        CFNumberRef v18 = v17;
        CFDictionarySetValue(Mutable, @"RSSI", v17);
        CFRelease(v18);
      }

      else
      {
LABEL_12:
        CFRelease(Mutable);
        return 0LL;
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 136315138;
      float v21 = "WiFiLQAMgrGetCurLinkHealthDictionary";
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%s: bssid allocation Failed!\n",  (uint8_t *)&v20,  0xCu);
    }
  }

  return Mutable;
}

uint64_t sub_100020238(uint64_t a1, void *a2)
{
  uint64_t result = sub_1000550E0(*(void *)(a1 + 32));
  if ((_DWORD)result != 1) {
    return result;
  }
  CFNumberRef v5 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "[TrafficEngineering]: Critical App Event %@", a2 message];
  }
  objc_autoreleasePoolPop(v5);
  unsigned int v6 = *(_DWORD *)(a1 + 2908);
  ++dword_100219834;
  id v7 = [a2 objectForKey:@"CHANNEL"];
  id v8 = [a2 objectForKey:@"RSSI"];
  id v9 = [a2 objectForKey:@"BSSID"];
  id v10 = [a2 objectForKey:@"LINK_HEALTH"];
  CFNumberRef v11 = sub_1000951FC(*(void *)(a1 + 48), @"BSSID");
  id v12 = [a2 objectForKey:@"CRITICAL_TRAFFIC_STATE"];
  unsigned __int16 v13 = (unsigned __int16)[v7 intValue];
  unsigned int v14 = [v8 intValue];
  unsigned __int16 v15 = (unsigned __int16)[v10 intValue];
  unsigned __int16 v16 = (unsigned __int16)[v12 intValue];
  *(CFAbsoluteTime *)(a1 + 2920) = CFAbsoluteTimeGetCurrent();
  if (*(unsigned __int16 *)(a1 + 2840) != v13
    || (uint64_t result = (uint64_t)[v9 isEqual:v11], (result & 1) == 0))
  {
    CFNumberRef v17 = objc_autoreleasePoolPush();
    CFNumberRef v18 = (void *)qword_100219F60;
    if (!qword_100219F60)
    {
LABEL_12:
      objc_autoreleasePoolPop(v17);
      unsigned int v6 = 1;
      goto LABEL_13;
    }

    int v19 = "[TrafficEngineering]: Peer on different BSS, Switch/Continue default behavior";
LABEL_11:
    [v18 WFLog:3 message:v19];
    goto LABEL_12;
  }

  if (!v16)
  {
    CFNumberRef v17 = objc_autoreleasePoolPush();
    CFNumberRef v18 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_12;
    }
    int v19 = "[TrafficEngineering]: Critical App terminated, Revert to default behavior";
    goto LABEL_11;
  }

  switch(v15)
  {
    case 1u:
    case 8u:
      unsigned int v6 = 1;
      break;
    case 2u:
      unsigned int v6 = 2;
      break;
    case 4u:
      else {
        unsigned int v6 = 4;
      }
      break;
    default:
      break;
  }

  if (*(_DWORD *)(a1 + 2908) != v6)
  {
    if (*(_BYTE *)(a1 + 2889) == 1)
    {
      if (v6 > 4 || ((1 << v6) & 0x16) == 0) {
        goto LABEL_14;
      }
    }

    else if (v6 != 1)
    {
      goto LABEL_14;
    }

LABEL_13:
    uint64_t result = sub_1000550EC(*(void *)(a1 + 32), v6);
LABEL_14:
    dword_100219834 = 0;
  }

  return result;
}

    CFRelease(v3);
  }

  else
  {
    id v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Failed to create dict",  "WiFiDeviceSetSoftApCsaNanPh");
    }
    objc_autoreleasePoolPop(v10);
  }

  if (v18) {
    v18(a6, a4, a3, a5, *(void *)(a6 + 5504), a7, v20, a9, v16);
  }
}

        ;
      }
    }
  }

  else
  {
    unsigned __int16 v15 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4 message:"No GAS responses found"];
    }
    objc_autoreleasePoolPop(v15);
  }

  CFRelease(v6);
  CFRelease(v8);
  if (!(_DWORD)v11) {
    goto LABEL_87;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    CFNumberRef v50 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%@ propertyDictionaryRef alloc failed", v2 message];
    }
LABEL_91:
    objc_autoreleasePoolPop(v50);
    return;
  }

  unsigned int v14 = Mutable;
  CFDictionarySetValue(Mutable, @"IOInterfaceName", v2);
  unsigned __int16 v15 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v15)
  {
    unsigned __int16 v16 = v15;
    CFDictionarySetValue(v15, @"IOPropertyMatch", v14);
    CFNumberRef v17 = 32;
    while (1)
    {
      CFRetain(v16);
      MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v16);
      if ((_DWORD)MatchingService) {
        break;
      }
      usleep(0x2710u);
      if (!--v17)
      {
        int v19 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: No Matching Service Found for interface %@", "__WiFiManagerDeviceAddedCallback", v2 message];
        }
        objc_autoreleasePoolPop(v19);
        int v20 = 0LL;
LABEL_82:
        CFRelease(v16);
        CFRelease(v14);
        if (v20)
        {
          CFNumberRef v49 = (__CFDictionary *)v20;
          goto LABEL_84;
        }

        return;
      }
    }

    float v21 = MatchingService;
    CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty( MatchingService,  @"IO80211InterfaceRole",  kCFAllocatorDefault,  0);
    int v55 = CFProperty;
    double v56 = v14;
    if (!CFProperty || CFStringCompare(CFProperty, @"Infrastructure", 0LL))
    {
      uint64_t v35 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: %@ is a virtual IO80211 interface", "__WiFiManagerDeviceAddedCallback", v2 message];
      }
      goto LABEL_80;
    }

    -[WiFiUserInteractionMonitor startMonitoringInterface:]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "startMonitoringInterface:",  v2);
    int v23 = sub_100040F4C(kCFAllocatorDefault, v21);
    if (!v23) {
      goto LABEL_81;
    }
    unint64_t v24 = (const void *)v23;
    int v25 = sub_10003A25C(*(const __SCPreferences **)(a1 + 904));
    if (!v25)
    {
LABEL_45:
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 96), v24);
      CFNumberRef v36 = sub_1000BDD64((uint64_t)v4, v24, *(dispatch_queue_s **)(a1 + 32));
      if (v36)
      {
        CFNumberRef v37 = (void *)v36;
        CFRelease(v24);
        CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), v37);
        context = a1;
        BOOL v59 = 0xAAAAAAAA00000000LL;
        BOOL v60 = (int *)(a1 + 20);
        BOOL v61 = 1LL;
        sub_1000D1948((uint64_t)v37, (uint64_t)sub_100086CB0, a1);
        sub_1000D1960((uint64_t)v37, (uint64_t)sub_100086F54, a1);
        sub_1000D1954((uint64_t)v37, (uint64_t)sub_100086F5C, a1);
        sub_1000D196C((uint64_t)v37, (uint64_t)sub_100086FF8, a1);
        sub_1000D1978((uint64_t)v37, (uint64_t)sub_10008766C, a1);
        sub_1000D1984((uint64_t)v37, (uint64_t)sub_100087A2C, a1);
        sub_1000D1990((uint64_t)v37, (uint64_t)sub_100087AC8, a1);
        sub_1000D199C((uint64_t)v37, (uint64_t)sub_100087C50, a1);
        sub_1000D19A8((uint64_t)v37, (uint64_t)sub_100087CD0, a1);
        sub_1000D19C0((uint64_t)v37, (uint64_t)sub_100087D64, a1);
        sub_1000D18E8((uint64_t)v37, (uint64_t)sub_100087D94, a1);
        sub_1000D18F4((uint64_t)v37, (uint64_t)sub_100087E58, a1);
        sub_1000D190C((uint64_t)v37, (uint64_t)sub_100087ED4, a1);
        sub_1000D1918((uint64_t)v37, (uint64_t)sub_100088018, a1);
        sub_1000D1924((uint64_t)v37, (uint64_t)sub_100088268, a1);
        sub_1000D1930((uint64_t)v37, (uint64_t)sub_1000883C8, a1);
        sub_1000D193C((uint64_t)v37, (uint64_t)sub_1000885B0, a1);
        sub_1000D19B4((uint64_t)v37, (uint64_t)sub_10008878C, a1);
        sub_1000D19E4((uint64_t)v37, (uint64_t)sub_100088B38, a1);
        sub_1000D19F0((uint64_t)v37, (uint64_t)sub_100088B50, a1);
        sub_1000D19FC((uint64_t)v37, (uint64_t)sub_100088B88, a1);
        sub_1000D1A08((uint64_t)v37, (uint64_t)sub_100088C4C, a1);
        sub_1000D1A14((uint64_t)v37, (uint64_t)sub_100088C88, a1);
        sub_1000D1A20((uint64_t)v37, (uint64_t)sub_100088CC4, a1);
        sub_1000D1A2C((uint64_t)v37, (uint64_t)sub_100088D00, a1);
        sub_1000D1A38((uint64_t)v37, (uint64_t)sub_100088D3C, a1);
        sub_1000D1A44((uint64_t)v37, (uint64_t)sub_100088DBC, a1);
        sub_1000D1A50((uint64_t)v37, (uint64_t)sub_100089168, a1);
        sub_1000D1A5C((uint64_t)v37, (uint64_t)sub_1000891A4, a1);
        sub_10004C6EC((uint64_t)v37, (uint64_t)sub_1000891E4, a1);
        sub_10004C794((uint64_t)v37, (uint64_t)sub_10008922C, a1);
        sub_10004C6F8((uint64_t)v37, (uint64_t)sub_10008926C, a1);
        sub_10004C8F0((uint64_t)v37, (uint64_t)sub_1000894C8, a1);
        sub_10004C7C4((uint64_t)v37, (uint64_t)sub_1000895C4, a1);
        sub_1000D1900((uint64_t)v37, (uint64_t)nullsub_5, a1);
        sub_1000D1A98((uint64_t)v37, (uint64_t)sub_1000895F8, a1);
        sub_1000D1AA4((uint64_t)v37, (uint64_t)sub_10008961C, a1);
        sub_10004C7AC((uint64_t)v37, (uint64_t)sub_1000896D0, a1);
        sub_10004C740((uint64_t)v37, (uint64_t)sub_10008971C, a1);
        sub_10004C758((uint64_t)v37, (uint64_t)sub_100089750, a1);
        sub_1000D19CC((uint64_t)v37, (uint64_t)sub_100089AB8, a1);
        sub_1000D19D8((uint64_t)v37, (uint64_t)sub_100089AE8, a1);
        sub_10004C7A0((uint64_t)v37, (uint64_t)sub_100089B18, a1);
        sub_10004C800((uint64_t)v37, (uint64_t)sub_100089BCC, a1);
        sub_10004C7F4((uint64_t)v37, (uint64_t)sub_100089C00, a1);
        sub_1000D1A68((uint64_t)v37, (uint64_t)sub_100089C0C, a1);
        sub_10004C764((uint64_t)v37, (uint64_t)sub_100089C40, a1);
        sub_10004C77C((uint64_t)v37, (uint64_t)sub_100089C5C, a1);
        sub_10004C788((uint64_t)v37, (uint64_t)sub_100089DB4, a1);
        sub_10004C770((uint64_t)v37, (uint64_t)sub_100089DC0, a1);
        sub_10004C7D0((uint64_t)v37, (uint64_t)sub_10008AA44, a1);
        sub_1000D1A74((uint64_t)v37, (uint64_t)sub_10008AA54, a1);
        sub_1000D1A80((uint64_t)v37, (uint64_t)sub_10008AB8C, a1);
        sub_1000F3144((uint64_t)v37, (uint64_t)sub_10008AD24, a1);
        sub_1000D1A8C((uint64_t)v37, (uint64_t)sub_10008AD38, a1);
        sub_1000EDDA4((uint64_t)v37, (uint64_t)sub_10008AD5C, a1);
        sub_1000D1AB0((uint64_t)v37, (uint64_t)sub_10008AEDC, a1);
        sub_1000D1AC8((uint64_t)v37, (uint64_t)nullsub_6, a1);
        sub_1000D1AD4((uint64_t)v37, (uint64_t)sub_10008B578, a1);
        sub_1000D1ABC((uint64_t)v37, (uint64_t)sub_10008B748, a1);
        sub_1000F5A40((uint64_t)v37, a1);
        sub_1000D1AE0((uint64_t)v37, (uint64_t)sub_10008B834, a1);
        sub_1000F520C((uint64_t)v37, (uint64_t)sub_10006C664, a1);
        sub_1000F5204((uint64_t)v37, a1);
        uint64_t v39 = *(void *)(a1 + 2040);
        if (v39) {
          sub_1000F0DC8((uint64_t)v37, v39);
        }
        for (uint64_t i = 23; i != 47; ++i)
        {
          LODWORD(v59) = i;
          BOOL v57 = 5;
          if (i != 34)
          {
            if (i == 33) {
              BOOL v60 = &v57;
            }
            sub_1000662CC((CFMutableArrayRef *)v37, (uint64_t)&context, v38);
            BOOL v60 = (int *)(a1 + 20);
          }
        }

        for (j = 0; j != 14; ++j)
        {
          LODWORD(v59) = j;
          if (j == 8) {
            BOOL v60 = 0LL;
          }
          sub_1000662CC((CFMutableArrayRef *)v37, (uint64_t)&context, v38);
          BOOL v60 = (int *)(a1 + 20);
        }

        sub_1000DB9C8((uint64_t)v37);
        sub_1000F0E8C((uint64_t)v37, *(unsigned __int8 *)(a1 + 1864));
        sub_1000D52F8((uint64_t)v37, *(CFTypeRef *)(a1 + 624));
        CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_10008D02C, v37);
        if (*(_BYTE *)(a1 + 88) == 1 && !*(_BYTE *)(a1 + 2136))
        {
          uint64_t v42 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3 message:"Making WiFi Manager available for all to see"];
          }
          objc_autoreleasePoolPop(v42);
          notify_post("com.apple.wifi.manager.available");
        }

        uint64_t v43 = sub_1000653FC(a1);
        sub_1000EE990((uint64_t)v37, v43, 0xFFFFFFFFLL, 0LL);
        sub_1000824A4(a1);
        sub_1000F1644((uint64_t)v37, 0LL);
        if (sub_100068AB0(a1))
        {
          uint64_t v44 = *(void *)(a1 + 1928);
          if (!v44)
          {
LABEL_68:
            uint64_t v46 = objc_autoreleasePoolPush();
            if (qword_100219F60)
            {
              if (*(_BYTE *)(a1 + 26)) {
                uint64_t v47 = "Enabling";
              }
              else {
                uint64_t v47 = "Disabling";
              }
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Device manager created. %s automatic association state",  "__WiFiManagerDeviceAddedCallback",  v47);
            }

            objc_autoreleasePoolPop(v46);
            if (*(_BYTE *)(a1 + 26)) {
              sub_1000D02BC((uint64_t)v37);
            }
            else {
              sub_1000D03E4((uint64_t)v37);
            }
            CFRelease(v37);
            uint64_t v48 = *(int **)(a1 + 1376);
            context = a1;
            BOOL v59 = 0xAAAAAAAA00000043LL;
            BOOL v60 = v48;
            BOOL v61 = 1LL;
            CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
            sub_10007CC1C(a1, *(unsigned int *)(a1 + 1320));
            sub_10006BBE4(a1, v2, 0);
            if (*(_BYTE *)(a1 + 2136)) {
              *(_BYTE *)(a1 + 2136) = 0;
            }
            uint64_t v35 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Detected %ld wifi device(s)",  CFSetGetCount(*(CFSetRef *)(a1 + 96)),  v52);
            }
LABEL_80:
            objc_autoreleasePoolPop(v35);
            goto LABEL_81;
          }

          int v45 = (uint64_t)v37;
        }

        else
        {
          int v45 = (uint64_t)v37;
          uint64_t v44 = 0LL;
        }

        sub_1000F2188(v45, v44);
        goto LABEL_68;
      }
}

    id v12 = v6[1] + 2LL;
    v8 += v12;
    v6 += v12;
  }

  while (1)
  {
    unsigned int v14 = v10[2];
    if (*(_WORD *)v10 == 260 && (_DWORD)v14 == 18) {
      return (const __CFData *)1;
    }
    unsigned __int16 v16 = &v10[v14];
    id v10 = v16 + 3;
  }

    objc_autoreleasePoolPop(v4);
    return 0LL;
  }

  return result;
}

  if (a4) {
    *a4 = 0LL;
  }
  if (a3) {
    *a3 = v12;
  }
}

        int v25 = sub_1000E6BE4(v21, (uint64_t)v19, a4, (uint64_t)MutableCopy);
        *a7 = v25;
        if (v25)
        {
          unint64_t v26 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "Unable to set ranging identifier(%d). deviceManager=%p",  *a7,  v21);
          }
          objc_autoreleasePoolPop(v26);
        }

        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        if (!v23) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
    }

      CFRelease(v10);
    }
  }

  else
  {
    int v19 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s, BSSID is NULL", "__WiFiLQAMgrTrigDiscEventCallback");
    }
    objc_autoreleasePoolPop(v19);
    if (v10) {
      goto LABEL_13;
    }
  }

  if (*(int *)(a1 + 3384) >= 5)
  {
    CFNumberRef v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: already tried enough times",  "__WiFiDeviceManagerIsStateSuitableForNetworkTransition",  v17);
    }
    goto LABEL_72;
  }

  if (*(_BYTE *)(a1 + 5488))
  {
    CFNumberRef v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: in carplay",  "__WiFiDeviceManagerIsStateSuitableForNetworkTransition",  v17);
    }
    goto LABEL_72;
  }

  if (*(_BYTE *)(a1 + 3400))
  {
    CFNumberRef v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: voip on going",  "__WiFiDeviceManagerIsStateSuitableForNetworkTransition",  v17);
    }
    goto LABEL_72;
  }

  if (*(_BYTE *)(a1 + 3401))
  {
    CFNumberRef v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: call on going",  "__WiFiDeviceManagerIsStateSuitableForNetworkTransition",  v17);
    }
    goto LABEL_72;
  }

  if (*(_BYTE *)(a1 + 3402))
  {
    CFNumberRef v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: media playing",  "__WiFiDeviceManagerIsStateSuitableForNetworkTransition",  v17);
    }
    goto LABEL_72;
  }

  if (*(_BYTE *)(a1 + 3406))
  {
    CFNumberRef v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Awdl RealTime is active",  "__WiFiDeviceManagerIsStateSuitableForNetworkTransition",  v17);
    }
    goto LABEL_72;
  }

  if (*(_BYTE *)(a1 + 5490))
  {
    CFNumberRef v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Airplay over Infra is active",  "__WiFiDeviceManagerIsStateSuitableForNetworkTransition",  v17);
    }
    goto LABEL_72;
  }

  double Current = CFAbsoluteTimeGetCurrent();
  CFNumberRef v5 = *(double *)(a1 + 3392);
  if (v5 != 0.0)
  {
    unsigned int v6 = Current - v5;
    if (Current - v5 <= 30.0)
    {
      CFNumberRef v11 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: timeSinceLastScan %f",  "__WiFiDeviceManagerIsStateSuitableForNetworkTransition",  *(void *)&v6);
      }
      goto LABEL_72;
    }
  }

  id v7 = CFAbsoluteTimeGetCurrent();
  id v8 = *(double *)(a1 + 3408);
  id v9 = 1LL;
  if (v8 != 0.0)
  {
    id v10 = v7 - v8;
    if (v7 - v8 <= 10.0)
    {
      CFNumberRef v11 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: timeSinceLinkUp %f",  "__WiFiDeviceManagerIsStateSuitableForNetworkTransition",  *(void *)&v10);
      }
LABEL_72:
      objc_autoreleasePoolPop(v11);
LABEL_43:
      id v9 = 0LL;
    }
  }

  objc_autoreleasePoolPop(v6);
  return v7;
}

  objc_autoreleasePoolPop(v6);
  return v7;
}

  unsigned int v14 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v16,  v17,  0LL);
LABEL_7:
  if ([a3 response])
  {
    unsigned __int16 v15 = (void (**)(id, NSError *, void))[a3 response];
    v15[2](v15, v14, 0LL);
  }

__CFDictionary *sub_1000204A4(uint64_t *a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFDataRef v3 = sub_1000951FC(a1[6], @"BSSID");
    CFDictionaryAddValue(Mutable, @"BSSID", v3);
    CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, a1 + 358);
    if (!v4) {
      goto LABEL_14;
    }
    CFNumberRef v5 = v4;
    CFDictionarySetValue(Mutable, @"LINK_HEALTH", v4);
    CFRelease(v5);
    CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, (char *)a1 + 2892);
    if (!v6) {
      goto LABEL_14;
    }
    CFNumberRef v7 = v6;
    CFDictionarySetValue(Mutable, @"CRITICAL_TRAFFIC_STATE", v6);
    CFRelease(v7);
    CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, (char *)a1 + 2893);
    if (!v8) {
      goto LABEL_14;
    }
    CFNumberRef v9 = v8;
    CFDictionarySetValue(Mutable, @"NON_CRITICAL_TRAFFIC_STATE", v8);
    CFRelease(v9);
    unsigned int valuePtr = sub_100096BF4(a1[6], @"CHANNEL");
    CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
    if (!v10) {
      goto LABEL_14;
    }
    CFNumberRef v11 = v10;
    CFDictionarySetValue(Mutable, @"CHANNEL", v10);
    CFRelease(v11);
    id v12 = sub_1000951FC(a1[6], @"CHANNEL_WIDTH");
    CFDictionarySetValue(Mutable, @"CHANNEL_WIDTH", v12);
    CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, (char *)a1 + 2885);
    if (!v13) {
      goto LABEL_14;
    }
    CFNumberRef v14 = v13;
    CFDictionarySetValue(Mutable, @"CCA_SELF_TOTAL", v13);
    CFRelease(v14);
    CFNumberRef v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, (char *)a1 + 2886);
    if (!v15) {
      goto LABEL_14;
    }
    CFNumberRef v16 = v15;
    CFDictionarySetValue(Mutable, @"CCA_OTHER_TOTAL", v15);
    CFRelease(v16);
    CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, (char *)a1 + 2887);
    if (!v17) {
      goto LABEL_14;
    }
    CFNumberRef v18 = v17;
    CFDictionarySetValue(Mutable, @"CCA_INTERFERENCE_TOTAL", v17);
    CFRelease(v18);
    unsigned int v23 = sub_100096BF4(a1[6], @"RSSI");
    CFNumberRef v19 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v23);
    if (v19)
    {
      CFNumberRef v20 = v19;
      CFDictionarySetValue(Mutable, @"RSSI", v19);
      CFRelease(v20);
      float v21 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "Link Health: %@", Mutable message];
      }
      objc_autoreleasePoolPop(v21);
    }

    else
    {
LABEL_14:
      CFRelease(Mutable);
      return 0LL;
    }
  }

  return Mutable;
}

void sub_100020758(uint64_t a1)
{
  uint64_t v2 = *(dispatch_source_s **)(a1 + 2896);
  if (v2)
  {
    dispatch_time_t v3 = dispatch_time(0LL, 30000000000LL);
    dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0LL);
  }

  *(_BYTE *)(a1 + 2904) = 1;
}

uint64_t sub_1000207AC()
{
  uint64_t result = _CFRuntimeRegisterClass(&unk_1001E2C98);
  qword_100219838 = result;
  return result;
}

void sub_1000207D0(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "enter:%s: \n", "__WiFiLQAMgrRelease");
  }
  objc_autoreleasePoolPop(v2);
  if (!a1) {
    sub_100153A74();
  }
  CFTypeID v3 = CFGetTypeID((CFTypeRef)a1);
  uint64_t v4 = qword_100219838;
  if (!qword_100219838)
  {
    pthread_once(&stru_100218E50, (void (*)(void))sub_1000207AC);
    uint64_t v4 = qword_100219838;
  }

  if (v3 != v4) {
    sub_100153A9C();
  }
  qword_100219828 = 0LL;
  CFNumberRef v5 = *(const void **)(a1 + 40);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 40) = 0LL;
  }

  CFNumberRef v6 = *(const void **)(a1 + 400);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 400) = 0LL;
  }

  CFNumberRef v7 = *(dispatch_object_s **)(a1 + 536);
  if (v7)
  {
    dispatch_release(v7);
    *(void *)(a1 + 536) = 0LL;
  }

  CFNumberRef v8 = *(dispatch_object_s **)(a1 + 336);
  if (v8)
  {
    dispatch_release(v8);
    *(void *)(a1 + 336) = 0LL;
  }

  CFNumberRef v9 = *(dispatch_object_s **)(a1 + 2896);
  if (v9)
  {
    dispatch_release(v9);
    *(void *)(a1 + 2896) = 0LL;
  }

  *(_BYTE *)(a1 + 2904) = 0;
  CFNumberRef v10 = *(dispatch_object_s **)(a1 + 296);
  if (v10) {
    dispatch_release(v10);
  }
  CFNumberRef v11 = *(dispatch_object_s **)(a1 + 2912);
  if (v11) {
    dispatch_release(v11);
  }
  id v12 = *(void **)(a1 + 2960);
  if (v12) {

  }
  CFNumberRef v13 = *(const void **)(a1 + 24);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 24) = 0LL;
  }

  CFNumberRef v14 = *(const void **)(a1 + 320);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 320) = 0LL;
  }

  CFNumberRef v15 = *(const void **)(a1 + 1280);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 1280) = 0LL;
  }

  CFNumberRef v16 = *(const void **)(a1 + 1264);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 1264) = 0LL;
  }

  CFNumberRef v17 = *(const void **)(a1 + 256);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(a1 + 256) = 0LL;
  }

  CFNumberRef v18 = *(const void **)(a1 + 264);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 264) = 0LL;
  }

  CFNumberRef v19 = *(const void **)(a1 + 144);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 144) = 0LL;
  }

  CFNumberRef v20 = *(const void **)(a1 + 152);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(a1 + 152) = 0LL;
  }

  float v21 = *(const void **)(a1 + 112);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(a1 + 112) = 0LL;
  }

  BOOL v22 = *(const void **)(a1 + 208);
  if (v22) {
    CFRelease(v22);
  }
  bzero((void *)(a1 + 16), 0xC78uLL);
  unsigned int v23 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "exit: %s: \n", "__WiFiLQAMgrRelease");
  }
  objc_autoreleasePoolPop(v23);
}

uint64_t sub_1000209D8(uint64_t a1)
{
  int valuePtr = 0;
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = *(const __CFArray **)(a1 + 24);
  if (!v2)
  {
    CFNumberRef v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: LQM table is NULL",  "__WiFiLQAMgrGetLongWindowRSSI");
    }
    goto LABEL_23;
  }

  if (!*(void *)(a1 + 48))
  {
    CFNumberRef v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: Current Network is NULL",  "__WiFiLQAMgrGetLongWindowRSSI");
    }
    goto LABEL_23;
  }

  int Count = CFArrayGetCount(v2);
  int v4 = Count;
  if (!Count)
  {
    CFNumberRef v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: No LQM reports available",  "__WiFiLQAMgrGetLongWindowRSSI");
    }
LABEL_23:
    objc_autoreleasePoolPop(v11);
    return 0LL;
  }

  if (Count < 1) {
    return 0LL;
  }
  CFIndex v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v7 = Count;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v5);
    if (!ValueAtIndex) {
      break;
    }
    Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"RSSI");
    if (!Value) {
      goto LABEL_15;
    }
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    uint64_t v6 = (valuePtr + v6);
    if (v7 == ++v5)
    {
      if (!v4) {
        return v6;
      }
      return ((int)v6 / v4);
    }
  }

  CFNumberRef v10 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, LQAManager: LQM Report at %d index is NULL",  "__WiFiLQAMgrGetLongWindowRSSI",  v5);
  }
  objc_autoreleasePoolPop(v10);
LABEL_15:
  int v4 = v5;
  if ((_DWORD)v5) {
    return ((int)v6 / v4);
  }
  return v6;
}

uint64_t sub_100020B80(uint64_t a1)
{
  int v2 = _os_feature_enabled_impl("WiFiManager", "LinkRecommendationTD");
  if (!a1
    || (int v3 = v2, (_os_feature_enabled_impl("WiFiManager", "RealTimeFastTD") & 1) == 0)
    && !_os_feature_enabled_impl("WiFiManager", "LinkRecommendationTD")
    || sub_10009DF44(*(void *)(a1 + 48))
    || sub_100097700(*(void *)(a1 + 48))
    || *(_DWORD *)(a1 + 2788) >= *(_DWORD *)(a1 + 640))
  {
    BOOL v4 = 0LL;
    uint64_t v8 = 0LL;
    BOOL v5 = 0LL;
    goto LABEL_28;
  }

  BOOL v4 = -[WiFiUserInteractionMonitor isCarModeActive]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isCarModeActive")
    || (*(_DWORD *)(a1 + 2768) & 0xFFFFFFFD) == 4;
  else {
    BOOL v5 = 0LL;
  }
  if (-[WiFiUserInteractionMonitor isRealTimeAppActive]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isRealTimeAppActive"))
  {
    BOOL v6 = 1;
    if (!v3)
    {
LABEL_15:
      unsigned int v7 = 0;
      goto LABEL_18;
    }
  }

  else
  {
    BOOL v6 = *(_BYTE *)(a1 + 2944) != 0;
    if (!v3) {
      goto LABEL_15;
    }
  }

  unsigned int v7 = (*(unsigned __int8 *)(a1 + 2940) >> 1) & 1;
LABEL_18:
  if (v6) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0LL;
  }
  if (*(_BYTE *)(a1 + 248))
  {
    if (*(_DWORD *)(a1 + 56)) {
      unsigned int v9 = 1;
    }
    else {
      unsigned int v9 = v8;
    }
    if (*(_DWORD *)(a1 + 2768) == 2) {
      uint64_t v8 = 1LL;
    }
    else {
      uint64_t v8 = v9;
    }
  }

LABEL_28:
  if ((_DWORD)v8) {
    uint64_t v10 = 1LL;
  }
  else {
    uint64_t v10 = v4 | v5;
  }
  if ((_DWORD)v10 == 1)
  {
    CFNumberRef v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: inHighMobility:%d isUsingPublicNetwork:%d tdMonitoringRequired:%d",  "__WiFiLQAMgrIsUnderEvaluationForFastDisconnect",  v4,  v5,  v8);
    }
    objc_autoreleasePoolPop(v11);
  }

  return v10;
}

          objc_autoreleasePoolPop(v12);

          CFNumberRef v11 = *(void *)(a1 + 32);
          goto LABEL_19;
        }
      }

      else
      {
        unsigned int v7 = 99LL;
      }

      unsigned int v9 = 99LL;
      goto LABEL_22;
    }

    uint64_t v10 = arc4random_uniform(0x63u);
    if (v10 >= 0x32)
    {
      CFNumberRef v17 = v10;
      id v12 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s not submitting GEOWiFiConnectionQuality as this sample didn't win the coin toss (%u > %d)",  "WiFiMetricsManagerSubmitConnectionQualityForAssociation_block_invoke",  v17,  49);
      }
      goto LABEL_28;
    }
  }

  CFNumberRef v11 = *(void *)(a1 + 48);
LABEL_19:
}

    BOOL v6 = objc_autoreleasePoolPush();
    unsigned int v7 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      uint64_t v8 = sub_1000492A4(a2);
      [v7 WFLog:4, "Event %@ is not expected while command %@ is pending", v8, sub_1000496AC(*(_DWORD *)v12) message];
    }

    ++v9;
  }

  while (CFArrayGetCount(v6) > v9);
  if (!v45) {
    goto LABEL_56;
  }
  CFNumberRef v18 = *(const __SCPreferences **)(v43 + 904);
  if (!v18)
  {
    CFNumberRef v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null prefs ref",  "__WiFiManagerRemoveSCNetworkSets",  v41);
    }
    goto LABEL_74;
  }

  if (!v10 || (int Count = CFArrayGetCount(v10), Count < 1))
  {
LABEL_54:
    uint64_t v29 = *(dispatch_queue_s **)(v43 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10008EFD4;
    block[3] = &unk_1001E2620;
    void block[4] = v43;
    dispatch_async(v29, block);
    goto LABEL_56;
  }

  CFNumberRef v20 = Count;
  float v21 = 0LL;
  while (2)
  {
    BOOL v22 = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v10, v21);
    if (!v22)
    {
      int v25 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: invalid set",  "__WiFiManagerRemoveSCNetworkSets",  v41);
      }
LABEL_53:
      objc_autoreleasePoolPop(v25);
      if (v20 == ++v21) {
        goto LABEL_54;
      }
      continue;
    }

    break;
  }

  unsigned int v23 = v22;
  if (SCNetworkSetGetName(v22))
  {
    unint64_t v24 = SCNetworkSetGetName(v23);
    if (CFEqual(v24, @"Automatic"))
    {
      int v25 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: skipping automatic set from removal! automatic/custom network set ID: %@", "__WiFiManagerRemoveSCNetworkSets", SCNetworkSetGetSetID(v23) message];
      }
      goto LABEL_53;
    }
  }

  unint64_t v26 = sub_10008EDFC(v23, Mutable);
  CFNumberRef v27 = SCNetworkSetRemove(v23);
  uint64_t v28 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: set removal status for %@: %d", "__WiFiManagerRemoveSCNetworkSets", SCNetworkSetGetSetID(v23), v27 message];
  }
  objc_autoreleasePoolPop(v28);
  if (!(v26 | v27))
  {
    int v25 = objc_autoreleasePoolPush();
    CFMutableDictionaryRef Mutable = v46;
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: no change", "__WiFiManagerRemoveSCNetworkSets", v41);
    }
    goto LABEL_53;
  }

  CFMutableDictionaryRef Mutable = v46;
  if (!SCPreferencesCommitChanges(v18))
  {
    CFNumberRef v30 = SCError();
    CFNumberRef v31 = SCErrorString(v30);
    CFNumberRef v32 = objc_autoreleasePoolPush();
    CFNumberRef v33 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_74;
    }
    uint64_t v34 = "SCError Unavailable";
    if (v31) {
      uint64_t v34 = v31;
    }
    uint64_t v42 = v34;
    uint64_t v35 = "%s: failed to commit changes %s";
    goto LABEL_73;
  }

  if (SCPreferencesApplyChanges(v18))
  {
    int v25 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: processed set(%@) and its associated services", "__WiFiManagerRemoveSCNetworkSets", SCNetworkSetGetSetID(v23) message];
    }
    goto LABEL_53;
  }

  CFNumberRef v36 = SCError();
  CFNumberRef v37 = SCErrorString(v36);
  CFNumberRef v32 = objc_autoreleasePoolPush();
  CFNumberRef v33 = (void *)qword_100219F60;
  if (!qword_100219F60) {
    goto LABEL_74;
  }
  uint64_t v38 = "SCError Unavailable";
  if (v37) {
    uint64_t v38 = v37;
  }
  uint64_t v42 = v38;
  uint64_t v35 = "%s: failed to apply changes %s";
LABEL_73:
  objc_msgSend(v33, "WFLog:message:", 4, v35, "__WiFiManagerRemoveSCNetworkSets", v42);
LABEL_74:
  objc_autoreleasePoolPop(v32);
  CFMutableDictionaryRef Mutable = v46;
LABEL_56:
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v6) {
LABEL_61:
  }
    CFRelease(v6);
LABEL_62:
  if (Mutable) {
    CFRelease(Mutable);
  }
}

  CFStringAppend(theString, @" Not");
  if ((a1 & 0x40) == 0)
  {
LABEL_9:
    if ((a1 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }

  if (!a3 || v17)
  {
    unint64_t v26 = !v20;
    if (!a3) {
      unint64_t v26 = 1;
    }
    if ((v26 & 1) != 0) {
      goto LABEL_38;
    }
    if (CFEqual(a3, v17)) {
      goto LABEL_39;
    }
    goto LABEL_27;
  }

    BOOL v4 = 0LL;
    goto LABEL_15;
  }

  int v3 = sub_1000AE514(*(void **)(a1 + 32));
  BOOL v4 = v3;
  if (!v3 || !-[NSMutableString length](v3, "length"))
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    *(_DWORD *)buuint64_t f = 136315138;
    CFNumberRef v17 = "WiFiSecuritySavePasswordForPasswordBackup_block_invoke";
    unsigned int v9 = "%s: error: empty ssid hash";
    uint64_t v10 = 12;
    goto LABEL_14;
  }

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v5 = *(NSMutableString **)(a1 + 32);
    *(_DWORD *)buuint64_t f = 136315650;
    CFNumberRef v17 = "WiFiSecuritySavePasswordForPasswordBackup_block_invoke";
    CFNumberRef v18 = 2112;
    CFNumberRef v19 = v5;
    CFNumberRef v20 = 2112;
    float v21 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%s: ssid %@ (%@)",  buf,  0x20u);
  }

  BOOL v6 = [*(id *)(a1 + 40) dataUsingEncoding:4];
  unsigned int v7 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  [v7 setObject:kSecClassGenericPassword forKey:kSecClass];
  [v7 setObject:v4 forKey:kSecAttrAccount];
  [v7 setObject:@"AirPort" forKey:kSecAttrService];
  [v7 setObject:v6 forKey:kSecValueData];
  [v7 setObject:kSecAttrAccessibleAfterFirstUnlock forKey:kSecAttrAccessible];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = SecItemAdd((CFDictionaryRef)v7, &result);
  uint64_t v8 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
  if (v8 == -25299)
  {
    sub_1000AEC14(*(void *)(a1 + 32));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = SecItemAdd((CFDictionaryRef)v7, &result);
    uint64_t v8 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
  }

  if (v8 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buuint64_t f = 136315650;
    CFNumberRef v17 = "WiFiSecuritySavePasswordForPasswordBackup_block_invoke";
    CFNumberRef v18 = 2112;
    CFNumberRef v19 = v4;
    CFNumberRef v20 = 1024;
    LODWORD(v21) = v8;
    unsigned int v9 = "%s:[%@] error result %d \n";
    uint64_t v10 = 28;
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, v9, buf, v10);
  }

    a6 = v36;
LABEL_29:
    CFRelease(v20);
LABEL_30:
    if (v23) {
      CFRelease(v23);
    }
    a7 = v37;
    if (v21) {
      CFRelease(v21);
    }
    goto LABEL_34;
  }

    a4 = v34;
    CFRelease(v16);
LABEL_29:
    CFRelease(v22);
LABEL_30:
    CFRelease(v18);
LABEL_31:
    CFRelease(v14);
  }

  sub_10003A8FC((vm_address_t)a2, a3);
  sub_10003A8FC((vm_address_t)a4, a5);
  return 0LL;
}

  if (*(_BYTE *)(a1 + 5600))
  {
    CFNumberRef v19 = " ";
    if (*(_DWORD *)(a1 + 3272) == 2)
    {
      CFNumberRef v20 = CFArrayGetCount(*(CFArrayRef *)(a1 + 1104));
      float v21 = CFArrayGetCount(*(CFArrayRef *)(a1 + 3560)) + v20;
      if (!(v21 + CFArrayGetCount(*(CFArrayRef *)(a1 + 3552)))) {
        CFNumberRef v19 = "- Fake ";
      }
    }
  }

  else
  {
    CFNumberRef v19 = " ";
  }

  BOOL v22 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    unsigned int v23 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@*} %@",  @"AUTOJOIN, SCAN",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"AJScan: Starting Broadcast scan(%s) with %s channels %s",  "Active",  v18,  v19)),  "UTF8String"));
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v24 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v23, "UTF8String")),  "UTF8String");
      *(_DWORD *)buuint64_t f = 136446210;
      *(void *)&buf[4] = v24;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
    }
  }

  objc_autoreleasePoolPop(v22);
  if (v17) {
    int v25 = 3LL;
  }
  else {
    int v25 = 4LL;
  }
  if (v17) {
    unint64_t v26 = 5LL;
  }
  else {
    unint64_t v26 = 6LL;
  }
  CFNumberRef v27 = sub_1001036C0(a1, 0LL, Mutable, v7, v26);
  if (v27) {
    return sub_100105840(a1, v27);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return (const __CFArray *)v25;
}

  uint64_t v29 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v27,  v28,  v26);
  CFNumberRef v20 = 0LL;
LABEL_32:
  if (v29)
  {
    if (v20) {
      free(v20);
    }
    ((void (**)(void, NSError *, void, void))a3)[2](a3, v29, 0LL, 0LL);
  }

void sub_100020D3C(uint64_t a1)
{
  int v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "RSSI_WIN: Configure Dynamic RSSI Window = %u",  *(unsigned __int8 *)(a1 + 2977));
  }
  objc_autoreleasePoolPop(v2);
  sub_10005590C(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 2977));
}

BOOL sub_100020DA0(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  int v6 = _os_feature_enabled_impl("WiFiManager", "LinkRecommendationTD");
  int v7 = _os_feature_enabled_impl("WiFiManager", "RealTimeRoamSuppression");
  if (!a1)
  {
    __int128 v63 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQAMgrRef is null",  "__WiFiLQAMgrShouldPerformFastDisconnect");
    }
    goto LABEL_148;
  }

  BOOL v8 = v7;
  if (((_os_feature_enabled_impl("WiFiManager", "RealTimeFastTD") | v6) & 1) == 0)
  {
    __int128 v63 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Fast Disconnect not enabled",  "__WiFiLQAMgrShouldPerformFastDisconnect");
    }
    goto LABEL_148;
  }

  if (sub_10009DF44(*(void *)(a1 + 48)) || sub_100097700(*(void *)(a1 + 48)))
  {
    __int128 v63 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Fast Disconnect not supported on CarPlay/Personal Hotspot networks",  "__WiFiLQAMgrShouldPerformFastDisconnect");
    }
    goto LABEL_148;
  }

  if (*(_DWORD *)(a1 + 2788) >= *(_DWORD *)(a1 + 640))
  {
    CFIndex v64 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Fast Disconnect not triggered - Last RSSI: %d >= Good Link RSSI: %d",  "__WiFiLQAMgrShouldPerformFastDisconnect",  *(unsigned int *)(a1 + 2788),  *(unsigned int *)(a1 + 640));
    }
    v65 = v64;
    goto LABEL_149;
  }

  if (*(_BYTE *)(a1 + 220))
  {
    __int128 v63 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Fast Disconnect not triggered - FaceTime call active",  "__WiFiLQAMgrShouldPerformFastDisconnect");
    }
    goto LABEL_148;
  }

  if (*(_BYTE *)(a1 + 637)) {
    BOOL v69 = *(_BYTE *)(a1 + 638) != 0;
  }
  else {
    BOOL v69 = 0;
  }
  if (-[WiFiUserInteractionMonitor isRealTimeAppActive]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isRealTimeAppActive")
    || *(_BYTE *)(a1 + 2944))
  {
    unsigned int v9 = &_mh_execute_header;
    char v10 = 1;
  }

  else
  {
    char v10 = 0;
    unsigned int v9 = 0LL;
  }

  unsigned int v11 = -[WiFiUserInteractionMonitor isCellularInexpensive5G]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isCellularInexpensive5G");
  uint64_t v12 = 0x10000000000LL;
  if (!v11) {
    uint64_t v12 = 0LL;
  }
  if ((v10 & 1) == 0 && (v6 & v11 & 1) == 0)
  {
    __int128 v63 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Fast Disconnect not triggered - neither realtime app active nor cheap 5g available",  "__WiFiLQAMgrShouldPerformFastDisconnect");
    }
    goto LABEL_148;
  }

  unint64_t v13 = v12 | (unint64_t)v9;
  if (v6)
  {
    unint64_t v14 = (*(_DWORD *)(a1 + 2940) >> 1) & 1;
    v13 |= v14;
  }

  else
  {
    unint64_t v14 = 0LL;
  }

  memset(v70, 0, 44);
  if (!sub_10001E0B4(a1, v70))
  {
    __int128 v63 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: failed to extract metrics from LQM, exiting!",  "__WiFiLQAMgrShouldPerformFastDisconnect");
    }
LABEL_148:
    v65 = v63;
LABEL_149:
    objc_autoreleasePoolPop(v65);
    return 0LL;
  }

  if (v8) {
    BOOL v8 = (*(_BYTE *)(a1 + 2940) & 1) == 0;
  }
  int v15 = *(_DWORD *)(a1 + 2788);
  int v16 = *(_DWORD *)(a1 + 648);
  float v17 = (float)SLODWORD(v70[0]);
  float v18 = (float)SDWORD1(v70[0]);
  uint64_t v19 = -64LL;
  while (1)
  {
    uint64_t v20 = a1 + v19 + 988;
    if (v15 <= v16) {
      uint64_t v20 = a1 + v19 + 1152;
    }
    if (*(_BYTE *)v20
      && SDWORD1(v70[0]) >= *(_DWORD *)(v20 + 4)
      && (float)(*(float *)(v20 + 8) * v18) <= v17
      && SDWORD2(v70[0]) > *(_DWORD *)(v20 + 12) * DWORD1(v70[0]))
    {
      break;
    }

    v19 += 16LL;
    if (!v19) {
      goto LABEL_31;
    }
  }

  v13 |= 0x100uLL;
  ++v14;
LABEL_31:
  uint64_t v21 = a1 + 1232;
  uint64_t v22 = 1232LL;
  if (v15 > v16)
  {
    uint64_t v22 = 1068LL;
    uint64_t v21 = a1 + 1068;
  }

  if (*(_BYTE *)(a1 + v22)
    && SHIDWORD(v70[1]) > *(_DWORD *)(v21 + 4)
    && (float)((float)(1.0 - *(float *)(v21 + 8)) * (float)SHIDWORD(v70[1])) > (float)SLODWORD(v70[2]))
  {
    unint64_t v13 = v13 & 0xFFFFFFFFFF00FFFFLL | 0x10000;
    ++v14;
  }

  uint64_t v23 = -80LL;
  while (1)
  {
    uint64_t v24 = a1 + v23 + 1068;
    if (v15 <= v16) {
      uint64_t v24 = a1 + v23 + 1232;
    }
    if (*(_BYTE *)v24
      && SDWORD1(v70[1]) >= *(_DWORD *)(v24 + 4)
      && (float)(*(float *)(v24 + 8) * (float)SDWORD1(v70[1])) <= (float)SLODWORD(v70[1])
      && (SDWORD1(v70[0]) < *(_DWORD *)(v24 + 12) || (float)(*(float *)(v24 + 16) * v18) <= v17))
    {
      break;
    }

    v23 += 20LL;
    if (!v23) {
      goto LABEL_48;
    }
  }

  unint64_t v13 = v13 & 0xFFFFFFFF00FFFFFFLL | 0x1000000;
  ++v14;
LABEL_48:
  if (a2)
  {
    if (v14 >= 2)
    {
      int v25 = *(_DWORD *)(a1 + 56);
      if (v25)
      {
        if (v15 < v25) {
          *a2 = 0;
        }
      }
    }
  }

  if (a3
    && v14 >= 2
    && (-[WiFiUserInteractionMonitor isCarModeActive]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isCarModeActive")
     || (*(_DWORD *)(a1 + 2768) | 2) == 6))
  {
    *a3 = 1;
    if (a2) {
      *a2 = 0;
    }
  }

  -[WiFiUsageMonitor setTdLogic_fastTdState:forInterface:]( +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance"),  "setTdLogic_fastTdState:forInterface:",  v14,  v13,  *(void *)(a1 + 40));
  unint64_t v26 = objc_autoreleasePoolPush();
  if (v15 <= v16)
  {
    if (qword_100219F60)
    {
      CFNumberRef v31 = "NO";
      CFNumberRef v32 = "YES";
      if (v14 <= 1) {
        CFNumberRef v33 = "NO";
      }
      else {
        CFNumberRef v33 = "YES";
      }
      if (a2 && *a2) {
        CFNumberRef v31 = "YES";
      }
      if (a3)
      {
        if (*a3) {
          uint64_t v34 = "YES";
        }
        else {
          uint64_t v34 = "NO";
        }
      }

      else
      {
        uint64_t v34 = "NO";
      }

      if ((v13 & 0x100) != 0) {
        CFNumberRef v50 = "YES";
      }
      else {
        CFNumberRef v50 = "NO";
      }
      double v51 = 0.0;
      double v52 = 0.0;
      if (DWORD1(v70[0])) {
        double v52 = (double)SLODWORD(v70[0]) / (double)SDWORD1(v70[0]) * 100.0;
      }
      uint64_t v53 = *(unsigned int *)(a1 + 2788);
      uint64_t v54 = *(unsigned int *)(a1 + 1092);
      uint64_t v55 = *(unsigned int *)(a1 + 1100);
      double v56 = (float)(*(float *)(a1 + 1096) * 100.0);
      if ((v13 & 0x10000) != 0) {
        BOOL v57 = "YES";
      }
      else {
        BOOL v57 = "NO";
      }
      if (HIDWORD(v70[1]) && SHIDWORD(v70[1]) > SLODWORD(v70[2])) {
        double v51 = (double)(HIDWORD(v70[1]) - LODWORD(v70[2])) / (double)SHIDWORD(v70[1]) * 100.0;
      }
      double v58 = (float)(*(float *)(a1 + 1240) * 100.0);
      if ((v13 & 0x1000000) != 0) {
        BOOL v59 = "YES";
      }
      else {
        BOOL v59 = "NO";
      }
      if ((v13 & 1) != 0) {
        BOOL v60 = "YES";
      }
      else {
        BOOL v60 = "NO";
      }
      if (v8) {
        BOOL v61 = "YES";
      }
      else {
        BOOL v61 = "NO";
      }
      if (!v69) {
        CFNumberRef v32 = "NO";
      }
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LastRSSI:%d FastDisconnect:%s WaitForRoam:%s UserWalkout:%s TxPerMet:%s [TxPer: %.1f%%, %d, %d, %d, (%d, %d, %.1f%%)] BeaconPerMet:%s [BcnPer: %.1f%% (%d, %d, %.1f%%)] FwTxPerMet:%s [%d, %d] TDRecommended:%s RoamSuppress ed:%s aggressiveTD:%s",  "__WiFiLQAMgrShouldPerformFastDisconnect",  v53,  v33,  v31,  v34,  v50,  *(void *)&v52,  DWORD1(v70[0]),  LODWORD(v70[0]),  DWORD2(v70[0]),  v54,  v55,  *(void *)&v56,  v57,  *(void *)&v51,  HIDWORD(v70[1]),  LODWORD(v70[2]),  *(void *)&v58,  v59,  DWORD1(v70[1]),  LODWORD(v70[1]),  v60,  v61,  v32,  v66,  v67,  v68);
    }
  }

  else if (qword_100219F60)
  {
    CFNumberRef v27 = "NO";
    uint64_t v28 = "YES";
    if (v14 <= 1) {
      uint64_t v29 = "NO";
    }
    else {
      uint64_t v29 = "YES";
    }
    if (a2 && *a2) {
      CFNumberRef v27 = "YES";
    }
    if (a3)
    {
      if (*a3) {
        CFNumberRef v30 = "YES";
      }
      else {
        CFNumberRef v30 = "NO";
      }
    }

    else
    {
      CFNumberRef v30 = "NO";
    }

    if ((v13 & 0x100) != 0) {
      uint64_t v35 = "YES";
    }
    else {
      uint64_t v35 = "NO";
    }
    double v36 = 0.0;
    double v37 = 0.0;
    if (DWORD1(v70[0])) {
      double v37 = (double)SLODWORD(v70[0]) / (double)SDWORD1(v70[0]) * 100.0;
    }
    uint64_t v38 = *(unsigned int *)(a1 + 2788);
    uint64_t v39 = *(unsigned int *)(a1 + 928);
    uint64_t v40 = *(unsigned int *)(a1 + 936);
    double v41 = (float)(*(float *)(a1 + 932) * 100.0);
    uint64_t v42 = *(unsigned int *)(a1 + 944);
    uint64_t v43 = *(unsigned int *)(a1 + 952);
    double v44 = (float)(*(float *)(a1 + 948) * 100.0);
    if ((v13 & 0x10000) != 0) {
      int v45 = "YES";
    }
    else {
      int v45 = "NO";
    }
    if (HIDWORD(v70[1]) && SHIDWORD(v70[1]) > SLODWORD(v70[2])) {
      double v36 = (double)(HIDWORD(v70[1]) - LODWORD(v70[2])) / (double)SHIDWORD(v70[1]) * 100.0;
    }
    double v46 = (float)(*(float *)(a1 + 1076) * 100.0);
    if ((v13 & 0x1000000) != 0) {
      uint64_t v47 = "YES";
    }
    else {
      uint64_t v47 = "NO";
    }
    if ((v13 & 1) != 0) {
      uint64_t v48 = "YES";
    }
    else {
      uint64_t v48 = "NO";
    }
    if (v8) {
      CFNumberRef v49 = "YES";
    }
    else {
      CFNumberRef v49 = "NO";
    }
    if (!v69) {
      uint64_t v28 = "NO";
    }
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LastRSSI:%d FastDisconnect:%s WaitForRoam:%s UserWalkout:%s TxPerMet:%s [TxPer: %.1f%%, %d, %d, %d, (%d, %d, % .1f%%), (%d, %d, %.1f%%)] BeaconPerMet:%s [BcnPer: %.1f%% (%d, %d, %.1f%%)] FwTxPerMet:%s [%d, %d] TDRecommended:% s RoamSuppressed:%s aggressiveTD:%s",  "__WiFiLQAMgrShouldPerformFastDisconnect",  v38,  v29,  v27,  v30,  v35,  *(void *)&v37,  DWORD1(v70[0]),  LODWORD(v70[0]),  DWORD2(v70[0]),  v39,  v40,  *(void *)&v41,  v42,  v43,  *(void *)&v44,  v45,  *(void *)&v36,  HIDWORD(v70[1]),  LODWORD(v70[2]),  *(void *)&v46,  v47,  DWORD1(v70[1]),  LODWORD(v70[1]),  v48,  v49,  v28);
  }

  objc_autoreleasePoolPop(v26);
  return v14 > 1;
}

void sub_10002157C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 632))
  {
    CFNumberRef v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: LQA mgr is disabled", "__WiFiLQAMgrDoActiveProbe");
    }
    goto LABEL_65;
  }

  int v2 = *(_DWORD *)(a1 + 20);
  switch(v2)
  {
    case 0:
      CFNumberRef v32 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: ActProbe Callback in UnassociatedState",  "__WiFiLQAMgrDoActiveProbe");
      }
      goto LABEL_65;
    case 1:
      CFNumberRef v32 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: ActProbe Callback in GoodLinkState",  "__WiFiLQAMgrDoActiveProbe");
      }
      goto LABEL_65;
    case 3:
      CFNumberRef v32 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: ActProbe ongoing", "__WiFiLQAMgrDoActiveProbe");
      }
LABEL_65:
      objc_autoreleasePoolPop(v32);
      return;
  }

  int v3 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    uint64_t v4 = *(int *)(a1 + 20);
    else {
      BOOL v5 = *(&off_1001E2D88 + v4);
    }
    [(id)qword_100219F60 WFLog:2, "%s: ActProbeTimer Credits: %d lqaState: %@", "__WiFiLQAMgrDoActiveProbe", *(unsigned int *)(a1 + 488), v5 message];
  }

  objc_autoreleasePoolPop(v3);
  int v6 = *(__CFDictionary **)(a1 + 376);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  double v8 = *(double *)(a1 + 368);
  double v9 = Current - v8;
  if (v8 == 0.0) {
    double v10 = 0.0;
  }
  else {
    double v10 = v9;
  }
  if (*(_BYTE *)(a1 + 392)) {
    double v11 = 3.0;
  }
  else {
    double v11 = 10.0;
  }
  if (*(_DWORD *)(a1 + 20) > 2u)
  {
    unint64_t v13 = *(dispatch_source_s **)(a1 + 536);
    dispatch_time_t v14 = -1LL;
LABEL_32:
    dispatch_source_set_timer(v13, v14, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    return;
  }

  if (*(_BYTE *)(a1 + 356))
  {
    uint64_t v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: ActProbe ongoing for %f many seconds",  "__WiFiLQAMgrDoActiveProbe",  *(void *)&v10);
    }
    objc_autoreleasePoolPop(v12);
LABEL_31:
    uint64_t v23 = *(dispatch_source_s **)(a1 + 336);
    dispatch_time_t v14 = dispatch_time(0LL, (uint64_t)(v11 * 1000000000.0));
    unint64_t v13 = v23;
    goto LABEL_32;
  }

  if (v10 != 0.0 && v11 > v10) {
    goto LABEL_31;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t valuePtr = *(unsigned int *)(a1 + 344);
  CFNumberRef v17 = CFNumberCreate(0LL, kCFNumberCFIndexType, &valuePtr);
  CFNumberRef v18 = v17;
  if (valuePtr && v17)
  {
    uint64_t v19 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
    CFArrayAppendValue(v19, v18);
    CFDictionarySetValue(Mutable, @"kWiFiLqaMgrProbeSize", v19);
    *(_DWORD *)(a1 + 20) = 3;
    uint64_t v20 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      uint64_t v21 = *(int *)(a1 + 20);
      else {
        uint64_t v22 = *(&off_1001E2D88 + v21);
      }
      [(id)qword_100219F60 WFLog:3, "%s: %@", "__WiFiLQAMgrSetState", v22 message];
    }

    objc_autoreleasePoolPop(v20);
    if (sub_1000157E8(a1, Mutable, v6, (uint64_t)sub_100021EA0, a1))
    {
      *(_DWORD *)(a1 + 20) = 2;
      uint64_t v24 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        uint64_t v25 = *(int *)(a1 + 20);
        else {
          unint64_t v26 = *(&off_1001E2D88 + v25);
        }
        [(id)qword_100219F60 WFLog:3, "%s: %@", "__WiFiLQAMgrSetState", v26 message];
      }

      objc_autoreleasePoolPop(v24);
      uint64_t v29 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: ActProbeEnqueue Failed, reverting to BadLinkState",  "__WiFiLQAMgrDoActiveProbe");
      }
      objc_autoreleasePoolPop(v29);
      CFNumberRef v30 = *(dispatch_source_s **)(a1 + 336);
      dispatch_time_t v31 = dispatch_time(0LL, (uint64_t)(v11 * 1000000000.0));
      dispatch_source_set_timer(v30, v31, 0xFFFFFFFFFFFFFFFFLL, 0LL);
      if (!Mutable) {
        goto LABEL_52;
      }
    }

    else
    {
      CFNumberRef v27 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        if (*(_BYTE *)(a1 + 392)) {
          uint64_t v28 = " for auto leave evaluation.";
        }
        else {
          uint64_t v28 = ".";
        }
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: ActProbeEnqueue Enqueued%s",  "__WiFiLQAMgrDoActiveProbe",  v28);
      }

      objc_autoreleasePoolPop(v27);
      *(_BYTE *)(a1 + 356) = 1;
      *(_DWORD *)(a1 + 48_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
      *(CFAbsoluteTime *)(a1 + 36_Block_object_dispose((const void *)(v1 - 48), 8) = CFAbsoluteTimeGetCurrent();
      *(_OWORD *)(a1 + 456) = 0u;
      *(_OWORD *)(a1 + 472) = 0u;
      if (!Mutable) {
        goto LABEL_52;
      }
    }
  }

  else
  {
    CFNumberRef v33 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Null probe size or Null probeSizeRef",  "__WiFiLQAMgrDoActiveProbe");
    }
    objc_autoreleasePoolPop(v33);
    uint64_t v19 = 0LL;
    if (!Mutable) {
      goto LABEL_52;
    }
  }

  CFRelease(Mutable);
LABEL_52:
  if (v18) {
    CFRelease(v18);
  }
  if (v19) {
    CFRelease(v19);
  }
}

uint64_t sub_100021AB4(CFTypeRef cf, char a2, char a3)
{
  if (!&_managed_event_fetch) {
    return 0LL;
  }
  if (cf)
  {
    CFRetain(cf);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000221BC;
    void v8[3] = &unk_1001E2D20;
    v8[4] = cf;
    char v9 = a2;
    char v10 = a3;
    return managed_event_fetch(1LL, v8);
  }

  else
  {
    int v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQAMgr is NULL",  "__WiFiLQAMgrFetchSymptomsViewOfLink");
    }
    objc_autoreleasePoolPop(v7);
    return 0LL;
  }

uint64_t sub_100021B90(uint64_t a1)
{
  if (!a1) {
    return 1LL;
  }
  SInt32 error = -1431655766;
  if (*(void *)(a1 + 1280))
  {
    int v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Notification already pending. Ignoring it",  "__WiFiLQAMgrCheckUsrInput");
    }
    objc_autoreleasePoolPop(v2);
    int v3 = 0LL;
    goto LABEL_6;
  }

  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  int v3 = Mutable;
  if (!Mutable)
  {
LABEL_6:
    uint64_t v4 = 1LL;
    goto LABEL_16;
  }

  CFDictionarySetValue(Mutable, kCFUserNotificationAlertHeaderKey, @"WiFi Trigger Disconnect");
  CFDictionarySetValue(v3, kCFUserNotificationDefaultButtonTitleKey, @"Accept");
  CFDictionarySetValue(v3, kCFUserNotificationAlternateButtonTitleKey, @"Tap To Radar");
  if (SBUserNotificationDismissOnLock)
  {
    CFDictionarySetValue(v3, SBUserNotificationDismissOnLock, kCFBooleanTrue);
    CFDictionarySetValue(v3, SBUserNotificationAlertMessageDelimiterKey, &stru_1001EB6E0);
  }

  int v6 = CFUserNotificationCreate(kCFAllocatorDefault, 10.0, 0LL, &error, v3);
  *(void *)(a1 + 1280) = v6;
  uint64_t v4 = 1LL;
  if (!error && v6)
  {
    CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource( kCFAllocatorDefault,  v6,  (CFUserNotificationCallBack)sub_100023178,  0LL);
    *(void *)(a1 + 1264) = RunLoopSource;
    if (!RunLoopSource) {
      goto LABEL_17;
    }
    Main = CFRunLoopGetMain();
    CFRunLoopAddSource(Main, *(CFRunLoopSourceRef *)(a1 + 1264), kCFRunLoopDefaultMode);
    char v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 2, "%s: Notification created", "__WiFiLQAMgrCheckUsrInput");
    }
    objc_autoreleasePoolPop(v9);
    uint64_t v4 = 0LL;
  }

LABEL_16:
  if (!*(void *)(a1 + 1264))
  {
LABEL_17:
    char v10 = *(const void **)(a1 + 1280);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 1280) = 0LL;
    }
  }

  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

  sub_10003A8FC((vm_address_t)a2, a3);
  sub_10003A8FC((vm_address_t)a4, a5);
  return 0LL;
}

  sub_10003A8FC((vm_address_t)a2, a3);
  return 0LL;
}

  objc_autoreleasePoolPop(v6);
}

    sub_1000D4854(a1);
    goto LABEL_17;
  }

  uint64_t v22 = Count;
  uint64_t v23 = 0LL;
  while (1)
  {
    uint64_t v24 = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v23);
    uint64_t v25 = CFDictionaryGetValue(v24, @"CHANNEL");
    v28.length = CFArrayGetCount(v13);
    v28.id location = 0LL;
    if (!CFArrayContainsValue(v13, v28, v25)) {
      break;
    }
    if (v22 == ++v23) {
      goto LABEL_11;
    }
  }

  unint64_t v26 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "Client sent Invalid channel %s %@", "WiFiDeviceManagerSetBGScanCacheState", v25 message];
  }
  objc_autoreleasePoolPop(v26);
  if (Mutable) {
LABEL_18:
  }
    CFRelease(Mutable);
LABEL_19:
  if (v13) {
    CFRelease(v13);
  }
}

  sub_100039588((uint64_t)@"com.apple.wifi.6eNotification", (uint64_t)v10);
LABEL_17:
  CFRelease(v10);
LABEL_18:
  objc_autoreleasePoolPop(v4);
}

  *(_BYTE *)(a1 + 40) = v4 + 1;
  LODWORD(v7) = v10;
LABEL_17:
  double v11 = a1 + 24LL * v7;
  *(_DWORD *)(v11 + 56) = a2;
  uint64_t v12 = (unsigned int *)(v11 + 56);
  *((void *)v12 + 1) = a3;
  *((void *)v12 - 1) = 0LL;
  BOOL v5 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: CATS Register Client Type: %d nclients:%d",  "WifiDeviceManagerCatsRegisterClient",  *v12,  *(unsigned __int8 *)(a1 + 40));
  }
  int v6 = 0LL;
LABEL_20:
  objc_autoreleasePoolPop(v5);
  return v6;
}

    CFNumberRef v18 = +[WiFiXPCManager __filteredScanResults:scanParameters:]( &OBJC_CLASS___WiFiXPCManager,  "__filteredScanResults:scanParameters:",  a3,  v12);
    uint64_t v19 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
    [v19 setObject:v18 forKeyedSubscript:CWFXPCResultKey];
    if ([a5 response])
    {
      uint64_t v20 = (void (**)(id, void, id))[a5 response];
      v20[2](v20, 0LL, v19);
    }
  }

  objc_autoreleasePoolPop(v9);
}

    uint64_t v4 = 0LL;
    goto LABEL_15;
  }

void sub_100021DB0(_BYTE *a1, int a2)
{
  if (a1)
  {
    if (a1[2745])
    {
      if (a2 != 255)
      {
        a1[2744] = a1[2744] + 1 - 10 * ((6554 * (a1[2744] + 1)) >> 16);
        ++a1[1296];
        a1[2745] = 0;
        return;
      }

      BOOL v5 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  2,  "%s: recordIdx invalid",  "__WiFiLQAMgrFinishCurLQAMetricsRecord");
      }
      uint64_t v4 = v5;
    }

    else
    {
      int v3 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: curRecord %d is not busy",  "__WiFiLQAMgrFinishCurLQAMetricsRecord",  a1[2744]);
      }
      uint64_t v4 = v3;
    }

    objc_autoreleasePoolPop(v4);
  }

void sub_100021EA0(int a1, CFArrayRef theArray, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = 0LL;
  uint64_t valuePtr = 0LL;
  if (a4 && *(_BYTE *)(a4 + 632))
  {
    *(_BYTE *)(a4 + 356) = 0;
    ++*(void *)(a4 + 360);
    if (a3)
    {
      uint64_t v23 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Active Probe gave an error %ld",  "__WiFiLQAMgrActiveProbeResultCallBack",  a3);
      }
    }

    else if (theArray)
    {
      if (CFArrayGetCount(theArray))
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0LL);
        Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrNumProbesSent");
        if (Value) {
          CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr);
        }
        char v9 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrNumProbesFail");
        if (v9) {
          CFNumberGetValue(v9, kCFNumberCFIndexType, &v25);
        }
        if (*(_BYTE *)(a4 + 392)) {
          int64_t v10 = 3000000000LL;
        }
        else {
          int64_t v10 = 10000000000LL;
        }
        if (*(_DWORD *)(a4 + 20) != 3)
        {
          uint64_t v12 = objc_autoreleasePoolPush();
          if (qword_100219F60)
          {
            uint64_t v13 = *(int *)(a4 + 20);
            else {
              dispatch_time_t v14 = *(&off_1001E2D88 + v13);
            }
            [(id)qword_100219F60 WFLog:4, "%s: Called from lqaState: %@", "__WiFiLQAMgrActiveProbeResultCallBack", v14 message];
          }

          goto LABEL_31;
        }

        uint64_t v11 = valuePtr;
        if (valuePtr)
        {
          *(_DWORD *)(a4 + 2820) = 9;
          if (sub_100019814(a4, v11, v25))
          {
            sub_1000150D0(a4, 0LL);
            return;
          }

          uint64_t v19 = *(dispatch_source_s **)(a4 + 336);
          dispatch_time_t v20 = dispatch_time(0LL, v10);
          dispatch_source_set_timer(v19, v20, 0xFFFFFFFFFFFFFFFFLL, 0LL);
          *(_DWORD *)(a4 + 20) = 2;
          uint64_t v12 = objc_autoreleasePoolPush();
          CFNumberRef v18 = (void *)qword_100219F60;
          if (!qword_100219F60) {
            goto LABEL_31;
          }
        }

        else
        {
          int v15 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQA mgr No Probes sent\n",  "__WiFiLQAMgrActiveProbeResultCallBack");
          }
          objc_autoreleasePoolPop(v15);
          int v16 = *(dispatch_source_s **)(a4 + 336);
          dispatch_time_t v17 = dispatch_time(0LL, v10);
          dispatch_source_set_timer(v16, v17, 0xFFFFFFFFFFFFFFFFLL, 0LL);
          *(_DWORD *)(a4 + 20) = 2;
          uint64_t v12 = objc_autoreleasePoolPush();
          CFNumberRef v18 = (void *)qword_100219F60;
          if (!qword_100219F60) {
            goto LABEL_31;
          }
        }

        uint64_t v21 = *(int *)(a4 + 20);
        else {
          uint64_t v22 = *(&off_1001E2D88 + v21);
        }
        [v18 WFLog:3, "%s: %@", "__WiFiLQAMgrSetState", v22 message];
LABEL_31:
        objc_autoreleasePoolPop(v12);
        return;
      }

      uint64_t v23 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: zero elements in probeResultRef",  "__WiFiLQAMgrActiveProbeResultCallBack",  v24);
      }
    }

    else
    {
      uint64_t v23 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: probeResultRef is null",  "__WiFiLQAMgrActiveProbeResultCallBack",  v24);
      }
    }

    objc_autoreleasePoolPop(v23);
  }

void sub_1000221BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  value = 0LL;
  int valuePtr = 0;
  uint64_t v29 = 0LL;
  CFNumberRef v30 = 0LL;
  uint64_t v28 = 0LL;
  CFNumberRef v26 = 0LL;
  CFNumberRef v27 = 0LL;
  CFNumberRef number = 0LL;
  CFNumberRef v25 = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v21 = 0LL;
  pthread_mutex_lock(&stru_100218F08);
  uint64_t v6 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v6 + 2976))
  {
    int v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s LQA manager is in closing \n",  "__WiFiLQAMgrFetchSymptomsViewOfLink_block_invoke");
    }
    objc_autoreleasePoolPop(v7);
    pthread_mutex_unlock(&stru_100218F08);
    CFRelease(*(CFTypeRef *)(a1 + 32));
    return;
  }

  *(void *)(v6 + 496) = 0x400000000000FFFFLL;
  *(_DWORD *)(v6 + 520) = 0;
  *(void *)(v6 + 512) = 0LL;
  *(_BYTE *)(v6 + 52_Block_object_dispose((const void *)(v1 - 48), 8) = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(v6 + 529) = *(_BYTE *)(a1 + 41);
  if ((_DWORD)a2 || !a3)
  {
    uint64_t v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error %d from Managed Event Fetch",  "__WiFiLQAMgrFetchSymptomsViewOfLink_block_invoke",  a2);
    }
  }

  else
  {
    double v8 = *(const __CFDictionary **)(a3 + 48);
    if (v8)
    {
      if (CFDictionaryGetValueIfPresent(v8, @"impact-flags", (const void **)&value) && value)
      {
        CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
        *(_DWORD *)(*(void *)(a1 + 32) + 492LL) = valuePtr;
      }

      char v9 = 0;
      if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a3 + 48), @"net-score", (const void **)&number)
        && number)
      {
        CFNumberGetValue(number, kCFNumberIntType, &v21);
        uint64_t v10 = *(void *)(a1 + 32);
        int v11 = *(_DWORD *)(v10 + 504);
        if (v11 == (_DWORD)v21)
        {
          char v9 = 0;
        }

        else
        {
          uint64_t v13 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Change in netscore observed from %d to %d",  "__WiFiLQAMgrFetchSymptomsViewOfLink_block_invoke",  *(unsigned int *)(*(void *)(a1 + 32) + 504),  v21);
          }
          objc_autoreleasePoolPop(v13);
          int v11 = v21;
          uint64_t v10 = *(void *)(a1 + 32);
          char v9 = 1;
        }

        *(_DWORD *)(v10 + 504) = v11;
      }

      if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a3 + 48), @"AWD-info", (const void **)&v30) && v30)
      {
        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v30, @"ARP-failures", (const void **)&v29) && v29)
        {
          CFNumberGetValue((CFNumberRef)v29, kCFNumberIntType, (char *)&v23 + 4);
          *(_DWORD *)(*(void *)(a1 + 32) + 512LL) = HIDWORD(v23);
        }

        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v30, @"dns-total", (const void **)&v27) && v27)
        {
          CFNumberGetValue(v27, kCFNumberIntType, (char *)&v22 + 4);
          *(_DWORD *)(*(void *)(a1 + 32) + 516LL) = HIDWORD(v22);
        }

        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v30, @"dns-impacted", (const void **)&v28) && v28)
        {
          CFNumberGetValue((CFNumberRef)v28, kCFNumberIntType, &v23);
          *(_DWORD *)(*(void *)(a1 + 32) + 520LL) = v23;
        }

        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v30, @"data-stalls-score", (const void **)&v26) && v26)
        {
          CFNumberGetValue(v26, kCFNumberIntType, &v22);
          uint64_t v14 = *(void *)(a1 + 32);
          int v15 = *(_DWORD *)(v14 + 524);
          if (v15 != (_DWORD)v22)
          {
            int v16 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Change in datastallscore observed from %d to %d",  "__WiFiLQAMgrFetchSymptomsViewOfLink_block_invoke",  *(unsigned int *)(*(void *)(a1 + 32) + 524),  v22);
            }
            objc_autoreleasePoolPop(v16);
            int v15 = v22;
            uint64_t v14 = *(void *)(a1 + 32);
            *(_DWORD *)(v14 + 524) = v22;
            char v9 = 1;
          }

          *(_DWORD *)(v14 + 496) = v15;
        }

        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)v30, @"rnf-denials-score", (const void **)&v25) && v25)
        {
          CFNumberGetValue(v25, kCFNumberFloatType, (char *)&v21 + 4);
          *(_DWORD *)(*(void *)(a1 + 32) + 500LL) = HIDWORD(v21);
        }
      }

      if (*(_BYTE *)(a1 + 40))
      {
        dispatch_time_t v17 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:4, "%s Symptoms Input: %@", "__WiFiLQAMgrFetchSymptomsViewOfLink_block_invoke", *(void *)(a3 + 48) message];
        }
        objc_autoreleasePoolPop(v17);
      }

      goto LABEL_49;
    }

    uint64_t v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: additional_info NULL from Managed Event Fetch",  "__WiFiLQAMgrFetchSymptomsViewOfLink_block_invoke",  v20);
    }
  }

  objc_autoreleasePoolPop(v12);
  char v9 = 0;
LABEL_49:
  uint64_t v18 = *(void *)(a1 + 32);
  *(_BYTE *)(v18 + 530) = v9;
  uint64_t v19 = *(dispatch_queue_s **)(v18 + 1272);
  if (v19) {
    dispatch_async_f(v19, (void *)v18, (dispatch_function_t)sub_100022620);
  }
  pthread_mutex_unlock(&stru_100218F08);
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_100022620(uint64_t a1)
{
  if (!a1)
  {
    double v56 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQAMgr is NULL",  "__WiFiLQAMgrSymptomsInputCallBack");
    }
    goto LABEL_159;
  }

  if (*(_BYTE *)(a1 + 529) && (*(_BYTE *)(a1 + 530) || !*(_BYTE *)(a1 + 531))) {
    sub_10001DA0C(a1);
  }
  if (*(_BYTE *)(a1 + 200) != 1)
  {
    if (!*(_BYTE *)(a1 + 528))
    {
LABEL_160:
      CFMutableStringRef Mutable = 0LL;
      BOOL v49 = 0;
      BOOL v50 = 0;
      LODWORD(v4) = 0;
      unsigned int v5 = 0;
      uint64_t v42 = 0LL;
      uint64_t v23 = 0LL;
      uint64_t v64 = 0LL;
      uint64_t v65 = 0LL;
      uint64_t v51 = 0LL;
LABEL_114:
      char v28 = 1;
LABEL_115:
      double v52 = +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance");
      uint64_t v53 = 256LL;
      if (!v50) {
        uint64_t v53 = 0LL;
      }
      -[WiFiUsageMonitor setTdLogic_execState:forInterface:]( v52,  "setTdLogic_execState:forInterface:",  (v65 << 48) | (v64 << 56) | (v23 << 40) | (v42 << 32) | ((unint64_t)v5 << 24) | ((unint64_t)v4 << 16) | v53 | v49,  v51,  *(void *)(a1 + 40));
      if (Mutable) {
        CFRelease(Mutable);
      }
      char v54 = v28 ^ 1;
      if (!a1) {
        char v54 = 1;
      }
      if ((v54 & 1) == 0) {
        *(_BYTE *)(a1 + 161) = 0;
      }
      goto LABEL_123;
    }

    int v2 = *(_DWORD *)(a1 + 20);
    if (v2 == 1)
    {
      double v56 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Trigger Disconnect in GoodLinkState",  "__WiFiLQAMgrSymptomsInputCallBack");
      }
    }

    else
    {
      if (v2)
      {
        BOOL v3 = sub_100020DA0(a1, 0LL, 0LL);
        BOOL v4 = v3;
        if (!*(_BYTE *)(a1 + 637))
        {
          uint64_t v9 = 0LL;
          unsigned int v5 = 0;
          char v8 = 0;
          int v7 = 1;
          goto LABEL_31;
        }

        if (!*(_BYTE *)(a1 + 638) || *(_DWORD *)(a1 + 2788) <= *(_DWORD *)(a1 + 652))
        {
          char v8 = 0;
          unsigned int v5 = 0;
          uint64_t v9 = 0LL;
          int v7 = 1;
          goto LABEL_29;
        }

        if (*(_BYTE *)(a1 + 2816) || (unsigned int v11 = *(_DWORD *)(a1 + 496), v11 < 0x1A) || v11 == 0xFFFF || v3)
        {
          unsigned int v5 = 0;
          double v6 = *(float *)(a1 + 500);
          int v7 = 1;
          if (v6 < 0.01)
          {
            char v8 = 1;
            uint64_t v9 = 0LL;
LABEL_29:
            if (*(_BYTE *)(a1 + 637))
            {
              int v12 = *(unsigned __int8 *)(a1 + 638);
              BOOL v61 = *(_BYTE *)(a1 + 638) != 0;
              goto LABEL_32;
            }

LABEL_31:
            BOOL v61 = 0;
            int v12 = *(unsigned __int8 *)(a1 + 638);
LABEL_32:
            BOOL v62 = v12 != 0;
            int v13 = *(_DWORD *)(a1 + 2800);
            unsigned int v14 = sub_10001DD2C(a1) << 14;
            int v15 = *(unsigned __int8 *)(a1 + 637);
            uint64_t v63 = v9;
            if (*(_BYTE *)(a1 + 637)) {
              int v15 = (*(_BYTE *)(a1 + 638) != 0) << 13;
            }
            int v16 = v13 | (v4 << 23) | v14 | v15 | 0x9800;
            unsigned int v17 = *(_DWORD *)(a1 + 496);
            if (v17 != 0xFFFF && v17 >= 0x1A) {
              v16 &= ~0x800u;
            }
            double v19 = *(float *)(a1 + 500);
            if (v19 > 1.01 || v19 < 0.01) {
              unsigned int v21 = v16;
            }
            else {
              unsigned int v21 = v16 & 0xFFFFEFFF;
            }
            if (-[WiFiUserInteractionMonitor isCellularDataUsable]( +[WiFiUserInteractionMonitor sharedInstance]( &OBJC_CLASS___WiFiUserInteractionMonitor,  "sharedInstance"),  "isCellularDataUsable"))
            {
              unsigned int v22 = v21;
            }

            else
            {
              unsigned int v22 = v21 & 0xFFFF7FFE;
            }

            if (*(_BYTE *)(a1 + 639)
              && *(_BYTE *)(a1 + 637)
              && *(_BYTE *)(a1 + 638)
              && !-[WiFiUserInteractionMonitor isCellularDataUsable]( +[WiFiUserInteractionMonitor sharedInstance]( &OBJC_CLASS___WiFiUserInteractionMonitor,  "sharedInstance"),  "isCellularDataUsable"))
            {
              uint64_t v55 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s CellData setting overriding TrgDisc decision",  "__WiFiLQAMgrSymptomsInputCallBack");
              }
              objc_autoreleasePoolPop(v55);
              int v7 = 0;
              uint64_t v23 = 1LL;
            }

            else
            {
              uint64_t v23 = 0LL;
            }

            if (sub_100053B20(*(void *)(a1 + 32)) == 1
              && (*(_DWORD *)(a1 + 216) == 1 || !*(_BYTE *)(a1 + 637) || !*(_BYTE *)(a1 + 638)))
            {
              CFNumberRef v26 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Manual Join: User Interactive or RNF disabled, overriding TrgDisc decision",  "__WiFiLQAMgrSymptomsInputCallBack");
              }
              uint64_t v27 = 0LL;
              uint64_t v64 = 0LL;
              goto LABEL_80;
            }

            char v24 = v8 ^ 1;
            if (!v7) {
              char v24 = 1;
            }
            if ((v24 & 1) != 0)
            {
              if (v4 || !v7)
              {
                if (!v7)
                {
LABEL_76:
                  uint64_t v60 = 0LL;
                  uint64_t v64 = 0LL;
LABEL_81:
                  uint64_t v65 = 0LL;
                  char v28 = 1;
                  goto LABEL_82;
                }
              }

              else if (*(_DWORD *)(a1 + 2788) > *(_DWORD *)(a1 + 648) - 2)
              {
                int v7 = 0;
                uint64_t v60 = 0LL;
                uint64_t v64 = 0LL;
                char v28 = 1;
                uint64_t v29 = 1LL;
                goto LABEL_71;
              }
            }

            else
            {
              CFNumberRef v25 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Proceeding with Trigger Discconect - DataStallScore %d AppPolicyScore %f",  "__WiFiLQAMgrSymptomsInputCallBack",  *(unsigned int *)(a1 + 496),  *(float *)(a1 + 500));
              }
              objc_autoreleasePoolPop(v25);
            }

            if (!sub_10001DD2C(a1))
            {
              CFNumberRef v26 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Foreground Networking App not present. Overriding TrgDisc decision",  "__WiFiLQAMgrSymptomsInputCallBack");
              }
              uint64_t v27 = 0LL;
              uint64_t v64 = 1LL;
              goto LABEL_80;
            }

            if (*(_BYTE *)(a1 + 633))
            {
              int v7 = 0;
              goto LABEL_76;
            }

            if (!*(_BYTE *)(a1 + 636))
            {
              char v28 = 0;
              uint64_t v60 = 0LL;
              uint64_t v64 = 0LL;
              uint64_t v65 = 0LL;
              int v7 = 1;
LABEL_82:
              unsigned int v30 = sub_1000230B8(a1);
              if (v30 == 255)
              {
                CFMutableStringRef Mutable = 0LL;
                uint64_t v42 = v63;
LABEL_112:
                BOOL v49 = v61;
                BOOL v50 = v62;
                uint64_t v51 = v60;
                if ((v28 & 1) == 0) {
                  sub_1000150D0(a1, (uint64_t)Mutable);
                }
                goto LABEL_114;
              }

              int v31 = v30;
              unsigned int v58 = v5;
              BOOL v59 = v4;
              unsigned int v32 = v30;
              uint64_t v33 = a1 + 144LL * v30;
              uint64_t v34 = (unsigned int *)(v33 + 1304);
              *(_BYTE *)(v33 + 1341) = v7;
              uint64_t v35 = (const float *)(a1 + 492);
              *(_DWORD *)(v33 + 1360) = *(_DWORD *)(a1 + 512);
              *(int32x2_t *)(v33 + 1364) = vrev64_s32(*(int32x2_t *)(a1 + 516));
              *(double *)(v33 + 1392) = *(float *)(a1 + 500);
              *(_DWORD *)(v33 + 140_Block_object_dispose((const void *)(v1 - 48), 8) = *(_DWORD *)(a1 + 496);
              float32x2_t v36 = vld1_dup_f32(v35);
              *(float32x2_t *)(v33 + 134_Block_object_dispose((const void *)(v1 - 48), 8) = v36;
              double v37 = (unsigned int *)(v33 + 1348);
              uint64_t v38 = v7 | v22 & 0xFFFFFFFE;
              *(_DWORD *)(v33 + 1384) = v38;
              double Current = CFAbsoluteTimeGetCurrent();
              double v40 = 0.0;
              if (*(_DWORD *)(a1 + 2752) == 1) {
                double v40 = Current - *(double *)(a1 + 2760);
              }
              uint64_t v57 = v23;
              if ((v28 & 1) != 0)
              {
                CFMutableStringRef Mutable = 0LL;
LABEL_109:
                uint64_t v47 = objc_autoreleasePoolPush();
                uint64_t v42 = v63;
                if (qword_100219F60)
                {
                  uint64_t v48 = a1 + 144LL * v32;
                  objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: TrgDiscStatus %u [Rssi %d TxFrms %ld TxFail %ld TxRet %ld fwFrms %ld fwFail %ld fwRtry %ld RxFrm s %ld BcnSch %ld BcnRx %ld Awd %ld UnGw %f FgApp %ld Walkout %d possibleRoam %d DataStallScore %ld D eltaTime %fsecs TD1 %d FastDisconnect %d]",  "__WiFiLQAMgrSymptomsInputCallBack",  v38,  *(char *)(v48 + 1340),  *v34,  *(unsigned int *)(v48 + 1308),  *(unsigned int *)(v48 + 1312),  *(unsigned int *)(v48 + 1324),  *(unsigned int *)(v48 + 1328),  *(unsigned int *)(v48 + 1332),  *(unsigned int *)(v48 + 1336),  *(unsigned int *)(v48 + 1316),  *(unsigned int *)(v48 + 1320),  *(unsigned __int8 *)(v48 + 1356),  *(void *)&v40,  *v37,  *(unsigned __int8 *)(a1 + 273),  *(unsigned __int8 *)(a1 + 272),  *(unsigned int *)(a1 + 496),  *(void *)(a1 + 280),  *(unsigned __int8 *)(a1 + 2816),  v59);
                }

                objc_autoreleasePoolPop(v47);
                sub_100021DB0((_BYTE *)a1, v31);
                LODWORD(v4) = v59;
                unsigned int v5 = v58;
                uint64_t v23 = v57;
                goto LABEL_112;
              }

              if (*(double *)(a1 + 136) != 0.0) {
              if (*(double *)(a1 + 120) != 0.0)
              }
              CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
              uint64_t v43 = sub_100095BC8(*(const void **)(a1 + 48));
              CFStringAppendFormat( Mutable,  0LL,  @"Your WiFi %@ was automatically disconnected due to poor connectivity\n",  v43);
              double v44 = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
              if (!v44) {
                goto LABEL_109;
              }
              int v45 = v44;
              CFStringAppendFormat(v44, 0LL, @"Trigger Disconnect with signatures - ");
              if ((v22 & 2) != 0)
              {
                CFStringAppendFormat(v45, 0LL, @"TxPER, ");
                if ((v22 & 4) == 0)
                {
LABEL_95:
                  if ((v22 & 8) == 0) {
                    goto LABEL_96;
                  }
                  goto LABEL_128;
                }
              }

              else if ((v22 & 4) == 0)
              {
                goto LABEL_95;
              }

              CFStringAppendFormat(v45, 0LL, @"FwTxPER, ");
              if ((v22 & 8) == 0)
              {
LABEL_96:
                if ((v22 & 0x10) == 0) {
                  goto LABEL_97;
                }
                goto LABEL_129;
              }

  CFStringAppend(theString, @" ScUpTr");
  if ((a1 & 0x400) == 0)
  {
LABEL_12:
    if ((a1 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }

  sub_10003A8FC((vm_address_t)a2, a3);
  sub_10003A8FC((vm_address_t)a4, a5);
  return 0LL;
}

    uint64_t v20 = v12;
LABEL_32:
    objc_autoreleasePoolPop(v20);
    double v19 = off_1001E37A8;
    goto LABEL_33;
  }

  if (*(_DWORD *)(a1 + 3272))
  {
    unsigned int v21 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "Auto association attempt canceled because auto join state is %@.", sub_1000BDC98(*(_DWORD *)(a1 + 3272)) message];
    }
    objc_autoreleasePoolPop(v21);
    if (*(_DWORD *)(a1 + 3272) == 2)
    {
      unsigned int v22 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3 message:"Setting forced Allband scan flag"];
      }
      objc_autoreleasePoolPop(v22);
      *(_BYTE *)(a1 + 3296) = 1;
    }

    return;
  }

  if ((*(_BYTE *)(a1 + 5211)
     || sub_1000E0424(a1)
     || *(_DWORD *)(a1 + 5336)
     || *(unsigned __int8 *)(a1 + 5353) != -*(_BYTE *)(a1 + 5352))
    && (!*(_BYTE *)(a1 + 7008) || !sub_1000DCBFC(a1, 1LL)))
  {
    int v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Auto association attempt canceled because MIS is enabled. MIS client count: wifi=%d bt=%d misBlockScan=%d MIS di scovery uint64_t state = %d",  *(unsigned __int8 *)(a1 + 5352),  *(unsigned __int8 *)(a1 + 5353),  *(unsigned __int8 *)(a1 + 5320),  *(unsigned __int8 *)(a1 + 5213));
    }
    goto LABEL_31;
  }

  if ((*(_DWORD *)(a1 + 5388) == 102 && (*(_BYTE *)(a1 + 5384) & 1) != 0 || *(_BYTE *)(a1 + 50))
    && *(_DWORD *)(a1 + 5512) != 1
    && !*(_BYTE *)(a1 + 37))
  {
    int v12 = objc_autoreleasePoolPush();
    int v13 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_31;
    }
    unsigned int v14 = "Auto association attempt canceled because BT SCO is enabled";
    goto LABEL_30;
  }

  if (sub_1000E0348(a1) && sub_1000DF3D8(a1))
  {
    int v12 = objc_autoreleasePoolPush();
    int v13 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_31;
    }
    unsigned int v14 = "Auto association attempt canceled because hosted AWDL session is active";
    goto LABEL_30;
  }

  if (sub_1000D6EA0(a1))
  {
    int v12 = objc_autoreleasePoolPush();
    int v13 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_31;
    }
    unsigned int v14 = "Auto-join deferral is active, will not continue auto-join";
    goto LABEL_30;
  }

  if (*(_BYTE *)(a1 + 6848) && *v9)
  {
    int v12 = objc_autoreleasePoolPush();
    int v13 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_31;
    }
    unsigned int v14 = "Associated in Auto Hotspot Mode and waiting for IP";
    goto LABEL_30;
  }

  uint64_t v23 = *(void *)(a1 + 64);
  char v24 = (const void *)sub_100043E8C(v23);
  CFNumberRef v25 = sub_100040538(v23, v24);
  if (v25)
  {
    CFNumberRef v26 = v25;
    if (!*(_BYTE *)(a1 + 6848) || *(_DWORD *)(a1 + 176) == 1 && !*(void *)(a1 + 6928))
    {
      uint64_t v34 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: Already connected to %@.", "__WiFiDeviceManagerAutoAssociate", sub_100095BC8(v26) message];
      }
      objc_autoreleasePoolPop(v34);
      sub_10010D14C(a1, @"autoJoinAlreadyAssoicated", v26, 0LL);
      CFRelease(v26);
      return;
    }

    CFRelease(v25);
  }

  uint64_t v27 = *(_DWORD *)(a1 + 5408);
  char v28 = objc_autoreleasePoolPush();
  if (!v27)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Auto association attempt canceled because thermal index (%d) is below disabled threshold (%d).",  *(unsigned int *)(a1 + 5408),  0);
    }
    uint64_t v20 = v28;
    goto LABEL_32;
  }

  uint64_t v29 = *(void **)(a1 + 5400);
  if (v29 && ([v29 isPowerResourceAvailable:0] & 1) == 0)
  {
    uint64_t v35 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:" WiFiBatteryMgmt : Auto association attempt canceled because Battery resource is not available."];
    }
    objc_autoreleasePoolPop(v35);
    if (!objc_msgSend(objc_msgSend(*(id *)(a1 + 5400), "pendingRequests"), "count")) {
      sub_10010D14C(a1, @"autoJoinNotPermitted", 0LL, 0LL);
    }
    objc_autoreleasePoolPop(v28);
  }

  else
  {
    objc_autoreleasePoolPop(v28);
    unsigned int v30 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      int v31 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@+} %@",  @"AUTOJOIN",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s: starting auto-join",  "__WiFiDeviceManagerAutoAssociate")),  "UTF8String"));
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buuint64_t f = 136446210;
        int v45 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v31, "UTF8String")),  "UTF8String");
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
      }
    }

    objc_autoreleasePoolPop(v30);
    unsigned int v32 = objc_autoreleasePoolPush();
    [*(id *)(a1 + 6632) removeExpiredDenyListedState:3];
    objc_autoreleasePoolPop(v32);
    sub_1000D3FD0(a1);
    if (*(_BYTE *)(a1 + 24))
    {
      uint64_t v33 = sub_1000452B8(*(void *)(a1 + 64));
      if (a2)
      {
        if (v33) {
          *(_DWORD *)(a1 + 2_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
        }
      }
    }

    if (*(_BYTE *)(a1 + 104) || !sub_1000FC52C(a1))
    {
      objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "autoJoinUpdatedWithState:interfaceName:",  1,  sub_100043E8C(*(void *)(a1 + 64)));
      sub_1000CACC4(a1);
    }

    else
    {
      float32x2_t v36 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        double v37 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@-} %@",  @"AUTOJOIN",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s: auto association attempt cancelled because scan throttle is exceeded.",  "__WiFiDeviceManagerAutoAssociate")),  "UTF8String"));
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          uint64_t v38 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v37, "UTF8String")),  "UTF8String");
          *(_DWORD *)buuint64_t f = 136446210;
          int v45 = v38;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%{public}s",  buf,  0xCu);
        }
      }

      objc_autoreleasePoolPop(v36);
      *(_DWORD *)(a1 + 3272) = sub_1000F17B8(a1);
      uint64_t v39 = *(_DWORD *)(a1 + 348);
      if (v39) {
        *(_DWORD *)(a1 + 34_Block_object_dispose((const void *)(v1 - 48), 8) = v39 - 1;
      }
    }
  }

    CFRelease(v10);
    return;
  }

  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v18 = *(double *)(v6 + 6968);
  if (Current <= v18 || Current - v18 >= 20.0)
  {
    uint64_t v20 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: no scan result. ",  "__WiFiDeviceManagerAutoInstantHotspotScanCallback");
    }
    objc_autoreleasePoolPop(v20);
    *(_DWORD *)(v6 + 3272) = *(_DWORD *)(v6 + 6844);
    sub_10010BEEC(v6, v10, 3u);
    unsigned int v21 = (unsigned int *)(v6 + 6448);
    *(_DWORD *)(v6 + 644_Block_object_dispose((const void *)(v1 - 48), 8) = a5;
LABEL_26:
    sub_1000325B0(v21);
    if (!v10) {
      return;
    }
    goto LABEL_31;
  }

  unsigned int v22 = *(_BYTE *)(v6 + 6920);
  uint64_t v23 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: no scan result. retry after 1 second",  "__WiFiDeviceManagerAutoInstantHotspotScanCallback");
  }
  objc_autoreleasePoolPop(v23);
  char v24 = dispatch_time(0LL, 1000000000LL);
  global_queue = dispatch_get_global_queue(0LL, 0LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10010C844;
  block[3] = &unk_1001E4AE8;
  uint64_t v35 = v22;
  void block[4] = v6;
  void block[5] = v10;
  dispatch_after(v24, global_queue, block);
  if (v10) {
    goto LABEL_31;
  }
}

  unsigned int v21 = *((_BYTE *)v37 + 24);
  _Block_object_dispose(&v36, 8);
  objc_autoreleasePoolPop(v9);
  return v21;
}

LABEL_128:
              CFStringAppendFormat(v45, 0LL, @"BeaconPER, ");
              if ((v22 & 0x10) == 0)
              {
LABEL_97:
                if ((v22 & 0x40) == 0) {
                  goto LABEL_98;
                }
                goto LABEL_130;
              }

LABEL_129:
              CFStringAppendFormat(v45, 0LL, @"Symptoms, ");
              if ((v22 & 0x40) == 0)
              {
LABEL_98:
                if ((v22 & 0x80) == 0) {
                  goto LABEL_99;
                }
                goto LABEL_131;
              }

LABEL_130:
              CFStringAppendFormat(v45, 0LL, @"ARP, ");
              if ((v22 & 0x80) == 0)
              {
LABEL_99:
                if ((v22 & 0x100) == 0) {
                  goto LABEL_100;
                }
                goto LABEL_132;
              }

LABEL_131:
              CFStringAppendFormat(v45, 0LL, @"MotionAggr, ");
              if ((v22 & 0x100) == 0)
              {
LABEL_100:
                if ((v22 & 0x200) == 0) {
                  goto LABEL_101;
                }
                goto LABEL_133;
              }

LABEL_132:
              CFStringAppendFormat(v45, 0LL, @"UsrWalkout, ");
              if ((v22 & 0x200) == 0)
              {
LABEL_101:
                if ((v22 & 0x400) == 0) {
                  goto LABEL_102;
                }
                goto LABEL_134;
              }

                      if ([a2 containsObject:&off_100204A58]) {
                        objc_msgSend( v9,  "setObject:forKeyedSubscript:",  objc_msgSend(a1, "domainName"),  @"DomainName");
                      }
                      goto LABEL_137;
                    }

LABEL_133:
              CFStringAppendFormat(v45, 0LL, @"EdgeBss, ");
              if ((v22 & 0x400) == 0)
              {
LABEL_102:
                if ((v22 & 0x20) == 0) {
                  goto LABEL_103;
                }
                goto LABEL_135;
              }

LABEL_134:
              CFStringAppendFormat(v45, 0LL, @"RoamCache, ");
              if ((v22 & 0x20) == 0)
              {
LABEL_103:
                if ((v22 & 0x200000) == 0) {
                  goto LABEL_104;
                }
                goto LABEL_136;
              }

LABEL_135:
              CFStringAppendFormat(v45, 0LL, @"Probe, ");
              if ((v22 & 0x200000) == 0)
              {
LABEL_104:
                if ((v22 & 0x800000) == 0)
                {
LABEL_106:
                  double v46 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    [(id)qword_100219F60 WFLog:3, "%@", v45 message];
                  }
                  objc_autoreleasePoolPop(v46);
                  CFRelease(v45);
                  goto LABEL_109;
                }

  double v56 = sub_1000DEA34(a3, a2, 1);
  BOOL v69 = sub_100016898(*(void *)(a3 + 120), v56, theDict, *v7 != 0);
  if (v69 != 0.0)
  {
    uint64_t v57 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &v69);
    if (v57)
    {
      unsigned int v58 = v57;
      CFDictionaryAddValue(theDict, @"SCALED_LQM", v57);
      CFRelease(v58);
    }
  }

  if (+[WiFiAIRAgent sharedInstance](&OBJC_CLASS___WiFiAIRAgent, "sharedInstance")
    && -[WiFiAIRAgent isInterfaceRankingInProgress]( +[WiFiAIRAgent sharedInstance](&OBJC_CLASS___WiFiAIRAgent, "sharedInstance"),  "isInterfaceRankingInProgress"))
  {
    sub_10001DE98();
  }

  BOOL v59 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RSSI");
  if (v59)
  {
    CFNumberGetValue(v59, kCFNumberSInt32Type, (void *)(a3 + 6200));
    uint64_t v60 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"CCA");
    if (v60) {
      CFNumberGetValue(v60, kCFNumberSInt8Type, (void *)(a3 + 6204));
    }
    BOOL v61 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"SNR");
    if (v61) {
      CFNumberGetValue(v61, kCFNumberSInt16Type, (void *)(a3 + 6206));
    }
    CFDictionaryRemoveValue(theDict, @"ROAM_STATE");
    BOOL v62 = objc_autoreleasePoolPush();
    uint64_t v63 = -[__CFDictionary objectForKey:](theDict, "objectForKey:", @"CCA_STATS");
    if (v63)
    {
      uint64_t v64 = v63;
      [v63 removeObjectForKey:@"CCA_TIMESTAMP_TOTAL"];
      [v64 removeObjectForKey:@"CCA_SELF_TOTAL"];
      [v64 removeObjectForKey:@"CCA_OTHER_TOTAL"];
      [v64 removeObjectForKey:@"CCA_INTERFERENCE_TOTAL"];
      [v64 removeObjectForKey:@"CCA_TIMESTAMP_SLEEP"];
      [v64 removeObjectForKey:@"CCA_SELF_SLEEP"];
      [v64 removeObjectForKey:@"CCA_OTHER_SLEEP"];
      [v64 removeObjectForKey:@"CCA_INTERFERENCE_SLEEP"];
      [v64 removeObjectForKey:@"CCA_TIMESTAMP_WAKE"];
    }

    objc_autoreleasePoolPop(v62);
    uint64_t v68 = *(_DWORD *)(a3 + 6648);
    uint64_t v65 = CFNumberCreate(0LL, kCFNumberIntType, &v68);
    CFDictionarySetValue(theDict, @"kLQM_HOME_WORK_STATUS", v65);
    if (v65) {
      CFRelease(v65);
    }
    uint64_t v66 = *(void (**)(uint64_t, const void *, void, CFDictionaryRef))(a3 + 4224);
    if (v66) {
      v66(a3, a2, *(void *)(a3 + 4232), theDict);
    }
    uint64_t v67 = *(void (**)(uint64_t, const void *, void, void, CFDictionaryRef))(a3 + 4384);
    if (v67) {
      v67(a3, a2, *(void *)(a3 + 4392), 0LL, theDict);
    }
    sub_1000D3350(a3);
  }

  if (v56) {
    CFRelease(v56);
  }
}

LABEL_105:
                CFStringAppendFormat(v45, 0LL, @"Recommendation, ");
                goto LABEL_106;
              }

                  goto LABEL_106;
                }

LABEL_136:
              CFStringAppendFormat(v45, 0LL, @"TD1.0, ");
              if ((v22 & 0x800000) == 0) {
                goto LABEL_106;
              }
              goto LABEL_105;
            }

            if (*(_BYTE *)(a1 + 1288))
            {
              CFNumberRef v26 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Suppress TrgDisc decision with User's previous input",  "__WiFiLQAMgrSymptomsInputCallBack");
              }
              uint64_t v64 = 0LL;
              uint64_t v27 = 1LL;
LABEL_80:
              uint64_t v60 = v27;
              objc_autoreleasePoolPop(v26);
              int v7 = 0;
              goto LABEL_81;
            }

            if (*(void *)(a1 + 1280))
            {
              char v28 = 0;
              CFMutableStringRef Mutable = 0LL;
              uint64_t v64 = 0LL;
              uint64_t v65 = 0LL;
              uint64_t v51 = 0LL;
LABEL_149:
              uint64_t v42 = v63;
              BOOL v49 = v61;
              BOOL v50 = v62;
              goto LABEL_115;
            }

            char v28 = 0;
            if (!sub_100021B90(a1))
            {
              CFMutableStringRef Mutable = 0LL;
              uint64_t v51 = 0LL;
              uint64_t v64 = 0LL;
              uint64_t v65 = 0LL;
              goto LABEL_149;
            }

            uint64_t v60 = 0LL;
            int v7 = 1;
            uint64_t v29 = 0LL;
            uint64_t v64 = 0LL;
LABEL_71:
            uint64_t v65 = v29;
            goto LABEL_82;
          }

          char v8 = 1;
          uint64_t v9 = 0LL;
          if (v6 > 1.01) {
            goto LABEL_29;
          }
          uint64_t v10 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Symptoms overriding TrgDisc decision - AppPolicyScore %f",  "__WiFiLQAMgrSymptomsInputCallBack",  *(float *)(a1 + 500));
          }
          unsigned int v5 = 0;
          uint64_t v9 = 1LL;
        }

        else
        {
          uint64_t v10 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Symptoms overriding TrgDisc decision - DataStallScore %d",  "__WiFiLQAMgrSymptomsInputCallBack",  *(unsigned int *)(a1 + 496));
          }
          uint64_t v9 = 0LL;
          unsigned int v5 = 1;
        }

        objc_autoreleasePoolPop(v10);
        int v7 = 0;
        char v8 = 1;
        goto LABEL_29;
      }

      double v56 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Trigger Disconnect in UnassociatedState",  "__WiFiLQAMgrSymptomsInputCallBack");
      }
    }

LABEL_159:
    objc_autoreleasePoolPop(v56);
    goto LABEL_160;
  }

LABEL_123:
  if (*(_BYTE *)(a1 + 200)) {
    *(_BYTE *)(a1 + 200) = 0;
  }
}

                    goto LABEL_128;
                  }

uint64_t sub_1000230B8(uint64_t a1)
{
  if (!a1) {
    return 255LL;
  }
  uint64_t result = *(unsigned __int8 *)(a1 + 2744);
  if (result >= 0xA)
  {
    BOOL v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Invalid curRecord %d",  "__WiFiLQAMgrGetCurrentLQAMetricsRecordIdx",  *(unsigned __int8 *)(a1 + 2744));
    }
    goto LABEL_10;
  }

  if (!*(_BYTE *)(a1 + 2745))
  {
    BOOL v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: curRecord %d is not busy",  "__WiFiLQAMgrGetCurrentLQAMetricsRecordIdx",  *(unsigned __int8 *)(a1 + 2744));
    }
LABEL_10:
    objc_autoreleasePoolPop(v3);
    return 255LL;
  }

  return result;
}

void sub_100023178(uint64_t a1, uint64_t a2)
{
  if (qword_100219828)
  {
    int v2 = *(dispatch_queue_s **)(qword_100219828 + 1272);
    if (v2)
    {
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 3221225472LL;
      v3[2] = sub_1000231DC;
      v3[3] = &unk_1001E2C30;
      v3[4] = qword_100219828;
      v3[5] = a2;
      dispatch_async(v2, v3);
    }
  }

void sub_1000231DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = sub_1000230B8(v2);
  if (v3 != 255)
  {
    unsigned int v4 = v3;
    sub_100021DB0(*(_BYTE **)(a1 + 32), v3);
    uint64_t v5 = v2 + 144LL * v4;
    int v6 = *(unsigned __int8 *)(v5 + 1341);
    int v7 = *(unsigned __int8 *)(v5 + 1344);
    int v8 = *(unsigned __int8 *)(v5 + 1345);
    int v9 = *(unsigned __int8 *)(v5 + 1346);
    int v10 = *(unsigned __int8 *)(v5 + 1347);
    int v11 = *(unsigned __int8 *)(v5 + 1342);
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v13 = *(void *)(a1 + 32);
    double v14 = 0.0;
    if (*(_DWORD *)(v13 + 2752) == 1) {
      double v14 = Current - *(double *)(v13 + 2760);
    }
    int v15 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      uint64_t v16 = v2 + 144LL * v4;
      uint64_t v17 = v6 | (2 * v7) | (4 * v8) | (8 * v9) | (16 * v10) | (v11 << 6);
      uint64_t v18 = v15;
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: TrgDiscStatus %u [Rssi %d TxFrms %ld TxFail %ld TxRet %ld fwFrms %ld fwFail %ld fwRtry %ld RxFrms %ld BcnSch %ld BcnRx %ld PrSent %ld PrFail %ld Awd %ld initPr %ld UnGw %f FgApp %ld SympScore %ld UsrInput %ld]",  "__WiFiLQAMgrTrgDiscUsrNotificationCallback_block_invoke",  v17,  *(char *)(v16 + 1340),  *(unsigned int *)(v5 + 1304),  *(unsigned int *)(v16 + 1308),  *(unsigned int *)(v16 + 1312),  *(unsigned int *)(v16 + 1324),  *(unsigned int *)(v16 + 1328),  *(unsigned int *)(v16 + 1332),  *(unsigned int *)(v16 + 1336),  *(unsigned int *)(v16 + 1316),  *(unsigned int *)(v16 + 1320),  0,  0,  *(unsigned __int8 *)(v16 + 1356),  0,  *(void *)&v14,  *(unsigned int *)(v16 + 1348),  *(unsigned int *)(v16 + 1352),  *(unsigned __int8 *)(v16 + 1343));
      int v15 = v18;
    }

    objc_autoreleasePoolPop(v15);
  }

  uint64_t v19 = *(void *)(a1 + 32);
  if (*(void *)(v19 + 1280))
  {
    if (*(_DWORD *)(v19 + 20))
    {
      if (*(_BYTE *)(v19 + 636))
      {
        uint64_t v20 = *(void *)(a1 + 40) & 3LL;
        unsigned int v21 = objc_autoreleasePoolPush();
        if (v20 == 1)
        {
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: UserCancelled Trigger Disconnect",  "__WiFiLQAMgrTrgDiscUsrNotificationCallback_block_invoke");
          }
          objc_autoreleasePoolPop(v21);
          *(_BYTE *)(*(void *)(a1 + 32) + 1288LL) = 1;
        }

        else
        {
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: User Response %d",  "__WiFiLQAMgrTrgDiscUsrNotificationCallback_block_invoke",  *(_DWORD *)(a1 + 40) & 3);
          }
          objc_autoreleasePoolPop(v21);
          uint64_t v22 = *(void *)(a1 + 32);
          *(_DWORD *)(v22 + 2820) = 11;
          sub_1000150D0(v22, 0LL);
        }

        goto LABEL_17;
      }

      uint64_t v27 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: AskTo TrigDisc is FALSE",  "__WiFiLQAMgrTrgDiscUsrNotificationCallback_block_invoke");
      }
    }

    else
    {
      uint64_t v27 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: TDUsr Callback in UnassociatedState",  "__WiFiLQAMgrTrgDiscUsrNotificationCallback_block_invoke");
      }
    }

    objc_autoreleasePoolPop(v27);
  }

LABEL_17:
  uint64_t v23 = *(void *)(a1 + 32);
  if (*(void *)(v23 + 1264))
  {
    Main = CFRunLoopGetMain();
    CFRunLoopRemoveSource(Main, *(CFRunLoopSourceRef *)(*(void *)(a1 + 32) + 1264LL), kCFRunLoopDefaultMode);
    uint64_t v23 = *(void *)(a1 + 32);
  }

  CFNumberRef v25 = *(const void **)(v23 + 1280);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(*(void *)(a1 + 32) + 1280LL) = 0LL;
    uint64_t v23 = *(void *)(a1 + 32);
  }

  CFNumberRef v26 = *(const void **)(v23 + 1264);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(*(void *)(a1 + 32) + 1264LL) = 0LL;
    uint64_t v23 = *(void *)(a1 + 32);
  }

  *(_BYTE *)(v23 + 161) = 0;
}

  if (!a2)
  {
    uint64_t v138 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null driverAvailableEventDict",  "WiFiMetricsManagerSubmitWatchdogEvent");
    }
LABEL_226:
    objc_autoreleasePoolPop(v138);
    int v126 = value;
    if (!value) {
      return;
    }
LABEL_214:
    CFRelease(v126);
    return;
  }

  uint64_t v18 = (char *)malloc(0x1310uLL);
  if (!v18)
  {
    uint64_t v138 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null watchdogEventMetric",  "WiFiMetricsManagerSubmitWatchdogEvent");
    }
    goto LABEL_226;
  }

  uint64_t v19 = v18;
  bzero(v18, 0x1310uLL);
  uint64_t v20 = sub_100052664(a1);
  if (v20)
  {
    unsigned int v21 = v20;
    uint64_t v22 = sub_1000968A4((uint64_t)v20);
    if (v22)
    {
      uint64_t v23 = v22;
      char v24 = (const __CFString *)sub_1000951FC((uint64_t)v21, @"BSSID");
      *((void *)v19 + 60_Block_object_dispose((const void *)(v1 - 48), 8) = CFStringCreateCopy(kCFAllocatorDefault, v24);
      v148.id location = 0LL;
      v148.length = 3LL;
      CFDataGetBytes(v23, v148, (UInt8 *)v19 + 4876);
      CFRelease(v23);
    }

    CFRelease(v21);
  }

  CFNumberRef v25 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE");
  if (v25)
  {
    *((_DWORD *)v19 + 2) = CFBooleanGetValue(v25);
    CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_FLAGS");
    if (v26)
    {
      CFNumberGetValue(v26, kCFNumberSInt32Type, v19 + 4);
      if (!*((_DWORD *)v19 + 2) {
        || *(double *)(qword_100219860 + 80) != 0.0
      }
        && (*((_DWORD *)v19 + 121_Block_object_dispose((const void *)(v1 - 48), 8) = ((CFAbsoluteTimeGetCurrent() - *(double *)(qword_100219860 + 80))
                                                   * 1000.0),
            !*((_DWORD *)v19 + 2)))
      {
        if ((v19[4] & 2) != 0)
        {
          *(void *)(qword_100219860 + 8_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
        }

        else
        {
          if (*(double *)(qword_100219860 + 80) != 0.0) {
            *(void *)(qword_100219860 + 8_Block_object_dispose((const void *)(v1 - 48), 8) = (unint64_t)((CFAbsoluteTimeGetCurrent()
          }
          *(CFAbsoluteTime *)(qword_100219860 + 80) = CFAbsoluteTimeGetCurrent();
        }
      }

      uint64_t v27 = (const __CFNumber *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_REASON");
      if (v27)
      {
        CFNumberGetValue(v27, kCFNumberSInt32Type, v19 + 12);
        char v28 = (const __CFNumber *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_SUBREASON");
        if (v28)
        {
          CFNumberGetValue(v28, kCFNumberSInt32Type, v19 + 16);
          uint64_t v29 = (const __CFNumber *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_VERSION");
          if (v29)
          {
            CFNumberGetValue(v29, kCFNumberSInt32Type, v19);
            unsigned int v30 = (const __CFNumber *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_PROGRAM_COUNTER");
            if (v30) {
              CFNumberGetValue(v30, kCFNumberSInt64Type, v19 + 160);
            }
            int v31 = (const __CFNumber *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_LINK_REGISTER");
            if (v31) {
              CFNumberGetValue(v31, kCFNumberSInt64Type, v19 + 168);
            }
            unsigned int v32 = (const __CFNumber *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_LINENUMBER");
            if (v32) {
              CFNumberGetValue(v32, kCFNumberSInt32Type, v19 + 208);
            }
            if (CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_HAVE_EXT_TRAP") == kCFBooleanTrue)
            {
              v19[244] = 1;
              uint64_t v33 = (const __CFNumber *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_TRAP_SEQUENCE");
              if (v33) {
                CFNumberGetValue(v33, kCFNumberSInt32Type, v19 + 248);
              }
              sub_10002F1E0(v19 + 252, (_DWORD *)v19 + 143, a2, @"DRIVER_AVAILABLE_TRAP_SIGNATURE");
              sub_10002F1E0(v19 + 576, (_DWORD *)v19 + 224, a2, @"DRIVER_AVAILABLE_TRAP_STACK");
              sub_10002F1E0(v19 + 900, (_DWORD *)v19 + 305, a2, @"DRIVER_AVAILABLE_TRAP_MEMORY");
              sub_10002F1E0(v19 + 1224, (_DWORD *)v19 + 386, a2, @"DRIVER_AVAILABLE_TRAP_UCODE");
              sub_10002F1E0(v19 + 1548, (_DWORD *)v19 + 467, a2, @"DRIVER_AVAILABLE_TRAP_DEEP_SLEEP");
              sub_10002F1E0(v19 + 1872, (_DWORD *)v19 + 548, a2, @"DRIVER_AVAILABLE_TRAP_PSM_WD");
              sub_10002F1E0(v19 + 2196, (_DWORD *)v19 + 629, a2, @"DRIVER_AVAILABLE_TRAP_PHY");
              sub_10002F1E0(v19 + 2520, (_DWORD *)v19 + 710, a2, @"DRIVER_AVAILABLE_TRAP_BUS");
              sub_10002F1E0(v19 + 2844, (_DWORD *)v19 + 791, a2, @"DRIVER_AVAILABLE_TRAP_MAC");
              sub_10002F1E0(v19 + 3168, (_DWORD *)v19 + 872, a2, @"DRIVER_AVAILABLE_TRAP_BACKPLANE");
              sub_10002F1E0(v19 + 3492, (_DWORD *)v19 + 953, a2, @"DRIVER_AVAILABLE_KEY_PCIE_QUEUE");
              sub_10002F1E0(v19 + 3816, (_DWORD *)v19 + 1034, a2, @"DRIVER_AVAILABLE_KEY_WLAN_STATE");
              sub_10002F1E0(v19 + 4140, (_DWORD *)v19 + 1115, a2, @"DRIVER_AVAILABLE_KEY_MAC_ENAB");
              sub_10002F1E0(v19 + 4464, (_DWORD *)v19 + 1196, a2, @"DRIVER_AVAILABLE_KEY_TX_ERR_THRESH");
            }

            uint64_t v34 = (const __CFString *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_REASON_STRING");
            uint64_t v35 = v34;
            if (v34 && (float32x2_t v36 = CFGetTypeID(v34), v36 == CFStringGetTypeID()))
            {
              CFStringGetCString(v35, v19 + 28, 63LL, 0);
            }

            else
            {
              double v37 = objc_autoreleasePoolPush();
              if (qword_100219F60)
              {
                uint64_t v38 = "Not a string";
                if (!v35) {
                  uint64_t v38 = "is Null or Key-not-present";
                }
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: reasonString :%s",  "WiFiMetricsManagerSubmitWatchdogEvent",  v38);
              }

              objc_autoreleasePoolPop(v37);
            }

            uint64_t v39 = (const __CFString *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_KEY_SUBREASON_STRING");
            double v40 = v39;
            if (v39 && (double v41 = CFGetTypeID(v39), v41 == CFStringGetTypeID()))
            {
              CFStringGetCString(v40, v19 + 92, 63LL, 0);
            }

            else
            {
              uint64_t v42 = objc_autoreleasePoolPush();
              if (qword_100219F60)
              {
                uint64_t v43 = "Not a string";
                if (!v40) {
                  uint64_t v43 = "is Null or Key-not-present";
                }
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: subReasonString :%s",  "WiFiMetricsManagerSubmitWatchdogEvent",  v43);
              }

              objc_autoreleasePoolPop(v42);
            }

            double v44 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: reason:%s(0x%8x or %d), subreason:%s(0x%8x or %u) flag: %u",  "WiFiMetricsManagerSubmitWatchdogEvent",  v19 + 28,  *((unsigned int *)v19 + 3),  *((unsigned int *)v19 + 3),  v19 + 92,  *((unsigned int *)v19 + 4),  *((unsigned int *)v19 + 4),  *((unsigned int *)v19 + 1));
            }
            objc_autoreleasePoolPop(v44);
            int v45 = (const __CFString *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_FILENAME");
            double v46 = v45;
            if (v45 && (uint64_t v47 = CFGetTypeID(v45), v47 == CFStringGetTypeID()))
            {
              CFStringGetCString(v46, v19 + 176, 31LL, 0);
            }

            else
            {
              uint64_t v48 = objc_autoreleasePoolPush();
              if (qword_100219F60)
              {
                BOOL v49 = "Not a string";
                if (!v46) {
                  BOOL v49 = "is Null or Key-not-present";
                }
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Filename :%s",  "WiFiMetricsManagerSubmitWatchdogEvent",  v49);
              }

              objc_autoreleasePoolPop(v48);
            }

            BOOL v50 = (const __CFString *)CFDictionaryGetValue(a2, @"DRIVER_AVAILABLE_FUNCTION ");
            uint64_t v51 = v50;
            if (v50 && (double v52 = CFGetTypeID(v50), v52 == CFStringGetTypeID()))
            {
              CFStringGetCString(v51, v19 + 212, 31LL, 0);
              if (!v8) {
                goto LABEL_138;
              }
            }

            else
            {
              uint64_t v53 = objc_autoreleasePoolPush();
              if (qword_100219F60)
              {
                char v54 = "Not a string";
                if (!v51) {
                  char v54 = "is Null or Key-not-present";
                }
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Function name :%s",  "WiFiMetricsManagerSubmitWatchdogEvent",  v54);
              }

              objc_autoreleasePoolPop(v53);
              if (!v8)
              {
LABEL_138:
                if (v9)
                {
                  int v142 = -86;
                  int v103 = (const __CFNumber *)CFDictionaryGetValue(v9, @"APPLE_IE_PRODUCT_ID");
                  if (v103 && (v104 = v103, CFTypeID TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(v104)))
                  {
                    CFNumberGetValue(v104, kCFNumberSInt8Type, &v142);
                    int v106 = CFStringCreateWithFormat(0LL, 0LL, @"%d", v142);
                  }

                  else
                  {
                    v107 = objc_autoreleasePoolPush();
                    if (qword_100219F60) {
                      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for wpsResponseType. Not a CFNumberType or NULL",  "WiFiMetricsManagerSubmitWatchdogEvent");
                    }
                    objc_autoreleasePoolPop(v107);
                    int v106 = 0LL;
                  }

                  *((void *)v19 + 602) = v106;
                }

                v108 = objc_autoreleasePoolPush();
                if (!*((_DWORD *)v19 + 2)) {
                  goto LABEL_192;
                }
                if (qword_100219860)
                {
                  BOOL v109 = objc_alloc(&OBJC_CLASS___WAMessage);
                  unsigned int v110 = [v109 initWithMetricName:kWAMessageMetricNameWatchdogEvent options:5];
                  if (v110)
                  {
                    int v111 = v110;
                    objc_msgSend( v110,  "addFieldForKey:value:options:",  kWAMessageKeyReason,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)v19 + 3)),  5);
                    objc_msgSend( v111,  "addFieldForKey:value:options:",  kWAMessageKeySubReason,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v19 + 4)),  5);
                    BOOL v112 = v19 + 28;
                    [v111 addFieldForKey:kWAMessageKeyReasonString, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", v19 + 28), 5 value options];
                    int v113 = v19 + 92;
                    [v111 addFieldForKey:kWAMessageKeySubReasonString, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%s", v19 + 92), 5 value options];
                    if (*((void *)v19 + 600)) {
                      objc_msgSend( v111,  "addFieldForKey:value:options:",  kWAMessageKeyWPSMfgElement,  +[NSString stringWithString:](NSString, "stringWithString:"),  5);
                    }
                    if (*((void *)v19 + 601)) {
                      objc_msgSend( v111,  "addFieldForKey:value:options:",  kWAMessageKeyWPSModelName,  +[NSString stringWithString:](NSString, "stringWithString:"),  5);
                    }
                    if (*((void *)v19 + 602)) {
                      objc_msgSend( v111,  "addFieldForKey:value:options:",  kWAMessageKeyWPSModelNum,  +[NSString stringWithString:](NSString, "stringWithString:"),  5);
                    }
                    if (*((void *)v19 + 605)) {
                      objc_msgSend( v111,  "addFieldForKey:value:options:",  kWAMessageKeyWPSPrimaryDeviceNameElement,  +[NSString stringWithString:](NSString, "stringWithString:"),  5);
                    }
                    if (*((void *)v19 + 606)) {
                      objc_msgSend( v111,  "addFieldForKey:value:options:",  kWAMessageKeyWPSDeviceNameData,  +[NSString stringWithString:](NSString, "stringWithString:"),  5);
                    }
                    objc_msgSend( v111,  "addFieldForKey:value:options:",  kWAMessageKeyForegroundActivity,  +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  sub_100082EE8(*(void *)(qword_100219860 + 16)) != 0),  5);
                    BOOL v114 = qword_100219860;
                    if (*(void *)(qword_100219860 + 88))
                    {
                      objc_msgSend( v111,  "addFieldForKey:value:options:",  kWAMessageKeyTimeBetweenFailure,  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:"),  5);
                      BOOL v114 = qword_100219860;
                    }

                    if (*(double *)(v114 + 80) != 0.0) {
                      objc_msgSend( v111,  "addFieldForKey:value:options:",  kWAMessageKeyRecoveryLatency,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v19 + 1218)),  5);
                    }
                    BOOL v115 = *((_DWORD *)v19 + 1);
                    objc_msgSend( v111,  "addFieldForKey:value:options:",  kWAMessageKeyIsDriverAvailabilityNonFatal,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v115 >> 1) & 1),  5);
                    sub_100039B54(v111, kWAMessageKeyOUI, (uint64_t)(v19 + 4876), 3u, 1);
                    if (*((void *)v19 + 608))
                    {
                      BOOL v116 = +[WiFiUsageAccessPointProfile profileForBSSID:]( &OBJC_CLASS___WiFiUsageAccessPointProfile,  "profileForBSSID:");
                      if (v116) {
                        [v111 addFieldForKey:kWAMessageKeyApProfile value:v116 options:5];
                      }
                    }

                    sub_10002891C(v111);
                    if ((v115 & 2) == 0 && MGGetBoolAnswer(@"InternalBuild") && (!*v112 || !*v113))
                    {
                      v117 = objc_autoreleasePoolPush();
                      if (qword_100219F60) {
                        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Fatal chip watchdog with missing reason or subreason",  "__WiFiMetricsManagerWAMessageSubmitWatchdogEvent");
                      }
                      objc_autoreleasePoolPop(v117);
                      uint64_t v118 = objc_autoreleasePoolPush();
                      if (qword_100219F60)
                      {
                        if (*v112) {
                          uint64_t v119 = v19 + 28;
                        }
                        else {
                          uint64_t v119 = "zeroLen";
                        }
                        if (*v113) {
                          char v120 = v19 + 92;
                        }
                        else {
                          char v120 = "zeroLen";
                        }
                        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: reason: 0x%x reasonString: %s subreason: 0x%x subreasonString: %s",  "__WiFiMetricsManagerWAMessageSubmitWatchdogEvent",  *((unsigned int *)v19 + 3),  v119,  *((unsigned int *)v19 + 4),  v120);
                      }

                      objc_autoreleasePoolPop(v118);
                      char v121 = objc_autoreleasePoolPush();
                      if (qword_100219F60)
                      {
                        if (v19[176]) {
                          int v122 = v19 + 176;
                        }
                        else {
                          int v122 = "zeroLen";
                        }
                        int v123 = v19 + 212;
                        if (!v19[212]) {
                          int v123 = "zeroLen";
                        }
                        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: flags: 0x%x available: 0x%x minor_reason: 0x%x filename: %s function: %s",  "__WiFiMetricsManagerWAMessageSubmitWatchdogEvent",  *((unsigned int *)v19 + 1),  *((unsigned int *)v19 + 2),  *((unsigned int *)v19 + 6),  v122,  v123);
                      }

                      objc_autoreleasePoolPop(v121);
                      int v124 = objc_autoreleasePoolPush();
                      if (qword_100219F60) {
                        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: hasExtTrapInfo: 0x%x sequenceNum: %d signatureCount: %d stackTraceCount: %d recoveryLatency: %d",  "__WiFiMetricsManagerWAMessageSubmitWatchdogEvent",  v19[244],  *((unsigned int *)v19 + 62),  *((unsigned int *)v19 + 143),  *((unsigned int *)v19 + 224),  *((unsigned int *)v19 + 1218));
                      }
                      objc_autoreleasePoolPop(v124);
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
                        sub_100153AC4();
                      }
                    }

                    goto LABEL_192;
                  }

                  uint64_t v140 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to alloc WAMessage for WatchdogEvent",  "__WiFiMetricsManagerWAMessageSubmitWatchdogEvent");
                  }
                }

                else
                {
                  uint64_t v140 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: metrics null",  "__WiFiMetricsManagerWAMessageSubmitWatchdogEvent");
                  }
                }

                objc_autoreleasePoolPop(v140);
LABEL_192:
                int v125 = v108;
                goto LABEL_193;
              }
            }

            uint64_t v55 = (const __CFDictionary *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_PRIMARY_DEV_TYPE");
            int valuePtr = -21846;
            double v56 = (const __CFNumber *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_CFG_METHODS");
            if (v56 && (uint64_t v57 = v56, v58 = CFNumberGetTypeID(), v58 == CFGetTypeID(v57)))
            {
              CFNumberGetValue(v57, kCFNumberSInt16Type, &valuePtr);
              BOOL v59 = CFStringCreateWithFormat(0LL, 0LL, @"%d", valuePtr);
            }

            else
            {
              uint64_t v60 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for wpsConfigMethods. Not a CFNumber or NULL",  "WiFiMetricsManagerSubmitWatchdogEvent");
              }
              objc_autoreleasePoolPop(v60);
              BOOL v59 = 0LL;
            }

            *((void *)v19 + 607) = v59;
            BOOL v61 = (const __CFString *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_MODEL_NAME");
            if (v61 && (BOOL v62 = v61, v63 = CFStringGetTypeID(), v63 == CFGetTypeID(v62)))
            {
              CFDictionaryRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v62);
            }

            else
            {
              uint64_t v65 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for wpsModelName. Not a CFString or NULL",  "WiFiMetricsManagerSubmitWatchdogEvent");
              }
              objc_autoreleasePoolPop(v65);
              CFDictionaryRef Copy = 0LL;
            }

            *((void *)v19 + 601) = Copy;
            uint64_t v66 = (const __CFString *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_MODEL_NUM");
            if (v66 && (uint64_t v67 = v66, v68 = CFStringGetTypeID(), v68 == CFGetTypeID(v67)))
            {
              BOOL v69 = CFStringCreateCopy(kCFAllocatorDefault, v67);
            }

            else
            {
              BOOL v70 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for wpsModelNumber. Not a CFString or NULL",  "WiFiMetricsManagerSubmitWatchdogEvent");
              }
              objc_autoreleasePoolPop(v70);
              BOOL v69 = 0LL;
            }

            *((void *)v19 + 602) = v69;
            uint64_t v71 = (const __CFString *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_MANUFACTURER");
            if (v71 && (v72 = v71, double v73 = CFStringGetTypeID(), v73 == CFGetTypeID(v72)))
            {
              int v74 = CFStringCreateCopy(kCFAllocatorDefault, v72);
            }

            else
            {
              __int16 v75 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for wpsManufacturerElement. Not a CFString or NULL",  "WiFiMetricsManagerSubmitWatchdogEvent");
              }
              objc_autoreleasePoolPop(v75);
              int v74 = 0LL;
            }

            *((void *)v19 + 600) = v74;
            int v76 = (const __CFString *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_DEV_NAME");
            if (v76 && (unsigned __int8 v77 = v76, v78 = CFStringGetTypeID(), v78 == CFGetTypeID(v77)))
            {
              int v79 = CFStringCreateCopy(kCFAllocatorDefault, v77);
            }

            else
            {
              int v80 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for wpsDeviceNameElement. Not a CFString or NULL",  "WiFiMetricsManagerSubmitWatchdogEvent");
              }
              objc_autoreleasePoolPop(v80);
              int v79 = 0LL;
            }

            *((void *)v19 + 605) = v79;
            uint64_t v81 = (const __CFData *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_DEV_NAME_DATA");
            if (v81 && (v82 = v81, int v83 = CFDataGetTypeID(), v83 == CFGetTypeID(v82)))
            {
              Length = CFDataGetLength(v82);
              float v85 = (UInt8 *)malloc(Length);
              v149.id location = 0LL;
              v149.length = Length;
              CFDataGetBytes(v82, v149, v85);
              CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
              *((void *)v19 + 606) = CFStringCreateWithBytes(kCFAllocatorDefault, v85, Length, SystemEncoding, 0);
              free(v85);
              if (!v55)
              {
LABEL_131:
                v143 = -86;
                uint64_t v98 = (const __CFNumber *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_RESP_TYPE");
                if (v98 && (v99 = v98, double v100 = CFNumberGetTypeID(), v100 == CFGetTypeID(v99)))
                {
                  CFNumberGetValue(v99, kCFNumberSInt8Type, &v143);
                  double v101 = CFStringCreateWithFormat(0LL, 0LL, @"%d", v143);
                }

                else
                {
                  uint64_t v102 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for wpsResponseType. Not a CFNumberType or NULL",  "WiFiMetricsManagerSubmitWatchdogEvent");
                  }
                  objc_autoreleasePoolPop(v102);
                  double v101 = 0LL;
                }

                *((void *)v19 + 599) = v101;
                goto LABEL_138;
              }
            }

            else
            {
              float v87 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: wpsDeviceNameData value is NULL or bad type for wpsDeviceNameData. Not a CFDataType ",  "WiFiMetricsManagerSubmitWatchdogEvent");
              }
              objc_autoreleasePoolPop(v87);
              *((void *)v19 + 606) = 0LL;
              if (!v55) {
                goto LABEL_131;
              }
            }

            int v145 = -21846;
            id v144 = -21846;
            uint64_t v88 = (const __CFNumber *)CFDictionaryGetValue(v55, @"WPS_DEV_TYPE_CAT");
            if (v88 && (uint64_t v89 = v88, v90 = CFNumberGetTypeID(), v90 == CFGetTypeID(v89)))
            {
              CFNumberGetValue(v89, kCFNumberSInt16Type, &v145);
              uint64_t v91 = CFStringCreateWithFormat(0LL, 0LL, @"%d", v145);
            }

            else
            {
              uint64_t v92 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for wpsPrimaryDeviceTypeCategory. Not a CFNumberType or NULL",  "WiFiMetricsManagerSubmitWatchdogEvent");
              }
              objc_autoreleasePoolPop(v92);
              uint64_t v91 = 0LL;
            }

            *((void *)v19 + 603) = v91;
            int v93 = (const __CFNumber *)CFDictionaryGetValue(v55, @"WPS_DEV_TYPE_SUB_CAT");
            if (v93 && (BOOL v94 = v93, v95 = CFNumberGetTypeID(), v95 == CFGetTypeID(v94)))
            {
              CFNumberGetValue(v94, kCFNumberSInt16Type, &v144);
              int v96 = CFStringCreateWithFormat(0LL, 0LL, @"%d", v144);
            }

            else
            {
              uint64_t v97 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for wpsPrimaryDeviceTypeSubCategory. Not a CFNumberType or NULL",  "WiFiMetricsManagerSubmitWatchdogEvent");
              }
              objc_autoreleasePoolPop(v97);
              int v96 = 0LL;
            }

            *((void *)v19 + 604) = v96;
            goto LABEL_131;
          }

          unsigned int v139 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null version",  "WiFiMetricsManagerSubmitWatchdogEvent");
          }
        }

        else
        {
          unsigned int v139 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null subreason",  "WiFiMetricsManagerSubmitWatchdogEvent");
          }
        }
      }

      else
      {
        unsigned int v139 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null reason",  "WiFiMetricsManagerSubmitWatchdogEvent");
        }
      }
    }

    else
    {
      unsigned int v139 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null flags",  "WiFiMetricsManagerSubmitWatchdogEvent");
      }
    }
  }

  else
  {
    unsigned int v139 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null available BOOLRef",  "WiFiMetricsManagerSubmitWatchdogEvent");
    }
  }

  int v125 = v139;
LABEL_193:
  objc_autoreleasePoolPop(v125);
  int v126 = value;
  int v127 = (const void *)*((void *)v19 + 599);
  if (v127)
  {
    CFRelease(v127);
    *((void *)v19 + 599) = 0LL;
  }

  uint64_t v128 = (const void *)*((void *)v19 + 600);
  if (v128)
  {
    CFRelease(v128);
    *((void *)v19 + 600) = 0LL;
  }

  unsigned int v129 = (const void *)*((void *)v19 + 601);
  if (v129)
  {
    CFRelease(v129);
    *((void *)v19 + 601) = 0LL;
  }

  uint64_t v130 = (const void *)*((void *)v19 + 602);
  if (v130)
  {
    CFRelease(v130);
    *((void *)v19 + 602) = 0LL;
  }

  uint64_t v131 = (const void *)*((void *)v19 + 603);
  if (v131)
  {
    CFRelease(v131);
    *((void *)v19 + 603) = 0LL;
  }

  unsigned int v132 = (const void *)*((void *)v19 + 604);
  if (v132)
  {
    CFRelease(v132);
    *((void *)v19 + 604) = 0LL;
  }

  double v133 = (const void *)*((void *)v19 + 605);
  if (v133)
  {
    CFRelease(v133);
    *((void *)v19 + 605) = 0LL;
  }

  int v134 = (const void *)*((void *)v19 + 606);
  if (v134)
  {
    CFRelease(v134);
    *((void *)v19 + 606) = 0LL;
  }

  uint64_t v135 = (const void *)*((void *)v19 + 607);
  if (v135)
  {
    CFRelease(v135);
    *((void *)v19 + 607) = 0LL;
  }

  __int128 v136 = (const void *)*((void *)v19 + 608);
  if (v136) {
    CFRelease(v136);
  }
  free(v19);
  if (value) {
    goto LABEL_214;
  }
}

  int v8 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    int v9 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@-} %@",  @"IP",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"IPv4 Primary interface is %@ and IPv6 Primary Interface is %@",  qword_100219898,  qword_1002198A0)),  "UTF8String"));
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buuint64_t f = 136446210;
      int v12 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v9, "UTF8String")),  "UTF8String");
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
    }
  }

  objc_autoreleasePoolPop(v8);
  if (v2) {
    CFRelease(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v6;
}

    CFRelease(v7);
    return;
  }

  uint64_t v16 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Failed to create dict",  "WiFiDeviceSetWiFiNetworkInHotspotIe");
  }
  objc_autoreleasePoolPop(v16);
}

  sub_10003D710(a1, *(void *)a2, *(void **)(a2 + 8), *(const void **)(a2 + 16));
}

    if (v5->_cpmsActive) {
      goto LABEL_19;
    }
  }

  uint64_t v19 = objc_claimAutoreleasedReturnValue( +[PPMClient sharedInstanceWithClientRepresentation:error:]( &OBJC_CLASS___PPMClient,  "sharedInstanceWithClientRepresentation:error:",  @"com.apple.duet.ppm-attr.wifi",  0LL));
  wifiPpmClientReuint64_t f = v5->_wifiPpmClientRef;
  v5->_wifiPpmClientReuint64_t f = (PPMClient *)v19;

  if (!v5->_wifiPpmClientRef)
  {
    CFNumberRef v25 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WiFiBatteryMgmt :  No PPM support.",  "-[WiFiBatteryManager initWithContext:]");
    }
    goto LABEL_23;
  }

  CFRelease(v19);
  CFRelease(v16);
  if (v22) {
    CFRelease(v22);
  }
  uint64_t v16 = v25;
  a4 = v33;
  if (v25) {
    goto LABEL_20;
  }
LABEL_21:
  sub_10003A8FC((vm_address_t)a2, a3);
  sub_10003A8FC((vm_address_t)a4, a5);
  return 0LL;
}

  uint64_t v27 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v27)
  {
    CFNumberRef v26 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: probeOptions is NULL !",  "__WiFiDeviceManagerTriggerActiveProbe");
    }
    goto LABEL_46;
  }

  char v28 = v27;
  if (v16) {
    CFDictionarySetValue(v27, @"kWiFiLqaMgrNumProbes", v16);
  }
  if (v18) {
    CFDictionarySetValue(v28, @"kWiFiLqaMgrProbeSize", v18);
  }
  if (v25) {
    CFDictionarySetValue(v28, @"kWiFiLqaMgrProbeTimeoutSecs", v25);
  }
  if (a7) {
    CFDictionarySetValue(v28, @"kWiFiLqaMgrIpv4Addr", a7);
  }
  uint64_t v29 = sub_1000157E8(*(void *)(a1 + 120), v28, a2, a8, a1);
  if (!(_DWORD)v29) {
    goto LABEL_30;
  }
  CFNumberRef v26 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to Enqueue active probing with %d probes",  "__WiFiDeviceManagerTriggerActiveProbe",  a3);
  }
LABEL_29:
  objc_autoreleasePoolPop(v26);
LABEL_30:
  if (v16) {
    CFRelease(v16);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v29;
}

    uint64_t v17 = sub_100098E6C(a5);
    uint64_t v19 = (_DWORD)a3 == 1 || v17 != 0;
    if (!a5 || !v19) {
      return *(unsigned int *)(a1 + 3272);
    }
    goto LABEL_25;
  }

  uint64_t v13 = sub_10009EFD8((uint64_t)a5);
  if ((a3 & 0xFFFFFFFD) == 1 && v13)
  {
    double v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: network is carrier-bundle based. Suppressing user password prompt. (%@)", "__WiFiDeviceManagerDispatchNotification", a5, v23 message];
    }
LABEL_8:
    objc_autoreleasePoolPop(v14);
    goto LABEL_9;
  }

  int v15 = sub_10009860C((uint64_t)a5);
  if ((_DWORD)a3 == 1 && v15)
  {
    uint64_t v16 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: network is profile based. Suppressing user password prompt. (%@)", "__WiFiDeviceManagerDispatchNotification", sub_100095BC8(a5) message];
    }
    objc_autoreleasePoolPop(v16);
    goto LABEL_17;
  }

  unsigned int v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const void *, uint64_t, void))(a1 + 3928))( a1,  a2,  a3,  a4,  a5,  a6,  *(void *)(a1 + 3936));
  if (!v21)
  {
    double v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: failed to create notification for type %@(%d)", "__WiFiDeviceManagerDispatchNotification", sub_10003B428(a3), a3 message];
    }
    goto LABEL_8;
  }

  uint64_t v22 = (const void *)v21;
  if (!(_DWORD)a3 && *(_DWORD *)(a1 + 108) != 2) {
    sub_100134F2C(*(void *)(a1 + 96));
  }
  sub_100091278((uint64_t)v22, (uint64_t)sub_10011097C, a1);
  sub_1000ABC98((uint64_t)v22, *(void *)(a1 + 240));
  *(void *)(a1 + 224) = CFRetain(v22);
  sub_10010D14C(a1, @"autoJoinWaiting", a5, 0LL);
  return 14LL;
}

  int v15 = sub_100040538(*(void *)(a1 + 64), v4);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = sub_1000951FC((uint64_t)v15, @"COLOCATED_NETWORK_SCOPE_ID");
    if (!v17)
    {
      uint64_t v17 = *(const void **)(a1 + 3744);
      sub_10009582C((uint64_t)v16, @"COLOCATED_NETWORK_SCOPE_ID", v17);
      uint64_t v18 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "[NWTRANSIT]: %s: Retrieved ColocatedScopeId for %@ - '%@'", "WiFiDeviceManagerSetColocatedNetworks", sub_100095BC8(v16), v17 message];
      }
      objc_autoreleasePoolPop(v18);
    }

    if (sub_1000F93A4(a1, (uint64_t)v16) && v17 && Count >= 2)
    {
      uint64_t v19 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "[NWTRANSIT]: %s: Colocated Group already present",  "WiFiDeviceManagerSetColocatedNetworks");
      }
      objc_autoreleasePoolPop(v19);
LABEL_35:
      uint64_t v23 = (const __CFNumber *)CFDictionaryGetValue(a2, @"COLOCATED_NETWORK_GROUP_STATUS");
      if (v23)
      {
        CFNumberGetValue(v23, kCFNumberIntType, &v30);
        *(_BYTE *)(a1 + 3736) = v30;
        if (CFDictionaryGetValue(a2, @"COLOCATED_NETWORK_GROUP_SCOPE_ID"))
        {
          sub_1000E36D4(a1, v16);
          return;
        }
      }

      goto LABEL_38;
    }

    unsigned int v21 = *(const void **)(a1 + 3728);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(a1 + 372_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
    }

    uint64_t v22 = CFDictionaryGetValue(a2, @"COLOCATED_NETWORK_GROUP");
    *(void *)(a1 + 372_Block_object_dispose((const void *)(v1 - 48), 8) = v22;
    if (v22)
    {
      CFRetain(v22);
      goto LABEL_35;
    }
}

  if ([v13 isEqualToString:@"join"])
  {
    unsigned int v21 = [v9 objectForKey:@"Recommendation"];
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = [v9 objectForKey:@"Location"];
      a5 = v47;
      if (!v23)
      {
        char v24 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: location is not present",  "-[WiFiUserNotificationManager userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]");
        }
        objc_autoreleasePoolPop(v24);
      }

      CFNumberRef v25 = 1LL;
      -[WiFiUserNotificationManager _submitAnalyticsEventForRecommendation:action:visibleDuration:location:]( self,  "_submitAnalyticsEventForRecommendation:action:visibleDuration:location:",  v22,  1LL,  v23,  v16);
      goto LABEL_24;
    }

    double v37 = objc_autoreleasePoolPush();
    a5 = v47;
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: recommendation not found for notification (%@)", "-[WiFiUserNotificationManager userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]", v45 message];
    }
    goto LABEL_91;
  }

  LODWORD(v25) = 0;
LABEL_27:
  if ([v13 isEqualToString:@"settings"])
  {
    char v28 = [v9 objectForKey:@"Reason"];
    if (!v28)
    {
      uint64_t v38 = objc_autoreleasePoolPush();
      a5 = v47;
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: notifyReason is nil",  "-[WiFiUserNotificationManager userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]");
      }
      objc_autoreleasePoolPop(v38);
      CFNumberRef v25 = 3LL;
      uint64_t v27 = v48;
      uint64_t v22 = v48;
      goto LABEL_36;
    }

    -[WiFiUserNotificationManager _submitAnalyticsEventForJoinAlertReason:action:visibleDuration:]( self,  "_submitAnalyticsEventForJoinAlertReason:action:visibleDuration:",  [v28 integerValue],  5,  v16);
    CFNumberRef v25 = 3LL;
    goto LABEL_34;
  }

  if ([v13 isEqualToString:@"disconnect"])
  {
    uint64_t v29 = [v9 objectForKey:@"Reason"];
    if (v29)
    {
      -[WiFiUserNotificationManager _submitAnalyticsEventForJoinAlertReason:action:visibleDuration:]( self,  "_submitAnalyticsEventForJoinAlertReason:action:visibleDuration:",  [v29 integerValue],  4,  v16);
    }

    else
    {
      uint64_t v39 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: notifyReason is nil",  "-[WiFiUserNotificationManager userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]");
      }
      objc_autoreleasePoolPop(v39);
    }

    CFNumberRef v25 = 2LL;
LABEL_34:
    uint64_t v27 = v48;
    uint64_t v22 = v48;
LABEL_35:
    a5 = v47;
LABEL_36:
    CFNumberRef v26 = v46;
    goto LABEL_37;
  }

  if ([v13 isEqualToString:@"joincolocated"])
  {
    if (![v9 objectForKey:@"ToScanResult"])
    {
      double v40 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4, "%s: to scan result not found for notification (%@)", "-[WiFiUserNotificationManager userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]", v45 message];
      }
      objc_autoreleasePoolPop(v40);
      CFNumberRef v25 = 0LL;
      uint64_t v22 = 0LL;
      a5 = v47;
      goto LABEL_24;
    }

    a5 = v47;
    if ([v9 objectForKey:@"FromScanResult"])
    {
      CFNumberRef v25 = 1LL;
      uint64_t v22 = v9;
LABEL_24:
      CFNumberRef v26 = v46;
LABEL_25:
      uint64_t v27 = v48;
      goto LABEL_37;
    }

    double v37 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: from scan result not found for notification (%@)", "-[WiFiUserNotificationManager userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]", v45 message];
    }
LABEL_91:
    objc_autoreleasePoolPop(v37);
    CFNumberRef v25 = 0LL;
    uint64_t v22 = 0LL;
    goto LABEL_24;
  }

  if (([v13 isEqualToString:@"com.apple.UNNotificationSilenceActionIdentifier"] & 1) == 0
    && ![v13 isEqualToString:UNNotificationDismissActionIdentifier])
  {
    uint64_t v35 = objc_msgSend(objc_msgSend(a4, "actionIdentifier"), "isEqualToString:", @"disablelowdata");
    if (v35) {
      CFNumberRef v25 = 4LL;
    }
    else {
      CFNumberRef v25 = 0LL;
    }
    uint64_t v27 = v10;
    if (v35) {
      uint64_t v22 = v10;
    }
    else {
      uint64_t v22 = 0LL;
    }
    goto LABEL_35;
  }

  if (v18)
  {
    int v31 = [v9 objectForKey:@"Recommendation"];
    if (v31)
    {
      uint64_t v22 = v31;
      unsigned int v32 = [v9 objectForKey:@"Location"];
      a5 = v47;
      if (!v32)
      {
        uint64_t v33 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: location is not present",  "-[WiFiUserNotificationManager userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]");
        }
        objc_autoreleasePoolPop(v33);
      }

      -[WiFiUserNotificationManager _submitAnalyticsEventForRecommendation:action:visibleDuration:location:]( self,  "_submitAnalyticsEventForRecommendation:action:visibleDuration:location:",  v22,  2LL,  v32,  v16);
      CFNumberRef v25 = 0LL;
      CFNumberRef v26 = 1LL;
      goto LABEL_25;
    }

    double v41 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: recommendation not found for notification (%@)", "-[WiFiUserNotificationManager userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]", v45 message];
    }
    objc_autoreleasePoolPop(v41);
    CFNumberRef v25 = 0LL;
    uint64_t v22 = 0LL;
    CFNumberRef v26 = 1LL;
LABEL_106:
    a5 = v47;
    uint64_t v27 = v10;
    goto LABEL_37;
  }

  if (v17)
  {
    uint64_t v34 = [v9 objectForKey:@"Reason"];
    a5 = v47;
    if (v34)
    {
      CFNumberRef v26 = 2LL;
      -[WiFiUserNotificationManager _submitAnalyticsEventForJoinAlertReason:action:visibleDuration:]( self,  "_submitAnalyticsEventForJoinAlertReason:action:visibleDuration:",  [v34 integerValue],  2,  v16);
      CFNumberRef v25 = 0LL;
    }

    else
    {
      uint64_t v42 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: notifyReason is nil",  "-[WiFiUserNotificationManager userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]");
      }
      objc_autoreleasePoolPop(v42);
      CFNumberRef v25 = 0LL;
      CFNumberRef v26 = 2LL;
    }

    uint64_t v27 = v10;
    uint64_t v22 = v10;
  }

  else
  {
    if (v19)
    {
      if ([v9 objectForKey:@"ToScanResult"])
      {
        a5 = v47;
        if ([v9 objectForKey:@"FromScanResult"])
        {
          CFNumberRef v25 = 0LL;
          CFNumberRef v26 = 5LL;
          uint64_t v22 = v9;
        }

        else
        {
          double v44 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:4, "%s: from scan result not found for notification (%@)", "-[WiFiUserNotificationManager userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]", v45 message];
          }
          objc_autoreleasePoolPop(v44);
          CFNumberRef v25 = 0LL;
          uint64_t v22 = 0LL;
          CFNumberRef v26 = 5LL;
        }

        goto LABEL_25;
      }

      uint64_t v43 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4, "%s: to scan result not found for notification (%@)", "-[WiFiUserNotificationManager userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]", v45 message];
      }
      objc_autoreleasePoolPop(v43);
      CFNumberRef v25 = 0LL;
      uint64_t v22 = 0LL;
      CFNumberRef v26 = 5LL;
      goto LABEL_106;
    }

    a5 = v47;
    if ((_DWORD)v25) {
      CFNumberRef v26 = 6LL;
    }
    else {
      CFNumberRef v26 = v46;
    }
    uint64_t v27 = v10;
    if ((_DWORD)v25) {
      uint64_t v22 = v10;
    }
    else {
      uint64_t v22 = 0LL;
    }
    CFNumberRef v25 = 0LL;
  }

  uint64_t v39 = (dispatch_queue_s *)a1[2];
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_100152164;
  block[3] = &unk_1001E8AD8;
  int v45 = v10;
  void block[4] = a1;
  void block[5] = a4;
  void block[6] = v34;
  dispatch_async(v39, block);
}

void sub_1000234D8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)
    || (uint64_t v2 = *(void *)(a1 + 40),
        ++*(_DWORD *)(v2 + 328),
        CFArrayAppendValue( *(CFMutableArrayRef *)(v2 + 320),  *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)),  !*(void *)(*(void *)(*(void *)(v1 + 32) + 8LL) + 24LL)))
  {
    int v3 = *(const void **)(*(void *)(v1 + 40) + 312LL);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(*(void *)(v1 + 40) + 312LL) = 0LL;
    }
  }

  uint64_t v4 = *(void *)(v1 + 40);
  if (!*(void *)(v4 + 312) && CFArrayGetCount(*(CFArrayRef *)(v4 + 320)))
  {
    *(void *)(*(void *)(v1 + 40) + 312LL) = CFArrayGetValueAtIndex( *(CFArrayRef *)(*(void *)(v1 + 40) + 320LL),  0LL);
    CFRetain(*(CFTypeRef *)(*(void *)(v1 + 40) + 312LL));
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(*(void *)(v1 + 40) + 320LL), 0LL);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    int v7 = *(void **)(v1 + 40);
    *((CFAbsoluteTime *)v7 + 3_Block_object_dispose((const void *)(v1 - 48), 8) = Current;
    uint64_t v66 = 0LL;
    uint64_t valuePtr = 0LL;
    uint64_t v64 = 0LL;
    uint64_t v65 = 0LL;
    cuint64_t f = 0LL;
    uint64_t v63 = 1LL;
    uint64_t v60 = 0LL;
    uint64_t v61 = 0LL;
    uint64_t v59 = 0LL;
    int v8 = (const __CFDictionary *)*((void *)v7 + 39);
    if (v8)
    {
      int v9 = (const __CFNumber *)CFDictionaryGetValue(*((CFDictionaryRef *)v7 + 39), @"kWiFiLqaMgrNumProbes");
      int v10 = (const __CFArray *)CFDictionaryGetValue(v8, @"kWiFiLqaMgrProbeSize");
      value = (void *)CFDictionaryGetValue(v8, @"kWiFiLqaMgrProbeTimeoutSecs");
      int v11 = CFDictionaryGetValue(v8, @"kWiFiLqaMgrIpv4Addr");
      int v12 = (void *)CFDictionaryGetValue(v8, @"kWiFiLqaMgrProbeTrafficClass");
      CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
      if (Mutable)
      {
        double v14 = Mutable;
        if (v9 && v10 && CFArrayGetCount(v10) && value && v11)
        {
          double v56 = v12;
          CFNumberGetValue(v9, kCFNumberCFIndexType, &valuePtr);
          CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          if (v15)
          {
            uint64_t v16 = v15;
            CFNumberRef v17 = CFNumberCreate(0LL, kCFNumberCFIndexType, &v63);
            if (v17)
            {
              CFArrayRef theArray = v14;
              context = v7;
              uint64_t v52 = v1;
              CFNumberRef v50 = v17;
              CFDictionaryAddValue(v16, @"kCFNetDiagnosticPingOptionPacketCount", v17);
              CFDictionaryAddValue(v16, @"kCFNetDiagnosticPingOptionTimeout", value);
              if (v56) {
                CFDictionaryAddValue(v16, @"kCFNetDiagnosticPingOptionTrafficClass", v56);
              }
              uint64_t v57 = 0LL;
              CFIndex v18 = 0LL;
              char v54 = v10;
              do
              {
                if (v18 >= CFArrayGetCount(v10)) {
                  break;
                }
                ValueAtIndex = CFArrayGetValueAtIndex(v10, v18);
                CFDictionarySetValue(v16, @"kCFNetDiagnosticPingOptionDataLength", ValueAtIndex);
                uint64_t v20 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  [(id)qword_100219F60 WFLog:2, "Triggered probe to %@ with %@ bytes and %ld tries with timeout as %@ secs", v11, ValueAtIndex, valuePtr, value message];
                }
                unsigned int v58 = (void *)ValueAtIndex;
                objc_autoreleasePoolPop(v20);
                uint64_t v65 = 0LL;
                uint64_t v66 = 0LL;
                double v21 = 0.0;
                if (valuePtr < 1)
                {
                  uint64_t v33 = 0LL;
                  double v25 = 0.0;
                  double v24 = 0.0;
                  double v23 = 0.0;
                }

                else
                {
                  uint64_t v22 = 0LL;
                  double v23 = 0.0;
                  double v24 = 0.0;
                  double v25 = 0.0;
                  while (1)
                  {
                    CFNumberRef v26 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"kWiFiLqaMgrIgnoreProbe");
                    if (v26)
                    {
                      if (CFBooleanGetValue(v26)) {
                        break;
                      }
                    }

                    double v27 = CFAbsoluteTimeGetCurrent();
                    int v28 = CFNetDiagnosticPingWithOptions(v11, v16, &cf);
                    double v29 = CFAbsoluteTimeGetCurrent();
                    if (v28)
                    {
                      double v30 = v29 - v27;
                      if (v25 > v30) {
                        double v31 = v30;
                      }
                      else {
                        double v31 = v25;
                      }
                      if (v25 == 0.0) {
                        double v25 = v30;
                      }
                      else {
                        double v25 = v31;
                      }
                      double v32 = v30;
                      if (v24 != 0.0)
                      {
                        double v32 = v24;
                        if (v24 < v30) {
                          double v32 = v30;
                        }
                      }

                      double v23 = v23 + v30;
                      double v24 = v32;
                    }

                    if (cf)
                    {
                      CFRelease(cf);
                      cuint64_t f = 0LL;
                    }

                    uint64_t v33 = ++v66;
                    if (!v28) {
                      ++v65;
                    }
                    if (++v22 >= valuePtr) {
                      goto LABEL_48;
                    }
                  }

                  uint64_t v64 = 2LL;
                  uint64_t v33 = v66;
                  uint64_t v57 = 2LL;
                }

LABEL_48:
                uint64_t v34 = v33 - v65;
                if (v34) {
                  double v21 = v23 / (double)v34;
                }
                CFMutableDictionaryRef v35 = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
                if (!v35)
                {
                  uint64_t v47 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: probeResult is null",  "__WiFiLQAMgrDoDiagnosticProbe");
                  }
                  goto LABEL_95;
                }

                float32x2_t v36 = v35;
                CFNumberRef v37 = CFNumberCreate(0LL, kCFNumberCFIndexType, &v66);
                CFNumberRef v38 = CFNumberCreate(0LL, kCFNumberCFIndexType, &v65);
                uint64_t v61 = (uint64_t)(v25 * 1000.0);
                uint64_t v59 = (uint64_t)(v21 * 1000.0);
                uint64_t v60 = (uint64_t)(v24 * 1000.0);
                CFNumberRef v39 = CFNumberCreate(0LL, kCFNumberCFIndexType, &v59);
                CFNumberRef v40 = CFNumberCreate(0LL, kCFNumberCFIndexType, &v61);
                CFNumberRef v41 = CFNumberCreate(0LL, kCFNumberCFIndexType, &v60);
                if (v37) {
                  CFDictionarySetValue(v36, @"kWiFiLqaMgrNumProbesSent", v37);
                }
                if (v38) {
                  CFDictionarySetValue(v36, @"kWiFiLqaMgrNumProbesFail", v38);
                }
                if (v39) {
                  CFDictionarySetValue(v36, @"kWiFiLqaMgrAverageRTT", v39);
                }
                if (v40) {
                  CFDictionarySetValue(v36, @"kWiFiLqaMgrMinimumRTT", v40);
                }
                if (v41) {
                  CFDictionarySetValue(v36, @"kWiFiLqaMgrMaximumRTT", v41);
                }
                if (v56) {
                  CFDictionaryAddValue(v36, @"kWiFiLqaMgrProbeTrafficClass", v56);
                }
                if (v58) {
                  CFDictionaryAddValue(v36, @"kWiFiLqaMgrProbeSize", v58);
                }
                CFArrayAppendValue(theArray, v36);
                if (v37) {
                  CFRelease(v37);
                }
                if (v38) {
                  CFRelease(v38);
                }
                if (v39) {
                  CFRelease(v39);
                }
                int v10 = v54;
                if (v40) {
                  CFRelease(v40);
                }
                if (v41) {
                  CFRelease(v41);
                }
                CFRelease(v36);
                ++v18;
              }

              while (v57 != 2);
              double v14 = theArray;
              CFDictionaryAddValue(v8, @"kWiFiLqaMgrProbeStats", theArray);
              CFNumberRef v42 = CFNumberCreate(0LL, kCFNumberCFIndexType, &v64);
              uint64_t v1 = v52;
              if (v42)
              {
                CFNumberRef v43 = v42;
                CFDictionaryAddValue(v8, @"kWiFiLqaMgrError", v42);
                int v7 = context;
                goto LABEL_78;
              }

              uint64_t v47 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: errRef is null",  "__WiFiLQAMgrDoDiagnosticProbe");
              }
LABEL_95:
              objc_autoreleasePoolPop(v47);
              CFNumberRef v43 = 0LL;
              int v7 = context;
              uint64_t v1 = v52;
              double v14 = theArray;
LABEL_78:
              CFNumberRef v44 = v50;
            }

            else
            {
              BOOL v49 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: numProbes is null",  "__WiFiLQAMgrDoDiagnosticProbe");
              }
              objc_autoreleasePoolPop(v49);
              CFNumberRef v44 = 0LL;
              CFNumberRef v43 = 0LL;
            }

            goto LABEL_83;
          }

          int v45 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Probe Options is null",  "__WiFiLQAMgrDoDiagnosticProbe");
          }
        }

        else
        {
          uint64_t v64 = 1LL;
          int v45 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Probe failed due to missing params",  "__WiFiLQAMgrDoDiagnosticProbe");
          }
        }

        objc_autoreleasePoolPop(v45);
LABEL_82:
        CFNumberRef v44 = 0LL;
        CFNumberRef v43 = 0LL;
        uint64_t v16 = 0LL;
LABEL_83:
        double v46 = (dispatch_queue_s *)*((void *)v7 + 159);
        if (v46) {
          dispatch_async_f(v46, v7, (dispatch_function_t)sub_100023D30);
        }
        if (v16) {
          CFRelease(v16);
        }
        if (v44) {
          CFRelease(v44);
        }
        if (v43) {
          CFRelease(v43);
        }
        if (v14) {
          CFRelease(v14);
        }
        goto LABEL_6;
      }

      uint64_t v48 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: resultArrRef is null",  "__WiFiLQAMgrDoDiagnosticProbe");
      }
    }

    else
    {
      uint64_t v48 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Probe Context is null",  "__WiFiLQAMgrDoDiagnosticProbe");
      }
    }

    objc_autoreleasePoolPop(v48);
    double v14 = 0LL;
    goto LABEL_82;
  }

LABEL_6:
  uint64_t v5 = *(const void **)(*(void *)(*(void *)(v1 + 32) + 8LL) + 24LL);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(*(void *)(*(void *)(v1 + 32) + 8LL) + 24LL) = 0LL;
  }

  CFRelease(*(CFTypeRef *)(v1 + 40));
}

  objc_autoreleasePoolPop(v2);
}

  uint64_t v22 = a3;
  double v25 = a1;
  context = objc_autoreleasePoolPush();
  int v10 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  int v11 = (unsigned int *)v8;
  int v12 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  uint64_t v13 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  double v14 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  CFMutableDictionaryRef v15 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  uint64_t v16 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  CFNumberRef v17 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  CFIndex v18 = 0LL;
  double v24 = v11;
  do
  {
    objc_msgSend( v10,  "insertObject:atIndex:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *v11),  v18);
    objc_msgSend( v12,  "insertObject:atIndex:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11[30]),  v18);
    objc_msgSend( v13,  "insertObject:atIndex:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11[60]),  v18);
    objc_msgSend( v14,  "insertObject:atIndex:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11[90]),  v18);
    objc_msgSend( v15,  "insertObject:atIndex:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11[120]),  v18);
    objc_msgSend( v16,  "insertObject:atIndex:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11[150]),  v18);
    objc_msgSend( v17,  "insertObject:atIndex:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11[180]),  v18++);
    ++v11;
  }

  while (v18 != 30);
  if (v22) {
    uint64_t v19 = 7LL;
  }
  else {
    uint64_t v19 = 6LL;
  }
  objc_msgSend( v25,  "addFieldForKey:value:options:",  kWAMessageKeyRSSI,  +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v10),  v19);
  objc_msgSend( v25,  "addFieldForKey:value:options:",  kWAMessageKeyTxPER,  +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v12),  v19);
  objc_msgSend( v25,  "addFieldForKey:value:options:",  kWAMessageKeyTxFrameCount,  +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v13),  v19);
  objc_msgSend( v25,  "addFieldForKey:value:options:",  kWAMessageKeyFwTxPER,  +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v14),  v19);
  objc_msgSend( v25,  "addFieldForKey:value:options:",  kWAMessageKeyFwTxFrameCount,  +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v15),  v19);
  objc_msgSend( v25,  "addFieldForKey:value:options:",  kWAMessageKeyBeaconsSched,  +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v16),  v19);
  objc_msgSend( v25,  "addFieldForKey:value:options:",  kWAMessageKeyBeaconsPer,  +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v17),  v19);
  objc_msgSend( v25,  "addFieldForKey:value:options:",  kWAMessageKeyGatewayARPHistory,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v24[210]),  v19);
  objc_autoreleasePoolPop(context);
  if (!a4)
  {
    uint64_t v20 = v24;
LABEL_14:
    free(v20);
  }

  if (error)
  {
    CFRelease(error);
    SInt32 error = 0LL;
  }

  if (v6) {
    CFRelease(v6);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v8;
}

    objc_autoreleasePoolPop(v3);
LABEL_13:
    objc_autoreleasePoolPop(v2);
    return;
  }

  int v8 = v5;
  int v9 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: associated, not reporting no network soft-error",  "WiFiDeviceManagerNoNetworksFoundNotification");
  }
  objc_autoreleasePoolPop(v9);
  objc_autoreleasePoolPop(v2);
  CFRelease(v8);
}
}

void sub_100023D30(uint64_t a1)
{
  uint64_t v33 = 0LL;
  uint64_t v34 = &v33;
  uint64_t v35 = 0x2020000000LL;
  uint64_t v36 = 0LL;
  double v32 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  uint64_t v28 = 0LL;
  uint64_t v29 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t valuePtr = 0LL;
  double Current = CFAbsoluteTimeGetCurrent();
  if (!a1)
  {
    int v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQAMgr is NULL",  "__WiFiLQAMgrDiagProbeResultCallBack");
    }
    goto LABEL_45;
  }

  double v2 = Current;
  int v3 = *(dispatch_queue_s **)(a1 + 296);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100024138;
  block[3] = &unk_1001E2D48;
  void block[4] = &v33;
  void block[5] = a1;
  dispatch_sync(v3, block);
  uint64_t v4 = (const __CFDictionary *)v34[3];
  if (!v4)
  {
    int v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: CurrentProbe is NULL",  "__WiFiLQAMgrDiagProbeResultCallBack");
    }
    goto LABEL_45;
  }

  Value = (const __CFNumber *)CFDictionaryGetValue(v4, @"kWiFiLqaMgrError");
  if (Value) {
    CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr);
  }
  double v6 = *(double *)(a1 + 304);
  if (v6 == 0.0) {
    double v7 = 0.0;
  }
  else {
    double v7 = v2 - v6;
  }
  int v8 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v34[3], @"kWiFiLqaMgrProbeStats");
  int v9 = objc_autoreleasePoolPush();
  if (!v8)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: probeResultsRef is NULL",  "__WiFiLQAMgrDiagProbeResultCallBack");
    }
LABEL_45:
    objc_autoreleasePoolPop(v9);
    goto LABEL_36;
  }

  if (qword_100219F60)
  {
    int v10 = "";
    if (!valuePtr) {
      int v10 = "no ";
    }
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  2,  "-------- DiagProbe finished in %f secs with %serror (%ld) ---------",  *(void *)&v7,  v10,  valuePtr);
  }

  objc_autoreleasePoolPop(v9);
  for (CFIndex i = 0LL; i < CFArrayGetCount(v8); ++i)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, i);
    uint64_t v13 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrNumProbesSent");
    if (v13) {
      CFNumberGetValue(v13, kCFNumberCFIndexType, &v30);
    }
    double v14 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrNumProbesFail");
    if (v14) {
      CFNumberGetValue(v14, kCFNumberCFIndexType, &v29);
    }
    CFMutableDictionaryRef v15 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrAverageRTT");
    if (v15) {
      CFNumberGetValue(v15, kCFNumberCFIndexType, &v28);
    }
    uint64_t v16 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrMinimumRTT");
    if (v16) {
      CFNumberGetValue(v16, kCFNumberCFIndexType, &v27);
    }
    CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"kWiFiLqaMgrMaximumRTT");
    if (v17) {
      CFNumberGetValue(v17, kCFNumberCFIndexType, &v26);
    }
    CFIndex v18 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  2,  "Probes Sent %ld, Fail %ld Error %ld avgRtt %ld minRtt %ld maxRtt %ld",  v30,  v29,  valuePtr,  v28,  v27,  v26);
    }
    objc_autoreleasePoolPop(v18);
  }

  uint64_t v19 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v34[3], @"kWiFiLqaMgrDiagCallback");
  if (v19) {
    CFNumberGetValue(v19, kCFNumberCFIndexType, &v32);
  }
  uint64_t v20 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v34[3], @"kWiFiLqaMgrDiagCbContext");
  if (v20) {
    CFNumberGetValue(v20, kCFNumberCFIndexType, &v31);
  }
  if (v32 && valuePtr != 2)
  {
    double v21 = CFDictionaryGetValue((CFDictionaryRef)v34[3], @"kWiFiLqaMgrIpv4Addr");
    v32(v21, v8, valuePtr, v31);
  }

  sub_10001D328(a1, 0LL);
LABEL_36:
  uint64_t v22 = (const void *)v34[3];
  if (v22)
  {
    CFRelease(v22);
    v34[3] = 0LL;
  }

  _Block_object_dispose(&v33, 8);
}

void sub_100024118(_Unwind_Exception *a1)
{
}

CFTypeRef sub_100024138(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = *(void *)(*(void *)(a1 + 40) + 312LL);
  CFTypeRef result = *(CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_100024160(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 2976LL);
  int v9 = objc_autoreleasePoolPush();
  if (v8)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s LQA manager is in closing\n",  "__WiFiLQAMgrTriggetDisconnectSymptomsCallback_block_invoke");
    }
    int v10 = v9;
    goto LABEL_5;
  }

  if (qword_100219F60)
  {
    int v11 = "failure";
    if (!a2) {
      int v11 = "success";
    }
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  2,  "%s Symptom Fetch Result %s",  "__WiFiLQAMgrTriggetDisconnectSymptomsCallback_block_invoke",  v11);
  }

  objc_autoreleasePoolPop(v9);
  *(_BYTE *)(*(void *)(a1 + 32) + 508LL) = 0;
  int v12 = +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance");
  if (!a2)
  {
    if (a3)
    {
      uint64_t v13 = v12;
      double v14 = (CFAbsoluteTime *)(a4 + 48);
      do
      {
        CFMutableDictionaryRef v15 = CFDateCreate(0LL, *(v14 - 3));
        uint64_t v16 = CFLocaleCreate(0LL, @"en_US");
        CFNumberRef v17 = CFDateFormatterCreate(0LL, v16, kCFDateFormatterShortStyle, kCFDateFormatterShortStyle);
        CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(0LL, v17, v15);
        uint64_t v19 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:4, "%s Symptoms Event (id/class/time/reason/code): %lld %s %@ %s %lld", "__WiFiLQAMgrTriggetDisconnectSymptomsCallback_block_invoke", *((void *)v14 - 5), *((void *)v14 - 4), StringWithDate, *((void *)v14 - 1), *((void *)v14 - 2) message];
        }
        objc_autoreleasePoolPop(v19);
        if (*(void *)v14)
        {
          uint64_t v20 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:4, "%s Symptoms Event Details: %@", "__WiFiLQAMgrTriggetDisconnectSymptomsCallback_block_invoke", *(void *)v14 message];
          }
          objc_autoreleasePoolPop(v20);
        }

        switch(*((void *)v14 - 2))
        {
          case 1LL:
            uint64_t v21 = *(void *)(a1 + 32);
            ++*(_DWORD *)(v21 + 472);
            *(_DWORD *)(v21 + 2820) = 4;
            char v22 = 1;
            uint64_t v23 = 4LL;
            break;
          case 2LL:
            uint64_t v21 = *(void *)(a1 + 32);
            *(_DWORD *)(v21 + 2820) = 2;
            char v22 = 1;
            uint64_t v23 = 2LL;
            break;
          case 3LL:
            uint64_t v21 = *(void *)(a1 + 32);
            ++*(_DWORD *)(v21 + 456);
            char v22 = 1;
            *(_BYTE *)(v21 + 50_Block_object_dispose((const void *)(v1 - 136), 8) = 1;
            *(_DWORD *)(v21 + 2820) = 3;
            uint64_t v23 = 1LL;
            break;
          case 4LL:
            uint64_t v21 = *(void *)(a1 + 32);
            ++*(_DWORD *)(v21 + 476);
            *(_DWORD *)(v21 + 2820) = 5;
            char v22 = 1;
            uint64_t v23 = 5LL;
            break;
          case 7LL:
            uint64_t v21 = *(void *)(a1 + 32);
            ++*(_DWORD *)(v21 + 484);
            *(_DWORD *)(v21 + 2820) = 6;
            char v22 = 1;
            uint64_t v23 = 3LL;
            break;
          default:
            char v22 = 0;
            uint64_t v23 = 0LL;
            uint64_t v21 = *(void *)(a1 + 32);
            ++*(_DWORD *)(v21 + 480);
            break;
        }

        unsigned int v24 = sub_1000230B8(v21);
        if (v24 != 255) {
          *(_BYTE *)(*(void *)(a1 + 32) + 144LL * v24 + 1356) = *((void *)v14 - 2);
        }
        char v25 = v22 ^ 1;
        if (!v13) {
          char v25 = 1;
        }
        if ((v25 & 1) == 0) {
          -[WiFiUsageMonitor addFaultEvent:forInterface:]( v13,  "addFaultEvent:forInterface:",  v23,  *(void *)(*(void *)(a1 + 32) + 40LL));
        }
        CFRelease(v15);
        CFRelease(v16);
        CFRelease(v17);
        CFRelease(StringWithDate);
        v14 += 7;
        --a3;
      }

      while (a3);
    }

    uint64_t v26 = *(void *)(a1 + 32);
    if (!*(_DWORD *)(v26 + 16))
    {
      uint64_t v29 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  2,  "%s: Ignore SymptomFmwk Event in MacStatsBased Mode",  "__WiFiLQAMgrTriggetDisconnectSymptomsCallback_block_invoke");
      }
      goto LABEL_56;
    }

    int v27 = *(_DWORD *)(v26 + 20);
    switch(v27)
    {
      case 1:
        uint64_t v29 = objc_autoreleasePoolPush();
        uint64_t v30 = (void *)qword_100219F60;
        if (!qword_100219F60) {
          goto LABEL_56;
        }
        uint64_t v31 = "%s: Ignore SymptomFmwk Event in GoodLinkState";
        break;
      case 0:
        uint64_t v29 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: SymptomFmwk Event in UnassociatedState",  "__WiFiLQAMgrTriggetDisconnectSymptomsCallback_block_invoke");
        }
        goto LABEL_56;
      case 4:
        uint64_t v29 = objc_autoreleasePoolPush();
        uint64_t v30 = (void *)qword_100219F60;
        if (!qword_100219F60) {
          goto LABEL_56;
        }
        uint64_t v31 = "%s: Ignore SymptomFmwk Event in RoamwaitState";
        break;
      default:
        if (*(_BYTE *)(v26 + 508))
        {
          if (!*(_BYTE *)(v26 + 637) || !*(_BYTE *)(v26 + 638))
          {
            uint64_t v28 = *(dispatch_queue_s **)(v26 + 1272);
            if (v28) {
              dispatch_async_f(v28, (void *)v26, (dispatch_function_t)sub_100024634);
            }
            goto LABEL_6;
          }

          uint64_t v29 = objc_autoreleasePoolPush();
          uint64_t v30 = (void *)qword_100219F60;
          if (!qword_100219F60) {
            goto LABEL_56;
          }
          uint64_t v31 = "%s: Ignore SymptomFmwk Event when WiFi-Assist enabled ";
          break;
        }

        uint64_t v29 = objc_autoreleasePoolPush();
        uint64_t v30 = (void *)qword_100219F60;
        if (qword_100219F60)
        {
          uint64_t v31 = "%s: Ignore SymptomFmwk Event ";
          break;
        }

void sub_100024634(uint64_t a1)
{
  if (!&_managed_event_fetch) {
    return;
  }
  if (!a1)
  {
    uint64_t v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LQAMgr is NULL",  "__WiFiLQAMgrSymptomsDNSFailureInputCallBack");
    }
    goto LABEL_23;
  }

  int v2 = *(_DWORD *)(a1 + 20);
  if (v2 == 1)
  {
    uint64_t v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Trigger Disconnect in GoodLinkState",  "__WiFiLQAMgrSymptomsDNSFailureInputCallBack");
    }
    goto LABEL_23;
  }

  if (!v2)
  {
    uint64_t v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Trigger Disconnect in UnassociatedState",  "__WiFiLQAMgrSymptomsDNSFailureInputCallBack");
    }
LABEL_23:
    double v6 = v5;
LABEL_27:
    objc_autoreleasePoolPop(v6);
    return;
  }

  if (*(int *)(a1 + 2788) >= -84)
  {
    double v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Discarding DNS symptom in rssi %d",  "__WiFiLQAMgrSymptomsDNSFailureInputCallBack",  *(unsigned int *)(a1 + 2788));
    }
    double v6 = v7;
    goto LABEL_27;
  }

  ++*(_DWORD *)(a1 + 488);
  int v3 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Symptoms Notification, failcredits %d",  "__WiFiLQAMgrSymptomsDNSFailureInputCallBack",  *(unsigned int *)(a1 + 488));
  }
  objc_autoreleasePoolPop(v3);
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4 == 1)
  {
    int v4 = *(_DWORD *)(a1 + 16);
  }

  if (v4 == 2) {
    sub_10002157C(a1);
  }
  if (*(_DWORD *)(a1 + 516) == *(_DWORD *)(a1 + 520)) {
    sub_100053344(*(void *)(a1 + 32), *(void *)(a1 + 40), 3LL);
  }
}

void sub_100024860(id a1)
{
  uint64_t v1 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: creating WiFiMaintenanceTaskManager",  "+[WiFiMaintenanceTaskManager sharedWiFiMaintenanceTaskManager]_block_invoke");
  }
  objc_autoreleasePoolPop(v1);
  qword_100219850 = objc_alloc_init(&OBJC_CLASS___WiFiMaintenanceTaskManager);
}

void sub_100024C74(uint64_t a1, _xpc_activity_s *a2)
{
  int v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: state %ld",  "-[WiFiMaintenanceTaskManager scheduleOrphanedSetsCleanUp]_block_invoke",  xpc_activity_get_state(a2));
  }
  objc_autoreleasePoolPop(v4);
  if ([*(id *)(a1 + 32) wifiManager])
  {
    if ([*(id *)(a1 + 32) queue])
    {
      uint64_t v5 = (dispatch_queue_s *)[*(id *)(a1 + 32) queue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100024DC0;
      block[3] = &unk_1001E2AF0;
      void block[4] = *(void *)(a1 + 32);
      dispatch_async(v5, block);
      return;
    }

    double v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Nil queue",  "-[WiFiMaintenanceTaskManager scheduleOrphanedSetsCleanUp]_block_invoke");
    }
  }

  else
  {
    double v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null wifi manager ref",  "-[WiFiMaintenanceTaskManager scheduleOrphanedSetsCleanUp]_block_invoke");
    }
  }

  objc_autoreleasePoolPop(v6);
}

void sub_100024DC0(uint64_t a1)
{
}

void sub_100024FB8(uint64_t a1, _xpc_activity_s *a2)
{
  int v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: state %ld",  "-[WiFiMaintenanceTaskManager scheduleOutdatedListEntriesCleanUp]_block_invoke",  xpc_activity_get_state(a2));
  }
  objc_autoreleasePoolPop(v4);
  if ([*(id *)(a1 + 32) wifiManager])
  {
    if ([*(id *)(a1 + 32) queue])
    {
      uint64_t v5 = (dispatch_queue_s *)[*(id *)(a1 + 32) queue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100025104;
      block[3] = &unk_1001E2AF0;
      void block[4] = *(void *)(a1 + 32);
      dispatch_async(v5, block);
      return;
    }

    double v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Nil queue",  "-[WiFiMaintenanceTaskManager scheduleOutdatedListEntriesCleanUp]_block_invoke");
    }
  }

  else
  {
    double v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null wifi manager ref",  "-[WiFiMaintenanceTaskManager scheduleOutdatedListEntriesCleanUp]_block_invoke");
    }
  }

  objc_autoreleasePoolPop(v6);
}

void sub_100025104(uint64_t a1)
{
}

void sub_1000252E0(uint64_t a1, xpc_activity_t activity)
{
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  uint64_t v5 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: state %ld",  "-[WiFiMaintenanceTaskManager schedule3BarsObserver]_block_invoke",  state);
  }
  objc_autoreleasePoolPop(v5);
  if (xpc_activity_should_defer(activity))
  {
    BOOL v6 = xpc_activity_set_state(activity, 3LL);
    double v7 = objc_autoreleasePoolPush();
    if (v6)
    {
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Deferring 3Bars activity",  "-[WiFiMaintenanceTaskManager schedule3BarsObserver]_block_invoke");
      }
    }

    else if (qword_100219F60)
    {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to defer the periodic 3Bars xpc activity",  "-[WiFiMaintenanceTaskManager schedule3BarsObserver]_block_invoke");
    }

    objc_autoreleasePoolPop(v7);
  }

  else if (state == 2 && xpc_activity_set_state(activity, 4LL))
  {
    id v8 = +[WiFi3BarsObserver sharedWiFi3BarsObserver](&OBJC_CLASS___WiFi3BarsObserver, "sharedWiFi3BarsObserver");
    id v9 = [*(id *)(a1 + 32) wifiManager];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10002545C;
    v10[3] = &unk_1001E2AC8;
    v10[4] = activity;
    [v8 run3BarsObserver:v9 withActivity:activity withCompletion:v10];
  }

BOOL sub_10002545C(uint64_t a1)
{
  return xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5LL);
}

void sub_1000256AC(uint64_t a1, _xpc_activity_s *a2)
{
  int v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: state %ld",  "-[WiFiMaintenanceTaskManager schedulePNLMigration]_block_invoke",  xpc_activity_get_state(a2));
  }
  objc_autoreleasePoolPop(v4);
  if ([*(id *)(a1 + 32) wifiManager])
  {
    if ([*(id *)(a1 + 32) queue])
    {
      uint64_t v5 = (dispatch_queue_s *)[*(id *)(a1 + 32) queue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000257F8;
      block[3] = &unk_1001E2AF0;
      void block[4] = *(void *)(a1 + 32);
      dispatch_async(v5, block);
      return;
    }

    BOOL v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Nil queue",  "-[WiFiMaintenanceTaskManager schedulePNLMigration]_block_invoke");
    }
  }

  else
  {
    BOOL v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null wifi manager ref",  "-[WiFiMaintenanceTaskManager schedulePNLMigration]_block_invoke");
    }
  }

  objc_autoreleasePoolPop(v6);
}

void sub_1000257F8(uint64_t a1)
{
}

id sub_100025A08(uint64_t a1, _xpc_activity_s *a2)
{
  int v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: state %ld",  "-[WiFiMaintenanceTaskManager scheduleHistoricNetworkPerformanceFeedSync]_block_invoke",  xpc_activity_get_state(a2));
  }
  objc_autoreleasePoolPop(v4);
  return [*(id *)(a1 + 32) networkPerformanceFeedSync];
}

uint64_t sub_100025D3C(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    uint64_t v20 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: failed (SInt32 error = %@ data = %@)", "-[WiFiMaintenanceTaskManager networkPerformanceFeedSync]_block_invoke", a3, a2 message];
    }
    objc_autoreleasePoolPop(v20);
  }

  else
  {
    id v6 = [a2 objectForKeyedSubscript:@"historical"];
    if (v6)
    {
      double v7 = v6;
      id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:kSymptomAnalyticsServiceNetworkAttachmentHistorical];
      if (v8)
      {
        id v9 = v8;
        __int128 v27 = 0u;
        __int128 v28 = 0u;
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        id v10 = [v7 countByEnumeratingWithState:&v25 objects:v29 count:16];
        if (v10)
        {
          id v11 = v10;
          int v12 = 0;
          int v13 = 0;
          uint64_t v14 = *(void *)v26;
          do
          {
            for (CFIndex i = 0LL; i != v11; CFIndex i = (char *)i + 1)
            {
              if (*(void *)v26 != v14) {
                objc_enumerationMutation(v7);
              }
              uint64_t v16 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)i);
              if (objc_msgSend( objc_msgSend(v16, "commonPrefixWithString:options:", v9, 0),  "isEqualToString:",  v9))
              {
                id v17 = [v7 objectForKey:v16];
                if (v17)
                {
                  CFIndex v18 = v17;
                  if ([v17 objectForKeyedSubscript:@"isKnownGood"])
                  {
                    unsigned int v19 = objc_msgSend( objc_msgSend(v18, "objectForKeyedSubscript:", @"isKnownGood"),  "BOOLValue");
                    v12 += v19;
                    v13 += v19 ^ 1;
                  }
                }
              }
            }

            id v11 = [v7 countByEnumeratingWithState:&v25 objects:v29 count:16];
          }

          while (v11);
        }

        else
        {
          int v12 = 0;
          int v13 = 0;
        }

        if (v12 | v13)
        {
          id v22 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
          [v22 setObject:*(void *)(a1 + 40) forKey:@"ssid"];
          objc_msgSend( v22,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v12 >= v13),  @"isTCPGood");
          uint64_t v23 = objc_autoreleasePoolPush();
          if (qword_100219F60)
          {
            unsigned int v24 = @"bad";
            if (v12 >= v13) {
              unsigned int v24 = @"good";
            }
            [(id)qword_100219F60 WFLog:3, "%s: step 2 - %@ is known %@", "-[WiFiMaintenanceTaskManager networkPerformanceFeedSync]_block_invoke", v9, v24 message];
          }

          objc_autoreleasePoolPop(v23);
          [*(id *)(a1 + 48) addObject:v22];
        }
      }
    }
  }

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

void sub_1000260E8(id a1, OS_xpc_object *a2)
{
  xpc_activity_state_t state = xpc_activity_get_state(a2);
  int v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: state %ld",  "-[WiFiMaintenanceTaskManager scheduleWCADownloadObserver]_block_invoke",  state);
  }
  objc_autoreleasePoolPop(v4);
  if (xpc_activity_should_defer(a2))
  {
    BOOL v5 = xpc_activity_set_state(a2, 3LL);
    id v6 = objc_autoreleasePoolPush();
    if (v5)
    {
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Deferring WCA download activity",  "-[WiFiMaintenanceTaskManager scheduleWCADownloadObserver]_block_invoke");
      }
    }

    else if (qword_100219F60)
    {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to defer the periodic WCA download xpc activity",  "-[WiFiMaintenanceTaskManager scheduleWCADownloadObserver]_block_invoke");
    }

    objc_autoreleasePoolPop(v6);
  }

  else if (state == 2 && xpc_activity_set_state(a2, 4LL))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10002623C;
    block[3] = &unk_1001E2AF0;
    void block[4] = a2;
    dispatch_async((dispatch_queue_t)qword_100219F80, block);
  }

BOOL sub_10002623C(uint64_t a1)
{
  return xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5LL);
}

void sub_100026324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    int v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null manager", "WiFiCloudSyncInitSyncEngine");
    }
    goto LABEL_10;
  }

  if (!a2)
  {
    int v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null syncEngine", "WiFiCloudSyncInitSyncEngine");
    }
LABEL_10:
    objc_autoreleasePoolPop(v4);
    return;
  }

  v5[2] = *(_OWORD *)off_1001E2E80;
  v5[3] = *(_OWORD *)off_1001E2E90;
  id v6 = sub_1000268E4;
  v5[0] = unk_1001E2E60;
  v5[1] = *(_OWORD *)off_1001E2E70;
  WiFiCloudSyncEngineRegisterCallbacksWithQueue(a2, v5, a1, @"com.apple.wifid", a3);
  int v3 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s", "WiFiCloudSyncInitSyncEngine");
  }
  objc_autoreleasePoolPop(v3);
}

void sub_100026440(uint64_t a1, uint64_t a2)
{
  int v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s", "__WiFiCloudSyncAddNetworkToPlist");
  }
  objc_autoreleasePoolPop(v4);
  if (a2)
  {
    BOOL v5 = (dispatch_queue_s *)sub_10006B4D8(a2);
    if (v5)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100026B08;
      block[3] = &unk_1001E2C30;
      void block[4] = a1;
      void block[5] = a2;
      dispatch_sync(v5, block);
    }

    else
    {
      id v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null queue", "__WiFiCloudSyncAddNetworkToPlist");
      }
      objc_autoreleasePoolPop(v6);
    }
  }

void sub_100026538(uint64_t a1, uint64_t a2)
{
  int v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s", "__WiFiCloudSyncRemoveNetworkFromPlist");
  }
  objc_autoreleasePoolPop(v4);
  if (a2)
  {
    BOOL v5 = (dispatch_queue_s *)sub_10006B4D8(a2);
    if (v5)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100026B14;
      block[3] = &unk_1001E2C30;
      void block[4] = a1;
      void block[5] = a2;
      dispatch_sync(v5, block);
    }

    else
    {
      id v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null queue",  "__WiFiCloudSyncRemoveNetworkFromPlist");
      }
      objc_autoreleasePoolPop(v6);
    }
  }

CFStringRef sub_100026630(void *a1)
{
  int v2 = objc_autoreleasePoolPush();
  if (a1)
  {
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s - for network %@", "__WiFiCloudSyncIsPasswordPresent", sub_100095BC8(a1) message];
    }
    objc_autoreleasePoolPop(v2);
    return sub_100099E10((CFDictionaryRef *)a1);
  }

  else
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null networkRef",  "__WiFiCloudSyncIsPasswordPresent");
    }
    objc_autoreleasePoolPop(v2);
    return 0LL;
  }

void sub_1000266F0(const void *a1)
{
  int v2 = objc_autoreleasePoolPush();
  if (a1)
  {
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s - for network %@", "__WiFiCloudSyncSetPasswordSyncState", sub_100095BC8(a1) message];
    }
    objc_autoreleasePoolPop(v2);
    sub_100099EB4();
  }

  else
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null networkRef",  "__WiFiCloudSyncSetPasswordSyncState");
    }
    objc_autoreleasePoolPop(v2);
  }

uint64_t sub_1000267B0(uint64_t a1)
{
  int v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s", "__WiFiCloudSyncCopyAllNetworks");
  }
  objc_autoreleasePoolPop(v2);
  uint64_t v8 = 0LL;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000LL;
  uint64_t v11 = 0LL;
  if (a1)
  {
    int v3 = (dispatch_queue_s *)sub_10006B4D8(a1);
    if (v3)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100026B20;
      block[3] = &unk_1001E2D48;
      void block[4] = &v8;
      void block[5] = a1;
      dispatch_sync(v3, block);
    }

    else
    {
      id v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null queue", "__WiFiCloudSyncCopyAllNetworks");
      }
      objc_autoreleasePoolPop(v6);
    }
  }

  uint64_t v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1000268CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000268E4(uint64_t a1)
{
  int v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%@", a1 message];
  }
  objc_autoreleasePoolPop(v2);
}

void sub_100026938(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  if (!a1)
  {
    BOOL v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null syncEngine", "WiFiCloudSyncAddNetworkToCloud");
    }
    goto LABEL_11;
  }

  BOOL v5 = objc_autoreleasePoolPush();
  if (!a2)
  {
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null network", "WiFiCloudSyncAddNetworkToCloud");
    }
LABEL_11:
    objc_autoreleasePoolPop(v5);
    goto LABEL_6;
  }

  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s", "WiFiCloudSyncAddNetworkToCloud");
  }
  objc_autoreleasePoolPop(v5);
  WiFiCloudSyncEngineAddNetworkToCloud(a1, a2);
LABEL_6:
  objc_autoreleasePoolPop(v4);
}

void sub_100026A20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  if (!a1)
  {
    BOOL v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null syncEngine",  "WiFiCloudSyncRemoveNetworkFromCloud");
    }
    goto LABEL_11;
  }

  BOOL v5 = objc_autoreleasePoolPush();
  if (!a2)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null network",  "WiFiCloudSyncRemoveNetworkFromCloud");
    }
LABEL_11:
    objc_autoreleasePoolPop(v5);
    goto LABEL_6;
  }

  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s", "WiFiCloudSyncRemoveNetworkFromCloud");
  }
  objc_autoreleasePoolPop(v5);
  WiFiCloudSyncEngineRemoveNetworkFromCloud(a1, a2);
LABEL_6:
  objc_autoreleasePoolPop(v4);
}

void sub_100026B08(uint64_t a1)
{
}

void sub_100026B14(uint64_t a1)
{
}

__CFArray *sub_100026B20(uint64_t a1)
{
  CFTypeRef result = sub_10006CA74(*(void *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

void sub_100026B50(const void *a1)
{
  if (a1)
  {
    if (qword_100219860)
    {
      if (*(void *)(qword_100219860 + 32))
      {
        int v2 = (char *)malloc(0x570uLL);
        if (!v2) {
          return;
        }
        int v3 = v2;
        bzero(v2, 0x570uLL);
        *((CFAbsoluteTime *)v3 + 1) = CFAbsoluteTimeGetCurrent();
        *(void *)int v3 = a1;
        CFRetain(a1);
        *((void *)v3 + 8_Block_object_dispose(va, 8) = sub_100091CA8((uint64_t)kCFAllocatorDefault, 10LL, 216LL);
        *(_OWORD *)(v3 + 48_Block_object_dispose(va, 8) = 0u;
        *(_OWORD *)(v3 + 504) = 0u;
        *(_OWORD *)(v3 + 520) = 0u;
        *(_OWORD *)(v3 + 536) = 0u;
        *(_OWORD *)(v3 + 552) = 0u;
        *(_OWORD *)(v3 + 56_Block_object_dispose(va, 8) = 0u;
        *(_OWORD *)(v3 + 584) = 0u;
        *(_OWORD *)(v3 + 600) = 0u;
        *(_OWORD *)(v3 + 616) = 0u;
        *(_OWORD *)(v3 + 632) = 0u;
        *(_OWORD *)(v3 + 64_Block_object_dispose(va, 8) = 0u;
        *(_OWORD *)(v3 + 664) = 0u;
        *(_OWORD *)(v3 + 680) = 0u;
        *((void *)v3 + 87) = 0LL;
        *((void *)v3 + 89) = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
        CFArrayAppendValue(*(CFMutableArrayRef *)(qword_100219860 + 32), v3);
        uint64_t v4 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s # %ld",  "WiFiMetricsManagerRegisterDevice",  CFArrayGetCount(*(CFArrayRef *)(qword_100219860 + 32)));
        }
      }

      else
      {
        uint64_t v4 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null deviceMetricsArray !!",  "WiFiMetricsManagerRegisterDevice",  v5);
        }
      }
    }

    else
    {
      uint64_t v4 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null metrics !!",  "WiFiMetricsManagerRegisterDevice",  v5);
      }
    }
  }

  else
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null device !!",  "WiFiMetricsManagerRegisterDevice",  v5);
    }
  }

  objc_autoreleasePoolPop(v4);
}

void sub_100026D1C(const void *a1)
{
  if (!a1)
  {
    double v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null device !!",  "WiFiMetricsManagerUnRegisterDevice");
    }
    goto LABEL_20;
  }

  if (!qword_100219860)
  {
    double v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null metrics !!",  "WiFiMetricsManagerUnRegisterDevice");
    }
    goto LABEL_20;
  }

  int v2 = *(const __CFArray **)(qword_100219860 + 32);
  if (!v2)
  {
    double v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null deviceMetricsArray !!",  "WiFiMetricsManagerUnRegisterDevice");
    }
LABEL_20:
    objc_autoreleasePoolPop(v7);
    return;
  }

  ValueAtIndex = CFArrayGetValueAtIndex(v2, 0LL);
  if (ValueAtIndex)
  {
    uint64_t v4 = ValueAtIndex;
    if (*ValueAtIndex)
    {
      uint64_t v5 = (const void *)v4[88];
      if (v5)
      {
        CFRelease(v5);
        v4[88] = 0LL;
      }

      id v6 = (const void *)v4[89];
      if (v6)
      {
        CFRelease(v6);
        v4[89] = 0LL;
      }

      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(qword_100219860 + 32), 0LL);
      free(v4);
    }
  }

uint64_t sub_100026E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  if (a2 && objc_opt_class(&OBJC_CLASS___WAClient))
  {
    uint64_t v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s", "WiFiMetricsManagerCreate");
    }
    objc_autoreleasePoolPop(v5);
    if (!qword_100219870) {
      pthread_once(&stru_100218E68, (void (*)(void))sub_100039994);
    }
    uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance(a1);
    qword_100219860 = (uint64_t)Instance;
    if (Instance)
    {
      Instance[4] = 0u;
      Instance[5] = 0u;
      Instance[2] = 0u;
      Instance[3] = 0u;
      Instance[1] = 0u;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      uint64_t v8 = (void *)qword_100219860;
      *(CFAbsoluteTime *)(qword_100219860 + 24) = Current;
      v8[2] = a2;
      v8[10] = 0LL;
      v8[11] = 0LL;
      char v9 = MGGetBoolAnswer(@"cellular-data");
      uint64_t v10 = qword_100219860;
      *(_BYTE *)(qword_100219860 + 40) = v9;
      *(void *)(v10 + 4_Block_object_dispose(va, 8) = 0LL;
      memset(&callBacks, 0, sizeof(callBacks));
      CFMutableArrayRef v11 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &callBacks);
      uint64_t v12 = qword_100219860;
      *(void *)(qword_100219860 + 32) = v11;
      if (v11)
      {
        *(void *)(v12 + 72) = qword_100219F80;
      }

      else
      {
        CFMutableDictionaryRef v15 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null metrics->deviceMetricsArray !!",  "WiFiMetricsManagerCreate");
        }
        objc_autoreleasePoolPop(v15);
      }
    }
  }

  uint64_t v13 = qword_100219860;
  objc_autoreleasePoolPop(v4);
  return v13;
}

void sub_100027010(uint64_t a1, unsigned int a2, const void *a3, unsigned int a4)
{
  if (!a1)
  {
    uint64_t v8 = objc_autoreleasePoolPush();
    char v9 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      uint64_t v10 = "%s: Invalid device!";
LABEL_11:
      objc_msgSend(v9, "WFLog:message:", 4, v10, "WiFiMetricsManagerSubmitAssociationFailure");
    }

void sub_100027824(unsigned __int8 *a1)
{
  if (a1)
  {
    uint64_t v1 = a1[1];
    uint64_t v2 = a1[2];
    uint64_t v3 = *a1;
    uint64_t v4 = objc_autoreleasePoolPush();
    uint64_t v5 = objc_autoreleasePoolPush();
    id v6 = objc_alloc(&OBJC_CLASS___WAMessage);
    id v7 = [v6 initWithMetricName:kWAMessageMetricNameHotspotTransportUsed options:5];
    if (v7)
    {
      uint64_t v8 = v7;
      objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyWiFiHotspotCount,  +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v3),  5);
      objc_msgSend( v8,  "addFieldForKey:value:options:",  kWAMessageKeyBTHotspotCount,  +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v1),  5);
      objc_msgSend( v8,  "addFieldForKey:value:options:",  kWAMessageKeyUSBHotspotCount,  +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v2),  5);
      sub_10002891C(v8);
    }

    else
    {
      char v9 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Failed to alloc WAMessage for HotspotTransportType",  "__WiFiMetricsManagerWAMessageSubmitHotspotTransportType");
      }
      objc_autoreleasePoolPop(v9);
    }

    objc_autoreleasePoolPop(v5);
    objc_autoreleasePoolPop(v4);
  }

void sub_100027988(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  if (!a1)
  {
    BOOL v31 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null device",  "WiFiMetricsManagerSubmitIPv4DHCPLatency");
    }
    goto LABEL_32;
  }

  if (!qword_100219860) {
    return;
  }
  if (sub_100071B54(*(void *)(qword_100219860 + 16)) == 1)
  {
    BOOL v31 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Camera is in Foreground",  "WiFiMetricsManagerSubmitIPv4DHCPLatency");
    }
LABEL_32:
    objc_autoreleasePoolPop(v31);
    return;
  }

  unsigned int v11 = (const void *)sub_100043E8C(a1);
  uint64_t v12 = sub_100040538(a1, v11);
  if (v12)
  {
    uint64_t v13 = v12;
    if (a2)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      if (Current == 0.0 || (v15 = Current, double v16 = sub_10004F3D8(a1), v16 == 0.0) || (v17 = v16, v15 <= v16))
      {
LABEL_26:
        CFRelease(v13);
        return;
      }

      sub_10004F3EC(a1, 0.0);
      uint64_t v18 = ((v15 - v17) * 1000.0);
    }

    else
    {
      uint64_t v18 = 0xFFFFFFFFLL;
    }

    uint64_t v19 = sub_100098EA8((uint64_t)v13);
    uint64_t v20 = objc_autoreleasePoolPush();
    if ((a6 & 1) == 0)
    {
      size_t v21 = objc_autoreleasePoolPush();
      id v22 = objc_alloc(&OBJC_CLASS___WAMessage);
      id v23 = [v22 initWithMetricName:kWAMessageMetricNameIpv4Latency options:7];
      if (v23)
      {
        unsigned int v24 = v23;
        objc_msgSend( v23,  "addFieldForKey:value:options:",  kWAMessageKeyDHCPLatencyMilliSec,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18),  7);
        objc_msgSend( v24,  "addFieldForKey:value:options:",  kWAMessageKeyNetworkAuthFlags,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v19),  7);
        objc_msgSend( v24,  "addFieldForKey:value:options:",  kWAMessageKeyDHCPLeaseMins,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3),  7);
        objc_msgSend( v24,  "addFieldForKey:value:options:",  kWAMessageKeyDHCPSuccess,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2 != 0),  6);
        if (a5)
        {
          id v25 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
          id v26 = [a5 valueForKey:@"IO80211InterfaceIPV4Address"];
          id v27 = [a5 valueForKey:@"IO80211InterfaceIPV4RouterAddress"];
          id v28 = [a5 valueForKey:@"IO80211InterfaceRouterMACAddress"];
          [v25 setValue:v26 forKey:@"IO80211InterfaceIPV4Address"];
          [v25 setValue:v27 forKey:@"IO80211InterfaceIPV4RouterAddress"];
          if (v28) {
            objc_msgSend( v25,  "setValue:forKey:",  +[NSString stringWithUTF8String:]( NSString,  "stringWithUTF8String:",  ether_ntoa((const ether_addr *)objc_msgSend(v28, "bytes"))),  @"IO80211InterfaceRouterMACAddress");
          }
          uint64_t v29 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: %@", "__WiFiMetricsManagerWAMessageSubmitIpv4Latency", v25 message];
          }
          objc_autoreleasePoolPop(v29);
          [v24 addFieldForKey:kWAMessageKeyDHCPAddresses value:v25 options:6];
        }

        if (!sub_100036E74(v24, v13, 6LL))
        {
          uint64_t v30 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to append SSID/BSSID to to WAMessage",  "__WiFiMetricsManagerWAMessageSubmitIpv4Latency");
          }
          objc_autoreleasePoolPop(v30);
        }

        sub_10002891C(v24);
      }

      else
      {
        double v32 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to alloc WAMessage for Ipv4Latency",  "__WiFiMetricsManagerWAMessageSubmitIpv4Latency");
        }
        objc_autoreleasePoolPop(v32);
      }

      objc_autoreleasePoolPop(v21);
    }

    objc_autoreleasePoolPop(v20);
    goto LABEL_26;
  }

uint64_t sub_100027DE8(uint64_t a1, int a2, int a3)
{
  if ((int)a1 > 255)
  {
    if ((int)a1 >= 0x2000)
    {
      if ((int)a1 < 0x8000)
      {
        if ((_DWORD)a1 != 0x2000)
        {
          if ((_DWORD)a1 == 0x4000) {
            return 15LL;
          }
          goto LABEL_40;
        }
      }

      else
      {
        if ((_DWORD)a1 == 0x8000) {
          return 16LL;
        }
        if ((_DWORD)a1 != 0x10000 && (_DWORD)a1 != 0x20000) {
          goto LABEL_40;
        }
      }
    }

    else
    {
      if ((int)a1 <= 1023)
      {
        if ((_DWORD)a1 == 256) {
          return 18LL;
        }
        if ((_DWORD)a1 == 512) {
          return 20LL;
        }
        goto LABEL_40;
      }

      if ((_DWORD)a1 == 1024) {
        return 9LL;
      }
      if ((_DWORD)a1 == 2048) {
        return 8LL;
      }
      if ((_DWORD)a1 != 4096)
      {
LABEL_40:
        uint64_t v5 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: unknownt auth type (%d)",  "WiFiMetricEnhancedSecurityTypeFromAuthType",  a1);
        }
        objc_autoreleasePoolPop(v5);
        return 111LL;
      }
    }

    goto LABEL_26;
  }

  if ((int)a1 > 15)
  {
    if ((int)a1 > 63)
    {
      if ((_DWORD)a1 == 64) {
        return 17LL;
      }
      if ((_DWORD)a1 == 128) {
        return 6LL;
      }
      goto LABEL_40;
    }

    if ((_DWORD)a1 != 16)
    {
      if ((_DWORD)a1 == 32) {
        return 19LL;
      }
      goto LABEL_40;
    }

LABEL_26:
    if (a3) {
      return 11LL;
    }
    else {
      return 5LL;
    }
  }

  uint64_t result = 2LL;
  switch((int)a1)
  {
    case 0:
      uint64_t result = a2 != 0;
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 3LL;
      break;
    case 4:
      uint64_t result = 4LL;
      break;
    case 8:
      goto LABEL_26;
    default:
      goto LABEL_40;
  }

  return result;
}

  _Block_object_dispose(&v23, 8);
  return v10;
}

  CFAllocatorRef v14 = CFArrayCreateMutable(v17, 0LL, &kCFTypeArrayCallBacks);
  if (v14)
  {
    int Count = CFArrayGetCount(v12);
    if (Count >= 1)
    {
      id v25 = Count;
      for (CFIndex i = 0LL; i != v25; ++i)
      {
        id v27 = CFArrayGetValueAtIndex(v12, i);
        if (v27)
        {
          id v28 = sub_100056E40((uint64_t)v27);
          if (!v28) {
            break;
          }
          uint64_t v29 = v28;
          CFArrayAppendValue(v14, v28);
          CFRelease(v29);
        }
      }
    }
  }

  objc_autoreleasePoolPop(v2);
}

  CFStringAppend(theString, @" Rmv");
  if ((a1 & 0x10) == 0)
  {
LABEL_7:
    if ((a1 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }

    if (!Mutable) {
      goto LABEL_30;
    }
    goto LABEL_27;
  }

  a3 = v33;
  if (!Mutable) {
    goto LABEL_30;
  }
LABEL_27:
  id v23 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "Auto join scan found: %@", Mutable message];
  }
  objc_autoreleasePoolPop(v23);
  CFRelease(Mutable);
LABEL_30:
  if (v9)
  {
    if (v10)
    {
      unsigned int v24 = CFDictionaryGetCount(v10);
      id v25 = CFStringCreateMutable(v34, 0LL);
      if (v25)
      {
        id v26 = v25;
        id v27 = 8 * v24;
        __chkstk_darwin();
        id v28 = (char *)&v33 - ((8 * v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v33 = a3;
        uint64_t v34 = v29;
        if (v24) {
          memset((char *)&v33 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL), 170, 8 * v24);
        }
        else {
          id v27 = 0LL;
        }
        bzero(v28, v27);
        CFDictionaryGetKeysAndValues(v10, 0LL, (const void **)v28);
        if (v24 >= 1)
        {
          for (CFIndex i = 0LL; i != v24; ++i)
          {
            Value = CFDictionaryGetValue(*(CFDictionaryRef *)&v28[8 * i], @"CHANNEL");
            if (Value)
            {
              if (i >= v24 - 1) {
                CFStringAppendFormat(v26, 0LL, @"%@", Value);
              }
              else {
                CFStringAppendFormat(v26, 0LL, @"%@, ", Value);
              }
            }
          }
        }

        double v32 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "Auto join scan found %ld hidden networks on channels %@", v9, v26 message];
        }
        objc_autoreleasePoolPop(v32);
        CFRelease(v26);
        a3 = v33;
      }
    }
  }

  if (a3)
  {
    if (*a3) {
      CFRelease(*a3);
    }
    *a3 = v10;
  }

  else if (v10)
  {
    CFRelease(v10);
  }

              id v22 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  v27,  0LL);
              goto LABEL_12;
            }
          }

          else
          {
            uint64_t v20 = 0LL;
          }

          id v27 = 2LL;
          goto LABEL_26;
        }
      }
    }
  }

  id v25 = NSPOSIXErrorDomain;
  id v26 = 22LL;
LABEL_20:
  id v22 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v25,  v26,  0LL);
LABEL_15:
  if ([a3 response])
  {
    unsigned int v24 = (void (**)(id, NSError *, void))[a3 response];
    v24[2](v24, v22, 0LL);
  }

void sub_100027F90(const __CFArray *a1, unsigned int a2, int a3)
{
  int v81 = a3;
  context = objc_autoreleasePoolPush();
  uint64_t v5 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3 message:"Posting metrics for AJ"];
  }
  objc_autoreleasePoolPop(v5);
  int valuePtr = 115;
  id v6 = (const __CFString *)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  id v7 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "External power state is %d", a2);
  }
  objc_autoreleasePoolPop(v7);
  CFArrayRef v8 = sub_10006C77C(a1);
  if (v8)
  {
    char v9 = v8;
    uint64_t v10 = &unk_100219000;
    if (qword_100219860)
    {
      if (*(unsigned __int8 *)(qword_100219860 + 64) == a2)
      {
        unsigned int v11 = objc_autoreleasePoolPush();
        uint64_t v12 = (void *)qword_100219F60;
        if (qword_100219F60)
        {
          uint64_t v67 = (const char *)*(unsigned __int8 *)(qword_100219860 + 64);
          uint64_t v13 = "External power state is same as before %d, bailing out";
          goto LABEL_10;
        }

        goto LABEL_11;
      }

      *(_BYTE *)(qword_100219860 + 64) = a2;
      unsigned int Current = CFAbsoluteTimeGetCurrent();
      if (CFArrayGetCount(v9) >= 1)
      {
        CFIndex v14 = 0LL;
        uint64_t v69 = kWAMessageMetricNameAJPowerMetric;
        BOOL v70 = v6;
        uint64_t v71 = v9;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v9, v14);
          if (ValueAtIndex)
          {
            uint64_t v16 = sub_10003BEDC((uint64_t)ValueAtIndex);
            if (!v16)
            {
              unsigned int v11 = objc_autoreleasePoolPush();
              uint64_t v12 = (void *)qword_100219F60;
              if (!qword_100219F60) {
                goto LABEL_11;
              }
              uint64_t v13 = "Device not present";
              goto LABEL_10;
            }

            uint64_t v17 = v16;
            uint64_t v18 = (const void *)sub_100043E8C(v16);
            uint64_t v19 = sub_100044010(v17, v18, v6);
            if (!v19)
            {
              unsigned int v11 = objc_autoreleasePoolPush();
              uint64_t v12 = (void *)qword_100219F60;
              if (!qword_100219F60) {
                goto LABEL_11;
              }
              uint64_t v13 = "Failed to get property";
LABEL_10:
              objc_msgSend(v12, "WFLog:message:", 3, v13, v67);
              goto LABEL_11;
            }

            uint64_t v20 = v19;
            CFIndex v72 = v14;
            CFIndex Count = CFDictionaryGetCount(v19);
            id v22 = malloc(8 * Count);
            bzero(v22, 8 * Count);
            id v23 = malloc(8 * Count);
            bzero(v23, 8 * Count);
            CFDictionaryGetKeysAndValues(v20, (const void **)v22, (const void **)v23);
            uint64_t v24 = v10[268];
            if (*(_BYTE *)(v24 + 64))
            {
              id v25 = *(const __CFDictionary **)(v24 + 56);
              if (!v25)
              {
                uint64_t v63 = objc_autoreleasePoolPush();
                char v64 = (void *)qword_100219F60;
                if (qword_100219F60)
                {
                  uint64_t v65 = "Inital metrics dictionary not present";
                  goto LABEL_98;
                }

LABEL_99:
                objc_autoreleasePoolPop(v63);
                char v9 = v71;
                if (v22) {
                  goto LABEL_83;
                }
                goto LABEL_84;
              }

              uint64_t v78 = 0LL;
              Value = (const __CFNumber *)CFDictionaryGetValue(v25, @"metricsTotalTime");
              if (Value) {
                CFNumberGetValue(Value, kCFNumberIntType, (char *)&v78 + 4);
              }
              HIDWORD(v7_Block_object_dispose(va, 8) = Current - HIDWORD(v78);
              if (HIDWORD(v78) <= 0x707)
              {
                uint64_t v61 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "System not on puck time is %u s < 30min, not posting",  HIDWORD(v78));
                }
                objc_autoreleasePoolPop(v61);
                unsigned int v62 = *(const void **)(v10[268] + 56LL);
                char v9 = v71;
                if (v62)
                {
                  CFRelease(v62);
                  *(void *)(v10[268] + 56LL) = 0LL;
                }

                if (v22) {
LABEL_83:
                }
                  free(v22);
LABEL_84:
                if (v23) {
                  free(v23);
                }
                CFRelease(v20);
                break;
              }

              id v27 = [[WAMessage alloc] initWithMetricName:v69 options:5];
              if (!v27)
              {
                uint64_t v63 = objc_autoreleasePoolPush();
                char v64 = (void *)qword_100219F60;
                if (qword_100219F60)
                {
                  uint64_t v67 = "WiFiMetricsManagerSubmitWiFiAJPowerMetrics";
                  uint64_t v65 = "%s: null waMsg";
LABEL_98:
                  objc_msgSend(v64, "WFLog:message:", 3, v65, v67);
                }

                goto LABEL_99;
              }

              id v28 = v27;
              double v73 = v20;
              CFNumberRef v29 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)&v78 + 4);
              [v28 addFieldForKey:@"metricsTotalTime" value:v29 options:5];
              if (v29) {
                CFRelease(v29);
              }
              CFNumberRef v30 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v81);
              [v28 addFieldForKey:@"finalChargeLevel" value:v30 options:5];
              if (v30) {
                CFRelease(v30);
              }
              objc_msgSend( v28,  "addFieldForKey:value:options:",  @"initialChargeLevel",  CFDictionaryGetValue(*(CFDictionaryRef *)(v10[268] + 56), @"initialChargeLevel"),  5);
              if (Count >= 1)
              {
                uint64_t v31 = 0LL;
                __int16 v75 = v23;
                do
                {
                  if (!CFStringHasPrefix(*((CFStringRef *)v22 + v31), @"CACHED")
                    && !CFEqual(*((CFTypeRef *)v22 + v31), @"AutoHotspotLPHSPowerStats"))
                  {
                    if (CFEqual(*((CFTypeRef *)v22 + v31), @"AutoJoinPowerDiag"))
                    {
                      double v32 = (const __CFDictionary *)*((void *)v23 + v31);
                      CFIndex v33 = CFDictionaryGetCount(v32);
                      uint64_t v34 = malloc(8 * v33);
                      bzero(v34, 8 * v33);
                      uint64_t v35 = malloc(8 * v33);
                      bzero(v35, 8 * v33);
                      unsigned __int8 v77 = v34;
                      CFDictionaryGetKeysAndValues(v32, (const void **)v34, (const void **)v35);
                      if (v33 >= 1)
                      {
                        uint64_t v36 = (CFTypeRef *)v35;
                        do
                        {
                          uint64_t v78 = 0LL;
                          CFTypeID v37 = CFGetTypeID(*v36);
                          if (v37 == CFNumberGetTypeID())
                          {
                            CFNumberRef v38 = (const __CFNumber *)CFDictionaryGetValue( *(CFDictionaryRef *)(qword_100219860 + 56),  (const void *)*v34);
                            if (v38)
                            {
                              CFNumberRef v39 = v38;
                              CFTypeID v40 = CFGetTypeID(v38);
                              if (v40 == CFNumberGetTypeID()) {
                                CFNumberGetValue(v39, kCFNumberIntType, (char *)&v78 + 4);
                              }
                            }

                            CFNumberGetValue((CFNumberRef)*v36, kCFNumberIntType, &v78);
                            HIDWORD(v7_Block_object_dispose(va, 8) = v78 - HIDWORD(v78);
                            CFNumberRef v41 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)&v78 + 4);
                            [v28 addFieldForKey:*v34 value:v41 options:5];
                            if (v41) {
                              CFRelease(v41);
                            }
                          }

                          ++v34;
                          ++v36;
                          --v33;
                        }

                        while (v33);
                      }

                      free(v77);
                      free(v35);
                      uint64_t v10 = (void *)&unk_100219000;
                      id v23 = v75;
                    }

                    else
                    {
                      uint64_t v78 = 0LL;
                      CFTypeID v42 = CFGetTypeID(*((CFTypeRef *)v23 + v31));
                      if (v42 == CFNumberGetTypeID())
                      {
                        CFNumberRef v43 = (const __CFNumber *)CFDictionaryGetValue( *(CFDictionaryRef *)(v10[268] + 56LL),  *((const void **)v22 + v31));
                        if (v43)
                        {
                          CFNumberRef v44 = v43;
                          CFTypeID v45 = CFGetTypeID(v43);
                          if (v45 == CFNumberGetTypeID()) {
                            CFNumberGetValue(v44, kCFNumberIntType, (char *)&v78 + 4);
                          }
                        }

                        CFNumberGetValue(*((CFNumberRef *)v23 + v31), kCFNumberIntType, &v78);
                        HIDWORD(v7_Block_object_dispose(va, 8) = v78 - HIDWORD(v78);
                        CFNumberRef v46 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (char *)&v78 + 4);
                        [v28 addFieldForKey:*((void *)v22 + v31) value:v46 options:5];
                        if (v46) {
                          CFRelease(v46);
                        }
                      }
                    }
                  }

                  ++v31;
                }

                while (v31 != Count);
              }

              size_t v47 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:3 message:"Posting AJ power metrics\n"];
              }
              objc_autoreleasePoolPop(v47);
              sub_10002891C(v28);
              uint64_t v48 = *(const void **)(v10[268] + 56LL);
              uint64_t v20 = v73;
              if (v48)
              {
                CFRelease(v48);
                *(void *)(v10[268] + 56LL) = 0LL;
              }
            }

            else
            {
              *(void *)(v10[268] + 56LL) = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
              CFNumberRef v49 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &Current);
              CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v10[268] + 56LL), @"metricsTotalTime", v49);
              if (v49) {
                CFRelease(v49);
              }
              CFNumberRef v50 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v81);
              CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v10[268] + 56LL), @"initialChargeLevel", v50);
              if (v50) {
                CFRelease(v50);
              }
              if (Count >= 1)
              {
                uint64_t v51 = 0LL;
                int v74 = v20;
                int v76 = v23;
                do
                {
                  if (!CFStringHasPrefix(*((CFStringRef *)v22 + v51), @"CACHED")
                    && !CFEqual(*((CFTypeRef *)v22 + v51), @"AutoHotspotLPHSPowerStats"))
                  {
                    int v52 = CFEqual(*((CFTypeRef *)v22 + v51), @"AutoJoinPowerDiag");
                    uint64_t v53 = (const __CFDictionary *)*((void *)v23 + v51);
                    if (v52)
                    {
                      CFIndex v54 = CFDictionaryGetCount(*((CFDictionaryRef *)v23 + v51));
                      id v55 = malloc(8 * v54);
                      bzero(v55, 8 * v54);
                      double v56 = malloc(8 * v54);
                      bzero(v56, 8 * v54);
                      CFDictionaryGetKeysAndValues(v53, (const void **)v55, (const void **)v56);
                      uint64_t v10 = &unk_100219000;
                      if (v54 >= 1)
                      {
                        uint64_t v57 = (CFTypeRef *)v56;
                        uint64_t v58 = (const void **)v55;
                        do
                        {
                          CFTypeID v59 = CFGetTypeID(*v57);
                          if (v59 == CFNumberGetTypeID()) {
                            CFDictionaryAddValue(*(CFMutableDictionaryRef *)(qword_100219860 + 56), *v58, *v57);
                          }
                          ++v58;
                          ++v57;
                          --v54;
                        }

                        while (v54);
                      }

                      free(v55);
                      free(v56);
                      uint64_t v20 = v74;
                      id v23 = v76;
                    }

                    else
                    {
                      CFTypeID v60 = CFGetTypeID(*((CFTypeRef *)v23 + v51));
                      uint64_t v10 = &unk_100219000;
                      if (v60 == CFNumberGetTypeID()) {
                        CFDictionaryAddValue( *(CFMutableDictionaryRef *)(qword_100219860 + 56),  *((const void **)v22 + v51),  *((const void **)v23 + v51));
                      }
                    }
                  }

                  ++v51;
                }

                while (v51 != Count);
              }
            }

            CFRelease(v20);
            if (v22) {
              free(v22);
            }
            id v6 = v70;
            char v9 = v71;
            CFIndex v14 = v72;
            if (v23) {
              free(v23);
            }
          }

          ++v14;
        }

        while (v14 < CFArrayGetCount(v9));
      }
    }

    else
    {
      unsigned int v11 = objc_autoreleasePoolPush();
      uint64_t v12 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        uint64_t v13 = "metrics not present";
        goto LABEL_10;
      }

                if ([a2 containsObject:&off_1002049B0]) {
                  objc_msgSend( v9,  "setObject:forKeyedSubscript:",  objc_msgSend(a1, "lastJoinedByUserAt"),  @"lastJoined");
                }
                goto LABEL_104;
              }

void sub_10002891C(void *a1)
{
  if (qword_100219860)
  {
    if (sub_100071B54(*(void *)(qword_100219860 + 16)) != 1)
    {
      if (a1)
      {
        -[WiFiManagerAnalytics submitWiFiAnalyticsMessage:]( +[WiFiManagerAnalytics sharedInstance](&OBJC_CLASS___WiFiManagerAnalytics, "sharedInstance"),  "submitWiFiAnalyticsMessage:",  a1);
      }

      else
      {
        uint64_t v4 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null message",  "__WiFiMetricsManagerSubmitWAMessage");
        }
        objc_autoreleasePoolPop(v4);
      }

      return;
    }

    uint64_t v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Camera is in Foreground",  "__WiFiMetricsManagerSubmitWAMessage");
    }
    objc_autoreleasePoolPop(v2);
  }

  if (a1)
  {
    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: Failed to submit message: %@", "__WiFiMetricsManagerSubmitWAMessage", objc_msgSend(a1, "metricName") message];
    }
    objc_autoreleasePoolPop(v3);
  }

void sub_100028A60(uint64_t a1, int a2, int a3, int a4, int a5, int a6, const void *a7, int a8)
{
  uint64_t v16 = objc_autoreleasePoolPush();
  unsigned int v37 = 0;
  if (!a1 || !qword_100219860)
  {
    uint64_t v35 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null device or metrics",  "WiFiMetricsManagerSubmitWiFiLinkChangeData");
    }
    goto LABEL_48;
  }

  if (sub_100071B54(*(void *)(qword_100219860 + 16)) == 1)
  {
    uint64_t v35 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Camera is in Foreground",  "WiFiMetricsManagerSubmitWiFiLinkChangeData");
    }
    goto LABEL_48;
  }

  uint64_t v17 = malloc(0x430uLL);
  if (!v17)
  {
    uint64_t v35 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null wifiLinkChangeDataMetric",  "WiFiMetricsManagerSubmitWiFiLinkChangeData");
    }
LABEL_48:
    objc_autoreleasePoolPop(v35);
    goto LABEL_41;
  }

  uint64_t v18 = (uint64_t)v17;
  bzero(v17, 0x430uLL);
  *(_BYTE *)(v18 + 844) = a2 != 0;
  *(_BYTE *)(v18 + 845) = a3 != 0;
  *(_DWORD *)(v18 + 84_Block_object_dispose(va, 8) = a4;
  *(_DWORD *)(v18 + 852) = a5;
  *(_DWORD *)(v18 + 856) = a6;
  *(_DWORD *)(v18 + 1064) = a8;
  if (!sub_100028DE0(a1, v18))
  {
    uint64_t v36 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: lqm history preparation failed",  "WiFiMetricsManagerSubmitWiFiLinkChangeData");
    }
LABEL_53:
    objc_autoreleasePoolPop(v36);
    goto LABEL_16;
  }

  uint64_t v19 = (const void *)sub_100040CF8(a1);
  if (sub_1000500D4(a1, v19, &v37))
  {
    *(_DWORD *)(v18 + 884) = 16;
    *(_BYTE *)(v18 + 881) = v37;
  }

  if (!a7)
  {
    if (!a2)
    {
      else {
        double v20 = CFAbsoluteTimeGetCurrent() - *(double *)&qword_100219868;
      }
      *(double *)(v18 + 952) = v20;
      size_t v21 = sub_100052664(a1);
      if (v21)
      {
        id v22 = v21;
        sub_100029024(a1, v18, v21);
        sub_10002A228(a1, v22, v18);
        CFRelease(v22);
      }

      goto LABEL_16;
    }

    uint64_t v36 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: QFALOG Link up event but there is no valid network. Nothing to submit here.",  "WiFiMetricsManagerSubmitWiFiLinkChangeData");
    }
    goto LABEL_53;
  }

  qword_100219868 = CFAbsoluteTimeGetCurrent();
  *(void *)(v18 + 952) = 0LL;
  sub_100029024(a1, v18, a7);
  sub_10002A228(a1, a7, v18);
LABEL_16:
  id v23 = *(const void **)(v18 + 960);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(v18 + 960) = 0LL;
  }

  uint64_t v24 = *(const void **)(v18 + 968);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(v18 + 96_Block_object_dispose(va, 8) = 0LL;
  }

  id v25 = *(const void **)(v18 + 976);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(v18 + 976) = 0LL;
  }

  id v26 = *(const void **)(v18 + 984);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(v18 + 984) = 0LL;
  }

  id v27 = *(const void **)(v18 + 992);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(v18 + 992) = 0LL;
  }

  id v28 = *(const void **)(v18 + 1000);
  if (v28)
  {
    CFRelease(v28);
    *(void *)(v18 + 1000) = 0LL;
  }

  CFNumberRef v29 = *(const void **)(v18 + 1008);
  if (v29)
  {
    CFRelease(v29);
    *(void *)(v18 + 100_Block_object_dispose(va, 8) = 0LL;
  }

  CFNumberRef v30 = *(const void **)(v18 + 1016);
  if (v30)
  {
    CFRelease(v30);
    *(void *)(v18 + 1016) = 0LL;
  }

  uint64_t v31 = *(const void **)(v18 + 1024);
  if (v31)
  {
    CFRelease(v31);
    *(void *)(v18 + 1024) = 0LL;
  }

  double v32 = *(const void **)(v18 + 1032);
  if (v32)
  {
    CFRelease(v32);
    *(void *)(v18 + 1032) = 0LL;
  }

  CFIndex v33 = *(const void **)(v18 + 1040);
  if (v33)
  {
    CFRelease(v33);
    *(void *)(v18 + 1040) = 0LL;
  }

  uint64_t v34 = *(const void **)(v18 + 1048);
  if (v34) {
    CFRelease(v34);
  }
  free((void *)v18);
LABEL_41:
  objc_autoreleasePoolPop(v16);
}

uint64_t sub_100028DE0(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    id v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: device is NULL",  "__WiFiMetricsManagerPrepareLqmHistoryArray");
    }
    goto LABEL_23;
  }

  uint64_t v10 = 0LL;
  memset(v9, 0, sizeof(v9));
  if (!sub_1000499CC(a1, (uint64_t)v9, 0))
  {
    id v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: cca history preparation failed",  "__WiFiMetricsManagerPrepareLqmHistoryArray");
    }
    goto LABEL_23;
  }

  uint64_t v8 = 0LL;
  memset(v7, 0, sizeof(v7));
  if (!sub_1000499CC(a1, (uint64_t)v7, 1))
  {
    id v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: rssi history preparation failed",  "__WiFiMetricsManagerPrepareLqmHistoryArray");
    }
    goto LABEL_23;
  }

  for (uint64_t i = 0LL; i != 120; i += 4LL)
    *(_DWORD *)(a2 + i) = *(_DWORD *)((char *)v7 + i) | (*(_DWORD *)((char *)v9 + i) << 24);
  if (!sub_100049B28(a1, a2))
  {
    id v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: tx rx history preparation failed",  "__WiFiMetricsManagerPrepareLqmHistoryArray");
    }
    goto LABEL_23;
  }

  if (!sub_100049CAC(a1, a2))
  {
    id v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Encoding PerCore Rssi failed",  "__WiFiMetricsManagerPrepareLqmHistoryArray");
    }
    goto LABEL_23;
  }

  if (!sub_100049E04(a1, a2))
  {
    id v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: GateWay ARP history preparation failed",  "__WiFiMetricsManagerPrepareLqmHistoryArray");
    }
LABEL_23:
    objc_autoreleasePoolPop(v6);
    return 0LL;
  }

  return 1LL;
}

void sub_100029024(uint64_t a1, uint64_t a2, const void *a3)
{
  id v6 = (const __CFString *)sub_1000951FC((uint64_t)a3, @"BSSID");
  id v7 = (void *)sub_10003AFF4((uint64_t)"__WiFiMetricsManagerCopyLinkChangeNetworkParams");
  if (!qword_100219860)
  {
    __int128 v136 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null metrics",  "__WiFiMetricsManagerCopyLinkChangeNetworkParams");
    }
    goto LABEL_234;
  }

  if (!v6)
  {
    __int128 v136 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null networkBSSID",  "__WiFiMetricsManagerCopyLinkChangeNetworkParams");
    }
LABEL_234:
    objc_autoreleasePoolPop(v136);
    goto LABEL_226;
  }

  uint64_t v8 = (const __CFDictionary *)sub_1000951FC((uint64_t)a3, @"WPS_PROB_RESP_IE");
  unsigned int v139 = (const __CFDictionary *)sub_1000951FC((uint64_t)a3, @"APPLE_IE");
  uint64_t v138 = (const __CFDictionary *)sub_1000951FC((uint64_t)a3, @"80211D_IE");
  if (v8)
  {
    char v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s QFA WPS PROBE RESPONSE IE found in link change metric",  "__WiFiMetricsManagerCopyLinkChangeNetworkParams");
    }
LABEL_6:
    objc_autoreleasePoolPop(v9);
    goto LABEL_14;
  }

  uint64_t v10 = (const __CFArray *)sub_100063560(*(void *)(qword_100219860 + 16));
  if (!v10) {
    goto LABEL_13;
  }
  unsigned int v11 = v10;
  uint64_t Count = CFArrayGetCount(v10);
  if (Count < 1) {
    goto LABEL_13;
  }
  v145.length = Count;
  v145.id location = 0LL;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v11, v145, a3);
  if ((FirstIndexOfValue & 0x8000000000000000LL) == 0
    && (ValueAtIndex = CFArrayGetValueAtIndex(v11, FirstIndexOfValue)) != 0LL
    && (uint64_t v15 = (uint64_t)ValueAtIndex,
        (uint64_t v16 = (const __CFString *)sub_1000951FC((uint64_t)ValueAtIndex, @"BSSID")) != 0LL)
    && CFStringCompare(v6, v16, 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v8 = (const __CFDictionary *)sub_1000951FC(v15, @"WPS_PROB_RESP_IE");
    if (v8)
    {
      char v9 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s QFA WPS PROBE RESPONSE IE found in Known networks cache",  "__WiFiMetricsManagerCopyLinkChangeNetworkParams");
      }
      goto LABEL_6;
    }
  }

  else
  {
LABEL_13:
    uint64_t v8 = 0LL;
  }

LABEL_111:
  uint64_t v53 = (const __CFDictionary *)sub_1000951FC((uint64_t)a3, @"HT_CAPS_IE");
  if (v53)
  {
    CFIndex v54 = v53;
    id v55 = (const __CFNumber *)CFDictionaryGetValue(v53, @"CAPS");
    if (v55) {
      CFNumberGetValue(v55, kCFNumberSInt16Type, (void *)(a2 + 912));
    }
    double v56 = (const __CFNumber *)CFDictionaryGetValue(v54, @"AMPDU_PARAMS");
    if (v56) {
      CFNumberGetValue(v56, kCFNumberSInt8Type, (void *)(a2 + 921));
    }
    uint64_t v57 = (const __CFNumber *)CFDictionaryGetValue(v54, @"TXBF_CAPS");
    if (v57) {
      CFNumberGetValue(v57, kCFNumberSInt32Type, (void *)(a2 + 916));
    }
    uint64_t v58 = (const __CFNumber *)CFDictionaryGetValue(v54, @"EXT_CAPS");
    if (v58) {
      CFNumberGetValue(v58, kCFNumberSInt16Type, (void *)(a2 + 914));
    }
    CFTypeID v59 = (const __CFNumber *)CFDictionaryGetValue(v54, @"ASEL_CAPS");
    if (v59) {
      CFNumberGetValue(v59, kCFNumberSInt8Type, (void *)(a2 + 920));
    }
    CFTypeID v60 = (const __CFData *)CFDictionaryGetValue(v54, @"MCS_SET");
    if (v60)
    {
      v147.id location = 0LL;
      v147.length = 16LL;
      CFDataGetBytes(v60, v147, (UInt8 *)(a2 + 922));
    }
  }

  if (!v8) {
    goto LABEL_182;
  }
  uint64_t v61 = (const __CFDictionary *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_PRIMARY_DEV_TYPE");
  valuePtr[0] = -21846;
  unsigned int v62 = (const __CFNumber *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_CFG_METHODS");
  if (v62 && (uint64_t v63 = v62, v64 = CFNumberGetTypeID(), v64 == CFGetTypeID(v63)))
  {
    CFNumberGetValue(v63, kCFNumberSInt16Type, valuePtr);
    CFStringRef v65 = CFStringCreateWithFormat(0LL, 0LL, @"%d", valuePtr[0]);
  }

  else
  {
    uint64_t v66 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for wpsConfigMethods. Not a CFNumber or NULL",  "__WiFiMetricsManagerCopyLinkChangeNetworkParams");
    }
    objc_autoreleasePoolPop(v66);
    CFStringRef v65 = 0LL;
  }

  *(void *)(a2 + 104_Block_object_dispose(va, 8) = v65;
  uint64_t v67 = (const __CFString *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_MODEL_NAME");
  if (v67 && (uint64_t v68 = v67, v69 = CFStringGetTypeID(), v69 == CFGetTypeID(v68)))
  {
    CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v68);
  }

  else
  {
    uint64_t v71 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for wpsModelName. Not a CFString or NULL",  "__WiFiMetricsManagerCopyLinkChangeNetworkParams");
    }
    objc_autoreleasePoolPop(v71);
    CFStringRef Copy = 0LL;
  }

  *(void *)(a2 + 1000) = Copy;
  CFIndex v72 = (const __CFString *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_MODEL_NUM");
  if (v72 && (double v73 = v72, v74 = CFStringGetTypeID(), v74 == CFGetTypeID(v73)))
  {
    CFStringRef v75 = CFStringCreateCopy(kCFAllocatorDefault, v73);
  }

  else
  {
    int v76 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for wpsModelNumber. Not a CFString or NULL",  "__WiFiMetricsManagerCopyLinkChangeNetworkParams");
    }
    objc_autoreleasePoolPop(v76);
    CFStringRef v75 = 0LL;
  }

  *(void *)(a2 + 100_Block_object_dispose(va, 8) = v75;
  unsigned __int8 v77 = (const __CFString *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_MANUFACTURER");
  if (v77 && (uint64_t v78 = v77, v79 = CFStringGetTypeID(), v79 == CFGetTypeID(v78)))
  {
    CFStringRef v80 = CFStringCreateCopy(kCFAllocatorDefault, v78);
  }

  else
  {
    int v81 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for wpsManufacturerElement. Not a CFString or NULL",  "__WiFiMetricsManagerCopyLinkChangeNetworkParams");
    }
    objc_autoreleasePoolPop(v81);
    CFStringRef v80 = 0LL;
  }

  *(void *)(a2 + 992) = v80;
  int v82 = (const __CFString *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_DEV_NAME");
  if (v82 && (int v83 = v82, v84 = CFStringGetTypeID(), v84 == CFGetTypeID(v83)))
  {
    CFStringRef v85 = CFStringCreateCopy(kCFAllocatorDefault, v83);
  }

  else
  {
    int v86 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for wpsDeviceNameElement. Not a CFString or NULL",  "__WiFiMetricsManagerCopyLinkChangeNetworkParams");
    }
    objc_autoreleasePoolPop(v86);
    CFStringRef v85 = 0LL;
  }

  *(void *)(a2 + 1032) = v85;
  float v87 = CFDictionaryGetValue(v8, @"IE_KEY_WPS_DEV_NAME_DATA");
  if (!v87 || (v88 = v87, CFTypeID v89 = CFDataGetTypeID(), v89 != CFGetTypeID(v88)))
  {
    BOOL v94 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: wpsDeviceNameData value is NULL or bad type for wpsDeviceNameData. Not a CFDataType ",  "__WiFiMetricsManagerCopyLinkChangeNetworkParams");
    }
    objc_autoreleasePoolPop(v94);
    *(void *)(a2 + 1040) = 0LL;
    if (!v61) {
      goto LABEL_175;
    }
    goto LABEL_162;
  }

  CFIndex Length = CFDataGetLength((CFDataRef)v88);
  uint64_t v91 = (UInt8 *)malloc(Length);
  v148.id location = 0LL;
  v148.length = Length;
  CFDataGetBytes((CFDataRef)v88, v148, v91);
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  *(void *)(a2 + 1040) = CFStringCreateWithBytes(kCFAllocatorDefault, v91, Length, SystemEncoding, 0);
  int v93 = v91;
  CFNumberRef v29 = v138;
  free(v93);
  if (v61)
  {
LABEL_162:
    unsigned __int16 v143 = -21846;
    unsigned __int16 v142 = -21846;
    uint64_t v95 = (const __CFNumber *)CFDictionaryGetValue(v61, @"WPS_DEV_TYPE_CAT");
    if (v95 && (int v96 = v95, v97 = CFNumberGetTypeID(), v97 == CFGetTypeID(v96)))
    {
      CFNumberGetValue(v96, kCFNumberSInt16Type, &v143);
      CFStringRef v98 = CFStringCreateWithFormat(0LL, 0LL, @"%d", v143);
    }

    else
    {
      uint64_t v99 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for wpsPrimaryDeviceTypeCategory. Not a CFNumberType or NULL",  "__WiFiMetricsManagerCopyLinkChangeNetworkParams");
      }
      objc_autoreleasePoolPop(v99);
      CFStringRef v98 = 0LL;
    }

    *(void *)(a2 + 1016) = v98;
    double v100 = (const __CFNumber *)CFDictionaryGetValue(v61, @"WPS_DEV_TYPE_SUB_CAT");
    if (v100 && (double v101 = v100, v102 = CFNumberGetTypeID(), v102 == CFGetTypeID(v101)))
    {
      CFNumberGetValue(v101, kCFNumberSInt16Type, &v142);
      CFStringRef v103 = CFStringCreateWithFormat(0LL, 0LL, @"%d", v142);
    }

    else
    {
      v104 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for wpsPrimaryDeviceTypeSubCategory. Not a CFNumberType or NULL",  "__WiFiMetricsManagerCopyLinkChangeNetworkParams");
      }
      objc_autoreleasePoolPop(v104);
      CFStringRef v103 = 0LL;
    }

    *(void *)(a2 + 1024) = v103;
  }

  int v81 = (void (*)(uint64_t, const void *, void *, const void *, uint64_t, void))*((void *)a6 + 1);
  if (v81) {
    v81(v11, a2, a3, a4, a5, *((void *)a6 + 2));
  }
  if ((_DWORD)a5 && *(_DWORD *)(v11 + 3272) != 14)
  {
    *(_DWORD *)(v11 + 192) = 7;
    if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
    {
      if (*((_BYTE *)a6 + 40) == 1) {
        int v82 = 59LL;
      }
      else {
        int v82 = 3LL;
      }
      sub_1000F5F98(v11, v82);
    }

    else
    {
      objc_msgSend( objc_msgSend(p_superclass + 89, "sharedXPCManager"),  "autoJoinStartedWithTrigger:interfaceName:",  3,  a2);
      sub_1000D0A5C(v11, 2LL, "__WiFiDeviceManagerClientAssociateCallback");
    }
  }

  sub_1000FFC68(v11);
  int v83 = (const void *)*((void *)a6 + 3);
  if (v83)
  {
    CFRelease(v83);
    *((void *)a6 + 3) = 0LL;
  }

  free(a6);
  objc_autoreleasePoolPop(context);
}

LABEL_175:
  LOBYTE(v143) = -86;
  v105 = (const __CFNumber *)CFDictionaryGetValue(v8, @"IE_KEY_WPS_RESP_TYPE");
  if (v105 && (int v106 = v105, v107 = CFNumberGetTypeID(), v107 == CFGetTypeID(v106)))
  {
    CFNumberGetValue(v106, kCFNumberSInt8Type, &v143);
    CFStringRef v108 = CFStringCreateWithFormat(0LL, 0LL, @"%d", v143);
  }

  else
  {
    BOOL v109 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for wpsResponseType. Not a CFNumberType or NULL",  "__WiFiMetricsManagerCopyLinkChangeNetworkParams");
    }
    objc_autoreleasePoolPop(v109);
    CFStringRef v108 = 0LL;
  }

  *(void *)(a2 + 984) = v108;
LABEL_182:
  if (v139)
  {
    LOBYTE(valuePtr[0]) = -86;
    unsigned int v110 = (const __CFNumber *)CFDictionaryGetValue(v139, @"APPLE_IE_PRODUCT_ID");
    if (v110 && (v111 = v110, CFTypeID v112 = CFNumberGetTypeID(), v112 == CFGetTypeID(v111)))
    {
      CFNumberGetValue(v111, kCFNumberSInt8Type, valuePtr);
      CFStringRef v113 = CFStringCreateWithFormat(0LL, 0LL, @"%d", LOBYTE(valuePtr[0]));
    }

    else
    {
      BOOL v114 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for wpsResponseType. Not a CFNumberType or NULL",  "__WiFiMetricsManagerCopyLinkChangeNetworkParams");
      }
      objc_autoreleasePoolPop(v114);
      CFStringRef v113 = 0LL;
    }

    *(void *)(a2 + 100_Block_object_dispose(va, 8) = v113;
  }

  if (v29)
  {
    BOOL v115 = (const __CFString *)CFDictionaryGetValue(v29, @"IE_KEY_80211D_COUNTRY_CODE");
    if (v115 && (BOOL v116 = v115, v117 = CFStringGetTypeID(), v117 == CFGetTypeID(v116)))
    {
      CFStringRef v118 = CFStringCreateCopy(kCFAllocatorDefault, v116);
    }

    else
    {
      uint64_t v119 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bad type for countryCode. Not a CFString or NULL",  "__WiFiMetricsManagerCopyLinkChangeNetworkParams");
      }
      objc_autoreleasePoolPop(v119);
      CFStringRef v118 = 0LL;
    }

    *(void *)(a2 + 976) = v118;
  }

  char v120 = (const __CFDictionary *)sub_1000951FC((uint64_t)a3, @"VHT_CAPS_IE");
  if (v120)
  {
    char v121 = v120;
    int v122 = (const __CFNumber *)CFDictionaryGetValue(v120, @"VHT_CAPS");
    if (v122) {
      CFNumberGetValue(v122, kCFNumberSInt32Type, (void *)(a2 + 940));
    }
    int v123 = (const __CFData *)CFDictionaryGetValue(v121, @"VHT_SUPPORTED_MCS_SET");
    if (v123)
    {
      v149.id location = 0LL;
      v149.length = 8LL;
      CFDataGetBytes(v123, v149, (UInt8 *)(a2 + 944));
    }
  }

  int v124 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: OUI:%02x:%02x:%02x Channel:%d(%dMHz) Flags:0x%x PhyMode:0x%x Security:0x%x WPA:[Prot:0x%x McastCipher:0x%x Uca stCipher:0x%x AKM:0x%x Caps:0x%x] HT:[Info:0x%x AMPDU:0x%x TXBF:0x%x Ext:0x%x ASEL:0x%x] VHT:[Info:0x%x]",  "__WiFiMetricsManagerCopyLinkChangeNetworkParams",  *(unsigned __int8 *)(a2 + 888),  *(unsigned __int8 *)(a2 + 889),  *(unsigned __int8 *)(a2 + 890),  *(unsigned int *)(a2 + 864),  *(unsigned int *)(a2 + 872),  *(unsigned int *)(a2 + 884),  *(unsigned int *)(a2 + 876),  *(unsigned __int8 *)(a2 + 892),  *(unsigned __int16 *)(a2 + 894),  *(unsigned __int16 *)(a2 + 896),  *(unsigned __int16 *)(a2 + 898),  *(unsigned int *)(a2 + 900),  *(unsigned int *)(a2 + 904),  *(unsigned __int16 *)(a2 + 912),  *(unsigned __int8 *)(a2 + 921),  *(unsigned int *)(a2 + 916),  *(unsigned __int16 *)(a2 + 914),  *(unsigned __int8 *)(a2 + 920),  *(unsigned int *)(a2 + 940));
  }
  objc_autoreleasePoolPop(v124);
  int v125 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: QFALOG Metrics in link change metric: Metric Container has: Locale: %@ LocaleSource: %@ CountryCode: %@ wpsDev iceNameElement: %@ wpsManufacturerElement: %@ wpsModelName: %@ wpsModelNumber: %@ ", "__WiFiMetricsManagerCopyLinkChangeNetworkParams", *(void *)(a2 + 960), *(void *)(a2 + 968), *(void *)(a2 + 976), *(void *)(a2 + 1032), *(void *)(a2 + 992), *(void *)(a2 + 1000), *(void *)(a2 + 1008) message];
  }
  objc_autoreleasePoolPop(v125);
  int v126 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  int v127 = v126;
  uint64_t v128 = *(const void **)(a2 + 992);
  if (v128) {
    CFDictionaryAddValue(v126, @"ManufacturerElement", v128);
  }
  unsigned int v129 = *(const void **)(a2 + 1000);
  if (v129) {
    CFDictionaryAddValue(v127, @"ModelName", v129);
  }
  uint64_t v130 = *(const void **)(a2 + 1008);
  if (v130) {
    CFDictionaryAddValue(v127, @"ModelNumber", v130);
  }
  uint64_t v131 = *(const void **)(a2 + 1032);
  if (v131) {
    CFDictionaryAddValue(v127, @"DeviceNameElement", v131);
  }
  unsigned int v132 = *(const void **)(a2 + 1040);
  if (v132) {
    CFDictionaryAddValue(v127, @"DeviceNameData", v132);
  }
  CFIndex v133 = CFDictionaryGetCount(v127);
  if (v137 && v133)
  {
    int v134 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: updating AccessPointInfo: %@", "__WiFiMetricsManagerCopyLinkChangeNetworkParams", v127 message];
    }
    objc_autoreleasePoolPop(v134);
    sub_100054CA4(v137, v127);
  }

  unint64_t v140 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v141 = 0xAAAAAAAAAAAAAAAALL;
  sub_100096AE4((uint64_t)a3, &v141, &v140);
  *(_DWORD *)(a2 + 1056) = v141;
  *(_DWORD *)(a2 + 1060) = v140;
  uint64_t v135 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: minSupportDataRate %d, maxSupportDataRate %d",  "__WiFiMetricsManagerCopyLinkChangeNetworkParams",  *(unsigned int *)(a2 + 1056),  *(unsigned int *)(a2 + 1060));
  }
  objc_autoreleasePoolPop(v135);
  if (v127) {
    CFRelease(v127);
  }
LABEL_226:
}

void sub_10002A228(uint64_t a1, const void *a2, uint64_t a3)
{
  id v6 = objc_autoreleasePoolPush();
  if (!a1)
  {
    double v20 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null device",  "__WiFiMetricsManagerWAMessageUpdateDBWithLinkChange");
    }
    goto LABEL_53;
  }

  if (!a3)
  {
    double v20 = objc_autoreleasePoolPush();
    size_t v21 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      id v22 = "%s: wifiLinkChangeDataMetric null";
LABEL_52:
      objc_msgSend(v21, "WFLog:message:", 4, v22, "__WiFiMetricsManagerWAMessageUpdateDBWithLinkChange");
    }

LABEL_53:
    objc_autoreleasePoolPop(v20);
    goto LABEL_45;
  }

  id v7 = objc_alloc(&OBJC_CLASS___WAMessage);
  id v8 = [v7 initWithMetricName:kWAMessageMetricNameLinkChange options:6];
  if (!v8)
  {
    double v20 = objc_autoreleasePoolPush();
    size_t v21 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      id v22 = "%s: Failed to alloc WAMessage for LinkChange";
      goto LABEL_52;
    }

    goto LABEL_53;
  }

  char v9 = v8;
  objc_msgSend( v8,  "addFieldForKey:value:options:",  kWAMessageKeyIsLinkUp,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a3 + 844)),  7);
  objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyIsInVoluntary,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a3 + 845)),  7);
  objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyReason,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a3 + 848)),  7);
  objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeySubReason,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a3 + 852)),  7);
  objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyCachedRSSI,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a3 + 856)),  7);
  objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyNetworkAuthFlags,  +[NSNumber numberWithUnsignedChar:]( NSNumber,  "numberWithUnsignedChar:",  *(unsigned __int8 *)(a3 + 892)),  7);
  if (!*(_BYTE *)(a3 + 844))
  {
    sub_100039CA8(v9, a1, 1, a3);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyChannelWidth,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a3 + 872)),  7);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyPhyMode,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a3 + 876)),  7);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyReserved,  +[NSNumber numberWithUnsignedChar:]( NSNumber,  "numberWithUnsignedChar:",  *(unsigned __int8 *)(a3 + 880)),  7);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyAwdlState,  +[NSNumber numberWithUnsignedChar:]( NSNumber,  "numberWithUnsignedChar:",  *(unsigned __int8 *)(a3 + 881)),  7);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyNetworkFlags,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a3 + 884)),  7);
    sub_100039B54(v9, kWAMessageKeyOUI, a3 + 888, 3u, 1);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyWPAProtocol,  +[NSNumber numberWithUnsignedShort:]( NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a3 + 894)),  7);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyMCastCipher,  +[NSNumber numberWithUnsignedShort:]( NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a3 + 896)),  7);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyUCastCiphers,  +[NSNumber numberWithUnsignedShort:]( NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a3 + 898)),  7);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyAKMSuites,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a3 + 900)),  7);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyCapabilities,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a3 + 904)),  7);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyEnhancedSecurityType,  +[NSNumber numberWithUnsignedShort:]( NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a3 + 908)),  7);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyHTInfo,  +[NSNumber numberWithUnsignedShort:]( NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a3 + 912)),  7);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyHTCapExt,  +[NSNumber numberWithUnsignedShort:]( NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a3 + 914)),  7);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyHTCapTxBF,  +[NSNumber numberWithUnsignedShort:]( NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a3 + 916)),  7);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyHTCapASel,  +[NSNumber numberWithUnsignedChar:]( NSNumber,  "numberWithUnsignedChar:",  *(unsigned __int8 *)(a3 + 920)),  7);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyAMPDUParams,  +[NSNumber numberWithUnsignedChar:]( NSNumber,  "numberWithUnsignedChar:",  *(unsigned __int8 *)(a3 + 921)),  7);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyVHTInfo,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a3 + 940)),  7);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyAssociationDuration,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a3 + 952)),  7);
    if (*(void *)(a3 + 960)) {
      objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyLocale,  +[NSString stringWithString:](NSString, "stringWithString:"),  7);
    }
    if (*(void *)(a3 + 968)) {
      objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyLocaleSource,  +[NSString stringWithString:](NSString, "stringWithString:"),  7);
    }
    if (*(void *)(a3 + 976)) {
      objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyCountryCode,  +[NSString stringWithString:](NSString, "stringWithString:"),  7);
    }
    if (*(void *)(a3 + 984)) {
      objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyWPSResponseType,  +[NSString stringWithString:](NSString, "stringWithString:"),  7);
    }
    if (*(void *)(a3 + 992)) {
      objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyWPSMfgElement,  +[NSString stringWithString:](NSString, "stringWithString:"),  7);
    }
    if (*(void *)(a3 + 1000)) {
      objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyWPSModelName,  +[NSString stringWithString:](NSString, "stringWithString:"),  7);
    }
    if (*(void *)(a3 + 1008)) {
      objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyWPSModelNum,  +[NSString stringWithString:](NSString, "stringWithString:"),  7);
    }
    if (*(void *)(a3 + 1016)) {
      objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyWPSPrimaryDeviceTypeCategory,  +[NSString stringWithString:](NSString, "stringWithString:"),  7);
    }
    if (*(void *)(a3 + 1024)) {
      objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyWPSPrimaryDeviceTypeSubCategory,  +[NSString stringWithString:](NSString, "stringWithString:"),  7);
    }
    if (*(void *)(a3 + 1032)) {
      objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyWPSPrimaryDeviceNameElement,  +[NSString stringWithString:](NSString, "stringWithString:"),  7);
    }
    if (*(void *)(a3 + 1040)) {
      objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyWPSPrimaryDeviceNameData,  +[NSString stringWithString:](NSString, "stringWithString:"),  7);
    }
    if (*(void *)(a3 + 1048)) {
      objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyWPSPrimaryConfigMethods,  +[NSString stringWithString:](NSString, "stringWithString:"),  7);
    }
  }

  uint64_t v10 = sub_100095BC8(a2);
  unsigned int v11 = sub_1000951FC((uint64_t)a2, @"BSSID");
  if (v10) {
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeySSID,  +[NSString stringWithString:](NSString, "stringWithString:", v10),  6);
  }
  if (v11)
  {
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyBSSID,  +[NSString stringWithString:](NSString, "stringWithString:", v11),  6);
    id v12 = +[WiFiUsageAccessPointProfile profileForBSSID:]( &OBJC_CLASS___WiFiUsageAccessPointProfile,  "profileForBSSID:",  v11);
    if (v12) {
      [v9 addFieldForKey:kWAMessageKeyApProfile value:v12 options:6];
    }
  }

  objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyChannel,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a3 + 864)),  7);
  objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyChannelFlags,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a3 + 868)),  7);
  if (*(_BYTE *)(a3 + 844))
  {
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyNetworkUsageRank,  +[NSNumber numberWithUnsignedShort:]( NSNumber,  "numberWithUnsignedShort:",  sub_10009F85C((uint64_t)a2)),  6);
    uint64_t v13 = kWAMessageKeyNOIHomeType;
    unsigned int v14 = sub_100096670((uint64_t)a2);
    if (v14 >= 3) {
      uint64_t v15 = 3LL;
    }
    else {
      uint64_t v15 = v14;
    }
    objc_msgSend( v9,  "addFieldForKey:value:options:",  v13,  +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v15),  6);
    uint64_t v16 = kWAMessageKeyNOIWorkType;
    unsigned int v17 = sub_10009F9B8((uint64_t)a2);
    if (v17 >= 3) {
      uint64_t v18 = 3LL;
    }
    else {
      uint64_t v18 = v17;
    }
    objc_msgSend( v9,  "addFieldForKey:value:options:",  v16,  +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v18),  6);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyLOIType,  +[NSNumber numberWithUnsignedShort:]( NSNumber,  "numberWithUnsignedShort:",  (unsigned __int16)sub_10009FDC8((uint64_t)a2)),  6);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyMinSupportDataRate,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a3 + 1056)),  7);
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyMaxSupportDataRate,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a3 + 1060)),  7);
  }

  unsigned int v24 = -1431655766;
  uint64_t v23 = 0LL;
  if (!sub_10007F570(*(void *)(qword_100219860 + 16), &v24, &v23)) {
    objc_msgSend( v9,  "addFieldForKey:value:options:",  kWAMessageKeyMotionState,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v24),  6);
  }
  uint64_t v19 = kWAMessageKeyMetricDate;
  -[NSDate timeIntervalSinceReferenceDate]( +[NSDate date](&OBJC_CLASS___NSDate, "date"),  "timeIntervalSinceReferenceDate");
  objc_msgSend( v9,  "addFieldForKey:value:options:",  v19,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"),  6);
  sub_10002891C(v9);

LABEL_45:
  objc_autoreleasePoolPop(v6);
}

      ++v24;
    }

    while (v24 < CFArrayGetCount(v23));
    if (!v25)
    {
      if (v23) {
        goto LABEL_56;
      }
      goto LABEL_57;
    }

              uint64_t v2 = 0LL;
            }

            CFNumberRef v43 = 1;
LABEL_55:
            CFNumberRef v44 = CFArrayGetCount(v32);
            if (v43)
            {
              if (++v34 < v44) {
                continue;
              }
            }

            break;
          }
        }
      }

      CFNumberRef v46 = (const __CFArray *)sub_1000951FC((uint64_t)a2, @"RoamingConsortiumOIs");
      if (v46)
      {
        CFIndex v47 = v46;
        uint64_t v48 = CFArrayGetCount(v46);
        if (!(_DWORD)v2 && v48 >= 1)
        {
          int v49 = 0LL;
          while (1)
          {
            uint64_t v2 = (uint64_t)CFArrayGetValueAtIndex(v47, v49);
            if (v2)
            {
              CFNumberRef v50 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:3, "%s:%d found Roaming Consortium OI in accounts %@", "WiFiNetworkIsScannedNetworkMatchingHS20Account", 5671, v2 message];
              }
              objc_autoreleasePoolPop(v50);
              uint64_t v51 = (const __CFArray *)CFDictionaryGetValue(v5, @"ANQP_ROAMING_CONSORTIUM_OI_LIST");
              if (v51)
              {
                int v52 = v51;
                uint64_t v53 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  [(id)qword_100219F60 WFLog:3, "%s:%d found RoamingConsortiumArray count %ld %@", "WiFiNetworkIsScannedNetworkMatchingHS20Account", 5675, CFArrayGetCount(v52), v52 message];
                }
                objc_autoreleasePoolPop(v53);
                if (CFArrayGetCount(v52) >= 1)
                {
                  CFIndex v54 = 0LL;
                  while (1)
                  {
                    id v55 = (const __CFString *)CFArrayGetValueAtIndex(v52, v54);
                    if (v55)
                    {
                      if (CFStringCompare(v55, (CFStringRef)v2, 1uLL) == kCFCompareEqualTo) {
                        break;
                      }
                    }

                    if (++v54 >= CFArrayGetCount(v52)) {
                      goto LABEL_76;
                    }
                  }

                  uint64_t v58 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    [(id)qword_100219F60 WFLog:3, "%s: found response from Roaming Consortium %@, marking %@ provisioned", "WiFiNetworkIsScannedNetworkMatchingHS20Account", v2, sub_100095BC8(a1) message];
                  }
                  objc_autoreleasePoolPop(v58);
                  double v56 = 0;
                  uint64_t v2 = 1LL;
                  goto LABEL_78;
                }
              }

  CFTypeID v40 = 0;
  CFNumberRef v41 = 0;
  a2 = v65;
  if (Mutable)
  {
LABEL_61:
    CFRelease(Mutable);
    CFNumberRef v41 = v40;
  }

  CFTypeID v42 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "MIGRATION:%s: END print request  dictionary %@ and hostAPDict: %@", "WiFiDeviceManagerStartWiFiDirectGroup", v63, v13 message];
  }
  objc_autoreleasePoolPop(v42);
  if ((v41 & 1) != 0)
  {
LABEL_65:
    CFNumberRef v43 = sub_1000454F0(*(void *)(a1 + 64), a2, v13, (uint64_t)sub_1000E5394, (uint64_t)v11);
    if ((_DWORD)v43)
    {
      CFNumberRef v44 = v43;
      uint64_t v68 = 0LL;
      memset(v67, 0, sizeof(v67));
      DWORD1(v67[0]) = 15;
      sub_1000DC1AC(a1, (uint64_t)v67);
      CFIndex v45 = (const void *)v11[3];
      if (v45) {
        CFRelease(v45);
      }
      free(v11);
    }

    else
    {
      CFNumberRef v46 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: aborting ongoing auto-join on network start",  "WiFiDeviceManagerStartWiFiDirectGroup");
      }
      objc_autoreleasePoolPop(v46);
      sub_1000D0428(a1);
      CFNumberRef v44 = 0LL;
    }
  }

  else
  {
    CFTypeID v60 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "MIGRATION:%s: SoftAP failed to start",  "WiFiDeviceManagerStartWiFiDirectGroup");
    }
    objc_autoreleasePoolPop(v60);
    CFNumberRef v44 = 4294963394LL;
  }

  CFRelease(v13);
  return v44;
}

void sub_10002ACEC(uint64_t a1)
{
  if (!a1)
  {
    char v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null device",  "WiFiMetricsManagerCollectAwdlUsageAsync");
    }
    goto LABEL_14;
  }

  if (!qword_100219860 || !*(void *)(qword_100219860 + 16))
  {
    char v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null metrics manager",  "WiFiMetricsManagerCollectAwdlUsageAsync");
    }
    goto LABEL_14;
  }

  uint64_t v1 = a1;
  int64_t v2 = sub_100040CF8(a1);
  if (!v2)
  {
    char v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null awdlIfName",  "WiFiMetricsManagerCollectAwdlUsageAsync");
    }
    goto LABEL_14;
  }

  uint64_t v3 = (const void *)v2;
  if (CFArrayGetCount(*(CFArrayRef *)(qword_100219860 + 32)) < 1)
  {
LABEL_12:
    char v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL interface not found in deviceMetricsArray.",  "WiFiMetricsManagerCollectAwdlUsageAsync");
    }
LABEL_14:
    objc_autoreleasePoolPop(v9);
    return;
  }

  CFIndex v4 = 0LL;
  while (1)
  {
    ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(qword_100219860 + 32), v4);
    if (ValueAtIndex)
    {
      id v6 = ValueAtIndex;
      uint64_t v7 = *ValueAtIndex;
      if (v7)
      {
        if (sub_100040CF8(v7))
        {
          id v8 = (const void *)sub_100040CF8(*v6);
          if (CFEqual(v3, v8)) {
            break;
          }
        }
      }
    }

    if (++v4 >= CFArrayGetCount(*(CFArrayRef *)(qword_100219860 + 32))) {
      goto LABEL_12;
    }
  }

  uint64_t v10 = (void *)v6[30];
  if (v10)
  {
    free(v10);
    v6[30] = 0LL;
  }

  unsigned int v11 = (void *)v6[32];
  if (v11)
  {
    free(v11);
    v6[32] = 0LL;
  }

  id v12 = (void *)v6[39];
  if (v12)
  {
    free(v12);
    v6[39] = 0LL;
  }

  uint64_t v13 = (void *)v6[41];
  if (v13)
  {
    free(v13);
    v6[41] = 0LL;
  }

  unsigned int v14 = (void *)v6[43];
  if (v14)
  {
    free(v14);
    v6[43] = 0LL;
  }

  uint64_t v15 = (void *)v6[47];
  if (v15)
  {
    free(v15);
    v6[47] = 0LL;
  }

  v6[58] = 0LL;
  *((_OWORD *)v6 + 27) = 0u;
  *((_OWORD *)v6 + 2_Block_object_dispose(va, 8) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + memset(buffer, 170, 19) = 0u;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 17) = 0u;
  *((_OWORD *)v6 + 1_Block_object_dispose(va, 8) = 0u;
  *((_OWORD *)v6 + 15) = 0u;
  *((_OWORD *)v6 + 16) = 0u;
  *((_OWORD *)v6 + 13) = 0u;
  *((_OWORD *)v6 + 14) = 0u;
  *((_OWORD *)v6 + 11) = 0u;
  *((_OWORD *)v6 + 12) = 0u;
  uint64_t v16 = (const void *)sub_100040CF8(v1);
  unsigned int v17 = (const __CFDictionary *)sub_10004CBC4(v1, v16);
  if (!v17)
  {
    char v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null stats",  "WiFiMetricsManagerCollectAwdlUsageAsync");
    }
    goto LABEL_14;
  }

  uint64_t v18 = v17;
  Value = (const __CFNumber *)CFDictionaryGetValue(v17, @"AWDL_STATS_FLAGS");
  if (Value) {
    CFNumberGetValue(Value, kCFNumberSInt32Type, v6 + 24);
  }
  double v20 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_RXBYTES");
  if (v20) {
    CFNumberGetValue(v20, kCFNumberSInt32Type, v6 + 25);
  }
  size_t v21 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_TXBYTES");
  if (v21) {
    CFNumberGetValue(v21, kCFNumberSInt32Type, (char *)v6 + 204);
  }
  id v22 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PACKET_FAILURES");
  if (v22) {
    CFNumberGetValue(v22, kCFNumberSInt32Type, (char *)v6 + 196);
  }
  uint64_t v23 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_SELF_INFRA_CHANNEL");
  if (v23) {
    CFNumberGetValue(v23, kCFNumberSInt32Type, v6 + 22);
  }
  unsigned int v24 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_SELF_INFRA_CHANNEL_FLAGS");
  if (v24) {
    CFNumberGetValue(v24, kCFNumberSInt32Type, v6 + 44);
  }
  int v25 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PEER_INFRA_CHANNEL");
  if (v25) {
    CFNumberGetValue(v25, kCFNumberSInt8Type, (char *)v6 + 180);
  }
  int v26 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PEER_INFRA_CHANNEL_FLAGS");
  if (v26) {
    CFNumberGetValue(v26, kCFNumberSInt32Type, (char *)v6 + 356);
  }
  id v27 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_PEERS");
  if (v27) {
    CFNumberGetValue(v27, kCFNumberSInt8Type, (char *)v6 + 181);
  }
  int v28 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_CACHED_PEERS");
  if (v28) {
    CFNumberGetValue(v28, kCFNumberSInt8Type, (char *)v6 + 182);
  }
  CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_CACHED_PEERS_2GHZ");
  if (v29) {
    CFNumberGetValue(v29, kCFNumberSInt8Type, (char *)v6 + 183);
  }
  CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_CACHED_PEERS_5GHZ");
  if (v30) {
    CFNumberGetValue(v30, kCFNumberSInt8Type, v6 + 23);
  }
  BOOL v31 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_CACHED_PEERS_DFS");
  if (v31) {
    CFNumberGetValue(v31, kCFNumberSInt8Type, (char *)v6 + 185);
  }
  uint64_t v32 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_CACHED_PEERS_UNASSOC");
  if (v32) {
    CFNumberGetValue(v32, kCFNumberSInt8Type, (char *)v6 + 186);
  }
  uint64_t v33 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_CACHED_PEERS_DIFF_INFRA");
  if (v33) {
    CFNumberGetValue(v33, kCFNumberSInt8Type, (char *)v6 + 187);
  }
  uint64_t v34 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_CACHED_PEERS_SAME_INFRA");
  if (v34) {
    CFNumberGetValue(v34, kCFNumberSInt8Type, (char *)v6 + 188);
  }
  int v35 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NO_SERVICE_IDLE_TIME");
  if (v35) {
    CFNumberGetValue(v35, kCFNumberSInt32Type, v6 + 28);
  }
  uint64_t v36 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PEER_CHANNEL_STEER_BEFORE");
  if (v36) {
    CFNumberGetValue(v36, kCFNumberSInt32Type, v6 + 49);
  }
  BOOL v37 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PEER_CHANNEL_STEER_AFTER");
  if (v37) {
    CFNumberGetValue(v37, kCFNumberSInt32Type, (char *)v6 + 396);
  }
  unint64_t v38 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_STATS_DWELL_SESSION_COUNT");
  if (v38) {
    CFNumberGetValue(v38, kCFNumberSInt32Type, v6 + 50);
  }
  CFNumberRef v39 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_AWDL_STATS_SERVICE_COUNT");
  if (v39) {
    CFNumberGetValue(v39, kCFNumberSInt32Type, v6 + 31);
  }
  CFTypeID v40 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_TOTAL_DURATION");
  if (v40) {
    CFNumberGetValue(v40, kCFNumberSInt32Type, (char *)v6 + 404);
  }
  CFNumberRef v41 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_STATS_INACTIVITY_DURATION");
  if (v41) {
    CFNumberGetValue(v41, kCFNumberSInt32Type, v6 + 51);
  }
  CFTypeID v42 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_STATS_ACTIVITY_DURATION");
  if (v42) {
    CFNumberGetValue(v42, kCFNumberSInt32Type, (char *)v6 + 412);
  }
  CFNumberRef v43 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PERCENTAGE_INACTIVITY");
  if (v43) {
    CFNumberGetValue(v43, kCFNumberSInt32Type, v6 + 52);
  }
  CFNumberRef v44 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_TIME_TO_SERVICE");
  if (v44) {
    CFNumberGetValue(v44, kCFNumberSInt32Type, (char *)v6 + 420);
  }
  CFIndex v45 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PERCENTAGE_INFRA_IDLE");
  if (v45) {
    CFNumberGetValue(v45, kCFNumberSInt32Type, v6 + 53);
  }
  CFNumberRef v46 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PERCENTAGE_INFRA_REAL");
  if (v46) {
    CFNumberGetValue(v46, kCFNumberSInt32Type, (char *)v6 + 428);
  }
  CFIndex v47 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PERCENTAGE_INFRA_NONREAL");
  if (v47) {
    CFNumberGetValue(v47, kCFNumberSInt32Type, v6 + 54);
  }
  uint64_t v48 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_AIRPLAY_ACTIVE");
  if (v48) {
    *((_BYTE *)v6 + 44_Block_object_dispose(va, 8) = CFBooleanGetValue(v48);
  }
  int v49 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_REMOTECAMERA_ACTIVE");
  if (v49) {
    *((_BYTE *)v6 + 449) = CFBooleanGetValue(v49);
  }
  CFNumberRef v50 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_REMOTESCREEN_ACTIVE");
  if (v50) {
    *((_BYTE *)v6 + 450) = CFBooleanGetValue(v50);
  }
  uint64_t v51 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_SIDECAR_ACTIVE");
  if (v51) {
    *((_BYTE *)v6 + 451) = CFBooleanGetValue(v51);
  }
  int v52 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_TVREMOTECAMERA_ACTIVE");
  if (v52) {
    *((_BYTE *)v6 + 452) = CFBooleanGetValue(v52);
  }
  uint64_t v53 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_UNIVERSALCONTROL_ACTIVE");
  if (v53) {
    *((_BYTE *)v6 + 453) = CFBooleanGetValue(v53);
  }
  CFIndex v54 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_STEREOPAIR_ACTIVE ");
  if (v54) {
    *((_BYTE *)v6 + 454) = CFBooleanGetValue(v54);
  }
  id v55 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_AIRDROP");
  if (v55) {
    *((_BYTE *)v6 + 455) = CFBooleanGetValue(v55);
  }
  double v56 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_AIRPLAY-P2P");
  if (v56) {
    *((_BYTE *)v6 + 456) = CFBooleanGetValue(v56);
  }
  uint64_t v57 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_AIRPLAY");
  if (v57) {
    *((_BYTE *)v6 + 457) = CFBooleanGetValue(v57);
  }
  uint64_t v58 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_ATP");
  if (v58) {
    *((_BYTE *)v6 + 45_Block_object_dispose(va, 8) = CFBooleanGetValue(v58);
  }
  CFTypeID v59 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_COMPANION-LINK");
  if (v59) {
    *((_BYTE *)v6 + 459) = CFBooleanGetValue(v59);
  }
  CFTypeID v60 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_IEEE1588");
  if (v60) {
    *((_BYTE *)v6 + 460) = CFBooleanGetValue(v60);
  }
  uint64_t v61 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_RAOP");
  if (v61) {
    *((_BYTE *)v6 + 461) = CFBooleanGetValue(v61);
  }
  unsigned int v62 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_RDLINK");
  if (v62) {
    *((_BYTE *)v6 + 462) = CFBooleanGetValue(v62);
  }
  uint64_t v63 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_DFSMON");
  if (v63) {
    *((_BYTE *)v6 + 463) = CFBooleanGetValue(v63);
  }
  CFTypeID v64 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_WIFID");
  if (v64) {
    *((_BYTE *)v6 + 464) = CFBooleanGetValue(v64);
  }
  CFStringRef v65 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"AWDL_STATS_TEST");
  if (v65) {
    *((_BYTE *)v6 + 465) = CFBooleanGetValue(v65);
  }
  uint64_t v66 = (const __CFData *)CFDictionaryGetValue(v18, @"AWDL_STATS_OUI");
  if (v66)
  {
    uint64_t v67 = v66;
    v147.length = CFDataGetLength(v66);
    v147.id location = 0LL;
    CFDataGetBytes(v67, v147, (UInt8 *)v6 + 466);
  }

  uint64_t v68 = (const __CFArray *)CFDictionaryGetValue(v18, @"AWDL_STATS_STATES");
  if (v68)
  {
    CFTypeID v69 = v68;
    int64_t Count = CFArrayGetCount(v68);
    int64_t v71 = Count;
    if (Count >= 1)
    {
      CFIndex v72 = calloc(Count, 0x10uLL);
      v6[30] = (uint64_t)v72;
      if (!v72)
      {
        CFRange v145 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null states",  "WiFiMetricsManagerCollectAwdlUsageAsync");
        }
        goto LABEL_242;
      }

      uint64_t v73 = 0LL;
      CFIndex v74 = 0LL;
      do
      {
        CFStringRef v75 = (const __CFDictionary *)CFArrayGetValueAtIndex(v69, v74);
        if (v75)
        {
          int v76 = v75;
          unsigned __int8 v77 = (const __CFNumber *)CFDictionaryGetValue(v75, @"AWDL_STATS_STATE_COUNT");
          if (v77) {
            CFNumberGetValue(v77, kCFNumberSInt32Type, (void *)(v6[30] + v73));
          }
          uint64_t v78 = (const __CFNumber *)CFDictionaryGetValue(v76, @"AWDL_STATS_STATE_DURATION");
          if (v78) {
            CFNumberGetValue(v78, kCFNumberSInt64Type, (void *)(v6[30] + v73 + 8));
          }
        }

        ++v74;
        v73 += 16LL;
      }

      while (v71 != v74);
    }

    *((_DWORD *)v6 + 5_Block_object_dispose(va, 8) = v71;
  }

  CFTypeID v79 = (const __CFArray *)CFDictionaryGetValue(v18, @"AWDL_STATS_SERVICES");
  uint64_t v146 = v1;
  if (v79)
  {
    CFStringRef v80 = v79;
    int64_t v81 = CFArrayGetCount(v79);
    int64_t v82 = v81;
    if (v81 >= 1)
    {
      int v83 = calloc(v81, 0x30uLL);
      v6[32] = (uint64_t)v83;
      if (!v83)
      {
        CFRange v145 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null services",  "WiFiMetricsManagerCollectAwdlUsageAsync");
        }
        goto LABEL_242;
      }

      uint64_t v84 = 0LL;
      CFIndex v85 = 0LL;
      do
      {
        int v86 = (const __CFDictionary *)CFArrayGetValueAtIndex(v80, v85);
        if (v86)
        {
          float v87 = v86;
          uint64_t v88 = (const __CFNumber *)CFDictionaryGetValue(v86, @"AWDL_STATS_SERVICE_DURATION");
          if (v88) {
            CFNumberGetValue(v88, kCFNumberSInt64Type, (void *)(v6[32] + v84 + 8));
          }
          CFTypeID v89 = (const __CFNumber *)CFDictionaryGetValue(v87, @"AWDL_STATS_SERVICE_ID");
          if (v89) {
            CFNumberGetValue(v89, kCFNumberSInt32Type, (void *)(v6[32] + v84 + 4));
          }
          uint64_t v90 = (const __CFNumber *)CFDictionaryGetValue(v87, @"AWDL_STATS_SERVICE_TYPE");
          if (v90) {
            CFNumberGetValue(v90, kCFNumberSInt8Type, (void *)(v6[32] + v84 + 1));
          }
          uint64_t v91 = (const __CFNumber *)CFDictionaryGetValue(v87, @"AWDL_STATS_SERVICE_OPCODE");
          if (v91) {
            CFNumberGetValue(v91, kCFNumberSInt8Type, (void *)(v6[32] + v84));
          }
          uint64_t v92 = (const __CFData *)CFDictionaryGetValue(v87, @"AWDL_STATS_SERVICE_KEY");
          if (v92)
          {
            int v93 = v92;
            CFIndex Length = CFDataGetLength(v92);
            v95.length = Length >= 32 ? 32LL : Length;
            if (v95.length)
            {
              v95.id location = 0LL;
              CFDataGetBytes(v93, v95, (UInt8 *)(v6[32] + v84 + 16));
            }
          }
        }

        ++v85;
        v84 += 48LL;
      }

      while (v82 != v85);
    }

    *((_DWORD *)v6 + 62) = v82;
  }

  int v96 = (const __CFArray *)CFDictionaryGetValue(v18, @"AWDL_STATS_HOPCOUNT");
  if (v96)
  {
    CFTypeID v97 = v96;
    int64_t v98 = CFArrayGetCount(v96);
    int64_t v99 = v98;
    if (v98 >= 1)
    {
      double v100 = calloc(v98, 0x18uLL);
      v6[39] = (uint64_t)v100;
      if (!v100) {
        goto LABEL_234;
      }
      uint64_t v101 = 0LL;
      CFIndex v102 = 0LL;
      do
      {
        CFStringRef v103 = (const __CFDictionary *)CFArrayGetValueAtIndex(v97, v102);
        if (v103)
        {
          v104 = v103;
          v105 = (const __CFNumber *)CFDictionaryGetValue(v103, @"AWDL_STATS_HISTOGRAM_BIN_START");
          if (v105) {
            CFNumberGetValue(v105, kCFNumberDoubleType, (void *)(v6[39] + v101));
          }
          int v106 = (const __CFNumber *)CFDictionaryGetValue(v104, @"AWDL_STATS_HISTOGRAM_BIN_END");
          if (v106) {
            CFNumberGetValue(v106, kCFNumberDoubleType, (void *)(v6[39] + v101 + 8));
          }
          CFTypeID v107 = (const __CFNumber *)CFDictionaryGetValue(v104, @"AWDL_STATS_HISTOGRAM_BIN_VALUE");
          if (v107) {
            CFNumberGetValue(v107, kCFNumberDoubleType, (void *)(v6[39] + v101 + 16));
          }
        }

        ++v102;
        v101 += 24LL;
      }

      while (v99 != v102);
    }

    *((_DWORD *)v6 + 80) = v99;
    uint64_t v1 = v146;
  }

  CFStringRef v108 = (const __CFArray *)CFDictionaryGetValue(v18, @"AWDL_STATS_PARENTRSSI");
  if (!v108) {
    goto LABEL_182;
  }
  BOOL v109 = v108;
  int64_t v110 = CFArrayGetCount(v108);
  int64_t v111 = v110;
  if (v110 >= 1)
  {
    CFTypeID v112 = calloc(v110, 0x18uLL);
    v6[41] = (uint64_t)v112;
    if (v112)
    {
      uint64_t v113 = 0LL;
      CFIndex v114 = 0LL;
      do
      {
        BOOL v115 = (const __CFDictionary *)CFArrayGetValueAtIndex(v109, v114);
        if (v115)
        {
          BOOL v116 = v115;
          CFTypeID v117 = (const __CFNumber *)CFDictionaryGetValue(v115, @"AWDL_STATS_HISTOGRAM_BIN_START");
          if (v117) {
            CFNumberGetValue(v117, kCFNumberDoubleType, (void *)(v6[41] + v113));
          }
          CFStringRef v118 = (const __CFNumber *)CFDictionaryGetValue(v116, @"AWDL_STATS_HISTOGRAM_BIN_END");
          if (v118) {
            CFNumberGetValue(v118, kCFNumberDoubleType, (void *)(v6[41] + v113 + 8));
          }
          uint64_t v119 = (const __CFNumber *)CFDictionaryGetValue(v116, @"AWDL_STATS_HISTOGRAM_BIN_VALUE");
          if (v119) {
            CFNumberGetValue(v119, kCFNumberDoubleType, (void *)(v6[41] + v113 + 16));
          }
        }

        ++v114;
        v113 += 24LL;
      }

      while (v111 != v114);
      goto LABEL_181;
    }

LABEL_234:
    CFRange v145 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null hop count histogram container",  "WiFiMetricsManagerCollectAwdlUsageAsync");
    }
    goto LABEL_242;
  }

LABEL_181:
  *((_DWORD *)v6 + 84) = v111;
  uint64_t v1 = v146;
LABEL_182:
  char v120 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_SUSPEND_DURATION");
  if (v120) {
    CFNumberGetValue(v120, kCFNumberSInt32Type, v6 + 55);
  }
  char v121 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_SUSPEND_COUNT");
  if (v121) {
    CFNumberGetValue(v121, kCFNumberSInt32Type, (char *)v6 + 364);
  }
  int v122 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_DFSP_CSA_PEER");
  if (v122) {
    CFNumberGetValue(v122, kCFNumberSInt32Type, v6 + 33);
  }
  int v123 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_DFSP_CSA_AP");
  if (v123) {
    CFNumberGetValue(v123, kCFNumberSInt32Type, (char *)v6 + 268);
  }
  int v124 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_DFSP_CSA_SUSPECT");
  if (v124) {
    CFNumberGetValue(v124, kCFNumberSInt32Type, v6 + 34);
  }
  int v125 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_DFSP_CSA_RESUME");
  if (v125) {
    CFNumberGetValue(v125, kCFNumberSInt32Type, (char *)v6 + 276);
  }
  int v126 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_RT_SESSION");
  if (v126) {
    CFNumberGetValue(v126, kCFNumberSInt32Type, v6 + 38);
  }
  int v127 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_DFSPAIRPLAY_CONNECTED");
  if (v127) {
    CFNumberGetValue(v127, kCFNumberSInt32Type, v6 + 35);
  }
  uint64_t v128 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_DFSPAIRPLAY_FAILED");
  if (v128) {
    CFNumberGetValue(v128, kCFNumberSInt32Type, v6 + 35);
  }
  unsigned int v129 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_SYNC_CHANGES");
  if (v129) {
    CFNumberGetValue(v129, kCFNumberSInt64Type, v6 + 36);
  }
  uint64_t v130 = (const __CFNumber *)CFDictionaryGetValue(v18, @"APPLE80211KEY_AWDL_STATS_NUM_INPUT_PKTS_DROPPED");
  if (v130) {
    CFNumberGetValue(v130, kCFNumberSInt32Type, v6 + 37);
  }
  uint64_t v131 = (const __CFNumber *)CFDictionaryGetValue(v18, @"APPLE80211KEY_AWDL_STATS_NUM_PEERS_ZERO_EXT_LEN");
  if (v131) {
    CFNumberGetValue(v131, kCFNumberSInt32Type, (char *)v6 + 300);
  }
  unsigned int v132 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PEER_CHANNEL_STEER_COUNT_2G");
  if (v132) {
    CFNumberGetValue(v132, kCFNumberSInt32Type, v6 + 48);
  }
  CFIndex v133 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_PEER_CHANNEL_STEER_COUNT_5G");
  if (v133) {
    CFNumberGetValue(v133, kCFNumberSInt32Type, (char *)v6 + 388);
  }
  int v134 = (const __CFNumber *)CFDictionaryGetValue(v18, @"AWDL_STATS_NUM_CACHED_PEERS_6GHZ");
  if (v134) {
    CFNumberGetValue(v134, kCFNumberSInt8Type, v6 + 45);
  }
  uint64_t v135 = (const __CFNumber *)CFDictionaryGetValue(v18, @"APPLE80211KEY_AWDL_STATS_SELF_6E_CAPABLE");
  if (v135) {
    CFNumberGetValue(v135, kCFNumberSInt8Type, (char *)v6 + 361);
  }
  __int128 v136 = (const __CFNumber *)CFDictionaryGetValue(v18, @"APPLE80211KEY_AWDL_STATS_PEER_6E_CAP_COUNT");
  if (v136) {
    CFNumberGetValue(v136, kCFNumberSInt8Type, (char *)v6 + 362);
  }
  uint64_t v137 = (const __CFArray *)CFDictionaryGetValue(v18, @"APPLE80211KEY_AWDL_STATS_LTE_RESTRICTED_CHANNELS");
  if (!v137) {
    goto LABEL_224;
  }
  uint64_t v138 = v137;
  int64_t v139 = CFArrayGetCount(v137);
  int64_t v140 = v139;
  if (v139 >= 1)
  {
    unint64_t v141 = calloc(v139, 2uLL);
    v6[47] = (uint64_t)v141;
    if (v141)
    {
      uint64_t v142 = 0LL;
      CFIndex v143 = 0LL;
      do
      {
        id v144 = (const __CFNumber *)CFArrayGetValueAtIndex(v138, v143);
        if (v144) {
          CFNumberGetValue(v144, kCFNumberSInt16Type, (void *)(v6[47] + v142));
        }
        ++v143;
        v142 += 2LL;
      }

      while (v140 != v143);
      goto LABEL_223;
    }

    CFRange v145 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null LTE restricted channels used list",  "WiFiMetricsManagerCollectAwdlUsageAsync");
    }
LABEL_242:
    objc_autoreleasePoolPop(v145);
    goto LABEL_225;
  }

LABEL_223:
  *((_DWORD *)v6 + 92) = v140;
LABEL_224:
  sub_10002BCB8(v1, 0.0, 0.0);
LABEL_225:
  CFRelease(v18);
}

  objc_autoreleasePoolPop(v4);
  return v6;
}

void sub_10002BCB8(uint64_t a1, float64_t a2, float64_t a3)
{
  int64_t v4 = sub_100040CF8(a1);
  if (!a1)
  {
    id v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null device",  "WiFiMetricsManagerProcessAwdlUsageData");
    }
    goto LABEL_15;
  }

  if (!qword_100219860)
  {
    id v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null metrics",  "WiFiMetricsManagerProcessAwdlUsageData");
    }
    goto LABEL_15;
  }

  uint64_t v5 = (const __CFString *)v4;
  if (sub_100071B54(*(void *)(qword_100219860 + 16)) == 1)
  {
    id v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Camera is in Foreground",  "WiFiMetricsManagerProcessAwdlUsageData");
    }
    goto LABEL_15;
  }

  id v6 = *(const __CFArray **)(qword_100219860 + 32);
  if (!v6)
  {
    id v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null deviceMetricsArray !!",  "WiFiMetricsManagerProcessAwdlUsageData");
    }
    goto LABEL_15;
  }

  if (!v5)
  {
    id v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null awdlIfName",  "WiFiMetricsManagerProcessAwdlUsageData");
    }
    goto LABEL_15;
  }

  if (CFArrayGetCount(v6) < 1)
  {
LABEL_13:
    id v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL interface not found in deviceMetricsArray.",  "WiFiMetricsManagerProcessAwdlUsageData");
    }
LABEL_15:
    objc_autoreleasePoolPop(v12);
    return;
  }

  CFIndex v7 = 0LL;
  while (1)
  {
    ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(qword_100219860 + 32), v7);
    if (ValueAtIndex)
    {
      char v9 = ValueAtIndex;
      uint64_t v10 = *ValueAtIndex;
      if (*ValueAtIndex)
      {
        if (sub_100040CF8(*ValueAtIndex))
        {
          unsigned int v11 = (const __CFString *)sub_100040CF8(v10);
          if (CFStringCompare(v5, v11, 0LL) == kCFCompareEqualTo) {
            break;
          }
        }
      }
    }

    if (++v7 >= CFArrayGetCount(*(CFArrayRef *)(qword_100219860 + 32))) {
      goto LABEL_13;
    }
  }

  double Current = CFAbsoluteTimeGetCurrent();
  double v14 = *((double *)v9 + 21);
  if (v14 == 0.0)
  {
    uint64_t v88 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: initializing AWDL metrics collection: timestamp:%f rx:%f bytes tx:%f bytes",  "WiFiMetricsManagerProcessAwdlUsageData",  *(void *)&Current,  *(void *)&a2,  *(void *)&a3);
    }
    objc_autoreleasePoolPop(v88);
    unsigned int v86 = a2;
    unsigned int v87 = a3;
    goto LABEL_136;
  }

  if (Current <= v14)
  {
    *((_DWORD *)v9 + 54) = 0;
LABEL_138:
    id v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: not submitting zero duration AWDL metrics.",  "WiFiMetricsManagerProcessAwdlUsageData");
    }
    goto LABEL_15;
  }

  unsigned int v15 = ((Current - v14) / 60.0);
  *((_DWORD *)v9 + 54) = v15;
  if (!v15) {
    goto LABEL_138;
  }
  v16.f64[0] = a2;
  v16.f64[1] = a3;
  uint32x2_t v91 = (uint32x2_t)vmovn_s64((int64x2_t)vcvtq_u64_f64(v16));
  uint32x2_t v17 = vqsub_u32(v91, (uint32x2_t)v9[20]);
  v9[26] = (uint64_t)vsra_n_u32( (uint32x2_t)vand_s8((int8x8_t)vshr_n_u32(v17, 9uLL), (int8x8_t)0x100000001LL),  v17,  0xAuLL);
  uint64_t v18 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: submitting AWDL metrics: duration:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned int *)v9 + 54));
  }
  objc_autoreleasePoolPop(v18);
  uint64_t v19 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL peerChannelsteerAttemptCount_2G:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned int *)v9 + 96));
  }
  objc_autoreleasePoolPop(v19);
  double v20 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL peerChannelsteerAttemptCount_5G:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned int *)v9 + 97));
  }
  objc_autoreleasePoolPop(v20);
  size_t v21 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL peerChannelsteerBefore:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned int *)v9 + 98));
  }
  objc_autoreleasePoolPop(v21);
  id v22 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL peerChannelsteerAfter:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned int *)v9 + 99));
  }
  objc_autoreleasePoolPop(v22);
  uint64_t v23 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL psfDwellSessionCount:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned int *)v9 + 100));
  }
  objc_autoreleasePoolPop(v23);
  unsigned int v24 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL serviceCount:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned int *)v9 + 62));
  }
  objc_autoreleasePoolPop(v24);
  int v25 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL totalDuration:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned int *)v9 + 101));
  }
  objc_autoreleasePoolPop(v25);
  int v26 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL inActiveDuration:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned int *)v9 + 102));
  }
  objc_autoreleasePoolPop(v26);
  id v27 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL activeDuration:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned int *)v9 + 103));
  }
  objc_autoreleasePoolPop(v27);
  int v28 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL percentageInactiveTime:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned int *)v9 + 104));
  }
  objc_autoreleasePoolPop(v28);
  CFNumberRef v29 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL timeToService:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned int *)v9 + 105));
  }
  objc_autoreleasePoolPop(v29);
  CFNumberRef v30 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL percentageInfraIdleTime:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned int *)v9 + 106));
  }
  objc_autoreleasePoolPop(v30);
  BOOL v31 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL percentageInfraRealTime:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned int *)v9 + 107));
  }
  objc_autoreleasePoolPop(v31);
  uint64_t v32 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL percentageInfraNonRealTime:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned int *)v9 + 108));
  }
  objc_autoreleasePoolPop(v32);
  uint64_t v33 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL isAirPlayActive:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 448));
  }
  objc_autoreleasePoolPop(v33);
  uint64_t v34 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL isRemoteCameraActive:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 449));
  }
  objc_autoreleasePoolPop(v34);
  int v35 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL isRemoteScreenActive:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 450));
  }
  objc_autoreleasePoolPop(v35);
  uint64_t v36 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL isSideCarActive:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 451));
  }
  objc_autoreleasePoolPop(v36);
  BOOL v37 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL isTvRemoteCameraActive:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 452));
  }
  objc_autoreleasePoolPop(v37);
  unint64_t v38 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL isUniversalControlActive:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 453));
  }
  objc_autoreleasePoolPop(v38);
  CFNumberRef v39 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL isStereoPairActive:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 454));
  }
  objc_autoreleasePoolPop(v39);
  CFTypeID v40 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL isAirDropServiceActive:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 455));
  }
  objc_autoreleasePoolPop(v40);
  CFNumberRef v41 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL isAirplayP2PServiceActive:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 456));
  }
  objc_autoreleasePoolPop(v41);
  CFTypeID v42 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL isAirplayServiceActive:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 457));
  }
  objc_autoreleasePoolPop(v42);
  CFNumberRef v43 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL isATPServiceActive:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 458));
  }
  objc_autoreleasePoolPop(v43);
  CFNumberRef v44 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL isCompanionLinkServiceActive:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 459));
  }
  objc_autoreleasePoolPop(v44);
  CFIndex v45 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL isIEEE1588ServiceActive:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 460));
  }
  objc_autoreleasePoolPop(v45);
  CFNumberRef v46 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL isRaopServiceActive:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 461));
  }
  objc_autoreleasePoolPop(v46);
  CFIndex v47 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL isRDLinkServiceActive:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 462));
  }
  objc_autoreleasePoolPop(v47);
  uint64_t v48 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL isDFSMonServiceActive:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 463));
  }
  objc_autoreleasePoolPop(v48);
  int v49 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL isWiFidServiceActive:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 464));
  }
  objc_autoreleasePoolPop(v49);
  CFNumberRef v50 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL isTestServiceActive:%d",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 465));
  }
  objc_autoreleasePoolPop(v50);
  uint64_t v51 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL peerChannelOui:%x:%x:%x",  "WiFiMetricsManagerProcessAwdlUsageData",  *((unsigned __int8 *)v9 + 466),  *((unsigned __int8 *)v9 + 467),  *((unsigned __int8 *)v9 + 468));
  }
  objc_autoreleasePoolPop(v51);
  int v52 = (unsigned int *)malloc(0x128uLL);
  memcpy(v52, v9 + 22, 0x128uLL);
  *((void *)v52 + _Block_object_dispose(va, 8) = 0LL;
  *((void *)v52 + 10) = 0LL;
  *((void *)v52 + 17) = 0LL;
  *((void *)v52 + memset(buffer, 170, 19) = 0LL;
  if (v9[30])
  {
    size_t v53 = *((unsigned int *)v9 + 58);
    if ((_DWORD)v53)
    {
      CFIndex v54 = calloc(v53, 0x10uLL);
      *((void *)v52 + _Block_object_dispose(va, 8) = v54;
      memcpy(v54, (const void *)v9[30], 16LL * *((unsigned int *)v9 + 58));
    }
  }

  if (v9[32])
  {
    size_t v55 = *((unsigned int *)v9 + 62);
    if ((_DWORD)v55)
    {
      double v56 = calloc(v55, 0x30uLL);
      *((void *)v52 + 10) = v56;
      memcpy(v56, (const void *)v9[32], 48LL * *((unsigned int *)v9 + 62));
    }
  }

  if (v9[39])
  {
    size_t v57 = *((unsigned int *)v9 + 80);
    if ((_DWORD)v57)
    {
      uint64_t v58 = calloc(v57, 0x18uLL);
      *((void *)v52 + 17) = v58;
      memcpy(v58, (const void *)v9[39], 24LL * *((unsigned int *)v9 + 80));
    }
  }

  if (v9[41])
  {
    size_t v59 = *((unsigned int *)v9 + 84);
    if ((_DWORD)v59)
    {
      CFTypeID v60 = calloc(v59, 0x18uLL);
      *((void *)v52 + memset(buffer, 170, 19) = v60;
      memcpy(v60, (const void *)v9[41], 24LL * *((unsigned int *)v9 + 84));
    }
  }

  if (v9[43])
  {
    uint64_t v61 = calloc(1uLL, 0x20uLL);
    *((void *)v52 + 21) = v61;
    unsigned int v62 = (_OWORD *)v9[43];
    __int128 v63 = v62[1];
    *uint64_t v61 = *v62;
    v61[1] = v63;
  }

  if (v9[47])
  {
    CFTypeID v64 = calloc(*((unsigned int *)v9 + 92), 2uLL);
    *((void *)v52 + 25) = v64;
    memcpy(v64, (const void *)v9[47], 2LL * *((unsigned int *)v9 + 92));
  }

  CFStringRef v65 = objc_autoreleasePoolPush();
  id v66 = objc_alloc(&OBJC_CLASS___WAMessage);
  id v67 = [v66 initWithMetricName:kWAMessageMetricNameAwdlUsage options:7];
  if (v67)
  {
    uint64_t v68 = v67;
    objc_msgSend( v67,  "addFieldForKey:value:options:",  @"periodInMinutes",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[10]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"flags",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[4]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"cachedPeersOn24G",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)v52 + 7)),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"appTxBytes",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[9]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"appRxBytes",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[8]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"ifTxBytes",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[7]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"ifRxBytes",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[6]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"noServiceIdleTime",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[12]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"suspendedDuration",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[66]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"suspendCount",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[47]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"dfspCSAReceivedFromPeer",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[22]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"cachedPeersNotAssociated",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)v52 + 10)),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"dfspSuspect",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[24]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"dfspResume",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[25]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"numRTSessions",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[32]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"dfspAirplayFailed",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[27]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"peerInfraChannel",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)v52 + 4)),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"peerInfraChannelFlags",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[45]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"dfspCSAReceivedFromAP",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[23]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"cachedPeersDiffInfra",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)v52 + 11)),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"cachedPeersSameInfra",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)v52 + 12)),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"cachedPeersOn5G",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)v52 + 8)),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"numOfPeers",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)v52 + 5)),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"dfspAirplayConnected",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[26]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"numSyncChanges",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[28]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"cachedPeersOnDFS",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)v52 + 9)),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"ifPacketFailures",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[5]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"selfInfraChannel",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *v52),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"selfInfraChannelFlags",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[44]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"numOfCachedPeers",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)v52 + 6)),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"numInputPacketsDropped",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[30]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"numPeersWithZeroExtLen",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[31]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"peerChannelsteerBefore",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[54]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"peerChannelsteerAfter",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[55]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"psfDwellSessionCount",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[56]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"serviceCount",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[18]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"totalDuration",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[57]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"inActiveDuration",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[58]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"activeDuration",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[59]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"percentageInactiveTime",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[60]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"timeToService",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[61]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"percentageInfraIdleTime",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[62]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"percentageInfraRealTime",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[63]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"percentageInfraNonRealTime",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[64]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"isAirPlayActive",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)v52 + 272) != 0),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"isRemoteCameraActive",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)v52 + 273) != 0),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"isRemoteScreenActive",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)v52 + 274) != 0),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"isSideCarActive",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)v52 + 275) != 0),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"isTvRemoteCameraActive",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)v52 + 276) != 0),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"isUniversalControlActive",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)v52 + 277) != 0),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"isStereoPairActive",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)v52 + 278) != 0),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"isAirDropServiceActive",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)v52 + 279) != 0),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"isAirplayP2PServiceActive",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)v52 + 280) != 0),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"isAirplayServiceActive",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)v52 + 281) != 0),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"isATPServiceActive",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)v52 + 282) != 0),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"isCompanionLinkServiceActive",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)v52 + 283) != 0),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"isIEEE1588ServiceActive",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)v52 + 284) != 0),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"isRaopServiceActive",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)v52 + 285) != 0),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"isRDLinkServiceActive",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)v52 + 286) != 0),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"isDFSMonServiceActive",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)v52 + 287) != 0),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"isWiFidServiceActive",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)v52 + 288) != 0),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"isTestServiceActive",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)v52 + 289) != 0),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"peerChannelsteerOUI",  +[NSString stringWithString:](NSString, "stringWithString:", sub_10002D7D8((uint64_t)v52 + 290, 3u)),  7);
    if (v52[36])
    {
      uint64_t v69 = 0LL;
      unint64_t v70 = 0LL;
      do
      {
        int64_t v71 = (double *)(*((void *)v52 + 17) + v69);
        [v68 addFieldForKey:+[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"hopCountHistogramBins_%u_binStart", v70), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *v71), 7 value options];
        [v68 addFieldForKey:+[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"hopCountHistogramBins_%u_value", v70), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v71[2]), 7 value options];
        [v68 addFieldForKey:+[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"hopCountHistogramBins_%u_binEnd", v70++), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v71[1]), 7 value options];
        v69 += 24LL;
      }

      while (v70 < v52[36]);
    }

    if (v52[40])
    {
      uint64_t v72 = 0LL;
      unint64_t v73 = 0LL;
      do
      {
        CFIndex v74 = (double *)(*((void *)v52 + 19) + v72);
        [v68 addFieldForKey:+[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"parentRSSIHistogramBins_%u_binStart", v73), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *v74), 7 value options];
        [v68 addFieldForKey:+[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"parentRSSIHistogramBins_%u_value", v73), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v74[2]), 7 value options];
        [v68 addFieldForKey:+[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"parentRSSIHistogramBins_%u_binEnd", v73++), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v74[1]), 7 value options];
        v72 += 24LL;
      }

      while (v73 < v52[40]);
    }

    if (v52[18])
    {
      uint64_t v75 = 0LL;
      unint64_t v76 = 0LL;
      do
      {
        [v68 addFieldForKey:+[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"services_%u_serviceKey", v76), -[NSString initWithData:encoding:]( [NSString alloc], "initWithData:encoding:", +[NSData dataWithBytes:length:]( NSData, "dataWithBytes:length:", *((void *)v52 + 10) + v75 + 16, 32), 1), 7 value options];
        [v68 addFieldForKey:+[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"services_%u_serviceId", v76), +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*((void *)v52 + 10) + v75 + 4)), 7 value options];
        [v68 addFieldForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"services_%u_opCode", v76), +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned __int8 *)(*((void *)v52 + 10) + v75)), 7 value options];
        [v68 addFieldForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"services_%u_type", v76), +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned __int8 *)(*((void *)v52 + 10) + v75 + 1)), 7 value options];
        [v68 addFieldForKey:+[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"services_%u_duration", v76++), +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*((void *)v52 + 10) + v75 + 8)), 7 value options];
        v75 += 48LL;
      }

      while (v76 < v52[18]);
    }

    if (v52[14])
    {
      uint64_t v77 = 0LL;
      unint64_t v78 = 0LL;
      do
      {
        [v68 addFieldForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"states_%u_count", v78), +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*((void *)v52 + 8) + v77)), 7 value options];
        [v68 addFieldForKey:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"states_%u_duration", v78++), +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*((void *)v52 + 8) + v77 + 8)), 7 value options];
        v77 += 16LL;
      }

      while (v78 < v52[14]);
    }

    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"cachedPeersOn6G",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)v52 + 184)),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"self6ECapable",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)v52 + 185)),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"cachedPeers6ECapable",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)v52 + 186)),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"peerChannelsteerAttemptCount_2G",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[52]),  7);
    objc_msgSend( v68,  "addFieldForKey:value:options:",  @"peerChannelsteerAttemptCount_5G",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52[53]),  7);
    if (v52[48])
    {
      unint64_t v79 = 0LL;
      do
      {
        [v68 addFieldForKey:+[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"lteRestrictedChannelsUsed_%u", v79), +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned __int16 *)(*((void *)v52 + 25) + 2 * v79)), 7 value options];
        ++v79;
      }

      while (v79 < v52[48]);
    }

    sub_10002891C(v68);

    CFStringRef v80 = (void *)*((void *)v52 + 10);
    if (v80) {
      free(v80);
    }
    int64_t v81 = (void *)*((void *)v52 + 8);
    if (v81) {
      free(v81);
    }
    int64_t v82 = (void *)*((void *)v52 + 19);
    if (v82) {
      free(v82);
    }
    int v83 = (void *)*((void *)v52 + 17);
    if (v83) {
      free(v83);
    }
    uint64_t v84 = (void *)*((void *)v52 + 21);
    if (v84) {
      free(v84);
    }
    CFIndex v85 = (void *)*((void *)v52 + 25);
    if (v85) {
      free(v85);
    }
    free(v52);
  }

  objc_autoreleasePoolPop(v65);
  unsigned int v86 = v91.i32[0];
  unsigned int v87 = v91.u32[1];
LABEL_136:
  *((double *)v9 + 21) = Current;
  *((_DWORD *)v9 + 40) = v86;
  *((_DWORD *)v9 + 41) = v87;
}

id sub_10002D7D8(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    id v4 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
    if (a2)
    {
      uint64_t v5 = 0LL;
      do
      {
        objc_msgSend(v4, "appendFormat:", @"%02x", *(unsigned __int8 *)(a1 + v5));
        if (v5 < a2 - 1LL) {
          [v4 appendFormat:@":"];
        }
        ++v5;
      }

      while (a2 != v5);
    }

    id v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: returning %@", "__WiFiMetricsManagerGetColonHexdecFormat", v4 message];
    }
  }

  else
  {
    id v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: addr is NULL",  "__WiFiMetricsManagerGetColonHexdecFormat");
    }
    id v4 = 0LL;
  }

  objc_autoreleasePoolPop(v6);
  return v4;
}

uint64_t sub_10002D8FC()
{
  unsigned int valuePtr = 0;
  if (!qword_100219860)
  {
    CFIndex v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null metrics",  "__WiFiMetricsManagerGetDeviceInitFailureReason");
    }
    goto LABEL_19;
  }

  v0 = IOServiceNameMatching("wlan");
  if (!v0)
  {
    CFIndex v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Class  wlan NOT found ",  "__WiFiMetricsManagerGetDeviceInitFailureReason");
    }
    goto LABEL_19;
  }

  io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v0);
  if (!MatchingService)
  {
    CFIndex v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: service for Class wlan NOT found ",  "__WiFiMetricsManagerGetDeviceInitFailureReason");
    }
LABEL_19:
    objc_autoreleasePoolPop(v7);
    return 0LL;
  }

  io_registry_entry_t v2 = MatchingService;
  CFTypeRef v3 = IORegistryEntrySearchCFProperty( MatchingService,  "IOService",  @"com.apple.wlan.init_failure",  kCFAllocatorDefault,  3u);
  id v4 = objc_autoreleasePoolPush();
  if (v3)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: data for com.apple.wlan.init_failure found",  "__WiFiMetricsManagerGetDeviceInitFailureReason");
    }
    objc_autoreleasePoolPop(v4);
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v3) && CFNumberGetValue((CFNumberRef)v3, kCFNumberSInt32Type, &valuePtr))
    {
      id v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: deviceInitFailureReason:0x%0x ",  "__WiFiMetricsManagerGetDeviceInitFailureReason",  valuePtr);
      }
      objc_autoreleasePoolPop(v6);
    }

    CFRelease(v3);
  }

  else
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WiFi: com.apple.wlan.init_failure property not found.",  "__WiFiMetricsManagerGetDeviceInitFailureReason");
    }
    objc_autoreleasePoolPop(v4);
  }

  CFTypeRef v9 = IORegistryEntrySearchCFProperty( v2,  "IOService",  @"com.apple.wlan.init_failure_string",  kCFAllocatorDefault,  3u);
  if (v9)
  {
    uint64_t v10 = v9;
    CFTypeID v11 = CFStringGetTypeID();
    if (v11 == CFGetTypeID(v10))
    {
      double v12 = CFAbsoluteTimeGetCurrent() - *(double *)(qword_100219860 + 24);
      uint64_t v13 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: deviceInitFailureReason:%@ ", "__WiFiMetricsManagerGetDeviceInitFailureReason", v10 message];
      }
      objc_autoreleasePoolPop(v13);
      -[WiFiUsageMonitor setDeviceInitializationFailureReason:timeSinceBoot:]( +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance"),  "setDeviceInitializationFailureReason:timeSinceBoot:",  v10,  v12);
    }

    CFRelease(v10);
  }

  else
  {
    double v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WiFi: com.apple.wlan.init_failure property not found.",  "__WiFiMetricsManagerGetDeviceInitFailureReason");
    }
    objc_autoreleasePoolPop(v14);
  }

  IOObjectRelease(v2);
  return valuePtr;
}

void sub_10002DC00(uint64_t a1, const __CFDictionary *a2)
{
  if (!qword_100219860) {
    return;
  }
  id v4 = (const void *)sub_100043E8C(a1);
  uint64_t v5 = (void *)sub_100040538(a1, v4);
  value = v5;
  if (!v5)
  {
    CFTypeRef v9 = 0LL;
    id v8 = 0LL;
LABEL_16:
    if (!a1) {
      goto LABEL_220;
    }
    goto LABEL_17;
  }

  uint64_t v6 = (uint64_t)v5;
  CFIndex v7 = (const __CFString *)sub_1000951FC((uint64_t)v5, @"BSSID");
  id v8 = (const __CFDictionary *)sub_1000951FC(v6, @"WPS_PROB_RESP_IE");
  CFTypeRef v9 = (const __CFDictionary *)sub_1000951FC(v6, @"APPLE_IE");
  if (v8) {
    goto LABEL_16;
  }
  uint64_t v10 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s QFA Watchdog metric WPS PROBE RESPONSE IE not found in driverAvailableEventDict. Looking in cache...",  "WiFiMetricsManagerSubmitWatchdogEvent");
  }
  objc_autoreleasePoolPop(v10);
  CFTypeID v11 = (const __CFArray *)sub_100063560(*(void *)(qword_100219860 + 16));
  if (!v11) {
    goto LABEL_12;
  }
  double v12 = v11;
  uint64_t Count = CFArrayGetCount(v11);
  if (Count < 1) {
    goto LABEL_12;
  }
  v147.length = Count;
  v147.id location = 0LL;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v12, v147, value);
  if ((FirstIndexOfValue & 0x8000000000000000LL) == 0
    && (ValueAtIndex = CFArrayGetValueAtIndex(v12, FirstIndexOfValue)) != 0LL
    && (uint64_t v16 = (uint64_t)ValueAtIndex,
        (uint32x2_t v17 = (const __CFString *)sub_1000951FC((uint64_t)ValueAtIndex, @"BSSID")) != 0LL)
    && CFStringCompare(v7, v17, 1uLL) == kCFCompareEqualTo)
  {
    id v8 = (const __CFDictionary *)sub_1000951FC(v16, @"WPS_PROB_RESP_IE");
    if (v8)
    {
      uint64_t v137 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s QFA Watchdog metricWPS PROBE RESPONSE IE found in Known networks cache",  "WiFiMetricsManagerSubmitWatchdogEvent");
      }
      objc_autoreleasePoolPop(v137);
      if (!a1) {
        goto LABEL_220;
      }
      goto LABEL_17;
    }
  }

  else
  {
LABEL_12:
    id v8 = 0LL;
  }

  if (!a1)
  {
LABEL_220:
    uint64_t v138 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null device",  "WiFiMetricsManagerSubmitWatchdogEvent");
    }
    goto LABEL_226;
  }

void sub_10002F1E0(void *a1, _DWORD *a2, CFDictionaryRef theDict, void *key)
{
  if (CFDictionaryContainsKey(theDict, key))
  {
    Value = (const __CFArray *)CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      CFTypeRef v9 = Value;
      CFIndex Count = CFArrayGetCount(Value);
      int v11 = 4 * Count;
      bzero(a1, v11);
      if (Count >= 1)
      {
        for (CFIndex i = 0LL; i != Count; ++i)
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v9, i);
          int valuePtr = 0;
          if (ValueAtIndex)
          {
            CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
            int v14 = valuePtr;
          }

          else
          {
            int v14 = 0;
          }

          *((_DWORD *)a1 + i) = v14;
        }
      }

      *a2 = Count;
    }
  }

void sub_10002F2B4(void *a1, int a2, const void *a3)
{
  if (!qword_100219860 || (uint64_t v4 = *(void *)(qword_100219860 + 16)) == 0)
  {
    uint64_t v23 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null metrics",  "WiFiMetricsManagerSubmitWiFiKnownNetworksEvent");
    }
    goto LABEL_37;
  }

  if (sub_100071B54(v4) == 1)
  {
    uint64_t v23 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Camera is in Foreground",  "WiFiMetricsManagerSubmitWiFiKnownNetworksEvent");
    }
    goto LABEL_37;
  }

  CFIndex v7 = (UInt8 *)malloc(0x10uLL);
  if (!v7)
  {
    uint64_t v23 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null knownNetworksEventMetric",  "WiFiMetricsManagerSubmitWiFiKnownNetworksEvent");
    }
LABEL_37:
    objc_autoreleasePoolPop(v23);
    return;
  }

  id v8 = v7;
  *(void *)CFIndex v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  CFTypeRef v9 = sub_1000968A4((uint64_t)a3);
  if (v9)
  {
    uint64_t v10 = v9;
    v25.id location = 0LL;
    v25.length = 3LL;
    CFDataGetBytes(v9, v25, v8 + 12);
    CFRelease(v10);
  }

  *(_DWORD *)id v8 = a2;
  *((_DWORD *)v8 + 2) = sub_100098EA8((uint64_t)a3);
  *((_DWORD *)v8 + 1) |= 16 * (sub_100097324(a3) != 0);
  *((_DWORD *)v8 + 1) |= 8 * (sub_1000971AC((uint64_t)a3) != 0);
  *((_DWORD *)v8 + 1) |= 4 * sub_1000973BC((uint64_t)a3);
  *((_DWORD *)v8 + 1) |= 32 * (sub_10009CD54((uint64_t)a3) != 0);
  *((_DWORD *)v8 + 1) |= (sub_100096670((uint64_t)a3) == 1) << 6;
  int v11 = sub_100095BC8(a3);
  double v12 = sub_100082A9C(a1);
  if (v12)
  {
    CFStringRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, v12);
    int v14 = Copy;
    if (v11 && Copy && CFDictionaryContainsKey(Copy, v11)) {
      *((_DWORD *)v8 + 1) |= 1u;
    }
  }

  else
  {
    int v14 = 0LL;
  }

  unsigned int v15 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: eventType %d, networkSecurity %d, networkTypeBitMap 0x%X, oui %X:%X:%X",  "WiFiMetricsManagerSubmitWiFiKnownNetworksEvent",  *(unsigned int *)v8,  *((unsigned int *)v8 + 2),  *((unsigned int *)v8 + 1),  v8[12],  v8[13],  v8[14]);
  }
  objc_autoreleasePoolPop(v15);
  uint64_t v16 = objc_autoreleasePoolPush();
  uint32x2_t v17 = objc_autoreleasePoolPush();
  id v18 = objc_alloc(&OBJC_CLASS___WAMessage);
  id v19 = [v18 initWithMetricName:kWAMessageMetricNameKnownNetworkEvent options:6];
  if (v19)
  {
    double v20 = v19;
    else {
      uint64_t v21 = *(unsigned int *)v8;
    }
    objc_msgSend( v19,  "addFieldForKey:value:options:",  kWAMessageKeyKnownNetworkEventType,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v21),  7);
    objc_msgSend( v20,  "addFieldForKey:value:options:",  kWAMessageKeyKnownNetworkTypeBitmap,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v8 + 1)),  7);
    objc_msgSend( v20,  "addFieldForKey:value:options:",  kWAMessageKeyNetworkAuthFlags,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v8 + 2)),  7);
    sub_100039B54(v20, kWAMessageKeyOUI, (uint64_t)(v8 + 12), 3u, 1);
    if (!sub_100036E74(v20, a3, 6LL))
    {
      CFDataRef v22 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to append SSID/BSSID to WAMessage",  "__WiFiMetricsManagerWAMessageUpdateKnownNetworkEvent");
      }
      objc_autoreleasePoolPop(v22);
    }

    sub_10002891C(v20);
  }

  else
  {
    unsigned int v24 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to alloc WAMessage for KnownNetworksEvent",  "__WiFiMetricsManagerWAMessageUpdateKnownNetworkEvent");
    }
    objc_autoreleasePoolPop(v24);
  }

  objc_autoreleasePoolPop(v17);
  objc_autoreleasePoolPop(v16);
  if (v12) {
    CFRelease(v12);
  }
  if (v14) {
    CFRelease(v14);
  }
  free(v8);
}

void sub_10002F72C(_BYTE *a1)
{
  io_registry_entry_t v2 = objc_autoreleasePoolPush();
  if (a1)
  {
    CFTypeRef v3 = objc_autoreleasePoolPush();
    if (*a1)
    {
      id v4 = objc_alloc(&OBJC_CLASS___WAMessage);
      id v5 = [v4 initWithMetricName:kWAMessageMetricNameLinkQualityStats options:5];
      if (v5)
      {
        double v12 = v5;
        context = v3;
        int v14 = v2;
        id v16 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v17 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v18 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v19 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v20 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v21 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v29 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v15 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v22 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v23 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v24 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v25 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v26 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v27 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v28 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v30 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v31 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v32 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v33 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v34 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v35 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v36 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v37 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v38 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v39 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v40 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v41 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v42 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v43 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v44 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v45 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v46 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v47 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v48 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v49 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v50 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        id v6 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
        LODWORD(v7) = *a1;
        if (*a1)
        {
          uint64_t v8 = 0LL;
          unint64_t v9 = 0LL;
          do
          {
            else {
              uint64_t v10 = @":";
            }
            [v16 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v8 + 8]), "stringValue"), v10];
            [v17 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v8 + 12]), "stringValue"), v10];
            [v18 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v8 + 16]), "stringValue"), v10];
            [v19 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v8 + 20]), "stringValue"), v10];
            [v20 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v8 + 24]), "stringValue"), v10];
            [v21 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v8 + 28]), "stringValue"), v10];
            [v15 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v8 + 32]), "stringValue"), v10];
            [v29 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v8 + 36]), "stringValue"), v10];
            [v22 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v8 + 40]), "stringValue"), v10];
            [v23 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", (char)a1[v8 + 44]), "stringValue"), v10];
            [v24 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedChar:]( NSNumber, "numberWithUnsignedChar:", a1[v8 + 45]), "stringValue"), v10];
            [v25 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedChar:]( NSNumber, "numberWithUnsignedChar:", a1[v8 + 46]), "stringValue"), v10];
            [v26 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedChar:]( NSNumber, "numberWithUnsignedChar:", a1[v8 + 47]), "stringValue"), v10];
            [v27 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedChar:]( NSNumber, "numberWithUnsignedChar:", a1[v8 + 48]), "stringValue"), v10];
            [v28 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedChar:]( NSNumber, "numberWithUnsignedChar:", a1[v8 + 49]), "stringValue"), v10];
            [v30 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedChar:]( NSNumber, "numberWithUnsignedChar:", a1[v8 + 50]), "stringValue"), v10];
            [v31 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedChar:]( NSNumber, "numberWithUnsignedChar:", a1[v8 + 51]), "stringValue"), v10];
            [v32 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v8 + 52]), "stringValue"), v10];
            [v33 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v8 + 56]), "stringValue"), v10];
            [v34 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedChar:]( NSNumber, "numberWithUnsignedChar:", a1[v8 + 60]), "stringValue"), v10];
            [v35 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v8 + 64]), "stringValue"), v10];
            [v36 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v8 + 68]), "stringValue"), v10];
            [v37 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v8 + 72]), "stringValue"), v10];
            [v38 appendFormat:@"%@%@", +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%.2f", *(void *)&a1[v8 + 80]), v10];
            [v39 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v8 + 88]), "stringValue"), v10];
            [v40 appendFormat:@"%@%@", +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%.2f", *(void *)&a1[v8 + 96]), v10];
            [v41 appendFormat:@"%@%@", +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%.2f", *(void *)&a1[v8 + 104]), v10];
            [v42 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v8 + 112]), "stringValue"), v10];
            [v43 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedInt:]( NSNumber, "numberWithUnsignedInt:", *(unsigned int *)&a1[v8 + 116]), "stringValue"), v10];
            [v44 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedLongLong:]( NSNumber, "numberWithUnsignedLongLong:", *(void *)&a1[v8 + 120]), "stringValue"), v10];
            [v45 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedLongLong:]( NSNumber, "numberWithUnsignedLongLong:", *(void *)&a1[v8 + 128]), "stringValue"), v10];
            [v46 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedLongLong:]( NSNumber, "numberWithUnsignedLongLong:", *(void *)&a1[v8 + 136]), "stringValue"), v10];
            [v47 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedChar:]( NSNumber, "numberWithUnsignedChar:", a1[v8 + 144]), "stringValue"), v10];
            [v48 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", (char)a1[v8 + 145]), "stringValue"), v10];
            [v49 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedChar:]( NSNumber, "numberWithUnsignedChar:", a1[v8 + 146]), "stringValue"), v10];
            [v50 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedChar:]( NSNumber, "numberWithUnsignedChar:", a1[v8 + 147]), "stringValue"), v10];
            [v6 appendFormat:@"%@%@", -[NSNumber stringValue]( +[NSNumber numberWithUnsignedChar:]( NSNumber, "numberWithUnsignedChar:", a1[v8 + 148]), "stringValue"), v10];
            ++v9;
            unint64_t v7 = *a1;
            v8 += 144LL;
          }

          while (v9 < v7);
        }

        [v12 addFieldForKey:@"txFrames" value:v16 options:5];
        [v12 addFieldForKey:@"txFail" value:v17 options:5];
        [v12 addFieldForKey:@"txRetrans" value:v18 options:5];
        [v12 addFieldForKey:@"bcnSched" value:v19 options:5];
        [v12 addFieldForKey:@"bcnRcvs" value:v20 options:5];
        [v12 addFieldForKey:@"fwTxFrames" value:v21 options:5];
        [v12 addFieldForKey:@"fwTxFail" value:v15 options:5];
        [v12 addFieldForKey:@"fwTxRetrans" value:v29 options:5];
        [v12 addFieldForKey:@"rxFrames" value:v22 options:5];
        [v12 addFieldForKey:@"rssi" value:v23 options:5];
        [v12 addFieldForKey:@"trgDisc" value:v24 options:5];
        [v12 addFieldForKey:@"gwArpExpiry" value:v25 options:5];
        [v12 addFieldForKey:@"usrInput" value:v26 options:5];
        [v12 addFieldForKey:@"txPerSign" value:v27 options:5];
        [v12 addFieldForKey:@"fwTxPerSign" value:v28 options:5];
        [v12 addFieldForKey:@"bcnPerSign" value:v30 options:5];
        [v12 addFieldForKey:@"sympSign" value:v31 options:5];
        [v12 addFieldForKey:@"fgAppNetUsage" value:v32 options:5];
        [v12 addFieldForKey:@"sympUsrImpact" value:v33 options:5];
        [v12 addFieldForKey:@"sympAwdCode" value:v34 options:5];
        [v12 addFieldForKey:@"arpFailureCount" value:v35 options:5];
        [v12 addFieldForKey:@"dnsServersImpacted" value:v36 options:5];
        [v12 addFieldForKey:@"dnsServersTotal" value:v37 options:5];
        [v12 addFieldForKey:@"gateOpenTime" value:v38 options:5];
        [v12 addFieldForKey:@"trafficWatchRx" value:v39 options:5];
        [v12 addFieldForKey:@"trafficWatchDuration" value:v40 options:5];
        [v12 addFieldForKey:@"trafficWatchTime" value:v41 options:5];
        [v12 addFieldForKey:@"validState" value:v42 options:5];
        [v12 addFieldForKey:@"metricReason" value:v43 options:5];
        [v12 addFieldForKey:@"rapidLqmDuration" value:v44 options:5];
        [v12 addFieldForKey:@"tdEvalDuration" value:v45 options:5];
        [v12 addFieldForKey:@"roamWaitTime" value:v46 options:5];
        [v12 addFieldForKey:@"autoLeaveSign" value:v47 options:5];
        [v12 addFieldForKey:@"autoLeaveRssi" value:v48 options:5];
        [v12 addFieldForKey:@"actProbeSign" value:v49 options:5];
        [v12 addFieldForKey:@"probesSent" value:v50 options:5];
        [v12 addFieldForKey:@"probesFailed" value:v6 options:5];
        sub_10002891C(v12);

        objc_autoreleasePoolPop(context);
        io_registry_entry_t v2 = v14;
        goto LABEL_11;
      }

      int v11 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Failed to alloc WAMessage for TriggerDisconnectData",  "__WiFiMetricsManagerWAMessageSubmitTriggerDisconnectData");
      }
    }

    else
    {
      int v11 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: No records in data.. bailing",  "__WiFiMetricsManagerWAMessageSubmitTriggerDisconnectData");
      }
    }

    objc_autoreleasePoolPop(v11);
    objc_autoreleasePoolPop(v3);
    goto LABEL_11;
  }

  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null stats",  "WiFiMetricsManagerSubmitTriggerDisconnectData");
  }
LABEL_11:
  objc_autoreleasePoolPop(v2);
}

void sub_1000302C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!a2 || !qword_100219860) {
    return;
  }
  int v7 = sub_100071B54(*(void *)(qword_100219860 + 16));
  uint64_t v8 = objc_autoreleasePoolPush();
  if (!v7)
  {
    unint64_t v9 = objc_autoreleasePoolPush();
    if (a3)
    {
      id v10 = objc_alloc(&OBJC_CLASS___WAMessage);
      id v11 = [v10 initWithMetricName:kWAMessageMetricNameRoamStatus options:7];
      if (v11)
      {
        double v12 = v11;
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyTimeStarted,  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(void *)a2),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyTimeEnded,  +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a2 + 8)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyNetworkAuthFlags,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 16)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyRoamFlags,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 20)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyStatus,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 24)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyReason,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 28)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyStatusString,  +[WiFiRoamManager stringRepresentationWithStatus:]( WiFiRoamManager,  "stringRepresentationWithStatus:",  *(unsigned int *)(a2 + 24)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyReasonString,  +[WiFiRoamManager stringRepresentationWithReason:]( WiFiRoamManager,  "stringRepresentationWithReason:",  *(unsigned int *)(a2 + 28)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyProfileType,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 32)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyOriginRSSI,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 36)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyTargetRSSI,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 40)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyOriginChannel,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 44)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyTargetChannel,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 48)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyOriginChannelFlags,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 52)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyTargetChannelFlags,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 56)),  7);
        sub_100039B54(v12, kWAMessageKeyOriginOUI, a2 + 60, 3u, 1);
        sub_100039B54(v12, kWAMessageKeyTargetOUI, a2 + 63, 3u, 1);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyCCATotal,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 68)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyCCAOthers,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 76)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyCCAInt,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 80)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyOriginTxPER,  +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a2 + 88)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyOffChannelDwellTime,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 96)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyRoamScanDuration,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 100)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyAssociationDuration,  +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a2 + 104)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyHostReason,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 112)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyHostReasonString,  +[WiFiRoamManager stringRepresentationWithHostReason:]( WiFiRoamManager,  "stringRepresentationWithHostReason:",  *(unsigned int *)(a2 + 112)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyMotionState,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 116)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyVoipActive,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a2 + 120)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyLateRoam,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a2 + 121)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyOriginBcnPER,  +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a2 + 128)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyOriginFWTxPER,  +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a2 + 136)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyOriginEnhancedSecurityType,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 144)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyTargetEnhancedSecurityType,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 148)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyOriginAKMs,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 152)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyTargetAKMs,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 156)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyOriginPhyMode,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 160)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyTargetPhyMode,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 164)),  7);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyScannedChannelCount,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned __int16 *)(a2 + 180)),  7);
        sub_100039B54(v12, kWAMessageKeyOriginAddr, a2 + 168, 6u, 0);
        uint64_t v13 = a2 + 174;
        sub_100039B54(v12, kWAMessageKeyTargetAddr, a2 + 174, 6u, 0);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeySSID,  +[NSString stringWithString:](NSString, "stringWithString:", a3),  6);
        if (a4 && [a4 count])
        {
          uint64_t v37 = a1;
          id v38 = v12;
          id v39 = v8;
          id v44 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
          __int128 v46 = 0u;
          __int128 v47 = 0u;
          __int128 v48 = 0u;
          __int128 v49 = 0u;
          id v14 = [a4 countByEnumeratingWithState:&v46 objects:v50 count:16];
          if (v14)
          {
            id v15 = v14;
            id v16 = a4;
            uint64_t v17 = *(void *)v47;
            uint64_t v43 = kWAMessageKeyChannel;
            uint64_t v42 = kWAMessageKeyChannelFlags;
            uint64_t v41 = kWAMessageKeyRSSI;
            uint64_t v40 = kWAMessageKeyBSSID;
            do
            {
              for (CFIndex i = 0LL; i != v15; CFIndex i = (char *)i + 1)
              {
                if (*(void *)v47 != v17) {
                  objc_enumerationMutation(v16);
                }
                id v19 = *(void **)(*((void *)&v46 + 1) + 8LL * (void)i);
                id v20 = [v19 objectForKey:@"CHANNEL"];
                id v21 = [v19 objectForKey:@"CHANNEL_FLAGS"];
                id v22 = [v19 objectForKey:@"RSSI"];
                id v23 = [v19 objectForKey:@"BSSID"];
                if (v20) {
                  BOOL v24 = v22 == 0LL;
                }
                else {
                  BOOL v24 = 1;
                }
                if (!v24 && v23 != 0LL && v21 != 0LL)
                {
                  id v27 = v23;
                  id v28 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
                  [v28 setObject:v20 forKey:v43];
                  [v28 setObject:v21 forKey:v42];
                  [v28 setObject:v22 forKey:v41];
                  [v28 setObject:v27 forKey:v40];
                  id v29 = v28;
                  id v16 = a4;
                  [v44 addObject:v29];
                }
              }

              id v15 = [v16 countByEnumeratingWithState:&v46 objects:v50 count:16];
            }

            while (v15);
          }

          double v12 = v38;
          objc_msgSend( v38,  "addFieldForKey:value:options:",  kWAMessageKeyRoamCache,  +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v44),  6);
          uint64_t v8 = v39;
          a1 = v37;
          uint64_t v13 = a2 + 174;
        }

        if (a1)
        {
          id v30 = malloc(0x34CuLL);
          if (!v30)
          {
            id v36 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null lqmHistoryMetric",  "__WiFiMetricsManagerWAMessageSubmitRoamStatus");
            }
            objc_autoreleasePoolPop(v36);
            goto LABEL_37;
          }

          id v31 = v30;
          bzero(v30, 0x34CuLL);
          free(v31);
        }

        uint64_t v32 = kWAMessageKeyMetricDate;
        -[NSDate timeIntervalSinceReferenceDate]( +[NSDate date](&OBJC_CLASS___NSDate, "date"),  "timeIntervalSinceReferenceDate");
        objc_msgSend( v12,  "addFieldForKey:value:options:",  v32,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"),  6);
        if (!*(_DWORD *)(a2 + 24))
        {
          id v33 = sub_10002D7D8(v13, 6u);
          if (v33)
          {
            id v34 = +[WiFiUsageAccessPointProfile profileForBSSID:]( &OBJC_CLASS___WiFiUsageAccessPointProfile,  "profileForBSSID:",  v33);
            if (v34) {
              [v12 addFieldForKey:kWAMessageKeyApProfile value:v34 options:6];
            }
          }
        }

        sub_10002891C(v12);
LABEL_37:

LABEL_38:
        objc_autoreleasePoolPop(v9);
        objc_autoreleasePoolPop(v8);
        return;
      }

      id v35 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to alloc WAMessage for RoamStatus",  "__WiFiMetricsManagerWAMessageSubmitRoamStatus");
      }
    }

    else
    {
      id v35 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: ssid null",  "__WiFiMetricsManagerWAMessageSubmitRoamStatus");
      }
    }

    objc_autoreleasePoolPop(v35);
    goto LABEL_38;
  }

  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Camera is in Foreground",  "WiFiMetricsManagerSubmitRoamStatus");
  }
  objc_autoreleasePoolPop(v8);
}

void sub_100030E80(uint64_t a1)
{
  if (a1)
  {
    io_registry_entry_t v2 = malloc(0x38uLL);
    if (v2)
    {
      uint64_t v3 = (uint64_t)v2;
      __int128 v4 = *(_OWORD *)(a1 + 16);
      _OWORD *v2 = *(_OWORD *)a1;
      v2[1] = v4;
      v2[2] = *(_OWORD *)(a1 + 32);
      id v5 = *(const __CFString **)(a1 + 40);
      *((void *)v2 + 6) = *(void *)(a1 + 48);
      if (v5) {
        *((void *)v2 + 5) = CFStringCreateCopy(kCFAllocatorDefault, v5);
      }
      id v6 = *(const __CFString **)(a1 + 48);
      if (v6) {
        *(void *)(v3 + 4_Block_object_dispose(va, 8) = CFStringCreateCopy(kCFAllocatorDefault, v6);
      }
      int v7 = objc_autoreleasePoolPush();
      uint64_t v8 = objc_autoreleasePoolPush();
      id v9 = objc_alloc(&OBJC_CLASS___WAMessage);
      id v10 = [v9 initWithMetricName:kWAMessageMetricNameActionFrameEvent options:5];
      if (v10)
      {
        id v11 = v10;
        sub_100039B54(v10, kWAMessageKeyOUI, v3, 3u, 1);
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyEnvironmentType,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v3 + 4)),  5);
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyCategoryCode,  +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *(char *)(v3 + 8)),  5);
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyActionCode,  +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *(char *)(v3 + 9)),  5);
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyDialogToken,  +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *(char *)(v3 + 10)),  5);
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyStatus,  +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *(char *)(v3 + 11)),  5);
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyFrameType,  +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *(char *)(v3 + 12)),  5);
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyBtmDisassociationTimeout,  +[NSNumber numberWithShort:](NSNumber, "numberWithShort:", *(__int16 *)(v3 + 14)),  5);
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyBtmValidityInterval,  +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *(char *)(v3 + 16)),  5);
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyBtmTerminationDuration,  +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *(char *)(v3 + 17)),  5);
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyBtmHasPreferredCandidateList,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_BYTE *)(v3 + 18) != 0),  5);
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyBtmAbridged,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_BYTE *)(v3 + 19) != 0),  5);
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyBtmDisassociationImminent,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_BYTE *)(v3 + 20) != 0),  5);
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyBtmBssTerminationIncluded,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_BYTE *)(v3 + 21) != 0),  5);
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyBtmEssTerminationIncluded,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_BYTE *)(v3 + 22) != 0),  5);
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyChannel,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v3 + 24)),  5);
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyChannelWidth,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v3 + 28)),  5);
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyChannelFlags,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v3 + 36)),  5);
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyPhyMode,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v3 + 32)),  5);
        if (*(void *)(v3 + 40)) {
          objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyWPSModelName,  +[NSString stringWithString:](NSString, "stringWithString:"),  5);
        }
        if (*(void *)(v3 + 48)) {
          objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyWPSModelNum,  +[NSString stringWithString:](NSString, "stringWithString:"),  5);
        }
        sub_10002891C(v11);
      }

      else
      {
        id v14 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Failed to alloc WAMessage for ActionFrameEvent",  "__WiFiMetricsManagerWAMessageSubmitActionFrameEvent");
        }
        objc_autoreleasePoolPop(v14);
      }

      objc_autoreleasePoolPop(v8);
      double v12 = *(const void **)(v3 + 48);
      if (v12)
      {
        CFRelease(v12);
        *(void *)(v3 + 4_Block_object_dispose(va, 8) = 0LL;
      }

      uint64_t v13 = *(const void **)(v3 + 40);
      if (v13) {
        CFRelease(v13);
      }
      free((void *)v3);
    }

    else
    {
      int v7 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null afMetricCopy",  "WiFiMetricsManagerSubmitActionFrameEvent");
      }
    }
  }

  else
  {
    int v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null afMetric",  "WiFiMetricsManagerSubmitActionFrameEvent");
    }
  }

  objc_autoreleasePoolPop(v7);
}

uint64_t sub_1000313EC(uint64_t a1, CFDictionaryRef theDict, uint64_t a3)
{
  uint64_t valuePtr = 0LL;
  value = 0LL;
  unsigned int v35 = 0;
  if (!(_DWORD)a1)
  {
    id v28 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s received invalid type (%d)",  "WiFiMetricsManagerCheckQueryableWatchdogInfo",  0);
    }
    objc_autoreleasePoolPop(v28);
    return 0LL;
  }

  id v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DRIVER_AVAILABLE_FLAGS");
  if (!v6) {
    return 0LL;
  }
  int v7 = v6;
  CFNumberGetValue(v6, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return 0LL;
  }
  id v9 = Mutable;
  unsigned int v34 = a1 - 1;
  CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v34);
  if (v10) {
    CFDictionarySetValue(v9, @"APPLE80211KEY_AWD_TRAP_TYPE", v10);
  }
  id v11 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:4, "%s requesting info type (%d) - trap dict: %@", "WiFiMetricsManagerCheckQueryableWatchdogInfo", v34, v9 message];
  }
  objc_autoreleasePoolPop(v11);
  for (int i = 6; ; --i)
  {
    uint64_t v13 = Apple80211Get(a3, 257LL, 0LL, v9, 8LL);
    uint64_t v14 = v13;
    if ((int)v13 <= 15)
    {
      if ((_DWORD)v13 != -3905) {
        break;
      }
    }

    else if ((_DWORD)v13 != 61 && (_DWORD)v13 != 16)
    {
      goto LABEL_74;
    }

    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }

  if (!(_DWORD)v13)
  {
    CFDictionaryGetValueIfPresent(v9, @"TRAP_SEQUENECE_NUM", (const void **)&value);
    if (value)
    {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v35);
      CFDictionaryGetValueIfPresent(theDict, @"DRIVER_AVAILABLE_TRAP_SEQUENCE", (const void **)&value);
      if (value)
      {
        CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
        if (v35 == (_DWORD)valuePtr)
        {
          if ((_DWORD)a1 == 2)
          {
            for (unsigned int j = 10; j < 0xF; ++j)
            {
              CFNumberRef v23 = CFNumberCreate(0LL, kCFNumberIntType, &j);
              if (v23)
              {
                CFNumberRef v24 = v23;
                if (CFDictionaryContainsKey(v9, v23))
                {
                  id v25 = CFDictionaryGetValue(v9, v24);
                  if (v25)
                  {
                    if (j - 10 <= 4) {
                      CFDictionaryAddValue(theDict, *((const void **)&off_1001E2FC0 + (int)(j - 10)), v25);
                    }
                  }
                }

                CFRelease(v24);
              }
            }

            if (CFDictionaryContainsKey(v9, @"TRAP_SEQUENECE_NUM")) {
              int v7 = CFDictionaryGetValue(v9, @"TRAP_SEQUENECE_NUM");
            }
            if (v7) {
              CFDictionaryAddValue(theDict, @"DRIVER_AVAILABLE_JOIN_TIMEOUT_SEQUENCE", v7);
            }
            CFBooleanRef v21 = kCFBooleanTrue;
            id v22 = @"DRIVER_AVAILABLE_HAVE_JOIN_TIMEOUT_INFO";
            goto LABEL_56;
          }

          if ((_DWORD)a1 == 1)
          {
            for (unsigned int j = 1; j < 0xA; ++j)
            {
              CFNumberRef v15 = CFNumberCreate(0LL, kCFNumberIntType, &j);
              if (v15)
              {
                CFNumberRef v16 = v15;
                if (CFDictionaryContainsKey(v9, v15))
                {
                  uint64_t v17 = CFDictionaryGetValue(v9, v16);
                  if (v17)
                  {
                    if (j - 1 <= 8) {
                      CFDictionaryAddValue(theDict, *((const void **)&off_1001E2F58 + (int)(j - 1)), v17);
                    }
                  }
                }

                CFRelease(v16);
              }
            }

            for (unsigned int j = 15; j < 0x13; ++j)
            {
              CFNumberRef v18 = CFNumberCreate(0LL, kCFNumberIntType, &j);
              if (v18)
              {
                CFNumberRef v19 = v18;
                if (CFDictionaryContainsKey(v9, v18))
                {
                  id v20 = CFDictionaryGetValue(v9, v19);
                  if (v20)
                  {
                    if (j - 15 <= 3) {
                      CFDictionaryAddValue(theDict, *((const void **)&off_1001E2FA0 + (int)(j - 15)), v20);
                    }
                  }
                }

                CFRelease(v19);
              }
            }

            if (CFDictionaryContainsKey(v9, @"TRAP_SEQUENECE_NUM")) {
              int v7 = CFDictionaryGetValue(v9, @"TRAP_SEQUENECE_NUM");
            }
            if (v7) {
              CFDictionaryAddValue(theDict, @"DRIVER_AVAILABLE_TRAP_SEQUENCE", v7);
            }
            CFBooleanRef v21 = kCFBooleanTrue;
            id v22 = @"DRIVER_AVAILABLE_HAVE_EXT_TRAP";
LABEL_56:
            CFDictionaryAddValue(theDict, v22, v21);
LABEL_60:
            uint64_t v14 = 0LL;
            goto LABEL_61;
          }

          id v26 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s unrecognized kWiFiMetricsManagerExtWatchDogInfoType (%d)",  "WiFiMetricsManagerCheckQueryableWatchdogInfo",  a1,  v32);
          }
        }

        else
        {
          id v26 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s driver availability sequence (%u) vs trap dict sequence (%u) mismatch",  "WiFiMetricsManagerCheckQueryableWatchdogInfo",  valuePtr,  v35);
          }
        }
      }

      else
      {
        id v26 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s driver availability didn't contain a sequence number",  "WiFiMetricsManagerCheckQueryableWatchdogInfo",  v31,  v32);
        }
      }
    }

    else
    {
      id v26 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s trap dict didn't contain a sequence number",  "WiFiMetricsManagerCheckQueryableWatchdogInfo",  v31,  v32);
      }
    }

    objc_autoreleasePoolPop(v26);
    goto LABEL_60;
  }

LABEL_74:
  id v29 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Apple80211Get(APPLE80211_IOC_TRAP_INFO) failed: %d",  "WiFiMetricsManagerCheckQueryableWatchdogInfo",  v14);
  }
  objc_autoreleasePoolPop(v29);
  if ((_DWORD)v14)
  {
    id v30 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s WiFiMetricsManagerCheckQueryableWatchdogInfo() finished with error: %d",  "WiFiMetricsManagerCheckQueryableWatchdogInfo",  v14);
    }
    objc_autoreleasePoolPop(v30);
  }

  if (v41)
  {
    if (v31) {
      free(v31);
    }
    ((void (**)(void, NSError *, void, void))a3)[2](a3, v41, 0LL, 0LL);
  }

LABEL_61:
  CFRelease(v9);
  if (v10) {
    CFRelease(v10);
  }
  return v14;
}

            ++v34;
            id v33 = *(const __CFArray **)(a1 + 5752);
            if (!v33) {
              break;
            }
          }
        }
      }
    }

    if (!*(void *)(a1 + 5816)) {
      sub_10004CC70(a1, v9, 1);
    }
    if (!*(void *)(a1 + 5824))
    {
      sub_10004CD74(a1, (uint64_t)v9);
      id v44 = *(const void **)(a1 + 5832);
      if (v44)
      {
        CFRelease(v44);
        *(void *)(a1 + 5832) = 0LL;
      }

      *(void *)(a1 + 5832) = sub_100094E60((uint64_t)v13, (uint64_t)v9);
    }

    sub_10009582C((uint64_t)v9, @"WiFiNetworkRouterMac", *(const void **)(a1 + 4328));
    sub_10009582C((uint64_t)v9, @"WiFiNetworkRouterIP", *(const void **)(a1 + 4336));
    if (*(_BYTE *)(a1 + 272)) {
      sub_10009582C( (uint64_t)v9,  @"SNR",  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 280)));
    }
    if (*(_BYTE *)(a1 + 307)) {
      sub_10009582C( (uint64_t)v9,  @"CCA",  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned __int8 *)(a1 + 308)));
    }
  }

  if (([v48 hasSuffix:@"com.apple.wifi.plist"] & 1) != 0
    || ([v48 hasSuffix:@"com.apple.wifi-networks.plist"] & 1) != 0)
  {
    id v36 = sub_10003A46C(Mutable, 1);
    __int128 v4 = v50;
    if (v36)
    {
      uint64_t v37 = v36;
      -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v36, @"List of known networks");
      CFRelease(v37);
    }
  }

  else
  {
    __int128 v4 = v50;
    if (CFArrayGetCount(Mutable) >= 1)
    {
      id v38 = 0LL;
      do
      {
        id v39 = (CFDictionaryRef *)CFArrayGetValueAtIndex(Mutable, v38);
        if (v39)
        {
          uint64_t v40 = sub_1000A063C(v39);
          if (v40)
          {
            uint64_t v41 = v40;
            uint64_t v42 = [v40 identifier];
            uint64_t v43 = [v41 externalForm];
            if (v42 && v43) {
              -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v43, v42);
            }
          }
        }

        ++v38;
      }

      while (CFArrayGetCount(Mutable) > v38);
    }
  }

  unsigned int v35 = (uint64_t)-[NSMutableDictionary writeToFile:atomically:](v6, "writeToFile:atomically:", v48, 1LL);
  unsigned int v34 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    id v44 = "FAILED to";
    if ((_DWORD)v35) {
      id v44 = "SUCCEEDED to";
    }
    [(id)qword_100219F60 WFLog:4, "<%s> %s write backup file contents: %@", "WiFiManagerMergeKnownNetworksToList", v44, v6 message];
  }

  id v25 = sub_1000F3918(a1, &off_100205828);
  if (v11) {
    goto LABEL_62;
  }
LABEL_63:
  objc_autoreleasePoolPop(v4);
  return v25;
}

            CFRelease(v30);
            continue;
          }

          uint64_t v32 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null channel flag",  "__WiFiDeviceManagerScanCarPlayRemainingChannels");
          }
        }

        else
        {
          uint64_t v32 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null channel number",  "__WiFiDeviceManagerScanCarPlayRemainingChannels");
          }
        }

        objc_autoreleasePoolPop(v32);
      }
    }
  }

  id v11 = sub_1001036C0(a1, *(const __CFArray **)(a1 + 3544), v4, 0x28u, 24LL);
  if ((_DWORD)v11) {
    goto LABEL_78;
  }
  id v33 = v22;
  if (v22)
  {
    unsigned int v34 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      unsigned int v35 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@*} %@",  @"AUTOJOIN, SCAN",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Scanning(%s) CarPlay remaining channels: %@",  "Active",  v22)),  "UTF8String"));
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        id v36 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v35, "UTF8String")),  "UTF8String");
        LODWORD(keys[0]) = 136446210;
        *(void **)((char *)keys + 4) = (void *)v36;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  (uint8_t *)keys,  0xCu);
      }
    }

    objc_autoreleasePoolPop(v34);
    id v11 = 0LL;
  }

  else
  {
LABEL_79:
    if (!v33) {
      goto LABEL_81;
    }
  }

  CFRelease(v33);
LABEL_81:
  CFRelease(v16);
  CFRelease(v4);
  if ((_DWORD)v11)
  {
LABEL_82:
    id v39 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "CarPlay multi-stage auto-join: Error scanning remaining channels, err=%d",  v11);
    }
    objc_autoreleasePoolPop(v39);
    goto LABEL_87;
  }

void sub_1000319A8(uint64_t a1)
{
  io_registry_entry_t v2 = objc_autoreleasePoolPush();
  uint64_t v3 = objc_autoreleasePoolPush();
  id v4 = objc_alloc(&OBJC_CLASS___WAMessage);
  id v5 = [v4 initWithMetricName:kWAMessageMetricNameTxInhibit options:5];
  if (v5)
  {
    id v6 = v5;
    objc_msgSend( v5,  "addFieldForKey:value:options:",  kWAMessageKeyTxInhibitState,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1),  5);
    sub_10002891C(v6);
  }

  else
  {
    int v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to alloc WAMessage for TxInhibit",  "__WiFiMetricsManagerWAMessageSubmitTxInhibitState");
    }
    objc_autoreleasePoolPop(v7);
  }

  objc_autoreleasePoolPop(v3);
  objc_autoreleasePoolPop(v2);
}

void sub_100031A9C(uint64_t a1, const __CFString *a2, const void *a3)
{
  if (a1 && a2)
  {
    if (qword_100219860 && CFArrayGetCount(*(CFArrayRef *)(qword_100219860 + 32)) >= 1)
    {
      CFIndex v5 = 0LL;
      while (1)
      {
        ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(qword_100219860 + 32), v5);
        if (!ValueAtIndex)
        {
          CFNumberRef v10 = objc_autoreleasePoolPush();
          id v11 = (void *)qword_100219F60;
          if (qword_100219F60)
          {
            double v12 = "WiFiMetricsManagerGetDeviceMetricsFromInterfaceName: Couldn't get WiFiMetricsDeviceMetricsRef";
            goto LABEL_18;
          }

          goto LABEL_19;
        }

        int v7 = ValueAtIndex;
        uint64_t v8 = *ValueAtIndex;
        if (!v8) {
          break;
        }
        id v9 = (const __CFString *)sub_100043E8C(v8);
        if (!v9)
        {
          CFNumberRef v10 = objc_autoreleasePoolPush();
          id v11 = (void *)qword_100219F60;
          if (qword_100219F60)
          {
            double v12 = "WiFiMetricsManagerGetDeviceMetricsFromInterfaceName: Couldn't get WiFiDevice ifname";
LABEL_18:
            [v11 WFLog:3 message:v12];
          }

          goto LABEL_19;
        }

        if (CFStringCompare(v9, a2, 0LL) == kCFCompareEqualTo)
        {
          uint64_t v14 = (__CFSet *)v7[89];
          if (a3) {
            CFSetAddValue(v14, a3);
          }
          else {
            CFSetRemoveAllValues(v14);
          }
          return;
        }

BOOL sub_100031C7C()
{
  *(void *)uint64_t v8 = 0x1500000001LL;
  uint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  size_t v5 = 16LL;
  if (!qword_100219860)
  {
    id v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null metrics", "WiFiMetricsManagerIsFirstBoot");
    }
    goto LABEL_11;
  }

  if (sysctl(v8, 2u, &v6, &v5, 0LL, 0LL) == -1)
  {
    id v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: unable to get boot timestamp",  "WiFiMetricsManagerIsFirstBoot");
    }
LABEL_11:
    objc_autoreleasePoolPop(v4);
    return 0LL;
  }

  double v0 = *(double *)(qword_100219860 + 24) - ((double)(int)v7 / 1000000.0 + (double)v6 - kCFAbsoluteTimeIntervalSince1970);
  BOOL v1 = v0 < 30.0;
  io_registry_entry_t v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: managerBootTime %fsecs, firstBoot %d",  "WiFiMetricsManagerIsFirstBoot",  *(void *)&v0,  v0 < 30.0,  v5);
  }
  objc_autoreleasePoolPop(v2);
  return v1;
}

double sub_100031E28(double *a1)
{
  io_registry_entry_t v2 = objc_autoreleasePoolPush();
  uint64_t v3 = objc_autoreleasePoolPush();
  id v4 = objc_alloc(&OBJC_CLASS___WAMessage);
  id v5 = [v4 initWithMetricName:kWAMessageMetricNameSoftAP options:5];
  if (v5)
  {
    uint64_t v6 = v5;
    objc_msgSend( v5,  "addFieldForKey:value:options:",  kWAMessageKeyBringUpMethod,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)a1),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyBringUpEndState,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 1)),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyTeardownReason,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 2)),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyMisStartTime,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a1[2]),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeySoftAPUpTime,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a1[3]),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeySessionEndTime,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a1[4]),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyAppleDeviceConnectCount,  +[NSNumber numberWithUnsignedShort:]( NSNumber,  "numberWithUnsignedShort:",  *((unsigned __int16 *)a1 + 20)),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyAppleDeviceConnectionFlags,  +[NSNumber numberWithUnsignedShort:]( NSNumber,  "numberWithUnsignedShort:",  *((unsigned __int16 *)a1 + 21)),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyNonAppleDeviceConnectCount,  +[NSNumber numberWithUnsignedShort:]( NSNumber,  "numberWithUnsignedShort:",  *((unsigned __int16 *)a1 + 22)),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyDeviceDisconnectCount,  +[NSNumber numberWithUnsignedShort:]( NSNumber,  "numberWithUnsignedShort:",  *((unsigned __int16 *)a1 + 23)),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyLowPowerModeDuration,  +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a1 + 6)),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhPublisherFailure,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 72)),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhNanStationCount,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 88)),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhNanSessionStartTime,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a1[12]),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhNanSessionEndTime,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a1[13]),  5);
    double v7 = (a1[13] - a1[12]) / 1000000.0;
    double v8 = a1[4] - a1[2];
    double v9 = v8 / 1000000.0;
    if (v8 / 1000000.0 == 0.0)
    {
      double v12 = 0.0;
    }

    else
    {
      *(float *)&double v8 = v7;
      float v10 = v9;
      *(float *)&double v8 = *(float *)&v8 / v10;
      float v11 = *(float *)&v8;
      objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhNanSessionOverSoftApSessionTime,  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8),  5);
      double v12 = v11;
    }

    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhNanSessionTime,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v7),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhPublisherTeardownReason,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a1 + 28)),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyNANPhPublisherAwdlStartedWhileInSession,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)a1 + 160) != 0),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhPublisherTerminateP2pReasonCode,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 128)),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhPublisherDataSessionTerminateP2pReasonCode,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 144)),  5);
    if (*((void *)a1 + 19))
    {
      objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhPublisherDataSessionTerminateP2pReasonCodeString,  +[NSString stringWithString:](NSString, "stringWithString:"),  5);
      uint64_t v13 = (const void *)*((void *)a1 + 19);
      if (v13)
      {
        CFRelease(v13);
        a1[19] = 0.0;
      }
    }

    else
    {
      [v6 addFieldForKey:kWAMessageKeyNanPhPublisherDataSessionTerminateP2pReasonCodeString value:@"N/A" options:5];
    }

    if (*((void *)a1 + 17))
    {
      objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhPublisherTerminateP2pReasonCodeString,  +[NSString stringWithString:](NSString, "stringWithString:"),  5);
      uint64_t v14 = (const void *)*((void *)a1 + 17);
      if (v14)
      {
        CFRelease(v14);
        a1[17] = 0.0;
      }
    }

    else
    {
      [v6 addFieldForKey:kWAMessageKeyNanPhPublisherTerminateP2pReasonCodeString value:@"N/A" options:5];
    }

    if (*((void *)a1 + 15))
    {
      objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhPublisherTeardownReasonString,  +[NSString stringWithString:](NSString, "stringWithString:"),  5);
      CFNumberRef v15 = (const void *)*((void *)a1 + 15);
      if (v15)
      {
        CFRelease(v15);
        a1[15] = 0.0;
      }
    }

    else
    {
      [v6 addFieldForKey:kWAMessageKeyNanPhPublisherTeardownReasonString value:@"N/A" options:5];
    }

    if (*((void *)a1 + 10))
    {
      objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhPublisherFailureString,  +[NSString stringWithString:](NSString, "stringWithString:"),  5);
      CFNumberRef v16 = (const void *)*((void *)a1 + 10);
      if (v16)
      {
        CFRelease(v16);
        a1[10] = 0.0;
      }
    }

    else
    {
      [v6 addFieldForKey:kWAMessageKeyNanPhPublisherFailureString value:@"N/A" options:5];
    }

    uint64_t v17 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s nanPhPublisherFailureReason=%d nanPhNanStationCount=%d nanPhNanSessionStartTime=%f nanPhNanSessionEndTime=%f nanSessionTime=%f softapSessionTime=%f kWAMessageKeyNanPhNanSessionOverSoftApSessionTime=%f nanPhPublisherTeardo wnReason=%d awdlStartedWhileInSession=%d nanPhPublisherTerminateP2pReasonCode=%d nanPhPublisherDataSessionTermin ateP2pReasonCode=%d",  "__WiFiMetricsManagerWAMessageSubmitPHSessionMetric",  *((unsigned __int8 *)a1 + 72),  *((unsigned __int8 *)a1 + 88),  *((void *)a1 + 12),  *((void *)a1 + 13),  *(void *)&v7,  *(void *)&v9,  *(void *)&v12,  *((unsigned int *)a1 + 28),  *((unsigned __int8 *)a1 + 160),  *((unsigned __int8 *)a1 + 128),  *((unsigned __int8 *)a1 + 144));
    }
    objc_autoreleasePoolPop(v17);
    if (*((_DWORD *)a1 + 14)) {
      objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyChannel,  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:"),  5);
    }
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeySSIDChanged,  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *((unsigned int *)a1 + 15)),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyIsPendingSubmission,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)a1 + 64) != 0),  5);
    objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeySecurityTypes,  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *((unsigned int *)a1 + 17)),  5);
    sub_10002891C(v6);
  }

  else
  {
    CFNumberRef v19 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Failed to alloc WAMessage for SoftAPEvent",  "__WiFiMetricsManagerWAMessageSubmitPHSessionMetric");
    }
    objc_autoreleasePoolPop(v19);
  }

  objc_autoreleasePoolPop(v3);
  objc_autoreleasePoolPop(v2);
  a1[20] = 0.0;
  double result = 0.0;
  *((_OWORD *)a1 + _Block_object_dispose(va, 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  return result;
}

double sub_1000325B0(unsigned int *a1)
{
  io_registry_entry_t v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: PHClientMetric: failureReason=%d rssi=%d isFamily=%d isAutoJoin=%d switchedToAnotherNetwork=%d enhancedSecurit yType 0x%X nanPhClientSessionTime=%f nanPhSubscriberEndState=%d nanPhSubscriberDatapathEndState=%d  wifip2pdCrashW hileInNanPhSession=%d",  "WiFiMetricsManagerSubmitPHClientMetric",  *a1,  a1[1],  *((unsigned __int8 *)a1 + 8),  *((unsigned __int8 *)a1 + 9),  *((unsigned __int8 *)a1 + 10),  a1[3],  *((void *)a1 + 3),  a1[18],  a1[10],  *((unsigned __int8 *)a1 + 16));
  }
  objc_autoreleasePoolPop(v2);
  uint64_t v3 = objc_autoreleasePoolPush();
  id v4 = objc_autoreleasePoolPush();
  if (!a1)
  {
    CFNumberRef v15 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: pHClientMetric null",  "__WiFiMetricsManagerWAMessageSubmitPHClientMetric");
    }
    goto LABEL_29;
  }

  id v5 = objc_alloc(&OBJC_CLASS___WAMessage);
  id v6 = [v5 initWithMetricName:kWAMessageMetricNameSoftAPClient options:5];
  if (!v6)
  {
    CFNumberRef v15 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to alloc WAMessage for SoftAPClient",  "__WiFiMetricsManagerWAMessageSubmitPHClientMetric");
    }
LABEL_29:
    objc_autoreleasePoolPop(v15);
    goto LABEL_24;
  }

  double v7 = v6;
  objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyFailureReason,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a1),  5);
  objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyRSSI,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[1]),  5);
  objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyIsFamilyHotspot,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)a1 + 8) != 0),  5);
  objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyIsAutoJoined,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)a1 + 9) != 0),  5);
  objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeySwitchedtoAnotherNetwork,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)a1 + 10) != 0),  5);
  objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyEnhancedSecurityType,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[3]),  5);
  objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhClientSessionStartTime,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)a1 + 3)),  5);
  objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhClientSessionEndTime,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *((double *)a1 + 4)),  5);
  double v8 = (*((double *)a1 + 4) - *((double *)a1 + 3)) / 1000000.0;
  objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhClientSessionTime,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v8),  5);
  objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhSubscriberEndState,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[18]),  5);
  objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhSubscriberDatapathEndState,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[10]),  5);
  objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhSubscriberWifip2pdCrashWhileInSession,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)a1 + 16) != 0),  5);
  objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhSubscriberCopresenceStartedDuringSession,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)a1 + 104) != 0),  5);
  objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhSubscriberTeardownReason,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[22]),  5);
  objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhSubscriberStartError,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[14]),  5);
  objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhSubscriberAwdlStartedDuringSession,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((_BYTE *)a1 + 105) != 0),  5);
  if (*((void *)a1 + 12))
  {
    objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhSubscriberTeardownReasonString,  +[NSString stringWithString:](NSString, "stringWithString:"),  5);
    double v9 = (const void *)*((void *)a1 + 12);
    if (v9)
    {
      CFRelease(v9);
      *((void *)a1 + 12) = 0LL;
    }
  }

  else
  {
    [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberTeardownReasonString value:@"N/A" options:5];
  }

  if (*((void *)a1 + 10))
  {
    objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhSubscriberEndStateString,  +[NSString stringWithString:](NSString, "stringWithString:"),  5);
    float v10 = (const void *)*((void *)a1 + 10);
    if (v10)
    {
      CFRelease(v10);
      *((void *)a1 + 10) = 0LL;
    }
  }

  else
  {
    [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberEndStateString value:@"N/A" options:5];
  }

  if (*((void *)a1 + 8))
  {
    objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhSubscriberStartErrorString,  +[NSString stringWithString:](NSString, "stringWithString:"),  5);
    float v11 = (const void *)*((void *)a1 + 8);
    if (v11)
    {
      CFRelease(v11);
      *((void *)a1 + _Block_object_dispose(va, 8) = 0LL;
    }
  }

  else
  {
    [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberStartErrorString value:@"SUCCESS" options:5];
  }

  if (*((void *)a1 + 6))
  {
    objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyNanPhSubscriberDatapathEndStateString,  +[NSString stringWithString:](NSString, "stringWithString:"),  5);
    double v12 = (const void *)*((void *)a1 + 6);
    if (v12)
    {
      CFRelease(v12);
      *((void *)a1 + 6) = 0LL;
    }
  }

  else
  {
    [v7 addFieldForKey:kWAMessageKeyNanPhSubscriberDatapathEndStateString value:@"N/A" options:5];
  }

  uint64_t v13 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s kWAMessageKeyNanPhClientSessionStartTime=%f kWAMessageKeyNanPhClientSessionEndTime=%f kWAMessageKeyNanPhClientS essionTime=%f kWAMessageKeyNanPhSubscriberEndState=%d nanPhSubscriberDatapathEndState=%d wifip2pdCrashWhileInNanPh Session=%d copresenceStartedDuringSession=%d nanPhClientTeardownReason=%d nanPhSubscriberStartError=%d awdlStarted DuringSession=%d",  "__WiFiMetricsManagerWAMessageSubmitPHClientMetric",  *((void *)a1 + 3),  *((void *)a1 + 4),  *(void *)&v8,  a1[18],  a1[10],  *((unsigned __int8 *)a1 + 16),  *((unsigned __int8 *)a1 + 104),  a1[22],  a1[14],  *((unsigned __int8 *)a1 + 105));
  }
  objc_autoreleasePoolPop(v13);
  sub_10002891C(v7);

LABEL_24:
  objc_autoreleasePoolPop(v4);
  objc_autoreleasePoolPop(v3);
  double result = 0.0;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void sub_100032C20(void *a1)
{
  if (!qword_100219860) {
    return;
  }
  int v2 = sub_100071B54(*(void *)(qword_100219860 + 16));
  uint64_t v3 = objc_autoreleasePoolPush();
  if (!v2)
  {
    uint64_t v27 = 0LL;
    id v28 = &v27;
    uint64_t v29 = 0x3052000000LL;
    id v30 = sub_100032FF8;
    uint64_t v31 = sub_100033008;
    id v32 = (id)0xAAAAAAAAAAAAAAAALL;
    id v32 = [a1 copy];
    uint64_t v21 = 0LL;
    id v22 = &v21;
    uint64_t v23 = 0x3052000000LL;
    CFNumberRef v24 = sub_100032FF8;
    id v25 = sub_100033008;
    uint64_t v26 = 0LL;
    v20[0] = 0LL;
    v20[1] = v20;
    v20[2] = 0x2020000000LL;
    v20[3] = 0LL;
    sub_100081554(*(void *)(qword_100219860 + 16));
    int v4 = sub_100081AE8(*(void *)(qword_100219860 + 16));
    if (+[WiFiPerfPerAssoc sharedInstance](&OBJC_CLASS___WiFiPerfPerAssoc, "sharedInstance"))
    {
      id v5 = objc_autoreleasePoolPush();
      id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v7 = *(void *)(qword_100219860 + 16);
      if (v7)
      {
        double v8 = (void *)sub_100063560(v7);
        if (v8)
        {
          double v9 = +[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", v8);
          float v10 = (__CFArray *)v9;
          if (v9)
          {
            if (-[NSMutableArray count](v9, "count"))
            {
              v33.length = (CFIndex)[v8 count];
              v33.id location = 0LL;
              CFArraySortValues(v10, v33, (CFComparatorFunction)sub_10009C1E4, 0LL);
              for (unint64_t i = 0LL; ; ++i)
              {
                else {
                  unint64_t v12 = (unint64_t)-[__CFArray count](v10, "count");
                }
                if (i >= v12) {
                  goto LABEL_26;
                }
                id v13 = -[__CFArray objectAtIndexedSubscript:](v10, "objectAtIndexedSubscript:", i);
                if (v13)
                {
                  uint64_t v14 = sub_1000951FC((uint64_t)v13, @"BSSID");
                  if (v14)
                  {
                    -[NSMutableArray addObject:](v6, "addObject:", v14);
                    continue;
                  }

                  context = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s failed to get BSSID of network from sorted list",  "__WiFiMetricsManagerCopyBSSIDsOfTwoMostUsedNetworks");
                  }
                }

                else
                {
                  context = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s failed to get WiFiNetworkRef from sorted list",  "__WiFiMetricsManagerCopyBSSIDsOfTwoMostUsedNetworks");
                  }
                }

                objc_autoreleasePoolPop(context);
              }
            }
          }
        }
      }

      id v6 = 0LL;
LABEL_26:
      objc_autoreleasePoolPop(v5);
      v22[5] = (uint64_t)v6;
      CFNumberRef v15 = *(dispatch_queue_s **)(qword_100219860 + 72);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100033014;
      block[3] = &unk_1001E2EB0;
      void block[4] = &v27;
      void block[5] = v20;
      BOOL v19 = v4 != 0;
      void block[6] = &v21;
      dispatch_async(v15, block);
    }

    else
    {

      CFNumberRef v16 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s WiFiConnectionQuality doesn't seem to be tasked",  "WiFiMetricsManagerSubmitConnectionQualityForAssociation");
      }
      objc_autoreleasePoolPop(v16);
    }

    _Block_object_dispose(v20, 8);
    _Block_object_dispose(&v21, 8);
    _Block_object_dispose(&v27, 8);
    objc_autoreleasePoolPop(v3);
    return;
  }

  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Camera is in Foreground",  "WiFiMetricsManagerSubmitConnectionQualityForAssociation");
  }
  objc_autoreleasePoolPop(v3);
}

void sub_100032FC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v12 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_100032FF8(uint64_t a1, uint64_t a2)
{
}

void sub_100033008(uint64_t a1)
{
}

void sub_100033014(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) objectForKeyedSubscript:@"ppaBSSIDConnected"];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend( +[WiFiLOIManager sharedWiFiLOIManager]( WiFiLOIManager,  "sharedWiFiLOIManager"),  "queryLOITypeAtLastLocation");
  if (!*(_BYTE *)(a1 + 56))
  {
    if (objc_msgSend( objc_msgSend( *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40),  "objectForKeyedSubscript:",  @"ppaIsNoMap"),  "BOOLValue"))
    {
      uint64_t v12 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s not submitting GEOWiFiConnectionQuality as current SSID has the _nomap suffix",  "WiFiMetricsManagerSubmitConnectionQualityForAssociation_block_invoke",  v18,  v19);
      }
      goto LABEL_28;
    }

    if (objc_msgSend( objc_msgSend( *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40),  "objectForKeyedSubscript:",  @"ppaIsApplePH"),  "BOOLValue"))
    {
      uint64_t v12 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s not submitting GEOWiFiConnectionQuality as this association was to an Apple device (IE check)",  "WiFiMetricsManagerSubmitConnectionQualityForAssociation_block_invoke",  v18,  v19);
      }
      goto LABEL_28;
    }

    if ((unint64_t)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) - 4LL) >= 0xFFFFFFFFFFFFFFFELL)
    {
      uint64_t v12 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s not submitting GEOWiFiConnectionQuality as CoreRoutine feels this device is likely at home or work",  "WiFiMetricsManagerSubmitConnectionQualityForAssociation_block_invoke",  v18,  v19);
      }
      goto LABEL_28;
    }

    if (!v2
      || !*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL)
      || [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) containsObject:v2])
    {
      uint64_t v12 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        uint64_t v16 = *(const __CFString **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
        if (!v16) {
          uint64_t v16 = @"NULL";
        }
        [(id)qword_100219F60 WFLog:3, "%s not submitting GEOWiFiConnectionQuality as BSSID for network described (%@) in scorecard matches a BSSID of the top two most used networks (%@)", "WiFiMetricsManagerSubmitConnectionQualityForAssociation_block_invoke", v2, v16 message];
      }

      goto LABEL_28;
    }

    BOOL v3 = (unint64_t)objc_msgSend( objc_msgSend( *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40),  "objectForKeyedSubscript:",  @"bytesIn"),  "unsignedIntegerValue") > 5 || (unint64_t)objc_msgSend( objc_msgSend( *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40),  "objectForKeyedSubscript:",  @"packetsIn"),  "unsignedIntegerValue") > 0xD05;
    if ((unint64_t)objc_msgSend( objc_msgSend( *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40),  "objectForKeyedSubscript:",  @"ppaAssociatedTime"),  "unsignedIntegerValue") <= 1 && !v3)
    {
      int v4 = objc_autoreleasePoolPush();
      id v5 = (void *)qword_100219F60;
      if (!qword_100219F60) {
        goto LABEL_23;
      }
      id v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
      if (v6)
      {
        uint64_t v7 = (uint64_t)objc_msgSend( objc_msgSend(v6, "objectForKeyedSubscript:", @"bytesIn"),  "unsignedIntegerValue");
        double v8 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
        if (v8)
        {
          uint64_t v9 = (uint64_t)objc_msgSend( objc_msgSend(v8, "objectForKeyedSubscript:", @"packetsIn"),  "unsignedIntegerValue");
LABEL_22:
          objc_msgSend( v5,  "WFLog:message:",  3,  "%s not submitting GEOWiFiConnectionQuality as scorecard lacks Rx value (scorecard bytesIn value: %lu packetsIn value %lu)",  "WiFiMetricsManagerSubmitConnectionQualityForAssociation_block_invoke",  v7,  v9);
LABEL_23:
          objc_autoreleasePoolPop(v4);
          uint64_t v12 = objc_autoreleasePoolPush();
          id v13 = (void *)qword_100219F60;
          if (qword_100219F60)
          {
            uint64_t v14 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
            if (v14) {
              uint64_t v15 = (uint64_t)objc_msgSend( objc_msgSend(v14, "objectForKeyedSubscript:", @"ppaAssociatedTime"),  "unsignedIntegerValue");
            }
            else {
              uint64_t v15 = 99LL;
            }
            objc_msgSend( v13,  "WFLog:message:",  3,  "%s not submitting GEOWiFiConnectionQuality as scorecard lacks associated time value, or (likely) we weren' t associated long enough (scorecard assoc time value: %lu)",  "WiFiMetricsManagerSubmitConnectionQualityForAssociation_block_invoke",  v15,  v19);
          }

void sub_1000333CC(void *a1, uint64_t a2)
{
  int v4 = objc_autoreleasePoolPush();
  if (!a1)
  {
    uint64_t v16 = objc_autoreleasePoolPush();
    uint64_t v17 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_25;
    }
    uint64_t v18 = "%s: nil message";
    goto LABEL_23;
  }

  uint64_t v36 = 0LL;
  id v5 = -[NSFileManager URLForDirectory:inDomain:appropriateForURL:create:error:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "URLForDirectory:inDomain:appropriateForURL:create:error:",  14LL,  1LL,  0LL,  1LL,  &v36);
  if (v36)
  {
    uint64_t v16 = objc_autoreleasePoolPush();
    uint64_t v17 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_25;
    }
    uint64_t v28 = v36;
    uint64_t v18 = "%s: failed to create application support directory with error %@";
    goto LABEL_20;
  }

  id v6 = -[NSURL URLByAppendingPathComponent:](v5, "URLByAppendingPathComponent:", @"com.apple.wifid");
  if (!-[NSFileManager fileExistsAtPath:isDirectory:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "fileExistsAtPath:isDirectory:",  -[NSURL path](v6, "path"),  0LL)) {
    -[NSFileManager createDirectoryAtURL:withIntermediateDirectories:attributes:error:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "createDirectoryAtURL:withIntermediateDirectories:attributes:error:",  v6,  1LL,  0LL,  &v36);
  }
  if (v36)
  {
    uint64_t v16 = objc_autoreleasePoolPush();
    uint64_t v17 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_25;
    }
    uint64_t v28 = v36;
    uint64_t v18 = "%s: failed to create wifid support directory with error %@";
    goto LABEL_20;
  }

  if (!v6)
  {
    uint64_t v16 = objc_autoreleasePoolPush();
    uint64_t v17 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_25;
    }
    uint64_t v28 = 0LL;
    uint64_t v18 = "%s: failed to create wifid support directory (path %@)";
LABEL_20:
    uint64_t v19 = 4LL;
LABEL_24:
    objc_msgSend(v17, "WFLog:message:", v19, v18, "__WiFiMetircsManagerWriteConnectionQualityMessageToFile", v28);
    goto LABEL_25;
  }

  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  -[NSDateFormatter setDateFormat:](v7, "setDateFormat:", @"yyyy'-'MM'-'dd-HHmmss");
  double v8 = -[NSDateFormatter stringFromDate:](v7, "stringFromDate:", +[NSDate date](&OBJC_CLASS___NSDate, "date"));

  uint64_t v9 = -[NSURL URLByAppendingPathComponent:isDirectory:]( v6,  "URLByAppendingPathComponent:isDirectory:",  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@_%@.json", a2, v8),  0LL);
  uint64_t v10 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: path %@", "__WiFiMetircsManagerWriteConnectionQualityMessageToFile", v9 message];
  }
  objc_autoreleasePoolPop(v10);
  id v11 = [a1 dictionaryRepresentation];
  if (!v11)
  {
    uint64_t v16 = objc_autoreleasePoolPush();
    uint64_t v17 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      uint64_t v18 = "%s: missing instant scorecard";
LABEL_23:
      uint64_t v19 = 3LL;
      goto LABEL_24;
    }

LABEL_25:
    objc_autoreleasePoolPop(v16);
    goto LABEL_38;
  }

  uint64_t v12 = v11;
  uint64_t v35 = 0LL;
  id v30 = v4;
  if (+[NSJSONSerialization isValidJSONObject:](&OBJC_CLASS___NSJSONSerialization, "isValidJSONObject:", v11))
  {
    id v13 = +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v12,  3LL,  &v35);
    if (v35) {
      goto LABEL_15;
    }
    uint64_t v14 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v13, 4LL);
    -[NSString writeToURL:atomically:encoding:error:](v14, "writeToURL:atomically:encoding:error:", v9, 1LL, 4LL, &v35);
    if (v14) {
      CFRelease(v14);
    }
    if (v35)
    {
LABEL_15:
      uint64_t v15 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: failed to write to path %@ error %@", "__WiFiMetircsManagerWriteConnectionQualityMessageToFile", v9, v35 message];
      }
    }

    else
    {
      uint64_t v15 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: local collection is enabled, writing to filesystem path %@", "__WiFiMetircsManagerWriteConnectionQualityMessageToFile", v9, v29 message];
      }
    }

    objc_autoreleasePoolPop(v15);
  }

  else
  {
    id v20 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Invalid data passed to JSON serialization. Dumping data...",  "__WiFiMetircsManagerWriteConnectionQualityMessageToFile");
    }
    objc_autoreleasePoolPop(v20);
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    id v21 = [v12 allKeys];
    id v22 = [v21 countByEnumeratingWithState:&v31 objects:v37 count:16];
    if (v22)
    {
      id v23 = v22;
      uint64_t v24 = *(void *)v32;
      do
      {
        for (unint64_t i = 0LL; i != v23; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v32 != v24) {
            objc_enumerationMutation(v21);
          }
          uint64_t v26 = *(void *)(*((void *)&v31 + 1) + 8LL * (void)i);
          uint64_t v27 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%@ Key: %@ Value: ", v26, objc_msgSend(v12, "objectForKey:", v26) message];
          }
          objc_autoreleasePoolPop(v27);
        }

        id v23 = [v21 countByEnumeratingWithState:&v31 objects:v37 count:16];
      }

      while (v23);
    }
  }

  int v4 = v30;
LABEL_38:
  objc_autoreleasePoolPop(v4);
}

    objc_autoreleasePoolPop(v20);
    goto LABEL_16;
  }

  uint64_t v7 = v6;
  objc_msgSend( v6,  "addFieldForKey:value:options:",  @"CompanionRSSI",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 8)),  7);
  objc_msgSend( v7,  "addFieldForKey:value:options:",  @"CompanionChannel",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 12)),  7);
  if (a2)
  {
    double v8 = (const __CFString *)sub_100095BC8(a2);
    if (CFStringCompare(v8, *(CFStringRef *)a1, 0LL))
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = 0LL;
      id v11 = 1LL;
    }

    else
    {
      uint64_t valuePtr = 0;
      uint64_t v12 = (const __CFNumber *)sub_100096A74((uint64_t)a2);
      if (v12)
      {
        CFNumberGetValue(v12, kCFNumberSInt32Type, &valuePtr);
        id v13 = valuePtr;
      }

      else
      {
        id v13 = 0;
      }

      uint64_t v10 = v13 == *(_DWORD *)(a1 + 12);
      id v11 = 1LL;
      uint64_t v9 = 1LL;
    }
  }

  else
  {
    id v11 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
  }

  objc_msgSend( v7,  "addFieldForKey:value:options:",  @"GizmoConnected",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11),  7);
  objc_msgSend( v7,  "addFieldForKey:value:options:",  @"GizmoConnectedToSameSSID",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v9),  7);
  objc_msgSend( v7,  "addFieldForKey:value:options:",  @"GizmoConnectedToSameChannel",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v10),  7);
  uint64_t v14 = objc_autoreleasePoolPush();
  uint64_t v15 = (void *)qword_100219F60;
  if (qword_100219F60)
  {
    uint64_t v16 = *(CFStringRef *)a1;
    uint64_t v17 = *(unsigned int *)(a1 + 8);
    uint64_t v18 = *(unsigned int *)(a1 + 12);
    uint64_t v19 = sub_100095BC8(a2);
    [v15 WFLog:3, "%s: CompanionSSID %@, CompanionRSSI %d, CompanionChannel %d, GizmoSSID %@, GizmoChannel %@", "__WiFiMetricsManagerWAMessageSubmitCompanionAssistedAJInfo", v16, v17, v18, v19, sub_100096A74((uint64_t)a2) message];
  }

  objc_autoreleasePoolPop(v14);
  sub_10002891C(v7);

LABEL_16:
  objc_autoreleasePoolPop(v4);
}

        id v5 = cf[0];
        if (cf[1]) {
          ((void (*)(uint64_t *, CFTypeRef, uint64_t, CFTypeRef))cf[1])(a1, v7[1], 82LL, v9[0]);
        }
        goto LABEL_51;
      case 9:
        if (BYTE8(v10))
        {
          a1[625] = 0LL;
          a1[626] = 0LL;
        }

  CFStringAppend(theString, @" Att");
  if ((a1 & 8) == 0)
  {
LABEL_6:
    if ((a1 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }

  -[WiFiPerfPerAssoc associatedStateDidChange:withAssociatedNetworkRecord:withChangeReason:]( v18,  "associatedStateDidChange:withAssociatedNetworkRecord:withChangeReason:",  v19,  v20,  v17);
LABEL_26:
  if (v8) {
    CFRelease(v8);
  }
  sub_1000D3350(a3);
  objc_autoreleasePoolPop(v6);
}

    uint64_t v18 = v15;
LABEL_26:
    objc_autoreleasePoolPop(v18);
    uint64_t v19 = off_1001E37A0;
LABEL_33:
    sub_10010D14C(a1, *v19, 0LL, 0LL);
    return;
  }

  uint64_t v9 = (_BYTE *)(a1 + 5496);
  if (!*(_BYTE *)(a1 + 6272))
  {
    uint64_t v10 = *v9;
    id v11 = objc_autoreleasePoolPush();
    if (!v10)
    {
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3 message:"Auto association attempt canceled because user auto join is disabled."];
      }
      uint64_t v18 = v11;
      goto LABEL_26;
    }

    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"User auto join preference bypassed because device is in priority-link setup phase/carplay"];
    }
    objc_autoreleasePoolPop(v11);
  }

  if (*(_DWORD *)(a1 + 20) != 1)
  {
    uint64_t v15 = objc_autoreleasePoolPush();
    uint64_t v16 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      uint64_t v17 = "Auto association attempt canceled because device is not powered.";
      goto LABEL_24;
    }

    goto LABEL_25;
  }

  if (*(_BYTE *)(a1 + 248))
  {
    uint64_t v12 = objc_autoreleasePoolPush();
    id v13 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      uint64_t v14 = "Auto association attempt canceled because WiFi tethering is enabled.";
LABEL_30:
      objc_msgSend(v13, "WFLog:message:", 3, v14, v40, v41, v42, v43);
      goto LABEL_31;
    }

    goto LABEL_31;
  }

  if (*(_BYTE *)(a1 + 249))
  {
    uint64_t v12 = objc_autoreleasePoolPush();
    id v13 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      uint64_t v14 = "Auto association attempt canceled because WiFi Direct Mode is enabled.";
      goto LABEL_30;
    }

        CFRelease(v17);
        CFRelease(v19);
        if (!v29) {
          goto LABEL_28;
        }
        uint64_t v37 = v29;
        goto LABEL_27;
      }
    }
  }

  id v39 = NSPOSIXErrorDomain;
  uint64_t v40 = 22LL;
LABEL_34:
  uint64_t v36 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v39,  v40,  0LL);
LABEL_28:
  if ([v5 response])
  {
    id v38 = (void (**)(id, NSError *, void))[v5 response];
    v38[2](v38, v36, 0LL);
  }
}

void sub_10003387C(uint64_t a1, const __CFDictionary *a2, unsigned int a3, int a4)
{
  unsigned int valuePtr = a3;
  if (!a1)
  {
    uint64_t v19 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null device",  "WiFiMetricsManagerTriggerDPSNotification");
    }
    goto LABEL_35;
  }

  if (!qword_100219860)
  {
    uint64_t v19 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null metrics",  "WiFiMetricsManagerTriggerDPSNotification");
    }
    goto LABEL_35;
  }

  if (sub_100071B54(*(void *)(qword_100219860 + 16)) == 1)
  {
    uint64_t v19 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Camera is in Foreground",  "WiFiMetricsManagerTriggerDPSNotification");
    }
    goto LABEL_35;
  }

  if (!*(void *)(qword_100219860 + 32))
  {
    uint64_t v19 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null deviceMetricsArray !!",  "WiFiMetricsManagerTriggerDPSNotification");
    }
    goto LABEL_35;
  }

  if (a2) {
    MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, a2);
  }
  else {
    MutableCFStringRef Copy = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  }
  uint64_t v7 = MutableCopy;
  if (!MutableCopy)
  {
    uint64_t v19 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null symptomDict",  "WiFiMetricsManagerTriggerDPSNotification");
    }
LABEL_35:
    objc_autoreleasePoolPop(v19);
    return;
  }

  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (!v8)
  {
    id v20 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null symptomRef",  "WiFiMetricsManagerTriggerDPSNotification");
    }
    objc_autoreleasePoolPop(v20);
    uint64_t v18 = v7;
    goto LABEL_23;
  }

  CFNumberRef v9 = v8;
  CFDictionaryAddValue(v7, @"symptom", v8);
  uint64_t v10 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Sending DPSNotification with symptom=%d!!",  "WiFiMetricsManagerTriggerDPSNotification",  valuePtr);
  }
  objc_autoreleasePoolPop(v10);
  if (a4) {
    CFBooleanRef v11 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v11 = kCFBooleanFalse;
  }
  CFDictionaryAddValue(v7, @"facetimeCallInProgress", v11);
  uint64_t v12 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    id v13 = "false";
    if (v11 == kCFBooleanTrue) {
      id v13 = "true";
    }
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Sending DPSNotification with facetimeStatus: %s!!",  "WiFiMetricsManagerTriggerDPSNotification",  v13);
  }

  objc_autoreleasePoolPop(v12);
  uint64_t v14 = objc_autoreleasePoolPush();
  uint64_t v22 = 0LL;
  id v23 = &v22;
  uint64_t v24 = 0x2020000000LL;
  CFTypeRef v25 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  CFTypeRef v25 = CFRetain(v7);
  uint64_t v15 = +[WiFiManagerAnalytics sharedInstance](&OBJC_CLASS___WiFiManagerAnalytics, "sharedInstance");
  uint64_t v16 = v23[3];
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_100033C64;
  v21[3] = &unk_1001E2ED8;
  v21[4] = &v22;
  -[WiFiManagerAnalytics prepareMessageForSubmission:withData:andReply:]( v15,  "prepareMessageForSubmission:withData:andReply:",  11075584LL,  v16,  v21);
  _Block_object_dispose(&v22, 8);
  objc_autoreleasePoolPop(v14);
  uint64_t v17 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Done DPSNotification !!",  "WiFiMetricsManagerTriggerDPSNotification");
  }
  objc_autoreleasePoolPop(v17);
  CFRelease(v7);
  CFRelease(v9);
  if (v11)
  {
    uint64_t v18 = v11;
LABEL_23:
    CFRelease(v18);
  }

void sub_100033C4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_100033C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s:  DPSNotification !!",  "WiFiMetricsManagerTriggerDPSNotification_block_invoke");
  }
  objc_autoreleasePoolPop(v6);
  if (!a2 || a3)
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s Error back preparing DPSNotification for submission: %@, or null WAMessageAWD", "WiFiMetricsManagerTriggerDPSNotification_block_invoke", a3 message];
    }
    objc_autoreleasePoolPop(v7);
  }

  else
  {
    -[WiFiManagerAnalytics triggerDatapathDiagnosticsNoReply:]( +[WiFiManagerAnalytics sharedInstance](&OBJC_CLASS___WiFiManagerAnalytics, "sharedInstance"),  "triggerDatapathDiagnosticsNoReply:",  a2);
  }

  CFNumberRef v8 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }

void sub_100033D50(uint64_t a1, const __CFDictionary *a2)
{
  int v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Sending SlowWiFi Notification !!",  "WiFiMetricsManagerTriggerSlowWiFiNotification");
  }
  objc_autoreleasePoolPop(v4);
  uint64_t v15 = 0LL;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000LL;
  uint64_t v18 = 0LL;
  if (!a1)
  {
    id v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null device",  "WiFiMetricsManagerTriggerSlowWiFiNotification");
    }
    goto LABEL_33;
  }

  if (!qword_100219860)
  {
    id v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null metrics",  "WiFiMetricsManagerTriggerSlowWiFiNotification");
    }
    goto LABEL_33;
  }

  if (sub_100071B54(*(void *)(qword_100219860 + 16)) == 1)
  {
    id v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Camera is in Foreground",  "WiFiMetricsManagerTriggerSlowWiFiNotification");
    }
    goto LABEL_33;
  }

  if (!*(void *)(qword_100219860 + 32))
  {
    id v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null deviceMetricsArray !!",  "WiFiMetricsManagerTriggerSlowWiFiNotification");
    }
    goto LABEL_33;
  }

  if ((+[WiFiUsagePrivacyFilter canPerformActionWithSampleRate:]( &OBJC_CLASS___WiFiUsagePrivacyFilter,  "canPerformActionWithSampleRate:",  3LL) & 1) == 0)
  {
    id v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: skipping this metric submission",  "WiFiMetricsManagerTriggerSlowWiFiNotification");
    }
    goto LABEL_33;
  }

  if (!a2)
  {
    id v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: no dict",  "WiFiMetricsManagerTriggerSlowWiFiNotification");
    }
LABEL_33:
    objc_autoreleasePoolPop(v13);
    goto LABEL_20;
  }

  MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, a2);
  v16[3] = (uint64_t)MutableCopy;
  if (sub_100054E50(a1)) {
    CFBooleanRef v6 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v6 = kCFBooleanFalse;
  }
  CFDictionaryAddValue((CFMutableDictionaryRef)v16[3], @"facetimeCallInProgress", v6);
  uint64_t v7 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    CFNumberRef v8 = "false";
    if (v6 == kCFBooleanTrue) {
      CFNumberRef v8 = "true";
    }
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Sending SlowWiFiNotification with facetimeStatus: %s!!",  "WiFiMetricsManagerTriggerSlowWiFiNotification",  v8);
  }

  objc_autoreleasePoolPop(v7);
  CFNumberRef v9 = objc_autoreleasePoolPush();
  uint64_t v10 = +[WiFiManagerAnalytics sharedInstance](&OBJC_CLASS___WiFiManagerAnalytics, "sharedInstance");
  uint64_t v11 = v16[3];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100034080;
  v14[3] = &unk_1001E2ED8;
  v14[4] = &v15;
  -[WiFiManagerAnalytics prepareMessageForSubmission:withData:andReply:]( v10,  "prepareMessageForSubmission:withData:andReply:",  11075588LL,  v11,  v14);
  objc_autoreleasePoolPop(v9);
  uint64_t v12 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Done SlowWiFi Notification !!",  "WiFiMetricsManagerTriggerSlowWiFiNotification");
  }
  objc_autoreleasePoolPop(v12);
  if (v6) {
    CFRelease(v6);
  }
LABEL_20:
  _Block_object_dispose(&v15, 8);
}

void sub_100034068( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100034080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFBooleanRef v6 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s:  SlowWiFi Notification !!",  "WiFiMetricsManagerTriggerSlowWiFiNotification_block_invoke");
  }
  objc_autoreleasePoolPop(v6);
  if (!a2 || a3)
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s Error back preparing SlowWiFi Notification for submission: %@, or null WAMessageAWD", "WiFiMetricsManagerTriggerSlowWiFiNotification_block_invoke", a3 message];
    }
    objc_autoreleasePoolPop(v7);
  }

  else
  {
    -[WiFiManagerAnalytics triggerDatapathDiagnosticsNoReply:]( +[WiFiManagerAnalytics sharedInstance](&OBJC_CLASS___WiFiManagerAnalytics, "sharedInstance"),  "triggerDatapathDiagnosticsNoReply:",  a2);
  }

  CFNumberRef v8 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }

void sub_10003416C(uint64_t a1, const void *a2, const void *a3)
{
  if (!a1)
  {
    CFBooleanRef v6 = objc_autoreleasePoolPush();
    uint64_t v7 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_12;
    }
    CFNumberRef v8 = "%s: deviceManager null ";
    goto LABEL_17;
  }

  if (!a2)
  {
    CFBooleanRef v6 = objc_autoreleasePoolPush();
    uint64_t v7 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_12;
    }
    CFNumberRef v8 = "%s: network null ";
LABEL_17:
    uint64_t v9 = 4LL;
    goto LABEL_7;
  }

  if (qword_100219860)
  {
    int v5 = sub_100071B54(*(void *)(qword_100219860 + 16));
    CFBooleanRef v6 = objc_autoreleasePoolPush();
    if (!v5)
    {
      id v10 = objc_alloc(&OBJC_CLASS___WAMessage);
      id v11 = [v10 initWithMetricName:kWAMessageMetricNameClientAssociation options:6];
      if (v11)
      {
        uint64_t v12 = v11;
        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeySSID,  +[NSString stringWithString:](NSString, "stringWithString:", sub_100095BC8(a2)),  6);
        objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyNetworkAuthFlags,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  sub_100098EA8((uint64_t)a2)),  6);
        if (a3)
        {
          objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeyMetricProcessImmediately,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1),  6);
          objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeySwitchedFromNetworkSSID,  +[NSString stringWithString:](NSString, "stringWithString:", sub_100095BC8(a3)),  6);
          objc_msgSend( v12,  "addFieldForKey:value:options:",  kWAMessageKeySwitchedFromNetworkAuthFlags,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  sub_100098EA8((uint64_t)a3)),  6);
        }

        sub_10002891C(v12);
      }

      else
      {
        id v13 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to alloc WAMessage for RoamStatus",  "__WiFiMetricsManagerWAMessageUpdateClientAssociationData");
        }
        objc_autoreleasePoolPop(v13);
      }

      goto LABEL_12;
    }

    uint64_t v7 = (void *)qword_100219F60;
    if (!qword_100219F60)
    {
LABEL_12:
      objc_autoreleasePoolPop(v6);
      return;
    }

    CFNumberRef v8 = "%s: Camera is in Foreground";
    uint64_t v9 = 3LL;
LABEL_7:
    objc_msgSend(v7, "WFLog:message:", v9, v8, "__WiFiMetricsManagerWAMessageUpdateClientAssociationData");
    goto LABEL_12;
  }

void sub_100034418(const void *a1, void *a2)
{
  if (!+[WiFiLocationManager isLocationValid:uptoSeconds:isHighAccuracy:]( &OBJC_CLASS___WiFiLocationManager,  "isLocationValid:uptoSeconds:isHighAccuracy:",  a2,  1LL,  60.0)) {
    return;
  }
  if (!a2)
  {
    int v5 = objc_autoreleasePoolPush();
    CFBooleanRef v6 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_16;
    }
    uint64_t v7 = "%s: location null ";
    goto LABEL_21;
  }

  if (!a1)
  {
    int v5 = objc_autoreleasePoolPush();
    CFBooleanRef v6 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_16;
    }
    uint64_t v7 = "%s: network null ";
LABEL_21:
    uint64_t v8 = 4LL;
    goto LABEL_8;
  }

  if (qword_100219860)
  {
    int v4 = sub_100071B54(*(void *)(qword_100219860 + 16));
    int v5 = objc_autoreleasePoolPush();
    if (!v4)
    {
      id v9 = objc_alloc(&OBJC_CLASS___WAMessage);
      id v10 = [v9 initWithMetricName:kWAMessageMetricNameNetworkGeotag options:6];
      if (v10)
      {
        id v11 = v10;
        if (!sub_100036E74(v10, a1, 6LL))
        {
          uint64_t v12 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to append SSID/BSSID to WAMessage",  "__WiFiMetricsManagerWAMessageUpdateNetworkGeoTag");
          }
          objc_autoreleasePoolPop(v12);
        }

        objc_msgSend( v11,  "addFieldForKey:value:options:",  kWAMessageKeyNetworkAuthFlags,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  sub_100098EA8((uint64_t)a1)),  6);
        uint64_t v13 = kWAMessageKeyLatitude;
        [a2 coordinate];
        objc_msgSend( v11,  "addFieldForKey:value:options:",  v13,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"),  6);
        uint64_t v14 = kWAMessageKeyLongitude;
        [a2 coordinate];
        objc_msgSend( v11,  "addFieldForKey:value:options:",  v14,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v15),  6);
        id v16 = [a2 timestamp];
        uint64_t v17 = kWAMessageKeyMetricDate;
        [v16 timeIntervalSinceReferenceDate];
        objc_msgSend( v11,  "addFieldForKey:value:options:",  v17,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"),  6);
        sub_10002891C(v11);
      }

      else
      {
        uint64_t v18 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to alloc WAMessage for RoamStatus",  "__WiFiMetricsManagerWAMessageUpdateNetworkGeoTag");
        }
        objc_autoreleasePoolPop(v18);
      }

      goto LABEL_16;
    }

    CFBooleanRef v6 = (void *)qword_100219F60;
    if (!qword_100219F60)
    {
LABEL_16:
      objc_autoreleasePoolPop(v5);
      return;
    }

    uint64_t v7 = "%s: Camera is in Foreground";
    uint64_t v8 = 3LL;
LABEL_8:
    objc_msgSend(v6, "WFLog:message:", v8, v7, "__WiFiMetricsManagerWAMessageUpdateNetworkGeoTag");
    goto LABEL_16;
  }

void sub_1000346F8(uint64_t a1, const void *a2, int a3)
{
  CFBooleanRef v6 = objc_autoreleasePoolPush();
  CFTypeID v90 = 0LL;
  value = 0LL;
  CFTypeID v89 = 0LL;
  if (a3) {
    uint64_t v7 = 7LL;
  }
  else {
    uint64_t v7 = 6LL;
  }
  if (!qword_100219860)
  {
    unsigned int v87 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null metrics",  "WiFiMetricsManagerUpdateParsedBeaconInfo");
    }
    goto LABEL_428;
  }

  uint64_t v8 = *(void *)(qword_100219860 + 16);
  if (!v8)
  {
    unsigned int v87 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null metrics manager",  "WiFiMetricsManagerUpdateParsedBeaconInfo");
    }
    goto LABEL_428;
  }

  if (sub_100071B54(v8) == 1)
  {
    unsigned int v87 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Camera is in Foreground",  "WiFiMetricsManagerUpdateParsedBeaconInfo");
    }
    goto LABEL_428;
  }

  if (!a1)
  {
    unsigned int v87 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null WiFiManagerRef",  "WiFiMetricsManagerUpdateParsedBeaconInfo");
    }
    goto LABEL_428;
  }

  if (!a2)
  {
    unsigned int v87 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null WiFiNetworkRef",  "WiFiMetricsManagerUpdateParsedBeaconInfo");
    }
    goto LABEL_428;
  }

  id v9 = objc_alloc(&OBJC_CLASS___WAMessage);
  id v10 = [v9 initWithMetricName:kWAMessageMetricNameParsedBeaconInfo options:v7];
  if (!v10)
  {
    unsigned int v87 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null waMsg",  "WiFiMetricsManagerUpdateParsedBeaconInfo");
    }
LABEL_428:
    objc_autoreleasePoolPop(v87);
    goto LABEL_415;
  }

  id v11 = v10;
  else {
    uint64_t v12 = 6LL;
  }
  if (!sub_100036E74(v11, a2, v12))
  {
    uint64_t v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to append SSID/BSSID to WAMessage",  "WiFiMetricsManagerUpdateParsedBeaconInfo");
    }
    objc_autoreleasePoolPop(v13);
  }

  uint64_t v14 = objc_autoreleasePoolPush();
  double v15 = (void *)qword_100219F60;
  if (qword_100219F60)
  {
    id v16 = sub_100095BC8(a2);
    uint64_t v17 = sub_1000951FC((uint64_t)a2, @"BSSID");
    uint64_t v18 = "Remote";
    if (!a3) {
      uint64_t v18 = "Local";
    }
    [v15 WFLog:3, "%s: Submitting ParsedBeaconInfo waMsg for ssid:%@ bssid:%@ with %s opts.", "WiFiMetricsManagerUpdateParsedBeaconInfo", v16, v17, v18 message];
  }

  objc_autoreleasePoolPop(v14);
  uint64_t v19 = sub_1000951FC((uint64_t)a2, @"CHANNEL");
  if (v19) {
    [v11 addFieldForKey:@"channel" value:v19 options:v7];
  }
  id v20 = sub_1000951FC((uint64_t)a2, @"CHANNEL_FLAGS");
  if (v20) {
    [v11 addFieldForKey:@"channelFlags" value:v20 options:v7];
  }
  id v21 = (void *)sub_1000951FC((uint64_t)a2, @"NOISE");
  value = v21;
  if (v21) {
    [v11 addFieldForKey:@"noise" value:v21 options:v7];
  }
  uint64_t v22 = sub_1000951FC((uint64_t)a2, @"SNR");
  if (v22) {
    [v11 addFieldForKey:@"snr" value:v22 options:v7];
  }
  id v23 = sub_1000951FC((uint64_t)a2, @"RSSI");
  if (v23) {
    [v11 addFieldForKey:@"rssi" value:v23 options:v7];
  }
  uint64_t v24 = sub_1000951FC((uint64_t)a2, @"BEACON_INT");
  if (v24) {
    [v11 addFieldForKey:@"beaconInt" value:v24 options:v7];
  }
  CFTypeRef v25 = (void *)sub_1000951FC((uint64_t)a2, @"AP_MODE");
  value = v25;
  if (v25) {
    [v11 addFieldForKey:@"apMode" value:v25 options:v7];
  }
  uint64_t v26 = sub_1000951FC((uint64_t)a2, @"PHY_MODE");
  if (v26) {
    [v11 addFieldForKey:@"phyMode" value:v26 options:v7];
  }
  uint64_t v27 = sub_1000951FC((uint64_t)a2, @"CAPABILITIES");
  if (v27) {
    [v11 addFieldForKey:@"capabilities" value:v27 options:v7];
  }
  uint64_t v28 = (void *)sub_1000951FC((uint64_t)a2, @"RATES");
  uint64_t v88 = v28;
  if (v28) {
    objc_msgSend( v11,  "addFieldForKey:value:options:",  @"rates",  objc_msgSend(v28, "componentsJoinedByString:", @":"),  v7);
  }
  uint64_t v29 = (void *)sub_1000951FC((uint64_t)a2, @"AGE");
  value = v29;
  if (v29) {
    [v11 addFieldForKey:@"age" value:v29 options:v7];
  }
  id v30 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"WPA_IE");
  if (v30)
  {
    __int128 v31 = v30;
    if (CFDictionaryGetValueIfPresent(v31, @"IE_KEY_WPA_UCIPHERS", (const void **)&v88)) {
      objc_msgSend( v11,  "addFieldForKey:value:options:",  @"wpaIEUCiphers",  objc_msgSend(v88, "componentsJoinedByString:", @":"),  v7);
    }
    if (CFDictionaryGetValueIfPresent(v31, @"IE_KEY_WPA_AUTHSELS", (const void **)&v88)) {
      objc_msgSend( v11,  "addFieldForKey:value:options:",  @"wpaIEAuthSels",  objc_msgSend(v88, "componentsJoinedByString:", @":"),  v7);
    }
  }

  __int128 v32 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"RSN_IE");
  if (v32)
  {
    __int128 v33 = v32;
    if (CFDictionaryGetValueIfPresent(v33, @"IE_KEY_RSN_UCIPHERS", (const void **)&v88)) {
      objc_msgSend( v11,  "addFieldForKey:value:options:",  @"rsnIEUCiphers",  objc_msgSend(v88, "componentsJoinedByString:", @":"),  v7);
    }
    if (CFDictionaryGetValueIfPresent(v33, @"IE_KEY_RSN_AUTHSELS", (const void **)&v88)) {
      objc_msgSend( v11,  "addFieldForKey:value:options:",  @"rsnIEAuthSels",  objc_msgSend(v88, "componentsJoinedByString:", @":"),  v7);
    }
    __int128 v34 = (const __CFDictionary *)CFDictionaryGetValue(v33, @"IE_KEY_RSN_CAPS");
    if (v34)
    {
      uint64_t v35 = v34;
    }
  }

  uint64_t v36 = (void *)sub_1000951FC((uint64_t)a2, @"WAPI");
  value = v36;
  if (v36) {
    [v11 addFieldForKey:@"wapiPolicy" value:v36 options:v7];
  }
  uint64_t v37 = (void *)sub_1000951FC((uint64_t)a2, @"WEP");
  value = v37;
  if (v37) {
    [v11 addFieldForKey:@"wep" value:v37 options:v7];
  }
  id v38 = (void *)sub_1000951FC((uint64_t)a2, @"SCAN_RESULT_FROM_PROBE_RSP");
  value = v38;
  if (v38) {
    [v11 addFieldForKey:@"scanResultFromProbeRSP" value:v38 options:v7];
  }
  id v39 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"APPLE_IE");
  if (v39)
  {
    uint64_t v40 = v39;
  }

  uint64_t v41 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"IOS_IE");
  if (v41)
  {
    uint64_t v42 = v41;
  }

  uint64_t v43 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"APPLE_DEVICE_IE");
  if (v43)
  {
    id v44 = v43;
    if (CFDictionaryGetValueIfPresent( v44,  @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_MFI_CONFIG_V1",  (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIESupportsMFIConfigV1" value:value options:v7];
    }

    if (CFDictionaryGetValueIfPresent( v44,  @"APPLE_DEVICE_IE_FEATURE_INTERFERENCE_ROBUSTNESS",  (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIEInterferenceRobustness" value:value options:v7];
    }

    if (CFDictionaryGetValueIfPresent( v44,  @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_IAP_OVER_WIFI",  (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIESupportsIAPOverWiFi" value:value options:v7];
    }

    if (CFDictionaryGetValueIfPresent( v44,  @"APPLE_DEVICE_IE_FEATURE_PROVIDES_INTERNET_ACCESS",  (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIEProvidesInternetAccess" value:value options:v7];
    }

    if (CFDictionaryGetValueIfPresent( v44,  @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_ACP_CONFIG_V1",  (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIESupportsACPConfigV1" value:value options:v7];
    }

    if (CFDictionaryGetValueIfPresent( v44,  @"APPLE_DEVICE_IE_FEATURE_RECENT_PHYSICAL_CONTACT",  (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIERecentPhysicalContact" value:value options:v7];
    }

    if (CFDictionaryGetValueIfPresent( v44,  @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_24GHZ_WIFI_NETWORKS",  (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIESupports24GHzWiFi" value:value options:v7];
    }

    if (CFDictionaryGetValueIfPresent( v44,  @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_5GHZ_WIFI_NETWORKS",  (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIESupports5GHzWiFi" value:value options:v7];
    }

    if (CFDictionaryGetValueIfPresent( v44,  @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_BUFFERED_AIRPLAY",  (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIESupportsBufferedAirPlay" value:value options:v7];
    }

    if (CFDictionaryGetValueIfPresent( v44,  @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_MFI_HARDWARE_AUTH",  (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIESupportsMFIHardwareAuth" value:value options:v7];
    }

    if (CFDictionaryGetValueIfPresent( v44,  @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_SOFTWARE_TOKEN_AUTH",  (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIESupportsSoftwareTokenAuth" value:value options:v7];
    }

    if (CFDictionaryGetValueIfPresent( v44,  @"APPLE_DEVICE_IE_FEATURE_SUPPORTS_SOFTWARE_CERT_AUTH",  (const void **)&value))
    {
      [v11 addFieldForKey:@"deviceIESupportsCertAuth" value:value options:v7];
    }
  }

  id v45 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"APPLE_SWAP_IE");
  if (v45)
  {
    __int128 v46 = v45;
    if (CFDictionaryGetValueIfPresent( v46,  @"SWAP_IE_FEATURE_INTERNET_CONNECTION_SHARING_ENABLED",  (const void **)&value))
    {
      [v11 addFieldForKey:@"swapIEInternetConnectionSharingEnabled" value:value options:v7];
    }
  }

  __int128 v47 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"80211D_IE");
  if (v47)
  {
    __int128 v48 = v47;
    if (CFDictionaryGetValueIfPresent(v48, @"IE_KEY_80211D_CHAN_INFO_ARRAY", (const void **)&v88)) {
      objc_msgSend( v11,  "addFieldForKey:value:options:",  @"dot11DIEChannelInfoArray",  objc_msgSend(v88, "componentsJoinedByString:", @":"),  v7);
    }
  }

  __int128 v49 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"SES_IE");
  if (v49)
  {
    id v50 = v49;
  }

  uint64_t v51 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"HT_CAPS_IE");
  if (v51)
  {
    CFTypeID v52 = v51;
  }

  size_t v53 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"HT_IE");
  if (v53)
  {
    CFIndex v54 = v53;
  }

  size_t v55 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"VHT_CAPS_IE");
  if (v55)
  {
    double v56 = v55;
  }

  size_t v57 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"VHT_IE");
  if (v57)
  {
    CFTypeID v58 = v57;
  }

  CFStringRef v59 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"11U_INTERWORKING_IE");
  if (v59)
  {
    CFTypeID v60 = v59;
  }

  uint64_t v61 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"HOTSPOT20_IE");
  if (v61)
  {
    unsigned int v62 = v61;
  }

  CFTypeID v63 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"QBSS_LOAD_IE");
  if (v63)
  {
    CFTypeID v64 = v63;
  }

  CFStringRef v65 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"MOBILITY_DOMAIN_IE");
  if (v65)
  {
    id v66 = v65;
  }

  id v67 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"EXT_CAPS");
  CFTypeID v68 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"FAST_ENTERPRISE_NETWORK");
  if (v68)
  {
    CFStringRef v69 = v68;
  }

  unint64_t v70 = (void *)sub_1000951FC((uint64_t)a2, @"HE_CAP");
  CFTypeID v89 = v70;
  if (v70) {
    [v11 addFieldForKey:@"heCap" value:v70 options:v7];
  }
  int64_t v71 = (void *)sub_1000951FC((uint64_t)a2, @"HE_OP");
  CFTypeID v89 = v71;
  if (v71) {
    [v11 addFieldForKey:@"heOp" value:v71 options:v7];
  }
  uint64_t v72 = (void *)sub_1000951FC((uint64_t)a2, @"HE_MU_EDCA");
  CFTypeID v89 = v72;
  if (v72) {
    [v11 addFieldForKey:@"heMuEdca" value:v72 options:v7];
  }
  CFTypeID v73 = (void *)sub_1000951FC((uint64_t)a2, @"HE_QBSS_LOAD");
  CFTypeID v89 = v73;
  if (v73) {
    [v11 addFieldForKey:@"heQBSSLoad" value:v73 options:v7];
  }
  CFStringRef v74 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"WPS_BEACON_IE");
  if (v74)
  {
    uint64_t v75 = v74;
    unint64_t v76 = (const __CFDictionary *)CFDictionaryGetValue(v75, @"WPS_PROB_RESP_IE");
    if (v76)
    {
      uint64_t v77 = v76;
      CFTypeID v78 = (const __CFDictionary *)CFDictionaryGetValue(v77, @"IE_KEY_WPS_PRIMARY_DEV_TYPE");
      if (v78)
      {
        CFStringRef v79 = v78;
      }
    }
  }

  CFStringRef v80 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"WPS_PROB_RESP_IE");
  if (v80)
  {
    int64_t v81 = v80;
    int64_t v82 = (const __CFDictionary *)CFDictionaryGetValue(v81, @"IE_KEY_WPS_PRIMARY_DEV_TYPE");
    CFTypeID v83 = v82;
    if (v82)
    {
    }
  }

  uint64_t v84 = (void *)sub_1000951FC((uint64_t)a2, @"CHANNEL_WIDTH");
  value = v84;
  if (v84) {
    [v11 addFieldForKey:@"channelWidth" value:v84 options:v7];
  }
  CFIndex v85 = (void *)sub_1000951FC((uint64_t)a2, @"SCAN_DIRECTED");
  value = v85;
  if (v85) {
    [v11 addFieldForKey:@"scanDirected" value:v85 options:v7];
  }
  if (MGGetBoolAnswer(@"apple-internal-install"))
  {
    unsigned int v86 = (void *)sub_1000951FC((uint64_t)a2, @"SCAN_BSSID_LIST");
    uint64_t v88 = v86;
    if (v86) {
      objc_msgSend( v11,  "addFieldForKey:value:options:",  @"scanBssidList",  objc_msgSend(v86, "componentsJoinedByString:", @":"),  v7);
    }
  }

  sub_10002891C(v11);

LABEL_415:
  objc_autoreleasePoolPop(v6);
}

uint64_t sub_100036E74(void *a1, const void *a2, uint64_t a3)
{
  if (!a1)
  {
    CFBooleanRef v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: waMsg is NULL",  "__WiFiMetricsManagerWAMessageAppendSSIDandBSSID");
    }
    goto LABEL_17;
  }

  CFBooleanRef v6 = objc_autoreleasePoolPush();
  if (!a2)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: network is NULL",  "__WiFiMetricsManagerWAMessageAppendSSIDandBSSID");
    }
    goto LABEL_17;
  }

  uint64_t v7 = sub_100095BC8(a2);
  uint64_t v8 = sub_1000951FC((uint64_t)a2, @"BSSID");
  if (!v7)
  {
    uint64_t v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: ssid is NULL",  "__WiFiMetricsManagerWAMessageAppendSSIDandBSSID");
    }
    goto LABEL_16;
  }

  id v9 = v8;
  if (!v8)
  {
    uint64_t v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: bssid is NULL",  "__WiFiMetricsManagerWAMessageAppendSSIDandBSSID");
    }
LABEL_16:
    objc_autoreleasePoolPop(v12);
LABEL_17:
    uint64_t v10 = 0LL;
    goto LABEL_6;
  }

  objc_msgSend( a1,  "addFieldForKey:value:options:",  kWAMessageKeySSID,  +[NSString stringWithString:](NSString, "stringWithString:", v7),  a3);
  objc_msgSend( a1,  "addFieldForKey:value:options:",  kWAMessageKeyBSSID,  +[NSString stringWithString:](NSString, "stringWithString:", v9),  a3);
  uint64_t v10 = 1LL;
LABEL_6:
  objc_autoreleasePoolPop(v6);
  return v10;
}

void sub_100037030(_OWORD *a1)
{
  uint64_t v8 = 0LL;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000LL;
  uint64_t v11 = 0LL;
  if (!a1)
  {
    int v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null stats",  "WiFiMetricsManagerSubmitDpsProbeStats");
    }
    goto LABEL_5;
  }

  if (qword_100219860)
  {
    if (sub_100071B54(*(void *)(qword_100219860 + 16)) == 1)
    {
      int v4 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Camera is in Foreground",  "WiFiMetricsManagerSubmitDpsProbeStats");
      }
    }

    else
    {
      id v2 = malloc(0x20uLL);
      v9[3] = (uint64_t)v2;
      __int128 v3 = a1[1];
      _OWORD *v2 = *a1;
      v2[1] = v3;
      int v4 = objc_autoreleasePoolPush();
      int v5 = +[WiFiManagerAnalytics sharedInstance](&OBJC_CLASS___WiFiManagerAnalytics, "sharedInstance");
      uint64_t v6 = v9[3];
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472LL;
      v7[2] = sub_1000371A0;
      v7[3] = &unk_1001E2ED8;
      v7[4] = &v8;
      -[WiFiManagerAnalytics prepareMessageForSubmission:withData:andReply:]( v5,  "prepareMessageForSubmission:withData:andReply:",  11075585LL,  v6,  v7);
    }

void sub_100037188( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000371A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    int v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s Error back preparing DPSActiveProbeStats for submission: %@, or null WAMessage", "WiFiMetricsManagerSubmitDpsProbeStats_block_invoke", a3 message];
    }
    objc_autoreleasePoolPop(v5);
  }

  else
  {
    -[WiFiManagerAnalytics triggerDatapathDiagnosticsNoReply:]( +[WiFiManagerAnalytics sharedInstance](&OBJC_CLASS___WiFiManagerAnalytics, "sharedInstance"),  "triggerDatapathDiagnosticsNoReply:",  a2);
  }

  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v7 = *(void **)(v6 + 24);
  if (v7)
  {
    free(v7);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  }

  *(void *)(v6 + 24) = 0LL;
}

void sub_100037250(_OWORD *a1)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  uint64_t v10 = 0LL;
  if (!a1)
  {
    __int128 v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null stats",  "WiFiMetricsManagerSubmitDpsLinkStateChangeEvent");
    }
    goto LABEL_5;
  }

  if (qword_100219860)
  {
    if (sub_100071B54(*(void *)(qword_100219860 + 16)) == 1)
    {
      __int128 v3 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Camera is in Foreground",  "WiFiMetricsManagerSubmitDpsLinkStateChangeEvent");
      }
    }

    else
    {
      id v2 = malloc(0x10uLL);
      void v8[3] = (uint64_t)v2;
      _OWORD *v2 = *a1;
      __int128 v3 = objc_autoreleasePoolPush();
      int v4 = +[WiFiManagerAnalytics sharedInstance](&OBJC_CLASS___WiFiManagerAnalytics, "sharedInstance");
      uint64_t v5 = v8[3];
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      v6[2] = sub_1000373C0;
      v6[3] = &unk_1001E2ED8;
      v6[4] = &v7;
      -[WiFiManagerAnalytics prepareMessageForSubmission:withData:andReply:]( v4,  "prepareMessageForSubmission:withData:andReply:",  11075586LL,  v5,  v6);
    }

void sub_1000373A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000373C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    uint64_t v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s Error back preparing DPSLinkStateChangeEvent for submission: %@, or null WAMessage", "WiFiMetricsManagerSubmitDpsLinkStateChangeEvent_block_invoke", a3 message];
    }
    objc_autoreleasePoolPop(v5);
  }

  else
  {
    -[WiFiManagerAnalytics triggerDatapathDiagnosticsNoReply:]( +[WiFiManagerAnalytics sharedInstance](&OBJC_CLASS___WiFiManagerAnalytics, "sharedInstance"),  "triggerDatapathDiagnosticsNoReply:",  a2);
  }

  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v7 = *(void **)(v6 + 24);
  if (v7)
  {
    free(v7);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
  }

  *(void *)(v6 + 24) = 0LL;
}

void sub_100037470(const __CFDictionary *a1)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  uint64_t v10 = 0LL;
  if (!a1)
  {
    __int128 v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null info",  "WiFiMetricsManagerSubmitDpsAccessPointInfo");
    }
    goto LABEL_5;
  }

  if (qword_100219860)
  {
    if (sub_100071B54(*(void *)(qword_100219860 + 16)) == 1)
    {
      __int128 v3 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Camera is in Foreground",  "WiFiMetricsManagerSubmitDpsAccessPointInfo");
      }
    }

    else
    {
      CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, a1);
      void v8[3] = (uint64_t)Copy;
      __int128 v3 = objc_autoreleasePoolPush();
      int v4 = +[WiFiManagerAnalytics sharedInstance](&OBJC_CLASS___WiFiManagerAnalytics, "sharedInstance");
      uint64_t v5 = v8[3];
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      v6[2] = sub_1000375E4;
      v6[3] = &unk_1001E2ED8;
      v6[4] = &v7;
      -[WiFiManagerAnalytics prepareMessageForSubmission:withData:andReply:]( v4,  "prepareMessageForSubmission:withData:andReply:",  11075587LL,  v5,  v6);
    }

void sub_1000375CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000375E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    uint64_t v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s Error back preparing DpsAccessPointInfo for submission: %@, or null WAMessage", "WiFiMetricsManagerSubmitDpsAccessPointInfo_block_invoke", a3 message];
    }
    objc_autoreleasePoolPop(v5);
  }

  else
  {
    -[WiFiManagerAnalytics triggerDatapathDiagnosticsNoReply:]( +[WiFiManagerAnalytics sharedInstance](&OBJC_CLASS___WiFiManagerAnalytics, "sharedInstance"),  "triggerDatapathDiagnosticsNoReply:",  a2);
  }

  uint64_t v6 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }

void sub_100037694(unsigned int *a1)
{
  if (a1 && qword_100219860)
  {
    int v2 = sub_100071B54(*(void *)(qword_100219860 + 16));
    __int128 v3 = objc_autoreleasePoolPush();
    if (v2 == 1)
    {
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Camera is in Foreground",  "WiFiMetricsManagerSubmitPrivateMacStats");
      }
    }

    else
    {
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WFMacRandomisation : Submitting PrivateMacStats for WA. event type <%u>, private mac type <%u>, toggled? < %d>, underClassification? <%d>, disabledByProfile? <%d>",  "WiFiMetricsManagerSubmitPrivateMacStats",  *a1,  a1[1],  *((unsigned __int8 *)a1 + 8),  *((unsigned __int8 *)a1 + 9),  *((unsigned __int8 *)a1 + 10));
      }
      objc_autoreleasePoolPop(v3);
      __int128 v3 = objc_autoreleasePoolPush();
      int v4 = objc_autoreleasePoolPush();
      id v5 = objc_alloc(&OBJC_CLASS___WAMessage);
      id v6 = [v5 initWithMetricName:kWAMessageMetricNamePrivateMacStats options:5];
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = (int)*a1;
        else {
          uint64_t v9 = (const __CFString *)*((void *)&off_1001E2FE8 + v8);
        }
        objc_msgSend( v6,  "addFieldForKey:value:options:",  kWAMessageKeyPrivateMacEvent,  +[NSString stringWithString:](NSString, "stringWithString:", v9),  5);
        uint64_t v10 = (int)a1[1];
        else {
          uint64_t v11 = (const __CFString *)*((void *)&off_1001E3028 + v10);
        }
        objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyPrivateMacType,  +[NSString stringWithString:](NSString, "stringWithString:", v11),  5);
        objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyPrivateMacToggled,  +[NSNumber numberWithUnsignedChar:]( NSNumber,  "numberWithUnsignedChar:",  *((unsigned __int8 *)a1 + 8)),  5);
        objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyPrivateMacUnderClassification,  +[NSNumber numberWithUnsignedChar:]( NSNumber,  "numberWithUnsignedChar:",  *((unsigned __int8 *)a1 + 9)),  5);
        objc_msgSend( v7,  "addFieldForKey:value:options:",  kWAMessageKeyPrivateMacDisabledByProfile,  +[NSNumber numberWithUnsignedChar:]( NSNumber,  "numberWithUnsignedChar:",  *((unsigned __int8 *)a1 + 10)),  5);
        sub_10002891C(v7);
      }

      else
      {
        uint64_t v12 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Failed to alloc WAMessage for PrivateMacStats",  "__WiFiMetricsManagerWAMessageSubmitPrivateMacStats");
        }
        objc_autoreleasePoolPop(v12);
      }

      objc_autoreleasePoolPop(v4);
    }

    objc_autoreleasePoolPop(v3);
  }

uint64_t sub_100037928(uint64_t result, uint64_t a2)
{
  if (!result) {
    return result;
  }
  if (!a2) {
    return result;
  }
  __int128 v3 = (const void *)result;
  *(void *)(a2 + 4) = 1LL;
  double result = (uint64_t)sub_1000951FC(result, @"PRIVATE_MAC_ADDRESS");
  if (!result) {
    return result;
  }
  int v4 = (const void *)result;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  double result = CFGetTypeID(v4);
  if (TypeID != result) {
    return result;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v4, @"PRIVATE_MAC_ADDRESS_TYPE");
  unsigned int v7 = sub_10003B810(Value);
  if (v7 == 3)
  {
    *(_DWORD *)(a2 + 4) = 0;
  }

  else
  {
    if (v7 == 2)
    {
      int v8 = 2;
    }

    else
    {
      if (v7 != 1)
      {
        uint64_t v9 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:4, "WFMacRandomisation : Unknow private MAC type for network [%@]", sub_100095BC8(v3) message];
        }
        objc_autoreleasePoolPop(v9);
        goto LABEL_15;
      }

      int v8 = 1;
    }

    *(_DWORD *)(a2 + 4) = v8;
  }

LABEL_15:
  CFBooleanRef v10 = (CFBooleanRef)sub_1000951FC((uint64_t)v3, @"MacAddressRandomisationTagMigratedNetwork");
  if (v10) {
    *(_BYTE *)(a2 + 9) = v10 == kCFBooleanTrue;
  }
  CFBooleanRef v11 = (CFBooleanRef)sub_1000951FC((uint64_t)v3, @"PrivateMacFeatureToggled");
  if (v11) {
    BOOL v12 = v11 == kCFBooleanTrue;
  }
  else {
    BOOL v12 = 0;
  }
  char v13 = v12;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v13;
  CFBooleanRef v14 = (CFBooleanRef)sub_1000951FC((uint64_t)v3, @"PrivateMacDefaultToOFF");
  if (v14) {
    BOOL v15 = v14 == kCFBooleanTrue;
  }
  else {
    BOOL v15 = 0;
  }
  char v16 = v15;
  *(_BYTE *)(a2 + 10) = v16;
  double result = (uint64_t)sub_100096670((uint64_t)v3);
  if ((_DWORD)result == 1)
  {
    BOOL v17 = 1;
  }

  else
  {
    double result = sub_10009FDC8((uint64_t)v3);
    BOOL v17 = (_DWORD)result == 2;
  }

  *(_BYTE *)(a2 + 11) = v17;
  return result;
}

      objc_autoreleasePoolPop(v6);
      goto LABEL_6;
    }

    id v6 = objc_autoreleasePoolPush();
    unsigned int v7 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_15;
    }
    int v8 = "%s: Camera is in Foreground";
LABEL_11:
    uint64_t v9 = 3LL;
LABEL_14:
    objc_msgSend(v7, "WFLog:message:", v9, v8, "__WiFiMetricsManagerWAMessageUpdateHistoricalKnownNetworkQuality");
    goto LABEL_15;
  }

  CFBooleanRef v11 = SCPreferencesUnlock(prefs);
  if (!(_DWORD)v11)
  {
    BOOL v12 = SCError();
    char v13 = SCErrorString(v12);
    CFBooleanRef v14 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      BOOL v15 = "SCError Unavailable";
      if (v13) {
        BOOL v15 = v13;
      }
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "SCPreferencesUnlock() %s", v15);
    }

    objc_autoreleasePoolPop(v14);
  }

  return v11;
}

  uint64_t v19 = CFDictionaryGetCount(Mutable);
  if (v19) {
    uint64_t v19 = (CFIndex)CFRetain(Mutable);
  }
  *(void *)(a1 + 112) = v19;
LABEL_18:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v7;
}

      CFRelease(v6);
    }

    else
    {
      char v13 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Failed to create dict",  "WiFiDeviceSetNanCapabilityInHotspotIe");
      }
      objc_autoreleasePoolPop(v13);
    }
  }

  BOOL v12 = -1LL;
LABEL_16:
  if (a5) {
LABEL_17:
  }
    *a5 = Count;
LABEL_18:
  if (a4) {
    *a4 = v12;
  }
}

  BOOL v15 = sub_100012DBC(v8);
  if (v15)
  {
    char v16 = v15;
    unsigned int v7 = sub_10006D08C((void *)a1, @"List of policies", v15, 1);
    CFRelease(v16);
    if ((_DWORD)v7)
    {
      BOOL v17 = objc_autoreleasePoolPush();
      uint64_t v18 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        if ((const __SCPreferences *)TypeID != v6) {
          a2 = sub_100012B90((uint64_t)a2);
        }
        [v18 WFLog:3, "Removed %@ from policies list", a2 message];
      }

      objc_autoreleasePoolPop(v17);
    }
  }

  else
  {
LABEL_27:
    unsigned int v7 = 0LL;
  }

  sub_10003A310(v10, v7);

LABEL_23:
  sub_100061B50((uint64_t)Count, 2LL, a1);
  sub_100063560(a1);
  sub_100063998(a1, *(const __CFArray **)(a1 + 232));
  if (v8) {
    CFRelease(v8);
  }
  return v7;
}

  BOOL v12 = *(const void **)(a7 + 192);
  if (v12) {
    CFRelease(v12);
  }
  *(void *)(a7 + 192) = v10;
  return v10;
}

  BOOL v12 = *(const void **)(a7 + 192);
  if (v12) {
    CFRelease(v12);
  }
  *(void *)(a7 + 192) = v10;
  return v10;
}

    if (v12 == ++v13) {
      goto LABEL_21;
    }
  }

  if (!Name) {
    goto LABEL_15;
  }
  SetID = Name;
  uint64_t v19 = @"Automatic";
LABEL_14:
  if (!CFEqual(SetID, v19)) {
    goto LABEL_15;
  }
  sub_10003A25C(*(const __SCPreferences **)(a1 + 904));
  id v20 = (void *)sub_10003AFF4((uint64_t)"__WiFiManagerApplyNetworkSettings");
  id v21 = SCNetworkSetSetCurrent(v15);
  uint64_t v22 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: set %@ is now active for interface %@", "__WiFiManagerApplyNetworkSettings", Name, v23 message];
  }
  objc_autoreleasePoolPop(v22);
  sub_10003A310(*(SCPreferencesRef *)(a1 + 904), v21);

LABEL_21:
  CFRelease(v10);
}

        if (++v7 >= CFArrayGetCount(v5)) {
          goto LABEL_21;
        }
      }
    }

    id v6 = 0;
LABEL_21:
    CFRelease(v5);
  }

  else
  {
    CFBooleanRef v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: no services",  "__WiFiManagerRemoveMatchingServiceForSet");
    }
    objc_autoreleasePoolPop(v14);
    return 0;
  }

  return v6;
}

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

  CFRelease(v19);
  CFRelease(v16);
  if (v22) {
    CFRelease(v22);
  }
  char v16 = v25;
  a4 = v33;
  if (v25) {
    goto LABEL_18;
  }
LABEL_19:
  sub_10003A8FC((vm_address_t)a2, a3);
  sub_10003A8FC((vm_address_t)a4, a5);
  return 0LL;
}

  sub_10003A8FC((vm_address_t)a2, a3);
  return 0LL;
}

  sub_10003A8FC((vm_address_t)a4, a5);
  sub_10003A8FC((vm_address_t)a2, a3);
  return 0LL;
}

  sub_10003A8FC((vm_address_t)a2, v5);
  return 0LL;
}

  uint64_t v18 = 0LL;
  if (!a6)
  {
LABEL_16:
    CFTypeRef v25 = 0LL;
    goto LABEL_17;
  }

  BOOL v12 = 0;
LABEL_16:
  double Current = CFAbsoluteTimeGetCurrent();
  if (a3)
  {
    CFBooleanRef v14 = Current;
    BOOL v15 = a3 + 8LL * a4;
    char v16 = *(const void **)(v15 + 7136);
    if (v16)
    {
      BOOL v17 = (void *)(v15 + 7136);
      CFRelease(v16);
      *BOOL v17 = 0LL;
    }

    if (!v12 && ((uint64_t v18 = *(double *)(a3 + 7040), v18 == 0.0) || v18 + 10.0 >= v14))
    {
      sub_100111130(a4, a3);
    }

    else
    {
      uint64_t v19 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        id v20 = "fail";
        if (v12) {
          id v20 = "success";
        }
        id v21 = "<10s";
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "DPS Probe: probeResult:%s ac:%u with %s",  v20,  a4,  v21);
      }

      objc_autoreleasePoolPop(v19);
      if (v12 && !*(_DWORD *)(a3 + 7184))
      {
        uint64_t v22 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3 message:"DPS HUD: clearing on probe success"];
        }
        objc_autoreleasePoolPop(v22);
        sub_10010E744(a3);
      }

      sub_100111058(a3);
    }
  }

  else
  {
    id v23 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null manager.",  "__WiFiDeviceManagerTriggerOrSuppressSubsequentDpsProbes");
    }
    objc_autoreleasePoolPop(v23);
  }

      uint64_t v18 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v16,  v17,  0LL);
      uint64_t v19 = a3;
      if (!v18) {
        return;
      }
      goto LABEL_16;
    }
    }

    if (-[NSMutableArray count](v9, "count")) {
      id v21 = v9;
    }
    else {
      id v21 = 0LL;
    }
    uint64_t v22 = v21;
  }

  else
  {
    uint64_t v24 = CWFGetOSLog(v8);
    CFTypeRef v25 = objc_claimAutoreleasedReturnValue(v24);
    uint64_t v26 = (void *)v25;
    if (v25)
    {
      uint64_t v27 = CWFGetOSLog(v25);
      uint64_t v9 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(v27);
    }

    else
    {
      uint64_t v9 = (NSMutableArray *)&_os_log_default;
      uint64_t v28 = &_os_log_default;
    }

    if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
    {
      v34[0] = 0;
      _os_log_send_and_compose_impl( 1LL,  0LL,  0LL,  0LL,  &_mh_execute_header,  v9,  0LL,  "[corewifi] SSID Transition: Legacy SSID networks not enabled",  v34,  2);
    }

    uint64_t v22 = 0LL;
  }

  return v22;
}

  return v4;
}

void sub_100037AC4(uint64_t a1, const void *a2)
{
  int v4 = objc_autoreleasePoolPush();
  if (!a1)
  {
    id v20 = objc_autoreleasePoolPush();
    id v21 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_25;
    }
    uint64_t v22 = "%s: null Companion Info";
LABEL_21:
    uint64_t v23 = 3LL;
LABEL_24:
    objc_msgSend(v21, "WFLog:message:", v23, v22, "__WiFiMetricsManagerWAMessageSubmitCompanionAssistedAJInfo");
    goto LABEL_25;
  }

  if (!qword_100219860) {
    goto LABEL_16;
  }
  if (sub_100071B54(*(void *)(qword_100219860 + 16)) == 1)
  {
    id v20 = objc_autoreleasePoolPush();
    id v21 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_25;
    }
    uint64_t v22 = "%s: Camera is in Foreground";
    goto LABEL_21;
  }

  id v5 = objc_alloc(&OBJC_CLASS___WAMessage);
  id v6 = [v5 initWithMetricName:kWAMessageMetricNameCompanionAssistedAJ options:7];
  if (!v6)
  {
    id v20 = objc_autoreleasePoolPush();
    id v21 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      uint64_t v22 = "%s: Failed to alloc WAMessage for Companion Assisted AJ";
      uint64_t v23 = 4LL;
      goto LABEL_24;
    }

void sub_100037DA4(uint64_t a1)
{
  int v2 = objc_autoreleasePoolPush();
  if (!a1)
  {
    id v6 = objc_autoreleasePoolPush();
    unsigned int v7 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_15;
    }
    int v8 = "%s: null ssidAndQualityArr";
    goto LABEL_11;
  }

  if (qword_100219860)
  {
    if (sub_100071B54(*(void *)(qword_100219860 + 16)) != 1)
    {
      id v3 = objc_alloc(&OBJC_CLASS___WAMessage);
      id v4 = [v3 initWithMetricName:kWAMessageMetricNameHistoricalKnownNetworkQuality options:6];
      if (v4)
      {
        id v5 = v4;
        [v4 addFieldForKey:kWAMessageKeyNetworkHistoricalQuality value:a1 options:6];
        sub_10002891C(v5);

        goto LABEL_6;
      }

      id v6 = objc_autoreleasePoolPush();
      unsigned int v7 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        int v8 = "%s: Failed to alloc WAMessage for HistoricalKnownNetworkQuality";
        uint64_t v9 = 4LL;
        goto LABEL_14;
      }

void sub_100037EEC(double a1)
{
  int v2 = objc_autoreleasePoolPush();
  id v3 = objc_alloc(&OBJC_CLASS___WAMessage);
  id v4 = [v3 initWithMetricName:kWAMessageMetricName11axAsrDuration options:5];
  if (v4)
  {
    id v5 = v4;
    objc_msgSend( v4,  "addFieldForKey:value:options:",  kWAMessageKey11axAsrDuration,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a1),  5);
    sub_10002891C(v5);
    CFRelease(v5);
  }

  else
  {
    id v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null message",  "WiFiMetricsManagerSubmit11axAsrDuration");
    }
    objc_autoreleasePoolPop(v6);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_100037FD4(const __CFDictionary *a1)
{
  int v2 = objc_autoreleasePoolPush();
  if (!qword_100219860) {
    goto LABEL_9;
  }
  if (sub_100071B54(*(void *)(qword_100219860 + 16)) == 1)
  {
    int v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Camera is in Foreground",  "WiFiMetricsManagerSubmitCatsScanManagerMetrics");
    }
    goto LABEL_14;
  }

  id v3 = objc_alloc(&OBJC_CLASS___WAMessage);
  id v4 = [v3 initWithMetricName:kWAMessageMetricNameCatsScanMetrics options:5];
  if (!v4)
  {
    int v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null message",  "WiFiMetricsManagerSubmitCatsScanManagerMetrics");
    }
LABEL_14:
    objc_autoreleasePoolPop(v8);
    goto LABEL_9;
  }

  id v5 = v4;
  unsigned int valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"CATS_SCAN_METRIC_CACHE_HITS");
  if (Value) {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  }
  unsigned int v9 = 0;
  unsigned int v7 = (const __CFNumber *)CFDictionaryGetValue(a1, @"CATS_SCAN_METRIC_CACHE_MISS");
  if (v7) {
    CFNumberGetValue(v7, kCFNumberSInt32Type, &v9);
  }
  objc_msgSend( v5,  "addFieldForKey:value:options:",  kWAMessageKeyCatsScanCacheHit,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", valuePtr),  5);
  objc_msgSend( v5,  "addFieldForKey:value:options:",  kWAMessageKeyCatsScanCacheMiss,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v9),  5);
  sub_10002891C(v5);
  CFRelease(v5);
LABEL_9:
  objc_autoreleasePoolPop(v2);
}

void sub_100038178(uint64_t a1)
{
  int v2 = objc_autoreleasePoolPush();
  id v3 = objc_alloc(&OBJC_CLASS___WAMessage);
  id v4 = [v3 initWithMetricName:kWAMessageMetricNameCarPlayLinkQualityMetrics options:5];
  if (v4)
  {
    id v5 = v4;
    objc_msgSend( v4,  "addFieldForKey:value:options:",  @"txRateMax",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 36)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"txRateMin",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 32)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"txRateAvg",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 40)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"txRateLast",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 44)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"rxRateMax",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 52)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"rxRateMin",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 48)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"rxRateAvg",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 56)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"rxRateLast",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 60)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"ccaMax",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 100)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"ccaMin",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 96)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"ccaAvg",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 104)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"ccaLast",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 108)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"snrMax",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 68)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"snrMin",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 64)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"snrAvg",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 72)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"snrLast",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 76)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"rssiMax",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 84)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"rssiMin",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"rssiAvg",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 88)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"rssiLast",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 92)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"linkDuration",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 24)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"roamedCount",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 28)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"channel",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(__int16 *)(a1 + 112)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"bandWidth",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned __int16 *)(a1 + 114)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"numberOfTxErrorEvents",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 116)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"lqmInterval",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 120)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"linkDownSubReason",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 136)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"linkDownReason",  +[NSString stringWithString:](NSString, "stringWithString:", *(void *)(a1 + 128)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"phyMode",  +[NSString stringWithString:](NSString, "stringWithString:", *(void *)(a1 + 144)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"vehicleModelName",  +[NSString stringWithString:](NSString, "stringWithString:", *(void *)a1),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"vehicleManufacturer",  +[NSString stringWithString:](NSString, "stringWithString:", *(void *)(a1 + 8)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"hardwareVersion",  +[NSString stringWithString:](NSString, "stringWithString:", *(void *)(a1 + 16)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"isLpcValid",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned __int8 *)(a1 + 152)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"lpcMinOffset",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(double *)(a1 + 160)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"lpcTxOffset0",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 168)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"lpcTxOffset1",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 172)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"lpcTxOffset2",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 176)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"lpcTxOffset3",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 180)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"estimatedPowerReduction",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(double *)(a1 + 192)),  5);
    sub_10002891C(v5);
    CFRelease(v5);
  }

  else
  {
    id v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null message",  "WiFiMetricsManagerSubmitCarPlayLinkQualityMetrics");
    }
    objc_autoreleasePoolPop(v6);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_1000387BC(unsigned int *a1)
{
  int v2 = objc_autoreleasePoolPush();
  id v3 = objc_alloc(&OBJC_CLASS___WAMessage);
  id v4 = [v3 initWithMetricName:kWAMessageMetricNameCarPlayConnectMetrics options:5];
  if (v4)
  {
    id v5 = v4;
    objc_msgSend( v4,  "addFieldForKey:value:options:",  kWAMessageKeyCarPlayTimeBasicAssocTaken,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a1),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  kWAMessageKeyCarPlayTime4WayHSTaken,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[1]),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  kWAMessageKeyCarPlayTimeDhcpTaken,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[2]),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  kWAMessageKeyCarPlayWasScanCanceledBeforeJoin,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 12)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"Channel",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int16 *)a1 + 7)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"vehicleModelName",  +[NSString stringWithString:](NSString, "stringWithString:", *((void *)a1 + 2)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"vehicleManufacturer",  +[NSString stringWithString:](NSString, "stringWithString:", *((void *)a1 + 3)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"hardwareVersion",  +[NSString stringWithString:](NSString, "stringWithString:", *((void *)a1 + 4)),  5);
    sub_10002891C(v5);
    CFRelease(v5);
  }

  else
  {
    id v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null message",  "WiFiMetricsManagerSubmitCarPlayConnectMetrics");
    }
    objc_autoreleasePoolPop(v6);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_1000389BC(unsigned int *a1)
{
  int v2 = objc_autoreleasePoolPush();
  if (qword_100219860)
  {
    if (sub_100071B54(*(void *)(qword_100219860 + 16)) == 1)
    {
      id v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Camera is in Foreground",  "WiFiMetricsManagerSubmitInfraConnectionMetrics");
      }
    }

    else
    {
      id v3 = objc_alloc(&OBJC_CLASS___WAMessage);
      id v4 = [v3 initWithMetricName:kWAMessageMetricNameInfraConnectionMetrics options:5];
      if (v4)
      {
        id v5 = v4;
        objc_msgSend( v4,  "addFieldForKey:value:options:",  kWAMessageKeyInfraConnectionTime4WayHSTaken,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a1),  5);
        objc_msgSend( v5,  "addFieldForKey:value:options:",  @"Channel",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int16 *)a1 + 2)),  5);
        objc_msgSend( v5,  "addFieldForKey:value:options:",  @"Band",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int16 *)a1 + 3)),  5);
        sub_10002891C(v5);
        CFRelease(v5);
        goto LABEL_5;
      }

      id v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null message",  "WiFiMetricsManagerSubmitInfraConnectionMetrics");
      }
    }

    objc_autoreleasePoolPop(v6);
  }

void sub_100038B38(unsigned int *a1)
{
  int v2 = objc_autoreleasePoolPush();
  if (qword_100219860)
  {
    id v3 = objc_alloc(&OBJC_CLASS___WAMessage);
    id v4 = [v3 initWithMetricName:kWAMessageMetricNameDetailedInfraConnectionMetrics options:5];
    if (v4)
    {
      id v5 = v4;
      objc_msgSend( v4,  "addFieldForKey:value:options:",  kWAMessageKeyDetailedInfraConnectionEapolStartM1Dur,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a1),  5);
      objc_msgSend( v5,  "addFieldForKey:value:options:",  kWAMessageKeyDetailedInfraConnectionM1M2Dur,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[1]),  5);
      objc_msgSend( v5,  "addFieldForKey:value:options:",  kWAMessageKeyDetailedInfraConnectionM2M3Dur,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[2]),  5);
      objc_msgSend( v5,  "addFieldForKey:value:options:",  kWAMessageKeyDetailedInfraConnectionM3M4Dur,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[3]),  5);
      objc_msgSend( v5,  "addFieldForKey:value:options:",  kWAMessageKeyDetailedInfraConnectionTotal4WayHSDur,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[4]),  5);
      objc_msgSend( v5,  "addFieldForKey:value:options:",  @"Channel",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int16 *)a1 + 10)),  5);
      objc_msgSend( v5,  "addFieldForKey:value:options:",  @"Band",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int16 *)a1 + 11)),  5);
      objc_msgSend( v5,  "addFieldForKey:value:options:",  kWAMessageKeyDetailedInfraConnectionA2DPActive,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 24)),  5);
      objc_msgSend( v5,  "addFieldForKey:value:options:",  kWAMessageKeyDetailedInfraConnectionSCOActive,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 25)),  5);
      objc_msgSend( v5,  "addFieldForKey:value:options:",  kWAMessageKeyDetailedInfraConnectionRSSI,  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[7]),  5);
      objc_msgSend( v5,  "addFieldForKey:value:options:",  kWAMessageKeyDetailedInfraConnectionAPProfile,  +[NSString stringWithString:](NSString, "stringWithString:", *((void *)a1 + 4)),  5);
      objc_msgSend( v5,  "addFieldForKey:value:options:",  kWAMessageKeyDetailedInfraConnectionAutoJoinHandshake,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 40)),  5);
      sub_10002891C(v5);
      CFRelease(v5);
    }

    else
    {
      id v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null message",  "WiFiMetricsManagerSubmitDetailedInfraConnectionMetrics");
      }
      objc_autoreleasePoolPop(v6);
    }
  }

  objc_autoreleasePoolPop(v2);
}

void sub_100038E04(unsigned int *a1)
{
  int v2 = objc_autoreleasePoolPush();
  id v3 = objc_alloc(&OBJC_CLASS___WAMessage);
  id v4 = [v3 initWithMetricName:kWAMessageMetricNameCarPlayLinkDownSuppressionMetrics options:5];
  if (v4)
  {
    id v5 = v4;
    objc_msgSend( v4,  "addFieldForKey:value:options:",  @"linkDownDuration",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a1),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"linkDownSubReason",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1[4]),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"timedOut",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 20)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"linkDebounceSucceeded",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 21)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"SessionDownSuppressionSucceeded",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *((unsigned __int8 *)a1 + 22)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"linkDownReason",  +[NSString stringWithString:](NSString, "stringWithString:", *((void *)a1 + 1)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"vehicleModelName",  +[NSString stringWithString:](NSString, "stringWithString:", *((void *)a1 + 3)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"vehicleManufacturer",  +[NSString stringWithString:](NSString, "stringWithString:", *((void *)a1 + 4)),  5);
    objc_msgSend( v5,  "addFieldForKey:value:options:",  @"hardwareVersion",  +[NSString stringWithString:](NSString, "stringWithString:", *((void *)a1 + 5)),  5);
    sub_10002891C(v5);
    CFRelease(v5);
  }

  else
  {
    id v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null message",  "WiFiMetricsManagerSubmitCarPlayLinkDownSuppressionMetrics");
    }
    objc_autoreleasePoolPop(v6);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_100039000(unsigned int *a1)
{
  int v2 = objc_autoreleasePoolPush();
  id v3 = objc_alloc(&OBJC_CLASS___WAMessage);
  id v4 = [v3 initWithMetricName:kWAMessageMetricNameSidekickMetrics options:5];
  if (v4)
  {
    id v5 = v4;
    objc_msgSend( v4,  "addFieldForKey:value:options:",  kWAMessageKeyWiFiCriticalDuration,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a1),  5);
    sub_10002891C(v5);
    CFRelease(v5);
  }

  else
  {
    id v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null message",  "WiFiMetricsManagerSubmitSidekickMetrics");
    }
    objc_autoreleasePoolPop(v6);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_1000390E0(const void *a1, void *a2, void *a3)
{
  id v6 = objc_autoreleasePoolPush();
  if (!a1)
  {
    __int128 v32 = objc_autoreleasePoolPush();
    __int128 v33 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_43;
    }
    __int128 v34 = "%s: null network";
LABEL_39:
    uint64_t v35 = 4LL;
LABEL_42:
    objc_msgSend(v33, "WFLog:message:", v35, v34, "WiFiMetricsManagerUpdateBeaconCacheResults");
    goto LABEL_43;
  }

  if (!a2)
  {
    __int128 v32 = objc_autoreleasePoolPush();
    __int128 v33 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_43;
    }
    __int128 v34 = "%s: null beaconCacheResults";
    goto LABEL_39;
  }

  if (qword_100219860)
  {
    if (sub_100071B54(*(void *)(qword_100219860 + 16)) != 1)
    {
      uint64_t v37 = a1;
      id v38 = v6;
      id v43 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      __int128 v47 = 0u;
      __int128 v48 = 0u;
      id v7 = [a2 countByEnumeratingWithState:&v45 objects:v49 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v46;
        uint64_t v42 = kWAMessageKeyRSSI;
        uint64_t v41 = kWAMessageKeySSID;
        uint64_t v40 = kWAMessageKeyChannel;
        BOOL v10 = @"RSSI";
        uint64_t v39 = kWAMessageKeyBSSID;
        do
        {
          uint64_t v11 = 0LL;
          id v44 = v8;
          do
          {
            if (*(void *)v46 != v9) {
              objc_enumerationMutation(a2);
            }
            uint64_t v12 = *(void *)(*((void *)&v45 + 1) + 8LL * (void)v11);
            if (v12)
            {
              int v13 = sub_100095BC8(*(const void **)(*((void *)&v45 + 1) + 8LL * (void)v11));
              if (!a3 || [a3 containsObject:v13])
              {
                CFBooleanRef v14 = sub_1000951FC(v12, v10);
                BOOL v15 = sub_1000951FC(v12, @"CHANNEL");
                CFStringRef v16 = sub_1000951FC(v12, @"BSSID");
                BOOL v17 = !v14 || v13 == 0LL;
                BOOL v18 = v17 || v15 == 0LL;
                if (!v18 && v16 != 0LL)
                {
                  id v20 = v16;
                  uint64_t v21 = v9;
                  uint64_t v22 = a3;
                  uint64_t v23 = a2;
                  uint64_t v24 = v10;
                  id v25 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
                  [v25 setObject:v14 forKey:v42];
                  [v25 setObject:v13 forKey:v41];
                  [v25 setObject:v15 forKey:v40];
                  [v25 setObject:v20 forKey:v39];
                  id v26 = v25;
                  BOOL v10 = v24;
                  a2 = v23;
                  a3 = v22;
                  uint64_t v9 = v21;
                  id v8 = v44;
                  [v43 addObject:v26];
                }
              }
            }

            uint64_t v11 = (char *)v11 + 1;
          }

          while (v8 != v11);
          id v8 = [a2 countByEnumeratingWithState:&v45 objects:v49 count:16];
        }

        while (v8);
      }

      if ((unint64_t)[v43 count] <= 1)
      {
        uint64_t v36 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Not enough trimmedResults",  "WiFiMetricsManagerUpdateBeaconCacheResults");
        }
      }

      else
      {
        id v27 = objc_alloc(&OBJC_CLASS___WAMessage);
        id v28 = [v27 initWithMetricName:kWAMessageMetricNameBeaconCache options:6];
        if (v28)
        {
          uint64_t v29 = v28;
          [v28 addFieldForKey:kWAMessageKeyBeaconCacheResults value:v43 options:6];
          uint64_t v30 = kWAMessageKeyMetricDate;
          -[NSDate timeIntervalSinceReferenceDate]( +[NSDate date](&OBJC_CLASS___NSDate, "date"),  "timeIntervalSinceReferenceDate");
          objc_msgSend( v29,  "addFieldForKey:value:options:",  v30,  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"),  6);
          if (!sub_100036E74(v29, v37, 6LL))
          {
            __int128 v31 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to append SSID/BSSID to WAMessage",  "WiFiMetricsManagerUpdateBeaconCacheResults");
            }
            objc_autoreleasePoolPop(v31);
          }

          objc_msgSend( v29,  "addFieldForKey:value:options:",  kWAMessageKeyChannel,  sub_1000951FC((uint64_t)v37, @"CHANNEL"),  6);
          sub_10002891C(v29);

          goto LABEL_33;
        }

        uint64_t v36 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Failed to alloc WAMessage for kWAMessageMetricNameBeaconCache",  "WiFiMetricsManagerUpdateBeaconCacheResults");
        }
      }

      objc_autoreleasePoolPop(v36);
LABEL_33:
      id v6 = v38;
      goto LABEL_34;
    }

    __int128 v32 = objc_autoreleasePoolPush();
    __int128 v33 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      __int128 v34 = "%s: Camera is in Foreground";
      uint64_t v35 = 3LL;
      goto LABEL_42;
    }

LABEL_34:
  objc_autoreleasePoolPop(v6);
}

    uint64_t v22 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      if (v11 == kCFBooleanTrue) {
        uint64_t v23 = "Enabled";
      }
      else {
        uint64_t v23 = "Disabled";
      }
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "Low Power Mode %s", v23);
    }

    objc_autoreleasePoolPop(v22);
    CFPreferencesSetAppValue(@"LowPowerMode", v11, @"com.apple.preferences.network");
    goto LABEL_40;
  }

  if (!CFEqual(v11, v13)) {
    goto LABEL_34;
  }
LABEL_78:
  if (v13) {
    CFRelease(v13);
  }
  if (v9) {
    CFRelease(v9);
  }
}

  CFStringAppend(theString, @" ResSc");
  if ((a1 & 0x1000) == 0)
  {
LABEL_15:
    if ((a1 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }

    uint64_t v22 = 0;
LABEL_35:
    id v28 = v16 & ((v15 | v22) ^ 1);
    uint64_t v29 = sub_1000951FC((uint64_t)v14, @"Standalone") == kCFBooleanTrue;
    if (v28 != v29)
    {
      uint64_t v30 = v28 & 1;
      ++*(_DWORD *)(a1 + 3776);
      __int128 v31 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "Tracking changed standalone6G (%d --> %d) for known network %@, counter=%d/%d", v29, v30, v14, *(unsigned int *)(a1 + 3776), 3 message];
      }
      objc_autoreleasePoolPop(v31);
      if (*(_DWORD *)(a1 + 3776) >= 3u)
      {
        *(_DWORD *)(a1 + 3776) = 0;
        __int128 v32 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "Updating standalone6G (%d --> %d) for known network %@", v29, v30, v14 message];
        }
        objc_autoreleasePoolPop(v32);
        sub_10009582C( (uint64_t)v14,  @"Standalone",  +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v30));
        sub_1000DAB00((dispatch_queue_s **)a1, v14);
      }
    }

    else
    {
      *(_DWORD *)(a1 + 3776) = 0;
    }

    CFRelease(v14);
    goto LABEL_44;
  }

      if (CFArrayGetCount(v17) <= ++v24) {
        goto LABEL_37;
      }
    }
  }

  uint64_t v36 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: cannot allocate suppChannelList",  "__WiFiDeviceManagerSendBSPRegulatoryInfo");
  }
LABEL_71:
  objc_autoreleasePoolPop(v36);
  uint64_t v23 = 0LL;
LABEL_42:
  CFRelease(v10);
  CFRelease(v12);
  if (v13) {
    CFRelease(v13);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v23)
  {
    __int128 v32 = v23;
LABEL_48:
    CFRelease(v32);
  }

void sub_100039588(uint64_t a1, uint64_t a2)
{
  id v4 = objc_autoreleasePoolPush();
  if (a1 && a2)
  {
    id v5 = [[WAMessage alloc] initWithMetricName:a1 options:5];
    if (v5)
    {
      id v6 = v5;
      [v5 addFieldsFromDictionary:a2 options:5];
      sub_10002891C(v6);
    }

    else
    {
      id v7 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: Failed to alloc WAMessage for %@", "__WiFiMetricsManagerWAMessageSubmitFromDictionary", a1 message];
      }
      objc_autoreleasePoolPop(v7);
    }
  }

  else if (qword_100219F60)
  {
    [(id)qword_100219F60 WFLog:3, "%s: Null param (name:%@ dict:%@)", "__WiFiMetricsManagerWAMessageSubmitFromDictionary", a1, a2 message];
  }

  objc_autoreleasePoolPop(v4);
}

void sub_100039678(void *a1)
{
  int v2 = objc_autoreleasePoolPush();
  if (a1)
  {
    uint64_t v3 = kWAMessageKeyFaultName;
    if (objc_msgSend( objc_msgSend(a1, "objectForKeyedSubscript:", kWAMessageKeyFaultName),  "isEqual:",  WiFiUsageFaultReasonStringMap(30)))
    {
      if (!qword_100219860) {
        goto LABEL_35;
      }
      int v4 = sub_100071B60(*(void *)(qword_100219860 + 16));
      id v5 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Got kWiFiUsageFaultReasonAirplayConnectionStall, checking audio state",  "WiFiMetricsManagerSubmitFaultDictionary");
      }
      objc_autoreleasePoolPop(v5);
      id v6 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        if (v4) {
          id v7 = "%s: linkRecoveryDisabled == TRUE implies Audio Playing, setting WiFiAnalyticsMessageTypeManagedFault";
        }
        else {
          id v7 = "%s: linkRecoveryDisabled == FALSE implies No Audio Playing, removing WiFiAnalyticsMessageTypeManagedFault";
        }
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, v7, "WiFiMetricsManagerSubmitFaultDictionary");
      }

      objc_autoreleasePoolPop(v6);
      if (-[NSUserDefaults objectForKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "objectForKey:",  @"ManagedFaultConnectionStallOverrideAllow"))
      {
        unsigned int v8 = objc_msgSend( -[NSUserDefaults objectForKey:]( +[NSUserDefaults standardUserDefaults]( NSUserDefaults,  "standardUserDefaults"),  "objectForKey:",  @"ManagedFaultConnectionStallOverrideAllow"),  "BOOLValue");
        uint64_t v9 = objc_autoreleasePoolPush();
        if (v8) {
          uint64_t v10 = 16LL;
        }
        else {
          uint64_t v10 = 0LL;
        }
        if (qword_100219F60)
        {
          if (v8) {
            uint64_t v11 = "%s: Found NSUserDefaults kManagedFaultConnectionStallOverrideAllow TRUE, setting WiFiAnalyticsMessageT"
          }
                  "ypeManagedFault for %@";
          else {
            uint64_t v11 = "%s: Found NSUserDefaults kManagedFaultConnectionStallOverrideAllow FALSE, removing WiFiAnalyticsMessag"
          }
                  "eTypeManagedFault for %@";
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  v11,  "WiFiMetricsManagerSubmitFaultDictionary",  WiFiUsageFaultReasonStringMap(objc_msgSend(a1, "objectForKeyedSubscript:", v3)));
        }

        objc_autoreleasePoolPop(v9);
      }

      else
      {
        uint64_t v10 = 16LL * (v4 != 0);
      }
    }

    else
    {
      uint64_t v10 = 16LL;
    }

    if (-[NSUserDefaults objectForKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "objectForKey:",  @"ManagedFaultOverrideAll"))
    {
      unsigned int v12 = objc_msgSend( -[NSUserDefaults objectForKey:]( +[NSUserDefaults standardUserDefaults]( NSUserDefaults,  "standardUserDefaults"),  "objectForKey:",  @"ManagedFaultOverrideAll"),  "BOOLValue");
      int v13 = objc_autoreleasePoolPush();
      if (v12) {
        uint64_t v10 = 16LL;
      }
      else {
        uint64_t v10 = 0LL;
      }
      if (qword_100219F60)
      {
        if (v12) {
          CFBooleanRef v14 = "%s: Found NSUserDefaults kManagedFaultOverrideAll TRUE, setting WiFiAnalyticsMessageTypeManagedFault for %@";
        }
        else {
          CFBooleanRef v14 = "%s: Found NSUserDefaults kManagedFaultOverrideAll FALSE, removing WiFiAnalyticsMessageTypeManagedFault for %@";
        }
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  v14,  "WiFiMetricsManagerSubmitFaultDictionary",  WiFiUsageFaultReasonStringMap(objc_msgSend(a1, "objectForKeyedSubscript:", v3)));
      }

      objc_autoreleasePoolPop(v13);
    }

    id v15 = objc_alloc(&OBJC_CLASS___WAMessage);
    id v16 = [v15 initWithMetricName:kWAMessageMetricNameFault options:v10];
    if (v16)
    {
      BOOL v17 = v16;
      [v16 addFieldsFromDictionary:a1 options:v10];
      sub_10002891C(v17);
    }

    else
    {
      BOOL v18 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Failed to alloc WAMessage for kWAMessageMetricNameFault",  "WiFiMetricsManagerSubmitFaultDictionary");
      }
      objc_autoreleasePoolPop(v18);
    }
  }

  else if (qword_100219F60)
  {
    [(id)qword_100219F60 WFLog:3, "%s: Null param (dict:%@)", "WiFiMetricsManagerSubmitFaultDictionary", 0 message];
  }

LABEL_35:
  objc_autoreleasePoolPop(v2);
}

  CFStringAppend(theString, @" bgS");
  if ((a1 & 0x2000) == 0)
  {
LABEL_16:
    if ((a1 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }

  sub_10003A8FC((vm_address_t)a2, a3);
  sub_10003A8FC((vm_address_t)a4, a5);
  sub_10003A8FC((vm_address_t)a6, a7);
  return 0LL;
}

    if (v10) {
      CFStringAppend(v10, @"Performing auto-join broadcast scan ");
    }
    goto LABEL_37;
  }

  if (v10) {
    CFStringAppend(v10, @"Performing auto-join directed scan for ");
  }
  id v15 = sub_100095BC8(a1);
  if (v15) {
    CFDictionarySetValue(Mutable, @"SSID_STR", v15);
  }
  if (v10) {
    CFStringAppendFormat(v10, 0LL, @"%@ ", v15);
  }
LABEL_37:
  if (a4)
  {
    uint64_t v29 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v39);
    CFDictionarySetValue(Mutable, @"SCAN_DWELL_TIME", v29);
    if (v10) {
      CFStringAppendFormat(v10, 0LL, @"with a modified dwell time of %dms ", v39);
    }
    if (v29) {
      CFRelease(v29);
    }
  }

  if (a2)
  {
    uint64_t v30 = CFArrayGetCount(a2);
    if (v30)
    {
      if (v10)
      {
        __int128 v31 = v30;
        CFStringAppend(v10, @"on channels: ");
        if (v31 >= 1)
        {
          for (unint64_t i = 0LL; i != v31; ++i)
          {
            __int128 v33 = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, i);
            Value = CFDictionaryGetValue(v33, @"CHANNEL");
            CFStringAppendFormat(v10, 0LL, @"%@ ", Value);
          }
        }
      }

      CFDictionarySetValue(Mutable, @"SCAN_CHANNELS", a2);
    }
  }

  if (v10)
  {
    uint64_t v35 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%@", v10 message];
    }
    objc_autoreleasePoolPop(v35);
    CFRelease(v10);
  }

  return Mutable;
}

    sub_10003AD28(a2, @"PrivateMacDisbaleReason", v19);
  }

    if (![*(id *)(a1 + 6728) isHotspotDeviceSupportADHS:ValueAtIndex])
    {
      id v26 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: ADHS not Supported. Ignoring hotspot\n",  "__WiFiDeviceManagerProcessScannedInstantHotspotDevices");
      }
      objc_autoreleasePoolPop(v26);
      goto LABEL_41;
    }

    if ((v42 & v14 & v22 & 1) != 0) {
      break;
    }
LABEL_41:
    if (++v9 == v41) {
      goto LABEL_52;
    }
  }

  *(void *)(a1 + 6856) = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 6792), v9);
  if (sub_1000F1D7C(a1))
  {
    __int128 v33 = [*(id *)(a1 + 6728) getHotspotDeviceName:*(void *)(a1 + 6856)];
    __int128 v34 = sub_1000951FC(*(void *)(a1 + 3504), @"SSID_STR");
    if (CFEqual(v33, v34)) {
      *(_BYTE *)(a1 + 6920) = 1;
    }
  }

  if (*(_DWORD *)(a1 + 6756) != 1 || *(_BYTE *)(a1 + 6920))
  {
    uint64_t v30 = sub_1001034F4(a1, *(void *)(a1 + 6856));
    goto LABEL_54;
  }

  uint64_t v35 = sub_100094CE8((const __CFString *)[*(id *)(a1 + 6728) getHotspotDeviceName:*(void *)(a1 + 6856)]);
  if (v35)
  {
    uint64_t v36 = v35;
    uint64_t v37 = sub_100043E8C(*(void *)(a1 + 64));
    id v38 = sub_1000EF770(a1, v37, 10LL, 0LL, v36, 0LL);
    CFRelease(v36);
    uint64_t v39 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: State %d",  "__WiFiDeviceManagerProcessScannedInstantHotspotDevices",  v38);
    }
    objc_autoreleasePoolPop(v39);
    if ((_DWORD)v38 == 14)
    {
      *(_DWORD *)(a1 + 6700) = 1;
      return 17LL;
    }

  if (v9 && v10)
  {
    if ((BOOL v18 = [v9 intValue],
          uint64_t v19 = [v10 intValue],
          v18 + 528350207 <= 7)
      && ((1 << (v18 - 1)) & 0x9F) != 0
      || v18 == -528350133)
    {
      if (v19 + 528339945 >= 0xFFFFFFE9)
      {
        id v20 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:4, "%s Supplicant Event Status/Reason for %@ BssBlacklist Eligible - Status:%d ieeeStatus:%d", "__CopyReasonsFromSubStatesForBssBlacklist", a2, (unint64_t)objc_msgSend(v9, "intValue") & 0x1FF, (unint64_t)objc_msgSend(v10, "intValue") & 0x1FF message];
        }
        objc_autoreleasePoolPop(v20);
        if (!v12) {
          unsigned int v12 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        }
        -[NSMutableArray addObject:]( v12,  "addObject:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v10 intValue]));
      }
    }
  }

uint64_t sub_100039994()
{
  uint64_t result = _CFRuntimeRegisterClass(&unk_1001E2EF8);
  qword_100219870 = result;
  return result;
}

void sub_1000399B8()
{
  uint64_t v0 = qword_100219860;
  if (qword_100219860)
  {
    BOOL v1 = *(const __CFArray **)(qword_100219860 + 32);
    if (v1)
    {
      if (CFArrayGetCount(v1) >= 1)
      {
        CFIndex v2 = 0LL;
        do
        {
          ValueAtIndex = (CFTypeRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(qword_100219860 + 32), v2);
          CFTypeRef v4 = ValueAtIndex[88];
          if (v4)
          {
            CFRelease(v4);
            ValueAtIndex[88] = 0LL;
          }

          CFTypeRef v5 = ValueAtIndex[89];
          if (v5)
          {
            CFRelease(v5);
            ValueAtIndex[89] = 0LL;
          }

          if (*ValueAtIndex)
          {
            CFRelease(*ValueAtIndex);
            CFTypeRef *ValueAtIndex = 0LL;
          }

          id v6 = (void *)ValueAtIndex[30];
          if (v6)
          {
            free(v6);
            ValueAtIndex[30] = 0LL;
          }

          id v7 = (void *)ValueAtIndex[32];
          if (v7)
          {
            free(v7);
            ValueAtIndex[32] = 0LL;
          }

          unsigned int v8 = (void *)ValueAtIndex[39];
          if (v8)
          {
            free(v8);
            ValueAtIndex[39] = 0LL;
          }

          uint64_t v9 = (void *)ValueAtIndex[41];
          if (v9)
          {
            free(v9);
            ValueAtIndex[41] = 0LL;
          }

          uint64_t v10 = (void *)ValueAtIndex[43];
          if (v10)
          {
            free(v10);
            ValueAtIndex[43] = 0LL;
          }

          uint64_t v11 = (void *)ValueAtIndex[47];
          if (v11) {
            free(v11);
          }
          free(ValueAtIndex);
          ++v2;
        }

        while (v2 < CFArrayGetCount(*(CFArrayRef *)(qword_100219860 + 32)));
      }

      uint64_t v0 = qword_100219860;
      unsigned int v12 = *(const void **)(qword_100219860 + 32);
      if (v12)
      {
        CFRelease(v12);
        uint64_t v0 = qword_100219860;
        *(void *)(qword_100219860 + 32) = 0LL;
      }
    }

    int v13 = *(const void **)(v0 + 56);
    if (v13)
    {
      CFRelease(v13);
      uint64_t v0 = qword_100219860;
      *(void *)(qword_100219860 + 56) = 0LL;
    }

    CFBooleanRef v14 = *(const void **)(v0 + 48);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(qword_100219860 + 4_Block_object_dispose(va, 8) = 0LL;
    }
  }

CFNumberRef sub_100039AFC(const __CFNumber *result)
{
  if (result)
  {
    int valuePtr = -1431655766;
    uint64_t result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    if ((_DWORD)result)
    {
      else {
        return (const __CFNumber *)dword_10017F220[valuePtr - 1];
      }
    }
  }

  return result;
}

void sub_100039B54(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  if (a1)
  {
    uint64_t v10 = objc_autoreleasePoolPush();
    uint64_t v11 = v10;
    if (a3)
    {
      context = v10;
      if (a5) {
        uint64_t v12 = 7LL;
      }
      else {
        uint64_t v12 = 6LL;
      }
      id v13 = +[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
      if (a4)
      {
        uint64_t v14 = 0LL;
        do
        {
          objc_msgSend(v13, "appendFormat:", @"%02x", *(unsigned __int8 *)(a3 + v14));
          if (v14 < a4 - 1LL) {
            [v13 appendFormat:@":"];
          }
          ++v14;
        }

        while (a4 != v14);
      }

      [a1 addFieldForKey:a2 value:v13 options:v12];
      uint64_t v11 = context;
    }

    else if (qword_100219F60)
    {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: addr is NULL",  "__WiFiMetricsManagerWAMessageAppendFieldInColonHexdecFormat");
    }
  }

  else
  {
    uint64_t v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: waMsg is NULL",  "__WiFiMetricsManagerWAMessageAppendFieldInColonHexdecFormat");
    }
  }

  objc_autoreleasePoolPop(v11);
}

void sub_100039CA8(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (!a1)
  {
    uint64_t v21 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: waMsg is NULL",  "__WiFiMetricsManagerWAMessageAppendLQM");
    }
    goto LABEL_21;
  }

  if (!a2)
  {
    uint64_t v21 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: device is NULL",  "__WiFiMetricsManagerWAMessageAppendLQM");
    }
    goto LABEL_21;
  }

  uint64_t v8 = a4;
  if (!a4)
  {
    uint64_t v9 = malloc(0x34CuLL);
    if (v9)
    {
      uint64_t v8 = (uint64_t)v9;
      bzero(v9, 0x34CuLL);
      if (!sub_100028DE0(a2, v8))
      {
        id v20 = (void *)v8;
        goto LABEL_14;
      }

      goto LABEL_6;
    }

    uint64_t v21 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null lqmHistoryMetric",  "__WiFiMetricsManagerWAMessageAppendLQM");
    }
LABEL_21:
    objc_autoreleasePoolPop(v21);
    return;
  }

void sub_10003A168(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  CFIndex v2 = (void *)qword_100219878;
  qword_100219878 = (uint64_t)v1;
}

uint64_t sub_10003A250(uint64_t result)
{
  qword_100219888 = result;
  return result;
}

const __SCPreferences *sub_10003A25C(const __SCPreferences *prefs)
{
  if (prefs)
  {
    id v1 = prefs;
    if (qword_100219888) {
      dispatch_assert_queue_V2((dispatch_queue_t)qword_100219888);
    }
    prefs = (const __SCPreferences *)SCPreferencesLock(v1, 1u);
    if (!(_DWORD)prefs)
    {
      SCPreferencesSynchronize(v1);
      prefs = (const __SCPreferences *)SCPreferencesLock(v1, 1u);
      if (!(_DWORD)prefs)
      {
        int v2 = SCError();
        uint64_t v3 = SCErrorString(v2);
        CFTypeRef v4 = objc_autoreleasePoolPush();
        if (qword_100219F60)
        {
          CFTypeRef v5 = "SCError Unavailable";
          if (v3) {
            CFTypeRef v5 = v3;
          }
          objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "SCPreferencesLock() %s", v5);
        }

        objc_autoreleasePoolPop(v4);
        return 0LL;
      }
    }
  }

  return prefs;
}

uint64_t sub_10003A310(SCPreferencesRef prefs, int a2)
{
  if (qword_100219888) {
    dispatch_assert_queue_V2((dispatch_queue_t)qword_100219888);
  }
  if (a2)
  {
    if (SCPreferencesCommitChanges(prefs))
    {
      if (SCPreferencesApplyChanges(prefs)) {
        goto LABEL_15;
      }
      int v4 = SCError();
      CFTypeRef v5 = SCErrorString(v4);
      id v6 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        id v7 = "SCError Unavailable";
        if (v5) {
          id v7 = v5;
        }
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "SCPreferencesApplyChanges() %s", v7);
      }
    }

    else
    {
      int v8 = SCError();
      uint64_t v9 = SCErrorString(v8);
      id v6 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        id v10 = "SCError Unavailable";
        if (v9) {
          id v10 = v9;
        }
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "SCPreferencesCommitChanges() %s", v10);
      }
    }

    objc_autoreleasePoolPop(v6);
  }

__CFArray *sub_10003A464(const __CFArray *a1)
{
  return sub_10003A46C(a1, 0);
}

__CFArray *sub_10003A46C(const __CFArray *a1, int a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  CFTypeRef v5 = Mutable;
  if (a1)
  {
    if (Mutable)
    {
      CFIndex Count = CFArrayGetCount(a1);
      if (Count >= 1)
      {
        CFIndex v7 = Count;
        for (CFIndex i = 0LL; v7 != i; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
          if (ValueAtIndex)
          {
            if (a2 == 1)
            {
              id v10 = sub_100094EB4((uint64_t)ValueAtIndex);
LABEL_10:
              uint64_t v11 = v10;
              if (v10)
              {
                CFArrayAppendValue(v5, v10);
                CFRelease(v11);
              }

              continue;
            }

            if (!a2)
            {
              id v10 = sub_100012CEC((uint64_t)ValueAtIndex);
              goto LABEL_10;
            }
          }
        }
      }
    }
  }

  return v5;
}

__CFArray *sub_10003A530(const __CFArray *a1)
{
  return sub_10003A53C(a1, 0, 0);
}

__CFArray *sub_10003A53C(const __CFArray *a1, int a2, int a3)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  CFIndex v7 = Mutable;
  if (a1)
  {
    if (Mutable)
    {
      CFIndex Count = CFArrayGetCount(a1);
      if (Count >= 1)
      {
        CFIndex v9 = Count;
        for (CFIndex i = 0LL; i != v9; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
          if (ValueAtIndex)
          {
            int v12 = sub_100094AAC((uint64_t)kCFAllocatorDefault, ValueAtIndex);
            if (v12)
            {
              id v13 = v12;
              if (a2 != a3)
              {
                float v14 = (float)(int)sub_100096BF4((uint64_t)v12, @"RSSI") + 77.5;
                float v15 = fabsf(sqrtf((float)(v14 * v14) + 450.0));
                double v16 = (float)((float)(v14 / (float)(v15 + v15)) + 0.5);
                sub_100097140((uint64_t)v13, @"ScaledRSSI", v16);
                sub_100097140((uint64_t)v13, @"ScaledRate", 1.0);
                sub_100097140((uint64_t)v13, @"Strength", v16);
              }

              CFArrayAppendValue(v7, v13);
              CFRelease(v13);
            }
          }
        }
      }
    }
  }

  return v7;
}

float sub_10003A6C8(int a1)
{
  float v1 = (float)a1 + 77.5;
  float v2 = fabsf(sqrtf((float)(v1 * v1) + 450.0));
  return (float)(v1 / (float)(v2 + v2)) + 0.5;
}

__CFArray *sub_10003A704(const __CFArray *a1)
{
  if (!a1) {
    return 0LL;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      for (CFIndex i = 0LL; i != v4; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        if (ValueAtIndex)
        {
          CFIndex v7 = ValueAtIndex;
        }
      }
    }

    if (!CFArrayGetCount(Mutable))
    {
      CFRelease(Mutable);
      return 0LL;
    }
  }

  return Mutable;
}

CFPropertyListRef sub_10003A7C0(UInt8 *bytes, CFIndex length)
{
  if (!bytes || !length)
  {
    BOOL v6 = bytes != 0LL;
    if (length)
    {
      BOOL v6 = 0;
      BOOL v7 = bytes == 0LL;
    }

    else
    {
      BOOL v7 = 0;
    }

    if ((v7 || v6) && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100153B80();
    }
    return 0LL;
  }

  float v2 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, bytes, length, kCFAllocatorNull);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  CFErrorRef error = 0LL;
  CFPropertyListRef v4 = CFPropertyListCreateWithData(kCFAllocatorDefault, v2, 1uLL, 0LL, &error);
  if (error)
  {
    CFTypeRef v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: CFPropertyListCreateWithData returned with error %@", "_WiFiCopyUnserialized", error message];
    }
    objc_autoreleasePoolPop(v5);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100153B08();
    }
    CFRelease(error);
  }

  CFRelease(v3);
  return v4;
}

vm_address_t sub_10003A8FC(vm_address_t address, vm_size_t size)
{
  if (address)
  {
    if (size) {
      return vm_deallocate(mach_task_self_, address, size);
    }
  }

  return address;
}

void sub_10003A920(const void *a1, vm_offset_t *a2, mach_msg_type_number_t *a3)
{
  kern_return_t v9;
  mach_msg_type_number_t dataCnt;
  CFTypeRef v5 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, a1);
  if (v5)
  {
    BOOL v6 = v5;
    dataCnt = -1431655766;
    *a3 = CFDataGetLength(v5);
    vm_map_t v7 = mach_task_self_;
    BytePtr = CFDataGetBytePtr(v6);
    CFIndex v9 = vm_read(v7, (vm_address_t)BytePtr, *a3, a2, &dataCnt);
    CFRelease(v6);
    if (v9) {
      *a2 = 0LL;
    }
    *a3 = dataCnt;
  }

CFTypeRef sub_10003A9C4(CFAllocatorRef bufferAllocator, const void *a2)
{
  uint64_t v3 = CFWriteStreamCreateWithAllocatedBuffers(bufferAllocator, bufferAllocator);
  if (!v3) {
    return 0LL;
  }
  CFPropertyListRef v4 = v3;
  if (CFWriteStreamOpen(v3))
  {
    CFErrorRef error = 0LL;
    CFPropertyListWrite(a2, v4, kCFPropertyListBinaryFormat_v1_0, 0LL, &error);
    CFWriteStreamClose(v4);
    if (error)
    {
      CFTypeRef v5 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4, "%s: CFPropertyListCreateWithData returned with error %@", "_CFPropertyListCreateBinaryData", error message];
      }
      objc_autoreleasePoolPop(v5);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100153C00();
      }
      CFRelease(error);
    }

    CFTypeRef v6 = CFWriteStreamCopyProperty(v4, kCFStreamPropertyDataWritten);
  }

  else
  {
    CFTypeRef v6 = 0LL;
  }

  CFRelease(v4);
  return v6;
}

CFMutableArrayRef sub_10003AAC8(const __CFDictionary *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (Mutable) {
    CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)sub_10003AB20, Mutable);
  }
  return Mutable;
}

void sub_10003AB20(int a1, const void *a2, CFMutableArrayRef theArray)
{
}

CFMutableArrayRef sub_10003AB28(const __CFSet *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (Mutable) {
    CFSetApplyFunction(a1, (CFSetApplierFunction)sub_10003AB80, Mutable);
  }
  return Mutable;
}

void sub_10003AB80(void *value, CFMutableArrayRef theArray)
{
}

CFMutableSetRef sub_10003AB90(const __CFArray *a1)
{
  CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
  if (Mutable)
  {
    v4.length = CFArrayGetCount(a1);
    v4.id location = 0LL;
    CFArrayApplyFunction(a1, v4, (CFArrayApplierFunction)sub_10003ABF8, Mutable);
  }

  return Mutable;
}

void sub_10003ABF8(void *value, CFMutableSetRef theSet)
{
}

float sub_10003AC08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float result = (float)(a1 - a2) / (float)(a3 - a2);
  if (result > 1.0) {
    float result = 1.0;
  }
  if (result < 0.0) {
    return 0.0;
  }
  return result;
}

double sub_10003AC38(const void *a1)
{
  double valuePtr = 0.0;
  double v1 = 0.0;
  if (a1)
  {
    CFTypeID v3 = CFGetTypeID(a1);
    if (v3 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)a1, kCFNumberDoubleType, &valuePtr);
      return valuePtr;
    }
  }

  return v1;
}

CFNumberRef sub_10003AC9C(const __CFNumber *result)
{
  uint64_t valuePtr = 0LL;
  if (result)
  {
    double v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v1, kCFNumberCFIndexType, &valuePtr);
      return (const __CFNumber *)valuePtr;
    }

    else
    {
      CFTypeID v3 = CFGetTypeID(v1);
      if (v3 == CFBooleanGetTypeID()) {
        return (const __CFNumber *)(kCFBooleanTrue == v1);
      }
      else {
        return 0LL;
      }
    }
  }

  return result;
}

void sub_10003AD28(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionarySetValue(a1, a2, v5);
    CFRelease(v6);
  }

void sub_10003AD94(__CFDictionary *a1, const void *a2, double a3)
{
  double valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionarySetValue(a1, a2, v5);
    CFRelease(v6);
  }

BOOL sub_10003AE00(uint64_t a1, CFTypeRef cf)
{
  return cf && CFGetTypeID(cf) == a1;
}

uint64_t sub_10003AE38()
{
  return _SC_CFMachPortCreateWithPort("WiFiManager/base");
}

const char *sub_10003AE44(unsigned int a1)
{
  if (a1 > 4) {
    return "UNKNOWN";
  }
  else {
    return off_1001E3040[a1];
  }
}

double sub_10003AE68()
{
  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v1.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v1, 0LL);
  return (double)v1.tv_usec + (double)v1.tv_sec * 1000000.0;
}

uint64_t sub_10003AEB0(unsigned __int16 *a1)
{
  uint64_t v1 = 0LL;
  while (*(unsigned __int16 *)&algn_10017F273[v1] != *a1 || algn_10017F273[v1 + 2] != *((_BYTE *)a1 + 2))
  {
    v1 += 3LL;
    if (v1 == 33) {
      return 0LL;
    }
  }

  return 1LL;
}

NSDate *sub_10003AEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = objc_autoreleasePoolPush();
  CFIndex v9 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  id v10 = objc_opt_new(&OBJC_CLASS___NSDateComponents);
  -[NSDateComponents setHour:](v10, "setHour:", a2);
  -[NSDateComponents setMinute:](v10, "setMinute:", a3);
  -[NSDateComponents setSecond:](v10, "setSecond:", a4);
  uint64_t v11 = -[NSCalendar nextDateAfterDate:matchingComponents:options:]( +[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"),  "nextDateAfterDate:matchingComponents:options:",  a1,  v10,  1024LL);
  int v12 = v11;
  if (v11) {
    id v13 = v11;
  }

  -[NSAutoreleasePool drain](v9, "drain");
  objc_autoreleasePoolPop(v8);
  return v12;
}

void *sub_10003AFC0(void *a1, unint64_t a2, unint64_t a3)
{
  if (is_mul_ok(a2, a3)) {
    return realloc(a1, a2 * a3);
  }
  *__error() = 12;
  return 0LL;
}

uint64_t sub_10003AFF4(uint64_t a1)
{
  CFTypeID v2 = objc_autoreleasePoolPush();
  uint64_t v3 = os_transaction_create( -[NSString UTF8String]( +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"com.apple.wifid.%s", a1),  "UTF8String"));
  objc_autoreleasePoolPop(v2);
  return v3;
}

CFStringRef sub_10003B050(int a1)
{
  switch(a1)
  {
    case 1000:
      float result = @"Trigger Disconnect";
      break;
    case 1001:
      float result = @"Client Disconnect";
      break;
    case 1002:
      float result = @"Temporarily Disabled";
      break;
    case 1003:
      float result = @"Network Changed";
      break;
    case 1004:
      float result = @"Decryption Failure";
      break;
    case 1005:
      float result = @"Not Primary Interface";
      break;
    case 1006:
      float result = @"CLTM";
      break;
    case 1007:
      float result = @"Internet Sharing";
      break;
    case 1008:
      float result = @"User Preference";
      break;
    case 1009:
      float result = @"Misc.";
      break;
    case 1010:
      float result = @"EAP Restart";
      break;
    case 1011:
      float result = @"Control Center/3rd Party Client";
      break;
    case 1012:
      float result = @"802.1X Failure";
      break;
    case 1013:
      float result = @"Network Transition";
      break;
    case 1014:
      float result = @"Auto Unlock";
      break;
    case 1015:
      float result = @"Captive";
      break;
    case 1016:
      float result = @"Banner Association";
      break;
    case 1017:
      float result = @"BSS Steering";
      break;
    case 1018:
      float result = @"Auto Hotspot Association";
      break;
    case 1019:
      float result = @"Auto Hotspot Transition";
      break;
    case 1020:
      float result = @"Perf Roam";
      break;
    case 1021:
      float result = @"CarPlay Disabled";
      break;
    case 1022:
      float result = @"Battery Save Mode Enabled";
      break;
    case 1023:
      float result = @"AirPlay Started";
      break;
    case 1024:
      float result = @"Prefer 6E Off";
      break;
    case 1025:
      float result = @"Prefer 6E On";
      break;
    default:
      int v2 = a1 - 1;
      float result = @"Deauth";
      switch(v2)
      {
        case 0:
          return result;
        case 1:
          float result = @"Beacon Lost";
          break;
        case 2:
          float result = @"Internal Error";
          break;
        case 3:
          float result = @"System Sleep";
          break;
        case 4:
          float result = @"Powered Off";
          break;
        case 5:
          float result = @"Join Failure";
          break;
        case 6:
          float result = @"Colocated scope transition";
          break;
        case 7:
          float result = @"Disassociate";
          break;
        case 8:
          float result = @"Invalid SSID";
          break;
        default:
          float result = @"Unknown";
          break;
      }

      break;
  }

  return result;
}

CFStringRef sub_10003B244(unsigned int a1)
{
  if (a1 < 9 && ((0x117u >> a1) & 1) != 0) {
    return off_1001E3068[a1];
  }
  uint64_t v1 = @"Unknown";
  if ((~a1 & 3) == 0) {
    uint64_t v1 = @"STA + AWDL";
  }
  if ((~a1 & 5) == 0) {
    uint64_t v1 = @"STA + SoftAP";
  }
  if ((~a1 & 6) == 0) {
    uint64_t v1 = @"AWDL + SoftAP";
  }
  if ((~a1 & 7) == 0) {
    uint64_t v1 = @"STA + AWDL + SoftAP";
  }
  if ((~a1 & 0xC) == 0) {
    uint64_t v1 = @"SoftAp + NanPh";
  }
  if ((~a1 & 0xE) != 0) {
    return v1;
  }
  else {
    return @"AWDL + SoftAp + NanPh";
  }
}

CFStringRef sub_10003B2EC(unsigned int a1)
{
  if (a1 > 6) {
    return @"Unknown";
  }
  else {
    return off_1001E30B0[a1];
  }
}

CFStringRef sub_10003B310(unsigned int a1)
{
  if (a1 > 3) {
    return @"Unknown";
  }
  else {
    return off_1001E30E8[a1];
  }
}

CFStringRef sub_10003B334(int a1)
{
  uint64_t v1 = @"Unknown";
  if (a1 == 2) {
    uint64_t v1 = @"Not Home";
  }
  if (a1 == 1) {
    return @"Home";
  }
  else {
    return v1;
  }
}

CFStringRef sub_10003B360(int a1)
{
  uint64_t v1 = @"Unknown";
  if (a1 == 2) {
    uint64_t v1 = @"Not Work";
  }
  if (a1 == 1) {
    return @"Work";
  }
  else {
    return v1;
  }
}

CFStringRef sub_10003B38C(unsigned int a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_1001E3108[a1];
  }
}

CFStringRef sub_10003B3B0(int a1)
{
  else {
    return off_1001E3120[a1 - 1];
  }
}

CFStringRef sub_10003B3D8(unsigned int a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_1001E3148[a1];
  }
}

CFStringRef sub_10003B3FC(int a1)
{
  uint64_t v1 = @"Unknown";
  if (a1 == 2) {
    uint64_t v1 = @"Captive";
  }
  if (a1 == 1) {
    return @"Control Center";
  }
  else {
    return v1;
  }
}

CFStringRef sub_10003B428(unsigned int a1)
{
  if (a1 > 0xD) {
    return @"Unknown";
  }
  else {
    return off_1001E3160[a1];
  }
}

BOOL sub_10003B44C(const __CFString *a1)
{
  return CFStringFind(a1, @"facetime", 1uLL).length != 0;
}

CFStringRef sub_10003B474(unsigned int a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_1001E31D0[a1];
  }
}

CFDataRef sub_10003B498(const __CFData *result)
{
  if (result)
  {
    uint64_t v1 = result;
    CFTypeID TypeID = CFDataGetTypeID();
    if (TypeID == CFGetTypeID(v1)) {
      return (const __CFData *)((*CFDataGetBytePtr(v1) >> 1) & 1);
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10003B4E8(const __CFString *a1)
{
  *(void *)buffer = 0LL;
  uint64_t v10 = 0LL;
  if (!a1) {
    return 0;
  }
  CFStringGetCString(a1, buffer, 16LL, 0);
  if (!buffer[0])
  {
    int v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, interfaceCName is zero length.",  "WiFiIsInterfaceExpensive");
    }
    goto LABEL_16;
  }

  int v1 = socket(2, 2, 0);
  if (v1 == -1)
  {
    int v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: socket creation failed", "WiFiIsInterfaceExpensive");
    }
LABEL_16:
    objc_autoreleasePoolPop(v8);
    return 0;
  }

  int v2 = v1;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __strlcpy_chk(&v11, buffer, 16LL, 16LL);
  if (ioctl(v2, 0xC02069A0uLL, &v11) == -1 && *__error() != 1)
  {
    CFNumberRef v5 = objc_autoreleasePoolPush();
    CFNumberRef v6 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      vm_map_t v7 = __error();
      objc_msgSend(v6, "WFLog:message:", 4, "%s: ioctl(SIOCGIFEXPENSIVE) failed: %s", buffer, strerror(*v7));
    }

    objc_autoreleasePoolPop(v5);
    unsigned __int8 v3 = 0;
  }

  else
  {
    unsigned __int8 v3 = v12;
  }

  close(v2);
  return v3;
}

BOOL sub_10003B698()
{
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v4 = 0u;
  __int128 v5 = 0u;
  *(_OWORD *)__big = 0u;
  __int128 v3 = 0u;
  size_t v1 = 255LL;
  sysctlbyname("kern.wakereason", __big, &v1, 0LL, 0LL);
  if (!__big[0]) {
    return 0LL;
  }
  if (strcasestr(__big, "wlan")) {
    return 1LL;
  }
  return strcasestr(__big, "wifibt") != 0LL;
}

uint64_t sub_10003B774(const __CFArray *a1, void *a2, void *a3)
{
  if (a1 && CFArrayGetCount(a1) == 2)
  {
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 0LL);
    __int128 v7 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 1LL);
    if (ValueAtIndex) {
      CFNumberGetValue(ValueAtIndex, kCFNumberNSIntegerType, a2);
    }
    if (v7)
    {
      CFNumberGetValue(v7, kCFNumberNSIntegerType, a3);
      unsigned int v8 = 1;
      goto LABEL_9;
    }
  }

  else
  {
    ValueAtIndex = 0LL;
  }

  unsigned int v8 = 0;
LABEL_9:
  if (ValueAtIndex) {
    return 1LL;
  }
  else {
    return v8;
  }
}

CFNumberRef sub_10003B810(const __CFNumber *result)
{
  if (result)
  {
    size_t v1 = result;
    unsigned int valuePtr = 0;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      CFNumberGetValue(v1, kCFNumberIntType, &valuePtr);
      return (const __CFNumber *)valuePtr;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

CFNumberRef sub_10003B870(int a1)
{
  int valuePtr = a1;
  return CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
}

void sub_10003B8A4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

uint64_t sub_10003B8D0()
{
  uint64_t result = qword_100219890;
  if (!qword_100219890)
  {
    pthread_once(&stru_100218E78, (void (*)(void))sub_10003B90C);
    return qword_100219890;
  }

  return result;
}

uint64_t sub_10003B90C()
{
  uint64_t result = _CFRuntimeRegisterClass(&unk_1001E31E8);
  qword_100219890 = result;
  return result;
}

uint64_t sub_10003B930(uint64_t a1)
{
  CFErrorRef error = 0LL;
  __int128 v2 = *(_OWORD *)(a1 + 36);
  *(_OWORD *)token.val = *(_OWORD *)(a1 + 20);
  *(_OWORD *)&token.val[4] = v2;
  __int128 v3 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &token);
  __int128 v4 = v3;
  if (!v3)
  {
LABEL_17:
    uint64_t v8 = 0LL;
    __int128 v6 = 0LL;
    goto LABEL_6;
  }

  CFTypeRef v5 = SecTaskCopyValueForEntitlement(v3, @"com.apple.wifi.manager-access", &error);
  if (!v5)
  {
    __int128 v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "Client %@ has no entitlement", *(void *)(a1 + 64) message];
    }
    objc_autoreleasePoolPop(v10);
    goto LABEL_17;
  }

  __int128 v6 = v5;
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (TypeID == CFGetTypeID(v6) && CFEqual(v6, kCFBooleanTrue))
  {
    uint64_t v8 = 1LL;
    *(_DWORD *)(a1 + 136) = 1;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

uint64_t sub_10003BA54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 136) = a2;
  return result;
}

uint64_t sub_10003BA5C(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6, __int128 *a7)
{
  mach_port_t previous = -1431655766;
  mach_port_name_t name = 0;
  integer_t port_info_out = -1431655766;
  mach_msg_type_number_t port_info_outCnt = 1;
  if (!a5)
  {
LABEL_25:
    uint64_t v15 = 0LL;
LABEL_38:
    if (name) {
      mach_port_mod_refs(mach_task_self_, name, 1u, -1);
    }
    if (v15)
    {
      CFRelease((CFTypeRef)v15);
      return 0LL;
    }

    return v15;
  }

  if (!qword_100219890) {
    pthread_once(&stru_100218E78, (void (*)(void))sub_10003B90C);
  }
  uint64_t Instance = _CFRuntimeCreateInstance(a1);
  if (!Instance)
  {
    __int128 v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4 message:"Failed to create WiFiClientRef in CFRuntime"];
    }
    objc_autoreleasePoolPop(v32);
    goto LABEL_25;
  }

  uint64_t v15 = Instance;
  *(void *)(Instance + 176) = 0LL;
  *(_OWORD *)(Instance + 144) = 0u;
  *(_OWORD *)(Instance + 160) = 0u;
  *(_OWORD *)(Instance + 112) = 0u;
  *(_OWORD *)(Instance + 12_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 96) = 0u;
  *(_OWORD *)(Instance + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_DWORD *)(Instance + 16) = a2;
  *(_DWORD *)(Instance + 96) = a6;
  mach_port_allocate(mach_task_self_, 1u, &name);
  if (mach_port_request_notification(mach_task_self_, name, 70, 1u, name, 0x15u, &previous))
  {
    __int128 v33 = objc_autoreleasePoolPush();
    __int128 v34 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_37;
    }
    uint64_t v35 = "Failed to request MACH_NOTIFY_NO_SENDERS";
LABEL_36:
    [v34 WFLog:4 message:v35];
    goto LABEL_37;
  }

  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  *(void *)(v15 + 104) = Mutable;
  if (!Mutable)
  {
    __int128 v33 = objc_autoreleasePoolPush();
    __int128 v34 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_37;
    }
    uint64_t v35 = "Failed to allocate device client backing store";
    goto LABEL_36;
  }

  __int128 v17 = sub_100090DAC((uint64_t)kCFAllocatorDefault, a5, name, 0);
  *(void *)(v15 + 8_Block_object_dispose(va, 8) = v17;
  if (!v17)
  {
    __int128 v33 = objc_autoreleasePoolPush();
    __int128 v34 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_37;
    }
    uint64_t v35 = "Failed to allocate client port";
    goto LABEL_36;
  }

  mach_port_insert_right(mach_task_self_, name, name, 0x14u);
  mach_port_t v18 = mach_task_self_;
  mach_port_name_t v19 = sub_10003BEB4(*(void *)(v15 + 88));
  if (mach_port_get_attributes(v18, v19, 1, &port_info_out, &port_info_outCnt))
  {
    __int128 v33 = objc_autoreleasePoolPush();
    __int128 v34 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_37;
    }
    uint64_t v35 = "Unable to allocate acquire client reply port attributes";
    goto LABEL_36;
  }

  integer_t port_info_out = 64;
  mach_port_t v20 = mach_task_self_;
  mach_port_name_t v21 = sub_10003BEB4(*(void *)(v15 + 88));
  if (mach_port_set_attributes(v20, v21, 1, &port_info_out, port_info_outCnt))
  {
    __int128 v33 = objc_autoreleasePoolPush();
    __int128 v34 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      uint64_t v35 = "Unable to allocate set client reply port attributes";
      goto LABEL_36;
    }

void sub_10003BE9C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10003BEA4(uint64_t a1, uint64_t a2)
{
  return sub_100091024(*(void *)(a1 + 88), a2);
}

uint64_t sub_10003BEAC(uint64_t a1)
{
  return sub_100091164(*(void *)(a1 + 88));
}

uint64_t sub_10003BEB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_10003BEBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_10003BEC4(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_10003BECC(uint64_t a1)
{
  return sub_10003BEB4(*(void *)(a1 + 88));
}

uint64_t sub_10003BED4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_10003BEDC(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t sub_10003BEE4(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_10003BEEC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

__CFArray *sub_10003BEF4(uint64_t a1, const __CFArray *a2)
{
  __int128 v4 = *(const void **)(a1 + 112);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 112) = 0LL;
  }

  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFMutableArrayRef v6 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  __int128 v7 = v6;
  if (!a2 || !v6)
  {
LABEL_14:
    if (!v7) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }

  CFIndex Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    CFIndex v9 = Count;
    for (CFIndex i = 0LL; i != v9; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      if (ValueAtIndex)
      {
        __int128 v12 = ValueAtIndex;
        uint64_t v13 = sub_10003BEDC((uint64_t)ValueAtIndex);
        __int128 v14 = sub_100048F14(v13);
        if (v14)
        {
          uint64_t v15 = v14;
          v21.length = CFArrayGetCount(v14);
          v21.id location = 0LL;
          CFArrayAppendArray(v7, v15, v21);
          if (CFArrayGetCount(v15) >= 1)
          {
            CFIndex v16 = 0LL;
            do
            {
              __int128 v17 = (const __CFDictionary *)CFArrayGetValueAtIndex(v15, v16);
              Value = CFDictionaryGetValue(v17, @"VIRT_IF_NAME");
              CFDictionaryAddValue(Mutable, Value, v12);
              ++v16;
            }

            while (v16 < CFArrayGetCount(v15));
          }

          CFRelease(v15);
        }
      }
    }

    goto LABEL_14;
  }

const void *sub_10003C078(uint64_t a1, const void *a2)
{
  if (a1 && a2 && (__int128 v2 = *(const __CFDictionary **)(a1 + 112)) != 0LL) {
    return CFDictionaryGetValue(v2, a2);
  }
  else {
    return 0LL;
  }
}

void sub_10003C094(uint64_t a1, const void *a2, const void *a3)
{
  __int128 v3 = *(__CFDictionary **)(a1 + 112);
  if (v3) {
    CFDictionaryAddValue(v3, a2, a3);
  }
}

void sub_10003C0A4(uint64_t a1, const void *a2)
{
  __int128 v2 = *(__CFDictionary **)(a1 + 112);
  if (v2) {
    CFDictionaryRemoveValue(v2, a2);
  }
}

uint64_t sub_10003C0B4(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

void sub_10003C0BC(uint64_t a1, const void *a2, const void *a3)
{
}

void sub_10003C0C4(uint64_t a1, const void *a2)
{
}

uint64_t sub_10003C0CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_10003C0D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 52) = a2;
  return result;
}

uint64_t sub_10003C0DC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 176);
}

uint64_t sub_10003C0E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 176) = a2;
  return result;
}

uint64_t sub_10003C0EC(uint64_t a1)
{
  return *(void *)(a1 + 160);
}

uint64_t sub_10003C0F4(uint64_t a1)
{
  return *(void *)(a1 + 168);
}

void sub_10003C0FC(uint64_t a1, const __CFArray *a2)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 160))) {
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 160));
  }
  if (a2)
  {
    if (CFArrayGetCount(a2))
    {
      __int128 v4 = *(__CFArray **)(a1 + 160);
      v5.length = CFArrayGetCount(a2);
      v5.id location = 0LL;
      CFArrayAppendArray(v4, a2, v5);
    }
  }

void sub_10003C168(uint64_t a1, const __CFArray *a2)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 168))) {
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 168));
  }
  if (a2)
  {
    if (CFArrayGetCount(a2))
    {
      __int128 v4 = *(__CFArray **)(a1 + 168);
      v5.length = CFArrayGetCount(a2);
      v5.id location = 0LL;
      CFArrayAppendArray(v4, a2, v5);
    }
  }

uint64_t sub_10003C1D4(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 128) & 0x20) == 0) {
    return 4294963393LL;
  }
  if (!a2)
  {
    CFStringRef v25 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null notification.",  "WiFiClientDispatchNotification");
    }
    goto LABEL_33;
  }

  if (!sub_1000ABA9C(a2))
  {
    CFStringRef v25 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null device manager.",  "WiFiClientDispatchNotification");
    }
LABEL_33:
    objc_autoreleasePoolPop(v25);
    return 4294963396LL;
  }

  uint64_t v5 = sub_1000ABA9C(a2);
  uint64_t v6 = sub_10003BEDC(v5);
  __int128 v7 = (const void *)sub_10004CE2C(v6);
  if (!v7)
  {
    CFIndex v9 = 0LL;
    goto LABEL_9;
  }

  uint64_t v8 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, v7);
  CFIndex v9 = v8;
  if (!v8)
  {
LABEL_9:
    int Length = 0;
    BytePtr = 0LL;
    goto LABEL_10;
  }

  BytePtr = CFDataGetBytePtr(v8);
  int Length = CFDataGetLength(v9);
LABEL_10:
  uint64_t v10 = sub_100091DAC(a2);
  if (v10 && (CFDictionaryRef v11 = sub_100012CEC(v10)) != 0LL)
  {
    CFDictionaryRef v12 = v11;
    uint64_t v13 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, v11);
    __int128 v14 = v13;
    if (v13)
    {
      uint64_t v15 = CFDataGetBytePtr(v13);
      int v16 = CFDataGetLength(v14);
    }

    else
    {
      uint64_t v15 = 0LL;
      int v16 = 0;
    }

    CFRelease(v12);
  }

  else
  {
    __int128 v14 = 0LL;
    uint64_t v15 = 0LL;
    int v16 = 0;
  }

  __int128 v17 = (const void *)sub_10004CE2C(a2);
  if (!v17)
  {
    CFIndex v19 = 0LL;
    goto LABEL_21;
  }

  mach_port_t v18 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, v17);
  CFIndex v19 = v18;
  if (!v18)
  {
LABEL_21:
    mach_port_t v20 = 0LL;
    int v21 = 0;
    goto LABEL_22;
  }

  mach_port_t v20 = CFDataGetBytePtr(v18);
  int v21 = CFDataGetLength(v19);
LABEL_22:
  int v22 = *(_DWORD *)(a1 + 96);
  int v23 = sub_1000ABA94(a2);
  int v24 = sub_1000ABA7C(a2);
  sub_10014B954(v22, (vm_address_t)BytePtr, Length, v23, v24, (uint64_t)v15, v16, (uint64_t)v20, v21, 0);
  if (v19) {
    CFRelease(v19);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v9) {
    CFRelease(v9);
  }
  return 0LL;
}

uint64_t sub_10003C418(uint64_t a1, int a2)
{
  return sub_10014BF8C(*(_DWORD *)(a1 + 96), a2, 0);
}

void sub_10003C424(uint64_t a1, uint64_t a2, const void *a3, const __CFArray *a4, int a5)
{
  if (!a3)
  {
    CFIndex v9 = 0LL;
LABEL_6:
    BytePtr = 0LL;
    int Length = 0;
    if (!a4) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }

  uint64_t v8 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, a3);
  CFIndex v9 = v8;
  if (!v8) {
    goto LABEL_6;
  }
  BytePtr = CFDataGetBytePtr(v8);
  int Length = CFDataGetLength(v9);
  if (!a4)
  {
LABEL_12:
    sub_10014BA70(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 0LL, 0, a5, 0);
    if (v9) {
      goto LABEL_13;
    }
    return;
  }

LABEL_7:
  CFDictionaryRef v12 = sub_10003A464(a4);
  if (!v12) {
    goto LABEL_12;
  }
  uint64_t v13 = v12;
  __int128 v14 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, v12);
  if (!v14)
  {
    CFRelease(v13);
    goto LABEL_12;
  }

  uint64_t v15 = v14;
  int v16 = CFDataGetBytePtr(v14);
  int v17 = CFDataGetLength(v15);
  CFRelease(v13);
  sub_10014BA70(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, (uint64_t)v16, v17, a5, 0);
  CFRelease(v15);
  if (v9) {
LABEL_13:
  }
    CFRelease(v9);
}

  CFDictionaryRef v12 = sub_10003A464(a4);
  if (!v12) {
    goto LABEL_12;
  }
  uint64_t v13 = v12;
  __int128 v14 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, v12);
  if (!v14)
  {
    CFRelease(v13);
    goto LABEL_12;
  }

  uint64_t v15 = v14;
  int v16 = CFDataGetBytePtr(v14);
  int v17 = CFDataGetLength(v15);
  CFRelease(v13);
  sub_10014C018(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, (uint64_t)v16, v17, a5, 0);
  CFRelease(v15);
  if (v9) {
LABEL_13:
  }
    CFRelease(v9);
}

  CFDictionaryRef v12 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, a4);
  if (!v12) {
    goto LABEL_10;
  }
  uint64_t v13 = v12;
  __int128 v14 = CFDataGetBytePtr(v12);
  uint64_t v15 = CFDataGetLength(v13);
  sub_10014C110(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, (uint64_t)v14, v15, a5, 0);
  CFRelease(v13);
  if (v9) {
LABEL_11:
  }
    CFRelease(v9);
}

  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFDictionaryRef v12 = Count;
      for (CFIndex i = 0LL; i != v12; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        if (ValueAtIndex)
        {
          uint64_t v15 = ValueAtIndex;
          int v16 = sub_100096BF4((uint64_t)ValueAtIndex, @"RSSI");
          int v17 = v7 && (uint64_t)v16 < v7;
          mach_port_t v18 = !v17;
          if (v16 && v18)
          {
            if (v9)
            {
              if (a2)
              {
                CFIndex v19 = CFArrayGetValueAtIndex(a2, i);
                mach_port_t v20 = (void *)CFRetain(v19);
              }

              else
              {
                mach_port_t v20 = sub_100056E40((uint64_t)v15);
              }

              int v21 = v20;
              if (v20) {
                int v22 = v20;
              }
              else {
                int v22 = v15;
              }
              CFArrayAppendValue(Mutable, v22);
              if (v21) {
                CFRelease(v21);
              }
            }

            else
            {
              CFArrayAppendValue(Mutable, v15);
            }
          }
        }
      }
    }
  }

  return Mutable;
}

  if (a3)
  {
    uint64_t v10 = CFArrayGetCount(a3);
    if (v10 >= 1)
    {
      CFDictionaryRef v11 = v10;
      for (CFIndex i = 0LL; i != v11; ++i)
      {
        uint64_t v13 = (__CFDictionary *)CFArrayGetValueAtIndex(a3, i);
        if (v13)
        {
          __int128 v14 = v13;
          CFDictionaryRemoveValue(v13, @"SSID_STR");
          CFDictionaryRemoveValue(v14, @"SSID");
        }
      }
    }
  }

  if (v9) {
    CFRelease(v9);
  }
  if (Count) {
    CFRelease((CFTypeRef)Count);
  }
  uint64_t v15 = *(void (**)(uint64_t, const void *, const __CFArray *, void))(a4 + 4160);
  if (v15) {
    v15(a4, a2, a3, *(void *)(a4 + 4040));
  }
}

    NETRBErrorLog( (uint64_t)"unable to create connection to daemon %s",  v11,  v12,  v13,  v14,  v15,  v16,  v17,  (uint64_t)off_100219620);
    goto LABEL_8;
  }

  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000LL;
  handler[2] = sub_1001529C0;
  handler[3] = &unk_1001E8C38;
  handler[4] = qword_100219F38;
  handler[5] = a2;
  xpc_connection_set_event_handler((xpc_connection_t)qword_100219F38, handler);
  NETRBInfoLog((uint64_t)"connection %p to daemon created", v18, v19, v20, v21, v22, v23, v24, qword_100219F38);
  xpc_connection_resume((xpc_connection_t)qword_100219F38);
  return qword_100219F38 != 0;
}

void sub_10003C570( uint64_t a1, const void *a2, const __CFData *a3, const __CFData *value, const __CFData *a5, int a6)
{
  uint64_t v8 = value;
  CFDictionaryRef v11 = *(__CFDictionary **)(a1 + 104);
  if (value && a6 == -369033213) {
    CFDictionarySetValue(v11, a2, value);
  }
  else {
    CFDictionaryRemoveValue(v11, a2);
  }
  if (a3 && (CFDictionaryRef v12 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, a3), (a3 = v12) != 0LL))
  {
    BytePtr = CFDataGetBytePtr(v12);
    int Length = CFDataGetLength(a3);
    if (!v8)
    {
LABEL_8:
      int v14 = a6;
      goto LABEL_14;
    }
  }

  else
  {
    BytePtr = 0LL;
    int Length = 0;
    if (!v8) {
      goto LABEL_8;
    }
  }

  CFDictionaryRef v15 = sub_100012CEC((uint64_t)v8);
  if (!v15)
  {
    int v14 = a6;
    uint64_t v8 = 0LL;
LABEL_14:
    mach_port_t v18 = 0LL;
    int v19 = 0;
    if (!a5) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }

  CFDictionaryRef v16 = v15;
  int v14 = a6;
  int v17 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, v15);
  uint64_t v8 = v17;
  if (v17)
  {
    mach_port_t v18 = CFDataGetBytePtr(v17);
    int v19 = CFDataGetLength(v8);
  }

  else
  {
    mach_port_t v18 = 0LL;
    int v19 = 0;
  }

  CFRelease(v16);
  if (!a5) {
    goto LABEL_20;
  }
LABEL_18:
  mach_port_t v20 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, a5);
  a5 = v20;
  if (v20)
  {
    int v21 = CFDataGetBytePtr(v20);
    int v22 = CFDataGetLength(a5);
    goto LABEL_21;
  }

void sub_10003C754(uint64_t a1, uint64_t a2, const void *a3, int a4, uint64_t a5, const __CFData *a6)
{
  if (a3)
  {
    CFTypeRef v10 = sub_10003A9C4(kCFAllocatorDefault, a3);
    if (v10)
    {
      CFDictionaryRef v11 = v10;
      if (a5)
      {
        CFDictionaryRef v12 = sub_100012CEC(a5);
        if (!v12)
        {
LABEL_18:
          CFRelease(v11);
          return;
        }

        CFDictionaryRef v13 = v12;
        int v14 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, v12);
        if (!v14)
        {
LABEL_17:
          CFRelease(v13);
          goto LABEL_18;
        }

        CFDictionaryRef v15 = v14;
        BytePtr = CFDataGetBytePtr(v14);
        LODWORD(a5) = CFDataGetLength(v15);
      }

      else
      {
        CFDictionaryRef v13 = 0LL;
        CFDictionaryRef v15 = 0LL;
        BytePtr = 0LL;
      }

      int v24 = v13;
      if (a6)
      {
        int v17 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, a6);
        if (!v17) {
          goto LABEL_14;
        }
        a6 = v17;
        int v18 = a4;
        int v19 = CFDataGetBytePtr(v17);
        int Length = CFDataGetLength(a6);
      }

      else
      {
        int v18 = a4;
        int v19 = 0LL;
        int Length = 0;
      }

      int v21 = *(_DWORD *)(a1 + 96);
      int v22 = CFDataGetBytePtr((CFDataRef)v11);
      int v23 = CFDataGetLength((CFDataRef)v11);
      sub_10014BC80(v21, (vm_address_t)v22, v23, v18, (uint64_t)BytePtr, a5, (uint64_t)v19, Length, 0);
      CFDictionaryRef v13 = v24;
      if (a6) {
        CFRelease(a6);
      }
LABEL_14:
      if (v15) {
        CFRelease(v15);
      }
      if (!v13) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }

void sub_10003C8E4(uint64_t a1, uint64_t a2, const void *a3, int a4, const __CFData *a5)
{
  if (a3)
  {
    CFTypeRef v8 = sub_10003A9C4(kCFAllocatorDefault, a3);
    if (v8)
    {
      CFIndex v9 = v8;
      if (a5)
      {
        CFTypeRef v10 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, a5);
        if (!v10)
        {
LABEL_9:
          CFRelease(v9);
          return;
        }

        a5 = v10;
        BytePtr = CFDataGetBytePtr(v10);
        int Length = CFDataGetLength(a5);
      }

      else
      {
        BytePtr = 0LL;
        int Length = 0;
      }

      int v13 = *(_DWORD *)(a1 + 96);
      int v14 = CFDataGetBytePtr((CFDataRef)v9);
      int v15 = CFDataGetLength((CFDataRef)v9);
      sub_10014BD98(v13, (vm_address_t)v14, v15, a4, (uint64_t)BytePtr, Length, 0);
      if (a5) {
        CFRelease(a5);
      }
      goto LABEL_9;
    }
  }

void sub_10003C9DC(uint64_t a1, uint64_t a2, const void *a3, const __CFArray *a4, int a5)
{
  if (!a3)
  {
    CFIndex v9 = 0LL;
LABEL_6:
    BytePtr = 0LL;
    int Length = 0;
    if (!a4) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }

  CFTypeRef v8 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, a3);
  CFIndex v9 = v8;
  if (!v8) {
    goto LABEL_6;
  }
  BytePtr = CFDataGetBytePtr(v8);
  int Length = CFDataGetLength(v9);
  if (!a4)
  {
LABEL_12:
    sub_10014C018(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 0LL, 0, a5, 0);
    if (v9) {
      goto LABEL_13;
    }
    return;
  }

void sub_10003CB28(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(const __CFArray **)(a1 + 80);
  if (!v4)
  {
    CFTypeRef v8 = objc_autoreleasePoolPush();
    CFIndex v9 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      CFTypeRef v10 = "Error gettitng manager";
LABEL_11:
      [v9 WFLog:4 message:v10];
    }

void sub_10003CBE8(uint64_t a1, uint64_t a2, unsigned int a3, const void *a4)
{
  if (!a1
    || (CFTypeRef v8 = *(const __CFString **)(a1 + 64)) == 0LL
    || (CFComparisonResult v9 = CFStringCompare(v8, @"SpringBoard", 0LL), a3 != 1)
    || v9)
  {
    if (a3 <= 0x2C)
    {
      if (((1LL << a3) & 0x100000060004LL) != 0)
      {
        unint64_t v19 = 1LL << a3;
        goto LABEL_21;
      }

      if (((1LL << a3) & 0x2200200) != 0)
      {
        unint64_t v19 = *(void *)(a1 + 128);
        goto LABEL_21;
      }
    }

void sub_10003D044(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(const __CFArray **)(a1 + 80);
  if (!v3)
  {
    __int128 v7 = objc_autoreleasePoolPush();
    CFTypeRef v8 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      CFComparisonResult v9 = "Error gettitng manager";
LABEL_10:
      [v8 WFLog:4 message:v9];
    }

void sub_10003D0F4(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6 = *(const __CFArray **)(a1 + 80);
  if (!v6)
  {
    CFTypeRef v10 = objc_autoreleasePoolPush();
    CFDictionaryRef v11 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      CFDictionaryRef v12 = "Error getting manager";
LABEL_11:
      [v11 WFLog:4 message:v12];
    }

void sub_10003D1B8(uint64_t a1, uint64_t a2, const void *a3)
{
  else {
    unsigned int v6 = 18;
  }
  sub_10003CBE8(a1, a2, v6, a3);
  __int128 v7 = *(const __CFArray **)(a1 + 80);
  if (!v7)
  {
    CFDictionaryRef v11 = objc_autoreleasePoolPush();
    CFDictionaryRef v12 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      uint64_t v13 = "Error getting manager";
LABEL_13:
      [v12 WFLog:4 message:v13];
    }

void sub_10003D298(uint64_t a1, uint64_t a2, const void *a3, const void *a4, int a5)
{
  if (!a3)
  {
    CFComparisonResult v9 = 0LL;
LABEL_6:
    BytePtr = 0LL;
    int Length = 0;
    if (!a4) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }

  CFTypeRef v8 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, a3);
  CFComparisonResult v9 = v8;
  if (!v8) {
    goto LABEL_6;
  }
  BytePtr = CFDataGetBytePtr(v8);
  int Length = CFDataGetLength(v9);
  if (!a4)
  {
LABEL_10:
    sub_10014C110(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 0LL, 0, a5, 0);
    if (v9) {
      goto LABEL_11;
    }
    return;
  }

void sub_10003D3B4(uint64_t a1, uint64_t a2, void *key, const void *a4)
{
  uint64_t valuePtr = 0LL;
  if (a1 && a2 && key)
  {
    unsigned int v6 = *(const __CFDictionary **)(a1 + 120);
    if (v6)
    {
      unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(v6, key);
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberSInt64Type, &valuePtr);
        if ((valuePtr & 0x1000000) != 0)
        {
          if ((*(_BYTE *)(a1 + 52) & 0x10) == 0)
          {
            CFComparisonResult v9 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, key);
            CFTypeRef v10 = v9;
            if (v9)
            {
              BytePtr = CFDataGetBytePtr(v9);
              int Length = CFDataGetLength(v10);
              if (!a4) {
                goto LABEL_18;
              }
            }

            else
            {
              BytePtr = 0LL;
              int Length = 0;
              if (!a4) {
                goto LABEL_18;
              }
            }

            int v14 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, a4);
            if (v14)
            {
              int v15 = v14;
              CFDictionaryRef v16 = CFDataGetBytePtr(v14);
              int v17 = CFDataGetLength(v15);
              sub_10014BE90(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 24LL, (uint64_t)v16, v17, 0);
              CFRelease(v15);
              if (!v10) {
                return;
              }
LABEL_19:
              CFRelease(v10);
              return;
            }

void sub_10003D580(uint64_t a1, uint64_t a2, void *key, const void *a4)
{
  uint64_t valuePtr = 0LL;
  if (a1 && a2 && key)
  {
    unsigned int v6 = *(const __CFDictionary **)(a1 + 120);
    if (v6)
    {
      unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(v6, key);
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberSInt64Type, &valuePtr);
        if ((valuePtr & 0x400000000000LL) != 0)
        {
          CFComparisonResult v9 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, key);
          CFTypeRef v10 = v9;
          if (v9)
          {
            BytePtr = CFDataGetBytePtr(v9);
            int Length = CFDataGetLength(v10);
            if (!a4) {
              goto LABEL_14;
            }
          }

          else
          {
            BytePtr = 0LL;
            int Length = 0;
            if (!a4) {
              goto LABEL_14;
            }
          }

          uint64_t v13 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, a4);
          if (v13)
          {
            int v14 = v13;
            int v15 = CFDataGetBytePtr(v13);
            int v16 = CFDataGetLength(v14);
            sub_10014BE90(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 46LL, (uint64_t)v15, v16, 0);
            CFRelease(v14);
            if (!v10) {
              return;
            }
LABEL_15:
            CFRelease(v10);
            return;
          }

void sub_10003D710(uint64_t a1, uint64_t a2, void *key, const void *a4)
{
  uint64_t valuePtr = 0LL;
  if (a1 && a2 && key)
  {
    unsigned int v6 = *(const __CFDictionary **)(a1 + 120);
    if (v6)
    {
      unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(v6, key);
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberSInt64Type, &valuePtr);
        if ((valuePtr & 0x400000) != 0)
        {
          CFComparisonResult v9 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, key);
          CFTypeRef v10 = v9;
          if (v9)
          {
            BytePtr = CFDataGetBytePtr(v9);
            int Length = CFDataGetLength(v10);
            if (!a4) {
              goto LABEL_14;
            }
          }

          else
          {
            BytePtr = 0LL;
            int Length = 0;
            if (!a4) {
              goto LABEL_14;
            }
          }

          uint64_t v13 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, a4);
          if (v13)
          {
            int v14 = v13;
            int v15 = CFDataGetBytePtr(v13);
            int v16 = CFDataGetLength(v14);
            sub_10014BE90(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 22LL, (uint64_t)v15, v16, 0);
            CFRelease(v14);
            if (!v10) {
              return;
            }
LABEL_15:
            CFRelease(v10);
            return;
          }

void sub_10003D8A0(uint64_t a1, uint64_t a2)
{
}

void sub_10003D8AC(uint64_t a1, uint64_t a2, const void *a3)
{
}

void sub_10003D8B8(uint64_t a1, uint64_t a2, const void *a3)
{
}

void sub_10003D8C4(uint64_t a1, uint64_t a2, const void *a3)
{
}

void sub_10003D8D0(uint64_t a1, uint64_t a2, const void *a3)
{
}

void sub_10003D8DC(uint64_t a1, uint64_t a2, const void *a3)
{
}

void sub_10003D8E8(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
}

void sub_10003D948(uint64_t a1, uint64_t a2, const void *a3)
{
}

void sub_10003D954(uint64_t a1, uint64_t a2)
{
}

void sub_10003D960(uint64_t a1, int a2, uint64_t a3)
{
  BOOL valuePtr = a2 != 0;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
  sub_10003CBE8(a1, a3, 0xCu, v5);
  if (v5) {
    CFRelease(v5);
  }
}

void sub_10003D9D8(uint64_t a1, uint64_t a2, const void *a3)
{
}

void sub_10003D9E4(uint64_t a1, uint64_t a2, const void *a3)
{
}

void sub_10003D9F0(uint64_t a1, uint64_t a2, const void *a3)
{
}

void sub_10003D9FC(uint64_t a1, uint64_t a2, const void *a3)
{
}

void sub_10003DA08(uint64_t a1, uint64_t a2, const void *a3)
{
}

void sub_10003DA14(uint64_t a1, uint64_t a2, const void *a3)
{
}

void sub_10003DA20(uint64_t a1, uint64_t a2, const void *a3)
{
}

void sub_10003DA2C(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v3 = (const void **)&kCFBooleanTrue;
  if (!a3) {
    __int128 v3 = (const void **)&kCFBooleanFalse;
  }
  sub_10003CBE8(a1, a2, 0x26u, *v3);
}

void sub_10003DA50(uint64_t a1, uint64_t a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    sub_10003CBE8(a1, a2, 0x27u, v5);
    CFRelease(v6);
  }

  else
  {
    __int128 v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Could not allocate M1M4Handshake24GHzCountRef",  "WiFiClientDispatchM1M4Handshake24GHzCountEvent");
    }
    objc_autoreleasePoolPop(v7);
  }

void sub_10003DB00(uint64_t a1, uint64_t a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    sub_10003CBE8(a1, a2, 0x25u, v5);
    CFRelease(v6);
  }

  else
  {
    __int128 v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Could not allocate numRef",  "WiFiClientDispatchCarPlayNetworkTypeChangeEvent");
    }
    objc_autoreleasePoolPop(v7);
  }

void sub_10003DBB0(uint64_t a1, uint64_t a2, const void *a3)
{
}

void sub_10003DBBC(uint64_t a1, uint64_t a2, const void *a3)
{
}

void sub_10003DBC8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a3)
  {
    CFDictionaryRef v6 = sub_100012CEC(a3);
    if (v6)
    {
      CFDictionaryRef v7 = v6;
      CFTypeRef v8 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, v6);
      if (v8)
      {
        CFComparisonResult v9 = v8;
        BytePtr = CFDataGetBytePtr(v8);
        int Length = CFDataGetLength(v9);
        sub_10014C208(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, a4, 0);
        CFRelease(v9);
      }

      CFRelease(v7);
    }
  }

uint64_t sub_10003DC70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 12_Block_object_dispose(va, 8) = a2;
  return result;
}

uint64_t sub_10003DC78(uint64_t a1)
{
  return *(void *)(a1 + 128);
}

void sub_10003DC80(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t valuePtr = a4;
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
  CFNumberRef v7 = v6;
  if (a3 && v6)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 120), a3, v6);
LABEL_4:
    CFRelease(v7);
    return;
  }

  if (v6) {
    goto LABEL_4;
  }
}

CFNumberRef sub_10003DCF8(uint64_t a1, uint64_t a2)
{
  uint64_t valuePtr = 0LL;
  if (!a1 || !*(void *)(a1 + 120))
  {
    CFNumberRef v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: invalid wifi client ref",  "WiFiClientGetDeviceEventMask");
    }
    goto LABEL_10;
  }

  if (!a2)
  {
    CFNumberRef v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null device.", "WiFiClientGetDeviceEventMask");
    }
    goto LABEL_10;
  }

  uint64_t v3 = sub_10003BEDC(a2);
  if (!v3)
  {
    CFNumberRef v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null deviceRef.", "WiFiClientGetDeviceEventMask");
    }
    goto LABEL_10;
  }

  __int128 v4 = (const void *)sub_10004CE2C(v3);
  if (!v4)
  {
    CFNumberRef v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null ifName.", "WiFiClientGetDeviceEventMask");
    }
LABEL_10:
    objc_autoreleasePoolPop(v6);
    return 0LL;
  }

  uint64_t result = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 120), v4);
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }

  return result;
}

uint64_t sub_10003DE38(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 144) = a2;
  *(void *)(result + 152) = a3;
  return result;
}

void sub_10003DE40(uint64_t a1)
{
  if (*(void *)(a1 + 144))
  {
    CFRetain((CFTypeRef)a1);
    uint64_t v2 = *(void *)(a1 + 88);
    if (v2) {
      sub_100091280(v2, 0LL, 0LL);
    }
    (*(void (**)(uint64_t, void))(a1 + 144))(a1, *(void *)(a1 + 152));
    CFRelease((CFTypeRef)a1);
  }

void sub_10003DE98(uint64_t a1, uint64_t a2, const void *a3)
{
}

void sub_10003DEA4(uint64_t a1, uint64_t a2, const void *a3)
{
}

CFStringRef sub_10003DEB0(const __CFString *result)
{
  if (result)
  {
    uint64_t result = (const __CFString *)result[2].isa;
    if (result) {
      return (const __CFString *)(CFStringCompare(result, @"SpringBoard", 0LL) == kCFCompareEqualTo);
    }
  }

  return result;
}

CFStringRef sub_10003DEE4(const __CFString *result)
{
  if (result)
  {
    uint64_t result = (const __CFString *)result[2].isa;
    if (result) {
      return (const __CFString *)(CFStringCompare(result, @"Preferences", 1uLL) == kCFCompareEqualTo);
    }
  }

  return result;
}

CFStringRef sub_10003DF18(const __CFString *result)
{
  if (result)
  {
    uint64_t result = (const __CFString *)result[2].isa;
    if (result) {
      return (const __CFString *)(CFStringCompare(result, @"mobilewifitool", 1uLL) == kCFCompareEqualTo);
    }
  }

  return result;
}

CFStringRef sub_10003DF4C(const __CFString *result)
{
  if (result)
  {
    uint64_t result = (const __CFString *)result[2].isa;
    if (result) {
      return (const __CFString *)(CFStringCompare(result, @"sharingd", 1uLL) == kCFCompareEqualTo);
    }
  }

  return result;
}

CFStringRef sub_10003DF80(const __CFString *result)
{
  if (result)
  {
    uint64_t result = (const __CFString *)result[2].isa;
    if (result) {
      return (const __CFString *)(CFStringCompare(result, @"PersonalHotspotControlExtension", 1uLL) == kCFCompareEqualTo);
    }
  }

  return result;
}

void sub_10003DFB4(uint64_t a1, int a2, const void *a3)
{
  if ((*(_BYTE *)(a1 + 131) & 4) != 0)
  {
    if (a3)
    {
      CFNumberRef v5 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, a3);
      CFNumberRef v6 = v5;
      if (v5)
      {
        BytePtr = CFDataGetBytePtr(v5);
        int Length = CFDataGetLength(v6);
      }

      else
      {
        BytePtr = 0LL;
        int Length = 0;
      }
    }

    else
    {
      BytePtr = 0LL;
      int Length = 0;
      CFNumberRef v6 = 0LL;
    }

    sub_10014C2D4(*(_DWORD *)(a1 + 96), a2, (vm_address_t)BytePtr, Length, 0);
    if (v6) {
      CFRelease(v6);
    }
  }

void sub_10003E064(uint64_t a1, const void *a2)
{
  if ((*(_BYTE *)(a1 + 131) & 0x20) != 0)
  {
    if (a2 && (uint64_t v3 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, a2)) != 0LL)
    {
      __int128 v4 = v3;
      BytePtr = CFDataGetBytePtr(v3);
      int Length = CFDataGetLength(v4);
      sub_10014C3A0(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 0);
      CFRelease(v4);
    }

    else
    {
      sub_10014C3A0(*(_DWORD *)(a1 + 96), 0LL, 0, 0);
    }
  }

void sub_10003E104(uint64_t a1, uint64_t a2, const void *a3)
{
}

void sub_10003E110(uint64_t a1, const void *a2)
{
  if ((*(_BYTE *)(a1 + 132) & 2) != 0)
  {
    uint64_t v3 = (const __CFData *)sub_10003A9C4(kCFAllocatorDefault, a2);
    if (v3)
    {
      __int128 v4 = v3;
      BytePtr = CFDataGetBytePtr(v3);
      int Length = CFDataGetLength(v4);
      sub_10014C4F8(*(_DWORD *)(a1 + 96), (vm_address_t)BytePtr, Length, 0);
      CFRelease(v4);
    }

    else
    {
      sub_10014C4F8(*(_DWORD *)(a1 + 96), 0LL, 0, 0);
    }
  }

void sub_10003E1AC(uint64_t a1, uint64_t a2, const void *a3)
{
}

BOOL sub_10003E1B8(uint64_t a1, const __CFString *a2)
{
  CFErrorRef error = 0LL;
  __int128 v3 = *(_OWORD *)(a1 + 36);
  *(_OWORD *)v11.val = *(_OWORD *)(a1 + 20);
  *(_OWORD *)&v11.val[4] = v3;
  __int128 v4 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &v11);
  if (v4)
  {
    CFNumberRef v5 = v4;
    CFNumberRef v6 = (__SecTask *)SecTaskCopyValueForEntitlement(v4, a2, &error);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFTypeID TypeID = CFBooleanGetTypeID();
      BOOL v9 = TypeID == CFGetTypeID(v7) && CFEqual(v7, kCFBooleanTrue) != 0;
      CFRelease(v5);
    }

    else
    {
      BOOL v9 = 0LL;
      CFNumberRef v7 = v5;
    }

    CFRelease(v7);
  }

  else
  {
    BOOL v9 = 0LL;
  }

  if (error) {
    CFRelease(error);
  }
  return v9;
}

void sub_10003E298(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2)
  {
    unsigned int v3 = sub_10003BEB4(v2);
    sub_1000912D4(v3);
    uint64_t v2 = *(void *)(a1 + 88);
  }

  sub_100091164(v2);
  mach_port_name_t v4 = *(_DWORD *)(a1 + 96);
  if (v4) {
    mach_port_deallocate(mach_task_self_, v4);
  }
  CFNumberRef v5 = *(const void **)(a1 + 112);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 112) = 0LL;
  }

  CFNumberRef v6 = *(const void **)(a1 + 120);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 120) = 0LL;
  }

  CFStringRef v7 = CFUUIDCreateString(kCFAllocatorDefault, *(CFUUIDRef *)(a1 + 72));
  CFTypeRef v8 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "Removing client for %@ (%@)", *(void *)(a1 + 64), v7 message];
  }
  objc_autoreleasePoolPop(v8);
  if (v7) {
    CFRelease(v7);
  }
  BOOL v9 = *(const void **)(a1 + 64);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 64) = 0LL;
  }

  CFTypeRef v10 = *(const void **)(a1 + 72);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 72) = 0LL;
  }

  audit_token_t v11 = *(const void **)(a1 + 104);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 104) = 0LL;
  }

  CFDictionaryRef v12 = *(const void **)(a1 + 160);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 160) = 0LL;
  }

  uint64_t v13 = *(const void **)(a1 + 168);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0LL;
  }

CFStringRef sub_10003E3C4(void *cf)
{
  if (!cf) {
    return @"Invalid client ref";
  }
  uint64_t v2 = qword_100219890;
  if (!qword_100219890)
  {
    pthread_once(&stru_100218E78, (void (*)(void))sub_10003B90C);
    uint64_t v2 = qword_100219890;
  }

  if (v2 == CFGetTypeID(cf)) {
    return CFStringCreateWithFormat( kCFAllocatorDefault,  0LL,  @"%@: pid=%d uuid=%@ type=%d",  cf[8],  *((unsigned int *)cf + 14),  cf[9],  *((unsigned int *)cf + 4));
  }
  else {
    return @"Invalid client ref";
  }
}

void sub_10003E464(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 180LL);
  unsigned int v3 = objc_autoreleasePoolPush();
  if (v2)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "link recovery from SSID transition did finish within %d seconds ",  4);
    }
    objc_autoreleasePoolPop(v3);
    *(_WORD *)(*(void *)(a1 + 32) + 180LL) = 0;
  }

  else
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "link recovery did not complete within %d seconds, dispatching link down event to SpringBoard",  4);
    }
    objc_autoreleasePoolPop(v3);
    uint64_t v5 = *(void *)(a1 + 32);
    vm_address_t v4 = *(void *)(a1 + 40);
    *(_BYTE *)(v5 + 181) = 0;
    sub_10014BE90( *(_DWORD *)(v5 + 96),  v4,  *(_DWORD *)(a1 + 48),  *(unsigned int *)(a1 + 72),  *(void *)(a1 + 56),  *(_DWORD *)(a1 + 64),  0);
  }

uint64_t sub_10003E534(uint64_t a1)
{
  if (qword_100219898)
  {
    CFRelease((CFTypeRef)qword_100219898);
    qword_100219898 = 0LL;
  }

  if (qword_1002198A0)
  {
    CFRelease((CFTypeRef)qword_1002198A0);
    qword_1002198A0 = 0LL;
  }

  int v2 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), (CFStringRef)qword_1002198A8);
  unsigned int v3 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), (CFStringRef)qword_1002198B0);
  vm_address_t v4 = v3;
  if (!v2)
  {
    uint64_t v6 = 0LL;
    qword_100219898 = 0LL;
    if (v3) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }

  unsigned int Value = CFDictionaryGetValue(v2, kSCDynamicStorePropNetPrimaryInterface);
  qword_100219898 = (uint64_t)Value;
  if (!Value)
  {
    uint64_t v6 = 0LL;
    if (v4) {
      goto LABEL_10;
    }
LABEL_16:
    qword_1002198A0 = 0LL;
    goto LABEL_17;
  }

  uint64_t v6 = CFEqual(Value, *(CFTypeRef *)(a1 + 112)) != 0;
  CFRetain((CFTypeRef)qword_100219898);
  if (!v4) {
    goto LABEL_16;
  }
LABEL_10:
  CFStringRef v7 = CFDictionaryGetValue(v4, kSCDynamicStorePropNetPrimaryInterface);
  qword_1002198A0 = (uint64_t)v7;
  if (v7)
  {
    if (CFEqual(v7, *(CFTypeRef *)(a1 + 112))) {
      uint64_t v6 = 1LL;
    }
    else {
      uint64_t v6 = v6;
    }
    CFRetain((CFTypeRef)qword_1002198A0);
  }

const void *sub_10003E780(int a1, CFDictionaryRef theDict)
{
  if (theDict) {
    return CFDictionaryGetValue(theDict, kSCDynamicStorePropNetPrimaryInterface);
  }
  else {
    return 0LL;
  }
}

BOOL sub_10003E7A4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4296)) {
    BOOL v2 = (unsigned __int16)*(_DWORD *)(a1 + 4296) == 65193;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = v2;
  vm_address_t v4 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    if (v3) {
      uint64_t v5 = "%s: interface is IPv4 not routable";
    }
    else {
      uint64_t v5 = "%s: interface is IPv4 routable";
    }
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, v5, "WiFiDeviceIsInterfaceRoutable");
  }

  objc_autoreleasePoolPop(v4);
  uint64_t v6 = (_BYTE *)(a1 + 4300);
  if (*(_BYTE *)(a1 + 4300))
  {
    CFStringRef v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: interface is IPv6 routable",  "WiFiDeviceIsInterfaceRoutable");
    }
    objc_autoreleasePoolPop(v7);
  }

  return !v3 || *v6 != 0;
}

BOOL sub_10003E890(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4296)) {
    BOOL v1 = (unsigned __int16)*(_DWORD *)(a1 + 4296) == 65193;
  }
  else {
    BOOL v1 = 1;
  }
  return !v1;
}

uint64_t sub_10003E8AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4300);
}

BOOL sub_10003E8B8(uint64_t a1)
{
  return *(_BYTE *)(a1 + 4312) == 0;
}

void sub_10003E8CC(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7)
{
  __int16 v34 = a7;
  if (a1)
  {
    CFDictionaryRef v12 = kCFAllocatorDefault;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      CFMutableDictionaryRef v14 = Mutable;
      switch(a4)
      {
        case 2u:
          int v15 = 1;
          goto LABEL_12;
        case 3u:
          int v15 = 2;
          goto LABEL_12;
        case 4u:
          int v15 = 3;
          goto LABEL_12;
        case 5u:
          int v15 = 5;
          goto LABEL_12;
        case 6u:
          int v15 = 6;
          goto LABEL_12;
        case 7u:
          int v15 = 7;
          goto LABEL_12;
        case 8u:
          int v15 = 8;
LABEL_12:
          unsigned int valuePtr = v15;
          break;
        default:
          unsigned int valuePtr = 0;
          break;
      }

      int v16 = *(_DWORD *)(a1 + 5940);
      if ((v16 & a6) != 0)
      {
        int v17 = objc_autoreleasePoolPush();
        CFIndex v18 = (void *)qword_100219F60;
        if (qword_100219F60)
        {
          unint64_t v19 = sub_10003B310(a6);
          [v18 WFLog:4, "%s: Clearing roam offset %@(%d) for %@", "WiFiDeviceSetRoamParams", v19, a6, sub_100095BC8(a3) message];
        }

        objc_autoreleasePoolPop(v17);
        int v16 = *(_DWORD *)(a1 + 5940);
      }

      if ((v16 & a5) != 0)
      {
        uint64_t v20 = objc_autoreleasePoolPush();
        uint64_t v21 = (void *)qword_100219F60;
        if (qword_100219F60)
        {
          int v22 = sub_10003B310(a5);
          [v21 WFLog:4, "%s: Setting roam offset %@(%d) for %@", "WiFiDeviceSetRoamParams", v22, a5, sub_100095BC8(a3) message];
        }

        objc_autoreleasePoolPop(v20);
        int v16 = *(_DWORD *)(a1 + 5940);
        CFDictionaryRef v12 = kCFAllocatorDefault;
      }

      *(_DWORD *)(a1 + 5940) = v16 & ~(_DWORD)a6 | a5;
      CFNumberRef v23 = CFNumberCreate(v12, kCFNumberIntType, &valuePtr);
      if (!v23)
      {
LABEL_36:
        CFRelease(v14);
        return;
      }

      CFNumberRef v24 = v23;
      CFDictionarySetValue(v14, @"IO80211InterfaceRoamProfile", v23);
      int v25 = *(_DWORD *)(a1 + 5940);
      if ((v25 & 1) != 0)
      {
        CFDictionarySetValue(v14, @"IO80211InterfaceRoamProfilePoorLinkQuality", kCFBooleanTrue);
        int v25 = *(_DWORD *)(a1 + 5940);
      }

      if ((v25 & 2) != 0)
      {
        if (!a7)
        {
          __int128 v31 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: motionRssiDelta is 0. Exiting!",  "WiFiDeviceSetRoamParams");
          }
          objc_autoreleasePoolPop(v31);
          CFNumberRef v26 = 0LL;
LABEL_35:
          CFRelease(v24);
          CFRelease(v14);
          CFMutableDictionaryRef v14 = v26;
          if (!v26) {
            return;
          }
          goto LABEL_36;
        }

        CFDictionarySetValue(v14, @"IO80211InterfaceRoamProfileMotion", kCFBooleanTrue);
        CFNumberRef v26 = CFNumberCreate(v12, kCFNumberIntType, &v34);
        if (!v26) {
          goto LABEL_35;
        }
        CFDictionarySetValue(v14, @"IO80211InterfaceRoamProfileMotionRssiDelta", v26);
      }

      else
      {
        CFNumberRef v26 = 0LL;
      }

      if (a4 <= 8 && ((1 << a4) & 0x150) != 0) {
        CFDictionarySetValue(v14, @"IO80211InterfaceRoamMultiAP", kCFBooleanTrue);
      }
      CFTypeID v27 = objc_autoreleasePoolPush();
      CFMutableDictionaryRef v28 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        int v29 = sub_100095BC8(a3);
        CFMutableArrayRef v30 = sub_10003B2EC(a4);
        [v28 WFLog:3, "%s: setting roam profile for %@ to type %@(%d) with offsets %@(0x%x)", "WiFiDeviceSetRoamParams", v29, v30, valuePtr, sub_10003B310(*(_DWORD *)(a1 + 5940)), *(unsigned int *)(a1 + 5940) message];
      }

      objc_autoreleasePoolPop(v27);
      sub_10003EC6C(a1, *(const void **)(a1 + 112), 531LL, 0LL, (uint64_t)v14);
      *(_DWORD *)(a1 + 5944) = a4;
      goto LABEL_35;
    }
  }

uint64_t sub_10003EC6C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef v10 = sub_1000446C8(a1, a2);
  if (!v10)
  {
    int v16 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "Unknown interface %@", a2 message];
    }
    objc_autoreleasePoolPop(v16);
    return 0LL;
  }

  uint64_t v11 = (uint64_t)v10;
  CFTypeID v12 = CFGetTypeID(v10);
  if (v12 == sub_10012FE70())
  {
    sub_100133AB0(v11, a3, a4, a5);
    return 0LL;
  }

  for (int i = 6; ; --i)
  {
    uint64_t result = Apple80211Set(*(void *)(a1 + 16), a3, 0LL, a5, 8LL);
    if ((_DWORD)result != -3905 && (_DWORD)result != 61 && (_DWORD)result != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }

  return result;
}

void sub_10003ED68(uint64_t a1, const __CFString *a2)
{
  vm_address_t v4 = objc_autoreleasePoolPush();
  uint64_t valuePtr = 0LL;
  uint64_t v133 = 0LL;
  *(_DWORD *)bytes = 0;
  __int16 v132 = 0;
  uint64_t v5 = kCFAllocatorDefault;
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(kCFAllocatorDefault, a2, @"/");
  if (CFArrayGetCount(ArrayBySeparatingStrings) == 5)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3LL);
    if (!ValueAtIndex) {
      goto LABEL_184;
    }
    CFTypeRef v8 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 4LL);
    if (v8)
    {
      if (CFEqual(v8, kSCEntNetIPv4))
      {
        NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainSetup,  ValueAtIndex,  kSCEntNetInterface);
        if (NetworkServiceEntity)
        {
          CFTypeRef v10 = NetworkServiceEntity;
          uint64_t v11 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), NetworkServiceEntity);
          if (!v11)
          {
            ValueAtIndex = 0LL;
            CFNumberRef v63 = 0LL;
            int v126 = 0LL;
            int v127 = 0LL;
            CFTypeID v117 = 0LL;
LABEL_167:
            CFRelease(v10);
            if (!ArrayBySeparatingStrings) {
              goto LABEL_169;
            }
            goto LABEL_168;
          }

          CFTypeID v12 = v11;
          unsigned int Value = CFDictionaryGetValue(v11, kSCPropNetInterfaceDeviceName);
          cuint64_t f = v12;
          if (!Value || (CFStringRef v118 = Value, !CFEqual(*(CFTypeRef *)(a1 + 112), Value)))
          {
            CFTypeID v117 = 0LL;
            int v126 = 0LL;
            int v127 = 0LL;
            CFNumberRef v63 = 0LL;
            ValueAtIndex = 0LL;
            goto LABEL_166;
          }

          int v122 = v10;
          int v123 = ArrayBySeparatingStrings;
          int v124 = v4;
          CFMutableDictionaryRef v14 = objc_autoreleasePoolPush();
          int v15 = &ACAccountStoreDidChangeNotification_ptr;
          if (qword_100219F60)
          {
            int v16 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@+} %@",  @"IP",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"IPV4 State change for %@",  *(void *)(a1 + 112))),  "UTF8String"));
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buuint64_t f = 136446210;
              *(void *)&uint8_t buf[4] = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v16, "UTF8String")),  "UTF8String");
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
            }
          }

          objc_autoreleasePoolPop(v14);
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          if (!Mutable)
          {
            CFTypeID v117 = 0LL;
            int v126 = 0LL;
            int v127 = 0LL;
            CFNumberRef v63 = 0LL;
            ValueAtIndex = 0LL;
            CFTypeRef v10 = v122;
            goto LABEL_166;
          }

          CFIndex v18 = Mutable;
          unint64_t v19 = (_BYTE *)(a1 + 4300);
          uint64_t v20 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), a2);
          uint64_t v21 = v20;
          if (!v20)
          {
            int v127 = 0LL;
            uint64_t v128 = 0LL;
            CFNumberRef v63 = 0LL;
            uint64_t v120 = 0LL;
            char v121 = 0LL;
            int v126 = 0LL;
LABEL_133:
            CFNumberRef v103 = CFNumberCreate(v5, kCFNumberIntType, (char *)&v133 + 4);
            if (v103)
            {
              CFNumberRef v104 = v103;
              CFDictionaryAddValue(v18, @"IO80211InterfaceIPV4Address", v103);
              CFRelease(v104);
            }

            if ((_DWORD)valuePtr != *(_DWORD *)(a1 + 4316)) {
              *(_DWORD *)(a1 + 4316) = valuePtr;
            }
            CFNumberRef v105 = CFNumberCreate(v5, kCFNumberIntType, &v133);
            if (v105)
            {
              CFNumberRef v106 = v105;
              CFDictionaryAddValue(v18, @"IO80211InterfaceIPV4RouterAddress", v105);
              CFRelease(v106);
            }

            CFDataRef v107 = CFDataCreate(v5, bytes, 6LL);
            if (v107)
            {
              CFDataRef v108 = v107;
              CFDictionaryAddValue(v18, @"IO80211InterfaceRouterMACAddress", v107);
              CFRelease(v108);
            }

            for (int i = 6; ; --i)
            {
              uint64_t v110 = Apple80211Set(*(void *)(a1 + 16), 489LL, 0LL, v18, 8LL);
              uint64_t v111 = v110;
              if ((int)v110 <= 15)
              {
                if ((_DWORD)v110 != -3905) {
                  break;
                }
              }

              else if ((_DWORD)v110 != 61 && (_DWORD)v110 != 16)
              {
                goto LABEL_152;
              }

              if (!i) {
                break;
              }
              usleep(0x7A120u);
            }

            if (!(_DWORD)v110) {
              goto LABEL_155;
            }
LABEL_152:
            uint64_t v113 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "__WiFiDeviceCheckForIPV4ParamsChange", v111);
            }
            objc_autoreleasePoolPop(v113);
LABEL_155:
            if (sub_10003E7A4(a1))
            {
              unint64_t v114 = v120;
              if (a1)
              {
                if (v19[20]) {
                  sub_100027988(a1, 1, v120, *(unsigned int *)(a1 + 5872), v18, 0);
                }
                unsigned int v115 = +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance");
                goto LABEL_161;
              }

              unsigned int v115 = +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance");
            }

            else
            {
              unsigned int v115 = +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance");
              unint64_t v114 = v120;
              if (a1)
              {
LABEL_161:
                BOOL v116 = v19[20] != 0;
                goto LABEL_164;
              }
            }

            BOOL v116 = 0LL;
LABEL_164:
            -[WiFiUsageMonitor notifyIpConfigurationStateWithMethod:dhcpLeaseDuration:hasRoutableIpV4:hasRoutableIpV6:]( v115,  "notifyIpConfigurationStateWithMethod:dhcpLeaseDuration:hasRoutableIpV4:hasRoutableIpV6:",  v116,  *(_DWORD *)(a1 + 4316) == 2,  *v19 != 0,  (double)v114);
            -[WiFiUsageMonitor notifyIPv4Changes:]( +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance"),  "notifyIPv4Changes:",  -[__CFDictionary copy](v21, "copy"));
            v19[44] = 0;
            CFRelease(v18);
            ArrayBySeparatingStrings = v123;
            vm_address_t v4 = v124;
            CFTypeID v117 = v121;
            CFTypeRef v10 = v122;
            ValueAtIndex = v128;
            if (!v21)
            {
LABEL_166:
              CFRelease(cf);
              goto LABEL_167;
            }

LABEL_165:
            CFRelease(v21);
            goto LABEL_166;
          }

          int v22 = (const __CFArray *)CFDictionaryGetValue(v20, kSCPropNetIPv4Addresses);
          if (v22 && (CFNumberRef v23 = v22, CFArrayGetCount(v22) >= 1))
          {
            CFNumberRef v24 = (const __CFString *)CFArrayGetValueAtIndex(v23, 0LL);
            if (v24)
            {
              int v25 = v24;
              CFNumberRef v26 = objc_autoreleasePoolPush();
              if (qword_100219F60)
              {
                CFTypeID v27 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@*} %@",  @"IP",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"IP Address: %@",  v25)),  "UTF8String"));
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                {
                  CFMutableDictionaryRef v28 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v27, "UTF8String")),  "UTF8String");
                  *(_DWORD *)buuint64_t f = 136446210;
                  *(void *)&uint8_t buf[4] = v28;
                  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
                }
              }

              objc_autoreleasePoolPop(v26);
              sub_1000403B8(v25, (in_addr *)&v133 + 1);
              if (BYTE5(v133) == 254 && BYTE4(v133) == 169) {
                int v30 = 1;
              }
              else {
                int v30 = 2;
              }
              LODWORD(valuePtr) = v30;
              int v15 = &ACAccountStoreDidChangeNotification_ptr;
            }
          }

          else
          {
            __int128 v31 = objc_autoreleasePoolPush();
            if (qword_100219F60)
            {
              __int128 v32 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@*} %@",  @"IP",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"No IP address\n")),  "UTF8String"));
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                int v33 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v32, "UTF8String")),  "UTF8String");
                *(_DWORD *)buuint64_t f = 136446210;
                *(void *)&uint8_t buf[4] = v33;
                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
              }
            }

            objc_autoreleasePoolPop(v31);
          }

          *(_DWORD *)(a1 + 4296) = HIDWORD(v133);
          __int16 v34 = (const __CFBoolean *)CFDictionaryGetValue(v21, kSCPropNetIPv4CLAT46);
          if (v34 && CFBooleanGetValue(v34) == 1)
          {
            vm_address_t v35 = objc_autoreleasePoolPush();
            if (qword_100219F60)
            {
              id v36 = [(id)v15[407] stringWithFormat:@"%s", objc_msgSend( objc_msgSend( (id)v15[407], "stringWithFormat:", @"{%@*} %@", @"IP", objc_msgSend( (id)v15[407], "stringWithFormat:", @"IPv4CLAT46 network - not propagating IPv4 information to device\n")), "UTF8String")];
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                id v37 = objc_msgSend( objc_msgSend( (id)v15[407],  "stringWithFormat:",  @"[WiFiPolicy] %s",  objc_msgSend(v36, "UTF8String")),  "UTF8String");
                *(_DWORD *)buuint64_t f = 136446210;
                *(void *)&uint8_t buf[4] = v37;
                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
              }
            }

            objc_autoreleasePoolPop(v35);
            HIDWORD(v133) = 0;
          }

          uint64_t v38 = (const __CFString *)CFDictionaryGetValue(v21, kSCPropNetIPv4ARPResolvedIPAddress);
          int v39 = objc_autoreleasePoolPush();
          if (v38)
          {
            if (qword_100219F60)
            {
              uint64_t v40 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@*} %@",  @"IP",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Router IP Address: %@",  v38)),  "UTF8String"));
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                CFIndex v41 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v40, "UTF8String")),  "UTF8String");
                *(_DWORD *)buuint64_t f = 136446210;
                *(void *)&uint8_t buf[4] = v41;
                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
              }
            }

            objc_autoreleasePoolPop(v39);
            sub_1000403B8(v38, (in_addr *)&v133);
          }

          else
          {
            if (qword_100219F60)
            {
              id v42 = [(id)v15[407] stringWithFormat:@"%s", objc_msgSend( objc_msgSend( (id)v15[407], "stringWithFormat:", @"{%@*} %@", @"IP", objc_msgSend((id)v15[407], "stringWithFormat:", @"No Router IP Address")), "UTF8String")];
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                id v43 = objc_msgSend( objc_msgSend( (id)v15[407],  "stringWithFormat:",  @"[WiFiPolicy] %s",  objc_msgSend(v42, "UTF8String")),  "UTF8String");
                *(_DWORD *)buuint64_t f = 136446210;
                *(void *)&uint8_t buf[4] = v43;
                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
              }
            }

            objc_autoreleasePoolPop(v39);
          }

          v129.in_addr_t s_addr = 0;
          int v44 = (const __CFString *)CFDictionaryGetValue(v21, kSCPropNetIPv4Router);
          vm_address_t v45 = objc_autoreleasePoolPush();
          if (v44)
          {
            if (qword_100219F60)
            {
              int v46 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@*} %@",  @"IP",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Default Gateway IP Address: %@",  v44)),  "UTF8String"));
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v47 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v46, "UTF8String")),  "UTF8String");
                *(_DWORD *)buuint64_t f = 136446210;
                *(void *)&uint8_t buf[4] = v47;
                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
              }
            }

            objc_autoreleasePoolPop(v45);
            sub_1000403B8(v44, &v129);
          }

          else
          {
            if (qword_100219F60)
            {
              uint64_t v48 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@*} %@",  @"IP",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"No Default Gateway IP Address")),  "UTF8String"));
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                dispatch_time_t v49 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v48, "UTF8String")),  "UTF8String");
                *(_DWORD *)buuint64_t f = 136446210;
                *(void *)&uint8_t buf[4] = v49;
                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
              }
            }

            objc_autoreleasePoolPop(v45);
          }

          in_addr_t s_addr = v129.s_addr;
          int v51 = v129.s_addr == 0;
          CFTypeID v52 = (const __CFString *)sub_100040538(a1, *(const void **)(a1 + 112));
          uint64_t v128 = v52;
          if (v52 && sub_10009DF44((uint64_t)v52))
          {
            if (s_addr)
            {
              HIDWORD(valuePtr) = 2;
              size_t v53 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Setting power mode to kA11PowerProfileCarPlayWithInternet",  "__WiFiDeviceCheckForIPV4ParamsChange");
              }
            }

            else
            {
              HIDWORD(valuePtr) = 1;
              size_t v53 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Setting power mode to kA11PowerProfileCarPlayOnly",  "__WiFiDeviceCheckForIPV4ParamsChange");
              }
            }
          }

          else
          {
            size_t v53 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Setting power mode to kA11PowerProfileDefault",  "__WiFiDeviceCheckForIPV4ParamsChange");
            }
          }

          BOOL v54 = s_addr == 0;
          objc_autoreleasePoolPop(v53);
          int v55 = valuePtr;
          if (*(unsigned __int8 *)(a1 + 4312) == v51 && (_DWORD)valuePtr == *(_DWORD *)(a1 + 4316))
          {
LABEL_85:
            CFNumberRef v63 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&valuePtr + 4);
            if (!v63)
            {
              CFRelease(v18);
              int v126 = 0LL;
              int v127 = 0LL;
              CFTypeID v117 = 0LL;
              ArrayBySeparatingStrings = v123;
              vm_address_t v4 = v124;
              CFTypeRef v10 = v122;
              ValueAtIndex = v128;
              goto LABEL_165;
            }

            uint64_t v119 = v44;
            sub_10003EC6C(a1, *(const void **)(a1 + 112), 479LL, 0LL, (uint64_t)v63);
            sub_100040A24(a1);
            CFTypeID v64 = SCDynamicStoreKeyCreateNetworkServiceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainSetup,  ValueAtIndex,  kSCEntNetIPv4);
            char v121 = v64;
            if (v64)
            {
              CFStringRef v65 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), v64);
              id v66 = v65;
              unint64_t v19 = (_BYTE *)(a1 + 4300);
              if (v65)
              {
                id v67 = (const __CFString *)CFDictionaryGetValue(v65, kSCPropNetIPv4ConfigMethod);
                CFTypeID v68 = v67;
                if (v67 && CFStringCompare(v67, kSCValNetIPv4ConfigMethodDHCP, 0LL) == kCFCompareEqualTo)
                {
                  char v69 = 1;
                  goto LABEL_94;
                }
              }

              else
              {
                CFTypeID v68 = 0LL;
              }
            }

            else
            {
              CFTypeID v68 = 0LL;
              id v66 = 0LL;
              unint64_t v19 = (_BYTE *)(a1 + 4300);
            }

            char v69 = 0;
LABEL_94:
            v19[20] = v69;
            int v127 = v66;
            if (!sub_10003E7A4(a1))
            {
              unint64_t v79 = 0LL;
              int v126 = 0LL;
              goto LABEL_108;
            }

            dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 80), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
            unint64_t v70 = SCDynamicStoreCopyDHCPInfo(0LL, ValueAtIndex);
            int v126 = v70;
            if (v70)
            {
              int64_t v71 = v70;
              LeaseStartTime = DHCPInfoGetLeaseStartTime(v70);
              CFDateRef LeaseExpirationTime = DHCPInfoGetLeaseExpirationTime(v71);
              if (LeaseStartTime)
              {
                CFStringRef v74 = LeaseExpirationTime;
                if (!LeaseExpirationTime)
                {
                  uint64_t v77 = v21;
                  unint64_t v79 = 0xFFFFFFFFLL;
LABEL_103:
                  CFStringRef v80 = objc_autoreleasePoolPush();
                  if (qword_100219F60)
                  {
                    int64_t v81 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@*} %@",  @"IP",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s: configMethod %@, leaseExpiryDuration %llu mins on %@",  "__WiFiDeviceCheckForIPV4ParamsChange",  v68,  v79,  sub_100095BC8(v128))),  "UTF8String"));
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                    {
                      int64_t v82 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v81, "UTF8String")),  "UTF8String");
                      *(_DWORD *)buuint64_t f = 136446210;
                      *(void *)&uint8_t buf[4] = v82;
                      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
                    }
                  }

                  objc_autoreleasePoolPop(v80);
                  uint64_t v21 = v77;
LABEL_108:
                  uint64_t v120 = v79;
                  *(_DWORD *)(a1 + 4324) = v79;
                  CFTypeID v83 = (const __CFString *)CFDictionaryGetValue(v21, kSCPropNetIPv4ARPResolvedHardwareAddress);
                  uint64_t v84 = objc_autoreleasePoolPush();
                  if (v83)
                  {
                    if (qword_100219F60)
                    {
                      CFIndex v85 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@*} %@",  @"IP",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Router MAC Address: %@",  v83)),  "UTF8String"));
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                      {
                        unint64_t v19 = (_BYTE *)(a1 + 4300);
                        unsigned int v86 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v85, "UTF8String")),  "UTF8String");
                        *(_DWORD *)buuint64_t f = 136446210;
                        *(void *)&uint8_t buf[4] = v86;
                        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
                      }
                    }

                    objc_autoreleasePoolPop(v84);
                    *(_DWORD *)bytes = 0;
                    __int16 v132 = 0;
                    CFTypeID TypeID = CFStringGetTypeID();
                    if (CFGetTypeID(v83) == TypeID)
                    {
                      *(void *)&__int128 v88 = 0xAAAAAAAAAAAAAAAALL;
                      *((void *)&v88 + 1) = 0xAAAAAAAAAAAAAAAALL;
                      __int128 v136 = v88;
                      __int128 v137 = v88;
                      *(_OWORD *)buuint64_t f = v88;
                      __int128 v135 = v88;
                      if (CFStringGetCString(v83, (char *)buf, 64LL, 0x600u))
                      {
                        CFTypeID v89 = ether_aton((const char *)buf);
                        __int16 v90 = *(_WORD *)&v89->octet[4];
                        *(_DWORD *)bytes = *(_DWORD *)v89->octet;
                        __int16 v132 = v90;
                      }
                    }
                  }

                  else
                  {
                    if (qword_100219F60)
                    {
                      CFStringRef v91 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@*} %@",  @"IP",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"No Router MAC Address")),  "UTF8String"));
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                      {
                        unint64_t v19 = (_BYTE *)(a1 + 4300);
                        uint64_t v92 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v91, "UTF8String")),  "UTF8String");
                        *(_DWORD *)buuint64_t f = 136446210;
                        *(void *)&uint8_t buf[4] = v92;
                        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
                      }
                    }

                    objc_autoreleasePoolPop(v84);
                  }

                  sub_100040B24(a1, v83, v119);
                  int v93 = (const __CFArray *)CFDictionaryGetValue(v21, kSCPropNetIPv4SubnetMasks);
                  if (v93 && (BOOL v94 = v93, CFArrayGetCount(v93) >= 1))
                  {
                    CFTypeID v95 = CFArrayGetValueAtIndex(v94, 0LL);
                    uint64_t v5 = kCFAllocatorDefault;
                    if (!v95) {
                      goto LABEL_131;
                    }
                    CFStringRef v96 = v95;
                    CFTypeID v97 = objc_autoreleasePoolPush();
                    if (qword_100219F60)
                    {
                      int64_t v98 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@*} %@",  @"IP",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"IP subnet mask: %@",  v96)),  "UTF8String"));
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                      {
                        int64_t v99 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v98, "UTF8String")),  "UTF8String");
                        *(_DWORD *)buuint64_t f = 136446210;
                        *(void *)&uint8_t buf[4] = v99;
                        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
                      }
                    }
                  }

                  else
                  {
                    CFTypeID v97 = objc_autoreleasePoolPush();
                    if (qword_100219F60)
                    {
                      CFTypeID v100 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@*} %@",  @"IP",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"No IP subnet mask\n")),  "UTF8String"));
                      uint64_t v5 = kCFAllocatorDefault;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                      {
                        CFStringRef v101 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v100, "UTF8String")),  "UTF8String");
                        *(_DWORD *)buuint64_t f = 136446210;
                        *(void *)&uint8_t buf[4] = v101;
                        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
                      }
                    }

                    else
                    {
                      uint64_t v5 = kCFAllocatorDefault;
                    }
                  }

                  objc_autoreleasePoolPop(v97);
LABEL_131:
                  CFIndex v102 = *(void (**)(uint64_t, const void *, const __CFDictionary *, void))(a1 + 5032);
                  if (v102) {
                    v102(a1, v118, v21, *(void *)(a1 + 5040));
                  }
                  goto LABEL_133;
                }

                double AbsoluteTime = CFDateGetAbsoluteTime(LeaseStartTime);
                double v76 = CFDateGetAbsoluteTime(v74);
                if (v76 > AbsoluteTime)
                {
                  uint64_t v77 = v21;
                  double v78 = (v76 - AbsoluteTime) / 60.0;
                  else {
                    unint64_t v79 = (unint64_t)v78;
                  }
                  goto LABEL_103;
                }
              }
            }

            uint64_t v77 = v21;
            unint64_t v79 = 0LL;
            goto LABEL_103;
          }

          uint64_t v56 = a1 + 4300;
          if ((_DWORD)valuePtr == 1)
          {
            if (*(_DWORD *)(a1 + 4316) == 2)
            {
              size_t v57 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Device lost a valid IP address. Resetting routability.",  "__WiFiDeviceCheckForIPV4ParamsChange");
              }
              objc_autoreleasePoolPop(v57);
              uint64_t v56 = a1 + 4300;
              *(_BYTE *)(a1 + 4300) = 0;
              int v55 = valuePtr;
            }

            else
            {
              int v55 = 1;
            }
          }

          *(_BYTE *)(v56 + 12) = v51;
          *(_DWORD *)(a1 + 4316) = v55;
          if (s_addr) {
            CFTypeID v58 = (const void **)&kCFBooleanFalse;
          }
          else {
            CFTypeID v58 = (const void **)&kCFBooleanTrue;
          }
          CFNumberRef v59 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
          CFTypeID v60 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          uint64_t v61 = v60;
          if (v59 && *v58 && v60)
          {
            CFDictionarySetValue(v60, @"WiFiHasNoGatewayIP", *v58);
            CFDictionarySetValue(v61, @"WiFiIPState", v59);
          }

          else if (!v59)
          {
            goto LABEL_79;
          }

          CFRelease(v59);
LABEL_79:
          if (v61)
          {
            if (*(void *)(a1 + 4840))
            {
              unsigned int v62 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Dispatch LQM with hasNoGatewayIP %d, wifiIPState %d",  "__WiFiDeviceCheckForIPV4ParamsChange",  v54,  valuePtr);
              }
              objc_autoreleasePoolPop(v62);
              (*(void (**)(uint64_t, const void *, void, __CFDictionary *))(a1 + 4840))( a1,  v118,  *(void *)(a1 + 4848),  v61);
            }

            CFRelease(v61);
          }

          goto LABEL_85;
        }
      }
    }
  }

  ValueAtIndex = 0LL;
LABEL_184:
  CFNumberRef v63 = 0LL;
  int v126 = 0LL;
  int v127 = 0LL;
  CFTypeID v117 = 0LL;
  if (ArrayBySeparatingStrings) {
LABEL_168:
  }
    CFRelease(ArrayBySeparatingStrings);
LABEL_169:
  if (v117) {
    CFRelease(v117);
  }
  if (v127) {
    CFRelease(v127);
  }
  if (v126) {
    CFRelease(v126);
  }
  if (v63) {
    CFRelease(v63);
  }
  if (ValueAtIndex) {
    CFRelease(ValueAtIndex);
  }
  objc_autoreleasePoolPop(v4);
}

void sub_1000403B8(const __CFString *a1, in_addr *a2)
{
  a2->in_addr_t s_addr = 0;
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    if (CFStringGetCString(a1, buffer, 16LL, 0x600u))
    {
      if (inet_aton(buffer, a2) == 1) {
        return;
      }
      uint64_t v5 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: Error converting IPv4 address %@ to network type", "__WiFiDeviceConvertStrToIPv4Addr", a1 message];
      }
    }

    else
    {
      uint64_t v5 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: Error converting IPv4 address %@ to ASCII", "__WiFiDeviceConvertStrToIPv4Addr", a1 message];
      }
    }

    objc_autoreleasePoolPop(v5);
  }

  else
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Not a valid CFString",  "__WiFiDeviceConvertStrToIPv4Addr");
    }
    objc_autoreleasePoolPop(v6);
  }

const void *sub_100040538(uint64_t a1, const void *a2)
{
  CFDictionaryRef theDict = 0LL;
  if (!a1)
  {
    CFTypeRef v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "nil device", v46, v47);
    }
    goto LABEL_10;
  }

  vm_address_t v4 = *(dispatch_queue_s **)(a1 + 64);
  if (v4) {
    dispatch_assert_queue_V2(v4);
  }
  uint64_t v5 = sub_1000446C8(a1, a2);
  if (!v5)
  {
    CFTypeRef v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "Unknown interface %@", a2, v47 message];
    }
    goto LABEL_10;
  }

  uint64_t v6 = (uint64_t)v5;
  CFTypeID v7 = CFGetTypeID(v5);
  if (v7 == sub_10012FE70())
  {
    goto LABEL_35;
  }

  double Current = CFAbsoluteTimeGetCurrent();
  if (*(_BYTE *)(a1 + 5904))
  {
    double v11 = *(double *)(a1 + 5912);
    if (v11 != 0.0 && Current > v11 && Current - v11 < 1.0)
    {
      CFTypeID v12 = *(const __CFDictionary **)(a1 + 5920);
      if (v12)
      {
        CFAllocatorRef v13 = kCFAllocatorDefault;
        CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, v12);
        CFDictionaryRef theDict = Copy;
        goto LABEL_36;
      }

      CFDictionaryRef theDict = 0LL;
      CFTypeRef v8 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4, "%s: Cached current network is NULL on interface %@", "WiFiDeviceCopyCurrentNetwork", a2 message];
      }
LABEL_10:
      objc_autoreleasePoolPop(v8);
LABEL_11:
      BOOL v9 = 0LL;
      goto LABEL_77;
    }
  }

  for (int i = 6; ; --i)
  {
    int v16 = Apple80211CopyCurrentNetwork(*(void *)(a1 + 16), &theDict);
    int v17 = v16;
    if (v16 != -3905 && v16 != 61 && v16 != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }

  unint64_t v19 = *(const void **)(a1 + 5920);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 5920) = 0LL;
  }

  if (theDict)
  {
    CFDictionaryRef v20 = CFDictionaryCreateCopy(kCFAllocatorDefault, theDict);
    double v21 = 0.0;
    if (theDict) {
      double v21 = Current;
    }
  }

  else
  {
    CFDictionaryRef v20 = 0LL;
    double v21 = 0.0;
  }

  *(void *)(a1 + 5920) = v20;
  *(double *)(a1 + 5912) = v21;
  if (v17) {
    goto LABEL_11;
  }
LABEL_35:
  CFAllocatorRef v13 = kCFAllocatorDefault;
  CFDictionaryRef Copy = theDict;
LABEL_36:
  int v22 = sub_100094AAC((uint64_t)v13, Copy);
  BOOL v9 = v22;
  if (v22)
  {
    CFNumberRef v23 = (const void **)&kCFBooleanTrue;
    if (*(_DWORD *)(a1 + 5936)) {
      CFNumberRef v23 = (const void **)&kCFBooleanFalse;
    }
    sub_10009582C((uint64_t)v22, @"WiFiNetworkIsAutoJoined", *v23);
    if (sub_100095318((BOOL)v9) && !sub_10009D448((uint64_t)v9))
    {
      CFNumberRef v24 = objc_autoreleasePoolPush();
      int v25 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        CFNumberRef v26 = sub_100095BC8(v9);
        CFTypeID v27 = sub_100095BC8(*(const void **)(a1 + 5832));
        CFMutableDictionaryRef v28 = sub_10009D448(*(void *)(a1 + 5832));
        int v29 = "present";
        if (!v28) {
          int v29 = "not present";
        }
        [v25 WFLog:3, "%s: attempting to match current HS2.0 network %@ with last attempted network %@, GAS response is %s", "WiFiDeviceCopyCurrentNetwork", v26, v27, v29 message];
      }

      objc_autoreleasePoolPop(v24);
      int v30 = *(const void **)(a1 + 5832);
      if (v30 && CFEqual(v30, v9) && sub_10009D448(*(void *)(a1 + 5832)))
      {
        __int128 v31 = sub_10009D448(*(void *)(a1 + 5832));
        uint64_t v32 = (uint64_t)v9;
LABEL_66:
        sub_10009D4D4(v32, v31);
      }

      else
      {
        int v33 = *(const __CFArray **)(a1 + 5752);
        if (v33)
        {
          CFIndex v34 = 0LL;
          while (v34 < CFArrayGetCount(v33))
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5752), v34);
            if (ValueAtIndex)
            {
              id v36 = (const __CFArray *)sub_100091DAC((uint64_t)ValueAtIndex);
              if (v36)
              {
                id v37 = v36;
                if (CFArrayGetCount(v36) >= 1)
                {
                  CFIndex v38 = 0LL;
                  while (1)
                  {
                    int v39 = (const __CFDictionary *)CFArrayGetValueAtIndex(v37, v38);
                    if (v39)
                    {
                      uint64_t v40 = v39;
                      unsigned int Value = (const __CFString *)CFDictionaryGetValue(v39, @"BSSID");
                      if (Value)
                      {
                        id v42 = Value;
                        if (sub_100096968((const __CFArray *)v9))
                        {
                          id v43 = (const __CFString *)sub_100096968((const __CFArray *)v9);
                          if (CFStringCompare(v42, v43, 1uLL) == kCFCompareEqualTo) {
                            break;
                          }
                        }
                      }
                    }

                    if (++v38 >= CFArrayGetCount(v37)) {
                      goto LABEL_61;
                    }
                  }

                  uint64_t v32 = (uint64_t)v9;
                  __int128 v31 = v40;
                  goto LABEL_66;
                }
              }
            }

LABEL_77:
  if (theDict) {
    CFRelease(theDict);
  }
  return v9;
}

    objc_autoreleasePoolPop(v14);
    return 4294963396LL;
  }

  CFIndex v34 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommand");
  if (!v34) {
    return 4294963396LL;
  }
  CFNumberRef v63 = -1431655766;
  CFNumberGetValue(v34, kCFNumberIntType, &v63);
  switch(v63)
  {
    case 0u:
      if (!*v8)
      {
        dispatch_time_t v49 = objc_autoreleasePoolPush();
        id v50 = (void *)qword_100219F60;
        if (qword_100219F60)
        {
          int v51 = "GAS cache is disabled";
LABEL_96:
          [v50 WFLog:3 message:v51];
        }

        CFRelease(v14);
        CFMutableDictionaryRef v14 = v61;
        if (!v42) {
          goto LABEL_79;
        }
        goto LABEL_78;
      }
    }

    CFTypeID v60 = 0x10000LL << v59;
    uint64_t v61 = v56;
    goto LABEL_71;
  }

  CFRelease(v14);
  uint64_t v61 = 0LL;
  CFTypeID v52 = 0LL;
  unsigned int v62 = 0LL;
LABEL_78:
  CFRelease(v42);
  CFMutableDictionaryRef v14 = v61;
LABEL_79:
  if (v52) {
    CFRelease(v52);
  }
  if (v14) {
    goto LABEL_82;
  }
  return v62;
}

  if (!v56[5])
  {
    uint64_t v48 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AUTO-JOIN: FAILED to start auto-join (trigger=%d)",  "WiFiDeviceManagerStartAutoJoinAndReply",  a2);
    }
    objc_autoreleasePoolPop(v48);
  }

  if (Mutable) {
    CFRelease(Mutable);
  }
  objc_autoreleasePoolPop(context);
  _Block_object_dispose(&v55, 8);
}

void sub_100040A24(uint64_t a1)
{
  uint64_t v2 = _SCNetworkInterfaceCreateWithBSDName(0LL, *(void *)(a1 + 112), 0LL);
  if (!v2) {
    goto LABEL_6;
  }
  int v3 = (const void *)v2;
  unsigned int IsQoSMarkingProfileInstalled = _SCNetworkInterfaceIsQoSMarkingProfileInstalled();
  uint64_t v5 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "FASTLANE Profile installed: %d\n",  IsQoSMarkingProfileInstalled);
  }
  objc_autoreleasePoolPop(v5);
  CFRelease(v3);
  if (IsQoSMarkingProfileInstalled) {
    uint64_t v6 = (uint64_t *)&kCFBooleanTrue;
  }
  else {
LABEL_6:
  }
    uint64_t v6 = (uint64_t *)&kCFBooleanFalse;
  CFTypeID v7 = (const void *)*v6;
  sub_10003EC6C(a1, *(const void **)(a1 + 112), 480LL, 0LL, *v6);
  if (v7) {
    CFRelease(v7);
  }
}

uint64_t sub_100040B00(uint64_t result, char a2)
{
  if (result)
  {
    *(_BYTE *)(result + 4320) = a2;
    return 1LL;
  }

  return result;
}

uint64_t sub_100040B14(uint64_t result, int a2)
{
  if (result)
  {
    *(_DWORD *)(result + 4324) = a2;
    return 1LL;
  }

  return result;
}

uint64_t sub_100040B24(uint64_t result, CFTypeRef cf, CFTypeRef a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(const void **)(result + 4328);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v5 + 432_Block_object_dispose(va, 8) = 0LL;
    }

    CFTypeID v7 = *(const void **)(v5 + 4336);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(v5 + 4336) = 0LL;
    }

    if (cf) {
      *(void *)(v5 + 432_Block_object_dispose(va, 8) = CFRetain(cf);
    }
    if (a3) {
      *(void *)(v5 + 4336) = CFRetain(a3);
    }
    return 1LL;
  }

  return result;
}

uint64_t sub_100040B98(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 4320);
  }
  return result;
}

void sub_100040BA8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)sub_100040CF8(a1);
    int v3 = sub_100040C24(a1, v2);
    vm_address_t v4 = *(void (**)(uint64_t, int64_t, __CFDictionary *, void, void))(a1 + 5080);
    if (v4)
    {
      int64_t v5 = sub_100040CF8(a1);
      v4(a1, v5, v3, 0LL, *(void *)(a1 + 5088));
    }

    if (v3) {
      CFRelease(v3);
    }
  }

__CFDictionary *sub_100040C24(uint64_t a1, const void *a2)
{
  BOOL v9 = 0LL;
  int v3 = sub_1000446C8(a1, a2);
  if (v3)
  {
    uint64_t v4 = (uint64_t)v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == sub_10012FE70())
    {
      uint64_t v6 = sub_1001313F0(v4, &v9);
      if (!(_DWORD)v6) {
        return v9;
      }
    }

    else
    {
      uint64_t v6 = 4294963393LL;
    }

    CFTypeID v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: error %d", "WiFiDeviceCopyInterfaceStateInfo", v6);
    }
  }

  else
  {
    CFTypeID v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: unknown interface %@", "WiFiDeviceCopyInterfaceStateInfo", a2 message];
    }
  }

  objc_autoreleasePoolPop(v7);
  return v9;
}

int64_t sub_100040CF8(uint64_t a1)
{
  uint64_t valuePtr = 6LL;
  if (!a1) {
    return 0LL;
  }
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784));
  if (!Count)
  {
    int v15 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: no virtual interfaces found.",  "WiFiDeviceGetAwdlInterfaceName",  valuePtr);
    }
    objc_autoreleasePoolPop(v15);
    return 0LL;
  }

  int64_t v3 = Count;
  CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
  if (!v4) {
    return 0LL;
  }
  CFNumberRef v5 = v4;
  uint64_t v6 = (const void **)sub_10003AFC0(0LL, v3, 8uLL);
  if (v6)
  {
    CFTypeID v7 = v6;
    CFTypeRef v8 = (const void **)sub_10003AFC0(0LL, v3, 8uLL);
    if (v8)
    {
      BOOL v9 = v8;
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 5784), v7, v8);
      if (v3 < 1)
      {
        int64_t v3 = 0LL;
      }

      else
      {
        CFTypeRef v10 = v9;
        double v11 = (int64_t *)v7;
        while (1)
        {
          CFTypeID v12 = CFGetTypeID(*v10);
          if (v12 == sub_10012FE70())
          {
            CFAllocatorRef v13 = sub_100130530((uint64_t)*v10);
            if (CFEqual(v13, v5)) {
              break;
            }
          }

          ++v11;
          ++v10;
          if (!--v3) {
            goto LABEL_14;
          }
        }

        int64_t v3 = *v11;
      }

uint64_t sub_100040E7C()
{
  uint64_t result = qword_1002198B8;
  if (!qword_1002198B8)
  {
    pthread_once(&stru_100218E88, (void (*)(void))sub_100040EB8);
    return qword_1002198B8;
  }

  return result;
}

CFStringRef sub_100040EB8()
{
  qword_1002198B8 = _CFRuntimeRegisterClass(&unk_1001E3280);
  IOMasterPort(0, (mach_port_t *)&dword_1002198C0);
  qword_1002198A8 = (uint64_t)SCDynamicStoreKeyCreateNetworkGlobalEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  kSCEntNetIPv4);
  CFStringRef result = SCDynamicStoreKeyCreateNetworkGlobalEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, kSCEntNetIPv6);
  qword_1002198B0 = (uint64_t)result;
  return result;
}

uint64_t sub_100040F4C(const __CFAllocator *a1, io_registry_entry_t a2)
{
  CFNumberRef v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: entering", "WiFiDeviceCreate");
  }
  objc_autoreleasePoolPop(v4);
  if (a2)
  {
    if (!qword_1002198B8) {
      pthread_once(&stru_100218E88, (void (*)(void))sub_100040EB8);
    }
    uint64_t Instance = _CFRuntimeCreateInstance(a1);
    if (Instance)
    {
      uint64_t v6 = Instance;
      CFTypeID v7 = (_BYTE *)(Instance + 4300);
      bzero((void *)(Instance + 16), 0x1758uLL);
      unsigned int v8 = 0;
      *(_WORD *)(v6 + 54) = 0;
      *(_OWORD *)(v6 + 240) = xmmword_10017F4A0;
      *(void *)(v6 + 256) = 7LL;
      *(void *)(v6 + 264) = 4294967277LL;
      do
      {
        CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(a2, @"IOInterfaceName", a1, 0);
        *(void *)(v6 + 112) = CFProperty;
        if (CFProperty) {
          goto LABEL_29;
        }
        usleep(0x2710u);
        uint64_t v10 = *(void *)(v6 + 112);
        if (v10) {
          BOOL v11 = 1;
        }
        else {
          BOOL v11 = v8 >= 0x1F;
        }
        ++v8;
      }

      while (!v11);
      if (v10)
      {
LABEL_28:
        if (*(void *)(v6 + 112))
        {
LABEL_29:
          IORegistryEntryGetParentEntry(a2, "IOService", (io_registry_entry_t *)(v6 + 24));
          if (!*(_DWORD *)(v6 + 24))
          {
            CFIndex v34 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "%s: No Matching Parent Service Found for interface %@", "WiFiDeviceCreate", *(void *)(v6 + 112) message];
            }
            goto LABEL_59;
          }

          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          *(void *)(v6 + 120) = Mutable;
          if (!Mutable) {
            goto LABEL_60;
          }
          IONotificationPortRef v20 = IONotificationPortCreate(dword_1002198C0);
          *(void *)(v6 + 96) = v20;
          if (v20)
          {
            *(void *)(v6 + 144) = sub_10011A2DC((uint64_t)a1, v6);
            uint64_t v21 = sub_100128654(a1, 0LL);
            *(void *)(v6 + 176) = v21;
            if (v21)
            {
              CFMutableDictionaryRef v22 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
              *(void *)(v6 + 200) = v22;
              if (v22)
              {
                CFMutableArrayRef v23 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
                *(void *)(v6 + 5696) = v23;
                if (v23)
                {
                  v7[1404] = 1;
                  v7[1420] = 0;
                  CFMutableArrayRef v24 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
                  *(void *)(v6 + 5752) = v24;
                  if (v24)
                  {
                    v7[1460] = 1;
                    v7[1476] = 0;
                    CFMutableArrayRef v25 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
                    *(void *)(v6 + 5656) = v25;
                    if (v25)
                    {
                      CFMutableArrayRef v26 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
                      *(void *)(v6 + 5664) = v26;
                      if (v26)
                      {
                        sub_100128724(*(void *)(v6 + 176), (uint64_t)sub_100041514, v6);
                        CFNumberRef v27 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, (const void *)(v6 + 256));
                        if (v27)
                        {
                          CFNumberRef v28 = v27;
                          CFDictionarySetValue( *(CFMutableDictionaryRef *)(v6 + 120),  @"SignalStrengthThreshold",  v27);
                          CFRelease(v28);
                        }

                        int v29 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
                        *(void *)(v6 + 5784) = v29;
                        if (v29)
                        {
                          CFDictionaryAddValue(v29, *(const void **)(v6 + 112), (const void *)v6);
                          sub_100026B50((const void *)v6);
                          *(_DWORD *)(v6 + 4296) = 0;
                          *CFTypeID v7 = 0;
                          sub_100043C58(v6);
                          *(_BYTE *)(v6 + 20_Block_object_dispose(va, 8) = 0;
                          *(void *)(v6 + 216) = 0LL;
                          *(void *)(v6 + 5920) = 0LL;
                          *(void *)(v6 + 592_Block_object_dispose(va, 8) = 0x6400000064LL;
                          *(_DWORD *)(v6 + 5936) = 0;
                          *(_WORD *)(v6 + 224) = 257;
                          *(void *)(v6 + 232) = MGCopyAnswer(@"WifiAddressData", 0LL);
                          *(_DWORD *)(v6 + 5944) = 0;
                          CFMutableArrayRef v30 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
                          *(void *)(v6 + 596_Block_object_dispose(va, 8) = v30;
                          if (v30)
                          {
                            __int128 v31 = objc_autoreleasePoolPush();
                            if (qword_100219F60) {
                              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: exiting",  "WiFiDeviceCreate");
                            }
                            goto LABEL_44;
                          }
                        }
                      }
                    }
                  }
                }
              }

LABEL_60:
              CFRelease((CFTypeRef)v6);
              goto LABEL_61;
            }

            CFIndex v34 = objc_autoreleasePoolPush();
            vm_address_t v35 = (void *)qword_100219F60;
            if (qword_100219F60)
            {
              id v36 = "%s: Error: WiFiCommandQueueCreate failed";
              goto LABEL_58;
            }
          }

          else
          {
            CFIndex v34 = objc_autoreleasePoolPush();
            vm_address_t v35 = (void *)qword_100219F60;
            if (qword_100219F60)
            {
              id v36 = "%s: Error: IONotificationPortCreate failed";
LABEL_58:
              objc_msgSend(v35, "WFLog:message:", 4, v36, "WiFiDeviceCreate", v37);
            }
          }
        }

        else
        {
          CFIndex v34 = objc_autoreleasePoolPush();
          vm_address_t v35 = (void *)qword_100219F60;
          if (qword_100219F60)
          {
            id v36 = "%s: Error: Could not obtain IO80211Interface bsd name";
            goto LABEL_58;
          }
        }

      sub_10007F0C8((void *)a3, @"StandALoneLPASTestModeEnabled", 0);
      unint64_t v79 = sub_10007CBB0((void *)a3, @"phBandPreference", 0LL) == 1;
      sub_10003A310(*(SCPreferencesRef *)(a3 + 912), v68);

      if (v29)
      {
        uint64_t v48 = sub_100012D04(v29);
        sub_10007D9D4(a3, v48);
        if (v48) {
          CFRelease(v48);
        }
      }

      else
      {
        sub_10007D9D4(a3, 0LL);
      }

      sub_10006DCD8(a3, v69);
      sub_10006DD70(a3, v66, v65, v64);
      if (*(unsigned __int8 *)(a3 + 320) != v81)
      {
        *(_BYTE *)(a3 + 320) = v81;
        context = a3;
        context_8 = 0xAAAAAAAA0000001FLL;
        BOOL v94 = 0LL;
        CFTypeID v95 = 1LL;
        CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
      }

      if (*(_BYTE *)(a3 + 2132)) {
        dispatch_time_t v49 = 0;
      }
      else {
        dispatch_time_t v49 = v78;
      }
      if (*(_BYTE *)(a3 + 2132)) {
        id v50 = @"LPEM";
      }
      else {
        id v50 = 0LL;
      }
      sub_10006EF98(a3, v49, v50);
      sub_100070058(a3, v72);
      sub_100082B4C(a3, v71);
      sub_100082C74(a3, v70);
      if (sub_1000759EC(a3))
      {
        int v51 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Overwriting ATJ to false due to active restriction policy",  "__WiFiManagerPreferencesCallback");
        }
        objc_autoreleasePoolPop(v51);
        CFTypeID v52 = 0;
      }

      else
      {
        CFTypeID v52 = v61;
      }

      sub_100070140(a3, v52, v35);
      sub_10006D9F4(a3, v36, 0);
      sub_10006DB24(a3, v37, 0);
      sub_10006CD4C(a3, cf1);
      if (*(double *)(a3 + 752) != v27)
      {
        *(double *)(a3 + 752) = v27;
        sub_10006FB94((void *)a3, @"DisassociationInterval", v27);
      }

      if (*(double *)(a3 + 1648) != 7.0)
      {
        *(void *)(a3 + 164_Block_object_dispose(va, 8) = 0x401C000000000000LL;
        sub_10006FB94((void *)a3, @"DiagnosticsInterval", 7.0);
      }

      sub_10006CEA4(a3, v86, 0);
      sub_10006FA80(a3, v80);
      sub_100070298(a3, v89);
      sub_10007C104(a3, v76, v77, v74, v73);
      *(void *)(a3 + 28_Block_object_dispose(va, 8) = 0LL;
      *(void *)(a3 + 296) = 0LL;
      context = a3;
      context_8 = 0xAAAAAAAA00000024LL;
      BOOL v94 = 0LL;
      CFTypeID v95 = 1LL;
      CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
      sub_10006B818(a3, v62, v67, 0);
      context = a3;
      context_8 = 0xAAAAAAAA00000063LL;
      BOOL v94 = v63;
      CFTypeID v95 = *(void *)&v40;
      CFStringRef v96 = (double)v39;
      CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
      if (BOOLean)
      {
        if (CFBooleanGetValue(BOOLean))
        {
          size_t v53 = *(unsigned __int8 *)(a3 + 1752);
          BOOL v54 = objc_autoreleasePoolPush();
          if (v53)
          {
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Already Scheduled",  "__WiFiManagerCheckSCCleanUpScheduling");
            }
LABEL_86:
            objc_autoreleasePoolPop(v54);
            goto LABEL_94;
          }

          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Schedule",  "__WiFiManagerCheckSCCleanUpScheduling");
          }
          objc_autoreleasePoolPop(v54);
          *(_WORD *)(a3 + 1752) = 1;
          [*(id *)(a3 + 1744) scheduleOrphanedSetsCleanUp];
        }

        else if (!*(_BYTE *)(a3 + 1753))
        {
          *(_WORD *)(a3 + 1752) = 256;
          int v55 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Unschedule",  "__WiFiManagerCheckSCCleanUpScheduling");
          }
          objc_autoreleasePoolPop(v55);
          [*(id *)(a3 + 1744) unScheduleOrphanedSetsCleanUp];
        }

                  uint64_t v56 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: no matching HS20 network found",  "__WiFiManagerCopyExistingHS20Network");
                  }
                  objc_autoreleasePoolPop(v56);
                  a3 = v105;
                }

                else
                {
                  int v93 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: manager->networks is NULL",  "__WiFiManagerCopyExistingHS20Network");
                  }
                  objc_autoreleasePoolPop(v93);
                }
              }

              else
              {
                sub_100075E00(a1, v105, &v110);
              }

              if (!v110)
              {
LABEL_92:
                char v69 = 0;
                CFStringRef v65 = 0;
                id v67 = 0LL;
                goto LABEL_93;
              }

LABEL_59:
        objc_autoreleasePoolPop(v34);
        goto LABEL_60;
      }

      CFTypeRef v12 = IORegistryEntryCreateCFProperty(a2, @"IOInterfaceNamePrefix", a1, 0);
      CFTypeRef v13 = IORegistryEntryCreateCFProperty(a2, @"IOInterfaceUnit", a1, 0);
      CFMutableDictionaryRef v14 = v13;
      if (v12
        && v13
        && (CFTypeID v15 = CFGetTypeID(v12), v15 == CFStringGetTypeID())
        && (CFTypeID v16 = CFGetTypeID(v14), v16 == CFNumberGetTypeID()))
      {
        *(void *)(v6 + 112) = CFStringCreateWithFormat(0LL, 0LL, @"%@%@", v12, v14);
        int v17 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:4, "%s: device->ifName : %@ ", "WiFiDeviceCreate", *(void *)(v6 + 112) message];
        }
        objc_autoreleasePoolPop(v17);
      }

      else
      {
        CFIndex v18 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: Could not obtain ifPrefix and ifUnit",  "WiFiDeviceCreate");
        }
        objc_autoreleasePoolPop(v18);
        if (!v12) {
          goto LABEL_26;
        }
      }

      CFRelease(v12);
LABEL_26:
      if (v14) {
        CFRelease(v14);
      }
      goto LABEL_28;
    }

    int v33 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: Error: no device", "WiFiDeviceCreate");
    }
  }

  else
  {
    int v33 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: Error: no interface", "WiFiDeviceCreate");
    }
  }

  objc_autoreleasePoolPop(v33);
LABEL_61:
  __int128 v31 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: exiting, Error: Failed to create device ref",  "WiFiDeviceCreate");
  }
  uint64_t v6 = 0LL;
LABEL_44:
  objc_autoreleasePoolPop(v31);
  return v6;
}

uint64_t sub_100041514(uint64_t a1, uint64_t a2)
{
  CFIndex v336 = 72LL;
  if (!a2)
  {
    id v277 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null device", "__WiFiDeviceCommandQueueCallback");
    }
    goto LABEL_465;
  }

  if (!a1)
  {
    id v277 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null command queue ref ",  "__WiFiDeviceCommandQueueCallback");
    }
LABEL_465:
    objc_autoreleasePoolPop(v277);
    return 4294963394LL;
  }

  unint64_t v337 = 0xAAAAAAAAAAAAAAAALL;
  CFNumberRef v5 = (void *)(a2 + 184);
  while (1)
  {
    CFNumberRef v6 = sub_10004A344((CFNumberRef)a2, 0LL, *(_DWORD *)v337);
    CFNumberRef v7 = v6;
    unsigned int v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "Deferring command type: %@ because its priority (%ld) is less than the minimum allowed priority (%ld) for this command type", sub_1000496AC(*(_DWORD *)v337), *(void *)(v337 + 64), v7 message];
    }
    objc_autoreleasePoolPop(v8);
    sub_1001290FC(*(void *)(a2 + 176), *(void *)(a2 + 184));
  }

  *(_BYTE *)(v337 + 56) = 1;
  BOOL v11 = objc_autoreleasePoolPush();
  CFTypeRef v12 = (void *)qword_100219F60;
  if (qword_100219F60)
  {
    unint64_t v13 = sub_1000496AC(*(_DWORD *)v337);
    [v12 WFLog:3, "Dequeuing command type: %@ pending commands: %ld", v13, sub_10012872C(*(void *)(a2 + 176)) - 1 message];
  }

  objc_autoreleasePoolPop(v11);
  uint64_t v14 = *(void *)(a2 + 176);
  if (v337)
  {
    if (*(_DWORD *)v337 == 1)
    {
      if (sub_100095B4C(*(void *)(v337 + 16))) {
        uint64_t v15 = 40LL;
      }
      else {
        uint64_t v15 = 30LL;
      }
    }

    else
    {
      uint64_t v15 = 30LL;
    }
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  sub_100129284(v14, v15);
  switch(*(_DWORD *)v337)
  {
    case 0:
      int v17 = *(const void **)(v337 + 8);
      CFIndex v18 = *(const __CFDictionary **)(v337 + 16);
      uint64_t v19 = *(void *)(v337 + 24);
      IONotificationPortRef v20 = *(CFTypeRef **)(v337 + 32);
      double valuePtr = 0.0;
      uint64_t v21 = (void *)sub_1000446C8(a2, v17);
      CFMutableDictionaryRef v22 = objc_autoreleasePoolPush();
      if (!v21)
      {
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:4, "Unknown interface %@", v17 message];
        }
        uint64_t v77 = v22;
        goto LABEL_96;
      }

      if (qword_100219F60)
      {
        CFMutableArrayRef v23 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@+} %@",  @"SCAN",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Attempting Apple80211ScanAsync on %@",  v17)),  "UTF8String"));
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          CFMutableArrayRef v24 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v23, "UTF8String")),  "UTF8String");
          LODWORD(buf) = 136446210;
          *(void *)((char *)&buf + 4) = v24;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  (uint8_t *)&buf,  0xCu);
        }
      }

      objc_autoreleasePoolPop(v22);
      CFTypeID v25 = CFGetTypeID(v21);
      if (v25 == sub_10012FE70()) {
        return sub_100131DDC((uint64_t *)v21, (uint64_t)v18, v19, (uint64_t)v20);
      }
      *(void *)(a2 + 472_Block_object_dispose(va, 8) = v19;
      *(void *)(a2 + 4736) = v20;
      unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(v18, @"SCAN_MAXAGE");
      if (Value && !CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr)) {
        double valuePtr = 0.0;
      }
      double v151 = valuePtr;
      else {
        double v152 = 14.0;
      }
      uint64_t v153 = kCFAllocatorDefault;
      if (v151 >= v152)
      {
        else {
          double v154 = 14.0;
        }
      }

      else
      {
        double v154 = valuePtr;
      }

      double valuePtr = v154;
      uint64_t v167 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"BeaconCacheOnly");
      if (v167 && CFBooleanGetValue(v167)) {
        return 4294963396LL;
      }
      double v168 = (const __CFBoolean *)CFDictionaryGetValue(v18, @"CacheOnly");
      if (v168) {
        int v313 = CFBooleanGetValue(v168);
      }
      else {
        int v313 = 0;
      }
      double v226 = valuePtr;
      if (valuePtr == 0.0)
      {
        uint64_t v268 = 0LL;
      }

      else
      {
        v314 = v20;
        v316 = v17;
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
        if (Mutable)
        {
          CFMutableSetRef v227 = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
          if (!v227) {
            goto LABEL_425;
          }
          int v228 = v227;
          int v229 = _os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin");
          double v230 = 14.0;
          if (v229) {
            double v230 = 30.0;
          }
          sub_1000567AC(*(const __CFArray **)(a2 + 5696), v230);
          CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 5696));
          int v232 = sub_100056864(a2, v18, v228);
          LOBYTE(v233) = 0;
          if (!v232 && Count >= 1)
          {
            int v233 = 0;
            theDicta = v18;
            while (1)
            {
              CFTypeRef cf1a = (CFTypeRef)(Count - 1);
              ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 5696), Count - 1);
              double Current = CFAbsoluteTimeGetCurrent();
              uint64_t v236 = sub_1000ABA9C((uint64_t)ValueAtIndex);
              if (!v236
                || (uint64_t v237 = (const __CFDictionary *)v236, v238 = sub_10012F6DC((uint64_t)ValueAtIndex), v238 == 0.0)
                || (double v239 = Current - v238, v226 >= 0.0) && v239 > v226
                || (CFMutableArrayRef v240 = CFArrayCreateMutable(v153, 0LL, &kCFTypeArrayCallBacks)) == 0LL)
              {
                int v264 = 0;
                goto LABEL_416;
              }

              v241 = v240;
              CFArrayRef v325 = (CFArrayRef)Count;
              int v327 = v233;
              CFMutableArrayRef v242 = CFArrayCreateMutable(v153, 0LL, &kCFTypeArrayCallBacks);
              if (v242) {
                break;
              }
              int v264 = 0;
              CFMutableArrayRef v245 = v241;
LABEL_415:
              CFRelease(v245);
LABEL_416:
              v233 |= v264;
              int v232 = sub_100056864(a2, v18, v228);
              if (Count >= 2)
              {
                CFIndex Count = (CFIndex)cf1a;
                uint64_t v153 = kCFAllocatorDefault;
                if (!v232) {
                  continue;
                }
              }

              goto LABEL_418;
            }

            double v243 = v242;
            int v244 = CFArrayCreateMutable(v153, 0LL, &kCFTypeArrayCallBacks);
            if (v244)
            {
              CFMutableArrayRef v245 = CFArrayCreateMutable(v153, 0LL, &kCFTypeArrayCallBacks);
              if (v245)
              {
                sub_100056C14(v18, v241);
                sub_100056C14(v237, v243);
                if (CFArrayGetCount(v241) >= 1)
                {
                  CFIndex v246 = 0LL;
                  do
                  {
                    CFIndex v247 = CFArrayGetCount(v243);
                    v248 = CFArrayGetValueAtIndex(v241, v246);
                    v344.id location = 0LL;
                    v344.length = v247;
                    if (CFArrayGetFirstIndexOfValue(v243, v344, v248) == -1) {
                      goto LABEL_405;
                    }
                  }

                  while (++v246 < CFArrayGetCount(v241));
                }

                CFIndex v18 = theDicta;
                sub_100056928(a2, theDicta, v244);
                sub_100056928(a2, v237, v245);
                if (CFArrayGetCount(v244) >= 1)
                {
                  int v249 = 0;
                  CFIndex v250 = 0LL;
                  do
                  {
                    CFIndex v251 = CFArrayGetCount(v245);
                    v252 = CFArrayGetValueAtIndex(v244, v250);
                    v345.id location = 0LL;
                    v345.length = v251;
                    if (CFArrayGetFirstIndexOfValue(v245, v345, v252) != -1)
                    {
                      v253 = CFArrayGetValueAtIndex(v244, v250);
                      CFSetAddValue(v228, v253);
                      int v249 = 1;
                    }

                    ++v250;
                  }

                  while (v250 < CFArrayGetCount(v244));
                  if (!v249)
                  {
LABEL_405:
                    int v264 = 0;
                    goto LABEL_406;
                  }

                  v254 = (const __CFArray *)sub_100091DAC((uint64_t)ValueAtIndex);
                  if (!v254)
                  {
LABEL_404:
                    int v264 = 1;
LABEL_406:
                    CFIndex v18 = theDicta;
                    goto LABEL_412;
                  }

                  v255 = v254;
                  CFIndex v18 = theDicta;
                  if (CFArrayGetCount(v254))
                  {
                    v346.length = CFArrayGetCount(v241);
                    v346.id location = 0LL;
                    CFIndex theArrayc = CFArrayGetFirstIndexOfValue(v241, v346, &stru_1001EB6E0);
                    if (CFArrayGetCount(v255) >= 1)
                    {
                      CFIndex v256 = 0LL;
                      do
                      {
                        v257 = CFArrayGetValueAtIndex(v255, v256);
                        if (v257)
                        {
                          int v258 = v257;
                          if (theArrayc != -1
                            || (CFIndex v259 = CFArrayGetCount(v241),
                                unint64_t v260 = sub_100095BC8(v258),
                                v347.id location = 0LL,
                                v347.length = v259,
                                CFArrayGetFirstIndexOfValue(v241, v347, v260) != -1))
                          {
                            unint64_t v261 = sub_100056D08((uint64_t)v258);
                            if (v261)
                            {
                              v262 = v261;
                              v348.length = CFArrayGetCount(v244);
                              v348.id location = 0LL;
                              if (CFArrayGetFirstIndexOfValue(v244, v348, v262) != -1)
                              {
                                unint64_t v263 = sub_100096BF4((uint64_t)v258, @"ORIG_AGE");
                                sub_1000970C0( (uint64_t)v258,  @"AGE",  (uint64_t)v263 + (v239 * 1000.0));
                                CFArrayAppendValue(Mutable, v258);
                              }

                              CFRelease(v262);
                            }
                          }
                        }

                        ++v256;
                      }

                      while (v256 < CFArrayGetCount(v255));
                      goto LABEL_404;
                    }
                  }

                  int v264 = 1;
LABEL_412:
                  CFRelease(v241);
                  CFRelease(v243);
                  if (v244) {
                    CFRelease(v244);
                  }
                  int v233 = v327;
                  CFIndex Count = (CFIndex)v325;
                  if (!v245) {
                    goto LABEL_416;
                  }
                  goto LABEL_415;
                }
              }
            }

            else
            {
              CFMutableArrayRef v245 = 0LL;
            }

            int v264 = 0;
            goto LABEL_412;
          }

LABEL_418:
          unsigned __int8 v265 = v226 >= 0.0 ? v232 : v233;
          int v266 = v265;
          CFRelease(v228);
          if (v266)
          {
            IONotificationPortRef v20 = v314;
            int v17 = v316;
            if (CFArrayGetCount(Mutable))
            {
              uint64_t v267 = sub_10004E16C(Mutable, 0LL, v18);
              uint64_t v268 = sub_10003A464(v267);
              if (v267) {
                CFRelease(v267);
              }
            }

            else
            {
              uint64_t v268 = 0LL;
            }
          }

          else
          {
LABEL_425:
            uint64_t v268 = 0LL;
            IONotificationPortRef v20 = v314;
            int v17 = v316;
          }

          CFRelease(Mutable);
          goto LABEL_442;
        }

        uint64_t v268 = 0LL;
      }

LABEL_442:
      uint64_t v270 = objc_autoreleasePoolPush();
      uint64_t v271 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        if (v268) {
          CFIndex v272 = CFArrayGetCount(v268);
        }
        else {
          CFIndex v272 = 0LL;
        }
        objc_msgSend( v271,  "WFLog:message:",  3,  "%s: network records count: %lu ",  "__WiFiDeviceCopyPreparedScanResults",  v272);
      }

      objc_autoreleasePoolPop(v270);
      if (v268)
      {
        uint64_t v273 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3 message:"ScanCache: Successfully Retrieved Scan Results from Scan Cache."];
        }
        objc_autoreleasePoolPop(v273);
        uint64_t v274 = *(const void **)(a2 + 5680);
        if (v274)
        {
          CFRelease(v274);
          *(void *)(a2 + 5680) = 0LL;
        }

        *(_BYTE *)(a2 + 568_Block_object_dispose(va, 8) = 0;
        *(void *)(a2 + 5680) = CFRetain(v268);
        *(_BYTE *)(a2 + 568_Block_object_dispose(va, 8) = 1;
        sub_100055E40(a2, v18);
        CFRelease(v268);
        if (*(void *)(a2 + 64))
        {
          CFRetain((CFTypeRef)a2);
          uint64_t v275 = *(dispatch_queue_s **)(a2 + 64);
          *(void *)&buuint64_t f = _NSConcreteStackBlock;
          *((void *)&buf + 1) = 3221225472LL;
          v340 = sub_100055E80;
          __int128 v341 = &unk_1001E2620;
          uint64_t v342 = a2;
          dispatch_async(v275, &buf);
        }

        else
        {
          id v276 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null queue.", "__WiFiDeviceScanAsyncQueued");
          }
          objc_autoreleasePoolPop(v276);
        }

        return 0LL;
      }

      else
      {
        if (v313)
        {
          sub_100055F44(a2, *(void *)(a2 + 112), 0LL, 0LL, 0LL);
          return 4294963396LL;
        }

        uint64_t v9 = Apple80211ScanAsync(*(void *)(a2 + 16), v18);
        if ((_DWORD)v9)
        {
          if (v20)
          {
            if (*v20)
            {
              CFRetain(*v20);
              CFTypeRef v278 = *v20;
              if (*v20)
              {
                CFTypeID v279 = CFGetTypeID(v278);
                uint64_t v280 = sub_1000BDCBC();
                CFTypeRef v278 = *v20;
                if (v279 == v280)
                {
                  *(_WORD *)(sub_1000EE7CC((uint64_t)v278) + 434) = v9;
                  CFTypeRef v278 = *v20;
                }
              }

              CFRelease(v278);
              sub_100055F44(a2, (uint64_t)v17, 0LL, 0LL, v9);
            }

            else
            {
              uint64_t v302 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null manager from scan data",  "__WiFiDeviceScanAsyncQueued");
              }
              objc_autoreleasePoolPop(v302);
            }
          }

          else
          {
            unint64_t v301 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null scanData",  "__WiFiDeviceScanAsyncQueued");
            }
            objc_autoreleasePoolPop(v301);
            return 12LL;
          }
        }

        else
        {
          sub_100055E40(a2, v18);
        }
      }

      return v9;
    case 1:
      CFTypeID v95 = *(const void **)(v337 + 8);
      BOOL v94 = *(void **)(v337 + 16);
      CFStringRef v96 = *(const void **)(v337 + 24);
      *(_OWORD *)allocatora = *(_OWORD *)(v337 + 32);
      else {
        uint64_t v97 = 30LL;
      }
      *(_OWORD *)(a2 + 4776) = *(_OWORD *)allocatora;
      int64_t v98 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        int64_t v99 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@+} %@",  @"ASSOC",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Attempting Apple80211AssociateAsync to %@",  sub_100095BC8(v94))),  "UTF8String"));
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          CFTypeID v100 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v99, "UTF8String")),  "UTF8String");
          LODWORD(buf) = 136446210;
          *(void *)((char *)&buf + 4) = v100;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  (uint8_t *)&buf,  0xCu);
        }
      }

      objc_autoreleasePoolPop(v98);
      CFStringRef v101 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Starting %d second(s) timer to complete association",  "__WiFiDeviceAssociateAsyncQueued",  v97);
      }
      objc_autoreleasePoolPop(v101);
      LOBYTE(buf) = 0;
      if (!v94)
      {
        uint64_t v9 = 4294963396LL;
        goto LABEL_437;
      }

      CFIndex v102 = sub_100095BC8(v94);
      BOOL v103 = sub_100098BF8((uint64_t)v94);
      if (sub_100095B4C((uint64_t)v94))
      {
        if (v103)
        {
          unsigned int v104 = sub_100098E6C(v94);
          CFNumberRef v105 = 0LL;
          if (!v96)
          {
            if (v104)
            {
              CFNumberRef v105 = sub_100095408((CFDictionaryRef *)v94);
              if (!v105)
              {
                CFNumberRef v106 = v95;
                CFDataRef v107 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  [(id)qword_100219F60 WFLog:4, "No password for one time password network %@ ", sub_100095BC8(v94), v309, v310 message];
                }
LABEL_490:
                objc_autoreleasePoolPop(v107);
                uint64_t v9 = 4294967196LL;
                CFTypeID v95 = v106;
                goto LABEL_437;
              }
            }
          }
        }

        else
        {
          CFNumberRef v105 = 0LL;
        }

        if (v96) {
          CFAbsoluteTime v169 = v96;
        }
        else {
          CFAbsoluteTime v169 = v105;
        }
        double v170 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "Attempting to join EAP network: %@", sub_100095BC8(v94) message];
        }
        objc_autoreleasePoolPop(v170);
        double v171 = sub_100040538(a2, v95);
        if (v171)
        {
          double v172 = v171;
          CFRelease(v172);
        }

        uint64_t v9 = sub_10011A6BC(*(void *)(a2 + 144), v94, v169);
        if ((_DWORD)v9 != -3900 || sub_1000951FC((uint64_t)v94, @"EnterpriseProfile"))
        {
          if (!v105) {
            goto LABEL_436;
          }
          goto LABEL_435;
        }

        BOOL v222 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: EAP association failed with param error and no configuration. Falling back to non-EAP association...",  "__WiFiDeviceAssociate");
        }
        objc_autoreleasePoolPop(v222);
      }

      else
      {
        CFNumberRef v105 = 0LL;
      }

      if (!v103) {
        goto LABEL_430;
      }
      if (!v96)
      {
        CFNumberRef v105 = (const void *)sub_100099AA8((CFDictionaryRef *)v94, (BOOL *)&buf, 3.0);
        if (!v105)
        {
          CFNumberRef v106 = v95;
          CFNumberRef v105 = (const void *)sub_100099C1C(v94, (BOOL *)&buf, 3.0);
          CFDataRef v107 = objc_autoreleasePoolPush();
          int v223 = (void *)qword_100219F60;
          if (!v105)
          {
            if (qword_100219F60)
            {
              v285 = sub_100095BC8(v94);
              if ((_BYTE)buf) {
                uint64_t v286 = ", although keychain fetch did time out";
              }
              else {
                uint64_t v286 = "";
              }
              [v223 WFLog:4, "%s: No password returned for %@%s", "__WiFiDeviceAssociate", v285, v286 message];
            }

            goto LABEL_490;
          }

          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:4, "%s: found password with non-syncable attribute for network %@.", "__WiFiDeviceAssociate", sub_100095BC8(v94) message];
          }
          objc_autoreleasePoolPop(v107);
          CFTypeID v95 = v106;
        }
      }

      if (sub_100096D08((const __CFDictionary *)v94))
      {
        __int16 v224 = v95;
        uint64_t v225 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "Attempting to join SAE (transition mode = %d) network: %@", sub_100096E90((uint64_t)v94), v102, v310, v311, v312 message];
        }
LABEL_364:
        CFTypeID v95 = v224;
        goto LABEL_429;
      }

      if (sub_100096E90((uint64_t)v94))
      {
        uint64_t v225 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "Attempting to join WPA network: %@", v102 message];
        }
      }

      else
      {
        if (sub_1000957F4((BOOL)v94))
        {
          __int16 v224 = v95;
          if (sub_1000951FC((uint64_t)v94, @"WEP_AUTH_Flags"))
          {
            v281 = sub_100096BF4((uint64_t)v94, @"WEP_AUTH_Flags");
            uint64_t v225 = objc_autoreleasePoolPush();
            if (qword_100219F60)
            {
              int v282 = "40 Bit";
              else {
                v283 = "Shared";
              }
              else {
                v284 = "Unhashed";
              }
              [(id)qword_100219F60 WFLog:3, "Attempting to join %s %s %s (0x%lx) WEP network: %@", v282, v283, v284, v281, sub_100095BC8(v94) message];
            }
          }

          else
          {
            uint64_t v225 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "Attempting to join WEP network: %@", sub_100095BC8(v94), v309, v310, v311, v312 message];
            }
          }

          goto LABEL_364;
        }

        uint64_t v225 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "Attempting to join: %@", v102 message];
        }
      }

LABEL_429:
      objc_autoreleasePoolPop(v225);
LABEL_430:
      if (v96) {
        uint64_t v269 = (uint64_t)v96;
      }
      else {
        uint64_t v269 = (uint64_t)v105;
      }
      uint64_t v9 = sub_10004E5C8(a2, v95, (CFDictionaryRef *)v94, v269, (uint64_t)sub_1000574FC, 0LL);
      if (v105 && !(_BYTE)buf) {
LABEL_435:
      }
        CFRelease(v105);
LABEL_436:
      if (!(_DWORD)v9) {
        return v9;
      }
LABEL_437:
      sub_100057040(a2, (uint64_t)v95, v94, 0LL, v9);
      return v9;
    case 2:
      kdebug_trace(731381828LL, 0LL, 0LL, 0LL, 0LL);
      double v78 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4 message:"Disassociating."];
      }
      objc_autoreleasePoolPop(v78);
      uint64_t v80 = sub_10004ED80( a2,  *(const void **)(v337 + 8),  v79,  *(_DWORD *)(a2 + 5800),  "__WiFiDeviceDisassociateQueued",  10660LL);
      goto LABEL_150;
    case 3:
      int64_t v82 = *(const void **)(v337 + 8);
      uint64_t v83 = *(void *)(v337 + 16);
      uint64_t v85 = *(void *)(v337 + 24);
      uint64_t v84 = *(void *)(v337 + 32);
      unsigned int v86 = (uint64_t *)sub_1000446C8(a2, v82);
      if (!v86) {
        goto LABEL_512;
      }
      unsigned int v87 = v86;
      CFTypeID v88 = CFGetTypeID(v86);
      if (v88 != sub_10012FE70())
      {
        *(void *)(a2 + 4656) = v85;
        *(void *)(a2 + 4664) = v84;
        for (int i = 6; ; --i)
        {
          uint64_t v145 = Apple80211Set(*(void *)(a2 + 16), 24LL, 1LL, v83, 8LL);
          uint64_t v9 = v145;
          if ((int)v145 <= 15)
          {
            if ((_DWORD)v145 != -3905) {
              goto LABEL_235;
            }
          }

          else if ((_DWORD)v145 != 61 && (_DWORD)v145 != 16)
          {
            goto LABEL_236;
          }

          if (!i)
          {
LABEL_235:
            if (!(_DWORD)v145) {
              return v9;
            }
LABEL_236:
            sub_100057500(a2, (uint64_t)v82, v145);
            return v9;
          }

          usleep(0x7A120u);
        }
      }

      return sub_100132030(v87, (uint64_t)v82, v83, v85, v84);
    case 4:
      uint64_t v37 = *(const void **)(v337 + 8);
      CFIndex v38 = *(void (**)(uint64_t, const void *, uint64_t, uint64_t))(v337 + 16);
      uint64_t v39 = *(void *)(v337 + 24);
      uint64_t v40 = sub_1000446C8(a2, v37);
      if (v40)
      {
        CFTypeID v41 = CFGetTypeID(v40);
        if (v41 == sub_10012FE70()) {
          goto LABEL_348;
        }
        IOPMAssertionID v48 = *(_DWORD *)(a2 + 4024);
        if (v48) {
          IOPMAssertionRelease(v48);
        }
        uint64_t v49 = *(void *)(a2 + 4032);
        if (!v49) {
          goto LABEL_348;
        }
        if (_MISStopService)
        {
          int v50 = _MISStopService(v49, a2 + 4040, v42, v43, v44, v45, v46, v47);
          if (!v50)
          {
LABEL_348:
            uint64_t v9 = sub_10004ED80(a2, v37, v42, *(_DWORD *)(a2 + 5800), "__WiFiDeviceStopNetworkQueued", 3105LL);
            if (v38) {
              v38(a2, v37, v9, v39);
            }
            goto LABEL_350;
          }
        }

        else
        {
          int v50 = -1;
        }

        BOOL v221 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "Unable to shutdown mobile internet sharing: %s\n",  strerror(v50));
        }
        objc_autoreleasePoolPop(v221);
        goto LABEL_348;
      }

      CFStringRef v74 = objc_autoreleasePoolPush();
      uint64_t v75 = (void *)qword_100219F60;
      if (!qword_100219F60) {
        goto LABEL_95;
      }
      v308 = v37;
LABEL_522:
      double v76 = "Unknown interface %@";
LABEL_94:
      objc_msgSend(v75, "WFLog:message:", 4, v76, v308);
LABEL_95:
      uint64_t v77 = v74;
LABEL_96:
      objc_autoreleasePoolPop(v77);
      return 4294963396LL;
    case 5:
      CFDataRef v108 = *(const void **)(v337 + 8);
      uint64_t v109 = *(void *)(v337 + 16);
      *(_OWORD *)uint64_t v334 = *(_OWORD *)(v337 + 24);
      uint64_t v110 = sub_1000446C8(a2, v108);
      *(_OWORD *)(a2 + 4672) = *(_OWORD *)v334;
      CFTypeID v111 = CFGetTypeID(v110);
      if (v111 != sub_10012FE70())
      {
        for (int j = 6; ; --j)
        {
          uint64_t v139 = Apple80211Set(*(void *)(a2 + 16), 25LL, 1LL, v109, 8LL);
          uint64_t v9 = v139;
          if ((int)v139 <= 15)
          {
            if ((_DWORD)v139 != -3905) {
              goto LABEL_232;
            }
          }

          else if ((_DWORD)v139 != 61 && (_DWORD)v139 != 16)
          {
            goto LABEL_233;
          }

          if (!j)
          {
LABEL_232:
            if (!(_DWORD)v139) {
              return v9;
            }
LABEL_233:
            uint64_t v113 = a2;
            uint64_t v114 = (uint64_t)v108;
            uint64_t v115 = v9;
            goto LABEL_234;
          }

          usleep(0x7A120u);
        }
      }

      CFTypeID v112 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4, "Start WiFi Direct Group is not supported by %@", v108 message];
      }
      objc_autoreleasePoolPop(v112);
      uint64_t v9 = 4294963396LL;
      uint64_t v113 = a2;
      uint64_t v114 = (uint64_t)v108;
      uint64_t v115 = 4294963396LL;
LABEL_234:
      sub_10004565C(v113, v114, v115);
      return v9;
    case 6:
      int64_t v82 = *(const void **)(v337 + 8);
      uint64_t v119 = *(void (**)(uint64_t, const void *, uint64_t, uint64_t))(v337 + 16);
      uint64_t v120 = *(void *)(v337 + 24);
      char v121 = sub_1000446C8(a2, v82);
      if (!v121)
      {
LABEL_512:
        CFStringRef v74 = objc_autoreleasePoolPush();
        uint64_t v75 = (void *)qword_100219F60;
        if (!qword_100219F60) {
          goto LABEL_95;
        }
        v308 = v82;
        goto LABEL_522;
      }

      CFTypeID v122 = CFGetTypeID(v121);
      if (v122 == sub_10012FE70())
      {
        int v123 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:4, "Stop WiFi Direct Group is not suported by %@", v82 message];
        }
        CFStringRef v118 = v123;
        goto LABEL_141;
      }

      for (int k = 6; ; --k)
      {
        uint64_t v159 = Apple80211Set(*(void *)(a2 + 16), 25LL, 2LL, 0LL, 0LL);
        uint64_t v9 = v159;
        if ((_DWORD)v159 != -3905 && (_DWORD)v159 != 61 && (_DWORD)v159 != 16) {
          break;
        }
        if (!k) {
          break;
        }
        usleep(0x7A120u);
      }

      if (v119) {
        v119(a2, v82, v159, v120);
      }
      goto LABEL_350;
    case 7:
      uint64_t v89 = *(unsigned int *)(v337 + 16);
      __int16 v90 = *(const void **)(v337 + 8);
      LODWORD(buf) = *(void *)(v337 + 24);
      CFStringRef v91 = sub_1000446C8(a2, v90);
      if (!v91) {
        goto LABEL_510;
      }
      CFTypeID v92 = CFGetTypeID(v91);
      if (v92 != sub_10012FE70())
      {
        for (int m = 6; ; --m)
        {
          uint64_t v148 = Apple80211Set(*(void *)(a2 + 16), v89, 0LL, &buf, 4LL);
          uint64_t v9 = v148;
          if ((_DWORD)v148 != -3905 && (_DWORD)v148 != 61 && (_DWORD)v148 != 16) {
            break;
          }
          if (!m) {
            break;
          }
          usleep(0x7A120u);
        }

        goto LABEL_350;
      }

      int v93 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4, "Set Bluetooth State command is not supported by %@", v90 message];
      }
      goto LABEL_135;
    case 8:
      __int16 v90 = *(const void **)(v337 + 8);
      uint64_t v133 = *(unsigned int *)(v337 + 16);
      int v134 = sub_1000446C8(a2, v90);
      if (!v134) {
        goto LABEL_510;
      }
      uint64_t v135 = (uint64_t)v134;
      CFTypeID v136 = CFGetTypeID(v134);
      if (v136 == sub_10012FE70())
      {
        uint64_t v80 = sub_100131D68(v135);
LABEL_150:
        uint64_t v9 = v80;
      }

      else
      {
        for (int n = 6; ; --n)
        {
          uint64_t v162 = Apple80211SetPowerState(*(void *)(a2 + 16), v133);
          uint64_t v9 = v162;
          if ((_DWORD)v162 != -3905 && (_DWORD)v162 != 61 && (_DWORD)v162 != 16) {
            break;
          }
          if (!n) {
            break;
          }
          usleep(0x7A120u);
        }
      }

      goto LABEL_350;
    case 9:
      char v69 = *(const void **)(v337 + 8);
      unint64_t v70 = *(const __CFDictionary **)(v337 + 16);
      *(_OWORD *)theArraya = *(_OWORD *)(v337 + 24);
      int64_t v71 = sub_1000446C8(a2, v69);
      uint64_t v72 = objc_autoreleasePoolPush();
      if (!v71)
      {
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:4, "Unknown interface %@", v69 message];
        }
        uint64_t v77 = v72;
        goto LABEL_96;
      }

      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "Attempting Apple80211GasRequest on %@", v69 message];
      }
      objc_autoreleasePoolPop(v72);
      CFTypeID v73 = CFGetTypeID(v71);
      if (v73 == sub_10012FE70())
      {
        CFStringRef v74 = objc_autoreleasePoolPush();
        uint64_t v75 = (void *)qword_100219F60;
        if (!qword_100219F60) {
          goto LABEL_95;
        }
        double v76 = "Gas request is not supported on virtual interfaces.";
        goto LABEL_94;
      }

      *(_OWORD *)(a2 + 5000) = *(_OWORD *)theArraya;
      double valuePtr = -1.0;
      unint64_t v141 = (const __CFNumber *)CFDictionaryGetValue(v70, @"SCAN_MAXAGE");
      if (v141) {
        CFNumberGetValue(v141, kCFNumberDoubleType, &valuePtr);
      }
      unsigned __int8 v142 = (const __CFBoolean *)CFDictionaryGetValue(v70, @"CacheOnly");
      if (v142) {
        int v143 = CFBooleanGetValue(v142);
      }
      else {
        int v143 = 0;
      }
      if (!v70
        || (double v174 = valuePtr, valuePtr == 0.0)
        || (sub_1000567AC(*(const __CFArray **)(a2 + 5752), 3600.0),
            (CFIndex v175 = CFArrayGetCount(*(CFArrayRef *)(a2 + 5752))) == 0)
        || (uint64_t v176 = v175,
            v177 = (const __CFArray *)CFDictionaryGetValue(v70, @"GAS_NETWORKS"),
            double v178 = CFDictionaryGetValue(v70, @"GAS_QUERY"),
            CFTypeRef cf1 = CFDictionaryGetValue(v70, @"GAS_PROTOCOL"),
            v176 < 1)
        || !v177
        || !v178
        || !cf1)
      {
LABEL_334:
        int v214 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: No matching cache entry found. Will send GAS request.",  "__WiFiDeviceCopyCachedGasResponse");
        }
        objc_autoreleasePoolPop(v214);
        vm_address_t v35 = 0LL;
        goto LABEL_337;
      }

      while (2)
      {
        float v179 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 5752), v176 - 1);
        if (!v179) {
          goto LABEL_328;
        }
        uint64_t v180 = (uint64_t)v179;
        uint64_t v181 = sub_1000ABA9C((uint64_t)v179);
        if (!v181) {
          goto LABEL_328;
        }
        int v182 = (const __CFDictionary *)v181;
        if (v174 > 0.0)
        {
          double v183 = CFAbsoluteTimeGetCurrent();
          if (v183 - sub_10012F6DC(v180) > v174) {
            goto LABEL_328;
          }
        }

        v184 = CFDictionaryGetValue(v182, @"GAS_PROTOCOL");
        if (!v184) {
          goto LABEL_328;
        }
        if (!CFEqual(cf1, v184)) {
          goto LABEL_328;
        }
        int v185 = CFDictionaryGetValue(v182, @"GAS_QUERY");
        if (!v185) {
          goto LABEL_328;
        }
        if (!CFEqual(v178, v185)) {
          goto LABEL_328;
        }
        int v335 = (const __CFArray *)sub_100091DAC(v180);
        if (!v335) {
          goto LABEL_328;
        }
        CFDictionaryRef theDict = (CFDictionaryRef)v178;
        theArrayb = v177;
        v186 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
        CFMutableArrayRef v187 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
        BOOL v188 = 0;
        uint64_t v189 = 0LL;
        v190 = 0LL;
        if (!v186 || !v187) {
          goto LABEL_319;
        }
        v326 = v187;
        v324 = sub_100057CC8(theArrayb);
        v190 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
        if (!v190)
        {
          BOOL v188 = 0;
          uint64_t v189 = v324;
          CFMutableArrayRef v187 = v326;
          goto LABEL_320;
        }

        CFIndex v191 = CFArrayGetCount(theArrayb);
        if (v191 >= 1)
        {
          CFIndex v192 = v191;
          for (iint i = 0LL; ii != v192; ++ii)
          {
            uint64_t v194 = CFArrayGetValueAtIndex(theArrayb, ii);
            if (v194)
            {
              int v195 = sub_1000951FC((uint64_t)v194, @"CHANNEL");
              if (v195) {
                CFArrayAppendValue(v190, v195);
              }
            }
          }
        }

        int v318 = v143;
        BOOL v188 = (int)v324;
        if (v324)
        {
          CFIndex v196 = CFArrayGetCount(v335);
          CFIndex v197 = CFArrayGetCount(v324);
          BOOL v188 = 0;
          if (v197)
          {
            v317 = v70;
            if (v196)
            {
              uint64_t v198 = v197;
              v315 = v69;
              if (v196 >= v197)
              {
                if (v196 >= 1)
                {
                  for (jint j = 0LL; jj != v196; ++jj)
                  {
                    uint64_t v200 = (const __CFDictionary *)CFArrayGetValueAtIndex(v335, jj);
                    if (v200)
                    {
                      char v201 = v200;
                      uint64_t v202 = CFDictionaryGetValue(v200, @"BSSID");
                      char v203 = CFDictionaryGetValue(v201, @"CHANNEL");
                      if (v202)
                      {
                        int v204 = v203;
                        if (v203)
                        {
                          CFArrayAppendValue(v186, v202);
                          CFArrayAppendValue(v326, v204);
                        }
                      }
                    }
                  }
                }

                if (v198 < 1)
                {
                  CFIndex v205 = 0LL;
                  unint64_t v70 = v317;
                }

                else
                {
                  CFIndex v205 = 0LL;
                  unint64_t v70 = v317;
                  uint64_t v189 = v324;
                  while (1)
                  {
                    int v206 = CFArrayGetValueAtIndex(v189, v205);
                    int v207 = CFArrayGetValueAtIndex(v190, v205);
                    if (v206)
                    {
                      v343.length = CFArrayGetCount(v186);
                      v343.id location = 0LL;
                      if (!CFArrayContainsValue(v186, v343, v206)) {
                        break;
                      }
                    }

                    unsigned int v208 = CFArrayGetValueAtIndex(v326, v205);
                    if (v207)
                    {
                      if (v208 && !CFEqual(v207, v208)) {
                        break;
                      }
                    }

                    ++v205;
                    uint64_t v189 = v324;
                    if (v198 == v205)
                    {
                      CFIndex v205 = v198;
                      goto LABEL_317;
                    }
                  }
                }

                uint64_t v189 = v324;
LABEL_317:
                BOOL v188 = v205 == v198;
                char v69 = v315;
                goto LABEL_318;
              }
            }
          }

          int v143 = v318;
          uint64_t v189 = v324;
          CFMutableArrayRef v187 = v326;
LABEL_320:
          int v209 = v187;
          v210 = v186;
          v211 = v189;
          CFRelease(v210);
          uint64_t v189 = v211;
          CFMutableArrayRef v187 = v209;
          goto LABEL_321;
        }

        uint64_t v189 = 0LL;
LABEL_318:
        int v143 = v318;
        CFMutableArrayRef v187 = v326;
LABEL_319:
        if (v186) {
          goto LABEL_320;
        }
LABEL_321:
        if (v187)
        {
          v212 = v189;
          CFRelease(v187);
          uint64_t v189 = v212;
        }

        double v178 = theDict;
        if (v189) {
          CFRelease(v189);
        }
        if (v190) {
          CFRelease(v190);
        }
        v177 = theArrayb;
        if (!v188)
        {
LABEL_328:
          if (v176-- <= 1) {
            goto LABEL_334;
          }
          continue;
        }

        break;
      }

      v287 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: found matching request. Using cached result",  "__WiFiDeviceCopyCachedGasResponse");
      }
      objc_autoreleasePoolPop(v287);
      CFIndex v288 = CFArrayGetCount(v335);
      if (!v288)
      {
        vm_address_t v35 = 0LL;
        goto LABEL_337;
      }

      uint64_t v289 = v288;
      vm_address_t v35 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
      if (!v35) {
        goto LABEL_337;
      }
      v290 = sub_100057CC8(theArrayb);
      if (!v290)
      {
        BOOL v215 = 1;
        goto LABEL_555;
      }

      int v291 = v290;
      if (v289 >= 1)
      {
        for (kint k = 0LL; kk != v289; ++kk)
        {
          uint64_t v293 = (const __CFDictionary *)CFArrayGetValueAtIndex(v335, kk);
          if (v293)
          {
            v294 = CFDictionaryGetValue(v293, @"BSSID");
            if (v294)
            {
              CFAbsoluteTime v295 = v294;
              v349.length = CFArrayGetCount(v291);
              v349.id location = 0LL;
              if (CFArrayContainsValue(v291, v349, v295))
              {
                v296 = CFArrayGetValueAtIndex(v335, kk);
                CFArrayAppendValue(v35, v296);
              }
            }
          }
        }
      }

      CFRelease(v291);
LABEL_337:
      BOOL v215 = v35 != 0LL;
      if (v35 || v143)
      {
LABEL_555:
        uint64_t v303 = (const __CFArray *)CFDictionaryGetValue(v70, @"GAS_NETWORKS");
        if (v303)
        {
          uint64_t v304 = v303;
          sub_100057878(v303, v35);
          sub_1000579B8(a2, v304);
          if (*(void *)(a2 + 64))
          {
            CFRetain((CFTypeRef)a2);
            uint64_t v305 = *(dispatch_queue_s **)(a2 + 64);
            *(void *)&buuint64_t f = _NSConcreteStackBlock;
            *((void *)&buf + 1) = 3221225472LL;
            v340 = sub_1000579F8;
            __int128 v341 = &unk_1001E2620;
            uint64_t v342 = a2;
            dispatch_async(v305, &buf);
          }

          else
          {
            v307 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null queue.",  "__WiFiDeviceGasStartAsyncQueued");
            }
            objc_autoreleasePoolPop(v307);
          }

          uint64_t v9 = 0LL;
        }

        else
        {
          v306 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Oops - no networks in request",  "__WiFiDeviceGasStartAsyncQueued");
          }
          objc_autoreleasePoolPop(v306);
          uint64_t v9 = 4294963396LL;
          sub_100057ABC((void *)a2, (uint64_t)v69, 0LL, 0LL, 4294963396LL);
        }

        if (v215) {
          goto LABEL_102;
        }
        return v9;
      }

      int v216 = (const __CFArray *)CFDictionaryGetValue(v70, @"GAS_NETWORKS");
      if (v216)
      {
        char v217 = v216;
        MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, v70);
        if (MutableCopy)
        {
          vm_address_t v35 = MutableCopy;
          char v219 = sub_10003A464(v217);
          if (v219)
          {
            BOOL v220 = v219;
            CFDictionaryReplaceValue(v35, @"GAS_NETWORKS", v219);
            uint64_t v9 = Apple80211GasRequest(*(void *)(a2 + 16), v35);
            if ((_DWORD)v9) {
              sub_100057ABC((void *)a2, (uint64_t)v69, 0LL, 0LL, v9);
            }
            else {
              sub_100057C88(a2, v70);
            }
            CFRelease(v220);
          }

          else
          {
            uint64_t v9 = 4294963396LL;
          }

LABEL_350:
        sub_100128C88(*(void *)(a2 + 176), 0LL, 0LL, 0LL);
        return v9;
      }

LABEL_510:
      CFStringRef v74 = objc_autoreleasePoolPush();
      uint64_t v75 = (void *)qword_100219F60;
      if (!qword_100219F60) {
        goto LABEL_95;
      }
      v308 = v90;
      goto LABEL_522;
    case 0xE:
      CFNumberRef v27 = *(const void **)(v337 + 8);
      if (v27)
      {
        if ((*(_BYTE *)(a2 + 40) & 2) == 0)
        {
          uint64_t v9 = 4294963389LL;
          goto LABEL_161;
        }

        uint64_t v28 = *(void *)(v337 + 16);
        *(_OWORD *)allocator = *(_OWORD *)(v337 + 24);
        int v29 = sub_1000446C8(a2, v27);
        if (v29)
        {
          CFTypeID v30 = CFGetTypeID(v29);
          if (v30 != sub_10012FE70())
          {
            *(_OWORD *)(a2 + 5464) = *(_OWORD *)allocator;
            __int128 v31 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "Attempting APPLE80211_IOC_SENSING_ENABLE on %@", v27 message];
            }
            objc_autoreleasePoolPop(v31);
            for (int i1 = 6; ; --i1)
            {
              uint64_t v33 = Apple80211Set(*(void *)(a2 + 16), 408LL, 0LL, v28, 8LL);
              uint64_t v9 = v33;
              if ((int)v33 <= 15)
              {
                if ((_DWORD)v33 != -3905) {
                  break;
                }
              }

              else if ((_DWORD)v33 != 61 && (_DWORD)v33 != 16)
              {
                goto LABEL_158;
              }

              if (!i1) {
                break;
              }
              usleep(0x7A120u);
            }

            if (!(_DWORD)v33) {
              return v9;
            }
LABEL_158:
            __int128 v137 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: IOC %d returned error %d",  "__WiFiDeviceSensingEnableAsyncQueued",  408,  v9);
            }
            objc_autoreleasePoolPop(v137);
            if (!(_DWORD)v9) {
              return v9;
            }
LABEL_161:
            sub_100057FE0(a2, (uint64_t)v27, 0LL, v9);
            return v9;
          }

          __int128 v300 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:4, "%s: unsupported interface %@", "__WiFiDeviceSensingEnableAsyncQueued", v27 message];
          }
        }

        else
        {
          __int128 v300 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:4, "%s: unknown interface %@", "__WiFiDeviceSensingEnableAsyncQueued", v27 message];
          }
        }

        objc_autoreleasePoolPop(v300);
        uint64_t v9 = 4294963393LL;
        goto LABEL_161;
      }

      uint64_t v9 = 4294963396LL;
      goto LABEL_161;
    case 0xF:
      vm_address_t v35 = *(__CFArray **)(v337 + 8);
      uint64_t v9 = sub_10004F068(a2, v16, *(unsigned int *)(v337 + 16));
      sub_100128C88(*(void *)(a2 + 176), 0LL, 0LL, 0LL);
LABEL_101:
      if (v35) {
        goto LABEL_102;
      }
      return v9;
    default:
      *(_BYTE *)(v337 + 56) = 0;
      return 4294963394LL;
  }

void sub_100043C58(uint64_t a1)
{
  if (a1)
  {
    *(_OWORD *)(a1 + 2264) = 0u;
    *(_OWORD *)(a1 + 2280) = 0u;
    *(_OWORD *)(a1 + 2232) = 0u;
    *(_OWORD *)(a1 + 224_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 2200) = 0u;
    *(_OWORD *)(a1 + 2216) = 0u;
    *(_OWORD *)(a1 + 216_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 2184) = 0u;
    *(_OWORD *)(a1 + 2136) = 0u;
    *(_OWORD *)(a1 + 2152) = 0u;
    *(_OWORD *)(a1 + 2104) = 0u;
    *(_OWORD *)(a1 + 2120) = 0u;
    *(_OWORD *)(a1 + 2072) = 0u;
    *(_OWORD *)(a1 + 208_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 2040) = 0u;
    *(_OWORD *)(a1 + 2056) = 0u;
    *(_OWORD *)(a1 + 200_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 2024) = 0u;
    *(_OWORD *)(a1 + 1976) = 0u;
    *(_OWORD *)(a1 + 1992) = 0u;
    *(_OWORD *)(a1 + 1944) = 0u;
    *(_OWORD *)(a1 + 1960) = 0u;
    *(_OWORD *)(a1 + 1912) = 0u;
    *(_OWORD *)(a1 + 192_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 1880) = 0u;
    *(_OWORD *)(a1 + 1896) = 0u;
    *(_OWORD *)(a1 + 184_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 1864) = 0u;
    *(_OWORD *)(a1 + 1816) = 0u;
    *(_OWORD *)(a1 + 1832) = 0u;
    *(_OWORD *)(a1 + 1800) = 0u;
    *(void *)(a1 + 2296) = 0LL;
    bzero((void *)(a1 + 312), 0x3D8uLL);
    *(void *)(a1 + 1792) = 0LL;
    *(_OWORD *)(a1 + 1776) = 0u;
    *(_OWORD *)(a1 + 1760) = 0u;
    *(_OWORD *)(a1 + 1744) = 0u;
    *(_OWORD *)(a1 + 172_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 1712) = 0u;
    *(_OWORD *)(a1 + 1696) = 0u;
    *(_OWORD *)(a1 + 1680) = 0u;
    *(_OWORD *)(a1 + 1664) = 0u;
    *(_OWORD *)(a1 + 164_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 1632) = 0u;
    *(_OWORD *)(a1 + 1616) = 0u;
    *(_OWORD *)(a1 + 1600) = 0u;
    *(_OWORD *)(a1 + 1584) = 0u;
    *(_OWORD *)(a1 + 156_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 1552) = 0u;
    *(_OWORD *)(a1 + 1536) = 0u;
    *(_OWORD *)(a1 + 1520) = 0u;
    *(_OWORD *)(a1 + 1504) = 0u;
    *(_OWORD *)(a1 + 148_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 1472) = 0u;
    *(_OWORD *)(a1 + 1456) = 0u;
    *(_OWORD *)(a1 + 1440) = 0u;
    *(_OWORD *)(a1 + 1424) = 0u;
    *(_OWORD *)(a1 + 140_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 1392) = 0u;
    *(_OWORD *)(a1 + 1376) = 0u;
    *(_OWORD *)(a1 + 1360) = 0u;
    *(_OWORD *)(a1 + 1344) = 0u;
    *(_OWORD *)(a1 + 132_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 1312) = 0u;
    *(_OWORD *)(a1 + 1296) = 0u;
    bzero((void *)(a1 + 2304), 0x6A0uLL);
    *(void *)(a1 + 4016) = 0LL;
    *(_OWORD *)(a1 + 4000) = 0u;
  }

  else
  {
    unint64_t v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null device", "__WiFiDeviceResetCCAHistory");
    }
    objc_autoreleasePoolPop(v2);
    int64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null device", "__WiFiDeviceResetRssiHistory");
    }
    objc_autoreleasePoolPop(v3);
    CFNumberRef v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null device", "__WiFiDeviceResetPerCoreRssiHistory");
    }
    objc_autoreleasePoolPop(v4);
    CFNumberRef v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null device", "__WiFiDeviceResetTxRxHistory");
    }
    objc_autoreleasePoolPop(v5);
    CFNumberRef v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null device", "__WiFiDeviceResetGatewayARPHistory");
    }
    objc_autoreleasePoolPop(v6);
  }

uint64_t sub_100043E8C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 112);
  }
  return result;
}

uint64_t sub_100043E98(uint64_t a1)
{
  uint64_t valuePtr = 7LL;
  if (!a1) {
    return 0LL;
  }
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784));
  if (!Count)
  {
    uint64_t v15 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: no virtual interfaces found.",  "WiFiDeviceGetHostApInterfaceName",  valuePtr);
    }
    objc_autoreleasePoolPop(v15);
    return 0LL;
  }

  uint64_t v3 = Count;
  CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
  if (!v4) {
    return 0LL;
  }
  CFNumberRef v5 = v4;
  CFNumberRef v6 = (const void **)malloc(8 * v3);
  if (v6)
  {
    CFNumberRef v7 = v6;
    unsigned int v8 = (const void **)malloc(8 * v3);
    if (v8)
    {
      uint64_t v9 = v8;
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 5784), v7, v8);
      if (v3 < 1)
      {
        uint64_t v3 = 0LL;
      }

      else
      {
        uint64_t v10 = v9;
        BOOL v11 = (uint64_t *)v7;
        while (1)
        {
          CFTypeID v12 = CFGetTypeID(*v10);
          if (v12 == sub_10012FE70())
          {
            unint64_t v13 = sub_100130530((uint64_t)*v10);
            if (CFEqual(v13, v5)) {
              break;
            }
          }

          ++v11;
          ++v10;
          if (!--v3) {
            goto LABEL_14;
          }
        }

        uint64_t v3 = *v11;
      }

CFDictionaryRef sub_100044010(uint64_t a1, const void *a2, const __CFString *a3)
{
  cuint64_t f = 0LL;
  CFNumberRef v6 = sub_1000446C8(a1, a2);
  if (!v6)
  {
    CFTypeID v41 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "Unknown interface %@", a2 message];
    }
    vm_address_t v35 = v41;
LABEL_84:
    objc_autoreleasePoolPop(v35);
    return (CFDictionaryRef)cf;
  }

  CFNumberRef v7 = v6;
  CFTypeID v8 = CFGetTypeID(a3);
  if (v8 == CFNumberGetTypeID())
  {
    LODWORD(valuePtr) = 0;
    if (CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &valuePtr))
    {
      CFTypeID v9 = CFGetTypeID(v7);
      if (v9 == sub_10012FE70())
      {
        sub_100131284(v7, valuePtr, 0LL, &cf);
      }

      else
      {
        for (int i = 6; ; --i)
        {
          int v12 = Apple80211CopyValue(*(void *)(a1 + 16), valuePtr, 0LL, &cf);
          if (v12 != -3905 && v12 != 61 && v12 != 16) {
            break;
          }
          if (!i) {
            break;
          }
          usleep(0x7A120u);
        }

        if ((_DWORD)valuePtr == 115 && cf != 0LL)
        {
          CFTypeID v15 = CFGetTypeID(cf);
          if (v15 == CFDictionaryGetTypeID())
          {
            uint64_t v16 = *(void (**)(uint64_t, void, void, void **))(a1 + 5224);
            if (v16)
            {
              value = (void *)0xAAAAAAAAAAAAAAAALL;
              v16(a1, *(void *)(a1 + 112), *(void *)(a1 + 5232), &value);
              if (value)
              {
                CFDictionaryAddValue((CFMutableDictionaryRef)cf, @"AutoJoinPowerDiag", value);
                if (value)
                {
                  CFRelease(value);
                  value = 0LL;
                }
              }

              int v17 = *(void (**)(uint64_t, void, void, CFTypeRef *))(a1 + 5240);
              if (v17)
              {
                v46[0] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
                v17(a1, *(void *)(a1 + 112), *(void *)(a1 + 5248), v46);
                if (v46[0])
                {
                  CFDictionaryAddValue((CFMutableDictionaryRef)cf, @"AutoHotspotLPHSPowerStats", v46[0]);
                  if (v46[0]) {
                    CFRelease(v46[0]);
                  }
                }
              }
            }
          }
        }
      }
    }

    return (CFDictionaryRef)cf;
  }

  CFTypeID v10 = CFGetTypeID(a3);
  if (v10 != CFStringGetTypeID()) {
    return (CFDictionaryRef)cf;
  }
  if (a3 && CFEqual(a3, @"LastRangingSessionMetric")) {
    return (CFDictionaryRef)objc_msgSend( -[WiFiUsageMonitor lastRangingSessionMetric]( +[WiFiUsageMonitor sharedInstance](WiFiUsageMonitor, "sharedInstance"),  "lastRangingSessionMetric"),  "copy");
  }
  CFIndex v18 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 120), a3);
  cuint64_t f = v18;
  if (v18)
  {
    CFTypeRef CFProperty = v18;
    CFRetain(v18);
    if (!a3) {
      return (CFDictionaryRef)cf;
    }
    CFTypeID v20 = CFGetTypeID(a3);
    if (v20 == CFStringGetTypeID() && CFEqual(a3, @"IO80211InterfaceWoWWakeUpParams"))
    {
      uint64_t v21 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: Querying %@ on %@ from device->properties returned %@", "WiFiDeviceCopyProperty", a3, a2, CFProperty message];
      }
      objc_autoreleasePoolPop(v21);
    }

    goto LABEL_79;
  }

  float v45 = NAN;
  *(_OWORD *)uint64_t v46 = *(_OWORD *)&off_1001E32E0;
  if (CFEqual(a3, @"RSSI"))
  {
    int v44 = *(_DWORD *)(a1 + 264);
    CFMutableDictionaryRef v22 = kCFAllocatorDefault;
    value = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v44);
    CFTypeRef v48 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v45);
    CFMutableArrayRef v23 = CFDictionaryCreate( kCFAllocatorDefault,  v46,  (const void **)&value,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, v23);
    if (value)
    {
      CFRelease(value);
      value = 0LL;
    }

    if (v48)
    {
      CFRelease(v48);
      CFTypeRef v48 = 0LL;
    }

    if (v23) {
      CFRelease(v23);
    }
  }

  else
  {
    if (!CFEqual(a3, @"ScaledRSSI") && !CFEqual(a3, @"Strength"))
    {
      cuint64_t f = 0LL;
      CFMutableDictionaryRef v22 = kCFAllocatorDefault;
LABEL_50:
      CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(*(_DWORD *)(a1 + 24), a3, v22, 0);
      cuint64_t f = CFProperty;
      if (!CFProperty)
      {
        if (a3)
        {
          CFTypeID v25 = CFGetTypeID(a3);
          if (v25 == CFStringGetTypeID())
          {
            if (CFEqual(a3, @"IO80211InterfaceWoWWakeUpParams"))
            {
              CFMutableArrayRef v26 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:3, "%s: Querying %@ on %@ from IORegistryEntryCreateCFProperty returned NULL", "WiFiDeviceCopyProperty", a3, a2 message];
              }
              objc_autoreleasePoolPop(v26);
            }
          }
        }

        value = 0LL;
        CFTypeID v27 = CFGetTypeID(v7);
        if (v27 == sub_10012FE70())
        {
          InfoCFDictionaryRef Copy = sub_10013137C((uint64_t)v7);
        }

        else
        {
          for (int j = 6; ; --j)
          {
            InfoCFDictionaryRef Copy = Apple80211GetInfoCopy(*(void *)(a1 + 16), &value);
            if (InfoCopy != -3905 && InfoCopy != 61 && InfoCopy != 16) {
              break;
            }
            if (!j) {
              break;
            }
            usleep(0x7A120u);
          }
        }

        if (InfoCopy) {
          BOOL v29 = 1;
        }
        else {
          BOOL v29 = value == 0LL;
        }
        if (v29)
        {
          CFTypeRef CFProperty = 0LL;
        }

        else
        {
          uint64_t v32 = CFDictionaryGetValue((CFDictionaryRef)value, a3);
          cuint64_t f = v32;
          if (v32)
          {
            CFTypeRef CFProperty = v32;
            CFRetain(v32);
          }

          else if (CFEqual(a3, @"ScaledRate"))
          {
            uint64_t v37 = sub_100040538(a1, a2);
            v46[0] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
            CFTypeRef valuePtr = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
            float v45 = 1.0;
            if (v37)
            {
              CFIndex v38 = v37;
              sub_100096AE4((uint64_t)v37, &valuePtr, v46);
              if (valuePtr != v46[0])
              {
                uint64_t v39 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)value, @"RATE");
                uint64_t v40 = sub_10003AC9C(v39);
                float v45 = sub_10003AC08((uint64_t)v40, (uint64_t)valuePtr, (uint64_t)v46[0]);
              }

              CFTypeRef CFProperty = CFNumberCreate(v22, kCFNumberFloatType, &v45);
              cuint64_t f = CFProperty;
              CFRelease(v38);
            }

            else
            {
              CFTypeRef CFProperty = CFNumberCreate(v22, kCFNumberFloatType, &v45);
              cuint64_t f = CFProperty;
            }
          }

          else
          {
            CFTypeRef CFProperty = 0LL;
          }

          if (value) {
            CFRelease(value);
          }
        }
      }

      if (!a3) {
        return (CFDictionaryRef)cf;
      }
LABEL_79:
      CFTypeID v33 = CFGetTypeID(a3);
      if (v33 != CFStringGetTypeID() || !CFEqual(a3, @"IO80211InterfaceWoWWakeUpParams")) {
        return (CFDictionaryRef)cf;
      }
      CFIndex v34 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: Querying %@ on %@ received %@", "WiFiDeviceCopyProperty", a3, a2, CFProperty message];
      }
      vm_address_t v35 = v34;
      goto LABEL_84;
    }

    LODWORD(valuePtr) = *(_DWORD *)(a1 + 268);
    CFMutableDictionaryRef v22 = kCFAllocatorDefault;
    CFDictionaryRef Copy = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
  }

  cuint64_t f = Copy;
  if (!Copy) {
    goto LABEL_50;
  }
  return Copy;
}

const void *sub_1000446C8(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (a2)
    {
      unint64_t v2 = *(const __CFDictionary **)(a1 + 5784);
      if (v2) {
        return CFDictionaryGetValue(v2, a2);
      }
      CFNumberRef v4 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: device->interfaces is NULL",  "__WiFiDeviceVirtualInterfaceGet");
      }
    }

    else
    {
      CFNumberRef v4 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: interfaceName is NULL",  "__WiFiDeviceVirtualInterfaceGet");
      }
    }
  }

  else
  {
    CFNumberRef v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: device is NULL", "__WiFiDeviceVirtualInterfaceGet");
    }
  }

  objc_autoreleasePoolPop(v4);
  return 0LL;
}

uint64_t sub_1000447A8(uint64_t a1, const void *a2, const void *a3, uint64_t a4)
{
  CFTypeID v8 = sub_1000446C8(a1, a2);
  if (!v8)
  {
    CFMutableArrayRef v26 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "Unknown interface %@", a2 message];
    }
    objc_autoreleasePoolPop(v26);
    return 0LL;
  }

  uint64_t v9 = (uint64_t)v8;
  CFTypeID v10 = CFGetTypeID(v8);
  if (v10 == sub_10012FE70())
  {
    sub_1001310E0(v9, a3, a4);
    return 0LL;
  }

  CFTypeID v13 = CFGetTypeID(a3);
  if (v13 != CFNumberGetTypeID())
  {
    CFTypeID v17 = CFGetTypeID(a3);
    if (v17 != CFStringGetTypeID()) {
      return 0LL;
    }
    if (CFEqual(a3, @"IO80211InterfaceBGScanParams"))
    {
      uint64_t v18 = 500LL;
    }

    else
    {
      if (!CFEqual(a3, @"IO80211InterfaceBGDynamicProfileParams"))
      {
        for (int i = 6; ; --i)
        {
          uint64_t v23 = Apple80211SetProperty(*(void *)(a1 + 16), a3, a4);
          uint64_t v11 = v23;
          if ((_DWORD)v23 != -3905 && (_DWORD)v23 != 61 && (_DWORD)v23 != 16) {
            break;
          }
          if (!i) {
            break;
          }
          usleep(0x7A120u);
        }

LABEL_40:
        if ((_DWORD)v11)
        {
          CFTypeID v25 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "WiFiDeviceSetProperty", a3, v11);
          }
          objc_autoreleasePoolPop(v25);
        }

        return v11;
      }

      uint64_t v18 = 501LL;
    }

    for (int j = 6; ; --j)
    {
      uint64_t v20 = Apple80211Set(*(void *)(a1 + 16), v18, 0LL, a4, 8LL);
      uint64_t v11 = v20;
      if ((_DWORD)v20 != -3905 && (_DWORD)v20 != 61 && (_DWORD)v20 != 16) {
        break;
      }
      if (!j) {
        break;
      }
      usleep(0x7A120u);
    }

    goto LABEL_40;
  }

  unsigned int valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &valuePtr)) {
    return 0LL;
  }
  for (int k = 6; ; --k)
  {
    uint64_t v15 = Apple80211Set(*(void *)(a1 + 16), valuePtr, 0LL, a4, 8LL);
    uint64_t v11 = v15;
    if ((_DWORD)v15 != -3905 && (_DWORD)v15 != 61 && (_DWORD)v15 != 16) {
      break;
    }
    if (!k) {
      break;
    }
    usleep(0x7A120u);
  }

  return v11;
}

            uint64_t v19 = 0LL;
            goto LABEL_41;
          }

          CFMutableArrayRef v26 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: failed to get services",  "__copyAirPortService");
          }
        }

        else
        {
          CFMutableArrayRef v26 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: failed to get currentSet",  "__copyAirPortService");
          }
        }

        objc_autoreleasePoolPop(v26);
        uint64_t v11 = 0LL;
        goto LABEL_40;
      }

      CFMutableArrayRef v24 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: failed to get prefs lock", "__copyAirPortService");
      }
      objc_autoreleasePoolPop(v24);
      CFRelease(v7);
    }

    else
    {
      uint64_t v23 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "Unable to create preferences %d", SCError());
      }
      objc_autoreleasePoolPop(v23);
    }

LABEL_32:
    CFTypeID v25 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: No airportService",  "__WiFiDeviceInitializeIPParams");
    }
    objc_autoreleasePoolPop(v25);
    CFRelease(v4);
    return;
  }

  CFMutableDictionaryRef v22 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: Not associated", "__WiFiDeviceInitializeIPParams");
  }
  objc_autoreleasePoolPop(v22);
}

  blocint k = (void **)a1;
  BOOL v29 = 0xAAAAAAAA0000000ALL;
  CFTypeID v30 = 0LL;
  __int128 v31 = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &block);
}

  CFStringAppend(theString, @" VrtA");
  if ((a1 & 0x40000) != 0) {
    goto LABEL_41;
  }
}

                            if (v19 != (id)++v21) {
                              continue;
                            }
                            uint64_t v19 = [v17 countByEnumeratingWithState:&v38 objects:v46 count:16];
                            if (!v19) {
                              goto LABEL_42;
                            }
                            goto LABEL_25;
                          case 7u:
                            CFMutableDictionaryRef v22 = (uint64_t)v11;
                            uint64_t v23 = @"WiFiNetworkAttributeIsLowQuality";
                            goto LABEL_39;
                          default:
                            goto LABEL_40;
                        }
                      }
                    }
                  }

CFDictionaryRef sub_1000449EC(uint64_t a1, const void *a2)
{
  CFDictionaryRef v12 = 0LL;
  CFNumberRef v4 = sub_1000446C8(a1, a2);
  if (v4)
  {
    uint64_t v5 = (uint64_t)v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == sub_10012FE70())
    {
      sub_100131284(v5, 29LL, 0LL, &v12);
    }

    else
    {
      for (int i = 6; ; --i)
      {
        int v9 = Apple80211CopyValue(*(void *)(a1 + 16), 29LL, 0LL, &v12);
        if (v9 != -3905 && v9 != 61 && v9 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
    }
  }

  else
  {
    uint64_t v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "Unknown interface %@", a2 message];
    }
    objc_autoreleasePoolPop(v11);
  }

  return v12;
}

uint64_t sub_100044AD4( uint64_t a1, CFStringRef theString, const char *a3, const char *a4, int a5, void *a6, unsigned int a7)
{
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v26 = v14;
  __int128 v27 = v14;
  CFIndex Length = CFStringGetLength(theString);
  uint64_t v16 = (char *)malloc(Length + 1);
  if (v16)
  {
    CFTypeID v17 = v16;
    CFIndex v18 = CFStringGetLength(theString);
    CFStringGetCString(theString, v17, v18 + 1, 0);
    bzero(a6, a7);
    strcat((char *)a6, a3);
    *((_BYTE *)a6 + strlen(a3)) = 0;
    size_t v19 = strlen(a3);
    strcat((char *)a6 + v19 + 1, a4);
    size_t v20 = strlen(a3);
    *((_BYTE *)a6 + v20 + strlen(a4) + 1) = 32;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    unint64_t v28 = 0LL;
    __strlcpy_chk(&v26, v17, 16LL, 16LL);
    if (a5) {
      int v21 = 263;
    }
    else {
      int v21 = 262;
    }
    LODWORD(v27) = -1;
    *(void *)((char *)&v27 + 4) = __PAIR64__(a7, v21);
    unint64_t v28 = (unint64_t)a6;
    uint64_t v22 = Apple80211RawGet(*(void *)(a1 + 16), &v26);
    free(v17);
    if (!(_DWORD)v22) {
      return v22;
    }
  }

  else
  {
    CFTypeID v25 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: failed to alloc interfaceName",  "WiFiDeviceGetSetWLDump");
    }
    objc_autoreleasePoolPop(v25);
    uint64_t v22 = 4294963395LL;
  }

  uint64_t v23 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: error %d", "WiFiDeviceGetSetWLDump", v22);
  }
  objc_autoreleasePoolPop(v23);
  return v22;
}

uint64_t sub_100044CD4(uint64_t a1, void *a2)
{
  CFNumberRef v4 = *(const __CFArray **)(a1 + 5664);
  if (v4 && CFArrayGetCount(v4))
  {
    [a2 addObjectsFromArray:*(void *)(a1 + 5664)];
    return 0LL;
  }

  CFTypeID v6 = sub_1000446C8(a1, *(const void **)(a1 + 112));
  if (!v6)
  {
    CFIndex v18 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "Unknown interface %@", *(void *)(a1 + 112) message];
    }
    objc_autoreleasePoolPop(v18);
    return 0LL;
  }

  uint64_t v7 = (uint64_t)v6;
  CFArrayRef theArray = 0LL;
  CFTypeID v8 = CFGetTypeID(v6);
  if (v8 == sub_10012FE70())
  {
    uint64_t v5 = sub_100131284(v7, 207LL, 0LL, &theArray);
LABEL_19:
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        CFIndex v13 = Count;
        for (CFIndex i = 0LL; i != v13; ++i)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, i);
          if (ValueAtIndex)
          {
            uint64_t v16 = ValueAtIndex;
            if (CFDictionaryGetValue(ValueAtIndex, @"CHANNELINFO_CH_NUM")) {
              CFArrayAppendValue((CFMutableArrayRef)a2, v16);
            }
          }
        }
      }

      if (theArray) {
        CFRelease(theArray);
      }
    }
  }

  else
  {
    for (int j = 6; ; --j)
    {
      uint64_t v10 = Apple80211CopyValue(*(void *)(a1 + 16), 207LL, 0LL, &theArray);
      uint64_t v5 = v10;
      if ((int)v10 <= 15)
      {
        if ((_DWORD)v10 != -3905) {
          break;
        }
      }

      else if ((_DWORD)v10 != 61 && (_DWORD)v10 != 16)
      {
        goto LABEL_32;
      }

      if (!j) {
        break;
      }
      usleep(0x7A120u);
    }

    if (!(_DWORD)v10) {
      goto LABEL_19;
    }
LABEL_32:
    size_t v19 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "Could not read APPLE80211_IOC_CHANNELS_INFO err=%d", v5);
    }
    objc_autoreleasePoolPop(v19);
  }

  return v5;
}

uint64_t sub_100044EB0(uint64_t a1, const void *a2, __CFArray *a3)
{
  CFArrayRef theArray = 0LL;
  if (!a3) {
    return 4294963396LL;
  }
  CFTypeID v6 = sub_1000446C8(a1, a2);
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    CFTypeID v8 = CFGetTypeID(v6);
    if (v8 == sub_10012FE70())
    {
      uint64_t v9 = sub_100131284(v7, 254LL, 0LL, &theArray);
LABEL_23:
      MutableCFDictionaryRef Copy = theArray;
      if (theArray) {
        goto LABEL_24;
      }
    }

    else
    {
      for (int i = 6; ; --i)
      {
        uint64_t v11 = Apple80211CopyValue(*(void *)(a1 + 16), 254LL, 0LL, &theArray);
        uint64_t v9 = v11;
        if ((int)v11 <= 15)
        {
          if ((_DWORD)v11 != -3905) {
            break;
          }
        }

        else if ((_DWORD)v11 != 61 && (_DWORD)v11 != 16)
        {
          goto LABEL_17;
        }

        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }

      if (!(_DWORD)v11) {
        goto LABEL_23;
      }
LABEL_17:
      CFIndex v13 = *(const __CFArray **)(a1 + 5656);
      if (v13 && CFArrayGetCount(v13))
      {
        __int128 v14 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: failed getting HW supported channels, err=%d, returning cached HW channels (count=%ld)",  "WiFiDeviceSupportedChannels",  v9,  CFArrayGetCount(*(CFArrayRef *)(a1 + 5656)));
        }
        objc_autoreleasePoolPop(v14);
        MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0LL, *(CFArrayRef *)(a1 + 5656));
        uint64_t v9 = 0LL;
        CFArrayRef theArray = MutableCopy;
        if (MutableCopy)
        {
LABEL_24:
          CFIndex Count = CFArrayGetCount(MutableCopy);
          if (Count >= 1)
          {
            CFIndex v17 = Count;
            for (CFIndex j = 0LL; j != v17; ++j)
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, j);
              if (ValueAtIndex)
              {
                size_t v20 = ValueAtIndex;
                if (CFDictionaryGetValue(ValueAtIndex, @"SUP_CHANNEL")) {
                  CFArrayAppendValue(a3, v20);
                }
              }
            }
          }

          if (theArray) {
            CFRelease(theArray);
          }
        }
      }

      else
      {
        int v21 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "Could not read APPLE80211_IOC_HW_SUPPORTED_CHANNELS err=%d",  v9);
        }
        objc_autoreleasePoolPop(v21);
      }
    }
  }

  else
  {
    uint64_t v23 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "Unknown interface %@", a2 message];
    }
    objc_autoreleasePoolPop(v23);
    return 0LL;
  }

  return v9;
}

uint64_t sub_1000450F8(uint64_t a1, const void *a2, __CFArray *a3)
{
  CFArrayRef theArray = 0LL;
  if (!a3) {
    return 4294963396LL;
  }
  CFTypeID v6 = sub_1000446C8(a1, a2);
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    CFTypeID v8 = CFGetTypeID(v6);
    if (v8 == sub_10012FE70())
    {
      uint64_t v9 = sub_100131284(v7, 27LL, 0LL, &theArray);
LABEL_17:
      if (theArray)
      {
        CFIndex Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          CFIndex v14 = Count;
          for (CFIndex i = 0LL; i != v14; ++i)
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, i);
            if (ValueAtIndex)
            {
              CFIndex v17 = ValueAtIndex;
              if (CFDictionaryGetValue(ValueAtIndex, @"SUP_CHANNEL")) {
                CFArrayAppendValue(a3, v17);
              }
            }
          }
        }

        if (theArray) {
          CFRelease(theArray);
        }
      }
    }

    else
    {
      for (int j = 6; ; --j)
      {
        uint64_t v11 = Apple80211CopyValue(*(void *)(a1 + 16), 27LL, 0LL, &theArray);
        uint64_t v9 = v11;
        if ((int)v11 <= 15)
        {
          if ((_DWORD)v11 != -3905) {
            break;
          }
        }

        else if ((_DWORD)v11 != 61 && (_DWORD)v11 != 16)
        {
          goto LABEL_30;
        }

        if (!j) {
          break;
        }
        usleep(0x7A120u);
      }

      if (!(_DWORD)v11) {
        goto LABEL_17;
      }
LABEL_30:
      size_t v20 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "Could not read APPLE80211_IOC_SUPPORTED_CHANNELS err=%d",  v9);
      }
      objc_autoreleasePoolPop(v20);
    }
  }

  else
  {
    size_t v19 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "Unknown interface %@", a2 message];
    }
    objc_autoreleasePoolPop(v19);
    return 0LL;
  }

  return v9;
}

uint64_t sub_1000452B8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 31) >> 5) & 1;
}

uint64_t sub_1000452C4(uint64_t a1, CFTypeRef cf, const void *a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef v10 = CFRetain(cf);
  CFTypeRef v11 = CFRetain(a3);
  uint64_t v12 = sub_100045368(a1, 3u, 0LL, (uint64_t)v10, (uint64_t)v11, a4, a5, 0LL, 0LL);
  if ((_DWORD)v12)
  {
    if (a3) {
      CFRelease(a3);
    }
    if (cf) {
      CFRelease(cf);
    }
  }

  return v12;
}

uint64_t sub_100045368( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 48) == 1)
    {
      v17[1] = -1431655766;
      unint64_t v24 = 0xAAAAAAAAAAAAAA00LL;
      v17[0] = a2;
      uint64_t v18 = a4;
      uint64_t v19 = a5;
      uint64_t v20 = a6;
      uint64_t v21 = a7;
      uint64_t v22 = a8;
      uint64_t v23 = 0LL;
      uint64_t v25 = a3;
      uint64_t v12 = objc_autoreleasePoolPush();
      CFIndex v13 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        unint64_t v14 = sub_1000496AC(a2);
        [v13 WFLog:3, "Enqueuing command type: %@ priority:%ld pending commands: %ld", v14, a3, sub_10012872C(*(void *)(a1 + 176)) message];
      }

      objc_autoreleasePoolPop(v12);
      return sub_100128734(*(void *)(a1 + 176), (const UInt8 *)v17, 72LL, a9);
    }

    else
    {
      return 82LL;
    }
  }

  else
  {
    uint64_t v16 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null device", "__WiFiDeviceCommandEnqueue");
    }
    objc_autoreleasePoolPop(v16);
    return 4294963396LL;
  }

uint64_t sub_10004548C(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4)
{
  CFTypeRef v7 = CFRetain(cf);
  return sub_100045368(a1, 4u, 0LL, (uint64_t)v7, a3, a4, 0LL, 0LL, 0LL);
}

uint64_t sub_1000454F0(uint64_t a1, CFTypeRef cf, const void *a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef v10 = CFRetain(cf);
  CFTypeRef v11 = CFRetain(a3);
  uint64_t v12 = sub_100045368(a1, 5u, 0LL, (uint64_t)v10, (uint64_t)v11, a4, a5, 0LL, 0LL);
  if ((_DWORD)v12)
  {
    if (a3) {
      CFRelease(a3);
    }
    if (cf) {
      CFRelease(cf);
    }
  }

  return v12;
}

uint64_t sub_100045594(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4)
{
  if (a1 && *(void *)(a1 + 4672))
  {
    CFTypeID v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: hostap never started. Invoking error callback.",  "WiFiDeviceStopWiFiDirectGroup");
    }
    objc_autoreleasePoolPop(v8);
    sub_10004565C(a1, (uint64_t)cf, 4294963391LL);
  }

  CFTypeRef v9 = CFRetain(cf);
  return sub_100045368(a1, 6u, 0LL, (uint64_t)v9, a3, a4, 0LL, 0LL, 0LL);
}

void sub_10004565C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeID v6 = (void *)(a1 + 4672);
  CFTypeRef v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 4672);
  uint64_t v8 = *(void *)(a1 + 4680);
  CFTypeRef v9 = objc_autoreleasePoolPush();
  if ((_DWORD)a3)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Error %d starting WiFi Direct Group, requesting stop...",  a3);
    }
    objc_autoreleasePoolPop(v9);
    for (int i = 6; ; --i)
    {
      int v11 = Apple80211Set(*(void *)(a1 + 16), 25LL, 2LL, 0LL, 0LL);
      if (v11 != -3905 && v11 != 61 && v11 != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
  }

  else
  {
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"Successfully started WiFi Direct Group"];
    }
    objc_autoreleasePoolPop(v9);
    *(_BYTE *)(a1 + 56) = 1;
  }

  *CFTypeID v6 = 0LL;
  v6[1] = 0LL;
  if (v7) {
    v7(a1, a2, a3, v8);
  }
  sub_10004F9BC(a1);
  CFIndex v13 = *(void (**)(uint64_t, void, void, void))(a1 + 4984);
  if (v13) {
    v13(a1, 0LL, *(void *)(a1 + 4992), *(unsigned __int8 *)(a1 + 56));
  }
}

void sub_1000457AC(uint64_t a1, int a2)
{
  int v12 = a2;
  if (a1)
  {
    CFNumberRef v4 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      uint64_t v5 = "hidden";
      if (!a2) {
        uint64_t v5 = "broadcast";
      }
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Setting host ap to %s mode",  "WiFiDeviceSetMISHiddenOrBroadcastState",  v5);
    }

    objc_autoreleasePoolPop(v4);
    for (int i = 6; ; --i)
    {
      uint64_t v7 = Apple80211Set(*(void *)(a1 + 16), 336LL, 0LL, &v12, 4LL);
      uint64_t v8 = v7;
      if ((int)v7 <= 15)
      {
        if ((_DWORD)v7 != -3905) {
          break;
        }
      }

      else if ((_DWORD)v7 != 61 && (_DWORD)v7 != 16)
      {
        goto LABEL_18;
      }

      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }

    if (!(_DWORD)v7) {
      return;
    }
LABEL_18:
    CFTypeRef v10 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      if (v12) {
        int v11 = "hidden";
      }
      else {
        int v11 = "broadcast";
      }
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "Error setting host ap to %s mode, %d", v11, v8);
    }

    objc_autoreleasePoolPop(v10);
  }

void sub_1000458E0(uint64_t a1, int a2)
{
  BOOL valuePtr = a2 != 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFNumberRef v4 = Mutable;
    for (int i = 6; ; --i)
    {
      uint64_t v6 = Apple80211Get(*(void *)(a1 + 16), 347LL, 0LL, v4, 8LL);
      uint64_t v7 = v6;
      if ((int)v6 <= 15)
      {
        if ((_DWORD)v6 != -3905) {
          break;
        }
      }

      else if ((_DWORD)v6 != 61 && (_DWORD)v6 != 16)
      {
        goto LABEL_29;
      }

      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }

    if ((_DWORD)v6)
    {
LABEL_29:
      uint64_t v16 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Failed to get SoftAP LowPower config: err %d",  "WiFiDeviceSetLowPowerMISActive",  v7);
      }
      goto LABEL_33;
    }

    CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (!v9) {
      goto LABEL_25;
    }
    CFNumberRef v10 = v9;
    CFDictionaryReplaceValue(v4, @"SOFTAP_LOWPOWER_PS_STATE", v9);
    CFRelease(v10);
    for (int j = 6; ; --j)
    {
      uint64_t v12 = Apple80211Set(*(void *)(a1 + 16), 347LL, 0LL, v4, 8LL);
      uint64_t v13 = v12;
      if ((int)v12 <= 15)
      {
        if ((_DWORD)v12 != -3905) {
          break;
        }
      }

      else if ((_DWORD)v12 != 61 && (_DWORD)v12 != 16)
      {
        goto LABEL_31;
      }

      if (!j) {
        break;
      }
      usleep(0x7A120u);
    }

    if (!(_DWORD)v12) {
      goto LABEL_25;
    }
LABEL_31:
    uint64_t v16 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Failed to set SoftAP LowPower config: err %d",  "WiFiDeviceSetLowPowerMISActive",  v13);
    }
LABEL_33:
    objc_autoreleasePoolPop(v16);
LABEL_25:
    CFRelease(v4);
  }

  else
  {
    uint64_t v15 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Failed to create dict",  "WiFiDeviceSetLowPowerMISActive");
    }
    objc_autoreleasePoolPop(v15);
  }

CFMutableDictionaryRef sub_100045B04(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    for (int i = 6; ; --i)
    {
      uint64_t v4 = Apple80211Get(*(void *)(a1 + 16), 350LL, 0LL, Mutable, 8LL);
      uint64_t v5 = v4;
      if ((int)v4 <= 15)
      {
        if ((_DWORD)v4 != -3905) {
          break;
        }
      }

      else if ((_DWORD)v4 != 61 && (_DWORD)v4 != 16)
      {
        goto LABEL_16;
      }

      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }

    if (!(_DWORD)v4) {
      return Mutable;
    }
LABEL_16:
    uint64_t v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Failed to get SoftAP LowPower Stats: err %d",  "WiFiDeviceCopyHotspotLowPowerStats",  v5);
    }
  }

  else
  {
    uint64_t v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Failed to create dict",  "WiFiDeviceCopyHotspotLowPowerStats",  v9);
    }
  }

  objc_autoreleasePoolPop(v8);
  return Mutable;
}

void sub_100045C2C(uint64_t a1, char a2, __int16 a3, const void *a4)
{
  char valuePtr = a2;
  __int16 v18 = a3;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    uint64_t v7 = Mutable;
    CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
    if (v8)
    {
      CFNumberRef v9 = v8;
      CFDictionarySetValue(v7, @"HostApBatteryLevel", v8);
      CFRelease(v9);
      if (!a4) {
        goto LABEL_6;
      }
      CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v18);
      if (v10)
      {
        CFNumberRef v11 = v10;
        CFDictionarySetValue(v7, @"HostApWiFiNetworkFlag", v10);
        CFRelease(v11);
        CFDictionarySetValue(v7, @"SSID_STR", a4);
LABEL_6:
        for (int i = 6; ; --i)
        {
          uint64_t v13 = Apple80211Set(*(void *)(a1 + 16), 352LL, 0LL, v7, 8LL);
          uint64_t v14 = v13;
          if ((int)v13 <= 15)
          {
            if ((_DWORD)v13 != -3905) {
              break;
            }
          }

          else if ((_DWORD)v13 != 61 && (_DWORD)v13 != 16)
          {
            goto LABEL_21;
          }

          if (!i) {
            break;
          }
          usleep(0x7A120u);
        }

        if (!(_DWORD)v13) {
          goto LABEL_17;
        }
LABEL_21:
        CFIndex v17 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Failed to set SoftAP IE config: err %d",  "WiFiDeviceSetWiFiNetworkInHotspotIe",  v14);
        }
        objc_autoreleasePoolPop(v17);
      }
    }

void sub_100045E10(uint64_t a1, char a2, const void *a3)
{
  char valuePtr = a2;
  if (a3)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      uint64_t v6 = Mutable;
      CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &valuePtr);
      if (v7)
      {
        CFNumberRef v8 = v7;
        CFDictionarySetValue(v6, @"HostSoftapNanCapabilityFlag", v7);
        CFRelease(v8);
        CFDictionarySetValue(v6, @"HostSoftapNanServiceName", a3);
        for (int i = 6; ; --i)
        {
          uint64_t v10 = Apple80211Set(*(void *)(a1 + 16), 403LL, 0LL, v6, 8LL);
          uint64_t v11 = v10;
          if ((int)v10 <= 15)
          {
            if ((_DWORD)v10 != -3905) {
              break;
            }
          }

          else if ((_DWORD)v10 != 61 && (_DWORD)v10 != 16)
          {
            goto LABEL_20;
          }

          if (!i) {
            break;
          }
          usleep(0x7A120u);
        }

        if (!(_DWORD)v10) {
          goto LABEL_15;
        }
LABEL_20:
        uint64_t v14 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Failed to set SoftAP NAN IE config: err %d",  "WiFiDeviceSetNanCapabilityInHotspotIe",  v11);
        }
        objc_autoreleasePoolPop(v14);
      }

void sub_100045FB0(uint64_t a1)
{
  char valuePtr = 1;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    uint64_t v3 = Mutable;
    CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
    if (v4)
    {
      CFNumberRef v5 = v4;
      CFDictionarySetValue(v3, @"HostApEnabled", v4);
      CFRelease(v5);
      uint64_t v6 = *(void *)(a1 + 16);
      if (v6)
      {
        for (int i = 6; ; --i)
        {
          uint64_t v8 = Apple80211Set(v6, 420LL, 0LL, v3, 8LL);
          uint64_t v9 = v8;
          if ((int)v8 <= 15)
          {
            if ((_DWORD)v8 != -3905) {
              break;
            }
          }

          else if ((_DWORD)v8 != 61 && (_DWORD)v8 != 16)
          {
            goto LABEL_17;
          }

          if (!i) {
            break;
          }
          usleep(0x7A120u);
          uint64_t v6 = *(void *)(a1 + 16);
        }

        if (!(_DWORD)v8) {
          goto LABEL_13;
        }
LABEL_17:
        uint64_t v11 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Failed to set SoftAP CSA config: err %d",  "WiFiDeviceSetSoftApCsaNanPh",  v9);
        }
        objc_autoreleasePoolPop(v11);
      }
    }

void sub_100046144( uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, unsigned int a10)
{
  unsigned int v16 = a10;
  __int16 v18 = *(void (**)(uint64_t, const void *, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, unsigned int))(a6 + 5496);
  uint64_t v19 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s for ssid [%@] bssid [%@] rssi [%ld] ifname [%@] linkEvent %d", "WiFiDeviceSetNanNetworkAssociation", a2, a1, a3, a4, a10 message];
  }
  objc_autoreleasePoolPop(v19);
  uint64_t v20 = a8;
  if (a10 == 1)
  {
    uint64_t valuePtr = 10LL;
    CFIndex v34 = a4;
    if (sub_10004FDA4(a6))
    {
      BOOL v29 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: Internet Relay Interface Already Exists %@", "__WiFiDeviceCreateInternetRelayInterface", a4 message];
      }
    }

    else
    {
      CFNumberRef v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
      if (v21)
      {
        CFNumberRef v22 = v21;
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        if (Mutable)
        {
          unint64_t v24 = Mutable;
          CFDictionaryAddValue(Mutable, @"VIRT_IF_ROLE", v22);
          uint64_t v25 = a4;
          CFDictionaryAddValue(v24, @"VIRT_IF_NAME", a4);
          uint64_t v27 = sub_10004F408(a6, v26, v24, &v34);
          unint64_t v28 = objc_autoreleasePoolPush();
          if ((_DWORD)v27)
          {
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:4, "Error creating %@  interface %d", v34, v27 message];
            }
          }

          else if (qword_100219F60)
          {
            [(id)qword_100219F60 WFLog:4, "%s: Created %@ interface", "__WiFiDeviceCreateInternetRelayInterface", v34 message];
          }

          objc_autoreleasePoolPop(v28);
          CFRelease(v22);
          CFRelease(v24);
          uint64_t v20 = a8;
          a4 = v25;
          unsigned int v16 = a10;
        }

        else
        {
          CFTypeID v30 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null intfDict.",  "__WiFiDeviceCreateInternetRelayInterface");
          }
          objc_autoreleasePoolPop(v30);
          CFRelease(v22);
        }

        goto LABEL_13;
      }

      BOOL v29 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null role.",  "__WiFiDeviceCreateInternetRelayInterface",  v31);
      }
    }

    objc_autoreleasePoolPop(v29);
  }

void sub_100046418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(a6 + 5512);
  if (v10) {
    v10(a6, a4, a3, a5, *(void *)(a6 + 5520));
  }
  uint64_t v11 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s for ssid [%@] bssid [%@] rssi [%ld] ifname [%@]", "WiFiDeviceSetNanNetworkTerminated", a2, a1, a3, a4 message];
  }
  objc_autoreleasePoolPop(v11);
}

uint64_t sub_1000464BC(uint64_t a1, CFTypeRef cf, const void *a3, uint64_t a4, uint64_t a5, const void *a6)
{
  CFTypeRef v12 = CFRetain(cf);
  if (a3)
  {
    CFTypeRef v13 = CFRetain(a3);
    if (a6)
    {
LABEL_3:
      CFTypeRef v14 = CFRetain(a6);
      goto LABEL_6;
    }
  }

  else
  {
    CFTypeRef v13 = 0LL;
    if (a6) {
      goto LABEL_3;
    }
  }

  CFTypeRef v14 = 0LL;
LABEL_6:
  uint64_t v15 = sub_100045368(a1, 0xAu, 0LL, (uint64_t)v12, (uint64_t)v13, a4, a5, (uint64_t)v14, 0LL);
  if ((_DWORD)v15)
  {
    if (cf) {
      CFRelease(cf);
    }
    if (a3) {
      CFRelease(a3);
    }
    if (a6) {
      CFRelease(a6);
    }
  }

  return v15;
}

uint64_t sub_10004659C(uint64_t *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  CFIndex v18 = 72LL;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v17 = 0LL;
  if (!sub_100128B54(a1[22], &v19, &v18, &v17) && *(_BYTE *)(v19 + 56) == 1 && *(_DWORD *)v19 == 12)
  {
    uint64_t v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Flushing out pending ranging request...",  "WiFiDeviceStopAwdl");
    }
    objc_autoreleasePoolPop(v10);
    sub_100046714(a1, (uint64_t)a2, 0LL, 4294963365LL);
    sub_100046F6C((uint64_t)a1, (uint64_t)a2, 0LL);
  }

  uint64_t v11 = (const void *)a1[588];
  if (v11)
  {
    CFRelease(v11);
    a1[588] = 0LL;
  }

  CFTypeRef v12 = (const void *)a1[589];
  if (v12)
  {
    CFRelease(v12);
    a1[589] = 0LL;
  }

  a1[590] = 0LL;
  CFTypeRef v13 = CFRetain(a2);
  if (a3) {
    CFTypeRef v14 = CFRetain(a3);
  }
  else {
    CFTypeRef v14 = 0LL;
  }
  uint64_t v15 = sub_100045368((uint64_t)a1, 0xBu, 0LL, (uint64_t)v13, (uint64_t)v14, a4, a5, 0LL, 0LL);
  if ((_DWORD)v15)
  {
    if (a2) {
      CFRelease(a2);
    }
    if (a3) {
      CFRelease(a3);
    }
  }

  return v15;
}

void sub_100046714(uint64_t *a1, uint64_t a2, const __CFArray *a3, uint64_t a4)
{
  CFNumberRef v7 = a1;
  size_t v57 = (void (*)(uint64_t *, uint64_t, __CFArray *, uint64_t, uint64_t))a1[643];
  uint64_t v55 = a1[644];
  uint64_t v75 = 0LL;
  CFIndex v76 = 72LL;
  uint64_t v8 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "Completed APPLE80211_IOC_RANGING_START on %@ (%d)", a2, a4 message];
  }
  objc_autoreleasePoolPop(v8);
  if ((a4 + 3933) <= 1 && !v7[588])
  {
    uint64_t v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: ranging error while AWDL session not requested. Overriding error code to %d",  "__WiFiDeviceProcessRangingDoneEvent",  4294963368);
    }
    objc_autoreleasePoolPop(v9);
    a4 = 4294963368LL;
  }

  uint64_t v58 = a4;
  uint64_t v56 = v7 + 643;
  unint64_t v77 = 0xAAAAAAAAAAAAAAAALL;
  if (a3 && (CFArrayGetCount(a3) > 4 ? (CFIndex v10 = 4LL) : (CFIndex v10 = CFArrayGetCount(a3)), v10 >= 1))
  {
    CFIndex v11 = v10;
    CFIndex v12 = 0LL;
    CFTypeRef v13 = 0LL;
    CFNumberRef v59 = a3;
    CFTypeID v60 = v7;
    CFIndex v61 = v10;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v12);
      if (ValueAtIndex)
      {
        uint64_t v15 = ValueAtIndex;
        CFNumberRef v62 = v13;
        unsigned int Value = CFDictionaryGetValue(ValueAtIndex, @"STATION_MAC");
        uint64_t v17 = CFDictionaryGetValue(v15, @"RANGING_DISTANCE");
        char valuePtr = 0;
        __int16 v73 = 0;
        __int16 v72 = 0;
        CFIndex v18 = (const __CFNumber *)CFDictionaryGetValue(v15, @"RANGING_VALID_COUNT");
        if (v18) {
          CFNumberGetValue(v18, kCFNumberSInt8Type, &valuePtr);
        }
        unint64_t v19 = (const __CFNumber *)CFDictionaryGetValue(v15, @"RANGING_STATUS");
        if (v19) {
          CFNumberGetValue(v19, kCFNumberSInt16Type, &v72);
        }
        uint64_t v20 = (const __CFNumber *)CFDictionaryGetValue(v15, @"RANGING_FLAGS");
        if (v20) {
          CFNumberGetValue(v20, kCFNumberSInt16Type, &v73);
        }
        CFNumberRef v21 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: peer %@ status %d flags 0x%x distance %@m validSamples %d", "__WiFiDeviceProcessRangingDoneEvent", Value, v72, v73, v17, valuePtr message];
        }
        objc_autoreleasePoolPop(v21);
        CFNumberRef v22 = (const __CFArray *)CFDictionaryGetValue(v15, @"RANGING_RESULTS");
        MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, v15);
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
        if (v22 && CFArrayGetCount(v22) >= 1)
        {
          CFIndex v25 = 0LL;
          do
          {
            uint64_t v26 = (const __CFDictionary *)CFArrayGetValueAtIndex(v22, v25);
            if (v26)
            {
              uint64_t v27 = v26;
              __int16 v71 = 0;
              unsigned int v70 = 0;
              __int16 v69 = 0;
              __int16 v68 = 0;
              int v66 = 0;
              unsigned int v67 = 0;
              unsigned int v64 = 0;
              int v65 = 0;
              unsigned __int16 v63 = 0;
              unint64_t v28 = (const __CFNumber *)CFDictionaryGetValue(v26, @"RANGING_RTT_STATUS");
              if (v28) {
                CFNumberGetValue(v28, kCFNumberSInt16Type, &v66);
              }
              BOOL v29 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_RSSI");
              if (v29) {
                CFNumberGetValue(v29, kCFNumberSInt16Type, (char *)&v65 + 2);
              }
              CFTypeID v30 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_RTT_FLAGS");
              if (v30) {
                CFNumberGetValue(v30, kCFNumberSInt16Type, &v65);
              }
              uint64_t v31 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_RTT");
              if (v31) {
                CFNumberGetValue(v31, kCFNumberSInt32Type, &v64);
              }
              uint64_t v32 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_CHANNEL");
              if (v32) {
                CFNumberGetValue(v32, kCFNumberSInt16Type, &v63);
              }
              CFTypeID v33 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_PHY_ERROR");
              if (v33) {
                CFNumberGetValue(v33, kCFNumberSInt32Type, &v70);
              }
              CFIndex v34 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_CORE_ID");
              if (v34) {
                CFNumberGetValue(v34, kCFNumberSInt8Type, (char *)&v71 + 1);
              }
              vm_address_t v35 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_BER");
              if (v35) {
                CFNumberGetValue(v35, kCFNumberSInt8Type, &v71);
              }
              id v36 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_SNR");
              if (v36) {
                CFNumberGetValue(v36, kCFNumberSInt16Type, &v69);
              }
              uint64_t v37 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_PEER_CORE_ID");
              if (v37) {
                CFNumberGetValue(v37, kCFNumberSInt8Type, (char *)&v68 + 1);
              }
              CFIndex v38 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_PEER_PHY_ERROR");
              if (v38) {
                CFNumberGetValue(v38, kCFNumberSInt32Type, &v67);
              }
              uint64_t v39 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_PEER_BER");
              if (v39) {
                CFNumberGetValue(v39, kCFNumberSInt8Type, &v68);
              }
              uint64_t v40 = (const __CFNumber *)CFDictionaryGetValue(v27, @"RANGING_PEER_SNR");
              if (v40) {
                CFNumberGetValue(v40, kCFNumberSInt16Type, (char *)&v66 + 2);
              }
              memset(v79, 0, 64);
              memset(v78, 0, sizeof(v78));
              Apple80211GetRangingPhyErrorString(v70, v79, 64LL);
              Apple80211GetRangingPhyErrorString(v67, v78, 64LL);
              CFTypeID v41 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "RTT[%ld]: Status=%d, RTT=%d RSSI=%d SNR=%d Core=%d BitFlip=%d PHYErr=%d(%s) Peer-SNR=%d Peer-BitFlip=% d Peer-PHYErr=%d(%s)",  v25,  (__int16)v66,  v64,  SHIWORD(v65),  v69,  SHIBYTE(v71),  (char)v71,  v70,  v79,  SHIWORD(v66),  (char)v68,  v67,  v78);
              }
              objc_autoreleasePoolPop(v41);
              unsigned int v42 = v67;
              unsigned int v43 = v67 & 0xFFFFFD13;
              v67 &= 0xFFFFFD13;
              if ((char)v68 < 0)
              {
                unsigned int v43 = v42 & 0xFFFFFD03;
                unsigned int v67 = v42 & 0xFFFFFD03;
              }

              if (!(_WORD)v66
                && !v43
                && (v63 - 1 > 0xC || (char)v71 <= 10)
                && (v63 - 36 >= 0x1D && v63 - 100 >= 0x2D && v63 - 142 > 0x17
                 || (char)v71 <= 40))
              {
                CFArrayAppendValue(Mutable, v27);
              }

              int v44 = +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance");
              -[WiFiUsageMonitor addRangingRttSampleWithRssi:rtt:snr:flags:channel:coreId:bitErrorRate:phyError:andPeerSnr:andPeerCoreId:andPeerBitErrorRate:andPeerPhyError:]( v44,  "addRangingRttSampleWithRssi:rtt:snr:flags:channel:coreId:bitErrorRate:phyError:andPeerSnr:andPeerCoreId: andPeerBitErrorRate:andPeerPhyError:",  SHIWORD(v65),  (int)v64,  v69,  (__int16)v65,  (__int16)v63,  SHIBYTE(v71),  (char)v71,  (int)v70,  SHIWORD(v66),  SHIBYTE(v68),  (char)v68,  (int)v67);
            }

            CFIndex Count = CFArrayGetCount(v22);
            ++v25;
          }

          while (v25 < Count);
        }

        LOWORD(v70) = -21846;
        if (Mutable) {
          __int16 v46 = CFArrayGetCount(Mutable);
        }
        else {
          __int16 v46 = 0;
        }
        CFNumberRef v7 = v60;
        LOWORD(v70) = v46;
        CFTypeRef v13 = v62;
        CFNumberRef v47 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v70);
        CFDictionarySetValue(MutableCopy, @"RANGING_VALID_COUNT", v47);
        if (v47) {
          CFRelease(v47);
        }
        CFTypeRef v48 = (const __CFDictionary *)v60[588];
        CFIndex v11 = v61;
        if (v48)
        {
          v79[0] = 0;
          uint64_t v49 = (const __CFNumber *)CFDictionaryGetValue(v48, @"AWDL_INFO_SUPPORTED_CHANNEL_FLAGS");
          if (v49) {
            CFNumberGetValue(v49, kCFNumberSInt32Type, v79);
          }
          if (v79[0])
          {
            LODWORD(v78[0]) = HIWORD(v79[0]);
            CFNumberRef v50 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v78);
            if (v50)
            {
              CFNumberRef v51 = v50;
              CFTypeID v52 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:3, "%s: setting ranging feature flag to %@", "__WiFiDeviceProcessRangingDoneEvent", v51 message];
              }
              objc_autoreleasePoolPop(v52);
              CFDictionarySetValue(MutableCopy, @"RANGING_FEATURES", v51);
              CFRelease(v51);
              CFTypeRef v13 = v62;
            }

            CFIndex v11 = v61;
          }
        }

        CFDictionarySetValue(MutableCopy, @"RANGING_RESULTS", Mutable);
        if (v13 || (CFTypeRef v13 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks)) != 0LL) {
          CFArrayAppendValue(v13, MutableCopy);
        }
        size_t v53 = +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance");
        -[WiFiUsageMonitor rangingCompletedWithValidCount:resultStatus:resultFlags:]( v53,  "rangingCompletedWithValidCount:resultStatus:resultFlags:",  valuePtr,  (int)v58,  v73);
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
        a3 = v59;
      }

      ++v12;
    }

    while (v12 < v11);
  }

  else
  {
    CFTypeRef v13 = 0LL;
  }

  BOOL v54 = (void (*)(uint64_t *, uint64_t, __CFArray *, uint64_t))v7[645];
  if (v54) {
    v54(v7, a2, v13, v7[646]);
  }
  void *v56 = 0LL;
  v56[1] = 0LL;
  if (v57) {
    v57(v7, a2, v13, v58, v55);
  }
  if (v13) {
    CFRelease(v13);
  }
}

uint64_t sub_100046F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 4294963396LL;
  if (a1 && a2)
  {
    for (int i = 6; ; --i)
    {
      uint64_t v8 = Apple80211RangingStopAsync(*(void *)(a1 + 16), a3, 0.0);
      uint64_t v3 = v8;
      if ((_DWORD)v8 != -3905 && (_DWORD)v8 != 61 && (_DWORD)v8 != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }

    CFIndex v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: ifName %@, error %d", "WiFiDeviceAbortRanging", a2, v3 message];
    }
    objc_autoreleasePoolPop(v10);
  }

  return v3;
}

uint64_t sub_10004703C(void *a1, uint64_t a2, uint64_t a3)
{
  CFNumberRef v5 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: entering", "WiFiDeviceOpen");
  }
  objc_autoreleasePoolPop(v5);
  if (*((_BYTE *)a1 + 52))
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: exiting, Error: already open", "WiFiDeviceOpen");
    }
LABEL_59:
    objc_autoreleasePoolPop(v6);
    return 1LL;
  }

  *((_BYTE *)a1 + 52) = 1;
  CFNumberRef v7 = a1 + 2;
  uint64_t v8 = Apple80211Open(a1 + 2);
  if ((_DWORD)v8)
  {
    uint64_t v29 = v8;
    CFTypeID v30 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: Apple80211Open failed, %d",  "WiFiDeviceOpen",  v29);
    }
  }

  else
  {
    uint64_t v9 = Apple80211BindToInterfaceWithParams(a1[2], a1[14], sub_100047450, a1, a3);
    if (!(_DWORD)v9)
    {
      for (int i = 6; ; --i)
      {
        int PowerState = Apple80211GetPowerState(*v7, a1 + 6);
        if (PowerState != -3905 && PowerState != 61 && PowerState != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }

      CFTypeRef v13 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Device power xpc_activity_state_t state = %s",  sub_10003AE44(*((_DWORD *)a1 + 12)));
      }
      objc_autoreleasePoolPop(v13);
      CFDictionaryRef theDict = 0LL;
      for (int j = 6; ; --j)
      {
        int v15 = Apple80211CopyValue(*v7, 106LL, 0LL, &theDict);
        if (v15 != -3905 && v15 != 61 && v15 != 16) {
          break;
        }
        if (!j) {
          break;
        }
        usleep(0x7A120u);
      }

      if (theDict)
      {
        uint64_t v17 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RSSI_MIN");
        if (v17) {
          CFNumberGetValue(v17, kCFNumberCFIndexType, a1 + 30);
        }
        CFIndex v18 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RSSI_MAX");
        if (v18) {
          CFNumberGetValue(v18, kCFNumberCFIndexType, a1 + 31);
        }
        unint64_t v19 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RSSI_THRESHOLD");
        if (v19)
        {
          uint64_t v20 = v19;
          CFNumberGetValue(v19, kCFNumberCFIndexType, a1 + 32);
          CFDictionarySetValue((CFMutableDictionaryRef)a1[15], @"SignalStrengthThreshold", v20);
        }

        CFNumberRef v21 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Device RSSI bounds (%ld, %ld) with treshold (%ld)",  a1[30],  a1[31],  a1[32]);
        }
        objc_autoreleasePoolPop(v21);
        if (theDict)
        {
          CFRelease(theDict);
          CFDictionaryRef theDict = 0LL;
        }
      }

      value = 0LL;
      for (int k = 6; ; --k)
      {
        int v23 = Apple80211CopyValue(*v7, 12LL, 0LL, &value);
        if (v23 != -3905 && v23 != 61 && v23 != 16) {
          break;
        }
        if (!k) {
          break;
        }
        usleep(0x7A120u);
      }

      if (value)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)a1[15], @"deviceCapabilities", value);
        CFIndex v25 = (const __CFArray *)value;
        v35.length = CFArrayGetCount((CFArrayRef)value);
        v35.id location = 0LL;
        CFArrayApplyFunction(v25, v35, (CFArrayApplierFunction)sub_100047534, (char *)a1 + 28);
        if (value)
        {
          CFRelease(value);
          value = 0LL;
        }

        if ((*((_BYTE *)a1 + 30) & 0x10) != 0) {
          uint64_t v26 = (const void **)&kCFBooleanTrue;
        }
        else {
          uint64_t v26 = (const void **)&kCFBooleanFalse;
        }
        CFDictionarySetValue((CFMutableDictionaryRef)a1[15], @"deviceSupportsWoW", *v26);
      }

      sub_100044EB0((uint64_t)a1, (const void *)a1[14], (__CFArray *)a1[707]);
      sub_1000475A4(a1);
      uint64_t v27 = (dispatch_queue_s *)a1[8];
      if (v27) {
        sub_100047814((uint64_t)a1, v27);
      }
      uint64_t v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: exiting", "WiFiDeviceOpen");
      }
      goto LABEL_59;
    }

    uint64_t v31 = v9;
    CFTypeID v30 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: Apple80211BindToInterface failed, %d",  "WiFiDeviceOpen",  v31);
    }
  }

  objc_autoreleasePoolPop(v30);
  uint64_t v32 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: exiting, Error: found", "WiFiDeviceOpen");
  }
  objc_autoreleasePoolPop(v32);
  return 0LL;
}

void sub_100047450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Enter: %s:%d\n",  "__WiFiDeviceServiceNotificationCallback",  4108);
  }
  objc_autoreleasePoolPop(v6);
  if (a5)
  {
    sub_10004BDEC((uint64_t)a5, 0);
    CFNumberRef v7 = (void (*)(void *, void, void))a5[544];
    if (v7) {
      v7(a5, a5[14], a5[545]);
    }
    uint64_t v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Exit: %s:%d\n",  "__WiFiDeviceServiceNotificationCallback",  4121);
    }
  }

  else
  {
    uint64_t v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s:%d\n",  "__WiFiDeviceServiceNotificationCallback",  4111);
    }
  }

  objc_autoreleasePoolPop(v8);
}

CFNumberRef sub_100047534(const __CFNumber *result, uint64_t a2)
{
  if (result)
  {
    unsigned int valuePtr = -1431655766;
    CFStringRef result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    if (valuePtr <= 0x92) {
      *(_BYTE *)(a2 + ((unint64_t)valuePtr >> 3)) |= 1 << (valuePtr & 7);
    }
  }

  return result;
}

uint64_t sub_100047598(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 30) >> 4) & 1;
}

CFMutableArrayRef sub_1000475A4(void *a1)
{
  unint64_t v2 = (const void *)a1[708];
  if (v2)
  {
    CFRelease(v2);
    a1[708] = 0LL;
  }

  CFMutableArrayRef result = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  a1[708] = result;
  if (result)
  {
    CFNumberRef v4 = result;
    CFNumberRef v5 = (const void *)a1[14];
    CFArrayRef theArray = 0LL;
    uint64_t v6 = sub_1000446C8((uint64_t)a1, v5);
    if (v6)
    {
      uint64_t v7 = (uint64_t)v6;
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == sub_10012FE70())
      {
        uint64_t v9 = sub_100131284(v7, 207LL, 0LL, &theArray);
LABEL_18:
        if (theArray)
        {
          CFIndex Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            CFIndex v14 = Count;
            for (CFIndex i = 0LL; i != v14; ++i)
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, i);
              if (ValueAtIndex)
              {
                uint64_t v17 = ValueAtIndex;
                if (CFDictionaryGetValue(ValueAtIndex, @"CHANNELINFO_CH_NUM")) {
                  CFArrayAppendValue(v4, v17);
                }
              }
            }
          }

          if (theArray)
          {
            CFRelease(theArray);
            CFArrayRef theArray = 0LL;
          }
        }

        CFIndex v18 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: APPLE80211_IOC_CHANNELS_INFO returned %ld channels in list",  "WiFiDeviceCopyChannelInfo",  CFArrayGetCount(v4));
        }
      }

      else
      {
        for (int j = 6; ; --j)
        {
          uint64_t v11 = Apple80211CopyValue(a1[2], 207LL, 0LL, &theArray);
          uint64_t v9 = v11;
          if ((int)v11 <= 15)
          {
            if ((_DWORD)v11 != -3905) {
              break;
            }
          }

          else if ((_DWORD)v11 != 61 && (_DWORD)v11 != 16)
          {
            goto LABEL_38;
          }

          if (!j) {
            break;
          }
          usleep(0x7A120u);
        }

        if (!(_DWORD)v11) {
          goto LABEL_18;
        }
LABEL_38:
        CFIndex v18 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "Could not read APPLE80211_IOC_CHANNELS_INFO err=%d",  v9,  v21);
        }
      }

      objc_autoreleasePoolPop(v18);
      if ((_DWORD)v9)
      {
        unint64_t v19 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Device return error %d for supported channels\n",  "WiFiDeviceUpdateChannelInfo",  v9);
        }
        objc_autoreleasePoolPop(v19);
        return 0LL;
      }
    }

    else
    {
      uint64_t v20 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4, "Unknown interface %@", v5 message];
      }
      objc_autoreleasePoolPop(v20);
    }

    return (CFMutableArrayRef)1;
  }

  return result;
}

void sub_100047814(uint64_t a1, dispatch_queue_s *a2)
{
  CFNumberRef v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: entering", "WiFiDeviceScheduleWithQueue");
  }
  objc_autoreleasePoolPop(v4);
  *(void *)(a1 + 64) = a2;
  if (!*(_BYTE *)(a1 + 52))
  {
    CFTypeRef v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: exiting, Error: already open",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_98;
  }

  dispatch_source_t v5 = *(dispatch_source_t *)(a1 + 72);
  if (v5
    || (dispatch_source_t v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, a2),
        (*(void *)(a1 + 72) = v5) != 0LL))
  {
    dispatch_set_context(v5, (void *)a1);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 72), (dispatch_function_t)sub_10004A4BC);
    dispatch_activate(*(dispatch_object_t *)(a1 + 72));
  }

  dispatch_source_t v6 = *(dispatch_source_t *)(a1 + 80);
  if (v6
    || (dispatch_source_t v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, a2),
        (*(void *)(a1 + 80) = v6) != 0LL))
  {
    dispatch_set_context(v6, (void *)a1);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 80), (dispatch_function_t)sub_10004A568);
    dispatch_activate(*(dispatch_object_t *)(a1 + 80));
  }

  dispatch_source_t v7 = *(dispatch_source_t *)(a1 + 88);
  if (v7 {
    || (dispatch_source_t v7 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, a2),
  }
        (*(void *)(a1 + 8_Block_object_dispose(va, 8) = v7) != 0LL))
  {
    dispatch_set_context(v7, (void *)a1);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 88), (dispatch_function_t)sub_10004A634);
    dispatch_activate(*(dispatch_object_t *)(a1 + 88));
  }

  dispatch_source_t v8 = *(dispatch_source_t *)(a1 + 5712);
  if (v8
    || (dispatch_source_t v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, a2),
        (*(void *)(a1 + 5712) = v8) != 0LL))
  {
    dispatch_set_context(v8, (void *)a1);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 5712), (dispatch_function_t)sub_10004A674);
    dispatch_activate(*(dispatch_object_t *)(a1 + 5712));
  }

  dispatch_source_t v9 = *(dispatch_source_t *)(a1 + 5768);
  if (v9 {
    || (dispatch_source_t v9 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, a2),
  }
        (*(void *)(a1 + 576_Block_object_dispose(va, 8) = v9) != 0LL))
  {
    dispatch_set_context(v9, (void *)a1);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 5768), (dispatch_function_t)sub_10004A684);
    dispatch_activate(*(dispatch_object_t *)(a1 + 5768));
  }

  if (!*(_DWORD *)(a1 + 104)
    && IOServiceAddInterestNotification( *(IONotificationPortRef *)(a1 + 96),  *(_DWORD *)(a1 + 24),  "IOGeneralInterest",  (IOServiceInterestCallback)nullsub_3,  (void *)a1,  (io_object_t *)(a1 + 104)))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: IOServiceAddInterestNotification failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  IONotificationPortSetDispatchQueue(*(IONotificationPortRef *)(a1 + 96), *(dispatch_queue_t *)(a1 + 64));
  if (Apple80211EventMonitoringInit2(*(void *)(a1 + 16), sub_10004A694, a1, *(void *)(a1 + 64)))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: Unable to init event monitoring",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 9LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_ASSOC_DONE failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 10LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_SCAN_DONE failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 1LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_POWER_CHANGED failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 2LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_SSID_CHANGED failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 3LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_BSSID_CHANGED failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 32LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_ROAMED failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 80LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_ROAM_STATUS failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 76LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_SUPPLICANT_EVENT failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 137LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_ROAM_SCAN_START failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 138LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_ROAM_SCAN_END failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 139LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_ROAM_PREP failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 4LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_LINK_CHANGED failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 5LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_MIC_ERROR_UCAST failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 6LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_MIC_ERROR_MCAST failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 7LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_INT_MIT_CHANGED failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 8LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_MODE_CHANGED failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 14LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_DECRYPTION_FAILURE failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 31LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_BGSCAN_NET_DISCOVERED failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 30LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_WIFI_DIRECT_GROUP_STARTED failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 12LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_STA_ARRIVE failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 13LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_STA_LEAVE failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 35LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_BLACKLIST_NETWORK failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 36LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_RESUME_SCAN failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 37LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_BGSCAN_SUSPENDED failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 38LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_BGSCAN_RESUMED failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 39LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_RSSI_CHANGED failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 169LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_LQM_TX_STATS failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 60LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_HOMECHAN_QUAL_CHANGED failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 145LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_WEIGHT_AVG_LQM_UPDATE failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 190LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_BT_COEX_MODE_STATS_EVENT failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 192LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_SIB_EVENT failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 191LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_LINK_DOWN_DEBOUNCE_FAILED failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 156LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_REALTIME_SESSION_NOTIFICATION failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 218LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_OBSS_MIT_NOTIFICATION failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 55LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_DRIVER_AVAILABLE failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 57LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_GAS_DONE failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 63LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_BGSCAN_CACHED_NETWORK_AVAILABLE failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 90LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_SCAN_BACKOFF_REPORT failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 79LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_DUMP_LOGS failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 83LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_RANGING_MEASUREMENT_DONE failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 89LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_TX_FAIL_HISTORY_EVENT failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 92LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_TX_INHIBIT failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 93LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_LOCAL_THERMAL_MITIGATION failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 140LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_BSS_STEERING_REQUEST_EVENT failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 141LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_SOFTAP_LPM failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 148LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_WIFI_NETWORK_INFO_UPDATE failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 143LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_ACTION_FRAME_EVENT failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 150LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_DPS failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 151LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_SLOW_WIFI failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 75LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_PRUNE failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 164LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_SLOWWIFI_PROBE_TRIGGER failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 165LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_SLOWWIFI_USERINPUT_TRIGGER failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 11LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_COUNTRY_CODE_CHANGED failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 176LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_LQM_CRASHTRACER failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 189LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_TE_CRITICAL_TRAFFIC_IND failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 180LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_BEACON_CACHE_UPDATED failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 196LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_TRIGGER_TTR failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (_os_feature_enabled_impl("WiFiManager", "Sensing")
    && Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 193LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_SENSING_DONE failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 199LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_COLOCATED_CACHE_EVENT failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 210LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_P2P_PEER_COUNTRY_CODE failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 217LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_ENV_BSS_INFO failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 239LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_NDD_REPORT failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 238LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_NDD_DONE failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_267;
  }

  if (Apple80211StartMonitoringEvent(*(void *)(a1 + 16), 240LL))
  {
    uint64_t v32 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: monitoring APPLE80211_M_SCAN_FWD_STATS_EVENT failed",  "WiFiDeviceScheduleWithQueue");
    }
LABEL_267:
    objc_autoreleasePoolPop(v32);
    CFTypeRef v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: exiting, Error: found",  "WiFiDeviceScheduleWithQueue");
    }
LABEL_98:
    objc_autoreleasePoolPop(v13);
    return;
  }

  sub_10011A384(*(void *)(a1 + 144), (uint64_t)sub_10004AD90, a1);
  sub_10011A390(*(void *)(a1 + 144), *(dispatch_queue_s **)(a1 + 64));
  if (*(void *)(a1 + 152)) {
    goto LABEL_102;
  }
  context.versioint n = 0LL;
  memset(&context.retain, 0, 24);
  context.info = (void *)a1;
  SCDynamicStoreRef v10 = SCDynamicStoreCreate(kCFAllocatorDefault, @"WiFiDevice", (SCDynamicStoreCallBack)sub_10004ADD8, &context);
  *(void *)(a1 + 152) = v10;
  if (!v10)
  {
    CFIndex v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: SCDynamicStoreCreate failed",  "WiFiDeviceScheduleWithQueue");
    }
    goto LABEL_101;
  }

  sub_10004B1E4(a1);
  if (!SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(a1 + 152), *(dispatch_queue_t *)(a1 + 64)))
  {
    uint64_t v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error setting dynamic store queue.",  "WiFiDeviceScheduleWithQueue");
    }
    objc_autoreleasePoolPop(v11);
  }

  if (!SCDynamicStoreSetDisconnectCallBack(*(void *)(a1 + 152), sub_10004B518))
  {
    CFIndex v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error subscribing to the dynamic store disconnect event.",  "WiFiDeviceScheduleWithQueue");
    }
LABEL_101:
    objc_autoreleasePoolPop(v12);
  }

void sub_100048B6C(uint64_t a1)
{
  if (*(void *)(a1 + 64)) {
    sub_100048BDC(a1);
  }
  if (*(void *)(a1 + 16))
  {
    Apple80211Close();
    *(void *)(a1 + 16) = 0LL;
  }

  unint64_t v2 = *(const void **)(a1 + 5920);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 5920) = 0LL;
  }

  uint64_t v3 = *(const void **)(a1 + 128);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  }

  *(_BYTE *)(a1 + 52) = 0;
  sub_100026D1C((const void *)a1);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 5784), *(const void **)(a1 + 112));
}

void sub_100048BDC(uint64_t a1)
{
  unint64_t v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: entering", "WiFiDeviceUnscheduleFromQueue");
  }
  objc_autoreleasePoolPop(v2);
  SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(a1 + 152), 0LL);
  sub_10011A384(*(void *)(a1 + 144), 0LL, 0LL);
  sub_10011A684(*(void *)(a1 + 144));
  uint64_t v3 = *(dispatch_source_s **)(a1 + 72);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(a1 + 72));
    *(void *)(a1 + 72) = 0LL;
  }

  CFNumberRef v4 = *(dispatch_source_s **)(a1 + 80);
  if (v4)
  {
    dispatch_source_cancel(v4);
    dispatch_release(*(dispatch_object_t *)(a1 + 80));
    *(void *)(a1 + 80) = 0LL;
  }

  dispatch_source_t v5 = *(dispatch_source_s **)(a1 + 88);
  if (v5)
  {
    dispatch_source_cancel(v5);
    dispatch_release(*(dispatch_object_t *)(a1 + 88));
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  }

  dispatch_source_t v6 = *(dispatch_source_s **)(a1 + 5712);
  if (v6)
  {
    dispatch_source_cancel(v6);
    dispatch_release(*(dispatch_object_t *)(a1 + 5712));
    *(void *)(a1 + 5712) = 0LL;
  }

  dispatch_source_t v7 = *(dispatch_source_s **)(a1 + 5768);
  if (v7)
  {
    dispatch_source_cancel(v7);
    dispatch_release(*(dispatch_object_t *)(a1 + 5768));
    *(void *)(a1 + 576_Block_object_dispose(va, 8) = 0LL;
  }

  IONotificationPortSetDispatchQueue(*(IONotificationPortRef *)(a1 + 96), 0LL);
  Apple80211EventMonitoringHalt(*(void *)(a1 + 16));
  uint64_t v8 = *(void *)(a1 + 176);
  if (v8) {
    sub_1001290AC(v8);
  }
  int v9 = *(char *)(a1 + 28);
  SCDynamicStoreRef v10 = objc_autoreleasePoolPush();
  if (v9 < 0)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Enter: %s:%d %ld \n",  "__WiFiDeviceDeleteHostApInterface",  12056,  CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784)));
    }
    objc_autoreleasePoolPop(v10);
    uint64_t v11 = sub_10004FC58(a1);
    if (v11)
    {
      CFIndex v12 = sub_100130810((uint64_t)v11);
      if (v12)
      {
        CFTypeRef v13 = v12;
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 5784), v12);
        CFIndex v14 = *(void (**)(uint64_t, const void *, void, void))(a1 + 5096);
        if (v14) {
          v14(a1, v13, *(void *)(a1 + 5104), 0LL);
        }
      }
    }

    SCDynamicStoreRef v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Exit: %s:%d %ld \n",  "__WiFiDeviceDeleteHostApInterface",  12071,  CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784)));
    }
  }

  else if (qword_100219F60)
  {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: HostAP is not supported",  "WiFiDeviceUnscheduleFromQueue",  v23,  v24);
  }

  objc_autoreleasePoolPop(v10);
  char v15 = *(_BYTE *)(a1 + 32);
  CFNumberRef v16 = objc_autoreleasePoolPush();
  if ((v15 & 1) != 0)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Enter: %s:%d %ld \n",  "__WiFiDeviceDeleteAwdlInterface",  12033,  CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784)));
    }
    objc_autoreleasePoolPop(v16);
    CFNumberRef v17 = *(const void **)(a1 + 5976);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(a1 + 5976) = 0LL;
    }

    CFIndex v18 = sub_10004FB0C(a1);
    if (v18)
    {
      unint64_t v19 = sub_100130810((uint64_t)v18);
      if (v19)
      {
        uint64_t v20 = v19;
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 5784), v19);
        uint64_t v21 = *(void (**)(uint64_t, const void *, void, void))(a1 + 5096);
        if (v21) {
          v21(a1, v20, *(void *)(a1 + 5104), 0LL);
        }
      }
    }

    CFNumberRef v16 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Exit: %s:%d %ld \n",  "__WiFiDeviceDeleteAwdlInterface",  12051,  CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784)));
    }
  }

  else if (qword_100219F60)
  {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AWDL is not supported",  "WiFiDeviceUnscheduleFromQueue",  v23,  v24);
  }

  objc_autoreleasePoolPop(v16);
  *(void *)(a1 + 64) = 0LL;
  CFNumberRef v22 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: exiting", "WiFiDeviceUnscheduleFromQueue");
  }
  objc_autoreleasePoolPop(v22);
}

__CFArray *sub_100048F14(uint64_t a1)
{
  uint64_t valuePtr = 0LL;
  cuint64_t f = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
  if (!cf) {
    return 0LL;
  }
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784));
  if (Count)
  {
    uint64_t v3 = (const void **)malloc(8 * Count);
    if (v3)
    {
      CFNumberRef v4 = v3;
      dispatch_source_t v5 = (const void **)malloc(8 * Count);
      if (v5)
      {
        dispatch_source_t v6 = v5;
        CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 5784), v4, v5);
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, Count, &kCFTypeArrayCallBacks);
        for (uint64_t i = 0LL; i != Count; ++i)
        {
          int v9 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          if (v9)
          {
            SCDynamicStoreRef v10 = v9;
            CFDictionaryAddValue(v9, @"VIRT_IF_NAME", v4[i]);
            CFTypeID v11 = CFGetTypeID(v6[i]);
            uint64_t v12 = sub_10012FE70();
            CFTypeRef v13 = cf;
            CFArrayAppendValue(Mutable, v10);
            CFRelease(v10);
          }
        }

        free(v6);
      }

      else
      {
        CFMutableDictionaryRef Mutable = 0LL;
      }

      free(v4);
      goto LABEL_14;
    }
  }

  else
  {
    char v15 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4 message:"No virtual interfaces found"];
    }
    objc_autoreleasePoolPop(v15);
  }

  CFMutableDictionaryRef Mutable = 0LL;
LABEL_14:
  CFRelease(cf);
  return Mutable;
}

uint64_t sub_1000490DC(uint64_t *a1, int a2)
{
  CFIndex v11 = 72LL;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = 0LL;
  if (sub_100128B54(a1[22], &v12, &v11, &v10) || *(_BYTE *)(v12 + 56) != 1)
  {
    uint64_t result = 1LL;
    if (a2 <= 0x39 && ((1LL << a2) & 0x200000040000600LL) != 0)
    {
      dispatch_source_t v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4, "Event %@ is not expected while there is no command pending", sub_1000492A4(a2), v9 message];
      }
      goto LABEL_14;
    }

    return result;
  }

  uint64_t result = 1LL;
  if (a2 > 56)
  {
    if (a2 == 57)
    {
      if (*(_DWORD *)v12 == 9) {
        return result;
      }
    }

    else if (a2 == 83)
    {
      if (*(_DWORD *)v12 == 12) {
        return result;
      }
    }

    else if (a2 != 193 || *(_DWORD *)v12 == 14)
    {
      return result;
    }

CFStringRef sub_1000492A4(int a1)
{
  if (a1 <= 130)
  {
    int v2 = a1 - 1;
    uint64_t result = @"APPLE80211_M_ASSOC_DONE";
    switch(v2)
    {
      case 0:
        uint64_t result = @"APPLE80211_M_POWER_CHANGED";
        break;
      case 1:
      case 4:
      case 5:
      case 6:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 32:
      case 33:
        return @"Unknown";
      case 2:
        uint64_t result = @"APPLE80211_M_BSSID_CHANGED";
        break;
      case 3:
        uint64_t result = @"APPLE80211_M_LINK_CHANGED";
        break;
      case 7:
        uint64_t result = @"APPLE80211_M_MODE_CHANGED";
        break;
      case 8:
        return result;
      case 9:
        uint64_t result = @"APPLE80211_M_SCAN_DONE";
        break;
      case 10:
        uint64_t result = @"APPLE80211_M_COUNTRY_CODE_CHANGED";
        break;
      case 11:
        uint64_t result = @"APPLE80211_M_STA_ARRIVE";
        break;
      case 12:
        uint64_t result = @"APPLE80211_M_STA_LEAVE";
        break;
      case 13:
        uint64_t result = @"APPLE80211_M_DECRYPTION_FAILURE";
        break;
      case 29:
        uint64_t result = @"APPLE80211_M_WIFI_DIRECT_GROUP_STARTED";
        break;
      case 30:
        uint64_t result = @"APPLE80211_M_BGSCAN_NET_DISCOVERED";
        break;
      case 31:
        uint64_t result = @"APPLE80211_M_ROAMED";
        break;
      case 34:
        uint64_t result = @"APPLE80211_M_BLACKLIST_NETWORK";
        break;
      case 35:
        uint64_t result = @"APPLE80211_M_RESUME_SCAN";
        break;
      case 36:
        uint64_t result = @"APPLE80211_M_BGSCAN_SUSPENDED";
        break;
      case 37:
        uint64_t result = @"APPLE80211_M_BGSCAN_RESUMED";
        break;
      case 38:
        uint64_t result = @"APPLE80211_M_RSSI_CHANGED";
        break;
      default:
        switch(@"APPLE80211_M_ASSOC_DONE")
        {
          case 'K':
            uint64_t result = @"APPLE80211_M_PRUNE";
            break;
          case 'L':
            uint64_t result = @"APPLE80211_M_SUPPLICANT_EVENT";
            break;
          case 'M':
          case 'N':
          case 'R':
          case 'T':
          case 'U':
          case 'V':
          case 'W':
          case 'X':
            return @"Unknown";
          case 'O':
            uint64_t result = @"APPLE80211_M_DUMP_LOGS";
            break;
          case 'P':
            uint64_t result = @"APPLE80211_M_ROAM_STATUS";
            break;
          case 'Q':
            uint64_t result = @"APPLE80211_M_LEAKY_AP_STATS";
            break;
          case 'S':
            uint64_t result = @"APPLE80211_M_RANGING_MEASUREMENT_DONE";
            break;
          case 'Y':
            uint64_t result = @"APPLE80211_M_TX_FAIL_HISTORY_EVENT";
            break;
          case 'Z':
            uint64_t result = @"APPLE80211_M_SCAN_BACKOFF_REPORT";
            break;
          default:
            switch(@"APPLE80211_M_ASSOC_DONE")
            {
              case '7':
                uint64_t result = @"APPLE80211_M_DRIVER_AVAILABLE";
                break;
              case '9':
                uint64_t result = @"APPLE80211_M_GAS_DONE";
                break;
              case '<':
                uint64_t result = @"APPLE80211_M_HOMECHAN_QUAL_CHANGED";
                break;
              case '=':
                uint64_t result = @"APPLE80211_M_POWER_STATS_UPDATE";
                break;
              case '?':
                uint64_t result = @"APPLE80211_M_BGSCAN_CACHED_NETWORK_AVAILABLE";
                break;
              default:
                return @"Unknown";
            }

            break;
        }

        break;
    }
  }

  else if (a1 > 179)
  {
    if (a1 > 209)
    {
      if (a1 > 237)
      {
        switch(a1)
        {
          case 238:
            return @"APPLE80211_M_NDD_DONE";
          case 239:
            return @"APPLE80211_M_NDD_REPORT";
          case 240:
            return @"APPLE80211_M_SCAN_FWD_STATS_EVENT";
        }
      }

      else
      {
        switch(a1)
        {
          case 210:
            return @"APPLE80211_M_P2P_PEER_COUNTRY_CODE";
          case 217:
            return @"APPLE80211_M_ENV_BSS_INFO";
          case 218:
            return @"APPLE80211_M_OBSS_MIT_NOTIFICATION";
        }
      }

      return @"Unknown";
    }

    else
    {
      switch(a1)
      {
        case 180:
          uint64_t result = @"APPLE80211_M_BEACON_CACHE_UPDATED";
          break;
        case 189:
          uint64_t result = @"APPLE80211_M_TE_CRITICAL_TRAFFIC_IND";
          break;
        case 190:
          uint64_t result = @"APPLE80211_M_BT_COEX_MODE_STATS_EVENT";
          break;
        case 191:
          uint64_t result = @"APPLE80211_M_LINK_DOWN_DEBOUNCE_FAILED";
          break;
        case 192:
          uint64_t result = @"APPLE80211_M_SIB_EVENT";
          break;
        case 193:
          uint64_t result = @"APPLE80211_M_SENSING_DONE";
          break;
        case 196:
          uint64_t result = @"APPLE80211_M_TRIGGER_TTR";
          break;
        case 199:
          uint64_t result = @"APPLE80211_M_COLOCATED_CACHE_EVENT";
          break;
        default:
          return @"Unknown";
      }
    }
  }

  else
  {
    switch(a1)
    {
      case 131:
        uint64_t result = @"APPLE80211_M_LSM_UPDATE";
        break;
      case 132:
        uint64_t result = @"APPLE80211_M_LOW_POWER_MODE";
        break;
      case 133:
        uint64_t result = @"APPLE80211_M_LPAS_STATE";
        break;
      case 134:
        uint64_t result = @"APPLE80211_M_TEMP_DISABLE_NETWORK";
        break;
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 142:
      case 144:
      case 146:
      case 147:
      case 149:
      case 152:
      case 153:
      case 154:
      case 155:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 168:
        return @"Unknown";
      case 140:
        uint64_t result = @"APPLE80211_M_BSS_STEERING_REQUEST_EVENT";
        break;
      case 141:
        uint64_t result = @"APPLE80211_M_SOFTAP_LPM";
        break;
      case 143:
        uint64_t result = @"APPLE80211_M_ACTION_FRAME_EVENT";
        break;
      case 145:
        uint64_t result = @"APPLE80211_M_WEIGHT_AVG_LQM_UPDATE";
        break;
      case 148:
        uint64_t result = @"APPLE80211_M_WIFI_NETWORK_INFO_UPDATE";
        break;
      case 150:
        uint64_t result = @"APPLE80211_M_DPS";
        break;
      case 151:
        uint64_t result = @"APPLE80211_M_SLOW_WIFI";
        break;
      case 156:
        uint64_t result = @"APPLE80211_M_REALTIME_SESSION_NOTIFICATION";
        break;
      case 164:
        uint64_t result = @"APPLE80211_M_SLOWWIFI_PROBE_TRIGGER";
        break;
      case 165:
        uint64_t result = @"APPLE80211_M_SLOWWIFI_USERINPUT_TRIGGER";
        break;
      case 166:
        uint64_t result = @"APPLE80211_M_SLOWWIFI_PROBE_RESULT";
        break;
      case 167:
        uint64_t result = @"APPLE80211_M_SLOWWIFI_USERINPUT_RESULT";
        break;
      case 169:
        uint64_t result = @"APPLE80211_M_LQM_TX_STATS";
        break;
      default:
        if (a1 != 176) {
          return @"Unknown";
        }
        uint64_t result = @"APPLE80211_M_LQM_CRASHTRACER";
        break;
    }
  }

  return result;
}

unint64_t sub_1000496AC(unsigned int a1)
{
  if (a1 > 0xF) {
    return 0xAAAAAAAAAAAAAAAALL;
  }
  else {
    return (unint64_t)*(&off_1001E3360 + (int)a1);
  }
}

CFMutableArrayRef sub_1000496CC(uint64_t a1, int a2)
{
  CFNumberRef v4 = *(const __CFArray **)(a1 + 5664);
  if (v4 && CFArrayGetCount(v4) || (CFMutableArrayRef result = sub_1000475A4((void *)a1), (_DWORD)result))
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 5664));
    if (Count < 1)
    {
      return 0LL;
    }

    else
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0LL;
      while (1)
      {
        int valuePtr = -1431655766;
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5664), v8);
        unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"CHANNELINFO_CH_NUM");
        if (Value)
        {
          CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
          if (valuePtr == a2)
          {
            CFIndex v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5664), v8);
            if (kCFBooleanTrue == CFDictionaryGetValue(v11, @"CHANNELINFO_DFS")) {
              break;
            }
          }
        }

        if (v7 == ++v8) {
          return 0LL;
        }
      }

      return (CFMutableArrayRef)1;
    }
  }

  return result;
}

CFMutableArrayRef sub_1000497C8(uint64_t a1, int a2)
{
  CFNumberRef v4 = *(const __CFArray **)(a1 + 5664);
  if (v4 && CFArrayGetCount(v4) || (CFMutableArrayRef result = sub_1000475A4((void *)a1), (_DWORD)result))
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 5664));
    if (Count < 1)
    {
      return 0LL;
    }

    else
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0LL;
      while (1)
      {
        int valuePtr = -1431655766;
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5664), v8);
        unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"CHANNELINFO_CH_NUM");
        if (Value)
        {
          CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
          if (valuePtr == a2) {
            break;
          }
        }

        if (v7 == ++v8) {
          return 0LL;
        }
      }

      return (CFMutableArrayRef)1;
    }
  }

  return result;
}

uint64_t sub_10004988C(uint64_t a1, int a2)
{
  CFNumberRef v4 = *(const __CFArray **)(a1 + 5664);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 5664));
  if (Count < 1) {
    return 1LL;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0LL;
  uint64_t v8 = 1LL;
  do
  {
    int valuePtr = -1431655766;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5664), v7);
    unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"CHANNELINFO_CH_NUM");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
      int v11 = valuePtr;
      if (valuePtr == a2)
      {
        unint64_t v12 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5664), v7);
        if (kCFBooleanTrue == CFDictionaryGetValue(v12, @"CHANNELINFO_40MHZ")) {
          uint64_t v8 = v8 | 2;
        }
        else {
          uint64_t v8 = v8;
        }
        int v11 = valuePtr;
      }

      if (v11 == a2)
      {
        CFTypeRef v13 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5664), v7);
        if (kCFBooleanTrue == CFDictionaryGetValue(v13, @"CHANNELINFO_80MHZ")) {
          uint64_t v8 = v8 | 4;
        }
        else {
          uint64_t v8 = v8;
        }
      }
    }

    ++v7;
  }

  while (v6 != v7);
  return v8;
}

uint64_t sub_1000499CC(uint64_t a1, uint64_t a2, int a3)
{
  if (a1)
  {
    uint64_t v3 = 1280LL;
    if (!a3) {
      uint64_t v3 = 2288LL;
    }
    int v4 = *(_DWORD *)(a1 + v3);
    if (v4)
    {
      unint64_t v5 = 0LL;
      int v6 = 0;
      uint64_t v7 = 1288LL;
      if (!a3) {
        uint64_t v7 = 2296LL;
      }
      uint64_t v8 = *(void *)(a1 + v7) - 1LL;
      uint64_t v9 = a1 + 312;
      uint64_t v10 = a1 + 1800;
      double v11 = 0.0;
      uint64_t result = 1LL;
      while (1)
      {
        if (v8 < 0) {
          uint64_t v8 = 29LL;
        }
        CFTypeRef v13 = (double *)(v9 + 32 * v8 + 24);
        if (v11 == 0.0
          || (a3 ? (CFIndex v14 = (double *)(v9 + 32 * v8 + 24)) : (CFIndex v14 = (double *)(v10 + 16 * v8 + 8)), v11 - *v14 <= 1.0))
        {
          if (a3)
          {
            int v6 = *(unsigned __int8 *)(v9 + 32 * v8) | (unsigned __int16)(*(_DWORD *)(v9 + 32 * v8 + 8) << 8) | (*(_DWORD *)(v9 + 32 * v8 + 16) << 16);
          }

          else
          {
            int v6 = *(char *)(v10 + 16 * v8);
            CFTypeRef v13 = (double *)(v10 + 16 * v8 + 8);
          }

          double v11 = *v13;
          *(_DWORD *)(a2 + 4 * v5) = v6;
          --v4;
          --v8;
          if (!v4) {
            return result;
          }
        }

        else
        {
          *(_DWORD *)(a2 + 4 * v5) = v6;
          double v11 = v11 + -1.0;
        }

        if (v5++ >= 0x1D) {
          return result;
        }
      }
    }

    return 1LL;
  }

  else
  {
    CFNumberRef v16 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null device", "WiFiDevicePrepareLqmHistoryArray");
    }
    objc_autoreleasePoolPop(v16);
    return 0LL;
  }

uint64_t sub_100049B28(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    CFNumberRef v17 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null device", "WiFiDevicePrepareTxRxHistoryArray");
    }
    goto LABEL_21;
  }

  if (!a2)
  {
    CFNumberRef v17 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: lqm null", "WiFiDevicePrepareTxRxHistoryArray");
    }
LABEL_21:
    objc_autoreleasePoolPop(v17);
    return 0LL;
  }

  int v2 = *(_DWORD *)(a1 + 3984);
  if (!v2) {
    return 1LL;
  }
  unint64_t v3 = 0LL;
  int v4 = 0;
  int v5 = 0;
  int v6 = 0;
  int v7 = 0;
  int v8 = 0;
  uint64_t v9 = a1 + 2304;
  uint64_t v10 = *(void *)(a1 + 3992) - 1LL;
  double v11 = (_DWORD *)(a2 + 360);
  double v12 = 0.0;
  do
  {
    if (v10 < 0) {
      uint64_t v10 = 29LL;
    }
    double v13 = *(double *)(v9 + 56 * v10 + 48);
    if (v12 == 0.0 || v12 - v13 <= 1.0)
    {
      CFIndex v14 = (int *)(v9 + 56 * v10);
      int v8 = *v14;
      *(v11 - 30) = *v14;
      int v6 = *((char *)v14 + 8);
      *(v11 - 60) = v6;
      int v7 = v14[4];
      v11[30] = v7;
      *double v11 = v6;
      int v5 = v14[8];
      v11[60] = v5;
      int v4 = *((char *)v14 + 40);
      v11[90] = v4;
      --v2;
      --v10;
    }

    else
    {
      *(v11 - 30) = v8;
      *(v11 - 60) = v6;
      v11[30] = v7;
      *double v11 = v6;
      v11[60] = v5;
      double v13 = v12 + -1.0;
      v11[90] = v4;
    }

    uint64_t result = 1LL;
    if (!v2) {
      break;
    }
    ++v11;
    double v12 = v13;
  }

  while (v3++ < 0x1D);
  return result;
}

uint64_t sub_100049CAC(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    CFIndex v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null device",  "WiFiDevicePrepareEncodedPerCoreRssiHistoryArray");
    }
    goto LABEL_20;
  }

  if (!a2)
  {
    CFIndex v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: lqm null",  "WiFiDevicePrepareEncodedPerCoreRssiHistoryArray");
    }
LABEL_20:
    objc_autoreleasePoolPop(v14);
    return 0LL;
  }

  int v2 = *(_DWORD *)(a1 + 1784);
  if (!v2) {
    return 1LL;
  }
  unint64_t v3 = 0LL;
  LOBYTE(v4) = 0;
  LOBYTE(v5) = 0;
  uint64_t v6 = a1 + 1296;
  uint64_t v7 = *(void *)(a1 + 1792) - 1LL;
  uint64_t v8 = a2 + 720;
  double v9 = 0.0;
  uint64_t result = 1LL;
  do
  {
    if (v7 < 0) {
      uint64_t v7 = 29LL;
    }
    double v11 = (double *)(v6 + 16 * v7);
    double v12 = v11[1];
    if (v9 == 0.0 || v9 - v12 <= 1.0)
    {
      int v5 = *(unsigned __int8 *)v11;
      int v4 = *((unsigned __int8 *)v11 + 1);
      *(_DWORD *)(v8 + 4 * v3) |= (v5 << 8) | (v4 << 16);
      --v2;
      --v7;
      if (!v2) {
        return result;
      }
    }

    else
    {
      *(_DWORD *)(v8 + 4 * v3) |= (unsigned __int16)(v5 << 8) | (v4 << 16);
      double v12 = v9 + -1.0;
    }

    double v9 = v12;
  }

  while (v3++ < 0x1D);
  return result;
}

uint64_t sub_100049E04(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      sub_100049EBC(a1, *(_DWORD *)(a1 + 4016));
      *(_DWORD *)(a2 + 840) = *(_DWORD *)(a1 + 4000);
      return 1LL;
    }

    int v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: lqm null", "WiFiDevicePrepareGatewayARPHistory");
    }
  }

  else
  {
    int v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null device", "WiFiDevicePrepareGatewayARPHistory");
    }
  }

  objc_autoreleasePoolPop(v5);
  return 0LL;
}

void sub_100049EBC(uint64_t a1, int a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (a1)
  {
    double v5 = Current;
    double v6 = *(double *)(a1 + 4008);
    if (v6 == 0.0)
    {
      *(_DWORD *)(a1 + 4016) = a2;
      *(double *)(a1 + 400_Block_object_dispose(va, 8) = v5;
      *(_DWORD *)(a1 + 4000) = 0;
    }

    else
    {
      unsigned int v7 = (v5 - v6);
      if (*(_DWORD *)(a1 + 4016) == 1)
      {
        if (!*(_DWORD *)(a1 + 4000)) {
          -[WiFiUsageMonitor addFaultEvent:forInterface:]( +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance"),  "addFaultEvent:forInterface:",  17LL,  *(void *)(a1 + 112));
        }
        if (v7 <= 1) {
          unsigned int v8 = 1;
        }
        else {
          unsigned int v8 = v7;
        }
        if (v8 <= 0x1F)
        {
          unsigned int v10 = (v8 + 3) & 0xFFFFFFFC;
          uint32x4_t v11 = (uint32x4_t)vdupq_n_s32(v8 - 1);
          int8x16_t v12 = (int8x16_t)(*(_DWORD *)(a1 + 4000) << v8);
          int32x4_t v13 = (int32x4_t)xmmword_10017F4B0;
          v14.i64[0] = 0x100000001LL;
          v14.i64[1] = 0x100000001LL;
          v15.i64[0] = 0x400000004LL;
          v15.i64[1] = 0x400000004LL;
          do
          {
            int8x16_t v16 = v12;
            uint32x4_t v17 = (uint32x4_t)v13;
            int8x16_t v12 = vorrq_s8(v12, (int8x16_t)vshlq_u32(v14, (uint32x4_t)v13));
            int32x4_t v13 = vaddq_s32(v13, v15);
            v10 -= 4;
          }

          while (v10);
          int8x16_t v18 = vbslq_s8((int8x16_t)vcgtq_u32(v17, v11), v16, v12);
          *(int8x8_t *)v18.i8 = vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
          int v9 = v18.i32[0] | v18.i32[1];
        }

        else
        {
          int v9 = -1;
        }
      }

      else if (v7 <= 0x1F)
      {
        int v9 = *(_DWORD *)(a1 + 4000) << v7;
      }

      else
      {
        int v9 = 0;
      }

      *(_DWORD *)(a1 + 4000) = v9;
      *(_DWORD *)(a1 + 4016) = a2;
      *(double *)(a1 + 400_Block_object_dispose(va, 8) = v5;
    }
  }

  else
  {
    unint64_t v19 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null device", "__WiFiDeviceUpdateGatewayARPHistory");
    }
    objc_autoreleasePoolPop(v19);
  }

void sub_10004A048(uint64_t a1, int a2, const void *a3, CFNumberRef a4)
{
  unsigned int valuePtr = a2;
  CFNumberRef v22 = a4;
  if (!a1)
  {
    uint64_t v20 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: NULL device",  "WiFiDeviceSetMinimumCommandPriority",  v21);
    }
    goto LABEL_31;
  }

  if (!a3)
  {
    uint64_t v20 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: NULL UUID",  "WiFiDeviceSetMinimumCommandPriority",  v21);
    }
    goto LABEL_31;
  }

  if (((unint64_t)a4 & 0x8000000000000000LL) != 0)
  {
    uint64_t v20 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: invalid priority (%ld)",  "WiFiDeviceSetMinimumCommandPriority",  a4);
    }
LABEL_31:
    objc_autoreleasePoolPop(v20);
    return;
  }

  CFNumberRef v7 = sub_10004A344((CFNumberRef)a1, a3, a2);
  if (v7 != a4)
  {
    CFNumberRef v8 = v7;
    CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v9)
    {
      CFNumberRef v10 = v9;
      unsigned int Value = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 200), a3);
      if (Value)
      {
        CFMutableDictionaryRef Mutable = Value;
        CFRetain(Value);
      }

      else
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 200), a3, Mutable);
        if (!Mutable)
        {
          CFNumberRef v19 = v10;
LABEL_23:
          CFRelease(v19);
          return;
        }
      }

      CFNumberRef v13 = sub_10004A344((CFNumberRef)a1, 0LL, valuePtr);
      if (a4)
      {
        CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &v22);
        if (!v14)
        {
LABEL_21:
          CFRelease(Mutable);
          CFRelease(v10);
          if (!v14) {
            return;
          }
          CFNumberRef v19 = v14;
          goto LABEL_23;
        }

        CFDictionarySetValue(Mutable, v10, v14);
      }

      else
      {
        CFDictionaryRemoveValue(Mutable, v10);
        if (!CFDictionaryGetCount(Mutable)) {
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 200), a3);
        }
        CFNumberRef v14 = 0LL;
      }

      int32x4_t v15 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "Updated minimum command queue priority for UUID '%@' (%ld -> %ld, type=%@)", a3, v8, v22, sub_1000496AC(valuePtr) message];
      }
      objc_autoreleasePoolPop(v15);
      CFNumberRef v16 = sub_10004A344((CFNumberRef)a1, 0LL, valuePtr);
      if (v13 != v16)
      {
        CFNumberRef v17 = v16;
        int8x16_t v18 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "Updated prevailing minimum command queue priority (%ld -> %ld, type=%@)", v13, v17, sub_1000496AC(valuePtr) message];
        }
        objc_autoreleasePoolPop(v18);
        sub_1001291CC(*(void *)(a1 + 176));
      }

      goto LABEL_21;
    }
  }

CFNumberRef sub_10004A344(CFNumberRef result, const void *a2, int a3)
{
  int valuePtr = a3;
  uint64_t v17 = 0LL;
  if (result)
  {
    CFNumberRef v4 = result;
    uint64_t result = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (result)
    {
      CFNumberRef v5 = result;
      double v6 = (const __CFDictionary *)*((void *)v4 + 25);
      if (a2)
      {
        unsigned int Value = (const __CFDictionary *)CFDictionaryGetValue(v6, a2);
        if (Value)
        {
          CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(Value, v5);
          if (v8) {
            CFNumberGetValue(v8, kCFNumberCFIndexType, &v17);
          }
        }
      }

      else
      {
        CFIndex Count = CFDictionaryGetCount(v6);
        if (Count)
        {
          uint64_t v10 = Count;
          __chkstk_darwin();
          int8x16_t v12 = (const void **)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
          memset(v12, 170, v11);
          CFDictionaryGetKeysAndValues(*((CFDictionaryRef *)v4 + 25), v12, 0LL);
          if (v10 >= 1)
          {
            uint64_t v13 = 0LL;
            do
            {
              CFNumberRef v14 = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)v4 + 25), *v12);
              if (v14)
              {
                int32x4_t v15 = (const __CFNumber *)CFDictionaryGetValue(v14, v5);
                if (v15)
                {
                  uint64_t v16 = 0LL;
                  CFNumberGetValue(v15, kCFNumberCFIndexType, &v16);
                  if (v16 > v13) {
                    uint64_t v13 = v16;
                  }
                  uint64_t v17 = v13;
                }
              }

              ++v12;
              --v10;
            }

            while (v10);
          }
        }
      }

      CFRelease(v5);
      return (CFNumberRef)v17;
    }
  }

  return result;
}

void sub_10004A4BC(uint64_t a1)
{
  if (a1)
  {
    int v2 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      unint64_t v3 = *(const __CFString **)(a1 + 5840);
      if (!v3) {
        unint64_t v3 = @"Unknown";
      }
      [(id)qword_100219F60 WFLog:3, "%s: WFMacRandomisation : id mac address private : <%d> for network ? <%@>", "__WiFiDevicePrimaryTimerCallback", *(unsigned __int8 *)(a1 + 5864), v3 message];
    }

    objc_autoreleasePoolPop(v2);
    CFNumberRef v4 = *(void (**)(uint64_t, void, void))(a1 + 4400);
    if (v4) {
      v4(a1, *(void *)(a1 + 112), *(void *)(a1 + 4408));
    }
  }

void sub_10004A568(uint64_t a1)
{
  if (!sub_10003E7A4(a1))
  {
    sub_100027988(a1, 0, 0LL, *(unsigned int *)(a1 + 5872), 0LL, 0);
    int v2 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      unint64_t v3 = *(const __CFString **)(a1 + 5840);
      if (!v3) {
        unint64_t v3 = @"Unknown";
      }
      [(id)qword_100219F60 WFLog:3, "%s: WFMacRandomisation : is mac address private : <%d> for network ? <%@>", "__WiFiDeviceRoutableTimerCallback", *(unsigned __int8 *)(a1 + 5864), v3 message];
    }

    objc_autoreleasePoolPop(v2);
    CFNumberRef v4 = *(void (**)(uint64_t, void, void))(a1 + 4416);
    if (v4) {
      v4(a1, *(void *)(a1 + 112), *(void *)(a1 + 4424));
    }
  }

CFMutableArrayRef sub_10004A634(void *a1)
{
  CFMutableArrayRef result = sub_1000475A4(a1);
  unint64_t v3 = (uint64_t (*)(void *, void, void))a1[679];
  if (v3) {
    return (CFMutableArrayRef)v3(a1, a1[14], a1[680]);
  }
  return result;
}

void sub_10004A674(uint64_t a1)
{
  if (a1) {
    sub_10004F26C(a1, 1);
  }
}

void sub_10004A684(uint64_t a1)
{
  if (a1) {
    sub_10004F358(a1);
  }
}

void sub_10004A694(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, CFTypeID a6)
{
  size_t v11 = objc_autoreleasePoolPush();
  if (a6)
  {
    int8x16_t v12 = (void *)sub_10003AFF4((uint64_t)"__WiFiDeviceEventCallback");
    *(void *)(a6 + 5912) = 0LL;
    uint64_t v13 = *(const void **)(a6 + 5920);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(a6 + 5920) = 0LL;
    }

    if (sub_1000490DC((uint64_t *)a6, a3))
    {
      if ((int)a3 <= 136)
      {
        switch((int)a3)
        {
          case 1:
            sub_1000590EC(a6, *(const void **)(a6 + 112));
            goto LABEL_33;
          case 2:
          case 5:
          case 6:
          case 7:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 33:
          case 34:
            goto LABEL_109;
          case 3:
            sub_100059070(a6, *(void *)(a6 + 112));
LABEL_33:
            sub_10004B73C(a6);
            goto LABEL_109;
          case 4:
            sub_100058248(a6, *(const void **)(a6 + 112), a4);
            goto LABEL_109;
          case 8:
            sub_100057500(a6, *(void *)(a6 + 112), a1);
            sub_1000591BC((void *)a6, *(void *)(a6 + 112), a1);
            goto LABEL_109;
          case 9:
            sub_100058180(a6, *(void *)(a6 + 112), a4, a1);
            goto LABEL_109;
          case 10:
            sub_100055F44(a6, *(void *)(a6 + 112), a4, 0LL, a1);
            goto LABEL_109;
          case 11:
            sub_10005B77C((void *)a6, *(void *)(a6 + 112));
            goto LABEL_109;
          case 12:
            sub_100059374(a6, *(void *)(a6 + 112), (uint64_t)a4);
            goto LABEL_109;
          case 13:
            sub_100059444(a6, *(void *)(a6 + 112), (uint64_t)a4);
            goto LABEL_109;
          case 14:
            CFNumberRef v19 = *(void (**)(CFTypeID, uint64_t, uint64_t))(a6 + 4368);
            if (!v19) {
              goto LABEL_109;
            }
            uint64_t v20 = *(void *)(a6 + 112);
            uint64_t v21 = *(void *)(a6 + 4376);
            goto LABEL_103;
          case 30:
            sub_10004565C(a6, *(void *)(a6 + 112), a1);
            goto LABEL_109;
          case 31:
            sub_100059280(a6, *(void *)(a6 + 112), a4);
            goto LABEL_109;
          case 32:
            CFNumberRef v19 = *(void (**)(CFTypeID, uint64_t, uint64_t))(a6 + 4464);
            if (!v19) {
              goto LABEL_109;
            }
            uint64_t v20 = *(void *)(a6 + 112);
            uint64_t v21 = *(void *)(a6 + 4472);
            goto LABEL_103;
          case 35:
            CFNumberRef v19 = *(void (**)(CFTypeID, uint64_t, uint64_t))(a6 + 4480);
            if (!v19) {
              goto LABEL_109;
            }
            uint64_t v20 = *(void *)(a6 + 112);
            uint64_t v21 = *(void *)(a6 + 4488);
            goto LABEL_103;
          case 36:
            CFNumberRef v19 = *(void (**)(CFTypeID, uint64_t, uint64_t))(a6 + 4496);
            if (!v19) {
              goto LABEL_109;
            }
            uint64_t v20 = *(void *)(a6 + 112);
            uint64_t v21 = *(void *)(a6 + 4504);
            goto LABEL_103;
          case 37:
            CFNumberRef v14 = *(void (**)(CFTypeID, uint64_t, uint64_t, const __CFDictionary *))(a6 + 4824);
            if (!v14) {
              goto LABEL_109;
            }
            uint64_t v15 = *(void *)(a6 + 112);
            uint64_t v17 = *(const __CFDictionary **)(a6 + 4832);
            CFTypeID v18 = a6;
            uint64_t v16 = 1LL;
            goto LABEL_55;
          case 38:
            CFNumberRef v14 = *(void (**)(CFTypeID, uint64_t, uint64_t, const __CFDictionary *))(a6 + 4824);
            if (!v14) {
              goto LABEL_109;
            }
            uint64_t v15 = *(void *)(a6 + 112);
            uint64_t v17 = *(const __CFDictionary **)(a6 + 4832);
            CFTypeID v18 = a6;
            uint64_t v16 = 0LL;
            goto LABEL_55;
          case 39:
            sub_10005951C((_BYTE *)a6, *(void *)(a6 + 112), a4);
            goto LABEL_109;
          default:
            switch((int)a3)
            {
              case 'K':
                sub_10005B6E8(a6, *(void *)(a6 + 112), (uint64_t)a4);
                break;
              case 'L':
                if (a4)
                {
                  CFNumberRef v14 = *(void (**)(CFTypeID, uint64_t, uint64_t, const __CFDictionary *))(a6 + 4592);
                  if (v14)
                  {
                    uint64_t v15 = *(void *)(a6 + 112);
                    uint64_t v16 = *(void *)(a6 + 4600);
                    goto LABEL_99;
                  }
                }

                break;
              case 'M':
              case 'N':
              case 'R':
              case 'T':
              case 'U':
              case 'V':
              case 'W':
              case 'X':
              case '[':
                goto LABEL_109;
              case 'O':
                if ((_DWORD)a5 == 140 && [(id)qword_100219F60 getLogLevelEnable] == (id)1) {
                  sub_10013EA34((_BYTE *)a4 + 12);
                }
                break;
              case 'P':
                sub_100058E68(a6, *(const void **)(a6 + 112), a4);
                break;
              case 'Q':
                sub_10005B034(a6, *(void *)(a6 + 112), (uint64_t)a4);
                break;
              case 'S':
                sub_100046714((uint64_t *)a6, *(void *)(a6 + 112), a4, a1);
                break;
              case 'Y':
                sub_10005B0AC(a6, *(void *)(a6 + 112), (uint64_t)a4);
                break;
              case 'Z':
                sub_10005AFC8(a6, *(void *)(a6 + 112), a4);
                break;
              case '\\':
                sub_1000319A8(*(_BYTE *)a4 != 0);
                break;
              default:
                switch((int)a3)
                {
                  case '7':
                    sub_10005A55C(a6, *(const void **)(a6 + 112), a4);
                    break;
                  case '9':
                    sub_100057ABC((void *)a6, *(void *)(a6 + 112), a4, 0LL, a1);
                    break;
                  case '<':
                    sub_100059F74((void *)a6, a4);
                    break;
                  case '?':
                    sub_10005AE80(a6, *(void *)(a6 + 112), a4);
                    break;
                  default:
                    goto LABEL_109;
                }

                break;
            }

            goto LABEL_109;
        }
      }

      if ((int)a3 > 179)
      {
        if ((int)a3 > 216)
        {
          if ((int)a3 <= 237)
          {
            if ((_DWORD)a3 == 217)
            {
              CFNumberRef v14 = *(void (**)(CFTypeID, uint64_t, uint64_t, const __CFDictionary *))(a6 + 5560);
              if (v14)
              {
                uint64_t v15 = *(void *)(a6 + 112);
                uint64_t v17 = *(const __CFDictionary **)(a6 + 5568);
                CFTypeID v18 = a6;
                uint64_t v16 = (uint64_t)a4;
LABEL_55:
                v14(v18, v15, v16, v17);
              }
            }

            else if ((_DWORD)a3 == 218)
            {
              sub_10005A4D0(a6, *(void *)(a6 + 112), (uint64_t)a4);
            }
          }

          else if ((a3 - 238) >= 2)
          {
            if ((_DWORD)a3 == 240) {
              sub_10005BF8C(a6, *(void *)(a6 + 112), (uint64_t)a4);
            }
          }

          else
          {
            sub_10005BEF0(a6, *(void *)(a6 + 112), (uint64_t)a4, a5, a3);
          }
        }

        else
        {
          switch((int)a3)
          {
            case 180:
              sub_10005BC34(a6, *(void *)(a6 + 112), (uint64_t)a4);
              break;
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 188:
            case 194:
            case 195:
            case 197:
            case 198:
              break;
            case 189:
              CFNumberRef v14 = *(void (**)(CFTypeID, uint64_t, uint64_t, const __CFDictionary *))(a6 + 5416);
              if (v14)
              {
                uint64_t v15 = *(void *)(a6 + 112);
                uint64_t v16 = *(void *)(a6 + 5424);
LABEL_99:
                CFTypeID v18 = a6;
                uint64_t v17 = a4;
                goto LABEL_55;
              }

              break;
            case 190:
              sub_10005A1B0(a6, *(void *)(a6 + 112), (uint64_t)a4);
              break;
            case 191:
              CFNumberRef v19 = *(void (**)(CFTypeID, uint64_t, uint64_t))(a6 + 4904);
              if (v19)
              {
                uint64_t v20 = *(void *)(a6 + 112);
                uint64_t v21 = *(void *)(a6 + 4912);
LABEL_103:
                v19(a6, v20, v21);
              }

              break;
            case 192:
              sub_10005A23C(a6, *(void *)(a6 + 112), (uint64_t)a4);
              break;
            case 193:
              sub_100057FE0(a6, *(void *)(a6 + 112), a4, a1);
              break;
            case 196:
              sub_10005BCD0(a6, *(void *)(a6 + 112), (uint64_t)a4);
              break;
            case 199:
              sub_10005BD6C(a6, *(void *)(a6 + 112), a4);
              break;
            default:
              if ((_DWORD)a3 == 210) {
                sub_10005BE68(a6, *(void *)(a6 + 112), (uint64_t)a4);
              }
              break;
          }
        }
      }

      else
      {
        switch((int)a3)
        {
          case 137:
            if (a4)
            {
              CFNumberRef v14 = *(void (**)(CFTypeID, uint64_t, uint64_t, const __CFDictionary *))(a6 + 4528);
              if (v14)
              {
                uint64_t v15 = *(void *)(a6 + 112);
                uint64_t v16 = *(void *)(a6 + 4536);
                goto LABEL_99;
              }
            }

            break;
          case 138:
            if (a4)
            {
              CFNumberRef v14 = *(void (**)(CFTypeID, uint64_t, uint64_t, const __CFDictionary *))(a6 + 4544);
              if (v14)
              {
                uint64_t v15 = *(void *)(a6 + 112);
                uint64_t v16 = *(void *)(a6 + 4552);
                goto LABEL_99;
              }
            }

            break;
          case 139:
            if (a4)
            {
              CFNumberRef v14 = *(void (**)(CFTypeID, uint64_t, uint64_t, const __CFDictionary *))(a6 + 4560);
              if (v14)
              {
                uint64_t v15 = *(void *)(a6 + 112);
                uint64_t v16 = *(void *)(a6 + 4568);
                goto LABEL_99;
              }
            }

            break;
          case 140:
            sub_10005B138(a6, *(void *)(a6 + 112), (uint64_t)a4);
            break;
          case 141:
            CFNumberRef v22 = *(void (**)(CFTypeID, void, const __CFDictionary *, void, void))(a6 + 5272);
            if (v22) {
              v22(a6, *(void *)(a6 + 112), a4, 0LL, *(void *)(a6 + 5280));
            }
            break;
          case 142:
          case 144:
          case 146:
          case 147:
          case 149:
          case 152:
          case 153:
          case 154:
          case 155:
          case 157:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
          case 163:
          case 166:
          case 167:
          case 168:
            break;
          case 143:
            if (a4)
            {
              CFNumberRef v14 = *(void (**)(CFTypeID, uint64_t, uint64_t, const __CFDictionary *))(a6 + 5208);
              if (v14)
              {
                uint64_t v15 = *(void *)(a6 + 112);
                uint64_t v16 = *(void *)(a6 + 5216);
                goto LABEL_99;
              }
            }

            break;
          case 145:
            sub_10005A124(a6, *(void *)(a6 + 112), (uint64_t)a4);
            break;
          case 148:
            if (a5 > 0x2B)
            {
              sub_10005B1D8(a6, *(void *)(a6 + 112), (uint64_t)a4);
            }

            else
            {
              uint64_t v23 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:3 message:"WiFi Network Info eventdata len mismatch\n"];
              }
              objc_autoreleasePoolPop(v23);
            }

            break;
          case 150:
            sub_10005B42C(a6, *(void *)(a6 + 112), (uint64_t)a4);
            break;
          case 151:
            sub_10005B4E8(a6, *(void *)(a6 + 112), a4);
            break;
          case 156:
            sub_10005A2C8(a6, *(void *)(a6 + 112), a4);
            break;
          case 164:
            sub_10005B5B0(a6, *(void *)(a6 + 112), (uint64_t)a4);
            break;
          case 165:
            sub_10005B64C(a6, *(void *)(a6 + 112), (uint64_t)a4);
            break;
          case 169:
            sub_100059EE8(a6, *(void *)(a6 + 112), (uint64_t)a4);
            break;
          default:
            if ((_DWORD)a3 == 176) {
              sub_10005BA58(a6, (uint64_t)a4);
            }
            break;
        }
      }
    }

LABEL_109:
  }

  objc_autoreleasePoolPop(v11);
}

void sub_10004AD90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 112);
  CFNumberRef v8 = (const void *)sub_10003BEE4(a1);
  sub_100057040(a4, v7, v8, a3, a2);
}

void sub_10004ADD8(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  uint64_t v23 = a1;
  CFArrayRef v22 = a2;
  uint64_t v21 = a3;
  if (a2)
  {
    CFIndex Count = CFArrayGetCount(v22);
    uint64_t v19 = v21;
    if (v21)
    {
      for (CFIndex i = 0LL; i < Count; ++i)
      {
        CFTypeRef cf1 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        CFTypeRef cf1 = CFArrayGetValueAtIndex(v22, i);
        if (sub_10005C230(cf1))
        {
          if (CFEqual(cf1, (CFTypeRef)qword_1002198A8) || CFEqual(cf1, (CFTypeRef)qword_1002198B0))
          {
            if (sub_10003E534(v19) == 1)
            {
              dispatch_source_set_timer( *(dispatch_source_t *)(v19 + 72),  0xFFFFFFFFFFFFFFFFLL,  0xFFFFFFFFFFFFFFFFLL,  0LL);
              uint64_t v5 = v19;
              double v6 = (const void *)sub_100043E8C(v19);
              sub_10003EC6C(v5, v6, 482LL, 0LL, (uint64_t)kCFBooleanTrue);
              if (*(void *)(v19 + 5048)) {
                (*(void (**)(uint64_t, void, void))(v19 + 5048))( v19,  *(void *)(v19 + 112),  *(void *)(v19 + 5056));
              }
            }

            else
            {
              uint64_t v7 = v19;
              CFNumberRef v8 = (const void *)sub_100043E8C(v19);
              sub_10003EC6C(v7, v8, 482LL, 0LL, (uint64_t)kCFBooleanFalse);
            }

            CFNumberRef v9 = +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance");
            BOOL v10 = sub_10003E534(v19) != 0;
            -[WiFiUsageMonitor notifyInterfaceRankingState:forInterface:]( v9,  "notifyInterfaceRankingState:forInterface:",  v10,  sub_100043E8C(v19));
          }

          else
          {
            CFRange v15 = CFStringFind((CFStringRef)cf1, kSCEntNetInterfaceActiveDuringSleepSupported, 0LL);
            if (v15.location == -1)
            {
              CFRange v14 = CFStringFind((CFStringRef)cf1, @"IPConfigurationBusy", 0LL);
              if (v14.location == -1)
              {
                CFRange v13 = CFStringFind((CFStringRef)cf1, kSCEntNetIPv4RouterARPAlive, 0LL);
                if (v13.location == -1
                  && (CFRange v12 = CFStringFind((CFStringRef)cf1, kSCEntNetIPv4RouterARPFailure, 0LL), v12.location == -1))
                {
                  sub_10003ED68(v19, (const __CFString *)cf1);
                  sub_10005C790(v19, (const __CFString *)cf1);
                }

                else
                {
                  unsigned int v11 = -1431655766;
                  if (sub_10005C70C((const __CFString *)cf1, (int *)&v11))
                  {
                    sub_100049EBC(v19, v11);
                    if (*(void *)(v19 + 5064)) {
                      (*(void (**)(uint64_t, void, void, void))(v19 + 5064))( v19,  *(void *)(v19 + 112),  *(void *)(v19 + 5072),  v11);
                    }
                  }
                }
              }

              else
              {
                sub_10005C4D4(v19, (CFStringRef)cf1);
              }
            }

            else
            {
              sub_10005C270(v19, (CFStringRef)cf1);
            }
          }

          int v17 = 0;
        }

        else
        {
          CFNumberRef v4 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Not a valid CFString",  "__WiFiDeviceDynamicStoreCallback");
          }
          objc_autoreleasePoolPop(v4);
          int v17 = 7;
        }
      }

      int v17 = 5;
    }

    else
    {
      unint64_t v3 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4 message:"__WiFiDeviceDynamicStoreCallback: device reference is NULL"];
      }
      objc_autoreleasePoolPop(v3);
    }
  }

void sub_10004B1E4(uint64_t a1)
{
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  kSCCompAnyRegex,  kSCEntNetIPv4);
  CFStringRef v3 = SCDynamicStoreKeyCreateNetworkServiceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  kSCCompAnyRegex,  kSCEntNetIPv6);
  CFStringRef value = SCDynamicStoreKeyCreateNetworkInterfaceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  *(CFStringRef *)(a1 + 112),  kSCEntNetIPv6);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  kSCCompAnyRegex,  kSCEntNetInterfaceActiveDuringSleepSupported);
  CFStringRef v5 = SCDynamicStoreKeyCreateNetworkInterfaceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  kSCCompAnyRegex,  kSCEntNetIPv4RouterARPAlive);
  CFStringRef v6 = SCDynamicStoreKeyCreateNetworkInterfaceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  kSCCompAnyRegex,  kSCEntNetIPv4RouterARPFailure);
  CFStringRef v7 = SCDynamicStoreKeyCreateNetworkInterfaceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  *(CFStringRef *)(a1 + 112),  @"IPConfigurationBusy");
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  CFNumberRef v9 = Mutable;
  if (Mutable)
  {
    if (qword_1002198A8) {
      CFArrayAppendValue(Mutable, (const void *)qword_1002198A8);
    }
    if (qword_1002198B0) {
      CFArrayAppendValue(v9, (const void *)qword_1002198B0);
    }
    BOOL v10 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    unsigned int v11 = v10;
    if (v10)
    {
      if (NetworkServiceEntity) {
        CFArrayAppendValue(v10, NetworkServiceEntity);
      }
      if (v3) {
        CFArrayAppendValue(v11, v3);
      }
      if (NetworkInterfaceEntity)
      {
        CFArrayAppendValue(v11, NetworkInterfaceEntity);
        sub_10005C270(a1, 0LL);
      }

      if (v7)
      {
        CFArrayAppendValue(v11, v7);
        sub_10005C4D4(a1, 0LL);
      }

      if (v5) {
        CFArrayAppendValue(v11, v5);
      }
      if (v6) {
        CFArrayAppendValue(v11, v6);
      }
      if (value) {
        CFArrayAppendValue(v11, value);
      }
      if (CFArrayGetCount(v9) >= 1 && CFArrayGetCount(v11) >= 1)
      {
        SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 152), v9, v11);
        CFRange v12 = *(const void **)(a1 + 160);
        if (v12)
        {
          CFRelease(v12);
          *(void *)(a1 + 160) = 0LL;
        }

        CFRange v13 = *(const void **)(a1 + 168);
        if (v13)
        {
          CFRelease(v13);
          *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0LL;
        }

        *(void *)(a1 + 160) = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0LL, v9);
        *(void *)(a1 + 16_Block_object_dispose(va, 8) = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0LL, v11);
      }
    }

    if (NetworkServiceEntity) {
      goto LABEL_29;
    }
  }

  else
  {
    unsigned int v11 = 0LL;
    if (NetworkServiceEntity) {
LABEL_29:
    }
      CFRelease(NetworkServiceEntity);
  }

  if (v3) {
    CFRelease(v3);
  }
  if (NetworkInterfaceEntity) {
    CFRelease(NetworkInterfaceEntity);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (value) {
    CFRelease(value);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v9) {
    CFRelease(v9);
  }
}

void sub_10004B518(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10004B1E4(a2);
    sub_10004B73C(a2);
  }

  else
  {
    CFStringRef v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4 message:"Cannot reconnect to the dynamic store - info is NULL"];
    }
    objc_autoreleasePoolPop(v3);
  }

void sub_10004B57C(uint64_t *a1)
{
  CFIndex v7 = 72LL;
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = 0LL;
  if (!sub_100128B54(a1[22], &v8, &v7, &v6) && *(_BYTE *)(v8 + 56) == 1)
  {
    int v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: Flushing out pending command %@", "__WiFiDeviceCommandAbortTimerCallback", sub_1000496AC(*(_DWORD *)v8) message];
    }
    objc_autoreleasePoolPop(v2);
    switch(*(_DWORD *)v8)
    {
      case 0:
        sub_100055F44((uint64_t)a1, a1[14], 0LL, 0LL, 4294963391LL);
        return;
      case 1:
        sub_100058180((uint64_t)a1, a1[14], 0LL, 4294963391LL);
        sub_10011B3D4(a1[18]);
        return;
      case 2:
      case 7:
      case 8:
      case 0xD:
      case 0xF:
        goto LABEL_11;
      case 3:
        sub_100057500((uint64_t)a1, *(void *)(v8 + 8), 4294963391LL);
        return;
      case 4:
      case 6:
        CFStringRef v3 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v8 + 16);
        if (!v3) {
          goto LABEL_11;
        }
        uint64_t v4 = *(void *)(v8 + 8);
        uint64_t v5 = *(void *)(v8 + 24);
        break;
      case 5:
        sub_10004565C((uint64_t)a1, *(void *)(v8 + 8), 4294963391LL);
        return;
      case 9:
        sub_100057ABC(a1, *(void *)(v8 + 8), 0LL, 0LL, 4294963391LL);
        return;
      case 0xA:
      case 0xB:
        CFStringRef v3 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v8 + 24);
        if (!v3) {
          goto LABEL_11;
        }
        uint64_t v4 = *(void *)(v8 + 8);
        uint64_t v5 = *(void *)(v8 + 32);
        break;
      case 0xC:
        sub_100046714(a1, *(void *)(v8 + 8), 0LL, 4294963391LL);
        return;
      case 0xE:
        sub_100057FE0((uint64_t)a1, *(void *)(v8 + 8), 0LL, 4294963391LL);
        return;
      default:
        return;
    }

    v3(a1, v4, 4294963391LL, v5);
LABEL_11:
    sub_10004F9BC((uint64_t)a1);
  }

void sub_10004B73C(uint64_t a1)
{
  CFDictionaryRef theDict = 0LL;
  if (a1 && *(void *)(a1 + 16) && *(void *)(a1 + 112))
  {
    for (int i = 6; ; --i)
    {
      InfoCFDictionaryRef Copy = Apple80211GetInfoCopy();
      if (InfoCopy != -3905 && InfoCopy != 61 && InfoCopy != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
  }

uint64_t sub_10004B9C0(uint64_t a1)
{
  return *(_BYTE *)(a1 + 32) & 1;
}

uint64_t sub_10004B9CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 28) >> 7;
}

void sub_10004B9D8(uint64_t a1)
{
  if (a1) {
    int v2 = *(const void **)(a1 + 112);
  }
  else {
    int v2 = 0LL;
  }
  CFStringRef v3 = sub_100040538(a1, v2);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (void *)sub_10003AFF4((uint64_t)"__copyAirPortService");
    uint64_t v6 = SCPreferencesCreate(0LL, @"WIFID-DEVICE", 0LL);
    if (v6)
    {
      CFIndex v7 = v6;
      if (sub_10003A25C(v6))
      {
        unint64_t v8 = SCNetworkSetCopyCurrent(v7);
        CFNumberRef v9 = v8;
        if (v8)
        {
          BOOL v10 = SCNetworkSetCopyServices(v8);
          if (v10)
          {
            unsigned int v11 = v10;
            CFIndex Count = CFArrayGetCount(v10);
            if (Count >= 1)
            {
              CFIndex v13 = Count;
              CFTypeID v30 = v4;
              CFRange v14 = v5;
              CFIndex v15 = 0LL;
              while (1)
              {
                ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v11, v15);
                Interface = SCNetworkServiceGetInterface(ValueAtIndex);
                InterfaceType = SCNetworkInterfaceGetInterfaceType(Interface);
                if (InterfaceType)
                {
                  if (CFStringCompare(InterfaceType, kSCNetworkInterfaceTypeIEEE80211, 0LL) == kCFCompareEqualTo) {
                    break;
                  }
                }

                if (v13 == ++v15) {
                  goto LABEL_14;
                }
              }

              BSDName = SCNetworkInterfaceGetBSDName(Interface);
              if (!a1)
              {
LABEL_14:
                uint64_t v19 = 0LL;
                uint64_t v5 = v14;
                uint64_t v4 = v30;
                goto LABEL_41;
              }

              uint64_t v19 = 0LL;
              if (BSDName)
              {
                uint64_t v21 = *(const __CFString **)(a1 + 112);
                if (v21)
                {
                  if (CFStringCompare(BSDName, v21, 0LL))
                  {
                    uint64_t v19 = 0LL;
                  }

                  else
                  {
                    CFRetain(ValueAtIndex);
                    uint64_t v19 = ValueAtIndex;
                  }
                }
              }

              uint64_t v5 = v14;
              uint64_t v4 = v30;
LABEL_41:
              sub_10003A310(v7, 0);
              CFRelease(v7);
              if (v11) {
                CFRelease(v11);
              }
              if (v9) {
                CFRelease(v9);
              }

              if (v19)
              {
                CFStringRef ServiceID = SCNetworkServiceGetServiceID(v19);
                unint64_t v28 = CFStringCreateWithFormat( kCFAllocatorDefault,  0LL,  @"%@/%@/%@/%@/%@",  kSCDynamicStoreDomainState,  kSCCompNetwork,  kSCCompService,  ServiceID,  kSCEntNetIPv4);
                uint64_t v29 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  [(id)qword_100219F60 WFLog:3, "%s - ipv4 state key: %@", "__WiFiDeviceInitializeIPParams", v28 message];
                }
                objc_autoreleasePoolPop(v29);
                sub_10003ED68(a1, v28);
                CFRelease(v4);
                CFRelease(v19);
                if (v28) {
                  CFRelease(v28);
                }
                return;
              }

              goto LABEL_32;
            }

void sub_10004BDEC(uint64_t a1, int a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: entering \n",  "__WiFiDevicePrepareAndSendDriverAvailableEvent");
  }
  objc_autoreleasePoolPop(v4);
  __int128 valuePtr = 0u;
  __int128 v37 = 0u;
  uint64_t v47 = 0LL;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v38 = 0u;
  LODWORD(valuePtr) = 3;
  DWORD2(valuePtr) = a2;
  LODWORD(v37) = -528340989;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  uint64_t v6 = Mutable;
  if (!Mutable) {
    goto LABEL_25;
  }
  CFIndex v7 = (const void **)&kCFBooleanFalse;
  if (a2) {
    CFIndex v7 = (const void **)&kCFBooleanTrue;
  }
  CFDictionarySetValue(Mutable, @"DRIVER_AVAILABLE", *v7);
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v37);
  if (!v8) {
    goto LABEL_25;
  }
  CFNumberRef v9 = v8;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_REASON", v8);
  CFRelease(v9);
  CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&v37 + 4);
  if (!v10) {
    goto LABEL_25;
  }
  CFNumberRef v11 = v10;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_SUBREASON", v10);
  CFRelease(v11);
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&v37 + 8);
  if (!v12) {
    goto LABEL_25;
  }
  CFNumberRef v13 = v12;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_MINORREASON", v12);
  CFRelease(v13);
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (!v14) {
    goto LABEL_25;
  }
  CFNumberRef v15 = v14;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_VERSION", v14);
  CFRelease(v15);
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  if (!v16) {
    goto LABEL_25;
  }
  CFNumberRef v17 = v16;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_FLAGS", v16);
  CFRelease(v17);
  CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (const void *)((unint64_t)&valuePtr | 0xC));
  if (!v18) {
    goto LABEL_25;
  }
  CFNumberRef v19 = v18;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_EVENTID", v18);
  CFRelease(v19);
  CFStringRef v20 = CFStringCreateWithCString(kCFAllocatorDefault, "DextCrashed", 0x8000100u);
  if (!v20) {
    goto LABEL_25;
  }
  CFStringRef v21 = v20;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_REASON_STRING", v20);
  CFRelease(v21);
  CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &v42);
  if (!v22) {
    goto LABEL_25;
  }
  CFNumberRef v23 = v22;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_PROGRAM_COUNTER", v22);
  CFRelease(v23);
  CFNumberRef v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, (char *)&v42 + 8);
  if (!v24) {
    goto LABEL_25;
  }
  CFNumberRef v25 = v24;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_LINK_REGISTER", v24);
  CFRelease(v25);
  CFStringRef v26 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)&v43, 0x8000100u);
  if (!v26) {
    goto LABEL_25;
  }
  CFStringRef v27 = v26;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_FILENAME", v26);
  CFRelease(v27);
  CFNumberRef v28 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v45);
  if (!v28) {
    goto LABEL_25;
  }
  CFNumberRef v29 = v28;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_LINENUMBER", v28);
  CFRelease(v29);
  CFStringRef v30 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)&v45 + 4, 0x8000100u);
  if (!v30) {
    goto LABEL_25;
  }
  CFStringRef v31 = v30;
  CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_FUNCTION ", v30);
  CFRelease(v31);
  CFNumberRef v32 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&v47 + 4);
  if (v32)
  {
    CFNumberRef v33 = v32;
    CFDictionarySetValue(v6, @"DRIVER_AVAILABLE_TRAP_SEQUENCE", v32);
    CFRelease(v33);
    sub_10005A55C(a1, *(const void **)(a1 + 112), v6);
    uint64_t v34 = 0LL;
  }

  else
  {
LABEL_25:
    uint64_t v34 = 4294963395LL;
  }

  CFRange v35 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: exiting, err:0x%x \n",  "__WiFiDevicePrepareAndSendDriverAvailableEvent",  v34,  valuePtr,  v37,  v38,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  v46,  v47);
  }
  objc_autoreleasePoolPop(v35);
  if (v6) {
    CFRelease(v6);
  }
}

BOOL sub_10004C250(uint64_t a1)
{
  int valuePtr = 0;
  if (!a1)
  {
    CFIndex v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null device",  "WiFiDeviceIsMultipleChannelRangingSupported");
    }
    objc_autoreleasePoolPop(v7);
    goto LABEL_14;
  }

  BOOL v1 = *(const __CFDictionary **)(a1 + 128);
  if (!v1)
  {
LABEL_14:
    BOOL v4 = 1LL;
    CFStringRef v3 = "supported";
    goto LABEL_8;
  }

  unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(v1, @"RANGING_FEATURES");
  CFStringRef v3 = "supported";
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    BOOL v4 = (valuePtr & 1) == 0;
    if ((valuePtr & 1) != 0) {
      CFStringRef v3 = "not supported";
    }
  }

  else
  {
    BOOL v4 = 1LL;
  }

LABEL_8:
  uint64_t v5 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: multiple channel ranging is %s",  "WiFiDeviceIsMultipleChannelRangingSupported",  v3);
  }
  objc_autoreleasePoolPop(v5);
  return v4;
}

  uint64_t v5 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: SW correction is %s for ranging on this device",  "WiFiDeviceIsSWCorrectionRequiredForRanging",  v3);
  }
  objc_autoreleasePoolPop(v5);
  return v4;
}

  objc_autoreleasePoolPop(v2);
  return a1;
}

  uint64_t v5 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: <%@> security %d", "WiFiNetworkSyncHelperGetNetworkSecurity", objc_msgSend(a1, "objectForKey:", @"SSID_STR"), v4 message];
  }
  objc_autoreleasePoolPop(v5);
  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t sub_10004C350(uint64_t a1)
{
  int valuePtr = 0;
  if (!a1)
  {
    CFIndex v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null device",  "WiFiDeviceIsSWCorrectionRequiredForRanging");
    }
    objc_autoreleasePoolPop(v7);
    goto LABEL_14;
  }

  BOOL v1 = *(const __CFDictionary **)(a1 + 128);
  if (!v1)
  {
LABEL_14:
    LOBYTE(v4) = 0;
    CFStringRef v3 = "not needed";
    goto LABEL_8;
  }

  unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(v1, @"RANGING_FEATURES");
  CFStringRef v3 = "not needed";
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    if ((valuePtr & 2) != 0) {
      CFStringRef v3 = "needed";
    }
    int v4 = (valuePtr & 2) >> 1;
  }

  else
  {
    LOBYTE(v4) = 0;
  }

uint64_t sub_10004C450(uint64_t a1, unsigned __int16 a2, _WORD *a3)
{
  unsigned __int16 valuePtr = a2;
  if (!a1)
  {
    CFNumberRef v18 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null device",  "WiFiDeviceIsChannelSupportedForRanging");
    }
    goto LABEL_29;
  }

  if (!*(void *)(a1 + 128))
  {
LABEL_30:
    CFNumberRef v6 = 0LL;
    goto LABEL_31;
  }

  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &valuePtr);
  if (!v5)
  {
    CFNumberRef v18 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null numRef",  "WiFiDeviceIsChannelSupportedForRanging");
    }
LABEL_29:
    objc_autoreleasePoolPop(v18);
    goto LABEL_30;
  }

  CFNumberRef v6 = v5;
  unsigned int Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 128), @"RANGING_SUPP_CHANNELS");
  if (!Value)
  {
LABEL_31:
    BOOL v14 = 0;
    BOOL v15 = a3 != 0LL;
    LOBYTE(v10) = 1;
    goto LABEL_32;
  }

  CFNumberRef v8 = Value;
  if (CFArrayGetCount(Value) < 1)
  {
    int v10 = 1;
  }

  else
  {
    CFIndex v9 = 0LL;
    int v10 = 1;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, v9);
      if (ValueAtIndex)
      {
        CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"RANGING_CHANNEL");
        if (v12)
        {
          CFNumberRef v13 = v12;
          if (CFEqual(v12, v6)) {
            goto LABEL_31;
          }
          if (a3 && !*a3) {
            CFNumberGetValue(v13, kCFNumberSInt16Type, a3);
          }
          int v10 = 0;
        }
      }

      ++v9;
    }

    while (v9 < CFArrayGetCount(v8));
  }

  BOOL v14 = v10 == 0;
  BOOL v15 = a3 != 0LL;
  if (a3 && !v10)
  {
    uint64_t v16 = (unsigned __int16)*a3;
    if ((v16 - 12) > 0xFFFFFFF4)
    {
      LOBYTE(v10) = 0;
    }

    else
    {
      CFNumberRef v17 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: over-writing suggested channel from %d to fallback %d",  "WiFiDeviceIsChannelSupportedForRanging",  v16,  6);
      }
      objc_autoreleasePoolPop(v17);
      LOBYTE(v10) = 0;
      *a3 = 6;
    }

    BOOL v15 = 1;
    BOOL v14 = 1;
  }

LABEL_32:
  CFNumberRef v19 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    CFStringRef v20 = "supported";
    if (v14) {
      CFStringRef v20 = "not supported";
    }
    if (v15) {
      uint64_t v21 = (unsigned __int16)*a3;
    }
    else {
      uint64_t v21 = 0LL;
    }
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: channel %d is %s for ranging, suggested channel %d",  "WiFiDeviceIsChannelSupportedForRanging",  valuePtr,  v20,  v21);
  }

  objc_autoreleasePoolPop(v19);
  if (v6) {
    CFRelease(v6);
  }
  return v10;
}

  context[0] = a1;
  context[1] = theDict;
  CFSetApplyFunction(*(CFSetRef *)(a4 + 136), (CFSetApplierFunction)sub_10008CC04, context);
  CFStringRef v26 = *(void **)(a4 + 1560);
  if (v26) {
    [v26 handleEvent:55 withData:theDict interface:a2];
  }
}

  CFStringAppend(theString, @" Bss");
  if ((a1 & 0x8000) == 0)
  {
LABEL_13:
    if ((a1 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }

  objc_autoreleasePoolPop(v3);
  return Mutable;
}

BOOL sub_10004C6CC(uint64_t a1)
{
  return sub_1000ABA8C(*(void *)(a1 + 144)) == 0;
}

uint64_t sub_10004C6EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4352) = a2;
  *(void *)(result + 4360) = a3;
  return result;
}

uint64_t sub_10004C6F8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4384) = a2;
  *(void *)(result + 4392) = a3;
  return result;
}

uint64_t sub_10004C704(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4952) = a2;
  *(void *)(result + 4960) = a3;
  return result;
}

uint64_t sub_10004C710(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 496_Block_object_dispose(va, 8) = a2;
  *(void *)(result + 4976) = a3;
  return result;
}

uint64_t sub_10004C71C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4984) = a2;
  *(void *)(result + 4992) = a3;
  return result;
}

uint64_t sub_10004C728(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5096) = a2;
  *(void *)(result + 5104) = a3;
  return result;
}

uint64_t sub_10004C734(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4744) = a2;
  *(void *)(result + 4752) = a3;
  return result;
}

uint64_t sub_10004C740(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4432) = a2;
  *(void *)(result + 4440) = a3;
  return result;
}

uint64_t sub_10004C74C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 444_Block_object_dispose(va, 8) = a2;
  *(void *)(result + 4456) = a3;
  return result;
}

uint64_t sub_10004C758(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4464) = a2;
  *(void *)(result + 4472) = a3;
  return result;
}

uint64_t sub_10004C764(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 452_Block_object_dispose(va, 8) = a2;
  *(void *)(result + 4536) = a3;
  return result;
}

uint64_t sub_10004C770(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4592) = a2;
  *(void *)(result + 4600) = a3;
  return result;
}

uint64_t sub_10004C77C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4544) = a2;
  *(void *)(result + 4552) = a3;
  return result;
}

uint64_t sub_10004C788(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4560) = a2;
  *(void *)(result + 456_Block_object_dispose(va, 8) = a3;
  return result;
}

uint64_t sub_10004C794(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 436_Block_object_dispose(va, 8) = a2;
  *(void *)(result + 4376) = a3;
  return result;
}

uint64_t sub_10004C7A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4400) = a2;
  *(void *)(result + 440_Block_object_dispose(va, 8) = a3;
  return result;
}

uint64_t sub_10004C7AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4416) = a2;
  *(void *)(result + 4424) = a3;
  return result;
}

uint64_t sub_10004C7B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 460_Block_object_dispose(va, 8) = a2;
  *(void *)(result + 4616) = a3;
  return result;
}

uint64_t sub_10004C7C4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4624) = a2;
  *(void *)(result + 4632) = a3;
  return result;
}

uint64_t sub_10004C7D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4640) = a2;
  *(void *)(result + 464_Block_object_dispose(va, 8) = a3;
  return result;
}

uint64_t sub_10004C7DC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4792) = a2;
  *(void *)(result + 4800) = a3;
  return result;
}

uint64_t sub_10004C7E8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 480_Block_object_dispose(va, 8) = a2;
  *(void *)(result + 4816) = a3;
  return result;
}

uint64_t sub_10004C7F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4480) = a2;
  *(void *)(result + 448_Block_object_dispose(va, 8) = a3;
  return result;
}

uint64_t sub_10004C800(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4496) = a2;
  *(void *)(result + 4504) = a3;
  return result;
}

uint64_t sub_10004C80C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4824) = a2;
  *(void *)(result + 4832) = a3;
  return result;
}

uint64_t sub_10004C818(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4840) = a2;
  *(void *)(result + 484_Block_object_dispose(va, 8) = a3;
  return result;
}

uint64_t sub_10004C824(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4872) = a2;
  *(void *)(result + 4880) = a3;
  return result;
}

uint64_t sub_10004C830(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 488_Block_object_dispose(va, 8) = a2;
  *(void *)(result + 4896) = a3;
  return result;
}

uint64_t sub_10004C83C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 544_Block_object_dispose(va, 8) = a2;
  *(void *)(result + 5456) = a3;
  return result;
}

uint64_t sub_10004C848(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5480) = a2;
  *(void *)(result + 548_Block_object_dispose(va, 8) = a3;
  return result;
}

uint64_t sub_10004C854(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4904) = a2;
  *(void *)(result + 4912) = a3;
  return result;
}

uint64_t sub_10004C860(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4856) = a2;
  *(void *)(result + 4864) = a3;
  return result;
}

uint64_t sub_10004C86C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4920) = a2;
  *(void *)(result + 492_Block_object_dispose(va, 8) = a3;
  return result;
}

uint64_t sub_10004C878(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4936) = a2;
  *(void *)(result + 4944) = a3;
  return result;
}

uint64_t sub_10004C884(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5016) = a2;
  *(void *)(result + 5024) = a3;
  return result;
}

uint64_t sub_10004C890(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5032) = a2;
  *(void *)(result + 5040) = a3;
  return result;
}

uint64_t sub_10004C89C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 504_Block_object_dispose(va, 8) = a2;
  *(void *)(result + 5056) = a3;
  return result;
}

uint64_t sub_10004C8A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5064) = a2;
  *(void *)(result + 5072) = a3;
  return result;
}

uint64_t sub_10004C8B4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5112) = a2;
  *(void *)(result + 5120) = a3;
  return result;
}

uint64_t sub_10004C8C0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 512_Block_object_dispose(va, 8) = a2;
  *(void *)(result + 5136) = a3;
  return result;
}

uint64_t sub_10004C8CC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5160) = a2;
  *(void *)(result + 516_Block_object_dispose(va, 8) = a3;
  return result;
}

uint64_t sub_10004C8D8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5176) = a2;
  *(void *)(result + 5184) = a3;
  return result;
}

uint64_t sub_10004C8E4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5192) = a2;
  *(void *)(result + 5200) = a3;
  return result;
}

uint64_t sub_10004C8F0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 4576) = a2;
  *(void *)(result + 4584) = a3;
  return result;
}

uint64_t sub_10004C8FC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 520_Block_object_dispose(va, 8) = a2;
  *(void *)(result + 5216) = a3;
  return result;
}

uint64_t sub_10004C908(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5224) = a2;
  *(void *)(result + 5232) = a3;
  return result;
}

uint64_t sub_10004C914(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5240) = a2;
  *(void *)(result + 524_Block_object_dispose(va, 8) = a3;
  return result;
}

uint64_t sub_10004C920(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5256) = a2;
  *(void *)(result + 5264) = a3;
  return result;
}

uint64_t sub_10004C92C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  CFNumberRef v6 = sub_1000446C8(a1, a2);
  return sub_1001322C4((uint64_t)v6, a3, a4);
}

uint64_t sub_10004C958(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5272) = a2;
  *(void *)(result + 5280) = a3;
  return result;
}

uint64_t sub_10004C964(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 528_Block_object_dispose(va, 8) = a2;
  *(void *)(result + 5296) = a3;
  return result;
}

uint64_t sub_10004C970(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5624) = a2;
  *(void *)(result + 5632) = a3;
  return result;
}

uint64_t sub_10004C97C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5304) = a2;
  *(void *)(result + 5312) = a3;
  return result;
}

uint64_t sub_10004C988(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5320) = a2;
  *(void *)(result + 532_Block_object_dispose(va, 8) = a3;
  return result;
}

uint64_t sub_10004C994(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5336) = a2;
  *(void *)(result + 5344) = a3;
  return result;
}

uint64_t sub_10004C9A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5352) = a2;
  *(void *)(result + 5360) = a3;
  return result;
}

uint64_t sub_10004C9AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 536_Block_object_dispose(va, 8) = a2;
  *(void *)(result + 5376) = a3;
  return result;
}

uint64_t sub_10004C9B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5384) = a2;
  *(void *)(result + 5392) = a3;
  return result;
}

uint64_t sub_10004C9C4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5400) = a2;
  *(void *)(result + 540_Block_object_dispose(va, 8) = a3;
  return result;
}

uint64_t sub_10004C9D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5416) = a2;
  *(void *)(result + 5424) = a3;
  return result;
}

uint64_t sub_10004C9DC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5432) = a2;
  *(void *)(result + 5440) = a3;
  return result;
}

uint64_t sub_10004C9E8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5496) = a2;
  *(void *)(result + 5504) = a3;
  return result;
}

uint64_t sub_10004C9F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5512) = a2;
  *(void *)(result + 5520) = a3;
  return result;
}

uint64_t sub_10004CA00(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 552_Block_object_dispose(va, 8) = a2;
  *(void *)(result + 5536) = a3;
  return result;
}

uint64_t sub_10004CA0C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5560) = a2;
  *(void *)(result + 556_Block_object_dispose(va, 8) = a3;
  return result;
}

uint64_t sub_10004CA18(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5544) = a2;
  *(void *)(result + 5552) = a3;
  return result;
}

uint64_t sub_10004CA24(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5576) = a2;
  *(void *)(result + 5584) = a3;
  return result;
}

uint64_t sub_10004CA30(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5592) = a2;
  *(void *)(result + 5600) = a3;
  return result;
}

uint64_t sub_10004CA3C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 560_Block_object_dispose(va, 8) = a2;
  *(void *)(result + 5616) = a3;
  return result;
}

uint64_t sub_10004CA48(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 5640) = a2;
  *(void *)(result + 564_Block_object_dispose(va, 8) = a3;
  return result;
}

uint64_t sub_10004CA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0LL;
  CFStringRef v3 = *(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *))(a1 + 5640);
  if (!v3) {
    return 0LL;
  }
  v3(a1, a2, *(void *)(a1 + 5648), a3, &v5);
  return v5;
}

uint64_t sub_10004CA94(uint64_t a1)
{
  return *(void *)(a1 + 184);
}

void sub_10004CA9C(uint64_t a1, uint64_t a2)
{
  CFIndex v12 = 72LL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v11 = 0LL;
  if (!sub_100128B54(*(void *)(a1 + 176), &v13, &v12, &v11))
  {
    uint64_t v10 = 0LL;
    *(_OWORD *)CFNumberRef v8 = 0u;
    __int128 v9 = 0u;
    *(_OWORD *)CFNumberRef v6 = 0u;
    *(_OWORD *)cuint64_t f = 0u;
    if (v11 != a2 && !sub_100128D80(*(void *)(a1 + 176), v6, a2))
    {
      switch(LODWORD(v6[0]))
      {
        case 0:
          if (cf[0])
          {
            CFRelease(cf[0]);
            cf[0] = 0LL;
          }

          if (v8[0])
          {
            uint64_t v5 = v8;
            free(v8[0]);
            goto LABEL_8;
          }

          goto LABEL_9;
        case 1:
          if (cf[1])
          {
            CFRelease(cf[1]);
            cf[1] = 0LL;
          }

          goto LABEL_5;
        case 3:
        case 5:
        case 9:
        case 0xC:
        case 0xE:
LABEL_5:
          CFTypeRef v4 = cf[0];
          if (!cf[0]) {
            goto LABEL_9;
          }
          uint64_t v5 = (void **)cf;
          break;
        case 0xA:
          if (cf[0])
          {
            CFRelease(cf[0]);
            cf[0] = 0LL;
          }

          CFTypeRef v4 = v8[1];
          if (!v8[1]) {
            goto LABEL_9;
          }
          uint64_t v5 = &v8[1];
          break;
        default:
          goto LABEL_9;
      }

      CFRelease(v4);
LABEL_8:
      *uint64_t v5 = 0LL;
LABEL_9:
      if (v6[1]) {
        CFRelease(v6[1]);
      }
    }
  }

CFTypeRef sub_10004CBC4(uint64_t a1, const void *a2)
{
  cuint64_t f = 0LL;
  CFStringRef v3 = sub_1000446C8(a1, a2);
  if (!v3)
  {
    CFNumberRef v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: unknown interface %@", "WiFiDeviceCopyInterfaceStats", a2 message];
    }
    objc_autoreleasePoolPop(v8);
    return 0LL;
  }

  uint64_t v4 = (uint64_t)v3;
  CFTypeID v5 = CFGetTypeID(v3);
  if (v5 != sub_10012FE70()) {
    return 0LL;
  }
  int v6 = sub_100133A58(v4, &cf);
  CFTypeRef result = cf;
  if (v6 && cf)
  {
    CFRelease(cf);
    return 0LL;
  }

  return result;
}

void sub_10004CC70(uint64_t a1, const void *a2, int a3)
{
  if (a1 && a2)
  {
    int v6 = (const __CFData *)sub_100096804(a2);
    CFIndex v7 = *(const void **)(a1 + 5808);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 580_Block_object_dispose(va, 8) = 0LL;
    }

    *(void *)(a1 + 580_Block_object_dispose(va, 8) = CFDataCreateCopy(kCFAllocatorDefault, v6);
    if (v6)
    {
      CFNumberRef v8 = *(const void **)(a1 + 5816);
      if (v8)
      {
        CFRelease(v8);
        *(void *)(a1 + 5816) = 0LL;
      }
    }

    if (a3 == 1) {
      *(void *)(a1 + 5816) = CFDataCreateCopy(kCFAllocatorDefault, v6);
    }
  }

  else
  {
    __int128 v9 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      uint64_t v10 = "Device";
      if (!a2) {
        uint64_t v10 = "Network";
      }
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: %s is NULL", "__WiFiDeviceRecordLastSSIDInfo", v10);
    }

    objc_autoreleasePoolPop(v9);
  }

void sub_10004CD74(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    uint64_t v4 = *(const void **)(a1 + 5824);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 5824) = 0LL;
    }

    *(void *)(a1 + 5824) = sub_100094E60((uint64_t)kCFAllocatorDefault, a2);
  }

  else
  {
    CFTypeID v5 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      int v6 = "Device";
      if (!a2) {
        int v6 = "Network";
      }
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: %s is NULL",  "__WiFiDeviceRecordLastNetworkInfo",  v6);
    }

    objc_autoreleasePoolPop(v5);
  }

uint64_t sub_10004CE2C(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

CFStringRef sub_10004CE34()
{
  return @"ap1";
}

uint64_t sub_10004CE40(uint64_t a1)
{
  return *(void *)(a1 + 256);
}

uint64_t sub_10004CE48(uint64_t a1)
{
  return *(unsigned int *)(a1 + 264);
}

uint64_t sub_10004CE50(uint64_t a1, const void *a2)
{
  unsigned int v12 = *(_DWORD *)(a1 + 48);
  uint64_t v4 = sub_1000446C8(a1, a2);
  if (v4)
  {
    uint64_t v5 = (uint64_t)v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == sub_10012FE70())
    {
      sub_100131CDC(v5);
    }

    else
    {
      for (int i = 6; ; --i)
      {
        int PowerState = Apple80211GetPowerState(*(void *)(a1 + 16), &v12);
        if (PowerState <= 15)
        {
          if (PowerState != -3905) {
            break;
          }
        }

        else if (PowerState != 61 && PowerState != 16)
        {
          return v12;
        }

        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }

      if (!PowerState) {
        *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = v12;
      }
    }
  }

  else
  {
    uint64_t v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "Unknown interface %@", a2 message];
    }
    objc_autoreleasePoolPop(v11);
  }

  return v12;
}

uint64_t sub_10004CF48(uint64_t a1, const void *a2, uint64_t a3)
{
  CFTypeID v6 = objc_autoreleasePoolPush();
  CFIndex v7 = sub_1000446C8(a1, a2);
  CFNumberRef v8 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: Setting power to %s on interface %@", "WiFiDeviceSetPower", sub_10003AE44(a3), a2 message];
  }
  objc_autoreleasePoolPop(v8);
  if (v7)
  {
    CFTypeID v9 = CFGetTypeID(v7);
    if (v9 == sub_10012FE70())
    {
      uint64_t v10 = sub_100131D68((uint64_t)v7);
    }

    else if (*(_DWORD *)(a1 + 48) == (_DWORD)a3)
    {
      uint64_t v10 = 0LL;
    }

    else
    {
      if (!(_DWORD)a3)
      {
        *(void *)(a1 + 5912) = 0LL;
        uint64_t v11 = *(const void **)(a1 + 5920);
        if (v11)
        {
          CFRelease(v11);
          *(void *)(a1 + 5920) = 0LL;
        }
      }

      sub_10004D0EC((uint64_t *)a1);
      for (int i = 6; ; --i)
      {
        uint64_t v13 = Apple80211SetPowerState(*(void *)(a1 + 16), a3);
        uint64_t v10 = v13;
        if ((int)v13 <= 15)
        {
          if ((_DWORD)v13 != -3905) {
            break;
          }
        }

        else if ((_DWORD)v13 != 61 && (_DWORD)v13 != 16)
        {
          goto LABEL_23;
        }

        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }

      if (!(_DWORD)v13)
      {
        uint64_t v10 = 0LL;
        *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = a3;
      }
    }
  }

  else
  {
    uint64_t v16 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "Unknown interface %@", a2 message];
    }
    objc_autoreleasePoolPop(v16);
    uint64_t v10 = 4294963396LL;
  }

LABEL_23:
  objc_autoreleasePoolPop(v6);
  return v10;
}

  if (*(_BYTE *)(a1 + 1848) == 1)
  {
    sub_10006B570(a1, 1);
  }

  else
  {
    *(_BYTE *)(a1 + 132_Block_object_dispose(va, 8) = 0;
    sub_10007C9BC(a1, 0, 0);
    CFTypeID v9 = *(const void **)(a1 + 1336);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 1336) = 0LL;
    }

    sub_100061B50((uint64_t)v9, 2LL, a1);
    sub_100063560(a1);
    sub_100063998(a1, *(const __CFArray **)(a1 + 232));
  }

  objc_autoreleasePoolPop(v6);
}

        objc_autoreleasePoolPop(v21);
      }
    }

    else
    {
      sub_10007D224((uint64_t)v17, (const __CFDictionary *)v19);
    }

    CFRelease(v16);
  }

  sub_10003A8FC((vm_address_t)a2, a3);
  sub_10003A8FC((vm_address_t)a4, a5);
  return 0LL;
}

        sub_10003C0D4((uint64_t)v16, v23 | 8);
        CFNumberRef v29 = (uint64_t)v49;
        if ((a4 & 0xFFFFFFFE) == 2)
        {
          CFStringRef v30 = sub_1000D3348((uint64_t)v49, v18);
          if (v30)
          {
            CFStringRef v31 = v30;
            if (!sub_1000DCBFC((uint64_t)v49, 4LL))
            {
              CFNumberRef v32 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:3, "Enabling SoftAP. Now disconnecting from %@", sub_100095BC8(v31) message];
              }
              objc_autoreleasePoolPop(v32);
              CFNumberRef v29 = (uint64_t)v49;
              sub_1000CE074((uint64_t)v49, v18, 1007LL, "_wifi_device_start_network", 3520LL);
            }

            CFRelease(v31);
          }

          else
          {
            sub_1000D0428((uint64_t)v49);
          }
        }

        uint64_t v34 = (const __CFString *)sub_10003BEDC((uint64_t)v16);
        if (v34)
        {
          CFRange v35 = CFStringCompare(v34, @"matd", 1uLL);
          CFStringRef v20 = theDict;
          if (theDict && v35 == kCFCompareEqualTo)
          {
            MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, theDict);
            if (!MutableCopy)
            {
LABEL_47:
              a5 = v47;
              a6 = v46;
              goto LABEL_48;
            }

            __int128 v37 = MutableCopy;
            CFRelease(theDict);
            CFDictionarySetValue( v37,  @"AP_MODE_MOVETOIOS_MIGRATION",  +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
            CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, v37);
            CFRelease(v37);
            __int128 v39 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "MIGRATION:%s Request  Dict : %@ ", "_wifi_device_start_network", Copy message];
            }
            objc_autoreleasePoolPop(v39);
            CFStringRef v20 = Copy;
            CFNumberRef v29 = (uint64_t)v49;
          }
        }

        else
        {
          CFStringRef v20 = theDict;
        }

        __int128 v40 = (const void *)sub_10003BEDC((uint64_t)v16);
        __int128 v41 = sub_1000E556C(v29, v18, a4, v20, (uint64_t)sub_1000B6264, (uint64_t)v16, v40);
        *a7 = v41;
        if (!v41 || (sub_10003C0D4((uint64_t)v16, v23 & 0xFFFFFFF7), !*a7))
        {
          if ((a4 & 0xFFFFFFFE) == 2)
          {
            __int128 v42 = (void *)sub_10003BEDC((uint64_t)v16);
            sub_1000DD024(v29, 1, 0, 0, v42);
            sub_1000DC9E4(v29, 1);
            sub_1000CF880(v29, 4, 1);
          }

          CFRetain(v16);
        }

        goto LABEL_47;
      }

      CFNumberRef v33 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: client %@ has already requested hosted network.", "_wifi_device_start_network", sub_10003BEDC((uint64_t)v16) message];
      }
      objc_autoreleasePoolPop(v33);
      sub_10003C754((uint64_t)v16, (uint64_t)v49, v18, 37, 0LL, 0LL);
    }

    else
    {
      *a7 = 74;
    }

  sub_10003A8FC((vm_address_t)a2, a3);
  sub_10003A8FC((vm_address_t)a5, a6);
  return 0LL;
}

              ++v15;
            }

            while (v14 != v15);
          }
        }

        uint64_t v5 = theDict;
        CFDictionarySetValue(theDict, @"IO80211InterfaceAdaptiveRoamChanList", v9);
        CFDictionarySetValue(theDict, @"IO80211InterfaceAdaptiveRoamRSSITrigger", value);
        CFNumberRef v29 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "Adaptive Roam Params %@", theDict message];
        }
        objc_autoreleasePoolPop(v29);
        CFStringRef v30 = *(void *)(a1 + 64);
        CFStringRef v31 = (const void *)sub_100043E8C(v30);
        sub_10003EC6C(v30, v31, 532LL, 0LL, (uint64_t)theDict);
        if (*(void *)(a1 + 7320)) {
          objc_msgSend( *(id *)(a1 + 7320),  "setRoamingConfiguration:withChannelList:forInterface:",  *(int *)(a1 + 7336),  +[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v9),  sub_100043E8C(*(void *)(a1 + 64)));
        }
      }

      CFRelease(v5);
    }

    else
    {
      CFTypeID v9 = v5;
    }

    CFRelease(v9);
  }

    if ((_DWORD)v17 != -2 && v51[3])
    {
      CFStringRef v26 = *(dispatch_source_s **)(a1 + 8944);
      if (v26)
      {
        dispatch_source_cancel(v26);
        dispatch_release(*(dispatch_object_t *)(a1 + 8944));
        *(void *)(a1 + 8944) = 0LL;
      }

      if ((_DWORD)v17 != -1)
      {
        *(void *)(a1 + 8944) = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(a1 + 240));
        CFRetain(a2);
        CFRetain(a3);
        CFStringRef v27 = *(dispatch_source_s **)(a1 + 8944);
        v48[0] = _NSConcreteStackBlock;
        v48[1] = 3221225472LL;
        v48[2] = sub_1000F87F0;
        v48[3] = &unk_1001E4DD8;
        v48[4] = a3;
        v48[5] = &v50;
        v48[6] = a1;
        v48[7] = a2;
        v48[8] = a3;
        dispatch_source_set_event_handler(v27, v48);
        CFNumberRef v28 = -[NSCalendar startOfDayForDate:]( +[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"),  "startOfDayForDate:",  +[NSDate date](&OBJC_CLASS___NSDate, "date"));
        -[NSDate timeIntervalSince1970](v28, "timeIntervalSince1970");
        CFStringRef v30 = v29;
        -[NSDate timeIntervalSince1970](+[NSDate date](&OBJC_CLASS___NSDate, "date"), "timeIntervalSince1970");
        CFNumberRef v32 = v31;
        CFNumberRef v33 = objc_msgSend( objc_msgSend(a3, "objectForKeyedSubscript:", @"SENSING_PARAMS_COMMENT"),  "isEqualToString:",  @"automatic collection scheduled");
        uint64_t v34 = v30 + 86400.0;
        if (v33) {
          CFRange v35 = v34 - v32 + (double)(int)v17 + 86400.0;
        }
        else {
          CFRange v35 = v34 - v32 + (double)(int)v17;
        }
        if (v33) {
          id v36 = 604800000000000LL;
        }
        else {
          id v36 = 86400000000000LL;
        }
        __int128 v37 = *(dispatch_source_s **)(a1 + 8944);
        __int128 v38 = dispatch_time(0LL, (uint64_t)(v35 * 1000000000.0));
        dispatch_source_set_timer(v37, v38, v36, 0LL);
        dispatch_activate(*(dispatch_object_t *)(a1 + 8944));
        __int128 v39 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: midnightOfToday %@, midnightOfTomorrow %f, now %f, scheduledStartInSecondsAfterMidnight %d, dispatchTime rStart %f, interval %llu", "WiFiDeviceManagerSensingEnableAsync", v28, *(void *)&v34, *(void *)&v32, v17, *(void *)&v35, v36 message];
        }
        objc_autoreleasePoolPop(v39);
      }
    }
  }

  sub_10009582C((uint64_t)v15, @"enabled", 0LL);
  sub_10009582C((uint64_t)v15, @"Standalone", 0LL);
  if ([v11 bandPreference]) {
    sub_10009582C( (uint64_t)v15,  @"BAND_PREFERENCE",  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v11 bandPreference]));
  }
  if ([v11 colocatedScopeID]) {
    sub_10009582C((uint64_t)v15, @"COLOCATED_NETWORK_SCOPE_ID", [v11 colocatedScopeID]);
  }
  if ([v11 has6GHzOnlyBSS])
  {
    CFNumberRef v29 = sub_100096BF4((uint64_t)v15, @"ASSOC_FLAGS");
    sub_1000970C0((uint64_t)v15, @"ASSOC_FLAGS", v29 | 0x100000LL);
  }

  if (!objc_msgSend(objc_msgSend(v11, "knownNetworkProfile"), "addReason"))
  {
    sub_10009582C((uint64_t)v15, @"WiFiManagerKnownNetworksEventType", &off_1002052C8);
  }

  CFStringRef v30 = objc_msgSend(objc_msgSend(v11, "EAPCredentials"), "password");
  if (!v30) {
    CFStringRef v30 = [v11 password];
  }
  sub_1000F6D00( (const __CFDictionary *)objc_msgSend(objc_msgSend(v11, "scanResult"), "scanRecord"),  (const __CFDictionary *)v15);
  if (_os_feature_enabled_impl("WiFiManager", "FindAndJoinNetworkAPI")
    && [v11 findAndJoinNetwork])
  {
    CFStringRef v31 = sub_1000E4698(v19, (uint64_t)v17, v15, (uint64_t)v30, (uint64_t)sub_1001202EC, (uint64_t)a3);
  }

  else
  {
    CFStringRef v31 = sub_1000E1104( v19,  v17,  v15,  v30,  (const __CFString *)[v36 processName],  (uint64_t)sub_1001202EC,  (uint64_t)a3,  1008);
  }

  if (!v31)
  {
    CFNumberRef v32 = 0LL;
    goto LABEL_44;
  }

  uint64_t v34 = (NSErrorDomain)CWFManagerErrorDomain;
  CFRange v35 = v31;
LABEL_54:
  CFNumberRef v32 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v34,  v35,  0LL);
LABEL_44:
  CFRelease(v15);
  if (!v32) {
    return;
  }
LABEL_45:
  if ([a3 response])
  {
    CFNumberRef v33 = (void (**)(id, NSError *, void))[a3 response];
    v33[2](v33, v32, 0LL);
  }
}

  if (v19) {
    CFRelease(v19);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v11) {
LABEL_30:
  }
    dispatch_release(v11);
  return v25;
}

void sub_10004D0EC(uint64_t *a1)
{
  if (!a1)
  {
    CFTypeID v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null device", "__WiFiDeviceCommandFlush");
    }
    goto LABEL_67;
  }

  if (!a1[22])
  {
    CFTypeID v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null cmdqueue ref", "__WiFiDeviceCommandFlush");
    }
LABEL_67:
    objc_autoreleasePoolPop(v6);
    goto LABEL_7;
  }

  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)CFTypeID v9 = v2;
  __int128 v10 = v2;
  *(_OWORD *)CFIndex v7 = v2;
  *(_OWORD *)cuint64_t f = v2;
  CFStringRef v3 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "Beginning command queue flush with error %d", 82);
  }
  objc_autoreleasePoolPop(v3);
  sub_100128F40(a1[22]);
  sub_100128724(a1[22], 0LL, 0LL);
  while (!sub_100128C88(a1[22], v7, 0x48uLL, a1 + 23))
  {
    switch(LODWORD(v7[0]))
    {
      case 0:
        if (BYTE8(v10))
        {
          a1[591] = 0LL;
          a1[592] = 0LL;
        }

        goto LABEL_29;
      case 1:
        if (BYTE8(v10))
        {
          a1[597] = 0LL;
          a1[598] = 0LL;
        }

        CFTypeRef v5 = cf[0];
        if (v9[0]) {
          ((void (*)(uint64_t *, CFTypeRef, CFTypeRef, void, uint64_t, CFTypeRef))v9[0])( a1,  v7[1],  cf[0],  0LL,  82LL,  v9[1]);
        }
        if (cf[1])
        {
          CFRelease(cf[1]);
          cf[1] = 0LL;
        }

        goto LABEL_49;
      case 3:
        if (BYTE8(v10))
        {
          a1[582] = 0LL;
          a1[583] = 0LL;
        }

        goto LABEL_25;
      case 4:
      case 6:
        if (cf[0]) {
          ((void (*)(uint64_t *, CFTypeRef, uint64_t, CFTypeRef))cf[0])(a1, v7[1], 82LL, cf[1]);
        }
        break;
      case 5:
        if (BYTE8(v10))
        {
          a1[584] = 0LL;
          a1[585] = 0LL;
        }

LABEL_51:
        if (v5) {
          CFRelease(v5);
        }
        break;
      case 0xE:
        if (BYTE8(v10))
        {
          a1[683] = 0LL;
          a1[684] = 0LL;
        }

        if (cf[1]) {
          ((void (*)(uint64_t *, CFTypeRef, uint64_t, CFTypeRef))cf[1])(a1, v7[1], 82LL, v9[0]);
        }
        if (v7[1])
        {
          CFRelease(v7[1]);
          v7[1] = 0LL;
        }

        if (cf[0])
        {
          CFRelease(cf[0]);
          cf[0] = 0LL;
        }

        break;
      default:
        break;
    }
  }

  sub_100128724(a1[22], (uint64_t)sub_100041514, (uint64_t)a1);
LABEL_7:
  uint64_t v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "Finished command queue flush with error %d", 82);
  }
  objc_autoreleasePoolPop(v4);
}

        BOOL v14 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: no matched network in colocated cache with 6E disabled, do same ssid roaming",  "WiFiDeviceManagerNetworkTransitionAction");
        }
LABEL_60:
        objc_autoreleasePoolPop(v14);
        unsigned int v12 = 1LL;
        goto LABEL_61;
      }

      BOOL v14 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: current ssid doesn't match requested network ssid with 6E disabled, no action",  "WiFiDeviceManagerNetworkTransitionAction");
      }
    }

    else
    {
      uint64_t v13 = CFEqual(v9, a2);
      BOOL v14 = objc_autoreleasePoolPush();
      if (v13)
      {
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: SSID transition is not supported, do same ssid roaming",  "WiFiDeviceManagerNetworkTransitionAction");
        }
        goto LABEL_60;
      }

      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: SSID transition is not supported, no action",  "WiFiDeviceManagerNetworkTransitionAction");
      }
    }

    objc_autoreleasePoolPop(v14);
    goto LABEL_56;
  }

  return 0LL;
}

uint64_t sub_10004D504()
{
  return 4294963396LL;
}

uint64_t sub_10004D50C(uint64_t a1, CFTypeRef cf, unsigned int a3, unsigned int a4)
{
  unint64_t v5 = a3 | 0xAAAAAAAA00000000LL;
  unint64_t v6 = a4 | 0xAAAAAAAA00000000LL;
  CFTypeRef v7 = CFRetain(cf);
  return sub_100045368(a1, 7u, 0LL, (uint64_t)v7, v5, v6, 0LL, 0LL, 0LL);
}

uint64_t sub_10004D580(uint64_t a1, CFTypeRef cf, unsigned int a3)
{
  unint64_t v4 = a3 | 0xAAAAAAAA00000000LL;
  CFTypeRef v5 = CFRetain(cf);
  return sub_100045368(a1, 0xDu, 0LL, (uint64_t)v5, v4, 0LL, 0LL, 0LL, 0LL);
}

uint64_t sub_10004D5E4(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 32) >> 1) & 1;
}

uint64_t sub_10004D5F0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 34) >> 4) & 1;
}

uint64_t sub_10004D5FC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 35) >> 3) & 1;
}

uint64_t sub_10004D608(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 46) >> 1) & 1;
}

uint64_t sub_10004D614(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 44) >> 7;
}

uint64_t sub_10004D620(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 36) >> 2) & 1;
}

uint64_t sub_10004D62C(uint64_t a1, BOOL *a2)
{
  if ((*(_BYTE *)(a1 + 34) & 0x20) == 0)
  {
    uint64_t v2 = (*(unsigned __int8 *)(a1 + 36) >> 1) & 1;
    if (!a2) {
      return v2;
    }
    goto LABEL_5;
  }

  uint64_t v2 = 1LL;
  if (a2) {
LABEL_5:
  }
    *a2 = (*(_BYTE *)(a1 + 36) & 2) != 0;
  return v2;
}

uint64_t sub_10004D660(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 33) >> 5) & 1;
}

uint64_t sub_10004D66C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 34) >> 6) & 1;
}

BOOL sub_10004D678(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 35) & 0x44) != 0;
}

uint64_t sub_10004D68C(const __CFString *a1)
{
  return CFStringHasSuffix(a1, @"Device14,1");
}

uint64_t sub_10004D698(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 37) >> 6) & 1;
}

uint64_t sub_10004D6A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 38) >> 7;
}

uint64_t sub_10004D6B0(uint64_t a1)
{
  return *(_BYTE *)(a1 + 39) & 1;
}

uint64_t sub_10004D6BC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 44) >> 3) & 1;
}

uint64_t sub_10004D6C8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 41) >> 1) & 1;
}

uint64_t sub_10004D6D4(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 41) >> 2) & 1;
}

uint64_t sub_10004D6E0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 41) >> 3) & 1;
}

uint64_t sub_10004D6EC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 41) >> 5) & 1;
}

uint64_t sub_10004D6F8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 54);
}

uint64_t sub_10004D700(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 55);
}

uint64_t sub_10004D708(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 42) >> 1) & 1;
}

uint64_t sub_10004D714(uint64_t a1, const void *a2, uint64_t a3)
{
  unint64_t v6 = sub_1000446C8(a1, a2);
  if (!v6)
  {
    CFNumberRef v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "Unknown interface %@", a2 message];
    }
    goto LABEL_5;
  }

  CFTypeID v7 = CFGetTypeID(v6);
  if (v7 == sub_10012FE70())
  {
    CFNumberRef v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "Set Background Scan is not supported by %@", a2 message];
    }
LABEL_5:
    objc_autoreleasePoolPop(v8);
    return 4294963396LL;
  }

  for (int i = 6; ; --i)
  {
    uint64_t result = Apple80211Set(*(void *)(a1 + 16), 47LL, 0LL, a3, 8LL);
    if ((_DWORD)result != -3905 && (_DWORD)result != 61 && (_DWORD)result != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }

  return result;
}

uint64_t sub_10004D80C(uint64_t a1, const void *a2, unsigned int a3)
{
  unsigned int v17 = a3;
  CFTypeRef v5 = sub_1000446C8(a1, a2);
  if (!v5)
  {
    CFNumberRef v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "Unknown interface %@", a2 message];
    }
    goto LABEL_6;
  }

  unint64_t v6 = v5;
  if ((MGGetBoolAnswer(@"apple-internal-install") & 1) == 0)
  {
    uint64_t v16 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4 message:"Scan backoff reporting blocked on customer builds"];
    }
    CFTypeID v9 = v16;
    goto LABEL_7;
  }

  CFTypeID v7 = CFGetTypeID(v6);
  if (v7 == sub_10012FE70())
  {
    CFNumberRef v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "Set scan backoff report is not supported by %@", a2 message];
    }
LABEL_6:
    CFTypeID v9 = v8;
LABEL_7:
    objc_autoreleasePoolPop(v9);
    return 4294963396LL;
  }

  for (int i = 6; ; --i)
  {
    uint64_t v12 = Apple80211Set(*(void *)(a1 + 16), 264LL, 0LL, &v17, 4LL);
    uint64_t v10 = v12;
    if ((_DWORD)v12 != -3905 && (_DWORD)v12 != 61 && (_DWORD)v12 != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }

  BOOL v14 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: ifName %@, state 0x%x, error %d", "WiFiDeviceSetScanBackoffReport", a2, v17, v10 message];
  }
  objc_autoreleasePoolPop(v14);
  return v10;
}

uint64_t sub_10004D99C(uint64_t a1, int a2)
{
  if (a1)
  {
    CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  *(CFStringRef *)(a1 + 112),  kSCEntNetInterfaceActiveDuringSleepRequested);
    if (NetworkInterfaceEntity)
    {
      CFTypeRef v5 = NetworkInterfaceEntity;
      unint64_t v6 = *(const __SCDynamicStore **)(a1 + 152);
      if (v6)
      {
        CFTypeID v7 = (const __CFString *)SCDynamicStoreCopyValue(v6, v5);
        CFNumberRef v8 = v7;
        if (!a2 || v7)
        {
          if (a2 || !v7)
          {
            unint64_t v11 = objc_autoreleasePoolPush();
            if (qword_100219F60)
            {
              uint64_t v12 = "removed";
              if (a2) {
                uint64_t v12 = "set";
              }
              [(id)qword_100219F60 WFLog:3, "%s: ActiveDuringSleepRequested is already %s (%@).", "WiFiDeviceRequestAssociatedSleep", v12, v8 message];
            }

            objc_autoreleasePoolPop(v11);
            CFRelease(v5);
            if (!v8) {
              return 0LL;
            }
            int v10 = 1;
          }

          else
          {
            int v10 = SCDynamicStoreRemoveValue(*(SCDynamicStoreRef *)(a1 + 152), v5);
            CFRelease(v5);
          }

          CFTypeRef v5 = v8;
        }

        else
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          int v10 = SCDynamicStoreSetValue(*(SCDynamicStoreRef *)(a1 + 152), v5, Mutable);
          if (Mutable) {
            CFRelease(Mutable);
          }
        }
      }

      else
      {
        BOOL v15 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: dynamicStoreRef is NULL",  "WiFiDeviceRequestAssociatedSleep");
        }
        objc_autoreleasePoolPop(v15);
        int v10 = 0;
      }

      CFRelease(v5);
      if (v10) {
        return 0LL;
      }
    }

    else
    {
      BOOL v14 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: stateKey is NULL",  "WiFiDeviceRequestAssociatedSleep");
      }
      objc_autoreleasePoolPop(v14);
    }
  }

  return 4294963396LL;
}

uint64_t sub_10004DB98(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10004DBA0(a1, a2, a3, a4, a5, a6, 0LL);
}

uint64_t sub_10004DBA0( uint64_t a1, CFTypeRef cf, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  CFTypeRef v14 = CFRetain(cf);
  CFTypeRef v15 = CFRetain(a3);
  uint64_t v16 = sub_100045368(a1, 0, a4, (uint64_t)v14, (uint64_t)v15, a5, a6, 0LL, a7);
  if ((_DWORD)v16)
  {
    if (cf) {
      CFRelease(cf);
    }
    if (a3) {
      CFRelease(a3);
    }
  }

  return v16;
}

uint64_t sub_10004DC54(uint64_t a1, uint64_t a2)
{
  for (int i = 6; ; --i)
  {
    uint64_t result = Apple80211Get(*(void *)(a1 + 16), 390LL, 0LL, a2, 2264LL);
    if ((_DWORD)result != -3905 && (_DWORD)result != 61 && (_DWORD)result != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }

  return result;
}

CFMutableArrayRef sub_10004DCC4(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (!Mutable)
  {
    CFTypeRef v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s beaconScanCache alloc cache failed",  "WiFiDeviceCopyScanCache");
    }
    objc_autoreleasePoolPop(v5);
    return 0LL;
  }

  CFMutableArrayRef v3 = Mutable;
  sub_10004DC54(a1, (uint64_t)Mutable);
  if (!CFArrayGetCount(v3))
  {
    unint64_t v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s - beaconScanCache not available",  "WiFiDeviceCopyScanCache");
    }
    objc_autoreleasePoolPop(v4);
    CFRelease(v3);
    return 0LL;
  }

  return v3;
}

__CFArray *sub_10004DDB0(uint64_t a1, uint64_t a2, const __CFDictionary *a3, const __CFArray *a4, int a5)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (!Mutable) {
    return Mutable;
  }
  int v10 = sub_10003A53C(a4, *(_DWORD *)(a1 + 240), *(_DWORD *)(a1 + 248));
  unint64_t v11 = v10;
  if (*(_BYTE *)(a1 + 5896)) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = v10 == 0LL;
  }
  if (v12) {
    goto LABEL_20;
  }
  uint64_t v13 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Filtering WAPI networks",  "__processScanBeaconCacheEntry");
  }
  objc_autoreleasePoolPop(v13);
  CFMutableArrayRef v14 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (!v14)
  {
LABEL_20:
    CFTypeRef v15 = v11;
    if (!a3) {
      goto LABEL_16;
    }
  }

  else
  {
    CFTypeRef v15 = v14;
    if (CFArrayGetCount(v11) >= 1)
    {
      CFIndex v16 = 0LL;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v11, v16);
        CFNumberRef v18 = ValueAtIndex;
        if (!ValueAtIndex || !sub_100098380((BOOL)ValueAtIndex)) {
          CFArrayAppendValue(v15, v18);
        }
        ++v16;
      }

      while (v16 < CFArrayGetCount(v11));
    }

    CFRelease(v11);
    if (!a3)
    {
LABEL_16:
      CFNumberRef v19 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: scanRequest is NULL. Not filtering based on SSID/Channel matching.",  "__processScanBeaconCacheEntry");
      }
      objc_autoreleasePoolPop(v19);
      v42.length = CFArrayGetCount(v15);
      v42.id location = 0LL;
      CFArrayAppendArray(Mutable, v15, v42);
      int v20 = 1;
      if (!v15) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
  }

  CFMutableArrayRef v21 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (!v21)
  {
LABEL_45:
    int v20 = 0;
    if (!v15) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }

  CFMutableArrayRef v22 = v21;
  CFMutableArrayRef v23 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (!v23)
  {
    CFRelease(v22);
    goto LABEL_45;
  }

  CFNumberRef v24 = v23;
  sub_100056C14(a3, v22);
  __int128 v38 = a3;
  sub_100056928(a1, a3, v24);
  v39.length = CFArrayGetCount(v22);
  v39.id location = 0LL;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v22, v39, &stru_1001EB6E0);
  if (CFArrayGetCount(v15) < 1)
  {
    int v20 = 0;
  }

  else
  {
    int v20 = 0;
    CFIndex v26 = 0LL;
    do
    {
      CFStringRef v27 = CFArrayGetValueAtIndex(v15, v26);
      if (v27)
      {
        CFNumberRef v28 = v27;
        if (FirstIndexOfValue != -1
          || (CFIndex Count = CFArrayGetCount(v22),
              CFStringRef v30 = sub_100095BC8(v28),
              v40.id location = 0LL,
              v40.length = Count,
              CFArrayGetFirstIndexOfValue(v22, v40, v30) != -1))
        {
          CFStringRef v31 = sub_100056D08((uint64_t)v28);
          if (v31)
          {
            CFNumberRef v32 = v31;
            v41.length = CFArrayGetCount(v24);
            v41.id location = 0LL;
            if (CFArrayGetFirstIndexOfValue(v24, v41, v32) != -1)
            {
              CFNumberRef v33 = sub_100096BF4((uint64_t)v28, @"ORIG_AGE");
              sub_1000970C0((uint64_t)v28, @"AGE", (uint64_t)v33);
              CFArrayAppendValue(Mutable, v28);
              int v20 = 1;
            }

            CFRelease(v32);
          }
        }
      }

      ++v26;
    }

    while (v26 < CFArrayGetCount(v15));
  }

  CFRelease(v22);
  CFRelease(v24);
  a3 = v38;
  if (!v15) {
    goto LABEL_37;
  }
LABEL_36:
  CFRelease(v15);
LABEL_37:
  if (v20)
  {
    CFIndex v34 = CFArrayGetCount(Mutable);
    if (a5)
    {
      if (v34)
      {
        CFRange v35 = sub_10004E16C(Mutable, 0LL, a3);
        id v36 = sub_10003A464(v35);
        if (v35) {
          CFRelease(v35);
        }
        CFRelease(Mutable);
        return v36;
      }
    }
  }

  return Mutable;
}

__CFArray *sub_10004E16C(const __CFArray *a1, const __CFArray *a2, CFDictionaryRef theDict)
{
  int valuePtr = 0;
  if (theDict && (unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"SCAN_RSSI_THRESHOLD")) != 0LL)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    int v7 = valuePtr;
  }

  else
  {
    int v7 = 0;
  }

  int v8 = sub_100056E14(theDict);
  if (!a1) {
    return 0LL;
  }
  int v9 = v8;
  if (v7) {
    goto LABEL_7;
  }
  if (!v8) {
    return (__CFArray *)CFRetain(a1);
  }
  if (a2)
  {
    a1 = a2;
    return (__CFArray *)CFRetain(a1);
  }

void sub_10004E304(uint64_t a1)
{
  CFTypeRef v5 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = 0LL;
  CFIndex v4 = 72LL;
  if (!sub_100128B54(*(void *)(a1 + 176), &v5, &v4, &v3) && *((_BYTE *)v5 + 56) == 1 && *v5 <= 1)
  {
    uint64_t v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Starting %d second(s) timer to clear pending command type %d",  "WiFiDeviceClearPendingCommand",  1,  *v5);
    }
    objc_autoreleasePoolPop(v2);
    sub_100129284(*(void *)(a1 + 176), 1LL);
  }

uint64_t sub_10004E3C4( uint64_t a1, const void *a2, const void *a3, const void *a4, uint64_t a5, uint64_t a6, int a7)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 5936) = a7;
    return sub_10004E450(a1, a2, a3, a4, a7, a5, a6, 0LL);
  }

  else
  {
    int v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null device", "WiFiDeviceAssociateAsync");
    }
    objc_autoreleasePoolPop(v8);
    return 4294963396LL;
  }

uint64_t sub_10004E450( uint64_t a1, const void *a2, const void *a3, const void *a4, int a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 5936) = a5;
    if (sub_100098380((BOOL)a3) && !*(_BYTE *)(a1 + 5896))
    {
      CFMutableArrayRef v21 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4, "%s: WAPI support is disabled. Error connecting to %@ ", "WiFiDeviceAssociateAsyncWithCommand", sub_100095BC8(a3) message];
      }
      objc_autoreleasePoolPop(v21);
      return 4294963393LL;
    }

    else
    {
      CFTypeRef v15 = CFRetain(a2);
      CFTypeRef v16 = CFRetain(a3);
      if (a4) {
        CFTypeRef v17 = CFRetain(a4);
      }
      else {
        CFTypeRef v17 = 0LL;
      }
      uint64_t v20 = sub_100045368(a1, 1u, 0LL, (uint64_t)v15, (uint64_t)v16, (uint64_t)v17, a6, a7, a8);
      uint64_t v19 = v20;
      if (a3 && (_DWORD)v20) {
        CFRelease(a3);
      }
    }
  }

  else
  {
    BOOL v18 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null device", "WiFiDeviceAssociateAsyncWithCommand");
    }
    objc_autoreleasePoolPop(v18);
    return 4294963396LL;
  }

  return v19;
}

uint64_t sub_10004E5C8(uint64_t a1, const void *a2, CFDictionaryRef *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFIndex v12 = objc_autoreleasePoolPush();
  uint64_t v13 = sub_1000A063C(a3);
  id v14 = sub_1000A335C((uint64_t)a3);
  uint64_t v15 = *(unsigned int *)(a1 + 5948);
  if ((_DWORD)v15)
  {
    CFTypeRef v16 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "(Simulated) Failed to associate with %@: %d", sub_100095BC8(a3), v15 message];
    }
    objc_autoreleasePoolPop(v16);
  }

  else
  {
    CFTypeRef v17 = v14;
    uint64_t v63 = a6;
    CFMutableDictionaryRef v18 = sub_100094E98((uint64_t)a3);
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v61 = a5;
      CFNumberRef v62 = v12;
      if (a3)
      {
        uint64_t v20 = *(const void **)(a1 + 5840);
        if (v20)
        {
          CFRelease(v20);
          *(void *)(a1 + 5840) = 0LL;
        }

        CFMutableArrayRef v21 = *(const void **)(a1 + 5848);
        if (v21)
        {
          CFRelease(v21);
          *(void *)(a1 + 584_Block_object_dispose(va, 8) = 0LL;
        }

        CFTypeID v60 = a2;
        CFMutableArrayRef v22 = *(const void **)(a1 + 5856);
        if (v22)
        {
          CFRelease(v22);
          *(void *)(a1 + 5856) = 0LL;
        }

        CFMutableArrayRef v23 = (_BYTE *)(a1 + 5864);
        CFNumberRef v24 = (const __CFString *)sub_100095BC8(a3);
        *(void *)(a1 + 5840) = CFStringCreateCopy(kCFAllocatorDefault, v24);
        CFNumberRef v25 = (const __CFString *)sub_1000951FC((uint64_t)a3, @"BSSID");
        if (v25)
        {
          CFIndex v26 = v25;
          CFTypeID TypeID = CFStringGetTypeID();
          if (TypeID == CFGetTypeID(v26)) {
            *(void *)(a1 + 584_Block_object_dispose(va, 8) = CFStringCreateCopy(kCFAllocatorDefault, v26);
          }
        }

        CFNumberRef v28 = sub_1000951FC((uint64_t)a3, @"PRIVATE_MAC_ADDRESS");
        if (v28
          && (v29 = v28, CFTypeID v30 = CFDictionaryGetTypeID(), v30 == CFGetTypeID(v29))
          && (unsigned int Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v29, @"PRIVATE_MAC_ADDRESS_VALUE"),
              sub_10003B498(Value)))
        {
          *CFMutableArrayRef v23 = 1;
          if (Value)
          {
            CFTypeID v32 = CFDataGetTypeID();
            if (v32 == CFGetTypeID(Value)) {
              *(void *)(a1 + 5856) = CFDataCreateCopy(kCFAllocatorDefault, Value);
            }
          }
        }

        else
        {
          *CFMutableArrayRef v23 = 0;
        }

        CFNumberRef v33 = (const __CFBoolean *)sub_1000951FC((uint64_t)a3, @"MacAddressRandomisationTagMigratedNetwork");
        if (v33 && v33 == kCFBooleanTrue)
        {
          *(_BYTE *)(a1 + 5865) = 1;
          CFIndex v34 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s WFMacRandomisation : Network <%@> we are associating to is a migrated network", "__WiFiDeviceRecordLastAttemptedMacInfo", sub_100095BC8(a3) message];
          }
          objc_autoreleasePoolPop(v34);
        }

        else
        {
          *(_BYTE *)(a1 + 5865) = 0;
        }

        CFIndex v12 = v62;
        sub_100037928((uint64_t)a3, a1 + 5868);
        a2 = v60;
      }

      if ((*(_BYTE *)(a1 + 32) & 2) != 0) {
        CFBooleanRef v35 = kCFBooleanTrue;
      }
      else {
        CFBooleanRef v35 = kCFBooleanFalse;
      }
      CFDictionarySetValue(v19, @"FT_ENABLED", v35);
      if ((*(_BYTE *)(a1 + 34) & 0x10) != 0) {
        CFBooleanRef v36 = kCFBooleanTrue;
      }
      else {
        CFBooleanRef v36 = kCFBooleanFalse;
      }
      CFDictionarySetValue(v19, @"80211W_ENABLED", v36);
      if ((*(_BYTE *)(a1 + 35) & 8) != 0) {
        CFBooleanRef v37 = kCFBooleanTrue;
      }
      else {
        CFBooleanRef v37 = kCFBooleanFalse;
      }
      CFDictionarySetValue(v19, @"FAST_ENTERPRISE_NETWORK_SUPPORTED_DEVICE", v37);
      else {
        CFBooleanRef v38 = kCFBooleanFalse;
      }
      CFDictionarySetValue(v19, @"INSTANT_HOTSPOT_ASSOC", v38);
      else {
        CFBooleanRef v39 = kCFBooleanFalse;
      }
      CFDictionarySetValue(v19, @"AUTO_INSTANT_HOTSPOT_ASSOC", v39);
      CFRange v40 = sub_100096BF4((uint64_t)a3, @"TransitionDisabledFlags");
      uint64_t valuePtr = (uint64_t)v40;
      if (byte_100219FA1)
      {
        CFRange v41 = v40;
        if (!*(_DWORD *)(a1 + 5936) || [v17 isAllowedInLockdownMode])
        {
          CFRange v42 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: Applying APPLE80211_TRANS_DISABLED_TKIP because lockdown mode is enabled while joining secure network (%@)", "__WiFiDeviceAssociateLowLevel", v17 message];
          }
          objc_autoreleasePoolPop(v42);
          uint64_t valuePtr = (unint64_t)v41 | 0x10;
        }
      }

      CFNumberRef v43 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
      if (v43)
      {
        CFNumberRef v44 = v43;
        CFDictionarySetValue(v19, @"TRANS_DISABLED_FLAGS_ASSOC", v43);
        CFRelease(v44);
      }

      uint64_t v45 = (uint64_t)a2;
      if ((_os_feature_enabled_impl("CoreWiFi", "Figaro5GTDD") & 1) == 0)
      {
        BOOL v46 = a3 && sub_10009DF44((uint64_t)a3);
        sub_1000537B4(a1, v46);
      }

      sub_10004CC70(a1, a3, 0);
      uint64_t v47 = sub_1000446C8(a1, a2);
      if (v47)
      {
        CFTypeRef v48 = v47;
        CFTypeID v49 = CFGetTypeID(v47);
        if (v49 == sub_10012FE70())
        {
          uint64_t v15 = sub_100131F6C(v48, v45, (uint64_t)v19, a4, 1, v61, v63);
        }

        else
        {
          unsigned int v50 = 0;
          uint64_t v15 = 3766617154LL;
          *(void *)(a1 + 4760) = v61;
          *(void *)(a1 + 476_Block_object_dispose(va, 8) = v63;
          while (1)
          {
            BOOL v64 = [v13 disable6EMode] == (id)2;
            for (int i = 6; ; --i)
            {
              int v52 = Apple80211Set(*(void *)(a1 + 16), 422LL, 0LL, &v64, 4LL);
              if (v52 != -3905 && v52 != 61 && v52 != 16) {
                break;
              }
              if (!i) {
                break;
              }
              usleep(0x7A120u);
            }

            uint64_t v54 = Apple80211AssociateAsync(*(void *)(a1 + 16), v19, a4);
            if ((_DWORD)v54 != -528350142) {
              break;
            }
            usleep(0xC8u);
            if (v50++ >= 5) {
              goto LABEL_78;
            }
          }

          uint64_t v15 = v54;
LABEL_78:
          CFIndex v12 = v62;
        }

        uint64_t v56 = *(const void **)(a1 + 5832);
        if (v56)
        {
          CFRelease(v56);
          *(void *)(a1 + 5832) = 0LL;
        }

        *(void *)(a1 + 5832) = sub_100094E60((uint64_t)kCFAllocatorDefault, (uint64_t)a3);
        if ((_DWORD)v15)
        {
          size_t v57 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:4, "Failed to associate with %@: %d", sub_100095BC8(a3), v15 message];
          }
          objc_autoreleasePoolPop(v57);
          sub_100027010(a1, v15, a3, *(_DWORD *)(a1 + 5872));
        }
      }

      else
      {
        CFNumberRef v59 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:4, "Unknown interface %@", a2 message];
        }
        objc_autoreleasePoolPop(v59);
        uint64_t v15 = 0LL;
      }

      CFRelease(v19);
    }

    else
    {
      uint64_t v15 = 4294963396LL;
    }
  }

  objc_autoreleasePoolPop(v12);
  return v15;
}

void sub_10004EC40(uint64_t a1, const void *a2, int a3)
{
}

void sub_10004EC48(uint64_t a1)
{
}

uint64_t sub_10004EC50(uint64_t a1, CFTypeRef cf, unsigned int a3, int a4)
{
  *(_DWORD *)(a1 + 5800) = a4;
  *(void *)(a1 + 5912) = 0LL;
  int v8 = *(const void **)(a1 + 5920);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 5920) = 0LL;
  }

  if ((a4 - 1000) <= 0xB && ((1 << (a4 + 24)) & 0x80B) != 0)
  {
    int v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: user-initiated disconnect or Trigger Disconnect (reason=%@)", "WiFiDeviceDisassociate", sub_10003B050(a4) message];
    }
    objc_autoreleasePoolPop(v9);
    return sub_10004ED80(a1, cf, v10, *(_DWORD *)(a1 + 5800), "WiFiDeviceDisassociate", 10627LL);
  }

  else
  {
    CFTypeRef v12 = CFRetain(cf);
    return sub_100045368(a1, 2u, 0LL, (uint64_t)v12, a3 | 0xAAAAAAAA00000000LL, 0LL, 0LL, 0LL, 0LL);
  }

uint64_t sub_10004ED80(uint64_t a1, const void *a2, uint64_t a3, int a4, const char *a5, uint64_t a6)
{
  unint64_t v11 = objc_autoreleasePoolPush();
  CFTypeRef v12 = sub_1000446C8(a1, a2);
  *(void *)(a1 + 5912) = 0LL;
  uint64_t v13 = *(const void **)(a1 + 5920);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 5920) = 0LL;
  }

  if (!v12)
  {
    CFStringRef v27 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "Unknown interface %@", a2 message];
    }
    objc_autoreleasePoolPop(v27);
    goto LABEL_39;
  }

  CFTypeID v14 = CFGetTypeID(v12);
  if (v14 == sub_10012FE70())
  {
    uint64_t v15 = sub_100132120((uint64_t)v12);
    goto LABEL_34;
  }

  uint64_t v16 = 9LL;
  switch(a4)
  {
    case 1000:
    case 1003:
    case 1009:
    case 1010:
      break;
    case 1001:
    case 1008:
    case 1013:
      uint64_t v16 = 8LL;
      break;
    case 1002:
      uint64_t v16 = 5LL;
      break;
    case 1004:
      uint64_t v16 = 6LL;
      break;
    case 1005:
      uint64_t v16 = 1LL;
      break;
    case 1006:
    case 1007:
      uint64_t v16 = 7LL;
      break;
    case 1011:
      goto LABEL_10;
    case 1012:
      uint64_t v16 = 3LL;
      break;
    default:
      if (a4) {
LABEL_10:
      }
        uint64_t v16 = 10LL;
      break;
  }

  int valuePtr = v16;
  CFTypeRef v17 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    CFMutableDictionaryRef v18 = "";
    if (a5) {
      CFMutableDictionaryRef v18 = a5;
    }
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "asked to Disassociate by <%s:%d> reason =<%d> \n",  v18,  a6,  v16);
  }

  objc_autoreleasePoolPop(v17);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
LABEL_39:
    uint64_t v15 = 4294963396LL;
    goto LABEL_34;
  }

  CFMutableDictionaryRef v20 = Mutable;
  CFNumberRef v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (!v21)
  {
    CFRelease(v20);
    goto LABEL_39;
  }

  CFNumberRef v22 = v21;
  if (a4 && !*(_DWORD *)(a1 + 5800)) {
    *(_DWORD *)(a1 + 5800) = a4;
  }
  CFDictionaryAddValue(v20, @"DISASSOC_REASON", v21);
  for (int i = 6; ; --i)
  {
    uint64_t v24 = Apple80211DisassociateExt(*(void *)(a1 + 16), v20);
    uint64_t v15 = v24;
    if ((_DWORD)v24 != -3905 && (_DWORD)v24 != 61 && (_DWORD)v24 != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }

  CFRelease(v20);
  CFRelease(v22);
LABEL_34:
  objc_autoreleasePoolPop(v11);
  return v15;
}

uint64_t sub_10004EFE0(uint64_t a1, CFTypeRef cf, unsigned int a3)
{
  unint64_t v5 = a3 | 0xAAAAAAAA00000000LL;
  CFTypeRef v6 = CFRetain(cf);
  uint64_t v7 = sub_100045368(a1, 0xFu, 0LL, (uint64_t)v6, v5, 0LL, 0LL, 0LL, 0LL);
  uint64_t v8 = v7;
  if (cf && (_DWORD)v7) {
    CFRelease(cf);
  }
  return v8;
}

uint64_t sub_10004F068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v12 = a3;
  unint64_t v5 = objc_autoreleasePoolPush();
  CFTypeRef v6 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s, mode: %d", "_WiFiDeviceSet6GDisableMode", a3);
  }
  objc_autoreleasePoolPop(v6);
  for (int i = 6; ; --i)
  {
    uint64_t v8 = Apple80211Set(*(void *)(a1 + 16), 422LL, 0LL, &v12, 4LL);
    uint64_t v9 = v8;
    if ((_DWORD)v8 != -3905 && (_DWORD)v8 != 61 && (_DWORD)v8 != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }

  objc_autoreleasePoolPop(v5);
  return v9;
}

CFTypeRef sub_10004F138(uint64_t a1)
{
  cuint64_t f = 0LL;
  if (a1)
  {
    CFTypeRef result = *(CFTypeRef *)(a1 + 5792);
    if (!result)
    {
      for (int i = 6; ; --i)
      {
        uint64_t v4 = Apple80211CopyValue(*(void *)(a1 + 16), 44LL, 0LL, &cf);
        uint64_t v5 = v4;
        if ((int)v4 <= 15)
        {
          if ((_DWORD)v4 != -3905) {
            break;
          }
        }

        else if ((_DWORD)v4 != 61 && (_DWORD)v4 != 16)
        {
          goto LABEL_14;
        }

        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }

      if (!(_DWORD)v4)
      {
        CFTypeRef result = cf;
        *(void *)(a1 + 5792) = cf;
        return result;
      }

void sub_10004F26C(uint64_t a1, int a2)
{
  uint64_t v4 = (_BYTE *)(a1 + 5688);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 5696));
  if (a2 && *(void *)(a1 + 5672))
  {
    v4[32] = 1;
    CFTypeRef v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"scanCache: Defering purging scan cache"];
    }
    objc_autoreleasePoolPop(v6);
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"scanCache: Purging scan cache"];
    }
    objc_autoreleasePoolPop(v7);
    if (Count) {
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 5696));
    }
    uint64_t v8 = *(const void **)(a1 + 5672);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 5672) = 0LL;
    }

    uint64_t v9 = *(const void **)(a1 + 5680);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 5680) = 0LL;
    }

    *uint64_t v4 = 0;
  }

void sub_10004F358(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3 message:"gasCache: Purging GAS cache"];
  }
  objc_autoreleasePoolPop(v2);
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 5752))) {
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 5752));
  }
  uint64_t v3 = *(const void **)(a1 + 5728);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 572_Block_object_dispose(va, 8) = 0LL;
  }

  uint64_t v4 = *(const void **)(a1 + 5736);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 5736) = 0LL;
  }

double sub_10004F3D8(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 4304);
  }
  else {
    return 0.0;
  }
}

uint64_t sub_10004F3EC(uint64_t result, double a2)
{
  if (result)
  {
    *(double *)(result + 4304) = a2;
    return 1LL;
  }

  return result;
}

uint64_t sub_10004F3FC(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 4324);
  }
  return result;
}

uint64_t sub_10004F408(uint64_t a1, uint64_t a2, const __CFDictionary *a3, void *a4)
{
  uint64_t v17 = 0LL;
  CFMutableDictionaryRef v18 = &v17;
  uint64_t v19 = 0x2020000000LL;
  uint64_t v20 = 0LL;
  *a4 = 0LL;
  CFTypeRef v6 = sub_10012FED0(a1, (uint64_t)kCFAllocatorDefault, a3, *(void *)(a1 + 64));
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = sub_100130810((uint64_t)v6);
    *a4 = v8;
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 5784), v8, v7);
    uint64_t v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: Created Virtual Interface %@ with role %@", "WiFiDeviceVirtualInterfaceCreate", *a4, sub_100130530((uint64_t)v7) message];
    }
    objc_autoreleasePoolPop(v9);
    if (*(void *)(a1 + 64))
    {
      CFTypeRef v10 = (CFTypeRef)*a4;
      if (*a4) {
        CFTypeRef v10 = CFRetain(v10);
      }
      v18[3] = (uint64_t)v10;
      CFRetain((CFTypeRef)a1);
      unint64_t v11 = *(dispatch_queue_s **)(a1 + 64);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10004F5F4;
      block[3] = &unk_1001E2D48;
      void block[4] = &v17;
      void block[5] = a1;
      dispatch_async(v11, block);
    }

    else
    {
      int v12 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null queue.", "WiFiDeviceVirtualInterfaceCreate");
      }
      objc_autoreleasePoolPop(v12);
    }

    CFRelease(v7);
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v15 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4 message:"Error creating virtual interface instance"];
    }
    objc_autoreleasePoolPop(v15);
    uint64_t v13 = 4294963394LL;
  }

  _Block_object_dispose(&v17, 8);
  return v13;
}

void sub_10004F5DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10004F5F4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2[8])
  {
    uint64_t v3 = (void (*)(void *, uint64_t, void, uint64_t))v2[637];
    if (v3)
    {
      uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      if (v4)
      {
        v3(v2, v4, v2[638], 1LL);
        uint64_t v5 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
        if (v5)
        {
          CFRelease(v5);
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
        }
      }
    }

    CFRelease(*(CFTypeRef *)(a1 + 40));
  }

  else
  {
    CFRelease(v2);
    CFTypeRef v6 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
    }
  }

uint64_t sub_10004F694(void *a1, const void *a2)
{
  uint64_t v4 = sub_1000446C8((uint64_t)a1, a2);
  uint64_t v23 = 0LL;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2020000000LL;
  uint64_t v26 = 0LL;
  if (!v4)
  {
    CFNumberRef v21 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "Unknown interface %@", a2 message];
    }
    goto LABEL_31;
  }

  uint64_t v5 = (uint64_t)v4;
  CFTypeID v6 = CFGetTypeID(v4);
  if (v6 != sub_10012FE70())
  {
    CFNumberRef v21 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%@ is not a virtual interface", a2 message];
    }
LABEL_31:
    objc_autoreleasePoolPop(v21);
    goto LABEL_32;
  }

  uint64_t v7 = sub_10006B4D8(v5);
  if (!v7)
  {
LABEL_32:
    uint64_t v10 = 4294963396LL;
    goto LABEL_26;
  }

  int v8 = 7;
  while (1)
  {
    uint64_t v9 = Apple80211Set(a1[2], 95LL, 0LL, v7, 8LL);
    uint64_t v10 = v9;
    if ((int)v9 <= 15)
    {
      if ((_DWORD)v9 != -3905) {
        break;
      }
    }

    else if ((_DWORD)v9 != 61 && (_DWORD)v9 != 16)
    {
      goto LABEL_26;
    }

    if (!--v8) {
      break;
    }
    usleep(0x7A120u);
  }

  if (!(_DWORD)v9)
  {
    int v12 = (__CFDictionary *)a1[723];
    uint64_t v13 = sub_100130810(v5);
    CFDictionaryRemoveValue(v12, v13);
    CFTypeID v14 = objc_autoreleasePoolPush();
    uint64_t v15 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      uint64_t v16 = sub_100130810(v5);
      [v15 WFLog:3, "WiFiDeviceDeleteWiFiDirectInterface: Deleting Virtual Interface %@ with role %@", v16, sub_100130530(v5) message];
    }

    objc_autoreleasePoolPop(v14);
    if (a1[8])
    {
      if (a2) {
        CFTypeRef v17 = CFRetain(a2);
      }
      else {
        CFTypeRef v17 = 0LL;
      }
      v24[3] = (uint64_t)v17;
      CFRetain(a1);
      uint64_t v19 = (dispatch_queue_s *)a1[8];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10004F91C;
      block[3] = &unk_1001E2D48;
      void block[4] = &v23;
      void block[5] = a1;
      dispatch_async(v19, block);
    }

    else
    {
      CFMutableDictionaryRef v18 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null queue.", "WiFiDeviceVirtualInterfaceDelete");
      }
      objc_autoreleasePoolPop(v18);
    }

    uint64_t v10 = 0LL;
  }

void sub_10004F900( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10004F91C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2[8])
  {
    uint64_t v3 = (void (*)(void *, uint64_t, void, void))v2[637];
    if (v3)
    {
      uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      if (v4)
      {
        v3(v2, v4, v2[638], 0LL);
        uint64_t v5 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
        if (v5)
        {
          CFRelease(v5);
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
        }
      }
    }

    CFRelease(*(CFTypeRef *)(a1 + 40));
  }

  else
  {
    CFRelease(v2);
    CFTypeID v6 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
    }
  }

void sub_10004F9BC(uint64_t a1)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v1 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v5 = v1;
  __int128 v6 = v1;
  *(_OWORD *)cuint64_t f = v1;
  *(_OWORD *)uint64_t v4 = v1;
  if (!sub_100128C88(*(void *)(a1 + 176), cf, 0x48uLL, 0LL))
  {
    switch(LODWORD(cf[0]))
    {
      case 0:
      case 3:
      case 5:
      case 9:
      case 0xB:
      case 0xC:
      case 0xE:
        if (cf[1])
        {
          CFRelease(cf[1]);
          cf[1] = 0LL;
        }

        CFTypeRef v2 = v4[0];
        if (v4[0]) {
          goto LABEL_8;
        }
        break;
      case 1:
        if (cf[1])
        {
          CFRelease(cf[1]);
          cf[1] = 0LL;
        }

        if (v4[0])
        {
          CFRelease(v4[0]);
          v4[0] = 0LL;
        }

        CFTypeRef v2 = v4[1];
        if (v4[1]) {
          goto LABEL_8;
        }
        break;
      case 2:
      case 4:
      case 6:
      case 7:
      case 8:
      case 0xD:
      case 0xF:
        CFTypeRef v2 = cf[1];
        if (cf[1]) {
          goto LABEL_8;
        }
        break;
      case 0xA:
        if (cf[1])
        {
          CFRelease(cf[1]);
          cf[1] = 0LL;
        }

        if (v4[0])
        {
          CFRelease(v4[0]);
          v4[0] = 0LL;
        }

        CFTypeRef v2 = (CFTypeRef)*((void *)&v5 + 1);
        if (*((void *)&v5 + 1)) {
LABEL_8:
        }
          CFRelease(v2);
        break;
      default:
        return;
    }
  }

uint64_t sub_10004FAA4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(result + 5080) = a3;
  *(void *)(result + 508_Block_object_dispose(va, 8) = a4;
  return result;
}

uint64_t sub_10004FAB0(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6 = sub_1000446C8(a1, a2);
  return sub_1001322B4((uint64_t)v6, a3, a4);
}

uint64_t sub_10004FADC(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6 = sub_1000446C8(a1, a2);
  return sub_1001322BC((uint64_t)v6, a3, a4);
}

const void *sub_10004FB0C(uint64_t a1)
{
  uint64_t valuePtr = 6LL;
  CFNumberRef v2 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
  unsigned int Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784));
  uint64_t v4 = Count;
  if (!Count)
  {
    uint64_t v16 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4 message:"No virtual interfaces found"];
    }
    objc_autoreleasePoolPop(v16);
LABEL_17:
    CFTypeID v14 = 0LL;
    if (!v2) {
      return v14;
    }
    goto LABEL_12;
  }

  size_t v5 = 8LL * Count;
  __int128 v6 = (const void **)malloc(v5);
  if (!v6) {
    goto LABEL_17;
  }
  unint64_t v7 = v6;
  int v8 = (const void **)malloc(v5);
  if (v8)
  {
    uint64_t v9 = v8;
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 5784), v7, v8);
    unint64_t v10 = 0LL;
    uint64_t v11 = 8 * v4;
    while (1)
    {
      CFTypeID v12 = CFGetTypeID(v9[v10 / 8]);
      if (v12 == sub_10012FE70())
      {
        uint64_t v13 = sub_100130530((uint64_t)v9[v10 / 8]);
        if (CFEqual(v13, v2)) {
          break;
        }
      }

      v10 += 8LL;
      if (v11 == v10)
      {
        CFTypeID v14 = 0LL;
        goto LABEL_10;
      }
    }

    CFTypeID v14 = v9[v10 / 8];
LABEL_10:
    free(v9);
  }

  else
  {
    CFTypeID v14 = 0LL;
  }

  free(v7);
  if (v2) {
LABEL_12:
  }
    CFRelease(v2);
  return v14;
}

const void *sub_10004FC58(uint64_t a1)
{
  uint64_t valuePtr = 7LL;
  CFNumberRef v2 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
  unsigned int Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784));
  uint64_t v4 = Count;
  if (!Count)
  {
    uint64_t v16 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4 message:"No virtual interfaces found"];
    }
    objc_autoreleasePoolPop(v16);
LABEL_17:
    CFTypeID v14 = 0LL;
    if (!v2) {
      return v14;
    }
    goto LABEL_12;
  }

  size_t v5 = 8LL * Count;
  __int128 v6 = (const void **)malloc(v5);
  if (!v6) {
    goto LABEL_17;
  }
  unint64_t v7 = v6;
  int v8 = (const void **)malloc(v5);
  if (v8)
  {
    uint64_t v9 = v8;
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 5784), v7, v8);
    unint64_t v10 = 0LL;
    uint64_t v11 = 8 * v4;
    while (1)
    {
      CFTypeID v12 = CFGetTypeID(v9[v10 / 8]);
      if (v12 == sub_10012FE70())
      {
        uint64_t v13 = sub_100130530((uint64_t)v9[v10 / 8]);
        if (CFEqual(v13, v2)) {
          break;
        }
      }

      v10 += 8LL;
      if (v11 == v10)
      {
        CFTypeID v14 = 0LL;
        goto LABEL_10;
      }
    }

    CFTypeID v14 = v9[v10 / 8];
LABEL_10:
    free(v9);
  }

  else
  {
    CFTypeID v14 = 0LL;
  }

  free(v7);
  if (v2) {
LABEL_12:
  }
    CFRelease(v2);
  return v14;
}

const void *sub_10004FDA4(uint64_t a1)
{
  uint64_t valuePtr = 10LL;
  CFNumberRef v2 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
  unsigned int Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 5784));
  uint64_t v4 = Count;
  if (!Count)
  {
    uint64_t v16 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4 message:"No virtual interfaces found"];
    }
    objc_autoreleasePoolPop(v16);
LABEL_17:
    CFTypeID v14 = 0LL;
    if (!v2) {
      return v14;
    }
    goto LABEL_12;
  }

  size_t v5 = 8LL * Count;
  __int128 v6 = (const void **)malloc(v5);
  if (!v6) {
    goto LABEL_17;
  }
  unint64_t v7 = v6;
  int v8 = (const void **)malloc(v5);
  if (v8)
  {
    uint64_t v9 = v8;
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 5784), v7, v8);
    unint64_t v10 = 0LL;
    uint64_t v11 = 8 * v4;
    while (1)
    {
      CFTypeID v12 = CFGetTypeID(v9[v10 / 8]);
      if (v12 == sub_10012FE70())
      {
        uint64_t v13 = sub_100130530((uint64_t)v9[v10 / 8]);
        if (CFEqual(v13, v2)) {
          break;
        }
      }

      v10 += 8LL;
      if (v11 == v10)
      {
        CFTypeID v14 = 0LL;
        goto LABEL_10;
      }
    }

    CFTypeID v14 = v9[v10 / 8];
LABEL_10:
    free(v9);
  }

  else
  {
    CFTypeID v14 = 0LL;
  }

  free(v7);
  if (v2) {
LABEL_12:
  }
    CFRelease(v2);
  return v14;
}

uint64_t sub_10004FEF0(uint64_t a1, const void *a2, const void *a3)
{
  size_t v5 = sub_10004FB0C(a1);
  if (v5) {
    return sub_1001322CC((int)v5, a2, a3);
  }
  unint64_t v7 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:4 message:"No AWDL interface found."];
  }
  objc_autoreleasePoolPop(v7);
  return 4294963393LL;
}

uint64_t sub_10004FF60(uint64_t a1, const __CFString *a2)
{
  uint64_t v2 = 0LL;
  if (a1 && a2)
  {
    if (sub_100040CF8(a1)
      && (size_t v5 = (const void *)sub_100040CF8(a1), CFEqual(a2, v5))
      && (CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  a2,  kSCEntNetLink)) != 0LL)
    {
      unint64_t v7 = NetworkInterfaceEntity;
      int v8 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), NetworkInterfaceEntity);
      if (v8)
      {
        uint64_t v9 = v8;
        unsigned int Value = CFDictionaryGetValue(v8, kSCPropNetLinkActive);
        if (Value)
        {
          uint64_t v2 = CFEqual(Value, kCFBooleanTrue);
        }

        else
        {
          uint64_t v13 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null availabilityRef.",  "WiFiDeviceGetAwdlAvailability");
          }
          objc_autoreleasePoolPop(v13);
          uint64_t v2 = 0LL;
        }

        CFRelease(v7);
        unint64_t v7 = (const __CFString *)v9;
      }

      else
      {
        CFTypeID v12 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null state dictRef.",  "WiFiDeviceGetAwdlAvailability");
        }
        objc_autoreleasePoolPop(v12);
        uint64_t v2 = 0LL;
      }

      CFRelease(v7);
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

uint64_t sub_1000500D4(uint64_t a1, const void *a2, unsigned int *a3)
{
  unsigned __int8 v14 = 0;
  __int128 v6 = sub_1000446C8(a1, a2);
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    CFTypeID v8 = CFGetTypeID(v6);
    if (v8 == sub_10012FE70())
    {
      return sub_100131720(v7, a3);
    }

    else
    {
      for (int i = 6; ; --i)
      {
        int v11 = Apple80211Get(*(void *)(a1 + 16), 117LL, 0LL, &v14, 1LL);
        if (v11 != -3905 && v11 != 61 && v11 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }

      return v14;
    }
  }

  else
  {
    uint64_t v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "Unknown interface %@", a2 message];
    }
    objc_autoreleasePoolPop(v13);
    return 0LL;
  }

uint64_t sub_1000501D0(uint64_t a1, const void *a2, const __CFArray *a3)
{
  uint64_t v3 = 4294963396LL;
  if (a1 && a3)
  {
    __int128 v6 = sub_1000446C8(a1, a2);
    if (!v6)
    {
      uint64_t v9 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4, "Unknown interface %@", a2 message];
      }
      uint64_t v3 = 4294963396LL;
      goto LABEL_13;
    }

    uint64_t v7 = (uint64_t)v6;
    CFTypeID v8 = CFGetTypeID(v6);
    if (v8 == sub_10012FE70())
    {
      uint64_t v3 = sub_1001324B0(v7, a3);
      if ((_DWORD)v3)
      {
        uint64_t v9 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "Error setting LTE restricted channels %d", v3);
        }
LABEL_13:
        objc_autoreleasePoolPop(v9);
      }
    }

    else
    {
      return 4294963396LL;
    }
  }

  return v3;
}

uint64_t sub_1000502B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294963396LL;
  if (a1 && a2)
  {
    for (int i = 6; ; --i)
    {
      uint64_t v6 = Apple80211Set(*(void *)(a1 + 16), 51LL, 0LL, a2, 8LL);
      uint64_t v2 = v6;
      if ((int)v6 <= 15)
      {
        if ((_DWORD)v6 != -3905) {
          break;
        }
      }

      else if ((_DWORD)v6 != 61 && (_DWORD)v6 != 16)
      {
        goto LABEL_15;
      }

      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }

    if (!(_DWORD)v6) {
      return v2;
    }
LABEL_15:
    uint64_t v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "Error setting locale %d", v2);
    }
    objc_autoreleasePoolPop(v9);
  }

  return v2;
}

uint64_t sub_100050388(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 4294963396LL;
  }
  for (int i = 6; ; --i)
  {
    uint64_t v5 = Apple80211Get(*(void *)(a1 + 16), 51LL, 0LL, a2, 8LL);
    uint64_t v6 = v5;
    if ((int)v5 <= 15)
    {
      if ((_DWORD)v5 != -3905) {
        break;
      }
    }

    else if ((_DWORD)v5 != 61 && (_DWORD)v5 != 16)
    {
      goto LABEL_15;
    }

    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }

  if (!(_DWORD)v5) {
    return v6;
  }
LABEL_15:
  uint64_t v9 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "Error copying locale %d", v6);
  }
  objc_autoreleasePoolPop(v9);
  return v6;
}

uint64_t sub_10005045C(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 4294963396LL;
  }
  for (int i = 6; ; --i)
  {
    uint64_t v5 = Apple80211Get(*(void *)(a1 + 16), 423LL, 0LL, a2, 4LL);
    uint64_t v6 = v5;
    if ((int)v5 <= 15)
    {
      if ((_DWORD)v5 != -3905) {
        break;
      }
    }

    else if ((_DWORD)v5 != 61 && (_DWORD)v5 != 16)
    {
      goto LABEL_15;
    }

    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }

  if (!(_DWORD)v5) {
    return v6;
  }
LABEL_15:
  uint64_t v9 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "WiFiMC : Error getting band support %d", v6);
  }
  objc_autoreleasePoolPop(v9);
  return v6;
}

uint64_t sub_100050530(uint64_t a1, uint64_t a2)
{
  int v4 = _os_feature_enabled_impl("WiFiManager", "PrivateMacRotation");
  if (!a1) {
    return 4294963396LL;
  }
  if (v4)
  {
    for (int i = 6; ; --i)
    {
      uint64_t v6 = Apple80211Get(*(void *)(a1 + 16), 552LL, 0LL, a2, 4LL);
      uint64_t v7 = v6;
      if ((int)v6 <= 15)
      {
        if ((_DWORD)v6 != -3905) {
          break;
        }
      }

      else if ((_DWORD)v6 != 61 && (_DWORD)v6 != 16)
      {
        goto LABEL_20;
      }

      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }

    if (!(_DWORD)v6) {
      return v7;
    }
LABEL_20:
    uint64_t v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "WiFiMC : Error getting APPLE80211_IOC_DEVICE_TYPE_IN_DHCP_ALLOW %d",  v7);
    }
  }

  else
  {
    uint64_t v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"WFMacRandomisation Rotation disabled "];
    }
    uint64_t v7 = 4294963396LL;
  }

  objc_autoreleasePoolPop(v9);
  return v7;
}

uint64_t sub_10005064C(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100050654(a1, a2, a3, a4, a5, a6, 0LL);
}

uint64_t sub_100050654( uint64_t a1, CFTypeRef cf, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  CFTypeRef v13 = CFRetain(cf);
  CFTypeRef v14 = CFRetain(a3);
  uint64_t v15 = sub_100045368(a1, 9u, a4, (uint64_t)v13, (uint64_t)v14, a5, a6, 0LL, a7);
  uint64_t v16 = v15;
  if (a3 && (_DWORD)v15) {
    CFRelease(a3);
  }
  return v16;
}

uint64_t sub_1000506F8(uint64_t a1, uint64_t a2, uint64_t a3, CFArrayRef theArray)
{
  uint64_t v4 = 4294963396LL;
  if (a1 && a2)
  {
    if ((*(_BYTE *)(a1 + 35) & 0x44) != 0)
    {
      uint64_t v7 = theArray;
      CFMutableDictionaryRef Mutable = 0LL;
      if ((_DWORD)a3 && theArray)
      {
        if (CFArrayGetCount(theArray)
          && (unint64_t v10 = *(const __CFDictionary **)(a1 + 4704)) != 0LL
          && (int valuePtr = 0,
              (unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(v10, @"AWDL_INFO_ASSISTED_DISCOVERY_METRIC")) != 0LL)
          && (CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr), valuePtr == 2))
        {
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
          if (Mutable)
          {
            if (CFArrayGetCount(v7) < 1)
            {
              uint64_t v7 = Mutable;
            }

            else
            {
              CFIndex v12 = 0LL;
              do
              {
                ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v12);
                if (ValueAtIndex)
                {
                  CFTypeRef v14 = ValueAtIndex;
                  CFTypeID v15 = CFGetTypeID(ValueAtIndex);
                  if (v15 == CFDictionaryGetTypeID())
                  {
                    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, v14);
                    if (!CFDictionaryGetValue(MutableCopy, @"RANGING_PEER_FLAGS"))
                    {
                      char v27 = 1;
                      CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &v27);
                      CFDictionarySetValue(MutableCopy, @"RANGING_PEER_FLAGS", v17);
                      if (v17) {
                        CFRelease(v17);
                      }
                      CFMutableDictionaryRef v18 = objc_autoreleasePoolPush();
                      if (qword_100219F60) {
                        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: setting peer flag to indicate Phone Auto Unlock",  "WiFiDeviceSetRangeable");
                      }
                      objc_autoreleasePoolPop(v18);
                    }

                    if (MutableCopy) {
                      uint64_t v19 = MutableCopy;
                    }
                    else {
                      uint64_t v19 = v14;
                    }
                    CFArrayAppendValue(Mutable, v19);
                    if (MutableCopy) {
                      CFRelease(MutableCopy);
                    }
                  }

                  else
                  {
                    CFArrayAppendValue(Mutable, v14);
                  }
                }

                ++v12;
              }

              while (v12 < CFArrayGetCount(v7));
              uint64_t v7 = Mutable;
            }
          }
        }

        else
        {
          CFMutableDictionaryRef Mutable = 0LL;
        }
      }

      for (int i = 6; ; --i)
      {
        uint64_t v21 = *(void *)(a1 + 16);
        CFIndex v22 = v7 ? CFArrayGetCount(v7) : 0LL;
        uint64_t v23 = Apple80211Set(v21, 241LL, (_DWORD)a3 != 0, v7, v22);
        uint64_t v4 = v23;
        if ((_DWORD)v23 != -3905 && (_DWORD)v23 != 61 && (_DWORD)v23 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }

      uint64_t v25 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: ifName %@, set %d, error %d", "WiFiDeviceSetRangeable", a2, a3, v4 message];
      }
      objc_autoreleasePoolPop(v25);
      if (Mutable) {
        CFRelease(Mutable);
      }
    }

    else
    {
      return 4294963389LL;
    }
  }

  return v4;
}

uint64_t sub_1000509CC(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t result = 4294963396LL;
  if (a1 && a2)
  {
    if ((*(_BYTE *)(a1 + 35) & 0x44) != 0) {
      return sub_1000509FC(a1, a2, a3, a4, a5, 0LL, a6);
    }
    else {
      return 4294963389LL;
    }
  }

  return result;
}

uint64_t sub_1000509FC( uint64_t a1, CFTypeRef cf, const void *a3, uint64_t a4, uint64_t a5, void *a6, double a7)
{
  unint64_t v12 = a7 | 0xAAAAAAAA00000000LL;
  CFTypeRef v13 = CFRetain(cf);
  CFTypeRef v14 = CFRetain(a3);
  uint64_t v15 = sub_100045368(a1, 0xCu, 0LL, (uint64_t)v13, (uint64_t)v14, a4, a5, v12, a6);
  uint64_t v16 = v15;
  if (a3 && (_DWORD)v15) {
    CFRelease(a3);
  }
  return v16;
}

uint64_t sub_100050AAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = 4294963396LL;
  if (a1 && a2)
  {
    if ((*(_BYTE *)(a1 + 35) & 0x44) != 0)
    {
      BOOL v9 = a3 != 0;
      for (int i = 6; ; --i)
      {
        uint64_t v11 = Apple80211Set(*(void *)(a1 + 16), 380LL, v9, a4, 8LL);
        uint64_t v4 = v11;
        if ((_DWORD)v11 != -3905 && (_DWORD)v11 != 61 && (_DWORD)v11 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }

      CFTypeRef v13 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        CFTypeRef v14 = "Removed";
        if (a3) {
          CFTypeRef v14 = " Added";
        }
        [(id)qword_100219F60 WFLog:3, "%s: Identifier %s on ifName %@: %@, error %d", "WiFiDeviceSetRangingIdentifier", v14, a2, a4, v4 message];
      }

      objc_autoreleasePoolPop(v13);
    }

    else
    {
      return 4294963389LL;
    }
  }

  return v4;
}

uint64_t sub_100050BC8(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 4294963396LL;
  }
  for (int i = 6; ; --i)
  {
    uint64_t result = Apple80211Set(*(void *)(a1 + 16), 381LL, 0LL, a2, 8LL);
    if ((_DWORD)result != -3905 && (_DWORD)result != 61 && (_DWORD)result != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }

  return result;
}

uint64_t sub_100050C44(uint64_t a1, unsigned int a2)
{
  unsigned int v10 = a2;
  uint64_t v2 = 4294963396LL;
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 112);
    if (v4)
    {
      for (int i = 6; ; --i)
      {
        uint64_t v6 = Apple80211Set(*(void *)(a1 + 16), 258LL, 0LL, &v10, 4LL);
        uint64_t v2 = v6;
        if ((_DWORD)v6 != -3905 && (_DWORD)v6 != 61 && (_DWORD)v6 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }

      CFTypeID v8 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: ifName %@, set %d, error %d", "WiFiDeviceSetThermalIndex", v4, v10, v2 message];
      }
      objc_autoreleasePoolPop(v8);
      *(_DWORD *)(a1 + 5932) = v10;
      -[WiFiUsageMonitor setPowerBudget:andThermalIndex:forInterface:]( +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance"),  "setPowerBudget:andThermalIndex:forInterface:",  *(int *)(a1 + 5928),  *(int *)(a1 + 5932),  *(void *)(a1 + 112));
    }
  }

  return v2;
}

uint64_t sub_100050D3C(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 4294963396LL;
  if (a1 && *(void *)(a1 + 112))
  {
    for (int i = 6; ; --i)
    {
      uint64_t result = Apple80211Get(*(void *)(a1 + 16), 258LL, 0LL, a2, 4LL);
      if ((_DWORD)result != -3905 && (_DWORD)result != 61 && (_DWORD)result != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }

    if (a2) {
      *(_DWORD *)(a1 + 5932) = *a2;
    }
  }

  return result;
}

uint64_t sub_100050DC8(uint64_t a1, uint64_t a2)
{
  uint64_t result = 4294963396LL;
  if (a1 && *(void *)(a1 + 112))
  {
    for (int i = 6; ; --i)
    {
      uint64_t result = Apple80211Get(*(void *)(a1 + 16), 346LL, 0LL, a2, 2056LL);
      if ((_DWORD)result != -3905 && (_DWORD)result != 61 && (_DWORD)result != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
  }

  return result;
}

uint64_t sub_100050E48(uint64_t a1, int a2)
{
  int v10 = a2;
  uint64_t v2 = 4294963396LL;
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 112);
    if (v4)
    {
      for (int i = 6; ; --i)
      {
        uint64_t v6 = Apple80211Set(*(void *)(a1 + 16), 392LL, 0LL, &v10, 4LL);
        uint64_t v2 = v6;
        if ((_DWORD)v6 != -3905 && (_DWORD)v6 != 61 && (_DWORD)v6 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }

      CFTypeID v8 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: ifName %@, error %d", "WiFiDeviceSetPmMode", v4, v2 message];
      }
      objc_autoreleasePoolPop(v8);
    }
  }

  return v2;
}

uint64_t sub_100050F18(uint64_t a1, unsigned int a2)
{
  unsigned int v10 = a2;
  uint64_t v2 = 4294963396LL;
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 112);
    if (v4)
    {
      for (int i = 6; ; --i)
      {
        uint64_t v6 = Apple80211Set(*(void *)(a1 + 16), 261LL, 0LL, &v10, 4LL);
        uint64_t v2 = v6;
        if ((_DWORD)v6 != -3905 && (_DWORD)v6 != 61 && (_DWORD)v6 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }

      CFTypeID v8 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: ifName %@, set %d, error %d", "WiFiDeviceSetPowerBudget", v4, v10, v2 message];
      }
      objc_autoreleasePoolPop(v8);
      *(_DWORD *)(a1 + 592_Block_object_dispose(va, 8) = v10;
      -[WiFiUsageMonitor setPowerBudget:andThermalIndex:forInterface:]( +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance"),  "setPowerBudget:andThermalIndex:forInterface:",  *(int *)(a1 + 5928),  *(int *)(a1 + 5932),  *(void *)(a1 + 112));
    }
  }

  return v2;
}

uint64_t sub_100051010(uint64_t a1)
{
  uint64_t v1 = 4294963396LL;
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 112);
    if (v3)
    {
      for (int i = 6; ; --i)
      {
        uint64_t v5 = Apple80211Set(*(void *)(a1 + 16), 382LL, 0LL, 0LL, 0LL);
        uint64_t v1 = v5;
        if ((_DWORD)v5 != -3905 && (_DWORD)v5 != 61 && (_DWORD)v5 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }

      uint64_t v7 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: ifName %@, error %d", "WiFiDeviceAbortScan", v3, v1 message];
      }
      objc_autoreleasePoolPop(v7);
    }
  }

  return v1;
}

uint64_t sub_1000510DC(uint64_t a1, uint64_t a2)
{
  uint64_t result = 4294963396LL;
  if (a1 && *(void *)(a1 + 112))
  {
    for (int i = 6; ; --i)
    {
      uint64_t result = Apple80211Get(*(void *)(a1 + 16), 348LL, 0LL, a2, 52LL);
      if ((_DWORD)result != -3905 && (_DWORD)result != 61 && (_DWORD)result != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
  }

  return result;
}

uint64_t sub_10005115C(uint64_t a1, uint64_t a2)
{
  uint64_t result = 4294963396LL;
  if (a1 && *(void *)(a1 + 112))
  {
    for (int i = 6; ; --i)
    {
      uint64_t result = Apple80211Get(*(void *)(a1 + 16), 261LL, 0LL, a2, 4LL);
      if ((_DWORD)result != -3905 && (_DWORD)result != 61 && (_DWORD)result != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
  }

  return result;
}

uint64_t sub_1000511DC(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 5928);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1000511F0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 38) >> 4) & 1;
}

uint64_t sub_1000511FC(uint64_t a1, int a2, CFDictionaryRef theDict, CFMutableDictionaryRef *a4)
{
  unsigned int Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugModule");
  if (!Value) {
    return 4294963396LL;
  }
  CFTypeID v8 = (_BYTE *)(a1 + 5760);
  int valuePtr = -1431655766;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  if (valuePtr > 8)
  {
    switch(valuePtr)
    {
      case 9:
        unsigned int v63 = 0;
        if (a1)
        {
          if (theDict)
          {
            BOOL v9 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"DebugCommandValueDict");
            if (v9)
            {
              unsigned int v10 = (const __CFNumber *)CFDictionaryGetValue(v9, @"errorCode");
              if (v10)
              {
                CFNumberGetValue(v10, kCFNumberIntType, &v63);
                uint64_t v11 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: received request to simulate join failure with error code %d",  "__WiFiDeviceSimulateJoinFailure",  v63);
                }
                objc_autoreleasePoolPop(v11);
                uint64_t v12 = 0LL;
                *(_DWORD *)(a1 + 594_Block_object_dispose(va, 8) = v63;
                return v12;
              }

              CFTypeRef v14 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: errorCodeRef is NULL",  "__WiFiDeviceSimulateJoinFailure");
              }
            }

            else
            {
              CFTypeRef v14 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: joinFailureDict is NULL",  "__WiFiDeviceSimulateJoinFailure");
              }
            }
          }

          else
          {
            CFTypeRef v14 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: request is NULL",  "__WiFiDeviceSimulateJoinFailure");
            }
          }
        }

        else
        {
          CFTypeRef v14 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: device is NULL",  "__WiFiDeviceSimulateJoinFailure");
          }
        }

        goto LABEL_77;
      case 10:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
        goto LABEL_23;
      case 11:
        uint64_t v15 = objc_autoreleasePoolPush();
        id v16 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
        if (!theDict)
        {
          size_t v53 = objc_autoreleasePoolPush();
          uint64_t v56 = (void *)qword_100219F60;
          if (!qword_100219F60) {
            goto LABEL_141;
          }
          size_t v57 = "__WiFiDeviceSimulateJoinOrRoamStatusSubState";
          goto LABEL_122;
        }

        CFNumberRef v17 = v16;
        id v18 = -[__CFDictionary objectForKey:](theDict, "objectForKey:", @"DebugCommandValueDict");
        if (!v18)
        {
          size_t v53 = objc_autoreleasePoolPush();
          uint64_t v58 = (void *)qword_100219F60;
          if (!qword_100219F60) {
            goto LABEL_141;
          }
          CFNumberRef v59 = "__WiFiDeviceSimulateJoinOrRoamStatusSubState";
          goto LABEL_125;
        }

        uint64_t v19 = v18;
        id v20 = [v18 objectForKey:@"mode"];
        id v21 = [v19 objectForKey:@"type"];
        if (v21)
        {
          CFIndex v22 = v21;
          if ([v20 isEqualToString:@"clear"])
          {
            uint64_t v23 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL);
            uint64_t v24 = @"IO80211InterfaceSimulateSubStateClear";
LABEL_61:
            [v17 setObject:v23 forKey:v24];
            uint64_t v45 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "%s: %@", "__WiFiDeviceSimulateJoinOrRoamStatusSubState", v17 message];
            }
            objc_autoreleasePoolPop(v45);
            if ([v22 isEqualToString:@"join"])
            {
              if (a1) {
                BOOL v46 = *(const void **)(a1 + 112);
              }
              else {
                BOOL v46 = 0LL;
              }
              int v52 = @"IO80211InterfaceSimulateJoinStatusSubStateParams";
            }

            else
            {
              if (a1) {
                BOOL v46 = *(const void **)(a1 + 112);
              }
              else {
                BOOL v46 = 0LL;
              }
              int v52 = @"IO80211InterfaceSimulateRoamStatusSubStateParams";
            }

            sub_1000447A8(a1, v46, v52, (uint64_t)v17);
            goto LABEL_91;
          }

          if ([v19 objectForKey:@"type"])
          {
            if (![v19 objectForKey:@"subState"])
            {
              size_t v53 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: subState is nil",  "__WiFiDeviceSimulateJoinOrRoamStatusSubState");
              }
              goto LABEL_141;
            }

            if (![v19 objectForKey:@"idx"])
            {
              size_t v53 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: idx is nil",  "__WiFiDeviceSimulateJoinOrRoamStatusSubState");
              }
              goto LABEL_141;
            }

            if (![v19 objectForKey:@"status"])
            {
              size_t v53 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: status is nil",  "__WiFiDeviceSimulateJoinOrRoamStatusSubState");
              }
              goto LABEL_141;
            }

            if (![v19 objectForKey:@"reason"])
            {
              size_t v53 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: reason is nil",  "__WiFiDeviceSimulateJoinOrRoamStatusSubState");
              }
              goto LABEL_141;
            }

            objc_msgSend( v17,  "setObject:forKey:",  objc_msgSend(v19, "objectForKey:", @"subState"),  @"IO80211InterfaceSimulateSubStateType");
            objc_msgSend( v17,  "setObject:forKey:",  objc_msgSend(v19, "objectForKey:", @"idx"),  @"IO80211InterfaceSimulateSubStateIdx");
            objc_msgSend( v17,  "setObject:forKey:",  objc_msgSend(v19, "objectForKey:", @"status"),  @"IO80211InterfaceSimulateSubStateStatus");
            uint64_t v23 = (NSNumber *)[v19 objectForKey:@"reason"];
            uint64_t v24 = @"IO80211InterfaceSimulateSubStateReason";
            goto LABEL_61;
          }
        }

        size_t v53 = objc_autoreleasePoolPush();
        uint64_t v54 = (void *)qword_100219F60;
        if (!qword_100219F60) {
          goto LABEL_141;
        }
        uint64_t v55 = "__WiFiDeviceSimulateJoinOrRoamStatusSubState";
        goto LABEL_128;
      case 12:
        uint64_t v15 = objc_autoreleasePoolPush();
        id v25 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
        if ((*(_BYTE *)(a1 + 38) & 0x10) == 0)
        {
          CFTypeID v60 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: BssBlacklist not supported.. Bailing!",  "__WiFiDeviceConfigBssBlacklist");
          }
          objc_autoreleasePoolPop(v60);
          uint64_t v12 = 4294963393LL;
LABEL_143:
          objc_autoreleasePoolPop(v15);
          return v12;
        }

        if (theDict)
        {
          uint64_t v26 = v25;
          id v27 = -[__CFDictionary objectForKey:](theDict, "objectForKey:", @"DebugCommandValueDict");
          if (v27)
          {
            CFNumberRef v28 = v27;
            if ([v27 objectForKey:@"type"])
            {
              id v29 = [v28 objectForKey:@"type"];
              if ([v29 isEqualToString:@"set"])
              {
                if ([v28 objectForKey:@"mode"])
                {
                  if (![v28 objectForKey:@"bssids"])
                  {
                    size_t v53 = objc_autoreleasePoolPush();
                    if (qword_100219F60) {
                      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: bssids nil",  "__WiFiDeviceConfigBssBlacklist");
                    }
                    goto LABEL_141;
                  }

                  CFTypeID v30 = +[NSMutableArray arrayWithArray:]( NSMutableArray,  "arrayWithArray:",  [v28 objectForKey:@"bssids"]);
                  objc_msgSend( v26,  "setObject:forKey:",  objc_msgSend(v28, "objectForKey:", @"mode"),  @"IO80211InterfaceBssidBlacklistMode");
                  CFStringRef v31 = @"IO80211InterfaceBssidBlacklistBssids";
                  CFTypeID v32 = v26;
                  CFNumberRef v33 = v30;
                  goto LABEL_69;
                }
              }

              else
              {
                if ([v28 objectForKey:@"mode"])
                {
                  CFNumberRef v33 = (NSMutableArray *)[v28 objectForKey:@"mode"];
                  CFStringRef v31 = @"IO80211InterfaceBssidBlacklistMode";
                  CFTypeID v32 = v26;
LABEL_69:
                  [v32 setObject:v33 forKey:v31];
                  uint64_t v47 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    [(id)qword_100219F60 WFLog:3, "%s: %@", "__WiFiDeviceConfigBssBlacklist", v26 message];
                  }
                  objc_autoreleasePoolPop(v47);
                  sub_10003EC6C(a1, *(const void **)(a1 + 112), 372LL, 0LL, (uint64_t)v26);
LABEL_91:
                  uint64_t v12 = 0LL;
                  goto LABEL_143;
                }
              }

              size_t v53 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: mode is nil",  "__WiFiDeviceConfigBssBlacklist");
              }
              goto LABEL_141;
            }

            size_t v53 = objc_autoreleasePoolPush();
            uint64_t v54 = (void *)qword_100219F60;
            if (!qword_100219F60) {
              goto LABEL_141;
            }
            uint64_t v55 = "__WiFiDeviceConfigBssBlacklist";
LABEL_128:
            objc_msgSend(v54, "WFLog:message:", 4, "%s: type is nil", v55);
          }

          else
          {
            size_t v53 = objc_autoreleasePoolPush();
            uint64_t v58 = (void *)qword_100219F60;
            if (!qword_100219F60) {
              goto LABEL_141;
            }
            CFNumberRef v59 = "__WiFiDeviceConfigBssBlacklist";
LABEL_125:
            objc_msgSend(v58, "WFLog:message:", 4, "%s: valuesDict is nil", v59);
          }
        }

        else
        {
          size_t v53 = objc_autoreleasePoolPush();
          uint64_t v56 = (void *)qword_100219F60;
          if (!qword_100219F60) {
            goto LABEL_141;
          }
          size_t v57 = "__WiFiDeviceConfigBssBlacklist";
LABEL_122:
          objc_msgSend(v56, "WFLog:message:", 4, "%s: request is nil", v57);
        }

LABEL_141:
        objc_autoreleasePoolPop(v53);
LABEL_142:
        uint64_t v12 = 4294963396LL;
        goto LABEL_143;
      case 18:
        uint64_t v12 = 0LL;
        *(_BYTE *)(a1 + 5952) = 1;
        return v12;
      default:
        if (valuePtr != 23) {
          goto LABEL_23;
        }
        -[WiFiUsageMonitor addFaultEvent:forInterface:]( +[WiFiUsageMonitor sharedInstance](WiFiUsageMonitor, "sharedInstance"),  "addFaultEvent:forInterface:",  objc_msgSend( -[__CFDictionary objectForKeyedSubscript:](theDict, "objectForKeyedSubscript:", @"faultReason"),  "unsignedIntegerValue"),  *(void *)(a1 + 112));
        return 0LL;
    }
  }

  if (valuePtr)
  {
    if (valuePtr == 4)
    {
      if (a1)
      {
        if (!theDict)
        {
          CFTypeRef v14 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s request is NULL", "__WiFiDeviceDebugLqmConfig");
          }
          goto LABEL_77;
        }

        CFTypeRef v13 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommand");
        if (!v13) {
          return 4294963396LL;
        }
        unsigned int v63 = -1431655766;
        if (!CFNumberGetValue(v13, kCFNumberIntType, &v63)) {
          return 4294963396LL;
        }
        if (v63 == 1)
        {
          CFTypeRef v48 = CFDictionaryGetValue(theDict, @"DebugCommandValueDict");
          if (v48) {
            return sub_100051ED0(a1, (uint64_t)v48);
          }
          return 4294963396LL;
        }

        if (v63)
        {
LABEL_75:
          CFTypeRef v14 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "Unknown debug command %d", v63);
          }
          goto LABEL_77;
        }

        if (a4)
        {
          *a4 = sub_100051D8C(a1);
          return 4294963396LL;
        }
      }

      CFTypeRef v14 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s Device is NULL", "__WiFiDeviceDebugLqmConfig");
      }
    }

    else
    {
LABEL_23:
      CFTypeRef v14 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "Unknown debug module %d", valuePtr);
      }
    }

LABEL_97:
        objc_autoreleasePoolPop(v49);
        return 0LL;
      }

      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 5752));
      if (!Count)
      {
        CFTypeID v49 = objc_autoreleasePoolPush();
        unsigned int v50 = (void *)qword_100219F60;
        if (qword_100219F60)
        {
          CFNumberRef v51 = "GAS cache is empty";
          goto LABEL_96;
        }

        goto LABEL_97;
      }

      CFIndex v36 = Count;
      if (Count >= 1)
      {
        for (CFIndex i = 0LL; i != v36; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5752), i);
          if (ValueAtIndex)
          {
            uint64_t v39 = (uint64_t)ValueAtIndex;
            uint64_t v40 = sub_1000ABA9C((uint64_t)ValueAtIndex);
            uint64_t v41 = sub_100091DAC(v39);
            if (v40 && v41 != 0)
            {
              uint64_t v43 = v41;
              CFNumberRef v44 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:3, "%@ %@", v40, v43 message];
              }
              objc_autoreleasePoolPop(v44);
            }
          }
        }
      }

      return 0LL;
    case 1u:
      sub_10004F358(a1);
      return 0LL;
    case 2u:
      *CFTypeID v8 = 0;
      sub_10004F358(a1);
      CFTypeID v49 = objc_autoreleasePoolPush();
      unsigned int v50 = (void *)qword_100219F60;
      if (!qword_100219F60) {
        goto LABEL_97;
      }
      CFNumberRef v51 = "Disabled GAS cache";
      goto LABEL_96;
    case 3u:
      *CFTypeID v8 = 1;
      CFTypeID v49 = objc_autoreleasePoolPush();
      unsigned int v50 = (void *)qword_100219F60;
      if (!qword_100219F60) {
        goto LABEL_97;
      }
      CFNumberRef v51 = "Enabled GAS cache";
      goto LABEL_96;
    default:
      goto LABEL_75;
  }

    uint64_t v61 = v58;
LABEL_98:
    objc_autoreleasePoolPop(v61);
    return;
  }

  CFTypeID v32 = v31;
  CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(a2, @"disconnectReason");
  CFIndex v34 = objc_autoreleasePoolPush();
  if (!v33)
  {
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4 message:"disconnectReason not specified!"];
    }
    uint64_t v61 = v34;
    goto LABEL_98;
  }

  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:4, "disconnectReason %@", v33 message];
  }
  objc_autoreleasePoolPop(v34);
  CFNumberGetValue(v33, kCFNumberIntType, &v67);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 3520));
  if (Count >= 1)
  {
    CFIndex v36 = Count;
    CFBooleanRef v37 = 0LL;
    while (1)
    {
      CFBooleanRef v38 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3520), v37);
      uint64_t v39 = objc_autoreleasePoolPush();
      uint64_t v40 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        uint64_t v41 = sub_100095BC8(v38);
        [v40 WFLog:3, "%s: updated network %@ disconnectReason to %d", "__WiFiDeviceManagerAddDisconnectReason", v41, v67 message];
      }

      objc_autoreleasePoolPop(v39);
      if (v38)
      {
        CFRange v42 = (const __CFString *)sub_100095BC8(v38);
        if (CFStringCompare(v30, v42, 0LL) == kCFCompareEqualTo) {
          break;
        }
      }

      if (v36 == ++v37) {
        return;
      }
    }

    sub_10009BAA4((uint64_t)v38, v32, v67);
    sub_1000DAB00((dispatch_queue_s **)a1, v38);
  }

            *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = v27;
            goto LABEL_98;
          }

          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: device is null.",  "__WiFiDeviceEAPConfigureWoWEapolFilterIfNeeded");
          }
        }

        else
        {
          CFTypeRef v48 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: network is null.",  "__WiFiDeviceEAPConfigureWoWEapolFilterIfNeeded");
          }
        }

        objc_autoreleasePoolPop(v48);
        goto LABEL_97;
      }

      goto LABEL_105;
    }

    if ((v27 & 0xFFFFFFFE) != 2LL) {
      goto LABEL_97;
    }
    uint64_t v39 = (const __CFArray *)CFDictionaryGetValue(v9, @"RequiredProperties");
    if (!v39 || (MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0LL, v39)) == 0LL)
    {
LABEL_104:
      LODWORD(v25) = 15;
LABEL_105:
      *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = v27;
      id v20 = v25 | 0xEA010000;
      CFIndex v22 = a1;
      uint64_t v23 = 1;
      goto LABEL_32;
    }

    uint64_t v41 = MutableCopy;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    if (!Mutable)
    {
LABEL_103:
      CFRelease(v41);
      goto LABEL_104;
    }

    uint64_t v43 = Mutable;
    v69.length = CFArrayGetCount(v41);
    v69.id location = 0LL;
    if (CFArrayGetFirstIndexOfValue(v41, v69, @"TLSUserTrustProceedCertificateChain") == -1)
    {
      v70.length = CFArrayGetCount(v41);
      v70.id location = 0LL;
      if (CFArrayGetFirstIndexOfValue(v41, v70, @"UserName") == -1)
      {
        v71.length = CFArrayGetCount(v41);
        v71.id location = 0LL;
        if (CFArrayGetFirstIndexOfValue(v41, v71, @"UserPassword") == -1) {
          goto LABEL_91;
        }
      }
    }

    else
    {
      CFNumberRef v44 = (const __CFDictionary *)CFDictionaryGetValue(v9, @"AdditionalProperties");
      if (v44)
      {
        uint64_t v45 = CFDictionaryGetValue(v44, @"TLSServerCertificateChain");
        CFDictionarySetValue(v43, @"TLSServerCertificateChain", v45);
      }

      CFArrayAppendValue(v41, @"TLSSaveTrustExceptions");
    }

    CFDictionarySetValue(v43, @"RequiredProperties", v41);
LABEL_91:
    if (CFDictionaryGetCount(v43))
    {
      CFRelease(v41);
      CFNumberRef v59 = (const __CFNumber *)CFDictionaryGetValue(v9, @"ConfigurationGeneration");
      CFTypeID v60 = sub_10003AC9C(v59);
      if (*(_DWORD *)(a1 + 100) != v60)
      {
        *(_DWORD *)(a1 + 100) = v60;
        uint64_t v61 = CFDictionaryGetValue(v43, @"RequiredProperties");
        sub_10011B15C(a1, v61);
        *(_DWORD *)(a1 + 96) = 5;
        CFNumberRef v62 = *(void (**)(uint64_t, uint64_t, __CFDictionary *, void))(a1 + 56);
        if (v62) {
          v62(a1, 3925934083LL, v43, *(void *)(a1 + 64));
        }
      }

      uint64_t v58 = v43;
      goto LABEL_96;
    }

    CFRelease(v43);
    goto LABEL_103;
  }

  if (v10 == 3)
  {
    CFTypeID v30 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"EAP: Waiting for inner association completion"];
    }
    objc_autoreleasePoolPop(v30);
    goto LABEL_98;
  }

  if (v10 != 2)
  {
    CFStringRef v31 = 2;
    goto LABEL_99;
  }

  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = (const void *)sub_100043E8C(v11);
  CFTypeRef v13 = sub_100040538(v11, v12);
  if (v13 && CFEqual(*(CFTypeRef *)(a1 + 72), v13))
  {
    CFTypeRef v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "EAP: already connected to %@", sub_100095BC8(v13) message];
    }
    objc_autoreleasePoolPop(v14);
    *(_DWORD *)(a1 + 96) = 4;
    uint64_t v15 = sub_10004CE2C(*(void *)(a1 + 16));
    sub_10011B48C(a1, v15);
  }

  else
  {
    CFTypeID v32 = (const __CFNumber *)sub_1000951FC(*(void *)(a1 + 72), @"ASSOC_FLAGS");
    int valuePtr = sub_10003AC9C(v32) | 8;
    CFNumberRef v33 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v33)
    {
      CFIndex v34 = v33;
      sub_10009582C(*(void *)(a1 + 72), @"ASSOC_FLAGS", v33);
      CFRelease(v34);
    }

    *(_DWORD *)(a1 + 96) = 3;
    CFBooleanRef v35 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      CFIndex v36 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@+} %@",  @"EAP",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"EAP: Performing Inner Association of %@",  sub_100095BC8(*(const void **)(a1 + 72)))),  "UTF8String"));
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        CFBooleanRef v37 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v36, "UTF8String")),  "UTF8String");
        int valuePtr = 136446210;
        __int16 v68 = v37;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  (uint8_t *)&valuePtr,  0xCu);
      }
    }

    objc_autoreleasePoolPop(v35);
    CFBooleanRef v38 = sub_10004E5C4(*(void *)(a1 + 16), a2, *(void *)(a1 + 72), 0LL, sub_10011BDF0, a1);
    if ((_DWORD)v38) {
      sub_10011C08C(a1, 0LL, v38, 0);
    }
    if (!v13) {
      goto LABEL_98;
    }
  }

  CFRelease(v13);
LABEL_98:
  BOOL v9 = theDict;
  CFStringRef v31 = v64;
LABEL_99:
  *(_DWORD *)(a1 + 104) = v31;
  if (v9) {
    CFRelease(v9);
  }
}

CFMutableDictionaryRef sub_100051D8C(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFMutableDictionaryRef v3 = Mutable;
    for (int i = 6; ; --i)
    {
      uint64_t v5 = Apple80211Get(*(void *)(a1 + 16), 337LL, 0LL, v3, 8LL);
      uint64_t v6 = v5;
      if ((int)v5 <= 15)
      {
        if ((_DWORD)v5 != -3905) {
          break;
        }
      }

      else if ((_DWORD)v5 != 61 && (_DWORD)v5 != 16)
      {
        goto LABEL_17;
      }

      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }

    if (!(_DWORD)v5) {
      return v3;
    }
LABEL_17:
    unsigned int v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Failed to get LQM config: err %d",  "WiFiDeviceCopyCurrentLqmConfig",  v6);
    }
    objc_autoreleasePoolPop(v10);
    CFRelease(v3);
  }

  else
  {
    BOOL v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Failed to create dict",  "WiFiDeviceCopyCurrentLqmConfig");
    }
    objc_autoreleasePoolPop(v9);
  }

  return 0LL;
}

uint64_t sub_100051ED0(uint64_t a1, uint64_t a2)
{
  for (int i = 6; ; --i)
  {
    uint64_t v5 = Apple80211Set(*(void *)(a1 + 16), 337LL, 0LL, a2, 8LL);
    uint64_t v6 = v5;
    if ((int)v5 <= 15)
    {
      if ((_DWORD)v5 != -3905) {
        break;
      }
    }

    else if ((_DWORD)v5 != 61 && (_DWORD)v5 != 16)
    {
      goto LABEL_13;
    }

    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }

  if (!(_DWORD)v5) {
    return v6;
  }
LABEL_13:
  BOOL v9 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Failed to set LQM config: err %d",  "WiFiDeviceSetLqmConfig",  v6);
  }
  objc_autoreleasePoolPop(v9);
  return v6;
}

uint64_t sub_100051FA0(uint64_t a1, uint64_t a2, int a3)
{
  __int128 keys = @"LEAKY_AP_LEARNING_MODE";
  uint64_t v4 = (void **)&kCFBooleanTrue;
  if (!a3) {
    uint64_t v4 = (void **)&kCFBooleanFalse;
  }
  __int128 values = *v4;
  CFDictionaryRef v5 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)&keys,  (const void **)&values,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!v5) {
    return 4294963395LL;
  }
  CFDictionaryRef v6 = v5;
  for (int i = 6; ; --i)
  {
    uint64_t v8 = Apple80211Set(*(void *)(a1 + 16), 234LL, 0LL, v6, 0LL);
    uint64_t v9 = v8;
    if ((_DWORD)v8 != -3905 && (_DWORD)v8 != 61 && (_DWORD)v8 != 16) {
      break;
    }
    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }

  CFRelease(v6);
  return v9;
}

void sub_1000520B8(uint64_t a1, uint64_t a2)
{
  for (int i = 6; ; --i)
  {
    uint64_t v5 = Apple80211Set(*(void *)(a1 + 16), 245LL, 0LL, a2, 8LL);
    uint64_t v6 = v5;
    if ((int)v5 <= 15)
    {
      if ((_DWORD)v5 != -3905) {
        break;
      }
    }

    else if ((_DWORD)v5 != 61 && (_DWORD)v5 != 16)
    {
      goto LABEL_12;
    }

    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }

  if (!(_DWORD)v5) {
    return;
  }
LABEL_12:
  uint64_t v8 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Failed to set leaky ap SSID stats: err %d",  "WiFiDeviceSetLeakyAPInfo",  v6);
  }
  objc_autoreleasePoolPop(v8);
}

uint64_t sub_100052190(uint64_t a1)
{
  uint64_t v10 = 0LL;
  if (a1)
  {
    for (int i = 6; ; --i)
    {
      uint64_t v3 = Apple80211CopyValue(*(void *)(a1 + 16), 248LL, 0LL, &v10);
      uint64_t v4 = v3;
      if ((_DWORD)v3 != -3905 && (_DWORD)v3 != 61 && (_DWORD)v3 != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }

    uint64_t result = v10;
    if ((_DWORD)v4) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v10 == 0;
    }
    if (v7)
    {
      uint64_t v9 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: AssocHistory is Not Valid! Error:0x%0x. AssocHistoryString:%p",  "WiFiDeviceCopyAssociationHistory",  v4,  v10);
      }
      objc_autoreleasePoolPop(v9);
      return v10;
    }
  }

  else
  {
    uint64_t v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: device NULL", "WiFiDeviceCopyAssociationHistory");
    }
    objc_autoreleasePoolPop(v8);
    return 0LL;
  }

  return result;
}

void sub_1000522AC(uint64_t a1, const void *a2)
{
  if (!a1 || !a2)
  {
    CFTypeRef v13 = objc_autoreleasePoolPush();
    CFTypeRef v14 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_15;
    }
    id v18 = "Device";
    if (!a2) {
      id v18 = "Network";
    }
    uint64_t v19 = (void *)v18;
    uint64_t v15 = "%s: %s is NULL";
    goto LABEL_13;
  }

  uint64_t v4 = (const __CFString *)sub_1000951FC((uint64_t)a2, @"BSSID");
  if (!v4)
  {
    CFTypeRef v13 = objc_autoreleasePoolPush();
    CFTypeRef v14 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_15;
    }
    uint64_t v15 = "%s: bssid is NULL!";
    goto LABEL_27;
  }

  uint64_t v5 = v4;
  uint64_t v6 = (const __CFString *)sub_100095BC8(a2);
  if (!v6)
  {
    CFTypeRef v13 = objc_autoreleasePoolPush();
    CFTypeRef v14 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_15;
    }
    uint64_t v15 = "%s: ssid is NULL!";
LABEL_27:
    uint64_t v16 = 4LL;
    goto LABEL_14;
  }

  BOOL v7 = v6;
  uint64_t v8 = *(const __CFString **)(a1 + 5880);
  if (!v8)
  {
LABEL_9:
    uint64_t v10 = *(const void **)(a1 + 5888);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 588_Block_object_dispose(va, 8) = 0LL;
    }

    uint64_t v11 = (const __CFString *)sub_1000951FC((uint64_t)a2, @"BSSID");
    *(void *)(a1 + 5880) = CFStringCreateCopy(kCFAllocatorDefault, v11);
    uint64_t v12 = (const __CFString *)sub_100095BC8(a2);
    *(void *)(a1 + 588_Block_object_dispose(va, 8) = CFStringCreateCopy(kCFAllocatorDefault, v12);
    CFTypeRef v13 = objc_autoreleasePoolPush();
    CFTypeRef v14 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_15;
    }
    uint64_t v19 = (void *)v7;
    id v20 = v5;
    uint64_t v15 = "%s: LastLinkedBSSInfo updated to: {%@},{%@}";
LABEL_13:
    uint64_t v16 = 3LL;
LABEL_14:
    objc_msgSend(v14, "WFLog:message:", v16, v15, "WiFiDeviceRecordLastLinkedBSSInfo", v19, v20);
LABEL_15:
    objc_autoreleasePoolPop(v13);
    return;
  }

  if (CFStringCompare(v8, v5, 1uLL)
    || (CFNumberRef v17 = *(const __CFString **)(a1 + 5888)) == 0LL
    || CFStringCompare(v17, v7, 0LL))
  {
    uint64_t v9 = *(const void **)(a1 + 5880);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 5880) = 0LL;
    }

    goto LABEL_9;
  }

uint64_t sub_1000524A8(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 5880);
  }
  uint64_t v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: Device is NULL!", "WiFiDeviceGetLastLinkedBSSID");
  }
  objc_autoreleasePoolPop(v2);
  return 0LL;
}

uint64_t sub_100052514(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 5888);
  }
  uint64_t v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: Device is NULL!", "WiFiDeviceGetLastLinkedSSID");
  }
  objc_autoreleasePoolPop(v2);
  return 0LL;
}

void sub_100052580(uint64_t a1, CFDataRef *a2)
{
  if (!a1)
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: Device is NULL!", "WiFiDeviceCopyLastSSIDInfo");
    }
    goto LABEL_12;
  }

  if (!a2)
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: lastSSIDInfo is NULL!",  "WiFiDeviceCopyLastSSIDInfo");
    }
LABEL_12:
    objc_autoreleasePoolPop(v6);
    return;
  }

  uint64_t v4 = *(const __CFData **)(a1 + 5808);
  if (v4) {
    *a2 = CFDataCreateCopy(kCFAllocatorDefault, v4);
  }
  uint64_t v5 = *(const __CFData **)(a1 + 5816);
  if (v5) {
    a2[1] = CFDataCreateCopy(kCFAllocatorDefault, v5);
  }
}

_WORD *sub_100052664(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: Device is NULL!", "WiFiDeviceCopyLastNetworkInfo");
    }
    goto LABEL_10;
  }

  uint64_t v1 = *(void *)(a1 + 5832);
  if (!v1)
  {
    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: lastAttemptedNetworkInfo",  "WiFiDeviceCopyLastNetworkInfo");
    }
LABEL_10:
    objc_autoreleasePoolPop(v3);
    return 0LL;
  }

  if (*(void *)(a1 + 5824)) {
    uint64_t v1 = *(void *)(a1 + 5824);
  }
  return sub_100094E60((uint64_t)kCFAllocatorDefault, v1);
}

void sub_100052728(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      sub_10004CD74(a1, a2);
      return;
    }

    uint64_t v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: network is null.",  "WiFiDeviceUpdateLastNetworkInfo");
    }
  }

  else
  {
    uint64_t v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: Device is NULL!", "WiFiDeviceUpdateLastNetworkInfo");
    }
  }

  objc_autoreleasePoolPop(v2);
}

void sub_1000527C8(uint64_t a1, int a2)
{
  *(_BYTE *)(a1 + 5896) = a2;
  uint64_t v3 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    uint64_t v4 = "ENABLED";
    if (!a2) {
      uint64_t v4 = "DISABLED";
    }
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: Set WAPI %s", "WiFiDeviceSetWapiEnabled", v4);
  }

  objc_autoreleasePoolPop(v3);
}

void sub_100052844(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 224) != (_DWORD)a2)
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WFMacRandomisation : Toggled. Old = %d and New = %d",  "WiFiDeviceConfigureMacRadomisationFeature",  *(unsigned __int8 *)(a1 + 224),  a2);
    }
    objc_autoreleasePoolPop(v4);
    *(_BYTE *)(a1 + 224) = a2;
  }

void sub_1000528C8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 225) != (_DWORD)a2)
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WFMacRandomisation : for Secure Networks Toggled. Old = %d and New = %d",  "WiFiDeviceConfigureMacRadomisationFeatureSecureNetworks",  *(unsigned __int8 *)(a1 + 225),  a2);
    }
    objc_autoreleasePoolPop(v4);
    *(_BYTE *)(a1 + 225) = a2;
  }

void sub_10005294C(uint64_t a1, CFDictionaryRef theDict)
{
  int valuePtr = 0;
  if (!a1)
  {
    __int16 v68 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null device", "WiFiDeviceSetTestParams", v70, v71);
    }
    goto LABEL_111;
  }

  if (!theDict)
  {
    __int16 v68 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null testParams",  "WiFiDeviceSetTestParams",  v70,  v71);
    }
    goto LABEL_111;
  }

  uint64_t v4 = *(const __CFString **)(a1 + 112);
  unsigned int Value = (const __CFString *)CFDictionaryGetValue(theDict, @"WiFiTestCommandInterfaceName");
  if (CFStringCompare(Value, v4, 0LL))
  {
    __int16 v68 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: ignore this device %@, test interface %@", "WiFiDeviceSetTestParams", v4, Value message];
    }
    goto LABEL_111;
  }

  uint64_t v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"WiFiTestCommandType");
  if (!v6)
  {
    __int16 v68 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null cmdNum", "WiFiDeviceSetTestParams", v70, v71);
    }
LABEL_111:
    objc_autoreleasePoolPop(v68);
    return;
  }

  CFNumberGetValue(v6, kCFNumberIntType, &valuePtr);
  CFDictionaryRemoveValue(theDict, @"WiFiTestCommandType");
  if (valuePtr != 201) {
    return;
  }
  int v74 = 0;
  BOOL v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"enable");
  if (v7)
  {
    CFNumberGetValue(v7, kCFNumberCFIndexType, &v74);
    *(_BYTE *)(a1 + 20_Block_object_dispose(va, 8) = v74;
  }

  uint64_t v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"doNotDownsampleAnalytics");
  if (v8)
  {
    CFNumberGetValue(v8, kCFNumberCFIndexType, &v74);
    BOOL v9 = v74 != 0;
  }

  else
  {
    BOOL v9 = 0LL;
  }

  uint64_t v10 = *(void (**)(uint64_t, void, void, void, BOOL))(a1 + 5576);
  if (v10) {
    v10(a1, *(void *)(a1 + 112), *(void *)(a1 + 5584), *(unsigned __int8 *)(a1 + 208), v9);
  }
  uint64_t v11 = *(const void **)(a1 + 216);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 216) = 0LL;
  }

  if (!*(_BYTE *)(a1 + 208))
  {
    CFTypeRef v13 = 0LL;
    uint64_t v15 = 0LL;
    goto LABEL_88;
  }

  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    __int16 v69 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s lqmDict is NULL!",  "__WiFiDeviceSetSimulateLinkTestParams");
    }
    goto LABEL_116;
  }

  CFTypeRef v13 = Mutable;
  CFMutableDictionaryRef v14 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!v14)
  {
    __int16 v69 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s ccaStatsDict is NULL!",  "__WiFiDeviceSetSimulateLinkTestParams");
    }
LABEL_116:
    objc_autoreleasePoolPop(v69);
    goto LABEL_96;
  }

  uint64_t v15 = v14;
  uint64_t v16 = CFDictionaryGetValue(theDict, @"rssi");
  if (v16) {
    CFDictionarySetValue(v13, @"RSSI", v16);
  }
  CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"hasPerCoreRssi");
  if (v17)
  {
    int v73 = 0;
    CFNumberGetValue(v17, kCFNumberIntType, &v73);
    if (v73)
    {
      CFMutableArrayRef v18 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
      if (v18)
      {
        uint64_t v19 = v18;
        id v20 = (_UNKNOWN **)CFDictionaryGetValue(theDict, @"rssicore0");
        if (v20) {
          id v21 = v20;
        }
        else {
          id v21 = &off_1002046B0;
        }
        CFArrayAppendValue(v19, v21);
        CFIndex v22 = (_UNKNOWN **)CFDictionaryGetValue(theDict, @"rssicore1");
        if (v22) {
          uint64_t v23 = v22;
        }
        else {
          uint64_t v23 = &off_1002046B0;
        }
        CFArrayAppendValue(v19, v23);
        CFDictionarySetValue(v13, @"PER_CORE_RSSI", v19);
        CFRelease(v19);
      }
    }
  }

  uint64_t v24 = CFDictionaryGetValue(theDict, @"snr");
  if (v24) {
    CFDictionarySetValue(v13, @"SNR", v24);
  }
  id v25 = CFDictionaryGetValue(theDict, @"cca");
  if (v25) {
    CFDictionarySetValue(v13, @"CCA", v25);
  }
  uint64_t v26 = CFDictionaryGetValue(theDict, @"ccaSelfTotal");
  if (v26) {
    CFDictionarySetValue(v15, @"CCA_SELF_TOTAL", v26);
  }
  id v27 = CFDictionaryGetValue(theDict, @"ccaOtherWake");
  if (v27) {
    CFDictionarySetValue(v15, @"CCA_OTHER_WAKE", v27);
  }
  CFNumberRef v28 = CFDictionaryGetValue(theDict, @"ccaIntfWake");
  if (v28) {
    CFDictionarySetValue(v15, @"CCA_INTERFERENCE_WAKE", v28);
  }
  if (CFDictionaryGetCount(v15)) {
    CFDictionarySetValue(v13, @"CCA_STATS", v15);
  }
  id v29 = CFDictionaryGetValue(theDict, @"noise");
  if (v29) {
    CFDictionarySetValue(v13, @"NOISE", v29);
  }
  CFTypeID v30 = CFDictionaryGetValue(theDict, @"txFail");
  if (v30) {
    CFDictionarySetValue(v13, @"TXFAIL", v30);
  }
  CFStringRef v31 = CFDictionaryGetValue(theDict, @"txFrames");
  if (v31) {
    CFDictionarySetValue(v13, @"TXFRAMES", v31);
  }
  CFTypeID v32 = CFDictionaryGetValue(theDict, @"txRetries");
  if (v32) {
    CFDictionarySetValue(v13, @"TXRETRANS", v32);
  }
  CFNumberRef v33 = CFDictionaryGetValue(theDict, @"rxFrames");
  if (v33) {
    CFDictionarySetValue(v13, @"RXFRAMES", v33);
  }
  CFIndex v34 = CFDictionaryGetValue(theDict, @"rxRetries");
  if (v34) {
    CFDictionarySetValue(v13, @"RXRETRYFRMS", v34);
  }
  CFBooleanRef v35 = CFDictionaryGetValue(theDict, @"bcnRecv");
  if (v35) {
    CFDictionarySetValue(v13, @"RXBEACONFRMS", v35);
  }
  CFIndex v36 = CFDictionaryGetValue(theDict, @"bcnSched");
  if (v36) {
    CFDictionarySetValue(v13, @"RXBEACONSCHED", v36);
  }
  CFBooleanRef v37 = CFDictionaryGetValue(theDict, @"fwFrames");
  if (v37) {
    CFDictionarySetValue(v13, @"TXFWFRAMES", v37);
  }
  CFBooleanRef v38 = CFDictionaryGetValue(theDict, @"fwFail");
  if (v38) {
    CFDictionarySetValue(v13, @"TXFWFAIL", v38);
  }
  uint64_t v39 = CFDictionaryGetValue(theDict, @"fwRetries");
  if (v39) {
    CFDictionarySetValue(v13, @"TXFWRETRANS", v39);
  }
  uint64_t v40 = CFDictionaryGetValue(theDict, @"curBssRssi");
  if (!v40)
  {
LABEL_85:
    CFNumberRef v62 = CFDictionaryGetValue(theDict, @"recommendationFlags");
    if (v62)
    {
      CFDictionarySetValue(v13, @"recommendationFlags", v62);
      char v63 = 0;
      goto LABEL_89;
    }

LABEL_88:
    char v63 = 1;
LABEL_89:
    *(void *)(a1 + 216) = v13;
    BOOL v64 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "Simulated LQM Dict: %@", *(void *)(a1 + 216) message];
    }
    objc_autoreleasePoolPop(v64);
    if ((v63 & 1) == 0)
    {
      int v65 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      sub_10005A2C8(a1, *(void *)(a1 + 112), v65);
      if (v65) {
        CFRelease(v65);
      }
    }

    if (!v15) {
      goto LABEL_96;
    }
    goto LABEL_95;
  }

  uint64_t v41 = v40;
  CFRange v42 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (v42)
  {
    uint64_t v43 = v42;
    CFDictionaryAddValue(v42, @"RSSI", v41);
    CFNumberRef v44 = CFDictionaryGetValue(theDict, @"roamReason");
    if (v44) {
      CFDictionarySetValue(v43, @"ROAM_SCAN_REASON", v44);
    }
    uint64_t v45 = CFDictionaryGetValue(theDict, @"roamScanAge");
    if (v45) {
      CFDictionarySetValue(v43, @"ROAM_SCAN_AGE", v45);
    }
    BOOL v46 = CFDictionaryGetValue(theDict, @"roamStatus");
    if (v46) {
      CFDictionarySetValue(v43, @"ROAM_LAST_STATUS", v46);
    }
    uint64_t v47 = CFDictionaryGetValue(theDict, @"roamScanCount");
    if (v47) {
      CFDictionarySetValue(v43, @"ROAM_SCAN_COUNT", v47);
    }
    CFTypeRef v48 = CFDictionaryGetValue(theDict, @"roamCand1Rssi");
    if (!v48) {
      goto LABEL_84;
    }
    CFTypeID v49 = v48;
    CFMutableArrayRef v50 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
    if (!v50) {
      goto LABEL_118;
    }
    CFNumberRef v51 = v50;
    int v52 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    if (v52)
    {
      size_t v53 = v52;
      CFDictionaryAddValue(v52, @"RSSI", v49);
      CFArrayAppendValue(v51, v53);
      CFRelease(v53);
      uint64_t v54 = CFDictionaryGetValue(theDict, @"roamCand2Rssi");
      if (!v54)
      {
LABEL_80:
        uint64_t v58 = CFDictionaryGetValue(theDict, @"roamCand3Rssi");
        if (!v58)
        {
LABEL_83:
          CFDictionaryAddValue(v43, @"ROAM_CACHE", v51);
          CFRelease(v51);
LABEL_84:
          CFDictionaryAddValue(v13, @"ROAM_STATE", v43);
          CFRelease(v43);
          goto LABEL_85;
        }

        CFNumberRef v59 = v58;
        CFTypeID v60 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        if (v60)
        {
          uint64_t v61 = v60;
          CFDictionaryAddValue(v60, @"RSSI", v59);
          CFArrayAppendValue(v51, v61);
          CFRelease(v61);
          goto LABEL_83;
        }

        goto LABEL_117;
      }

      uint64_t v55 = v54;
      uint64_t v56 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      if (v56)
      {
        size_t v57 = v56;
        CFDictionaryAddValue(v56, @"RSSI", v55);
        CFArrayAppendValue(v51, v57);
        CFRelease(v57);
        goto LABEL_80;
      }
    }

          CFMutableDictionaryRef Mutable = theDict;
          if (CFArrayGetCount(theArray)) {
            CFDictionarySetValue(theDict, @"SCAN_SSID_LIST", theArray);
          }
          CFRelease(theArray);
          uint64_t v6 = v66;
          BOOL v7 = (unsigned __int8 *)(a1 + 5448);
        }
      }

      if (*v7)
      {
        CFTypeID v49 = *(const __CFArray **)(a1 + 5440);
        if (v49)
        {
          CFMutableArrayRef v50 = CFArrayGetCount(v49);
          if (v50 >= 1)
          {
            CFNumberRef v51 = v50;
            for (int i = 0LL; i != v51; ++i)
            {
              size_t v53 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5440), i);
              v74.length = CFArrayGetCount(v6);
              v74.id location = 0LL;
              if (!CFArrayContainsValue(v6, v74, v53)) {
                CFArrayAppendValue(v6, v53);
              }
            }
          }
        }
      }

      uint64_t v54 = CFArrayGetCount(v6);
      if (v54)
      {
        if (v8)
        {
          uint64_t v55 = v54;
          CFStringAppend(v8, @"on channels: ");
          if (v55 >= 1)
          {
            for (int j = 0LL; j != v55; ++j)
            {
              size_t v57 = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, j);
              unsigned int Value = CFDictionaryGetValue(v57, @"CHANNEL");
              CFStringAppendFormat(v8, 0LL, @"%@ ", Value);
            }
          }
        }
      }

      CFDictionarySetValue(Mutable, @"SCAN_CHANNELS", v6);
      CFNumberRef v59 = *v7;
      if (*v7) {
        CFTypeID v60 = kCFBooleanTrue;
      }
      else {
        CFTypeID v60 = kCFBooleanFalse;
      }
      CFDictionarySetValue(Mutable, @"BGSCAN_CACHE", v60);
      if (v59)
      {
        if (v7[2]) {
          uint64_t v61 = kCFBooleanTrue;
        }
        else {
          uint64_t v61 = kCFBooleanFalse;
        }
        CFDictionarySetValue(Mutable, @"BGSCAN_CACHE_WSB_ROLLOVER", v61);
        if (v8)
        {
          CFNumberRef v62 = @"Background Scan Caching is Enabled";
LABEL_114:
          CFStringAppend(v8, v62);
          v7[1] = v59 != 0;
          char v63 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%@", v8 message];
          }
          objc_autoreleasePoolPop(v63);
          CFRelease(v8);
          goto LABEL_118;
        }
      }

      else if (v8)
      {
        CFNumberRef v62 = @"Background Scan Caching is Disabled";
        goto LABEL_114;
      }

      v7[1] = v59 != 0;
LABEL_118:
      CFRelease(v6);
    }
  }

  return Mutable;
}

LABEL_117:
    CFRelease(v51);
LABEL_118:
    CFRelease(v43);
  }

LABEL_95:
  CFRelease(v15);
LABEL_96:
  int v66 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    if (*(_BYTE *)(a1 + 208)) {
      unsigned int v67 = "ENABLED";
    }
    else {
      unsigned int v67 = "DISABLED";
    }
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "Simulate Link Conditions is %s", v67);
  }

  objc_autoreleasePoolPop(v66);
}

    uint64_t v47 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: No known network matched criteria for empty-account migration",  "WiFiManagerMigrateWiFiKeychainEntries",  v57);
    }
LABEL_97:
    CFTypeRef v48 = 1;
LABEL_98:
    objc_autoreleasePoolPop(v47);
    goto LABEL_99;
  }

  BOOL v46 = 0LL;
  *(_BYTE *)(a1 + 2224) = 0;
LABEL_100:
  CFRelease(v35);
LABEL_101:
  if (v46) {
    CFRelease(v46);
  }
  if (v33) {
LABEL_104:
  }
    CFRelease(v33);
}

          a2 = v138;
LABEL_106:
          if (v33 == ++v34) {
            goto LABEL_113;
          }
        }

        uint64_t v39 = v23;
        uint64_t v40 = sub_1000968A4((uint64_t)v37);
        uint64_t v41 = sub_1000968A4((uint64_t)v12);
        CFRange v42 = v41;
        if (v41 && v40)
        {
          if (CFEqual(v41, v40))
          {
            uint64_t v43 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: connected to the same HS2.0 BSSID, shouldDisassociate = FALSE",  "WiFiDeviceManagerSetNetworks");
            }
            objc_autoreleasePoolPop(v43);
            uint64_t v39 = 0LL;
            uint64_t v12 = (void *)cf;
          }
        }

        else if (!v41)
        {
LABEL_71:
          if (v40) {
            CFRelease(v40);
          }
          uint64_t v23 = v39;
          goto LABEL_74;
        }

        CFRelease(v42);
        goto LABEL_71;
      }

      CFBooleanRef v35 = 0;
LABEL_113:
      if (*(void *)(a1 + 3504))
      {
        uint64_t v19 = v139;
        uint64_t v55 = v132;
        if (v35)
        {
          uint64_t v58 = v130;
          CFTypeRef v13 = kCFAllocatorDefault;
        }

        else
        {
          uint64_t v56 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: previous network %@ forgotten/disabled.", "WiFiDeviceManagerSetNetworks", sub_100095BC8(*(const void **)(a1 + 3504)) message];
          }
          objc_autoreleasePoolPop(v56);
          size_t v57 = *(const void **)(a1 + 3504);
          uint64_t v58 = v130;
          CFTypeRef v13 = kCFAllocatorDefault;
          if (v57)
          {
            CFRelease(v57);
            *(void *)(a1 + 3504) = 0LL;
          }
        }

void sub_100053344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  if (a1)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Reporting Symptoms Event:failureCode:%llu",  "WiFiDeviceReportSymptomsEvent",  a3);
    }
    objc_autoreleasePoolPop(v6);
    BOOL v7 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 5176);
    if (v7) {
      v7(a1, a2, *(void *)(a1 + 5184), a3);
    }
  }

  else
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: deviceRef is NULL!",  "WiFiDeviceReportSymptomsEvent");
    }
    objc_autoreleasePoolPop(v6);
  }

void sub_10005341C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      for (int i = 6; ; --i)
      {
        uint64_t v5 = Apple80211Set(*(void *)(a1 + 16), 107LL, 0LL, a2, 8LL);
        uint64_t v6 = v5;
        if ((_DWORD)v5 != -3905 && (_DWORD)v5 != 61 && (_DWORD)v5 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }

      uint64_t v8 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s SetRoam status:%u\n", "WiFiDeviceSetRoam", v6);
      }
    }

    else
    {
      uint64_t v8 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: bssidInfo is NULL!", "WiFiDeviceSetRoam", v9);
      }
    }
  }

  else
  {
    uint64_t v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: deviceRef is NULL!", "WiFiDeviceSetRoam", v9);
    }
  }

  objc_autoreleasePoolPop(v8);
}

void sub_100053538(uint64_t a1, const __CFDictionary *a2)
{
  if (a1)
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    if (a2)
    {
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: Calling ChipREset", "WiFiDeviceChipReset");
      }
      objc_autoreleasePoolPop(v4);
      for (int i = 6; ; --i)
      {
        uint64_t v6 = Apple80211Set(*(void *)(a1 + 16), 239LL, 0LL, a2, 8LL);
        uint64_t v7 = v6;
        if ((_DWORD)v6 != -3905 && (_DWORD)v6 != 61 && (_DWORD)v6 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }

      if (_os_feature_enabled_impl("WiFiPolicy", "HND_AnalyticsProcessor"))
      {
        uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        if (CFDictionaryGetValue(a2, @"CHIP_RESET_TRIGGER")) {
          unsigned int Value = (const __CFString *)CFDictionaryGetValue(a2, @"CHIP_RESET_TRIGGER");
        }
        else {
          unsigned int Value = @"UnknownReason";
        }
        uint64_t v13 = *((void *)&WADeviceAnalyticsRecoveryInfo + 1);
        v16[0] = +[NSDate date](&OBJC_CLASS___NSDate, "date");
        v16[1] = @"APPLE80211_IOC_RESET_CHIP";
        __int128 v14 = *((_OWORD *)&WADeviceAnalyticsRecoveryInfo + 2);
        v16[2] = Value;
        uint64_t v15 = *((void *)&WADeviceAnalyticsRecoveryInfo + 6);
        v16[3] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v7);
        -[NSMutableDictionary addEntriesFromDictionary:]( v9,  "addEntriesFromDictionary:",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v16,  &v13,  4LL));
        id v11 = +[AnalyticsProcessor sharedAnalyticsProcessor]( &OBJC_CLASS___AnalyticsProcessor,  "sharedAnalyticsProcessor");
        [v11 processWAMessageMetric:WADeviceAnalyticsRecoveryInfo data:v9];
      }
    }

    else
    {
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: triggerReasonInfo is NULL!",  "WiFiDeviceChipReset");
      }
      objc_autoreleasePoolPop(v4);
    }
  }

  else
  {
    uint64_t v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: deviceRef is NULL!", "WiFiDeviceChipReset");
    }
    objc_autoreleasePoolPop(v12);
  }

void sub_1000537B4(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 112);
    if (v3)
    {
      BOOL v11 = a2 != 0;
      for (int i = 6; ; --i)
      {
        uint64_t v6 = Apple80211Set(*(void *)(a1 + 16), 459LL, 0LL, &v11, 4LL);
        uint64_t v7 = v6;
        if ((_DWORD)v6 != -3905 && (_DWORD)v6 != 61 && (_DWORD)v6 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }

      uint64_t v9 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        uint64_t v10 = "no delay / TDD";
        if (a2 == 1) {
          uint64_t v10 = "delay";
        }
        [(id)qword_100219F60 WFLog:3, "%s: ifName %@ WiFiBT5GPolicy %s error %d", "WiFiDeviceSetWiFiBT5GPolicy", v3, v10, v7 message];
      }

      objc_autoreleasePoolPop(v9);
    }
  }

__CFArray *sub_1000538A8(uint64_t a1)
{
  if (!CFArrayGetCount(*(CFArrayRef *)(a1 + 5696))) {
    return 0LL;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (Mutable && CFArrayGetCount(*(CFArrayRef *)(a1 + 5696)) >= 1)
  {
    CFIndex v3 = 0LL;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5696), v3);
      if (ValueAtIndex)
      {
        uint64_t v5 = (const __CFArray *)sub_100091DAC((uint64_t)ValueAtIndex);
        if (v5)
        {
          uint64_t v6 = v5;
          if (CFArrayGetCount(v5) >= 1)
          {
            CFIndex v7 = 0LL;
            do
            {
              uint64_t v8 = CFArrayGetValueAtIndex(v6, v7);
              CFMutableDictionaryRef v9 = sub_100094E98((uint64_t)v8);
              CFArrayAppendValue(Mutable, v9);
              if (v9) {
                CFRelease(v9);
              }
              ++v7;
            }

            while (v7 < CFArrayGetCount(v6));
          }
        }
      }

      ++v3;
    }

    while (v3 < CFArrayGetCount(*(CFArrayRef *)(a1 + 5696)));
  }

  return Mutable;
}

__CFArray *sub_1000539A4(uint64_t a1, unsigned int a2)
{
  if (!CFArrayGetCount(*(CFArrayRef *)(a1 + 5696))) {
    return 0LL;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (Mutable && CFArrayGetCount(*(CFArrayRef *)(a1 + 5696)) >= 1)
  {
    CFIndex v5 = 0LL;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5696), v5);
      if (ValueAtIndex)
      {
        uint64_t v7 = (uint64_t)ValueAtIndex;
        double v8 = sub_10012F6DC((uint64_t)ValueAtIndex);
        double Current = CFAbsoluteTimeGetCurrent();
        double v10 = Current <= v8 ? 0.0 : (Current - v8) * 1000.0;
        BOOL v11 = (const __CFArray *)sub_100091DAC(v7);
        if (v11)
        {
          uint64_t v12 = v11;
          if (CFArrayGetCount(v11) >= 1)
          {
            CFIndex v13 = 0LL;
            do
            {
              __int128 v14 = CFArrayGetValueAtIndex(v12, v13);
              if (v14)
              {
                uint64_t v15 = v14;
                uint64_t v16 = sub_100096BF4((uint64_t)v14, @"ORIG_AGE") + v10;
                if (!a2 || v16 <= a2)
                {
                  sub_1000970C0((uint64_t)v15, @"AGE", v16);
                  CFArrayAppendValue(Mutable, v15);
                }
              }

              ++v13;
            }

            while (v13 < CFArrayGetCount(v12));
          }
        }
      }

      ++v5;
    }

    while (v5 < CFArrayGetCount(*(CFArrayRef *)(a1 + 5696)));
  }

  return Mutable;
}

uint64_t sub_100053B20(uint64_t a1)
{
  return *(unsigned int *)(a1 + 5936);
}

uint64_t sub_100053B28(uint64_t a1)
{
  return *(unsigned int *)(a1 + 5800);
}

void sub_100053B30(uint64_t a1, int a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  if (a1)
  {
    if (qword_100219F60)
    {
      CFIndex v5 = "enabled";
      if (!a2) {
        CFIndex v5 = "disabled";
      }
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: %s power save mode",  "WiFiDeviceAllowPowerSaveMode",  v5);
    }

    objc_autoreleasePoolPop(v4);
    BOOL v9 = a2 != 0;
    for (int i = 6; ; --i)
    {
      int v7 = Apple80211Set(*(void *)(a1 + 16), 5LL, 0LL, &v9, 4LL);
      if (v7 != -3905 && v7 != 61 && v7 != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }
  }

  else
  {
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: deviceRef is NULL!", "WiFiDeviceAllowPowerSaveMode");
    }
    objc_autoreleasePoolPop(v4);
  }

void sub_100053C44(uint64_t a1, int a2)
{
  if (a1)
  {
    BOOL v4 = a2 == 0;
    CFIndex v5 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      if (a2) {
        uint64_t v6 = "%s: WiFiDeviceAllowPowerSaveMode(FALSE)\n";
      }
      else {
        uint64_t v6 = "%s: WiFiDeviceAllowPowerSaveMode(TRUE)\n";
      }
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, v6, "WiFiDeviceSetSideKickPS");
    }

    objc_autoreleasePoolPop(v5);
    sub_100053B30(a1, v4);
  }

uint64_t sub_100053CD8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 37) >> 3) & 1;
}

uint64_t sub_100053CE4(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 37) >> 4) & 1;
}

uint64_t sub_100053CF0(uint64_t a1)
{
  return *(_BYTE *)(a1 + 38) & 1;
}

uint64_t sub_100053CFC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 37) >> 7;
}

uint64_t sub_100053D08(uint64_t a1)
{
  if (qword_100219898)
  {
    CFRelease((CFTypeRef)qword_100219898);
    qword_100219898 = 0LL;
  }

  if (qword_1002198A0)
  {
    CFRelease((CFTypeRef)qword_1002198A0);
    qword_1002198A0 = 0LL;
  }

  uint64_t v2 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), (CFStringRef)qword_1002198A8);
  CFIndex v3 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), (CFStringRef)qword_1002198B0);
  BOOL v4 = v3;
  if (!v2)
  {
    uint64_t v6 = 0LL;
    qword_100219898 = 0LL;
    if (v3) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }

  unsigned int Value = CFDictionaryGetValue(v2, kSCDynamicStorePropNetPrimaryInterface);
  qword_100219898 = (uint64_t)Value;
  if (!Value)
  {
    uint64_t v6 = 0LL;
    if (v4) {
      goto LABEL_10;
    }
LABEL_13:
    qword_1002198A0 = 0LL;
    goto LABEL_14;
  }

  CFRetain(Value);
  uint64_t v6 = 1LL;
  if (!v4) {
    goto LABEL_13;
  }
LABEL_10:
  int v7 = CFDictionaryGetValue(v4, kSCDynamicStorePropNetPrimaryInterface);
  qword_1002198A0 = (uint64_t)v7;
  if (v7)
  {
    CFRetain(v7);
    uint64_t v6 = 1LL;
  }

__CFDictionary *sub_100053F34(uint64_t a1, const void *a2)
{
  CFArrayRef theArray = 0LL;
  BOOL v4 = sub_1000446C8(a1, a2);
  if (v4)
  {
    CFIndex v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == sub_10012FE70())
    {
      LODWORD(v7) = sub_100131284((uint64_t)v5, 42LL, 0LL, &theArray);
    }

    else
    {
      for (int i = 6; ; --i)
      {
        int v26 = Apple80211CopyValue(*(void *)(a1 + 16), 42LL, 0LL, &theArray);
        LODWORD(v7) = v26;
        if (v26 != -3905 && v26 != 61 && v26 != 16) {
          break;
        }
        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }
    }

    if (!theArray) {
      return 0LL;
    }
    double v8 = objc_autoreleasePoolPush();
    BOOL v9 = "WiFiDeviceCopyInterfaceDataUsage";
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: station list %@", "WiFiDeviceCopyInterfaceDataUsage", theArray message];
    }
    CFStringRef value = (void *)a2;
    objc_autoreleasePoolPop(v8);
    if (CFArrayGetCount(theArray) < 1)
    {
      CFMutableDictionaryRef Mutable = 0LL;
    }

    else
    {
      CFIndex v10 = 0LL;
      CFMutableDictionaryRef Mutable = 0LL;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v10);
        if (ValueAtIndex)
        {
          MutableCFDictionaryRef Copy = (CFDictionaryRef *)CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, ValueAtIndex);
          CFTypeID v14 = CFGetTypeID(v5);
          if (v14 == sub_10012FE70())
          {
            uint64_t v7 = sub_100131284((uint64_t)v5, 79LL, 0LL, MutableCopy);
          }

          else
          {
            for (int j = 6; ; --j)
            {
              uint64_t v23 = Apple80211CopyValue(*(void *)(a1 + 16), 79LL, 0LL, MutableCopy);
              uint64_t v7 = v23;
              if ((_DWORD)v23 != -3905 && (_DWORD)v23 != 61 && (_DWORD)v23 != 16) {
                break;
              }
              if (!j) {
                break;
              }
              usleep(0x7A120u);
            }
          }

          if (!(_DWORD)v7)
          {
            if (!Mutable) {
              CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
            }
            uint64_t v15 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
            uint64_t v16 = CFDictionaryGetValue((CFDictionaryRef)MutableCopy, @"STATION_MAC");
            CFDictionarySetValue(v15, @"DataUsageInterfacePeerAddr", v16);
            uint64_t v33 = 0LL;
            uint64_t valuePtr = 0LL;
            CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)MutableCopy, @"STA_RXBYTES");
            if (v17) {
              CFNumberGetValue(v17, kCFNumberSInt32Type, (char *)&valuePtr + 4);
            }
            CFMutableArrayRef v18 = v9;
            uint64_t v19 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)MutableCopy, @"STA_TXBYTES");
            if (v19) {
              CFNumberGetValue(v19, kCFNumberSInt32Type, &valuePtr);
            }
            uint64_t v33 = (valuePtr + HIDWORD(valuePtr));
            CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &v33);
            CFDictionarySetValue(v15, @"DataUsageInterfacePeerLastBytes", v20);
            if (v20) {
              CFRelease(v20);
            }
            CFArrayAppendValue(Mutable, v15);
            if (v15) {
              CFRelease(v15);
            }
            BOOL v9 = v18;
          }

          id v21 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: err=%d, client stats %@", v9, v7, MutableCopy message];
          }
          objc_autoreleasePoolPop(v21);
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
        }

        ++v10;
      }

      while (v10 < CFArrayGetCount(theArray));
    }

    CFNumberRef v28 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    CFDictionarySetValue(v28, @"DataUsageInterfaceName", value);
    if (Mutable && CFArrayGetCount(Mutable)) {
      CFDictionarySetValue(v28, @"DataUsageInterfacePeerList", Mutable);
    }
    id v29 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: interface data usage %@", v9, v28 message];
    }
    objc_autoreleasePoolPop(v29);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }

  else
  {
    CFStringRef v31 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: unknown interface %@", "WiFiDeviceCopyInterfaceDataUsage", a2 message];
    }
    objc_autoreleasePoolPop(v31);
    CFNumberRef v28 = 0LL;
    LODWORD(v7) = 0;
  }

  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0LL;
  }

  if (v28 && (_DWORD)v7)
  {
    CFRelease(v28);
    return 0LL;
  }

  return v28;
}

uint64_t sub_10005439C(uint64_t a1, _DWORD *a2)
{
  CFStringRef value = 0LL;
  if (!a2) {
    return 4294963396LL;
  }
  uint64_t v3 = 4294963396LL;
  if (!a1 || !*(void *)(a1 + 112)) {
    return v3;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!Mutable) {
    return 4294963396LL;
  }
  CFTypeID v6 = Mutable;
  *a2 = 0;
  for (int i = 6; ; --i)
  {
    uint64_t v8 = Apple80211Get(*(void *)(a1 + 16), 2LL, 0LL, v6, 8LL);
    uint64_t v3 = v8;
    if ((int)v8 <= 15)
    {
      if ((_DWORD)v8 != -3905) {
        break;
      }
    }

    else if ((_DWORD)v8 != 61 && (_DWORD)v8 != 16)
    {
      goto LABEL_21;
    }

    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }

  if ((_DWORD)v8)
  {
LABEL_21:
    BOOL v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Apple80211Get(APPLE80211_IOC_AUTH_TYPE) failed: %d",  "WiFiDeviceGetAuthType",  v3);
    }
    objc_autoreleasePoolPop(v11);
    goto LABEL_18;
  }

  CFDictionaryGetValueIfPresent(v6, @"AUTH_UPPER", (const void **)&value);
  if (value) {
    CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, a2);
  }
LABEL_18:
  CFRelease(v6);
  return v3;
}

uint64_t sub_1000544F4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v6 = sub_1000446C8(a1, a2);
  return sub_100133AA0((uint64_t)v6, a3, a4);
}

uint64_t sub_100054520(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 38) >> 5) & 1;
}

uint64_t sub_10005452C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 39) >> 5) & 1;
}

void sub_100054538(uint64_t a1)
{
  uint64_t valuePtr = 0LL;
  uint64_t v2 = objc_autoreleasePoolPush();
  uint64_t v3 = (void *)qword_100219F60;
  if (a1)
  {
    if (qword_100219F60)
    {
      else {
        BOOL v4 = "disabled";
      }
      objc_msgSend(v3, "WFLog:message:", 3, "%s: LBT is %s", "WiFiDeviceApplyFeatureFlags", v4);
    }

    objc_autoreleasePoolPop(v2);
    if (_os_feature_enabled_impl("WiFiManager", "ListenBeforeTalk"))
    {
      uint64_t v5 = 1LL;
      uint64_t valuePtr = 1LL;
    }

    else
    {
      uint64_t v5 = 0LL;
    }

    CFTypeID v6 = objc_autoreleasePoolPush();
    uint64_t v7 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      else {
        uint64_t v8 = "disabled";
      }
      objc_msgSend(v7, "WFLog:message:", 3, "%s: WiFi LQM CrashTracer is %s", "WiFiDeviceApplyFeatureFlags", v8);
    }

    objc_autoreleasePoolPop(v6);
    if (_os_feature_enabled_impl("WiFiManager", "WiFiLQMCrashTracer"))
    {
      v5 |= 2uLL;
      uint64_t valuePtr = v5;
    }

    BOOL v9 = objc_autoreleasePoolPush();
    CFIndex v10 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      else {
        BOOL v11 = "disabled";
      }
      objc_msgSend(v10, "WFLog:message:", 3, "%s: WiFi DNSSymptoms is %s", "WiFiDeviceApplyFeatureFlags", v11);
    }

    objc_autoreleasePoolPop(v9);
    if (_os_feature_enabled_impl("WiFiManager", "DNSSymptoms"))
    {
      v5 |= 0x200uLL;
      uint64_t valuePtr = v5;
    }

    uint64_t v12 = objc_autoreleasePoolPush();
    CFIndex v13 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      else {
        CFTypeID v14 = "disabled";
      }
      objc_msgSend(v13, "WFLog:message:", 3, "%s: WiFi ViVoDatapathTuning is %s", "WiFiDeviceApplyFeatureFlags", v14);
    }

    objc_autoreleasePoolPop(v12);
    if (_os_feature_enabled_impl("WiFiManager", "ViVoDatapathTuning"))
    {
      v5 |= 0x100uLL;
      uint64_t valuePtr = v5;
    }

    if (_os_feature_enabled_impl("CoreWiFi", "AWDL6E"))
    {
      v5 |= 0x1000uLL;
      uint64_t valuePtr = v5;
    }

    uint64_t v15 = objc_autoreleasePoolPush();
    uint64_t v16 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      else {
        CFNumberRef v17 = "disabled";
      }
      objc_msgSend(v16, "WFLog:message:", 3, "%s: WiFi One Core Tx is %s", "WiFiDeviceApplyFeatureFlags", v17);
    }

    objc_autoreleasePoolPop(v15);
    if (_os_feature_enabled_impl("WiFiManager", "OneCoreTx"))
    {
      v5 |= 0x800uLL;
      uint64_t valuePtr = v5;
    }

    CFMutableArrayRef v18 = objc_autoreleasePoolPush();
    uint64_t v19 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      else {
        CFNumberRef v20 = "disabled";
      }
      objc_msgSend(v19, "WFLog:message:", 3, "%s: WiFi Sensing is %s", "WiFiDeviceApplyFeatureFlags", v20);
    }

    objc_autoreleasePoolPop(v18);
    if (_os_feature_enabled_impl("WiFiManager", "Sensing"))
    {
      v5 |= 0x4000uLL;
      uint64_t valuePtr = v5;
    }

    id v21 = objc_autoreleasePoolPush();
    CFIndex v22 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      else {
        uint64_t v23 = "disabled";
      }
      objc_msgSend(v22, "WFLog:message:", 3, "%s: WiFi QoS MSCS is %s", "WiFiDeviceApplyFeatureFlags", v23);
    }

    objc_autoreleasePoolPop(v21);
    if (_os_feature_enabled_impl("WiFiManager", "QoS_MSCS"))
    {
      v5 |= 0x2000uLL;
      uint64_t valuePtr = v5;
    }

    uint64_t v24 = objc_autoreleasePoolPush();
    id v25 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      else {
        int v26 = "disabled";
      }
      objc_msgSend( v25,  "WFLog:message:",  3,  "%s: P2P Optimization for Ultra Low Latency Realtime Infra is %s",  "WiFiDeviceApplyFeatureFlags",  v26);
    }

    objc_autoreleasePoolPop(v24);
    if (_os_feature_enabled_impl("CoreWiFi", "P2PForULLRTInfra"))
    {
      v5 |= 0x8000uLL;
      uint64_t valuePtr = v5;
    }

    if (_os_feature_enabled_impl("WiFiManager", "EnableNANPHS"))
    {
      v5 |= 0x10000uLL;
      uint64_t valuePtr = v5;
    }

    if (_os_feature_enabled_impl("CoreWiFi", "SSIDTransition"))
    {
      v5 |= 0x80000uLL;
      uint64_t valuePtr = v5;
    }

    if (_os_feature_enabled_impl("WiFiManager", "WPA3BcnProt"))
    {
      v5 |= 0x20000uLL;
      uint64_t valuePtr = v5;
    }

    if (_os_feature_enabled_impl("WiFiManager", "WPA3SoftAPBcnProt"))
    {
      v5 |= 0x40000uLL;
      uint64_t valuePtr = v5;
    }

    if (_os_feature_enabled_impl("WiFiManager", "WPA3OCV"))
    {
      v5 |= 0x100000uLL;
      uint64_t valuePtr = v5;
    }

    if (_os_feature_enabled_impl("WiFiManager", "WPA3SoftAPOCV"))
    {
      v5 |= 0x200000uLL;
      uint64_t valuePtr = v5;
    }

    if (_os_feature_enabled_impl("WiFiManager", "WPA3SAEPK"))
    {
      v5 |= 0x400000uLL;
      uint64_t valuePtr = v5;
    }

    if (_os_feature_enabled_impl("WiFiManager", "RealtimeDynamicRTS"))
    {
      v5 |= 0x800000uLL;
      uint64_t valuePtr = v5;
    }

    if (_os_feature_enabled_impl("WiFiManager", "ObssMitigation"))
    {
      v5 |= 0x1000000uLL;
      uint64_t valuePtr = v5;
    }

    if (_os_feature_enabled_impl("WiFiManager", "ScanForwardToAOP"))
    {
      v5 |= 0x2000000uLL;
      uint64_t valuePtr = v5;
    }

    if (_os_feature_enabled_impl("CoreWiFi", "Figaro5GTDD"))
    {
      v5 |= 0x4000000uLL;
      uint64_t valuePtr = v5;
    }

    CFNumberRef v27 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
    if (v27)
    {
      CFNumberRef v28 = v27;
      sub_10003EC6C(a1, *(const void **)(a1 + 112), 469LL, 0LL, (uint64_t)v27);
      id v29 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: ifName %@ FeatureFlags 0x%llx error %d\n", "WiFiDeviceApplyFeatureFlags", *(void *)(a1 + 112), valuePtr, 4294963396 message];
      }
      objc_autoreleasePoolPop(v29);
      CFRelease(v28);
    }

    else
    {
      CFTypeID v30 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s:cannot allocate valueRef",  "WiFiDeviceApplyFeatureFlags");
      }
      objc_autoreleasePoolPop(v30);
    }
  }

  else
  {
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null device", "WiFiDeviceApplyFeatureFlags");
    }
    objc_autoreleasePoolPop(v2);
  }

const void *sub_100054B94(uint64_t a1, const void *a2)
{
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    if (!*(void *)(a1 + 5840) || !*(void *)(a1 + 5848)) {
      return 0LL;
    }
    uint64_t result = sub_100095BC8(a2);
    if (result)
    {
      uint64_t result = sub_1000951FC((uint64_t)a2, @"BSSID");
      if (result)
      {
        uint64_t v5 = *(const __CFString **)(a1 + 5840);
        CFTypeID v6 = (const __CFString *)sub_100095BC8(a2);
        if (CFStringCompare(v5, v6, 0LL) == kCFCompareEqualTo)
        {
          uint64_t v7 = *(const __CFString **)(a1 + 5848);
          uint64_t v8 = (const __CFString *)sub_1000951FC((uint64_t)a2, @"BSSID");
          if (CFStringCompare(v7, v8, 0LL) == kCFCompareEqualTo)
          {
            if (*(_BYTE *)(a1 + 5864)) {
              return (const void *)(*(_BYTE *)(a1 + 5865) != 0);
            }
          }
        }

        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_100054C64(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v6 = sub_1000446C8(a1, a2);
  return sub_100133AA8((uint64_t)v6, a3, a4);
}

uint64_t sub_100054C90(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 5872);
  }
  else {
    return 4294967274LL;
  }
}

void sub_100054CA4(uint64_t a1, CFTypeRef cf)
{
  if (!a1)
  {
    uint64_t v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null device.", "WiFiDeviceSetAPInfo");
    }
    goto LABEL_11;
  }

  if (!*(void *)(a1 + 120))
  {
    uint64_t v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null properties.", "WiFiDeviceSetAPInfo");
    }
LABEL_11:
    objc_autoreleasePoolPop(v5);
    return;
  }

  if (cf)
  {
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 == CFDictionaryGetTypeID()) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 120), @"ApInfoParams", cf);
    }
  }

const void *sub_100054D9C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(const __CFDictionary **)(a1 + 120);
    if (v1) {
      return CFDictionaryGetValue(v1, @"ApInfoParams");
    }
    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null properties.", "WiFiDeviceGetAPInfo");
    }
  }

  else
  {
    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null device.", "WiFiDeviceGetAPInfo");
    }
  }

  objc_autoreleasePoolPop(v3);
  return 0LL;
}

BOOL sub_100054E50(uint64_t a1)
{
  CFBooleanRef Value = (CFBooleanRef)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 120), @"facetimeCallInProgress");
  return Value && Value == kCFBooleanTrue;
}

void sub_100054E88(uint64_t a1, const void *a2)
{
  if (!a1)
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: device is NULL", "WiFiDeviceTriggerCoreCapture");
    }
    goto LABEL_10;
  }

  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: CoreCaptureTriggerInfo allocation failed!",  "WiFiDeviceTriggerCoreCapture");
    }
LABEL_10:
    objc_autoreleasePoolPop(v7);
    return;
  }

  uint64_t v5 = Mutable;
  CFDictionaryAddValue(Mutable, @"CHIP_RESET_TRIGGER", a2);
  CFTypeID v6 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: Trigger CoreCapture at driver:%@", "WiFiDeviceTriggerCoreCapture", a2 message];
  }
  objc_autoreleasePoolPop(v6);
  sub_100053538(a1, v5);
  CFRelease(v5);
}

void sub_100054FC0(uint64_t a1, int a2)
{
  if (a1)
  {
    CFTypeID v4 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      uint64_t v5 = "enabled";
      if (!a2) {
        uint64_t v5 = "disabled";
      }
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: ranging log dump is %s",  "WiFiDeviceSetEnableRangingLogDump",  v5);
    }

    objc_autoreleasePoolPop(v4);
    *(_BYTE *)(a1 + 5956) = a2;
  }

void sub_100055050(uint64_t a1, int a2)
{
  if (a1)
  {
    CFTypeID v4 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      uint64_t v5 = "Enabled";
      if (!a2) {
        uint64_t v5 = "Disabled";
      }
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: BT A2DP LLA Traffic Status = %s",  "WiFiDeviceUpdateBTA2DPLLATrafficStatus",  v5);
    }

    objc_autoreleasePoolPop(v4);
    *(_BYTE *)(a1 + 5957) = a2;
  }

uint64_t sub_1000550E0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 39) >> 2) & 1;
}

uint64_t sub_1000550EC(uint64_t a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (v3)
  {
    CFNumberRef v4 = v3;
    sub_10003EC6C(a1, *(const void **)(a1 + 112), 514LL, 0LL, (uint64_t)v3);
    CFRelease(v4);
  }

  return 1LL;
}

uint64_t sub_100055158(uint64_t a1, int a2)
{
  if (a1) {
    uint64_t v2 = *(const void **)(a1 + 112);
  }
  else {
    uint64_t v2 = 0LL;
  }
  CFNumberRef v3 = (uint64_t *)&kCFBooleanTrue;
  if (a2 != 1) {
    CFNumberRef v3 = (uint64_t *)&kCFBooleanFalse;
  }
  return sub_10003EC6C(a1, v2, 507LL, 0LL, *v3);
}

uint64_t sub_100055194(uint64_t a1, const void *a2)
{
  uint64_t v13 = 0LL;
  CFNumberRef v4 = sub_1000446C8(a1, a2);
  if (!v4)
  {
    BOOL v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: unknown interface %@", "WiFiDeviceCopyLQMSummary", a2 message];
    }
    goto LABEL_19;
  }

  CFTypeID v5 = CFGetTypeID(v4);
  if (v5 == sub_10012FE70())
  {
    CFTypeID v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: not supported on virtual interface %@", "WiFiDeviceCopyLQMSummary", a2 message];
    }
    objc_autoreleasePoolPop(v6);
    uint64_t v7 = 4294963393LL;
LABEL_17:
    BOOL v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: returned error %d", "WiFiDeviceCopyLQMSummary", v7);
    }
LABEL_19:
    objc_autoreleasePoolPop(v11);
    return v13;
  }

  for (int i = 6; ; --i)
  {
    uint64_t v9 = Apple80211CopyValue(*(void *)(a1 + 16), 386LL, 0LL, &v13);
    uint64_t v7 = v9;
    if ((int)v9 <= 15)
    {
      if ((_DWORD)v9 != -3905) {
        break;
      }
    }

    else if ((_DWORD)v9 != 61 && (_DWORD)v9 != 16)
    {
      goto LABEL_17;
    }

    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }

  if ((_DWORD)v9) {
    goto LABEL_17;
  }
  return v13;
}

void sub_1000552E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a3 > 2 || *(_DWORD *)(a1 + 5936) > 2u)
    {
      CFTypeID v5 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: association type changed from %d to %d",  "WiFiDeviceOverrideAssociationType",  *(unsigned int *)(a1 + 5936),  a3);
      }
    }

    else
    {
      CFTypeID v5 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: association type changed from %@ to %@", "WiFiDeviceOverrideAssociationType", off_1001E3268[*(unsigned int *)(a1 + 5936)], off_1001E3268[a3] message];
      }
    }

    objc_autoreleasePoolPop(v5);
    *(_DWORD *)(a1 + 5936) = a3;
  }

uint64_t sub_1000553C4(uint64_t a1)
{
  return *(_BYTE *)(a1 + 46) & 1;
}

uint64_t sub_1000553D0(uint64_t a1, uint64_t a2, const __CFData *a3)
{
  uint64_t v3 = 4294963396LL;
  if (a1 && a2 && a3)
  {
    if ((*(_BYTE *)(a1 + 46) & 1) != 0)
    {
      uint64_t v7 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "Attempting APPLE80211_IOC_NDD_REQ on %@", a2 message];
      }
      objc_autoreleasePoolPop(v7);
      for (int i = 6; ; --i)
      {
        uint64_t v9 = *(void *)(a1 + 16);
        BytePtr = CFDataGetBytePtr(a3);
        CFIndex Length = CFDataGetLength(a3);
        uint64_t v12 = Apple80211Set(v9, 551LL, 0LL, BytePtr, Length);
        uint64_t v3 = v12;
        if ((int)v12 <= 15)
        {
          if ((_DWORD)v12 != -3905) {
            break;
          }
        }

        else if ((_DWORD)v12 != 61 && (_DWORD)v12 != 16)
        {
          goto LABEL_18;
        }

        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }

      if (!(_DWORD)v12) {
        return v3;
      }
LABEL_18:
      CFTypeID v14 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: IOC %d returned error %d",  "WiFiDevicePerformNDD",  551,  v3);
      }
      objc_autoreleasePoolPop(v14);
    }

    else
    {
      return 4294963389LL;
    }
  }

  return v3;
}

uint64_t sub_100055514(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 40) >> 1) & 1;
}

uint64_t sub_100055520(uint64_t a1, const void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 4294963396LL;
  if (a1 && a2 && a3)
  {
    if ((*(_BYTE *)(a1 + 40) & 2) != 0)
    {
      id v11 = [a3 objectForKeyedSubscript:@"SENSING_PARAMS_MATCH_MAC_ADDRESS"];
      uint64_t v12 = [v11 count];
      if (v12)
      {
        for (uint64_t i = 0LL; i != v12; ++i)
        {
          id v14 = [a3 mutableCopy];
          objc_msgSend( v14,  "setObject:forKeyedSubscript:",  objc_msgSend(v11, "objectAtIndexedSubscript:", i),  @"SENSING_PARAMS_MATCH_MAC_ADDRESS");
          ++*(_DWORD *)(a1 + 5964);
          CFTypeRef v15 = CFRetain(a2);
          uint64_t v5 = sub_100045368(a1, 0xEu, 0LL, (uint64_t)v15, (uint64_t)v14, a4, a5, 0LL, 0LL);
          if ((_DWORD)v5)
          {
            --*(_DWORD *)(a1 + 5964);
            CFRelease(a2);
            if (v14) {
              CFRelease(v14);
            }
          }
        }
      }

      else
      {
        id v18 = [a3 mutableCopy];
        [v18 setObject:@"00:00:00:00:00:00" forKeyedSubscript:@"SENSING_PARAMS_MATCH_MAC_ADDRESS"];
        ++*(_DWORD *)(a1 + 5964);
        CFTypeRef v19 = CFRetain(a2);
        uint64_t v5 = sub_100045368(a1, 0xEu, 0LL, (uint64_t)v19, (uint64_t)v18, a4, a5, 0LL, 0LL);
        if ((_DWORD)v5)
        {
          --*(_DWORD *)(a1 + 5964);
          CFRelease(a2);
          if (v18) {
            CFRelease(v18);
          }
        }
      }

      uint64_t v16 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "Sending kWiFiDeviceCommandTypeSensing on %@ (%d), expected result[%d]", a2, v5, *(unsigned int *)(a1 + 5964) message];
      }
      objc_autoreleasePoolPop(v16);
    }

    else
    {
      return 4294963389LL;
    }
  }

  return v5;
}

uint64_t sub_10005571C(uint64_t a1, const void *a2)
{
  uint64_t v2 = 4294963396LL;
  if (a1 && a2)
  {
    if ((*(_BYTE *)(a1 + 40) & 2) == 0) {
      return 4294963389LL;
    }
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 5968));
    *(_DWORD *)(a1 + 5960) = 0;
    uint64_t v5 = sub_1000446C8(a1, a2);
    if (v5)
    {
      CFTypeID v6 = CFGetTypeID(v5);
      uint64_t v7 = sub_10012FE70();
      uint64_t v8 = objc_autoreleasePoolPush();
      if (v6 != v7)
      {
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "Attempting APPLE80211_IOC_SENSING_DISABLE on %@", a2 message];
        }
        objc_autoreleasePoolPop(v8);
        for (int i = 6; ; --i)
        {
          uint64_t v10 = Apple80211Set(*(void *)(a1 + 16), 409LL, 0LL, 0LL, 0LL);
          uint64_t v2 = v10;
          if ((int)v10 <= 15)
          {
            if ((_DWORD)v10 != -3905) {
              break;
            }
          }

          else if ((_DWORD)v10 != 61 && (_DWORD)v10 != 16)
          {
            goto LABEL_19;
          }

          if (!i) {
            break;
          }
          usleep(0x7A120u);
        }

        if (!(_DWORD)v10) {
          return v2;
        }
LABEL_19:
        uint64_t v8 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: IOC %d returned error %d",  "WiFiDeviceSensingDisable",  409,  v2);
        }
        goto LABEL_21;
      }

      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4, "%s: unsupported interface %@", "WiFiDeviceSensingDisable", a2 message];
      }
    }

    else
    {
      uint64_t v8 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4, "%s: unknown interface %@", "WiFiDeviceSensingDisable", a2 message];
      }
    }

    uint64_t v2 = 4294963393LL;
LABEL_21:
    objc_autoreleasePoolPop(v8);
  }

  return v2;
}

void sub_1000558CC(uint64_t a1)
{
  if (a1) {
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 5968));
  }
}

uint64_t sub_1000558DC(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 5960) = a2;
  }
  return result;
}

uint64_t sub_1000558E8(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 5960);
  }
  return result;
}

uint64_t sub_1000558F4(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 5964);
  }
  return result;
}

uint64_t sub_100055900(uint64_t result)
{
  if (result) {
    return *(void *)(result + 5968);
  }
  return result;
}

void sub_10005590C(uint64_t a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (v3)
  {
    CFNumberRef v4 = v3;
    sub_10003EC6C(a1, *(const void **)(a1 + 112), 345LL, 0LL, (uint64_t)v3);
    CFRelease(v4);
  }

uint64_t sub_100055974(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 6LL;
  if (a1 && a2)
  {
    for (int i = 6; ; --i)
    {
      uint64_t v6 = Apple80211Set(*(void *)(a1 + 16), 516LL, 0LL, a2, 0LL);
      uint64_t v2 = v6;
      if ((int)v6 <= 15)
      {
        if ((_DWORD)v6 != -3905) {
          break;
        }
      }

      else if ((_DWORD)v6 != 61 && (_DWORD)v6 != 16)
      {
        goto LABEL_15;
      }

      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }

    if (!(_DWORD)v6) {
      return v2;
    }
LABEL_15:
    uint64_t v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "Error %d setting blocked bands %@", v2, a2 message];
    }
    objc_autoreleasePoolPop(v9);
  }

  return v2;
}

uint64_t sub_100055A48(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 40) >> 4) & 1;
}

uint64_t sub_100055A54(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 39) >> 6) & 1;
}

uint64_t sub_100055A60(uint64_t result, char a2)
{
  *(_BYTE *)(result + 595_Block_object_dispose(va, 8) = a2;
  return result;
}

uint64_t sub_100055A6C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 5959) = a2;
  return result;
}

uint64_t sub_100055A78(uint64_t result, char a2, char a3)
{
  *(_BYTE *)(result + 54) = a2;
  *(_BYTE *)(result + 55) = a3;
  return result;
}

uint64_t sub_100055A84(uint64_t a1, int a2)
{
  if (!a1) {
    return 4294963396LL;
  }
  uint64_t v10 = 0LL;
  if (a2) {
    int v3 = 2;
  }
  else {
    int v3 = 1;
  }
  LODWORD(v10) = v3;
  for (int i = 6; ; --i)
  {
    uint64_t v5 = Apple80211Set(*(void *)(a1 + 16), 518LL, 0LL, &v10, 8LL);
    uint64_t v6 = v5;
    if ((int)v5 <= 15)
    {
      if ((_DWORD)v5 != -3905) {
        break;
      }
    }

    else if ((_DWORD)v5 != 61 && (_DWORD)v5 != 16)
    {
      goto LABEL_18;
    }

    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }

  if (!(_DWORD)v5) {
    return v6;
  }
LABEL_18:
  uint64_t v9 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "Error sending sleep state notification %d", v6, v10);
  }
  objc_autoreleasePoolPop(v9);
  return v6;
}

uint64_t sub_100055B68(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v5 = sub_10003EC6C(a1, a2, 488LL, 0LL, (uint64_t)a3);
  if (a3)
  {
    CFTypeID v6 = CFGetTypeID(a3);
    if (v6 == CFDictionaryGetTypeID())
    {
      CFBooleanRef Value = CFDictionaryGetValue((CFDictionaryRef)a3, @"IO80211InterfaceCallStatus");
      if (Value) {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 120), @"facetimeCallInProgress", Value);
      }
    }
  }

  return v5;
}

uint64_t sub_100055BEC(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 5944);
  }
  return result;
}

void sub_100055BF8(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "Enter: %s:%d\n", "__WiFiDeviceRelease", 2234);
  }
  objc_autoreleasePoolPop(v2);
  int v3 = *(const void **)(a1 + 5784);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 5784) = 0LL;
  }

  CFNumberRef v4 = *(const void **)(a1 + 176);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 176) = 0LL;
  }

  uint64_t v5 = *(const void **)(a1 + 200);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 200) = 0LL;
  }

  CFTypeID v6 = *(const void **)(a1 + 144);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 144) = 0LL;
  }

  io_object_t v7 = *(_DWORD *)(a1 + 104);
  if (v7)
  {
    IOObjectRelease(v7);
    *(_DWORD *)(a1 + 104) = 0;
  }

  uint64_t v8 = *(const void **)(a1 + 112);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 112) = 0LL;
  }

  uint64_t v9 = *(const void **)(a1 + 120);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 120) = 0LL;
  }

  uint64_t v10 = *(IONotificationPort **)(a1 + 96);
  if (v10)
  {
    IONotificationPortDestroy(v10);
    *(void *)(a1 + 96) = 0LL;
  }

  io_object_t v11 = *(_DWORD *)(a1 + 24);
  if (v11)
  {
    IOObjectRelease(v11);
    *(_DWORD *)(a1 + 24) = 0;
  }

  uint64_t v12 = *(const void **)(a1 + 152);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 152) = 0LL;
  }

  uint64_t v13 = *(const void **)(a1 + 5696);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 5696) = 0LL;
  }

  id v14 = *(const void **)(a1 + 5752);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 5752) = 0LL;
  }

  CFTypeRef v15 = *(const void **)(a1 + 5656);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 5656) = 0LL;
  }

  uint64_t v16 = *(const void **)(a1 + 5664);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 5664) = 0LL;
  }

  CFNumberRef v17 = *(const void **)(a1 + 5792);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(a1 + 5792) = 0LL;
  }

  id v18 = *(const void **)(a1 + 216);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 216) = 0LL;
  }

  CFTypeRef v19 = *(const void **)(a1 + 5840);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 5840) = 0LL;
  }

  CFNumberRef v20 = *(const void **)(a1 + 5848);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(a1 + 584_Block_object_dispose(va, 8) = 0LL;
  }

  id v21 = *(const void **)(a1 + 232);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(a1 + 232) = 0LL;
  }

  CFIndex v22 = *(const void **)(a1 + 5968);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(a1 + 596_Block_object_dispose(va, 8) = 0LL;
  }

  uint64_t v23 = *(const void **)(a1 + 160);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(a1 + 160) = 0LL;
  }

  uint64_t v24 = *(const void **)(a1 + 168);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0LL;
  }

  id v25 = *(const void **)(a1 + 5824);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(a1 + 5824) = 0LL;
  }

  int v26 = *(const void **)(a1 + 5832);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(a1 + 5832) = 0LL;
  }

  CFNumberRef v27 = *(const void **)(a1 + 5920);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(a1 + 5920) = 0LL;
  }

  CFNumberRef v28 = *(const void **)(a1 + 4336);
  if (v28)
  {
    CFRelease(v28);
    *(void *)(a1 + 4336) = 0LL;
  }

  id v29 = *(const void **)(a1 + 4328);
  if (v29)
  {
    CFRelease(v29);
    *(void *)(a1 + 432_Block_object_dispose(va, 8) = 0LL;
  }

  CFTypeID v30 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "Exit : %s:%d\n", "__WiFiDeviceRelease", 2294);
  }
  objc_autoreleasePoolPop(v30);
}

void sub_100055E40(uint64_t a1, CFTypeRef cf)
{
  CFNumberRef v4 = *(const void **)(a1 + 5672);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 5672) = 0LL;
  }

  if (cf) {
    *(void *)(a1 + 5672) = CFRetain(cf);
  }
}

void sub_100055E80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 64))
  {
    if (*(void *)(v1 + 5680))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      if (Mutable)
      {
        CFNumberRef v4 = Mutable;
        CFDictionarySetValue(Mutable, @"CompletedUsingCache", kCFBooleanTrue);
        sub_100055F44(v1, *(void *)(v1 + 112), *(CFTypeRef *)(v1 + 5680), (uint64_t)v4, 0LL);
        CFRelease(v4);
      }

      else
      {
        sub_100055F44(v1, *(void *)(v1 + 112), *(CFTypeRef *)(v1 + 5680), 0LL, 0LL);
      }
    }

    uint64_t v5 = *(const void **)(a1 + 32);
  }

  else
  {
    uint64_t v5 = *(const void **)(a1 + 32);
  }

  CFRelease(v5);
}

void sub_100055F44(uint64_t a1, uint64_t a2, CFTypeRef cf, uint64_t a4, uint64_t a5)
{
  io_object_t v7 = (_BYTE *)(a1 + 5688);
  uint64_t v8 = *(const void **)(a1 + 5672);
  __int16 v68 = *(void (**)(uint64_t, uint64_t, __CFArray *, uint64_t, uint64_t, uint64_t))(a1 + 4728);
  uint64_t v66 = *(void *)(a1 + 4736);
  if (!cf || (CFTypeID v10 = CFGetTypeID(cf), v10 != CFArrayGetTypeID()))
  {
    id v14 = 0LL;
    goto LABEL_11;
  }

  io_object_t v11 = sub_10003A53C((const __CFArray *)cf, *(_DWORD *)(a1 + 240), *(_DWORD *)(a1 + 248));
  uint64_t v12 = v11;
  if (v7[208]) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = v11 == 0LL;
  }
  if (v13)
  {
    id v14 = v11;
    if (v11)
    {
LABEL_25:
      CFNumberRef v17 = kCFAllocatorDefault;
      uint64_t v12 = v14;
      goto LABEL_26;
    }

LABEL_33:
  CFTypeID v30 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    CFIndex v31 = v12 ? CFArrayGetCount(v12) : 0LL;
    CFTypeID v32 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@-} %@",  @"SCAN",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Completed Apple80211ScanAsync on %@ (0x%x) with %ld networks",  a2,  a5,  v31)),  "UTF8String"));
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buuint64_t f = 136446210;
      uint64_t v71 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v32, "UTF8String")),  "UTF8String");
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
    }
  }

  objc_autoreleasePoolPop(v30);
  if ((a5 & 0xFFFFFFFD) == 0xE0820445 || (_DWORD)a5 == -528350142) {
    uint64_t v34 = 16LL;
  }
  else {
    uint64_t v34 = a5;
  }
  if (v8) {
    CFRetain(v8);
  }
  if (v7[32])
  {
    sub_10004F26C(a1, 0);
    v7[32] = 0;
  }

  CFBooleanRef v35 = sub_10004E16C(v12, v14, (CFDictionaryRef)v8);
  if (v14 && v8 && !(_DWORD)v34 && v12)
  {
    *(_DWORD *)buuint64_t f = 0;
    CFBooleanRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v8, @"SCAN_TYPE");
    if (Value) {
      CFNumberGetValue(Value, kCFNumberIntType, buf);
    }
    if (*(_DWORD *)buf != 3 && !*v7 && !sub_100056E14((const __CFDictionary *)v8))
    {
      if (!*(void *)(a1 + 5696))
      {
        CFNumberRef v44 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: scanRequest or scanResults or cache empty",  "__WiFiDeviceAddScanCacheEntry");
        }
        objc_autoreleasePoolPop(v44);
        CFRange v42 = kCFAllocatorDefault;
        goto LABEL_71;
      }

      CFArrayRef theArray = *(__CFArray **)(a1 + 5696);
      CFBooleanRef v37 = sub_10012F5F0((uint64_t)kCFAllocatorDefault);
      if (!v37)
      {
        CFRange v42 = kCFAllocatorDefault;
        CFTypeID v60 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: WiFiCacheEntryCreateMutable failed",  "__WiFiDeviceAddScanCacheEntry");
        }
        objc_autoreleasePoolPop(v60);
        goto LABEL_71;
      }

      uint64_t v38 = (uint64_t)v37;
      CFTypeRef cfa = v37;
      if (sub_10012F650((uint64_t)v37, v8))
      {
        if (sub_10012F6B0(v38))
        {
          if (CFArrayGetCount(v12) >= 1)
          {
            CFIndex v39 = 0LL;
            do
            {
              uint64_t v40 = CFArrayGetValueAtIndex(v12, v39);
              uint64_t v41 = sub_100096BF4((uint64_t)v40, @"AGE");
              sub_1000970C0((uint64_t)v40, @"ORIG_AGE", (uint64_t)v41);
              ++v39;
            }

            while (v39 < CFArrayGetCount(v12));
          }

          if (sub_10012F680((uint64_t)cfa, v12))
          {
            CFArrayAppendValue(theArray, cfa);
            CFRange v42 = kCFAllocatorDefault;
            uint64_t v43 = cfa;
LABEL_67:
            CFRelease(v43);
LABEL_71:
            else {
              double v45 = 14.0;
            }
            sub_1000567AC(*(const __CFArray **)(a1 + 5696), v45);
            BOOL v46 = *(dispatch_source_s **)(a1 + 5712);
            dispatch_time_t v47 = dispatch_time(0LL, (uint64_t)(v45 * 1000000000.0));
            dispatch_source_set_timer(v46, v47, 0xFFFFFFFFFFFFFFFFLL, 0LL);
            CFTypeRef v48 = CFDictionaryCreateMutable(v42, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            cfb = v48;
            if (v48
              && (CFTypeID v49 = v48, CFDictionaryAddValue(v48, @"scanRequest", v8), (v50 = sub_10003A464(v12)) != 0LL))
            {
              CFNumberRef v51 = v49;
              int v52 = v50;
              CFDictionaryAddValue(v51, @"scanResults", v50);
              CFRelease(v52);
              size_t v53 = CFDictionaryCreateMutable( v42,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
              uint64_t v54 = v53;
              if (v53)
              {
                CFDictionaryAddValue(v53, @"scanRequest", v8);
                uint64_t v55 = sub_10003A464(v14);
                if (v55)
                {
                  uint64_t v56 = v55;
                  CFDictionaryAddValue(v54, @"scanResults", v55);
                  CFRelease(v56);
                }
              }
            }

            else
            {
              uint64_t v54 = 0LL;
            }

            size_t v57 = *(void (**)(uint64_t, uint64_t, __CFDictionary *, __CFDictionary *, void, void))(a1 + 4744);
            if (v57) {
              v57(a1, a2, cfb, v54, 0LL, *(void *)(a1 + 4752));
            }
            if (cfb) {
              CFRelease(cfb);
            }
            if (v54) {
              CFRelease(v54);
            }
            goto LABEL_85;
          }

          CFNumberRef v62 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: WiFiCacheEntrySetResults failed",  "__WiFiDeviceAddScanCacheEntry");
          }
        }

        else
        {
          CFNumberRef v62 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: WiFiCacheEntrySetTimestampNow failed",  "__WiFiDeviceAddScanCacheEntry");
          }
        }

        objc_autoreleasePoolPop(v62);
        CFRange v42 = kCFAllocatorDefault;
      }

      else
      {
        CFRange v42 = kCFAllocatorDefault;
        uint64_t v61 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: WiFiCacheEntrySetRequest failed",  "__WiFiDeviceAddScanCacheEntry");
        }
        objc_autoreleasePoolPop(v61);
      }

      uint64_t v43 = cfa;
      goto LABEL_67;
    }
  }

  if (!sub_100095BC8(v20))
  {
    CFIndex v31 = objc_autoreleasePoolPush();
    CFMutableDictionaryRef v29 = v34;
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s Couldn't determine the SSID of the known network that was determined to be the most used at the current devic e location. Bail ",  "WiFiManagerCopySSIDRepresentingMostUsedNetworkGeoTaggedToCurrentDeviceLocation");
    }
LABEL_57:
    objc_autoreleasePoolPop(v31);
    CFDictionaryRef Copy = 0LL;
    goto LABEL_48;
  }

  Default = CFAllocatorGetDefault();
  CFIndex v25 = (const __CFString *)sub_100095BC8(v20);
  CFDictionaryRef Copy = CFStringCreateCopy(Default, v25);
LABEL_47:
  CFMutableDictionaryRef v29 = v34;
LABEL_48:

  objc_autoreleasePoolPop(v29);
  return Copy;
}

  CFStringAppend(theString, @" DiagSta");
  if ((a1 & 0x800) == 0)
  {
LABEL_14:
    if ((a1 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }

      objc_autoreleasePoolPop(v23);
      return -1LL;
    }

    if (qword_100219F60)
    {
      uint64_t v38 = sub_100095BC8((const void *)a1);
      CFIndex v39 = sub_100095BC8((const void *)a2);
      [v24 WFLog:3, "Both (%@) and (%@) force fixed. Preferred (2), the most recently force fixed: %@", v38, v39, sub_100095BC8((const void *)a2), v68 message];
    }

    goto LABEL_66;
  }

  if ((!v8 || !v18) && (!v11 || v15 != 1))
  {
    CFRange v42 = v15 == 1;
    if (!v8) {
      CFRange v42 = 1;
    }
    if (!v42)
    {
      uint64_t v23 = objc_autoreleasePoolPush();
      uint64_t v43 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        CFNumberRef v44 = sub_100095BC8((const void *)a1);
        [v43 WFLog:3, "NOI (1) forced-fix: preferred (1) %@ over %@", v44, sub_100095BC8((const void *)a2), v67, v68 message];
      }

      goto LABEL_33;
    }

    if (!v8 && v15 == 1)
    {
      uint64_t v23 = objc_autoreleasePoolPush();
      double v45 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        BOOL v46 = sub_100095BC8((const void *)a2);
        [v45 WFLog:3, "NOI (2) forced-fix: Preferred (2) %@ over %@", v46, sub_100095BC8((const void *)a1), v67, v68 message];
      }

  sub_10003A8FC((vm_address_t)a2, a3);
  sub_10003A8FC((vm_address_t)a6, a7);
  sub_10003A8FC((vm_address_t)a4, a5);
  return 0LL;
}

    if (!sub_100108C9C(a1, v8))
    {
      ++v30;
LABEL_31:
      CFTypeRef v15 = 1;
LABEL_32:
      uint64_t v16 = 1;
      goto LABEL_42;
    }

    CFNumberRef v17 = *(const __CFArray **)(a1 + 3560);
    v31.length = CFArrayGetCount(v17);
    v31.id location = 0LL;
    if (CFArrayGetFirstIndexOfValue(v17, v31, v8) == -1)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 3560), v8);
    }

    else
    {
      id v18 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: duplicate network %@ found, skipping.", "__WiFiDeviceManagerPrepareDeferredNetworkList", sub_100095BC8(v8) message];
      }
      objc_autoreleasePoolPop(v18);
    }

    uint64_t v16 = 0;
    ++v30;
    CFTypeRef v15 = 1;
LABEL_42:
    CFIndex v19 = sub_100095BC8(v8);
    if (v6)
    {
      if (v19) {
        CFNumberRef v20 = (const __CFString *)sub_100095BC8(v8);
      }
      else {
        CFNumberRef v20 = @"(null)";
      }
      CFStringAppend(v3, v20);
      if ((v15 & 1) == 0)
      {
LABEL_49:
        CFStringAppend(v3, @"(");
        CFStringAppend(v3, @"HS2.0");
        CFStringAppend(v3, @""));
      }
    }

    else
    {
      CFStringAppendFormat(v3, 0LL, @", %@", v19);
      if ((v15 & 1) == 0) {
        goto LABEL_49;
      }
    }

    if ((v16 & 1) == 0)
    {
      CFStringAppend(v3, @"(");
      CFStringAppend(v3, @"HS");
      CFStringAppend(v3, @""));
      if (!v14) {
        goto LABEL_53;
      }
LABEL_52:
      CFStringAppend(v3, @"(");
      CFStringAppend(v3, @"time-defer");
      CFStringAppend(v3, @""));
      goto LABEL_53;
    }

    if (v14) {
      goto LABEL_52;
    }
LABEL_53:
    if ((v10 & 1) == 0)
    {
      CFStringAppend(v3, @"(");
      CFStringAppend(v3, @"public");
      CFStringAppend(v3, @""));
    }

    if (v5 || (uint64_t v5 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks)) != 0LL) {
      CFArrayAppendValue(v5, v8);
    }
    CFTypeID v6 = 0;
LABEL_59:
    ++v4;
  }

  while (v4 < CFArrayGetCount(*(CFArrayRef *)(a1 + 1104)));
  id v21 = v5 == 0LL;
  if (v5)
  {
    if (CFArrayGetCount(v5) >= 1)
    {
      CFIndex v22 = 0LL;
      do
      {
        uint64_t v23 = *(const __CFArray **)(a1 + 1104);
        uint64_t v24 = CFArrayGetCount(v23);
        CFIndex v25 = CFArrayGetValueAtIndex(v5, v22);
        v32.id location = 0LL;
        v32.length = v24;
        CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v23, v32, v25);
        if (FirstIndexOfValue != -1) {
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 1104), FirstIndexOfValue);
        }
        ++v22;
      }

      while (v22 < CFArrayGetCount(v5));
    }
  }

  else
  {
    id v21 = 1;
  }

  if (v30 > 0)
  {
    CFNumberRef v27 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "Deferring auto-join attempt for %@ ", v3 message];
    }
    objc_autoreleasePoolPop(v27);
  }

  if (!v21) {
    CFRelease(v5);
  }
LABEL_77:
  CFRelease(v3);
}

        if ([*(id *)(v5 + 6728) isHotspotDeviceSupportADHS:a2])
        {
          CFNumberRef v27 = 0LL;
          CFMutableDictionaryRef v28 = 1LL;
LABEL_46:
          (*(void (**)(uint64_t, uint64_t, NSError *))(a3 + 16))(a3, v28, v27);
          goto LABEL_47;
        }

        io_object_t v11 = NSPOSIXErrorDomain;
        uint64_t v40 = NSLocalizedDescriptionKey;
        uint64_t v12 = @"ADHS not supported";
        goto LABEL_43;
      }

      uint64_t v38 = NSPOSIXErrorDomain;
      uint64_t v40 = NSLocalizedDescriptionKey;
      CFIndex v39 = @"No auto-join manager configured";
    }

    else
    {
      uint64_t v38 = NSPOSIXErrorDomain;
      uint64_t v40 = NSLocalizedDescriptionKey;
      CFIndex v39 = @"No device manager configured";
    }

    uint64_t v41 = v39;
    uint64_t v33 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v41,  &v40,  1LL);
    uint64_t v34 = v38;
    CFBooleanRef v35 = 6LL;
    goto LABEL_45;
  }

void sub_1000567AC(const __CFArray *a1, double a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  double Current = CFAbsoluteTimeGetCurrent();
  if (Count)
  {
    double v6 = Current;
    if (Current != 0.0)
    {
      CFIndex v7 = 0LL;
      uint64_t v8 = Count & ~(Count >> 63);
      while (v8 != v7)
      {
        CFIndex v9 = v7;
        ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
        if (ValueAtIndex)
        {
          double v11 = sub_10012F6DC((uint64_t)ValueAtIndex);
          CFIndex v7 = v9 + 1;
          if (v6 - v11 > a2) {
            continue;
          }
        }

        if (!v9) {
          return;
        }
        goto LABEL_8;
      }

      CFIndex v9 = v8;
      if (v8)
      {
LABEL_8:
        v12.id location = 0LL;
        v12.length = v9;
        CFArrayReplaceValues(a1, v12, 0LL, 0LL);
      }
    }
  }

uint64_t sub_100056864(uint64_t a1, const __CFDictionary *a2, const __CFSet *a3)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (!Mutable) {
    return 1LL;
  }
  CFIndex v7 = Mutable;
  sub_100056928(a1, a2, Mutable);
  if (CFArrayGetCount(v7) < 1)
  {
LABEL_6:
    uint64_t v10 = 1LL;
  }

  else
  {
    CFIndex v8 = 0LL;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v7, v8);
      if (!CFSetContainsValue(a3, ValueAtIndex)) {
        break;
      }
      if (++v8 >= CFArrayGetCount(v7)) {
        goto LABEL_6;
      }
    }

    uint64_t v10 = 0LL;
  }

  CFRelease(v7);
  return v10;
}

void sub_100056928(uint64_t a1, CFDictionaryRef theDict, __CFArray *a3)
{
  uint64_t valuePtr = 0LL;
  int v20 = 0;
  if (a3 && theDict && *(void *)(a1 + 5656))
  {
    CFBooleanRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"SCAN_CHANNELS");
    if (Value)
    {
      double v6 = Value;
      if (CFArrayGetCount(Value) >= 1 && CFArrayGetCount(v6) >= 1)
      {
        CFIndex v7 = 0LL;
        do
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v7);
          CFIndex v9 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"CHANNEL");
          CFNumberGetValue(v9, kCFNumberCFIndexType, &valuePtr);
          uint64_t v10 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"CHANNEL_FLAGS");
          CFNumberGetValue(v10, kCFNumberSInt32Type, &v20);
          v20 &= 0x2018u;
          CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v20);
          *(_OWORD *)__int128 keys = *(_OWORD *)&off_1001E32F0;
          __int128 values = v9;
          CFNumberRef v23 = v11;
          CFDictionaryRef v12 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)&values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          CFRelease(v11);
          CFArrayAppendValue(a3, v12);
          CFRelease(v12);
          ++v7;
        }

        while (v7 < CFArrayGetCount(v6));
      }
    }

    if (!CFArrayGetCount(a3))
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 5656));
      if (!Count)
      {
        sub_100044EB0(a1, *(const void **)(a1 + 112), *(__CFArray **)(a1 + 5656));
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 5656));
      }

      if (Count >= 1)
      {
        for (CFIndex i = 0LL; i != Count; ++i)
        {
          CFTypeRef v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 5656), i);
          uint64_t v16 = (const __CFNumber *)CFDictionaryGetValue(v15, @"SUP_CHANNEL");
          CFNumberGetValue(v16, kCFNumberCFIndexType, &valuePtr);
          CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(v15, @"SUP_CHANNEL_FLAGS");
          CFNumberGetValue(v17, kCFNumberSInt32Type, &v20);
          v20 &= 0x2018u;
          CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v20);
          *(_OWORD *)__int128 keys = *(_OWORD *)&off_1001E32F0;
          __int128 values = v16;
          CFNumberRef v23 = v18;
          CFDictionaryRef v19 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)&values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          CFRelease(v18);
          CFArrayAppendValue(a3, v19);
          CFRelease(v19);
        }
      }
    }
  }

void sub_100056C14(const __CFDictionary *a1, __CFArray *a2)
{
  if (a1 && a2)
  {
    CFBooleanRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"SCAN_SSID_LIST");
    if (Value && (uint64_t v5 = Value, CFArrayGetCount(Value) >= 1))
    {
      if (CFArrayGetCount(v5) >= 1)
      {
        CFIndex v6 = 0LL;
        do
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v6);
          if (ValueAtIndex)
          {
            CFIndex v8 = CFDictionaryGetValue(ValueAtIndex, @"SSID_STR");
            if (v8) {
              CFArrayAppendValue(a2, v8);
            }
          }

          ++v6;
        }

        while (v6 < CFArrayGetCount(v5));
      }
    }

    else
    {
      CFIndex v9 = CFDictionaryGetValue(a1, @"SSID_STR");
      if (v9) {
        CFArrayAppendValue(a2, v9);
      }
    }

    if (!CFArrayGetCount(a2)) {
      CFArrayAppendValue(a2, &stru_1001EB6E0);
    }
  }

__CFDictionary *sub_100056D08(uint64_t a1)
{
  uint64_t v11 = 0LL;
  uint64_t valuePtr = 0LL;
  uint64_t v2 = (const __CFNumber *)sub_1000951FC(a1, @"CHANNEL");
  if (!v2) {
    return 0LL;
  }
  int v3 = v2;
  CFNumberGetValue(v2, kCFNumberSInt64Type, &v11);
  CFNumberRef v4 = (const __CFNumber *)sub_1000951FC(a1, @"CHANNEL_FLAGS");
  if (v4)
  {
    CFNumberGetValue(v4, kCFNumberSInt64Type, &valuePtr);
    uint64_t v5 = valuePtr & 0x2018;
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  uint64_t valuePtr = v5;
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
  if (!v6) {
    return 0LL;
  }
  CFNumberRef v7 = v6;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFIndex v9 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, @"CHANNEL", v3);
    CFDictionarySetValue(v9, @"CHANNEL_FLAGS", v7);
  }

  CFRelease(v7);
  return v9;
}

uint64_t sub_100056E14(const __CFDictionary *a1)
{
  if (a1 && (CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a1, @"SCAN_TRIM_RESULTS")) != 0LL) {
    return CFBooleanGetValue(Value);
  }
  else {
    return 0LL;
  }
}

CFMutableDictionaryRef sub_100056E40(uint64_t a1)
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (result)
  {
    int v3 = result;
    CFNumberRef v4 = sub_1000951FC(a1, @"RSSI");
    if (v4) {
      CFDictionaryAddValue(v3, @"RSSI", v4);
    }
    uint64_t v5 = sub_1000951FC(a1, @"BSSID");
    if (v5) {
      CFDictionaryAddValue(v3, @"BSSID", v5);
    }
    CFNumberRef v6 = sub_1000951FC(a1, @"CHANNEL");
    if (v6) {
      CFDictionaryAddValue(v3, @"CHANNEL", v6);
    }
    CFNumberRef v7 = sub_1000951FC(a1, @"CHANNEL_FLAGS");
    if (v7) {
      CFDictionaryAddValue(v3, @"CHANNEL_FLAGS", v7);
    }
    CFIndex v8 = sub_1000951FC(a1, @"AGE");
    if (v8) {
      CFDictionaryAddValue(v3, @"AGE", v8);
    }
    CFIndex v9 = sub_1000951FC(a1, @"IE");
    if (v9) {
      CFDictionaryAddValue(v3, @"IE", v9);
    }
    uint64_t v10 = sub_1000951FC(a1, @"80211D_IE");
    if (v10) {
      CFDictionaryAddValue(v3, @"80211D_IE", v10);
    }
    uint64_t v11 = sub_1000951FC(a1, @"AP_MODE");
    if (v11) {
      CFDictionaryAddValue(v3, @"AP_MODE", v11);
    }
    CFDictionaryRef v12 = sub_1000951FC(a1, @"SSID_STR");
    if (v12) {
      CFDictionaryAddValue(v3, @"SSID_STR", v12);
    }
    BOOL v13 = sub_1000951FC(a1, @"SSID");
    if (v13) {
      CFDictionaryAddValue(v3, @"SSID", v13);
    }
    id v14 = sub_100094AAC((uint64_t)kCFAllocatorDefault, v3);
    CFRelease(v3);
    return (CFMutableDictionaryRef)v14;
  }

  return result;
}

void sub_100057040(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5)
{
  CFIndex v8 = (void *)(a1 + 4776);
  CFIndex v9 = *(void (**)(uint64_t, uint64_t, const void *, uint64_t, uint64_t, uint64_t))(a1 + 4776);
  uint64_t v10 = *(void *)(a1 + 4784);
  uint64_t v11 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    CFDictionaryRef v12 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@*} %@",  @"ASSOC",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Completed Apple80211AssociateAsync (%d - 0x%X) to %@",  a5,  a5,  sub_100095BC8(a3))),  "UTF8String"));
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buuint64_t f = 136446210;
      uint64_t v24 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v12, "UTF8String")),  "UTF8String");
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
    }
  }

  objc_autoreleasePoolPop(v11);
  if (a3 && !(_DWORD)a5)
  {
    BOOL v13 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      id v14 = *(_DWORD *)(a1 + 5936) ? "Manually" : "Auto";
      CFTypeRef v15 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@-} %@",  @"ASSOC",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s Joined: %@",  v14,  sub_100095BC8(a3))),  "UTF8String"));
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v15, "UTF8String")),  "UTF8String");
        *(_DWORD *)buuint64_t f = 136446210;
        uint64_t v24 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
      }
    }

    objc_autoreleasePoolPop(v13);
    goto LABEL_24;
  }

  *(void *)(a1 + 5912) = 0LL;
  CFNumberRef v17 = *(const void **)(a1 + 5920);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(a1 + 5920) = 0LL;
  }

  CFNumberRef v18 = objc_autoreleasePoolPush();
  if (a3)
  {
    if (qword_100219F60)
    {
      CFDictionaryRef v19 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@-} %@",  @"ASSOC",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to join(%d - 0x%X): %@",  a5,  a5,  sub_100095BC8(a3))),  "UTF8String"));
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
LABEL_21:
        int v20 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v19, "UTF8String")),  "UTF8String");
        *(_DWORD *)buuint64_t f = 136446210;
        uint64_t v24 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%{public}s",  buf,  0xCu);
      }
    }
  }

  else if (qword_100219F60)
  {
    CFDictionaryRef v19 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@-} %@",  @"ASSOC",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to join(%d - 0x%X)",  a5,  a5)),  "UTF8String"));
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
  }

  objc_autoreleasePoolPop(v18);
  if ((_DWORD)a5) {
    sub_100027010(a1, a5, a3, *(_DWORD *)(a1 + 5872));
  }
LABEL_24:
  *CFIndex v8 = 0LL;
  v8[1] = 0LL;
  if (v9) {
    v9(a1, a2, a3, a4, a5, v10);
  }
  sub_10004CC70(a1, a3, a5 == 0);
  sub_10004F9BC(a1);
}

void sub_100057500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFNumberRef v6 = (void *)(a1 + 4656);
  CFNumberRef v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 4656);
  uint64_t v8 = *(void *)(a1 + 4664);
  if (!(_DWORD)a3 && v7)
  {
    sub_10004F9BC(a1);
    *CFNumberRef v6 = 0LL;
    v6[1] = 0LL;
LABEL_4:
    v7(a1, a2, a3, v8);
    goto LABEL_5;
  }

  *CFNumberRef v6 = 0LL;
  *(void *)(a1 + 4664) = 0LL;
  if (v7) {
    goto LABEL_4;
  }
LABEL_5:
  CFNumberRef number = 0LL;
  int valuePtr = 0;
  if (*(void *)(a1 + 4984))
  {
    for (int i = 6; ; --i)
    {
      uint64_t v10 = Apple80211CopyValue(*(void *)(a1 + 16), 15LL, 0LL, &number);
      uint64_t v11 = v10;
      if ((int)v10 <= 15)
      {
        if ((_DWORD)v10 != -3905) {
          break;
        }
      }

      else if ((_DWORD)v10 != 61 && (_DWORD)v10 != 16)
      {
        goto LABEL_27;
      }

      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }

    if ((_DWORD)v10)
    {
LABEL_27:
      id v14 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WiFiError: %d ",  "__WiFiDeviceProcessHostApStateChange",  v11);
      }
      objc_autoreleasePoolPop(v14);
      return;
    }

    if (CFNumberGetValue(number, kCFNumberIntType, &valuePtr) && (valuePtr & 8) == 0 && *(_BYTE *)(a1 + 56))
    {
      *(_BYTE *)(a1 + 56) = 0;
      (*(void (**)(uint64_t, void, void, void))(a1 + 4984))(a1, 0LL, *(void *)(a1 + 4960), 0LL);
    }
  }

  else
  {
    BOOL v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Error: null callback",  "__WiFiDeviceProcessHostApStateChange");
    }
    objc_autoreleasePoolPop(v13);
  }

void sub_1000576B8(void *a1, uint64_t a2, uint64_t a3)
{
  CFNumberRef v6 = a1 + 586;
  CFNumberRef v7 = (void (*)(void *, uint64_t, uint64_t, uint64_t))a1[586];
  uint64_t v8 = a1[587];
  CFIndex v9 = objc_autoreleasePoolPush();
  if ((_DWORD)a3)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: error %d bringing AWDL up",  "__WiFiDeviceProcessAwdlStartedEvent",  a3);
    }
    objc_autoreleasePoolPop(v9);
    uint64_t v10 = (const void *)a1[588];
    if (v10)
    {
      CFRelease(v10);
      a1[588] = 0LL;
    }

    uint64_t v11 = (const void *)a1[589];
    if (v11)
    {
      CFRelease(v11);
      a1[589] = 0LL;
    }

    a1[590] = 0LL;
  }

  else
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: successfully started AWDL",  "__WiFiDeviceProcessAwdlStartedEvent");
    }
    objc_autoreleasePoolPop(v9);
  }

  *CFNumberRef v6 = 0LL;
  v6[1] = 0LL;
  if (v7) {
    v7(a1, a2, a3, v8);
  }
  sub_10004F9BC((uint64_t)a1);
}

uint64_t sub_1000577BC( uint64_t a1, const void *a2, uint64_t a3, void (*a4)(uint64_t, const void *, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v10 = sub_10004FB0C(a1);
  if (v10)
  {
    uint64_t v11 = sub_100133814((uint64_t)v10, a2, a3);
    if (a4) {
      a4(a1, a2, v11, a5);
    }
  }

  else
  {
    BOOL v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: not an AWDL interface.", "__WiFiDeviceStopAwdl");
    }
    objc_autoreleasePoolPop(v13);
    return 4294963393LL;
  }

  return v11;
}

void sub_100057878(const __CFArray *a1, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count)
  {
    CFIndex v5 = Count;
    if (Count >= 1)
    {
      for (CFIndex i = 0LL; i != v5; ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, i);
        if (ValueAtIndex)
        {
          uint64_t v8 = ValueAtIndex;
          CFBooleanRef Value = CFDictionaryGetValue(ValueAtIndex, @"BSSID");
          if (Value)
          {
            uint64_t v10 = Value;
            if (CFArrayGetCount(a1) >= 1)
            {
              CFIndex v11 = 0LL;
              while (1)
              {
                CFDictionaryRef v12 = CFArrayGetValueAtIndex(a1, v11);
                if (v12)
                {
                  uint64_t v13 = (uint64_t)v12;
                  id v14 = sub_1000951FC((uint64_t)v12, @"BSSID");
                  if (CFEqual(v10, v14)) {
                    break;
                  }
                }

                if (++v11 >= CFArrayGetCount(a1)) {
                  goto LABEL_13;
                }
              }

              sub_10009D4D4(v13, v8);
            }
          }
        }

void sub_1000579B8(uint64_t a1, CFTypeRef cf)
{
  CFNumberRef v4 = *(const void **)(a1 + 5736);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 5736) = 0LL;
  }

  if (cf) {
    *(void *)(a1 + 5736) = CFRetain(cf);
  }
}

void sub_1000579F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 64))
  {
    if (*(void *)(v1 + 5736))
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      if (Mutable)
      {
        CFNumberRef v4 = Mutable;
        CFDictionarySetValue(Mutable, @"CompletedUsingCache", kCFBooleanTrue);
        sub_100057ABC((void *)v1, *(void *)(v1 + 112), *(const __CFArray **)(v1 + 5736), (uint64_t)v4, 0LL);
        CFRelease(v4);
      }

      else
      {
        sub_100057ABC((void *)v1, *(void *)(v1 + 112), *(const __CFArray **)(v1 + 5736), 0LL, 0LL);
      }
    }

    CFIndex v5 = *(const void **)(a1 + 32);
  }

  else
  {
    CFIndex v5 = *(const void **)(a1 + 32);
  }

  CFRelease(v5);
}

void sub_100057ABC(void *a1, uint64_t a2, const __CFArray *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a1 + 625;
  CFIndex v11 = (void (*)(void *, uint64_t, const __CFArray *, uint64_t, uint64_t, uint64_t))a1[625];
  uint64_t v12 = a1[626];
  uint64_t v13 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "Completed Apple80211GasRequest on %@ (%d)", a2, a5 message];
  }
  objc_autoreleasePoolPop(v13);
  *uint64_t v10 = 0LL;
  v10[1] = 0LL;
  if (a3 && (CFTypeID v14 = CFGetTypeID(a3), v14 == CFArrayGetTypeID()))
  {
    if (!(_DWORD)a5 && a1[716] && !a1[717] && CFArrayGetCount(a3)) {
      sub_100057D70((uint64_t)a1, a3);
    }
    if (v11)
    {
      CFTypeRef v15 = (const __CFDictionary *)a1[716];
      if (v15)
      {
        CFBooleanRef Value = (const __CFArray *)CFDictionaryGetValue(v15, @"GAS_NETWORKS");
        CFNumberRef v17 = Value;
        if (Value) {
          sub_100057878(Value, a3);
        }
        v11(a1, a2, v17, a4, a5, v12);
        CFNumberRef v18 = (const void *)a1[716];
        if (v18)
        {
          CFRelease(v18);
          a1[716] = 0LL;
        }
      }

      else
      {
        CFDictionaryRef v19 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: calling CB with cached GAS response",  "__WiFiDeviceProcessGasDoneEvent");
        }
        objc_autoreleasePoolPop(v19);
        v11(a1, a2, (const __CFArray *)a1[717], a4, a5, v12);
      }
    }

    int v20 = (const void *)a1[717];
    if (v20)
    {
      CFRelease(v20);
      a1[717] = 0LL;
    }
  }

  else if (v11)
  {
    v11(a1, a2, 0LL, a4, a5, v12);
  }

  sub_10004F9BC((uint64_t)a1);
}

void sub_100057C88(uint64_t a1, CFTypeRef cf)
{
  CFNumberRef v4 = *(const void **)(a1 + 5728);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 572_Block_object_dispose(va, 8) = 0LL;
  }

  if (cf) {
    *(void *)(a1 + 572_Block_object_dispose(va, 8) = CFRetain(cf);
  }
}

__CFArray *sub_100057CC8(const __CFArray *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      for (CFIndex i = 0LL; i != v4; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        if (ValueAtIndex)
        {
          CFNumberRef v7 = sub_1000951FC((uint64_t)ValueAtIndex, @"BSSID");
          if (v7) {
            CFArrayAppendValue(Mutable, v7);
          }
        }
      }
    }
  }

  return Mutable;
}

void sub_100057D70(uint64_t a1, CFArrayRef theArray)
{
  if (*(_BYTE *)(a1 + 5760))
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count)
    {
      CFIndex v5 = Count;
      unsigned __int16 valuePtr = -21846;
      unsigned __int16 v23 = -21846;
      if (Count < 1) {
        goto LABEL_16;
      }
      CFIndex v6 = 0LL;
      char v7 = 1;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v6);
        if (ValueAtIndex)
        {
          CFIndex v9 = ValueAtIndex;
          CFBooleanRef Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"ANQP_STATUS");
          if (Value)
          {
            CFNumberGetValue(Value, kCFNumberSInt16Type, &valuePtr);
            if (valuePtr) {
              char v7 = 0;
            }
            CFIndex v11 = (const __CFNumber *)CFDictionaryGetValue(v9, @"CHANNEL");
            if (v11)
            {
              CFNumberGetValue(v11, kCFNumberSInt16Type, &v23);
              uint64_t v12 = CFDictionaryGetValue(v9, @"BSSID");
              if (v12)
              {
                uint64_t v13 = v12;
                CFTypeID v14 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  [(id)qword_100219F60 WFLog:3, "GAS response from %@ ch %3d status %d", v13, v23, valuePtr message];
                }
                objc_autoreleasePoolPop(v14);
              }
            }
          }
        }

        ++v6;
      }

      while (v5 != v6);
      if (v7)
      {
LABEL_16:
        CFTypeRef v15 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Adding GAS cache entry",  "__WiFiDeviceUpdateGasCache");
        }
        objc_autoreleasePoolPop(v15);
        uint64_t v16 = *(__CFArray **)(a1 + 5752);
        if (v16)
        {
          CFNumberRef v17 = *(const void **)(a1 + 5728);
          if (v17)
          {
            CFNumberRef v18 = sub_10012F5F0((uint64_t)kCFAllocatorDefault);
            if (v18)
            {
              CFDictionaryRef v19 = v18;
              if (sub_10012F650((uint64_t)v18, v17)
                && sub_10012F6B0((uint64_t)v19)
                && sub_10012F680((uint64_t)v19, theArray))
              {
                CFArrayAppendValue(v16, v19);
              }

              CFRelease(v19);
            }
          }
        }

        sub_1000567AC(*(const __CFArray **)(a1 + 5752), 3600.0);
        int v20 = *(dispatch_source_s **)(a1 + 5768);
        dispatch_time_t v21 = dispatch_time(0LL, 3600000000000LL);
        dispatch_source_set_timer(v20, v21, 0xFFFFFFFFFFFFFFFFLL, 0LL);
      }

      else
      {
        CFIndex v22 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: One or more GAS results status is not OK.",  "__WiFiDeviceUpdateGasCache");
        }
        objc_autoreleasePoolPop(v22);
      }
    }
  }

void sub_100057FE0(uint64_t a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4)
{
  int v5 = *(_DWORD *)(a1 + 5964);
  if (!v5) {
    goto LABEL_17;
  }
  CFIndex v9 = (void *)(a1 + 5464);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 5464);
  uint64_t v11 = *(void *)(a1 + 5472);
  *(_DWORD *)(a1 + 5964) = v5 - 1;
  uint64_t v12 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "Received APPLE80211_M_SENSING_DONE on %@ (%d), expected remaing result[%d]", a2, a4, *(unsigned int *)(a1 + 5964) message];
  }
  objc_autoreleasePoolPop(v12);
  *CFIndex v9 = 0LL;
  *(void *)(a1 + 5472) = 0LL;
  if (!a3 || (_DWORD)a4 || !CFDictionaryGetCount(a3)) {
    goto LABEL_15;
  }
  MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, a3);
  if (MutableCopy)
  {
    CFTypeID v14 = MutableCopy;
    if (*(_BYTE *)(a1 + 5958)) {
      CFBooleanRef v15 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v15 = kCFBooleanFalse;
    }
    CFDictionaryAddValue(MutableCopy, @"SENSING_RESULTS_DATA_DEVICE_MOTION_STATE", v15);
    if (*(_BYTE *)(a1 + 5959)) {
      CFBooleanRef v16 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v16 = kCFBooleanFalse;
    }
    CFDictionaryAddValue(v14, @"SENSING_RESULTS_DATA_DEVICE_CHARGING_STATE", v16);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 5968), v14);
    CFRelease(v14);
LABEL_15:
    if (v10) {
      v10(a1, a2, a4, v11);
    }
    goto LABEL_17;
  }

  CFNumberRef v17 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null sensingUpdateResult",  "__WiFiDeviceProcessSensingDoneEvent");
  }
  objc_autoreleasePoolPop(v17);
LABEL_17:
  sub_10004F9BC(a1);
}

void sub_100058180(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4)
{
  uint64_t v8 = objc_autoreleasePoolPush();
  CFIndex v9 = *(void (**)(uint64_t, uint64_t, _WORD *, void, uint64_t, uint64_t))(a1 + 4760);
  uint64_t v10 = *(void *)(a1 + 4768);
  *(void *)(a1 + 476_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 4760) = 0LL;
  if (!a3)
  {
LABEL_4:
    if (!v9) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  CFTypeID v11 = CFGetTypeID(a3);
  if (v11 == CFDictionaryGetTypeID())
  {
    a3 = sub_100094AAC((uint64_t)kCFAllocatorDefault, a3);
    goto LABEL_4;
  }

  a3 = 0LL;
  if (v9) {
LABEL_5:
  }
    v9(a1, a2, a3, 0LL, a4, v10);
LABEL_6:
  if (a3) {
    CFRelease(a3);
  }
  objc_autoreleasePoolPop(v8);
}

void sub_100058248(uint64_t a1, const void *a2, CFDictionaryRef theDict)
{
  char valuePtr = 0;
  int v68 = 0;
  char v67 = 0;
  int v66 = 0;
  if (!theDict)
  {
    CFNumberRef v59 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: linkChangedEventDataDict is NULL",  "__WiFiDeviceProcessLinkEvent");
    }
    goto LABEL_90;
  }

  CFBooleanRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LINK_CHANGED_IS_LINKDOWN");
  char v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RSSI");
  if (!Value)
  {
    CFNumberRef v59 = objc_autoreleasePoolPush();
    CFTypeID v60 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      uint64_t v61 = "%s: isLinkDownNumRef is null";
LABEL_89:
      objc_msgSend(v60, "WFLog:message:", 4, v61, "__WiFiDeviceProcessLinkEvent");
    }

LABEL_90:
    objc_autoreleasePoolPop(v59);
    return;
  }

  uint64_t v8 = v7;
  if (!v7)
  {
    CFNumberRef v59 = objc_autoreleasePoolPush();
    CFTypeID v60 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      uint64_t v61 = "%s: rssiNumRef is null";
      goto LABEL_89;
    }

    goto LABEL_90;
  }

  CFNumberGetValue(Value, kCFNumberSInt8Type, &valuePtr);
  CFNumberGetValue(v8, kCFNumberSInt32Type, &v68);
  if (valuePtr)
  {
    *(_DWORD *)(a1 + 5944) = 0;
    CFIndex v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LINKDOWN_IS_INVOL");
    uint64_t v10 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LINKDOWN_REASON_CODE");
    CFTypeID v11 = 0LL;
    if (v9)
    {
      uint64_t v12 = v10;
      if (v10)
      {
        CFNumberGetValue(v9, kCFNumberSInt8Type, &v67);
        CFNumberGetValue(v12, kCFNumberIntType, &v66);
        uint64_t v13 = (_DWORD *)(a1 + 5800);
        if (v67)
        {
          CFTypeID v14 = kCFAllocatorDefault;
        }

        else
        {
          CFTypeID v14 = kCFAllocatorDefault;
          if (*v13)
          {
            if ((v66 & 0xFFFFFFF7) == 0)
            {
              CFNumberRef v27 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 5800));
              CFDictionarySetValue(theDict, @"LINKDOWN_REASON_CODE", v27);
              if (v27) {
                CFRelease(v27);
              }
            }
          }
        }

        if (*v13 == 1015) {
          int v15 = 2;
        }
        else {
          int v15 = *v13 == 1011;
        }
        *(_DWORD *)buuint64_t f = v15;
        CFNumberRef v16 = CFNumberCreate(v14, kCFNumberIntType, buf);
        CFDictionarySetValue(theDict, @"CLIENT_REASON", v16);
        if (v16) {
          CFRelease(v16);
        }
        CFTypeID v11 = 0LL;
      }
    }
  }

  else
  {
    CFNumberRef v17 = sub_100040538(a1, a2);
    if (!v17)
    {
      char v63 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4 message:"Link up event with no current network detected. Dropping."];
      }
      objc_autoreleasePoolPop(v63);
      return;
    }

    CFTypeID v11 = v17;
    CFDictionaryAddValue(theDict, @"LINK_CHANGED_NETWORK", v17);
    CFNumberRef v18 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      CFDictionaryRef v19 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@+} %@",  @"LINK",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s: link up to %@",  "__WiFiDeviceProcessLinkEvent",  sub_100095BC8(v11))),  "UTF8String"));
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v19, "UTF8String")),  "UTF8String");
        *(_DWORD *)buuint64_t f = 136446210;
        int v74 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
      }
    }

    objc_autoreleasePoolPop(v18);
    if (_os_feature_enabled_impl("WiFiManager", "ColocatedScopeTransition"))
    {
      CFMutableArrayRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
      for (int i = 6; ; --i)
      {
        uint64_t v23 = Apple80211Get(*(void *)(a1 + 16), 387LL, 0LL, Mutable, 8LL);
        uint64_t v24 = v23;
        if ((int)v23 <= 15)
        {
          if ((_DWORD)v23 != -3905) {
            break;
          }
        }

        else if ((_DWORD)v23 != 61 && (_DWORD)v23 != 16)
        {
          goto LABEL_31;
        }

        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }

      if ((_DWORD)v23)
      {
LABEL_31:
        int v26 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "Failed APPLE80211_IOC_COLOCATED_NETWORK_SCOPE_ID - %d",  v24,  v65);
        }
        goto LABEL_40;
      }

      if (!CFStringGetLength(Mutable)) {
        goto LABEL_41;
      }
      int v26 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "ColocatedScopeId for %@ - '%@'", sub_100095BC8(v11), Mutable message];
      }
LABEL_40:
      objc_autoreleasePoolPop(v26);
LABEL_41:
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
  }

  if (!valuePtr && *(_BYTE *)(a1 + 5952) && MGGetBoolAnswer(@"InternalBuild"))
  {
    BOOL v64 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: 3 2 1 crashing because of debug command",  "__WiFiDeviceProcessLinkEvent");
    }
    objc_autoreleasePoolPop(v64);
    exit(14);
  }

  CFMutableDictionaryRef v28 = *(void (**)(uint64_t, const void *, void, CFDictionaryRef))(a1 + 4952);
  if (v28) {
    v28(a1, a2, *(void *)(a1 + 4960), theDict);
  }
  if (!valuePtr)
  {
    sub_100043C58(a1);
    sub_10005951C((_BYTE *)a1, (uint64_t)a2, theDict);
    CFBooleanRef v37 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      uint64_t v38 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@*} %@",  @"LINK",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s: %@ - Initializing lqm value: rawRssi %d, scaledRssi %f, noise %ld, snr %ld",  "__WiFiDeviceProcessLinkEvent",  sub_100095BC8(v11),  *(unsigned int *)(a1 + 264),  *(float *)(a1 + 268),  *(void *)(a1 + 296),  *(void *)(a1 + 280))),  "UTF8String"));
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        CFIndex v39 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v38, "UTF8String")),  "UTF8String");
        *(_DWORD *)buuint64_t f = 136446210;
        int v74 = v39;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
      }
    }

    objc_autoreleasePoolPop(v37);
    uint64_t v40 = *(dispatch_source_s **)(a1 + 72);
    dispatch_time_t v41 = dispatch_time(0LL, 300000000000LL);
    dispatch_source_set_timer(v40, v41, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    CFRange v42 = *(dispatch_source_s **)(a1 + 80);
    dispatch_time_t v43 = dispatch_time(0LL, 60000000000LL);
    dispatch_source_set_timer(v42, v43, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    *(CFAbsoluteTime *)(a1 + 4304) = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)(a1 + 5800) = 0;
    if (v11) {
      goto LABEL_81;
    }
    return;
  }

  sub_10005951C((_BYTE *)a1, (uint64_t)a2, theDict);
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 72), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 80), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
  CFMutableDictionaryRef v29 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LINKDOWN_IS_INVOL");
  CFTypeID v30 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LINKDOWN_REASON_CODE");
  CFIndex v31 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LINKDOWN_SUBREASON_CODE");
  if (v29)
  {
    if (v30)
    {
      CFTypeID v32 = v31;
      if (v31)
      {
        char v72 = -86;
        unsigned int v70 = -1431655766;
        unsigned int v71 = -1431655766;
        CFNumberGetValue(v29, kCFNumberSInt8Type, &v72);
        CFNumberGetValue(v30, kCFNumberIntType, &v71);
        CFNumberGetValue(v32, kCFNumberIntType, &v70);
        sub_100028A60(a1, 0, v72, v71, v70, *(_DWORD *)(a1 + 264), 0LL, *(_DWORD *)(a1 + 5872));
        if (v71 == 7)
        {
          uint64_t v33 = sub_100052664(a1);
          if (v33)
          {
            uint64_t v34 = v33;
            CFBooleanRef v35 = (const __CFString *)sub_100095BC8(v33);
            CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v35);
            CFRelease(v34);
LABEL_65:
            CFMutableArrayRef v50 = "went down";
            goto LABEL_66;
          }
        }

        else
        {
          CFNumberRef v44 = *(const __CFData **)(a1 + 5816);
          if (v44)
          {
            BytePtr = CFDataGetBytePtr(v44);
            CFIndex Length = CFDataGetLength(*(CFDataRef *)(a1 + 5816));
            CFStringRef Copy = CFStringCreateWithBytes(kCFAllocatorDefault, BytePtr, Length, 0x8000100u, 0);
            goto LABEL_65;
          }

          dispatch_time_t v47 = *(const __CFData **)(a1 + 5808);
          if (v47)
          {
            CFTypeRef v48 = CFDataGetBytePtr(v47);
            CFIndex v49 = CFDataGetLength(*(CFDataRef *)(a1 + 5808));
            CFStringRef Copy = CFStringCreateWithBytes(kCFAllocatorDefault, v48, v49, 0x8000100u, 0);
            CFMutableArrayRef v50 = "up failed";
LABEL_66:
            if (v71 == 3)
            {
              CFStringRef v51 = sub_10005C014(*(void *)(a1 + 16), v70);
              int v52 = objc_autoreleasePoolPush();
              if (qword_100219F60)
              {
                size_t v53 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@-} %@",  @"LINK",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Link %s: %@ - isInVoluntary %d, reason %@(0x%x), subreason %@(0x%x), rssi %d",  v50,  Copy,  v72,  sub_10003B050(v71),  v71,  v51,  v70,  *(unsigned int *)(a1 + 264))),  "UTF8String"));
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v54 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v53, "UTF8String")),  "UTF8String");
                  *(_DWORD *)buuint64_t f = 136446210;
                  int v74 = v54;
                  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%{public}s",  buf,  0xCu);
                }
              }

              objc_autoreleasePoolPop(v52);
              if (v51) {
                CFRelease(v51);
              }
            }

            else
            {
              uint64_t v55 = objc_autoreleasePoolPush();
              if (qword_100219F60)
              {
                uint64_t v56 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@-} %@",  @"LINK",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Link %s: %@ - isInVoluntary %d, reason %@(%d), subreason %d, rssi %d",  v50,  Copy,  v72,  sub_10003B050(v71),  v71,  v70,  *(unsigned int *)(a1 + 264))),  "UTF8String"));
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  size_t v57 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v56, "UTF8String")),  "UTF8String");
                  *(_DWORD *)buuint64_t f = 136446210;
                  int v74 = v57;
                  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%{public}s",  buf,  0xCu);
                }
              }

              objc_autoreleasePoolPop(v55);
            }

            if (Copy) {
              CFRelease(Copy);
            }
            goto LABEL_78;
          }
        }

        CFStringRef Copy = 0LL;
        goto LABEL_65;
      }
    }
  }

  CFNumberRef v62 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: linkChangedEventDataDict has null key values",  "__WiFiDeviceProcessLinkDownData");
  }
  objc_autoreleasePoolPop(v62);
LABEL_78:
  kdebug_trace(731381832LL, 0LL, 0LL, 0LL, 0LL);
  uint64_t v58 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:4 message:"Disassociated."];
  }
  objc_autoreleasePoolPop(v58);
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 264) = *(void *)(a1 + 240);
  sub_100043C58(a1);
  if (v11) {
LABEL_81:
  }
    CFRelease(v11);
}

    char v72 = (const __CFString *)sub_10003BEDC((uint64_t)v14);
    if (CFStringCompare(v72, @"locationd", 0LL))
    {
      int v73 = (const __CFString *)sub_10003BEDC((uint64_t)v14);
      int v74 = CFStringCompare(v73, @"milod", 0LL) == kCFCompareEqualTo;
    }

    else
    {
      int v74 = 1;
    }

    CFBooleanRef v35 = v107;
    if (CFDictionaryGetValue(v18, @"SSID_STR")
      || _os_feature_enabled_impl("CoreWiFi", "WiFi6EAlwaysFollowup"))
    {
      if (!v74) {
        CFDictionarySetValue(v107, @"SCAN_6GHZ_FOLLOWUP", kCFBooleanTrue);
      }
      CFDictionarySetValue(v107, @"SCAN_INCL_ORIG_RNR", kCFBooleanTrue);
    }

    uint64_t v75 = (const __CFString *)sub_10003BEDC((uint64_t)v14);
    if (CFStringCompare(v75, @"pipelined", 0LL) == kCFCompareEqualTo)
    {
      CFIndex v76 = valuePtr;
      unint64_t v77 = objc_autoreleasePoolPush();
      double v78 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        if (v76) {
          uint64_t v79 = "Low priority, non-low-latency scan request from %@ \n";
        }
        else {
          uint64_t v79 = "Normal priority, low-latency scan request from %@ \n";
        }
        uint64_t v80 = sub_10003BEDC((uint64_t)v14);
        int64_t v81 = v79;
        CFNumberRef v18 = theDict;
        objc_msgSend(v78, "WFLog:message:", 3, v81, v80);
      }

      objc_autoreleasePoolPop(v77);
      int64_t v82 = (const void **)&kCFBooleanFalse;
      if (!v76) {
        int64_t v82 = (const void **)&kCFBooleanTrue;
      }
      CFBooleanRef v35 = v107;
      CFDictionarySetValue(v107, @"SCAN_LOW_LATENCY", *v82);
    }

    uint64_t v83 = sub_1000DFEFC(v35);
    if (v74)
    {
      if (v116) {
        uint64_t v84 = (const void **)&kCFBooleanTrue;
      }
      else {
        uint64_t v84 = (const void **)&kCFBooleanFalse;
      }
      CFDictionarySetValue(v35, @"SCAN_LOW_LATENCY", *v84);
      if (!v116 && v83)
      {
        CFDictionarySetValue(v35, @"SCAN_LOW_PRIORITY", kCFBooleanTrue);
        CFDictionarySetValue(v35, @"SCAN_PRIO_OVERRIDE", kCFBooleanTrue);
      }

      kdebug_trace(731381820LL, 0LL, 0LL, 0LL, 0LL);
      uint64_t v85 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4, "Normal priority scan request from %@, is5GScan=%d\n", sub_10003BEDC((uint64_t)v14), v83 message];
      }
      objc_autoreleasePoolPop(v85);
      CFBooleanRef v35 = v107;
    }

    unsigned int v86 = (const void *)sub_10003BEDC((uint64_t)v14);
    CFDictionarySetValue(v35, @"ScanReqClientName", v86);
    uint64_t v114 = sub_10003BED4((uint64_t)v14);
    unsigned int v87 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v114);
    if (v87)
    {
      CFTypeID v88 = v87;
      CFDictionarySetValue(v35, @"ScanReqClientPid", v87);
      CFRelease(v88);
    }

    double Current = CFAbsoluteTimeGetCurrent();
    __int16 v90 = CFDateCreate(kCFAllocatorDefault, Current);
    a3 = v106;
    CFNumberRef v16 = v105;
    if (v90)
    {
      CFStringRef v91 = v90;
      CFDictionarySetValue(v35, @"ScanReqReceiptTimestamp", v90);
      CFRelease(v91);
    }

    sub_10003C0D4((uint64_t)v14, v104 | 1);
    CFTypeID v92 = (const __CFNumber *)CFDictionaryGetValue(v18, @"SCAN_MERGE");
    if (v92)
    {
      CFNumberGetValue(v92, kCFNumberCFIndexType, &v115);
      int v93 = v115 != 0;
    }

    else
    {
      int v93 = 1;
    }

    if (v83) {
      BOOL v94 = v93 | 2;
    }
    else {
      BOOL v94 = v93;
    }
    sub_10003C0E4((uint64_t)v14, v94);
    CFTypeID v95 = (const void *)sub_10003BEDC((uint64_t)v14);
    CFStringRef v96 = sub_1000E0560((uint64_t)v110, v105, v35, v95, (uint64_t)sub_1000B5420, (uint64_t)v14);
    const void *v108 = v96;
    if (v96) {
      sub_10003C0D4((uint64_t)v14, v104 & 0xFFFFFFFE);
    }
    else {
      CFRetain(v14);
    }
    goto LABEL_130;
  }

  CFIndex v102 = a5;
  uint64_t v38 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  uint64_t v109 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  CFIndex v39 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  CFArrayRef theArray = v38;
  uint64_t v113 = v39;
  if (!v38 || !v109 || !v39)
  {
    const void *v108 = -3902;
    a5 = v102;
    goto LABEL_130;
  }

  if (sub_1000E10D0((uint64_t)v110, v38) || !CFArrayGetCount(v38))
  {
    uint64_t v40 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Error - Device failed to return supported channels! \n",  "_wifi_device_scan_async");
    }
    objc_autoreleasePoolPop(v40);
    const void *v108 = -3902;
    dispatch_time_t v41 = v38;
    a5 = v102;
    goto LABEL_131;
  }

  a5 = v102;
  if (CFArrayGetCount(theArray) >= 1)
  {
    uint64_t v58 = 0LL;
    do
    {
      CFNumberRef v59 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v58);
      if (v59)
      {
        CFTypeID v60 = CFDictionaryGetValue(v59, @"SUP_CHANNEL");
        CFArrayAppendValue(v109, v60);
      }

      ++v58;
    }

    while (v58 < CFArrayGetCount(theArray));
  }

  if (CFArrayGetCount(v37) < 1)
  {
LABEL_87:
    if (CFArrayGetCount(v113) <= 0)
    {
      int64_t v98 = objc_autoreleasePoolPush();
      a3 = v106;
      CFNumberRef v18 = theDict;
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Error - Scan Channel List Empty!!! (No valid channel to scan!) \n",  "_wifi_device_scan_async");
      }
      objc_autoreleasePoolPop(v98);
      const void *v108 = -3900;
      goto LABEL_146;
    }

    CFDictionarySetValue(v107, @"SCAN_CHANNELS", v113);
LABEL_89:
    CFNumberRef v18 = theDict;
    goto LABEL_90;
  }

  uint64_t v61 = 0LL;
  while (1)
  {
    CFNumberRef v62 = (const __CFDictionary *)CFArrayGetValueAtIndex(v37, v61);
    if (v62) {
      break;
    }
LABEL_86:
    if (++v61 >= CFArrayGetCount(v37)) {
      goto LABEL_87;
    }
  }

  char v63 = v62;
  BOOL v64 = CFDictionaryGetValue(v62, @"CHANNEL");
  uint64_t v65 = CFDictionaryGetValue(v63, @"CHANNEL_FLAGS");
  if (!v64)
  {
    __int16 v69 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Error - Invalid Channel(0) filtered from Scan List \n",  "_wifi_device_scan_async");
    }
    unsigned int v70 = v69;
    goto LABEL_85;
  }

  int v66 = v65;
  v119.length = CFArrayGetCount(v109);
  v119.id location = 0LL;
  if (!CFArrayContainsValue(v109, v119, v64))
  {
    unsigned int v71 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: Error - Invalid Channel(%@) filtered from Scan List \n", "_wifi_device_scan_async", v64 message];
    }
    unsigned int v70 = v71;
LABEL_85:
    objc_autoreleasePoolPop(v70);
    goto LABEL_86;
  }

  char v67 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (v67)
  {
    int v68 = v67;
    CFDictionaryAddValue(v67, @"CHANNEL", v64);
    if (v66) {
      CFDictionaryAddValue(v68, @"CHANNEL_FLAGS", v66);
    }
    CFArrayAppendValue(v113, v68);
    CFRelease(v68);
    goto LABEL_86;
  }

  const void *v108 = -3902;
LABEL_148:
  a3 = v106;
  CFNumberRef v16 = v105;
  CFNumberRef v18 = theDict;
LABEL_146:
  CFBooleanRef v35 = v107;
LABEL_130:
  dispatch_time_t v41 = theArray;
  if (theArray) {
LABEL_131:
  }
    CFRelease(v41);
  if (v109) {
    CFRelease(v109);
  }
  if (v113) {
    CFRelease(v113);
  }
  CFRelease(v35);
LABEL_137:
  if (v16) {
LABEL_138:
  }
    CFRelease(v16);
  if (v18) {
    CFRelease(v18);
  }
LABEL_141:
  CFRelease(v14);
LABEL_142:
  sub_10003A8FC((vm_address_t)a2, a3);
  sub_10003A8FC((vm_address_t)a4, a5);
  return 0LL;
}

      CFNumberRef v62 = v18;
LABEL_163:
      objc_autoreleasePoolPop(v62);
      return v12;
    case 8:
      if (!a1)
      {
        CFTypeID v30 = objc_autoreleasePoolPush();
        uint64_t v83 = (void *)qword_100219F60;
        if (!qword_100219F60) {
          goto LABEL_62;
        }
        uint64_t v84 = "__WiFiDeviceManagerDebugPH";
        goto LABEL_178;
      }

      if (!theDict)
      {
        CFTypeID v30 = objc_autoreleasePoolPush();
        uint64_t v85 = (void *)qword_100219F60;
        if (!qword_100219F60) {
          goto LABEL_62;
        }
        unsigned int v86 = "__WiFiDeviceManagerDebugPH";
        goto LABEL_193;
      }

      CFDictionaryRef v19 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommand");
      if (!v19) {
        return 4294963396LL;
      }
      BOOL v94 = -1431655766;
      CFNumberGetValue(v19, kCFNumberIntType, &v94);
      if (v94 == 1)
      {
        int v20 = *(const __CFDictionary **)(a1 + 6984);
        if (v20) {
          MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, v20);
        }
        else {
          MutableCFStringRef Copy = 0LL;
        }
LABEL_41:
        uint64_t v12 = 0LL;
        *a4 = MutableCopy;
        return v12;
      }

      goto LABEL_60;
    case 10:
      sub_1000DE0D0(a1, 0, 0LL);
      goto LABEL_156;
    case 13:
      if (!a4) {
        return 4294963396LL;
      }
      dispatch_time_t v21 = *(void **)(a1 + 7320);
      if (!v21) {
        return 4294963393LL;
      }
      CFIndex v22 = [v21 summaryForInterface:a2];
      goto LABEL_40;
    case 15:
      if (!a4) {
        return 4294963396LL;
      }
      uint64_t v23 = *(void **)(a1 + 7320);
      if (!v23) {
        return 4294963393LL;
      }
      CFIndex v22 = [v23 lastBssSessionInfoForInterface:a2];
LABEL_40:
      MutableCFStringRef Copy = (__CFDictionary *)[v22 copy];
      goto LABEL_41;
    case 16:
      else {
        sub_1000F2110(a1, -1);
      }
      goto LABEL_156;
    case 17:
      if (!a1)
      {
        CFTypeID v30 = objc_autoreleasePoolPush();
        uint64_t v83 = (void *)qword_100219F60;
        if (!qword_100219F60) {
          goto LABEL_62;
        }
        uint64_t v84 = "__WiFiDeviceManagerDebugSimulateBSP";
        goto LABEL_178;
      }

      if (!theDict)
      {
        CFTypeID v30 = objc_autoreleasePoolPush();
        uint64_t v85 = (void *)qword_100219F60;
        if (!qword_100219F60) {
          goto LABEL_62;
        }
        unsigned int v86 = "__WiFiDeviceManagerDebugSimulateBSP";
        goto LABEL_193;
      }

      CFIndex v25 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommand");
      if (!v25) {
        return 4294963396LL;
      }
      BOOL v94 = -1431655766;
      CFNumberGetValue(v25, kCFNumberIntType, &v94);
      int v26 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"DebugCommandValueDict");
      if (v26)
      {
        if (v94 > 0xE) {
          goto LABEL_60;
        }
        if (((1 << v94) & 0x703F) != 0)
        {
          sub_1000C4E14((int)v26, a2, a1, v26);
        }

        else
        {
          uint64_t v34 = CFDictionaryGetValue(v26, @"BSP_CommandParams");
          CFBooleanRef v35 = *(void *)(a1 + 64);
          CFIndex v36 = (const void *)sub_100043E8C(v35);
          sub_1000447A8(v35, v36, @"BSP_CommandParams", (uint64_t)v34);
        }

        goto LABEL_156;
      }

      CFTypeID v30 = objc_autoreleasePoolPush();
      unsigned int v87 = (void *)qword_100219F60;
      if (!qword_100219F60) {
        goto LABEL_62;
      }
      CFTypeID v88 = v94;
      uint64_t v89 = "__WiFiDeviceManagerDebugSimulateBSP";
      goto LABEL_196;
    case 19:
      if (!a4) {
        return 4294963396LL;
      }
      if (!+[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance")) {
        return 4294963393LL;
      }
      CFNumberRef v27 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v27,  "setObject:forKeyedSubscript:",  -[WiFiUserInteractionMonitor description]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "description"),  @"description");
      uint64_t v12 = 0LL;
      *a4 = (CFMutableDictionaryRef)v27;
      return v12;
    case 20:
      if (!a1)
      {
        CFTypeID v30 = objc_autoreleasePoolPush();
        uint64_t v83 = (void *)qword_100219F60;
        if (qword_100219F60)
        {
          uint64_t v84 = "__WiFiDeviceManagerDebugSimulateUCM";
LABEL_178:
          objc_msgSend(v83, "WFLog:message:", 4, "%s manager is NULL", v84, v91);
        }

        goto LABEL_62;
      }

      if (!theDict)
      {
        CFTypeID v30 = objc_autoreleasePoolPush();
        uint64_t v85 = (void *)qword_100219F60;
        if (qword_100219F60)
        {
          unsigned int v86 = "__WiFiDeviceManagerDebugSimulateUCM";
LABEL_193:
          objc_msgSend(v85, "WFLog:message:", 4, "%s request is NULL", v86, v91);
        }

        goto LABEL_62;
      }

      CFMutableDictionaryRef v28 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommand");
      if (!v28) {
        return 4294963396LL;
      }
      BOOL v94 = -1431655766;
      CFNumberGetValue(v28, kCFNumberIntType, &v94);
      CFMutableDictionaryRef v29 = CFDictionaryGetValue(theDict, @"DebugCommandValueDict");
      if (!v29)
      {
        CFTypeID v30 = objc_autoreleasePoolPush();
        unsigned int v87 = (void *)qword_100219F60;
        if (qword_100219F60)
        {
          CFTypeID v88 = v94;
          uint64_t v89 = "__WiFiDeviceManagerDebugSimulateUCM";
LABEL_196:
          objc_msgSend(v87, "WFLog:message:", 4, "%s dictRef for %d is NULL", v89, v88);
        }

        goto LABEL_62;
      }

      if (v94)
      {
LABEL_60:
        CFTypeID v30 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "Unknown debug command %d", v94, v91);
        }
LABEL_62:
        CFIndex v31 = v30;
LABEL_63:
        objc_autoreleasePoolPop(v31);
        return 4294963396LL;
      }

      CFBooleanRef v37 = *(void (**)(uint64_t, uint64_t, void, const void *))(a1 + 4800);
      if (v37) {
        v37(a1, a2, *(void *)(a1 + 4808), v29);
      }
LABEL_156:
      uint64_t v12 = 0LL;
      break;
    case 21:
      CFTypeID v32 = *(void **)(a1 + 7320);
      if (!v32) {
        return 4294963393LL;
      }
      [v32 resetDeviceSessionforInterface:a2];
      goto LABEL_156;
    case 22:
      if (a1)
      {
        uint64_t v33 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"DebugCommandValueDict");
        if (v33)
        {
          BOOL v94 = -1431655766;
          if (CFNumberGetValue(v33, kCFNumberIntType, &v94)) {
            [*(id *)(a1 + 7320) updateLinkTestInterval:(int)v94];
          }
        }
      }

      goto LABEL_156;
    default:
      return sub_1000511FC(*(void *)(a1 + 64), a2, theDict, a4);
  }

  return v12;
}

void sub_100058E68(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  if (a3)
  {
    CFIndex v6 = sub_100040538(a1, a2);
    if (v6)
    {
      char v7 = v6;
      uint64_t v8 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        CFIndex v9 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@*} %@",  @"LINK, ROAM",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s: received roam status event for network %@",  "__WiFiDeviceProcessRoamStatusEvent",  sub_100095BC8(v7))),  "UTF8String"));
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buuint64_t f = 136446210;
          CFTypeID v14 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v9, "UTF8String")),  "UTF8String");
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
        }
      }

      objc_autoreleasePoolPop(v8);
      uint64_t v10 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Reporting RoamStatus Event",  "__WiFiDeviceReportRoamStatusEvent");
      }
      objc_autoreleasePoolPop(v10);
      CFTypeID v11 = *(void (**)(uint64_t, const void *, void, const __CFDictionary *))(a1 + 4576);
      if (v11) {
        v11(a1, a2, *(void *)(a1 + 4584), a3);
      }
      CFBooleanRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROAMEDEVENT_STATUS");
      *(_DWORD *)buuint64_t f = 0;
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberSInt32Type, buf);
        if (!*(_DWORD *)buf) {
          sub_100040A24(a1);
        }
      }

      CFRelease(v7);
    }
  }

void sub_100059070(uint64_t a1, uint64_t a2)
{
  int v3 = *(void (**)(uint64_t, uint64_t, void))(a1 + 4432);
  if (v3) {
    v3(a1, a2, *(void *)(a1 + 4440));
  }
  if (*(_DWORD *)(a1 + 4316) == 2 || *(_BYTE *)(a1 + 4300))
  {
    CFIndex v4 = *(dispatch_source_s **)(a1 + 80);
    dispatch_time_t v5 = dispatch_time(0LL, 30000000000LL);
    dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0LL);
  }

void sub_1000590EC(uint64_t a1, const void *a2)
{
  int v4 = sub_10004CE50(a1, a2);
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  if (v4 != 1)
  {
    sub_10004D0EC((uint64_t *)a1);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 72), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 80), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 88), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 5712), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    sub_10004F26C(a1, 0);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 5768), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    sub_10004F358(a1);
  }

  dispatch_time_t v5 = *(void (**)(uint64_t, const void *, void))(a1 + 4384);
  if (v5) {
    v5(a1, a2, *(void *)(a1 + 4392));
  }
}

void sub_1000591BC(void *a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    int v4 = (void (*)(void *, uint64_t, void, void, uint64_t))a1[703];
    if (v4)
    {
      uint64_t v6 = a1[704];
      unsigned int v10 = -1431655766;
      uint64_t v7 = Apple80211Get(a1[2], 15LL, 0LL, &v10, 4LL);
      if ((_DWORD)v7)
      {
        uint64_t v8 = v7;
        CFIndex v9 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Apple80211Get(..., APPLE80211_IOC_OP_MODE) failed. CFErrorRef error = %i\n",  v8);
        }
        objc_autoreleasePoolPop(v9);
      }

      else
      {
        v4(a1, a2, (v10 >> 4) & 1, 0LL, v6);
      }
    }
  }

void sub_100059280(uint64_t a1, uint64_t a2, CFTypeRef cf)
{
  if (cf && (CFTypeRef v5 = cf, v6 = CFGetTypeID(cf), v6 == CFArrayGetTypeID()))
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: Discovered networks=%@", "__WiFiDeviceProcessBGScanNetworkDiscoveredEvent", v5 message];
    }
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: NULL evendata",  "__WiFiDeviceProcessBGScanNetworkDiscoveredEvent");
    }
    CFTypeRef v5 = 0LL;
  }

  objc_autoreleasePoolPop(v7);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, CFTypeRef, void))(a1 + 4608);
  if (v8) {
    v8(a1, a2, v5, *(void *)(a1 + 4616));
  }
}

void sub_100059374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v6 = *(unsigned __int8 *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    uint64_t v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: staNum %d", "__WiFiDeviceProcessSTAArriveEvent", v6);
    }
    objc_autoreleasePoolPop(v8);
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 1LL;
  }

  CFIndex v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, void))(a1 + 4792);
  if (v9)
  {
    __int16 v11 = -21846;
    char v12 = -86;
    if (a3) {
      unsigned int v10 = &v11;
    }
    else {
      unsigned int v10 = 0LL;
    }
    v9(a1, a2, v6, v7, a3, v10, *(void *)(a1 + 4800));
  }

void sub_100059444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v10 = -21846;
  char v11 = -86;
  if (a3)
  {
    uint64_t v6 = *(unsigned __int8 *)(a3 + 8);
    uint64_t v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: staNum %d", "__WiFiDeviceProcessSTALeaveEvent", v6);
    }
    objc_autoreleasePoolPop(v7);
    __int16 v10 = *(_WORD *)a3;
    char v11 = *(_BYTE *)(a3 + 2);
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, __int16 *, void))(a1 + 4808);
  if (v8)
  {
    if (a3) {
      CFIndex v9 = &v10;
    }
    else {
      CFIndex v9 = 0LL;
    }
    v8(a1, a2, v6, 0LL, a3, v9, *(void *)(a1 + 4816));
  }

void sub_10005951C(_BYTE *a1, uint64_t a2, CFDictionaryRef theDict)
{
  uint64_t valuePtr = 0LL;
  int v70 = 0;
  CFNumberRef v68 = 0LL;
  CFNumberRef v69 = 0LL;
  char v67 = 0LL;
  if (!theDict)
  {
    CFTypeID v60 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: lqmDict is null", "__WiFiDeviceProcessRSSIEvent");
    }
    objc_autoreleasePoolPop(v60);
    return;
  }

  int v3 = theDict;
  if (a1[208])
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s - Hijacking the RSSI event with simulated link:%@", "__WiFiDeviceProcessRSSIEvent", *((void *)a1 + 27) message];
    }
    objc_autoreleasePoolPop(v6);
    int v3 = (const __CFDictionary *)*((void *)a1 + 27);
  }

  uint64_t v7 = (const __CFNumber *)CFDictionaryGetValue(v3, @"RSSI");
  if (!v7) {
    return;
  }
  CFNumberGetValue(v7, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  float v8 = sub_10003A6C8(SHIDWORD(valuePtr));
  *(float *)&uint64_t valuePtr = v8;
  *((_DWORD *)a1 + 66) = HIDWORD(valuePtr);
  *((float *)a1 + 67) = v8;
  CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
  if (!v9)
  {
    uint64_t v61 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null scaledRSSINumRef",  "__WiFiDeviceProcessRSSIEvent");
    }
    objc_autoreleasePoolPop(v61);
    return;
  }

  CFNumberRef v10 = v9;
  MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, v3);
  if (!MutableCopy)
  {
    CFNumberRef v62 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null lqmMutableDict",  "__WiFiDeviceProcessRSSIEvent");
    }
    objc_autoreleasePoolPop(v62);
    CFDateRef v59 = v10;
    goto LABEL_131;
  }

  char v12 = MutableCopy;
  CFDictionaryAddValue(MutableCopy, @"SCALED_RSSI", v10);
  CFDictionaryRef theDicta = 0LL;
  CFStringRef value = 0LL;
  a1[307] = 0;
  if (CFDictionaryGetValueIfPresent(v3, @"CCA", (const void **)&value))
  {
    uint64_t v13 = (const __CFNumber *)value;
    if (value)
    {
      a1[308] = 0;
      CFNumberGetValue(v13, kCFNumberSInt8Type, a1 + 308);
      a1[307] = 1;
    }
  }

  if (CFDictionaryGetValueIfPresent(v3, @"CCA_STATS", (const void **)&theDicta))
  {
    CFTypeID v14 = theDicta;
    if (theDicta)
    {
      unint64_t v77 = 0LL;
      CFNumberRef v75 = 0LL;
      CFNumberRef number = 0LL;
      *(_WORD *)(a1 + 309) = 0;
      a1[311] = 0;
      if (!a1[307])
      {
        a1[308] = a1[310] + a1[309] + a1[311];
        a1[307] = 1;
      }
    }
  }

  a1[272] = 0;
  if (CFDictionaryGetValueIfPresent(v3, @"SNR", (const void **)&v69))
  {
    int v15 = v69;
    if (v69)
    {
      *((void *)a1 + 35) = 0LL;
      CFNumberGetValue(v15, kCFNumberSInt16Type, &v70);
      *((void *)a1 + 35) = (__int16)v70;
      a1[272] = 1;
      CFDictionaryAddValue(v12, @"SNR", v69);
    }
  }

  a1[288] = 0;
  if (CFDictionaryGetValueIfPresent(v3, @"NOISE", (const void **)&v68))
  {
    CFNumberRef v16 = v68;
    if (v68)
    {
      *((void *)a1 + 37) = 0LL;
      CFNumberGetValue(v16, kCFNumberSInt16Type, (char *)&v70 + 2);
      *((void *)a1 + 37) = SHIWORD(v70);
      a1[288] = 1;
      CFDictionaryAddValue(v12, @"NOISE", v68);
    }
  }

  CFNumberRef v17 = a1 + 305;
  uint64_t v63 = 0LL;
  uint64_t v64 = 0LL;
  if (CFDictionaryGetValueIfPresent(v3, @"PER_CORE_RSSI", (const void **)&v67))
  {
    int v18 = sub_10003B774((const __CFArray *)v67, &v64, &v63);
    a1[304] = v18;
    if (v18)
    {
      *CFNumberRef v17 = 0;
      a1[305] = v64;
      a1[306] = v63;
      CFDictionaryAddValue(v12, @"PER_CORE_RSSI", v67);
    }
  }

  else
  {
    a1[304] = 0;
  }

  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v20 = CFDateCreate(kCFAllocatorDefault, Current);
  if (v20) {
    CFDictionaryAddValue(v12, @"LQMTIMESTAMP", v20);
  }
  CFNumberRef v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, a1 + 4316);
  CFDictionaryAddValue(v12, @"WiFiIPState", v21);
  CFIndex v22 = (const void **)&kCFBooleanTrue;
  if (!a1[4312]) {
    CFIndex v22 = (const void **)&kCFBooleanFalse;
  }
  CFDictionaryAddValue(v12, @"WiFiHasNoGatewayIP", *v22);
  if (v21) {
    CFRelease(v21);
  }
  double v23 = CFAbsoluteTimeGetCurrent();
  uint64_t v24 = a1 + 312;
  uint64_t v25 = *((void *)a1 + 161);
  uint64_t v26 = *((void *)a1 + 160);
  if (v26)
  {
    uint64_t v27 = v25 - 1;
    if (!v25) {
      uint64_t v27 = 29LL;
    }
    double v28 = v23 - *(double *)&v24[32 * v27 + 24];
    double v29 = -v28;
    if (v28 >= 0.0) {
      double v29 = v23 - *(double *)&v24[32 * v27 + 24];
    }
    if (v29 < 1.0)
    {
      CFTypeID v30 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Too frequent(%f secs) rssi event from driver, ignore updating RSSI in RSSI history\n",  *(void *)&v28);
      }
LABEL_114:
      objc_autoreleasePoolPop(v30);
      goto LABEL_125;
    }
  }

  if (v25 == 30) {
    uint64_t v25 = 0LL;
  }
  CFIndex v31 = &v24[32 * v25];
  uint64_t v32 = *((void *)a1 + 37);
  *(void *)CFIndex v31 = *((int *)a1 + 66);
  *((void *)v31 + 1) = v32;
  *((void *)v31 + 2) = *((void *)a1 + 35);
  *((double *)v31 + 3) = v23;
  if (v26 > 29)
  {
    if (v25 == *((void *)a1 + 159))
    {
      if (v25 == 29) {
        uint64_t v33 = 0LL;
      }
      else {
        uint64_t v33 = v25 + 1;
      }
      *((void *)a1 + 159) = v33;
    }
  }

  else
  {
    *((void *)a1 + 160) = v26 + 1;
  }

  *((void *)a1 + 161) = v25 + 1;
  double v34 = CFAbsoluteTimeGetCurrent();
  uint64_t v79 = 0LL;
  uint64_t v80 = 0LL;
  unint64_t v77 = 0LL;
  uint64_t v78 = 0LL;
  CFNumberRef v75 = 0LL;
  CFNumberRef number = 0LL;
  CFNumberRef v73 = 0LL;
  CFNumberRef v74 = 0LL;
  CFNumberRef v72 = 0LL;
  unint64_t v36 = *((void *)a1 + 499);
  if (v36 >= 0x1F)
  {
    CFBooleanRef v37 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, Invalid currIndx %ld. Resetting!\n",  "__WiFiDeviceUpdateTransmitReceiveHistory",  *((void *)a1 + 499));
    }
    objc_autoreleasePoolPop(v37);
    goto LABEL_84;
  }

  if (v36 == 30)
  {
LABEL_84:
    unint64_t v36 = 0LL;
    *((void *)a1 + 499) = 0LL;
  }

  uint64_t v38 = a1 + 2304;
  uint64_t v39 = *((void *)a1 + 498);
  if (!v39) {
    goto LABEL_94;
  }
  uint64_t v40 = v36 - 1;
  if (!v36) {
    uint64_t v40 = 29LL;
  }
  double v41 = v34 - *(double *)&v38[56 * v40 + 48];
  double v35 = -v41;
  if (v41 >= 0.0) {
    double v35 = v34 - *(double *)&v38[56 * v40 + 48];
  }
  if (v35 < 1.0)
  {
    CFRange v42 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Too frequent(%f secs) LQM event from driver, ignore updating txrx history\n",  *(void *)&v41);
    }
    objc_autoreleasePoolPop(v42);
  }

  else
  {
LABEL_94:
    unsigned int v43 = v80;
    CFNumberRef v44 = &v38[56 * v36];
    void *v44 = v80;
    unsigned int v45 = v78;
    v44[2] = v78;
    unsigned int v46 = v79;
    v44[4] = v79;
    if (v43)
    {
      LODWORD(v35) = HIDWORD(v80);
      double v35 = (double)*(unint64_t *)&v35 / (double)v43 * 100.0;
      unsigned int v43 = (int)v35;
    }

    v38[56 * v36 + 8] = v43;
    if (v45)
    {
      LODWORD(v35) = HIDWORD(v78);
      unsigned int v45 = (int)((double)*(unint64_t *)&v35 / (double)v45 * 100.0);
    }

    v38[56 * v36 + 24] = v45;
    if (v46)
    {
      if (v46 > HIDWORD(v79)) {
        unsigned int v46 = (int)((double)(v46 - HIDWORD(v79)) / (double)v46 * 100.0);
      }
      else {
        LOBYTE(v46) = 0;
      }
    }

    dispatch_time_t v47 = (double *)&v38[56 * v36];
    *((_BYTE *)v47 + 40) = v46;
    v47[6] = v34;
    if (v39 <= 29) {
      *((void *)a1 + 49_Block_object_dispose(va, 8) = v39 + 1;
    }
    *((void *)a1 + 499) = v36 + 1;
  }

  if (CFDictionaryContainsKey(v12, @"PER_CORE_RSSI"))
  {
    double v48 = CFAbsoluteTimeGetCurrent();
    CFIndex v49 = a1 + 1296;
    uint64_t v50 = *((void *)a1 + 224);
    uint64_t v51 = *((void *)a1 + 223);
    if (v51)
    {
      uint64_t v52 = v50 - 1;
      if (!v50) {
        uint64_t v52 = 29LL;
      }
      double v53 = v48 - *(double *)&v49[16 * v52 + 8];
      double v54 = -v53;
      if (v53 >= 0.0) {
        double v54 = v48 - *(double *)&v49[16 * v52 + 8];
      }
      if (v54 < 1.0)
      {
        CFTypeID v30 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Too frequent(%f secs) per-Core Rssi event from driver, ignore updating Core0, Core1 RSSI in Per Core RSSI History\n",  *(void *)&v53);
        }
        goto LABEL_114;
      }
    }

    if (v50 == 30) {
      uint64_t v50 = 0LL;
    }
    uint64_t v55 = (double *)&v49[16 * v50];
    *(_WORD *)uint64_t v55 = *v17;
    v55[1] = v48;
    if (v51 > 29)
    {
      if (v50 == *((void *)a1 + 222))
      {
        if (v50 == 29) {
          uint64_t v56 = 0LL;
        }
        else {
          uint64_t v56 = v50 + 1;
        }
        *((void *)a1 + 222) = v56;
      }
    }

    else
    {
      *((void *)a1 + 223) = v51 + 1;
    }

    *((void *)a1 + 224) = v50 + 1;
  }

LABEL_125:
  size_t v57 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s Feeding RSSI data to LQM - RSSI:%d Core0-RSSI:%d Core1-RSSI:%d \n",  "__WiFiDeviceProcessRSSIEvent",  *((unsigned int *)a1 + 66),  (char)a1[305],  (char)a1[306]);
  }
  objc_autoreleasePoolPop(v57);
  uint64_t v58 = (void (*)(_BYTE *, uint64_t, void, __CFDictionary *))*((void *)a1 + 605);
  if (v58) {
    v58(a1, a2, *((void *)a1 + 606), v12);
  }
  CFRelease(v10);
  CFRelease(v12);
  if (v20)
  {
    CFDateRef v59 = v20;
LABEL_131:
    CFRelease(v59);
  }

  if (*(void *)(a1 + 7320))
  {
    *(void *)&CFDictionaryRef theDict = _NSConcreteStackBlock;
    *((void *)&theDict + 1) = 3221225472LL;
    uint64_t v113 = (uint64_t)sub_10010AA78;
    uint64_t v114 = &unk_1001E4BD0;
    uint64_t v115 = a1;
    BOOL v116 = a4;
    sub_1000D8E24(a1, v107, (uint64_t)&theDict);
  }

  unsigned int v71 = (uint64_t)v107;
  if (!v11
    || (CFNumberRef v72 = (const __CFString *)CFDictionaryGetValue(v11, @"reason"),
        CFNumberRef v73 = CFStringCompare(@"Guessing 2ghz Network", v72, 0LL),
        unsigned int v71 = (uint64_t)v107,
        v73))
  {
    if (v71)
    {
      CFNumberRef v74 = objc_autoreleasePoolPush();
      CFNumberRef v75 = sub_1000A335C((uint64_t)v107);
      CFIndex v76 = 7LL;
      if ((_DWORD)a4 == -369032214)
      {
        __int16 v90 = objc_msgSend((id)sub_1000951FC((uint64_t)v107, @"JOIN_EXTENDED_STATUS"), "intValue");
        if (v90 == 1031)
        {
LABEL_186:
          objc_msgSend( *(id *)(a1 + 6632),  "setNetworkDenyListInfo:forScanResult:",  sub_1000D1BDC(a1, 12, -369032214, 0, 5),  v75);
          CFStringRef v91 = objc_alloc_init(&OBJC_CLASS___NSDate);
          int64_t v99 = sub_10003AEF8((uint64_t)v91, 5LL, 0LL, 0LL);
          -[NSDate timeIntervalSinceDate:](v99, "timeIntervalSinceDate:", v91);
          if (*(_BYTE *)(a1 + 7288))
          {
            source = (dispatch_source_t)objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: EAPATNotifBlacklist expiry timer already running",  "__WiFiDeviceManagerProcessAssociationFailure");
            }
          }

          else
          {
            CFTypeID v95 = v92;
            *(_BYTE *)(a1 + 728_Block_object_dispose(va, 8) = 1;
            sourcea = *(dispatch_source_s **)(a1 + 7296);
            CFStringRef v96 = dispatch_time(0LL, (uint64_t)(v92 * 1000000000.0));
            dispatch_source_set_timer(sourcea, v96, 0xFFFFFFFFFFFFFFFFLL, 0LL);
            source = (dispatch_source_t)objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: EAPATNotifBlacklist expiry timer set to fire in %f seconds from now",  "__WiFiDeviceManagerProcessAssociationFailure",  *(void *)&v95);
            }
          }

          objc_autoreleasePoolPop(source);
          if (v91) {
            CFRelease(v91);
          }
          if (v99) {
            CFRelease(v99);
          }
          goto LABEL_199;
        }

        if (v90 == 1026)
        {
          objc_msgSend( *(id *)(a1 + 6632),  "setNetworkDenyListInfo:forScanResult:",  sub_1000D1BDC(a1, 11, -369032214, 0, 5),  v75);
          goto LABEL_186;
        }

        BOOL v94 = sub_1000951FC((uint64_t)v107, @"BSSID");
        objc_msgSend( *(id *)(a1 + 6632),  "setNetworkDenyListInfo:forScanResult:",  sub_1000D1BDC(a1, 7, -369032214, (uint64_t)v94, 5),  v75);
      }

void sub_100059EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    int v3 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 4856);
    if (v3) {
      v3(a1, a2, *(void *)(a1 + 4864), a3);
    }
  }

  else
  {
    int v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: txStatsRef is null",  "__WiFiDeviceProcessLqmTxStatsEvent");
    }
    objc_autoreleasePoolPop(v4);
  }

void sub_100059F74(void *a1, CFDictionaryRef theDict)
{
  char valuePtr = 0;
  if (!theDict)
  {
    CFDictionaryRef v19 = objc_autoreleasePoolPush();
    CFDateRef v20 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      CFNumberRef v21 = "null ccaDict";
LABEL_26:
      [v20 WFLog:3 message:v21];
    }

LABEL_27:
    objc_autoreleasePoolPop(v19);
    return;
  }

  CFBooleanRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"CCA");
  if (!Value)
  {
    CFDictionaryRef v19 = objc_autoreleasePoolPush();
    CFDateRef v20 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      CFNumberRef v21 = "null ccaNum";
      goto LABEL_26;
    }

    goto LABEL_27;
  }

  CFNumberGetValue(Value, kCFNumberSInt8Type, &valuePtr);
  char v4 = valuePtr;
  double Current = CFAbsoluteTimeGetCurrent();
  double v6 = Current;
  uint64_t v7 = a1 + 225;
  uint64_t v8 = a1[286];
  uint64_t v9 = a1[287];
  if (v8)
  {
    uint64_t v10 = v9 - 1;
    if (!v9) {
      uint64_t v10 = 29LL;
    }
    char v11 = (double *)&v7[2 * v10];
    double v13 = v11[1];
    char v12 = v11 + 1;
    double v14 = Current - v13;
    double v15 = -(v6 - v13);
    if (v6 - v13 < 0.0) {
      double v14 = v15;
    }
    if (v14 < 5.0)
    {
      CFNumberRef v16 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Too frequent(%f secs) CCA event from driver\n",  v6 - *v12);
      }
      objc_autoreleasePoolPop(v16);
      uint64_t v9 = a1[287];
      uint64_t v8 = a1[286];
    }
  }

  if (v9 == 30) {
    uint64_t v9 = 0LL;
  }
  CFNumberRef v17 = (double *)&v7[2 * v9];
  *(_BYTE *)CFNumberRef v17 = v4;
  v17[1] = v6;
  if (v8 > 29)
  {
    if (v9 == a1[285])
    {
      if (v9 == 29) {
        uint64_t v18 = 0LL;
      }
      else {
        uint64_t v18 = v9 + 1;
      }
      a1[285] = v18;
    }
  }

  else
  {
    a1[286] = v8 + 1;
  }

  a1[287] = v9 + 1;
}

  objc_autoreleasePoolPop(v7);
}

      sub_10003DBC8(v11, a5, (uint64_t)v9, v13);
      goto LABEL_28;
    }

    double v23 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: client is null",  "__WiFiManagerAddNetworkScanCallback");
    }
  }

  else
  {
    double v23 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: request network is null",  "__WiFiManagerAddNetworkScanCallback");
    }
  }

  objc_autoreleasePoolPop(v23);
  char v12 = 0LL;
  double v13 = 9LL;
LABEL_28:
  if ([ValueAtIndex callback]) {
    ((void (*)(uint64_t, id, uint64_t, id))[ValueAtIndex callback])( a5,  v9,  v13,  objc_msgSend(ValueAtIndex, "context"));
  }
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a5 + 1456), 0LL);
  if (v12) {
LABEL_31:
  }
    CFRelease(v12);
}

  CFStringAppend(theString, @" Prf");
  if ((a1 & 0x20) == 0)
  {
LABEL_8:
    if ((a1 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }

    CFRelease(v18);
    goto LABEL_28;
  }

  sub_10003A8FC((vm_address_t)a2, a3);
  return 0LL;
}

  CFRelease(v15);
LABEL_28:
  sub_10003A8FC((vm_address_t)a2, a3);
  return 0LL;
}

          uint64_t v25 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: isMultiAP:%u",  "WiFiDeviceManagerSetRoam",  v19);
          }
          objc_autoreleasePoolPop(v25);
          if (!v18 || (_DWORD)v19)
          {
            uint64_t v33 = -1;
            *(_DWORD *)uint64_t v32 = -1;
            uint64_t v26 = CFDataCreate(kCFAllocatorDefault, v32, 6LL);
          }

          else
          {
            uint64_t v26 = sub_1000968A4((uint64_t)v18);
          }

          CFNumberRef v17 = v26;
          if (v26)
          {
            CFDictionaryAddValue(v13, @"BSSID", v26);
            double v15 = 0LL;
            goto LABEL_35;
          }

          goto LABEL_56;
        }

        double v23 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: currentNetwork is NULL",  "WiFiDeviceManagerSetRoam");
        }
        CFDictionaryRef v19 = 0LL;
        goto LABEL_25;
      }

      double v28 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: bssidInfo allocation failed!",  "WiFiDeviceManagerSetRoam");
      }
    }

    else
    {
      double v28 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: manager->device is NULL",  "WiFiDeviceManagerSetRoam");
      }
    }
  }

  else
  {
    double v28 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: manager is NULL", "WiFiDeviceManagerSetRoam");
    }
  }

  objc_autoreleasePoolPop(v28);
}

        double v6 = sub_10010824C(a1);
LABEL_28:
        uint64_t v2 = v6;
        goto LABEL_29;
      }

      double v28 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: network is null",  "__WiFiDeviceManagerProcessAutoHotspotJoinRecommendationNotification");
      }
      uint64_t v27 = v28;
LABEL_55:
      objc_autoreleasePoolPop(v27);
LABEL_29:
      if (v5) {
        CFRelease(v5);
      }
      return v2;
    default:
      uint64_t v2 = *(unsigned int *)(a1 + 3272);
      goto LABEL_29;
  }

        if (v9)
        {
          CFNumberRef v21 = [*(id *)(v5 + 6728) getHotspotDeviceName:a2];
          if (v9 >= 1)
          {
            CFIndex v22 = v21;
            double v23 = 0LL;
            while (1)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 6880), v23);
              if (ValueAtIndex)
              {
                uint64_t v25 = ValueAtIndex;
                uint64_t v26 = sub_100095BC8(ValueAtIndex);
                if (CFEqual(v22, v26)) {
                  break;
                }
              }

              if (v9 == ++v23) {
                goto LABEL_33;
              }
            }

            CFTypeID v30 = (const __CFDate *)sub_1000951FC((uint64_t)v25, @"lastDisconnectTimestampKey");
            if (!v30 || (CFIndex v31 = v30, sub_100097B1C((uint64_t)v25)))
            {
              uint64_t v32 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:3, "%s: Hotspot %@ denylisted until user Join\n", "__WiFiDeviceManagerUnifiedAutoJoinAllowHotspot", sub_100095BC8(v25) message];
              }
              objc_autoreleasePoolPop(v32);
              char v11 = NSPOSIXErrorDomain;
              uint64_t v40 = NSLocalizedDescriptionKey;
              char v12 = @"Hotspot deauthed, disabled until next user join";
LABEL_43:
              double v41 = v12;
LABEL_44:
              uint64_t v33 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v41,  &v40,  1LL);
              double v34 = v11;
              double v35 = 1LL;
LABEL_45:
              uint64_t v27 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v34,  v35,  v33);
              double v28 = 0LL;
              goto LABEL_46;
            }

            double Current = CFAbsoluteTimeGetCurrent();
            if (Current - CFDateGetAbsoluteTime(v31) < 3600.0)
            {
              CFBooleanRef v37 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:3, "%s: Hotspot denylisted due to Deauth on %@\n", "__WiFiDeviceManagerUnifiedAutoJoinAllowHotspot", v31 message];
              }
              objc_autoreleasePoolPop(v37);
              char v11 = NSPOSIXErrorDomain;
              uint64_t v40 = NSLocalizedDescriptionKey;
              double v41 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Hotspot deauthed/disconnected within past %d seconds",  3600LL);
              goto LABEL_44;
            }

            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v5 + 6880), v23);
          }
        }

  objc_autoreleasePoolPop(v10);
}

void sub_10005A124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    int v3 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 4872);
    if (v3) {
      v3(a1, a2, *(void *)(a1 + 4880), a3);
    }
  }

  else
  {
    char v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null eventData",  "__WiFiDeviceProcessWeightAvgLQMEvent");
    }
    objc_autoreleasePoolPop(v4);
  }

void sub_10005A1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    int v3 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 4888);
    if (v3) {
      v3(a1, a2, *(void *)(a1 + 4896), a3);
    }
  }

  else
  {
    char v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null eventData",  "__WiFiDeviceProcessBTCoexStatsEvent");
    }
    objc_autoreleasePoolPop(v4);
  }

void sub_10005A23C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    int v3 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 5448);
    if (v3) {
      v3(a1, a2, *(void *)(a1 + 5456), a3);
    }
  }

  else
  {
    char v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null eventData", "__WiFiDeviceProcessBSPEvent");
    }
    objc_autoreleasePoolPop(v4);
  }

void sub_10005A2C8(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  if (!a1)
  {
    CFNumberRef v16 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null device", "__WiFiDeviceRealtimeSessionEvent");
    }
    goto LABEL_26;
  }

  if (!a3)
  {
    CFNumberRef v16 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null eventData", "__WiFiDeviceRealtimeSessionEvent");
    }
LABEL_26:
    objc_autoreleasePoolPop(v16);
    return;
  }

  if (*(_BYTE *)(a1 + 208)
    && (double v6 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 216), @"recommendationFlags")) != 0LL)
  {
    uint64_t v7 = v6;
    MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, a3);
    uint64_t v9 = MutableCopy;
    if (MutableCopy)
    {
      CFBooleanRef Value = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, @"QUAL_SCORE");
      char v11 = Value
          ? CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, Value)
          : CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      char v12 = v11;
      if (v11)
      {
        CFDictionarySetValue(v11, @"LINK_RECOMMENDATION_FLAGS", v7);
        CFDictionarySetValue(v9, @"QUAL_SCORE", v12);
        double v13 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: hi-jacking real-time session recommendation flags: %@", "__WiFiDeviceRealtimeSessionEvent", v9 message];
        }
        objc_autoreleasePoolPop(v13);
        CFRelease(v12);
      }
    }
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  double v14 = *(void (**)(uint64_t, uint64_t, void, __CFDictionary *))(a1 + 4920);
  if (v14)
  {
    if (v9) {
      double v15 = v9;
    }
    else {
      double v15 = a3;
    }
    v14(a1, a2, *(void *)(a1 + 4928), v15);
  }

  if (v9) {
    CFRelease(v9);
  }
}

void sub_10005A4D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    int v3 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 4936);
    if (v3) {
      v3(a1, a2, *(void *)(a1 + 4944), a3);
    }
  }

  else
  {
    char v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null eventData", "__WiFiDeviceObssMitEvent");
    }
    objc_autoreleasePoolPop(v4);
  }

void sub_10005A55C(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  CFTypeRef v5 = objc_autoreleasePoolPush();
  int v65 = 0;
  if (!a1)
  {
    uint64_t v55 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null device",  "__WiFiDeviceProcessDriverAvailableEvent");
    }
    goto LABEL_133;
  }

  if (!a3)
  {
    uint64_t v55 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null eventData",  "__WiFiDeviceProcessDriverAvailableEvent");
    }
    goto LABEL_133;
  }

  BOOLeaint n = (const __CFBoolean *)CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE");
  if (!BOOLean)
  {
    uint64_t v55 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: available key missing",  "__WiFiDeviceProcessDriverAvailableEvent");
    }
LABEL_133:
    objc_autoreleasePoolPop(v55);
    goto LABEL_126;
  }

  double v6 = *(const void **)(a1 + 5840);
  if (v6) {
    CFDictionarySetValue(a3, @"SSID_STR", v6);
  }
  if (*(_BYTE *)(a1 + 5864))
  {
    int v7 = *(_DWORD *)(a1 + 5872);
    int v8 = v7 == 1 ? 1 : 2;
    int v9 = v7 ? v8 : 3;
    CFNumberRef v10 = sub_10003B870(v9);
    CFDictionarySetValue(a3, @"PRIVATE_MAC_ADDRESS_TYPE", v10);
    if (v10) {
      CFRelease(v10);
    }
  }

  char v11 = *(const void **)(a1 + 5856);
  if (v11) {
    CFDictionarySetValue(a3, @"PRIVATE_MAC_ADDRESS_VALUE", v11);
  }
  CFBooleanRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_REASON");
  double v13 = Value;
  unsigned int valuePtr = 0;
  if (Value) {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  }
  double v14 = (const __CFNumber *)CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_SUBREASON");
  double v15 = v14;
  unsigned int v63 = 0;
  if (v14) {
    CFNumberGetValue(v14, kCFNumberSInt32Type, &v63);
  }
  CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_FLAGS");
  if (v16) {
    CFNumberGetValue(v16, kCFNumberSInt32Type, &v65);
  }
  if (v63)
  {
    CFStringRef v17 = sub_10005C014(*(void *)(a1 + 16), v63);
    if (v17) {
      CFDictionarySetValue(a3, @"DRIVER_AVAILABLE_KEY_SUBREASON_STRING", v17);
    }
  }

  else
  {
    CFStringRef v17 = 0LL;
  }

  unsigned int v62 = 0;
  if (CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_PROGRAM_COUNTER")) {
    CFNumberGetValue(v15, kCFNumberSInt32Type, &v62);
  }
  uint64_t v18 = (const __CFNumber *)CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_LINK_REGISTER");
  unsigned int v61 = 0;
  if (v18) {
    CFNumberGetValue(v18, kCFNumberSInt32Type, &v61);
  }
  CFDictionaryRef v19 = (const __CFNumber *)CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_LINENUMBER");
  unsigned int v60 = 0;
  if (v19) {
    CFNumberGetValue(v19, kCFNumberSInt32Type, &v60);
  }
  CFDateRef v20 = (const __CFString *)CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_REASON_STRING");
  CFNumberRef v21 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: driver reason string: %@ \n", "__WiFiDeviceProcessDriverAvailableEvent", v20 message];
  }
  objc_autoreleasePoolPop(v21);
  SCDynamicStoreContext context = v5;
  if (v20 && CFStringCompare(v20, &stru_1001EB6E0, 0LL))
  {
    if (!v63)
    {
      CFDictionarySetValue(a3, @"DRIVER_AVAILABLE_SUBREASON", v13);
      CFStringRef v17 = sub_10005C014(*(void *)(a1 + 16), valuePtr);
      if (v17) {
        CFDictionarySetValue(a3, @"DRIVER_AVAILABLE_KEY_SUBREASON_STRING", v17);
      }
    }

    CFIndex v22 = 0LL;
  }

  else
  {
    if ((int)valuePtr <= -528340991)
    {
      switch(valuePtr)
      {
        case 0xE0821801:
          CFIndex v22 = @"ShutdownPending";
          break;
        case 0xE0821802:
          CFIndex v22 = @"UnInited";
          break;
        case 0xE0821803:
          CFIndex v22 = @"Initializing";
          break;
        case 0xE0821804:
          CFIndex v22 = @"PowerOff";
          break;
        case 0xE0821805:
          CFIndex v22 = @"PoweringOff";
          break;
        default:
          if (valuePtr == -528340991) {
            CFIndex v22 = @"OnThread";
          }
          else {
LABEL_51:
          }
            CFIndex v22 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unknown=%d",  valuePtr);
          break;
      }
    }

    else
    {
      switch(valuePtr)
      {
        case 0xE0823801:
          CFIndex v22 = @"Watchdog";
          break;
        case 0xE0823802:
          CFIndex v22 = @"WDRunning";
          break;
        case 0xE0823803:
          CFIndex v22 = @"WDTriggered";
          break;
        case 0xE0823804:
          CFIndex v22 = @"WDFailed";
          break;
        case 0xE0823805:
          goto LABEL_51;
        case 0xE0823806:
          CFIndex v22 = @"FWTrap";
          break;
        default:
          if (valuePtr == -528340989)
          {
            CFIndex v22 = @"BootedImage";
          }

          else
          {
            if (valuePtr != -528340990) {
              goto LABEL_51;
            }
            CFIndex v22 = @"NotInGate";
          }

          break;
      }
    }

    CFDictionarySetValue(a3, @"DRIVER_AVAILABLE_REASON_STRING", v22);
  }

  int v23 = CFBooleanGetValue(BOOLean);
  if (!v23)
  {
    if (valuePtr == -528336895)
    {
      uint64_t v24 = 7LL;
    }

    else
    {
      if (valuePtr != -528336890) {
        goto LABEL_68;
      }
      uint64_t v24 = 21LL;
    }

    -[WiFiUsageMonitor addFaultEvent:forInterface:]( +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance"),  "addFaultEvent:forInterface:",  v24,  a2);
LABEL_68:
    if (*(void *)(a1 + 4672))
    {
      uint64_t v25 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: hostap never started. Invoking error callback on watchdog.",  "__WiFiDeviceProcessDriverAvailableEvent");
      }
      objc_autoreleasePoolPop(v25);
      sub_10004565C(a1, (uint64_t)a2, 4294963390LL);
    }
  }

  if (!v17 || (uint64_t v26 = v17, !CFStringGetLength(v17)))
  {
    if (!v22 || (uint64_t v26 = v22, !CFStringGetLength(v22))) {
      uint64_t v26 = v20;
    }
  }

  uint64_t v27 = +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance");
  -[WiFiUsageMonitor notifyDriverAvailability:available:version:flags:eventID:reason:subReason:minorReason:reasonString:]( v27,  "notifyDriverAvailability:available:version:flags:eventID:reason:subReason:minorReason:reasonString:",  a2,  v23 != 0,  0LL,  0LL,  0LL,  valuePtr,  (int)v63,  0LL,  v26);
  double v28 = objc_autoreleasePoolPush();
  double v29 = (void *)qword_100219F60;
  if (qword_100219F60)
  {
    uint64_t v56 = CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE");
    CFTypeID v30 = CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_REASON_STRING");
    uint64_t v31 = valuePtr;
    uint64_t v32 = CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_KEY_SUBREASON_STRING");
    [v29 WFLog:3, "%s: driver availability:%@, reason:%@(0x%x), subreason:%@(0x%x) flag: %@ \n", "__WiFiDeviceProcessDriverAvailableEvent", v56, v30, v31, v32, v63, CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_FLAGS") message];
  }

  objc_autoreleasePoolPop(v28);
  if (valuePtr == -528345084) {
    goto LABEL_122;
  }
  uint64_t v33 = CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_FUNCTION ");
  if (v33)
  {
    double v34 = v33;
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(v34)) {
      unint64_t v36 = v34;
    }
    else {
      unint64_t v36 = 0LL;
    }
  }

  else
  {
    unint64_t v36 = 0LL;
  }

  CFBooleanRef v37 = CFDictionaryGetValue(a3, @"DRIVER_AVAILABLE_FILENAME");
  if (v37)
  {
    uint64_t v38 = v37;
    CFTypeID v39 = CFStringGetTypeID();
    if (v39 == CFGetTypeID(v38)) {
      uint64_t v40 = v38;
    }
    else {
      uint64_t v40 = 0LL;
    }
  }

  else
  {
    uint64_t v40 = 0LL;
  }

  if (CFBooleanGetValue(BOOLean) == 1)
  {
    for (int i = 6; ; --i)
    {
      uint64_t v42 = Apple80211SetPowerState(*(void *)(a1 + 16), *(unsigned int *)(a1 + 48));
      uint64_t v43 = v42;
      if ((_DWORD)v42 != -3905 && (_DWORD)v42 != 61 && (_DWORD)v42 != 16) {
        break;
      }
      if (!i) {
        break;
      }
      usleep(0x7A120u);
    }

    unsigned int v45 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Setting power to %s[%d]",  "__WiFiDeviceProcessDriverAvailableEvent",  sub_10003AE44(*(_DWORD *)(a1 + 48)),  v43);
    }
    objc_autoreleasePoolPop(v45);
    char v46 = v65;
    if ((v65 & 0x10) != 0)
    {
      objc_msgSend( +[WAClient sharedClientWithIdentifier:](WAClient, "sharedClientWithIdentifier:", @"wifid"),  "trapCrashMiniTracerDumpReadyForInterfaceWithName:andReply:",  *(void *)(a1 + 112),  &stru_1001E3320);
      char v46 = v65;
    }

    if ((v46 & 8) != 0)
    {
      uint64_t v47 = 2LL;
LABEL_108:
      uint64_t v48 = sub_1000313EC(v47, a3, *(void *)(a1 + 16));
      if ((_DWORD)v48)
      {
        uint64_t v49 = v48;
        uint64_t v50 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s WiFiMetricsManagerCheckQueryableWatchdogInfo() returned error %d",  "__WiFiDeviceProcessDriverAvailableEvent",  v49);
        }
        objc_autoreleasePoolPop(v50);
      }

      goto LABEL_112;
    }

    if ((v46 & 4) != 0)
    {
      uint64_t v47 = 1LL;
      goto LABEL_108;
    }
  }

LABEL_112:
  if (valuePtr != -528345085 || v62 || v61)
  {
    double v53 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: driver programCounter:(0x%0x), linkRegister:(0x%x), fileName:%@ lineNumber:(%u) functionName:%@ \n", "__WiFiDeviceProcessDriverAvailableEvent", v62, v61, v40, v60, v36 message];
    }
    objc_autoreleasePoolPop(v53);
    sub_10002DC00(a1, a3);
  }

  else if (CFBooleanGetValue(BOOLean))
  {
    if (sub_10003B698())
    {
      CFDictionaryRef v51 = sub_100044010(a1, a2, @"IO80211InterfaceWoWWakeUpParams");
      if (v51)
      {
        CFDictionaryRef v52 = v51;
        CFDictionarySetValue(a3, @"IO80211InterfaceWoWWakeUpParams", v51);
        CFRelease(v52);
      }
    }
  }

  CFNumberRef v10 = 0LL;
LABEL_116:
  objc_autoreleasePoolPop(v23);
LABEL_117:
  if (v42) {

  }
LABEL_25:
  objc_autoreleasePoolPop(v6);
  return v10;
}

LABEL_122:
  double v54 = *(void (**)(uint64_t, const void *, const __CFDictionary *, void))(a1 + 5016);
  CFTypeRef v5 = context;
  if (v54) {
    v54(a1, a2, a3, *(void *)(a1 + 5024));
  }
  if (v17) {
    CFRelease(v17);
  }
LABEL_126:
  objc_autoreleasePoolPop(v5);
}

  CFRelease((CFTypeRef)v8);
LABEL_123:

  unsigned int v63 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: exiting, Error: failed to create manager ref",  "WiFiManagerCreate");
  }
  int v8 = 0LL;
  uint64_t v64 = @"%s: exiting, Error: failed to create manager ref";
LABEL_82:
  objc_autoreleasePoolPop(v63);
  NSLog(&v64->isa, "WiFiManagerCreate");
  objc_autoreleasePoolPop(v4);
  return v8;
}

        CFDateRef v59 = CFEqual(v55, *(CFTypeRef *)(a1 + 3520))
           && CFEqual(v58, *(CFTypeRef *)(a1 + 3528))
           && CFEqual(v19, *(CFTypeRef *)(a1 + 3616)) != 0;
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3520));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3528));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3616));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3624));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3320));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3632));
        unsigned int v60 = *(__CFArray **)(a1 + 3520);
        v150.length = CFArrayGetCount(v55);
        unsigned int v61 = v55;
        v150.id location = 0LL;
        CFArrayAppendArray(v60, v55, v150);
        unsigned int v62 = *(__CFArray **)(a1 + 3528);
        v151.length = CFArrayGetCount(v58);
        v151.id location = 0LL;
        CFArrayAppendArray(v62, v58, v151);
        unsigned int v63 = *(__CFArray **)(a1 + 3616);
        v152.length = CFArrayGetCount(v19);
        v152.id location = 0LL;
        CFArrayAppendArray(v63, v19, v152);
        uint64_t v64 = *(__CFArray **)(a1 + 3624);
        v153.length = CFArrayGetCount(v134);
        v153.id location = 0LL;
        CFArrayAppendArray(v64, v134, v153);
        int v65 = CFArrayGetCount(v19);
        uint64_t v131 = v23;
        if (!v65) {
          goto LABEL_160;
        }
        int v66 = v65;
        LOWORD(valuePtr[0]) = 268;
        CFStringRef value = CFNumberCreate(v13, kCFNumberSInt16Type, valuePtr);
        if (!value) {
          goto LABEL_160;
        }
        LOWORD(valuePtr[0]) = 3;
        uint64_t v128 = CFNumberCreate(v13, kCFNumberSInt16Type, valuePtr);
        if (!v128)
        {
          CFNumberRef v75 = value;
LABEL_159:
          CFRelease(v75);
          goto LABEL_160;
        }

        int v127 = v59;
        LOWORD(valuePtr[0]) = 263;
        char v67 = CFNumberCreate(v13, kCFNumberSInt16Type, valuePtr);
        if (v67)
        {
          LOWORD(valuePtr[0]) = 264;
          CFNumberRef v68 = CFNumberCreate(v13, kCFNumberSInt16Type, valuePtr);
          if (v68)
          {
            LOWORD(valuePtr[0]) = 261;
            CFNumberRef v69 = CFNumberCreate(v13, kCFNumberSInt16Type, valuePtr);
            if (v69)
            {
              CFTypeID v136 = v69;
              if (v66 >= 1)
              {
                for (int i = 0LL; i != v66; ++i)
                {
                  unsigned int v71 = CFArrayGetValueAtIndex(v19, i);
                  if (v71)
                  {
                    CFNumberRef v72 = (uint64_t)v71;
                    if (sub_1000951FC((uint64_t)v71, @"DomainName"))
                    {
                      v146.length = CFArrayGetCount(v140);
                      v146.id location = 0LL;
                      if (!CFArrayContainsValue(v140, v146, value)) {
                        CFArrayAppendValue(v140, value);
                      }
                    }

                    if (sub_1000951FC(v72, @"NaiRealmName"))
                    {
                      v147.length = CFArrayGetCount(v140);
                      v147.id location = 0LL;
                      if (!CFArrayContainsValue(v140, v147, v67)) {
                        CFArrayAppendValue(v140, v67);
                      }
                    }

                    if (sub_1000951FC(v72, @"MCCandMNC"))
                    {
                      v148.length = CFArrayGetCount(v140);
                      v148.id location = 0LL;
                      if (!CFArrayContainsValue(v140, v148, v68)) {
                        CFArrayAppendValue(v140, v68);
                      }
                    }

                    if (sub_1000951FC(v72, @"RoamingConsortiumOIs"))
                    {
                      v149.length = CFArrayGetCount(v140);
                      v149.id location = 0LL;
                      if (!CFArrayContainsValue(v140, v149, v136)) {
                        CFArrayAppendValue(v140, v136);
                      }
                    }
                  }

                  CFDictionaryRef v19 = v139;
                }
              }

              CFDateRef v20 = v140;
              if (CFArrayGetCount(v140))
              {
                CFNumberRef v73 = v128;
                CFArrayAppendValue(v140, v128);
                CFNumberRef v74 = objc_autoreleasePoolPush();
                unsigned int v61 = v132;
                if (qword_100219F60) {
                  [(id)qword_100219F60 WFLog:3, "%s: created queries %@", "__WiFiDeviceManagerPrepareHS20Queries", v140 message];
                }
              }

              else
              {
                CFNumberRef v74 = objc_autoreleasePoolPush();
                unsigned int v61 = v132;
                CFNumberRef v73 = v128;
                if (qword_100219F60) {
                  objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Nothing to query about",  "__WiFiDeviceManagerPrepareHS20Queries",  v125);
                }
              }

              objc_autoreleasePoolPop(v74);
              CFNumberRef v75 = v136;
LABEL_154:
              CFRelease(value);
              CFRelease(v73);
              if (v67) {
                CFRelease(v67);
              }
              if (v68) {
                CFRelease(v68);
              }
              CFDateRef v59 = v127;
              if (v75) {
                goto LABEL_159;
              }
LABEL_160:
              CFIndex v76 = *(__CFArray **)(a1 + 3320);
              v154.length = CFArrayGetCount(v20);
              v154.id location = 0LL;
              CFArrayAppendArray(v76, v20, v154);
              unint64_t v77 = *(__CFArray **)(a1 + 3632);
              v155.length = CFArrayGetCount(theArray);
              v155.id location = 0LL;
              CFArrayAppendArray(v77, theArray, v155);
              uint64_t v78 = *(const void **)(a1 + 3496);
              if (v78) {
                CFRelease(v78);
              }
              char v12 = (void *)cf;
              *(void *)(a1 + 3496) = theSet;
              uint64_t v79 = !v59;
              if (!cf) {
                uint64_t v79 = 1;
              }
              CFMutableArrayRef Mutable = v61;
              if ((v79 & 1) == 0 && sub_10009DF44((uint64_t)cf))
              {
                sub_1000D36F4((void *)a1, cf, 0, 0LL);
                sub_1000D3A2C(a1, cf);
              }

              sub_1000D3E0C(a1);
              *(_WORD *)(a1 + 6584) = sub_1000D3EF0(a1, cf);
              if (!v59 || *(_DWORD *)(a1 + 5512) == 1)
              {
                if ((_DWORD)v23)
                {
LABEL_170:
                  sub_1000D0428(a1);
                  goto LABEL_176;
                }

                if (cf)
                {
                  uint64_t v80 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: known network list changed while associated, updating autojoin network list",  "WiFiDeviceManagerSetNetworks");
                  }
                  objc_autoreleasePoolPop(v80);
                  sub_1000D3FD0(a1);
                }

                else if (*(_DWORD *)(a1 + 5512) == 1)
                {
                  goto LABEL_170;
                }

void sub_10005AE80(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
  if (Mutable)
  {
    int v7 = Mutable;
    if (a3 && (CFTypeID v8 = CFGetTypeID(a3), v8 == CFArrayGetTypeID()))
    {
      CFIndex Count = CFArrayGetCount(a3);
      CFStringAppendFormat(v7, 0LL, @"network count=%ld, ", Count);
      v12.length = CFArrayGetCount(a3);
      v12.id location = 0LL;
      CFArrayApplyFunction(a3, v12, (CFArrayApplierFunction)sub_10005C12C, v7);
    }

    else
    {
      CFStringAppendFormat(v7, 0LL, @"NULL eventData");
      a3 = 0LL;
    }

    CFNumberRef v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: %@", "__WiFiDeviceProcessBGScanCachedNetworkEvent", v7 message];
    }
    objc_autoreleasePoolPop(v10);
    char v11 = *(void (**)(uint64_t, uint64_t, const __CFArray *, void))(a1 + 4624);
    if (v11) {
      v11(a1, a2, a3, *(void *)(a1 + 4632));
    }
    CFRelease(v7);
  }

CFTypeID sub_10005AFC8(CFTypeID result, uint64_t a2, CFTypeRef cf)
{
  uint64_t v4 = result;
  if (cf)
  {
    CFTypeRef v5 = cf;
    CFTypeID v6 = CFGetTypeID(cf);
    CFMutableDictionaryRef result = CFDictionaryGetTypeID();
    if (v6 == result) {
      cuint64_t f = v5;
    }
    else {
      cuint64_t f = 0LL;
    }
  }

  int v7 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, void))(v4 + 4640);
  if (v7) {
    return v7(v4, a2, cf, *(void *)(v4 + 4648));
  }
  return result;
}

void sub_10005B034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 5112);
  if (v3)
  {
    v3(a1, a2, *(void *)(a1 + 5120), a3);
  }

  else
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Callback not registered",  "__WiFiDeviceProcessLeakyAPStatsEvent");
    }
    objc_autoreleasePoolPop(v4);
  }

void sub_10005B0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    int v3 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 5192);
    if (v3) {
      v3(a1, a2, *(void *)(a1 + 5200), a3);
    }
  }

  else
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: eventData is NULL!",  "__WiFiDeviceProcessTxFailEvent");
    }
    objc_autoreleasePoolPop(v4);
  }

void sub_10005B138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v7 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(a1 + 5256);
  CFTypeID v6 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "BSS steer event: %@\n", a3 message];
  }
  objc_autoreleasePoolPop(v6);
  if (v7) {
    v7(a1, a2, a3, 0LL, *(void *)(a1 + 5264));
  }
}

void sub_10005B1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return;
  }
  CFMutableStringRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  int v7 = Mutable;
  if (!*(_BYTE *)(a3 + 40)) {
    goto LABEL_8;
  }
  CFDictionaryAddValue(Mutable, @"kWiFiHostApWiFiNetworkIeValidKey", kCFBooleanTrue);
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, (const void *)(a3 + 2));
  if (!v8)
  {
    uint64_t v18 = objc_autoreleasePoolPush();
    CFDictionaryRef v19 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_29;
    }
    CFDateRef v20 = "Failed to get Battery Info from Event data";
    goto LABEL_28;
  }

  CFNumberRef v9 = v8;
  CFDictionarySetValue(v7, @"WiFiHostApWiFiNetworkIeBatteryKey", v8);
  CFRelease(v9);
  CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, (const void *)a3);
  if (!v10)
  {
    uint64_t v18 = objc_autoreleasePoolPush();
    CFDictionaryRef v19 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_29;
    }
    CFDateRef v20 = "Failed to get Flag Info from Event data";
    goto LABEL_28;
  }

  CFNumberRef v11 = v10;
  CFDictionarySetValue(v7, @"WiFiHostApWiFiNetworkIeFlagKey", v10);
  CFRelease(v11);
  if (!*(_BYTE *)(a3 + 3)) {
    goto LABEL_8;
  }
  CFStringRef v12 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)(a3 + 4), 0x8000100u);
  if (v12)
  {
    CFStringRef v13 = v12;
    CFDictionarySetValue(v7, @"WiFiHostApWiFiNetworkIeSsidKey", v12);
    CFRelease(v13);
LABEL_8:
    int v14 = *(_DWORD *)(a3 + 36);
    if ((v14 & 1) != 0)
    {
      if ((v14 & 2) != 0) {
        double v15 = (const void **)&kCFBooleanTrue;
      }
      else {
        double v15 = (const void **)&kCFBooleanFalse;
      }
      CFDictionaryAddValue(v7, @"DIRECTED_NETWORK", *v15);
      int v14 = *(_DWORD *)(a3 + 36);
    }

    if ((v14 & 4) != 0)
    {
      if ((v14 & 8) != 0) {
        CFNumberRef v16 = (const void **)&kCFBooleanTrue;
      }
      else {
        CFNumberRef v16 = (const void **)&kCFBooleanFalse;
      }
      CFDictionaryAddValue(v7, @"INTERNET_ACCESS", *v16);
    }

    CFStringRef v17 = *(void (**)(uint64_t, uint64_t, __CFDictionary *, void, void))(a1 + 5288);
    if (v17) {
      v17(a1, a2, v7, 0LL, *(void *)(a1 + 5296));
    }
    if (v7) {
      goto LABEL_21;
    }
    return;
  }

  uint64_t v18 = objc_autoreleasePoolPush();
  CFDictionaryRef v19 = (void *)qword_100219F60;
  if (qword_100219F60)
  {
    CFDateRef v20 = "Failed to get SSID Info from Event data";
LABEL_28:
    [v19 WFLog:3 message:v20];
  }

void sub_10005B42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeID v6 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: DPS Received on AC ", "__WiFiDeviceProcessDPSEvent");
  }
  objc_autoreleasePoolPop(v6);
  int v7 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 5304);
  if (v7) {
    v7(a1, a2, *(void *)(a1 + 5312), a3);
  }
  CFNumberRef v8 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Sent DPS Notification ",  "__WiFiDeviceProcessDPSEvent");
  }
  objc_autoreleasePoolPop(v8);
}

void sub_10005B4E8(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  CFTypeID v6 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:4, "%s: SlowWiFi Received %@", "__WiFiDeviceProcessSlowWiFiEvent", a3 message];
  }
  objc_autoreleasePoolPop(v6);
  sub_100033D50(a1, a3);
  int v7 = *(void (**)(uint64_t, uint64_t, void, const __CFDictionary *))(a1 + 5320);
  if (v7) {
    v7(a1, a2, *(void *)(a1 + 5328), a3);
  }
  CFNumberRef v8 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Sent SlowWiFi Notification ",  "__WiFiDeviceProcessSlowWiFiEvent");
  }
  objc_autoreleasePoolPop(v8);
}

void sub_10005B5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeID v6 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:4, "%s: SlowWiFiLinkProbeTrigger Received %@", "__WiFiDeviceProcessSlowWiFiLinkProbeTrigger", a3 message];
  }
  objc_autoreleasePoolPop(v6);
  int v7 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 5336);
  if (v7) {
    v7(a1, a2, *(void *)(a1 + 5344), a3);
  }
}

void sub_10005B64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeID v6 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:4, "%s: SlowWiFiUserInputTrigger Received %@", "__WiFiDeviceProcessSlowWiFiUserInputTrigger", a3 message];
  }
  objc_autoreleasePoolPop(v6);
  int v7 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 5352);
  if (v7) {
    v7(a1, a2, *(void *)(a1 + 5360), a3);
  }
}

void sub_10005B6E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 5368);
  if (v4) {
    v4(a1, a2, *(void *)(a1 + 5376), a3);
  }
  CFTypeRef v5 = objc_autoreleasePoolPush();
  if (a3)
  {
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: Prune Event Notification %@ ", "__WiFiDeviceProcessPruneEvent", a3 message];
    }
  }

  else if (qword_100219F60)
  {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Prune Event Notification with nil ",  "__WiFiDeviceProcessPruneEvent",  v6);
  }

  objc_autoreleasePoolPop(v5);
}

void sub_10005B77C(void *a1, uint64_t a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: ", "__WiFiDeviceProcessCountryCodeChangedEvent");
  }
  objc_autoreleasePoolPop(v4);
  CFTypeRef v5 = (dispatch_source_s *)a1[11];
  dispatch_time_t v6 = dispatch_time(0LL, 1000000000LL);
  dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, 0LL);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    uint64_t v18 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s:cannot allocate dictRef",  "__WiFiDeviceSendBSPCountryCodeChangeEvent");
    }
    objc_autoreleasePoolPop(v18);
    goto LABEL_14;
  }

  CFNumberRef v8 = Mutable;
  int valuePtr = 10;
  CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (!v9)
  {
    CFDictionaryRef v19 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s:cannot allocate eventTypeRef",  "__WiFiDeviceSendBSPCountryCodeChangeEvent");
    }
    objc_autoreleasePoolPop(v19);
    double v15 = v8;
    goto LABEL_13;
  }

  CFNumberRef v10 = v9;
  CFDictionarySetValue(v8, @"BSP_EventType", v9);
  CFNumberRef v11 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!v11)
  {
    CFDateRef v20 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s:cannot allocate eventParamsRef",  "__WiFiDeviceSendBSPCountryCodeChangeEvent");
    }
    goto LABEL_29;
  }

  uint64_t v21 = 0LL;
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v21);
  if (!v12)
  {
    CFDateRef v20 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s:cannot allocate dummyRef",  "__WiFiDeviceSendBSPCountryCodeChangeEvent");
    }
LABEL_29:
    objc_autoreleasePoolPop(v20);
    CFNumberRef v13 = 0LL;
    goto LABEL_9;
  }

  CFNumberRef v13 = v12;
  CFDictionarySetValue(v11, @"dummy", v12);
  CFDictionarySetValue(v8, @"BSP_EventParams", v11);
  int v14 = (void (*)(void *, uint64_t, void, __CFDictionary *))a1[681];
  if (v14) {
    v14(a1, a2, a1[682], v8);
  }
LABEL_9:
  CFRelease(v8);
  CFRelease(v10);
  if (v11) {
    CFRelease(v11);
  }
  if (v13)
  {
    double v15 = v13;
LABEL_13:
    CFRelease(v15);
  }

void sub_10005BA58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:4, "%s: LQMCrashTracerEvent Received %@", "__WiFiDeviceProcessLQMCrashTracerEvent", a2 message];
  }
  objc_autoreleasePoolPop(v4);
  CFStringRef value = 0LL;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  for (int i = 6; ; --i)
  {
    uint64_t v7 = Apple80211Get(*(void *)(a1 + 16), 384LL, 0LL, Mutable, 8LL);
    uint64_t v8 = v7;
    if ((int)v7 <= 15)
    {
      if ((_DWORD)v7 != -3905) {
        break;
      }
    }

    else if ((_DWORD)v7 != 61 && (_DWORD)v7 != 16)
    {
      goto LABEL_21;
    }

    if (!i) {
      break;
    }
    usleep(0x7A120u);
  }

  if ((_DWORD)v7)
  {
LABEL_21:
    CFNumberRef v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s - Apple80211Get(APPLE80211_IOC_LQM_METRICS_CRASHTRACER_DATA) failed: %d (%s)",  "__WiFiDeviceProcessLQMCrashTracerEvent",  v8,  strerror(v8));
    }
  }

  else
  {
    if (CFDictionaryGetValueIfPresent(Mutable, &off_100204698, (const void **)&value) && value)
    {
      id v10 = +[WAClient sharedClientWithIdentifier:]( &OBJC_CLASS___WAClient,  "sharedClientWithIdentifier:",  @"wifid");
      [v10 lqmCrashTracerReceiveBlock:value forInterfaceWithName:*(void *)(a1 + 112) andReply:&stru_1001E3340];
      CFNumberRef v11 = +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance");
      -[WiFiUsageMonitor receiveKernelLQMRollingWindow:ForInterface:]( v11,  "receiveKernelLQMRollingWindow:ForInterface:",  value,  *(void *)(a1 + 112));
      if (!Mutable) {
        return;
      }
      goto LABEL_17;
    }

    CFNumberRef v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s - No LQM binary tag represented in APPLE80211_IOC_LQM_METRICS_CRASHTRACER_DATA dictionary, skipping.",  "__WiFiDeviceProcessLQMCrashTracerEvent",  v13,  v14);
    }
  }

  objc_autoreleasePoolPop(v12);
  if (Mutable) {
LABEL_17:
  }
    CFRelease(Mutable);
}

void sub_10005BC34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dispatch_time_t v6 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: BeaconCacheUpdatedEvent Received %@", "__WiFiDeviceProcessBeaconCacheUpdatedEvent", a3 message];
  }
  objc_autoreleasePoolPop(v6);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 5384);
  if (v7) {
    v7(a1, a2, *(void *)(a1 + 5392), a3);
  }
}

void sub_10005BCD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dispatch_time_t v6 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: WiFiTTRProcessEvent Received %@", "__WiFiDeviceProcessTTREvent", a3 message];
  }
  objc_autoreleasePoolPop(v6);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 5400);
  if (v7) {
    v7(a1, a2, *(void *)(a1 + 5408), a3);
  }
}

void sub_10005BD6C(uint64_t a1, uint64_t a2, CFTypeRef cf)
{
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
  {
    CFTypeRef v3 = cf;
    if (cf && (CFTypeID v6 = CFGetTypeID(cf), v6 == CFArrayGetTypeID()))
    {
      uint64_t v7 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "[NWTRANSIT]: %s: Colocated networks=%@", "__WiFiDeviceProcessColocatedCacheEvent", v3 message];
      }
    }

    else
    {
      uint64_t v7 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: NULL evendata",  "__WiFiDeviceProcessColocatedCacheEvent");
      }
      CFTypeRef v3 = 0LL;
    }

    objc_autoreleasePoolPop(v7);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, CFTypeRef, void))(a1 + 5528);
    if (v8) {
      v8(a1, a2, v3, *(void *)(a1 + 5536));
    }
  }

void sub_10005BE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    CFTypeRef v3 = *(void (**)(void))(a1 + 5544);
    if (v3) {
      v3();
    }
  }

  else
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s : NULL event data or null device",  "__WiFiDeviceProcessPeerCountryCode");
    }
    objc_autoreleasePoolPop(v4);
  }

void sub_10005BEF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    CFTypeRef v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 5592);
    if (v5) {
      v5(a1, a3, a5, a2, a4, *(void *)(a1 + 5600));
    }
  }

  else
  {
    CFTypeID v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: NULL event data", "__WiFiDeviceProcessNDDEvent");
    }
    objc_autoreleasePoolPop(v6);
  }

void sub_10005BF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    CFTypeRef v3 = *(void (**)(void))(a1 + 5608);
    if (v3) {
      v3();
    }
  }

  else
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s : NULL event data or null device",  "__WiFiDeviceProcessScanForwardStats");
    }
    objc_autoreleasePoolPop(v4);
  }

CFStringRef sub_10005C014(uint64_t a1, uint64_t a2)
{
  *(void *)&__int128 v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v8[15] = v2;
  *(_OWORD *)uint64_t v8 = v2;
  __int128 v7 = v2;
  __int128 v6 = v2;
  char cStr = 0;
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  return CFStringCreateWithCString(kCFAllocatorDefault, &cStr, SystemEncoding);
}

void sub_10005C0B0(id a1, id a2, NSError *a3)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  if (a3)
  {
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s Error received after alerting wifianalyticsd to the availability of trap mini dump: %@", "__WiFiDeviceProcessDriverAvailableEvent_block_invoke", a3 message];
    }
  }

  else if (qword_100219F60)
  {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s Alerted wifianalyticsd to the availability of trap mini dump, no error was returned",  "__WiFiDeviceProcessDriverAvailableEvent_block_invoke",  v5);
  }

  objc_autoreleasePoolPop(v4);
}

void sub_10005C12C(const __CFDictionary *a1, __CFString *a2)
{
  if (a1)
  {
    if (a2)
    {
      CFBooleanRef Value = CFDictionaryGetValue(a1, @"BSSID");
      uint64_t v5 = CFDictionaryGetValue(a1, @"TIMESTAMP");
      __int128 v6 = CFDictionaryGetValue(a1, @"AGE");
      CFStringAppendFormat(a2, 0LL, @" %@/%@/%@s", Value, v5, v6);
    }
  }

void sub_10005C1B4(id a1, id a2, NSError *a3)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  if (a3)
  {
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s Error received after sending LQM CrashTracer block to wifianalyticsd: %@", "__WiFiDeviceProcessLQMCrashTracerEvent_block_invoke", a3 message];
    }
  }

  else if (qword_100219F60)
  {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s Successfully sent LQM CrashTracer block to wifianalyticsd",  "__WiFiDeviceProcessLQMCrashTracerEvent_block_invoke",  v5);
  }

  objc_autoreleasePoolPop(v4);
}

const void *sub_10005C230(const void *a1)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1) {
    return 0LL;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0LL;
}

void sub_10005C270(uint64_t a1, CFStringRef key)
{
  if (a1)
  {
    CFStringRef NetworkInterfaceEntity = key;
    if (key) {
      goto LABEL_6;
    }
    CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  *(CFStringRef *)(a1 + 112),  kSCEntNetInterfaceActiveDuringSleepSupported);
    uint64_t v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: using default key %@", "__WiFiDeviceCheckForIPRenewalWakeupSupport", NetworkInterfaceEntity message];
    }
    objc_autoreleasePoolPop(v5);
    if (NetworkInterfaceEntity)
    {
LABEL_6:
      CFPropertyListRef v6 = SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), NetworkInterfaceEntity);
      __int128 v7 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        uint64_t v8 = "TRUE";
        if (!v6) {
          uint64_t v8 = "FALSE";
        }
        [(id)qword_100219F60 WFLog:3, "%s: %@ = %s", "__WiFiDeviceCheckForIPRenewalWakeupSupport", NetworkInterfaceEntity, v8 message];
      }

      objc_autoreleasePoolPop(v7);
      CFNumberRef v9 = &kCFBooleanTrue;
      if (!v6) {
        CFNumberRef v9 = &kCFBooleanFalse;
      }
      CFBooleanRef v10 = *v9;
      for (int i = 6; ; --i)
      {
        uint64_t v12 = Apple80211Set(*(void *)(a1 + 16), 470LL, 0LL, v10, 8LL);
        uint64_t v13 = v12;
        if ((int)v12 <= 15)
        {
          if ((_DWORD)v12 != -3905) {
            break;
          }
        }

        else if ((_DWORD)v12 != 61 && (_DWORD)v12 != 16)
        {
          goto LABEL_23;
        }

        if (!i) {
          break;
        }
        usleep(0x7A120u);
      }

      if (!(_DWORD)v12) {
        goto LABEL_28;
      }
LABEL_23:
      double v15 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        CFNumberRef v16 = "scheduled";
        if (!v6) {
          CFNumberRef v16 = "un-scheduled";
        }
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "__WiFiDeviceCheckForIPRenewalWakeupSupport", v16, v13);
      }

      objc_autoreleasePoolPop(v15);
LABEL_28:
      if (v10) {
        CFRelease(v10);
      }
      if (v6) {
        CFRelease(v6);
      }
      if (!key)
      {
        if (NetworkInterfaceEntity) {
          CFRelease(NetworkInterfaceEntity);
        }
      }
    }

    else
    {
      CFStringRef v17 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null serviceKey",  "__WiFiDeviceCheckForIPRenewalWakeupSupport");
      }
      objc_autoreleasePoolPop(v17);
    }
  }

void sub_10005C4D4(uint64_t a1, CFStringRef key)
{
  if (!a1) {
    return;
  }
  CFStringRef NetworkInterfaceEntity = key;
  if (key) {
    goto LABEL_6;
  }
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  *(CFStringRef *)(a1 + 112),  @"IPConfigurationBusy");
  uint64_t v5 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: using default key %@", "__WiFiDeviceCheckForIPConfigurationBusy", NetworkInterfaceEntity message];
  }
  objc_autoreleasePoolPop(v5);
  if (NetworkInterfaceEntity)
  {
LABEL_6:
    CFPropertyListRef v6 = SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), NetworkInterfaceEntity);
    __int128 v7 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      uint64_t v8 = "TRUE";
      if (!v6) {
        uint64_t v8 = "FALSE";
      }
      [(id)qword_100219F60 WFLog:3, "%s: %@ = %s", "__WiFiDeviceCheckForIPConfigurationBusy", NetworkInterfaceEntity, v8 message];
    }

    objc_autoreleasePoolPop(v7);
    if (v6)
    {
      if (*(_DWORD *)(a1 + 4316) == 2)
      {
        CFNumberRef v9 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: waiting for IP configuration update",  "__WiFiDeviceCheckForIPConfigurationBusy");
        }
        objc_autoreleasePoolPop(v9);
        char v10 = 1;
      }

      else
      {
        char v10 = 0;
      }

      *(_BYTE *)(a1 + 4344) = v10;
      CFRelease(v6);
      if (key) {
        return;
      }
LABEL_24:
      CFRelease(NetworkInterfaceEntity);
      return;
    }

    CFNumberRef v11 = (_BYTE *)(a1 + 4344);
    if (!*(_BYTE *)(a1 + 4344))
    {
      *CFNumberRef v11 = 0;
      if (key) {
        return;
      }
      goto LABEL_24;
    }

    uint64_t v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: checking for IP configuration update",  "__WiFiDeviceCheckForIPConfigurationBusy");
    }
    objc_autoreleasePoolPop(v12);
    *CFNumberRef v11 = 0;
    sub_10004B9D8(a1);
    if (!key) {
      goto LABEL_24;
    }
  }

  else
  {
    uint64_t v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null serviceKey",  "__WiFiDeviceCheckForIPConfigurationBusy");
    }
    objc_autoreleasePoolPop(v13);
  }

uint64_t sub_10005C70C(const __CFString *a1, int *a2)
{
  if (!a2) {
    return 0LL;
  }
  *a2 = 0;
  CFIndex location = CFStringFind(a1, kSCEntNetIPv4RouterARPAlive, 0LL).location;
  int v5 = 0;
  if (location != -1)
  {
LABEL_5:
    *a2 = v5;
    return 1LL;
  }

  if (CFStringFind(a1, kSCEntNetIPv4RouterARPFailure, 0LL).location != -1)
  {
    int v5 = 1;
    goto LABEL_5;
  }

  return 0LL;
}

void sub_10005C790(uint64_t a1, const __CFString *a2)
{
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(kCFAllocatorDefault, a2, @"/");
  if (CFArrayGetCount(ArrayBySeparatingStrings) == 5)
  {
    if (CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2LL))
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3LL);
      if (ValueAtIndex)
      {
        int v5 = ValueAtIndex;
        CFPropertyListRef v6 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 4LL);
        if (v6)
        {
          if (CFEqual(v6, kSCEntNetIPv6))
          {
            __int128 v7 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2LL);
            if (CFEqual(v7, @"Service")) {
              *(_BYTE *)(a1 + 4300) = 0;
            }
            CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainSetup,  v5,  kSCEntNetInterface);
            if (NetworkServiceEntity)
            {
              CFNumberRef v9 = NetworkServiceEntity;
              char v10 = sub_100040538(a1, *(const void **)(a1 + 112));
              CFNumberRef v11 = v10;
              if (v10 && sub_10009DF44((uint64_t)v10))
              {
                if (CFEqual(v5, *(CFTypeRef *)(a1 + 112)))
                {
                  double v53 = 0LL;
                  goto LABEL_17;
                }
              }

              else
              {
                uint64_t v12 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 152), v9);
                if (v12)
                {
                  uint64_t v13 = v12;
                  CFBooleanRef Value = CFDictionaryGetValue(v12, kSCPropNetInterfaceDeviceName);
                  if (!Value || !CFEqual(*(CFTypeRef *)(a1 + 112), Value))
                  {
                    CFStringRef NetworkInterfaceEntity = 0LL;
                    goto LABEL_71;
                  }

                  double v53 = v13;
LABEL_17:
                  double v15 = objc_autoreleasePoolPush();
                  if (qword_100219F60)
                  {
                    CFNumberRef v16 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@+} %@",  @"IP",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"IPV6 State change for %@",  *(void *)(a1 + 112))),  "UTF8String"));
                    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buuint64_t f = 136446210;
                      *(void *)&uint8_t buf[4] = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v16, "UTF8String")),  "UTF8String");
                      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
                    }
                  }

                  objc_autoreleasePoolPop(v15);
                  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
                  if (Mutable)
                  {
                    uint64_t v18 = Mutable;
                    CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  *(CFStringRef *)(a1 + 112),  kSCEntNetIPv6);
                    if (NetworkInterfaceEntity)
                    {
                      CFDateRef v20 = (const __CFDictionary *)SCDynamicStoreCopyValue( *(SCDynamicStoreRef *)(a1 + 152),  NetworkInterfaceEntity);
                      if (v20)
                      {
                        CFDictionaryRef v52 = NetworkInterfaceEntity;
                        cuint64_t f = v20;
                        uint64_t v21 = (const __CFArray *)CFDictionaryGetValue(v20, kSCPropNetIPv6Addresses);
                        if (!v21) {
                          goto LABEL_81;
                        }
                        CFIndex v22 = v21;
                        int v23 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2LL);
                        if (CFEqual(v23, @"Service") && CFArrayGetCount(v22))
                        {
                          *(_BYTE *)(a1 + 4300) = 1;
                          uint64_t v24 = objc_autoreleasePoolPush();
                          if (qword_100219F60) {
                            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s : IPv6 address is routable",  "__WiFiDeviceCheckForIPV6ParamsChange");
                          }
                          objc_autoreleasePoolPop(v24);
                        }

                        CFIndex Count = CFArrayGetCount(v22);
                        CFArrayRef theArray = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
                        if (theArray)
                        {
                          uint64_t v48 = v9;
                          uint64_t v49 = v11;
                          uint64_t v50 = ArrayBySeparatingStrings;
                          uint64_t v26 = kCFAllocatorDefault;
                          if (Count >= 1)
                          {
                            unsigned __int8 v27 = 0;
                            CFIndex v28 = Count + 1;
                            while (1)
                            {
                              double v29 = (const __CFString *)CFArrayGetValueAtIndex(v22, v27);
                              if (v29) {
                                break;
                              }
LABEL_53:
                              ++v27;
                              if (--v28 <= 1) {
                                goto LABEL_54;
                              }
                            }

                            CFTypeID v30 = v29;
                            uint64_t v31 = objc_autoreleasePoolPush();
                            if (qword_100219F60)
                            {
                              uint64_t v32 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@*} %@",  @"IP",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"IP Address: %@",  v30)),  "UTF8String"));
                              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                              {
                                uint64_t v26 = kCFAllocatorDefault;
                                uint64_t v33 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v32, "UTF8String")),  "UTF8String");
                                *(_DWORD *)buuint64_t f = 136446210;
                                *(void *)&uint8_t buf[4] = v33;
                                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
                              }
                            }

                            objc_autoreleasePoolPop(v31);
                            memset(bytes, 0, sizeof(bytes));
                            CFTypeID TypeID = CFStringGetTypeID();
                            if (CFGetTypeID(v30) == TypeID)
                            {
                              *(void *)&__int128 v35 = 0xAAAAAAAAAAAAAAAALL;
                              *((void *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
                              *(_OWORD *)&v57[14] = v35;
                              *(_OWORD *)buuint64_t f = v35;
                              *(_OWORD *)size_t v57 = v35;
                              if (CFStringGetCString(v30, (char *)buf, 46LL, 0x600u))
                              {
                                unint64_t v36 = objc_autoreleasePoolPush();
                                if (qword_100219F60) {
                                  [(id)qword_100219F60 WFLog:3, "%s: Error converting IPv6 address %@ to network type", "__WiFiDeviceConvertStrToIPv6Addr", v30 message];
                                }
                              }

                              else
                              {
                                unint64_t v36 = objc_autoreleasePoolPush();
                                if (qword_100219F60) {
                                  [(id)qword_100219F60 WFLog:3, "%s: Error converting IPv6 address %@ to ASCII", "__WiFiDeviceConvertStrToIPv6Addr", v30 message];
                                }
                              }
                            }

                            else
                            {
                              unint64_t v36 = objc_autoreleasePoolPush();
                              if (qword_100219F60) {
                                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Not a valid CFString",  "__WiFiDeviceConvertStrToIPv6Addr",  v47);
                              }
                            }

                            objc_autoreleasePoolPop(v36);
LABEL_46:
                            if (bytes[0] == 254 && bytes[1] == 128)
                            {
                              kdebug_trace(731381840LL, 0LL, 0LL, 0LL, 0LL);
                              CFBooleanRef v37 = objc_autoreleasePoolPush();
                              if (qword_100219F60) {
                                [(id)qword_100219F60 WFLog:4 message:"IPv6 address is assigned"];
                              }
                              objc_autoreleasePoolPop(v37);
                            }

                            CFDataRef v38 = CFDataCreate(v26, bytes, 16LL);
                            if (v38)
                            {
                              CFDataRef v39 = v38;
                              CFArrayAppendValue(theArray, v38);
                              CFRelease(v39);
                            }

                            goto LABEL_53;
                          }

LABEL_54:
                          CFDictionaryAddValue(v18, @"IO80211InterfaceIPV6Address", theArray);
                          int v40 = 6;
                          CFNumberRef v11 = v49;
                          ArrayBySeparatingStrings = v50;
                          CFNumberRef v9 = v48;
                          CFStringRef NetworkInterfaceEntity = v52;
                          uint64_t v13 = v53;
                          while (1)
                          {
                            uint64_t v41 = Apple80211Set(*(void *)(a1 + 16), 510LL, 0LL, v18, 8LL);
                            uint64_t v42 = v41;
                            if ((int)v41 <= 15)
                            {
                              if ((_DWORD)v41 != -3905) {
                                break;
                              }
                            }

                            else if ((_DWORD)v41 != 61 && (_DWORD)v41 != 16)
                            {
                              goto LABEL_65;
                            }

                            if (!v40) {
                              break;
                            }
                            usleep(0x7A120u);
                            --v40;
                          }

                          if (!(_DWORD)v41) {
                            goto LABEL_68;
                          }
LABEL_65:
                          CFNumberRef v44 = objc_autoreleasePoolPush();
                          if (qword_100219F60) {
                            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "__WiFiDeviceCheckForIPV6ParamsChange",  "APPLE80211_IOC_IPV6_PARAMS",  v42);
                          }
                          objc_autoreleasePoolPop(v44);
LABEL_68:
                          -[WiFiUsageMonitor notifyIPv6Changes:]( +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance"),  "notifyIPv6Changes:",  -[__CFDictionary copy](v18, "copy"));
                          CFRelease(theArray);
                          CFRelease(v18);
                        }

                        else
                        {
LABEL_81:
                          CFRelease(v18);
                          CFStringRef NetworkInterfaceEntity = v52;
                          uint64_t v13 = v53;
                        }

                        unsigned int v45 = cf;
LABEL_70:
                        CFRelease(v45);
                        if (!v13) {
                          goto LABEL_72;
                        }
                        goto LABEL_71;
                      }
                    }

                    else
                    {
                      char v46 = objc_autoreleasePoolPush();
                      if (qword_100219F60) {
                        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: interface_key is NULL.",  "__WiFiDeviceCheckForIPV6ParamsChange");
                      }
                      objc_autoreleasePoolPop(v46);
                    }

                    unsigned int v45 = v18;
                    uint64_t v13 = v53;
                    goto LABEL_70;
                  }

                  CFStringRef NetworkInterfaceEntity = 0LL;
                  uint64_t v13 = v53;
                  if (!v53)
                  {
LABEL_72:
                    CFRelease(v9);
                    CFNumberRef v9 = NetworkInterfaceEntity;
                    if (!NetworkInterfaceEntity) {
                      goto LABEL_74;
                    }
                    goto LABEL_73;
                  }

  CFRelease(v8);
}

      CFRelease(v11);
      goto LABEL_55;
    }

    if (v12)
    {
      CFStringRef v17 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: did not try location based logic last time we auto joined",  "__WiFiDeviceManagerAttemptNetworkTransition");
      }
      goto LABEL_31;
    }
  }

  else
  {
    uint64_t v14 = (CFTypeRef *)(a1 + 3360);
    if (*(void *)(a1 + 3376)) {
      goto LABEL_55;
    }
  }

  int v23 = *(unsigned __int8 *)(a1 + 6616);
  uint64_t v24 = objc_autoreleasePoolPush();
  if (v23)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: did not try location based logic last time we auto joined and don't have a valid location. Will attempt tran sition anyways as preferAutoJoinHomeNetwork",  "__WiFiDeviceManagerAttemptNetworkTransition");
    }
    objc_autoreleasePoolPop(v24);
    if (v11) {
      goto LABEL_54;
    }
LABEL_55:
    if (*v14 && CFArrayGetCount((CFArrayRef)*v14))
    {
      if (!*(_BYTE *)(a1 + 6616))
      {
        uint64_t v25 = (CFDictionaryRef *)CFArrayGetValueAtIndex((CFArrayRef)*v14, 0LL);
        if (!v25) {
          goto LABEL_64;
        }
        uint64_t v26 = v25;
        if (sub_10009F434(v25)
          || objc_msgSend( +[WiFiAnalyticsManager sharedWiFiAnalyticsManager]( WiFiAnalyticsManager,  "sharedWiFiAnalyticsManager"),  "isMovingNetwork:",  v26))
        {
          unsigned __int8 v27 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: top network <%@> is a moving network", "__WiFiDeviceManagerAttemptNetworkTransition", sub_100095BC8(v26) message];
          }
LABEL_63:
          objc_autoreleasePoolPop(v27);
          goto LABEL_64;
        }

        if (!sub_10009A128((uint64_t)v26) || !sub_1000FC698(a1, v26, 0))
        {
          unsigned __int8 v27 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: top network %@ is not eligible for aj ", "__WiFiDeviceManagerAttemptNetworkTransition", sub_100095BC8(v26) message];
          }
          goto LABEL_63;
        }

        __int128 v35 = sub_10009EEF4(*(const __CFArray **)(a1 + 3568), (uint64_t)v26);
        if (v35 == -1)
        {
          unsigned __int8 v27 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: top network <%@> does not exist in known networks list, onto the next one ", "__WiFiDeviceManagerAttemptNetworkTransition", sub_100095BC8(v26) message];
          }
          goto LABEL_63;
        }

        uint64_t v8 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 3568), v35);
        goto LABEL_81;
      }
    }

    else if (!*(_BYTE *)(a1 + 6616))
    {
      char v10 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: no rank sorted networks and not preferAutoJoinHomeNetwork",  "__WiFiDeviceManagerAttemptNetworkTransition",  v36);
      }
      goto LABEL_15;
    }

    CFIndex v28 = *(const __CFArray **)(a1 + 3520);
    if (v28)
    {
      CFIndex Count = CFArrayGetCount(v28);
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
      if (Count)
      {
        uint64_t v31 = *(const __CFArray **)(a1 + 3520);
        v38.length = CFArrayGetCount(v31);
        v38.CFIndex location = 0LL;
        CFArrayAppendArray(Mutable, v31, v38);
      }
    }

    else
    {
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
    }

    if (*v14 && CFArrayGetCount((CFArrayRef)*v14))
    {
      uint64_t v32 = (const __CFArray *)*v14;
      v39.length = CFArrayGetCount((CFArrayRef)*v14);
      v39.CFIndex location = 0LL;
      CFArrayAppendArray(Mutable, v32, v39);
    }

    if (CFArrayGetCount(Mutable))
    {
      v37.length = CFArrayGetCount(Mutable);
      v37.CFIndex location = 0LL;
      CFArraySortValues(Mutable, v37, (CFComparatorFunction)sub_10009C5D4, 0LL);
      uint64_t v33 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: NOI home-state sorted networks %@", "__WiFiDeviceManagerAttemptNetworkTransition", Mutable message];
      }
      objc_autoreleasePoolPop(v33);
      uint64_t v8 = CFArrayGetValueAtIndex(Mutable, 0LL);
      if (!Mutable)
      {
LABEL_81:
        if (!v8)
        {
LABEL_64:
          char v10 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: no top network found",  "__WiFiDeviceManagerAttemptNetworkTransition",  v36);
          }
          goto LABEL_15;
        }

  CFArrayGetCount(Mutable);
  __int128 v2 = context;
LABEL_55:
  objc_autoreleasePoolPop(v2);
  return Mutable;
}

  if (v11) {
    CFRelease(v11);
  }
}

    objc_autoreleasePoolPop(v32);
    objc_autoreleasePoolPop(v28);
  }

  if (_os_feature_enabled_impl("WiFiManager", "ColocatedScopeTransition"))
  {
    sub_1000E366C((uint64_t)a2);
    CFBooleanRef v37 = objc_autoreleasePoolPush();
    CFDataRef v38 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      CFDataRef v39 = sub_100095BC8(a2);
      [v38 WFLog:3, "%s: Setting ColocatedScopeId for %@ - '%@'", "__WiFiDeviceManagerAssociateCandidate", v39, sub_1000951FC((uint64_t)a2, @"COLOCATED_NETWORK_SCOPE_ID") message];
    }

    objc_autoreleasePoolPop(v37);
  }

  sub_1000E36D4(a1, a2);
  else {
    int v40 = 1LL;
  }
  if (!sub_1000951FC((uint64_t)a2, @"COLOCATED_NETWORK_SCOPE_ID"))
  {
    sub_1000DF428(a1);
    sub_10009582C((uint64_t)a2, @"COLOCATED_NETWORK_SCOPE_ID", *(const void **)(a1 + 3848));
  }

  uint64_t v41 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "Auto Join with colocated scopeID (%@), network (%@)", sub_1000951FC((uint64_t)a2, @"COLOCATED_NETWORK_SCOPE_ID"), a2 message];
  }
  objc_autoreleasePoolPop(v41);
  uint64_t v42 = *(void *)(a1 + 64);
  uint64_t v43 = (const void *)sub_100043E8C(v42);
  CFNumberRef v44 = sub_10004E450(v42, v43, a2, 0LL, a3, (uint64_t)sub_10010EBFC, a1, (void *)(a1 + 3304));
  if ((_DWORD)v44)
  {
    unsigned int v45 = (NSError *)v44;
    objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "associationDoneWithNetwork:error:interfaceName:",  a2,  v44,  sub_100043E8C(*(void *)(a1 + 64)));
LABEL_68:
    char v46 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "Error initiating association request: %d", v45);
    }
    objc_autoreleasePoolPop(v46);
    return v45;
  }

  if (*(void *)(a1 + 7320))
  {
    v50[0] = _NSConcreteStackBlock;
    v50[1] = 3221225472LL;
    v50[2] = sub_10010F1D0;
    v50[3] = &unk_1001E4C80;
    v50[4] = a1;
    v50[5] = v40;
    sub_1000D8E24(a1, (const __CFDictionary **)a2, (uint64_t)v50);
  }

  return 0LL;
}

LABEL_71:
                  CFRelease(v13);
                  goto LABEL_72;
                }
              }

    CFRelease(v8);
    goto LABEL_72;
  }

LABEL_73:
              CFRelease(v9);
LABEL_74:
              if (!ArrayBySeparatingStrings) {
                goto LABEL_76;
              }
              goto LABEL_75;
            }
          }
        }
      }
    }
  }

  CFNumberRef v11 = 0LL;
  if (ArrayBySeparatingStrings) {
LABEL_75:
  }
    CFRelease(ArrayBySeparatingStrings);
LABEL_76:
  if (v11) {
    CFRelease(v11);
  }
}

  else {
    sub_100064280(a1, v13, v15);
  }
  if (!_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
  {
    if (v14) {
      goto LABEL_23;
    }
    goto LABEL_81;
  }

  if (!*(void *)(a1 + 688)) {
    goto LABEL_82;
  }
  if (!*(void *)(a1 + 672))
  {
    CFDataRef v39 = a1;
    int v40 = 34LL;
LABEL_83:
    sub_10006FFDC(v39, v40);
  }

  if (a2)
  {
    if (v12 != Count)
    {
      LOBYTE(v36[0]) = *(_BYTE *)(a1 + 992);
      CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_10008D8FC, v36);
    }
  }

              unsigned int v61 = objc_autoreleasePoolPush();
              unsigned int v62 = (void *)qword_100219F60;
              if (qword_100219F60)
              {
                if (v44) {
                  unsigned int v63 = "domain";
                }
                else {
                  unsigned int v63 = "SSID";
                }
                if (v44) {
                  uint64_t v64 = sub_1000951FC((uint64_t)a3, @"DomainName");
                }
                else {
                  uint64_t v64 = sub_100095BC8(a3);
                }
                objc_msgSend( v62,  "WFLog:message:",  3,  "%s: Found existing network matching network to be added; %s %@",
                  "WiFiManagerAddNetworkAsync",
                  v63,
                  v64);
              }

              objc_autoreleasePoolPop(v61);
              int v65 = sub_10009860C((uint64_t)v110);
              int v66 = sub_10009ECAC((uint64_t)v110);
              char v67 = v66;
              if (v66 && CFEqual(v66, v12))
              {
                CFNumberRef v68 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: network is already owned by the same application.",  "WiFiManagerAddNetworkAsync");
                }
                objc_autoreleasePoolPop(v68);
                uint64_t v97 = 0;
                CFNumberRef v69 = 1;
              }

              else
              {
                uint64_t v97 = 0;
                CFNumberRef v69 = 0;
              }

void sub_10005CF98(uint64_t a1, const void *a2)
{
  uint64_t v4 = sub_100130810((uint64_t)a2);
  int v5 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:4, "%s: Created AWDL interface %@", "__WiFiDeviceAWDLInterfaceCreationCompleted", v4 message];
  }
  objc_autoreleasePoolPop(v5);
  sub_100133814((uint64_t)a2, v4, 0LL);
  sub_10002ACEC(a1);
  Apple80211CopyRangingCapabilities(*(void *)(a1 + 16), a1 + 128);
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 5784), v4, a2);
  CFPropertyListRef v6 = *(const void **)(a1 + 5976);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 5976) = 0LL;
  }

  if (*(void *)(a1 + 64))
  {
    v10[0] = 0LL;
    v10[1] = v10;
    v10[2] = 0x2020000000LL;
    CFTypeRef v11 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    CFTypeRef v11 = CFRetain(v4);
    CFRetain((CFTypeRef)a1);
    __int128 v7 = *(dispatch_queue_s **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10005D13C;
    block[3] = &unk_1001E2D48;
    void block[4] = v10;
    void block[5] = a1;
    dispatch_async(v7, block);
    _Block_object_dispose(v10, 8);
  }

  else
  {
    uint64_t v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null queue.",  "__WiFiDeviceAWDLInterfaceCreationCompleted");
    }
    objc_autoreleasePoolPop(v8);
  }

void sub_10005D124( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10005D13C(uint64_t a1)
{
  __int128 v2 = *(void **)(a1 + 40);
  if (v2[8])
  {
    CFTypeRef v3 = (void (*)(void *, uint64_t, void, uint64_t))v2[637];
    if (v3)
    {
      uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      if (v4)
      {
        v3(v2, v4, v2[638], 1LL);
        int v5 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
        if (v5)
        {
          CFRelease(v5);
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
        }
      }
    }

    CFRelease(*(CFTypeRef *)(a1 + 40));
  }

  else
  {
    CFRelease(v2);
    CFPropertyListRef v6 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
    }
  }

void sub_10005D21C(id a1)
{
  if (objc_opt_class(&OBJC_CLASS___ACAccount))
  {
    if (objc_opt_class(&OBJC_CLASS___ACAccountType)) {
      qword_1002198C8 = objc_alloc_init(&OBJC_CLASS___WiFiAccountStoreManager);
    }
  }

void sub_10005D514( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10005D52C(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 8LL);
  return result;
}

void sub_10005D5EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10005D604(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if (*(unsigned __int8 *)(v2 + 8) == v3)
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
        int v5 = "Managed";
      }
      else {
        int v5 = "Non-Managed";
      }
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: No change Current (%s Account)",  "-[WiFiAccountStoreManager _updateIsManagedAppleIDAndNotify:]_block_invoke",  v5);
    }

    objc_autoreleasePoolPop(v4);
  }

  else
  {
    *(_BYTE *)(v2 + _Block_object_dispose(va, 8) = v3;
    if (*(_BYTE *)(a1 + 48) && [*(id *)(a1 + 32) callback])
    {
      if ([*(id *)(a1 + 32) context]) {
        ((void (*)(id, void))[*(id *)(a1 + 32) callback])( objc_msgSend(*(id *)(a1 + 32), "context"),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
      }
    }
  }

void sub_10005D74C(void *a1)
{
  uint64_t v2 = CFURLCreateWithString( kCFAllocatorDefault,  @"file:///private/var/Managed%20Preferences/mobile/com.apple.MobileWiFi.debug.plist",  0LL);
  CFErrorRef error = 0LL;
  qword_100219F70 = (uint64_t)a1;
  qword_100219F78 = (uint64_t)CFRunLoopGetCurrent();
  if (v2)
  {
    int v3 = CFReadStreamCreateWithFile(kCFAllocatorDefault, v2);
    if (!v3)
    {
      uint64_t v21 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null fileStreamRef",  "WiFiLoggingLoadDebugSettings");
      }
      objc_autoreleasePoolPop(v21);
      CFDictionaryRef v19 = v2;
LABEL_37:
      CFRelease(v19);
      goto LABEL_38;
    }

    uint64_t v4 = v3;
    int v5 = CFReadStreamOpen(v3);
    if (v5)
    {
      CFPropertyListRef v6 = (const __CFDictionary *)CFPropertyListCreateWithStream(kCFAllocatorDefault, v4, 0LL, 0LL, 0LL, &error);
      __int128 v7 = v6;
      if (error)
      {
        uint64_t v8 = objc_autoreleasePoolPush();
        CFNumberRef v9 = (void *)qword_100219F60;
        if (!qword_100219F60)
        {
LABEL_9:
          objc_autoreleasePoolPop(v8);
LABEL_34:
          CFReadStreamClose(v4);
LABEL_35:
          CFRelease(v4);
          CFRelease(v2);
          if (!v7) {
            goto LABEL_38;
          }
          CFDictionaryRef v19 = v7;
          goto LABEL_37;
        }

        CFIndex v22 = "WiFiLoggingLoadDebugSettings";
        CFErrorRef v23 = error;
        char v10 = "%s: plist creation returned error %@";
        goto LABEL_7;
      }

      if (v6)
      {
        CFTypeID v12 = CFGetTypeID(v6);
        if (v12 == CFDictionaryGetTypeID())
        {
          if (byte_1002198D8 != 1)
          {
            if (CFDictionaryGetCount(v7))
            {
              CFBooleanRef Value = (const __CFString *)CFDictionaryGetValue(v7, @"WiFiManagerLoggingEnabled");
              CFComparisonResult v14 = CFStringCompare(Value, @"true", 0LL);
              double v15 = objc_autoreleasePoolPush();
              if (v14 == kCFCompareEqualTo)
              {
                if (qword_100219F60) {
                  objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: WiFi Diagnostic Profile enabled",  "WiFiLoggingLoadDebugSettings");
                }
                objc_autoreleasePoolPop(v15);
                byte_1002198D8 = 1;
                if (qword_100219F70)
                {
                  sub_100071B18((void *)qword_100219F70, @"LoggingFileClassC", kCFBooleanFalse);
                  sub_100071B18((void *)qword_100219F70, @"LoggingFileEnabled", kCFBooleanTrue);
                  sub_100071B18((void *)qword_100219F70, @"WiFiSettingsLogging", kCFBooleanTrue);
                  sub_100071B18((void *)qword_100219F70, @"WiFiATJPickerLogging", kCFBooleanTrue);
                  sub_100071B18((void *)qword_100219F70, @"DiagnosticsEnabled", kCFBooleanTrue);
                  goto LABEL_34;
                }

                uint64_t v8 = objc_autoreleasePoolPush();
                CFNumberRef v9 = (void *)qword_100219F60;
                if (!qword_100219F60) {
                  goto LABEL_9;
                }
                CFIndex v22 = "__WiFiLoggingTurnOnWiFiLogging";
                char v10 = "%s: wifimanager is NULL";
LABEL_7:
                uint64_t v11 = 4LL;
LABEL_8:
                objc_msgSend(v9, "WFLog:message:", v11, v10, v22, v23);
                goto LABEL_9;
              }

              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: WiFi Diagnostic Profile disabled",  "WiFiLoggingLoadDebugSettings");
              }
              objc_autoreleasePoolPop(v15);
              byte_1002198D8 = 0;
            }

            else
            {
              uint64_t v18 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: plist does not even have a single entry in Dictionary",  "WiFiLoggingLoadDebugSettings");
              }
              objc_autoreleasePoolPop(v18);
              byte_1002198D8 = 0;
              sub_100071B18(a1, @"DiagnosticsEnabled", kCFBooleanFalse);
            }

            sub_10005DBC8();
            goto LABEL_34;
          }

          uint64_t v8 = objc_autoreleasePoolPush();
          CFNumberRef v9 = (void *)qword_100219F60;
          if (!qword_100219F60) {
            goto LABEL_9;
          }
          char v10 = "wifi debug profile is already installed";
        }

        else
        {
          uint64_t v8 = objc_autoreleasePoolPush();
          CFNumberRef v9 = (void *)qword_100219F60;
          if (!qword_100219F60) {
            goto LABEL_9;
          }
          CFIndex v22 = "WiFiLoggingLoadDebugSettings";
          char v10 = "%s: unknown property format";
        }

        uint64_t v11 = 3LL;
        goto LABEL_8;
      }
    }

    CFNumberRef v16 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"WiFi debug profile is not installed"];
    }
    objc_autoreleasePoolPop(v16);
    if (byte_1002198D8 == 1)
    {
      CFStringRef v17 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3 message:"Uninstalling logging profile"];
      }
      objc_autoreleasePoolPop(v17);
      byte_1002198D8 = 0;
      sub_100071B18(a1, @"DiagnosticsEnabled", kCFBooleanFalse);
      sub_10005DBC8();
    }

    __int128 v7 = 0LL;
    if (!v5) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }

  CFDateRef v20 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null url", "WiFiLoggingLoadDebugSettings");
  }
  objc_autoreleasePoolPop(v20);
LABEL_38:
  if (error) {
    CFRelease(error);
  }
}

void sub_10005DBC8()
{
  if (qword_100219F70)
  {
    if (byte_100219F59) {
      CFBooleanRef v0 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v0 = kCFBooleanFalse;
    }
    sub_100071B18((void *)qword_100219F70, @"LoggingFileClassC", v0);
    if (byte_100219F58) {
      CFBooleanRef v1 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v1 = kCFBooleanFalse;
    }
    sub_100071B18((void *)qword_100219F70, @"LoggingFileEnabled", v1);
    sub_100071B18((void *)qword_100219F70, @"WiFiSettingsLogging", kCFBooleanFalse);
    sub_100071B18((void *)qword_100219F70, @"WiFiATJPickerLogging", kCFBooleanFalse);
    sub_100071B18((void *)qword_100219F70, @"DiagnosticsEnabled", kCFBooleanFalse);
  }

  else
  {
    uint64_t v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: wifimanager is NULL",  "__WiFiLoggingTurnOffWiFiLogging");
    }
    objc_autoreleasePoolPop(v2);
  }

uint64_t sub_10005DCE0()
{
  return byte_1002198D8;
}

id sub_10005DCEC()
{
  CFBooleanRef v0 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  uint64_t v12 = 0LL;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  CFBooleanRef v1 = -[NSArray objectEnumerator]( -[NSFileManager contentsOfDirectoryAtPath:error:]( v0,  "contentsOfDirectoryAtPath:error:",  @"/var/mobile/Library/Logs/CrashReporter/WiFi/WiFiManager",  &v12),  "objectEnumerator");
  id result = -[NSEnumerator countByEnumeratingWithState:objects:count:]( v1,  "countByEnumeratingWithState:objects:count:",  &v8,  v13,  16LL);
  if (result)
  {
    id v3 = result;
    uint64_t v4 = *(void *)v9;
    do
    {
      int v5 = 0LL;
      do
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        CFPropertyListRef v6 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)v5);
        if ([v6 hasPrefix:@"wifi-buf-"]
          && [v6 hasSuffix:@".log"])
        {
          if (-[NSFileManager removeItemAtPath:error:]( v0,  "removeItemAtPath:error:",  [@"/var/mobile/Library/Logs/CrashReporter/WiFi/WiFiManager" stringByAppendingPathComponent:v6],  &v12))
          {
            BOOL v7 = v12 == 0;
          }

          else
          {
            BOOL v7 = 0;
          }

          if (!v7) {
            NSLog(@"Error removing %@: %@", v6, v12);
          }
        }

        int v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id result = -[NSEnumerator countByEnumeratingWithState:objects:count:]( v1,  "countByEnumeratingWithState:objects:count:",  &v8,  v13,  16LL);
      id v3 = result;
    }

    while (result);
  }

  return result;
}

void sub_10005DE74(uint64_t a1, int a2, uint64_t a3, const __CFString **a4)
{
  __int128 v8 = objc_autoreleasePoolPush();
  qword_100219F70 = a1;
  qword_100219F78 = (uint64_t)CFRunLoopGetCurrent();
  if (!qword_100219F60) {
    qword_100219F60 = sub_10008168C(qword_100219F70);
  }
  byte_100219F68 = a2;
  __int128 v9 = a4[1];
  uint64_t v10 = 5LL;
  if (v9)
  {
    IntCFBooleanRef Value = CFStringGetIntValue(v9);
    if (IntValue >= 5) {
      uint64_t v10 = 5LL;
    }
    else {
      uint64_t v10 = IntValue;
    }
  }

  uint64_t v12 = a4[2];
  uint64_t v13 = 3LL;
  if (v12)
  {
    SInt32 v14 = CFStringGetIntValue(v12);
    else {
      int v15 = 3;
    }
    uint64_t v13 = v15;
  }

  CFNumberRef v16 = a4[4];
  uint64_t v17 = 2LL;
  if (v16)
  {
    SInt32 v18 = CFStringGetIntValue(v16);
    else {
      int v19 = 2;
    }
    uint64_t v17 = v19;
  }

  CFDateRef v20 = a4[3];
  uint64_t v21 = 7LL;
  if (v20)
  {
    unsigned int v22 = CFStringGetIntValue(v20);
    if (v22 <= 0x1E) {
      int v23 = v22;
    }
    else {
      int v23 = 7;
    }
    uint64_t v21 = v23;
  }

  if (a2)
  {
    if (byte_1002198D8 == 1)
    {
      [(id)qword_100219F60 setDestinationFileLocation:@"/var/mobile/Library/Logs/CrashReporter/WiFi" fileNamePrefix:@"wifimanager" runLoopRef:qword_100219F78 runLoopMode:kCFRunLoopDefaultMode classC:a3 dateFormatter:qword_100219F98 maxFileSizeInMB:v10 logLifespanInDays:v21];
    }

    else
    {
      if (*a4) {
        uint64_t v24 = *a4;
      }
      else {
        uint64_t v24 = @"/Library/Logs/wifimanager.log";
      }
      [(id)qword_100219F60 setDestinationFile:v24 runLoopRef:qword_100219F78 runLoopMode:kCFRunLoopDefaultMode classC:a3 dateFormatter:qword_100219F98 maxFileSizeInMB:v10 logLifespanInDays:v21];
    }
  }

  else
  {
    [(id)qword_100219F60 setDestinationOsLog:@"com.apple.WiFiManager" category:&stru_1001EB6E0 logLifespanInDays:v21 logLevel:v13 logPrivacy:v17];
  }

  objc_autoreleasePoolPop(v8);
}

LABEL_67:
      uint64_t v150 = v56;
      CFDateRef v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      uint64_t v148 = (void *)v53;
      [v59 timeIntervalSinceDate:v53];
      unsigned int v61 = v60;
      -[WiFiFindAndJoinRequest totalScanTime](self, "totalScanTime");
      -[WiFiFindAndJoinRequest setTotalScanTime:](self, "setTotalScanTime:", v61 + v62);

      uint64_t v155 = 0u;
      uint64_t v156 = 0u;
      uint64_t v153 = 0u;
      double v154 = 0u;
      CFNumberRef v16 = v55;
      unsigned int v63 = [v16 countByEnumeratingWithState:&v153 objects:v182 count:16];
      if (v63)
      {
        uint64_t v64 = v63;
        int v65 = *(void *)v154;
        do
        {
          for (int n = 0LL; n != v64; int n = (char *)n + 1)
          {
            if (*(void *)v154 != v65) {
              objc_enumerationMutation(v16);
            }
            char v67 = *(void **)(*((void *)&v153 + 1) + 8LL * (void)n);
            CFNumberRef v68 = (void *)objc_claimAutoreleasedReturnValue([v67 networkName]);
            CFNumberRef v69 = (void *)objc_claimAutoreleasedReturnValue(-[WiFiFindAndJoinRequest networkName](self, "networkName"));
            int v70 = [v68 isEqualToString:v69];

            if (v70) {
              [v8 addObject:v67];
            }
          }

          uint64_t v64 = [v16 countByEnumeratingWithState:&v153 objects:v182 count:16];
        }

        while (v64);
      }

      BOOL v7 = v151;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        CFIndex v76 = (void *)objc_claimAutoreleasedReturnValue([v151 valueForKey:@"description"]);
        unint64_t v77 = (WiFiFindAndJoinRequest *)objc_claimAutoreleasedReturnValue([v76 componentsJoinedByString:@","]);
        uint64_t v78 = [v16 count];
        uint64_t v79 = [v8 count];
        *(_DWORD *)buuint64_t f = 136316162;
        CFIndex v175 = "-[WiFiFindAndJoinRequest _runFindAndJoinOnInterface:outError:]";
        uint64_t v176 = 2112;
        v177 = v77;
        double v178 = 1024;
        *(_DWORD *)float v179 = v78;
        *(_WORD *)&v179[4] = 1024;
        *(_DWORD *)&v179[6] = v79;
        uint64_t v180 = 2112;
        uint64_t v181 = v150;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%s: scan completed, requested channels=%@, result count=%d, matches=%d, error=%@",  buf,  0x2Cu);
      }

      if ([v8 count]) {
        break;
      }
      unsigned int v71 = (void *)objc_claimAutoreleasedReturnValue(-[WiFiFindAndJoinRequest scanFailureList](self, "scanFailureList"));
      CFNumberRef v72 = (void *)objc_claimAutoreleasedReturnValue([v71 lastObject]);
      CFNumberRef v73 = -[WiFiFindAndJoinRequest _canPerformRetry:](self, "_canPerformRetry:", v72);

      CFNumberRef v74 = v148;
      if (!v73)
      {
        uint64_t v110 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
        a4 = v141;
        if (v110) {
          sub_100154044(v110, v111, v112, v113, v114, v115, v116, v117);
        }
        goto LABEL_105;
      }

      -[WiFiFindAndJoinRequest _checkAndRequestChipResetIfNeeded](self, "_checkAndRequestChipResetIfNeeded");
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100153FFC(v172, &v173, v75);
      }
      [v151 removeAllObjects];
    }

    if ([v151 count])
    {
      uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue(-[WiFiFindAndJoinRequest scannedChannels](self, "scannedChannels"));
      [v80 addObjectsFromArray:v151];
    }

    int64_t v81 = (void *)objc_claimAutoreleasedReturnValue(-[WiFiFindAndJoinRequest joinCandidates](self, "joinCandidates"));
    int64_t v82 = (void *)objc_claimAutoreleasedReturnValue([v8 allObjects]);
    [v81 addObjectsFromArray:v82];

    while (1)
    {
      uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue(-[WiFiFindAndJoinRequest joinCandidates](self, "joinCandidates"));
      uint64_t v84 = [v83 count];

      if (!v84) {
        break;
      }
      uint64_t v85 = v143;
      unsigned int v86 = objc_alloc_init(&OBJC_CLASS___CWFAssocParameters);

      unsigned int v87 = (void *)objc_claimAutoreleasedReturnValue(-[WiFiFindAndJoinRequest joinCandidates](self, "joinCandidates"));
      CFTypeID v88 = (void *)objc_claimAutoreleasedReturnValue([v87 allObjects]);
      uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue([v88 firstObject]);
      [v86 setScanResult:v89];

      [v86 setForceBSSID:1];
      __int16 v90 = (void *)objc_claimAutoreleasedReturnValue(-[WiFiFindAndJoinRequest password](self, "password"));
      [v86 setPassword:v90];

      [v86 setRememberUponSuccessfulAssociation:1];
      [v86 setKnownNetworkProfile:0];
      int v143 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));

      CFStringRef v91 = (void *)objc_claimAutoreleasedReturnValue(-[WiFiFindAndJoinRequest interface](self, "interface"));
      double v152 = 0LL;
      unsigned __int16 v144 = v86;
      CFTypeID v92 = [v91 associateWithParameters:v86 error:&v152];
      int v93 = (WiFiFindAndJoinRequest *)v152;

      uint64_t v150 = v93;
      if (v93)
      {
        BOOL v94 = (void *)objc_claimAutoreleasedReturnValue(-[WiFiFindAndJoinRequest joinFailureList](self, "joinFailureList"));
        [v94 addObject:v93];
        BOOL v7 = v151;
        CFNumberRef v74 = v148;
      }

      else
      {
        BOOL v7 = v151;
        CFNumberRef v74 = v148;
        if ((v92 & 1) != 0) {
          goto LABEL_92;
        }
        BOOL v94 = (void *)objc_claimAutoreleasedReturnValue(-[WiFiFindAndJoinRequest joinFailureList](self, "joinFailureList"));
        CFTypeID v95 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  97LL,  0LL));
        [v94 addObject:v95];
      }

LABEL_92:
      CFStringRef v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v96 timeIntervalSinceDate:v143];
      int64_t v98 = v97;
      -[WiFiFindAndJoinRequest totalJoinTime](self, "totalJoinTime");
      -[WiFiFindAndJoinRequest setTotalJoinTime:](self, "setTotalJoinTime:", v98 + v99);

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        CFNumberRef v105 = (WiFiFindAndJoinRequest *)objc_claimAutoreleasedReturnValue([v144 scanResult]);
        *(_DWORD *)buuint64_t f = 136315650;
        CFIndex v175 = "-[WiFiFindAndJoinRequest _runFindAndJoinOnInterface:outError:]";
        uint64_t v176 = 2112;
        v177 = v105;
        double v178 = 2112;
        *(void *)float v179 = v93;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%s: join completed, candidate=%@, error=%@",  buf,  0x20u);
      }

      CFTypeID v100 = (void *)objc_claimAutoreleasedReturnValue(-[WiFiFindAndJoinRequest joinCandidates](self, "joinCandidates"));
      CFStringRef v101 = (void *)objc_claimAutoreleasedReturnValue([v144 scanResult]);
      [v100 removeObject:v101];

      if ((v92 & 1) != 0)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          CFTypeID v122 = (WiFiFindAndJoinRequest *)objc_claimAutoreleasedReturnValue(-[WiFiFindAndJoinRequest networkName](self, "networkName"));
          *(_DWORD *)buuint64_t f = 136315650;
          CFIndex v175 = "-[WiFiFindAndJoinRequest _runFindAndJoinOnInterface:outError:]";
          uint64_t v176 = 2112;
          v177 = v122;
          double v178 = 2112;
          *(void *)float v179 = v93;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%s: join %@ succeeded (error=%@)",  buf,  0x20u);
        }

        int v123 = (void *)objc_claimAutoreleasedReturnValue([v144 scanResult]);
        -[WiFiFindAndJoinRequest setJoinedNetwork:](self, "setJoinedNetwork:", v123);

        uint64_t v120 = 1;
        goto LABEL_110;
      }

      CFIndex v102 = (void *)objc_claimAutoreleasedReturnValue(-[WiFiFindAndJoinRequest joinFailureList](self, "joinFailureList"));
      BOOL v103 = (void *)objc_claimAutoreleasedReturnValue([v102 lastObject]);
      unsigned int v104 = -[WiFiFindAndJoinRequest _canPerformRetry:](self, "_canPerformRetry:", v103);

      if (!v104)
      {
        a4 = v141;
        goto LABEL_105;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buuint64_t f = v140;
        CFIndex v175 = "-[WiFiFindAndJoinRequest _runFindAndJoinOnInterface:outError:]";
        uint64_t v176 = 2112;
        v177 = v93;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%s: encountered join error %@, performing join retry...",  buf,  0x16u);
      }
    }

    CFNumberRef v106 = (void *)objc_claimAutoreleasedReturnValue(-[WiFiFindAndJoinRequest joinFailureList](self, "joinFailureList"));
    CFDataRef v107 = (void *)objc_claimAutoreleasedReturnValue([v106 lastObject]);
    CFDataRef v108 = -[WiFiFindAndJoinRequest _canPerformRetry:](self, "_canPerformRetry:", v107);

    if (v108)
    {
      -[WiFiFindAndJoinRequest _checkAndRequestChipResetIfNeeded](self, "_checkAndRequestChipResetIfNeeded");
      uint64_t v17 = v148;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1001540B8(v170, &v171, v109);
      }
      [v7 removeAllObjects];
      int v15 = v149;
      continue;
    }

    break;
  }

  int v124 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
  a4 = v141;
  CFNumberRef v74 = v148;
  if (v124) {
    sub_100154100(v124, v125, v126, v127, v128, v129, v130, v131);
  }
LABEL_105:
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v118 = (WiFiFindAndJoinRequest *)objc_claimAutoreleasedReturnValue(-[WiFiFindAndJoinRequest networkName](self, "networkName"));
    *(_DWORD *)buuint64_t f = 136315650;
    CFIndex v175 = "-[WiFiFindAndJoinRequest _runFindAndJoinOnInterface:outError:]";
    uint64_t v176 = 2112;
    v177 = v118;
    double v178 = 2112;
    *(void *)float v179 = v150;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%s: find and join %@ failed with error %@",  buf,  0x20u);
  }

  if (a4)
  {
    uint64_t v119 = v150;
    uint64_t v120 = 0;
    *a4 = -[WiFiFindAndJoinRequest copy](v150, "copy");
  }

  else
  {
    uint64_t v120 = 0;
LABEL_110:
    uint64_t v119 = v150;
  }

  -[WiFiFindAndJoinRequest submitMetric](self, "submitMetric");

  return v120;
}

    SInt32 v18 = 1;
    goto LABEL_20;
  }

    if (v6 == ++v40) {
      goto LABEL_70;
    }
  }

  uint64_t v43 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: provisioned HS2.0 account %@ has no credentials.", "__WiFiDeviceManagerFindMatchingHS20Account", sub_100095BC8(v42) message];
  }
  objc_autoreleasePoolPop(v43);
  if (v35) {
LABEL_72:
  }
    CFRelease(v35);
}

                *(_DWORD *)(a1 + 96) = 1;
                unint64_t v36 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  [(id)qword_100219F60 WFLog:3 message:"WiFiDeviceEAPUpdate: EAPOLControl already stopping"];
                }
                objc_autoreleasePoolPop(v36);
                id v3 = 0LL;
                goto LABEL_70;
              }

              double v29 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: CFDictionaryGetCount() is zero for userInput",  "__WiFiDeviceEAPCopyUserInput");
              }
              objc_autoreleasePoolPop(v29);
              CFRelease(v22);
LABEL_57:
              unsigned int v22 = 0LL;
              goto LABEL_58;
            }

            CFDateRef v20 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Could not create the userInput dictionary",  "__WiFiDeviceEAPCopyUserInput",  v37,  v38);
            }
          }

          else if (qword_100219F60)
          {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: required array count was %ld, returning NULL userInput",  "__WiFiDeviceEAPCopyUserInput",  0,  v38);
          }
        }

        else
        {
          CFDateRef v20 = objc_autoreleasePoolPush();
          if (qword_100219F60)
          {
            if (v18) {
              uint64_t v32 = "non-NULL";
            }
            else {
              uint64_t v32 = "null";
            }
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: configuration (%s) was NULL or count was zero (%ld)",  "__WiFiDeviceEAPCopyUserInput",  v32,  CFDictionaryGetCount(v18));
          }
        }
      }

      else
      {
        CFDateRef v20 = objc_autoreleasePoolPush();
        if (qword_100219F60)
        {
          CFTypeID v30 = "non-NULL";
          if (*(void *)(a1 + 88)) {
            uint64_t v31 = "non-NULL";
          }
          else {
            uint64_t v31 = "null";
          }
          if (!*(void *)(a1 + 80)) {
            CFTypeID v30 = "null";
          }
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: required (%s) or profile (%s) was NULL, returning null userInput",  "__WiFiDeviceEAPCopyUserInput",  v31,  v30);
        }
      }

      objc_autoreleasePoolPop(v20);
      goto LABEL_57;
    }
  }

  return v3;
}

id sub_10006017C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1000602C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1000602EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000602FC(uint64_t a1)
{
}

void sub_100060304(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8LL);
  obint j = *(id *)(v4 + 40);
  unsigned __int8 v5 = [v2 _runFindAndJoinOnInterface:v3 outError:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v5;
  if (*(void *)(a1 + 64)) {
    **(void **)(a1 + 64) = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) copy];
  }
}

void sub_1000604A0(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v12 = 0LL;
  unsigned __int8 v4 = [v2 _runFindAndJoinOnInterface:v3 outError:&v12];
  id v5 = v12;
  CFPropertyListRef v6 = (void *)a1[7];
  if (v6)
  {
    BOOL v7 = (dispatch_queue_s *)a1[6];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    int v8[2] = sub_10006055C;
    void v8[3] = &unk_1001E4150;
    id v10 = v6;
    unsigned __int8 v11 = v4;
    id v9 = v5;
    dispatch_sync(v7, v8);
  }
}

uint64_t sub_10006055C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 48),  *(void *)(a1 + 32));
}

void sub_100060768( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100060778(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

BOOL sub_1000609F0()
{
  CFBooleanRef v0 = (const __CFString *)MGCopyAnswer(@"ReleaseType", 0LL);
  if (!v0) {
    return 0LL;
  }
  CFBooleanRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  BOOL v3 = v2 == CFStringGetTypeID() && CFStringCompare(v1, @"NonUI", 0LL) == kCFCompareEqualTo;
  CFRelease(v1);
  return v3;
}

uint64_t sub_100060A6C()
{
  uint64_t result = qword_1002198E0;
  if (!qword_1002198E0)
  {
    pthread_once(&stru_100218EA0, (void (*)(void))sub_100060AA8);
    return qword_1002198E0;
  }

  return result;
}

__CFArray *sub_100060AA8()
{
  qword_1002198E0 = _CFRuntimeRegisterClass(&unk_1001E42C0);
  IOMasterPort(0, (mach_port_t *)&dword_100219910);
  __int128 v9 = xmmword_10017F7B0;
  __int128 v10 = unk_10017F7C0;
  __int128 v11 = xmmword_10017F7D0;
  __int128 v5 = xmmword_10017F770;
  __int128 v6 = unk_10017F780;
  __int128 v7 = xmmword_10017F790;
  __int128 v8 = unk_10017F7A0;
  __int128 v1 = xmmword_10017F730;
  __int128 v2 = unk_10017F740;
  __int128 v3 = xmmword_10017F750;
  __int128 v4 = unk_10017F760;
  qword_1002198E8 = (uint64_t)sub_100084910((char *)&v1, 22LL);
  __int128 v3 = xmmword_10017F800;
  __int128 v4 = unk_10017F810;
  __int128 v5 = xmmword_10017F820;
  __int128 v6 = unk_10017F830;
  __int128 v1 = xmmword_10017F7E0;
  __int128 v2 = unk_10017F7F0;
  qword_1002198F0 = (uint64_t)sub_100084910((char *)&v1, 12LL);
  *(void *)&__int128 v4 = 0LL;
  __int128 v1 = xmmword_10017F4E0;
  __int128 v2 = xmmword_10017F4F0;
  __int128 v3 = xmmword_10017F500;
  qword_1002198F8 = (uint64_t)sub_100084910((char *)&v1, 7LL);
  *(void *)&__int128 v4 = 0LL;
  __int128 v1 = xmmword_10017F4E0;
  __int128 v2 = xmmword_10017F4F0;
  __int128 v3 = xmmword_10017F500;
  uint64_t result = sub_100084910((char *)&v1, 7LL);
  qword_100219900 = (uint64_t)result;
  return result;
}

uint64_t sub_100060C04(uint64_t a1, dispatch_queue_s *a2)
{
  __int128 v4 = objc_autoreleasePoolPush();
  __int128 v5 = (void *)sub_10003AFF4((uint64_t)"WiFiManagerCreate");
  __int128 v6 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: entering", "WiFiManagerCreate");
  }
  objc_autoreleasePoolPop(v6);
  NSLog(@"%s: entering", "WiFiManagerCreate");
  if (!qword_1002198E0) {
    pthread_once(&stru_100218EA0, (void (*)(void))sub_100060AA8);
  }
  uint64_t Instance = _CFRuntimeCreateInstance(a1);
  if (!Instance) {
    goto LABEL_123;
  }
  uint64_t v8 = Instance;
  bzero((void *)(Instance + 16), 0x8A8uLL);
  *(_DWORD *)(v8 + 324) = 1;
  *(void *)(v8 + 616) = 0LL;
  *(void *)(v8 + 104_Block_object_dispose((const void *)(v11 - 80), 8) = 0LL;
  *(void *)(v8 + 1736) = MGCopyAnswer(@"BuildVersion", 0LL);
  id v9 = objc_alloc_init(&OBJC_CLASS___WFLogger);
  *(void *)(v8 + 1792) = v9;
  [v9 setDestinationOsLog:@"com.apple.WiFiManager" category:&stru_1001EB6E0 logLifespanInDays:7 logLevel:3 logPrivacy:2];
  *(void *)(v8 + 1800) = 0LL;
  CFMutableSetRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
  *(void *)(v8 + 96) = Mutable;
  if (!Mutable) {
    goto LABEL_122;
  }
  CFMutableSetRef v11 = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
  *(void *)(v8 + 104) = v11;
  if (!v11) {
    goto LABEL_122;
  }
  *(_DWORD *)(v8 + 112) = MGGetSInt32Answer(@"DeviceClassNumber", 0LL);
  *(_BYTE *)(v8 + 129) = MGGetBoolAnswer(@"wapi");
  *(void *)(v8 + 120) = MGGetProductType();
  *(_BYTE *)(v8 + 12_Block_object_dispose((const void *)(v11 - 80), 8) = MGGetBoolAnswer(@"cellular-data");
  CFMutableSetRef v12 = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
  *(void *)(v8 + 136) = v12;
  if (!v12) {
    goto LABEL_122;
  }
  CFMutableSetRef v13 = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
  *(void *)(v8 + 144) = v13;
  if (!v13) {
    goto LABEL_122;
  }
  CFMutableSetRef v14 = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
  *(void *)(v8 + 152) = v14;
  if (!v14) {
    goto LABEL_122;
  }
  CFMutableSetRef v15 = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
  *(void *)(v8 + 160) = v15;
  if (!v15) {
    goto LABEL_122;
  }
  CFMutableSetRef v16 = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
  *(void *)(v8 + 1000) = v16;
  if (!v16) {
    goto LABEL_122;
  }
  CFMutableSetRef v17 = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
  *(void *)(v8 + 1024) = v17;
  if (!v17) {
    goto LABEL_122;
  }
  CFMutableArrayRef v18 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  *(void *)(v8 + 172_Block_object_dispose((const void *)(v11 - 80), 8) = v18;
  if (!v18) {
    goto LABEL_122;
  }
  CFMutableSetRef v19 = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
  *(void *)(v8 + 16_Block_object_dispose((const void *)(v11 - 80), 8) = v19;
  if (!v19) {
    goto LABEL_122;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings( kCFAllocatorDefault,  @"Preferences SpringBoard Carousel WiFiPickerExtens Setup budd sharingd demod BundledIntentHandler SiriViewService assistantd assistant_service Siri SettingsIntentExtension NanoSettings PineBoard TVSettings SoundBoard RealityControlCenter MuseBuddyApp mobilewifitool WirelessStress coreautomationd wifiutil NanoWiFiViewService ATKWiFiFramework WiFiViewService hQT XCTestInternalAngel HPSetup AirPlaySenderUIApp TVSetup deviceaccessd AccessorySetupUI",  @" ");
  *(void *)(v8 + 176) = ArrayBySeparatingStrings;
  if (!ArrayBySeparatingStrings) {
    goto LABEL_122;
  }
  CFMutableSetRef v21 = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
  *(void *)(v8 + 184) = v21;
  if (!v21) {
    goto LABEL_122;
  }
  *(void *)(v8 + 1464) = +[WiFiLocationManager sharedWiFiLocationManager]( &OBJC_CLASS___WiFiLocationManager,  "sharedWiFiLocationManager");
  *(void *)(v8 + 200) = -[WiFiLocaleManagerUser initWithContext:]( objc_alloc(&OBJC_CLASS___WiFiLocaleManagerUser),  "initWithContext:",  v8);
  *(_BYTE *)(v8 + 1756) = 0;
  uint64_t v22 = sub_100026E7C((uint64_t)kCFAllocatorDefault, v8);
  *(void *)(v8 + 20_Block_object_dispose((const void *)(v11 - 80), 8) = v22;
  if (!v22)
  {
    int v23 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: Disabling WiFiMetricsManager", "WiFiManagerCreate");
    }
    objc_autoreleasePoolPop(v23);
  }

  *(_OWORD *)(v8 + 1776) = 0u;
  uint64_t v24 = +[WiFiCloudAssetsClient sharedInstance](&OBJC_CLASS___WiFiCloudAssetsClient, "sharedInstance");
  *(void *)(v8 + 1392) = v24;
  -[WiFiCloudAssetsClient initializeWithManager:queue:](v24, "initializeWithManager:queue:", v8, a2);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100061B44;
  block[3] = &unk_1001E2620;
  void block[4] = v8;
  dispatch_async((dispatch_queue_t)qword_100219F80, block);
  +[WiFiPerfPerAssoc initWithWiFiManager:queue:](&OBJC_CLASS___WiFiPerfPerAssoc, "initWithWiFiManager:queue:", v8, a2);
  if (!byte_100219FA0)
  {
    id v25 = +[WiFiMaintenanceTaskManager sharedWiFiMaintenanceTaskManager]( &OBJC_CLASS___WiFiMaintenanceTaskManager,  "sharedWiFiMaintenanceTaskManager");
    *(void *)(v8 + 1744) = v25;
    if (v25)
    {
      [v25 setWifiManager:v8];
    }

    else
    {
      uint64_t v26 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: failed to create maintenance task manager",  "WiFiManagerCreate");
      }
      objc_autoreleasePoolPop(v26);
    }
  }

  SCPreferencesRef v27 = SCPreferencesCreate(kCFAllocatorDefault, @"com.apple.wifi.manager", 0LL);
  *(void *)(v8 + 904) = v27;
  if (!v27)
  {
    int v66 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: SCPreferencesCreate preferences.system failed",  "WiFiManagerCreate");
    }
    goto LABEL_89;
  }

  CFIndex v28 = SCPreferencesCreate(kCFAllocatorDefault, @"com.apple.wifi.manager", @"com.apple.wifi.plist");
  *(void *)(v8 + 912) = v28;
  if (!v28)
  {
    int v66 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: SCPreferencesCreate preferences.wifi failed",  "WiFiManagerCreate");
    }
    goto LABEL_89;
  }

  context.versioint n = 0LL;
  memset(&context.retain, 0, 24);
  context.info = (void *)v8;
  if (!SCPreferencesSetCallback(v28, (SCPreferencesCallBack)sub_100061B50, &context))
  {
    int v66 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: SCPreferencesSetCallback preferences.wifi failed",  "WiFiManagerCreate");
    }
LABEL_89:
    objc_autoreleasePoolPop(v66);
    goto LABEL_122;
  }

  double v29 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v29)
  {
    CFTypeID v30 = v29;
    CFDictionarySetValue(v29, @"ProtectionClass", @"C");
    uint64_t v31 = SCPreferencesCreateWithOptions( kCFAllocatorDefault,  @"com.apple.wifi.manager",  @"com.apple.wifi-networks.plist",  0LL,  v30);
    *(void *)(v8 + 920) = v31;
    if (v31)
    {
      uint64_t v32 = SCPreferencesCreateWithOptions( kCFAllocatorDefault,  @"com.apple.wifi.manager",  @"com.apple.wifi-private-mac-networks.plist",  0LL,  v30);
      *(void *)(v8 + 936) = v32;
      if (v32)
      {
        uint64_t v33 = SCPreferencesCreate(kCFAllocatorDefault, @"com.apple.wifi.manager", @"com.apple.radios.plist");
        *(void *)(v8 + 92_Block_object_dispose((const void *)(v11 - 80), 8) = v33;
        if (v33)
        {
          v68.versioint n = 0LL;
          memset(&v68.retain, 0, 24);
          v68.info = (void *)v8;
          if (SCPreferencesSetCallback(v33, (SCPreferencesCallBack)sub_100062AF8, &v68))
          {
            double v34 = objc_alloc(&OBJC_CLASS___CWFKeyValueStore);
            __int128 v35 = -[CWFKeyValueStore initWithType:identifier:]( v34,  "initWithType:identifier:",  4LL,  CWFKnownNetworksStoreIdentifier);
            *(void *)(v8 + 944) = v35;
            if (v35)
            {
              *(void *)(v8 + 952) = [(id)CWFBootArgs() copy];
              dispatch_source_t v36 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, a2);
              *(void *)(v8 + 1192) = v36;
              if (v36)
              {
                dispatch_set_context(v36, (void *)v8);
                dispatch_source_set_event_handler_f( *(dispatch_source_t *)(v8 + 1192),  (dispatch_function_t)sub_1000630EC);
                *(void *)(v8 + 1200) = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
                dispatch_source_t v37 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, a2);
                *(void *)(v8 + 2080) = v37;
                if (v37)
                {
                  dispatch_set_context(v37, (void *)v8);
                  dispatch_source_set_event_handler_f( *(dispatch_source_t *)(v8 + 2080),  (dispatch_function_t)sub_1000634FC);
                  *(_DWORD *)(v8 + 64_Block_object_dispose((const void *)(v11 - 80), 8) = 0;
                  if (byte_100219FA0) {
                    char v38 = 1;
                  }
                  else {
                    char v38 = MKBUserUnlockedSinceBoot(0LL);
                  }
                  *(_BYTE *)(v8 + 1160) = v38;
                  CFDataRef v39 = objc_autoreleasePoolPush();
                  if (qword_100219F60)
                  {
                    if (byte_100219FA0) {
                      int v40 = "Running";
                    }
                    else {
                      int v40 = "Not running";
                    }
                    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: %s in darwinOS mode",  "WiFiManagerCreate",  v40);
                  }

                  objc_autoreleasePoolPop(v39);
                  uint64_t v41 = objc_autoreleasePoolPush();
                  if (qword_100219F60)
                  {
                    if (byte_100219FA1) {
                      uint64_t v42 = "Running";
                    }
                    else {
                      uint64_t v42 = "Not running";
                    }
                    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: %s in Lockdown mode",  "WiFiManagerCreate",  v42);
                  }

                  objc_autoreleasePoolPop(v41);
                  uint64_t v43 = objc_autoreleasePoolPush();
                  if (qword_100219F60)
                  {
                    if (byte_100219FA2) {
                      CFNumberRef v44 = "Running";
                    }
                    else {
                      CFNumberRef v44 = "Not running";
                    }
                    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: %s in store demo mode",  "WiFiManagerCreate",  v44);
                  }

                  objc_autoreleasePoolPop(v43);
                  sub_100061B50(v45, 2LL, v8);
                  sub_100063560(v8);
                  sub_100063998(v8, *(const __CFArray **)(v8 + 232));
                  sub_1000AF13C((uint64_t)kCFAllocatorDefault, (uint64_t)"com.apple.wifi.manager", v8);
                  *(void *)(v8 + 80) = v46;
                  if (v46)
                  {
                    *(void *)(v8 + 960) = qword_1002198E8;
                    *(void *)(v8 + 96_Block_object_dispose((const void *)(v11 - 80), 8) = qword_1002198F0;
                    *(void *)(v8 + 976) = qword_1002198F8;
                    *(void *)(v8 + 984) = qword_100219900;
                    sub_100064280(v8, *(const void **)(v8 + 968), 1);
                    dispatch_source_t v47 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, a2);
                    *(void *)(v8 + 744) = v47;
                    if (v47)
                    {
                      dispatch_set_context(v47, (void *)v8);
                      dispatch_source_set_event_handler_f( *(dispatch_source_t *)(v8 + 744),  (dispatch_function_t)sub_100064380);
                      dispatch_source_t v48 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, a2);
                      *(void *)(v8 + 784) = v48;
                      if (v48)
                      {
                        dispatch_set_context(v48, (void *)v8);
                        dispatch_source_set_event_handler_f( *(dispatch_source_t *)(v8 + 784),  (dispatch_function_t)sub_1000644C4);
                        *(void *)(v8 + 1656) = 0LL;
                        dispatch_source_t v49 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, a2);
                        *(void *)(v8 + 1640) = v49;
                        if (v49)
                        {
                          dispatch_set_context(v49, (void *)v8);
                          dispatch_source_set_event_handler_f( *(dispatch_source_t *)(v8 + 1640),  (dispatch_function_t)sub_1000645C4);
                          *(void *)(v8 + 68_Block_object_dispose((const void *)(v11 - 80), 8) = MKBGetDeviceLockState(0LL) == 1;
                          dispatch_source_t v50 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  a2);
                          *(void *)(v8 + 116_Block_object_dispose((const void *)(v11 - 80), 8) = v50;
                          if (v50)
                          {
                            dispatch_set_context(v50, (void *)v8);
                            dispatch_source_set_event_handler_f( *(dispatch_source_t *)(v8 + 1168),  (dispatch_function_t)nullsub_4);
                            CFDictionaryRef v51 = *(dispatch_source_s **)(v8 + 1168);
                            dispatch_time_t v52 = dispatch_time(0LL, 60000000000LL);
                            dispatch_source_set_timer(v51, v52, 0xFFFFFFFFFFFFFFFFLL, 0LL);
                            *(void *)(v8 + 1232) = 0LL;
                            *(_BYTE *)(v8 + 1161) = 0;
                            dispatch_source_t v53 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  a2);
                            *(void *)(v8 + 1264) = v53;
                            if (v53)
                            {
                              dispatch_set_context(v53, (void *)v8);
                              dispatch_source_set_event_handler_f( *(dispatch_source_t *)(v8 + 1264),  (dispatch_function_t)sub_100064688);
                              double v54 = *(dispatch_source_s **)(v8 + 1264);
                              dispatch_time_t v55 = dispatch_time(0LL, 5000000000LL);
                              dispatch_source_set_timer(v54, v55, 0x12A05F200uLL, 0LL);
                              dispatch_source_t v56 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  a2);
                              *(void *)(v8 + 1304) = v56;
                              if (v56)
                              {
                                dispatch_set_context(v56, (void *)v8);
                                dispatch_source_set_event_handler_f( *(dispatch_source_t *)(v8 + 1304),  (dispatch_function_t)sub_100065100);
                                dispatch_source_t v57 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  a2);
                                *(void *)(v8 + 1344) = v57;
                                if (v57)
                                {
                                  dispatch_set_context(v57, (void *)v8);
                                  dispatch_source_set_event_handler_f( *(dispatch_source_t *)(v8 + 1344),  (dispatch_function_t)sub_100065188);
                                  *(_DWORD *)(v8 + 1320) = 100;
                                  *(void *)(v8 + 1456) = CFArrayCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeArrayCallBacks);
                                  qword_100219908 = v8;
                                  BOOL v58 = sub_100031C7C();
                                  int v59 = sub_1000653FC(v8);
                                  if (!v58 || v59)
                                  {
                                    if (!v59) {
                                      sub_100066124(v8, "WiFiManagerCreate", 3994LL);
                                    }
                                  }

                                  else
                                  {
                                    int v60 = *(unsigned __int8 *)(v8 + 1160);
                                    unsigned int v61 = objc_autoreleasePoolPush();
                                    if (v60)
                                    {
                                      if (qword_100219F60) {
                                        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s reseting user auto join due to restart",  "WiFiManagerCreate");
                                      }
                                      objc_autoreleasePoolPop(v61);
                                      sub_10006570C(v8, 1LL, 3LL, 0LL);
                                    }

                                    else
                                    {
                                      if (qword_100219F60) {
                                        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s user auto join needs reset",  "WiFiManagerCreate");
                                      }
                                      objc_autoreleasePoolPop(v61);
                                      *(_BYTE *)(v8 + 1982) = 1;
                                    }
                                  }

                                  *(_WORD *)(v8 + 1832) = 257;
                                  *(CFAbsoluteTime *)(v8 + 1840) = CFAbsoluteTimeGetCurrent();
                                  *(_BYTE *)(v8 + 184_Block_object_dispose((const void *)(v11 - 80), 8) = 0;
                                  *(_BYTE *)(v8 + 1849) = *(_DWORD *)(v8 + 112) == 7;
                                  *(_WORD *)(v8 + 1920) = 0;
                                  *(_WORD *)(v8 + 1946) = 1;
                                  *(_BYTE *)(v8 + 194_Block_object_dispose((const void *)(v11 - 80), 8) = 0;
                                  *(void *)(v8 + 1896) = 0x40AC200000000000LL;
                                  CFMutableDictionaryRef v62 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
                                  *(void *)(v8 + 1872) = v62;
                                  if (v62)
                                  {
                                    *(void *)(v8 + 1880) = 0LL;
                                    *(_BYTE *)(v8 + 1960) = 0;
                                    *(void *)(v8 + 196_Block_object_dispose((const void *)(v11 - 80), 8) = 0LL;
                                    *(_BYTE *)(v8 + 2004) = 0;
                                    *(void *)(v8 + 200_Block_object_dispose((const void *)(v11 - 80), 8) = 0LL;
                                    *(_WORD *)(v8 + 2016) = 0;
                                    *(_BYTE *)(v8 + 2137) = 0;
                                    *(_BYTE *)(v8 + 1064) = 1;
                                    *(void *)(v8 + 2144) = +[WiFiUsageMonitor sharedInstance]( &OBJC_CLASS___WiFiUsageMonitor,  "sharedInstance");
                                    sub_100090AC0((void *)(v8 + 1568), (dispatch_queue_s *)qword_100219F80);
                                    *(_BYTE *)(v8 + 2176) = 1;
                                    *(void *)(v8 + 2200) = CFArrayCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeArrayCallBacks);
                                    *(_WORD *)(v8 + 2224) = 0;
                                    CFRelease(v30);

                                    unsigned int v63 = objc_autoreleasePoolPush();
                                    if (qword_100219F60) {
                                      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: exiting",  "WiFiManagerCreate");
                                    }
                                    uint64_t v64 = @"%s: exiting";
                                    goto LABEL_82;
                                  }

                                  goto LABEL_121;
                                }

                                char v67 = objc_autoreleasePoolPush();
                                if (qword_100219F60) {
                                  objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: failed to create autojoinAssist timer",  "WiFiManagerCreate");
                                }
                              }

                              else
                              {
                                char v67 = objc_autoreleasePoolPush();
                                if (qword_100219F60) {
                                  objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: failed to create CarPlay timer",  "WiFiManagerCreate");
                                }
                              }
                            }

                            else
                            {
                              char v67 = objc_autoreleasePoolPush();
                              if (qword_100219F60) {
                                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: failed to create heartBeatTimer",  "WiFiManagerCreate");
                              }
                            }
                          }

                          else
                          {
                            char v67 = objc_autoreleasePoolPush();
                            if (qword_100219F60) {
                              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: failed to create metricDelayedSubmissionTimer",  "WiFiManagerCreate");
                            }
                          }
                        }

                        else
                        {
                          char v67 = objc_autoreleasePoolPush();
                          if (qword_100219F60) {
                            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: failed to create diagnostics timer",  "WiFiManagerCreate");
                          }
                        }
                      }

                      else
                      {
                        char v67 = objc_autoreleasePoolPush();
                        if (qword_100219F60) {
                          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: failed to create sideKick timer",  "WiFiManagerCreate");
                        }
                      }
                    }

                    else
                    {
                      char v67 = objc_autoreleasePoolPush();
                      if (qword_100219F60) {
                        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: failed to create disassociation timer",  "WiFiManagerCreate");
                      }
                    }
                  }

                  else
                  {
                    char v67 = objc_autoreleasePoolPush();
                    if (qword_100219F60) {
                      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: WiFiServerCreate failed",  "WiFiManagerCreate");
                    }
                  }
                }

                else
                {
                  char v67 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: failed to create carPlayLinkDownSuppressionMetrics.timer",  "WiFiManagerCreate");
                  }
                }
              }

              else
              {
                char v67 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: failed to create networkExpiry.timer",  "WiFiManagerCreate");
                }
              }
            }

            else
            {
              char v67 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: CWFKeyValueStore alloc failed",  "WiFiManagerCreate");
              }
            }
          }

          else
          {
            char v67 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: SCPreferencesSetCallback preferences.radios failed",  "WiFiManagerCreate");
            }
          }
        }

        else
        {
          char v67 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: SCPreferencesCreate preferences.radios failed",  "WiFiManagerCreate");
          }
        }
      }

      else
      {
        char v67 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: SCPreferencesCreateWithOptions preferences.wifiPrivateMacNetworks failed",  "WiFiManagerCreate");
        }
      }
    }

    else
    {
      char v67 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: SCPreferencesCreateWithOptions preferences.wifiNetworks failed",  "WiFiManagerCreate");
      }
    }

    objc_autoreleasePoolPop(v67);
LABEL_121:
    CFRelease(v30);
  }

id sub_100061B44(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1392) runAssetQuery];
}

void sub_100061B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    __int128 v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: notification %d",  "__WiFiManagerPreferencesCallback",  a2);
    }
    objc_autoreleasePoolPop(v5);
    if ((a2 & 2) != 0)
    {
      sub_10003A25C(*(const __SCPreferences **)(a3 + 912));
      __int128 v6 = (void *)sub_10003AFF4((uint64_t)"__WiFiManagerPreferencesCallback");
      if (sub_10006AA50((void *)a3, @"DeviceUUID") || (uint64_t v8 = CFUUIDCreate(kCFAllocatorDefault)) == 0LL)
      {
        int v7 = 0;
      }

      else
      {
        id v9 = v8;
        CFStringRef v10 = CFUUIDCreateString(kCFAllocatorDefault, v8);
        if (v10)
        {
          CFStringRef v11 = v10;
          int v7 = 1;
          sub_10006D08C((void *)a3, @"DeviceUUID", v10, 1);
          CFRelease(v11);
        }

        else
        {
          int v7 = 0;
        }

        CFRelease(v9);
      }

      sub_10008D4D4((void *)a3, 1);
      *(_BYTE *)(a3 + 304) = sub_10007F0C8((void *)a3, @"AllowDisassociation", 1);
      *(_BYTE *)(a3 + 321) = sub_10007F0C8((void *)a3, @"alwaysScan", 0);
      *(_DWORD *)(a3 + 612) = sub_10007CBB0((void *)a3, @"WakeMode", 1LL);
      BOOL v12 = sub_10007F0C8((void *)a3, @"lpasEnable", 1);
      *(_BYTE *)(a3 + 320) = -1;
      CFMutableSetRef v13 = sub_10006AA50((void *)a3, @"WAPIEnabled");
      int v81 = v13
         && (CFMutableSetRef v14 = v13, TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(v14))
         && CFEqual(v14, kCFBooleanTrue) != 0;
      if (!sub_10006AA50((void *)a3, @"DiagnosticsEnabled"))
      {
        int v16 = sub_10005DCE0();
        CFMutableSetRef v17 = (const void **)&kCFBooleanFalse;
        if (v16) {
          CFMutableSetRef v17 = (const void **)&kCFBooleanTrue;
        }
        sub_10006D08C((void *)a3, @"DiagnosticsEnabled", *v17, 1);
      }

      BOOL v18 = sub_10007F0C8((void *)a3, @"EnableRangingLogDump", 0);
      BOOL v19 = sub_10008D634((void *)a3);
      BOOL v20 = sub_1000609F0();
      int v21 = !v20;
      uint64_t v22 = sub_10006AA50((void *)a3, kSCPropNetAirPortJoinMode);
      int v23 = (const void **)&kSCValNetAirPortJoinModeAutomatic;
      int v89 = v12;
      BOOL v78 = v19;
      if (v22)
      {
        uint64_t v24 = v22;
        if (CFEqual(kSCValNetAirPortJoinModeAutomatic, v22))
        {
          int v21 = 0;
        }

        else if (CFEqual(kSCValNetAirPortJoinModePreferred, v24))
        {
          int v21 = 1;
        }

        else if (CFEqual(kSCValNetAirPortJoinModeRecent, v24))
        {
          int v21 = 2;
        }

        else if (CFEqual(kSCValNetAirPortJoinModeStrongest, v24))
        {
          int v21 = 3;
        }

        else if (CFEqual(kSCValNetAirPortJoinModeRanked, v24))
        {
          int v21 = 4;
        }

        int v25 = v7;
      }

      else
      {
        if (!v20) {
          int v23 = (const void **)&kSCValNetAirPortJoinModePreferred;
        }
        int v25 = 1;
        sub_10006D08C((void *)a3, kSCPropNetAirPortJoinMode, *v23, 1);
      }

      int v68 = v25 | v7;
      unsigned int v26 = sub_10007CBB0((void *)a3, @"Fallback Preference", 2LL);
      double v27 = sub_10006A880((void *)a3, @"DisassociationInterval", 1800.0);
      CFDictionaryRef v28 = sub_10007AF34((void *)a3, 1);
      BOOL v69 = sub_10007F0C8((void *)a3, @"mStageAutoJoin", 1);
      BOOL v72 = sub_10007F0C8((void *)a3, @"DisableBlackList", byte_100219FA0 != 0);
      BOOL v71 = sub_10007F0C8((void *)a3, @"isWiFiPowerModificationDisabled", 0);
      BOOL v70 = sub_10007F0C8((void *)a3, @"isPersonalHotspotModificationDisabled", 0);
      BOOL v61 = sub_10007F0C8((void *)a3, @"ATJTestModeEnabled", 0);
      BOOL v77 = sub_10007F0C8((void *)a3, @"OverrideWiFiFallBackPrefMode", 0);
      int v76 = sub_10007CBB0((void *)a3, @"LinkQualityAssessmentMode", 1LL);
      BOOL v74 = sub_10007F0C8((void *)a3, @"TrgDiscAskIfAppropriateDisconnect", 1);
      BOOL v73 = sub_10007F0C8((void *)a3, @"EnableAggressiveTrgDisc", 1);
      double v29 = sub_10006AA50((void *)a3, @"List of policies");
      BOOL v66 = sub_10007F0C8((void *)a3, @"optimizedAutoJoin", 1);
      BOOL v65 = sub_10007F0C8((void *)a3, @"Enable5GhzAutoJoinScan", 0);
      uint64_t v64 = sub_10006AA50((void *)a3, @"deviceUpdatedDate");
      BOOLeaint n = sub_10006AA50((void *)a3, @"IsOrphanedSCCleanUpRequired");
      CFTypeID v30 = sub_10006AA50((void *)a3, @"isWiFiPNLMigrationComplete");
      BOOL v31 = sub_10007F0C8((void *)a3, @"ConnectionQualityLocalCollectionEnabled", 0);
      uint64_t v32 = sub_10006AA50((void *)a3, @"JoinRecommendationMode");
      BOOL v91 = v18;
      CFTypeRef cf1 = v28;
      BOOL v88 = v31;
      int v86 = v21;
      uint64_t v83 = v30;
      unsigned int v80 = v26;
      if (v32 && (uint64_t v33 = v32, !CFEqual(@"None", v32)))
      {
        if (CFEqual(@"Captive", v33))
        {
          int v34 = 2;
        }

        else if (CFEqual(@"Quality", v33))
        {
          int v34 = 1;
        }

        else if (CFEqual(@"Public", v33))
        {
          int v34 = 252;
        }

        else if (CFEqual(@"NewLocation", v33))
        {
          int v34 = 253;
        }

        else if (CFEqual(@"InfrequentNetwork", v33))
        {
          int v34 = 254;
        }

        else if (CFEqual(@"All", v33))
        {
          int v34 = 255;
        }

        else
        {
          int v34 = 0;
        }

        unsigned int v62 = v34;
      }

      else
      {
        unsigned int v62 = 0;
      }

      char v67 = sub_10006AA50((void *)a3, @"JoinRecommendationDisabledUntil");
      BOOL v84 = sub_10007F0C8((void *)a3, @"ConnectionQualityPrivacyRestrictionsDisabled", 0);
      sub_10007F0C8((void *)a3, @"WiFiMacRandomizationInternalUI", 1);
      sub_10007F0C8((void *)a3, @"enableForceCarPlayMACRandomization", 0);
      __int128 v35 = sub_10006AA50((void *)a3, @"ATJTestNetworkSSID");
      unsigned int v36 = sub_10007CBB0((void *)a3, @"ATJPreference", 1LL);
      uint64_t v37 = sub_10007CBB0((void *)a3, @"Compatibility", 0LL);
      BOOL v82 = sub_10007F0C8((void *)a3, @"AvailabilityEngineV2Enabled", 0);
      sub_1000824A4(a3);
      double v38 = sub_10006A880((void *)a3, @"AutoInstantHotspotTriggerInterval", 120.0);
      unsigned int v63 = sub_10007CBB0((void *)a3, @"UserPreferenceJoinAlertMode", 0LL);
      uint64_t v39 = sub_10007CBB0((void *)a3, @"JoinAlertDistanceThreshold", 7776000LL);
      double v40 = sub_10006A880((void *)a3, @"JoinAlertDistanceThreshold", 30000.0);
      unsigned int v41 = sub_10007F0C8((void *)a3, @"DebugCoreCaptureEnabled", 1);
      unsigned int v85 = sub_10007F0C8((void *)a3, @"CoreCaptureOnAssistedAJFailure", 0);
      cuint64_t f = sub_100082D40((void *)a3, 1);
      uint64_t v42 = sub_10006AA50((void *)a3, @"SessionBasedNetworkList");
      uint64_t v43 = v42;
      if (v42)
      {
        CFTypeID v44 = CFGetTypeID(v42);
        if (v44 == CFDictionaryGetTypeID())
        {
          CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, v43);
LABEL_59:
          uint64_t v43 = Copy;
          goto LABEL_60;
        }

        CFTypeID v46 = CFGetTypeID(v43);
        if (v46 == CFSetGetTypeID())
        {
          CFDictionaryRef Copy = CFSetCreateCopy(kCFAllocatorDefault, v43);
          goto LABEL_59;
        }

        CFTypeID v47 = CFGetTypeID(v43);
        if (v47 == CFArrayGetTypeID())
        {
          CFDictionaryRef Copy = CFArrayCreateCopy(kCFAllocatorDefault, v43);
          goto LABEL_59;
        }

        uint64_t v43 = 0LL;
      }

LABEL_94:
        if (v83)
        {
          if (CFBooleanGetValue(v83))
          {
            if (!*(_BYTE *)(a3 + 1755))
            {
              dispatch_source_t v56 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Unschedule",  "__WiFiManagerCheckPNLMigrationScheduling");
              }
              objc_autoreleasePoolPop(v56);
              *(_WORD *)(a3 + 1754) = 256;
              [*(id *)(a3 + 1744) unSchedulePNLMigration];
            }

            goto LABEL_107;
          }

          int v57 = *(unsigned __int8 *)(a3 + 1754);
          BOOL v58 = objc_autoreleasePoolPush();
          if (!v57)
          {
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Schedule",  "__WiFiManagerCheckPNLMigrationScheduling");
            }
            objc_autoreleasePoolPop(v58);
            *(_WORD *)(a3 + 1754) = 1;
            [*(id *)(a3 + 1744) schedulePNLMigration];
            goto LABEL_107;
          }

          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Already Scheduled",  "__WiFiManagerCheckPNLMigrationScheduling");
          }
        }

        else
        {
          BOOL v58 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null isWiFiPNLMigrationNeededRef",  "__WiFiManagerCheckPNLMigrationScheduling");
          }
        }

        objc_autoreleasePoolPop(v58);
LABEL_107:
        sub_1000815C0(a3, v88);
        sub_100081B54(a3, v84);
        sub_10007E254(a3, v82);
        LODWORD(v97[0]) = 0;
        uint64_t context = a3;
        unint64_t context_8 = 0xAAAAAAAA0000005BLL;
        unint64_t v94 = (unint64_t)v97;
        uint64_t v95 = 1LL;
        CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
        *(double *)uint64_t v97 = v38;
        uint64_t context = a3;
        unint64_t context_8 = 0xAAAAAAAA0000005DLL;
        unint64_t v94 = (unint64_t)v97;
        uint64_t v95 = 1LL;
        CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
        LOBYTE(v97[0]) = v41;
        if (*(unsigned __int8 *)(a3 + 1946) != v41)
        {
          int v59 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Debug CoreCapture %d",  "__WiFiManagerSetDebugCoreCapture",  v41);
          }
          objc_autoreleasePoolPop(v59);
          *(_BYTE *)(a3 + 1946) = v41;
          uint64_t context = a3;
          unint64_t context_8 = 0xAAAAAAAA00000067LL;
          unint64_t v94 = (unint64_t)v97;
          uint64_t v95 = 1LL;
          CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
        }

        LOBYTE(v97[0]) = v85;
        if (*(unsigned __int8 *)(a3 + 1947) != v85)
        {
          int v60 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: CoreCapture On Assisted AJ Failure %d",  "__WiFiManagerSetCoreCaptureOnAssistedAJFailure",  v85);
          }
          objc_autoreleasePoolPop(v60);
          *(_BYTE *)(a3 + 1947) = v85;
          uint64_t context = a3;
          unint64_t context_8 = 0xAAAAAAAA00000072LL;
          unint64_t v94 = (unint64_t)v97;
          uint64_t v95 = 1LL;
          CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
        }

        sub_100080AFC(a3, cf);
        sub_1000806E0(a3, v43);
        if (v43) {
          CFRelease(v43);
        }
        LOBYTE(v97[0]) = v79;
        uint64_t context = a3;
        unint64_t context_8 = 0xAAAAAAAA00000077LL;
        unint64_t v94 = (unint64_t)v97;
        uint64_t v95 = 1LL;
        CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
        LOBYTE(v97[0]) = v91;
        uint64_t context = a3;
        unint64_t context_8 = 0xAAAAAAAA0000007CLL;
        unint64_t v94 = (unint64_t)v97;
        uint64_t v95 = 1LL;
        CFSetApplyFunction(*(CFSetRef *)(a3 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
        sub_1000842DC();
        if (cf1) {
          CFRelease(cf1);
        }
        if (cf) {
          CFRelease(cf);
        }
        return;
      }

      double v54 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null isOrphanedSCCleanUpRequiredRef",  "__WiFiManagerCheckSCCleanUpScheduling");
      }
      goto LABEL_86;
    }
  }

      objc_autoreleasePoolPop(v45);
LABEL_99:
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver( DarwinNotifyCenter,  (const void *)a1,  (CFNotificationCallback)sub_1000CFBB0,  @"com.apple.siri.connection.timeout",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
      double v54 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver( v54,  (const void *)a1,  (CFNotificationCallback)sub_1000CFC9C,  @"com.apple.apsd.connection-failure-notification",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
      dispatch_time_t v55 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver( v55,  (const void *)a1,  (CFNotificationCallback)sub_1000CFD88,  @"com.apple.airplay.connection.stalled",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
      dispatch_source_t v56 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver( v56,  (const void *)a1,  (CFNotificationCallback)sub_1000CFE74,  @"com.apple.airplay.bufferedaudiounderrun",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
      int v57 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver( v57,  (const void *)a1,  (CFNotificationCallback)sub_1000CFF60,  @"com.apple.airplay.realTimeAudioUnderrun",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
      __int128 v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: exiting", "WiFiDeviceManagerScheduleWithQueue");
      }
      goto LABEL_101;
    }

    uint64_t v45 = objc_autoreleasePoolPush();
    CFTypeID v46 = qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_94;
    }
    BOOL v58 = __error();
    int v59 = strerror(*v58);
    dispatch_source_t v48 = "%s: null socket (%s).";
    goto LABEL_92;
  }

  __int128 v6 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: exiting, Error: no queue",  "WiFiDeviceManagerScheduleWithQueue");
  }
LABEL_101:
  objc_autoreleasePoolPop(v6);
  objc_autoreleasePoolPop(v4);
}

void sub_100062AF8(const __SCPreferences *a1, char a2, uint64_t a3)
{
  if ((a2 & 2) == 0 || !a3) {
    return;
  }
  if (*(_BYTE *)(a3 + 1945))
  {
    __int128 v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WiFi Power Modification disabled",  "__WiFiManagerRadioPreferencesCallback");
    }
    objc_autoreleasePoolPop(v4);
    return;
  }

  SCPreferencesSynchronize(a1);
  CFPreferencesAppSynchronize(@"com.apple.preferences.network");
  CFBooleanRef Value = (const __CFBoolean *)SCPreferencesGetValue(a1, @"AirplaneMode");
  if (Value) {
    int v7 = Value;
  }
  else {
    int v7 = kCFBooleanFalse;
  }
  uint64_t v8 = (const __CFBoolean *)CFPreferencesCopyAppValue( @"AirplaneModeEnabled",  @"com.apple.preferences.network");
  if (v8) {
    CFBooleanRef v9 = v8;
  }
  else {
    CFBooleanRef v9 = kCFBooleanFalse;
  }
  CFStringRef v10 = (const __CFBoolean *)SCPreferencesGetValue(a1, @"LowPowerMode");
  if (v10) {
    CFStringRef v11 = v10;
  }
  else {
    CFStringRef v11 = kCFBooleanFalse;
  }
  BOOL v12 = (const __CFBoolean *)CFPreferencesCopyAppValue(@"LowPowerMode", @"com.apple.preferences.network");
  if (v12) {
    CFBooleanRef v13 = v12;
  }
  else {
    CFBooleanRef v13 = kCFBooleanFalse;
  }
  if (!CFEqual(v7, v9))
  {
    CFMutableSetRef v14 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      if (v7 == kCFBooleanTrue) {
        CFMutableSetRef v15 = "Enabled";
      }
      else {
        CFMutableSetRef v15 = "Disabled";
      }
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "Airplane mode %s", v15);
    }

    objc_autoreleasePoolPop(v14);
    CFPreferencesSetAppValue(@"AirplaneModeEnabled", v7, @"com.apple.preferences.network");
    int v16 = *(void **)(a3 + 2144);
    uint64_t v17 = *(void *)(a3 + 1120);
    CFPropertyListRef v18 = CFPreferencesCopyAppValue(@"AirplaneModeEnabled", @"com.apple.preferences.network");
    if (v18)
    {
      BOOL v19 = v18;
      CFTypeID v20 = CFGetTypeID(v18);
      if (v20 == CFBooleanGetTypeID()) {
        int v21 = CFEqual(v19, kCFBooleanTrue);
      }
      else {
        int v21 = 0;
      }
      CFRelease(v19);
    }

    else
    {
      int v21 = 0;
    }

    [v16 setCellularDataStatus:v17 inAirplaneMode:v21 != 0];
    if (CFEqual(v11, v13))
    {
LABEL_40:
      BOOL v24 = sub_10007F0C8((void *)a3, @"KeepWiFiPoweredAirplaneMode", 0);
      uint64_t v25 = *(unsigned int *)(a3 + 324);
      if (v7 != kCFBooleanTrue && v11 != kCFBooleanTrue)
      {
        uint64_t valuePtr = 0LL;
        unsigned int v26 = (const __CFDictionary *)CFPreferencesCopyAppValue( @"original-network-state",  @"com.apple.preferences.network");
        double v27 = v26;
        if (v26 && (CFDictionaryRef v28 = (const __CFNumber *)CFDictionaryGetValue(v26, @"wifi-network")) != 0LL)
        {
          CFNumberGetValue(v28, kCFNumberCFIndexType, &valuePtr);
        }

        else
        {
          __int128 v35 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: original radio setting state missing. Assuming enabled.",  "__WiFiManagerRadioPreferencesCallback");
          }
          objc_autoreleasePoolPop(v35);
          uint64_t valuePtr = 1LL;
        }

        unsigned int v36 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: airplane mode stickiness is disabled",  "__WiFiManagerRadioPreferencesCallback");
        }
        objc_autoreleasePoolPop(v36);
        if (valuePtr != v25)
        {
          uint64_t v37 = objc_autoreleasePoolPush();
          double v38 = (void *)qword_100219F60;
          if (qword_100219F60)
          {
            uint64_t v39 = sub_10003AE44(valuePtr);
            objc_msgSend( v38,  "WFLog:message:",  3,  "WiFi previous state: %s current state: %s",  v39,  sub_10003AE44(v25));
          }

          objc_autoreleasePoolPop(v37);
          if (valuePtr == 4 && !(_DWORD)v25
            || ((_DWORD)v25 != 4 ? (BOOL v40 = (_DWORD)v25 == 0) : (BOOL v40 = 1),
                !v40 ? (int v41 = 0) : (int v41 = 1),
                valuePtr == 1 && v41))
          {
            sub_10006EF98(a3, valuePtr == 1, 0LL);
          }
        }

        sub_10006570C(a3, 1LL, 8LL, 0LL);
        CFPreferencesSetAppValue(@"original-network-state", 0LL, @"com.apple.preferences.network");
        CFPreferencesAppSynchronize(@"com.apple.preferences.network");
        if (v27) {
          CFRelease(v27);
        }
        goto LABEL_78;
      }

      double v29 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "WiFi current state: %s", sub_10003AE44(v25));
      }
      objc_autoreleasePoolPop(v29);
      CFTypeID v30 = (__CFDictionary *)CFPreferencesCopyAppValue( @"original-network-state",  @"com.apple.preferences.network");
      if (!v30)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        if (!Mutable)
        {
          CFPreferencesAppSynchronize(@"com.apple.preferences.network");
          if (v24) {
            goto LABEL_53;
          }
          goto LABEL_56;
        }

        CFTypeID v30 = Mutable;
        uint64_t valuePtr = v25;
        CFNumberRef v32 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
        if (v32)
        {
          CFNumberRef v33 = v32;
          CFDictionarySetValue(v30, @"wifi-network", v32);
          CFPreferencesSetAppValue(@"original-network-state", v30, @"com.apple.preferences.network");
          CFRelease(v33);
        }

        CFPreferencesAppSynchronize(@"com.apple.preferences.network");
      }

      CFRelease(v30);
      if (v24)
      {
LABEL_53:
        int v34 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: User preference is to leave WiFi powered, but power stickiness is disabled.",  "__WiFiManagerRadioPreferencesCallback");
        }
        objc_autoreleasePoolPop(v34);
      }

void sub_1000630EC(uint64_t a1)
{
  if (!a1)
  {
    CFDictionaryRef v28 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null manager", "__WiFiManagerCheckNetworkExpiry");
    }
    goto LABEL_47;
  }

  __int128 v2 = *(const __CFArray **)(a1 + 224);
  if (!v2)
  {
    CFDictionaryRef v28 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null networks", "__WiFiManagerCheckNetworkExpiry");
    }
LABEL_47:
    objc_autoreleasePoolPop(v28);
    return;
  }

  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 224));
  __int128 v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: network count %d",  "__WiFiManagerCheckNetworkExpiry",  Count);
  }
  objc_autoreleasePoolPop(v4);
  if ((int)Count < 1)
  {
    double v6 = 0.0;
  }

  else
  {
    CFIndex v5 = 0LL;
    double v6 = 0.0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, v5);
      if (ValueAtIndex)
      {
        uint64_t v8 = ValueAtIndex;
        if (sub_100098850((uint64_t)ValueAtIndex))
        {
          sub_1000986D4((uint64_t)v8);
          double v10 = v9;
          CFStringRef v11 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: network %@, Texpire %f", "__WiFiManagerCheckNetworkExpiry", sub_100095BC8(v8), *(void *)&v10 message];
          }
          objc_autoreleasePoolPop(v11);
          if ((int)v10 <= 0)
          {
            CFBooleanRef v13 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "Network %@ has expired. Removing it from known networks list", sub_100095BC8(v8) message];
            }
            objc_autoreleasePoolPop(v13);
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 1200), v8);
          }

          else if (v10 < v6 || v6 == 0.0)
          {
            double v6 = v10;
          }
        }
      }

      ++v5;
    }

    while (Count != v5);
  }

  double v14 = vabdd_f64(*(double *)(a1 + 1208) - CFAbsoluteTimeGetCurrent(), v6);
  CFMutableSetRef v15 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: minTexpire %f, deltaTexpire %f",  "__WiFiManagerCheckNetworkExpiry",  *(void *)&v6,  *(void *)&v14);
  }
  objc_autoreleasePoolPop(v15);
  if (v6 == 0.0 || v14 <= 60.0)
  {
    if (!(int)v6 && *(double *)(a1 + 1176) != 0.0)
    {
      *(void *)(a1 + 1176) = 0LL;
      *(void *)(a1 + 1184) = 0LL;
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 1192), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterRemoveObserver(DarwinNotifyCenter, 0LL, @"SignificantTimeChangeNotification", 0LL);
    }

    StringWithdouble AbsoluteTime = 0LL;
  }

  else
  {
    double v16 = v6 + CFAbsoluteTimeGetCurrent();
    StringWithdouble AbsoluteTime = CFDateFormatterCreateStringWithAbsoluteTime(0LL, (CFDateFormatterRef)qword_100219F98, v16);
    CFPropertyListRef v18 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: starting expiry timer:: set next fire date %@", "__WiFiManagerCheckNetworkExpiry", StringWithAbsoluteTime message];
    }
    objc_autoreleasePoolPop(v18);
    BOOL v19 = *(dispatch_source_s **)(a1 + 1192);
    dispatch_time_t v20 = dispatch_time(0LL, (uint64_t)(v6 * 1000000000.0));
    dispatch_source_set_timer(v19, v20, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    *(double *)(a1 + 120_Block_object_dispose((const void *)(v11 - 80), 8) = v16;
    *(double *)(a1 + 1176) = v6;
    int v21 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver( v21,  (const void *)a1,  (CFNotificationCallback)nullsub_7,  @"SignificantTimeChangeNotification",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
  }

  int v23 = *(const __CFArray **)(a1 + 1200);
  if (v23)
  {
    int v24 = CFArrayGetCount(v23);
    if (v24 >= 1)
    {
      CFIndex v25 = 0LL;
      uint64_t v26 = v24;
      do
      {
        double v27 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1200), v25);
        sub_100076340(a1, v27, 27LL);
        sub_100099D38(v27);
        ++v25;
      }

      while (v26 != v25);
    }

    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1200));
  }

  if (StringWithAbsoluteTime) {
    CFRelease(StringWithAbsoluteTime);
  }
}

void sub_1000634FC(uint64_t a1)
{
  __int128 v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: timed out",  "__WiFiManagerCarPlaySessionDownWaitTimerCallback");
  }
  objc_autoreleasePoolPop(v2);
  sub_10008C174(a1);
}

uint64_t sub_100063560(uint64_t a1)
{
  v18[0] = 0LL;
  v18[1] = v18;
  v18[2] = 0x3052000000LL;
  v18[3] = sub_1000819C4;
  v18[4] = sub_1000819D4;
  v18[5] = 0LL;
  __int128 v2 = objc_autoreleasePoolPush();
  if (!a1)
  {
    __int128 v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: manager is NULL",  "WiFiManagerGetKnownNetworksCache");
    }
    goto LABEL_18;
  }

  if (!*(_BYTE *)(a1 + 1160))
  {
    __int128 v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: device not yet unlocked. Not fetching network list.",  "WiFiManagerGetKnownNetworksCache");
    }
    goto LABEL_18;
  }

  __int128 v3 = *(const __CFArray **)(a1 + 232);
  if (v3 && CFArrayGetCount(v3))
  {
    __int128 v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Fetched %ld known networks from the cache",  "WiFiManagerGetKnownNetworksCache",  CFArrayGetCount(*(CFArrayRef *)(a1 + 232)));
    }
LABEL_18:
    objc_autoreleasePoolPop(v4);
    goto LABEL_41;
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000819E0;
  block[3] = &unk_1001E42A0;
  void block[4] = v18;
  if (qword_100219920 != -1) {
    dispatch_once(&qword_100219920, block);
  }
  if (sub_100071F94((void *)a1))
  {
    CFIndex v5 = *(const void **)(a1 + 232);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 232) = 0LL;
    }

    double v6 = sub_1000797AC([*(id *)(a1 + 944) dictionaryRepresentation]);
    *(void *)(a1 + 232) = v6;
    if (v6 && CFArrayGetCount(v6) >= 1)
    {
      int v7 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: unified KVS returned %d networks",  "WiFiManagerGetKnownNetworksCache",  CFArrayGetCount(*(CFArrayRef *)(a1 + 232)));
      }
    }

    else
    {
      int v7 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        if (*(void *)(a1 + 232)) {
          uint64_t v8 = "empty list";
        }
        else {
          uint64_t v8 = "nil";
        }
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: unified KVS returned %s",  "WiFiManagerGetKnownNetworksCache",  v8);
      }
    }
  }

  else
  {
    SCPreferencesSynchronize(*(SCPreferencesRef *)(a1 + 920));
    double v9 = sub_10006AA50((void *)a1, @"List of known networks");
    double v10 = *(const void **)(a1 + 232);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 232) = 0LL;
    }

    CFStringRef v11 = sub_10003A530(v9);
    *(void *)(a1 + 232) = v11;
    if (v11 && CFArrayGetCount(v11) >= 1)
    {
      int v7 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: legacy KVS returned %d networks",  "WiFiManagerGetKnownNetworksCache",  CFArrayGetCount(*(CFArrayRef *)(a1 + 232)));
      }
    }

    else
    {
      int v7 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        if (*(void *)(a1 + 232)) {
          BOOL v12 = "empty list";
        }
        else {
          BOOL v12 = "nil";
        }
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: legacy KVS returned %s",  "WiFiManagerGetKnownNetworksCache",  v12);
      }
    }
  }

  objc_autoreleasePoolPop(v7);
  if (*(void *)(a1 + 232))
  {
    *(CFAbsoluteTime *)(a1 + 240) = CFAbsoluteTimeGetCurrent();
    CFBooleanRef v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Fetched %ld known networks from the plist",  "WiFiManagerGetKnownNetworksCache",  CFArrayGetCount(*(CFArrayRef *)(a1 + 232)));
    }
    objc_autoreleasePoolPop(v13);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100081A14;
    v16[3] = &unk_1001E2D48;
    void v16[4] = v18;
    v16[5] = a1;
    if (qword_100219928 != -1) {
      dispatch_once(&qword_100219928, v16);
    }
  }

void sub_10006397C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_100063998(uint64_t a1, const __CFArray *a2)
{
  __int128 v2 = a2;
  if (!a2) {
    goto LABEL_100;
  }
  __int128 v4 = *(const __CFArray **)(a1 + 1376);
  if (v4)
  {
    CFIndex Count = CFArrayGetCount(v4);
    double v6 = kCFAllocatorDefault;
    if (Count)
    {
      uint64_t v7 = Count;
      CFMutableDictionaryRef Mutable = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
      if (v7 >= 1)
      {
        for (CFIndex i = 0LL; i != v7; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1376), i);
          if (ValueAtIndex)
          {
            uint64_t v11 = (uint64_t)ValueAtIndex;
            if (sub_100012C04((uint64_t)ValueAtIndex) == 1)
            {
              BOOL v12 = sub_100012B90(v11);
              CFSetAddValue(Mutable, v12);
            }
          }
        }
      }

      if (Mutable)
      {
        if (CFSetGetCount(Mutable) && CFArrayGetCount(v2))
        {
          MutableCFDictionaryRef Copy = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
          if (MutableCopy)
          {
            CFIndex v14 = CFArrayGetCount(v2);
            if (v14 >= 1)
            {
              CFIndex v15 = v14;
              for (CFIndex j = 0LL; j != v15; ++j)
              {
                uint64_t v17 = CFArrayGetValueAtIndex(v2, j);
                if (v17)
                {
                  CFPropertyListRef v18 = v17;
                  BOOL v19 = sub_1000951FC((uint64_t)v17, @"PolicyUUID");
                  if (v19)
                  {
                    dispatch_time_t v20 = v19;
                    if (CFSetContainsValue(Mutable, v19))
                    {
                      if (!sub_10009EFD8((uint64_t)v18))
                      {
                        int v21 = objc_autoreleasePoolPush();
                        if (qword_100219F60) {
                          [(id)qword_100219F60 WFLog:3, "%s: network %@ allowed. Restriction UUID %@", "__WiFiManagerCreateRestrictedList", sub_100095BC8(v18), v20 message];
                        }
                        objc_autoreleasePoolPop(v21);
                        CFArrayAppendValue(MutableCopy, v18);
                        double v6 = kCFAllocatorDefault;
                      }
                    }
                  }
                }
              }
            }
          }
        }

        else
        {
          MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0LL, v2);
        }

        CFRelease(Mutable);
        goto LABEL_29;
      }
    }
  }

  else
  {
    double v6 = kCFAllocatorDefault;
  }

  MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(v6, 0LL, v2);
LABEL_29:
  if (*(_BYTE *)(a1 + 320))
  {
    __int128 v2 = MutableCopy;
  }

  else
  {
    __int128 v2 = CFArrayCreateMutable(v6, 0LL, &kCFTypeArrayCallBacks);
    CFIndex v22 = CFArrayGetCount(MutableCopy);
    if (v22 >= 1 && v2)
    {
      CFIndex v23 = v22;
      for (CFIndex k = 0LL; k != v23; ++k)
      {
        CFIndex v25 = CFArrayGetValueAtIndex(MutableCopy, k);
        if (v25)
        {
          uint64_t v26 = v25;
          if (!sub_100098380((BOOL)v25)) {
            CFArrayAppendValue(v2, v26);
          }
        }
      }
    }

    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }

  double v27 = *(const void **)(a1 + 224);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(a1 + 224) = 0LL;
  }

  allocator = v6;
  CFArrayRef theArray = CFArrayCreateMutable(v6, 0LL, &kCFTypeArrayCallBacks);
  CFIndex v28 = CFArrayGetCount(v2);
  double v29 = sub_10006AA50((void *)a1, @"IsNewInstall");
  if (v28 >= 1)
  {
    CFTypeID v30 = v29;
    for (CFIndex m = 0LL; m != v28; ++m)
    {
      CFNumberRef v32 = (void *)CFArrayGetValueAtIndex(v2, m);
      if (v32)
      {
        CFNumberRef v33 = v32;
        if (*(_BYTE *)(a1 + 1328))
        {
          int v34 = (const __CFString *)sub_100095BC8(v32);
          if ((_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin") & 1) == 0)
          {
            if (v34)
            {
              __int128 v35 = *(const __CFString **)(a1 + 1336);
              if (v35)
              {
                if (CFStringCompare(v34, v35, 0LL) == kCFCompareEqualTo)
                {
                  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
                  CFDateRef v37 = CFDateCreate(allocator, Current);
                  if (v37)
                  {
                    CFDateRef v38 = v37;
                    sub_10009A194(v33, 1, v37);
                    CFRelease(v38);
                  }

                  uint64_t v39 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    [(id)qword_100219F60 WFLog:3, "%s: CompanionAssisted: adjusted autojoin date of network for ssid %@", "__WiFiManagerCopyAdjustedNetworks", sub_100095BC8(v33) message];
                  }
                  objc_autoreleasePoolPop(v39);
                }
              }
            }
          }
        }

        BOOL v40 = sub_10009A2C4((uint64_t)v33, 1);
        BOOL v41 = sub_10009EFD8((uint64_t)v33);
        else {
          unsigned int v42 = 0;
        }
        uint64_t v43 = sub_1000951FC((uint64_t)v33, @"DisableWiFiAutoJoinUntilFirstUserJoin");
        if (v30 != kCFBooleanFalse && !v40 && v41 && v42 && !v43)
        {
          CFTypeID v44 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: carrier network %@ can expose IMSI. Disabling until first join.", "__WiFiManagerCopyAdjustedNetworks", sub_100095BC8(v33) message];
          }
          objc_autoreleasePoolPop(v44);
          sub_10009582C((uint64_t)v33, @"DisableWiFiAutoJoinUntilFirstUserJoin", kCFBooleanTrue);
        }

        if (sub_10009EAF4((const __CFDictionary **)v33))
        {
          uint64_t v45 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: %@ is infrequently joined public network, skipping.", "__WiFiManagerCopyAdjustedNetworks", sub_100095BC8(v33) message];
          }
          objc_autoreleasePoolPop(v45);
        }

        else
        {
          CFArrayAppendValue(theArray, v33);
        }
      }
    }
  }

  *(void *)(a1 + 224) = theArray;
  sub_10006CB80(a1);
  CFTypeID v46 = *(const void **)(a1 + 264);
  if (v46)
  {
    CFRelease(v46);
    *(void *)(a1 + 264) = 0LL;
  }

  CFTypeID v47 = CFArrayCreateMutable(allocator, 0LL, &kCFTypeArrayCallBacks);
  CFIndex v48 = CFArrayGetCount(v2);
  if (v48 < 1) {
    goto LABEL_87;
  }
  CFIndex v49 = v48;
  CFIndex v50 = 0LL;
  while (1)
  {
    CFDictionaryRef v51 = CFArrayGetValueAtIndex(v2, v50);
    if (!v51) {
      goto LABEL_86;
    }
    int v52 = v51;
    if (!*(_BYTE *)(a1 + 1280)) {
      break;
    }
    int v53 = (const __CFString *)sub_1000951FC((uint64_t)v51, @"CARPLAY_UUID");
    if (v53)
    {
      double v54 = *(const __CFString **)(a1 + 1288);
      if (v54)
      {
        if (CFStringCompare(v53, v54, 0LL) == kCFCompareEqualTo)
        {
          CFArrayAppendValue(v47, v52);
          int v60 = objc_autoreleasePoolPush();
          BOOL v61 = v60;
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: CarPlay: found matching UUID %@ network for ssid %@", "__WiFiManagerCopyPriorityNetworks", *(void *)(a1 + 1288), sub_100095BC8(v52) message];
          }
          goto LABEL_107;
        }
      }
    }

LABEL_86:
    if (v49 == ++v50) {
      goto LABEL_87;
    }
  }

  if (!*(_BYTE *)(a1 + 1328)) {
    goto LABEL_86;
  }
  dispatch_time_t v55 = (const __CFString *)sub_100095BC8(v51);
  if (!v55) {
    goto LABEL_86;
  }
  dispatch_source_t v56 = *(const __CFString **)(a1 + 1336);
  if (!v56 || CFStringCompare(v55, v56, 0LL)) {
    goto LABEL_86;
  }
  CFArrayAppendValue(v47, v52);
  BOOL v61 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: CompanionAssisted: found matching SSID network %@", "__WiFiManagerCopyPriorityNetworks", sub_100095BC8(v52), v62 message];
  }
LABEL_107:
  objc_autoreleasePoolPop(v61);
LABEL_87:
  if (!CFArrayGetCount(v47))
  {
    if (*(_BYTE *)(a1 + 1280))
    {
      int v57 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: no matching Carplay network found for UUID %@. Reverting to normal mode.", "__WiFiManagerCopyPriorityNetworks", *(void *)(a1 + 1288) message];
      }
      objc_autoreleasePoolPop(v57);
      *(_BYTE *)(a1 + 1280) = 0;
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 1304), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
      uint64_t context = a1;
      unint64_t v66 = 0xAAAAAA0000000042LL;
      unint64_t v67 = 0xAAAAAAAA00000000LL;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
      BOOL v58 = *(const void **)(a1 + 1288);
      if (v58)
      {
        CFRelease(v58);
        *(void *)(a1 + 128_Block_object_dispose(va, 8) = 0LL;
      }
    }

    else if (*(_BYTE *)(a1 + 1328))
    {
      int v59 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: no matching autojoin assist network found for SSID %@. Reverting to normal mode. ###STOP_CAAJ", "__WiFiManagerCopyPriorityNetworks", *(void *)(a1 + 1336) message];
      }
      objc_autoreleasePoolPop(v59);
      *(_BYTE *)(a1 + 132_Block_object_dispose(va, 8) = 0;
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 1344), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
      uint64_t context = *(void *)(a1 + 1336);
      unint64_t v66 = *(void *)(a1 + 1352);
      sub_100037AC4((uint64_t)&context, 0LL);
    }

    if (v47)
    {
      CFRelease(v47);
      CFTypeID v47 = 0LL;
    }
  }

  *(void *)(a1 + 264) = v47;
LABEL_100:
  uint64_t context = a1;
  unint64_t v66 = 0xAAAAAAAA00000003LL;
  unint64_t v67 = 0LL;
  uint64_t v68 = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
  if (v2) {
    CFRelease(v2);
  }
}

      BOOL v19 = sub_100094E60((uint64_t)kCFAllocatorDefault, (uint64_t)v13);
      goto LABEL_87;
    case 3:
      uint64_t v17 = (const void *)sub_10004CE2C(*((void *)a5 + 8));
      CFPropertyListRef v18 = sub_1000DEA34((uint64_t)a5, v17, 1);
      if (!v18) {
        goto LABEL_100;
      }
      CFBooleanRef v13 = v18;
      BOOL v19 = sub_100094E60((uint64_t)kCFAllocatorDefault, (uint64_t)v18);
      if ((_DWORD)v6 == 3) {
        goto LABEL_24;
      }
      if ((_DWORD)v6 == 4)
      {
        dispatch_time_t v20 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: user disables Low Data Mode for %@", "__WiFiDeviceManagerHandleUserNotificationResponse", a3 message];
        }
        objc_autoreleasePoolPop(v20);
        uint64_t valuePtr = 2;
        int v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
        if (v21)
        {
          CFIndex v22 = v21;
          sub_10009582C((uint64_t)v13, @"SaveDataMode", v21);
          CFRelease(v22);
          sub_1000DAB00((dispatch_queue_s **)a5, v13);
        }
      }

      else
      {
        CFDictionaryRef v51 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: user dismissed low data mode alert for %@", "__WiFiDeviceManagerHandleUserNotificationResponse", a3 message];
        }
        objc_autoreleasePoolPop(v51);
      }

      goto LABEL_87;
    case 4:
      CFIndex v23 = (const void *)sub_10004CE2C(*((void *)a5 + 8));
      int v24 = sub_1000DEA34((uint64_t)a5, v23, 1);
      if (!v24) {
        goto LABEL_100;
      }
      CFBooleanRef v13 = v24;
      BOOL v19 = sub_100094E60((uint64_t)kCFAllocatorDefault, (uint64_t)v24);
      if ((_DWORD)v6 == 3)
      {
LABEL_24:
        CFIndex v25 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: user launched settings for %@", "__WiFiDeviceManagerHandleUserNotificationResponse", a3 message];
        }
        objc_autoreleasePoolPop(v25);
        sub_10010B64C(2LL, (CFDictionaryRef *)v13);
      }

void sub_1000641A4(uint64_t a1)
{
  int v2 = _os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin");
  if (a1 && v2)
  {
    uint64_t v5 = 1LL;
    if (*(_BYTE *)(a1 + 1280))
    {
      uint64_t v3 = 5LL;
    }

    else if (*(_BYTE *)(a1 + 322))
    {
      uint64_t v3 = 2LL;
    }

    else
    {
      if (!-[WiFiUserInteractionMonitor isAVConferenceActive]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isAVConferenceActive"))
      {
        if (!*(void *)(a1 + 672))
        {
          if (!*(void *)(a1 + 688)) {
            goto LABEL_12;
          }
          uint64_t v3 = 7LL;
          goto LABEL_11;
        }

        if (!-[WiFiUserInteractionMonitor isNetworkingAppInForeground]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isNetworkingAppInForeground"))
        {
LABEL_12:
          context[0] = a1;
          context[1] = 0xAAAAAAAA0000007BLL;
          context[2] = &v5;
          context[3] = 1LL;
          CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
          return;
        }
      }

      uint64_t v3 = 6LL;
    }

void sub_100064280(uint64_t a1, const void *a2, int a3)
{
  if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
  {
    double v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s not allowed with Unified Auto-Join",  "WiFiManagerSetRetryIntervals");
    }
    objc_autoreleasePoolPop(v6);
  }

  else if (!a2 || (uint64_t v7 = *(const void **)(a1 + 272)) == 0LL || !CFEqual(a2, v7))
  {
    uint64_t v8 = *(const void **)(a1 + 272);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 272) = 0LL;
    }

    if (a2)
    {
      *(void *)(a1 + 272) = CFRetain(a2);
      *(_DWORD *)(a1 + 280) = a3;
    }

    context[0] = a1;
    context[1] = 0xAAAAAAAA0000001CLL;
    context[2] = 0LL;
    context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
  }

void sub_100064380(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 776) == 2)
  {
    uint64_t context = a1;
    unint64_t v7 = 0xAAAAAAAA00000030LL;
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
    if ((_BYTE)v9 || sub_10006EDB0(a1))
    {
      int v2 = objc_autoreleasePoolPush();
      uint64_t v3 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        uint64_t context = a1;
        unint64_t v7 = 0xAAAAAAAA00000030LL;
        uint64_t v8 = 0LL;
        uint64_t v9 = 0LL;
        CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
        if ((_BYTE)v9) {
          __int128 v4 = "WoW";
        }
        else {
          __int128 v4 = "LPAS";
        }
        objc_msgSend(v3, "WFLog:message:", 3, "%s Enabled, Skip Disassocation", v4);
      }

      objc_autoreleasePoolPop(v2);
      *(_DWORD *)(a1 + 776) = 0;
    }

    else
    {
      uint64_t v5 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3 message:"Disassociation timer fired.  Disassociating."];
      }
      objc_autoreleasePoolPop(v5);
      *(_DWORD *)(a1 + 776) = 3;
      sub_10006B570(a1, 0);
      sub_100066124(a1, "__WiFiManagerDisassociationTimerCallback", 12797LL);
    }
  }

void sub_1000644C4(uint64_t a1)
{
  int v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: sideKick timer fired, end session.\n",  "__WiFiManagerSideKickTimerCallback");
  }
  objc_autoreleasePoolPop(v2);
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 784), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
  if (*(_DWORD *)(a1 + 808) == 1)
  {
    *(_DWORD *)(a1 + 80_Block_object_dispose(va, 8) = 0;
    if (CFSetGetCount(*(CFSetRef *)(a1 + 184))) {
      CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 184));
    }
    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: manager->sideKick.xpc_activity_state_t state = %d, CFSetGetCount(manager->sideKickClients) = %d\n",  "__WiFiManagerSideKickTimerCallback",  *(unsigned int *)(a1 + 808),  CFSetGetCount(*(CFSetRef *)(a1 + 184)));
    }
    objc_autoreleasePoolPop(v3);
    sub_1000717E0(a1);
  }

void sub_1000645C4(uint64_t a1)
{
  int v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3 message:"Diagnostics timer fired. Diagnosing."];
  }
  objc_autoreleasePoolPop(v2);
  if (*(uint64_t *)(a1 + 1656) >= 1)
  {
    uint64_t v3 = *(dispatch_source_s **)(a1 + 1640);
    dispatch_time_t v4 = dispatch_time(0LL, (uint64_t)(*(double *)(a1 + 1648) * 1000000000.0));
    dispatch_source_set_timer(v3, v4, 0xFFFFFFFFFFFFFFFFLL, 0LL);
  }

  v5[0] = a1;
  v5[1] = 0xAAAAAAAA00000015LL;
  v5[2] = 0LL;
  v5[3] = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v5);
}

void sub_100064688(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1160)) {
    goto LABEL_144;
  }
  if (MKBUserUnlockedSinceBoot(0LL))
  {
    BOOL v2 = MKBGetDeviceLockState(0LL) == 1;
    uint64_t v3 = objc_autoreleasePoolPush();
    dispatch_time_t v4 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      -[NSProcessInfo systemUptime]( +[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"),  "systemUptime");
      [v4 WFLog:3, "%s: First unlock polled %.2fs since boot", "__WiFiManagerHeartBeatFire", v5 message];
    }

    objc_autoreleasePoolPop(v3);
    sub_100069200(a1, v2, 1);
  }

  if (*(_BYTE *)(a1 + 1160))
  {
LABEL_144:
    if (*(void *)(a1 + 248) <= 0x13uLL)
    {
      if (-[WiFiUserInteractionMonitor isSetupCompleted]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isSetupCompleted"))
      {
        double v6 = *(const __CFArray **)(a1 + 232);
        if (!v6 || !CFArrayGetCount(v6))
        {
          sub_100063560(a1);
          unint64_t v7 = *(const __CFArray **)(a1 + 232);
          if (v7 && CFArrayGetCount(v7))
          {
            uint64_t v8 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Setting %d known networks",  "__WiFiManagerHeartBeatFire",  CFArrayGetCount(*(CFArrayRef *)(a1 + 232)));
            }
            objc_autoreleasePoolPop(v8);
            sub_100063998(a1, *(const __CFArray **)(a1 + 232));
          }

          ++*(void *)(a1 + 248);
        }
      }
    }
  }

  -[WiFiUserInteractionMonitor runPeriodicTasks]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "runPeriodicTasks");
  uint64_t v9 = *(void *)(a1 + 1272);
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * v9, 1) <= 0x2AAAAAAAAAAAAAAAuLL)
  {
    sub_100074498(a1, 1, 0, 0);
    context[0] = a1;
    context[1] = 0xAAAAAAAA0000003DLL;
    context[2] = 0LL;
    context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    uint64_t v9 = *(void *)(a1 + 1272);
  }

  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * v9, 2) > 0x1555555555555555uLL) {
    return;
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v11 = CFDateCreate(kCFAllocatorDefault, Current);
  if (+[WiFiSoftApUsageMonitor sharedInstance](&OBJC_CLASS___WiFiSoftApUsageMonitor, "sharedInstance"))
  {
    BOOL v12 = (const __CFDictionary *)-[WiFiSoftApUsageMonitor statsDictionary]( +[WiFiSoftApUsageMonitor sharedInstance]( &OBJC_CLASS___WiFiSoftApUsageMonitor,  "sharedInstance"),  "statsDictionary");
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v12, kSoftApStatsValid);
    if (Value)
    {
      if (Value == kCFBooleanTrue)
      {
        CFIndex v14 = (const __CFDate *)CFDictionaryGetValue(v12, kSoftApOldestActiveTime);
        if (v14)
        {
          if (CFDateGetTimeIntervalSinceDate(v11, v14) >= 1209600.0) {
            -[WiFiSoftApUsageMonitor resetStats]( +[WiFiSoftApUsageMonitor sharedInstance](&OBJC_CLASS___WiFiSoftApUsageMonitor, "sharedInstance"),  "resetStats");
          }
        }
      }
    }
  }

  if (v11) {
    CFRelease(v11);
  }
  CFIndex v15 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Check for networks with deleted keychain password, count: %ld",  "WiFiManagerCheckDeletedPasswordNetworks",  CFArrayGetCount(*(CFArrayRef *)(a1 + 2200)));
  }
  objc_autoreleasePoolPop(v15);
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 2200)) < 1) {
    goto LABEL_62;
  }
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 2200), 0LL);
  uint64_t v17 = objc_autoreleasePoolPush();
  if (!ValueAtIndex)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null networkWithDeletedKeychainPassword",  "WiFiManagerCheckDeletedPasswordNetworks");
    }
    goto LABEL_61;
  }

  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: Checking network %@ to see if we need to prompt for the missing password TTR", "WiFiManagerCheckDeletedPasswordNetworks", sub_100095BC8(ValueAtIndex) message];
  }
  objc_autoreleasePoolPop(v17);
  CFPropertyListRef v18 = sub_10006C77C((CFArrayRef)a1);
  if (!v18)
  {
    uint64_t v17 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null device managers array",  "WiFiManagerCheckDeletedPasswordNetworks");
    }
LABEL_61:
    objc_autoreleasePoolPop(v17);
LABEL_62:
    BOOL v19 = 0LL;
LABEL_63:
    CFStringRef v23 = 0LL;
    CFIndex v22 = 0LL;
    goto LABEL_64;
  }

  BOOL v19 = v18;
  dispatch_time_t v20 = CFArrayGetValueAtIndex(v18, 0LL);
  if (!v20)
  {
    dispatch_time_t v55 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null device manager",  "WiFiManagerCheckDeletedPasswordNetworks");
    }
    objc_autoreleasePoolPop(v55);
    goto LABEL_63;
  }

  int v21 = sub_1000D92D0((uint64_t)v20, ValueAtIndex);
  if (!v21)
  {
    CFIndex v25 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: Network %@ is no longer in the known networks list. No need to remember it for missing password purposes. ", "WiFiManagerCheckDeletedPasswordNetworks", sub_100095BC8(ValueAtIndex) message];
    }
    objc_autoreleasePoolPop(v25);
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 2200));
    goto LABEL_63;
  }

  CFIndex v22 = v21;
  CFStringRef v23 = sub_100095408((CFDictionaryRef *)ValueAtIndex);
  if (sub_100098BF8((uint64_t)ValueAtIndex) && v23)
  {
    int v24 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: Password for %@ is now present in the keychain. No need to remember it for missing password purposes", "WiFiManagerCheckDeletedPasswordNetworks", sub_100095BC8(ValueAtIndex) message];
    }
    objc_autoreleasePoolPop(v24);
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 2200));
  }

  else
  {
    CFAbsoluteTime v26 = CFAbsoluteTimeGetCurrent();
    double v27 = CFDateCreate(kCFAllocatorDefault, v26);
    CFIndex v28 = (const __CFDate *)sub_10009DE04((uint64_t)ValueAtIndex);
    double v29 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: Checking password mod date %@ against current time", "WiFiManagerCheckDeletedPasswordNetworks", v28 message];
    }
    objc_autoreleasePoolPop(v29);
    if (v28 && CFDateGetTimeIntervalSinceDate(v27, v28) > 900.0)
    {
      CFTypeID v30 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: %@ is present in known networks and its password has not been in the keychain for > %d seconds in the keyc hain. Prompting user for TTR", "WiFiManagerCheckDeletedPasswordNetworks", sub_100095BC8(ValueAtIndex), 900 message];
      }
      objc_autoreleasePoolPop(v30);
      *(void *)(a1 + 220_Block_object_dispose(va, 8) = ValueAtIndex;
      if (sub_10012DFAC(a1 + 2208))
      {
        BOOL v31 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: User accepted the TTR prompt. Removing all entries from the networksWithDeletedKeychainPassword array",  "WiFiManagerCheckDeletedPasswordNetworks");
        }
        objc_autoreleasePoolPop(v31);
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 2200));
      }
    }

    if (v27) {
      CFRelease(v27);
    }
  }

LABEL_64:
  CFNumberRef v32 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: End of deleted password network checks, network count: %ld",  "WiFiManagerCheckDeletedPasswordNetworks",  CFArrayGetCount(*(CFArrayRef *)(a1 + 2200)));
  }
  objc_autoreleasePoolPop(v32);
  if (v19) {
    CFRelease(v19);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (*(_BYTE *)(a1 + 2224)) {
    return;
  }
  CFStringRef v33 = CFStringCreateWithCString(kCFAllocatorDefault, "", 0x8000100u);
  LOBYTE(context[0]) = 0;
  BOOL v59 = 0;
  int v34 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: Start", "WiFiManagerMigrateWiFiKeychainEntries");
  }
  objc_autoreleasePoolPop(v34);
  if (*(_BYTE *)(a1 + 2224))
  {
    CFDateRef v37 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Empty account name password migration already completed",  "WiFiManagerMigrateWiFiKeychainEntries");
    }
    char v56 = 0;
LABEL_141:
    objc_autoreleasePoolPop(v37);
    *(_BYTE *)(a1 + 2224) = v56;
    if (!v33) {
      return;
    }
    goto LABEL_104;
  }

  __int128 v35 = (const __CFString *)sub_1000AC330(v33, (BOOL *)context, 0.1);
  unsigned int v36 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: passwordFetchTimedOut: %d",  "WiFiManagerMigrateWiFiKeychainEntries",  LOBYTE(context[0]));
  }
  objc_autoreleasePoolPop(v36);
  if (LOBYTE(context[0]))
  {
    CFTypeID v47 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Empty account name password fetch timed out",  "WiFiManagerMigrateWiFiKeychainEntries");
    }
    CFTypeID v46 = 0LL;
    char v48 = 0;
    goto LABEL_98;
  }

  CFDateRef v37 = objc_autoreleasePoolPush();
  if (!v35)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: No AirPort keychain entry with an empty account name. Migration complete.",  "WiFiManagerMigrateWiFiKeychainEntries");
    }
    char v56 = 1;
    goto LABEL_141;
  }

  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: emptyStringAccountPassword is: %s",  "WiFiManagerMigrateWiFiKeychainEntries",  "non-null");
  }
  objc_autoreleasePoolPop(v37);
  CFDateRef v38 = *(const __CFArray **)(a1 + 232);
  if (v38 && CFArrayGetCount(v38))
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 232));
    if (Count < 1)
    {
      CFTypeID v46 = 0LL;
    }

    else
    {
      CFIndex v40 = Count;
      CFIndex v41 = 0LL;
      BOOL v42 = 1;
      while (1)
      {
        uint64_t v43 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 232), v41);
        if (v43)
        {
          CFTypeID v44 = v43;
          if (sub_10009EE28((uint64_t)v43) == 1 && sub_100098BF8((uint64_t)v44))
          {
            uint64_t v45 = (const __CFString *)sub_100095BC8(v44);
            if (CFStringCompare(v45, v33, 0LL) == kCFCompareEqualTo) {
              break;
            }
          }
        }

        BOOL v42 = ++v41 < v40;
        if (v40 == v41)
        {
          CFTypeID v46 = 0LL;
          goto LABEL_95;
        }
      }

      CFIndex v49 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: Found network profile with empty string account name: %@", "WiFiManagerMigrateWiFiKeychainEntries", sub_100095CB0(v44) message];
      }
      objc_autoreleasePoolPop(v49);
      CFIndex v50 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Checking if empty-string account password has already been migrated",  "WiFiManagerMigrateWiFiKeychainEntries");
      }
      objc_autoreleasePoolPop(v50);
      CFTypeID v46 = (const void *)sub_100099AA8((CFDictionaryRef *)v44, (BOOL *)context, 0.1);
      CFDictionaryRef v51 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        int v52 = "non-null";
        if (!v46) {
          int v52 = "null";
        }
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: attempted migrated password fetch returned, passwordFetchTimedOut: %d, migratedPassword is: %s",  "WiFiManagerMigrateWiFiKeychainEntries",  LOBYTE(context[0]),  v52);
      }

      objc_autoreleasePoolPop(v51);
      if (LOBYTE(context[0]))
      {
        int v53 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: password fetch for %@ timed out", "WiFiManagerMigrateWiFiKeychainEntries", sub_100095CB0(v44) message];
        }
        objc_autoreleasePoolPop(v53);
        if (v42)
        {
LABEL_118:
          char v48 = 0;
LABEL_99:
          *(_BYTE *)(a1 + 2224) = v48;
          if (!v35) {
            goto LABEL_101;
          }
          goto LABEL_100;
        }
      }

      else
      {
        if (v46)
        {
          CFTypeID v47 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: keychain entry for %@ already present, migration complete", "WiFiManagerMigrateWiFiKeychainEntries", sub_100095CB0(v44) message];
          }
          goto LABEL_97;
        }

        sub_100099BB8(v44, v35, &v59, 0.1);
        BOOL v54 = v59;
        CFTypeID v47 = objc_autoreleasePoolPush();
        CFTypeID v46 = (const void *)qword_100219F60;
        if (!v54)
        {
          if (qword_100219F60)
          {
            [(id)qword_100219F60 WFLog:3, "%s: password for %@ successfully migrated", "WiFiManagerMigrateWiFiKeychainEntries", sub_100095CB0(v44) message];
            CFTypeID v46 = 0LL;
          }

          goto LABEL_97;
        }

        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: Attempted password set/migration for %@ timed out", "WiFiManagerMigrateWiFiKeychainEntries", sub_100095CB0(v44) message];
        }
        objc_autoreleasePoolPop(v47);
        CFTypeID v46 = 0LL;
        if (v42) {
          goto LABEL_118;
        }
      }
    }

  BOOL v42 = sub_10003AFF4((uint64_t)"WiFiDeviceManagerStartAutoJoinAndReply");
  CFRetain((CFTypeRef)a1);
  if (_os_feature_enabled_impl("CoreWiFi", "WiFi6EMaxCompatibility"))
  {
    uint64_t v43 = sub_10006DCC8(*(void *)(a1 + 6744));
    CFTypeID v44 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: prefer 6E enabled %d",  "WiFiDeviceManagerStartAutoJoinAndReply",  v43 == 0);
    }
    objc_autoreleasePoolPop(v44);
    [*(id *)(a1 + 8776) setMaxCompatibilityEnabled:v43 == 0];
  }

  uint64_t v45 = *(void **)(a1 + 8776);
  v54[0] = _NSConcreteStackBlock;
  v54[1] = 3221225472LL;
  v54[2] = sub_10011341C;
  v54[3] = &unk_1001E51D8;
  v54[6] = a1;
  v54[7] = a2;
  v54[4] = v42;
  v54[5] = &v55;
  CFTypeID v46 = [v45 performAutoJoinWithParameters:v15 reply:v54];
  v56[5] = (uint64_t)v46;
  if (v46 || (CFRelease((CFTypeRef)a1), v56[5]))
  {
    if (!*(void *)(a1 + 8824))
    {
      if (-[WiFiUserInteractionMonitor isSetupCompleted]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isSetupCompleted"))
      {
        if (a2 <= 0x28 && ((1LL << a2) & 0x10000010104LL) != 0)
        {
          CFTypeID v47 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AUTO-JOIN: Auto-join is running (trigger=%ld), defer user-interactive scans",  "__WiFiDeviceManagerUnifiedAutoJoinShouldDeferUserInteractiveScan",  a2);
          }
          objc_autoreleasePoolPop(v47);
          sub_10004A048( *(void *)(a1 + 64),  0,  +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@/%@",  @"AutoJoin",  [(id)v56[5] UUIDString]),  (CFNumberRef)0xA);
          sub_10004A048( *(void *)(a1 + 64),  9,  +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@/%@",  @"AutoJoin",  [(id)v56[5] UUIDString]),  (CFNumberRef)0xA);
        }
      }

      else
      {
        CFDictionaryRef v51 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: AUTO-JOIN: Setup not completed, allow user-interactive scans",  "__WiFiDeviceManagerUnifiedAutoJoinShouldDeferUserInteractiveScan");
        }
        objc_autoreleasePoolPop(v51);
      }
    }
  }

void sub_100065100(uint64_t a1)
{
  BOOL v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: did not connect to Carplay network. Reverting to regular mode",  "__WiFiManagerCarplayTimeout");
  }
  objc_autoreleasePoolPop(v2);
  sub_10007CD78(a1, 0, 0LL);
}

void sub_100065188(uint64_t a1)
{
  BOOL v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: did not connect to companion network in time. Reverting to regular mode, companion RSSI %d, Channel %d",  "__WiFiManagerCompanionAssistedAJTimeout",  *(unsigned int *)(a1 + 1352),  *(unsigned int *)(a1 + 1356));
  }
  objc_autoreleasePoolPop(v2);
  v11[0] = *(void *)(a1 + 1336);
  v11[1] = *(void *)(a1 + 1352);
  sub_100037AC4((uint64_t)v11, 0LL);
  if (*(_BYTE *)(a1 + 1947))
  {
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000032LL;
    context[2] = 0LL;
    uint64_t v13 = 0LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    int v3 = *(_DWORD *)(a1 + 1352);
    if ((_BYTE)v13)
    {
      if (v3 <= -56) {
        goto LABEL_23;
      }
    }

    else if (v3 < -55 || *(int *)(a1 + 1356) > 14)
    {
      goto LABEL_23;
    }

    dispatch_time_t v4 = sub_10006C77C((CFArrayRef)a1);
    uint64_t v5 = v4;
    if (v4 && CFArrayGetCount(v4))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v5, 0LL);
      unint64_t v7 = objc_autoreleasePoolPush();
      if (ValueAtIndex)
      {
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Gizmo didn't join Companion's network, triggering CoreCapture",  "__WiFiManagerCompanionAssistedAJTimeout");
        }
        objc_autoreleasePoolPop(v7);
        sub_1000EE484((uint64_t)ValueAtIndex, @"TriggerCoreCapture");
      }

      else
      {
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: device manager is null",  "__WiFiManagerCompanionAssistedAJTimeout");
        }
        objc_autoreleasePoolPop(v7);
      }

uint64_t sub_1000653FC(uint64_t a1)
{
  BOOL v2 = objc_autoreleasePoolPush();
  if (a1)
  {
    if (!*(_BYTE *)(a1 + 1707))
    {
      int v3 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: fetching user auto join state from the plist",  "WiFiManagerGetUserAutoJoinState");
      }
      objc_autoreleasePoolPop(v3);
      *(_BYTE *)(a1 + 1706) = sub_10007F0C8((void *)a1, @"UserAutoJoinState", 1);
      *(_BYTE *)(a1 + 1705) = 1;
      dispatch_time_t v4 = sub_10006AA50((void *)a1, @"UserAutoJoinDisabledLoc");
      uint64_t v5 = objc_autoreleasePoolPush();
      if (v4)
      {
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: found location data for user auto join disabled",  "WiFiManagerGetUserAutoJoinState");
        }
        objc_autoreleasePoolPop(v5);
        id v6 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___CLLocation),  v4,  0LL);
        if (v6 && (unint64_t v7 = v6, v8 = objc_opt_class(&OBJC_CLASS___CLLocation), (objc_opt_isKindOfClass(v7, v8) & 1) != 0))
        {
          uint64_t v9 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: setting disabled location to %@", "WiFiManagerGetUserAutoJoinState", v7 message];
          }
          objc_autoreleasePoolPop(v9);
          *(void *)(a1 + 1712) = v7;
          id v10 = v7;
          *(_BYTE *)(a1 + 1705) = 0;
        }

        else
        {
          uint64_t v11 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: invalid location property in the plist, clearing out",  "WiFiManagerGetUserAutoJoinState");
          }
          objc_autoreleasePoolPop(v11);
          sub_10006D08C((void *)a1, @"UserAutoJoinDisabledLoc", 0LL, 0);
        }
      }

      else
      {
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: no location data in plist",  "WiFiManagerGetUserAutoJoinState");
        }
        objc_autoreleasePoolPop(v5);
      }

      BOOL v12 = sub_10006AA50((void *)a1, @"UserAutoJoinDisableTimestamp");
      uint64_t v13 = objc_autoreleasePoolPush();
      if (v12)
      {
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: found disabled date %@", "WiFiManagerGetUserAutoJoinState", v12 message];
        }
        objc_autoreleasePoolPop(v13);
        *(void *)(a1 + 1720) = v12;
      }

      else
      {
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: no disabled date in plist",  "WiFiManagerGetUserAutoJoinState");
        }
        objc_autoreleasePoolPop(v13);
      }

      *(_BYTE *)(a1 + 1707) = 1;
    }

    uint64_t v14 = *(unsigned __int8 *)(a1 + 1706);
    CFIndex v15 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: user auto join state %d",  "WiFiManagerGetUserAutoJoinState",  v14);
    }
  }

  else
  {
    CFIndex v15 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: manager is NULL", "WiFiManagerGetUserAutoJoinState");
    }
    uint64_t v14 = 1LL;
  }

  objc_autoreleasePoolPop(v15);
  objc_autoreleasePoolPop(v2);
  return v14;
}

void sub_10006570C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int valuePtr = a3;
  uint64_t v8 = objc_autoreleasePoolPush();
  uint64_t v9 = sub_10007D140((const __CFArray *)a1);
  if (!a1)
  {
    double v27 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: wifiManagerRef is NULL!",  "WiFiManagerSetUserAutoJoinState");
    }
    goto LABEL_52;
  }

  unsigned int v61 = 0;
  int v10 = *(unsigned __int8 *)(a1 + 1706);
  uint64_t v11 = objc_autoreleasePoolPush();
  if (v10 == (_DWORD)a2)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: current state is already %d",  "WiFiManagerSetUserAutoJoinState",  a2);
    }
    objc_autoreleasePoolPop(v11);
    unsigned int v12 = a3 - 1;
    BOOL v14 = (_DWORD)a3 == 8 || v12 < 3;
    if ((_DWORD)a2 && v14)
    {
      CFIndex v15 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        if (v12 > 7) {
          double v16 = @"Unknown";
        }
        else {
          double v16 = off_1001E44C8[v12];
        }
        [(id)qword_100219F60 WFLog:3, "%s: checking for networks disabled due to trigger %@ (%d)", "WiFiManagerSetUserAutoJoinState", v16, a3 message];
      }

      objc_autoreleasePoolPop(v15);
      sub_10006CB80(a1);
      sub_10006D6CC(a1, 1u);
      goto LABEL_109;
    }

    if ((_DWORD)a2 || !v9) {
      goto LABEL_109;
    }
    CFPropertyListRef v18 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: state is disabled while connected to network %@", "WiFiManagerSetUserAutoJoinState", v9 message];
    }
    objc_autoreleasePoolPop(v18);
    sub_100066124(a1, "WiFiManagerSetUserAutoJoinState", 22834LL);
LABEL_49:
    if (sub_10007F0C8((void *)a1, @"UserAutoJoinAutomaticEnablingDisabled", 0))
    {
      double v27 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: automatic re-enabling is disabled",  "WiFiManagerSetUserAutoJoinState");
      }
LABEL_52:
      objc_autoreleasePoolPop(v27);
      goto LABEL_109;
    }

    if ([*(id *)(a1 + 1464) isAuthorized])
    {
      id v28 = [*(id *)(a1 + 1464) latestLocation];
      unsigned int v29 = +[WiFiLocationManager isLocationValid:uptoSeconds:isHighAccuracy:]( &OBJC_CLASS___WiFiLocationManager,  "isLocationValid:uptoSeconds:isHighAccuracy:",  v28,  1LL,  60.0);
      CFTypeID v30 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: location update %@ isValid %d", "WiFiManagerSetUserAutoJoinState", v28, v29 != 0 message];
      }
      objc_autoreleasePoolPop(v30);
      if (v29)
      {
        BOOL v31 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: disabled location for user auto join",  "WiFiManagerSetUserAutoJoinState");
        }
        objc_autoreleasePoolPop(v31);
        *(void *)(a1 + 1712) = [v28 copy];
        *(_WORD *)(a1 + 1704) = 0;
        CFNumberRef v32 = +[NSKeyedArchiver archivedDataWithRootObject:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:",  v28);
        if (v32)
        {
          CFStringRef v33 = v32;
          sub_10006D08C((void *)a1, @"UserAutoJoinDisabledLoc", v32, 0);
          sub_10006D08C((void *)a1, @"UserAutoJoinLocationMetric", v33, 0);
        }

        else
        {
          unsigned int v36 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: failed to create archive of location",  "WiFiManagerSetUserAutoJoinState");
          }
          objc_autoreleasePoolPop(v36);
        }
      }

      else
      {
        unsigned int v61 = 1;
        __int128 v35 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: requesting high accuracy location",  "WiFiManagerSetUserAutoJoinState");
        }
        objc_autoreleasePoolPop(v35);
        *(_BYTE *)(a1 + 1704) = 1;
        [*(id *)(a1 + 1464) requestHighAccuracyLocationUpdate];
      }
    }

    else
    {
      int v34 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: wifi not authroized for location services",  "WiFiManagerSetUserAutoJoinState");
      }
      objc_autoreleasePoolPop(v34);
      *(_BYTE *)(a1 + 1705) = 1;
      unsigned int v61 = 2;
    }

    CFDateRef v37 = objc_alloc_init(&OBJC_CLASS___NSDate);
    CFDateRef v38 = sub_10003AEF8((uint64_t)v37, 5LL, 0LL, 0LL);
    sub_10006D08C((void *)a1, @"UserAutoJoinDisableTimestamp", v38, 0);
    uint64_t v39 = *(const void **)(a1 + 1720);
    if (v39) {
      CFRelease(v39);
    }
    *(void *)(a1 + 1720) = v38;
    CFIndex v40 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: date to enable user auto join: %@", "WiFiManagerSetUserAutoJoinState", v38 message];
    }
    objc_autoreleasePoolPop(v40);
    if (!v9) {
      goto LABEL_107;
    }
    CFIndex v41 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: connected to %@, disabling network from auto join until %@", "WiFiManagerSetUserAutoJoinState", sub_100095BC8(v9), v38 message];
    }
    objc_autoreleasePoolPop(v41);
    BOOL v42 = *(const __CFArray **)(a1 + 224);
    if (v42)
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 224));
      if (Count)
      {
        CFIndex v44 = Count;
        CFTypeID v45 = CFGetTypeID(v9);
        if (v45 == sub_10009499C())
        {
          v70.CFIndex location = 0LL;
          v70.length = v44;
          CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v42, v70, v9);
          if (FirstIndexOfValue != -1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 224), FirstIndexOfValue);
            if (sub_10009A128((uint64_t)ValueAtIndex))
            {
              BOOL v58 = v37;
              BOOL v59 = v8;
              sub_100099F8C((uint64_t)v9, v38);
              sub_10009A048((CFMutableDictionaryRef *)v9, 0, @"UserAutoJoin");
              sub_100077498(a1, v9, 1u);
              char v48 = *(const __CFArray **)(a1 + 232);
              CFIndex v49 = CFArrayGetCount(v48);
              if (v49 >= 1)
              {
                CFIndex v50 = v49;
                for (CFIndex i = 0LL; i != v50; ++i)
                {
                  int v52 = (CFMutableDictionaryRef *)CFArrayGetValueAtIndex(v48, i);
                  unsigned int v53 = sub_100096670((uint64_t)v52);
                  unsigned int v54 = sub_10009F9B8((uint64_t)v52);
                  if (sub_1000951FC((uint64_t)v52, @"WiFiNetworkAttributeIsPublic")
                    && ([v9 isEqual:v52] & 1) == 0
                    && !sub_100098EA8((uint64_t)v52)
                    && v53 != 1
                    && v54 != 1)
                  {
                    dispatch_time_t v55 = objc_autoreleasePoolPush();
                    if (qword_100219F60) {
                      [(id)qword_100219F60 WFLog:3, "%s: disabling network %@ from auto join until %@", "WiFiManagerSetUserAutoJoinState", v52, v38 message];
                    }
                    objc_autoreleasePoolPop(v55);
                    sub_100099F8C((uint64_t)v52, v38);
                    sub_10009A048(v52, 0, @"UserAutoJoin");
                    sub_100077498(a1, v52, 1u);
                  }
                }
              }

              sub_10006CB80(a1);
              CFDateRef v37 = v58;
              uint64_t v8 = v59;
              goto LABEL_107;
            }

            char v56 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s network has auto join disabled, skipping disabled until date",  "WiFiManagerSetUserAutoJoinState");
            }
LABEL_106:
            objc_autoreleasePoolPop(v56);
LABEL_107:
            if (v37) {
              CFRelease(v37);
            }
            goto LABEL_109;
          }
        }

        else
        {
          uint64_t v57 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: invalid network ref", "__GetNetworkIndices");
          }
          objc_autoreleasePoolPop(v57);
        }
      }
    }

    char v56 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: couldn't find matching known network",  "WiFiManagerSetUserAutoJoinState");
    }
    goto LABEL_106;
  }

  if (qword_100219F60)
  {
    else {
      uint64_t v17 = off_1001E4508[(int)a3 + 1];
    }
    [(id)qword_100219F60 WFLog:3, "%s: user auto join state %d trigger %@ (%d)", "WiFiManagerSetUserAutoJoinState", a2, v17, a3 message];
  }

  objc_autoreleasePoolPop(v11);
  if (a4)
  {
    if (*(void *)(a1 + 1800))
    {
      CTGreenTeaOsLogHandle = (os_log_s *)getCTGreenTeaOsLogHandle();
      if (CTGreenTeaOsLogHandle)
      {
        dispatch_time_t v20 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          int v21 = "yes";
          *(_DWORD *)buuint64_t f = 138413314;
          *(void *)&uint8_t buf[4] = a4;
          *(void *)&buf[14] = "com.apple.wifi.manager";
          *(_WORD *)&buf[12] = 2080;
          if (!(_DWORD)a2) {
            int v21 = "no";
          }
          __int16 v64 = 2080;
          BOOL v65 = "wifid";
          __int16 v66 = 2080;
          unint64_t v67 = "WiFiManagerSetUserAutoJoinState";
          __int16 v68 = 2080;
          BOOL v69 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "<%@>[%s][%s]:[%s]WLAN enabled..%s",  buf,  0x34u);
        }
      }
    }
  }

  CFIndex v22 = (const void **)&kCFBooleanFalse;
  if ((_DWORD)a2) {
    CFIndex v22 = (const void **)&kCFBooleanTrue;
  }
  sub_10006D08C((void *)a1, @"UserAutoJoinState", *v22, 0);
  *(_BYTE *)(a1 + 1706) = a2;
  context[0] = a1;
  context[1] = 0xAAAAAAAA00000047LL;
  context[2] = &valuePtr;
  void context[3] = &v61;
  void context[4] = a2;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(Mutable, @"trigger", v24);
  *(void *)buuint64_t f = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&buf[8] = Mutable;
  buf[0] = a2;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_10008EDEC, buf);
  objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "sendUserAutoJoinStateDidChangeEvent");
  if (v24) {
    CFRelease(v24);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (!(_DWORD)a2) {
    goto LABEL_49;
  }
  sub_10007CBB0((void *)a1, @"UserAutoJoinLocStateMetric", v61);
  *(_WORD *)(a1 + 1704) = 0;
  CFIndex v25 = *(const void **)(a1 + 1712);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(a1 + 1712) = 0LL;
  }

  CFAbsoluteTime v26 = *(const void **)(a1 + 1720);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(a1 + 1720) = 0LL;
  }

  sub_10006D08C((void *)a1, @"UserAutoJoinDisableTimestamp", 0LL, 0);
  sub_10006D08C((void *)a1, @"UserAutoJoinDisabledLoc", 0LL, 0);
  if (valuePtr != 4) {
    sub_10006D6CC(a1, 1u);
  }
  sub_10007CBB0((void *)a1, @"UserAutoJoinSecurityTypeMetric", 0LL);
LABEL_109:
  if (v9) {
    CFRelease(v9);
  }
  objc_autoreleasePoolPop(v8);
}

void sub_100066124(uint64_t a1, const char *a2, uint64_t a3)
{
  id v6 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    unint64_t v7 = "";
    if (a2) {
      unint64_t v7 = a2;
    }
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "asked to Disassociate by <%s:%d> \n", v7, a3);
  }

  objc_autoreleasePoolPop(v6);
  context[0] = a1;
  context[1] = 0xAAAAAAAA0000000ELL;
  context[2] = 0LL;
  void context[3] = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
}

uint64_t sub_1000661C8(uint64_t a1, int a2)
{
  int v11 = a2;
  dispatch_time_t v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: entering", "WiFiManagerOpen");
  }
  objc_autoreleasePoolPop(v4);
  if (a1)
  {
    unsigned __int8 v5 = 1;
    if (!*(_BYTE *)(a1 + 16))
    {
      *(_BYTE *)(a1 + 16) = 1;
      *(_DWORD *)(a1 + 20) = a2;
      context[0] = a1;
      context[1] = 0xAAAAAAAA00000000LL;
      context[2] = &v11;
      uint64_t v10 = 1LL;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
      uint64_t v6 = *(void *)(a1 + 32);
      if (v6) {
        sub_100067864(a1, v6);
      }
      unint64_t v7 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: exiting", "WiFiManagerOpen");
      }
      objc_autoreleasePoolPop(v7);
      return v10;
    }
  }

  else
  {
    return 0;
  }

  return v5;
}

void sub_1000662CC(CFMutableArrayRef *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 0:
      if (*(_BYTE *)(*(void *)a2 + 16LL))
      {
        *(void *)(a2 + 24) = sub_1000CD280( (uint64_t)a1,  **(unsigned int **)(a2 + 16),  *(void *)(*(void *)a2 + 32LL));
        unsigned int v5 = sub_1000DDDDC((uint64_t)a1);
        uint64_t v6 = *(unsigned int *)(*(void *)v3 + 324LL);
        if (v5 != (_DWORD)v6)
        {
          unsigned int v7 = v5;
          uint64_t v8 = objc_autoreleasePoolPush();
          uint64_t v9 = (void *)qword_100219F60;
          if (qword_100219F60)
          {
            uint64_t v10 = sub_10003AE44(v7);
            int v11 = sub_10003AE44(*(_DWORD *)(*(void *)v3 + 324LL));
            objc_msgSend( v9,  "WFLog:message:",  3,  "Device power = %s and prefences power = %s.  Setting device power to %s (unlockedSinceBoot=%d)",  v10,  v11,  sub_10003AE44(v6),  *(unsigned __int8 *)(*(void *)v3 + 1160));
          }

          objc_autoreleasePoolPop(v8);
          uint64_t v12 = sub_1000DE958((uint64_t)a1, v6);
          if ((_DWORD)v12)
          {
            uint64_t v13 = v12;
            BOOL v14 = objc_autoreleasePoolPush();
            CFIndex v15 = (void *)qword_100219F60;
            if (qword_100219F60)
            {
              double v16 = sub_10003AE44(v7);
              objc_msgSend( v15,  "WFLog:message:",  4,  "Unable to set power state (%s) to %s (err = %d). deviceManager=%p",  v16,  sub_10003AE44(*(_DWORD *)(*(void *)v3 + 324)),  v13,  a1);
            }

            uint64_t v17 = v14;
            goto LABEL_98;
          }
        }
      }

      return;
    case 2:
      if (*(_BYTE *)(*(void *)a2 + 16LL)) {
        sub_1000CD56C((uint64_t)a1, *(dispatch_queue_s **)(*(void *)a2 + 32LL));
      }
      return;
    case 3:
      uint64_t v18 = *(void *)a2;
      if (*(_BYTE *)(*(void *)a2 + 1328LL) || *(_BYTE *)(v18 + 1280))
      {
        sub_1000D16F4((uint64_t)a1, 1);
        BOOL v19 = *(const __CFArray **)(*(void *)v3 + 264LL);
      }

      else
      {
        BOOL v19 = *(const __CFArray **)(v18 + 224);
      }

      sub_1000D1CB8((uint64_t)a1, v19);
      return;
    case 4:
      sub_1000D5134((uint64_t)a1, *(CFTypeRef *)(*(void *)a2 + 216LL));
      return;
    case 5:
      uint64_t v20 = (int)sub_1000EBB68((uint64_t)a1, *(void *)(*(void *)a2 + 2184LL));
      goto LABEL_161;
    case 6:
      if (*(_BYTE *)(*(void *)a2 + 16LL) && *(_BYTE *)(*(void *)a2 + 24LL)) {
        sub_1000D02BC((uint64_t)a1);
      }
      return;
    case 7:
      sub_1000DD4C0( (uint64_t)a1,  *(unsigned __int8 *)(*(void *)a2 + 993LL),  *(unsigned __int8 *)(*(void *)a2 + 1008LL),  *(unsigned __int8 *)(*(void *)a2 + 996LL));
      return;
    case 8:
      sub_1000D70F4(a1, *(const __CFArray **)(a2 + 16), 1);
      return;
    case 0xA:
      sub_1000D554C((uint64_t)a1, *(unsigned int *)(*(void *)a2 + 1144LL), *(unsigned __int8 *)(*(void *)a2 + 688LL));
      if ((*(_DWORD *)(*(void *)v3 + 1144LL) - 1) <= 1)
      {
        uint64_t v21 = sub_1000EE7CC((uint64_t)a1);
      }

      return;
    case 0xB:
      goto LABEL_26;
    case 0xC:
      sub_1000D71E0((uint64_t)a1, *(_DWORD *)(*(void *)a2 + 900LL), *(_DWORD *)(*(void *)a2 + 896LL));
      return;
    case 0xD:
      if (*(_BYTE *)(*(void *)a2 + 16LL) && *(_BYTE *)(*(void *)a2 + 24LL)) {
        sub_1000D0A5C((uint64_t)a1, **(unsigned int **)(a2 + 16), (uint64_t)"__WiFiManagerDeviceManagerApplier");
      }
      return;
    case 0xE:
      sub_1000DFD3C((uint64_t)a1);
      return;
    case 0xF:
      sub_1000D03E4((uint64_t)a1);
      return;
    case 0x10:
      sub_1000CEC04((uint64_t)a1, *(void *)(*(void *)a2 + 32LL));
      return;
    case 0x11:
      sub_1000CEBA4((uint64_t)a1);
      return;
    case 0x12:
      sub_1000DE958((uint64_t)a1, *(unsigned int *)(*(void *)a2 + 324LL));
      return;
    case 0x13:
      sub_1000D0428((uint64_t)a1);
      return;
    case 0x14:
      sub_1000D16F4((uint64_t)a1, **(_DWORD **)(a2 + 16));
      return;
    case 0x15:
      sub_1000EB550( (uint64_t)a1,  *(unsigned int *)(*(void *)a2 + 1672LL),  (unsigned int *)(*(void *)a2 + 1680LL),  1u,  *(double *)(*(void *)a2 + 1688LL),  0LL);
      sub_1000EB550( (uint64_t)a1,  *(unsigned int *)(*(void *)v3 + 1672LL),  (unsigned int *)(*(void *)v3 + 1680LL),  1u,  *(double *)(*(void *)v3 + 1688LL),  *(const void **)(*(void *)v3 + 1664LL));
      return;
    case 0x16:
      sub_1000D1AEC((uint64_t)a1, *(const void **)(a2 + 16));
      return;
    case 0x17:
      sub_1000D5458((uint64_t)a1, *(_DWORD *)(*(void *)a2 + 312LL));
      return;
    case 0x18:
      sub_1000D5470((uint64_t)a1, *(unsigned int *)(*(void *)a2 + 612LL));
      return;
    case 0x19:
      sub_1000D7030((uint64_t)a1, *(_DWORD *)(*(void *)a2 + 308LL));
      return;
    case 0x1A:
      sub_1000D53B8((uint64_t)a1, *(_DWORD *)(a2 + 16));
      return;
    case 0x1B:
      sub_1000D6F9C((uint64_t)a1, *(_DWORD *)(*(void *)a2 + 648LL));
      return;
    case 0x1C:
      sub_1000D5214((uint64_t)a1, *(CFTypeRef *)(*(void *)a2 + 272LL), *(_DWORD *)(*(void *)a2 + 280LL));
      return;
    case 0x1D:
      sub_1000D6F70((uint64_t)a1, *(_BYTE *)(*(void *)a2 + 316LL));
      return;
    case 0x1E:
      sub_1000D6F88( a1,  *(_BYTE *)(*(void *)a2 + 317LL),  *(_BYTE *)(*(void *)a2 + 318LL),  *(_BYTE *)(*(void *)a2 + 319LL));
      return;
    case 0x1F:
      if (*(void *)a2) {
        sub_1000D7028((uint64_t)a1, *(unsigned __int8 *)(*(void *)a2 + 320LL));
      }
      return;
    case 0x20:
      sub_1000DBB14((uint64_t)a1, *(unsigned __int8 *)(*(void *)a2 + 1040LL), *(unsigned int **)(a2 + 16));
      return;
    case 0x21:
      sub_1000DBCC0( (uint64_t)a1,  *(unsigned __int8 *)(*(void *)a2 + 1043LL),  *(unsigned __int8 *)(*(void *)a2 + 1042LL),  *(unsigned __int8 *)(*(void *)a2 + 1044LL),  *(unsigned int **)(a2 + 16));
      return;
    case 0x22:
      sub_1000DD024( (uint64_t)a1,  **(unsigned __int8 **)(a2 + 16),  *(unsigned __int8 *)(*(void *)(a2 + 16) + 1LL),  *(unsigned __int8 *)(*(void *)(a2 + 16) + 2LL),  *(void **)(*(void *)(a2 + 16) + 8LL));
      return;
    case 0x23:
      sub_1000E6694((uint64_t)a1, *(_DWORD *)(*(void *)a2 + 284LL));
      return;
    case 0x24:
      sub_1000E66A0((uint64_t)a1, *(void *)(*(void *)a2 + 288LL), *(double *)(*(void *)a2 + 296LL));
      return;
    case 0x25:
      sub_1000D7038((uint64_t)a1, *(unsigned __int8 *)(*(void *)a2 + 336LL));
      return;
    case 0x26:
      unsigned int v22 = sub_1000DD8C4((uint64_t)a1, *(const __CFString **)(*(void *)a2 + 1048LL));
      goto LABEL_155;
    case 0x27:
      sub_1000DD3FC((uint64_t)a1, *(unsigned __int8 *)(*(void *)a2 + 1064LL));
      return;
    case 0x28:
      if (*(void *)a2) {
        sub_1000D54D8( (uint64_t *)a1,  *(unsigned __int8 *)(*(void *)a2 + 632LL),  *(const void **)(*(void *)a2 + 640LL));
      }
      return;
    case 0x29:
      sub_1000E90C8((uint64_t)a1, *(void *)a2 + 1216LL);
      return;
    case 0x2A:
      sub_1000E9174((uint64_t)a1, *(unsigned __int8 *)(*(void *)a2 + 1224LL));
      return;
    case 0x2B:
      sub_1000E91EC((uint64_t)a1);
      return;
    case 0x2C:
      sub_1000EBB80((uint64_t)a1);
      return;
    case 0x2D:
      if (*(void *)a2) {
        sub_1000D70DC((uint64_t)a1, *(unsigned __int8 *)(*(void *)a2 + 1809LL));
      }
      return;
    case 0x2F:
      unsigned int v23 = sub_1000DDDDC((uint64_t)a1);
      goto LABEL_160;
    case 0x30:
      unsigned int v23 = sub_1000DD47C((uint64_t)a1);
      goto LABEL_160;
    case 0x31:
      unsigned int v23 = sub_1000DD474((uint64_t)a1);
      goto LABEL_160;
    case 0x32:
      unsigned int v23 = sub_1000DD7A4((uint64_t)a1);
      goto LABEL_160;
    case 0x33:
      unsigned int v23 = sub_1000CF0F4((uint64_t)a1);
      goto LABEL_160;
    case 0x34:
      unsigned int v23 = sub_1000DC9D8((uint64_t)a1);
      goto LABEL_160;
    case 0x35:
      sub_1000DDD4C((uint64_t)a1, (CFStringRef *)(*(void *)a2 + 1048LL));
      return;
    case 0x36:
      if (*(void *)a2) {
        sub_1000E8474((uint64_t)a1, *(CFDictionaryRef *)(a2 + 16), 1);
      }
      return;
    case 0x37:
      if (*(void *)a2) {
        sub_1000E86EC((uint64_t)a1, **(_DWORD **)(a2 + 16));
      }
      return;
    case 0x38:
      if (*(void *)a2) {
        sub_1000E8774((uint64_t)a1, *(const __CFDictionary **)(a2 + 16));
      }
      return;
    case 0x39:
      sub_1000E62DC((uint64_t)a1, *(CFArrayRef *)(a2 + 16));
      return;
    case 0x3A:
      uint64_t v24 = *(void *)a2;
      if (*(void *)a2)
      {
        CFIndex v25 = *(int **)(a2 + 16);
        if (*v25 == -536870144) {
          uint64_t v26 = v24 + 353;
        }
        else {
          uint64_t v26 = 0LL;
        }
        sub_1000E9258((uint64_t)a1, v25, v26);
      }

      return;
    case 0x3B:
      sub_1000E96B0((uint64_t)a1, *(uint64_t **)(a2 + 16));
      return;
    case 0x3C:
      sub_1000EA014((uint64_t)a1, *(_DWORD *)(*(void *)a2 + 1240LL), *(double *)(*(void *)a2 + 1248LL));
      return;
    case 0x3D:
      sub_1000EA61C((uint64_t)a1);
      return;
    case 0x3F:
      unsigned int v23 = sub_1000DD4B4((uint64_t)a1);
      goto LABEL_160;
    case 0x40:
      if (*(void *)a2) {
        sub_1000EA844((uint64_t)a1, *(_DWORD *)(a2 + 16));
      }
      return;
    case 0x41:
      if (*(void *)a2) {
        sub_1000EA99C((uint64_t)a1, *(CFDictionaryRef *)(a2 + 16));
      }
      return;
    case 0x42:
      if (*(void *)a2)
      {
        sub_1000EB9A4((uint64_t)a1, *(unsigned __int8 *)(a2 + 12));
        sub_1000EBA08((uint64_t)a1, *(_DWORD *)(v3 + 16));
      }

      return;
    case 0x43:
      if (*(void *)a2)
      {
        sub_1000EBB1C((uint64_t)a1, *(CFArrayRef *)(a2 + 16));
        if (*(void *)(v3 + 16))
        {
          double v27 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: set policies %@", "__WiFiManagerDeviceManagerApplier", *(void *)(v3 + 16) message];
          }
          uint64_t v17 = v27;
LABEL_98:
          objc_autoreleasePoolPop(v17);
        }
      }

      return;
    case 0x44:
      sub_1000E6DF4((uint64_t)a1, *(unsigned int *)(a2 + 16));
      return;
    case 0x45:
      sub_1000ECC9C((uint64_t)a1, *(const void **)(a2 + 16), (uint64_t)sub_100084E4C, *(void *)a2);
      return;
    case 0x47:
      sub_1000EE990( (uint64_t)a1,  *(unsigned __int8 *)(a2 + 32),  **(unsigned int **)(a2 + 16),  **(unsigned int **)(a2 + 24));
      return;
    case 0x4A:
      sub_1000EF234((uint64_t)a1, *(unsigned __int8 *)(*(void *)a2 + 322LL));
      return;
    case 0x4D:
      if (*(void *)a2)
      {
        uint64_t v28 = *(void *)(a2 + 16);
        if (v28) {
          sub_1000DC1AC((uint64_t)a1, v28);
        }
      }

      return;
    case 0x4E:
      sub_1000DA728((uint64_t)a1);
      return;
    case 0x4F:
      sub_1000F0370((uint64_t)a1, **(unsigned __int8 **)(a2 + 16));
      return;
    case 0x50:
      sub_1000F02B4((uint64_t)a1);
      return;
    case 0x51:
      sub_1000D5088((uint64_t)a1, *(const void **)(a2 + 16));
      return;
    case 0x52:
      sub_1000EBD90((uint64_t)a1, *(const void **)(a2 + 16));
      return;
    case 0x53:
      sub_1000F0E8C((uint64_t)a1, **(unsigned __int8 **)(a2 + 16));
      return;
    case 0x54:
      unsigned int v22 = sub_1000F0F40((uint64_t)a1);
      goto LABEL_155;
    case 0x55:
      unsigned int v22 = sub_1000F0F50((uint64_t)a1);
      goto LABEL_155;
    case 0x56:
      unsigned int v22 = sub_1000F0F60((uint64_t)a1);
      goto LABEL_155;
    case 0x58:
      unsigned int v22 = sub_1000F0FB4((uint64_t)a1);
      goto LABEL_155;
    case 0x59:
      sub_1000EC2C0((uint64_t)a1, *(void **)(a2 + 16));
      return;
    case 0x5A:
      sub_1000F1574((uint64_t)a1, **(unsigned int **)(a2 + 16));
      return;
    case 0x5B:
      sub_1000F1644((uint64_t)a1, **(unsigned __int8 **)(a2 + 16));
      return;
    case 0x5C:
      a2 = **(unsigned __int8 **)(a2 + 16);
LABEL_26:
      nullsub_1(a1, a2, a3);
      return;
    case 0x5D:
      sub_1000F1704((uint64_t)a1, **(double **)(a2 + 16));
      return;
    case 0x62:
      sub_1000F2188((uint64_t)a1, *(void *)(a2 + 16));
      return;
    case 0x63:
      sub_1000F2390(a1, *(void *)(a2 + 16), *(double *)(a2 + 24), *(double *)(a2 + 32));
      return;
    case 0x64:
      sub_1000D3650((uint64_t)a1, **(const void ***)(a2 + 16));
      return;
    case 0x65:
      sub_1000F2480((uint64_t)a1, *(const __CFArray **)(a2 + 16));
      return;
    case 0x66:
      sub_1000D92D8(a1, *(const void **)(*(void *)a2 + 1072LL), *(CFTypeRef *)(*(void *)a2 + 1104LL));
      return;
    case 0x67:
      sub_1000F2B28((uint64_t)a1, **(unsigned __int8 **)(a2 + 16));
      return;
    case 0x68:
      sub_1000F2C88((uint64_t)a1, *(const void **)(a2 + 16));
      return;
    case 0x69:
      sub_1000ED82C((uint64_t)a1, *(const void **)(a2 + 16), (uint64_t)sub_100085568, *(void *)a2);
      return;
    case 0x6A:
      sub_1000D9528((uint64_t *)a1, *(CFTypeRef *)(a2 + 16));
      return;
    case 0x6B:
      if (!*(void *)a2) {
        return;
      }
      unsigned int v23 = sub_1000EBA5C((uint64_t)a1);
LABEL_160:
      uint64_t v20 = v23;
LABEL_161:
      uint64_t v29 = *(void *)(v3 + 24) | v20;
LABEL_162:
      *(void *)(v3 + 24) = v29;
      return;
    case 0x6C:
      sub_1000D51C4((uint64_t)a1, *(void *)(a2 + 16));
      return;
    case 0x6D:
      sub_1000F3FFC((uint64_t)a1, *(_DWORD *)(*(void *)a2 + 672LL));
      return;
    case 0x6F:
      sub_1000D5284((uint64_t)a1, **(unsigned __int8 **)(a2 + 16));
      return;
    case 0x70:
      if (*(void *)a2) {
        sub_1000F4030((uint64_t)a1, *(const __CFDictionary **)(a2 + 16));
      }
      return;
    case 0x71:
      sub_1000EC0CC((uint64_t)a1, *(const void **)(a2 + 16));
      return;
    case 0x72:
      sub_1000F2BD8((uint64_t)a1, **(unsigned __int8 **)(a2 + 16));
      return;
    case 0x73:
      sub_1000F4820((uint64_t)a1);
      return;
    case 0x75:
      sub_1000F4E5C((uint64_t)a1, *(_BYTE *)(*(void *)a2 + 1981LL));
      return;
    case 0x76:
      sub_1000D9460((uint64_t)a1, *(unsigned __int8 *)(*(void *)a2 + 1112LL));
      return;
    case 0x77:
      sub_1000D97E0((uint64_t)a1, **(unsigned __int8 **)(a2 + 16));
      return;
    case 0x78:
      sub_1000F5030((uint64_t)a1, **(unsigned __int8 **)(a2 + 16));
      return;
    case 0x79:
      sub_1000E98CC((uint64_t)a1, *(unsigned __int8 *)(*(void *)a2 + 1256LL));
      return;
    case 0x7A:
      sub_1000CFB58((uint64_t)a1, **(void **)(a2 + 16));
      return;
    case 0x7B:
      sub_1000F6C74((uint64_t)a1, **(void **)(a2 + 16));
      return;
    case 0x7C:
      sub_1000F7028((uint64_t)a1, **(unsigned __int8 **)(a2 + 16));
      return;
    case 0x7D:
      sub_1000F70C4((uint64_t)a1);
      return;
    case 0x7E:
      sub_1000E9C80((uint64_t)a1, *(unsigned int **)(a2 + 16));
      return;
    case 0x7F:
      sub_1000D52F8((uint64_t)a1, *(CFTypeRef *)(*(void *)a2 + 624LL));
      return;
    case 0x80:
      sub_1000E99B8((uint64_t)a1, *(const __CFString ***)(a2 + 16));
      return;
    case 0x81:
      sub_1000F7130((uint64_t)a1, *(unsigned __int8 *)(a2 + 24));
      return;
    case 0x82:
      sub_1000F7228((uint64_t)a1, *(void *)(a2 + 16));
      return;
    case 0x83:
      unsigned int v22 = sub_1000F7890((uint64_t)a1);
LABEL_155:
      uint64_t v29 = v22;
      goto LABEL_162;
    case 0x85:
      sub_1000F8F9C((uint64_t)a1, *(const __CFDictionary **)(a2 + 16));
      return;
    case 0x86:
      sub_1000F9420((uint64_t)a1, *(const __CFDictionary **)(a2 + 16));
      return;
    case 0x87:
      unsigned int v23 = sub_1000F97B8((uint64_t)a1);
      goto LABEL_160;
    case 0x88:
      unsigned int v23 = sub_1000CF6DC((uint64_t)a1);
      goto LABEL_160;
    case 0x89:
      sub_1000DA50C((uint64_t)a1);
      return;
    case 0x8A:
      sub_1000DA664((uint64_t)a1);
      return;
    case 0x8B:
      sub_1000F97C8((uint64_t)a1, **(_BYTE **)(a2 + 16));
      return;
    default:
      return;
  }

void sub_100067864(uint64_t a1, uint64_t a2)
{
  dispatch_time_t v4 = objc_autoreleasePoolPush();
  unsigned int v5 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: entering", "WiFiManagerScheduleWithQueue");
  }
  objc_autoreleasePoolPop(v5);
  if (a1)
  {
    *(void *)(a1 + 32) = a2;
    sub_10003A250(a2);
    if (*(_BYTE *)(a1 + 16))
    {
      objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "setWiFiManager:",  a1);
      objc_msgSend(+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"), "activate");
      [*(id *)(a1 + 944) activate];
      sub_100063560(a1);
      sub_100063998(a1, *(const __CFArray **)(a1 + 232));
      *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = sub_1000AF1BC(*(void *)(a1 + 80), a2);
      uint64_t v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WFMacRandomisation : DEBUG buddy completed check is done. result is : <%hhu>",  "WiFiManagerScheduleWithQueue",  -[WiFiUserInteractionMonitor isSetupCompleted]( +[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance"),  "isSetupCompleted"));
      }
      objc_autoreleasePoolPop(v6);
      if (*(_DWORD *)(a1 + 112) != 7)
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_100068818;
        block[3] = &unk_1001E2620;
        void block[4] = a1;
        dispatch_async((dispatch_queue_t)qword_100219F80, block);
      }

      -[WiFiManagerAnalytics setWiFiManagerQueue:]( +[WiFiManagerAnalytics sharedInstance](&OBJC_CLASS___WiFiManagerAnalytics, "sharedInstance"),  "setWiFiManagerQueue:",  *(void *)(a1 + 32));
      objc_msgSend( +[WiFiAnalyticsManager sharedWiFiAnalyticsManager]( WiFiAnalyticsManager,  "sharedWiFiAnalyticsManager"),  "setWiFiManager:",  a1);
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver( DarwinNotifyCenter,  (const void *)a1,  (CFNotificationCallback)sub_100068FF0,  @"com.apple.mobile.keybagd.lock_status",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
      sub_10006910C(a1);
      else {
        BOOL v8 = 1LL;
      }
      sub_100069200(a1, v8, 1);
      sub_10005D74C((void *)a1);
      uint64_t v10 = *(dispatch_queue_s **)(a1 + 32);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472LL;
      handler[2] = sub_10006986C;
      handler[3] = &unk_1001E41D0;
      handler[4] = a1;
      notify_register_dispatch("com.apple.MCX._managementStatusChangedForDomains", (int *)(a1 + 728), v10, handler);
      sub_10012FA18();
      int v11 = *(dispatch_queue_s **)(a1 + 32);
      v51[0] = _NSConcreteStackBlock;
      v51[1] = 3221225472LL;
      v51[2] = sub_10006987C;
      v51[3] = &unk_1001E41D0;
      v51[4] = a1;
      notify_register_dispatch("com.apple.iokit.hid.displayStatus", (int *)(a1 + 680), v11, v51);
      sub_100069890(a1, 1);
      uint64_t v12 = *(dispatch_queue_s **)(a1 + 32);
      v50[0] = _NSConcreteStackBlock;
      v50[1] = 3221225472LL;
      v50[2] = sub_100069B28;
      v50[3] = &unk_1001E41D0;
      v50[4] = a1;
      notify_register_dispatch("com.apple.symptoms.celloutrankrecommendation", (int *)(a1 + 2032), v12, v50);
      if (!notify_is_valid_token(*(_DWORD *)(a1 + 2032)))
      {
        uint64_t v13 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:4 message:"Failed to notify_register_dispatch com.apple.symptoms.celloutrankrecommendation"];
        }
        objc_autoreleasePoolPop(v13);
      }

      sub_100069B34(a1, 1);
      BOOL v14 = objc_autoreleasePoolPush();
      CFIndex v15 = -[WiFiBatteryManager initWithContext:](objc_alloc(&OBJC_CLASS___WiFiBatteryManager), "initWithContext:", a1);
      *(void *)(a1 + 2040) = v15;
      double v16 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        if (v15) {
          uint64_t v17 = "%s: WiFiBatteryMgmt batteryManager alloced and inited ";
        }
        else {
          uint64_t v17 = "%s: WiFiBatteryMgmt No Battery Power Manager support from CoreOS. WiFi will default to full throttle.";
        }
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, v17, "WiFiManagerScheduleWithQueue");
      }

      objc_autoreleasePoolPop(v16);
      objc_autoreleasePoolPop(v14);
      context.versioint n = 0LL;
      memset(&context.retain, 0, 24);
      context.info = (void *)a1;
      SCDynamicStoreRef v18 = SCDynamicStoreCreate( kCFAllocatorDefault,  @"WiFiManager",  (SCDynamicStoreCallBack)sub_100085AAC,  &context);
      *(void *)(a1 + 72) = v18;
      if (v18)
      {
        sub_100085D44(a1);
        if (SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(a1 + 72), *(dispatch_queue_t *)(a1 + 32)))
        {
          if (SCDynamicStoreSetDisconnectCallBack(*(void *)(a1 + 72), sub_100085DF0))
          {
            sub_100085AAC(*(const __SCDynamicStore **)(a1 + 72), 0LL, (const __CFArray *)a1);
            if (!*(void *)(a1 + 816))
            {
              IONotificationPortRef v19 = IONotificationPortCreate(dword_100219910);
              *(void *)(a1 + 816) = v19;
              if (!v19)
              {
                CFTypeID v47 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: IONotificationPortCreate failed",  "WiFiManagerScheduleWithQueue");
                }
                goto LABEL_106;
              }

              uint64_t v20 = v19;
              uint64_t v21 = (const __CFDictionary *)CFRetain(&off_1002057C0);
              if (IOServiceAddMatchingNotification( v20,  "IOServiceMatched",  v21,  (IOServiceMatchingCallback)sub_100069CA4,  (void *)a1,  (io_iterator_t *)(a1 + 824)))
              {
                CFTypeID v47 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: IOServiceAddMatchingNotification IO80211SkywalkInterface failed",  "WiFiManagerScheduleWithQueue");
                }
                goto LABEL_106;
              }

              sub_100069CA4(a1, *(_DWORD *)(a1 + 824));
              unsigned int v22 = *(IONotificationPort **)(a1 + 816);
              unsigned int v23 = IOServiceMatching("IOPMPowerSource");
              if (IOServiceAddMatchingNotification( v22,  "IOServiceFirstMatch",  v23,  (IOServiceMatchingCallback)sub_100069D8C,  (void *)a1,  (io_iterator_t *)(a1 + 832)))
              {
                CFTypeID v47 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: IOServiceAddMatchingNotification IOPMPowerSource failed",  "WiFiManagerScheduleWithQueue");
                }
                goto LABEL_106;
              }

              sub_100069D8C(a1, *(_DWORD *)(a1 + 832));
            }

            if (!*(void *)(a1 + 856))
            {
              io_connect_t v24 = IORegisterForSystemPower( (void *)a1,  (IONotificationPortRef *)(a1 + 856),  (IOServiceInterestCallback)sub_100069E2C,  (io_object_t *)(a1 + 864));
              *(_DWORD *)(a1 + 86_Block_object_dispose(va, 8) = v24;
              if (!v24)
              {
                CFIndex v25 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: IORegisterForSystemPower failed",  "WiFiManagerScheduleWithQueue");
                }
                objc_autoreleasePoolPop(v25);
              }
            }

            if (*(_DWORD *)(a1 + 868) && *(void *)(a1 + 856))
            {
              IONotificationPortSetDispatchQueue(*(IONotificationPortRef *)(a1 + 816), *(dispatch_queue_t *)(a1 + 32));
              IONotificationPortSetDispatchQueue(*(IONotificationPortRef *)(a1 + 856), *(dispatch_queue_t *)(a1 + 32));
            }

            uint64_t v26 = *(dispatch_object_s **)(a1 + 744);
            if (v26) {
              dispatch_activate(v26);
            }
            double v27 = *(dispatch_object_s **)(a1 + 1640);
            if (v27) {
              dispatch_activate(v27);
            }
            *(void *)(a1 + 1632) = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
            *(void *)(a1 + 1664) = CFStringCreateWithCString(kCFAllocatorDefault, "www.apple.com", 1u);
            *(void *)(a1 + 1672) = 1LL;
            *(void *)(a1 + 1680) = 1400LL;
            *(void *)(a1 + 168_Block_object_dispose(va, 8) = 0x4008000000000000LL;
            if (SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 912), *(dispatch_queue_t *)(a1 + 32)))
            {
              if (SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 920), *(dispatch_queue_t *)(a1 + 32)))
              {
                if (SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 936), *(dispatch_queue_t *)(a1 + 32)))
                {
                  if (SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 928), *(dispatch_queue_t *)(a1 + 32)))
                  {
                    if (&_BTSessionAttachWithQueue)
                    {
                      context.versioint n = (CFIndex)sub_10006A2E8;
                      uint64_t v28 = BTSessionAttachWithQueue("com.apple.wifi.manager", &context, a1, qword_100219F80);
                      if ((_DWORD)v28)
                      {
                        uint64_t v29 = v28;
                        CFTypeID v30 = objc_autoreleasePoolPush();
                        if (qword_100219F60) {
                          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Unable to attach to Mobile Bluetooth result=0x%X",  "WiFiManagerScheduleWithQueue",  v29);
                        }
                        objc_autoreleasePoolPop(v30);
                      }
                    }

                    v49[0] = a1;
                    v49[1] = 0xAAAAAAAA00000002LL;
                    v49[2] = 0LL;
                    v49[3] = 1LL;
                    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v49);
                    if (*(_DWORD *)(a1 + 324) == 1)
                    {
                      BOOL v31 = objc_autoreleasePoolPush();
                      if (qword_100219F60) {
                        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: registering with coex manager",  "WiFiManagerScheduleWithQueue");
                      }
                      objc_autoreleasePoolPop(v31);
                      sub_100145508(a1);
                    }

                    CFNumberRef v32 = *(dispatch_object_s **)(a1 + 1168);
                    if (v32) {
                      dispatch_activate(v32);
                    }
                    CFStringRef v33 = *(dispatch_object_s **)(a1 + 1192);
                    if (v33) {
                      dispatch_activate(v33);
                    }
                    int v34 = *(dispatch_object_s **)(a1 + 2080);
                    if (v34) {
                      dispatch_activate(v34);
                    }
                    sub_10006A668(a1);
                    __int128 v35 = *(dispatch_object_s **)(a1 + 1264);
                    if (v35) {
                      dispatch_activate(v35);
                    }
                    unsigned int v36 = *(dispatch_object_s **)(a1 + 1304);
                    if (v36) {
                      dispatch_activate(v36);
                    }
                    CFDateRef v37 = *(dispatch_object_s **)(a1 + 1344);
                    if (v37) {
                      dispatch_activate(v37);
                    }
                    CFDateRef v38 = *(dispatch_object_s **)(a1 + 784);
                    if (v38) {
                      dispatch_activate(v38);
                    }
                    *(void *)(a1 + 1496) = -[WiFiSoftErrorManager initWithWiFiManager:queue:]( objc_alloc(&OBJC_CLASS___WiFiSoftErrorManager),  "initWithWiFiManager:queue:",  a1,  *(void *)(a1 + 32));
                    *(void *)(a1 + 1504) = sub_10006A76C((void *)a1, (uint64_t)@"SlowWiFi");
                    *(void *)(a1 + 1512) = sub_10006A76C((void *)a1, (uint64_t)@"Dps");
                    *(void *)(a1 + 152_Block_object_dispose(va, 8) = sub_10006A76C((void *)a1, (uint64_t)@"CountryCode");
                    *(void *)(a1 + 1536) = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  &stru_1001EB6E0);
                    double v39 = sub_10006A880((void *)a1, @"SoftErrorUIReportingTimeout", 86400.0);
                    if (sub_10013BA24()
                      || [*(id *)(a1 + 952) containsObject:@"wlan.dk=1"])
                    {
                      uint64_t v40 = 200LL;
                      uint64_t v41 = 12LL;
                    }

                    else
                    {
                      uint64_t v40 = 100LL;
                      uint64_t v41 = 2LL;
                    }

                    if (v39 < 0.0) {
                      double v39 = 86400.0;
                    }
                    v55[0] = @"maxUIActions";
                    context.versioint n = (CFIndex)+[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  v41);
                    v55[1] = @"intervalForMaxUIActions";
                    context.info = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v39);
                    v55[2] = @"maxOccurrences";
                    BOOL v42 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v40);
                    v55[3] = @"metricSubmissionSamplingRate";
                    context.retaiint n = (const void *(__cdecl *)(const void *))v42;
                    context.release = (void (__cdecl *)(const void *))&off_1002046E0;
                    *(void *)(a1 + 160_Block_object_dispose(va, 8) = -[WiFiSoftError initWithName:andParams:]( objc_alloc(&OBJC_CLASS___WiFiSoftError),  "initWithName:andParams:",  @"Dext Crashed",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &context,  v55,  4LL));
                    *(void *)(a1 + 2216) = sub_10006A76C((void *)a1, (uint64_t)@"Missing Password");
                    *(void *)(a1 + 1544) = +[WiFiDriverTriggeredTTR sharedWiFiDriverTriggeredTTRManagerwithStringRef:withInterval:]( &OBJC_CLASS___WiFiDriverTriggeredTTR,  "sharedWiFiDriverTriggeredTTRManagerwithStringRef:withInterval:",  @"Driver triggered TTR",  sub_10006A880( (void *)a1,  @"SoftErrorUIReportingTimeout",  86400.0));
                    [*(id *)(a1 + 1744) scheduleWithQueue:*(void *)(a1 + 32)];
                    *(void *)(a1 + 64) = -[WiFiManagerHomeHub initWithManager:queue:callback:]( objc_alloc(&OBJC_CLASS___WiFiManagerHomeHub),  "initWithManager:queue:callback:",  a1,  *(void *)(a1 + 32),  sub_10006A8EC);
                    uint64_t v43 = sub_10006AA50((void *)a1, @"LocaleTestParams");
                    sub_10006A9A0(a1, v43);
                    *(_BYTE *)(a1 + 2132) = 0;
                    *(_DWORD *)(a1 + 212_Block_object_dispose(va, 8) = -1;
                    *(void *)(a1 + 2152) = 0LL;
                    *(void *)(a1 + 216_Block_object_dispose(va, 8) = 0LL;
                    *(_BYTE *)(a1 + 2160) = 0;
                    -[WiFiUserInteractionMonitor registerStateChangeCallback:withCallbackContext:]( +[WiFiUserInteractionMonitor sharedInstance]( &OBJC_CLASS___WiFiUserInteractionMonitor,  "sharedInstance"),  "registerStateChangeCallback:withCallbackContext:",  &stru_1001E41F0,  a1);
                    [*(id *)(a1 + 200) determineAndSetLocale:0];
                    if (!byte_100219FA0)
                    {
                      v48[0] = _NSConcreteStackBlock;
                      v48[1] = 3221225472LL;
                      v48[2] = sub_10006B0E0;
                      v48[3] = &unk_1001E2620;
                      v48[4] = a1;
                      dispatch_async((dispatch_queue_t)qword_100219F80, v48);
                    }

                    goto LABEL_80;
                  }

                  CFTypeID v47 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: SCPreferencesSetDispatchQueue preferences.radios failed",  "WiFiManagerScheduleWithQueue");
                  }
                }

                else
                {
                  CFTypeID v47 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: SCPreferencesSetDispatchQueue preferences.wifiPrivateMacNetworks failed",  "WiFiManagerScheduleWithQueue");
                  }
                }
              }

              else
              {
                CFTypeID v47 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: SCPreferencesSetDispatchQueue preferences.wifiNetworks failed",  "WiFiManagerScheduleWithQueue");
                }
              }
            }

            else
            {
              CFTypeID v47 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: SCPreferencesSetDispatchQueue preferences.wifi failed",  "WiFiManagerScheduleWithQueue");
              }
            }

LABEL_106:
            objc_autoreleasePoolPop(v47);
LABEL_80:
            uint64_t v9 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: exiting", "WiFiManagerScheduleWithQueue");
            }
            goto LABEL_82;
          }

          CFIndex v44 = objc_autoreleasePoolPush();
          CFTypeID v45 = (void *)qword_100219F60;
          if (!qword_100219F60)
          {
LABEL_90:
            objc_autoreleasePoolPop(v44);
            sub_10006B464(a1);
            CFTypeID v47 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Error: __WiFiManagerRegisterDynamicStore failed",  "WiFiManagerScheduleWithQueue");
            }
            goto LABEL_106;
          }

          CFTypeID v46 = "Error subscribing to the dynamic store disconnect event.";
        }

        else
        {
          CFIndex v44 = objc_autoreleasePoolPush();
          CFTypeID v45 = (void *)qword_100219F60;
          if (!qword_100219F60) {
            goto LABEL_90;
          }
          CFTypeID v46 = "Error setting dynamic store queue.";
        }
      }

      else
      {
        CFIndex v44 = objc_autoreleasePoolPush();
        CFTypeID v45 = (void *)qword_100219F60;
        if (!qword_100219F60) {
          goto LABEL_90;
        }
        CFTypeID v46 = "Error creating dynamic store.";
      }

      [v45 WFLog:4 message:v46];
      goto LABEL_90;
    }

    uint64_t v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: exiting, Error: not open",  "WiFiManagerScheduleWithQueue");
    }
  }

  else
  {
    uint64_t v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: exiting, Error: manager NULL",  "WiFiManagerScheduleWithQueue");
    }
  }

LABEL_82:
  objc_autoreleasePoolPop(v9);
  objc_autoreleasePoolPop(v4);
}

              if ([a2 containsObject:&off_100204980])
              {
                else {
                  CFStringRef v33 = &__kCFBooleanTrue;
                }
                [v9 setObject:v33 forKeyedSubscript:@"enabled"];
              }

              goto LABEL_93;
            }

          BOOL v2 = v64;
          double v39 = v67;
LABEL_83:
          char v48 = *(const __CFArray **)(a1 + 3584);
          if (CFArrayGetCount(v48) > 179) {
            v49.length = 180LL;
          }
          else {
            v49.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 3584));
          }
          v49.CFIndex location = 0LL;
          CFArrayAppendArray(Mutable, v48, v49);
          if (!CFEqual(Mutable, *(CFTypeRef *)(a1 + 3576)) || v40)
          {
            CFDictionaryRef v51 = sub_1000DAF8C(a1, Mutable);
            if (!v51) {
              goto LABEL_92;
            }
            int v52 = *(void *)(a1 + 64);
            unsigned int v53 = (const void *)sub_100043E8C(v52);
            unsigned int v54 = sub_10004D714(v52, v53, (uint64_t)v51);
            if ((_DWORD)v54)
            {
              CFTypeID v30 = v54;
              dispatch_time_t v55 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "__WiFiDeviceSetBackgroundScan returned err=%d",  v30);
              }
              objc_autoreleasePoolPop(v55);
              if (!Mutable) {
                goto LABEL_103;
              }
            }

            else
            {
              CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 3576));
              BOOL v59 = *(__CFArray **)(a1 + 3576);
              v74.length = CFArrayGetCount(Mutable);
              v74.CFIndex location = 0LL;
              CFArrayAppendArray(v59, Mutable, v74);
              sub_1000DB930(a1);
              CFTypeID v30 = 0LL;
              if (!Mutable) {
                goto LABEL_103;
              }
            }
          }

          else
          {
            if (*(unsigned __int8 *)(a1 + 5448) == *(unsigned __int8 *)(a1 + 5449))
            {
              CFIndex v50 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "No Change in Background Scan Networks, Skip Re-Programming Background Scan\n");
              }
              objc_autoreleasePoolPop(v50);
              CFDictionaryRef v51 = 0LL;
LABEL_92:
              CFTypeID v30 = 4294963396LL;
              if (!Mutable) {
                goto LABEL_103;
              }
              goto LABEL_102;
            }

            CFDictionaryRef v51 = sub_1000DAF8C(a1, Mutable);
            if (!v51) {
              goto LABEL_92;
            }
            char v56 = *(void *)(a1 + 64);
            uint64_t v57 = (const void *)sub_100043E8C(v56);
            CFTypeID v30 = sub_10004D714(v56, v57, (uint64_t)v51);
            if (!Mutable)
            {
LABEL_103:
              if (v51) {
                CFRelease(v51);
              }
              if (v39) {
                CFRelease(v39);
              }
              goto LABEL_107;
            }
          }

        sub_10010FD10(a1, v8);
        goto LABEL_83;
      }
    }

    else
    {
      BOOL v8 = 0LL;
      if (!Mutable) {
        goto LABEL_81;
      }
    }

    CFRelease(Mutable);
    goto LABEL_81;
  }

  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: did not try location based logic last time and don't have valid location to try now",  "__WiFiDeviceManagerAttemptNetworkTransition");
  }
  objc_autoreleasePoolPop(v24);
  if (v11) {
    CFRelease(v11);
  }
LABEL_83:
  objc_autoreleasePoolPop(v4);
}

void sub_100068478(uint64_t a1, int a2)
{
  int v5 = a2;
  if (a1)
  {
    uint64_t v3 = *(const void **)(a1 + 32);
    if (v3) {
      sub_1000684E8(a1, v3);
    }
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000011LL;
    context[2] = &v5;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    *(_BYTE *)(a1 + 16) = 0;
  }

void sub_1000684E8(uint64_t a1, const void *a2)
{
  dispatch_time_t v4 = objc_autoreleasePoolPush();
  int v5 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: entering", "WiFiManagerUnscheduleFromQueue");
  }
  objc_autoreleasePoolPop(v5);
  if (a1)
  {
    if (a2 && (uint64_t v6 = *(const void **)(a1 + 32)) != 0LL)
    {
      if (CFEqual(v6, a2))
      {
        sub_1000AF270(*(void *)(a1 + 80));
        objc_msgSend(+[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"), "invalidate");
        [*(id *)(a1 + 944) invalidate];
        context[0] = a1;
        context[1] = 0xAAAAAAAA00000010LL;
        context[2] = 0LL;
        void context[3] = 1LL;
        CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
        SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 928), 0LL);
        SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 920), 0LL);
        SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 936), 0LL);
        SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 912), 0LL);
        *(void *)(a1 + 872) = 0LL;
        sub_10012FD40();
        unsigned int v7 = *(dispatch_source_s **)(a1 + 1344);
        if (v7) {
          dispatch_source_cancel(v7);
        }
        BOOL v8 = *(dispatch_source_s **)(a1 + 1304);
        if (v8) {
          dispatch_source_cancel(v8);
        }
        uint64_t v9 = *(dispatch_source_s **)(a1 + 1264);
        if (v9) {
          dispatch_source_cancel(v9);
        }
        uint64_t v10 = *(dispatch_source_s **)(a1 + 1168);
        if (v10) {
          dispatch_source_cancel(v10);
        }
        int v11 = *(dispatch_source_s **)(a1 + 1640);
        if (v11) {
          dispatch_source_cancel(v11);
        }
        uint64_t v12 = *(dispatch_source_s **)(a1 + 744);
        if (v12) {
          dispatch_source_cancel(v12);
        }
        uint64_t v13 = *(dispatch_source_s **)(a1 + 1192);
        if (v13) {
          dispatch_source_cancel(v13);
        }
        BOOL v14 = *(dispatch_source_s **)(a1 + 2080);
        if (v14) {
          dispatch_source_cancel(v14);
        }
        CFIndex v15 = *(dispatch_source_s **)(a1 + 784);
        if (v15) {
          dispatch_source_cancel(v15);
        }
        int v16 = *(_DWORD *)(a1 + 680);
        if (v16) {
          notify_cancel(v16);
        }
        int v17 = *(_DWORD *)(a1 + 728);
        if (v17) {
          notify_cancel(v17);
        }
        sub_10006B464(a1);
        if (*(_DWORD *)(a1 + 868))
        {
          IODeregisterForSystemPower((io_object_t *)(a1 + 868));
          IOServiceClose(*(_DWORD *)(a1 + 868));
          *(_DWORD *)(a1 + 86_Block_object_dispose(va, 8) = 0;
        }

        DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterRemoveObserver(DarwinNotifyCenter, 0LL, @"SignificantTimeChangeNotification", 0LL);
        IONotificationPortRef v19 = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterRemoveObserver(v19, 0LL, @"com.apple.mobile.keybagd.lock_status", 0LL);
        sub_100145894((xpc_object_t *)(a1 + 1152));
        if (&WiFiCloudSyncEngineCreate)
        {
          uint64_t v20 = *(void *)(a1 + 1136);
          if (v20) {
            WiFiCloudSyncEngineUnScheduleWithQueue(v20, qword_100219F88);
          }
        }

        *(void *)(a1 + 64) = 0LL;
        sub_10006B4A0(a1);
        [*(id *)(a1 + 1744) unscheduleFromQueue:*(void *)(a1 + 32)];
        [*(id *)(a1 + 1856) unscheduleFromQueue:*(void *)(a1 + 32)];
        uint64_t v21 = *(const void **)(a1 + 1664);
        if (v21)
        {
          CFRelease(v21);
          *(void *)(a1 + 1664) = 0LL;
        }

        -[WiFiUserInteractionMonitor unregisterStateChangeCallback:]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "unregisterStateChangeCallback:",  a1);
        *(void *)(a1 + 32) = 0LL;
        unsigned int v22 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: exiting", "WiFiManagerUnscheduleFromQueue");
        }
      }

      else
      {
        unsigned int v22 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: exiting, Error: queue mismatch",  "WiFiManagerUnscheduleFromQueue");
        }
      }
    }

    else
    {
      unsigned int v22 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: exiting, Error: no queue",  "WiFiManagerUnscheduleFromQueue");
      }
    }
  }

  else
  {
    unsigned int v22 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: exiting, Error: manager NULL",  "WiFiManagerUnscheduleFromQueue");
    }
  }

  objc_autoreleasePoolPop(v22);
  objc_autoreleasePoolPop(v4);
}

void sub_100068818(uint64_t a1)
{
  id v2 = +[WiFiAppStateManager sharedWiFiAppStateManager](&OBJC_CLASS___WiFiAppStateManager, "sharedWiFiAppStateManager");
  if (v2)
  {
    *(void *)(*(void *)(a1 + 32) + 1856LL) = v2;
    objc_msgSend(v2, "registerCallbackFunctionPtr:withContext:", sub_100068928);
    if (sub_100068AB0(*(void *)(a1 + 32)))
    {
      objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1856),  "registerBundleCallbackFunctionPtr:withContext:",  sub_100068B1C);
      [*(id *)(*(void *)(a1 + 32) + 1856) startMonitoringBundleId:@"com.apple.Preferences"];
    }

    objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1856),  "registerForegroundAppTrackerFunctionPtr:withContext:",  sub_100068BD8);
    objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1856),  "registerAppReporterCallbackFunctionPtr:withContext:",  sub_100068CD0);
    objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1856),  "registerAppUnregistrationFunctionPtr:withContext:",  sub_100068D68);
    [*(id *)(*(void *)(a1 + 32) + 1856) scheduleWithQueue:*(void *)(*(void *)(a1 + 32) + 32)];
  }

  else
  {
    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s:%d manager->appStateManager is NULL ",  "WiFiManagerScheduleWithQueue_block_invoke",  4804);
    }
    objc_autoreleasePoolPop(v3);
  }

void sub_100068928(uint64_t a1, int a2, const __CFString *a3)
{
  if (a1)
  {
    uint64_t v6 = *(void *)(a1 + 656);
    switch(a2)
    {
      case 1:
        unint64_t v7 = v6 | 1;
        if (a3)
        {
          BOOL v8 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: %@ is in foreground.", "__WiFiManagerAppStateManagerCallback", a3 message];
          }
          objc_autoreleasePoolPop(v8);
        }

        goto LABEL_14;
      case 2:
        if ((v6 & 1) != 0)
        {
          uint64_t v9 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: no more foreground app.",  "__WiFiManagerAppStateManagerCallback");
          }
          objc_autoreleasePoolPop(v9);
        }

        unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
        goto LABEL_14;
      case 4:
        unint64_t v7 = v6 | 2;
        goto LABEL_14;
      case 8:
        unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFDLL;
LABEL_14:
        *(void *)(a1 + 656) = v7;
        sub_100070E18(a1, v6);
        sub_100083E4C(a1, a3, a2);
        break;
      default:
        return;
    }
  }

  else
  {
    uint64_t v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null manager",  "__WiFiManagerAppStateManagerCallback");
    }
    objc_autoreleasePoolPop(v10);
  }

uint64_t sub_100068AB0(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 1864);
  }
  id v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: manager ref is null",  "WiFiManagerGetAvailabilityEngineIsEnabled");
  }
  objc_autoreleasePoolPop(v2);
  return 0LL;
}

void sub_100068B1C(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1)
  {
    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null manager",  "__WiFiManagerAppStateManagerBundleIdCallback");
    }
    goto LABEL_10;
  }

  if (!*(_BYTE *)(a1 + 1864))
  {
    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: availabilty engine v2 is not enabed",  "__WiFiManagerAppStateManagerBundleIdCallback");
    }
LABEL_10:
    objc_autoreleasePoolPop(v3);
    return;
  }

  if (a3 == 8) {
    sub_1000826B4((id *)a1);
  }
}

void sub_100068BD8(uint64_t a1, CFTypeRef cf)
{
  uint64_t v7 = 0LL;
  BOOL v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  uint64_t v10 = 0LL;
  if (a1)
  {
    if (cf)
    {
      CFTypeRef v3 = CFRetain(cf);
      void v8[3] = (uint64_t)v3;
    }

    dispatch_time_t v4 = *(dispatch_queue_s **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10008F050;
    block[3] = &unk_1001E2D48;
    void block[4] = &v7;
    void block[5] = a1;
    dispatch_async(v4, block);
  }

  else
  {
    int v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null manager",  "__WiFiManagerForegroundAppChangeCallback");
    }
    objc_autoreleasePoolPop(v5);
  }

  _Block_object_dispose(&v7, 8);
}

void sub_100068CB8(_Unwind_Exception *a1)
{
}

void sub_100068CD0(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    context[0] = a1;
    context[1] = 0xAAAAAAAA0000006CLL;
    context[2] = a2;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
  }

  else
  {
    id v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null manager",  "__WiFiManagerAppStateManagerAppReporterCallback");
    }
    objc_autoreleasePoolPop(v2);
  }

void sub_100068D68(uint64_t a1, void *a2)
{
  if (a1)
  {
    CFTypeRef v3 = sub_10006CA28(a1);
    if (v3)
    {
      dispatch_time_t v4 = v3;
      CFIndex Count = CFArrayGetCount(v3);
      if (Count >= 1)
      {
        CFIndex v5 = 0LL;
        SCDynamicStoreRef v18 = v4;
        do
        {
          CFIndex v20 = v5;
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(v4, v5);
          if (ValueAtIndex)
          {
            uint64_t v7 = ValueAtIndex;
            BOOL v8 = (const __CFString *)sub_10009ECAC((uint64_t)ValueAtIndex);
            id v9 = [a2 objectForKeyedSubscript:@"bundleIDs"];
            __int128 v21 = 0u;
            __int128 v22 = 0u;
            __int128 v23 = 0u;
            __int128 v24 = 0u;
            id v10 = [v9 countByEnumeratingWithState:&v21 objects:v25 count:16];
            if (v10)
            {
              id v11 = v10;
              uint64_t v12 = *(void *)v22;
              do
              {
                for (CFIndex i = 0LL; i != v11; CFIndex i = (char *)i + 1)
                {
                  if (*(void *)v22 != v12) {
                    objc_enumerationMutation(v9);
                  }
                  if (v8
                    && CFStringCompare(v8, *(CFStringRef *)(*((void *)&v21 + 1) + 8LL * (void)i), 0LL) == kCFCompareEqualTo
                    && sub_10009EE28((uint64_t)v7) == 1)
                  {
                    if (sub_100096670((uint64_t)v7) && sub_10009F9B8((uint64_t)v7))
                    {
                      BOOL v14 = objc_autoreleasePoolPush();
                      if (qword_100219F60) {
                        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: can't remove network as its type Home or Work",  "__WiFiAppStateManagerAppUnregisteredCallbackFunctionPtr");
                      }
                      objc_autoreleasePoolPop(v14);
                    }

                    else
                    {
                      CFIndex v15 = objc_autoreleasePoolPush();
                      if (qword_100219F60) {
                        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: removing network",  "__WiFiAppStateManagerAppUnregisteredCallbackFunctionPtr");
                      }
                      objc_autoreleasePoolPop(v15);
                      sub_100076340(a1, v7, 15LL);
                    }
                  }
                }

                id v11 = [v9 countByEnumeratingWithState:&v21 objects:v25 count:16];
              }

              while (v11);
            }
          }

          CFIndex v5 = v20 + 1;
          dispatch_time_t v4 = v18;
        }

        while (v20 + 1 != Count);
      }

      CFRelease(v4);
    }
  }

  else
  {
    int v16 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null manager",  "__WiFiAppStateManagerAppUnregisteredCallbackFunctionPtr");
    }
    objc_autoreleasePoolPop(v16);
  }

void sub_100068FF0(uint64_t a1, dispatch_queue_t *a2)
{
  if (a2)
  {
    if (a2[4])
    {
      BOOL v3 = MKBGetDeviceLockState(0LL) == 1;
      CFRetain(a2);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10008E0D0;
      block[3] = &unk_1001E2C30;
      void block[4] = a2;
      void block[5] = v3;
      dispatch_block_t v4 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INTERACTIVE, 0, block);
      dispatch_async(a2[4], v4);
      _Block_release(v4);
      return;
    }

    CFIndex v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null queue", "__WiFiManagerHandleKeybagLockStatus");
    }
  }

  else
  {
    CFIndex v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null manager.",  "__WiFiManagerHandleKeybagLockStatus");
    }
  }

  objc_autoreleasePoolPop(v5);
}

void sub_10006910C(uint64_t a1)
{
  if (!a1)
  {
    id v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null manager.",  "__WiFiManagerUpdateFamilyPreferences");
    }
    goto LABEL_12;
  }

  if (-[WiFiUserInteractionMonitor isSetupCompleted]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isSetupCompleted"))
  {
    if (*(_BYTE *)(a1 + 1160))
    {
      *(_DWORD *)(a1 + 34_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
      return;
    }

    id v2 = objc_autoreleasePoolPush();
    BOOL v3 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      dispatch_block_t v4 = "%s: Device not unlocked since boot. Not querying family circle.";
      goto LABEL_11;
    }
  }

  else
  {
    id v2 = objc_autoreleasePoolPush();
    BOOL v3 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      dispatch_block_t v4 = "%s: Setup not completed. Not querying family circle.";
LABEL_11:
      objc_msgSend(v3, "WFLog:message:", 4, v4, "__WiFiManagerUpdateFamilyPreferences");
    }
  }

void sub_100069200(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  uint64_t v7 = *(void *)(a1 + 688);
  *(void *)(a1 + 68_Block_object_dispose((const void *)(v1 - 48), 8) = a2;
  if (!MKBUserUnlockedSinceBoot(0LL))
  {
    int v16 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"Device has not been unlocked since boot"];
    }
    objc_autoreleasePoolPop(v16);
    sub_10006D1B4(a1);
    goto LABEL_23;
  }

  if (!*(_BYTE *)(a1 + 1160))
  {
    int v17 = objc_autoreleasePoolPush();
    SCDynamicStoreRef v18 = (void **)&qword_100219F60;
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"First unlock since launch"];
    }
    objc_autoreleasePoolPop(v17);
    *(_BYTE *)(a1 + 1160) = 1;
    sub_100063560(a1);
    sub_100063998(a1, *(const __CFArray **)(a1 + 232));
    unsigned int v19 = sub_10008D634((void *)a1);
    sub_10006EF98(a1, v19, 0LL);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, 0LL, @"com.apple.mobile.keybagd.lock_status", 0LL);
    sub_10006D1B4(a1);
    sub_10008D4D4((void *)a1, 0);
    if (*(_BYTE *)(a1 + 1982))
    {
      *(_BYTE *)(a1 + 1982) = 0;
      __int128 v21 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s reseting user auto join due after first unlock due to device restart",  "__WiFiManagerLockStateUpdate");
      }
      objc_autoreleasePoolPop(v21);
      sub_10006570C(a1, 1LL, 3LL, 0LL);
    }

    sub_10006BAB4(a1, 1);
    sub_10006B570(a1, 1);
    if ((*(_BYTE *)(a1 + 656) & 0xF) != 0) {
      sub_10006BB24(a1);
    }
    else {
      sub_100070330(a1);
    }
    else {
      sub_10006B744(a1, 2);
    }
    if (&WiFiCloudSyncEngineCreate && *(void *)(a1 + 1136))
    {
      CFRetain((CFTypeRef)a1);
      dispatch_time_t v23 = dispatch_time(0LL, 30000000000LL);
      __int128 v24 = *(dispatch_queue_s **)(a1 + 32);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10008E100;
      block[3] = &unk_1001E2620;
      void block[4] = a1;
      dispatch_after(v23, v24, block);
    }

    if (sub_100071F94((void *)a1))
    {
      CFIndex v25 = sub_1000797AC([*(id *)(a1 + 944) dictionaryRepresentation]);
      if (v25)
      {
        uint64_t v26 = v25;
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        otherDate = CFDateCreate(0LL, Current + -63072000.0);
        if (otherDate)
        {
          int v41 = a3;
          uint64_t v42 = v7;
          uint64_t v43 = v6;
          CFIndex Count = CFArrayGetCount(v26);
          if (Count >= 1)
          {
            CFIndex v29 = Count;
            for (CFIndex i = 0LL; i != v29; ++i)
            {
              ValueAtIndex = (void *)CFArrayGetValueAtIndex(v26, i);
              if (ValueAtIndex)
              {
                CFNumberRef v32 = ValueAtIndex;
                CFStringRef v33 = (const __CFDate *)sub_1000951FC((uint64_t)ValueAtIndex, @"prevJoined");
                if (v33)
                {
                  int v34 = v33;
                  if (sub_1000A4754((uint64_t)v32))
                  {
                    CFComparisonResult v35 = CFDateCompare(v34, otherDate, 0LL);
                    unsigned int v36 = objc_autoreleasePoolPush();
                    CFDateRef v37 = v18;
                    CFDateRef v38 = *v18;
                    if (v35 == kCFCompareGreaterThan)
                    {
                      if (v38) {
                        [v38 WFLog:2, "This open network was joined in less than two years %@: %@: %@", v34, otherDate, sub_100095BC8(v32) message];
                      }
                      objc_autoreleasePoolPop(v36);
                    }

                    else
                    {
                      if (v38) {
                        [v38 WFLog:3, "Removing this open network that is older than two years since last joined %@: %@", v34, sub_100095BC8(v32) message];
                      }
                      objc_autoreleasePoolPop(v36);
                      sub_100076340(a1, v32, 19LL);
                    }

                    SCDynamicStoreRef v18 = v37;
                  }
                }
              }
            }
          }

          CFRelease(otherDate);
          uint64_t v7 = v42;
          uint64_t v6 = v43;
          a3 = v41;
        }

        CFRelease(v26);
      }
    }
  }

  uint64_t v8 = *(void *)(a1 + 688);
  sub_10006D1B4(a1);
  if (!a3 && v7 == v8) {
    goto LABEL_23;
  }
  id v9 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    if (*(void *)(a1 + 688)) {
      id v10 = "DISABLED";
    }
    else {
      id v10 = "ENABLED";
    }
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "User interaction %s", v10);
  }

  objc_autoreleasePoolPop(v9);
  if (!*(void *)(a1 + 688))
  {
    id v11 = objc_autoreleasePoolPush();
    if (!objc_msgSend( +[WiFiAnalyticsManager sharedWiFiAnalyticsManager]( WiFiAnalyticsManager,  "sharedWiFiAnalyticsManager"),  "deviceAnalyticsClient"))
    {
      uint64_t v12 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s initDeviceAnalyticsClient failed. Will retry",  "__WiFiManagerLockStateUpdate");
      }
      objc_autoreleasePoolPop(v12);
      -[WiFiManagerAnalytics triggerDeviceAnalyticsStoreMigrationWithCompletion:]( +[WiFiManagerAnalytics sharedInstance](&OBJC_CLASS___WiFiManagerAnalytics, "sharedInstance"),  "triggerDeviceAnalyticsStoreMigrationWithCompletion:",  &stru_1001E4458);
    }

    objc_autoreleasePoolPop(v11);
  }

  if ((*(_DWORD *)(a1 + 612) | 2) != 2)
  {
    __int128 v22 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Ignoring lock state manager->wakeMode %d\n",  *(unsigned int *)(a1 + 612));
    }
    objc_autoreleasePoolPop(v22);
    if (v7 == v8 || *(void *)(a1 + 688)) {
      goto LABEL_23;
    }
    sub_10006BAB4(a1, 1);
    if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
    {
LABEL_82:
      uint64_t v39 = a1;
      uint64_t v40 = 29LL;
      goto LABEL_83;
    }

LABEL_81:
    sub_10006B744(a1, 2);
    goto LABEL_23;
  }

  uint64_t v13 = *(const void **)(a1 + 968);
  uint64_t v14 = *(void *)(a1 + 688);
  if (v14)
  {
    sub_10008E038(a1);
    if ((*(_BYTE *)(a1 + 656) & 0x2A) != 0)
    {
LABEL_19:
      int v15 = 1;
      goto LABEL_73;
    }

    if (!*(_BYTE *)(a1 + 1008))
    {
      if (!*(_BYTE *)(a1 + 992)) {
        sub_10006B570(a1, 0);
      }
      goto LABEL_19;
    }

    uint64_t v13 = *(const void **)(a1 + 984);
    int v15 = 3;
  }

  else
  {
    int v15 = 1;
    sub_10006BAB4(a1, 1);
    if ((*(_BYTE *)(a1 + 656) & 0x11) != 0)
    {
      int v15 = 0;
      uint64_t v13 = *(const void **)(a1 + 960);
    }

    sub_10006B570(a1, 1);
    if ((*(_BYTE *)(a1 + 656) & 0xF) != 0) {
      sub_10006BB24(a1);
    }
    else {
      sub_100070330(a1);
    }
    if (v7 != v8) {
      *(void *)(a1 + 704) = 0LL;
    }
  }

      IOObjectRelease(v21);
      CFIndex v20 = v55;
      uint64_t v14 = v56;
      goto LABEL_82;
    }

    uint64_t v26 = v25;
    double v27 = (void *)sub_10003AFF4((uint64_t)"__WiFiManagerUpdateDeviceSystemConfiguration");
    uint64_t v28 = (const __SCNetworkInterface *)_SCNetworkInterfaceCreateWithIONetworkInterfaceObject(v21);
    if (v28)
    {
      CFIndex v29 = SCNetworkSetCopyAll(*(SCPreferencesRef *)(a1 + 904));
      CFTypeID v30 = v29;
      if (!v29) {
        goto LABEL_40;
      }
      unsigned int v54 = v2;
      CFIndex Count = CFArrayGetCount(v29);
      if (Count)
      {
        CFNumberRef v32 = Count;
        if (Count >= 1)
        {
          unsigned int v53 = v27;
          CFStringRef v33 = 0LL;
          uint64_t v26 = 0;
          do
          {
            ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v30, v33);
            if (!SCNetworkSetContainsInterface(ValueAtIndex, v28))
            {
              uint64_t v26 = SCNetworkSetEstablishDefaultInterfaceConfiguration(ValueAtIndex, v28);
              if (!v26)
              {
                if (SCError()) {
                  break;
                }
              }
            }

            ++v33;
          }

          while (v32 != v33);
          dispatch_block_t v4 = kCFAllocatorDefault;
          id v2 = v54;
          double v27 = v53;
LABEL_40:
          sub_10003A310(*(SCPreferencesRef *)(a1 + 904), v26);

          if (v26)
          {
            if (!v30) {
              goto LABEL_43;
            }
          }

          else
          {
            SCError();
            if (!v30)
            {
LABEL_43:
              if (v28) {
                CFRelease(v28);
              }
              goto LABEL_45;
            }
          }

          CFRelease(v30);
          goto LABEL_43;
        }

        uint64_t v26 = 0;
      }

      id v2 = v54;
      goto LABEL_40;
    }

    CFTypeID v30 = 0LL;
    goto LABEL_40;
  }

  CFDictionaryRef v51 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%@ matchingServiceDict alloc failed", v2 message];
  }
  objc_autoreleasePoolPop(v51);
  CFIndex v49 = v14;
LABEL_84:
  CFRelease(v49);
}

void sub_10006986C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    sub_10005D74C(v1);
  }
}

void sub_10006987C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    sub_100069890(v1, 0);
  }
}

void sub_100069890(uint64_t a1, int a2)
{
  dispatch_block_t v4 = (void *)(a1 + 672);
  uint64_t v5 = *(void *)(a1 + 672);
  *dispatch_block_t v4 = 1LL;
  if (!a2 && v5 == 1) {
    return;
  }
  uint64_t v6 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    if (*v4) {
      uint64_t v7 = "ON";
    }
    else {
      uint64_t v7 = "OFF";
    }
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "Device display is %s", v7);
  }

  objc_autoreleasePoolPop(v6);
  if (!*(_DWORD *)(a1 + 612))
  {
    int v17 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"Ignoring display state"];
    }
    objc_autoreleasePoolPop(v17);
    return;
  }

  uint64_t v8 = *(const void **)(a1 + 968);
  sub_10006D1B4(a1);
  uint64_t v9 = *(void *)(a1 + 672);
  if (v9)
  {
    if (*(void *)(a1 + 688)) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = v5 == 1;
    }
    int v11 = !v10;
    int v12 = *(_DWORD *)(a1 + 612);
    if (a2) {
      int v13 = 3;
    }
    else {
      int v13 = 4;
    }
    if (v12 == 2) {
      int v14 = v13;
    }
    else {
      int v14 = v11;
    }
    int v15 = 1;
    if (v12 == 2) {
      int v16 = 1;
    }
    else {
      int v16 = 2;
    }
    if ((*(_BYTE *)(a1 + 656) & 0x11) != 0)
    {
      int v15 = 0;
      uint64_t v8 = *(const void **)(a1 + 960);
    }

    sub_10006B570(a1, 1);
    if ((*(_BYTE *)(a1 + 656) & 0xF) != 0) {
      sub_10006BB24(a1);
    }
    else {
      sub_100070330(a1);
    }
    if (v5 != 1) {
      *(void *)(a1 + 704) = 0LL;
    }
    goto LABEL_42;
  }

  sub_10008E038(a1);
  if ((*(_BYTE *)(a1 + 656) & 0x2A) == 0)
  {
    if (*(_BYTE *)(a1 + 1008))
    {
      int v14 = 0;
      uint64_t v8 = *(const void **)(a1 + 984);
      int v15 = 3;
      goto LABEL_41;
    }

    if (!*(_BYTE *)(a1 + 992)) {
      sub_10006B570(a1, 0);
    }
  }

  int v14 = 0;
  int v15 = 1;
LABEL_41:
  int v16 = 2;
LABEL_42:
  context[0] = a1;
  context[1] = 0xAAAAAAAA0000006DLL;
  context[2] = 0LL;
  void context[3] = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
  if (v14) {
    sub_10006BAB4(a1, v14);
  }
  if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
  {
    sub_1000641A4(a1);
    if (!v9) {
      return;
    }
  }

  else
  {
    sub_100064280(a1, v8, v15);
    if (!v9) {
      return;
    }
  }

  else {
    sub_10006B744(a1, v16);
  }
}

void sub_100069B28(uint64_t a1)
{
}

void sub_100069B34(uint64_t a1, int a2)
{
  if (a1)
  {
    dispatch_block_t v4 = (void *)(a1 + 2024);
    uint64_t v5 = *(void *)(a1 + 2024);
    if (notify_get_state(*(_DWORD *)(a1 + 2032), (uint64_t *)(a1 + 2024)))
    {
      uint64_t v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: notify_get_state returned error",  "__WiFiManagerSymptomsRecommendationUpdate");
      }
      objc_autoreleasePoolPop(v6);
    }

    uint64_t v7 = *v4;
    if (a2 || v5 != v7)
    {
      uint64_t v8 = objc_autoreleasePoolPush();
      uint64_t v9 = v7 & 1;
      if (qword_100219F60)
      {
        BOOL v10 = "TRUE";
        if (!v9) {
          BOOL v10 = "FALSE";
        }
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: LQM-WiFi : symptoms cellular outrank recommendation is set to %s (state=0x%llx)",  "__WiFiManagerSymptomsRecommendationUpdate",  v10,  *v4);
      }

      objc_autoreleasePoolPop(v8);
      context[0] = a1;
      context[1] = 0xAAAAAAAA00000081LL;
      context[2] = 0LL;
      void context[3] = v9;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    }
  }

  else
  {
    int v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null manager",  "__WiFiManagerSymptomsRecommendationUpdate");
    }
    objc_autoreleasePoolPop(v11);
  }

uint64_t sub_100069CA4(uint64_t a1, io_iterator_t iterator)
{
  uint64_t result = IOIteratorNext(iterator);
  if ((_DWORD)result)
  {
    io_registry_entry_t v5 = result;
    do
    {
      CFTypeRef CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty( v5,  @"IOInterfaceName",  kCFAllocatorDefault,  0);
      if (CFProperty)
      {
        uint64_t v7 = CFProperty;
        CFRelease(v7);
      }

      else
      {
        uint64_t v8 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3 message:"No interface name for IOService"];
        }
        objc_autoreleasePoolPop(v8);
      }

      IOObjectRelease(v5);
      uint64_t result = IOIteratorNext(iterator);
      io_registry_entry_t v5 = result;
    }

    while ((_DWORD)result);
  }

  return result;
}

uint64_t sub_100069D8C(uint64_t a1, io_iterator_t iterator)
{
  uint64_t result = IOIteratorNext(iterator);
  if ((_DWORD)result)
  {
    io_registry_entry_t v5 = result;
    do
    {
      if (a1)
      {
        sub_10008D0F4(a1, v5, -536723200);
        IOServiceAddInterestNotification( *(IONotificationPortRef *)(a1 + 816),  v5,  "IOGeneralInterest",  (IOServiceInterestCallback)sub_10008D0F4,  (void *)a1,  (io_object_t *)(a1 + 836));
      }

      IOObjectRelease(v5);
      uint64_t result = IOIteratorNext(iterator);
      io_registry_entry_t v5 = result;
    }

    while ((_DWORD)result);
  }

  return result;
}

void sub_100069E2C(uint64_t a1, uint64_t a2, int a3, intptr_t a4)
{
  uint64_t v7 = objc_autoreleasePoolPush();
  size_t v25 = 255LL;
  if (a3 <= -536870145)
  {
    if (a3 == -536870272)
    {
      int v12 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3 message:"Received kIOMessageSystemWillSleep"];
      }
      objc_autoreleasePoolPop(v12);
      char v13 = *(_BYTE *)(a1 + 26);
      if (v13)
      {
        int v14 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "System Sleep notification, Disabling auto-join");
        }
        objc_autoreleasePoolPop(v14);
        sub_10006B570(a1, 0);
        char v13 = 1;
      }

      *(_BYTE *)(a1 + 1161) = v13;
      sub_10006BB24(a1);
      sub_10008D030(a1, -536870272);
      uint64_t context = a1;
      unint64_t v27 = 0xAAAAAAAA00000051LL;
      uint64_t v28 = 0LL;
      uint64_t v29 = 1LL;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
    }

    else if (a3 == -536870256)
    {
      uint64_t v8 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3 message:"Received kIOMessageSystemWillNotSleep"];
      }
      objc_autoreleasePoolPop(v8);
      if ((*(_BYTE *)(a1 + 1161) || *(_BYTE *)(a1 + 1008)) && !*(_BYTE *)(a1 + 26))
      {
        uint64_t v9 = objc_autoreleasePoolPush();
        if (qword_100219F60)
        {
          if (*(_BYTE *)(a1 + 1161)) {
            BOOL v10 = "Re-enabling auto-join";
          }
          else {
            BOOL v10 = "Enabling auto-join for LPAS";
          }
          objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "System Sleep Cancelled notification, %s", v10, v25);
        }

        objc_autoreleasePoolPop(v9);
        sub_10006B570(a1, 1);
      }

      *(_BYTE *)(a1 + 1161) = 0;
      if ((*(_BYTE *)(a1 + 656) & 0xF) == 0) {
        sub_100070330(a1);
      }
      sub_10008D030(a1, -536870256);
    }

    goto LABEL_58;
  }

  if (a3 != -536870144)
  {
    if (a3 == -536870112)
    {
      int v11 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3 message:"Received kIOMessageSystemWillPowerOn"];
      }
      objc_autoreleasePoolPop(v11);
    }

    goto LABEL_58;
  }

  int v15 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3 message:"Received kIOMessageSystemHasPoweredOn"];
  }
  objc_autoreleasePoolPop(v15);
  sysctlbyname("kern.wakereason", (void *)(a1 + 353), &v25, 0LL, 0LL);
  int v16 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "System wake reason: %s", a1 + 353, v25);
  }
  objc_autoreleasePoolPop(v16);
  if ((*(_BYTE *)(a1 + 1161) || *(_BYTE *)(a1 + 1008)) && !*(_BYTE *)(a1 + 26))
  {
    int v17 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      if (*(_BYTE *)(a1 + 1161)) {
        SCDynamicStoreRef v18 = "Re-enabling auto-join";
      }
      else {
        SCDynamicStoreRef v18 = "Enabling auto-join for LPAS";
      }
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "System Powered ON notification %s", v18);
    }

    objc_autoreleasePoolPop(v17);
    *(_BYTE *)(a1 + 184_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
    if (sub_10007C66C(a1))
    {
      if (*(double *)(a1 + 1840) <= 0.0 || CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 1840) <= 360.0)
      {
        CFIndex v20 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "AlwaysOnWiFi: Reschedule Scan after %d Seconds ",  360);
        }
        objc_autoreleasePoolPop(v20);
        *(_BYTE *)(a1 + 184_Block_object_dispose((const void *)(v1 - 48), 8) = 1;
        __int128 v21 = *(dispatch_source_s **)(a1 + 1344);
        dispatch_time_t v22 = dispatch_time(0LL, 360000000000LL);
        dispatch_source_set_timer(v21, v22, 0xFFFFFFFFFFFFFFFFLL, 0LL);
        goto LABEL_52;
      }

      unsigned int v19 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "AlwaysOnWiFi: Scan time expired, Re-Enable Auto-Join");
      }
      objc_autoreleasePoolPop(v19);
      *(CFAbsoluteTime *)(a1 + 1840) = CFAbsoluteTimeGetCurrent();
    }

    sub_10006B570(a1, 1);
  }

LABEL_52:
  *(_BYTE *)(a1 + 1161) = 0;
  if ((*(_BYTE *)(a1 + 656) & 0xF) == 0) {
    sub_100070330(a1);
  }
  uint64_t context = a1;
  unint64_t v27 = 0xAAAAAAAA0000004ELL;
  uint64_t v28 = 0LL;
  uint64_t v29 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
  sub_10008D030(a1, -536870144);
  if (*(_BYTE *)(a1 + 1296))
  {
    dispatch_time_t v23 = *(const __CFString **)(a1 + 1288);
    if (v23)
    {
      CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, v23);
      sub_10007CD78(a1, 1, Copy);
      if (Copy) {
        CFRelease(Copy);
      }
    }
  }

    __int128 v21 = objc_autoreleasePoolPush();
    unint64_t v27 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      uint64_t v28 = CFSetGetCount(*(CFSetRef *)(a1 + 1000));
      uint64_t v29 = "Enabled";
      if (*(_BYTE *)(a1 + 1008)) {
        CFTypeID v30 = "Enabled";
      }
      else {
        CFTypeID v30 = "Disabled";
      }
      if (*(_BYTE *)(a1 + 995)) {
        BOOL v31 = "Enabled";
      }
      else {
        BOOL v31 = "Disabled";
      }
      if (!*(_BYTE *)(a1 + 996)) {
        uint64_t v29 = "Disabled";
      }
      objc_msgSend( v27,  "WFLog:message:",  3,  "WoW Disabled, %ld WoW Clients, lpas is %s, WoW Override is %s, Captive %s",  v28,  v30,  v31,  v29);
    }

    goto LABEL_62;
  }

    objc_autoreleasePoolPop(v28);
    goto LABEL_53;
  }

  unsigned int v19 = v18;
  CFIndex v20 = (const __CFNumber *)CFDictionaryGetValue(a3, @"WiFiHostApWiFiNetworkIeFlagKey");
  if (!v20
    || (CFNumberGetValue(v20, kCFNumberSInt16Type, &valuePtr),
        (__int128 v21 = (const __CFNumber *)CFDictionaryGetValue(a3, @"WiFiHostApWiFiNetworkIeBatteryKey")) == 0LL))
  {
    uint64_t v28 = objc_autoreleasePoolPush();
    uint64_t v29 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      CFTypeID v30 = "Failed to get Network Flag Info";
LABEL_51:
      [v29 WFLog:3 message:v30];
      goto LABEL_52;
    }

    goto LABEL_52;
  }

  CFNumberGetValue(v21, kCFNumberSInt8Type, &v34);
  v7[1354] = v34;
  *(_WORD *)(a5 + 6936) = valuePtr;
  dispatch_time_t v22 = *(const void **)(a5 + 6928);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(a5 + 692_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
  }

  *(void *)(a5 + 692_Block_object_dispose((const void *)(v1 - 48), 8) = sub_100094CE8(v19);
  dispatch_time_t v23 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, " Update Personal Hotspot Network IE received. wifi network %@\n", v19 message];
  }
  objc_autoreleasePoolPop(v23);
  if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
  {
    if (!*(_DWORD *)(a5 + 3272)) {
      sub_1000F5F98(a5, 0x1CuLL);
    }
  }

  else
  {
    sub_1000CACC4(a5);
  }

  int v41 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    uint64_t v42 = v41;
    [(id)qword_100219F60 WFLog:3, "%s: rssi(max:min:avg:last) %d:%d:%d:%d, snr %d:%d:%d:%d, cca %d:%d:%d:%d, txRate %d:%d:%d:%d, rxRate %d:%d:%d:%d, numberOfTxErrorEvents %u, channel %d, bandwidth %u, linkDuration %u, roamedCount %u, linkDownReason %@, linkDownSu bReason %d, lqmInterval %u, vehicleModel %@, vehicleManufacturer %@, hardwareVersion %@, phyMode %@", "__WiFiDeviceManagerSubmitCarPlayLinkQualityMetrics", HIDWORD(v48), DWORD2(v48), v49, DWORD1(v49), HIDWORD(v47), DWORD2(v47), v48, DWORD1(v48), HIDWORD(v49), DWORD2(v49), v50, DWORD1(v50), HIDWORD(v45), DWORD2(v45), v46, DWORD1(v46), HIDWORD(v46), DWORD2(v46), v47, DWORD1(v47), HIDWORD(v50), SWORD4(v50), WORD5(v50), v45, DWORD1(v45), *((void *)&v51 + 1), v52, v51, *(_OWORD *)v44, *(void *)&v44[16], *((void *)&v52 + 1) message];
    int v41 = v42;
  }

  objc_autoreleasePoolPop(v41);
  sub_100038178((uint64_t)v44);
}

    sub_1000CABEC(a1, 0);
LABEL_53:
    *(void *)(a1 + 6824) = 0LL;
    CFTypeID v30 = *(unsigned int *)(a1 + 6844);
    goto LABEL_54;
  }

  CFTypeID v30 = v40;
LABEL_54:
  if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin") && (v30 & 0xFFFFFFFD) != 0x11) {
    sub_10010BB38( a1,  (uint64_t)[*(id *)(a1 + 6728) getHotspotDeviceName:ValueAtIndex],  45,  (CFErrorDomain)NSPOSIXErrorDomain,  (uint64_t)@"Failed to process candidate hotspot device");
  }
  return v30;
}

LABEL_58:
  IOAllowPowerChange(*(_DWORD *)(a1 + 868), a4);
  objc_autoreleasePoolPop(v7);
}

                      CFRelease(cf);
LABEL_59:
                      if (v26) {
                        CFRelease(v26);
                      }
                      if (Mutable) {
                        CFRelease(Mutable);
                      }
LABEL_63:
                      if (!v12) {
                        goto LABEL_18;
                      }
                      goto LABEL_17;
                    }
                  }
                }

void sub_10006A2E8(uint64_t a1, int a2, uint64_t a3, dispatch_queue_s **cf)
{
  if ((_DWORD)a3)
  {
    int v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: BT callback failure, result %d",  "__WiFiManagerBluetoothCallback",  a3);
    }
    goto LABEL_21;
  }

  if (!cf)
  {
    int v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: BT callback failure, null userData",  "__WiFiManagerBluetoothCallback",  v22);
    }
    goto LABEL_21;
  }

  CFTypeID v7 = CFGetTypeID(cf);
  uint64_t v8 = qword_1002198E0;
  if (!qword_1002198E0)
  {
    pthread_once(&stru_100218EA0, (void (*)(void))sub_100060AA8);
    uint64_t v8 = qword_1002198E0;
  }

  if (v7 != v8)
  {
    int v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: BT callback failure, invalid userData type",  "__WiFiManagerBluetoothCallback",  v22);
    }
    goto LABEL_21;
  }

  if (!cf[4])
  {
    int v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: manager queue null",  "__WiFiManagerBluetoothCallback",  v22);
    }
    goto LABEL_21;
  }

  if ((a2 - 1) < 2)
  {
    int v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"Mobile Bluetooth session terminated"];
    }
    objc_autoreleasePoolPop(v12);
    char v13 = cf[4];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10008DCF8;
    block[3] = &unk_1001E43F8;
    void block[4] = cf;
    int v24 = a2;
    int v14 = block;
LABEL_17:
    dispatch_async(v13, v14);
    return;
  }

  if (a2 == 3)
  {
    int v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "Failed to attach to Mobile Bluetooth", v21, v22);
    }
    goto LABEL_21;
  }

  if (!a2)
  {
    if (!a1)
    {
      int v11 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: session null",  "__WiFiManagerBluetoothCallback",  v22);
      }
      goto LABEL_21;
    }

    uint64_t v9 = BTServiceAddCallbacksWithFilter(a1, sub_10008D988, 0xFFFFFFFFLL, cf);
    if ((_DWORD)v9)
    {
      uint64_t v10 = v9;
      int v11 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "Failed to obtain Bluetooth AudioJack. result=0x%X",  v10,  v22);
      }
LABEL_21:
      objc_autoreleasePoolPop(v11);
      return;
    }

    unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t Default = BTLocalDeviceGetDefault(a1, &v28);
    if ((_DWORD)Default)
    {
      uint64_t v16 = Default;
      int v17 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "Failed to obtain Bluetooth Local Device. result=0x%X",  v16);
      }
LABEL_28:
      objc_autoreleasePoolPop(v17);
      return;
    }

    __int128 v26 = off_1001E43C0;
    uint64_t v27 = 0LL;
    uint64_t v18 = BTLocalDeviceAddCallbacks(v28, &v26, cf);
    if ((_DWORD)v18)
    {
      uint64_t v19 = v18;
      int v17 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "Failed to set Bluetooth Local Device callbacks.  result=0x%X",  v19);
      }
      goto LABEL_28;
    }

    char v13 = cf[4];
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_10008DCD8;
    v25[3] = &unk_1001E43D8;
    v25[4] = cf;
    v25[5] = a1;
    v25[6] = v28;
    int v14 = v25;
    goto LABEL_17;
  }

void sub_10006A668(uint64_t a1)
{
  id v2 = (unsigned int *)(a1 + 1360);
  *(_DWORD *)(a1 + 1360) = -1;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_10007D430;
  handler[3] = &unk_1001E41D0;
  handler[4] = a1;
  notify_register_dispatch( "com.apple.system.lowpowermode",  (int *)(a1 + 1360),  (dispatch_queue_t)qword_100219F80,  handler);
  BOOL v3 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: battery save mode registered. Token=%d",  "WiFiBatterySaveModeConfiguration",  *v2);
  }
  objc_autoreleasePoolPop(v3);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10007D438;
  block[3] = &unk_1001E2620;
  void block[4] = a1;
  dispatch_async((dispatch_queue_t)qword_100219F80, block);
}

WiFiSoftError *sub_10006A76C(void *a1, uint64_t a2)
{
  double v4 = 120.0;
  double v5 = sub_10006A880(a1, @"SoftErrorReportingTimeout", 120.0);
  if (v5 >= 0.0) {
    double v4 = v5;
  }
  double v6 = 86400.0;
  double v7 = sub_10006A880(a1, @"SoftErrorUIReportingTimeout", 86400.0);
  if (v7 >= 0.0) {
    double v6 = v7;
  }
  v9[0] = @"intervalForMaxNonUIActions";
  v9[1] = @"intervalForMaxUIActions";
  v10[0] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4);
  v10[1] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v6);
  return -[WiFiSoftError initWithName:andParams:]( objc_alloc(&OBJC_CLASS___WiFiSoftError),  "initWithName:andParams:",  a2,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v10,  v9,  2LL));
}

double sub_10006A880(void *a1, const __CFString *a2, double a3)
{
  double v4 = sub_10006AA50(a1, a2);
  double valuePtr = a3;
  if (v4)
  {
    double v5 = v4;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v5))
    {
      CFNumberGetValue(v5, kCFNumberDoubleType, &valuePtr);
      return valuePtr;
    }
  }

  return a3;
}

void sub_10006A8EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  if (v1 == 4240173202LL || v1 == 2702125347LL)
  {
    double v4 = sub_10006C854((CFArrayRef)a1);
    if (v4)
    {
      double v5 = v4;
      if (CFArrayGetCount(v4) >= 1)
      {
        CFIndex v6 = 0LL;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v5, v6);
          if (ValueAtIndex) {
            sub_100053B30((uint64_t)ValueAtIndex, [*(id *)(a1 + 64) numberOfActiveEndpoints] == 0);
          }
          ++v6;
        }

        while (v6 < CFArrayGetCount(v5));
      }

      CFRelease(v5);
    }
  }

void sub_10006A9A0(uint64_t a1, const void *a2)
{
  double v4 = objc_autoreleasePoolPush();
  if (a1)
  {
    if (a2)
    {
      if (*(void *)(a1 + 200))
      {
        CFTypeID v5 = CFGetTypeID(a2);
        if (v5 == CFDictionaryGetTypeID()) {
          [*(id *)(a1 + 200) setLocaleTestParams:a2];
        }
      }
    }
  }

  else
  {
    CFIndex v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: manager is null",  "__WiFiManagerSetLocaleTestParams");
    }
    objc_autoreleasePoolPop(v6);
  }

  objc_autoreleasePoolPop(v4);
}

const __SCPreferences *sub_10006AA50(void *a1, const __CFString *a2)
{
  uint64_t result = (const __SCPreferences *)sub_100072F14(a1, a2);
  if (result)
  {
    double v4 = result;
    CFTypeID v5 = (void *)sub_10003AFF4((uint64_t)"__WiFiManagerGetProperty");
    CFPropertyListRef Value = SCPreferencesGetValue(v4, a2);

    return (const __SCPreferences *)Value;
  }

  return result;
}

void sub_10006AAA8(id a1, void *a2, unint64_t a3)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  uint64_t v10 = a2;
  if (a2 && *((void *)a2 + 4))
  {
    CFRetain(a2);
    double v4 = *(dispatch_queue_s **)(v8[3] + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10006ABA4;
    block[3] = &unk_1001E2D48;
    void block[4] = &v7;
    void block[5] = a3;
    dispatch_async(v4, block);
  }

  else
  {
    CFTypeID v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null manager or queue",  "WiFiManagerScheduleWithQueue_block_invoke_5");
    }
    objc_autoreleasePoolPop(v5);
  }

  _Block_object_dispose(&v7, 8);
}

void sub_10006AB8C(_Unwind_Exception *a1)
{
}

void sub_10006ABA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ((unint64_t)(v2 - 1) <= 1)
  {
    BOOL v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: call state changed to %d",  "WiFiManagerScheduleWithQueue_block_invoke_6",  -[WiFiUserInteractionMonitor isWiFiCallInProgress]( +[WiFiUserInteractionMonitor sharedInstance](WiFiUserInteractionMonitor, "sharedInstance"),  "isWiFiCallInProgress"));
    }
    objc_autoreleasePoolPop(v3);
    unsigned int v4 = -[WiFiUserInteractionMonitor isWiFiCallInProgress]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isWiFiCallInProgress");
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    if (v4) {
      sub_10006ACF8(v5);
    }
    else {
      sub_10006ADF4(v5);
    }
    uint64_t v2 = *(void *)(a1 + 40);
  }

  if (v2 == 16)
  {
    unsigned int v6 = -[WiFiUserInteractionMonitor isGameModeActive]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isGameModeActive");
    uint64_t v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: game state changed to %d",  "WiFiManagerScheduleWithQueue_block_invoke_6",  v6);
    }
    objc_autoreleasePoolPop(v7);
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    if (v6) {
      sub_10006AEEC(v8);
    }
    else {
      sub_10006AFE8(v8);
    }
  }

  uint64_t v9 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }

void sub_10006ACF8(uint64_t a1)
{
  keys[0] = @"appPolicyUUID";
  keys[1] = @"appPolicyState";
  values[0] = @"CB06911C-82BE-44A9-8359-F8C02AAF82DB";
  values[1] = kCFBooleanTrue;
  CFDictionaryRef v2 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    if (!*(_BYTE *)(a1 + 2016)) {
      *(_BYTE *)(a1 + 2016) = 1;
    }
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000041LL;
    context[2] = v2;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    CFRelease(v3);
  }

void sub_10006ADF4(uint64_t a1)
{
  keys[0] = @"appPolicyUUID";
  keys[1] = @"appPolicyState";
  values[0] = @"CB06911C-82BE-44A9-8359-F8C02AAF82DB";
  values[1] = kCFBooleanFalse;
  CFDictionaryRef v2 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    if (*(_BYTE *)(a1 + 2016)) {
      *(_BYTE *)(a1 + 2016) = 0;
    }
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000041LL;
    context[2] = v2;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    CFRelease(v3);
  }

void sub_10006AEEC(uint64_t a1)
{
  keys[0] = @"appPolicyUUID";
  keys[1] = @"appPolicyState";
  values[0] = @"kApple80211KeyGameModeUUIDString";
  values[1] = kCFBooleanTrue;
  CFDictionaryRef v2 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    if (!*(_BYTE *)(a1 + 2017)) {
      *(_BYTE *)(a1 + 2017) = 1;
    }
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000041LL;
    context[2] = v2;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    CFRelease(v3);
  }

void sub_10006AFE8(uint64_t a1)
{
  keys[0] = @"appPolicyUUID";
  keys[1] = @"appPolicyState";
  values[0] = @"kApple80211KeyGameModeUUIDString";
  values[1] = kCFBooleanFalse;
  CFDictionaryRef v2 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    if (*(_BYTE *)(a1 + 2017)) {
      *(_BYTE *)(a1 + 2017) = 0;
    }
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000041LL;
    context[2] = v2;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    CFRelease(v3);
  }

id sub_10006B0E0(uint64_t a1)
{
  id result = (id)_os_feature_enabled_impl("WiFiManager", "Sensing");
  if ((_DWORD)result)
  {
    id v3 = +[WiFiCWFInterface sharedWiFiCWFInterfaceInstance]( &OBJC_CLASS___WiFiCWFInterface,  "sharedWiFiCWFInterfaceInstance");
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(v4 + 1552) = v3;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_10006B168;
    v5[3] = &unk_1001E4210;
    void v5[4] = v4;
    return [v3 setPerformSensing:v5];
  }

  return result;
}

uint64_t sub_10006B168(uint64_t a1, void *a2)
{
  id v3 = sub_10006C77C(*(CFArrayRef *)(a1 + 32));
  if (!v3) {
    return 4294963365LL;
  }
  uint64_t v4 = v3;
  CFIndex Count = CFArrayGetCount(v3);
  if (Count < 1)
  {
    uint64_t v8 = 4294963365LL;
  }

  else
  {
    CFIndex v6 = Count;
    CFIndex v7 = 0LL;
    uint64_t v8 = 0LL;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v4, v7);
      uint64_t v10 = sub_10003BEDC((uint64_t)ValueAtIndex);
      if (v10)
      {
        int v11 = (const void *)sub_10004CE2C(v10);
        if (v11)
        {
          uint64_t v8 = sub_1000F7DA4( (uint64_t)ValueAtIndex,  v11,  a2,  (void (*)(uint64_t, const void *, void, uint64_t, uint64_t))sub_10001394C,  (uint64_t)[a2 objectForKeyedSubscript:@"CWF_ACCESSORY_UUID"]);
          if ((_DWORD)v8)
          {
            int v12 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Sensing trigger failed[%d]\n",  "__WiFiManagerPerformSensing",  v8);
            }
            objc_autoreleasePoolPop(v12);
          }
        }
      }

      ++v7;
    }

    while (v6 != v7);
  }

  CFRelease(v4);
  return v8;
}

uint64_t sub_10006B298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1 || !*(void *)(a1 + 1560)) {
    return 4294963389LL;
  }
  uint64_t result = 4294963396LL;
  if (a3 && a4)
  {
    if (a5)
    {
      v7[0] = CWFNDDREQUESTPARAMSKEY;
      v7[1] = CWFNDDREQUESTCLIENTKEY;
      v8[0] = a3;
      v8[1] = a4;
      return (uint64_t)objc_msgSend( *(id *)(a1 + 1560),  "handleRequest:withData:interface:",  a2,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v8,  v7,  2),  a5);
    }
  }

  return result;
}

void sub_10006B368(uint64_t a1, void *a2, void *a3, void *a4, int a5)
{
  uint64_t v10 = objc_autoreleasePoolPush();
  if (a1)
  {
    *(_BYTE *)(a1 + 2074) = 0;
    int v11 = (CFTypeRef *)(a1 + 2096);
    *(_BYTE *)(a1 + 2120) = 0;
    if (a5)
    {
      if (*v11)
      {
        CFRelease(*v11);
        *int v11 = 0LL;
      }

      int v12 = *(const void **)(a1 + 2104);
      if (v12)
      {
        CFRelease(v12);
        *(void *)(a1 + 2104) = 0LL;
      }

      char v13 = *(const void **)(a1 + 2112);
      if (v13)
      {
        CFRelease(v13);
        *(void *)(a1 + 2112) = 0LL;
      }

      *(void *)(a1 + 2096) = [a2 copy];
      *(void *)(a1 + 2104) = [a3 copy];
      *(void *)(a1 + 2112) = [a4 copy];
      *(_BYTE *)(a1 + 2120) = 1;
      *(_BYTE *)(a1 + 2074) = 1;
    }

    v14[0] = a1;
    v14[1] = 0xAAAAAAAA00000080LL;
    v14[2] = a1 + 2096;
    v14[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v14);
  }

  objc_autoreleasePoolPop(v10);
}

void sub_10006B464(uint64_t a1)
{
  CFDictionaryRef v2 = *(const __SCDynamicStore **)(a1 + 72);
  if (v2)
  {
    SCDynamicStoreSetDispatchQueue(v2, 0LL);
    id v3 = *(const void **)(a1 + 72);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 72) = 0LL;
    }
  }

uint64_t sub_10006B4A0(uint64_t a1)
{
  uint64_t result = notify_is_valid_token(*(_DWORD *)(a1 + 1360));
  if ((_DWORD)result)
  {
    uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1360));
    *(_DWORD *)(a1 + 1360) = -1;
  }

  return result;
}

uint64_t sub_10006B4D8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

void sub_10006B4E4(uint64_t a1)
{
  CFDictionaryRef v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s", "WiFiManagerEnable");
  }
  objc_autoreleasePoolPop(v2);
  if (a1)
  {
    if (!*(_BYTE *)(a1 + 25))
    {
      *(_BYTE *)(a1 + 25) = 1;
      sub_10006B570(a1, 1);
    }
  }

void sub_10006B570(uint64_t a1, int a2)
{
  BOOL v4 = sub_10007C66C(a1);
  if (*(_DWORD *)(a1 + 612) == 2)
  {
    BOOL v5 = v4;
    int v6 = a2 && *(_BYTE *)(a1 + 25) && *(_BYTE *)(a1 + 1160) && (*(_BYTE *)(a1 + 656) & 0x3F | v4) != 0;
    CFIndex v7 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      uint64_t v8 = "TRUE";
      if (a2) {
        uint64_t v9 = "TRUE";
      }
      else {
        uint64_t v9 = "FALSE";
      }
      if (*(_BYTE *)(a1 + 25)) {
        uint64_t v10 = "TRUE";
      }
      else {
        uint64_t v10 = "FALSE";
      }
      if (*(_BYTE *)(a1 + 1160)) {
        int v11 = "TRUE";
      }
      else {
        int v11 = "FALSE";
      }
      uint64_t v12 = *(void *)(a1 + 656);
      if ((v12 & 4) != 0) {
        char v13 = "TRUE";
      }
      else {
        char v13 = "FALSE";
      }
      if ((v12 & 0x3B) == 0) {
        uint64_t v8 = "FALSE";
      }
      int v14 = "Enabled";
      if (!v5) {
        int v14 = "Disabled";
      }
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: state %s, manager->enable.setting %s, manager->unlockedSinceBoot %s, SB state %s, Process state %s AlwaysOnW iFi %s manager app state %llu",  "__WiFiManagerSetEnableState",  v9,  v10,  v11,  v13,  v8,  v14,  v12);
    }
  }

  else
  {
    int v6 = a2 && *(_BYTE *)(a1 + 25) && *(_BYTE *)(a1 + 1160) != 0;
    CFIndex v7 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      int v15 = "TRUE";
      if (a2) {
        uint64_t v16 = "TRUE";
      }
      else {
        uint64_t v16 = "FALSE";
      }
      if (*(_BYTE *)(a1 + 25)) {
        int v17 = "TRUE";
      }
      else {
        int v17 = "FALSE";
      }
      if (!*(_BYTE *)(a1 + 1160)) {
        int v15 = "FALSE";
      }
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: state %s, manager->enable.setting %s, manager->unlockedSinceBoot %s",  "__WiFiManagerSetEnableState",  v16,  v17,  v15,  v18,  v19,  v20,  v21);
    }
  }

  objc_autoreleasePoolPop(v7);
  *(_BYTE *)(a1 + 24) = v6;
  sub_10008BF8C(a1, v6, 0);
}

void sub_10006B728(uint64_t a1)
{
  if (a1)
  {
    if (*(_BYTE *)(a1 + 25))
    {
      *(_BYTE *)(a1 + 25) = 0;
      sub_10006B570(a1, 0);
    }
  }

void sub_10006B744(uint64_t a1, int a2)
{
  int v5 = a2;
  if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
  {
    id v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s not allowed with Unified Auto-Join",  "WiFiManagerAssociate");
    }
    objc_autoreleasePoolPop(v3);
  }

  else if (*(_BYTE *)(a1 + 24))
  {
    sub_10006B818(a1, *(_DWORD *)(a1 + 1816), *(CFTypeRef *)(a1 + 1824), 0);
    context[0] = a1;
    context[1] = 0xAAAAAAAA0000000DLL;
    context[2] = &v5;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
  }

void sub_10006B818(uint64_t a1, unsigned int a2, CFTypeRef cf, int a4)
{
  int v8 = *(_DWORD *)(a1 + 1816);
  if (v8 == a2)
  {
    unsigned int v9 = 0;
  }

  else
  {
    *(_DWORD *)(a1 + 1816) = a2;
    unsigned int v9 = a2;
  }

  uint64_t v10 = *(const void **)(a1 + 1824);
  if (!cf)
  {
    if (!v10)
    {
      int v13 = 0;
      goto LABEL_25;
    }

    int v14 = *(const void **)(a1 + 1824);
LABEL_22:
    CFRelease(v14);
    *(void *)(a1 + 1824) = 0LL;
LABEL_23:
    unsigned int v9 = *(_DWORD *)(a1 + 1816);
    int v13 = 1;
    goto LABEL_25;
  }

  if (v10)
  {
    int v11 = CFEqual(cf, v10);
    CFTypeRef v12 = *(CFTypeRef *)(a1 + 1824);
    if (v11)
    {
      int v13 = 0;
      goto LABEL_13;
    }

    if (v12)
    {
      CFRelease(v12);
      *(void *)(a1 + 1824) = 0LL;
    }
  }

  CFTypeRef v12 = CFRetain(cf);
  *(void *)(a1 + 1824) = v12;
  int v13 = 1;
LABEL_13:
  if (!v12) {
    goto LABEL_25;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  if (Current >= CFDateGetAbsoluteTime(*(CFDateRef *)(a1 + 1824)))
  {
    if (!*(_DWORD *)(a1 + 1816)) {
      goto LABEL_25;
    }
    int v17 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: no longer in disabled period. Re-enabling join recommendation for %@ networks", "WiFiManagerSetJoinRecommendationMode", sub_10006CFF0(*(_DWORD *)(a1 + 1816)) message];
    }
    objc_autoreleasePoolPop(v17);
    int v14 = *(const void **)(a1 + 1824);
    if (!v14) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }

  uint64_t v16 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: join recommendation is disabled by user until %@", "WiFiManagerSetJoinRecommendationMode", *(void *)(a1 + 1824) message];
  }
  objc_autoreleasePoolPop(v16);
  unsigned int v9 = 0;
LABEL_25:
  context[0] = a1;
  context[1] = 0xAAAAAAAA0000001ALL;
  context[2] = v9;
  void context[3] = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
  if (v8 == a2)
  {
    if (!v13) {
      return;
    }
  }

  else
  {
    uint64_t v18 = sub_10006CFF0(*(_DWORD *)(a1 + 1816));
    if (v18) {
      sub_10006D08C((void *)a1, @"JoinRecommendationMode", v18, a4);
    }
    if (!v13) {
      goto LABEL_32;
    }
  }

  sub_10006D08C((void *)a1, @"JoinRecommendationDisabledUntil", *(const void **)(a1 + 1824), a4);
LABEL_32:
  uint64_t v19 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: JoinRecommendation: mode: %@, disabledUntil: %@", "WiFiManagerSetJoinRecommendationMode", sub_10006CFF0(*(_DWORD *)(a1 + 1816)), *(void *)(a1 + 1824) message];
  }
  objc_autoreleasePoolPop(v19);
}

void sub_10006BA70(uint64_t a1)
{
  v1[0] = a1;
  v1[1] = 0xAAAAAAAA00000013LL;
  v1[2] = 0LL;
  v1[3] = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v1);
}

void sub_10006BAB4(uint64_t a1, int a2)
{
  int v4 = a2;
  if (a2)
  {
    if (*(_DWORD *)(a1 + 612) != 2) {
      sub_10006BB24(a1);
    }
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000014LL;
    context[2] = &v4;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
  }

void sub_10006BB24(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 776);
  if ((v2 - 1) < 2)
  {
    int v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"Canceling disassociation timer"];
    }
    objc_autoreleasePoolPop(v4);
    sub_100070470(a1, 1, 315360000.0);
  }

  else
  {
    if (!v2) {
      return;
    }
    if (v2 == 3)
    {
      id v3 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Disassociation timer already fired, so no need to cancel");
      }
      objc_autoreleasePoolPop(v3);
      sub_10006B570(a1, 1);
    }
  }

  *(_DWORD *)(a1 + 776) = 0;
}

void sub_10006BBE4(uint64_t a1, const void *a2, int a3)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  uint64_t v78 = a1;
  int v6 = *(const __SCPreferences **)(a1 + 904);
  BOOL v84 = a2;
  id v76 = (id)sub_10003AFF4((uint64_t)"WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent");
  if (!a2)
  {
    BOOL v71 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null ifName.",  "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent");
    }
    objc_autoreleasePoolPop(v71);
    if (Mutable) {
      goto LABEL_105;
    }
    goto LABEL_106;
  }

  if (!Mutable)
  {
    BOOL v72 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null scSetsToModify.",  "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent");
    }
    objc_autoreleasePoolPop(v72);
    goto LABEL_106;
  }

  if (!v6)
  {
    BOOL v73 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null preferences.",  "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent");
    }
    goto LABEL_136;
  }

  if (!sub_10003A25C(v6))
  {
    BOOL v73 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: prefLock failed",  "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent");
    }
LABEL_136:
    objc_autoreleasePoolPop(v73);
    goto LABEL_105;
  }

  SCPreferencesRef prefs = v6;
  CFIndex v7 = SCNetworkSetCopyAll(v6);
  int v8 = v7;
  if (!v7)
  {
    CFIndex v50 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null scSets.",  "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent");
    }
    uint64_t v39 = 0LL;
    goto LABEL_89;
  }

  CFMutableArrayRef theArray = Mutable;
  unsigned int v80 = v7;
  if (CFArrayGetCount(v7) < 1) {
    goto LABEL_66;
  }
  CFIndex v9 = 0LL;
  while (2)
  {
    ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v8, v9);
    if (!ValueAtIndex) {
      goto LABEL_60;
    }
    int v11 = ValueAtIndex;
    CFStringRef SetID = SCNetworkSetGetSetID(ValueAtIndex);
    CFStringRef Name = SCNetworkSetGetName(v11);
    if (Name)
    {
      BOOL v14 = CFEqual(@"Automatic", Name) != 0;
      if (!SetID) {
        goto LABEL_24;
      }
    }

    else
    {
      BOOL v14 = 0;
      if (!SetID) {
        goto LABEL_24;
      }
    }

    int v15 = *(const __CFDictionary **)(v78 + 216);
    if (v15)
    {
      int v16 = CFDictionaryContainsValue(v15, SetID);
      BOOL v17 = v16 != 0;
      if (v16) {
        BOOL v18 = v14;
      }
      else {
        BOOL v18 = 0;
      }
      if (v18)
      {
        uint64_t v19 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:4, "%s: network set %@ is in both automatic and custom network sets", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", SetID message];
        }
        objc_autoreleasePoolPop(v19);
        BOOL v17 = 1;
      }

      if (!v14) {
        goto LABEL_25;
      }
      goto LABEL_22;
    }

LABEL_49:
            if (!v35) {
              goto LABEL_53;
            }
            unsigned int v36 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:4, "%s: network service %@ with matching interface type %@ but BSD name %@ is present", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", SCNetworkServiceGetServiceID(v27), v32, BSDName message];
            }
            goto LABEL_52;
          }

          if (v33) {
            goto LABEL_47;
          }
        }
      }

  sub_10006E6B8(a1, 0LL, *(unsigned __int8 *)(a1 + 994), 2);
  properties[0] = (CFMutableDictionaryRef)a1;
  properties[1] = (CFMutableDictionaryRef)0xAAAAAAAA0000004ALL;
  properties[2] = 0LL;
  properties[3] = (CFMutableDictionaryRef)1;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, properties);
  sub_100027F90((const __CFArray *)a1, *(unsigned __int8 *)(a1 + 322), *(_DWORD *)(a1 + 840));
}

    CFRelease(v18);
LABEL_50:
    if (v20) {
      CFRelease(v20);
    }
    goto LABEL_52;
  }

  BOOL v17 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:4, "%s Client %@ has no entitlement", "kern_return_t _wifi_device_start_network(mach_port_t, vm_offset_t, mach_msg_type_number_t, int, vm_offset_t, mach_ msg_type_number_t, int *)", sub_10003BEDC((uint64_t)v16) message];
  }
  objc_autoreleasePoolPop(v17);
  *a7 = 1;
LABEL_52:
  CFRelease(v16);
LABEL_53:
  sub_10003A8FC((vm_address_t)a2, a3);
  sub_10003A8FC((vm_address_t)a5, a6);
  return 0LL;
}

    if ((id)++v10 == v8)
    {
      int v8 = [obj countByEnumeratingWithState:&v57 objects:v61 count:16];
      if (v8) {
        goto LABEL_3;
      }
      goto LABEL_51;
    }
  }

  CFIndex v40 = objc_autoreleasePoolPush();
  int v41 = v44;
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s Mismatched reason and network array counts ",  "__WiFiDeviceManagerCopyDenyListedNetworksAndReasons");
  }
  objc_autoreleasePoolPop(v40);
  uint64_t v39 = 0LL;
  if (v50) {
    goto LABEL_62;
  }
LABEL_63:
  if (v5) {
    CFRelease(v5);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v4) {
    CFRelease(v4);
  }
  objc_autoreleasePoolPop(v41);
  return v39;
}

    CFStringRef v32 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  22LL,  0LL);
    if (!v32) {
      return;
    }
    goto LABEL_45;
  }

LABEL_62:
    CFDateRef v38 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: ADDING examined network set to list for adding WiFi network service",  "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent");
    }
    objc_autoreleasePoolPop(v38);
    CFArrayAppendValue(Mutable, v11);
    if (v23) {
LABEL_56:
    }
      CFRelease(v23);
LABEL_57:
    BOOL v37 = v82;
    if (!a3) {
      BOOL v37 = 0;
    }
    int v8 = v80;
    if (!v37)
    {
LABEL_60:
      if (++v9 >= CFArrayGetCount(v8)) {
        break;
      }
      continue;
    }

    break;
  }

      objc_autoreleasePoolPop(v21);
      if (!*(_BYTE *)(a1 + 26) && !*(_BYTE *)(a1 + 1161) && (*(_BYTE *)(a1 + 992) || *(_BYTE *)(a1 + 1008)))
      {
        CFStringRef v32 = objc_autoreleasePoolPush();
        if (qword_100219F60)
        {
          if (*(_BYTE *)(a1 + 992)) {
            int v33 = "WoW";
          }
          else {
            int v33 = "LPAS";
          }
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: re-enabling auto-join for %s",  "WiFiManagerSetWoWState",  v33);
        }

        objc_autoreleasePoolPop(v32);
        sub_10006B570(a1, 1);
      }

      [*(id *)(a1 + 2144) updateWowState:*(_BYTE *)(a1 + 992) != 0 lpasState:*(_BYTE *)(a1 + 1008) != 0 lowPowerState:*(_BYTE *)(a1 + 994) != 0 batterySaverState:*(void *)(a1 + 1368) != 0];
      goto LABEL_73;
    }

        BOOL v31 = [a1 captiveProfile];
        if (v31) {
          [v9 addEntriesFromDictionary:v31];
        }
        if (!a2) {
          goto LABEL_66;
        }
        goto LABEL_65;
      }

      int v11 = (unsigned __int16)[a1 supportedSecurityTypes];
      CFTypeRef v12 = v11;
      if ((v11 & 2) == 0)
      {
        if ((v11 & 1) == 0
          || ([v9 setObject:&__kCFBooleanTrue forKeyedSubscript:@"WEP"],
              ![a2 containsObject:&off_1002048F0]))
        {
LABEL_31:
          if ((v12 & 0xC) != 0)
          {
            uint64_t v20 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
            objc_msgSend( v20,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 1),  @"IE_KEY_WPA_VERSION");
            objc_msgSend( v20,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 2),  @"IE_KEY_WPA_MCIPHER");
            char v21 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
            objc_msgSend(v21, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 2));
            [v20 setObject:v21 forKey:@"IE_KEY_WPA_UCIPHERS"];
            uint64_t v22 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
            if ((v12 & 8) != 0) {
              dispatch_time_t v23 = 1LL;
            }
            else {
              dispatch_time_t v23 = 2LL;
            }
            objc_msgSend(v22, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v23));
            [v20 setObject:v22 forKey:@"IE_KEY_WPA_AUTHSELS"];
            [v9 setObject:v20 forKeyedSubscript:@"WPA_IE"];
          }

          CFIndex v24 = v12 & 0x300;
          if ((v12 & 0xF0) == 0 && v24 != 256)
          {
LABEL_52:
            if (v24 == 768) {
              [v9 setObject:&__kCFBooleanTrue forKeyedSubscript:@"SCAN_RESULT_OWE_MULTI_SSID"];
            }
            else {
              uint64_t v29 = &__kCFBooleanFalse;
            }
            [v9 setObject:v29 forKeyedSubscript:@"ALLOW_WPA2_PSK"];
            else {
              CFTypeID v30 = &__kCFBooleanFalse;
            }
            [v9 setObject:v30 forKeyedSubscript:@"ALLOW_OWE_TSN"];
            int v4 = v82;
            if (!a2) {
              goto LABEL_62;
            }
            goto LABEL_61;
          }

          int v25 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
          objc_msgSend( v25,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 1),  @"IE_KEY_RSN_VERSION");
          objc_msgSend( v25,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4),  @"IE_KEY_RSN_MCIPHER");
          __int128 v26 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
          objc_msgSend(v26, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4));
          [v25 setObject:v26 forKey:@"IE_KEY_RSN_UCIPHERS"];
          uint64_t v27 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
          if ((v12 & 0x80) != 0)
          {
            objc_msgSend(v27, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 12));
            if ((v12 & 0x20) == 0)
            {
LABEL_40:
              if ((v12 & 0x40) == 0) {
                goto LABEL_47;
              }
              goto LABEL_44;
            }
          }

          else if ((v12 & 0x20) == 0)
          {
            goto LABEL_40;
          }

          objc_msgSend(v27, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
          if ((v12 & 0x40) == 0)
          {
LABEL_47:
            if (v24 == 256) {
              objc_msgSend( v27,  "addObject:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 18));
            }
            if ((v12 & 0x10) != 0) {
              objc_msgSend(v27, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 2));
            }
            [v25 setObject:v27 forKey:@"IE_KEY_RSN_AUTHSELS"];
            [v9 setObject:v25 forKeyedSubscript:@"RSN_IE"];
            goto LABEL_52;
          }

  objc_autoreleasePoolPop(v7);
}

LABEL_66:
  if (!CFArrayGetCount(Mutable))
  {
    BOOL v51 = 0;
    uint64_t v39 = 0LL;
    goto LABEL_91;
  }

  uint64_t v39 = SCNetworkInterfaceCopyAll();
  if (CFArrayGetCount(v39) < 1) {
    goto LABEL_86;
  }
  CFIndex v40 = 0LL;
  while (2)
  {
    int v41 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v39, v40);
    if (!v41)
    {
LABEL_85:
      if (++v40 >= CFArrayGetCount(v39)) {
        goto LABEL_86;
      }
      continue;
    }

    break;
  }

  uint64_t v42 = v41;
  CFStringRef v43 = SCNetworkInterfaceGetBSDName(v41);
  CFStringRef v44 = SCNetworkInterfaceGetInterfaceType(v42);
  CFStringRef v45 = v44;
  if (!v43)
  {
    if (!v44 || !CFEqual(v44, kSCNetworkInterfaceTypeIEEE80211)) {
      goto LABEL_85;
    }
    goto LABEL_79;
  }

  int v46 = CFEqual(v43, v84);
  int v47 = v46;
  if (!v45)
  {
    if (v46) {
      goto LABEL_82;
    }
    goto LABEL_85;
  }

  int v48 = CFEqual(v45, kSCNetworkInterfaceTypeIEEE80211);
  if (!v47 || !v48)
  {
    if (v47)
    {
LABEL_82:
      CFIndex v49 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4, "%s: network interface %@ with matching BSD name %@ but interface type %@ is present", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", SCNetworkInterfaceGetLocalizedDisplayName(v42), v43, v45 message];
      }
    }

    else
    {
      if (!v48) {
        goto LABEL_85;
      }
LABEL_79:
      CFIndex v49 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4, "%s: network interface %@ with matching interface type %@ but BSD name %@ is present", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", SCNetworkInterfaceGetLocalizedDisplayName(v42), v45, v43 message];
      }
    }

    objc_autoreleasePoolPop(v49);
    goto LABEL_85;
  }

  BOOL v58 = (const __SCNetworkInterface *)CFRetain(v42);
  if (!v58)
  {
LABEL_86:
    CFIndex v50 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: failed to find any SC network interface matching BSD name %@ and interface type %@", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", v84, kSCNetworkInterfaceTypeIEEE80211 message];
    }
    int v8 = v80;
LABEL_89:
    objc_autoreleasePoolPop(v50);
    BOOL v51 = 0;
LABEL_91:
    int v52 = 0LL;
LABEL_92:
    unsigned int v53 = prefs;
    goto LABEL_93;
  }

  int v52 = v58;
  if (CFArrayGetCount(Mutable) < 1)
  {
    BOOL v51 = 0;
    int v8 = v80;
    goto LABEL_92;
  }

  CFIndex v59 = 0LL;
  BOOL v85 = 0;
  int v8 = v80;
  unsigned int v53 = prefs;
  cf2 = v52;
  do
  {
    int v60 = (const __SCNetworkSet *)CFArrayGetValueAtIndex(Mutable, v59);
    if (v60)
    {
      unsigned int v61 = v60;
      uint64_t v62 = SCNetworkServiceCreate(v53, v52);
      unsigned int v63 = v62;
      if (v62)
      {
        SCNetworkServiceSetName(v62, @"Wi-Fi by wifid");
        SCNetworkServiceEstablishDefaultConfiguration(v63);
        int v64 = SCNetworkSetAddService(v61, v63);
        BOOL v85 = (v85 | v64) != 0;
      }

      else
      {
        int v64 = 0;
      }

      BOOL v65 = objc_autoreleasePoolPush();
      __int16 v66 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        if (v64) {
          unint64_t v67 = "success";
        }
        else {
          unint64_t v67 = "failure";
        }
        CFStringRef v68 = SCNetworkServiceGetName(v63);
        CFStringRef ServiceID = SCNetworkServiceGetServiceID(v63);
        CFStringRef v70 = SCNetworkSetGetName(v61);
        BOOL v74 = v67;
        unsigned int v53 = prefs;
        [v66 WFLog:4, "%s: %s ADDING <%@> network service %@ to <%@> network set %@", "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent", v74, v68, ServiceID, v70, SCNetworkSetGetSetID(v61), v76 message];
      }

      objc_autoreleasePoolPop(v65);
      if (v63) {
        CFRelease(v63);
      }
      CFMutableDictionaryRef Mutable = theArray;
      int v8 = v80;
      int v52 = cf2;
    }

    ++v59;
  }

  while (v59 < CFArrayGetCount(Mutable));
  BOOL v51 = v85;
LABEL_93:
  int v54 = sub_10003A310(v53, v51);
  dispatch_time_t v55 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    char v56 = "changes";
    if (!v51) {
      char v56 = "no changes";
    }
    uint64_t v57 = "successfully";
    if (!v54) {
      uint64_t v57 = "unsuccessfully";
    }
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: %s committed, prefs %s unlocked",  "WiFiManagerHelperInsertWiFiServiceToNetworkSetsIfNotPresent",  v56,  v57);
  }

  objc_autoreleasePoolPop(v55);
  if (v52) {
    CFRelease(v52);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v8) {
    CFRelease(v8);
  }
LABEL_105:
  CFRelease(Mutable);
LABEL_106:
}

  if ((*(_BYTE *)(a1 + 656) & 0x2A) != 0)
  {
    int v48 = v17;
    CFIndex v49 = v9;
    uint64_t v29 = sub_100071968(a1);
    CFTypeID v30 = sub_1000719F0(a1);
    BOOL v31 = objc_autoreleasePoolPush();
    CFStringRef v32 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      int v33 = *(void *)(a1 + 656);
      if ((v33 & 2) != 0) {
        int v34 = "Present";
      }
      else {
        int v34 = "Not Present";
      }
      if ((v33 & 8) != 0) {
        int v35 = "Present";
      }
      else {
        int v35 = "Not Present";
      }
      CFStringRef v45 = v35;
      int v46 = v34;
      unsigned int v36 = @"none";
      int v47 = v19;
      BOOL v37 = v20;
      if (v29) {
        CFDateRef v38 = v29;
      }
      else {
        CFDateRef v38 = @"none";
      }
      uint64_t v39 = objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "isBackgroundActivityRegistered");
      if (v30) {
        unsigned int v36 = v30;
      }
      CFStringRef v44 = v38;
      uint64_t v20 = v37;
      uint64_t v19 = v47;
      [v32 WFLog:3, "BG Application: %s, BG Daemon: %s. Daemons: %@ (activity=%d) Cloud Clients: %@ (activity=%d)", v46, v45, v44, v39, v36, objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"), "isWiFiBoundActivityRegistered") message];
    }

    objc_autoreleasePoolPop(v31);
    if (v29) {
      CFRelease(v29);
    }
    LOBYTE(v9) = v49;
    BOOL v17 = v48;
    if (v30) {
      CFRelease(v30);
    }
  }

  if ((v9 & 4) == 0)
  {
LABEL_89:
    if (!v51) {
      goto LABEL_91;
    }
    goto LABEL_90;
  }

  CFIndex v40 = *(void *)(a1 + 656);
  if ((v40 & 4) != 0)
  {
    BOOL v17 = 2;
    uint64_t v19 = 1;
    goto LABEL_89;
  }

  if ((v40 & 0x11) != 0) {
    goto LABEL_89;
  }
LABEL_90:
  sub_100070330(a1);
  if ((*(_BYTE *)(a1 + 656) & 0x2A) != 0)
  {
LABEL_92:
    sub_100070560(a1);
    goto LABEL_93;
  }

      objc_autoreleasePoolPop(v23);
      return 1LL;
    }

    if (v11 && !v18)
    {
      dispatch_time_t v23 = objc_autoreleasePoolPush();
      int v47 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        int v48 = sub_100095BC8((const void *)a1);
        [v47 WFLog:3, "NOI home-state: preferred (1) %@ (as it's profile based) over %@", v48, sub_100095BC8((const void *)a2), v67, v68 message];
      }

      goto LABEL_33;
    }

    if (!v11 && v18)
    {
      dispatch_time_t v23 = objc_autoreleasePoolPush();
      CFIndex v49 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        CFIndex v50 = sub_100095BC8((const void *)a2);
        [v49 WFLog:3, "NOI home-state: preferred (2) %@ (as it's profile based) over %@", v50, sub_100095BC8((const void *)a1), v67, v68 message];
      }

      goto LABEL_66;
    }

    if (v11 && v18)
    {
      if (theDate)
      {
        if (!v19)
        {
          dispatch_time_t v23 = objc_autoreleasePoolPush();
          uint64_t v62 = (void *)qword_100219F60;
          if (qword_100219F60)
          {
            unsigned int v63 = sub_100095BC8((const void *)a1);
            [v62 WFLog:3, "NOI home-state: preferred (1) %@ over %@ (which has no kWiFiPreferenceAddedAtKey)", v63, sub_100095BC8((const void *)a2), v67, v68 message];
          }

          goto LABEL_33;
        }

        BOOL v51 = CFDateCompare(theDate, v19, 0LL);
        dispatch_time_t v23 = objc_autoreleasePoolPush();
        int v52 = (void *)qword_100219F60;
        if (v51 != kCFCompareLessThan)
        {
          if (qword_100219F60)
          {
            unsigned int v53 = sub_100095BC8((const void *)a1);
            int v54 = sub_100095BC8((const void *)a2);
            dispatch_time_t v55 = sub_100095BC8((const void *)a1);
            [v52 WFLog:3, "NOI home-state: preferred (1) %@ over %@. %@ was added after %@", v53, v54, v55, sub_100095BC8((const void *)a2) message];
          }

          goto LABEL_33;
        }

        if (qword_100219F60)
        {
          int v64 = sub_100095BC8((const void *)a2);
          BOOL v65 = sub_100095BC8((const void *)a1);
          __int16 v66 = sub_100095BC8((const void *)a2);
          [v52 WFLog:3, "NOI home-state: preferred (2) %@ over %@. %@ was added after %@", v64, v65, v66, sub_100095BC8((const void *)a1) message];
        }
      }

      else
      {
        dispatch_time_t v23 = objc_autoreleasePoolPush();
        int v60 = (void *)qword_100219F60;
        if (qword_100219F60)
        {
          unsigned int v61 = sub_100095BC8((const void *)a2);
          [v60 WFLog:3, "NOI home-state: preferred (2) %@ over %@ (which has no kWiFiPreferenceAddedAtKey)", v61, sub_100095BC8((const void *)a1), v67, v68 message];
        }
      }

      goto LABEL_66;
    }

    if (v10 && v12 != 1)
    {
      dispatch_time_t v23 = objc_autoreleasePoolPush();
      char v56 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        uint64_t v57 = sub_100095BC8((const void *)a1);
        [v56 WFLog:3, "NOI home-state: preferred (1) %@ over %@", v57, sub_100095BC8((const void *)a2), v67, v68 message];
      }

      goto LABEL_33;
    }

    if (!v10 && v12 == 1)
    {
      dispatch_time_t v23 = objc_autoreleasePoolPush();
      BOOL v58 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        CFIndex v59 = sub_100095BC8((const void *)a2);
        [v58 WFLog:3, "NOI home-state: Preferred (2) %@ over %@", v59, sub_100095BC8((const void *)a1), v67, v68 message];
      }

      goto LABEL_66;
    }

    if (a3) {
      *a3 = v10;
    }
    return 0LL;
  }

  if (v8) {
    uint64_t v27 = a1;
  }
  else {
    uint64_t v27 = a2;
  }
  unint64_t v28 = (const __CFDate *)sub_10009CE28(v27);
  if (v11) {
    uint64_t v29 = (const void *)a1;
  }
  else {
    uint64_t v29 = (const void *)a2;
  }
  CFTypeID v30 = (const __CFDate *)sub_1000951FC((uint64_t)v29, @"addedAt");
  BOOL v31 = CFDateCompare(v28, v30, 0LL);
  CFStringRef v32 = objc_autoreleasePoolPush();
  int v33 = (void *)qword_100219F60;
  if (v31 == kCFCompareLessThan)
  {
    if (qword_100219F60)
    {
      CFIndex v40 = sub_100095BC8(v29);
      if (v11) {
        int v41 = (const void *)a2;
      }
      else {
        int v41 = (const void *)a1;
      }
      [v33 WFLog:3, "NOI: Profile based network (%@) was added AFTER network was force fixed  (%@), prefer profile based ", v40, sub_100095BC8(v41) message];
    }

    objc_autoreleasePoolPop(v32);
    unsigned int v36 = v8 == 0;
    BOOL v37 = -1LL;
  }

  else
  {
    if (qword_100219F60)
    {
      int v34 = sub_100095BC8(v29);
      if (v11) {
        int v35 = (const void *)a2;
      }
      else {
        int v35 = (const void *)a1;
      }
      [v33 WFLog:3, "NOI: Profile based network (%@) was added BEFORE network was force fixed (%@), prefer force fixed network ", v34, sub_100095BC8(v35) message];
    }

    objc_autoreleasePoolPop(v32);
    unsigned int v36 = v8 == 0;
    BOOL v37 = 1LL;
  }

  if (v36) {
    return v37;
  }
  else {
    return -v37;
  }
}

uint64_t sub_10006C58C(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 322);
  }
  int v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: managerRef is NULL",  "WiFiManagerGetDeviceExternallyPowered");
  }
  objc_autoreleasePoolPop(v2);
  return 0LL;
}

uint64_t sub_10006C5F8(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 840);
  }
  int v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: managerRef is NULL",  "WiFiManagerGetDeviceBatteryLevel");
  }
  objc_autoreleasePoolPop(v2);
  return 0LL;
}

void sub_10006C664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3)
  {
    context[0] = a1;
    context[1] = a2;
    context[2] = a3;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_10006C6F4, context);
  }

  else
  {
    id v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: Invalid arguments", "WiFiManagerCatsUcmUpdate");
    }
    objc_autoreleasePoolPop(v3);
  }

void sub_10006C6F4(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && *(void *)a2 && *(void *)(a2 + 8))
  {
    sub_10003DA14(a1, *(void *)(a2 + 8), *(const void **)(a2 + 16));
  }

  else
  {
    int v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Invalid arguments",  "__WiFiManagerDispatchCatsUcmUpdateEvent");
    }
    objc_autoreleasePoolPop(v2);
  }

CFArrayRef sub_10006C77C(CFArrayRef result)
{
  if (result)
  {
    CFArrayRef v1 = result;
    uint64_t result = (CFArrayRef)*((void *)result + 13);
    if (result)
    {
      uint64_t result = (CFArrayRef)CFSetGetCount(result);
      if (result)
      {
        CFIndex v2 = (CFIndex)result;
        __chkstk_darwin();
        int v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        memset(v4, 170, v3);
        CFSetGetValues(*((CFSetRef *)v1 + 13), (const void **)v4);
        return CFArrayCreate(kCFAllocatorDefault, (const void **)v4, v2, &kCFTypeArrayCallBacks);
      }
    }
  }

  return result;
}

CFArrayRef sub_10006C854(CFArrayRef result)
{
  if (result)
  {
    CFArrayRef v1 = result;
    uint64_t result = (CFArrayRef)*((void *)result + 12);
    if (result)
    {
      uint64_t result = (CFArrayRef)CFSetGetCount(result);
      if (result)
      {
        CFIndex v2 = (CFIndex)result;
        __chkstk_darwin();
        int v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        memset(v4, 170, v3);
        CFSetGetValues(*((CFSetRef *)v1 + 12), (const void **)v4);
        return CFArrayCreate(kCFAllocatorDefault, (const void **)v4, v2, &kCFTypeArrayCallBacks);
      }
    }
  }

  return result;
}

BOOL sub_10006C92C(uint64_t a1)
{
  return *(void *)(a1 + 704) == 0LL;
}

__CFArray *sub_10006C93C(uint64_t a1, const __CFString *a2)
{
  if (!a1) {
    return 0LL;
  }
  CFArrayRef v3 = sub_10006CA28(a1);
  if (!v3) {
    return 0LL;
  }
  int v4 = v3;
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    CFIndex Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      for (CFIndex i = 0LL; i != v7; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
        if (ValueAtIndex)
        {
          uint64_t v10 = ValueAtIndex;
          int v11 = (const __CFString *)sub_10009ECAC((uint64_t)ValueAtIndex);
          if (v11)
          {
            if (CFStringCompare(v11, a2, 0LL) == kCFCompareEqualTo)
            {
              CFArrayAppendValue(Mutable, v10);
              if (!CFArrayGetCount(Mutable))
              {
                if (Mutable)
                {
                  CFRelease(Mutable);
                  CFMutableDictionaryRef Mutable = 0LL;
                }
              }
            }
          }
        }
      }
    }
  }

  CFRelease(v4);
  return Mutable;
}

CFArrayRef sub_10006CA28(uint64_t a1)
{
  CFIndex v2 = *(const __CFArray **)(a1 + 224);
  if (v2 && CFArrayGetCount(v2)) {
    return CFArrayCreateCopy(kCFAllocatorDefault, *(CFArrayRef *)(a1 + 224));
  }
  else {
    return 0LL;
  }
}

__CFArray *sub_10006CA74(uint64_t a1)
{
  CFIndex v2 = *(const __CFArray **)(a1 + 224);
  if (!v2 || !CFArrayGetCount(v2)) {
    return 0LL;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 224));
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, Count, &kCFTypeArrayCallBacks);
  if (Mutable && CFArrayGetCount(*(CFArrayRef *)(a1 + 224)) >= 1)
  {
    CFIndex v5 = 0LL;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 224), v5);
      if (ValueAtIndex)
      {
        CFIndex v7 = sub_100094E60((uint64_t)kCFAllocatorDefault, (uint64_t)ValueAtIndex);
        CFArrayAppendValue(Mutable, v7);
        CFRelease(v7);
      }

      ++v5;
    }

    while (v5 < CFArrayGetCount(*(CFArrayRef *)(a1 + 224)));
  }

  return Mutable;
}

CFArrayRef sub_10006CB48(uint64_t a1)
{
  uint64_t result = sub_10006CA28(a1);
  if (result)
  {
    CFIndex v2 = result;
    CFArrayRef v3 = sub_10003A704(result);
    CFRelease(v2);
    return v3;
  }

  return result;
}

void sub_10006CB80(uint64_t a1)
{
  if (a1)
  {
    CFIndex v2 = *(const __CFArray **)(a1 + 224);
    if (v2)
    {
      CFIndex Count = CFArrayGetCount(v2);
      if (Count >= 1)
      {
        CFIndex v4 = Count;
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
        for (CFIndex i = 0LL; i != v4; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 224), i);
          if (!sub_10009A128((uint64_t)ValueAtIndex))
          {
            int v8 = sub_10009F05C((uint64_t)ValueAtIndex);
            if (v8)
            {
              CFIndex v9 = v8;
              uint64_t v10 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:3, "%s: Adding %@ disabled until %@", "WiFiManagerReloadNetworksDisabledUntil", sub_100095BC8(ValueAtIndex), v9 message];
              }
              objc_autoreleasePoolPop(v10);
              CFArrayAppendValue(Mutable, ValueAtIndex);
            }
          }
        }

        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1728));
        if (CFArrayGetCount(Mutable) >= 1)
        {
          int v11 = *(__CFArray **)(a1 + 1728);
          v13.length = CFArrayGetCount(Mutable);
          v13.CFIndex location = 0LL;
          CFArrayAppendArray(v11, Mutable, v13);
        }

        if (Mutable) {
          CFRelease(Mutable);
        }
      }
    }
  }

  else
  {
    CFTypeRef v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null manager",  "WiFiManagerReloadNetworksDisabledUntil");
    }
    objc_autoreleasePoolPop(v12);
  }

void sub_10006CD4C(uint64_t a1, const __CFDictionary *cf1)
{
  if (!cf1 || (CFIndex v4 = *(const void **)(a1 + 216)) == 0LL || !CFEqual(cf1, v4))
  {
    CFIndex v5 = *(const void **)(a1 + 216);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 216) = 0LL;
    }

    if (cf1) {
      *(void *)(a1 + 216) = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, cf1);
    }
    v6[0] = a1;
    v6[1] = 0xAAAAAAAA00000004LL;
    CFTypeRef v6[2] = 0LL;
    v6[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v6);
    if (cf1) {
      -[NSUserDefaults setObject:forKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "setObject:forKey:",  cf1,  @"Custom network settings");
    }
  }

uint64_t sub_10006CE0C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 216);
  }
  return result;
}

void sub_10006CE18(uint64_t a1, uint64_t a2)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000051LL;
  v2[2] = a2;
  v2[3] = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
}

void sub_10006CE5C(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 1064) = a2;
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000027LL;
  v2[2] = 0LL;
  v2[3] = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
}

void sub_10006CEA4(uint64_t a1, int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 312);
  if (v3 != a2)
  {
    *(_DWORD *)(a1 + 312) = a2;
    v10[0] = a1;
    v10[1] = 0xAAAAAAAA00000017LL;
    void v10[2] = 0LL;
    void v10[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v10);
    CFIndex v7 = &kSCValNetAirPortJoinModeAutomatic;
    int v8 = &kSCValNetAirPortJoinModeAutomatic;
    switch(a2)
    {
      case 0:
        goto LABEL_7;
      case 1:
        int v8 = &kSCValNetAirPortJoinModePreferred;
        goto LABEL_7;
      case 2:
        int v8 = &kSCValNetAirPortJoinModeRecent;
        goto LABEL_7;
      case 3:
        int v8 = &kSCValNetAirPortJoinModeStrongest;
        goto LABEL_7;
      case 4:
        int v8 = &kSCValNetAirPortJoinModeRanked;
LABEL_7:
        if (*v8)
        {
          switch(a2)
          {
            case 0:
              goto LABEL_14;
            case 1:
              CFIndex v7 = &kSCValNetAirPortJoinModePreferred;
              goto LABEL_14;
            case 2:
              CFIndex v7 = &kSCValNetAirPortJoinModeRecent;
              goto LABEL_14;
            case 3:
              CFIndex v7 = &kSCValNetAirPortJoinModeStrongest;
              goto LABEL_14;
            case 4:
              CFIndex v7 = &kSCValNetAirPortJoinModeRanked;
LABEL_14:
              CFStringRef v9 = *v7;
              break;
            default:
              CFStringRef v9 = 0LL;
              break;
          }

          sub_10006D08C((void *)a1, kSCPropNetAirPortJoinMode, v9, a3);
        }

        break;
      case 5:
        *(_DWORD *)(a1 + 312) = v3;
        break;
      default:
        return;
    }
  }

CFStringRef sub_10006CFF0(int a1)
{
  if (a1 <= 251)
  {
    if (a1)
    {
      if (a1 == 1)
      {
        return @"Quality";
      }

      else if (a1 == 2)
      {
        return @"Captive";
      }

      else
      {
        return 0LL;
      }
    }

    else
    {
      return @"None";
    }
  }

  else
  {
    switch(a1)
    {
      case 252:
        uint64_t result = @"Public";
        break;
      case 253:
        uint64_t result = @"NewLocation";
        break;
      case 254:
        uint64_t result = @"InfrequentNetwork";
        break;
      case 255:
        uint64_t result = @"All";
        break;
      default:
        return 0LL;
    }
  }

  return result;
}

uint64_t sub_10006D08C(void *a1, const __CFString *a2, const void *a3, int a4)
{
  if (!a2) {
    return 0LL;
  }
  CFIndex v7 = (const __SCPreferences *)sub_100072F14(a1, a2);
  if (!v7) {
    return 0LL;
  }
  int v8 = v7;
  if (!a4)
  {
    if (sub_10003A25C(v7))
    {
      CFStringRef v9 = (void *)sub_10003AFF4((uint64_t)"__WiFiManagerSetProperty");
      goto LABEL_7;
    }

    return 0LL;
  }

  CFStringRef v9 = 0LL;
LABEL_7:
  if (a3)
  {
    uint64_t v10 = SCPreferencesSetValue(v8, a2, a3);
  }

  else
  {
    if (!SCPreferencesGetValue(v8, a2))
    {
      uint64_t v11 = 1LL;
      if (a4) {
        return v11;
      }
      goto LABEL_17;
    }

    uint64_t v10 = SCPreferencesRemoveValue(v8, a2);
  }

  uint64_t v11 = v10;
  if (!(_DWORD)v10)
  {
    CFTypeRef v12 = objc_autoreleasePoolPush();
    CFRange v13 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      int v14 = SCError();
      [v13 WFLog:4, "SCPreferencesSetValue() %s key=%@ value=%@", SCErrorString(v14), a2, a3 message];
    }

    objc_autoreleasePoolPop(v12);
    uint64_t v11 = 0LL;
  }

  if (!a4)
  {
LABEL_17:
    uint64_t v11 = sub_10003A310(v8, v11);
  }

  return v11;
}

void sub_10006D1B4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1160))
  {
    if (*(void *)(a1 + 672)) {
      int v2 = 1;
    }
    else {
      int v2 = 3;
    }
    if (*(void *)(a1 + 672)) {
      int v3 = 2;
    }
    else {
      int v3 = 3;
    }
    if (*(void *)(a1 + 688)) {
      int v4 = v3;
    }
    else {
      int v4 = v2;
    }
  }

  else
  {
    int v4 = 0;
  }

  -[WiFiUserInteractionMonitor setCurrentDisplayState:andLockState:]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "setCurrentDisplayState:andLockState:",  *(void *)(a1 + 672) != 0LL,  *(void *)(a1 + 688) != 0LL);
  if (*(_DWORD *)(a1 + 1144) != v4)
  {
    *(_DWORD *)(a1 + 1144) = v4;
    if (v4 == 1)
    {
      if (*(_BYTE *)(a1 + 1576))
      {
        *(_BYTE *)(a1 + 1576) = 0;
        blocCFIndex k = _NSConcreteStackBlock;
        unint64_t v29 = 3221225472LL;
        CFTypeID v30 = sub_10008EDB8;
        uint64_t v31 = (uint64_t)&unk_1001E2620;
        uint64_t v32 = a1;
        dispatch_async((dispatch_queue_t)qword_100219F80, &block);
      }
    }

    else if ((v4 - 1) > 1)
    {
      goto LABEL_40;
    }

    CFIndex v5 = objc_autoreleasePoolPush();
    int v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: user auto join state is disabled, checking to re-enable",  "__WiFiManagerCheckUserAutoJoinEnable");
    }
    objc_autoreleasePoolPop(v6);
    CFIndex v7 = *(void **)(a1 + 1712);
    if ([*(id *)(a1 + 1464) isAuthorized])
    {
      if (*(_BYTE *)(a1 + 1705))
      {
        int v15 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: no location was available when disabled",  "__WiFiManagerCheckUserAutoJoinEnable");
        }
      }

      else
      {
        if (v7)
        {
          id v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 1464), "latestLocation"), "copy");
          if (+[WiFiLocationManager isLocationValid:uptoSeconds:isHighAccuracy:]( &OBJC_CLASS___WiFiLocationManager,  "isLocationValid:uptoSeconds:isHighAccuracy:",  v8,  1LL,  60.0))
          {
            [v7 horizontalAccuracy];
            double v10 = v9;
            [v8 horizontalAccuracy];
            double v12 = v11;
            [v8 distanceFromLocation:v7];
            double v14 = v13 - v10 - v12;
            int v15 = objc_autoreleasePoolPush();
            if (v14 > 300.0)
            {
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: distance (%f) passed fence size (%f)",  "__WiFiManagerCheckUserAutoJoinEnable",  *(void *)&v14,  0x4072C00000000000);
              }
              objc_autoreleasePoolPop(v15);
              *(_BYTE *)(a1 + 1704) = 0;
              int v16 = *(const void **)(a1 + 1712);
              if (v16)
              {
                CFRelease(v16);
                *(void *)(a1 + 1712) = 0LL;
              }

              sub_10006D08C((void *)a1, @"UserAutoJoinDisabledLoc", 0LL, 0);
LABEL_30:
              int v17 = *(_DWORD *)(a1 + 1240);
              uint64_t v18 = *(void *)(a1 + 1248);
              uint64_t v19 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:3, "%s: motionState %@ (time %f)", "__WiFiManagerCheckUserAutoJoinEnable", sub_10008FDAC(v17), v18 message];
              }
              objc_autoreleasePoolPop(v19);
              uint64_t v20 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: enabling user auto join due to motion state",  "__WiFiManagerCheckUserAutoJoinEnable");
              }
              objc_autoreleasePoolPop(v20);
              sub_10006570C(a1, 1LL, 4LL, 0LL);
LABEL_35:
              if (v8) {
                CFRelease(v8);
              }
LABEL_37:
              objc_autoreleasePoolPop(v5);
              sub_10006D6CC(a1, 0);
              if (-[WiFiUserInteractionMonitor isSetupCompleted]( +[WiFiUserInteractionMonitor sharedInstance]( &OBJC_CLASS___WiFiUserInteractionMonitor,  "sharedInstance"),  "isSetupCompleted")
                && !*(_BYTE *)(a1 + 1948))
              {
                sub_10006910C(a1);
              }

              goto LABEL_40;
            }

            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s, distance (%f) from disabling is less than fence size (%f)",  "__WiFiManagerCheckUserAutoJoinEnable",  *(void *)&v14,  0x4072C00000000000);
            }
          }

          else
          {
            int v15 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: leeched location is not high accuracy",  "__WiFiManagerCheckUserAutoJoinEnable",  v26,  v27);
            }
          }

void sub_10006D6CC(uint64_t a1, unsigned int a2)
{
  int v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Checking networks disabled until date (removeAll %d)",  "WiFiManagerCheckNetworksDisabledUntil",  a2);
  }
  objc_autoreleasePoolPop(v4);
  if (a1)
  {
    if (*(void *)(a1 + 1728))
    {
      if (sub_1000653FC(a1))
      {
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 1728));
        if (Count >= 1)
        {
          CFIndex v6 = Count;
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          theDate = CFDateCreate(kCFAllocatorDefault, Current);
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
          for (CFIndex i = 0LL; i != v6; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1728), i);
            if (!sub_10009A128((uint64_t)ValueAtIndex))
            {
              double v11 = (const __CFDate *)sub_10009F05C((uint64_t)ValueAtIndex);
              if (v11)
              {
                double v12 = v11;
                double v13 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  [(id)qword_100219F60 WFLog:3, "%s: %@ disabled until %@", "WiFiManagerCheckNetworksDisabledUntil", sub_100095BC8(ValueAtIndex), v12 message];
                }
                objc_autoreleasePoolPop(v13);
                if (a2 || CFDateCompare(theDate, v12, 0LL) == kCFCompareGreaterThan)
                {
                  double v14 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    [(id)qword_100219F60 WFLog:3, "%s: enabling network %@", "WiFiManagerCheckNetworksDisabledUntil", sub_100095BC8(ValueAtIndex) message];
                  }
                  objc_autoreleasePoolPop(v14);
                  CFArrayAppendValue(Mutable, ValueAtIndex);
                }
              }
            }
          }

          CFIndex v15 = CFArrayGetCount(Mutable);
          if (v15 >= 1)
          {
            CFIndex v16 = v15;
            for (CFIndex j = 0LL; j != v16; ++j)
            {
              uint64_t v18 = (void *)CFArrayGetValueAtIndex(Mutable, j);
              sub_100099F8C((uint64_t)v18, 0LL);
              sub_100099ED0((uint64_t)v18, 1);
              sub_100077498(a1, v18, 1u);
            }

            sub_10006CB80(a1);
          }

          if (Mutable) {
            CFRelease(Mutable);
          }
          if (theDate) {
            CFRelease(theDate);
          }
        }
      }
    }
  }

  else
  {
    uint64_t v19 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null manager",  "WiFiManagerCheckNetworksDisabledUntil");
    }
    objc_autoreleasePoolPop(v19);
  }

uint64_t sub_10006D980(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 1144);
  }
  int v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: manager Param is NULL!",  "WiFiManagerGetUserInteractionMode");
  }
  objc_autoreleasePoolPop(v2);
  return 3LL;
}

uint64_t sub_10006D9EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 312);
}

void sub_10006D9F4(uint64_t a1, unsigned int a2, int a3)
{
  if (byte_100219FA1)
  {
    int v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Lockdown Mode is enabled, ignoring set WiFiAskToJoinPreferenceType %ld",  "WiFiManagerSetAskToJoinPreference",  a2);
    }
    objc_autoreleasePoolPop(v4);
  }

  else if (*(_DWORD *)(a1 + 648) != a2)
  {
    *(_DWORD *)(a1 + 64_Block_object_dispose((const void *)(v1 - 48), 8) = a2;
    context[0] = a1;
    context[1] = 0xAAAAAAAA0000001BLL;
    context[2] = 0LL;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    unsigned int valuePtr = a2;
    CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v7)
    {
      CFNumberRef v8 = v7;
      sub_10006D08C((void *)a1, @"ATJPreference", v7, a3);
      CFRelease(v8);
    }

    objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "sendUserSettingsDidChangeEvent");
  }

uint64_t sub_10006DB1C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 648);
}

void sub_10006DB24(uint64_t a1, uint64_t a2, int a3)
{
  if (*(_DWORD *)(a1 + 344) != (_DWORD)a2)
  {
    *(_DWORD *)(a1 + 344) = a2;
    LODWORD(valuePtr) = a2;
    CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      sub_10006D08C((void *)a1, @"Compatibility", v6, a3);
      CFRelease(v7);
    }

    CFNumberRef v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: mode:%u", "WiFiManagerSet6ECompatibilityMode", a2);
    }
    objc_autoreleasePoolPop(v8);
    double v9 = *(void **)(a1 + 2144);
    if (v9) {
      [v9 updateWithCompatibilityMode:(_DWORD)a2 == 0];
    }
    objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "sendUserSettingsDidChangeEvent");
    uint64_t valuePtr = a1;
    unint64_t v12 = 0xAAAAAAAA00000088LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &valuePtr);
    if ((_BYTE)v14)
    {
      if ((_DWORD)a2)
      {
        if ((_DWORD)a2 != 1) {
          return;
        }
        uint64_t valuePtr = a1;
        unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
        int v10 = 137;
      }

      else
      {
        uint64_t valuePtr = a1;
        unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
        int v10 = 138;
      }

      LODWORD(v12) = v10;
      uint64_t v13 = 0LL;
      uint64_t v14 = 0LL;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &valuePtr);
    }
  }

uint64_t sub_10006DC84(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000088LL;
  v2[2] = 0LL;
  uint64_t v3 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  return v3;
}

uint64_t sub_10006DCC8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 344);
}

uint64_t sub_10006DCD0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1816);
}

uint64_t sub_10006DCD8(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 316) != a2)
  {
    uint64_t v3 = (void *)result;
    *(_BYTE *)(result + 316) = a2;
    v5[0] = result;
    v5[1] = 0xAAAAAAAA0000001DLL;
    v5[2] = 0LL;
    v5[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(result + 104), (CFSetApplierFunction)sub_1000662CC, v5);
    int v4 = (const void **)&kCFBooleanFalse;
    if (a2) {
      int v4 = (const void **)&kCFBooleanTrue;
    }
    return sub_10006D08C(v3, @"mStageAutoJoin", *v4, 0);
  }

  return result;
}

void sub_10006DD70(uint64_t a1, int a2, int a3, CFTypeRef cf)
{
  if (!cf || (CFTypeID v8 = CFGetTypeID(cf), v8 != CFDateGetTypeID()))
  {
    int v10 = 1;
    goto LABEL_6;
  }

  double Current = CFAbsoluteTimeGetCurrent();
  int v10 = 0;
  if (Current - CFDateGetAbsoluteTime((CFDateRef)cf) < 604800.0)
  {
LABEL_6:
    int v11 = 1;
    unint64_t v12 = "ENABLED";
    goto LABEL_7;
  }

  int v11 = 0;
  unint64_t v12 = "DISABLED";
LABEL_7:
  if (*(unsigned __int8 *)(a1 + 317) != a2
    || *(unsigned __int8 *)(a1 + 318) != a3
    || *(unsigned __int8 *)(a1 + 319) != v11)
  {
    if (*(unsigned __int8 *)(a1 + 319) != v11)
    {
      uint64_t v13 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "Device updated learning phase to %s", v12);
      }
      objc_autoreleasePoolPop(v13);
    }

    *(_BYTE *)(a1 + 317) = a2;
    *(_BYTE *)(a1 + 31_Block_object_dispose((const void *)(v1 - 48), 8) = a3;
    *(_BYTE *)(a1 + 3memset(buffer, 170, 19) = v11;
    context[0] = a1;
    context[1] = 0xAAAAAAAA0000001ELL;
    context[2] = 0LL;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    if (a2) {
      CFBooleanRef v14 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v14 = kCFBooleanFalse;
    }
    sub_10006D08C((void *)a1, @"optimizedAutoJoin", v14, 0);
    if (a3) {
      CFBooleanRef v15 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v15 = kCFBooleanFalse;
    }
    sub_10006D08C((void *)a1, @"Enable5GhzAutoJoinScan", v15, 0);
    if (v10)
    {
      CFAbsoluteTime v16 = CFAbsoluteTimeGetCurrent();
      CFDateRef v17 = CFDateCreate(kCFAllocatorDefault, v16);
      sub_10006D08C((void *)a1, @"deviceUpdatedDate", v17, 0);
      if (v17) {
        CFRelease(v17);
      }
    }
  }

void sub_10006DF5C(uint64_t a1, char a2)
{
  char v3 = a2;
  context[0] = a1;
  context[1] = 0xAAAAAAAA00000077LL;
  context[2] = &v3;
  void context[3] = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
}

void sub_10006DFA8(uint64_t a1, const __CFString *a2, int a3)
{
  uint64_t context = a1;
  unint64_t v14 = 0xAAAAAAAA00000034LL;
  CFBooleanRef v15 = 0LL;
  uint64_t v16 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
  int v6 = v16;
  *(_BYTE *)(a1 + 1040) = v16;
  if (v6 == a3)
  {
    CFNumberRef v7 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      if (*(_BYTE *)(a1 + 1040) == 1) {
        CFTypeID v8 = "enabled";
      }
      else {
        CFTypeID v8 = "disabled";
      }
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "MIS is already %s", v8);
    }

    goto LABEL_27;
  }

  *(_BYTE *)(a1 + 1040) = a3;
  if (a3)
  {
    sub_10006E1B8(a1, a2, a3, 0, 0, 0);
    goto LABEL_22;
  }

  int v12 = 0;
  if (sub_10003DF4C(a2))
  {
    int v9 = *(_DWORD *)(a1 + 348);
    if (v9 == 1)
    {
      int v10 = 7;
    }

    else if (v9 == 2)
    {
      int v10 = 6;
    }

    else
    {
      int v10 = 3;
    }
  }

  else if (sub_10003DEE4(a2))
  {
    int v10 = 2;
  }

  else
  {
    int v10 = 1;
  }

  int v12 = v10;
LABEL_21:
  uint64_t context = a1;
  unint64_t v14 = 0xAAAAAAAA00000020LL;
  CFBooleanRef v15 = &v12;
  uint64_t v16 = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
  *(_BYTE *)(a1 + 1041) = 0;
LABEL_22:
  CFNumberRef v7 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    if (*(_BYTE *)(a1 + 1040) == 1) {
      int v11 = "enabled";
    }
    else {
      int v11 = "disabled";
    }
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "MIS state set to %s", v11);
  }

uint64_t sub_10006E174(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000034LL;
  v2[2] = 0LL;
  uint64_t v3 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  return v3;
}

void sub_10006E1B8(uint64_t a1, const __CFString *a2, int a3, char a4, int a5, int a6)
{
  int v39 = 0;
  if (sub_10003DF4C(a2))
  {
    int v12 = *(_DWORD *)(a1 + 348);
    if (v12 == 1)
    {
      int v13 = 7;
LABEL_8:
      int v39 = v13;
      int v15 = _os_feature_enabled_impl("WiFiManager", "EnableNANPHS");
      int v14 = 0;
      if (!a6) {
        goto LABEL_19;
      }
      goto LABEL_9;
    }

    if (v12 == 2)
    {
      int v13 = 6;
      goto LABEL_8;
    }

    int v16 = _os_feature_enabled_impl("WiFiManager", "EnableNANPHS");
    if (a6 && v16) {
      goto LABEL_13;
    }
    int v14 = 0;
    int v13 = 3;
LABEL_18:
    int v39 = v13;
    goto LABEL_19;
  }

  if (sub_10003DEE4(a2))
  {
    int v14 = 0;
    int v13 = 2;
    goto LABEL_18;
  }

  if (sub_10003DEB0(a2) || sub_10003DF80(a2))
  {
    int v14 = 0;
    int v13 = 1;
    goto LABEL_18;
  }

  if (!sub_10003DF18(a2))
  {
    int v14 = 0;
    int v13 = 0;
    goto LABEL_19;
  }

  int v15 = _os_feature_enabled_impl("WiFiManager", "EnableNANPHS");
  int v14 = 0;
  int v13 = 0;
  if (a6)
  {
LABEL_9:
    if (!v15) {
      goto LABEL_19;
    }
LABEL_13:
    int v13 = 8;
    int v39 = 8;
    int v14 = 1;
  }

uint64_t sub_10006E520(uint64_t a1)
{
  int v2 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    if (*(_BYTE *)(a1 + 1041)) {
      uint64_t v3 = "Enabled";
    }
    else {
      uint64_t v3 = "Disabled";
    }
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "MIS Discovery is %s", v3);
  }

  objc_autoreleasePoolPop(v2);
  return *(unsigned __int8 *)(a1 + 1041);
}

void sub_10006E598(uint64_t a1, char a2, char a3, char a4, uint64_t a5)
{
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = a5;
  LOBYTE(v6[0]) = a2;
  BYTE1(v6[0]) = a3;
  BYTE2(v6[0]) = a4;
  v5[0] = a1;
  v5[1] = 0xAAAAAAAA00000022LL;
  v5[2] = v6;
  v5[3] = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v5);
}

uint64_t sub_10006E5F0(uint64_t a1, uint64_t a2)
{
  int v4 = (const __CFArray *)sub_10003C0F4(a2);
  if (v4)
  {
    CFIndex v5 = v4;
    if (CFArrayGetCount(v4))
    {
      int v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: removing hosted networks for client %@ - %@", "WiFiManagerRemoveHostedNetworks", sub_10003BEDC(a2), v5 message];
      }
      objc_autoreleasePoolPop(v6);
      context[0] = a1;
      context[1] = 0xAAAAAAAA00000039LL;
      context[2] = v5;
      void context[3] = 0LL;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    }
  }

  return 0LL;
}

void sub_10006E6B8(uint64_t a1, const void *a2, int a3, int a4)
{
  int Count = CFSetGetCount(*(CFSetRef *)(a1 + 1000));
  if (a2)
  {
    int v9 = CFSetContainsValue(*(CFSetRef *)(a1 + 1000), a2);
    if (a3)
    {
      if (v9) {
        return;
      }
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 1000), a2);
    }

    else
    {
      if (!v9) {
        return;
      }
      CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 1000), a2);
    }
  }

  unsigned int v10 = objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "isWoWActivityRegistered");
  unsigned int v34 = v10;
  if (*(_BYTE *)(a1 + 995))
  {
    int v11 = 0;
    int v12 = 0;
  }

  else
  {
    int v11 = v10;
    int v13 = CFSetGetCount(*(CFSetRef *)(a1 + 1000));
    if (v13) {
      int v11 = 1;
    }
    if (v11) {
      int v12 = v13;
    }
    else {
      int v12 = 0;
    }
  }

  int v14 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "manager->wow.lpasSetting %d CFSetGetCount(manager->wow.wowClients) %ld isWowActivityRegistered=%d manager->wow.ove rrideWoWState %d manager->externalPower %d manager->iokit.battery.chargeLevel %d",  *(unsigned __int8 *)(a1 + 994),  CFSetGetCount(*(CFSetRef *)(a1 + 1000)),  v34,  *(unsigned __int8 *)(a1 + 995),  *(unsigned __int8 *)(a1 + 322),  *(unsigned int *)(a1 + 840));
  }
  objc_autoreleasePoolPop(v14);
  int v15 = *(unsigned __int8 *)(a1 + 994);
  if (!*(_BYTE *)(a1 + 994)) {
    goto LABEL_24;
  }
  CFIndex v16 = CFSetGetCount(*(CFSetRef *)(a1 + 1000));
  int v17 = v34;
  if (v16) {
    int v17 = 1;
  }
  if (v17 == 1)
  {
    int v15 = *(unsigned __int8 *)(a1 + 995);
    if (!*(_BYTE *)(a1 + 995))
    {
LABEL_24:
      if (a4) {
        goto LABEL_25;
      }
LABEL_29:
      int v18 = 1;
      goto LABEL_30;
    }
  }

  if (*(_BYTE *)(a1 + 322) || *(_DWORD *)(a1 + 840) >= 0xAu)
  {
    int v15 = 1;
    goto LABEL_24;
  }

  int v15 = 0;
  if (!a4) {
    goto LABEL_29;
  }
LABEL_25:
  if (a4 == 1) {
    int v18 = 0;
  }
  else {
    int v18 = *(unsigned __int8 *)(a1 + 996);
  }
LABEL_30:
  if (*(unsigned __int8 *)(a1 + 992) != v11
    || *(unsigned __int8 *)(a1 + 1008) != v15
    || *(unsigned __int8 *)(a1 + 996) != v18)
  {
    *(_BYTE *)(a1 + 993) = v11;
    *(_BYTE *)(a1 + 100_Block_object_dispose((const void *)(v1 - 48), 8) = v15;
    *(_BYTE *)(a1 + 996) = v18;
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000007LL;
    context[2] = 0LL;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    v36[0] = a1;
    v36[1] = 0xAAAAAAAA00000030LL;
    v36[2] = 0LL;
    uint64_t v37 = 0LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v36);
    int v19 = v37;
    *(_BYTE *)(a1 + 992) = v37;
    if (!a2 || *(unsigned __int8 *)(a1 + 993) == v19)
    {
      if (!v19) {
        goto LABEL_52;
      }
    }

    else
    {
      uint64_t v20 = *(__CFSet **)(a1 + 1000);
      if (a3) {
        CFSetRemoveValue(v20, a2);
      }
      else {
        CFSetAddValue(v20, a2);
      }
      if (!*(_BYTE *)(a1 + 992)) {
        goto LABEL_52;
      }
    }

    if (CFSetGetCount(*(CFSetRef *)(a1 + 1000)))
    {
      int v21 = objc_autoreleasePoolPush();
      uint64_t v22 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        CFIndex v23 = CFSetGetCount(*(CFSetRef *)(a1 + 1000));
        CFIndex v24 = "Enabled";
        if (*(_BYTE *)(a1 + 1008)) {
          int v25 = "Enabled";
        }
        else {
          int v25 = "Disabled";
        }
        if (*(_BYTE *)(a1 + 995)) {
          uint64_t v26 = "Enabled";
        }
        else {
          uint64_t v26 = "Disabled";
        }
        if (!*(_BYTE *)(a1 + 996)) {
          CFIndex v24 = "Disabled";
        }
        objc_msgSend( v22,  "WFLog:message:",  3,  "WoW Enabled by %ld Clients, lpas is %s, WoW Override is %s, Captive %s",  v23,  v25,  v26,  v24);
      }

uint64_t sub_10006EB10(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000030LL;
  v2[2] = 0LL;
  uint64_t v3 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  return v3;
}

__CFDictionary *sub_10006EB54(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  uint64_t v3 = Mutable;
  if (Mutable)
  {
    int v4 = (const void **)&kCFBooleanTrue;
    if (!*(_BYTE *)(a1 + 992)) {
      int v4 = (const void **)&kCFBooleanFalse;
    }
    CFDictionaryAddValue(Mutable, @"WoWEnabled", *v4);
    if (*(_BYTE *)(a1 + 992)) {
      unsigned int Count = CFSetGetCount(*(CFSetRef *)(a1 + 1000));
    }
    else {
      unsigned int Count = 0;
    }
    unsigned int valuePtr = Count;
    CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionaryAddValue(v3, @"WoWClientCount", v6);
      CFRelease(v7);
    }

    if (valuePtr)
    {
      CFMutableArrayRef v8 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
      CFSetApplyFunction(*(CFSetRef *)(a1 + 1000), (CFSetApplierFunction)sub_10006ECF4, v8);
      CFDictionaryAddValue(v3, @"WoWClientPidList", v8);
      if (v8) {
        CFRelease(v8);
      }
    }

    int v9 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      unsigned int v10 = "Enabled";
      if (!*(_BYTE *)(a1 + 992)) {
        unsigned int v10 = "Disabled";
      }
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "WoW is %s, %d WoW Clients", v10, valuePtr);
    }

    objc_autoreleasePoolPop(v9);
  }

  return v3;
}

void sub_10006ECF4(uint64_t a1, __CFArray *a2)
{
  if (a1)
  {
    if (a2)
    {
      int valuePtr = sub_10003BED4(a1);
      CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
      if (v4)
      {
        CFNumberRef v5 = v4;
        CFNumberRef v6 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%@[%@] is a wow client", sub_10003BEDC(a1), v5 message];
        }
        objc_autoreleasePoolPop(v6);
        CFArrayAppendValue(a2, v5);
        CFRelease(v5);
      }
    }
  }

uint64_t sub_10006EDB0(uint64_t a1)
{
  int v2 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    if (*(_BYTE *)(a1 + 1008)) {
      uint64_t v3 = "Enabled";
    }
    else {
      uint64_t v3 = "Disabled";
    }
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "LPAS is %s", v3);
  }

  objc_autoreleasePoolPop(v2);
  return *(unsigned __int8 *)(a1 + 1008);
}

uint64_t sub_10006EE28(uint64_t a1, void *value, int a3)
{
  int v5 = *(unsigned __int8 *)(a1 + 1016);
  if (!value) {
    goto LABEL_8;
  }
  int v7 = CFSetContainsValue(*(CFSetRef *)(a1 + 1024), value);
  if (a3)
  {
    if (v7) {
      goto LABEL_8;
    }
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 1024), value);
    int v8 = 1;
  }

  else
  {
    if (!v7) {
      goto LABEL_8;
    }
    CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 1024), value);
    int v8 = -1;
  }

  *(_DWORD *)(a1 + 1032) += v8;
LABEL_8:
  unsigned int v9 = objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "isQuiesceWiFiActivityRegistered");
  CFIndex Count = CFSetGetCount(*(CFSetRef *)(a1 + 1024));
  if (Count > 0) {
    int v11 = 1;
  }
  else {
    int v11 = v9;
  }
  if (v5 == v11) {
    return 0LL;
  }
  CFIndex v12 = Count;
  *(_BYTE *)(a1 + 1016) = v11;
  if (v11)
  {
    unsigned int v13 = 0;
    *(_DWORD *)(a1 + 1036) = *(_DWORD *)(a1 + 324);
LABEL_15:
    int v14 = (const void *)sub_10003BEDC((uint64_t)value);
    sub_10006EF98(a1, v13, v14);
    goto LABEL_16;
  }

  unsigned int v13 = *(_DWORD *)(a1 + 1036);
  if (v13 != *(_DWORD *)(a1 + 324)) {
    goto LABEL_15;
  }
LABEL_16:
  int v15 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    CFIndex v16 = "unquiesced";
    if (v11) {
      CFIndex v16 = "quiesced";
    }
    int v17 = "no";
    if (v9) {
      int v17 = "yes";
    }
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "WiFi is %s (clients=%ld activity=%s)", v16, v12, v17);
  }

  objc_autoreleasePoolPop(v15);
  return 0LL;
}

uint64_t sub_10006EF90(uint64_t a1)
{
  return *(unsigned int *)(a1 + 324);
}

void sub_10006EF98(uint64_t a1, unsigned int a2, const void *a3)
{
  CFNumberRef v6 = objc_autoreleasePoolPush();
  if (!a1) {
    goto LABEL_56;
  }
  if (*(_BYTE *)(a1 + 1160))
  {
LABEL_3:
    int v7 = *(const void **)(a1 + 328);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 32_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
    }

    goto LABEL_5;
  }

  if (!a3 || (unsigned int v18 = [&off_100205810 containsObject:a3], a2 != 1) || !v18)
  {
    if (a2 || !*(void *)(a1 + 328)) {
      goto LABEL_5;
    }
    int v21 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: power turned OFF before first unlock by %@, overrides earlier power ON by %@", "WiFiManagerSetPowerExt", a3, *(void *)(a1 + 328) message];
    }
    objc_autoreleasePoolPop(v21);
    goto LABEL_3;
  }

  int v19 = *(const void **)(a1 + 328);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 32_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
  }

  *(void *)(a1 + 32_Block_object_dispose((const void *)(v1 - 48), 8) = CFRetain(a3);
  uint64_t v20 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: power turned ON before first unlock by %@", "WiFiManagerSetPowerExt", *(void *)(a1 + 328) message];
  }
  objc_autoreleasePoolPop(v20);
LABEL_5:
  if (*(_DWORD *)(a1 + 324) != a2)
  {
    int v14 = objc_autoreleasePoolPush();
    if (a3)
    {
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "Turning WiFiManager %s by %@", sub_10003AE44(a2), a3 message];
      }
      objc_autoreleasePoolPop(v14);
      if (*(void *)(a1 + 1800))
      {
        CTGreenTeaOsLogHandle = (os_log_s *)getCTGreenTeaOsLogHandle();
        if (CTGreenTeaOsLogHandle)
        {
          CFIndex v16 = CTGreenTeaOsLogHandle;
          if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
          {
            int v17 = "yes";
            *(_DWORD *)int valuePtr = 138413314;
            *(void *)&valuePtr[4] = a3;
            *(void *)&v27[2] = "com.apple.wifi.manager";
            *(_WORD *)uint64_t v27 = 2080;
            if (!a2) {
              int v17 = "no";
            }
            *(_WORD *)&v27[10] = 2080;
            CFIndex v28 = "wifid";
            __int16 v29 = 2080;
            __int128 v30 = "WiFiManagerSetPowerExt";
            __int16 v31 = 2080;
            __int128 v32 = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "<%@>[%s][%s]:[%s]WLAN enabled..%s",  valuePtr,  0x34u);
          }
        }
      }
    }

    else
    {
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "Turning WiFiManager %s", sub_10003AE44(a2));
      }
      objc_autoreleasePoolPop(v14);
    }

    *(_DWORD *)(a1 + 324) = a2;
    if (*(_BYTE *)(a1 + 1160) == 1)
    {
      uint64_t v22 = objc_autoreleasePoolPush();
      if (a2 == 1)
      {
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Registering with coex manager",  "WiFiManagerSetPowerExt");
        }
        objc_autoreleasePoolPop(v22);
        sub_100145508(a1);
        [*(id *)(a1 + 200) determineAndSetLocale:0];
      }

      else
      {
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Un-registering with coex manager",  "WiFiManagerSetPowerExt");
        }
        objc_autoreleasePoolPop(v22);
        sub_100145894((xpc_object_t *)(a1 + 1152));
        if (&_RDUpdateCountryCodeFromWiFiAPs) {
          sub_10006FDB0(a1, 0LL, 1u);
        }
      }
    }

    *(void *)int valuePtr = a1;
    *(_DWORD *)uint64_t v27 = -1431655766;
    *(_DWORD *)&valuePtr[8] = 18;
    CFIndex v23 = (const char *)*(unsigned int *)(a1 + 324);
    *(void *)&void v27[4] = 0LL;
    CFIndex v28 = v23;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, valuePtr);
    if (*(_DWORD *)(a1 + 324) == 1)
    {
      if (!_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
      {
        sub_10006B744(a1, 2);
        if (a2) {
          goto LABEL_55;
        }
LABEL_58:
        BOOL v24 = sub_10006FD50(a1, a3);
        if (a3 && !v24)
        {
          int v25 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: %@ is not a user-interactive client, not persisting its requested power state %s to disk", "WiFiManagerSetPowerExt", a3, sub_10003AE44(0) message];
          }
          objc_autoreleasePoolPop(v25);
          goto LABEL_56;
        }

LABEL_55:
        sub_10006FAFC((void *)a1, @"AllowEnable", a2, 0);
        goto LABEL_56;
      }

      sub_10006FFDC(a1, 8LL);
    }

    if (a2) {
      goto LABEL_55;
    }
    goto LABEL_58;
  }

  int v8 = sub_10006AA50((void *)a1, @"AllowEnable");
  if (!v8) {
    goto LABEL_15;
  }
  unsigned int v9 = v8;
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(v9))
  {
    *(_DWORD *)int valuePtr = -1431655766;
    CFNumberGetValue(v9, kCFNumberIntType, valuePtr);
    int v11 = *(_DWORD *)valuePtr;
    if (*(_DWORD *)valuePtr >= 5u)
    {
      CFIndex v12 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Invalid saved power state: %d ",  "WiFiManagerSetPowerExt",  *(unsigned int *)valuePtr);
      }
      objc_autoreleasePoolPop(v12);
      int v11 = *(_DWORD *)valuePtr;
    }

    if (v11 != a2)
    {
LABEL_15:
      if (a2) {
        goto LABEL_55;
      }
      BOOL v13 = sub_10006FD50(a1, a3);
      if (!a3 || v13) {
        goto LABEL_55;
      }
    }
  }

uint64_t sub_10006F480(uint64_t a1)
{
  int v2 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    if (*(_BYTE *)(a1 + 1016)) {
      uint64_t v3 = "quiesced";
    }
    else {
      uint64_t v3 = "unquiesced";
    }
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "WiFi is %s (clients=%ld activity=%d)",  v3,  CFSetGetCount(*(CFSetRef *)(a1 + 1024)),  objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "isQuiesceWiFiActivityRegistered"));
  }

  objc_autoreleasePoolPop(v2);
  return *(unsigned __int8 *)(a1 + 1016);
}

void sub_10006F530(uint64_t a1, CFArrayRef theArray)
{
  if (a1)
  {
    if (theArray && CFArrayGetCount(theArray) >= 1)
    {
      CFIndex v4 = 0LL;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
        if (ValueAtIndex) {
          sub_10009582C((uint64_t)ValueAtIndex, @"forceBGScanParamsCompare", kCFBooleanTrue);
        }
        ++v4;
      }

      while (v4 < CFArrayGetCount(theArray));
    }

    v6[0] = a1;
    v6[1] = 0xAAAAAAAA00000008LL;
    void v6[2] = theArray;
    v6[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v6);
  }

uint64_t sub_10006F5F4(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000032LL;
  v2[2] = 0LL;
  uint64_t v3 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  return v3;
}

uint64_t sub_10006F638(void *a1)
{
  if (sub_10006AA50(a1, @"SimulatedHardwareFailureStatus"))
  {
    CFArrayRef v1 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Simulating a hardware failure",  "WiFiManagerGetHardwareStatus");
    }
    objc_autoreleasePoolPop(v1);
    return 2LL;
  }

  else if (sub_10002D8FC())
  {
    return 2LL;
  }

  else
  {
    return 1LL;
  }

uint64_t sub_10006F6C4(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000031LL;
  v2[2] = 0LL;
  uint64_t v3 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  return v3;
}

uint64_t sub_10006F708(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000031LL;
  v2[2] = 0LL;
  uint64_t v3 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  return v3;
}

uint64_t sub_10006F74C(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA0000003FLL;
  v2[2] = 0LL;
  uint64_t v3 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  return v3;
}

uint64_t sub_10006F790(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA0000003FLL;
  v2[2] = 0LL;
  uint64_t v3 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  return v3;
}

uint64_t sub_10006F7D4(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000033LL;
  v2[2] = 0LL;
  uint64_t v3 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  return v3;
}

uint64_t sub_10006F818(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000033LL;
  v2[2] = 0LL;
  uint64_t v3 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  return v3;
}

uint64_t sub_10006F85C(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000048LL;
  v2[2] = 0LL;
  uint64_t v3 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  return v3;
}

uint64_t sub_10006F8A0(uint64_t a1, CFStringRef theString)
{
  CFIndex v4 = *(const void **)(a1 + 1048);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 104_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
  }

  if (theString) {
    CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, theString);
  }
  else {
    CFStringRef Copy = 0LL;
  }
  *(void *)(a1 + 104_Block_object_dispose((const void *)(v1 - 48), 8) = Copy;
  v7[0] = a1;
  v7[1] = 0xAAAAAAAA00000026LL;
  void v7[2] = 0LL;
  uint64_t v8 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v7);
  return v8;
}

CFStringRef sub_10006F928(uint64_t a1)
{
  v4[0] = a1;
  v4[1] = 0xAAAAAAAA00000035LL;
  CFTypeRef v4[2] = 0LL;
  v4[3] = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v4);
  int v2 = *(const __CFString **)(a1 + 1048);
  if (v2) {
    return CFStringCreateCopy(kCFAllocatorDefault, v2);
  }
  else {
    return 0LL;
  }
}

void sub_10006F994(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 284) = a2;
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000023LL;
  v2[2] = 0LL;
  void v2[3] = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
}

uint64_t sub_10006F9DC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 284);
}

void sub_10006F9E4(uint64_t a1, uint64_t a2, double a3)
{
  *(void *)(a1 + 28_Block_object_dispose((const void *)(v1 - 48), 8) = a2;
  *(double *)(a1 + 296) = a3;
  v3[0] = a1;
  v3[1] = 0xAAAAAAAA00000024LL;
  v3[2] = 0LL;
  v3[3] = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v3);
}

void sub_10006FA30(uint64_t a1, uint64_t a2, double a3, double a4)
{
  v4[0] = a1;
  v4[1] = 0xAAAAAAAA00000063LL;
  CFTypeRef v4[2] = a2;
  *(double *)&v4[3] = a3;
  *(double *)&void v4[4] = a4;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v4);
}

void sub_10006FA80(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 308) != a2)
  {
    *(_DWORD *)(a1 + 30_Block_object_dispose((const void *)(v1 - 48), 8) = a2;
    v4[0] = a1;
    v4[1] = 0xAAAAAAAA00000019LL;
    CFTypeRef v4[2] = 0LL;
    v4[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v4);
    sub_10006FAFC((void *)a1, @"Fallback Preference", a2, 0);
  }

void sub_10006FAFC(void *a1, const __CFString *a2, uint64_t a3, int a4)
{
  uint64_t valuePtr = a3;
  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCFIndexType, &valuePtr);
  sub_10006D08C(a1, a2, v7, a4);
  if (v7) {
    CFRelease(v7);
  }
}

void sub_10006FB70(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 752) != a2)
  {
    *(double *)(a1 + 752) = a2;
    sub_10006FB94((void *)a1, @"DisassociationInterval", a2);
  }

void sub_10006FB94(void *a1, const __CFString *a2, double a3)
{
  double valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
  sub_10006D08C(a1, a2, v5, 0);
  if (v5) {
    CFRelease(v5);
  }
}

void sub_10006FC04(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 1648) != a2)
  {
    *(double *)(a1 + 164_Block_object_dispose((const void *)(v1 - 48), 8) = a2;
    sub_10006FB94((void *)a1, @"DiagnosticsInterval", a2);
  }

void sub_10006FC28(uint64_t a1, int a2, const __CFString *a3)
{
  if (a1)
  {
    unsigned int v5 = a2 != 0;
    int v6 = *(_DWORD *)(a1 + 324);
    sub_10006EF98(a1, v5, a3);
    if (a3)
    {
      if (CFStringCompare(a3, @"Preferences", 1uLL) == kCFCompareEqualTo && v6 != v5)
      {
        v8[0] = a1;
        v8[1] = 0xAAAAAAAA00000034LL;
        void v8[2] = 0LL;
        uint64_t v9 = 0LL;
        CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v8);
        if (!(_BYTE)v9 && !*(_BYTE *)(a1 + 1945))
        {
          CFNumberRef v7 = *(void **)(a1 + 1496);
          if (v7) {
            sub_10000F790((void *)a1, v7, v5, 0LL);
          }
        }
      }
    }
  }

uint64_t sub_10006FCE4(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 1945);
  }
  int v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null manager",  "WiFiManagerIsPowerModificationDisabled");
  }
  objc_autoreleasePoolPop(v2);
  return 0LL;
}

BOOL sub_10006FD50(uint64_t a1, const void *a2)
{
  BOOL result = 0LL;
  if (a1 && a2)
  {
    unsigned int v5 = *(const __CFArray **)(a1 + 176);
    if (v5)
    {
      v6.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
      v6.CFIndex location = 0LL;
      return CFArrayContainsValue(v5, v6, a2) != 0;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void sub_10006FDB0(uint64_t a1, const __CFString *a2, unsigned int a3)
{
  if (a2 || *(void *)(a1 + 1776))
  {
    CFRange v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: countryCode %@, manager->ieCountryCode %@, force %d", "__WiFiManagerUpdateRegulatoryDomainCountryCode", a2, *(void *)(a1 + 1776), a3 message];
    }
    objc_autoreleasePoolPop(v6);
    if (a2 && (CFNumberRef v7 = *(const __CFString **)(a1 + 1776)) != 0LL && CFStringCompare(a2, v7, 0LL) == kCFCompareEqualTo)
    {
      int v14 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: Country code %@ refreshed.", "__WiFiManagerUpdateRegulatoryDomainCountryCode", *(void *)(a1 + 1776) message];
      }
      objc_autoreleasePoolPop(v14);
      *(CFAbsoluteTime *)(a1 + 1784) = CFAbsoluteTimeGetCurrent();
    }

    else
    {
      double Current = CFAbsoluteTimeGetCurrent();
      if (a2 || (a3 & 1) != 0 || (double v9 = Current - *(double *)(a1 + 1784), v9 >= 600.0))
      {
        int v11 = *(const void **)(a1 + 1776);
        if (v11)
        {
          CFRelease(v11);
          *(void *)(a1 + 1776) = 0LL;
        }

        if (a2) {
          CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, a2);
        }
        else {
          CFStringRef Copy = 0LL;
        }
        *(void *)(a1 + 1776) = Copy;
        *(CFAbsoluteTime *)(a1 + 1784) = CFAbsoluteTimeGetCurrent();
        BOOL v13 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: Updating CountryCodeFromWiFiAPs to %@", "__WiFiManagerUpdateRegulatoryDomainCountryCode", a2 message];
        }
        objc_autoreleasePoolPop(v13);
        RDUpdateCountryCodeFromWiFiAPs(a2);
        if (objc_msgSend( *(id *)(a1 + 200),  "isDefaultCountryCode:",  objc_msgSend(*(id *)(a1 + 200), "getLocaleCountryCode"))) {
          [*(id *)(a1 + 200) determineAndSetLocale:0];
        }
      }

      else
      {
        unsigned int v10 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: Country code %@ refreshed %.2fs ago < %ds, not resetting", "__WiFiManagerUpdateRegulatoryDomainCountryCode", *(void *)(a1 + 1776), *(void *)&v9, 600 message];
        }
        objc_autoreleasePoolPop(v10);
      }
    }
  }

void sub_10006FFDC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  int v3 = _os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin");
  if (a1)
  {
    if (v3)
    {
      context[0] = a1;
      context[1] = 0xAAAAAAAA0000007ALL;
      context[2] = &v5;
      void context[3] = 1LL;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    }
  }

uint64_t sub_100070050(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 336);
}

uint64_t sub_100070058(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 336) != a2)
  {
    uint64_t v3 = result;
    CFIndex v4 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      uint64_t v5 = "Disabling";
      if (!a2) {
        uint64_t v5 = "Enabling";
      }
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s BlackListing", v5);
    }

    objc_autoreleasePoolPop(v4);
    *(_BYTE *)(v3 + 336) = a2;
    context[0] = v3;
    context[1] = 0xAAAAAAAA00000025LL;
    context[2] = 0LL;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(v3 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    CFRange v6 = (const void **)&kCFBooleanTrue;
    if (!a2) {
      CFRange v6 = (const void **)&kCFBooleanFalse;
    }
    return sub_10006D08C((void *)v3, @"DisableBlackList", *v6, 0);
  }

  return result;
}

uint64_t sub_100070140(uint64_t a1, int a2, CFTypeRef cf)
{
  uint64_t result = *(void *)(a1 + 640);
  if ((cf != 0LL) == (result != 0))
  {
    int v7 = *(unsigned __int8 *)(a1 + 632);
    if (cf && result)
    {
      uint64_t result = CFEqual((CFTypeRef)result, cf);
      if ((_DWORD)result && v7 == a2) {
        return result;
      }
      uint64_t result = *(void *)(a1 + 640);
    }

    else if (v7 == a2)
    {
      return result;
    }
  }

  *(_BYTE *)(a1 + 632) = a2;
  if (result)
  {
    CFRelease((CFTypeRef)result);
    *(void *)(a1 + 640) = 0LL;
  }

  if (cf)
  {
    *(void *)(a1 + 640) = CFRetain(cf);
    uint64_t v8 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: test network %@", "WiFiManagerSetATJTestModeEnabled", cf message];
    }
    objc_autoreleasePoolPop(v8);
  }

  context[0] = a1;
  context[1] = 0xAAAAAAAA00000028LL;
  context[2] = 0LL;
  void context[3] = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
  double v9 = (const void **)&kCFBooleanFalse;
  if (a2) {
    double v9 = (const void **)&kCFBooleanTrue;
  }
  sub_10006D08C((void *)a1, @"ATJTestModeEnabled", *v9, 0);
  return sub_10006D08C((void *)a1, @"ATJTestNetworkSSID", cf, 0);
}

void sub_100070298(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 994) != a2)
  {
    *(_BYTE *)(a1 + 994) = a2;
    uint64_t v3 = (const void **)&kCFBooleanTrue;
    if (!a2) {
      uint64_t v3 = (const void **)&kCFBooleanFalse;
    }
    sub_10006D08C((void *)a1, @"lpasEnable", *v3, 0);
    sub_10006E6B8(a1, 0LL, *(unsigned __int8 *)(a1 + 994), 2);
  }

_DWORD *sub_100070314(_DWORD *result, _DWORD *a2)
{
  *uint64_t result = dword_100219914;
  *a2 = dword_100219918;
  return result;
}

void sub_100070330(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 322) || *(_DWORD *)(a1 + 612) == 2)
  {
    uint64_t context = a1;
    unint64_t v7 = 0xAAAAAAAA00000030LL;
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
    if ((_BYTE)v9 || sub_10006EDB0(a1))
    {
      int v2 = objc_autoreleasePoolPush();
      uint64_t v3 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        uint64_t context = a1;
        unint64_t v7 = 0xAAAAAAAA00000030LL;
        uint64_t v8 = 0LL;
        uint64_t v9 = 0LL;
        CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
        if ((_BYTE)v9) {
          CFIndex v4 = "WoW";
        }
        else {
          CFIndex v4 = "LPAS";
        }
        objc_msgSend(v3, "WFLog:message:", 3, "%s Enabled, Skip starting Disassocation timer", v4);
      }

      objc_autoreleasePoolPop(v2);
    }

    else if (!*(_DWORD *)(a1 + 776))
    {
      uint64_t v5 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3 message:"Starting Disassociation Timer"];
      }
      objc_autoreleasePoolPop(v5);
      sub_100070470(a1, 1, *(double *)(a1 + 752));
      *(_DWORD *)(a1 + 776) = 2;
    }
  }

void sub_100070470(uint64_t a1, int a2, double a3)
{
  *(CFAbsoluteTime *)(a1 + 76_Block_object_dispose((const void *)(v1 - 48), 8) = CFAbsoluteTimeGetCurrent() + a3;
  if (a2) {
    *(void *)(a1 + 760) = 0LL;
  }
  CFRange v6 = *(dispatch_source_s **)(a1 + 744);
  dispatch_time_t v7 = dispatch_time(0LL, (uint64_t)(a3 * 1000000000.0));
  dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0LL);
  if (a3 != 315360000.0)
  {
    CFDateRef v8 = CFDateCreate(kCFAllocatorDefault, *(CFAbsoluteTime *)(a1 + 768));
    if (v8)
    {
      CFDateRef v9 = v8;
      unsigned int v10 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "Disassociation timer scheduled to fire at %@", v9 message];
      }
      objc_autoreleasePoolPop(v10);
      CFRelease(v9);
    }
  }

void sub_100070560(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 776);
  if (v2 == 3)
  {
    uint64_t v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "Disassociation timer already fired, so not pausing");
    }
    objc_autoreleasePoolPop(v5);
    sub_10006B570(a1, 1);
  }

  else if (v2 == 2)
  {
    *(_DWORD *)(a1 + 776) = 1;
    double v3 = *(double *)(a1 + 768);
    *(double *)(a1 + 760) = v3 - CFAbsoluteTimeGetCurrent();
    sub_100070470(a1, 0, 315360000.0);
    CFIndex v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Pausing disassociation timer with remaing interval of %f s",  *(void *)(a1 + 760));
    }
    objc_autoreleasePoolPop(v4);
  }

void sub_100070660(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 776);
  if (v2 == 3)
  {
    uint64_t v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "Disassociation timer already fired, so not resuming");
    }
    objc_autoreleasePoolPop(v5);
    sub_10006B570(a1, 0);
    sub_100066124(a1, "WiFiManagerResumeDisassociationTimer", 12731LL);
  }

  else
  {
    if (v2 == 1)
    {
      CFRange v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Resuming disassociation timer with remaing interval of %f s",  *(void *)(a1 + 760));
      }
      objc_autoreleasePoolPop(v6);
      double v4 = *(double *)(a1 + 760);
      goto LABEL_15;
    }

    if (!v2 && (!*(_BYTE *)(a1 + 322) || *(_DWORD *)(a1 + 612) == 2))
    {
      double v3 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3 message:"Restart requested when Disassociation Timer is Idle. Starting timer"];
      }
      objc_autoreleasePoolPop(v3);
      double v4 = *(double *)(a1 + 752);
LABEL_15:
      sub_100070470(a1, 1, v4);
      *(_DWORD *)(a1 + 776) = 2;
    }
  }

void sub_100070794(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1656);
  *(void *)(a1 + 1656) = v2 + 1;
  double v3 = objc_autoreleasePoolPush();
  if (v2)
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: refCount %ld",  "WiFiManagerStartDiagnosticsTimer",  *(void *)(a1 + 1656));
    }
    objc_autoreleasePoolPop(v3);
  }

  else
  {
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"Starting Diagnostics Timer"];
    }
    objc_autoreleasePoolPop(v3);
    double v4 = *(dispatch_source_s **)(a1 + 1640);
    dispatch_time_t v5 = dispatch_time(0LL, (uint64_t)(*(double *)(a1 + 1648) * 1000000000.0));
    dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000015LL;
    context[2] = 0LL;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
  }

void sub_10007089C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 == 0x4000000000LL)
  {
    context[1] = a2;
    unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
    context[0] = a1;
    LOBYTE(v6) = *(_BYTE *)(a1 + 737);
    CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_10008D904, context);
  }

  sub_1000EA220(a2, (a3 >> 46) & 1);
}

void sub_100070904(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1656);
  uint64_t v2 = v1 - 1;
  if (v1 >= 1)
  {
    *(void *)(a1 + 1656) = v2;
    double v4 = objc_autoreleasePoolPush();
    if (v2)
    {
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: refCount %ld",  "WiFiManagerStopDiagnosticsTimer",  *(void *)(a1 + 1656));
      }
      objc_autoreleasePoolPop(v4);
    }

    else
    {
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3 message:"Stopping Diagnostics Timer"];
      }
      objc_autoreleasePoolPop(v4);
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 1640), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    }
  }

void sub_1000709D4(uint64_t a1, const void *a2)
{
  if (sub_10003BEB4((uint64_t)a2) == 1)
  {
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 144), a2);
    sub_100070E18(a1, *(void *)(a1 + 656));
    if (CFSetGetCount(*(CFSetRef *)(a1 + 144)) >= 2)
    {
      else {
        sub_10006B744(a1, 0);
      }
    }

    return;
  }

  if (sub_10003BEB4((uint64_t)a2) == 2)
  {
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 152), a2);
    sub_100070E18(a1, *(void *)(a1 + 656));
    return;
  }

  if (sub_10003BEB4((uint64_t)a2) == 4 || sub_10003BEB4((uint64_t)a2) == 5)
  {
    double v4 = objc_autoreleasePoolPush();
    dispatch_time_t v5 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      else {
        unint64_t v6 = "kWiFiClientTypeSideKick";
      }
      objc_msgSend( v5,  "WFLog:message:",  3,  "%s: a %s registered, active endpoint count=%lu\n",  "WiFiManagerRegisterClient",  v6,  objc_msgSend(*(id *)(a1 + 64), "numberOfActiveEndpoints"));
    }

    objc_autoreleasePoolPop(v4);
    if (sub_10003BEB4((uint64_t)a2) == 5)
    {
      *(_BYTE *)(a1 + 813) = 1;
    }

    else
    {
      *(_BYTE *)(a1 + 813) = 0;
      if (![*(id *)(a1 + 64) numberOfActiveEndpoints])
      {
        int v15 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3 message:"Why received kWiFiClientTypeSideKick when we have no active SideKick endpoints?"];
        }
        objc_autoreleasePoolPop(v15);
        return;
      }
    }

    CFSetAddValue(*(CFMutableSetRef *)(a1 + 184), a2);
    dispatch_time_t v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: manager->sideKickClients=%ld\n",  "WiFiManagerRegisterClient",  CFSetGetCount(*(CFSetRef *)(a1 + 184)));
    }
    objc_autoreleasePoolPop(v7);
    if (CFSetGetCount(*(CFSetRef *)(a1 + 184)) == 1)
    {
      char v21 = 1;
      uint64_t v8 = *(void *)(a1 + 120);
      if (v8 == 4240173202LL || v8 == 2702125347LL)
      {
        CFDateRef v9 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: bypass B238...", "__WiFiManagerEnterSideKick");
        }
        unsigned int v10 = v9;
LABEL_26:
        objc_autoreleasePoolPop(v10);
        return;
      }

      context[0] = a1;
      context[1] = 0xAAAAAAAA00000078LL;
      void context[2] = &v21;
      void context[3] = 1LL;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
      if (*(_BYTE *)(a1 + 813))
      {
        *(_DWORD *)(a1 + 80_Block_object_dispose((const void *)(v1 - 48), 8) = 1;
        return;
      }

      CFIndex v16 = *(dispatch_source_s **)(a1 + 784);
      dispatch_time_t v17 = dispatch_time(0LL, 1550000000LL);
      dispatch_source_set_timer(v16, v17, 0xFFFFFFFFFFFFFFFFLL, 0LL);
      int v18 = *(unsigned __int8 *)(a1 + 813);
      *(_DWORD *)(a1 + 80_Block_object_dispose((const void *)(v1 - 48), 8) = 1;
      if (!v18)
      {
        int v19 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: set timer to %lu nanoseconds, manager->sideKick.state=%d",  "__WiFiManagerEnterSideKick",  1550000000,  *(unsigned int *)(a1 + 808));
        }
        unsigned int v10 = v19;
        goto LABEL_26;
      }
    }

    else
    {
      int v11 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: a new sidekick client registering before existing timer expires, cancelling current sidekick timer\n",  "WiFiManagerRegisterClient");
      }
      objc_autoreleasePoolPop(v11);
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 784), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
      CFIndex v12 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: starting a new sidekick timer (%lu), manager->sideKick.state=%d\n",  "WiFiManagerRegisterClient",  1550000000,  *(unsigned int *)(a1 + 808));
      }
      objc_autoreleasePoolPop(v12);
      BOOL v13 = *(dispatch_source_s **)(a1 + 784);
      dispatch_time_t v14 = dispatch_time(0LL, 1550000000LL);
      dispatch_source_set_timer(v13, v14, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    }
  }

void sub_100070E18(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 612);
  if (v4 == 2)
  {
    char v5 = 0;
  }

  else if (v4 == 1)
  {
    char v5 = *(void *)(a1 + 672) == 0LL;
  }

  else
  {
    char v5 = *(_BYTE *)(a1 + 688);
  }

  if (CFSetGetCount(*(CFSetRef *)(a1 + 144))
    || objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "isBackgroundActivityRegistered"))
  {
    unint64_t v6 = *(void *)(a1 + 656) | 8LL;
  }

  else
  {
    unint64_t v6 = *(void *)(a1 + 656) & 0xFFFFFFFFFFFFFFF7LL;
  }

  *(void *)(a1 + 656) = v6;
  if (CFSetGetCount(*(CFSetRef *)(a1 + 152))
    || objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "isForegroundActivityRegistered"))
  {
    unint64_t v7 = *(void *)(a1 + 656) | 0x10LL;
  }

  else
  {
    unint64_t v7 = *(void *)(a1 + 656) & 0xFFFFFFFFFFFFFFEFLL;
  }

  *(void *)(a1 + 656) = v7;
  if (CFSetGetCount(*(CFSetRef *)(a1 + 168))
    || objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "isWiFiBoundActivityRegistered"))
  {
    unint64_t v8 = *(void *)(a1 + 656) | 0x20LL;
  }

  else
  {
    unint64_t v8 = *(void *)(a1 + 656) & 0xFFFFFFFFFFFFFFDFLL;
  }

  *(void *)(a1 + 656) = v8;
  unint64_t v9 = v8 ^ a2;
  if (*(void *)(a1 + 688)) {
    unint64_t v8 = 0LL;
  }
  unint64_t v55 = v8;
  uint64_t context = a1;
  unint64_t v57 = 0xAAAAAAAA0000003BLL;
  BOOL v58 = &v55;
  uint64_t v59 = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
  unsigned int v10 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Delta state =%lld",  "__WiFiManagerApplicationStateUpdate",  v9);
  }
  objc_autoreleasePoolPop(v10);
  if ((v9 & 0x11) != 0)
  {
    int v11 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      CFIndex v12 = "entered";
      if ((*(void *)(a1 + 656) & 0x11LL) == 0) {
        CFIndex v12 = "exited";
      }
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "Foreground Network Application %s.", v12);
    }

    objc_autoreleasePoolPop(v11);
    if ((*(_BYTE *)(a1 + 656) & 0x11) != 0)
    {
      uint64_t v13 = 976LL;
      if (!v5) {
        uint64_t v13 = 960LL;
      }
      sub_100064280(a1, *(const void **)(a1 + v13), 2 * (v5 != 0));
      BOOL v14 = 0;
      char v15 = 0;
      char v16 = 0;
      int v17 = 3;
      char v50 = 1;
      char v18 = 1;
      int v19 = 1;
      BOOL v20 = 1;
    }

    else
    {
      char v50 = 1;
      if (v5) {
        int v23 = 2;
      }
      else {
        int v23 = 1;
      }
      uint64_t v24 = 976LL;
      if (!v5) {
        uint64_t v24 = 968LL;
      }
      sub_100064280(a1, *(const void **)(a1 + v24), v23);
      sub_10008E038(a1);
      char v15 = 0;
      char v16 = 0;
      int v19 = 0;
      int v17 = 0;
      BOOL v20 = 0;
      BOOL v14 = (*(_BYTE *)(a1 + 656) & 4) == 0;
      char v18 = 1;
    }
  }

  else
  {
    BOOL v14 = 0;
    uint64_t v21 = *(void *)(a1 + 656);
    if ((v21 & 0x11) != 0)
    {
      char v50 = 1;
      char v15 = 0;
      char v18 = 1;
      char v16 = 0;
      int v19 = 0;
      int v17 = 0;
      BOOL v20 = 0;
    }

    else
    {
      char v50 = 1;
      char v15 = 0;
      char v18 = 1;
      char v16 = 0;
      int v19 = 0;
      int v17 = 0;
      BOOL v20 = 0;
      if ((v9 & 0x2A) != 0)
      {
        int v22 = *(_DWORD *)(a1 + 612);
        if ((v21 & 0x2A) != 0)
        {
          BOOL v14 = 0;
          char v50 = 0;
          char v16 = 0;
          int v17 = 0;
          BOOL v20 = v22 == 2;
          char v15 = v5;
          int v19 = 1;
        }

        else
        {
          BOOL v14 = 0;
          char v15 = 0;
          char v18 = 0;
          int v19 = 0;
          BOOL v20 = 0;
          if (v22 == 2) {
            int v17 = 3;
          }
          else {
            int v17 = 0;
          }
          char v50 = 1;
          char v16 = v5;
        }
      }
    }
  }

  BOOL v51 = v14;
  char v52 = v18;
  char v53 = v15;
  char v54 = v16;
  if ((v9 & 0x2A) != 0)
  {
    if ((v9 & 2) != 0)
    {
      int v25 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        if ((*(void *)(a1 + 656) & 2LL) != 0) {
          uint64_t v27 = "entered";
        }
        else {
          uint64_t v27 = "exited";
        }
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "Background Network Application %s", v27);
      }
    }

    else if ((v9 & 8) != 0)
    {
      int v25 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        if ((*(void *)(a1 + 656) & 8LL) != 0) {
          CFIndex v28 = "entered";
        }
        else {
          CFIndex v28 = "exited";
        }
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "Background Daemon Application %s", v28);
      }
    }

    else
    {
      if ((v9 & 0x20) == 0) {
        goto LABEL_66;
      }
      int v25 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        if ((*(void *)(a1 + 656) & 0x20LL) != 0) {
          uint64_t v26 = "entered";
        }
        else {
          uint64_t v26 = "exited";
        }
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "Direct to Cloud Daemon %s", v26);
      }
    }

    objc_autoreleasePoolPop(v25);
  }

LABEL_91:
  if ((v50 & 1) == 0) {
    goto LABEL_92;
  }
LABEL_93:
  if ((v52 & 1) == 0 && !*(_BYTE *)(a1 + 1008) && !*(_BYTE *)(a1 + 992)) {
    sub_100070660(a1);
  }
  if (v53) {
    sub_100064280(a1, *(const void **)(a1 + 976), 2);
  }
  if (v54)
  {
    if (*(_BYTE *)(a1 + 1008))
    {
      int v41 = (const void **)(a1 + 984);
      int v42 = 3;
LABEL_102:
      sub_100064280(a1, *v41, v42);
      goto LABEL_104;
    }

    if (!*(_BYTE *)(a1 + 992))
    {
      sub_10006B570(a1, 0);
      int v41 = (const void **)(a1 + 968);
      int v42 = 1;
      goto LABEL_102;
    }
  }

LABEL_104:
  if (v17) {
    sub_10006BAB4(a1, v17);
  }
  LOBYTE(v55) = -[WiFiUserInteractionMonitor isNetworkRecommendationAllowed]( +[WiFiUserInteractionMonitor sharedInstance]( &OBJC_CLASS___WiFiUserInteractionMonitor,  "sharedInstance"),  "isNetworkRecommendationAllowed");
  uint64_t context = a1;
  unint64_t v57 = 0xAAAAAAAA0000005CLL;
  BOOL v58 = &v55;
  uint64_t v59 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
  if (v19)
  {
    CFStringRef v43 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s triggering Auto-Join for CWFAutoJoinTriggerApplicationState",  "__WiFiManagerApplicationStateUpdate");
    }
    objc_autoreleasePoolPop(v43);
    sub_10006B570(a1, 1);
    else {
      sub_10006B744(a1, v20);
    }
    if (*(_DWORD *)(a1 + 612) == 2)
    {
      if (*(_BYTE *)(a1 + 322)) {
        sub_10006570C(a1, 1LL, 6LL, 0LL);
      }
    }
  }

void sub_100071570(uint64_t a1, const void *a2)
{
  int v4 = CFSetContainsValue(*(CFSetRef *)(a1 + 160), a2);
  CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 136), a2);
  sub_100071774(a1, a2);
  if (sub_10003BEB4((uint64_t)a2) == 1)
  {
    char v5 = *(__CFSet **)(a1 + 144);
LABEL_5:
    CFSetRemoveValue(v5, a2);
    sub_100070E18(a1, *(void *)(a1 + 656));
    return;
  }

  if (sub_10003BEB4((uint64_t)a2) == 2)
  {
    char v5 = *(__CFSet **)(a1 + 152);
    goto LABEL_5;
  }

  if (sub_10003BEB4((uint64_t)a2) == 4 || sub_10003BEB4((uint64_t)a2) == 5)
  {
    unint64_t v6 = objc_autoreleasePoolPush();
    unint64_t v7 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      int v8 = sub_10003BEB4((uint64_t)a2);
      unint64_t v9 = "kWiFiClientTypeSideKick";
      if (v8 == 5) {
        unint64_t v9 = "kWiFiClientTypeSideKick_UT";
      }
      objc_msgSend(v7, "WFLog:message:", 3, "%s: a %s unregistered", "WiFiManagerUnregisterClient", v9);
    }

    objc_autoreleasePoolPop(v6);
    if (CFSetGetCount(*(CFSetRef *)(a1 + 184)))
    {
      CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 184), a2);
      unsigned int v10 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: CFSetGetCount(manager->sideKickClients)=%ld",  "WiFiManagerUnregisterClient",  CFSetGetCount(*(CFSetRef *)(a1 + 184)));
      }
      objc_autoreleasePoolPop(v10);
      if (!CFSetGetCount(*(CFSetRef *)(a1 + 184))) {
        sub_1000717E0(a1);
      }
    }
  }

  else if (v4)
  {
    else {
      sub_10006B744(a1, 0);
    }
  }

void sub_100071774(uint64_t a1, const void *a2)
{
  int v4 = (const __CFDictionary *)sub_10003C0B4((uint64_t)a2);
  CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)sub_100071A78, 0LL);
  CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 160), a2);
  sub_10006B570(a1, *(unsigned __int8 *)(a1 + 24));
}

BOOL sub_1000717C0(uint64_t a1)
{
  return CFSetGetCount(*(CFSetRef *)(a1 + 184)) != 0;
}

void sub_1000717E0(uint64_t a1)
{
  char v8 = 0;
  uint64_t v1 = *(void *)(a1 + 120);
  if (v1 == 4240173202LL || v1 == 2702125347LL)
  {
    double v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: bypass B238...", "__WiFiManagerExitSideKick");
    }
    objc_autoreleasePoolPop(v3);
  }

  else
  {
    char v5 = objc_autoreleasePoolPush();
    unint64_t v6 = v5;
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: manager->sideKick.xpc_activity_state_t state = %d\n",  "__WiFiManagerExitSideKick",  *(unsigned int *)(a1 + 808));
    }
    objc_autoreleasePoolPop(v6);
    if (*(_DWORD *)(a1 + 808) == 1)
    {
      if (!*(_BYTE *)(a1 + 813)) {
        dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 784), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
      }
      *(_DWORD *)(a1 + 80_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
    }

    context[0] = a1;
    context[1] = 0xAAAAAAAA00000078LL;
    void context[2] = &v8;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
  }

void sub_10007190C(uint64_t a1)
{
}

void sub_100071914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_100071944, v3);
}

void sub_100071944(uint64_t a1, const void **a2)
{
}

void sub_100071950(uint64_t a1, void *context)
{
}

CFMutableStringRef sub_100071968(uint64_t a1)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
  if (Mutable) {
    CFSetApplyFunction(*(CFSetRef *)(a1 + 144), (CFSetApplierFunction)sub_1000719B8, Mutable);
  }
  return Mutable;
}

void sub_1000719B8(uint64_t a1, __CFString *a2)
{
  double v3 = (const __CFString *)sub_10003BEDC(a1);
  CFStringAppend(a2, v3);
  CFStringAppend(a2, @" ");
}

CFMutableStringRef sub_1000719F0(uint64_t a1)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
  if (Mutable) {
    CFSetApplyFunction(*(CFSetRef *)(a1 + 168), (CFSetApplierFunction)sub_100071A40, Mutable);
  }
  return Mutable;
}

void sub_100071A40(uint64_t a1, __CFString *a2)
{
  double v3 = (const __CFString *)sub_10003BEDC(a1);
  CFStringAppend(a2, v3);
  CFStringAppend(a2, @" ");
}

void sub_100071A78(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = sub_10003BEDC(a1);
      sub_10004EC40(v3, a2, 1);
    }
  }

void sub_100071AB4(uint64_t a1, const void *a2)
{
}

void sub_100071AE0(uint64_t a1)
{
}

id sub_100071AE8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 2225) = a2;
  return -[WiFiUsageMonitor updateLinkRecoveryDisabled:]( +[WiFiUsageMonitor sharedInstance](&OBJC_CLASS___WiFiUsageMonitor, "sharedInstance"),  "updateLinkRecoveryDisabled:",  a2);
}

uint64_t sub_100071B18(void *a1, const __CFString *a2, const void *a3)
{
  uint64_t v4 = sub_10006D08C(a1, a2, a3, 0);
  uint64_t v5 = v4;
  if ((_DWORD)v4) {
    sub_100061B50(v4, 2LL, (uint64_t)a1);
  }
  return v5;
}

uint64_t sub_100071B54(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 736);
  }
  return result;
}

uint64_t sub_100071B60(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 2225);
  }
  return result;
}

void sub_100071B6C(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v6 = *(void *)(a1 + 192);
  if (v6 && ((int v9 = sub_1000ABA94(v6), (_DWORD)a2 == -1) || v9 == (_DWORD)a2))
  {
    int v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: notificationId %d response %d",  "WiFiManagerDispatchNotificationResponse",  a2,  a3);
    }
    objc_autoreleasePoolPop(v11);
    sub_1000ABC68(*(void **)(a1 + 192), a3, a4);
  }

  else
  {
    unsigned int v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "SpringBoard has responded to older request(%d). Ignoring.",  a2);
    }
    objc_autoreleasePoolPop(v10);
  }

void sub_100071C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    int v9 = "yes";
    if (!*(_BYTE *)(a1 + 322)) {
      int v9 = "no";
    }
    [(id)qword_100219F60 WFLog:3, "%s: priority %d, duration %u, type %@, external powered ? %s, battery level %u", "WiFiManagerIndicateCarPlayHIDEventReceived", a2, a3, a4, v9, *(unsigned int *)(a1 + 840) message];
    objc_autoreleasePoolPop(v8);
  }

  else
  {
    objc_autoreleasePoolPop(v8);
    if (!a1) {
      return;
    }
  }

  if (_os_feature_enabled_impl("WiFiManager", "PM0DuringCarPlayHIDSession"))
  {
    v11[0] = a2;
    v11[1] = a3;
    uint64_t v12 = a4;
    if (*(_BYTE *)(a1 + 322) || *(_DWORD *)(a1 + 840) >= 0x15u)
    {
      context[0] = a1;
      context[1] = 0xAAAAAAAA0000007ELL;
      void context[2] = v11;
      void context[3] = 1LL;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    }
  }

uint64_t sub_100071D74(uint64_t a1, CFDictionaryRef *a2, int a3)
{
  if (!a1)
  {
    int v23 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: manager is NULL",  "WiFiManagerUpdateCoreWiFiProfile");
    }
    objc_autoreleasePoolPop(v23);
    return 0LL;
  }

  uint64_t v6 = 0LL;
  if (!a2 || !*(_BYTE *)(a1 + 1160)) {
    return v6;
  }
  unint64_t v7 = objc_autoreleasePoolPush();
  if (!a3)
  {
    if (*(_BYTE *)(a1 + 1160) && (int v11 = sub_100094EB4((uint64_t)a2)) != 0LL)
    {
      uint64_t v12 = v11;
      uint64_t v13 = (CFDictionaryRef *)sub_100094AAC((uint64_t)kCFAllocatorDefault, v11);
      if (v13)
      {
        BOOL v14 = v13;
        char v15 = sub_1000A063C(v13);
        char v16 = v15;
        if (v15)
        {
          uint64_t v6 = (uint64_t)[v15 identifier];
          if (!v6)
          {
LABEL_21:
            objc_autoreleasePoolPop(v7);
            CFRelease(v12);
            CFRelease(v14);
LABEL_22:

            return v6;
          }

          id v17 = [v16 externalForm];
          if (v17)
          {
            id v18 = v17;
            id v19 = [*(id *)(a1 + 944) objectForKey:v6];
            [*(id *)(a1 + 944) setObject:v18 forKey:v6];
            [*(id *)(a1 + 944) synchronize];
            id v20 = +[WiFiXPCManager sharedXPCManager](&OBJC_CLASS___WiFiXPCManager, "sharedXPCManager");
            uint64_t v6 = 1LL;
            if (v19) {
              uint64_t v21 = 2LL;
            }
            else {
              uint64_t v21 = 1LL;
            }
            [v20 sendKnownNetworkDidChangeEventForProfile:v16 eventType:v21];
            goto LABEL_21;
          }
        }

        uint64_t v6 = 0LL;
        goto LABEL_21;
      }

      objc_autoreleasePoolPop(v7);
      CFRelease(v12);
    }

    else
    {
      objc_autoreleasePoolPop(v7);
    }

    uint64_t v6 = 0LL;
    char v16 = 0LL;
    goto LABEL_22;
  }

  if (*(_BYTE *)(a1 + 1160))
  {
    char v8 = sub_1000A063C(a2);
    int v9 = v8;
    if (v8 && (id v10 = [v8 identifier]) != 0)
    {
      [*(id *)(a1 + 944) setObject:0 forKey:v10];
      [*(id *)(a1 + 944) synchronize];
      objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "sendKnownNetworkDidChangeEventForProfile:eventType:",  v9,  3);
      uint64_t v6 = 1LL;
    }

    else
    {
      uint64_t v6 = 0LL;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
    int v9 = 0LL;
  }

  objc_autoreleasePoolPop(v7);

  return v6;
}

uint64_t sub_100071F94(void *a1)
{
  if (a1)
  {
    uint64_t result = _os_feature_enabled_impl("CoreWiFi", "UnifiedKVS");
    if ((_DWORD)result) {
      return (int)-[__SCPreferences intValue](sub_10006AA50(a1, @"Version"), "intValue") > 13;
    }
  }

  else
  {
    uint64_t v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: manager is NULL", "__WiFiManagerAllowUnifiedKVS");
    }
    objc_autoreleasePoolPop(v3);
    return 0LL;
  }

  return result;
}

uint64_t sub_100072038(uint64_t a1, void *a2, uint64_t a3)
{
  __int16 v90 = a2;
  int valuePtr = a3;
  CFIndex Count = 0LL;
  CFIndex idx = -1LL;
  if (!a1)
  {
    uint64_t v78 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null manager", "WiFiManagerAddNetwork");
    }
    goto LABEL_177;
  }

  uint64_t v3 = a2;
  if (!a2)
  {
    uint64_t v78 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null network", "WiFiManagerAddNetwork");
    }
LABEL_177:
    objc_autoreleasePoolPop(v78);
    return 0LL;
  }

  BOOL v85 = sub_100095BC8(a2);
  BOOL v6 = sub_100095318((BOOL)v3);
  unint64_t v7 = objc_autoreleasePoolPush();
  char v8 = (void *)qword_100219F60;
  if (qword_100219F60)
  {
    if (v6) {
      int v9 = "domain";
    }
    else {
      int v9 = "SSID";
    }
    id v10 = v85;
    if (v6) {
      id v10 = sub_1000951FC((uint64_t)v3, @"DomainName");
    }
    [v8 WFLog:3, "%s: reason %d, with %s %@", "WiFiManagerAddNetwork", a3, v9, v10 message];
  }

  objc_autoreleasePoolPop(v7);
  if ((_DWORD)a3 == 17 && sub_1000957F4((BOOL)v3) && sub_100097FF4((uint64_t)v3))
  {
    sub_10009582C((uint64_t)v3, @"WPA_IE", 0LL);
    int v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Both WEP & WPA-PSK are set incorrectly.  Removing WPA-PSK",  "WiFiManagerAddNetwork");
    }
    objc_autoreleasePoolPop(v11);
  }

  sub_1000E2DE8(v3);
  uint64_t v12 = sub_10006AA50((void *)a1, @"kWiFiWhitelistingUUIDKey");
  if (sub_10009860C((uint64_t)v3) && v12)
  {
    sub_10009582C((uint64_t)v3, @"PolicyUUID", v12);
    uint64_t v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: Added policyUUID %@ to network %@", "__WiFiManagerApplyWhitelistingPolicy", v12, sub_100095BC8(v3) message];
    }
    objc_autoreleasePoolPop(v13);
  }

  CFMutableDictionaryRef v14 = sub_100094E98((uint64_t)v3);
  if (!v14) {
    return 0LL;
  }
  CFMutableDictionaryRef v15 = v14;
  char v16 = (const __SCPreferences *)sub_100072F14((void *)a1, @"List of known networks");
  if (!v16 || (id v17 = v16, sub_10007307C(v3), !sub_10003A25C(v17)))
  {
    CFRelease(v15);
    return 0LL;
  }

  uint64_t v82 = sub_10003AFF4((uint64_t)"WiFiManagerAddNetwork");
  uint64_t v18 = sub_100063560(a1);
  cuint64_t f = v15;
  BOOL v80 = v6;
  if (!v18)
  {
    int v32 = 0;
    CFNumberRef v22 = 0LL;
    uint64_t v83 = 0LL;
    int v60 = 1;
    unsigned int v63 = (void *)v82;
    goto LABEL_128;
  }

  id v19 = (const __CFArray *)v18;
  SCPreferencesRef prefs = v17;
  if (sub_10009D344((uint64_t)v3))
  {
    BOOL v79 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Will not add HS2.0 network to known networks list",  "WiFiManagerAddNetwork");
    }
    objc_autoreleasePoolPop(v79);
    CFNumberRef v22 = 0LL;
    uint64_t v83 = 0LL;
    int v32 = 1;
    int v60 = 1;
    goto LABEL_127;
  }

  sub_1000730D4(*(_DWORD *)(a1 + 312), v19, v3, &idx, &Count);
  id v20 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s:existingIndex %ld, insertIndex %ld",  "WiFiManagerAddNetwork",  idx,  Count);
  }
  objc_autoreleasePoolPop(v20);
  if (idx != -1 || !CFArrayGetCount(v19)) {
    goto LABEL_29;
  }
  CFMutableStringRef Mutable = 0LL;
  if (-[WiFiUserInteractionMonitor isInitialSetupCompleted]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isInitialSetupCompleted")
    || valuePtr != 1)
  {
    goto LABEL_30;
  }

  if (sub_10006AA50((void *)a1, @"IsNewInstall") == kCFBooleanFalse)
  {
LABEL_29:
    CFMutableStringRef Mutable = 0LL;
    goto LABEL_30;
  }

  uint64_t v33 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: setup not completed, filtering out non-managed known networks to retain only the new one",  "WiFiManagerAddNetwork");
  }
  objc_autoreleasePoolPop(v33);
  CFMutableStringRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    if (CFArrayGetCount(v19) >= 1)
    {
      CFIndex v34 = 0LL;
      __int128 v35 = Mutable;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v19, v34);
        if (ValueAtIndex)
        {
          BOOL v37 = ValueAtIndex;
          int v38 = sub_100073214((const __CFArray *)a1, ValueAtIndex);
          LODWORD(context) = 1;
          unsigned int v39 = (const __CFNumber *)sub_1000951FC((uint64_t)v37, @"WiFiManagerKnownNetworksEventType");
          if (v39) {
            CFNumberGetValue(v39, kCFNumberIntType, &context);
          }
          if (v38)
          {
            CFArrayAppendValue(Mutable, v37);
            uint64_t v40 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "%s: retaining currently connected network %@", "WiFiManagerAddNetwork", sub_100095BC8(v37) message];
            }
          }

          else if (sub_10009860C((uint64_t)v37) || sub_10009EFD8((uint64_t)v37))
          {
            CFArrayAppendValue(Mutable, v37);
            uint64_t v40 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "%s: retaining carrier/profile-based network %@", "WiFiManagerAddNetwork", sub_100095BC8(v37) message];
            }
          }

          else if ((_DWORD)context == 3)
          {
            CFArrayAppendValue(Mutable, v37);
            uint64_t v40 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "%s: retaining cloud-synced network %@", "WiFiManagerAddNetwork", sub_100095BC8(v37) message];
            }
          }

          else
          {
            uint64_t v40 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "%s: removing network %@ during Setup", "WiFiManagerAddNetwork", sub_100095BC8(v37) message];
            }
          }

          objc_autoreleasePoolPop(v40);
          CFMutableStringRef Mutable = v35;
        }

        ++v34;
      }

      while (v34 < CFArrayGetCount(v19));
    }

    CFIndex v77 = Count;
    if (v77 > CFArrayGetCount(Mutable)) {
      CFIndex Count = CFArrayGetCount(Mutable);
    }
    id v19 = Mutable;
  }

LABEL_30:
  CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (v22) {
    sub_10009582C((uint64_t)v3, @"WiFiManagerKnownNetworksEventType", v22);
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v24 = CFDateCreate(kCFAllocatorDefault, Current);
  if (v24)
  {
    CFDateRef v25 = v24;
    CFRelease(v25);
  }

  uint64_t v83 = Mutable;
  if (idx == -1)
  {
    int v41 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Different network with same ssid found and replaced",  "WiFiManagerAddNetwork");
    }
LABEL_186:
    objc_autoreleasePoolPop(v41);
    int v60 = 0;
    int v32 = 1;
    goto LABEL_127;
  }

  uint64_t v26 = (CFDictionaryRef *)CFArrayGetValueAtIndex(v19, idx);
  if (!v26)
  {
LABEL_79:
    int v32 = 0;
    goto LABEL_80;
  }

  uint64_t v27 = v26;
  int v28 = sub_100097324(v26);
  int v29 = sub_100097324(v3);
  if (*(_BYTE *)(a1 + 1849))
  {
    CFMutableStringRef v30 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s preferAutoJoinHomeNetwork, enabling added network",  "WiFiManagerAddNetwork");
    }
    objc_autoreleasePoolPop(v30);
    sub_100099ED0((uint64_t)v3, 1);
    sub_10009582C((uint64_t)v27, @"WiFiNetworkDisabledUntilDate", 0LL);
  }

  if (!v29 || v28)
  {
    int v41 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Replaced the existing network",  "WiFiManagerAddNetwork");
    }
    goto LABEL_186;
  }

  sub_100097394((uint64_t)v27, v29);
  sub_100071D74(a1, v27, 0);
  __int16 v31 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: Marked network as hidden", "WiFiManagerAddNetwork");
  }
  objc_autoreleasePoolPop(v31);
  int v32 = 1;
LABEL_80:
  if (sub_1000971AC((uint64_t)v3))
  {
    int v42 = @"AdHoc";
LABEL_84:
    sub_10009A048((CFMutableDictionaryRef *)v3, 0, v42);
    goto LABEL_85;
  }

  if (sub_1000A4B04((uint64_t)v3))
  {
    int v42 = @"Accessory";
    goto LABEL_84;
  }

  sub_100099ED0((uint64_t)v3, 1);
LABEL_85:
  if (*(_BYTE *)(a1 + 1849))
  {
    CFStringRef v43 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s:NOI home-state: %d",  "WiFiManagerAddNetwork",  sub_100096670((uint64_t)v3));
    }
    objc_autoreleasePoolPop(v43);
    sub_100074224(a1, 0LL, v3);
  }

  if (idx != -1)
  {
    int v60 = 1;
    goto LABEL_127;
  }

  CFBooleanRef v44 = kCFBooleanFalse;
  else {
    CFBooleanRef v45 = kCFBooleanFalse;
  }
  sub_10009582C((uint64_t)v3, @"ALLOW_WPA2_PSK", v45);
  sub_10009582C((uint64_t)v3, @"ALLOW_OWE_TSN", v44);
  if (CWFScanResultHas6GHzOnlyBSS(v3, &__NSArray0__struct, &stru_1001E4250))
  {
    int v46 = sub_1000A063C((CFDictionaryRef *)v3);
    objc_msgSend(v46, "setWas6GHzOnlyAt:", +[NSDate date](NSDate, "date"));
    int v47 = sub_1000A1DEC(v46, 0LL);
    if (v47)
    {
      int v48 = v47;
      sub_100095524((uint64_t)v3, (uint64_t)v47);
      CFRelease(v48);
    }
  }

  sub_10009A504(v3);
  if (valuePtr == 23 || sub_10009EFD8((uint64_t)v3) && sub_10009A128((uint64_t)v3) && valuePtr == 17)
  {
    CFAbsoluteTime v49 = CFAbsoluteTimeGetCurrent();
    char v50 = CFDateCreate(kCFAllocatorDefault, v49);
    BOOL v51 = *(const __CFArray **)(a1 + 2192);
    if (v51)
    {
      CFIndex v52 = 0LL;
      CFIndex v53 = -1LL;
      do
      {
        if (v52 >= CFArrayGetCount(v51)) {
          break;
        }
        char v54 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 2192), v52);
        if (v54)
        {
          uint64_t v55 = (uint64_t)v54;
          if (CFEqual(v3, v54))
          {
            char v56 = (const __CFDate *)sub_1000951FC(v55, @"removedAt");
            if (v56 && (unint64_t v57 = v56, CFDateGetTimeIntervalSinceDate(v50, v56) < 86400.0))
            {
              BOOL v58 = objc_autoreleasePoolPush();
              if (qword_100219F60)
              {
                [(id)qword_100219F60 WFLog:3, "%s: previously disabled carrier-based network %@ re-added at %@ (was removed at %@), disabling the network", "WiFiManagerAddNetwork", sub_100095BC8(v3), v50, v57 message];
                uint64_t v3 = v90;
              }

              objc_autoreleasePoolPop(v58);
              sub_100099ED0((uint64_t)v3, 0);
              CFIndex v53 = v52;
            }

            else
            {
              CFIndex v53 = v52;
            }
          }
        }

        ++v52;
        BOOL v51 = *(const __CFArray **)(a1 + 2192);
      }

      while (v51);
      if (v53 != -1) {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 2192), v53);
      }
    }

    if (v50) {
      CFRelease(v50);
    }
  }

  uint64_t v3 = v90;
  CFArrayInsertValueAtIndex(v19, Count, v90);
  int v59 = sub_10007332C(a1, v19);
  int v60 = 1;
  sub_100074498(a1, 1, 1, 1);
  sub_100071D74(a1, (CFDictionaryRef *)v3, 0);
  if (!v59)
  {
    int v32 = 0;
LABEL_127:
    id v17 = prefs;
    unsigned int v63 = (void *)v82;
    goto LABEL_128;
  }

  unsigned int v61 = objc_autoreleasePoolPush();
  uint64_t v62 = (void *)qword_100219F60;
  unsigned int v63 = (void *)v82;
  if (qword_100219F60)
  {
    int v64 = v85;
    if (v80) {
      int v64 = sub_1000951FC((uint64_t)v3, @"DomainName");
    }
    [v62 WFLog:3, "%s: Added %@ to list of known networks", "WiFiManagerAddNetwork", v64 message];
  }

  objc_autoreleasePoolPop(v61);
  int v32 = 1;
  id v17 = prefs;
LABEL_128:
  sub_10003A310(v17, v32);

  if (!v32)
  {
    uint64_t v68 = 0LL;
    unint64_t v67 = v83;
    if (!v22) {
      goto LABEL_163;
    }
LABEL_162:
    CFRelease(v22);
    goto LABEL_163;
  }

  if (valuePtr == 6 || valuePtr == 1)
  {
    BOOL v65 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: sync the added network <%@>", "WiFiManagerAddNetwork", v85 message];
    }
    objc_autoreleasePoolPop(v65);
    unint64_t v67 = v83;
    if (&WiFiCloudSyncEngineCreate)
    {
      __int16 v66 = *(const void **)(a1 + 1136);
      if (v66)
      {
        if (v3)
        {
          CFRetain(v66);
          CFRetain(v3);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_100074694;
          block[3] = &unk_1001E2C30;
          void block[4] = a1;
          void block[5] = v3;
          dispatch_async((dispatch_queue_t)qword_100219F88, block);
        }
      }
    }
  }

  else
  {
    BOOL v69 = objc_autoreleasePoolPush();
    CFStringRef v70 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      BOOL v71 = v85;
      if (v80) {
        BOOL v71 = sub_1000951FC((uint64_t)v3, @"DomainName");
      }
      [v70 WFLog:3, "%s: <%@> added due to sync", "WiFiManagerAddNetwork", v71 message];
    }

    objc_autoreleasePoolPop(v69);
    unint64_t v67 = v83;
  }

  sub_100061B50((uint64_t)v66, 2LL, a1);
  sub_1000630EC(a1);
  sub_10002F2B4((void *)a1, valuePtr, v3);
  if (v60) {
    unsigned int v72 = 0;
  }
  else {
    unsigned int v72 = 2;
  }
  sub_1000746CC(a1, v3, v72);
  if (v3) {
    char v73 = v60 ^ 1;
  }
  else {
    char v73 = 1;
  }
  if ((v73 & 1) == 0) {
    sub_100074948((void *)a1, v85);
  }
  if (!*(_BYTE *)(a1 + 1849))
  {
LABEL_161:
    uint64_t v68 = 1LL;
    if (!v22) {
      goto LABEL_163;
    }
    goto LABEL_162;
  }

  BOOL v74 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3 message:"Attempting NOI Transition"];
  }
  objc_autoreleasePoolPop(v74);
  if (sub_10009860C((uint64_t)v3))
  {
    uint64_t v75 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "Added network is profile based, set previous network prior to __WiFiManagerAttemptNetworkTransition so wifid tra nsitions to this newly added network (%@)", v85 message];
    }
    objc_autoreleasePoolPop(v75);
    uint64_t context = a1;
    unint64_t v92 = 0xAAAAAAAA00000064LL;
    int v93 = (const void **)&v90;
    uint64_t v94 = 0LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
  }

  if (_os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin"))
  {
    sub_10006FFDC(a1, 28LL);
    goto LABEL_161;
  }

  uint64_t context = a1;
  unint64_t v92 = 0xAAAAAAAA00000050LL;
  uint64_t v68 = 1LL;
  int v93 = 0LL;
  uint64_t v94 = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
  if (v22) {
    goto LABEL_162;
  }
LABEL_163:
  CFRelease(cf);
  if (v67) {
    CFRelease(v67);
  }
  return v68;
}

  CFStringAppend(theString, @" ScUpFu");
  if ((a1 & 0x100) == 0)
  {
LABEL_11:
    if ((a1 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }

  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v24 = CFDateCreate(kCFAllocatorDefault, Current);
  if (v24)
  {
    CFDateRef v25 = v24;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), @"lastUpdated", v24);
    CFRelease(v25);
    if (!v20) {
      return;
    }
LABEL_39:
    CFRelease(v17);
    return;
  }

    if (!v5) {
      return;
    }
    goto LABEL_31;
  }

  uint64_t v26 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: failed to get BSSID from %@", "WiFiNetworkSetKnownBssUsageData", sub_100095BC8(a2) message];
  }
  objc_autoreleasePoolPop(v26);
  if (v5) {
LABEL_31:
  }
    CFRelease(v5);
}

  if (*(void *)(a1 + 5200))
  {
    CFMutableStringRef v30 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "Stopping MIS Network: %@", sub_100095BC8(*(const void **)(a1 + 5200)) message];
    }
    objc_autoreleasePoolPop(v30);
    __int16 v31 = (const void *)sub_100043E8C(*(void *)(a1 + 64));
    sub_1000E5F48(a1, v31, *(void **)(a1 + 5200), (uint64_t)sub_10010D71C, a1);
    int v32 = *(const void **)(a1 + 5200);
    if (v32)
    {
      CFRelease(v32);
      *(void *)(a1 + 5200) = 0LL;
    }
  }

  else if (*(_DWORD *)(a1 + 5336) == 2)
  {
    uint64_t v33 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: MIS stopped while waiting for hostap. Stopping network.",  "__WiFiDeviceManagerStopMIS");
    }
    objc_autoreleasePoolPop(v33);
    CFIndex v34 = (const void *)sub_100043E8C(*(void *)(a1 + 64));
    sub_1000DBA44(a1, v34, 0LL, (uint64_t)sub_10010D71C, a1);
  }

  __int128 v35 = *(unsigned __int8 *)(a1 + 5211);
  if (*(_BYTE *)(a1 + 5211))
  {
    *(_BYTE *)(a1 + 5211) = 0;
    sub_1000DD250((void *)a1);
    __int128 v36 = *(dispatch_source_s **)(a1 + 5312);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    int v38 = dispatch_time(0LL, (uint64_t)((Current + 315360000.0) * 1000000000.0));
    dispatch_source_set_timer(v36, v38, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    unsigned int v39 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"Stopped Internet Connection Sharing over WiFi"];
    }
    objc_autoreleasePoolPop(v39);
  }

  *(_WORD *)(a1 + 520_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
  *(_BYTE *)(a1 + 5352) = 0;
  *(_BYTE *)(a1 + 5214) = 0;
  sub_1000CF880(a1, 4, 0);
  sub_1000DC9F0(a1, 0LL);
  *(_DWORD *)(a1 + 192) = 13;
  uint64_t v40 = _os_feature_enabled_impl("CoreWiFi", "UnifiedAutoJoin");
  if (v35 && v40 && !*(_BYTE *)(a1 + 5211))
  {
    sub_1000F5F98(a1, 0xAuLL);
  }

  else
  {
    objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "autoJoinStartedWithTrigger:interfaceName:",  10,  sub_100043E8C(*(void *)(a1 + 64)));
    sub_1000D0A5C(a1, 2LL, "__WiFiDeviceManagerStopMIS");
  }

    objc_autoreleasePoolPop(v4);
    return v2;
  }

  if (sub_10009869C((uint64_t)a1) && sub_100095B4C((uint64_t)a1))
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s Network with SSID: %@ is unshareable as it was added by a third party (WiFiNetworkIsAppBased() is true)", "WiFiNetworkDetermineShareableStatusOfNetworkForNearbyDeviceSetup", sub_100095BC8(a1) message];
    }
    uint64_t v2 = 8LL;
    goto LABEL_30;
  }

  if (sub_100098E6C(a1))
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s Network with SSID: %@ is unshareable as it requires a one time password (WiFiNetworkRequiresOneTimePassword() is true)", "WiFiNetworkDetermineShareableStatusOfNetworkForNearbyDeviceSetup", sub_100095BC8(a1) message];
    }
    uint64_t v2 = 9LL;
    goto LABEL_30;
  }

  if (sub_10009860C((uint64_t)a1) && !sub_100095B4C((uint64_t)a1))
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s Network with SSID: %@ is unshareable as it's currently determined to be profile based and is not EAP (WPA/WPA 2 Personal, Open and WEP configurations not supported for profile based networks)", "WiFiNetworkDetermineShareableStatusOfNetworkForNearbyDeviceSetup", sub_100095BC8(a1) message];
    }
    uint64_t v2 = 6LL;
    goto LABEL_30;
  }

  if (sub_100095B4C((uint64_t)a1)
    && -[ManagedConfigWrapper isEAPShareBlockedByManagedDefault]( +[ManagedConfigWrapper sharedInstance](&OBJC_CLASS___ManagedConfigWrapper, "sharedInstance"),  "isEAPShareBlockedByManagedDefault"))
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s Network with SSID: %@ is unshareable as it's EAP auth and the profile to block EAP credential sharing is installed", "WiFiNetworkDetermineShareableStatusOfNetworkForNearbyDeviceSetup", sub_100095BC8(a1) message];
    }
    uint64_t v2 = 7LL;
    goto LABEL_30;
  }

  return 1LL;
}

  objc_autoreleasePoolPop(v2);
  return v9;
}

void *sub_100072F14(void *a1, CFStringRef theString1)
{
  uint64_t v2 = a1;
  SInt32 valuePtr = 0;
  if (a1)
  {
    if (CFStringCompare(theString1, @"isWiFiPNLMigrationComplete", 0LL))
    {
      uint64_t v4 = (void *)sub_10003AFF4((uint64_t)"__WiFiManagerGetWiFiNetworksOrPreferencesRef");
      uint64_t v5 = v2 + 114;
      CFPropertyListRef Value = (const __CFNumber *)SCPreferencesGetValue((SCPreferencesRef)v2[114], @"isWiFiPNLMigrationComplete");
      if (Value)
      {
        unint64_t v7 = Value;
        CFTypeID TypeID = CFNumberGetTypeID();
        if (TypeID == CFGetTypeID(v7))
        {
          CFNumberGetValue(v7, kCFNumberIntType, &valuePtr);
          if (!valuePtr) {
            goto LABEL_18;
          }
LABEL_13:
          if (CFStringCompare(theString1, @"List of known networks", 0LL))
          {
            if (CFStringCompare(theString1, @"List of scanned networks with private mac", 0LL) == kCFCompareEqualTo) {
              uint64_t v5 = v2 + 117;
            }
          }

          else
          {
            uint64_t v5 = v2 + 115;
          }

          goto LABEL_18;
        }

        CFTypeID v9 = CFBooleanGetTypeID();
        if (v9 == CFGetTypeID(v7))
        {
          IntCFPropertyListRef Value = CFEqual(v7, kCFBooleanTrue);
        }

        else
        {
          CFTypeID v11 = CFStringGetTypeID();
          if (v11 != CFGetTypeID(v7)) {
            goto LABEL_18;
          }
          IntCFPropertyListRef Value = CFStringGetIntValue((CFStringRef)v7);
        }

        SInt32 valuePtr = IntValue;
        if (IntValue) {
          goto LABEL_13;
        }
      }

void sub_10007307C(const void *a1)
{
  uint64_t v2 = (const __CFString *)sub_1000951FC((uint64_t)a1, @"WiFiNetworkPasswordString");
  if (v2)
  {
    sub_100099C50(a1, v2);
    sub_10009582C((uint64_t)a1, @"WiFiNetworkPasswordString", 0LL);
  }

void sub_1000730D4(int a1, CFArrayRef theArray, void *a3, CFIndex *a4, CFIndex *a5)
{
  if (!theArray)
  {
LABEL_14:
    CFIndex Count = 0LL;
    goto LABEL_15;
  }

  CFIndex Count = CFArrayGetCount(theArray);
  if (!Count) {
    goto LABEL_15;
  }
  if (!a3 || (CFTypeID v11 = CFGetTypeID(a3), v11 != sub_10009499C()))
  {
    CFMutableDictionaryRef v15 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: invalid network ref", "__GetKnownNetworkIndices");
    }
    objc_autoreleasePoolPop(v15);
    goto LABEL_14;
  }

  if (a1 != 4)
  {
    if (Count >= 1)
    {
      CFIndex v12 = 0LL;
      while (1)
      {
        ValueAtIndex = (const void **)CFArrayGetValueAtIndex(theArray, v12);
        if (Count == ++v12) {
          goto LABEL_14;
        }
      }

      CFIndex Count = 0LL;
      if (a5) {
        goto LABEL_17;
      }
      goto LABEL_18;
    }

    goto LABEL_14;
  }

  CFIndex v12 = Count;
  while (v12)
  {
    uint64_t v13 = (const void **)CFArrayGetValueAtIndex(theArray, --v12);
  }

uint64_t sub_100073214(const __CFArray *a1, const void *a2)
{
  uint64_t v2 = 0LL;
  if (a1 && a2)
  {
    uint64_t v4 = sub_10006C77C(a1);
    if (v4)
    {
      uint64_t v5 = v4;
      CFIndex Count = CFArrayGetCount(v4);
      if (Count < 1)
      {
LABEL_11:
        uint64_t v2 = 0LL;
      }

      else
      {
        CFIndex v7 = Count;
        CFIndex v8 = 0LL;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v5, v8);
          uint64_t v10 = sub_10003BEDC((uint64_t)ValueAtIndex);
          if (v10)
          {
            CFTypeID v11 = (const void *)sub_10004CE2C(v10);
            if (v11)
            {
              CFIndex v12 = sub_1000D3348((uint64_t)ValueAtIndex, v11);
              if (v12)
              {
                uint64_t v13 = v12;
                int v14 = CFEqual(a2, v12);
                CFRelease(v13);
                if (v14) {
                  break;
                }
              }
            }
          }

          if (v7 == ++v8) {
            goto LABEL_11;
          }
        }

        uint64_t v2 = 1LL;
      }

      CFRelease(v5);
    }

    else
    {
      char v16 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: failed to get device managers",  "__WiFiManagerIsAssociatedToNetwork");
      }
      objc_autoreleasePoolPop(v16);
      return 0LL;
    }
  }

  return v2;
}

uint64_t sub_10007332C(uint64_t a1, const __CFArray *a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  if (a1)
  {
    uint64_t v5 = 0LL;
    if (a2 && *(_BYTE *)(a1 + 1160))
    {
      BOOL v6 = objc_autoreleasePoolPush();
      CFIndex v7 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        CFIndex v8 = *(const __CFArray **)(a1 + 232);
        if (v8) {
          CFIndex Count = CFArrayGetCount(v8);
        }
        else {
          CFIndex Count = 0LL;
        }
        objc_msgSend( v7,  "WFLog:message:",  3,  "%s: Switching cached list from %ld to %ld known networks",  "WiFiManagerSetKnownNetworksCache",  Count,  CFArrayGetCount(a2));
      }

      objc_autoreleasePoolPop(v6);
      uint64_t v10 = *(const __CFArray **)(a1 + 232);
      if (v10 == a2) {
        uint64_t v10 = 0LL;
      }
      else {
        *(void *)(a1 + 232) = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0LL, a2);
      }
      CFTypeID v11 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Updated %ld known networks in the cache",  "WiFiManagerSetKnownNetworksCache",  CFArrayGetCount(*(CFArrayRef *)(a1 + 232)));
      }
      objc_autoreleasePoolPop(v11);
      sub_100063998(a1, *(const __CFArray **)(a1 + 232));
      if (v10) {
        CFRelease(v10);
      }
      uint64_t v5 = 1LL;
    }
  }

  else
  {
    uint64_t v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: manager is NULL",  "WiFiManagerSetKnownNetworksCache");
    }
    objc_autoreleasePoolPop(v13);
    uint64_t v5 = 0LL;
  }

  objc_autoreleasePoolPop(v4);
  return v5;
}

uint64_t sub_1000734C0(uint64_t a1, void *a2, const __CFArray *a3)
{
  CFIndex idx = -1LL;
  BOOL v6 = sub_100095318((BOOL)a2);
  sub_10008E284(a3, a2, &idx);
  CFIndex v7 = idx;
  if (idx == -1 && v6)
  {
    CFIndex idx = -1LL;
    if (!a3) {
      return 0LL;
    }
    CFIndex Count = CFArrayGetCount(a3);
    if (Count)
    {
      CFIndex v10 = Count;
      if (Count < 1)
      {
        CFIndex v11 = 0LL;
      }

      else
      {
        CFIndex v11 = 0LL;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a3, v11);
          if (v10 == ++v11) {
            goto LABEL_15;
          }
        }

        CFIndex idx = v11;
      }

      if (v11 == v10)
      {
LABEL_15:
        uint64_t v13 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: network with domain name %@ not found", "FindMatchingHS20Network", sub_10009D454((uint64_t)a2) message];
        }
        objc_autoreleasePoolPop(v13);
      }
    }

    CFIndex v7 = idx;
  }

  if (v7 == -1) {
    return 0LL;
  }
  int v14 = objc_autoreleasePoolPush();
  CFMutableDictionaryRef v15 = (void *)qword_100219F60;
  if (qword_100219F60)
  {
    if (v6) {
      char v16 = "domain name";
    }
    else {
      char v16 = "SSID";
    }
    if (v6) {
      id v17 = sub_10009D454((uint64_t)a2);
    }
    else {
      id v17 = sub_100095BC8(a2);
    }
    [v15 WFLog:3, "%s: Network with the same %s %@ found at index %ld", "__WiFiManagerModifyExistingNetwork", v16, v17, idx message];
  }

  objc_autoreleasePoolPop(v14);
  uint64_t v18 = CFArrayGetValueAtIndex(a3, idx);
  if (!v18)
  {
    unsigned int v87 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null existingNetwork",  "__WiFiManagerModifyExistingNetwork");
    }
    objc_autoreleasePoolPop(v87);
    return 0LL;
  }

  id v19 = v18;
  uint64_t v20 = sub_100098EA8((uint64_t)v18);
  uint64_t v21 = sub_100098EA8((uint64_t)a2);
  if ((_DWORD)v21 != (_DWORD)v20)
  {
    uint64_t v22 = v21;
    int v23 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: auth flag changed from 0x%0x to 0x%0x",  "__WiFiManagerModifyExistingNetwork",  v20,  v22);
    }
    objc_autoreleasePoolPop(v23);
  }

  CFDateRef v24 = (const __CFArray *)sub_1000951FC((uint64_t)v19, @"networkKnownBSSListKey");
  if (v24)
  {
    CFDateRef v25 = v24;
    if (CFArrayGetCount(v24)) {
      sub_10009582C((uint64_t)a2, @"networkKnownBSSListKey", v25);
    }
  }

  uint64_t v26 = sub_100096A74((uint64_t)v19);
  if (v26)
  {
    sub_10009582C((uint64_t)a2, @"CHANNEL", v26);
    uint64_t v27 = sub_1000951FC((uint64_t)v19, @"CHANNEL_FLAGS");
    sub_10009582C((uint64_t)a2, @"CHANNEL_FLAGS", v27);
  }

  int v28 = sub_1000951FC((uint64_t)v19, @"BSSID");
  sub_10009582C((uint64_t)a2, @"BSSID", v28);
  int v29 = sub_1000951FC((uint64_t)v19, @"Standalone");
  sub_10009582C((uint64_t)a2, @"Standalone", v29);
  BOOL v30 = sub_10009A16C((uint64_t)a2);
  __int16 v31 = objc_autoreleasePoolPush();
  if (v30)
  {
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: AJ prefs detected in incoming WiFiNetworkRef %@. AJ settings from existing network %@ will not be copied over", "__WiFiManagerModifyExistingNetwork", a2, v19 message];
    }
  }

  else
  {
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: No AJ prefs detected for incoming network %@, so preserve AJ settings in existing network %@", "__WiFiManagerModifyExistingNetwork", sub_100095BC8(a2), v19 message];
    }
    objc_autoreleasePoolPop(v31);
    sub_100095D1C(a2, (uint64_t)v19);
    __int16 v31 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: network properties after AJ properties merge: %@", "__WiFiManagerModifyExistingNetwork", a2, v88 message];
    }
  }

  objc_autoreleasePoolPop(v31);
  if (&_CNForgetSSID)
  {
    if (sub_1000951FC((uint64_t)v19, kCNSNetworkWasCaptiveProperty))
    {
      int v32 = (void *)kCNSNetworkWasCaptiveProperty;
      uint64_t v33 = sub_1000951FC((uint64_t)v19, kCNSNetworkWasCaptiveProperty);
      sub_10009582C((uint64_t)a2, v32, v33);
    }

    if (sub_1000951FC((uint64_t)v19, kCNSCaptiveNetworkProperty))
    {
      CFIndex v34 = (void *)kCNSCaptiveNetworkProperty;
      __int128 v35 = sub_1000951FC((uint64_t)v19, kCNSCaptiveNetworkProperty);
      sub_10009582C((uint64_t)a2, v34, v35);
    }

    if (sub_1000951FC((uint64_t)v19, kCNSDisabledByCaptiveProperty)
      && !sub_1000951FC((uint64_t)a2, kCNSDisabledByCaptiveProperty))
    {
      __int128 v36 = (void *)kCNSDisabledByCaptiveProperty;
      BOOL v37 = sub_1000951FC((uint64_t)v19, kCNSDisabledByCaptiveProperty);
      sub_10009582C((uint64_t)a2, v36, v37);
    }
  }

  if (sub_1000951FC((uint64_t)v19, @"NetworkOriginator")
    && !sub_1000951FC((uint64_t)a2, @"NetworkOriginator"))
  {
    int v38 = sub_1000951FC((uint64_t)v19, @"NetworkOriginator");
    sub_10009582C((uint64_t)a2, @"NetworkOriginator", v38);
  }

  unsigned int v39 = (void *)CWFCoreWiFiSpecificAttributesKey;
  if (sub_1000951FC((uint64_t)v19, CWFCoreWiFiSpecificAttributesKey) && !sub_1000951FC((uint64_t)a2, v39))
  {
    uint64_t v40 = sub_1000951FC((uint64_t)v19, v39);
    sub_10009582C((uint64_t)a2, v39, v40);
  }

  if (sub_1000951FC((uint64_t)v19, @"WiFiNetworkAttributeIsPublic")
    && !sub_1000951FC((uint64_t)a2, @"WiFiNetworkAttributeIsPublic"))
  {
    int v41 = sub_1000951FC((uint64_t)v19, @"WiFiNetworkAttributeIsPublic");
    sub_10009582C((uint64_t)a2, @"WiFiNetworkAttributeIsPublic", v41);
  }

  if (sub_100097324(v19) && !sub_100097324(a2))
  {
    int v42 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: Force Directed setting for %@", "__WiFiManagerModifyExistingNetwork", sub_100095BC8(a2) message];
    }
    objc_autoreleasePoolPop(v42);
    sub_100097394((uint64_t)a2, 1);
  }

  if (!sub_10009E6CC((uint64_t)a2))
  {
    unsigned int v43 = sub_10009E6CC((uint64_t)a2);
    if (v43 != sub_10009E6CC((uint64_t)v19))
    {
      CFBooleanRef v44 = sub_1000951FC((uint64_t)v19, @"SaveDataMode");
      sub_10009582C((uint64_t)a2, @"SaveDataMode", v44);
    }
  }

  CFBooleanRef v45 = sub_10009E798((uint64_t)v19);
  int v46 = (const __CFDate *)sub_10009E798((uint64_t)a2);
  if (v45 && (!v46 || CFDateCompare((CFDateRef)v45, v46, 0LL) == kCFCompareGreaterThan))
  {
    double v47 = sub_10009E70C((uint64_t)v19);
    sub_10009E80C(a2, v45, v47);
    int v48 = objc_autoreleasePoolPush();
    CFAbsoluteTime v49 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      double v50 = sub_10009E70C((uint64_t)v19);
      [v49 WFLog:3, "%s: setting networkQuality to %.3f at %@ for network %@", "__WiFiManagerModifyExistingNetwork", *(void *)&v50, v45, sub_100095BC8(a2) message];
    }

    objc_autoreleasePoolPop(v48);
  }

  if (sub_10009A2C4((uint64_t)v19, 1) && !sub_10009A2C4((uint64_t)a2, 1))
  {
    BOOL v51 = sub_10009A2C4((uint64_t)v19, 1);
    sub_10009A194(a2, 1, v51);
  }

  if (sub_10009A2C4((uint64_t)v19, 0) && !sub_10009A2C4((uint64_t)a2, 0))
  {
    CFIndex v52 = sub_10009A2C4((uint64_t)v19, 0);
    sub_10009A194(a2, 0, v52);
  }

  CFIndex v53 = sub_1000951FC((uint64_t)v19, @"prevJoined");
  char v54 = (const __CFDate *)sub_1000951FC((uint64_t)a2, @"prevJoined");
  if (v53)
  {
    uint64_t v55 = v54;
    if (v54)
    {
      if (CFDateCompare((CFDateRef)v53, v54, 0LL) == kCFCompareGreaterThan)
      {
        sub_10009582C((uint64_t)a2, @"prevJoined", v53);
        char v56 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: overriding previous join date from %@ to %@ for network %@", "__WiFiManagerModifyExistingNetwork", v55, v53, sub_100095BC8(a2) message];
        }
        objc_autoreleasePoolPop(v56);
      }
    }
  }

  if (sub_1000951FC((uint64_t)v19, @"WiFiManagerKnownNetworksEventType"))
  {
    unint64_t v57 = sub_1000951FC((uint64_t)v19, @"WiFiManagerKnownNetworksEventType");
    sub_10009582C((uint64_t)a2, @"WiFiManagerKnownNetworksEventType", v57);
  }

  if (sub_1000951FC((uint64_t)v19, @"addedAt"))
  {
    BOOL v58 = sub_1000951FC((uint64_t)v19, @"addedAt");
    sub_10009582C((uint64_t)a2, @"addedAt", v58);
  }

  if (sub_10009A340((uint64_t)v19) != 0.0 && sub_10009A340((uint64_t)a2) == 0.0)
  {
    double v59 = sub_10009A340((uint64_t)v19);
    sub_10009A35C((uint64_t)a2, v59);
  }

  if (sub_1000951FC((uint64_t)v19, @"userPreferredNetworkNames")
    && !sub_1000951FC((uint64_t)a2, @"userPreferredNetworkNames"))
  {
    int v60 = sub_1000951FC((uint64_t)v19, @"userPreferredNetworkNames");
    sub_10009582C((uint64_t)a2, @"userPreferredNetworkNames", v60);
  }

  if (sub_100096670((uint64_t)v19) && !sub_100096670((uint64_t)a2))
  {
    int v61 = sub_100096670((uint64_t)v19);
    sub_10009FA58(a2, v61);
  }

  if (sub_10009F9B8((uint64_t)v19) && !sub_10009F9B8((uint64_t)a2))
  {
    int v62 = sub_10009F9B8((uint64_t)v19);
    sub_10009F864(a2, v62);
  }

  if (sub_1000A0430((uint64_t)v19))
  {
    unsigned int v63 = sub_1000A0430((uint64_t)v19);
    sub_1000970C0((uint64_t)a2, @"kWiFiNetworkSSIDHarvestStatusKey", v63);
  }

  if (*(_BYTE *)(a1 + 1849)) {
    sub_100074224(a1, v19, a2);
  }
  BOOL v64 = sub_1000A1C1C((uint64_t)a2);
  if (v64 != sub_1000A1C1C((uint64_t)v19))
  {
    BOOL v65 = objc_autoreleasePoolPush();
    __int16 v66 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      BOOL v67 = sub_1000A1C1C((uint64_t)v19);
      objc_msgSend( v66,  "WFLog:message:",  3,  "%s: privacy proxy enabled changed from %d to %d",  "__WiFiManagerModifyExistingNetwork",  v67,  sub_1000A1C1C((uint64_t)a2));
    }

    objc_autoreleasePoolPop(v65);
  }

  uint64_t v68 = (const __CFDictionary *)sub_1000951FC((uint64_t)v19, @"EnterpriseProfile");
  BOOL v69 = (const __CFDictionary *)sub_1000951FC((uint64_t)a2, @"EnterpriseProfile");
  CFDictionaryRef theDict = 0LL;
  CFStringRef value = 0LL;
  if (v68) {
    CFDictionaryGetValueIfPresent(v68, @"EAPClientConfiguration", (const void **)&value);
  }
  if (v69) {
    CFDictionaryGetValueIfPresent(v69, @"EAPClientConfiguration", (const void **)&theDict);
  }
  if (!value)
  {
    BOOL v79 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: No existing EAP config for %@, using new one", "__WiFiManagerModifyExistingNetwork", sub_100095BC8(a2) message];
    }
    objc_autoreleasePoolPop(v79);
    goto LABEL_140;
  }

  if (theDict)
  {
    CFArrayRef v91 = 0LL;
    CFArrayRef theArray = 0LL;
    CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"AcceptEAPTypes", (const void **)&theArray);
    CFDictionaryGetValueIfPresent(theDict, @"AcceptEAPTypes", (const void **)&v91);
    if (!theArray) {
      goto LABEL_140;
    }
    if (CFArrayGetCount(theArray) >= 1)
    {
      CFIndex v70 = 0LL;
      int v71 = 1;
      do
      {
        unsigned int v72 = CFArrayGetValueAtIndex(theArray, v70);
        char v73 = v91;
        if (!v91
          || (v74 = v72, v96.length = CFArrayGetCount(v91), v96.CFIndex location = 0LL, !CFArrayContainsValue(v73, v96, v74)))
        {
          int v71 = 0;
        }

        ++v70;
      }

      while (v70 < CFArrayGetCount(theArray));
      if (!v71) {
        goto LABEL_140;
      }
    }

    int v89 = 0LL;
    __int16 v90 = 0LL;
    CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"UserName", (const void **)&v90);
    CFDictionaryGetValueIfPresent(theDict, @"UserName", (const void **)&v89);
    if (v89 || !v90) {
      goto LABEL_140;
    }
    uint64_t v75 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: Keeping EXISTING username for %@", "__WiFiManagerModifyExistingNetwork", sub_100095BC8(a2) message];
    }
    objc_autoreleasePoolPop(v75);
    id v76 = v90;
    CFIndex v77 = @"UserName";
    uint64_t v78 = (uint64_t)a2;
  }

  else
  {
    BOOL v80 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: Keeping EXISTING EAP config for %@", "__WiFiManagerModifyExistingNetwork", sub_100095BC8(a2) message];
    }
    objc_autoreleasePoolPop(v80);
    id v76 = sub_1000951FC((uint64_t)v19, @"EnterpriseProfile");
    uint64_t v78 = (uint64_t)a2;
    CFIndex v77 = @"EnterpriseProfile";
  }

  sub_10009582C(v78, v77, v76);
LABEL_140:
  if (!sub_100096E90((uint64_t)a2)
    && !sub_1000957F4((BOOL)a2)
    && !sub_100095B4C((uint64_t)a2)
    && !sub_100098380((BOOL)a2)
    && !sub_100096D08((const __CFDictionary *)a2))
  {
    int v81 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: new network is open, so remove existing password",  "__WiFiManagerModifyExistingNetwork");
    }
    objc_autoreleasePoolPop(v81);
    sub_100099D38(a2);
  }

  if (!sub_1000951FC((uint64_t)a2, @"WiFiNetworkNANServiceID")
    && sub_1000951FC((uint64_t)v19, @"WiFiNetworkNANServiceID"))
  {
    uint64_t v82 = sub_1000951FC((uint64_t)v19, @"WiFiNetworkNANServiceID");
    sub_10009582C((uint64_t)a2, @"WiFiNetworkNANServiceID", v82);
  }

  if (!sub_1000951FC((uint64_t)a2, @"PublicAirPlayNetwork")
    && sub_1000951FC((uint64_t)v19, @"PublicAirPlayNetwork"))
  {
    uint64_t v83 = sub_1000951FC((uint64_t)v19, @"PublicAirPlayNetwork");
    sub_10009582C((uint64_t)a2, @"PublicAirPlayNetwork", v83);
  }

  CFBooleanRef v84 = kCFBooleanFalse;
  else {
    CFBooleanRef v85 = kCFBooleanFalse;
  }
  sub_10009582C((uint64_t)a2, @"ALLOW_WPA2_PSK", v85);
  sub_10009582C((uint64_t)a2, @"ALLOW_OWE_TSN", v84);
  CFArrayRemoveValueAtIndex(a3, idx);
  CFArrayInsertValueAtIndex(a3, idx, a2);
  sub_100071D74(a1, (CFDictionaryRef *)a2, 0);
  sub_10007332C(a1, a3);
  return 1LL;
}

void sub_100074224(uint64_t a1, const void *a2, const void *a3)
{
  char v15 = 0;
  if (sub_10009CD54((uint64_t)a3) != 1)
  {
    uint64_t v7 = sub_10009C5D4((uint64_t)a2, (uint64_t)a3, &v15);
    if (v7 == 1)
    {
      char v20 = 1;
      uint64_t context = a1;
      unint64_t v17 = 0xAAAAAAAA0000004FLL;
      uint64_t v18 = &v20;
      uint64_t v19 = 1LL;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
      sub_10009FA58(a3, 1);
      return;
    }

    if (v7 == -1)
    {
      CFIndex v8 = a3;
      int v9 = 2;
    }

    else
    {
      if (!v15)
      {
LABEL_18:
        char v20 = 0;
        uint64_t context = a1;
        unint64_t v17 = 0xAAAAAAAA0000004FLL;
        uint64_t v18 = &v20;
        uint64_t v19 = 1LL;
        goto LABEL_19;
      }

      if (a2)
      {
        CFIndex v10 = (const __CFString *)sub_100095BC8(a2);
        CFIndex v11 = (const __CFString *)sub_100095BC8(a3);
        if (CFStringCompare(v10, v11, 0LL))
        {
          CFIndex v12 = objc_autoreleasePoolPush();
          uint64_t v13 = (void *)qword_100219F60;
          if (qword_100219F60)
          {
            int v14 = sub_100095BC8(a2);
            [v13 WFLog:4, "NOI home-state: ERROR Multiple home networks exist '%@', '%@' ", v14, sub_100095BC8(a3) message];
          }

          objc_autoreleasePoolPop(v12);
          char v20 = 1;
          uint64_t context = a1;
          unint64_t v17 = 0xAAAAAAAA0000004FLL;
          uint64_t v18 = &v20;
          uint64_t v19 = 1LL;
          CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
        }
      }

      CFIndex v8 = a3;
      int v9 = 1;
    }

    sub_10009FA58(v8, v9);
    sub_100099F8C((uint64_t)a3, 0LL);
    sub_100099ED0((uint64_t)a3, 1);
    return;
  }

  BOOL v6 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s Forced fix network. Setting '%@' as NOI", "__WiFiManagerApplyHomeNetworkPolicy", sub_100095BC8(a3) message];
  }
  objc_autoreleasePoolPop(v6);
  sub_10009FBA8(a3, 1);
  char v20 = 1;
  uint64_t context = a1;
  unint64_t v17 = 0xAAAAAAAA0000004FLL;
  uint64_t v18 = &v20;
  uint64_t v19 = 1LL;
LABEL_19:
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
}

NSDictionary *__cdecl sub_10007447C(id a1, id a2)
{
  CFDictionaryRef v2 = sub_100012CEC((uint64_t)a2);
  return (NSDictionary *)(id)CFMakeCollectable(v2);
}

uint64_t sub_100074498(uint64_t a1, int a2, int a3, int a4)
{
  CFIndex v8 = objc_autoreleasePoolPush();
  if (!a1)
  {
    uint64_t v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: manager is NULL",  "WiFiManagerFlushKnownNetworksCache",  v22,  v23);
    }
    goto LABEL_9;
  }

  if (!*(_BYTE *)(a1 + 1160)) {
    goto LABEL_10;
  }
  int v9 = *(const __CFArray **)(a1 + 232);
  if (!v9) {
    goto LABEL_10;
  }
  CFIndex Count = CFArrayGetCount(v9);
  double Current = CFAbsoluteTimeGetCurrent();
  if (!a3)
  {
    double v12 = Current - *(double *)(a1 + 240);
    if (v12 < 30.0)
    {
      uint64_t v13 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Skip this flush attempt, flush %d seconds later, networks were fetched from the plist just %f seconds ago",  "WiFiManagerFlushKnownNetworksCache",  30,  *(void *)&v12);
      }
LABEL_9:
      objc_autoreleasePoolPop(v13);
LABEL_10:
      uint64_t v14 = 0LL;
      goto LABEL_23;
    }
  }

  char v15 = sub_10003A46C(*(const __CFArray **)(a1 + 232), a2);
  if (!v15) {
    goto LABEL_10;
  }
  char v16 = v15;
  uint64_t v14 = sub_10006D08C((void *)a1, @"List of known networks", v15, a4);
  unint64_t v17 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    uint64_t v18 = "Successfully flushed";
    if (!(_DWORD)v14) {
      uint64_t v18 = "Failed to flush";
    }
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: %s %ld known networks to the plist",  "WiFiManagerFlushKnownNetworksCache",  v18,  Count);
  }

  objc_autoreleasePoolPop(v17);
  if (!Count)
  {
    uint64_t v19 = *(const void **)(a1 + 232);
    if (v19)
    {
      CFRelease(v19);
      *(void *)(a1 + 232) = 0LL;
    }

    char v20 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Cleared known networks cache",  "WiFiManagerFlushKnownNetworksCache");
    }
    objc_autoreleasePoolPop(v20);
  }

  CFRelease(v16);
LABEL_23:
  objc_autoreleasePoolPop(v8);
  return v14;
}

void sub_100074694(uint64_t a1)
{
}

void sub_1000746CC(uint64_t a1, const void *a2, unsigned int a3)
{
  __int128 values = 0LL;
  if (!a2)
  {
    uint64_t v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: network is null",  "__WiFiManagerDispatchClientsNetworksChangedEvent");
    }
    goto LABEL_27;
  }

  __int128 values = sub_100012CEC((uint64_t)a2);
  if (!values)
  {
    uint64_t v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: network attributes is null",  "__WiFiManagerDispatchClientsNetworksChangedEvent");
    }
    goto LABEL_27;
  }

  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    uint64_t v13 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: failed to create dictionary",  "__WiFiManagerDispatchClientsNetworksChangedEvent");
    }
LABEL_27:
    objc_autoreleasePoolPop(v13);
    uint64_t v7 = 0LL;
    goto LABEL_13;
  }

  uint64_t v7 = Mutable;
  if (a3 > 2 || (CFIndex v8 = *off_1001E4558[a3]) == 0LL)
  {
    double v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: failed to create changeTypeKey",  "__WiFiManagerDispatchClientsNetworksChangedEvent");
    }
    goto LABEL_12;
  }

  CFArrayRef v9 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1LL, &kCFTypeArrayCallBacks);
  if (!v9)
  {
    double v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: failed to create changes array",  "__WiFiManagerDispatchClientsNetworksChangedEvent");
    }
LABEL_12:
    objc_autoreleasePoolPop(v12);
LABEL_13:
    CFArrayRef v10 = 0LL;
    goto LABEL_14;
  }

  CFArrayRef v10 = v9;
  CFDictionarySetValue(v7, v8, v9);
  CFIndex v11 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: type %@ network %@", "__WiFiManagerDispatchClientsNetworksChangedEvent", v8, sub_100095BC8(a2) message];
  }
  objc_autoreleasePoolPop(v11);
  uint64_t context = v7;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_10008E388, &context);
LABEL_14:
  if (values)
  {
    CFRelease(values);
    __int128 values = 0LL;
  }

  if (v10) {
    CFRelease(v10);
  }
  if (v7) {
    CFRelease(v7);
  }
}

void sub_100074948(void *a1, const void *a2)
{
  if (a1)
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    if (a2)
    {
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: ssid: %@", "WiFiManagerRemoveNetworkNameFromUserNotificationBlacklist", a2 message];
      }
      objc_autoreleasePoolPop(v4);
      uint64_t v5 = sub_100082D40(a1, 0);
      if (v5)
      {
        BOOL v6 = v5;
        if (CFDictionaryContainsKey(v5, a2))
        {
          CFIndex Count = CFDictionaryGetCount(v6);
          MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, Count, v6);
          CFDictionaryRemoveValue(MutableCopy, a2);
          -[NSUserDefaults setObject:forKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "setObject:forKey:",  MutableCopy,  @"UserNotificationBlacklist");
          sub_100080AFC((uint64_t)a1, MutableCopy);
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
        }

        CFRelease(v6);
      }
    }

    else
    {
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: ssid is null",  "WiFiManagerRemoveNetworkNameFromUserNotificationBlacklist");
      }
      objc_autoreleasePoolPop(v4);
    }
  }

uint64_t sub_100074A94( uint64_t a1, uint64_t a2, const void *a3, const __CFDictionary *a4, void (*a5)(uint64_t, const void *, uint64_t, uint64_t), uint64_t a6)
{
  CFArrayRef v10 = objc_autoreleasePoolPush();
  uint64_t v109 = 0LL;
  CFTypeRef v110 = 0LL;
  CFDataRef v108 = 0LL;
  if (a1)
  {
    uint64_t v99 = a2;
    if (a4)
    {
      if (sub_1000759EC(a1))
      {
        unint64_t v92 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: restriction policy is active",  "WiFiManagerAddNetworkAsync");
        }
        uint64_t v59 = 5LL;
        goto LABEL_165;
      }

      CFPropertyListRef Value = (const __CFString *)CFDictionaryGetValue(a4, @"BundleIdentifier");
      if (Value)
      {
        double v12 = Value;
        CFDictionaryRef theDict = a4;
        uint64_t v104 = a1;
        CFStringRef v101 = v10;
        uint64_t v13 = objc_alloc(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v14 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"WiFiKnownNetworkAdded");
        char v15 = +[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", v12);
        char v16 = +[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", sub_10003BEDC(a2));
        unint64_t v17 = +[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", sub_100075A64((uint64_t)v12));
        CFNumberRef v105 = a3;
        uint64_t v18 = +[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", sub_100075B34((uint64_t)v12));
        uint64_t v19 = +[NSString stringWithString:]( &OBJC_CLASS___NSString,  "stringWithString:",  @"kWiFiAddNetworkOriginatorUser");
        char v20 = +[NSString stringWithString:]( &OBJC_CLASS___NSString,  "stringWithString:",  @"kWiFiManagerAddNetworkResultSuccess");
        char v21 = sub_100098EA8((uint64_t)v105);
        uint64_t v22 = @"kWiFiNetworkAuthFlagsWPA";
        uint64_t v23 = @"kWiFiNetworkAuthFlagsWEP";
        if ((v21 & 1) == 0) {
          uint64_t v23 = @"kWiFiNetworkAuthFlagsOpen";
        }
        if ((v21 & 2) == 0) {
          uint64_t v22 = v23;
        }
        if ((v21 & 8) != 0) {
          CFDateRef v24 = @"kWiFiNetworkAuthFlagsEAP";
        }
        else {
          CFDateRef v24 = v22;
        }
        CFRange v96 = v18;
        a3 = v105;
        CFDateRef v25 = -[NSMutableDictionary initWithObjectsAndKeys:]( v13,  "initWithObjectsAndKeys:",  v14,  @"Operation",  v15,  @"AppBundleID",  v16,  @"Process",  v17,  @"BTTCCState",  v96,  @"LocalNetworkTCCState",  v19,  @"AddReason",  v20,  @"Result",  +[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", v24),  @"SecurityType",  0LL);
        uint64_t v26 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: Request to add network with content: %@", "WiFiManagerAddNetworkAsync", v105 message];
        }
        objc_autoreleasePoolPop(v26);
        if (sub_100095B88((BOOL)v105))
        {
          CFMutableDictionaryRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
          if (Mutable)
          {
            int v28 = Mutable;
            sub_10009CF6C((uint64_t)v105, Mutable);
            int v29 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "%s: HS20 Account Info:%@", "WiFiManagerAddNetworkAsync", v28 message];
            }
            objc_autoreleasePoolPop(v29);
            CFRelease(v28);
          }

          else
          {
            BOOL v30 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Could not allocate buffer for HS 2.0 info",  "WiFiManagerAddNetworkAsync");
            }
            objc_autoreleasePoolPop(v30);
          }
        }

        if (CFDictionaryContainsKey(theDict, @"NetworkOriginator"))
        {
          __int16 v31 = CFDictionaryGetValue(theDict, @"NetworkOriginator");
          CFTypeID v32 = CFGetTypeID(v31);
          if (v32 == CFNumberGetTypeID())
          {
            LODWORD(valuePtr) = -1431655766;
            CFNumberGetValue((CFNumberRef)v31, kCFNumberIntType, &valuePtr);
            BOOL v33 = valuePtr == 1;
            if ((_DWORD)valuePtr == 6) {
              BOOL v33 = 1;
            }
            unsigned int v102 = v33;
            if ((_DWORD)valuePtr == 6 || (_DWORD)valuePtr == 1)
            {
              uint64_t valuePtr = 0LL;
              id v34 = [[LSApplicationRecord alloc] initWithBundleIdentifier:v12 allowPlaceholder:1 error:&valuePtr];
              __int128 v35 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:3, "%s: error %@", "WiFiManagerAddNetworkAsync", valuePtr message];
              }
              objc_autoreleasePoolPop(v35);
              if (!v34)
              {
                uint64_t valuePtr = 0LL;
                id v34 = [[LSApplicationRecord alloc] initWithBundleIdentifier:v12 allowPlaceholder:1 error:&valuePtr];
                __int128 v36 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  [(id)qword_100219F60 WFLog:3, "%s: error %@", "WiFiManagerAddNetworkAsync", valuePtr message];
                }
                objc_autoreleasePoolPop(v36);
                if (!v34)
                {
                  __int16 v90 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    [(id)qword_100219F60 WFLog:3, "%@ bundle identifier is not installed", v12 message];
                  }
                  objc_autoreleasePoolPop(v90);
                  uint64_t v57 = 0LL;
                  id v37 = 0LL;
                  BOOL v58 = 0LL;
                  uint64_t v59 = 4LL;
                  if (!v25) {
                    goto LABEL_123;
                  }
                  goto LABEL_121;
                }
              }

              id v37 = objc_msgSend(objc_msgSend(v34, "localizedName"), "copy");
              sub_10009582C((uint64_t)v105, @"OriginatingApp", v37);

              char v38 = 1;
LABEL_40:
              CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 1456));
              if (Count >= 1)
              {
                CFIndex v41 = Count;
                CFIndex v42 = 0LL;
                while (1)
                {
                  unsigned int v43 = (const __CFString *)objc_msgSend( (id)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1456), v42),  "bundleId");
                  if (CFStringCompare(v12, v43, 0LL) == kCFCompareEqualTo) {
                    break;
                  }
                  if (v41 == ++v42) {
                    goto LABEL_44;
                  }
                }

                int v60 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  [(id)qword_100219F60 WFLog:3, "Add network async request is already queued for bundleId %@", v12 message];
                }
                objc_autoreleasePoolPop(v60);
                uint64_t v57 = 0LL;
                BOOL v58 = 0LL;
                uint64_t v59 = 3LL;
                if (!v25)
                {
LABEL_123:
                  CFArrayRef v10 = v101;
                  if ((v57 & 1) != 0) {
                    goto LABEL_128;
                  }
                  goto LABEL_124;
                }

LABEL_121:
                if (&_AnalyticsSendEventLazy)
                {
                  -[NSMutableDictionary setObject:forKey:]( v25,  "setObject:forKey:",  +[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", off_1001E4570[v102]),  @"AddReason");
                  -[NSMutableDictionary setObject:forKey:]( v25,  "setObject:forKey:",  +[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", sub_100075CE4(v59)),  @"Result");
                  NSLog(@"CoreAnalytics metricsDict %@", v25);
                  v106[0] = _NSConcreteStackBlock;
                  v106[1] = 3221225472LL;
                  v106[2] = sub_100076338;
                  v106[3] = &unk_1001E4278;
                  v106[4] = v25;
                  AnalyticsSendEventLazy(@"com.apple.wifi.knownnetwork", v106);
                }

                goto LABEL_123;
              }

LABEL_44:
              BOOL v44 = sub_100095318((BOOL)v105);
              if (v44) {
                char v45 = v38;
              }
              else {
                char v45 = 1;
              }
              -[NSMutableDictionary setObject:forKey:]( v25,  "setObject:forKey:",  +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v44),  @"Hotspot20");
              int v46 = objc_autoreleasePoolPush();
              double v47 = (void *)qword_100219F60;
              if ((v45 & 1) == 0)
              {
                if (qword_100219F60) {
                  objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s HS20 network must use originator type kWiFiAddNetworkOriginator3rdParty",  "WiFiManagerAddNetworkAsync");
                }
                objc_autoreleasePoolPop(v46);
                uint64_t v57 = 0LL;
                BOOL v58 = 0LL;
                goto LABEL_66;
              }

              if (qword_100219F60)
              {
                int v48 = sub_100095BC8(v105);
                CFAbsoluteTime v49 = @"3rd Party";
                if (!v102) {
                  CFAbsoluteTime v49 = @"user";
                }
                [v47 WFLog:3, "%s: adding ssid='%@' bundleId='%@' appName='%@' originator='%@' HS20=%d", "WiFiManagerAddNetworkAsync", v48, v12, v37, v49, v44 message];
              }

              objc_autoreleasePoolPop(v46);
              BOOL v97 = CFDictionaryContainsKey(theDict, @"AddNetworkUseSSIDPrefix") != 0;
              if (v44)
              {
                double v50 = *(const __CFArray **)(a1 + 224);
                if (v50)
                {
                  CFIndex v51 = CFArrayGetCount(v50);
                  if (v51 >= 1)
                  {
                    CFIndex v52 = v51;
                    CFIndex v53 = 0LL;
                    while (1)
                    {
                      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 224), v53);
                      uint64_t v55 = sub_10009ECAC((uint64_t)ValueAtIndex);
                      if (v55)
                      {
                      }

                      if (v52 == ++v53) {
                        goto LABEL_60;
                      }
                    }

                    CFIndex v70 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 224), v53);
                    if (v70)
                    {
                      int v71 = v70;
                      unsigned int v72 = objc_autoreleasePoolPush();
                      if (qword_100219F60) {
                        [(id)qword_100219F60 WFLog:3, "%s: matching HS20 network found at index %ld: %@", "__WiFiManagerCopyExistingHS20Network", v53, v71 message];
                      }
                      objc_autoreleasePoolPop(v72);
                      CFTypeRef v110 = CFRetain(v71);
                      a3 = v105;
                      if (!v110) {
                        goto LABEL_92;
                      }
                      goto LABEL_73;
                    }
                  }

  if (cf) {
    CFRelease(cf);
  }
  CFRelease(*(CFTypeRef *)(v44 + 32));
}

          objc_msgSend(v27, "addObject:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 8));
          int v28 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
          [v28 setObject:&__kCFBooleanTrue forKey:@"MFP_CAPABLE"];
          if ((v12 & 0x10) == 0) {
            [v28 setObject:&__kCFBooleanTrue forKey:@"MFP_REQUIRED"];
          }
          [v25 setObject:v28 forKey:@"IE_KEY_RSN_CAPS"];
          goto LABEL_47;
        }

        goto LABEL_19;
      }
    }

    else
    {
      objc_msgSend(v9, "setObject:forKeyedSubscript:", objc_msgSend(a1, "SSID"), @"SSID");
      objc_msgSend(v9, "setObject:forKeyedSubscript:", objc_msgSend(a1, "networkName"), @"SSID_STR");
      uint64_t v13 = (unsigned __int16)[a1 supportedSecurityTypes];
      double v12 = v13;
      if ((v13 & 2) == 0)
      {
        if ((v13 & 1) == 0) {
          goto LABEL_31;
        }
        [v9 setObject:&__kCFBooleanTrue forKeyedSubscript:@"WEP"];
LABEL_19:
        uint64_t v14 = (unint64_t)[a1 WEPSubtype] - 1;
        if (v14 > 3) {
          char v15 = 0LL;
        }
        else {
          char v15 = dword_10017F9C0[v14];
        }
        uint64_t v18 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v15);
        uint64_t v19 = @"WEP_AUTH_Flags";
LABEL_30:
        [v9 setObject:v18 forKeyedSubscript:v19];
        goto LABEL_31;
      }
    }

    char v16 = [a1 WAPISubtype];
    unint64_t v17 = (NSNumber *)&off_1002048D8;
    if (v16 != (id)1) {
      unint64_t v17 = 0LL;
    }
    if (v16 == (id)2) {
      uint64_t v18 = (NSNumber *)&off_1002048C0;
    }
    else {
      uint64_t v18 = v17;
    }
    uint64_t v19 = @"WAPI";
    goto LABEL_30;
  }

                            BOOL v30 = 0x7FFFFFFFFFFFFFFFLL;
                            goto LABEL_45;
                          }

                          int v28 = 0x7FFFFFFFFFFFFFFFLL;
                        }

                        else
                        {
                          int v28 = 0x7FFFFFFFFFFFFFFFLL;
                          CFDateRef v24 = 0x7FFFFFFFFFFFFFFFLL;
                        }
                      }

                      else
                      {
                        int v28 = 0x7FFFFFFFFFFFFFFFLL;
                        CFDateRef v24 = 0x7FFFFFFFFFFFFFFFLL;
                        uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
                      }

                      uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
                      goto LABEL_44;
                    }

                    int v28 = 0x7FFFFFFFFFFFFFFFLL;
                    CFDateRef v24 = 0x7FFFFFFFFFFFFFFFLL;
                    __int128 v35 = 0x7FFFFFFFFFFFFFFFLL;
                  }

                  else
                  {
                    int v28 = 0x7FFFFFFFFFFFFFFFLL;
                    CFDateRef v24 = 0x7FFFFFFFFFFFFFFFLL;
                    __int128 v35 = 0x7FFFFFFFFFFFFFFFLL;
                    uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
                  }

                  uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
                  uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
                  BOOL v30 = 0x7FFFFFFFFFFFFFFFLL;
                  id v37 = v46;
                  id v34 = v43;
                  BOOL v33 = v44;
                  char v38 = v45;
                  __int128 v36 = v42;
LABEL_33:
                  LOBYTE(v40) = *(_BYTE *)(a3 + 6994) != 0;
                  [*(id *)(a3 + 7320) updateWithBspOverflowed:v12 IsBSPActive:1 BspTimeToTST:v37 BspSampleDurationMS:v38 IsScanActiveBSP:v33 IsP2PActiveBSP:v34  BspTriggerCount:v36 BspMutePercentage:v19 BspMaxMuteMS:v35 BspAvgMuteMS:v22 BspErrorPercentage:v24 BspTimeOutPercentageO fTriggers:v26 BspRejectOrFailPercentageOfTriggers:v28 bspMaxConsecutiveFails:v30 supportsLinkRecommendation:v40 forInterface:a2];
                  goto LABEL_34;
                }

                int v28 = 0x7FFFFFFFFFFFFFFFLL;
                CFDateRef v24 = 0x7FFFFFFFFFFFFFFFLL;
                __int128 v35 = 0x7FFFFFFFFFFFFFFFLL;
                __int128 v36 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
                BOOL v30 = 0x7FFFFFFFFFFFFFFFLL;
                id v37 = v46;
                id v34 = v43;
                BOOL v33 = v44;
              }

              else
              {
                id v34 = 0LL;
                int v28 = 0x7FFFFFFFFFFFFFFFLL;
                CFDateRef v24 = 0x7FFFFFFFFFFFFFFFLL;
                __int128 v35 = 0x7FFFFFFFFFFFFFFFLL;
                __int128 v36 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
                uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
                BOOL v30 = 0x7FFFFFFFFFFFFFFFLL;
                id v37 = v46;
                BOOL v33 = v44;
              }
            }

            else
            {
              BOOL v33 = 0LL;
              id v34 = 0LL;
              int v28 = 0x7FFFFFFFFFFFFFFFLL;
              CFDateRef v24 = 0x7FFFFFFFFFFFFFFFLL;
              __int128 v35 = 0x7FFFFFFFFFFFFFFFLL;
              __int128 v36 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
              BOOL v30 = 0x7FFFFFFFFFFFFFFFLL;
              id v37 = v46;
            }

            char v38 = v45;
            goto LABEL_33;
          }
        }

        else
        {
          double v12 = 1LL;
        }

        BOOL v33 = 0LL;
        id v34 = 0LL;
        int v28 = 0x7FFFFFFFFFFFFFFFLL;
        CFDateRef v24 = 0x7FFFFFFFFFFFFFFFLL;
        __int128 v35 = 0x7FFFFFFFFFFFFFFFLL;
        __int128 v36 = 0x7FFFFFFFFFFFFFFFLL;
        id v37 = 0x7FFFFFFFFFFFFFFFLL;
        char v38 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
        BOOL v30 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_33;
      }
    }
  }

  _Block_object_dispose(&v32, 8);
}

LABEL_93:
              uint64_t v73 = sub_10000B77C();
              uint64_t v74 = v73;
              switch(v73)
              {
                case 1LL:
                  uint64_t v75 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    [(id)qword_100219F60 WFLog:3, "%s: '%@' is authorized to join '%@'", "WiFiManagerAddNetworkAsync", v12, v105 message];
                  }
                  objc_autoreleasePoolPop(v75);
                  if (CFDictionaryGetValue(theDict, @"isAccessory"))
                  {
                    unsigned int v102 = 6;
LABEL_109:
                    a3 = v105;
LABEL_110:
                    -[NSMutableDictionary setObject:forKey:]( v25,  "setObject:forKey:",  +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v97),  @"UsedPrefix");
                    if (v67 && v65)
                    {
                      sub_10009EC30((uint64_t)a3, v67);
                    }

                    else
                    {
                      sub_10009EC30((uint64_t)a3, v12);
                      sub_10009ED2C((uint64_t)a3, v102);
                    }

                    int v79 = sub_100073214((const __CFArray *)a1, a3);
                    char v80 = v69 ^ 1;
                    if (!v79) {
                      char v80 = 1;
                    }
                    if ((v80 & 1) == 0)
                    {
                      int v81 = objc_autoreleasePoolPush();
                      if (qword_100219F60) {
                        [(id)qword_100219F60 WFLog:3, "%s: Already owned and associated to %@", "WiFiManagerAddNetworkAsync", sub_100095BC8(a3) message];
                      }
                      objc_autoreleasePoolPop(v81);
                      uint64_t v57 = 0LL;
                      BOOL v58 = 0LL;
                      uint64_t v59 = 6LL;
                      break;
                    }

                    int v83 = CFDictionaryContainsKey(theDict, @"DisassociateOnSessionEnd");
                    if (v83)
                    {
                      CFBooleanRef v84 = objc_autoreleasePoolPush();
                      if (qword_100219F60) {
                        [(id)qword_100219F60 WFLog:3, "%s: Session based add requested by %@", "WiFiManagerAddNetworkAsync", v12 message];
                      }
                      objc_autoreleasePoolPop(v84);
                    }

                    -[NSMutableDictionary setObject:forKey:]( v25,  "setObject:forKey:",  +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v83 != 0),  @"SessionBased");
                    if (v109)
                    {
                      sub_1000A5964((uint64_t)a3, v109);
                      CFBooleanRef v85 = objc_autoreleasePoolPush();
                      if (qword_100219F60) {
                        [(id)qword_100219F60 WFLog:3, "%s: setting accessory display friendly name='%@' for %@", "WiFiManagerAddNetworkAsync", v109, sub_100095BC8(a3) message];
                      }
                      objc_autoreleasePoolPop(v85);
                    }

                    if (v108)
                    {
                      sub_1000A5A60((uint64_t)a3, v108);
                      int v86 = objc_autoreleasePoolPush();
                      if (qword_100219F60) {
                        [(id)qword_100219F60 WFLog:3, "%s: setting accessory identifier='%@' for %@", "WiFiManagerAddNetworkAsync", v108, sub_100095BC8(a3) message];
                      }
                      objc_autoreleasePoolPop(v86);
                    }

                    int v87 = *(_DWORD *)(a1 + 324);
                    int v88 = *(unsigned __int8 *)(v104 + 129);
                    int v89 = objc_autoreleasePoolPush();
                    if (qword_100219F60) {
                      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Add network async- prompting for user consent",  "WiFiManagerAddNetworkAsync");
                    }
                    objc_autoreleasePoolPop(v89);
                    LOBYTE(v95) = v74 == 1;
                    BYTE2(v94) = v97;
                    BYTE1(v94) = v83 != 0;
                    LOBYTE(v94) = v88 != 0;
                    BOOL v58 = -[WiFiAddNetworkRequest initWithClient:network:bundleId:localizedAppName:originator:poweredOff:wapi:sessionBased:useSSIDPrefix:callback:context:bypassPrompt:]( objc_alloc(&OBJC_CLASS___WiFiAddNetworkRequest),  "initWithClient:network:bundleId:localizedAppName:originator:poweredOff:wapi:sessionBased:use SSIDPrefix:callback:context:bypassPrompt:",  v99,  a3,  v12,  v37,  v102,  v87 == 0,  v94,  a5,  a6,  v95);
                    if (v58)
                    {
                      a1 = v104;
                      CFArrayAppendValue(*(CFMutableArrayRef *)(v104 + 1456), v58);
                      sub_100075ED4(v104);
                      CFDictionaryContainsKey(theDict, @"DisassociateOnSessionEnd");
                      uint64_t v59 = 0LL;
                      uint64_t v57 = 1LL;
                      if (!v25) {
                        goto LABEL_123;
                      }
                      goto LABEL_121;
                    }

                    uint64_t v57 = 0LL;
LABEL_66:
                    uint64_t v59 = 4LL;
                    break;
                  }

                  CFIndex v77 = objc_autoreleasePoolPush();
                  a3 = v105;
                  if (qword_100219F60) {
                    [(id)qword_100219F60 WFLog:4, "%s: '%@' did not use joinAccessory API with authorized accessory", "WiFiManagerAddNetworkAsync", v12 message];
                  }
                  objc_autoreleasePoolPop(v77);
                  uint64_t v57 = 0LL;
                  BOOL v58 = 0LL;
                  uint64_t v59 = 11LL;
                  break;
                case 3LL:
                  uint64_t v78 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    [(id)qword_100219F60 WFLog:3, "%s: '%@' has DA record but did not declare WiFi support", "WiFiManagerAddNetworkAsync", v12 message];
                  }
                  objc_autoreleasePoolPop(v78);
                  goto LABEL_109;
                case 2LL:
                  id v76 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    [(id)qword_100219F60 WFLog:3, "%s: '%@' is not authorized to join '%@'", "WiFiManagerAddNetworkAsync", v12, a3 message];
                  }
                  objc_autoreleasePoolPop(v76);
                  uint64_t v57 = 0LL;
                  BOOL v58 = 0LL;
                  uint64_t v59 = 10LL;
                  break;
                default:
                  goto LABEL_110;
              }

              a1 = v104;
              if (!v25) {
                goto LABEL_123;
              }
              goto LABEL_121;
            }

            char v38 = 0;
LABEL_39:
            id v37 = 0LL;
            goto LABEL_40;
          }

          unsigned int v39 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: wrong input type specified for originator",  "WiFiManagerAddNetworkAsync");
          }
          objc_autoreleasePoolPop(v39);
        }

        char v38 = 0;
        unsigned int v102 = 0;
        goto LABEL_39;
      }

      unint64_t v92 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        uint64_t v59 = 4LL;
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s missing bundle identifier from request",  "WiFiManagerAddNetworkAsync");
LABEL_165:
        objc_autoreleasePoolPop(v92);
        uint64_t v57 = 0LL;
        id v37 = 0LL;
        BOOL v58 = 0LL;
        CFDateRef v25 = 0LL;
LABEL_124:
        if (v99) {
          sub_10003DBC8(v99, a1, (uint64_t)a3, v59);
        }
        if (a5) {
          a5(a1, a3, v59, a6);
        }
        goto LABEL_128;
      }
    }

    else
    {
      unint64_t v92 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: options is NULL", "WiFiManagerAddNetworkAsync");
      }
    }

    uint64_t v59 = 4LL;
    goto LABEL_165;
  }

  CFArrayRef v91 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: manager is NULL", "WiFiManagerAddNetworkAsync");
  }
  objc_autoreleasePoolPop(v91);
  uint64_t v57 = 0LL;
  id v37 = 0LL;
  BOOL v58 = 0LL;
  CFDateRef v25 = 0LL;
LABEL_128:
  if (v110)
  {
    CFRelease(v110);
    CFTypeRef v110 = 0LL;
  }

  if (v58) {
    CFRelease(v58);
  }

  objc_autoreleasePoolPop(v10);
  return v57;
}

CFArrayRef sub_1000759EC(uint64_t a1)
{
  uint64_t result = *(const __CFArray **)(a1 + 1376);
  if (result)
  {
    uint64_t result = (const __CFArray *)CFArrayGetCount(result);
    if (result)
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 1376));
      if (Count < 1)
      {
        return 0LL;
      }

      else
      {
        CFIndex v4 = Count;
        CFIndex v5 = 0LL;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1376), v5);
          if (ValueAtIndex)
          {
            uint64_t result = (const __CFArray *)sub_100012C04((uint64_t)ValueAtIndex);
            if ((_DWORD)result == 1) {
              break;
            }
          }

          if (v4 == ++v5) {
            return 0LL;
          }
        }
      }
    }
  }

  return result;
}

CFStringRef sub_100075A64(uint64_t a1)
{
  CFDictionaryRef v2 = objc_autoreleasePoolPush();
  uint64_t v3 = (const void *)TCCAccessCopyBundleIdentifiersForService(kTCCServiceBluetoothAlways);
  CFIndex v4 = (id)CFMakeCollectable(v3);
  CFIndex v5 = (const void *)TCCAccessCopyBundleIdentifiersDisabledForService(kTCCServiceBluetoothAlways);
  BOOL v6 = (id)CFMakeCollectable(v5);
  if ([v4 containsObject:a1])
  {
    uint64_t v7 = @"BluetoothTCCEnabled";
    NSLog(@"%s bundleId present in fAllowedAppBundles %@", "__WiFiManagerBluetoothTCCState", a1);
  }

  else if ([v6 containsObject:a1])
  {
    uint64_t v7 = @"BluetoothTCCDisabled";
    NSLog(@"%s bundleId present in fDisallowedAppBundles %@", "__WiFiManagerBluetoothTCCState", a1);
  }

  else
  {
    uint64_t v7 = @"BluetoothTCCUnknown";
  }

  objc_autoreleasePoolPop(v2);
  return v7;
}

CFStringRef sub_100075B34(uint64_t a1)
{
  if (!objc_opt_class(&OBJC_CLASS___NEPathController)) {
    return @"LocalNetworkTCCUnknown";
  }
  id v2 = +[NEPathController copyAggregatePathRules](&OBJC_CLASS___NEPathController, "copyAggregatePathRules");
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    id v4 = v3;
    CFIndex v5 = @"LocalNetworkTCCUnknown";
    uint64_t v6 = *(void *)v12;
    do
    {
      for (CFIndex i = 0LL; i != v4; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v2);
        }
        CFIndex v8 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
        if (objc_msgSend(objc_msgSend(v8, "matchSigningIdentifier"), "isEqualToString:", a1)
          && [v8 multicastPreferenceSet])
        {
          unsigned int v9 = [v8 denyMulticast];
          NSLog(@"%s bundleId has multicastAllow = %d set", "__WiFiManagerLocalNetworkTCCState", v9 ^ 1);
          if (v9) {
            CFIndex v5 = @"LocalNetworkTCCDisabled";
          }
          else {
            CFIndex v5 = @"LocalNetworkTCCEnabled";
          }
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v4);
  }

  else
  {
    CFIndex v5 = @"LocalNetworkTCCUnknown";
  }

  return v5;
}

__CFString *sub_100075CC4(unsigned int a1)
{
  if (a1 > 6) {
    return 0LL;
  }
  else {
    return off_1001E4570[a1];
  }
}

CFStringRef sub_100075CE4(int a1)
{
  switch(a1)
  {
    case 0:
      uint64_t result = @"kWiFiManagerAddNetworkResultSuccess";
      break;
    case 1:
      uint64_t result = @"kWiFiManagerAddNetworkResultUserCancelled";
      break;
    case 2:
      uint64_t result = @"kWiFiManagerAddNetworkResultSystemCancelled";
      break;
    case 3:
      uint64_t result = @"kWiFiManagerAddNetworkResultRequestPending";
      break;
    case 4:
      uint64_t result = @"kWiFiManagerAddNetworkResultInvalidBundleId";
      break;
    case 5:
      uint64_t result = @"kWiFiManagerAddNetworkResultExistingNetwork";
      break;
    case 6:
      uint64_t result = @"kWiFiManagerAddNetworkResultAlreadyAssociated";
      break;
    case 7:
      uint64_t result = @"kWiFiManagerAddNetworkResultAssociationFailed";
      break;
    case 8:
      uint64_t result = @"kWiFiManagerAddNetworkResultApplicationIsNotInForeground";
      break;
    case 9:
      uint64_t result = @"kWiFiManagerAddNetworkResultNetworkNotFound";
      break;
    case 10:
      uint64_t result = @"kWiFiManagerAddNetworkResultAccessoryNotAuthorized";
      break;
    case 11:
      uint64_t result = @"kWiFiManagerAddNetworkResultAccessoryNetwork";
      break;
    default:
      if (a1 == 0x7FFFFFFF) {
        uint64_t result = @"kWiFiManagerAddNetworkResultUnknownError";
      }
      else {
        uint64_t result = 0LL;
      }
      break;
  }

  return result;
}

CFStringRef sub_100075DB0(uint64_t a1)
{
  char v1 = sub_100098EA8(a1);
  id v2 = @"kWiFiNetworkAuthFlagsWPA";
  id v3 = @"kWiFiNetworkAuthFlagsWEP";
  if ((v1 & 1) == 0) {
    id v3 = @"kWiFiNetworkAuthFlagsOpen";
  }
  if ((v1 & 2) == 0) {
    id v2 = v3;
  }
  if ((v1 & 8) != 0) {
    return @"kWiFiNetworkAuthFlagsEAP";
  }
  else {
    return v2;
  }
}

uint64_t sub_100075E00(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  CFIndex idx = 0xAAAAAAAAAAAAAAAALL;
  sub_10008E284(*(CFArrayRef *)(a1 + 224), a2, &idx);
  if (idx == -1) {
    return 0LL;
  }
  uint64_t v6 = objc_autoreleasePoolPush();
  uint64_t v7 = (void *)qword_100219F60;
  if (qword_100219F60)
  {
    CFIndex v8 = sub_100095BC8(a2);
    [v7 WFLog:3, "%s: Network with the same SSID %@ found at index %ld", "__WiFiManagerCopyExistingNetwork", v8, idx message];
  }

  objc_autoreleasePoolPop(v6);
  uint64_t result = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 224), idx);
  if (result)
  {
    if (a3) {
      *a3 = CFRetain((CFTypeRef)result);
    }
    return 1LL;
  }

  return result;
}

void sub_100075ED4(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  SInt32 error = -1431655766;
  if (*(void *)(a1 + 1416))
  {
    char v20 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Add network request is in progress, cancelling dispatch");
    }
    objc_autoreleasePoolPop(v20);
  }

  else
  {
    id v3 = *(const __CFArray **)(a1 + 1456);
    if (v3)
    {
      if (CFArrayGetCount(v3))
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1456), 0LL);
        if (ValueAtIndex)
        {
          CFIndex v5 = ValueAtIndex;
          if ([ValueAtIndex usingPrefix])
          {
            uint64_t v6 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: add network request using prefix, checking if matching network is nearby",  "__WiFiManagerDispatchNextAddNetworkAsyncRequest");
            }
            objc_autoreleasePoolPop(v6);
            blocCFIndex k = (void **)a1;
            unint64_t v25 = 0xAAAAAAAA00000069LL;
            uint64_t v26 = (void (*)(uint64_t))[v5 network];
            uint64_t v27 = 0LL;
LABEL_25:
            CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &block);
            goto LABEL_26;
          }

          if ([v5 sessionBased] && *(void *)(a1 + 1384))
          {
            uint64_t v7 = objc_autoreleasePoolPush();
            id v8 = objc_msgSend( (id)sub_100095BC8(objc_msgSend(v5, "network")),  "stringByAppendingString:",  objc_msgSend(v5, "bundleId"));
            id v9 = [*(id *)(a1 + 1384) objectForKey:v8];
            CFArrayRef v10 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "%s: sessionKey = %@, object = %@", "__WiFiManagerDispatchNextAddNetworkAsyncRequest", v8, v9 message];
            }
            objc_autoreleasePoolPop(v10);
            if (v9)
            {
              objc_msgSend(objc_msgSend(v9, "objectForKeyedSubscript:", @"timestamp"), "timeIntervalSinceNow");
              LODWORD(v9) = v11 > -21600.0;
            }

            objc_autoreleasePoolPop(v7);
          }

          else
          {
            LODWORD(v9) = 0;
          }

          if ([v5 bypassPrompt])
          {
            __int128 v12 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Don't show popup as user has already given consent for this accessory network.",  "__WiFiManagerDispatchNextAddNetworkAsyncRequest");
            }
            objc_autoreleasePoolPop(v12);
            __int128 v13 = *(dispatch_queue_s **)(qword_100219908 + 32);
            blocCFIndex k = _NSConcreteStackBlock;
            unint64_t v25 = 3221225472LL;
            uint64_t v26 = sub_10008E57C;
            uint64_t v27 = &unk_1001E2C30;
            uint64_t v28 = 0LL;
            uint64_t v29 = qword_100219908;
            dispatch_async(v13, &block);
          }

          else
          {
            __int128 v14 = objc_autoreleasePoolPush();
            if ((_DWORD)v9)
            {
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Don't show popup as user has already given consent for this session based network.",  "__WiFiManagerDispatchNextAddNetworkAsyncRequest");
              }
              objc_autoreleasePoolPop(v14);
              blocCFIndex k = (void **)a1;
              unint64_t v25 = 0xAAAAAAAA00000045LL;
              uint64_t v26 = (void (*)(uint64_t))[v5 network];
              uint64_t v27 = 0LL;
              sub_10008E3EC((void *)a1, [v5 network]);
              goto LABEL_25;
            }

            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Show user consent popup",  "__WiFiManagerDispatchNextAddNetworkAsyncRequest");
            }
            objc_autoreleasePoolPop(v14);
            char v15 = CFUserNotificationCreate( kCFAllocatorDefault,  0.0,  0,  &error,  (CFDictionaryRef)[v5 alertDictionary]);
            if (v15)
            {
              char v16 = v15;
              CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource( kCFAllocatorDefault,  v15,  (CFUserNotificationCallBack)sub_10008E390,  0LL);
              if (RunLoopSource)
              {
                uint64_t v18 = RunLoopSource;
                *(void *)(a1 + 140_Block_object_dispose((const void *)(v1 - 48), 8) = RunLoopSource;
                *(void *)(a1 + 1416) = v16;
                Maiint n = CFRunLoopGetMain();
                CFRunLoopAddSource(Main, v18, kCFRunLoopDefaultMode);
                goto LABEL_26;
              }

              CFRelease(v16);
            }

            if ([v5 client]) {
              sub_10003DBC8((uint64_t)[v5 client], a1, (uint64_t)objc_msgSend(v5, "network"), 0x7FFFFFFF);
            }
            if ([v5 callback]) {
              ((void (*)(uint64_t, id, uint64_t, id))[v5 callback])( a1,  objc_msgSend(v5, "network"),  0x7FFFFFFFLL,  objc_msgSend(v5, "context"));
            }
            char v21 = *(const __CFArray **)(a1 + 1456);
            v30.length = CFArrayGetCount(v21);
            v30.CFIndex location = 0LL;
            CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v21, v30, v5);
            if (FirstIndexOfValue != -1) {
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 1456), FirstIndexOfValue);
            }
            sub_100075ED4(a1);
          }
        }
      }
    }
  }

uint64_t sub_100076338(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_100076340(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  CFIndex v125 = -1LL;
  if (!a1)
  {
    BOOL v103 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null manager", "WiFiManagerRemoveNetwork");
    }
    goto LABEL_190;
  }

  if (!a2)
  {
    BOOL v103 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null network", "WiFiManagerRemoveNetwork");
    }
LABEL_190:
    objc_autoreleasePoolPop(v103);
    goto LABEL_191;
  }

  BOOL v119 = sub_100095318((BOOL)a2);
  CFStringRef v118 = sub_1000951FC((uint64_t)a2, @"DomainName");
  uint64_t v7 = objc_autoreleasePoolPush();
  id v8 = (void *)qword_100219F60;
  if (qword_100219F60)
  {
    if (v119) {
      id v9 = "domain";
    }
    else {
      id v9 = "SSID";
    }
    CFArrayRef v10 = v118;
    if (!v119) {
      CFArrayRef v10 = sub_100095BC8(a2);
    }
    [v8 WFLog:3, "%s: reason %d, with %s %@", "WiFiManagerRemoveNetwork", a3, v9, v10 message];
  }

  objc_autoreleasePoolPop(v7);
  if (sub_10009E120((uint64_t)a2) != 2)
  {
LABEL_20:
    __int128 v13 = sub_10006C77C((CFArrayRef)a1);
    if (!v13)
    {
      CFDataRef v107 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: failed to get device managers",  "__WiFiManagerRemoveCarPlay");
      }
      objc_autoreleasePoolPop(v107);
      goto LABEL_30;
    }

    __int128 v14 = v13;
    char v15 = v6;
    CFIndex Count = CFArrayGetCount(v13);
    if (Count < 1) {
      goto LABEL_29;
    }
    CFIndex v17 = Count;
    CFIndex v18 = 0LL;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v14, v18);
      uint64_t v20 = sub_10003BEDC((uint64_t)ValueAtIndex);
      if (!v20) {
        goto LABEL_28;
      }
      char v21 = (const void *)sub_10004CE2C(v20);
      if (!v21) {
        goto LABEL_28;
      }
      uint64_t v22 = v21;
      uint64_t v23 = sub_1000D3348((uint64_t)ValueAtIndex, v21);
      if (!v23) {
        goto LABEL_28;
      }
      CFDateRef v24 = v23;
      if (CFEqual(a2, v23)) {
        break;
      }
      CFRelease(v24);
LABEL_28:
      if (v17 == ++v18) {
        goto LABEL_29;
      }
    }

    CFBooleanRef v85 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Current network is CarPlay. Disconnect\n",  "__WiFiManagerRemoveCarPlay");
    }
    objc_autoreleasePoolPop(v85);
    sub_1000CE074((uint64_t)ValueAtIndex, v22, 7LL, "__WiFiManagerRemoveCarPlay", 16907LL);
    CFRelease(v24);
LABEL_29:
    CFRelease(v14);
    uint64_t v6 = v15;
LABEL_30:
    int v25 = sub_100097700((uint64_t)a2);
    if ((_DWORD)a3 == 2 && v25) {
      sub_10009582C((uint64_t)a2, @"AutoHotspotDisableWiFiAutoJoinUntilUserJoin", kCFBooleanTrue);
    }
    uint64_t v26 = (const __SCPreferences *)sub_100072F14((void *)a1, @"List of known networks");
    uint64_t v27 = v26;
    if (!v26) {
      goto LABEL_120;
    }
    if (sub_10003A25C(v26))
    {
      uint64_t v115 = (void *)sub_10003AFF4((uint64_t)"WiFiManagerRemoveNetwork");
      uint64_t v28 = (const __CFArray *)sub_100063560(a1);
      uint64_t v29 = v28;
      SCPreferencesRef prefs = v27;
      if (v28)
      {
        if ((_DWORD)a3 == 4)
        {
          sub_100077EB8(v28, a2, &v125);
          CFRange v30 = sub_100095BC8(a2);
          uint64_t context = (void **)a1;
          p_uint64_t context = 0xAAAAAAAA00000051LL;
          uint64_t v128 = (uint64_t)v30;
          uint64_t v129 = 1LL;
          CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
        }

        else
        {
          sub_1000730D4(1, v28, a2, &v125, 0LL);
        }

        __int16 v31 = objc_autoreleasePoolPush();
        CFTypeID v32 = (void *)qword_100219F60;
        CFTypeID v117 = v29;
        if (qword_100219F60)
        {
          BOOL v33 = v6;
          CFIndex v34 = v125;
          if (v119) {
            __int128 v35 = "domain ";
          }
          else {
            __int128 v35 = "";
          }
          __int128 v36 = v118;
          if (!v119) {
            __int128 v36 = sub_100095BC8(a2);
          }
          [v32 WFLog:3, "%s:existingIndex %ld of %s%@", "WiFiManagerRemoveNetwork", v34, v35, v36 message];
          uint64_t v6 = v33;
          uint64_t v29 = v117;
        }

        objc_autoreleasePoolPop(v31);
        if (v125 != -1)
        {
          id v37 = (const __CFDictionary *)CFArrayGetValueAtIndex(v29, v125);
          char v38 = v37;
          if ((_DWORD)a3 == 4
            && !sub_100095B4C((uint64_t)v37)
            && !sub_1000957F4((BOOL)v38)
            && !sub_100096E90((uint64_t)v38)
            && !sub_100098380((BOOL)v38)
            && !sub_100096D08(v38))
          {
            CFDataRef v108 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "%s: Remove network event from iCloud ignored because this is an open network (%@)", "WiFiManagerRemoveNetwork", sub_100095BC8(a2) message];
            }
            objc_autoreleasePoolPop(v108);
            LODWORD(v29) = 0;
            uint64_t v27 = 0LL;
LABEL_111:
            sub_10003A310(prefs, (int)v29);

            if ((_DWORD)v29)
            {
              sub_100061B50(v72, 2LL, a1);
              uint64_t v73 = objc_autoreleasePoolPush();
              if ((_DWORD)a3 == 2)
              {
                if (qword_100219F60)
                {
                  uint64_t v74 = (const __SCPreferences *)v118;
                  if (!v119) {
                    uint64_t v74 = v27;
                  }
                  [(id)qword_100219F60 WFLog:3, "%s: sync the removal of <%@>", "WiFiManagerRemoveNetwork", v74 message];
                }

                objc_autoreleasePoolPop(v73);
                if (&WiFiCloudSyncEngineCreate)
                {
                  uint64_t v75 = *(const void **)(a1 + 1136);
                  if (v75)
                  {
                    CFRetain(v75);
                    CFRetain(a2);
                    v123[0] = _NSConcreteStackBlock;
                    v123[1] = 3221225472LL;
                    v123[2] = sub_10007839C;
                    v123[3] = &unk_1001E2C30;
                    v123[4] = a1;
                    v123[5] = a2;
                    dispatch_async((dispatch_queue_t)qword_100219F88, v123);
                  }
                }
              }

              else
              {
                if (qword_100219F60)
                {
                  CFIndex v77 = (const __SCPreferences *)v118;
                  if (!v119) {
                    CFIndex v77 = v27;
                  }
                  [(id)qword_100219F60 WFLog:3, "%s: <%@> removed due to sync", "WiFiManagerRemoveNetwork", v77 message];
                }

                objc_autoreleasePoolPop(v73);
              }

              if (v27) {
                CFRelease(v27);
              }
              uint64_t v76 = 1LL;
              sub_1000746CC(a1, a2, 1u);
              goto LABEL_129;
            }

LABEL_120:
            uint64_t v76 = 0LL;
LABEL_130:
            objc_autoreleasePoolPop(objc_autoreleasePoolPush());
            uint64_t v78 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "%s:Unable to update known network property in private mac network record for <%@>", "WiFiManagerRemoveNetwork", v27 message];
            }
            objc_autoreleasePoolPop(v78);
            goto LABEL_143;
          }

          sub_10002F2B4((void *)a1, a3, v38);
          unsigned int v39 = sub_100096804(a2);
          uint64_t v131 = 0LL;
          CFTypeRef v132 = &v131;
          uint64_t v133 = 0x2020000000LL;
          unint64_t v134 = 0xAAAAAAAAAAAAAAAALL;
          if (&_CNForgetSSID)
          {
            if (v39)
            {
              CFTypeRef v40 = CFRetain(v39);
              v132[3] = (uint64_t)v40;
              dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
              uint64_t context = _NSConcreteStackBlock;
              p_uint64_t context = 3221225472LL;
              uint64_t v128 = (uint64_t)sub_10008E8F8;
              uint64_t v129 = (uint64_t)&unk_1001E42A0;
              uint64_t v130 = &v131;
              dispatch_async(global_queue, &context);
            }

            else
            {
              CFNumberRef v105 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null ssidDataRef.", "__AsyncCNForgetSSID");
              }
              objc_autoreleasePoolPop(v105);
            }
          }

          _Block_object_dispose(&v131, 8);
          uint64_t context = (void **)a1;
          p_uint64_t context = 0xAAAAAAAA00000052LL;
          uint64_t v128 = (uint64_t)a2;
          uint64_t v129 = 1LL;
          CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
          cuint64_t f = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
          CFIndex v42 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: %@", "__WiFiManagerRemoveNetworkSetting", sub_100095BC8(a2) message];
          }
          objc_autoreleasePoolPop(v42);
          unsigned int v43 = *(const __CFDictionary **)(a1 + 216);
          if (!v43)
          {
            uint64_t v104 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null wifi network sets",  "__WiFiManagerRemoveNetworkSetting");
            }
            objc_autoreleasePoolPop(v104);
            goto LABEL_88;
          }

          MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, v43);
          if (!MutableCopy)
          {
LABEL_88:
            if (cf) {
              CFRelease(cf);
            }
            if (!sub_10009A128((uint64_t)a2))
            {
              if ((_DWORD)a3 == 24 || (BOOL v65 = sub_10009EFD8((uint64_t)a2), (_DWORD)a3 == 22) && v65)
              {
                CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
                CFDateRef v67 = CFDateCreate(kCFAllocatorDefault, Current);
                sub_10009582C((uint64_t)a2, @"removedAt", v67);
                uint64_t v68 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  [(id)qword_100219F60 WFLog:3, "%s: removing carrier-based auto-join disabled network %@ at %@", "WiFiManagerRemoveNetwork", sub_100095BC8(a2), v67 message];
                }
                objc_autoreleasePoolPop(v68);
                CFMutableDictionaryRef Mutable = *(__CFArray **)(a1 + 2192);
                if (Mutable
                  || (CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks),
                      (*(void *)(a1 + 2192) = Mutable) != 0LL))
                {
                  CFArrayAppendValue(Mutable, a2);
                  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 2192)) >= 11) {
                    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 2192), 0LL);
                  }
                }

                uint64_t v29 = v117;
                if (v67) {
                  CFRelease(v67);
                }
              }
            }

            CFArrayRemoveValueAtIndex(v29, v125);
            LODWORD(v29) = sub_10007332C(a1, v29);
            sub_100074498(a1, 1, 1, 1);
            sub_100071D74(a1, (CFDictionaryRef *)a2, 1);
            if ((_DWORD)v29)
            {
              uint64_t v27 = (const __SCPreferences *)sub_100095BC8(a2);
              CFRetain(v27);
              CFIndex v70 = objc_autoreleasePoolPush();
              if (qword_100219F60)
              {
                int v71 = (const __SCPreferences *)v118;
                if (!v119) {
                  int v71 = v27;
                }
                [(id)qword_100219F60 WFLog:3, "Removed %@ from list of known networks", v71 message];
              }

              objc_autoreleasePoolPop(v70);
            }

            else
            {
              uint64_t v27 = 0LL;
            }

            sub_100077FBC((void *)a1, v27, 1LL, 0LL, 0LL);
            if (sub_10009869C((uint64_t)a2))
            {
              uint64_t context = 0LL;
              p_uint64_t context = (unint64_t)&context;
              uint64_t v128 = 0x2020000000LL;
              uint64_t v129 = (uint64_t)a2;
              CFRetain(a2);
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472LL;
              block[2] = sub_1000782FC;
              block[3] = &unk_1001E42A0;
              void block[4] = &context;
              dispatch_async((dispatch_queue_t)qword_100219F80, block);
              _Block_object_dispose(&context, 8);
            }

            goto LABEL_111;
          }

          char v45 = MutableCopy;
          int v46 = sub_100095BC8(a2);
          CFPropertyListRef Value = CFDictionaryGetValue(v45, v46);
          if (!Value)
          {
            unsigned int v63 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: not a custom network",  "__WiFiManagerRemoveNetworkSetting");
            }
            objc_autoreleasePoolPop(v63);
            BOOL v64 = v45;
            goto LABEL_87;
          }

          CFTypeRef v48 = Value;
          CFRetain(Value);
          CFAbsoluteTime v49 = sub_100095BC8(a2);
          CFDictionaryRemoveValue(v45, v49);
          -[NSUserDefaults setObject:forKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "setObject:forKey:",  v45,  @"Custom network settings");
          if (!sub_10003A25C(*(const __SCPreferences **)(a1 + 904)))
          {
            CFTypeRef cf2a = v48;
            CFNumberRef v106 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: failed to get sc prefs lock",  "__WiFiManagerRemoveNetworkSetting");
            }
            objc_autoreleasePoolPop(v106);
            CFTypeRef v48 = cf2a;
            goto LABEL_86;
          }

          uint64_t v114 = v6;
          uint64_t v113 = (void *)sub_10003AFF4((uint64_t)"__WiFiManagerRemoveNetworkSetting");
          double v50 = SCNetworkSetCopyAll(*(SCPreferencesRef *)(a1 + 904));
          if (!v50)
          {
            unsigned int v62 = 0;
            goto LABEL_85;
          }

          CFIndex v51 = v50;
          CFTypeRef cf2 = v48;
          CFIndex v52 = CFArrayGetCount(v50);
          CFIndex v53 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: remove set ID %@, total sets %ld", "__WiFiManagerRemoveNetworkSetting", cf2, v52 message];
          }
          objc_autoreleasePoolPop(v53);
          if (v52 < 1)
          {
LABEL_78:
            unsigned int v62 = 0;
          }

          else
          {
            int v112 = a3;
            for (CFIndex i = 0LL; i != v52; ++i)
            {
              uint64_t v55 = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v51, i);
              if (v55)
              {
                if ((char v56 = v55, Name = SCNetworkSetGetName(v55), SetID = SCNetworkSetGetSetID(v56), Name)
                  && CFEqual(Name, @"Automatic")
                  || SetID && CFDictionaryContainsValue(v45, SetID))
                {
                  sub_1000803B0(cf, v56);
                }
              }
            }

            CFIndex v59 = 0LL;
            LODWORD(a3) = v112;
            while (1)
            {
              int v60 = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v51, v59);
              if (SCNetworkSetGetSetID(v60))
              {
                CFStringRef v61 = SCNetworkSetGetSetID(v60);
                if (CFEqual(v61, cf2)) {
                  break;
                }
              }

              if (v52 == ++v59) {
                goto LABEL_78;
              }
            }

            if (SCNetworkSetGetName(v60))
            {
              CFStringRef v86 = SCNetworkSetGetName(v60);
              if (CFEqual(v86, @"Automatic"))
              {
                int v87 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  [(id)qword_100219F60 WFLog:3, "%s: skipping automatic set from removal! automatic/custom network set ID: %@", "__WiFiManagerRemoveNetworkSetting", cf2 message];
                }
                objc_autoreleasePoolPop(v87);
                goto LABEL_78;
              }
            }

            sub_10008EDFC(v60, cf);
            unsigned int v62 = SCNetworkSetRemove(v60);
            int v88 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: set removal status %d",  "__WiFiManagerRemoveNetworkSetting",  v62);
            }
            objc_autoreleasePoolPop(v88);
            CFTypeRef v48 = cf2;
            if (v62) {
              goto LABEL_80;
            }
            CFIndex v111 = CFArrayGetCount(v51);
            CFTypeRef v110 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
            if (v60)
            {
              if (SCNetworkSetGetName(v60))
              {
                CFStringRef v89 = SCNetworkSetGetName(v60);
                if (CFEqual(v89, @"Automatic"))
                {
                  __int16 v90 = objc_autoreleasePoolPush();
                  unsigned int v62 = qword_100219F60;
                  if (qword_100219F60)
                  {
                    [(id)qword_100219F60 WFLog:4, "%s: aborting request to remove automatic network set! ID: %@", "__WiFiManagerRemoveCurrentNetworkSet", SCNetworkSetGetSetID(v60) message];
                    unsigned int v62 = 0;
                  }

                  goto LABEL_184;
                }
              }
            }

            if (v111 >= 1)
            {
              for (CFIndex j = 0LL; v111 != j; ++j)
              {
                unint64_t v92 = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v51, j);
                CFStringRef v93 = SCNetworkSetGetName(v92);
                uint64_t v94 = v92;
                CFStringRef v95 = SCNetworkSetGetSetID(v92);
                CFStringRef v96 = v95;
                if (v93)
                {
                  int v97 = CFEqual(@"Automatic", v93);
                  int v98 = v97;
                  if (!v96)
                  {
                    if (!v97) {
                      continue;
                    }
LABEL_174:
                    unsigned int v101 = SCNetworkSetSetCurrent(v94);
                    unsigned int v102 = objc_autoreleasePoolPush();
                    if (qword_100219F60) {
                      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: SCNetworkSetSetCurrent(Automatic) %d",  "__WiFiManagerRemoveCurrentNetworkSet",  v101,  v109);
                    }
LABEL_179:
                    objc_autoreleasePoolPop(v102);
                    sub_1000803B0(v110, v94);
                    continue;
                  }

                  int v99 = CFDictionaryContainsValue(v45, v96);
                  if (v98 && v99)
                  {
                    CFTypeID v100 = objc_autoreleasePoolPush();
                    if (qword_100219F60) {
                      [(id)qword_100219F60 WFLog:4, "%s: network set %@ (%@) is in both automatic and custom network sets!!.", "__WiFiManagerRemoveCurrentNetworkSet", v96, v93 message];
                    }
                    objc_autoreleasePoolPop(v100);
                    goto LABEL_174;
                  }

                  if (v98) {
                    goto LABEL_174;
                  }
                }

                else
                {
                  if (!v95) {
                    continue;
                  }
                  int v99 = CFDictionaryContainsValue(v45, v95);
                }

                if (v99)
                {
                  unsigned int v102 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    [(id)qword_100219F60 WFLog:3, "%s: Excluding services from set id %@ (%@)", "__WiFiManagerRemoveCurrentNetworkSet", v96, v93 message];
                  }
                  goto LABEL_179;
                }
              }
            }

            sub_10008EDFC(v60, v110);
            unsigned int v62 = SCNetworkSetRemove(v60);
            __int16 v90 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: set removal status %d",  "__WiFiManagerRemoveCurrentNetworkSet",  v62);
            }
            LODWORD(a3) = v112;
LABEL_184:
            objc_autoreleasePoolPop(v90);
            if (v110) {
              CFRelease(v110);
            }
          }

          CFTypeRef v48 = cf2;
LABEL_80:
          CFRelease(v51);
          uint64_t v29 = v117;
LABEL_85:
          sub_10003A310(*(SCPreferencesRef *)(a1 + 904), v62);

          uint64_t v6 = v114;
LABEL_86:
          CFRelease(v45);
          BOOL v64 = (const __CFDictionary *)v48;
LABEL_87:
          CFRelease(v64);
          goto LABEL_88;
        }

        LODWORD(v29) = 0;
      }

      uint64_t v27 = 0LL;
      goto LABEL_111;
    }

    char v45 = 0LL;
LABEL_121:
    objc_autoreleasePoolPop(v80);

    goto LABEL_86;
  }

  char v45 = v44;
  int contexta = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if (!contexta)
  {
    char v80 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: networkDenyListReasonDataList is NULL",  "__WiFiDeviceManagerCopyWoWDenyListProblemList");
    }
    goto LABEL_121;
  }

  int v46 = v86;
  if (![v86 count]) {
    goto LABEL_85;
  }
  CFBooleanRef v84 = v43;
  int v88 = v4;
  CFArrayRef theArray = Copy;
  double v47 = 0LL;
  do
  {
    CFTypeRef v48 = [v46 objectAtIndex:v47];
    CFAbsoluteTime v49 = sub_1000A3DB0(v48);
    double v50 = sub_100095BC8(v49);
    if (CFEqual(cf1, v50))
    {
      CFIndex v51 = [*(id *)(a1 + 6632) reasonsForNetworkInDenyListedState:v48 state:3 timestamps:v45 reasonData:contexta];
      if (v51)
      {
        CFIndex v52 = v51;
        CFIndex v53 = [v51 count];
        if (v53 == -[NSMutableArray count](v45, "count"))
        {
          char v54 = [v52 count];
          if (v54 == -[NSMutableArray count](contexta, "count"))
          {
            if ([v52 count])
            {
              uint64_t v55 = 0LL;
              while (1)
              {
                CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
                if (!Mutable)
                {
                  uint64_t v68 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: problematicEntry fail",  "__WiFiDeviceManagerCopyWoWDenyListProblemList");
                  }
                  objc_autoreleasePoolPop(v68);
                  goto LABEL_69;
                }

                uint64_t v57 = Mutable;
                BOOL v58 = -[NSMutableArray objectAtIndex:](v45, "objectAtIndex:", v55);
                int v97 = -1LL;
                [v58 doubleValue];
                int v97 = v59;
                int v60 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &v97);
                if (!v60) {
                  break;
                }
                CFStringRef v61 = v60;
                CFDictionaryAddValue(v57, @"problematicStateEntryTimestamp", v60);
                CFRelease(v61);
                unsigned int v62 = [v52 objectAtIndex:v55];
                CFStringRef v96 = -1431655766;
                CFStringRef v96 = [v62 unsignedIntegerValue];
                unsigned int v63 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v96);
                if (!v63)
                {
                  CFIndex v70 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: kWiFiNetworkProblematicStateEntryReason fail",  "__WiFiDeviceManagerCopyWoWDenyListProblemList");
                  }
                  int v71 = v70;
                  goto LABEL_82;
                }

                BOOL v64 = v63;
                CFDictionaryAddValue(v57, @"problematicStateEntryReason", v63);
                CFRelease(v64);
                BOOL v65 = -[NSMutableArray objectAtIndex:](contexta, "objectAtIndex:", v55);
                CFStringRef v95 = -1431655766;
                CFStringRef v95 = [v65 integerValue];
                __int16 v66 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v95);
                if (!v66)
                {
                  char v69 = objc_autoreleasePoolPush();
                  if (qword_100219F60) {
                    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: kWiFiNetworkProblematicStateEntryReasonData fail",  "__WiFiDeviceManagerCopyWoWDenyListProblemList");
                  }
                  goto LABEL_81;
                }

                CFDateRef v67 = v66;
                CFDictionaryAddValue(v57, @"problematicStateEntryReasonData", v66);
                CFRelease(v67);
                CFArrayAppendValue(theArray, v57);
LABEL_68:
                CFRelease(v57);
LABEL_69:
              }

              char v69 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: kWiFiNetworkProblematicStateEntryTimestamp fail",  "__WiFiDeviceManagerCopyWoWDenyListProblemList");
              }
LABEL_81:
              int v71 = v69;
LABEL_82:
              objc_autoreleasePoolPop(v71);
              goto LABEL_68;
            }
          }
        }
      }
    }

LABEL_191:
    uint64_t v76 = 0LL;
LABEL_129:
    uint64_t v27 = 0LL;
    goto LABEL_130;
  }

  double v11 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Carplay network + UserConfigured",  "WiFiManagerRemoveNetwork");
  }
  objc_autoreleasePoolPop(v11);
  switch((_DWORD)a3)
  {
    case 2:
      sub_10009582C((uint64_t)a2, @"lastJoined", 0LL);
      int v79 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: removed kWiFiPreferenceLastJoinedKey",  "WiFiManagerRemoveNetwork");
      }
      objc_autoreleasePoolPop(v79);
      char v80 = (const __CFArray *)sub_100063560(a1);
      if (v80)
      {
        int v81 = v80;
        sub_1000730D4(1, v80, a2, &v125, 0LL);
        if (v125 != -1)
        {
          uint64_t v82 = CFArrayGetValueAtIndex(v81, v125);
          if (v82) {
            sub_10009582C((uint64_t)v82, @"lastJoined", 0LL);
          }
        }
      }

      goto LABEL_139;
    case 0x1B:
      goto LABEL_20;
    case 7:
      sub_10009E264((uint64_t)a2);
      __int128 v12 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: removed CarPlay settings",  "WiFiManagerRemoveNetwork");
      }
      objc_autoreleasePoolPop(v12);
LABEL_139:
      uint64_t v76 = sub_100077498(a1, a2, 0);
      goto LABEL_143;
  }

  int v83 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: unexpected reason %d", "WiFiManagerRemoveNetwork", a3);
  }
  objc_autoreleasePoolPop(v83);
  uint64_t v76 = 1LL;
LABEL_143:
  objc_autoreleasePoolPop(v6);
  return v76;
}

void sub_100077474(_Unwind_Exception *a1)
{
}

uint64_t sub_100077498(uint64_t a1, void *a2, unsigned int a3)
{
  CFIndex v75 = 0LL;
  v76[0] = -1LL;
  if (!a1)
  {
    char v56 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null manager", "WiFiManagerUpdateNetwork");
    }
    goto LABEL_119;
  }

  uint64_t v6 = objc_autoreleasePoolPush();
  if (!a2)
  {
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null network", "WiFiManagerUpdateNetwork");
    }
    uint64_t v57 = v6;
    goto LABEL_120;
  }

  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: merge %d, %@", "WiFiManagerUpdateNetwork", a3, a2 message];
  }
  objc_autoreleasePoolPop(v6);
  sub_10007307C(a2);
  uint64_t v7 = (const __SCPreferences *)sub_100072F14((void *)a1, @"List of known networks");
  if (!v7) {
    return 0LL;
  }
  id v8 = v7;
  if (!sub_10003A25C(v7))
  {
    char v56 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: failed to get prefs lock",  "WiFiManagerUpdateNetwork");
    }
LABEL_119:
    uint64_t v57 = v56;
LABEL_120:
    objc_autoreleasePoolPop(v57);
    return 0LL;
  }

  id v9 = (void *)sub_10003AFF4((uint64_t)"WiFiManagerUpdateNetwork");
  CFArrayRef v10 = (const __CFArray *)sub_100063560(a1);
  if (!v10)
  {
    BOOL v58 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: Null networks", "WiFiManagerUpdateNetwork");
    }
    goto LABEL_129;
  }

  double v11 = v10;
  sub_1000730D4(*(_DWORD *)(a1 + 312), v10, a2, v76, &v75);
  if (v76[0] == -1)
  {
    CFIndex v59 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: %@ does not  exist", "WiFiManagerUpdateNetwork", sub_100095BC8(a2) message];
    }
    int v60 = v59;
    goto LABEL_130;
  }

  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v11, v76[0]);
  if (!ValueAtIndex)
  {
    BOOL v58 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: Null existingNetwork", "WiFiManagerUpdateNetwork");
    }
LABEL_129:
    int v60 = v58;
LABEL_130:
    objc_autoreleasePoolPop(v60);
    BOOL v40 = 0LL;
    BOOL v66 = 0;
    unsigned int v36 = 0;
    uint64_t v64 = 0LL;
    BOOL v65 = 0LL;
    BOOL v61 = 0LL;
    uint64_t v62 = 0LL;
    uint64_t v63 = 0LL;
    BOOL v42 = 0LL;
    unsigned int v43 = 0LL;
    uint64_t v70 = 0LL;
    int v44 = 0;
    goto LABEL_74;
  }

  __int128 v13 = ValueAtIndex;
  int v67 = sub_100097324(ValueAtIndex);
  unsigned int v71 = a3;
  if (sub_100097480((uint64_t)a2))
  {
    int v14 = sub_100097480((uint64_t)v13);
    if (v14 == sub_100097480((uint64_t)a2))
    {
      BOOL v15 = sub_10009740C((uint64_t)v13);
      BOOL v16 = v15 != sub_10009740C((uint64_t)a2);
    }

    else
    {
      BOOL v16 = 1;
    }
  }

  else
  {
    BOOL v16 = 0;
  }

  if (sub_100095B4C((uint64_t)v13))
  {
    BOOL v69 = 0;
  }

  else
  {
    BOOL v17 = sub_100096E90((uint64_t)v13)
       || sub_1000957F4((BOOL)v13)
       || sub_100096D08(v13) != 0;
    BOOL v69 = v17;
  }

  BOOL v68 = !sub_100095B4C((uint64_t)a2)
     && !sub_1000957F4((BOOL)a2)
     && !sub_100096E90((uint64_t)a2)
     && !sub_100098380((BOOL)a2)
     && sub_100096D08((const __CFDictionary *)a2) == 0;
  else {
    BOOL v18 = 0;
  }
  if (sub_100096D08((const __CFDictionary *)a2) && !sub_100098058((uint64_t)a2))
  {
    sub_10009582C((uint64_t)a2, @"WPA_IE", 0LL);
    sub_10009582C((uint64_t)v13, @"WPA_IE", 0LL);
  }

  BOOL v66 = v16;
  if (v16 && sub_100097480((uint64_t)a2) != 2 && !sub_10009A128((uint64_t)a2))
  {
    CFIndex v53 = sub_1000951FC((uint64_t)a2, @"networkDisabledReason");
    char v54 = sub_1000951FC((uint64_t)a2, @"networkDisabledClientName");
    if (v54)
    {
      if (v53 && CFEqual(v54, @"configd"))
      {
        uint64_t v55 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: Enabling auto-join for network %@ since captive status changed and was disabled by configd", "WiFiManagerUpdateNetwork", sub_100095BC8(a2) message];
        }
        objc_autoreleasePoolPop(v55);
        sub_100099ED0((uint64_t)a2, 1);
      }
    }
  }

  uint64_t v19 = v9;
  else {
    BOOL v20 = 0;
  }
  if (sub_10009E6CC((uint64_t)a2))
  {
    unsigned int v21 = sub_10009E6CC((uint64_t)v13);
    BOOL v65 = v21 != sub_10009E6CC((uint64_t)a2);
  }

  else
  {
    BOOL v65 = 0LL;
  }

  uint64_t v22 = sub_1000951FC((uint64_t)v13, @"addedAt");
  uint64_t v23 = sub_1000951FC((uint64_t)a2, @"addedAt");
  if (!v22 && v23 || !v23 && v22)
  {
LABEL_45:
    uint64_t v24 = 1LL;
    goto LABEL_46;
  }

  uint64_t v24 = 0LL;
  if (v22 && v23)
  {
    if (CFEqual(v22, v23))
    {
      uint64_t v24 = 0LL;
      goto LABEL_46;
    }

    goto LABEL_45;
  }

LABEL_46:
  uint64_t v64 = v24;
  int v25 = sub_1000951FC((uint64_t)v13, @"lastJoined");
  uint64_t v26 = sub_1000951FC((uint64_t)a2, @"lastJoined");
  if (!v25 && v26 || !v26 && v25) {
    goto LABEL_50;
  }
  uint64_t v27 = 0LL;
  if (!v25 || !v26) {
    goto LABEL_51;
  }
  if (CFEqual(v25, v26)) {
    uint64_t v27 = 0LL;
  }
  else {
LABEL_50:
  }
    uint64_t v27 = 1LL;
LABEL_51:
  uint64_t v63 = v27;
  uint64_t v28 = sub_1000951FC((uint64_t)v13, @"lastAutoJoined");
  uint64_t v29 = sub_1000951FC((uint64_t)a2, @"lastAutoJoined");
  if (!v28 && v29 || !v29 && v28)
  {
LABEL_55:
    uint64_t v30 = 1LL;
    goto LABEL_56;
  }

  uint64_t v30 = 0LL;
  if (v28 && v29)
  {
    if (CFEqual(v28, v29))
    {
      uint64_t v30 = 0LL;
      goto LABEL_56;
    }

    goto LABEL_55;
  }

          a1 = v27;
          double v11 = v38;
        }
      }
    }

    CFTypeID v32 = objc_autoreleasePoolPush();
    if (v20)
    {
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: Dispatching colocated SSID notification for %@", "__WiFiDeviceManagerCheckForColocatedSSIDs", v20 message];
      }
      objc_autoreleasePoolPop(v32);
      [*(id *)(a1 + 6688) dispatchNotificationWithColocatedScanResult:v20 fromScanResult:v11];
    }

    else
    {
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: No valid colocated SSID candidates",  "__WiFiDeviceManagerCheckForColocatedSSIDs");
      }
      objc_autoreleasePoolPop(v32);
    }

    goto LABEL_51;
  }

  __int128 v35 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: __WiFiDeviceManagerCopyCurrentCoreWiFiScanResult() returned NULL",  "__WiFiDeviceManagerCheckForColocatedSSIDs");
  }
  objc_autoreleasePoolPop(v35);
LABEL_30:
  double v11 = 0LL;
LABEL_51:
  CFRelease(v3);
LABEL_52:

  objc_autoreleasePoolPop(v2);
}

  objc_autoreleasePoolPop(v4);
  return v12;
}

  BOOL v17 = 0LL;
LABEL_47:
  if ([a6 response])
  {
    BOOL v42 = (void (**)(id, NSError *, void))[a6 response];
    v42[2](v42, v17, 0LL);
  }

  objc_autoreleasePoolPop(v12);
}

void sub_100077EB8(CFArrayRef theArray, const void *a2, CFIndex *a3)
{
  if (a3)
  {
    *a3 = -1LL;
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count)
      {
        CFIndex v7 = Count;
        if (Count < 1)
        {
          CFIndex v8 = 0LL;
        }

        else
        {
          CFIndex v8 = 0LL;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
            if (v7 == ++v8) {
              goto LABEL_12;
            }
          }

          *a3 = v8;
        }

        if (v8 == v7)
        {
LABEL_12:
          CFArrayRef v10 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: network %@ not found", "__GetNetworkIndicesMatchingSSIDOnly", sub_100095BC8(a2) message];
          }
          objc_autoreleasePoolPop(v10);
        }
      }
    }
  }

void sub_100077FBC(void *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    return;
  }
  id v9 = objc_autoreleasePoolPush();
  if (a2)
  {
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: blacklisting ssid: %@", "WiFiManagerAddNetworkNameToUserNotificationBlacklist", a2 message];
    }
    objc_autoreleasePoolPop(v9);
    CFArrayRef v10 = sub_100082D40(a1, 0);
    double v11 = v10;
    if (v10)
    {
      CFIndex Count = CFDictionaryGetCount(v10);
      MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, Count + 1, v11);
    }

    else
    {
      MutableCFStringRef Copy = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    }

    int v14 = MutableCopy;
    if (CFDictionaryContainsKey(MutableCopy, a2))
    {
      CFPropertyListRef Value = (const __CFDictionary *)CFDictionaryGetValue(v14, a2);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
      if (CFDictionaryContainsKey(Mutable, @"timestamp")) {
        CFDictionaryRemoveValue(Mutable, @"timestamp");
      }
    }

    else
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }

    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v18 = CFDateCreate(kCFAllocatorDefault, Current);
    if (v18)
    {
      CFDictionarySetValue(Mutable, @"timestamp", v18);
      CFDictionarySetValue( Mutable,  @"type",  +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a3));
      CFDictionarySetValue( Mutable,  @"notificationType",  +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a5));
      if (CFDictionaryContainsKey(Mutable, @"count")) {
        uint64_t v19 = +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  (char *)objc_msgSend( -[__CFDictionary objectForKey:](Mutable, "objectForKey:", @"count"),  "integerValue")
      }
              + 1);
      else {
        uint64_t v19 = (NSNumber *)&off_1002046C8;
      }
      CFDictionarySetValue(Mutable, @"count", v19);
      CFDictionarySetValue(v14, a2, Mutable);
      -[NSUserDefaults setObject:forKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "setObject:forKey:",  v14,  @"UserNotificationBlacklist");
      sub_100080AFC((uint64_t)a1, v14);
      if (!Mutable) {
        goto LABEL_18;
      }
    }

    else
    {
      BOOL v20 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: timestamp is null",  "WiFiManagerAddNetworkNameToUserNotificationBlacklist");
      }
      objc_autoreleasePoolPop(v20);
      if (!Mutable) {
        goto LABEL_18;
      }
    }

    CFRelease(Mutable);
LABEL_18:
    if (v18) {
      CFRelease(v18);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (v11) {
      CFRelease(v11);
    }
    return;
  }

  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: ssid is null",  "WiFiManagerAddNetworkNameToUserNotificationBlacklist");
  }
  objc_autoreleasePoolPop(v9);
}

void sub_1000782FC(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: network is app based, removing access in DA",  "WiFiManagerRemoveNetwork_block_invoke");
  }
  objc_autoreleasePoolPop(v2);
  sub_10009ECAC(*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
  sub_10000B784();
  id v3 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0LL;
  }

void sub_10007839C(uint64_t a1)
{
}

uint64_t sub_1000783D4()
{
  return 0LL;
}

void sub_1000783F0(uint64_t a1, const __CFString *a2)
{
  if (a1 && a2)
  {
    id v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: bundleId %@", "WiFiManagerRemoveNetworksWithBundleIdentifier", a2 message];
    }
    objc_autoreleasePoolPop(v4);
    CFIndex v5 = sub_10006C93C(a1, a2);
    if (v5)
    {
      uint64_t v6 = v5;
      CFIndex Count = CFArrayGetCount(v5);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        for (CFIndex i = 0LL; i != v8; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(v6, i);
          if (ValueAtIndex)
          {
            double v11 = ValueAtIndex;
            __int128 v12 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:4, "Network %@ is no longer app owned, removing...", sub_100095BC8(v11) message];
            }
            objc_autoreleasePoolPop(v12);
            sub_100076340(a1, v11, 9LL);
            sub_100099D38(v11);
          }
        }
      }

      CFRelease(v6);
    }
  }

uint64_t sub_10007853C(uint64_t a1, void *a2, int a3, char a4)
{
  if ((a4 & 1) != 0)
  {
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000016LL;
    void context[2] = a2;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    CFArrayRef v10 = objc_autoreleasePoolPush();
    if (qword_100219F60)
    {
      if (a3) {
        double v11 = "Enabling";
      }
      else {
        double v11 = "Disabling";
      }
      [(id)qword_100219F60 WFLog:3, "Temporarily %s %@ from list of know networks", v11, sub_100095BC8(a2) message];
    }

    objc_autoreleasePoolPop(v10);
    return 1LL;
  }

  else
  {
    sub_10009A048((CFMutableDictionaryRef *)a2, a3, @"SetNetworkState");
    uint64_t v7 = sub_100077498(a1, a2, 1u);
    if ((_DWORD)v7)
    {
      CFIndex v8 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        if (a3) {
          id v9 = "Enabled";
        }
        else {
          id v9 = "Disabled";
        }
        [(id)qword_100219F60 WFLog:3, "%s auto join for %@ (%@)", v9, sub_100095BC8(a2), a2 message];
      }

      objc_autoreleasePoolPop(v8);
    }

    if (a3)
    {
      sub_10006BAB4(a1, 1);
      else {
        sub_10006B744(a1, 2);
      }
    }
  }

  return v7;
}

BOOL sub_1000786E0(uint64_t a1, const void *a2)
{
  id v3 = *(const __CFArray **)(a1 + 224);
  if (!v3) {
    return 0LL;
  }
  CFIndex Count = CFArrayGetCount(v3);
  if (!Count) {
    return 0LL;
  }
  v9.length = Count;
  v9.CFIndex location = 0LL;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 224), v9, a2);
  if (FirstIndexOfValue == -1) {
    return 0LL;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 224), FirstIndexOfValue);
  return sub_10009A128((uint64_t)ValueAtIndex);
}

uint64_t sub_100078748(uint64_t a1, const void *a2)
{
  id v3 = *(const __CFArray **)(a1 + 224);
  if (!v3) {
    return 0LL;
  }
  CFIndex Count = CFArrayGetCount(v3);
  if (!Count) {
    return 0LL;
  }
  v9.length = Count;
  v9.CFIndex location = 0LL;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 224), v9, a2);
  if (FirstIndexOfValue == -1) {
    return 0LL;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 224), FirstIndexOfValue);
  return sub_10009EA20((uint64_t)ValueAtIndex);
}

uint64_t sub_1000787B0(uint64_t a1, void *a2, const void *a3)
{
  CFIndex v19 = 0LL;
  CFIndex idx = -1LL;
  if (!a1)
  {
    int v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null manager",  "WiFiManagerUpdateNetworkForAutoJoinDisablementProperties");
    }
    goto LABEL_26;
  }

  if (!a2)
  {
    int v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null network",  "WiFiManagerUpdateNetworkForAutoJoinDisablementProperties");
    }
    goto LABEL_26;
  }

  uint64_t v6 = (const __CFArray *)sub_100063560(a1);
  if (!v6)
  {
    int v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null networks",  "WiFiManagerUpdateNetworkForAutoJoinDisablementProperties");
    }
    goto LABEL_26;
  }

  uint64_t v7 = v6;
  sub_1000730D4(*(_DWORD *)(a1 + 312), v6, a2, &idx, &v19);
  if (idx == -1)
  {
    BOOL v15 = objc_autoreleasePoolPush();
    BOOL v16 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      BOOL v17 = sub_100095BC8(a2);
      [v16 WFLog:3, "%s: %@ does not  exist", "WiFiManagerUpdateNetworkForAutoJoinDisablementProperties", v17, v19 message];
    }

    CFDateRef v18 = v15;
    goto LABEL_27;
  }

  ValueAtIndex = CFArrayGetValueAtIndex(v7, idx);
  if (!ValueAtIndex)
  {
    int v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null existingNetwork",  "WiFiManagerUpdateNetworkForAutoJoinDisablementProperties");
    }
LABEL_26:
    CFDateRef v18 = v14;
LABEL_27:
    objc_autoreleasePoolPop(v18);
    return 0LL;
  }

  if (sub_10009A128((uint64_t)ValueAtIndex) && !sub_10009A128((uint64_t)a2))
  {
    CFRange v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: Auto join disabled by %@", "WiFiManagerUpdateNetworkForAutoJoinDisablementProperties", a3, v19 message];
    }
    objc_autoreleasePoolPop(v9);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v11 = CFDateCreate(kCFAllocatorDefault, Current);
    if (v11)
    {
      CFDateRef v12 = v11;
      sub_10009582C((uint64_t)a2, @"networkDisabledTimestamp", v11);
      CFRelease(v12);
    }

    sub_10009582C((uint64_t)a2, @"networkDisabledClientName", a3);
    sub_10009582C((uint64_t)a2, @"networkDisabledReason", @"ByClient");
  }

  return 1LL;
}

void sub_100078A0C(uint64_t a1)
{
}

void sub_100078A44(uint64_t a1)
{
}

uint64_t sub_100078A7C(void *a1, const __CFString *a2, const void *a3, const void *a4)
{
  CFIndex idx = -1LL;
  if (!a1)
  {
    uint64_t v24 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null manager",  "WiFiManagerUpdateNetworksGuessingFailureCount");
    }
    goto LABEL_32;
  }

  if (!a2)
  {
    uint64_t v24 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null network",  "WiFiManagerUpdateNetworksGuessingFailureCount");
    }
    goto LABEL_32;
  }

  if (!a3)
  {
    uint64_t v24 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null bssid",  "WiFiManagerUpdateNetworksGuessingFailureCount");
    }
    goto LABEL_32;
  }

  CFIndex v8 = sub_100094CE8(a2);
  if (!v8)
  {
    uint64_t v24 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null known5GhzNetwork",  "WiFiManagerUpdateNetworksGuessingFailureCount");
    }
LABEL_32:
    objc_autoreleasePoolPop(v24);
    return 0LL;
  }

  CFRange v9 = v8;
  CFArrayRef v10 = (const __SCPreferences *)sub_100072F14(a1, @"List of known networks");
  if (!v10)
  {
LABEL_36:
    CFRelease(v9);
    return 0LL;
  }

  CFDateRef v11 = v10;
  if (!sub_10003A25C(v10))
  {
    int v25 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: failed to get prefs lock",  "WiFiManagerUpdateNetworksGuessingFailureCount");
    }
    objc_autoreleasePoolPop(v25);
    goto LABEL_36;
  }

  CFDateRef v12 = (void *)sub_10003AFF4((uint64_t)"WiFiManagerUpdateNetworksGuessingFailureCount");
  __int128 v13 = (const __CFArray *)sub_100063560((uint64_t)a1);
  if (v13)
  {
    int v14 = v13;
    sub_100077EB8(v13, v9, &idx);
    if (idx == -1)
    {
      uint64_t v26 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: %@ does not  exist", "WiFiManagerUpdateNetworksGuessingFailureCount", a2 message];
      }
    }

    else
    {
      BOOL v15 = v12;
      ValueAtIndex = CFArrayGetValueAtIndex(v14, idx);
      if (ValueAtIndex)
      {
        uint64_t v17 = (uint64_t)ValueAtIndex;
        CFDateRef v18 = (const __CFDictionary *)sub_1000951FC( (uint64_t)ValueAtIndex,  @"WiFiPreference2GhzGuessingAttemptsPerBSSID");
        if (v18) {
          MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, v18);
        }
        else {
          MutableCFStringRef Copy = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        }
        BOOL v20 = MutableCopy;
        if (MutableCopy)
        {
          if (CFDictionaryContainsKey(MutableCopy, a3)) {
            CFDictionaryReplaceValue(v20, a3, a4);
          }
          else {
            CFDictionaryAddValue(v20, a3, a4);
          }
          unsigned int v21 = sub_100094E60((uint64_t)kCFAllocatorDefault, v17);
          sub_10009582C((uint64_t)v21, @"WiFiPreference2GhzGuessingAttemptsPerBSSID", v20);
          CFArrayRemoveValueAtIndex(v14, idx);
          CFArrayInsertValueAtIndex(v14, idx, v21);
          uint64_t v22 = sub_10007332C((uint64_t)a1, v14);
          sub_100071D74((uint64_t)a1, (CFDictionaryRef *)v21, 0);
        }

        else
        {
          uint64_t v27 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null guessingAttemptPerBssidDict",  "WiFiManagerUpdateNetworksGuessingFailureCount");
          }
          objc_autoreleasePoolPop(v27);
          unsigned int v21 = 0LL;
          uint64_t v22 = 0LL;
          BOOL v20 = 0LL;
        }

        CFDateRef v12 = v15;
        goto LABEL_19;
      }

      uint64_t v26 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null existingNetwork",  "WiFiManagerUpdateNetworksGuessingFailureCount",  v28);
      }
    }

    objc_autoreleasePoolPop(v26);
  }

  unsigned int v21 = 0LL;
  uint64_t v22 = 0LL;
  BOOL v20 = 0LL;
LABEL_19:
  sub_10003A310(v11, v22);

  CFRelease(v9);
  if (v21) {
    CFRelease(v21);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v22;
}

uint64_t sub_100078E60(uint64_t a1, void *a2, void *a3, const void *a4)
{
  CFIndex idx = -1LL;
  CFIndex v20 = -1LL;
  if (!a1)
  {
    BOOL v15 = objc_autoreleasePoolPush();
    BOOL v16 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_20;
    }
    uint64_t v17 = "%s: null manager";
LABEL_19:
    objc_msgSend(v16, "WFLog:message:", 3, v17, "WiFiManagerSetNetworkProperty", v18);
    goto LABEL_20;
  }

  if (!a2)
  {
    BOOL v15 = objc_autoreleasePoolPush();
    BOOL v16 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_20;
    }
    uint64_t v17 = "%s: null network";
    goto LABEL_19;
  }

  CFIndex v8 = (const __CFArray *)sub_100063560(a1);
  if (!v8)
  {
    BOOL v15 = objc_autoreleasePoolPush();
    BOOL v16 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_20;
    }
    uint64_t v17 = "%s: null networks";
    goto LABEL_19;
  }

  CFRange v9 = v8;
  sub_1000730D4(*(_DWORD *)(a1 + 312), v8, a2, &idx, &v20);
  if (idx == -1)
  {
    BOOL v15 = objc_autoreleasePoolPush();
    BOOL v16 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_20;
    }
    CFDateRef v18 = a2;
    uint64_t v17 = "%s: %@ does not  exist";
    goto LABEL_19;
  }

  ValueAtIndex = CFArrayGetValueAtIndex(v9, idx);
  if (!ValueAtIndex)
  {
    BOOL v15 = objc_autoreleasePoolPush();
    BOOL v16 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      uint64_t v17 = "%s: null existingNetwork";
      goto LABEL_19;
    }

uint64_t sub_100079070(uint64_t a1, void *a2)
{
  id v4 = (void *)sub_10003AFF4((uint64_t)"WiFiManagerMergeKnownNetworksToList");
  if (!a1)
  {
    int v46 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null manager",  "WiFiManagerMergeKnownNetworksToList");
    }
    double v47 = v46;
    goto LABEL_89;
  }

  CFIndex v5 = objc_autoreleasePoolPush();
  if (!a2)
  {
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null path", "WiFiManagerMergeKnownNetworksToList");
    }
    double v47 = v5;
LABEL_89:
    objc_autoreleasePoolPop(v47);
    uint64_t v35 = 0LL;
    uint64_t v6 = 0LL;
    goto LABEL_82;
  }

  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:4, "<%s> Merging known networks to backup file '%@'", "WiFiManagerMergeKnownNetworksToList", a2 message];
  }
  objc_autoreleasePoolPop(v5);
  uint64_t v6 = (NSMutableDictionary *)-[NSDictionary mutableCopy]( +[NSDictionary dictionaryWithContentsOfFile:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithContentsOfFile:",  a2),  "mutableCopy");
  uint64_t v7 = objc_autoreleasePoolPush();
  if (v6)
  {
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "<%s> Backup file contents: %@", "WiFiManagerMergeKnownNetworksToList", v6 message];
    }
    objc_autoreleasePoolPop(v7);
  }

  else
  {
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "<%s> Backup file at specified path does not exist '%@'", "WiFiManagerMergeKnownNetworksToList", a2 message];
    }
    objc_autoreleasePoolPop(v7);
    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  }

  if (([a2 hasSuffix:@"com.apple.wifi.plist"] & 1) != 0
    || [a2 hasSuffix:@"com.apple.wifi-networks.plist"])
  {
    CFIndex v8 = (const __CFArray *)-[NSMutableDictionary objectForKey:](v6, "objectForKey:", @"List of known networks");
    if (v8)
    {
      CFRange v9 = sub_10003A530(v8);
      goto LABEL_18;
    }
  }

  else if ([a2 hasSuffix:+[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@.plist", CWFKnownNetworksStoreIdentifier)])
  {
    CFRange v9 = sub_1000797AC(v6);
LABEL_18:
    CFMutableDictionaryRef Mutable = v9;
    if (v9) {
      goto LABEL_20;
    }
  }

  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
LABEL_20:
  uint64_t v48 = a2;
  double v50 = v4;
  if (sub_100071F94((void *)a1))
  {
    CFDateRef v11 = sub_1000797AC([*(id *)(a1 + 944) dictionaryRepresentation]);
    goto LABEL_24;
  }

  sub_100074498(a1, 1, 1, 1);
  SCPreferencesSynchronize(*(SCPreferencesRef *)(a1 + 920));
  CFDateRef v12 = sub_10006AA50((void *)a1, @"List of known networks");
  if (v12)
  {
    CFDateRef v11 = sub_10003A530(v12);
LABEL_24:
    uint64_t v13 = v11;
    if (v11) {
      goto LABEL_26;
    }
  }

  uint64_t v13 = CFArrayCreate(kCFAllocatorDefault, 0LL, 0LL, &kCFTypeArrayCallBacks);
LABEL_26:
  CFIndex Count = CFArrayGetCount(v13);
  if (!Count || (uint64_t v15 = Count, range = CFArrayGetCount(Mutable), v15 < 1))
  {
LABEL_58:
    CFIndex v34 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "<%s> No new networks found in known networks list",  "WiFiManagerMergeKnownNetworksToList");
    }
    uint64_t v35 = 1LL;
    id v4 = v50;
    goto LABEL_78;
  }

  CFIndex v16 = 0LL;
  char v17 = 1;
  uint64_t v51 = v13;
  while (2)
  {
    char v49 = v17;
    CFIndex v18 = v16;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v13, v18);
      if (ValueAtIndex) {
        break;
      }
LABEL_51:
      if (v15 == ++v18)
      {
        if ((v49 & 1) != 0) {
          goto LABEL_58;
        }
        goto LABEL_61;
      }
    }

    CFIndex v20 = ValueAtIndex;
    unsigned int v21 = sub_10009A2C4((uint64_t)ValueAtIndex, 0);
    uint64_t v22 = sub_10009A2C4((uint64_t)v20, 1);
    uint64_t v23 = sub_1000951FC((uint64_t)v20, @"prevJoined");
    v53.CFIndex location = 0LL;
    v53.length = range;
    CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(Mutable, v53, v20);
    if (FirstIndexOfValue != -1)
    {
      int v25 = CFArrayGetValueAtIndex(Mutable, FirstIndexOfValue);
      if (v25)
      {
        uint64_t v26 = v25;
        if (v21)
        {
          uint64_t v27 = (const __CFDate *)sub_10009A2C4((uint64_t)v25, 0);
          if (!v27 || CFDateCompare((CFDateRef)v21, v27, 0LL) == kCFCompareGreaterThan)
          {
            uint64_t v28 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "%s: found newer auto-join date %@ for network %@", "__MergeNetworkLists", v21, sub_100095BC8(v20) message];
            }
            objc_autoreleasePoolPop(v28);
            sub_10009A194(v26, 0, v21);
            uint64_t v13 = v51;
          }
        }

        if (v22)
        {
          uint64_t v29 = (const __CFDate *)sub_10009A2C4((uint64_t)v26, 1);
          if (!v29 || CFDateCompare((CFDateRef)v22, v29, 0LL) == kCFCompareGreaterThan)
          {
            uint64_t v30 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "%s: found newer last-join date %@ for network %@", "__MergeNetworkLists", v22, sub_100095BC8(v20) message];
            }
            objc_autoreleasePoolPop(v30);
            sub_10009A194(v26, 1, v22);
            uint64_t v13 = v51;
          }
        }

        if (v23)
        {
          BOOL v31 = (const __CFDate *)sub_1000951FC((uint64_t)v26, @"prevJoined");
          if (!v31 || CFDateCompare((CFDateRef)v23, v31, 0LL) == kCFCompareGreaterThan)
          {
            CFTypeID v32 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "%s: found newer prev-join date %@ for network %@", "__MergeNetworkLists", v23, sub_100095BC8(v20) message];
            }
            objc_autoreleasePoolPop(v32);
            sub_10009582C((uint64_t)v26, @"prevJoined", v23);
          }
        }
      }

      goto LABEL_51;
    }

    CFArrayAppendValue(Mutable, v20);
    BOOL v33 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: added network %@ to the list", "__MergeNetworkLists", sub_100095BC8(v20) message];
    }
    objc_autoreleasePoolPop(v33);
    char v17 = 0;
    CFIndex v16 = v18 + 1;
    if (v15 - 1 != v18) {
      continue;
    }
    break;
  }

LABEL_78:
  objc_autoreleasePoolPop(v34);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v13) {
    CFRelease(v13);
  }
LABEL_82:

  return v35;
}

  objc_autoreleasePoolPop(v6);
}

__CFArray *sub_1000797AC(void *a1)
{
  id v2 = objc_autoreleasePoolPush();
  if (a1)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
    if (Mutable)
    {
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      id v4 = objc_msgSend(a1, "allValues", 0);
      id v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v5)
      {
        id v6 = v5;
        uint64_t v7 = *(void *)v17;
        do
        {
          CFIndex v8 = 0LL;
          do
          {
            if (*(void *)v17 != v7) {
              objc_enumerationMutation(v4);
            }
            uint64_t v9 = *(void *)(*((void *)&v16 + 1) + 8LL * (void)v8);
            uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSDictionary);
            if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
            {
              id v11 = [[CWFNetworkProfile alloc] initWithExternalForm:v9];
              if (v11)
              {
                CFDateRef v12 = v11;
                uint64_t v13 = sub_1000A1DEC(v11, 0LL);
                if (v13)
                {
                  int v14 = v13;
                  CFArrayAppendValue(Mutable, v13);
                  CFRelease(v14);
                }
              }
            }

            CFIndex v8 = (char *)v8 + 1;
          }

          while (v6 != v8);
          id v6 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
        }

        while (v6);
      }
    }
  }

  else
  {
    CFMutableDictionaryRef Mutable = 0LL;
  }

  objc_autoreleasePoolPop(v2);
  return Mutable;
}

uint64_t sub_100079944(uint64_t a1, const __CFString *a2, char a3, char a4)
{
  CFIndex v8 = sub_10006C77C((CFArrayRef)a1);
  uint64_t v9 = v8;
  if (a2 && v8)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v8, 0LL);
    if (CFStringCompare(a2, &stru_1001EB6E0, 0LL) == kCFCompareEqualTo) {
      a2 = @"XZ";
    }
    if (ValueAtIndex)
    {
      uint64_t v11 = sub_1000DD7B4((uint64_t)ValueAtIndex, a2, a3);
      if ((_DWORD)v11)
      {
        uint64_t v12 = sub_1000DD84C((uint64_t)ValueAtIndex);
        if (*(_DWORD *)(a1 + 1760) != (_DWORD)v12)
        {
          uint64_t v13 = v12;
          int v14 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "WiFiMC : band support changed. Before : %d, after : %d",  *(unsigned int *)(a1 + 1760),  v13);
          }
          objc_autoreleasePoolPop(v14);
          *(_DWORD *)(a1 + 1760) = v13;
          sub_10006FAFC((void *)a1, @"WiFiCountryBandSupportKey", v13, 1);
        }
      }
    }

    else
    {
      uint64_t v11 = 0LL;
    }

    goto LABEL_14;
  }

  uint64_t v11 = 0LL;
  if (v8) {
LABEL_14:
  }
    CFRelease(v9);
  uint64_t v15 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    __int128 v16 = "succeeded";
    if (!(_DWORD)v11) {
      __int128 v16 = "failed";
    }
    [(id)qword_100219F60 WFLog:3, "%s: <%@> %s", "WiFiManagerSetLocale", a2, v16 message];
  }

  objc_autoreleasePoolPop(v15);
  if ((_DWORD)v11 == 1) {
    *(_BYTE *)(a1 + 1756) = a4;
  }
  return v11;
}

BOOL sub_100079AD8(unsigned int *a1, uint64_t a2)
{
  id v4 = sub_10006C77C((CFArrayRef)a1);
  id v5 = v4;
  if (a2 && v4)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v4, 0LL);
    if (ValueAtIndex)
    {
      uint64_t v7 = (uint64_t)ValueAtIndex;
      BOOL v8 = sub_1000DD82C((uint64_t)ValueAtIndex, a2);
      if (v8)
      {
        uint64_t v9 = sub_1000DD84C(v7);
        if (a1[440] != (_DWORD)v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "WiFiMC : band support changed. Before : %d, after : %d",  a1[440],  v10);
          }
          objc_autoreleasePoolPop(v11);
          a1[440] = v10;
          sub_10006FAFC(a1, @"WiFiCountryBandSupportKey", v10, 1);
        }
      }
    }

    else
    {
      BOOL v8 = 0LL;
    }

    goto LABEL_12;
  }

  BOOL v8 = 0LL;
  if (v4) {
LABEL_12:
  }
    CFRelease(v5);
  uint64_t v12 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    uint64_t v13 = "succeeded";
    if (!v8) {
      uint64_t v13 = "failed";
    }
    [(id)qword_100219F60 WFLog:3, "%s: <%@> %s", "WiFiManagerGetLocale", a2, v13 message];
  }

  objc_autoreleasePoolPop(v12);
  return v8;
}

uint64_t sub_100079C2C(uint64_t result)
{
  if (result) {
    LOBYTE(result) = [*(id *)(result + 200) getLocaleSource];
  }
  return result;
}

void sub_100079C4C(uint64_t a1, const void *a2)
{
  if (a1)
  {
    id v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: Received companion based country code: %@, was %@", "WiFiManagerSetCompanionCountryCode", a2, *(void *)(a1 + 1768) message];
    }
    objc_autoreleasePoolPop(v4);
    id v5 = *(const void **)(a1 + 1768);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 176_Block_object_dispose((const void *)(v1 - 176), 8) = 0LL;
    }

    if (a2) {
      *(void *)(a1 + 176_Block_object_dispose((const void *)(v1 - 176), 8) = CFRetain(a2);
    }
  }

uint64_t sub_100079CE4(uint64_t result, CFMutableStringRef theString)
{
  if (result)
  {
    id v2 = *(const __CFString **)(result + 1768);
    if (v2) {
      CFStringAppend(theString, v2);
    }
    return 1LL;
  }

  return result;
}

uint64_t sub_100079D10(uint64_t a1, __CFString *a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (!a1) {
    return 0LL;
  }
  double v5 = Current;
  id v6 = sub_100079F14();
  if (v6)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(v6))
    {
      CFPropertyListRef Value = (const __CFDate *)CFDictionaryGetValue(v6, @"countryCodeUserDefaultDate");
      if (Value)
      {
        double AbsoluteTime = CFDateGetAbsoluteTime(Value);
        if (v5 <= AbsoluteTime)
        {
          uint64_t v11 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WiFiCC : last used time is [%f]",  "WiFiManagerGetCountryCodeFromUserDefaults",  *(void *)&AbsoluteTime);
          }
        }

        else
        {
          if (v5 - AbsoluteTime < 5400.0)
          {
            uint64_t v10 = (uint64_t)CFDictionaryGetValue(v6, @"countryCodeUserDefault");
            if (!v10)
            {
LABEL_15:
              CFRelease(v6);
              return v10;
            }

            CFStringAppend(a2, (CFStringRef)v10);
            uint64_t v11 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "%s WiFiCC : Getting Country Code from user defaults : [%@]", "WiFiManagerGetCountryCodeFromUserDefaults", v10 message];
            }
            uint64_t v10 = 1LL;
LABEL_14:
            objc_autoreleasePoolPop(v11);
            goto LABEL_15;
          }

          uint64_t v11 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s WiFiCC : Country Code Data too old. Not using.",  "WiFiManagerGetCountryCodeFromUserDefaults",  v14);
          }
        }
      }

      else
      {
        uint64_t v11 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WiFiCC : last used date is NULL",  "WiFiManagerGetCountryCodeFromUserDefaults",  v14);
        }
      }

      uint64_t v10 = 0LL;
      goto LABEL_14;
    }
  }

  uint64_t v13 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WiFiCC : No Country Code info present in user defaults",  "WiFiManagerGetCountryCodeFromUserDefaults");
  }
  objc_autoreleasePoolPop(v13);
  uint64_t v10 = 0LL;
  uint64_t result = 0LL;
  if (v6) {
    goto LABEL_15;
  }
  return result;
}

CFDictionaryRef sub_100079F14()
{
  CFBooleanRef v0 = +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults");
  if (v0
    && (uint64_t v1 = -[NSUserDefaults dictionaryForKey:](v0, "dictionaryForKey:", @"countryCodeUserDefaultData")) != 0LL
    && (id v2 = (const __CFDictionary *)v1, TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(v2)))
  {
    return CFDictionaryCreateCopy(kCFAllocatorDefault, v2);
  }

  else
  {
    return 0LL;
  }

CFStringRef sub_100079F88()
{
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  CFStringRef v1 = CFStringCreateWithCString(kCFAllocatorDefault, "WiFiManager-1800.35 Nov 10 2024 02:31:56", SystemEncoding);
  if (!v1)
  {
    id v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3 message:"failed to format build info string"];
    }
    objc_autoreleasePoolPop(v2);
  }

  return v1;
}

CFMutableArrayRef sub_10007A000(uint64_t a1)
{
  if (!*(void *)(a1 + 136)) {
    return 0LL;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (Mutable) {
    CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_10007A068, Mutable);
  }
  return Mutable;
}

void sub_10007A068(uint64_t a1, __CFArray *a2)
{
  if (!a1)
  {
    CFIndex v20 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null client", "__WiFiManagerAddNameToArray");
    }
    goto LABEL_22;
  }

  if (!a2)
  {
    CFIndex v20 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null names", "__WiFiManagerAddNameToArray");
    }
    goto LABEL_22;
  }

  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
  if (!Mutable)
  {
    CFIndex v20 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null description", "__WiFiManagerAddNameToArray");
    }
LABEL_22:
    objc_autoreleasePoolPop(v20);
    return;
  }

  double v5 = Mutable;
  unsigned int v6 = sub_10003BEB4(a1);
  if (v6 > 2) {
    uint64_t v7 = @"U";
  }
  else {
    uint64_t v7 = off_1001E45A8[v6];
  }
  CFStringAppend(v5, v7);
  uint64_t v8 = sub_10003BED4(a1);
  CFStringAppendFormat(v5, 0LL, @": [%d]", v8);
  uint64_t v9 = sub_10003BEDC(a1);
  CFStringAppendFormat(v5, 0LL, @"%@: ", v9);
  CFStringAppend(v5, @"{");
  int v10 = sub_10003DC78(a1);
  sub_10008E948(v10, v5);
  CFStringAppend(v5, @" } ");
  uint64_t v11 = (const __CFArray *)sub_10003BEC4(a1);
  uint64_t v12 = sub_10006C77C(v11);
  if (v12)
  {
    uint64_t v13 = v12;
    CFIndex Count = CFArrayGetCount(v12);
    if (Count >= 1)
    {
      CFIndex v15 = Count;
      for (CFIndex i = 0LL; i != v15; ++i)
      {
        CFStringAppend(v5, @"{");
        ValueAtIndex = CFArrayGetValueAtIndex(v13, i);
        uint64_t v18 = sub_10003DCF8(a1, (uint64_t)ValueAtIndex);
        if (v18) {
          sub_10008E948(v18, v5);
        }
        CFStringAppend(v5, @" } ");
      }
    }

    CFArrayAppendValue(a2, v5);
    CFRelease(v5);
    __int128 v19 = v13;
  }

  else
  {
    CFArrayAppendValue(a2, v5);
    __int128 v19 = v5;
  }

  CFRelease(v19);
}

uint64_t sub_10007A2D4(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 1756);
  }
  return result;
}

__CFDictionary *sub_10007A2E0(uint64_t a1)
{
  if (!*(void *)(a1 + 200))
  {
    uint64_t v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null localeManagerUser",  "WiFiManagerCopyLocaleStats");
    }
    goto LABEL_14;
  }

  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    uint64_t v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null localeStatsDict", "WiFiManagerCopyLocaleStats");
    }
LABEL_14:
    objc_autoreleasePoolPop(v11);
    return 0LL;
  }

  id v3 = Mutable;
  unsigned int valuePtr = [*(id *)(a1 + 200) getLocaleSource];
  CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (v4)
  {
    CFNumberRef v5 = v4;
    CFDictionaryAddValue(v3, @"LocaleSource", v4);
    CFRelease(v5);
  }

  [*(id *)(a1 + 200) getLocaleLastUpdatedTime];
  uint64_t v12 = v6;
  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &v12);
  if (v7)
  {
    CFNumberRef v8 = v7;
    CFDictionaryAddValue(v3, @"LocaleLastTimeUpdated", v7);
    CFRelease(v8);
  }

  id v9 = [*(id *)(a1 + 200) getLocaleCountryCode];
  if (v9) {
    CFDictionaryAddValue(v3, @"LocaleCountryCode", v9);
  }
  return v3;
}

void sub_10007A468(uint64_t a1, uint64_t a2)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000068LL;
  v2[2] = a2;
  void v2[3] = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
}

uint64_t sub_10007A4A8(uint64_t a1)
{
  v3[0] = a1;
  v3[1] = 0xAAAAAAAA0000006BLL;
  void v3[2] = 0LL;
  uint64_t v4 = 0LL;
  if (a1)
  {
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v3);
    return v4;
  }

  else
  {
    return 0;
  }

void sub_10007A4FC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v2[0] = a1;
    v2[1] = 0xAAAAAAAA00000036LL;
    v2[2] = a2;
    void v2[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  }

void sub_10007A544(uint64_t a1, int a2)
{
  int v3 = a2;
  if (a1)
  {
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000037LL;
    void context[2] = &v3;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
  }

void sub_10007A594(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v2[0] = a1;
    v2[1] = 0xAAAAAAAA00000040LL;
    v2[2] = a2;
    void v2[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  }

void sub_10007A5DC(uint64_t a1)
{
  keys[0] = @"appPolicyUUID";
  keys[1] = @"appPolicyState";
  values[0] = @"airplay";
  values[1] = kCFBooleanTrue;
  CFDictionaryRef v2 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000041LL;
    void context[2] = v2;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    CFRelease(v3);
  }

void sub_10007A6C8(uint64_t a1)
{
  keys[0] = @"appPolicyUUID";
  keys[1] = @"appPolicyState";
  values[0] = @"airplay";
  values[1] = kCFBooleanFalse;
  CFDictionaryRef v2 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000041LL;
    void context[2] = v2;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    CFRelease(v3);
  }

void sub_10007A7B4(uint64_t a1)
{
  keys[0] = @"appPolicyUUID";
  keys[1] = @"appPolicyState";
  values[0] = @"WiFiCallingUUID";
  values[1] = kCFBooleanTrue;
  CFDictionaryRef v2 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000041LL;
    void context[2] = v2;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    CFRelease(v3);
  }

void sub_10007A8A0(uint64_t a1)
{
  keys[0] = @"appPolicyUUID";
  keys[1] = @"appPolicyState";
  values[0] = @"WiFiCallingUUID";
  values[1] = kCFBooleanFalse;
  CFDictionaryRef v2 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000041LL;
    void context[2] = v2;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    CFRelease(v3);
  }

void sub_10007A98C(uint64_t a1)
{
  CFDictionaryRef v2 = objc_autoreleasePoolPush();
  context[0] = a1;
  context[1] = 0xAAAAAAAA00000073LL;
  void context[2] = 0LL;
  void context[3] = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
  CFRetain((CFTypeRef)a1);
  CFDictionaryRef v3 = *(dispatch_queue_s **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10007AA2C;
  block[3] = &unk_1001E2620;
  void block[4] = a1;
  dispatch_async(v3, block);
  objc_autoreleasePoolPop(v2);
}

void sub_10007AA2C(uint64_t a1)
{
  CFDictionaryRef v2 = sub_10007AF34(*(void **)(a1 + 32), 0);
  CFDictionaryRef v3 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: --- Custom Network Settings start",  "WiFiManagerDumpLogBufferAsync_block_invoke");
  }
  objc_autoreleasePoolPop(v3);
  uint64_t v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: %@", "WiFiManagerDumpLogBufferAsync_block_invoke", v2 message];
  }
  cuint64_t f = v2;
  objc_autoreleasePoolPop(v4);
  CFNumberRef v5 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: --- Custom Network Settings end",  "WiFiManagerDumpLogBufferAsync_block_invoke");
  }
  objc_autoreleasePoolPop(v5);
  uint64_t v44 = a1;
  uint64_t v6 = *(void *)(a1 + 32);
  CFNumberRef v7 = objc_autoreleasePoolPush();
  +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
  double v9 = v8;
  id v10 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  id v11 = objc_msgSend(objc_msgSend(*(id *)(v6 + 944), "dictionaryRepresentation"), "allValues");
  id v12 = [v11 countByEnumeratingWithState:&v49 objects:v54 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v50;
    do
    {
      for (CFIndex i = 0LL; i != v13; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v50 != v14) {
          objc_enumerationMutation(v11);
        }
        uint64_t v16 = *(void *)(*((void *)&v49 + 1) + 8LL * (void)i);
        __int128 v17 = objc_autoreleasePoolPush();
        id v18 = [[CWFNetworkProfile alloc] initWithExternalForm:v16];
        if (v18)
        {
          __int128 v19 = v18;
          if ([v18 lastJoinedAt])
          {
            objc_msgSend(objc_msgSend(v19, "lastJoinedAt"), "timeIntervalSinceReferenceDate");
            if (v9 - v20 <= 86400.0) {
              [v10 addObject:v19];
            }
          }
        }

        objc_autoreleasePoolPop(v17);
      }

      id v13 = [v11 countByEnumeratingWithState:&v49 objects:v54 count:16];
    }

    while (v13);
  }

  id v21 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  id v22 = [v10 countByEnumeratingWithState:&v45 objects:v53 count:16];
  if (v22)
  {
    id v23 = v22;
    uint64_t v24 = *(void *)v46;
    do
    {
      for (CFIndex j = 0LL; j != v23; CFIndex j = (char *)j + 1)
      {
        if (*(void *)v46 != v24) {
          objc_enumerationMutation(v10);
        }
        objc_msgSend( v21,  "setObject:forKeyedSubscript:",  objc_msgSend(*(id *)(*((void *)&v45 + 1) + 8 * (void)j), "externalForm"),  objc_msgSend(*(id *)(*((void *)&v45 + 1) + 8 * (void)j), "identifier"));
      }

      id v23 = [v10 countByEnumeratingWithState:&v45 objects:v53 count:16];
    }

    while (v23);
  }

  uint64_t v26 = CWFConvertPropertyListToJSON(v21, 0LL);
  if (v26)
  {
    uint64_t v27 = +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v26,  0LL,  0LL);
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = -[NSURL path]( -[NSURL URLByAppendingPathComponent:]( -[NSFileManager containerURLForSecurityApplicationGroupIdentifier:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "containerURLForSecurityApplicationGroupIdentifier:",  @"group.com.apple.wifi.logs"),  "URLByAppendingPathComponent:",  @"com.apple.wifi.recent-networks.json"),  "path");
      if (v29)
      {
        uint64_t v30 = v29;
        -[NSFileManager removeItemAtPath:error:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "removeItemAtPath:error:",  v29,  0LL);
        -[NSData writeToFile:atomically:](v28, "writeToFile:atomically:", v30, 1LL);
      }
    }
  }

  objc_autoreleasePoolPop(v7);
  uint64_t v31 = *(void *)(v44 + 32);
  if (!v31)
  {
    id v42 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null manager", "__WiFiManagerDumpHS20Networks");
    }
    goto LABEL_51;
  }

  CFTypeID v32 = *(const __CFArray **)(v31 + 224);
  if (!v32)
  {
    id v42 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null manager->networks",  "__WiFiManagerDumpHS20Networks");
    }
LABEL_51:
    objc_autoreleasePoolPop(v42);
    goto LABEL_44;
  }

  CFIndex Count = CFArrayGetCount(v32);
  if (Count >= 1)
  {
    CFIndex v34 = Count;
    uint64_t v35 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: --- HS 2.0 Networks",  "__WiFiManagerDumpHS20Networks");
    }
    objc_autoreleasePoolPop(v35);
    for (CFIndex k = 0LL; k != v34; ++k)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v31 + 224), k);
      if (sub_100095318((BOOL)ValueAtIndex))
      {
        CFMutableDictionaryRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
        if (Mutable)
        {
          CFIndex v39 = Mutable;
          sub_10009CF6C((uint64_t)ValueAtIndex, Mutable);
          BOOL v40 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:3, "%s: HS20 Account Info:%@", "__WiFiManagerDumpHS20Networks", v39 message];
          }
          objc_autoreleasePoolPop(v40);
          CFRelease(v39);
        }

        else
        {
          BOOL v41 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Could not allocate buffer for HS 2.0 info",  "__WiFiManagerDumpHS20Networks");
          }
          objc_autoreleasePoolPop(v41);
        }
      }
    }
  }

CFDictionaryRef sub_10007AF34(void *a1, int a2)
{
  uint64_t v4 = +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults");
  CFNumberRef v5 = -[NSUserDefaults dictionaryForKey:](v4, "dictionaryForKey:", @"Custom network settings");
  if (v5) {
    return CFDictionaryCreateCopy(kCFAllocatorDefault, v5);
  }
  uint64_t v6 = sub_10006AA50(a1, @"Custom network settings");
  if (!v6)
  {
    CFNumberRef v7 = -[NSUserDefaults initWithSuiteName:]( objc_alloc(&OBJC_CLASS___NSUserDefaults),  "initWithSuiteName:",  @"wifid");
    if (!v7) {
      return 0LL;
    }
    double v8 = v7;
    double v9 = -[NSUserDefaults dictionaryForKey:](v7, "dictionaryForKey:", @"Custom network settings");
    if (v9)
    {
      id v10 = v9;
      id v11 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: found custom network settings list in legacy NSUserDefaults",  "__WiFiManagerCopyCustomNetworkSettingsFromUserDefaults");
      }
      objc_autoreleasePoolPop(v11);
      -[NSUserDefaults setObject:forKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "setObject:forKey:",  v10,  @"Custom network settings");
      CFNumberRef v5 = -[NSUserDefaults dictionaryForKey:](v4, "dictionaryForKey:", @"Custom network settings");
    }

    else
    {
      CFNumberRef v5 = 0LL;
    }

    if (!v5) {
      return 0LL;
    }
    return CFDictionaryCreateCopy(kCFAllocatorDefault, v5);
  }

  -[NSUserDefaults setObject:forKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "setObject:forKey:",  v6,  @"Custom network settings");
  sub_10006D08C(a1, @"Custom network settings", 0LL, a2);
  CFNumberRef v5 = -[NSUserDefaults dictionaryForKey:](v4, "dictionaryForKey:", @"Custom network settings");
  if (v5) {
    return CFDictionaryCreateCopy(kCFAllocatorDefault, v5);
  }
  return 0LL;
}

void sub_10007B0B0(uint64_t a1, CFDictionaryRef theDict)
{
  unsigned int valuePtr = 0;
  if (!theDict)
  {
    id v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null testParams", "WiFiManagerSetTestParams");
    }
    goto LABEL_26;
  }

  if (!a1)
  {
    id v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null manager", "WiFiManagerSetTestParams");
    }
    goto LABEL_26;
  }

  CFPropertyListRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"WiFiTestCommandType");
  if (!Value)
  {
    id v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null cmdNum", "WiFiManagerSetTestParams");
    }
LABEL_26:
    objc_autoreleasePoolPop(v11);
    return;
  }

  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, theDict);
  if (MutableCopy)
  {
    uint64_t v6 = MutableCopy;
    if (valuePtr < 0x65)
    {
      switch(valuePtr)
      {
        case 5u:
          CFNumberRef v7 = *(dispatch_queue_s **)(a1 + 32);
          uint64_t context = _NSConcreteStackBlock;
          unint64_t v15 = 3221225472LL;
          uint64_t v16 = sub_10008F100;
          uint64_t v17 = (uint64_t)&unk_1001E2620;
          uint64_t v18 = a1;
          dispatch_async(v7, &context);
          break;
        case 2u:
          CFBooleanRef v8 = (CFBooleanRef)CFDictionaryGetValue(MutableCopy, @"wowStateOverride");
          if (v8)
          {
            int v9 = v8 == kCFBooleanTrue;
            if (*(unsigned __int8 *)(a1 + 995) != v9)
            {
              *(_BYTE *)(a1 + 995) = v9;
              sub_10006E6B8(a1, 0LL, *(unsigned __int8 *)(a1 + 994), 2);
            }
          }

          id v10 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WoW Parameters: WoWEnable %d WoWOverrideState %d lpasEnable %d",  "__WiFiManagerSetWoWTestParams",  *(unsigned __int8 *)(a1 + 992),  *(unsigned __int8 *)(a1 + 995),  *(unsigned __int8 *)(a1 + 994));
          }
          objc_autoreleasePoolPop(v10);
          break;
        case 1u:
          sub_100071B18((void *)a1, @"LocaleTestParams", MutableCopy);
          sub_10006A9A0(a1, v6);
          break;
      }
    }

    else
    {
      uint64_t context = (void **)a1;
      unint64_t v15 = 0xAAAAAAAA00000038LL;
      uint64_t v16 = (void (*)(uint64_t))MutableCopy;
      uint64_t v17 = 1LL;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
    }

    CFRelease(v6);
  }

  else
  {
    id v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null mutableTestParams", "WiFiManagerSetTestParams");
    }
    objc_autoreleasePoolPop(v12);
  }

NSMutableDictionary *sub_10007B374(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  unsigned int valuePtr = 0;
  if (!a2)
  {
    CFIndex v34 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null testParams",  "WiFiManagerSetTestParamsAndCopyResponse");
    }
    goto LABEL_73;
  }

  if (!a1)
  {
    CFIndex v34 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null manager",  "WiFiManagerSetTestParamsAndCopyResponse");
    }
    goto LABEL_73;
  }

  CFPropertyListRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"WiFiTestCommandType");
  if (!Value)
  {
    CFIndex v34 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null cmdNum",  "WiFiManagerSetTestParamsAndCopyResponse");
    }
    goto LABEL_73;
  }

  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, a2);
  if (!MutableCopy)
  {
    CFIndex v34 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: null mutableTestParams",  "WiFiManagerSetTestParamsAndCopyResponse");
    }
LABEL_73:
    objc_autoreleasePoolPop(v34);
    CFBooleanRef v8 = 0LL;
    goto LABEL_15;
  }

  CFMutableDictionaryRef v7 = MutableCopy;
  if (valuePtr >= 0x65)
  {
    uint64_t context = (void **)a1;
    unint64_t v37 = 0xAAAAAAAA00000038LL;
    CFIndex v38 = (uint64_t (*)(uint64_t, uint64_t))MutableCopy;
    uint64_t v39 = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
LABEL_13:
    CFBooleanRef v8 = 0LL;
    goto LABEL_14;
  }

  if (valuePtr == 4)
  {
    id v11 = objc_autoreleasePoolPush();
    uint64_t v42 = 0LL;
    id v43 = &v42;
    uint64_t v44 = 0x2020000000LL;
    uint64_t v45 = 0LL;
    id v12 = dispatch_semaphore_create(0LL);
    if (!+[WiFiAnalyticsManager sharedWiFiAnalyticsManager]( &OBJC_CLASS___WiFiAnalyticsManager,  "sharedWiFiAnalyticsManager"))
    {
      unint64_t v15 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: sharedWiFiAnalyticsManager is nil",  "__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse");
      }
      goto LABEL_39;
    }

    if (!objc_msgSend( +[WiFiAnalyticsManager sharedWiFiAnalyticsManager]( WiFiAnalyticsManager,  "sharedWiFiAnalyticsManager"),  "deviceAnalyticsClient"))
    {
      unint64_t v15 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: analyticsClient is nil",  "__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse");
      }
      goto LABEL_39;
    }

    if (-[__CFDictionary objectForKey:](v7, "objectForKey:", @"dump"))
    {
      id v13 = objc_msgSend( +[WiFiAnalyticsManager sharedWiFiAnalyticsManager]( WiFiAnalyticsManager,  "sharedWiFiAnalyticsManager"),  "deviceAnalyticsClient");
      uint64_t context = _NSConcreteStackBlock;
      unint64_t v37 = 3221225472LL;
      CFIndex v38 = sub_10008EB4C;
      uint64_t v39 = (uint64_t)&unk_1001E4480;
      BOOL v40 = v12;
      BOOL v41 = &v42;
      dispatch_time_t v14 = dispatch_time(0LL, 60000000000LL);
      if (!dispatch_semaphore_wait(v12, v14)) {
        goto LABEL_40;
      }
      unint64_t v15 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4 message:"Gave up waiting to get Device Analytics Store Dump. Bailing"];
      }
    }

    else if (-[__CFDictionary objectForKey:](v7, "objectForKey:", @"roamTriggerRssi"))
    {
      id v16 = -[__CFDictionary objectForKey:](v7, "objectForKey:", @"roamTriggerRssi");
      uint64_t v17 = -[NSNumber initWithInteger:]( [NSNumber alloc],  "initWithInteger:",  objc_msgSend( objc_msgSend( +[WiFiAnalyticsManager sharedWiFiAnalyticsManager]( WiFiAnalyticsManager,  "sharedWiFiAnalyticsManager"),  "deviceAnalyticsClient"),  "rssiRoamTriggerForBSS:ssid:",  objc_msgSend(v16, "objectForKey:", @"bssid"),  objc_msgSend(v16, "objectForKey:", @"ssid")));
      v43[3] = (uint64_t)v17;
      unint64_t v15 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s RoamTrigger :%d",  "__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse",  objc_msgSend((id)v43[3], "intValue"));
      }
    }

    else if (-[__CFDictionary objectForKey:](v7, "objectForKey:", @"neighborChannels"))
    {
      id v18 = -[__CFDictionary objectForKey:](v7, "objectForKey:", @"neighborChannels");
      id v19 = objc_msgSend( objc_msgSend( +[WiFiAnalyticsManager sharedWiFiAnalyticsManager]( WiFiAnalyticsManager,  "sharedWiFiAnalyticsManager"),  "deviceAnalyticsClient"),  "neighborChannelsForBSS:ssid:",  objc_msgSend(v18, "objectForKey:", @"bssid"),  objc_msgSend(v18, "objectForKey:", @"ssid"));
      if (v19)
      {
        double v20 = -[NSArray initWithArray:](objc_alloc(&OBJC_CLASS___NSArray), "initWithArray:", v19);
        v43[3] = (uint64_t)v20;
      }

      unint64_t v15 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s neighborChannelsForBSS :%@", "__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse", v43[3] message];
      }
    }

    else if (-[__CFDictionary objectForKey:](v7, "objectForKey:", @"neighborBSSIDs"))
    {
      id v21 = -[__CFDictionary objectForKey:](v7, "objectForKey:", @"neighborBSSIDs");
      id v22 = objc_msgSend( objc_msgSend( +[WiFiAnalyticsManager sharedWiFiAnalyticsManager]( WiFiAnalyticsManager,  "sharedWiFiAnalyticsManager"),  "deviceAnalyticsClient"),  "neighborsForBSS:ssid:",  objc_msgSend(v21, "objectForKey:", @"bssid"),  objc_msgSend(v21, "objectForKey:", @"ssid"));
      if (v22)
      {
        id v23 = -[NSArray initWithArray:](objc_alloc(&OBJC_CLASS___NSArray), "initWithArray:", v22);
        v43[3] = (uint64_t)v23;
      }

      unint64_t v15 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s neighborsForBSS :%@", "__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse", v43[3] message];
      }
    }

    else
    {
      if (-[__CFDictionary objectForKey:](v7, "objectForKey:", @"resetIntervals"))
      {
        uint64_t v24 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", 86400.0);
        int v25 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", 4233600.0);
        uint64_t v26 = +[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", 0LL);
        id v27 = 0LL;
      }

      else
      {
        uint64_t v24 = (NSNumber *)-[__CFDictionary valueForKey:](v7, "valueForKey:", @"procIntervalSecs");
        int v25 = (NSNumber *)-[__CFDictionary valueForKey:](v7, "valueForKey:", @"ageOutIntervalSecs");
        uint64_t v26 = (NSNumber *)-[__CFDictionary valueForKey:](v7, "valueForKey:", @"ageOutTestDaysDiff");
        id v27 = -[__CFDictionary valueForKey:](v7, "valueForKey:", @"roamSamples");
      }

      if (v24 || v25 || v26)
      {
        id v28 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
        if (v24)
        {
          -[NSNumber doubleValue](v24, "doubleValue");
          if (v29 < 0.0)
          {
            unint64_t v15 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: invalid procIntervalSecs",  "__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse");
            }
            goto LABEL_39;
          }

          [v28 setObject:v24 forKey:@"WA_DEVICE_ANALYTICS_PROCESSING_INTERVAL"];
        }

        if (v25)
        {
          -[NSNumber doubleValue](v25, "doubleValue");
          if (v30 < 0.0)
          {
            unint64_t v15 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: invalid ageOutIntervalNum",  "__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse");
            }
            goto LABEL_39;
          }

          [v28 setObject:v25 forKey:@"WA_DEVICE_ANALYTICS_AGE_OUT_INTERVAL"];
        }

        if (v26)
        {
          -[NSNumber unsignedLongValue](v26, "unsignedLongValue");
          [v28 setObject:v26 forKey:@"WA_DEVICE_ANALYTICS_CONFIG_AGE_OUT_TEST_DAYS_DIFF"];
        }

        if (v27)
        {
          [v27 unsignedLongValue];
          [v28 setObject:v27 forKey:@"WA_DEVICE_ANALYTICS_CONFIG_ROAM_SAMPLES"];
        }

        uint64_t v31 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: Setting configuration: %s", "__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse", -[NSString UTF8String]( +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@", v28), "UTF8String") message];
        }
        objc_autoreleasePoolPop(v31);
        -[WiFiManagerAnalytics setDeviceAnalyticsConfiguration:]( +[WiFiManagerAnalytics sharedInstance](&OBJC_CLASS___WiFiManagerAnalytics, "sharedInstance"),  "setDeviceAnalyticsConfiguration:",  v28);
        CFTypeID v32 = +[WiFiManagerAnalytics sharedInstance](&OBJC_CLASS___WiFiManagerAnalytics, "sharedInstance");
        uint64_t context = _NSConcreteStackBlock;
        unint64_t v37 = 3221225472LL;
        CFIndex v38 = sub_10008EBE0;
        uint64_t v39 = (uint64_t)&unk_1001E44A8;
        BOOL v40 = v12;
        BOOL v41 = &v42;
        -[WiFiManagerAnalytics getDeviceAnalyticsConfigurationWithCompletion:]( v32,  "getDeviceAnalyticsConfigurationWithCompletion:",  &context);
        dispatch_time_t v33 = dispatch_time(0LL, 60000000000LL);
        if (!dispatch_semaphore_wait(v12, v33)) {
          goto LABEL_40;
        }
        unint64_t v15 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:4 message:"Gave up waiting to getDeviceAnalyticsConfigurationWithCompletion. Bailing"];
        }
        goto LABEL_39;
      }

      unint64_t v15 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:4, "%s: Invalid configuration %s", "__WiFiManagerDeviceAnalyticsTestParamsAndCopyResponse", -[NSString UTF8String]( +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@", v7), "UTF8String") message];
      }
    }

void sub_10007BCC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10007BD10(CFArrayRef *a1, void *a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: Checking password and network status for %@", "WiFiManagerCheckForUnexpectedPasswordDelete", sub_100095BC8(a2) message];
  }
  objc_autoreleasePoolPop(v4);
  if (CFArrayGetCount(a1[275]))
  {
    uint64_t v24 = objc_autoreleasePoolPush();
    uint64_t v25 = qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_41;
    }
    CFIndex Count = CFArrayGetCount(a1[275]);
    uint64_t v26 = "%s: Already have remembered a network with a missing password, count: %ld";
LABEL_37:
    id v27 = (void *)v25;
LABEL_40:
    objc_msgSend(v27, "WFLog:message:", 3, v26, "WiFiManagerCheckForUnexpectedPasswordDelete", Count);
    goto LABEL_41;
  }

  if (!sub_100098BF8((uint64_t)a2))
  {
    uint64_t v24 = objc_autoreleasePoolPush();
    uint64_t v25 = qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_41;
    }
    CFIndex Count = (CFIndex)sub_100095BC8(a2);
    uint64_t v26 = "%s: %@ does not require a password, disqualified from possible password-missing TTR";
    goto LABEL_37;
  }

  if (sub_100095B4C((uint64_t)a2))
  {
    uint64_t v24 = objc_autoreleasePoolPush();
    uint64_t v25 = qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_41;
    }
    CFIndex Count = (CFIndex)sub_100095BC8(a2);
    uint64_t v26 = "%s: %@ is an EAP network, disqualified from possible password-missing TTR";
    goto LABEL_37;
  }

  CFNumberRef v5 = sub_10006C77C((CFArrayRef)a1);
  if (!v5)
  {
    uint64_t v24 = objc_autoreleasePoolPush();
    id v27 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      uint64_t v26 = "%s: null device managers array";
      goto LABEL_40;
    }

void sub_10007C0BC(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 1224) = a2;
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA0000002ALL;
  v2[2] = 0LL;
  void v2[3] = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
}

void sub_10007C104(uint64_t a1, int a2, int a3, int a4, int a5)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 1216) != a2
      || *(unsigned __int8 *)(a1 + 1220) != a3
      || *(unsigned __int8 *)(a1 + 1221) != a4
      || *(unsigned __int8 *)(a1 + 1222) != a5)
    {
      *(_DWORD *)(a1 + 1216) = a2;
      *(_BYTE *)(a1 + 1220) = a3;
      *(_BYTE *)(a1 + 1221) = a4;
      *(_BYTE *)(a1 + 1222) = a5;
      context[0] = a1;
      context[1] = 0xAAAAAAAA00000029LL;
      void context[2] = 0LL;
      void context[3] = 1LL;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    }
  }

  else
  {
    CFNumberRef v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null manager", "WiFiManagerSetLQASettings");
    }
    objc_autoreleasePoolPop(v5);
  }

void sub_10007C1DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  if (a1)
  {
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s", "WiFiManagerSetCoexMgrXpcObj");
    }
    objc_autoreleasePoolPop(v4);
    *(void *)(a1 + 1152) = a2;
  }

  else
  {
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: null manager", "WiFiManagerSetCoexMgrXpcObj");
    }
    objc_autoreleasePoolPop(v4);
  }

void sub_10007C288(uint64_t a1, double a2)
{
  double v4 = a2;
  if (a1)
  {
    context[0] = a1;
    context[1] = 0xAAAAAAAA0000005ELL;
    void context[2] = &v4;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
  }

  else
  {
    CFDictionaryRef v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: manager ref is null",  "WiFiManagerSetNANOffHeadConnectionExpiry");
    }
    objc_autoreleasePoolPop(v2);
  }

double sub_10007C328(const __CFArray *a1)
{
  CFStringRef v1 = sub_10006C77C(a1);
  if (!v1) {
    return 0.0;
  }
  CFDictionaryRef v2 = v1;
  ValueAtIndex = CFArrayGetValueAtIndex(v1, 0LL);
  if (ValueAtIndex)
  {
    double v4 = sub_1000EA5B0((uint64_t)ValueAtIndex);
  }

  else
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: deviceManager is NULL!",  "WiFiManagerGetNANOffHeadConnectionExpiry");
    }
    objc_autoreleasePoolPop(v6);
    double v4 = 0.0;
  }

  CFRelease(v2);
  return v4;
}

void sub_10007C3C8(uint64_t a1, const void *a2, unsigned int a3, int a4, int a5)
{
  *(_BYTE *)(a1 + 1832) = 1;
  context[0] = a1;
  context[1] = 0xAAAAAAAA0000004BLL;
  void context[2] = 0LL;
  void context[3] = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
  if (sub_10007C66C(a1))
  {
    sub_10007C7AC((id)a1);
    sub_10007C918(a1, a3);
    if (a3)
    {
      id v10 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Enable AutoJoin On Companion AAJ trigger",  "WiFiManagerSetCompanionAssistedAutoJoin");
      }
      objc_autoreleasePoolPop(v10);
      sub_10006B570(a1, 1);
    }
  }

  *(_BYTE *)(a1 + 132_Block_object_dispose(va, 8) = a2 != 0LL;
  id v11 = *(const void **)(a1 + 1336);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 1336) = 0LL;
  }

  if (a2) {
    CFTypeRef v12 = CFRetain(a2);
  }
  else {
    CFTypeRef v12 = 0LL;
  }
  *(void *)(a1 + 1336) = v12;
  int v13 = *(unsigned __int8 *)(a1 + 1328);
  CFDateRef v14 = objc_autoreleasePoolPush();
  if (v13)
  {
    if (qword_100219F60)
    {
      uint64_t v15 = *(unsigned __int8 *)(a1 + 16);
      if (*(_BYTE *)(a1 + 16)) {
        uint64_t v15 = *(_BYTE *)(a1 + 24) != 0;
      }
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: is autojoin enabled %d",  "WiFiManagerSetCompanionAssistedAutoJoin",  v15);
    }

    objc_autoreleasePoolPop(v14);
    if (*(_BYTE *)(a1 + 16) && *(_BYTE *)(a1 + 24))
    {
      *(_DWORD *)(a1 + 1352) = a4;
      *(_DWORD *)(a1 + 1356) = a5;
      uint64_t v17 = *(dispatch_source_s **)(a1 + 1344);
      dispatch_time_t v18 = dispatch_time(0LL, 30000000000LL);
      dispatch_source_set_timer(v17, v18, 0xFFFFFFFFFFFFFFFFLL, 0LL);
      sub_10007C9BC(a1, a5, 1);
      id v19 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: ###START_CAAJ",  "WiFiManagerSetCompanionAssistedAutoJoin");
      }
      objc_autoreleasePoolPop(v19);
    }
  }

  else
  {
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: ###STOP_CAAJ",  "WiFiManagerSetCompanionAssistedAutoJoin");
    }
    objc_autoreleasePoolPop(v14);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 1344), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    sub_10007C9BC(a1, 0, 0);
  }

  sub_100061B50(v16, 2LL, a1);
  sub_100063560(a1);
  sub_100063998(a1, *(const __CFArray **)(a1 + 232));
}

void sub_10007C628(uint64_t a1)
{
  v1[0] = a1;
  v1[1] = 0xAAAAAAAA0000004BLL;
  v1[2] = 0LL;
  v1[3] = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v1);
}

BOOL sub_10007C66C(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null manager.", "WiFiManagerIsAlwaysOnWiFiEnabled");
    }
    goto LABEL_16;
  }

  if (!sub_1000653FC(a1))
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: user auto-join disabled.",  "WiFiManagerIsAlwaysOnWiFiEnabled");
    }
LABEL_16:
    objc_autoreleasePoolPop(v6);
    return 0LL;
  }

  context[0] = a1;
  context[1] = 0xAAAAAAAA00000048LL;
  void context[2] = 0LL;
  uint64_t v8 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
  if ((_BYTE)v8) {
    BOOL v2 = sub_10007CA0C(a1) == 0;
  }
  else {
    BOOL v2 = 0LL;
  }
  CFDictionaryRef v3 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    double v4 = "Disabled";
    if (v2) {
      double v4 = "Enabled";
    }
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "AlwaysOnWiFi: %s", v4);
  }

  objc_autoreleasePoolPop(v3);
  return v2;
}

id sub_10007C7AC(id result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    BOOL v2 = objc_autoreleasePoolPush();
    CFDictionaryRef v3 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      if (CFSetGetCount(*(CFSetRef *)(v1 + 144))) {
        double v4 = "present";
      }
      else {
        double v4 = "not present";
      }
      objc_msgSend(v3, "WFLog:message:", 3, "%s: background client %s", "WiFiManagerUpdateAlwaysOnWiFiParameters", v4);
    }

    objc_autoreleasePoolPop(v2);
    CFNumberRef v5 = objc_autoreleasePoolPush();
    uint64_t v6 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      if (CFSetGetCount(*(CFSetRef *)(v1 + 168))) {
        CFMutableDictionaryRef v7 = "present";
      }
      else {
        CFMutableDictionaryRef v7 = "not present";
      }
      objc_msgSend(v6, "WFLog:message:", 3, "%s: Cloud client %s", "WiFiManagerUpdateAlwaysOnWiFiParameters", v7);
    }

    objc_autoreleasePoolPop(v5);
    if (sub_10007C66C(v1)) {
      int v8 = 1;
    }
    else {
      int v8 = sub_10007CA40(v1);
    }
    sub_100070298(v1, v8);
    context[0] = v1;
    context[1] = 0xAAAAAAAA00000049LL;
    void context[2] = 0LL;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(v1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    return [*(id *)(v1 + 2144) updateWowState:*(_BYTE *)(v1 + 992) != 0 lpasState:*(_BYTE *)(v1 + 1008) != 0 lowPowerState:*(_BYTE *)(v1 + 994) != 0 batterySaverState:*(void *)(v1 + 1368) != 0];
  }

  return result;
}

void sub_10007C918(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    *(_BYTE *)(a1 + 1981) = a2;
    double v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Updating companion WiFi state %d\n",  "WiFiManagerSetCompanionWiFiState",  a2);
    }
    objc_autoreleasePoolPop(v4);
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000075LL;
    void context[2] = 0LL;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
  }

void sub_10007C9BC(uint64_t a1, int a2, char a3)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 1976) = a2;
    *(_BYTE *)(a1 + 1980) = a3;
    v3[0] = a1;
    v3[1] = 0xAAAAAAAA00000074LL;
    void v3[2] = 0LL;
    void v3[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v3);
  }

uint64_t sub_10007CA0C(uint64_t a1)
{
  if (CFSetGetCount(*(CFSetRef *)(a1 + 144))) {
    return 1LL;
  }
  else {
    return (uint64_t)objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "isBackgroundActivityRegistered");
  }
}

uint64_t sub_10007CA40(uint64_t a1)
{
  if (CFSetGetCount(*(CFSetRef *)(a1 + 168))) {
    return 1LL;
  }
  else {
    return (uint64_t)objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "isWiFiBoundActivityRegistered");
  }
}

uint64_t sub_10007CA74(uint64_t a1)
{
  if (CFSetGetCount(*(CFSetRef *)(a1 + 152))) {
    return 1LL;
  }
  else {
    return (uint64_t)objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "isForegroundActivityRegistered");
  }
}

uint64_t sub_10007CAA8(uint64_t a1)
{
  if (CFSetGetCount(*(CFSetRef *)(a1 + 1000))) {
    return 1LL;
  }
  else {
    return (uint64_t)objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "isWoWActivityRegistered");
  }
}

uint64_t sub_10007CADC(uint64_t a1)
{
  else {
    return sub_10007CA40(a1);
  }
}

uint64_t sub_10007CB2C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1320);
}

uint64_t sub_10007CB34(void *a1)
{
  uint64_t v1 = sub_10007CBB0(a1, @"WiFiCountryBandSupportKey", 3LL);
  BOOL v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WiFiCC : CountryBandSupport = %d",  "WiFiManagerGetCountryBandSupport",  v1);
  }
  objc_autoreleasePoolPop(v2);
  return v1;
}

uint64_t sub_10007CBB0(void *a1, const __CFString *a2, uint64_t a3)
{
  double v4 = sub_10006AA50(a1, a2);
  uint64_t valuePtr = a3;
  if (v4)
  {
    CFNumberRef v5 = v4;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v5))
    {
      CFNumberGetValue(v5, kCFNumberCFIndexType, &valuePtr);
      return valuePtr;
    }
  }

  return a3;
}

void sub_10007CC1C(uint64_t a1, uint64_t a2)
{
  if (a2 <= 0x64)
  {
    context[8] = v2;
    context[9] = v3;
    if (*(_DWORD *)(a1 + 1320) != (_DWORD)a2)
    {
      kdebug_trace(731381816LL, 0LL, 0LL, 0LL, 0LL);
      uint64_t v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "setting thermal index from %d to %d",  *(unsigned int *)(a1 + 1320),  a2);
      }
      objc_autoreleasePoolPop(v6);
      *(_DWORD *)(a1 + 1320) = a2;
      context[0] = a1;
      context[1] = 0xAAAAAAAA00000044LL;
      void context[2] = a2;
      void context[3] = 1LL;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    }
  }

void sub_10007CCE8(uint64_t a1, int a2, const void *a3)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:4, "InCar notificaion received. UUID %@", a3 message];
  }
  objc_autoreleasePoolPop(v6);
  sub_10007CD78(a1, a2, a3);
}

void sub_10007CD78(uint64_t a1, int a2, CFTypeRef cf)
{
  if (*(unsigned __int8 *)(a1 + 1280) != a2)
  {
    uint64_t v6 = *(const void **)(a1 + 1288);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 128_Block_object_dispose(va, 8) = 0LL;
    }

    *(_BYTE *)(a1 + 1280) = a2;
    if (a2)
    {
      *(void *)(a1 + 128_Block_object_dispose(va, 8) = CFRetain(cf);
      if (*(_BYTE *)(a1 + 1161) && !*(_BYTE *)(a1 + 26))
      {
        *(_BYTE *)(a1 + 1280) = 0;
        *(_BYTE *)(a1 + 1296) = 1;
        return;
      }

      *(_BYTE *)(a1 + 1296) = 0;
      CFMutableDictionaryRef v7 = *(dispatch_source_s **)(a1 + 1304);
      dispatch_time_t v8 = dispatch_time(0LL, 30000000000LL);
      dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0LL);
      uint64_t context = a1;
      unint64_t v24 = 0xAAAAAA0100000042LL;
      unint64_t v25 = 0xAAAAAAAA00000001LL;
    }

    else
    {
      dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 1304), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
      uint64_t context = a1;
      unint64_t v24 = 0xAAAAAA0000000042LL;
      unint64_t v25 = 0xAAAAAAAA00000000LL;
    }

    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, &context);
    sub_100061B50(v9, 2LL, a1);
    sub_100063560(a1);
    if (!*(_BYTE *)(a1 + 1280)) {
      goto LABEL_17;
    }
    id v10 = *(const __CFArray **)(a1 + 232);
    CFIndex Count = CFArrayGetCount(v10);
    if (Count < 1) {
      goto LABEL_17;
    }
    CFIndex v12 = Count;
    CFIndex v13 = 0LL;
    while (1)
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(v10, v13);
      if (ValueAtIndex)
      {
        uint64_t v15 = ValueAtIndex;
        uint64_t v16 = (const __CFString *)sub_1000951FC((uint64_t)ValueAtIndex, @"CARPLAY_UUID");
        if (v16)
        {
          uint64_t v17 = *(const __CFString **)(a1 + 1288);
          if (v17)
          {
            if (CFStringCompare(v16, v17, 0LL) == kCFCompareEqualTo) {
              break;
            }
          }
        }
      }

      if (v12 == ++v13) {
        goto LABEL_17;
      }
    }

    if (sub_10009A128((uint64_t)v15)
      || (dispatch_time_t v18 = (const __CFString *)sub_1000951FC((uint64_t)v15, @"networkDisabledReason")) == 0LL
      || CFStringCompare(v18, @"UserDisabledCarPlay", 0LL))
    {
LABEL_17:
      sub_100063998(a1, *(const __CFArray **)(a1 + 232));
    }

    else
    {
      sub_10009582C((uint64_t)v15, @"enabled", kCFBooleanTrue);
      sub_100077498(a1, v15, 1u);
      id v19 = objc_autoreleasePoolPush();
      double v20 = (void *)qword_100219F60;
      if (qword_100219F60)
      {
        uint64_t v21 = *(void *)(a1 + 1288);
        id v22 = sub_100095BC8(v15);
        [v20 WFLog:3, "%s: Enabling CarPlay auto join for UUID %@ network %@", "__WiFiManagerEnableAutoJoinForCarPlay", v21, v22, context, v24, v25 message];
      }

      objc_autoreleasePoolPop(v19);
    }
  }

void sub_10007D000(const __CFArray *a1, const void *a2)
{
  if (a1)
  {
    double v4 = sub_10007D140(a1);
    if (v4)
    {
      CFNumberRef v5 = v4;
      if (sub_10009E120((uint64_t)v4) == 1 && sub_10009A128((uint64_t)v5))
      {
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFDateRef v7 = CFDateCreate(kCFAllocatorDefault, Current);
        if (v7)
        {
          CFDateRef v8 = v7;
          sub_10009582C((uint64_t)v5, @"networkDisabledTimestamp", v7);
          CFRelease(v8);
        }

        sub_10009582C((uint64_t)v5, @"networkDisabledClientName", a2);
        sub_10009582C((uint64_t)v5, @"networkDisabledReason", @"UserDisabledCarPlay");
        sub_10009582C((uint64_t)v5, @"enabled", kCFBooleanFalse);
        sub_100077498((uint64_t)a1, v5, 1u);
        uint64_t v9 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Disabling CarPlay auto join until next incar comes.",  "WiFiManagerDisableAutoJoinForCarPlay");
        }
        objc_autoreleasePoolPop(v9);
      }

      CFRelease(v5);
    }
  }

void *sub_10007D140(const __CFArray *a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v1 = sub_10006C77C(a1);
  if (!v1)
  {
    CFIndex v12 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: failed to get device managers",  "__WiFiManagerCopyCurrentNetwork");
    }
    objc_autoreleasePoolPop(v12);
    return 0LL;
  }

  uint64_t v2 = v1;
  CFIndex Count = CFArrayGetCount(v1);
  if (Count < 1)
  {
LABEL_9:
    id v10 = 0LL;
  }

  else
  {
    CFIndex v4 = Count;
    CFIndex v5 = 0LL;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, v5);
      uint64_t v7 = sub_10003BEDC((uint64_t)ValueAtIndex);
      if (v7)
      {
        CFDateRef v8 = (const void *)sub_10004CE2C(v7);
        if (v8)
        {
          uint64_t v9 = sub_1000D3348((uint64_t)ValueAtIndex, v8);
          if (v9) {
            break;
          }
        }
      }

      if (v4 == ++v5) {
        goto LABEL_9;
      }
    }

    id v10 = v9;
  }

  CFRelease(v2);
  return v10;
}

void sub_10007D224(uint64_t a1, const __CFDictionary *a2)
{
  if (a1 && a2)
  {
    CFIndex v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: params %@", "WiFiManagerSetCarplayParams", a2 message];
    }
    objc_autoreleasePoolPop(v4);
    CFPropertyListRef Value = (const __CFString *)CFDictionaryGetValue(a2, @"carplayNotificationKey");
    if (Value)
    {
      uint64_t v6 = Value;
      if (CFStringCompare(Value, @"carplayNotificationInCar", 0LL))
      {
        if (CFStringCompare(v6, @"carplayNotificationOutOfCar", 0LL))
        {
          uint64_t v7 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:4, "%s: unknown notification %@", "WiFiManagerSetCarplayParams", v6 message];
          }
LABEL_16:
          objc_autoreleasePoolPop(v7);
          return;
        }

        uint64_t v10 = a1;
        int v11 = 0;
        uint64_t v9 = 0LL;
      }

      else
      {
        CFDateRef v8 = CFDictionaryGetValue(a2, @"CARPLAY_UUID");
        if (!v8)
        {
          uint64_t v7 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            [(id)qword_100219F60 WFLog:4, "%s: UUID is missing for %@", "WiFiManagerSetCarplayParams", v6 message];
          }
          goto LABEL_16;
        }

        uint64_t v9 = v8;
        uint64_t v10 = a1;
        int v11 = 1;
      }

      sub_10007CD78(v10, v11, v9);
    }
  }

__CFDictionary *sub_10007D398(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  uint64_t v3 = Mutable;
  if (Mutable)
  {
    CFIndex v4 = @"carplayState";
    if (*(_BYTE *)(a1 + 1280))
    {
      CFDictionarySetValue(Mutable, @"carplayState", kCFBooleanTrue);
      CFBooleanRef v5 = *(CFBooleanRef *)(a1 + 1288);
      CFIndex v4 = @"CARPLAY_UUID";
    }

    else
    {
      CFBooleanRef v5 = kCFBooleanFalse;
    }

    CFDictionarySetValue(v3, v4, v5);
  }

  return v3;
}

void sub_10007D430(uint64_t a1, uint64_t a2)
{
}

void sub_10007D438(uint64_t a1)
{
}

void sub_10007D444(void *a1, CFDictionaryRef theDict)
{
  if (!a1 || !theDict) {
    return;
  }
  uint64_t v3 = a1;
  CFPropertyListRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"LEAKY_AP_SSID");
  if (!Value)
  {
    uint64_t v42 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: SSID is NULL", "WiFiManagerStoreLeakyAPData");
    }
    goto LABEL_62;
  }

  CFBooleanRef v5 = Value;
  uint64_t v6 = (const __CFString *)CFDictionaryGetValue(theDict, @"LEAKY_AP_BSSID");
  if (!v6)
  {
    uint64_t v42 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: BSSID is NULL", "WiFiManagerStoreLeakyAPData");
    }
    goto LABEL_62;
  }

  uint64_t v7 = v6;
  CFDateRef v8 = CFDictionaryGetValue(theDict, @"LEAKY_AP_LEARNED_DATA");
  if (!v8)
  {
    uint64_t v42 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: LEAKY_AP_LEARNED_DATA is NULL",  "WiFiManagerStoreLeakyAPData");
    }
LABEL_62:
    objc_autoreleasePoolPop(v42);
    return;
  }

  uint64_t v9 = v8;
  uint64_t v10 = (const __SCPreferences *)sub_100072F14(v3, @"List of known networks");
  if (!v10) {
    return;
  }
  int v11 = v10;
  CFIndex v12 = (void *)sub_10003AFF4((uint64_t)"WiFiManagerStoreLeakyAPData");
  CFIndex v13 = (const __CFArray *)sub_100063560((uint64_t)v3);
  if (!v13)
  {
    LODWORD(v16) = 0;
    goto LABEL_64;
  }

  CFDateRef v14 = v13;
  CFIndex Count = CFArrayGetCount(v13);
  CFIndex v16 = Count;
  if (!Count)
  {
LABEL_64:
    id v23 = 0LL;
    goto LABEL_47;
  }

  __int128 v47 = v12;
  if (Count < 1)
  {
LABEL_15:
    uint64_t v21 = v11;
    id v22 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4, "%s: SSID %@ not found in known networks list", "WiFiManagerStoreLeakyAPData", v5 message];
    }
    objc_autoreleasePoolPop(v22);
    LODWORD(v16) = 0;
    id v23 = 0LL;
  }

  else
  {
    CFIndex v17 = 0LL;
    while (1)
    {
      ValueAtIndex = (CFDictionaryRef *)CFArrayGetValueAtIndex(v14, v17);
      if (ValueAtIndex)
      {
        id v19 = ValueAtIndex;
        double v20 = (const __CFString *)sub_100095BC8(ValueAtIndex);
        if (CFStringCompare(v5, v20, 0LL) == kCFCompareEqualTo) {
          break;
        }
      }

      if (v16 == ++v17) {
        goto LABEL_15;
      }
    }

    unint64_t v24 = (const __CFArray *)sub_100096710((uint64_t)v19);
    if (!v24)
    {
      __int128 v46 = v11;
      CFTypeID v32 = (const __CFString *)sub_1000951FC((uint64_t)v19, @"BSSID");
      if (!v32)
      {
        uint64_t v44 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: cannot find BSSID in the network object",  "WiFiManagerStoreLeakyAPData");
        }
        objc_autoreleasePoolPop(v44);
        LODWORD(v16) = 0;
        id v23 = 0LL;
LABEL_55:
        int v11 = v46;
        goto LABEL_46;
      }

      dispatch_time_t v33 = v32;
      if (CFStringCompare(v7, v32, 0LL))
      {
        CFIndex v34 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:4, "%s: BSSID doesn't match - reported %@, from known network %@", "WiFiManagerStoreLeakyAPData", v7, v33 message];
        }
        uint64_t v35 = v34;
      }

      else
      {
        sub_10009582C((uint64_t)v19, @"LEAKY_AP_LEARNED_DATA", v9);
        uint64_t v39 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: updated LEAKY_AP_LEARNED_DATA for network %@ - %@", "WiFiManagerStoreLeakyAPData", v5, v7 message];
        }
        uint64_t v35 = v39;
      }

      objc_autoreleasePoolPop(v35);
      id v23 = 0LL;
LABEL_44:
      int v11 = v46;
      goto LABEL_45;
    }

    MutableCFStringRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0LL, v24);
    id v23 = MutableCopy;
    if (!MutableCopy)
    {
      LODWORD(v16) = 0;
      goto LABEL_46;
    }

    uint64_t v45 = v3;
    CFIndex v26 = CFArrayGetCount(MutableCopy);
    if (v26)
    {
      CFIndex v27 = v26;
      if (v26 >= 1)
      {
        __int128 v46 = v11;
        CFIndex v28 = 0LL;
        while (1)
        {
          double v29 = (const __CFDictionary *)CFArrayGetValueAtIndex(v23, v28);
          if (v29)
          {
            double v30 = v29;
            uint64_t v31 = (const __CFString *)CFDictionaryGetValue(v29, @"BSSID");
            if (!v31)
            {
              BOOL v41 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: cannot find BSSID in the network object",  "WiFiManagerStoreLeakyAPData");
              }
              objc_autoreleasePoolPop(v41);
              LODWORD(v16) = 0;
              uint64_t v3 = v45;
              goto LABEL_55;
            }

            if (CFStringCompare(v7, v31, 0LL) == kCFCompareEqualTo)
            {
              unsigned int v36 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, v30);
              if (v36)
              {
                unint64_t v37 = v36;
                CFDictionarySetValue(v36, @"LEAKY_AP_LEARNED_DATA", v9);
                CFIndex v38 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  [(id)qword_100219F60 WFLog:3, "%s: updated LEAKY_AP_LEARNED_DATA for network %@ - %@", "WiFiManagerStoreLeakyAPData", v5, v7 message];
                }
                objc_autoreleasePoolPop(v38);
                CFArraySetValueAtIndex(v23, v28, v37);
                CFRelease(v37);
                sub_10009582C((uint64_t)v19, @"networkKnownBSSListKey", v23);
              }

void sub_10007D9D4(uint64_t a1, CFArrayRef theArray)
{
  MutableCFStringRef Copy = *(CFMutableArrayRef *)(a1 + 1376);
  if (theArray)
  {
    if (MutableCopy)
    {
      CFRelease(MutableCopy);
      *(void *)(a1 + 1376) = 0LL;
    }

    MutableCFStringRef Copy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0LL, theArray);
    *(void *)(a1 + 1376) = MutableCopy;
  }

  v5[0] = a1;
  v5[1] = 0xAAAAAAAA00000043LL;
  v5[2] = MutableCopy;
  v5[3] = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v5);
}

uint64_t sub_10007DA58(const __SCPreferences *a1, void *a2)
{
  uint64_t v2 = (uint64_t)a1;
  uint64_t v3 = 0LL;
  uint64_t v4 = 0LL;
  newValues = a2;
  if (a1)
  {
    uint64_t v6 = 0LL;
    if (a2)
    {
      a1 = (const __SCPreferences *)sub_100072F14(a1, @"List of policies");
      if (a1 && (uint64_t v7 = a1, a1 = sub_10003A25C(a1), (_DWORD)a1))
      {
        CFDateRef v8 = (void *)sub_10003AFF4((uint64_t)"WiFiManagerAddPolicy");
        uint64_t v9 = sub_10006AA50((void *)v2, @"List of policies");
        uint64_t v6 = sub_100012D04(v9);
        if (v6 && (uint64_t v10 = (const __CFString *)sub_100012B90((uint64_t)a2), Count = CFArrayGetCount(v6), Count >= 1))
        {
          CFIndex v12 = Count;
          CFIndex v13 = 0LL;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v6, v13);
            if (ValueAtIndex)
            {
              uint64_t v15 = (const __CFString *)sub_100012B90((uint64_t)ValueAtIndex);
              if (CFStringCompare(v15, v10, 0LL) == kCFCompareEqualTo) {
                break;
              }
            }

            if (v12 == ++v13) {
              goto LABEL_11;
            }
          }

          v20.CFIndex location = v13;
          v20.length = 1LL;
          CFArrayReplaceValues(v6, v20, (const void **)&newValues, 0LL);
          CFIndex v16 = "Replaced";
        }

        else
        {
LABEL_11:
          CFArrayAppendValue(v6, a2);
          CFIndex v16 = "Added";
        }

        uint64_t v3 = sub_100012DBC(v6);
        if (v3)
        {
          uint64_t v4 = sub_10006D08C((void *)v2, @"List of policies", v3, 1);
          if ((_DWORD)v4)
          {
            CFIndex v17 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "%s %@ to policies list", v16, sub_100012B90((uint64_t)newValues) message];
            }
            objc_autoreleasePoolPop(v17);
          }
        }

        else
        {
          uint64_t v4 = 0LL;
        }

        sub_10003A310(v7, v4);
      }

      else
      {
        uint64_t v4 = 0LL;
        uint64_t v3 = 0LL;
        uint64_t v6 = 0LL;
      }
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  sub_100061B50((uint64_t)a1, 2LL, v2);
  sub_100063560(v2);
  sub_100063998(v2, *(const __CFArray **)(v2 + 232));
  if (v3) {
    CFRelease(v3);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v4;
}

uint64_t sub_10007DC70(uint64_t a1, const void *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  CFIndex Count = (const __SCPreferences *)CFGetTypeID(a2);
  if (!a1) {
    goto LABEL_26;
  }
  uint64_t v6 = Count;
  CFIndex Count = (const __SCPreferences *)CFArrayGetCount(*(CFArrayRef *)(a1 + 1376));
  uint64_t v7 = 0LL;
  CFDateRef v8 = 0LL;
  if (!a2) {
    goto LABEL_23;
  }
  uint64_t v9 = (uint64_t)Count;
  if (!Count) {
    goto LABEL_23;
  }
  CFIndex Count = (const __SCPreferences *)sub_100072F14((void *)a1, @"List of policies");
  if (!Count || (uint64_t v10 = Count, Count = sub_10003A25C(Count), !(_DWORD)Count))
  {
LABEL_26:
    CFDateRef v8 = 0LL;
    uint64_t v7 = 0LL;
    goto LABEL_23;
  }

  int v11 = (void *)sub_10003AFF4((uint64_t)"WiFiManagerRemovePolicy");
  CFIndex v12 = sub_10006AA50((void *)a1, @"List of policies");
  CFDateRef v8 = sub_100012D04(v12);
  if (!v8) {
    goto LABEL_27;
  }
  if (v9 >= 1)
  {
    CFIndex v13 = 0LL;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v8, v13);
      if ((const __SCPreferences *)TypeID == v6) {
        ValueAtIndex = sub_100012B90((uint64_t)ValueAtIndex);
      }
      if (CFEqual(ValueAtIndex, a2)) {
        break;
      }
      if (v9 == ++v13) {
        goto LABEL_15;
      }
    }

    CFArrayRemoveValueAtIndex(v8, v13);
  }

CFArrayRef sub_10007DE60(uint64_t a1)
{
  uint64_t v2 = *(const __CFArray **)(a1 + 1376);
  if (v2 && CFArrayGetCount(v2)) {
    return CFArrayCreateCopy(kCFAllocatorDefault, *(CFArrayRef *)(a1 + 1376));
  }
  else {
    return 0LL;
  }
}

void sub_10007DEAC(const __SCPreferences *a1, int a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  CFBooleanRef v5 = (const __CFString *)sub_10006AA50(a1, @"kWiFiWhitelistingUUIDKey");
  if ((a2 != 0) == (v5 == 0LL))
  {
    uint64_t v31 = v4;
    if (a2)
    {
      CFDateRef v8 = sub_100012A4C( kCFAllocatorDefault,  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 1LL),  0LL,  0LL);
      if (!v8) {
        goto LABEL_34;
      }
      uint64_t v9 = v8;
      uint64_t v10 = sub_100012B90((uint64_t)v8);
      int v11 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: created restriction policy with UUID %@", "WiFiManagerEnableNetworksWhitelisting", v10 message];
      }
      objc_autoreleasePoolPop(v11);
      sub_10007DA58(a1, v9);
      CFIndex v12 = (const __CFArray *)sub_100063560((uint64_t)a1);
      if (v12)
      {
        CFIndex v13 = v12;
        uint64_t v30 = (uint64_t)v9;
        CFIndex Count = CFArrayGetCount(v12);
        if (Count >= 1)
        {
          CFIndex v15 = Count;
          for (CFIndex i = 0LL; i != v15; ++i)
          {
            ValueAtIndex = (CFDictionaryRef *)CFArrayGetValueAtIndex(v13, i);
            if (ValueAtIndex)
            {
              dispatch_time_t v18 = ValueAtIndex;
              if (sub_10009860C((uint64_t)ValueAtIndex))
              {
                sub_10009582C((uint64_t)v18, @"PolicyUUID", v10);
                sub_100071D74((uint64_t)a1, v18, 0);
                id v19 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  [(id)qword_100219F60 WFLog:3, "%s: Added policyUUID %@ to network %@", "WiFiManagerEnableNetworksWhitelisting", v10, sub_100095BC8(v18) message];
                }
                objc_autoreleasePoolPop(v19);
              }
            }
          }
        }

        sub_10007332C((uint64_t)a1, v13);
        sub_100074498((uint64_t)a1, 1, 1, 1);
        uint64_t v9 = (void *)v30;
        CFRange v20 = sub_100012B90(v30);
        sub_100071B18(a1, @"kWiFiWhitelistingUUIDKey", v20);
        sub_10007E254((uint64_t)a1, 0);
      }

      CFRelease(v9);
    }

    else
    {
      uint64_t v21 = (const __CFArray *)sub_100063560((uint64_t)a1);
      if (!v21) {
        goto LABEL_34;
      }
      id v22 = v21;
      CFIndex v23 = CFArrayGetCount(v21);
      if (v23 >= 1)
      {
        CFIndex v24 = v23;
        for (CFIndex j = 0LL; j != v24; ++j)
        {
          CFIndex v26 = (CFDictionaryRef *)CFArrayGetValueAtIndex(v22, j);
          if (v26)
          {
            CFIndex v27 = v26;
            CFIndex v28 = (const __CFString *)sub_1000951FC((uint64_t)v26, @"PolicyUUID");
            if (v28)
            {
              if (CFStringCompare(v28, v5, 0LL) == kCFCompareEqualTo)
              {
                sub_10009582C((uint64_t)v27, @"PolicyUUID", 0LL);
                sub_100071D74((uint64_t)a1, v27, 0);
                double v29 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  [(id)qword_100219F60 WFLog:3, "%s: Removed policyUUID %@ from network %@", "WiFiManagerEnableNetworksWhitelisting", v5, sub_100095BC8(v27) message];
                }
                objc_autoreleasePoolPop(v29);
              }
            }
          }
        }
      }

      sub_10007332C((uint64_t)a1, v22);
      sub_100074498((uint64_t)a1, 1, 1, 1);
      sub_10007DC70((uint64_t)a1, v5);
      sub_100071B18(a1, @"kWiFiWhitelistingUUIDKey", 0LL);
      sub_10007E254((uint64_t)a1, 0);
    }

    uint64_t v4 = v31;
    goto LABEL_34;
  }

  uint64_t v6 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    uint64_t v7 = "TRUE";
    if (!a2) {
      uint64_t v7 = "FALSE";
    }
    [(id)qword_100219F60 WFLog:3, "%s: Nothing changed. restrictionUUID %@ and isWhitelistingEnabled %s", "WiFiManagerEnableNetworksWhitelisting", v5, v7 message];
  }

  objc_autoreleasePoolPop(v6);
LABEL_34:
  objc_autoreleasePoolPop(v4);
}

void sub_10007E254(uint64_t a1, int a2)
{
  char v4 = a2;
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 1864) != a2)
    {
      *(_BYTE *)(a1 + 1864) = a2;
      context[0] = a1;
      context[1] = 0xAAAAAAAA00000053LL;
      void context[2] = &v4;
      void context[3] = 1LL;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    }
  }

  else
  {
    uint64_t v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: manager ref is null",  "__WiFiManagerSetAvailabilityEngineIsEnabled");
    }
    objc_autoreleasePoolPop(v2);
  }

void sub_10007E304( int a1, const void *a2, CLLocationDegrees a3, CLLocationDegrees a4, double a5, const void *a6)
{
  if (a2 && a6)
  {
    int v11 = sub_1000951FC((uint64_t)a2, @"BSSID");
    if (v11)
    {
      CFIndex v12 = v11;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
      if (!Mutable) {
        return;
      }
      CFDateRef v14 = Mutable;
      CFIndex v15 = (const __CFArray *)sub_1000951FC((uint64_t)a2, @"networkKnownBSSListKey");
      if (!v15) {
        goto LABEL_28;
      }
      CFIndex v16 = v15;
      if (CFArrayGetCount(v15) < 1) {
        goto LABEL_28;
      }
      CFIndex v17 = 0LL;
      dispatch_time_t v18 = 0LL;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, v17);
        if (ValueAtIndex)
        {
          CFRange v20 = ValueAtIndex;
          CFPropertyListRef Value = CFDictionaryGetValue(ValueAtIndex, @"BSSID");
          if (Value)
          {
            if (CFEqual(Value, v12)) {
              dispatch_time_t v18 = v20;
            }
            else {
              CFArrayAppendValue(v14, v20);
            }
          }
        }

        ++v17;
      }

      while (v17 < CFArrayGetCount(v16));
      if (!v18) {
        goto LABEL_28;
      }
      MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, v18);
      if (!MutableCopy) {
        goto LABEL_28;
      }
      CFIndex v23 = MutableCopy;
      CFIndex v24 = objc_alloc(&OBJC_CLASS___CLLocation);
      CLLocationCoordinate2D v25 = CLLocationCoordinate2DMake(a3, a4);
      CFIndex v26 = -[CLLocation initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:]( v24,  "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:",  a6,  v25.latitude,  v25.longitude,  0.0,  a5,  0.0);
      CFIndex v27 = CFDictionaryGetValue(v23, @"networkLocnTimestamp");
      if (+[WiFiLocationManager isLocationValid:uptoSeconds:requiredAccuracy:]( &OBJC_CLASS___WiFiLocationManager,  "isLocationValid:uptoSeconds:requiredAccuracy:",  v26,  60.0,  1.79769313e308))
      {
        if (+[WiFiLocationManager isLocationValid:uptoSeconds:isHighAccuracy:]( &OBJC_CLASS___WiFiLocationManager,  "isLocationValid:uptoSeconds:isHighAccuracy:",  v26,  1LL,  60.0)
          || !v27)
        {
          goto LABEL_24;
        }

        CLLocationDegrees valuePtr = 0.0;
        CFIndex v28 = (const __CFNumber *)CFDictionaryGetValue(v23, @"networkLocnLat");
        CFNumberGetValue(v28, kCFNumberDoubleType, &valuePtr);
        CLLocationDegrees v44 = 0.0;
        double v29 = (const __CFNumber *)CFDictionaryGetValue(v23, @"networkLocnLong");
        CFNumberGetValue(v29, kCFNumberDoubleType, &v44);
        double v43 = 0.0;
        uint64_t v30 = (const __CFNumber *)CFDictionaryGetValue(v23, @"networkLocnAccuracy");
        CFNumberGetValue(v30, kCFNumberDoubleType, &v43);
        uint64_t v31 = objc_alloc(&OBJC_CLASS___CLLocation);
        CLLocationCoordinate2D v32 = CLLocationCoordinate2DMake(valuePtr, v44);
        dispatch_time_t v33 = -[CLLocation initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:]( v31,  "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:",  v27,  v32.latitude,  v32.longitude,  0.0,  v43,  0.0);
        -[CLLocation horizontalAccuracy](v33, "horizontalAccuracy");
        double v35 = v34;
        -[CLLocation horizontalAccuracy](v26, "horizontalAccuracy");
        if (v35 <= v36)
        {
          -[CLLocation distanceFromLocation:](v33, "distanceFromLocation:", v26);
          double v38 = v37;
          -[CLLocation horizontalAccuracy](v33, "horizontalAccuracy");
          double v40 = v38 - v39;
          -[CLLocation horizontalAccuracy](v26, "horizontalAccuracy");
          if (v40 - v41 > 0.0)
          {

LABEL_24:
            CFDictionarySetValue( v23,  @"networkLocnLat",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a3));
            CFDictionarySetValue( v23,  @"networkLocnLong",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a4));
            CFDictionarySetValue( v23,  @"networkLocnAccuracy",  +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a5));
            CFDictionarySetValue(v23, @"networkLocnTimestamp", a6);
            CFArrayAppendValue(v14, v23);
            sub_10009582C((uint64_t)a2, @"networkKnownBSSListKey", v14);
LABEL_27:
            CFRelease(v23);
LABEL_28:
            CFRelease(v14);
            return;
          }
        }
      }

      goto LABEL_27;
    }

    uint64_t v42 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: failed to get BSSID from %@", "WiFiManagerUpdateBSSLocation", sub_100095BC8(a2) message];
    }
    objc_autoreleasePoolPop(v42);
  }

id *sub_10007E6F0(id *a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  if (a1)
  {
    else {
      a1 = 0LL;
    }
  }

  objc_autoreleasePoolPop(v2);
  return a1;
}

BOOL sub_10007E748(uint64_t a1, uint64_t a2)
{
  char v4 = objc_autoreleasePoolPush();
  BOOL v5 = 0LL;
  if (a1 && a2)
  {
    if ([*(id *)(a1 + 1464) isAuthorized]) {
      BOOL v5 = +[WiFiLocationManager isLocationValid:uptoSeconds:isHighAccuracy:]( &OBJC_CLASS___WiFiLocationManager,  "isLocationValid:uptoSeconds:isHighAccuracy:",  a2,  0LL,  3600.0) != 0;
    }
    else {
      BOOL v5 = 0LL;
    }
  }

  objc_autoreleasePoolPop(v4);
  return v5;
}

id sub_10007E7C8(uint64_t a1, uint64_t a2)
{
  char v4 = objc_autoreleasePoolPush();
  if (!a1)
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: manager is NULL",  "WiFiManagerCopyGeoTagsForNetwork");
    }
    goto LABEL_9;
  }

  if (!a2)
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: network is NULL",  "WiFiManagerCopyGeoTagsForNetwork");
    }
LABEL_9:
    objc_autoreleasePoolPop(v7);
    id v5 = 0LL;
    goto LABEL_4;
  }

  id v5 = objc_msgSend( +[WiFiAnalyticsManager sharedWiFiAnalyticsManager]( WiFiAnalyticsManager,  "sharedWiFiAnalyticsManager"),  "copyGeoTagsForNetworkAtLocation:location:",  a2,  objc_msgSend(*(id *)(a1 + 1464), "latestLocation"));
LABEL_4:
  objc_autoreleasePoolPop(v4);
  return v5;
}

void sub_10007E8B4(uint64_t a1, const void *a2, double a3, double a4)
{
  CFDateRef v8 = objc_autoreleasePoolPush();
  if (!a1)
  {
    uint64_t v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: manager is NULL", "WiFiManagerSetGeoTagForNetwork");
    }
    goto LABEL_17;
  }

  if (!a2)
  {
    uint64_t v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: network is NULL", "WiFiManagerSetGeoTagForNetwork");
    }
    goto LABEL_17;
  }

  if (a3 < -90.0 || a3 > 90.0)
  {
    uint64_t v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Invalid latitude value",  "WiFiManagerSetGeoTagForNetwork");
    }
    goto LABEL_17;
  }

  if (a4 < -180.0 || a4 > 180.0)
  {
    uint64_t v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Invalid longitude value",  "WiFiManagerSetGeoTagForNetwork");
    }
LABEL_17:
    objc_autoreleasePoolPop(v10);
    goto LABEL_8;
  }

  uint64_t v9 = -[CLLocation initWithLatitude:longitude:]( objc_alloc(&OBJC_CLASS___CLLocation),  "initWithLatitude:longitude:",  a3,  a4);
  sub_100034418(a2, v9);

LABEL_8:
  objc_autoreleasePoolPop(v8);
}

id sub_10007EA44(uint64_t a1, int a2, double a3, double a4)
{
  CFDateRef v8 = objc_autoreleasePoolPush();
  if (!a1)
  {
    CFDateRef v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: manager is NULL",  "WiFiManagerCopyNetworksAtLocation");
    }
    goto LABEL_17;
  }

  if (a3 < -90.0 || a3 > 90.0)
  {
    CFDateRef v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Invalid latitude value",  "WiFiManagerCopyNetworksAtLocation");
    }
    goto LABEL_17;
  }

  if (a4 < -180.0 || a4 > 180.0)
  {
    CFDateRef v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Invalid longitude value",  "WiFiManagerCopyNetworksAtLocation");
    }
LABEL_17:
    objc_autoreleasePoolPop(v14);
    id v12 = 0LL;
    goto LABEL_10;
  }

  uint64_t v9 = -[CLLocation initWithLatitude:longitude:]( objc_alloc(&OBJC_CLASS___CLLocation),  "initWithLatitude:longitude:",  a3,  a4);
  id v10 = +[WiFiAnalyticsManager sharedWiFiAnalyticsManager]( &OBJC_CLASS___WiFiAnalyticsManager,  "sharedWiFiAnalyticsManager");
  if (a2) {
    id v11 = [v10 copyScoreSortedNetworksAvailableAtLocation:v9];
  }
  else {
    id v11 = [v10 copyNetworksAvailableAtLocation:v9];
  }
  id v12 = v11;

LABEL_10:
  objc_autoreleasePoolPop(v8);
  return v12;
}

id sub_10007EBC4(uint64_t a1, uint64_t a2)
{
  char v4 = objc_autoreleasePoolPush();
  if (!a1)
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: manager is NULL", "WiFiManagerCopyScoreForNetwork");
    }
    goto LABEL_9;
  }

  if (!a2)
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: network is NULL", "WiFiManagerCopyScoreForNetwork");
    }
LABEL_9:
    objc_autoreleasePoolPop(v7);
    id v5 = 0LL;
    goto LABEL_4;
  }

  id v5 = objc_msgSend( +[WiFiAnalyticsManager sharedWiFiAnalyticsManager]( WiFiAnalyticsManager,  "sharedWiFiAnalyticsManager"),  "copyPreferenceScoreDictionaryForNetwork:",  a2);
LABEL_4:
  objc_autoreleasePoolPop(v4);
  return v5;
}

NSDictionary *sub_10007EC9C(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  if (!a1)
  {
    CFDateRef v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: manager is NULL", "WiFiManagerCopyLeechedLocation");
    }
    goto LABEL_9;
  }

  id v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 1464), "latestLocation"), "copy");
  if (!v3)
  {
    CFDateRef v14 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: location is NULL", "WiFiManagerCopyLeechedLocation");
    }
LABEL_9:
    objc_autoreleasePoolPop(v14);
    id v12 = 0LL;
    goto LABEL_4;
  }

  char v4 = v3;
  id v5 = objc_alloc(&OBJC_CLASS___NSDictionary);
  [v4 coordinate];
  uint64_t v6 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:");
  [v4 coordinate];
  CFDateRef v8 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v7);
  [v4 horizontalAccuracy];
  id v10 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", (int)v9);
  objc_msgSend(objc_msgSend(v4, "timestamp"), "timeIntervalSinceNow");
  id v12 = -[NSDictionary initWithObjectsAndKeys:]( v5,  "initWithObjectsAndKeys:",  v6,  @"latitude",  v8,  @"longitude",  v10,  @"accuracy",  +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", (int)v11),  @"staleness",  0LL);

LABEL_4:
  objc_autoreleasePoolPop(v2);
  return v12;
}

void sub_10007EE3C(uint64_t a1, double a2)
{
  if (!a1)
  {
    id v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: manager is NULL",  "WiFiManagerRemoveUnusedNetworkGeotags",  v4);
    }
    goto LABEL_8;
  }

  if (a2 <= 0.0)
  {
    id v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: invalid geoTagsUnusedRetentionPeriodInSeconds %f",  "WiFiManagerRemoveUnusedNetworkGeotags",  *(void *)&a2);
    }
LABEL_8:
    objc_autoreleasePoolPop(v3);
  }

void sub_10007EEF4(uint64_t a1, uint64_t a2, double a3)
{
  if (!a1)
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: manager is NULL",  "WiFiManagerScheduleUnusedNetworkGeotagsRemovalTest",  v5);
    }
    goto LABEL_11;
  }

  if (a3 <= 0.0)
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: invalid geoTagsUnusedRetentionPeriodInSeconds %f",  "WiFiManagerScheduleUnusedNetworkGeotagsRemovalTest",  *(void *)&a3);
    }
    goto LABEL_11;
  }

  if (!a2)
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: invalid intervalMinutes %lu",  "WiFiManagerScheduleUnusedNetworkGeotagsRemovalTest",  0);
    }
LABEL_11:
    objc_autoreleasePoolPop(v4);
  }

void sub_10007EFE0(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v1 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: manager is NULL",  "WiFiManagerUnScheduleUnusedNetworkGeotagsRemovalTest");
    }
    objc_autoreleasePoolPop(v1);
  }

BOOL sub_10007F040(void *a1, double *a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  if (a1)
  {
    BOOL v5 = sub_10007F0C8(a1, @"DisableSoftErrorReporting", 0);
    if (a2) {
      *a2 = (double)sub_10007CBB0(a1, @"SoftErrorReportingTimeout", 0LL);
    }
  }

  else
  {
    BOOL v5 = 0LL;
  }

  objc_autoreleasePoolPop(v4);
  return v5;
}

BOOL sub_10007F0C8(void *a1, const __CFString *a2, SInt32 a3)
{
  uint64_t v4 = sub_10006AA50(a1, a2);
  SInt32 valuePtr = a3;
  if (v4)
  {
    BOOL v5 = (const __CFString *)v4;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID != CFGetTypeID(v5))
    {
      CFTypeID v7 = CFBooleanGetTypeID();
      if (v7 == CFGetTypeID(v5))
      {
        IntCFPropertyListRef Value = CFEqual(v5, kCFBooleanTrue);
      }

      else
      {
        CFTypeID v9 = CFStringGetTypeID();
        if (v9 != CFGetTypeID(v5)) {
          return a3 != 0;
        }
        IntCFPropertyListRef Value = CFStringGetIntValue(v5);
      }

      a3 = IntValue;
      return a3 != 0;
    }

    CFNumberGetValue((CFNumberRef)v5, kCFNumberIntType, &valuePtr);
    a3 = valuePtr;
  }

  return a3 != 0;
}

__CFDictionary *sub_10007F190(uint64_t a1)
{
  if (!*(void *)(a1 + 1496)) {
    return 0LL;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    CFIndex v27 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s:Failed to allocate dictionary for SoftError Counters",  "WiFiManagerCopySoftErrorCounters");
    }
    objc_autoreleasePoolPop(v27);
    return 0LL;
  }

  id v3 = Mutable;
  uint64_t v4 = (char *)sub_10000F970(*(void **)(a1 + 1496));
  if (!v4)
  {
    CFIndex v26 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: errorCountersRef recived from softErrorManager is NULL! ",  "WiFiManagerCopySoftErrorCounters");
    }
    goto LABEL_17;
  }

  BOOL v5 = v4;
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v4);
  if (!v6) {
    goto LABEL_15;
  }
  CFNumberRef v7 = v6;
  CFDictionaryAddValue(v3, @"WiFiToggleErrorCounter", v6);
  CFRelease(v7);
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v5 + 28);
  if (!v8) {
    goto LABEL_15;
  }
  CFNumberRef v9 = v8;
  CFDictionaryAddValue(v3, @"WiFiToggleErrorUserConfirmCounter", v8);
  CFRelease(v9);
  CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v5 + 4);
  if (!v10) {
    goto LABEL_15;
  }
  CFNumberRef v11 = v10;
  CFDictionaryAddValue(v3, @"WiFiNoNetworksFoundErrorCounter", v10);
  CFRelease(v11);
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v5 + 32);
  if (!v12) {
    goto LABEL_15;
  }
  CFNumberRef v13 = v12;
  CFDictionaryAddValue(v3, @"WiFiNoNetworksFoundErrorUserConfirmCounter", v12);
  CFRelease(v13);
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v5 + 8);
  if (!v14) {
    goto LABEL_15;
  }
  CFNumberRef v15 = v14;
  CFDictionaryAddValue(v3, @"WiFiSlowAutoJoinErrorCounter", v14);
  CFRelease(v15);
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v5 + 36);
  if (!v16) {
    goto LABEL_15;
  }
  CFNumberRef v17 = v16;
  CFDictionaryAddValue(v3, @"WiFiSlowAutoJoinErrorUserConfirmCounter", v16);
  CFRelease(v17);
  CFNumberRef v18 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v5 + 12);
  if (!v18) {
    goto LABEL_15;
  }
  CFNumberRef v19 = v18;
  CFDictionaryAddValue(v3, @"WiFiTxDataStallErrorCounter", v18);
  CFRelease(v19);
  CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v5 + 40);
  if (!v20) {
    goto LABEL_15;
  }
  CFNumberRef v21 = v20;
  CFDictionaryAddValue(v3, @"WiFiTxDataStallErrorUserConfirmCounter", v20);
  CFRelease(v21);
  CFNumberRef v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v5 + 16);
  if (!v22
    || (CFNumberRef v23 = v22,
        CFDictionaryAddValue(v3, @"WiFiRxDataStallErrorCounter", v22),
        CFRelease(v23),
        (CFNumberRef v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, v5 + 44)) == 0LL))
  {
LABEL_15:
    CFIndex v26 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: numRef create failed!",  "WiFiManagerCopySoftErrorCounters");
    }
LABEL_17:
    objc_autoreleasePoolPop(v26);
    return v3;
  }

  CFNumberRef v25 = v24;
  CFDictionaryAddValue(v3, @"WiFiRxDataStallErrorUserConfirmCounter", v24);
  CFRelease(v25);
  return v3;
}

id sub_10007F4C4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void **)(a1 + 1496);
    if (v1) {
      return sub_10000F970(v1);
    }
    id v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: softError manager is NULL!",  "WiFiManagerGetSoftErrorCounters");
    }
  }

  else
  {
    id v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: manager is NULL!",  "WiFiManagerGetSoftErrorCounters");
    }
  }

  objc_autoreleasePoolPop(v3);
  return 0LL;
}

uint64_t sub_10007F570(uint64_t a1, _DWORD *a2, void *a3)
{
  if (a1)
  {
    if (a2 && a3)
    {
      uint64_t result = 0LL;
      *a2 = *(_DWORD *)(a1 + 1240);
      *a3 = *(void *)(a1 + 1248);
      return result;
    }

    BOOL v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: Params Null", "WiFiManagerGetMotionState");
    }
  }

  else
  {
    BOOL v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: manager is NULL", "WiFiManagerGetMotionState");
    }
  }

  objc_autoreleasePoolPop(v5);
  return 4294963396LL;
}

_WORD *sub_10007F628(const __CFArray *a1)
{
  if (a1)
  {
    uint64_t v2 = sub_10007D140(a1);
    uint64_t v3 = *((void *)a1 + 178);
    if (v3)
    {
      CFDictionaryRef v4 = sub_100012CEC(v3);
      BOOL v5 = sub_100094AAC((uint64_t)kCFAllocatorDefault, v4);
      if (v2 && CFEqual(v2, v5)) {
        sub_100095F10((uint64_t)v5, (uint64_t)v2);
      }
      if (v4) {
        CFRelease(v4);
      }
      if (!v2) {
        return v5;
      }
LABEL_18:
      CFRelease(v2);
      return v5;
    }

    if (v2 && sub_1000A4B04((uint64_t)v2))
    {
      CFNumberRef v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "%s: session based network is an accessory = '%@'", "WiFiManagerCopyCurrentSessionBasedNetwork", v2 message];
      }
      objc_autoreleasePoolPop(v6);
      CFRetain(v2);
      BOOL v5 = v2;
      goto LABEL_18;
    }

    CFNumberRef v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: session based network is NULL",  "WiFiManagerCopyCurrentSessionBasedNetwork");
    }
    objc_autoreleasePoolPop(v7);
    BOOL v5 = 0LL;
    if (v2) {
      goto LABEL_18;
    }
  }

  else
  {
    CFNumberRef v9 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: manager is NULL",  "WiFiManagerCopyCurrentSessionBasedNetwork");
    }
    objc_autoreleasePoolPop(v9);
    return 0LL;
  }

  return v5;
}

uint64_t sub_10007F7AC(uint64_t a1)
{
  return *(void *)(a1 + 208);
}

void sub_10007F7B4(uint64_t a1)
{
  if (a1)
  {
    context[0] = a1;
    context[1] = 0xAAAAAAAA00000046LL;
    void context[2] = 0LL;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
  }

  else
  {
    uint64_t v1 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: wifiManagerRef is NULL!",  "WiFiManagerSubmitWoWBlacklistingHistory");
    }
    objc_autoreleasePoolPop(v1);
  }

BOOL sub_10007F84C(const __CFArray *a1)
{
  uint64_t v1 = sub_10007D140(a1);
  uint64_t v2 = v1;
  if (v1) {
    CFRelease(v1);
  }
  return v2 != 0LL;
}

uint64_t sub_10007F880(const __CFArray *a1)
{
  if (!a1)
  {
LABEL_14:
    LOBYTE(v6) = 0;
    return v6;
  }

  uint64_t v1 = sub_10006C77C(a1);
  if (!v1)
  {
    CFNumberRef v10 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: failed to get device managers",  "WiFiManagerIsAnyWiFiInterfacePrimary");
    }
    objc_autoreleasePoolPop(v10);
    goto LABEL_14;
  }

  uint64_t v2 = v1;
  CFIndex Count = CFArrayGetCount(v1);
  if (Count < 1)
  {
    LOBYTE(v6) = 0;
  }

  else
  {
    CFIndex v4 = Count;
    CFIndex v5 = 0LL;
    int v6 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, v5);
      uint64_t v8 = sub_10003BEDC((uint64_t)ValueAtIndex);
      if (v8 && sub_10004CE2C(v8)) {
        v6 |= sub_1000FB06C((uint64_t)ValueAtIndex);
      }
      ++v5;
    }

    while (v4 != v5);
  }

  CFRelease(v2);
  return v6;
}

CFTypeRef sub_10007F96C(uint64_t a1, const void *a2, const void *a3)
{
  CFIndex v4 = (const __CFString *)sub_10007FA40(a1, a2, a3);
  if (!v4) {
    return 0LL;
  }
  CFIndex v5 = v4;
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainSetup,  v4,  kSCEntNetIPv4);
  if (!NetworkServiceEntity)
  {
    CFTypeRef v11 = 0LL;
    CFNumberRef v9 = (const __CFDictionary *)v5;
LABEL_7:
    CFRelease(v9);
    return v11;
  }

  CFNumberRef v7 = NetworkServiceEntity;
  uint64_t v8 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 72), NetworkServiceEntity);
  CFNumberRef v9 = v8;
  if (v8 && (CFPropertyListRef Value = CFDictionaryGetValue(v8, kSCPropNetIPv4ConfigMethod)) != 0LL) {
    CFTypeRef v11 = CFRetain(Value);
  }
  else {
    CFTypeRef v11 = 0LL;
  }
  CFRelease(v5);
  CFRelease(v7);
  if (v9) {
    goto LABEL_7;
  }
  return v11;
}

CFTypeRef sub_10007FA40(uint64_t a1, const void *a2, const void *a3)
{
  CFIndex v5 = *(const __CFDictionary **)(a1 + 216);
  if (v5)
  {
    int v6 = sub_100095BC8(a3);
    CFPropertyListRef Value = CFDictionaryGetValue(v5, v6);
  }

  else
  {
    CFPropertyListRef Value = 0LL;
  }

  CFArrayRef v8 = SCNetworkSetCopyAll(*(SCPreferencesRef *)(a1 + 904));
  if (!v8) {
    return 0LL;
  }
  CFNumberRef v9 = v8;
  SCPreferencesSynchronize(*(SCPreferencesRef *)(a1 + 904));
  if (CFArrayGetCount(v9) < 1) {
    goto LABEL_40;
  }
  CFIndex v10 = 0LL;
  CFTypeRef v11 = 0LL;
  do
  {
    ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v9, v10);
    if (ValueAtIndex)
    {
      CFNumberRef v13 = ValueAtIndex;
      CFStringRef Name = SCNetworkSetGetName(ValueAtIndex);
      CFStringRef SetID = SCNetworkSetGetSetID(v13);
      if (SetID && Value && CFEqual(SetID, Value)) {
        goto LABEL_16;
      }
      if (Name && CFEqual(Name, @"Automatic")) {
        CFTypeRef v11 = v13;
      }
    }

    ++v10;
  }

  while (v10 < CFArrayGetCount(v9));
  CFNumberRef v13 = v11;
  if (!v11) {
    goto LABEL_40;
  }
LABEL_16:
  CFArrayRef v16 = SCNetworkSetCopyServices(v13);
  if (v16)
  {
    CFNumberRef v17 = v16;
    ServiceOrder = SCNetworkSetGetServiceOrder(v13);
    if (!ServiceOrder) {
      goto LABEL_38;
    }
    CFNumberRef v19 = ServiceOrder;
    if (CFArrayGetCount(ServiceOrder) < 1) {
      goto LABEL_38;
    }
    CFIndex v20 = 0LL;
    CFStringRef v21 = 0LL;
    dispatch_time_t v33 = v9;
    do
    {
      if (CFArrayGetValueAtIndex(v19, v20) && CFArrayGetCount(v17) >= 1)
      {
        CFIndex v22 = 0LL;
        int Enabled = 0;
        do
        {
          CFNumberRef v24 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v17, v22);
          if (v24)
          {
            CFNumberRef v25 = v24;
            CFStringRef ServiceID = SCNetworkServiceGetServiceID(v24);
            if (ServiceID)
            {
              CFStringRef v27 = ServiceID;
              Interface = SCNetworkServiceGetInterface(v25);
              if (Interface)
              {
                do
                {
                  double v29 = Interface;
                  Interface = SCNetworkInterfaceGetInterface(Interface);
                }

                while (Interface);
                BSDCFStringRef Name = SCNetworkInterfaceGetBSDName(v29);
                if (BSDName)
                {
                  if (CFEqual(BSDName, a2))
                  {
                    int Enabled = SCNetworkServiceGetEnabled(v25);
                    if (Enabled) {
                      CFStringRef v21 = v27;
                    }
                  }
                }
              }
            }
          }

          ++v22;
        }

        while (CFArrayGetCount(v17) > v22);
      }

      else
      {
        int Enabled = 0;
      }

      ++v20;
      CFNumberRef v9 = v33;
    }

    while (CFArrayGetCount(v19) > v20 && !Enabled);
    if (v21) {
      CFTypeRef v31 = CFRetain(v21);
    }
    else {
LABEL_38:
    }
      CFTypeRef v31 = 0LL;
    CFRelease(v17);
  }

  else
  {
LABEL_40:
    CFTypeRef v31 = 0LL;
  }

  CFRelease(v9);
  return v31;
}

CFTypeRef sub_10007FC8C(uint64_t a1, const void *a2, const void *a3)
{
  CFIndex v4 = (const __CFString *)sub_10007FA40(a1, a2, a3);
  if (!v4) {
    return 0LL;
  }
  CFIndex v5 = v4;
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainSetup,  v4,  kSCEntNetIPv6);
  if (!NetworkServiceEntity)
  {
    CFTypeRef v11 = 0LL;
    CFNumberRef v9 = (const __CFDictionary *)v5;
LABEL_7:
    CFRelease(v9);
    return v11;
  }

  CFNumberRef v7 = NetworkServiceEntity;
  CFArrayRef v8 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 72), NetworkServiceEntity);
  CFNumberRef v9 = v8;
  if (v8 && (CFPropertyListRef Value = CFDictionaryGetValue(v8, kSCPropNetIPv6ConfigMethod)) != 0LL) {
    CFTypeRef v11 = CFRetain(Value);
  }
  else {
    CFTypeRef v11 = 0LL;
  }
  CFRelease(v5);
  CFRelease(v7);
  if (v9) {
    goto LABEL_7;
  }
  return v11;
}

uint64_t sub_10007FD60(uint64_t result)
{
  if (result) {
    return *(void *)(result + 904);
  }
  return result;
}

void sub_10007FD6C(uint64_t a1)
{
  uint64_t v2 = *(const __CFDictionary **)(a1 + 216);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  CFIndex v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s", "WiFiManagerRemoveOrphanedSCNetworkSets");
  }
  objc_autoreleasePoolPop(v4);
  CFIndex v5 = SCNetworkSetCopyAll(*(SCPreferencesRef *)(a1 + 904));
  int v6 = v5;
  if (!v5 || !CFArrayGetCount(v5))
  {
    double v39 = Mutable;
    double v40 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: invalid scSets",  "WiFiManagerRemoveOrphanedSCNetworkSets");
    }
    objc_autoreleasePoolPop(v40);
    CFMutableDictionaryRef Mutable = v39;
    if (v6) {
      goto LABEL_61;
    }
    goto LABEL_62;
  }

  CFNumberRef v7 = SCNetworkSetCopyCurrent(*(SCPreferencesRef *)(a1 + 904));
  cuint64_t f = v7;
  if (v7) {
    CFStringRef Name = SCNetworkSetGetName(v7);
  }
  else {
    CFStringRef Name = 0LL;
  }
  if (CFArrayGetCount(v6) < 1)
  {
    CFIndex v10 = 0LL;
    goto LABEL_56;
  }

  uint64_t v43 = a1;
  __int128 v46 = Mutable;
  CFIndex v9 = 0LL;
  int v45 = 0;
  CFIndex v10 = 0LL;
  do
  {
    ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v6, v9);
    if (!ValueAtIndex)
    {
      CFArrayRef v16 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: invalid set",  "WiFiManagerRemoveOrphanedSCNetworkSets",  v41);
      }
      goto LABEL_21;
    }

    CFNumberRef v12 = ValueAtIndex;
    CFNumberRef v13 = SCNetworkSetGetName(ValueAtIndex);
    if (v13)
    {
      if (CFStringCompare(@"Automatic", v13, 0LL) == kCFCompareEqualTo)
      {
        sub_1000803B0(Mutable, v12);
        int v45 = 1;
        goto LABEL_28;
      }

      if (Name && CFStringCompare(Name, v13, 0LL) == kCFCompareEqualTo)
      {
        sub_1000803B0(Mutable, v12);
        CFArrayRef v16 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: set <%@> currently in use, skip", "WiFiManagerRemoveOrphanedSCNetworkSets", v13 message];
        }
LABEL_21:
        objc_autoreleasePoolPop(v16);
        goto LABEL_28;
      }
    }

    CFStringRef SetID = SCNetworkSetGetSetID(v12);
    if (SetID)
    {
      CFStringRef v15 = SetID;
      if (v2 && CFDictionaryContainsValue(v2, SetID))
      {
        sub_1000803B0(Mutable, v12);
      }

      else
      {
        if (!v10) {
          CFIndex v10 = CFArrayCreateMutable(kCFAllocatorDefault, 1LL, &kCFTypeArrayCallBacks);
        }
        CFNumberRef v17 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: adding to purge list %@<%@>", "WiFiManagerRemoveOrphanedSCNetworkSets", v15, v13 message];
        }
        objc_autoreleasePoolPop(v17);
        CFArrayAppendValue(v10, v12);
      }
    }

void sub_1000803B0(__CFArray *a1, const __SCNetworkSet *a2)
{
  if (!a1)
  {
    int v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null list.",  "__WiFiManagerHelperAddNetworkServicesFromSetToList");
    }
    goto LABEL_12;
  }

  if (!a2)
  {
    int v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null set.",  "__WiFiManagerHelperAddNetworkServicesFromSetToList");
    }
LABEL_12:
    objc_autoreleasePoolPop(v6);
    return;
  }

  id v7 = (id)sub_10003AFF4((uint64_t)"__WiFiManagerHelperAddNetworkServicesFromSetToList");
  CFIndex v4 = SCNetworkSetCopyServices(a2);
  if (v4)
  {
    CFIndex v5 = v4;
    if (CFArrayGetCount(v4))
    {
      v8.length = CFArrayGetCount(v5);
      v8.CFIndex location = 0LL;
      CFArrayAppendArray(a1, v5, v8);
    }

    CFRelease(v5);
  }

  else
  {
  }

void sub_1000804BC(void *a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  uint64_t v3 = (void *)a1[173];
  CFIndex v4 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id v5 = [v3 countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v21;
    do
    {
      for (CFIndex i = 0LL; i != v6; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v21 != v7) {
          objc_enumerationMutation(v3);
        }
        uint64_t v9 = *(void *)(*((void *)&v20 + 1) + 8LL * (void)i);
        objc_msgSend( objc_msgSend(objc_msgSend(v3, "objectForKeyedSubscript:", v9), "objectForKeyedSubscript:", @"timestamp"),  "timeIntervalSinceNow");
        if (v10 < -21600.0) {
          -[NSMutableArray addObject:](v4, "addObject:", v9);
        }
      }

      id v6 = [v3 countByEnumeratingWithState:&v20 objects:v25 count:16];
    }

    while (v6);
  }

  if (-[NSMutableArray count](v4, "count"))
  {
    id v11 = [v3 mutableCopy];
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v12 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v4,  "countByEnumeratingWithState:objects:count:",  &v16,  v24,  16LL);
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v17;
      do
      {
        for (CFIndex j = 0LL; j != v13; CFIndex j = (char *)j + 1)
        {
          if (*(void *)v17 != v14) {
            objc_enumerationMutation(v4);
          }
          [v11 removeObjectForKey:*(void *)(*((void *)&v16 + 1) + 8 * (void)j)];
        }

        id v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v4,  "countByEnumeratingWithState:objects:count:",  &v16,  v24,  16LL);
      }

      while (v13);
    }

    sub_10006D08C(a1, @"SessionBasedNetworkList", v11, 0);
    sub_1000806E0((uint64_t)a1, v11);
  }

  objc_autoreleasePoolPop(v2);
}

void sub_1000806E0(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    if (!cf || (CFIndex v4 = *(const void **)(a1 + 1384)) == 0LL || !CFEqual(cf, v4))
    {
      id v5 = *(const void **)(a1 + 1384);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(a1 + 1384) = 0LL;
      }

      if (cf) {
        *(void *)(a1 + 1384) = CFRetain(cf);
      }
    }
  }

  else
  {
    id v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: manager ref is null",  "__WiFiManagerSetSessionBasedNetworkList");
    }
    objc_autoreleasePoolPop(v6);
  }

void sub_10008078C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 1936);
    if (v2)
    {
      if ([*(id *)(a1 + 1936) count])
      {
        uint64_t v3 = objc_autoreleasePoolPush();
        __int128 v33 = 0u;
        __int128 v34 = 0u;
        __int128 v35 = 0u;
        __int128 v36 = 0u;
        id v4 = [v2 countByEnumeratingWithState:&v33 objects:v38 count:16];
        if (!v4) {
          goto LABEL_34;
        }
        id v5 = v4;
        BOOL v26 = v3;
        uint64_t v27 = a1;
        CFIndex v28 = 0LL;
        uint64_t v6 = *(void *)v34;
        do
        {
          for (CFIndex i = 0LL; i != v5; CFIndex i = (char *)i + 1)
          {
            if (*(void *)v34 != v6) {
              objc_enumerationMutation(v2);
            }
            uint64_t v8 = *(void *)(*((void *)&v33 + 1) + 8LL * (void)i);
            id v9 = [v2 objectForKey:v8];
            id v10 = [v9 objectForKey:@"type"];
            if (v10)
            {
              id v11 = v10;
              id v12 = [v9 objectForKey:@"notificationType"];
              if (v12)
              {
                id v13 = v12;
                id v14 = [v11 unsignedIntValue];
                id v15 = [v13 unsignedIntValue];
                id v16 = [v9 objectForKey:@"timestamp"];
                __int128 v17 = (_UNKNOWN **)[v9 objectForKey:@"count"];
                if (v16)
                {
                  if (!v17) {
                    __int128 v17 = &off_1002046C8;
                  }
                  if (+[WiFiUserNotificationManager canRepromptForNotificationType:blacklistType:atDate:count:]( WiFiUserNotificationManager,  "canRepromptForNotificationType:blacklistType:atDate:count:",  v15,  v14,  v16,  [v17 integerValue]))
                  {
                    objc_msgSend(v16, "timeIntervalSinceDate:", +[NSDate date](NSDate, "date"));
                    if (v18 > 2592000.0)
                    {
                      __int128 v19 = objc_autoreleasePoolPush();
                      if (qword_100219F60) {
                        [(id)qword_100219F60 WFLog:3, "%s: removing ssid: %@ timestamp: %@ notificationType: %d", "WiFiManagerRemoveOldUserBlackListEntries", v8, v16, v15 message];
                      }
                      objc_autoreleasePoolPop(v19);
                      __int128 v20 = v28;
                      if (!v28) {
                        __int128 v20 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                      }
                      CFIndex v28 = v20;
                      -[NSMutableArray addObject:](v20, "addObject:", v8);
                    }
                  }
                }
              }
            }
          }

          id v5 = [v2 countByEnumeratingWithState:&v33 objects:v38 count:16];
        }

        while (v5);
        uint64_t v3 = v26;
        if (v28)
        {
          id v21 = [v2 mutableCopy];
          __int128 v29 = 0u;
          __int128 v30 = 0u;
          __int128 v31 = 0u;
          __int128 v32 = 0u;
          id v22 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v28,  "countByEnumeratingWithState:objects:count:",  &v29,  v37,  16LL);
          if (v22)
          {
            id v23 = v22;
            uint64_t v24 = *(void *)v30;
            do
            {
              for (CFIndex j = 0LL; j != v23; CFIndex j = (char *)j + 1)
              {
                if (*(void *)v30 != v24) {
                  objc_enumerationMutation(v28);
                }
                [v21 removeObjectForKey:*(void *)(*((void *)&v29 + 1) + 8 * (void)j)];
              }

              id v23 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v28,  "countByEnumeratingWithState:objects:count:",  &v29,  v37,  16LL);
            }

            while (v23);
          }

          -[NSUserDefaults setObject:forKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "setObject:forKey:",  v21,  @"UserNotificationBlacklist");
          sub_100080AFC(v27, v21);
          if (v21) {
            CFRelease(v21);
          }
          objc_autoreleasePoolPop(v26);
          CFRelease(v28);
        }

        else
        {
LABEL_34:
          objc_autoreleasePoolPop(v3);
        }
      }
    }
  }

void sub_100080AFC(uint64_t a1, CFTypeRef cf)
{
  if (!a1)
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: manager ref is null",  "__WiFiManagerSetUserNotificationBlacklist",  v7);
    }
    goto LABEL_14;
  }

  id v4 = *(void **)(a1 + 1936);
  if (!cf || !v4)
  {
    if (!cf)
    {
      if (v4)
      {
        CFRelease(v4);
        id v4 = 0LL;
      }

      goto LABEL_12;
    }

void sub_100080BEC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    uint64_t v2 = &ACAccountStoreDidChangeNotification_ptr;
    +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
    double v4 = v3;
    uint64_t v5 = (uint64_t)-[__SCPreferences integerValue](sub_10006AA50((void *)v1, @"Version"), "integerValue");
    uint64_t v6 = v5;
    uint64_t v86 = v1;
    if (v5 > 11)
    {
      if ((unint64_t)v5 > 0xD)
      {
LABEL_44:
        if (v6 <= 14)
        {
          CFBooleanRef v84 = (void *)v6;
          uint64_t context = objc_autoreleasePoolPush();
          [(id)v2[374] timeIntervalSinceReferenceDate];
          double v40 = v39;
          id v41 = [*(id *)(v1 + 944) dictionaryRepresentation];
          __int128 v91 = 0u;
          __int128 v92 = 0u;
          __int128 v93 = 0u;
          __int128 v94 = 0u;
          id v42 = [v41 allKeys];
          id v43 = [v42 countByEnumeratingWithState:&v91 objects:v96 count:16];
          if (v43)
          {
            id v44 = v43;
            uint64_t v45 = *(void *)v92;
            do
            {
              for (CFIndex i = 0LL; i != v44; CFIndex i = (char *)i + 1)
              {
                if (*(void *)v92 != v45) {
                  objc_enumerationMutation(v42);
                }
                uint64_t v47 = *(void *)(*((void *)&v91 + 1) + 8LL * (void)i);
                id v48 = [v41 objectForKeyedSubscript:v47];
                id v49 = [[CWFNetworkProfile alloc] initWithExternalForm:v48];
                if (v49)
                {
                  __int128 v50 = v49;
                  [*(id *)(v86 + 944) setObject:0 forKey:v47];
                  objc_msgSend(*(id *)(v86 + 944), "setObject:forKey:", v48, objc_msgSend(v50, "identifier"));
                }
              }

              id v44 = [v42 countByEnumeratingWithState:&v91 objects:v96 count:16];
            }

            while (v44);
          }

          uint64_t v1 = v86;
          [*(id *)(v86 + 944) synchronize];
          __int128 v51 = objc_autoreleasePoolPush();
          __int128 v52 = (void *)qword_100219F60;
          uint64_t v2 = &ACAccountStoreDidChangeNotification_ptr;
          if (qword_100219F60)
          {
            +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
            objc_msgSend( v52,  "WFLog:message:",  3,  "%s: Remove duplicate PNL entries took %fs",  "WiFiManagerMigratePNL",  v53 - v40);
          }

          objc_autoreleasePoolPop(v51);
          objc_autoreleasePoolPop(context);
          uint64_t v6 = (uint64_t)v84;
        }

        if (v6 <= 22)
        {
          CFBooleanRef v85 = objc_autoreleasePoolPush();
          [(id)v2[374] timeIntervalSinceReferenceDate];
          double v55 = v54;
          id v56 = [*(id *)(v1 + 944) dictionaryRepresentation];
          __int128 v87 = 0u;
          __int128 v88 = 0u;
          __int128 v89 = 0u;
          __int128 v90 = 0u;
          id v57 = [v56 allKeys];
          id v58 = [v57 countByEnumeratingWithState:&v87 objects:v95 count:16];
          if (v58)
          {
            id v59 = v58;
            uint64_t v60 = *(void *)v88;
            do
            {
              for (CFIndex j = 0LL; j != v59; CFIndex j = (char *)j + 1)
              {
                if (*(void *)v88 != v60) {
                  objc_enumerationMutation(v57);
                }
                uint64_t v62 = *(void *)(*((void *)&v87 + 1) + 8LL * (void)j);
                id v63 =  objc_msgSend( [CWFNetworkProfile alloc],  "initWithExternalForm:",  objc_msgSend(v56, "objectForKeyedSubscript:", v62));
                if (v63)
                {
                  uint64_t v64 = (CFDictionaryRef *)sub_1000A1DEC(v63, 0LL);
                  if (v64)
                  {
                    BOOL v65 = v64;
                    BOOL v66 = sub_1000A063C(v64);
                    if (v66)
                    {
                      int v67 = v66;
                      [*(id *)(v1 + 944) setObject:0 forKey:v62];
                      BOOL v68 = *(void **)(v86 + 944);
                      id v69 = [v67 externalForm];
                      uint64_t v70 = v68;
                      uint64_t v1 = v86;
                      [v70 setObject:v69 forKey:v62];
                    }

                    CFRelease(v65);
                  }
                }
              }

              id v59 = [v57 countByEnumeratingWithState:&v87 objects:v95 count:16];
            }

            while (v59);
          }

          [*(id *)(v1 + 944) synchronize];
          unsigned int v71 = objc_autoreleasePoolPush();
          uint64_t v72 = (void *)qword_100219F60;
          uint64_t v2 = &ACAccountStoreDidChangeNotification_ptr;
          if (qword_100219F60)
          {
            +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
            objc_msgSend( v72,  "WFLog:message:",  3,  "%s: Migrate OS-specific attributes to CWFNetworkProfile took %fs",  "WiFiManagerMigratePNL",  v73 - v55);
          }

          objc_autoreleasePoolPop(v71);
          objc_autoreleasePoolPop(v85);
        }

        uint64_t v74 = objc_autoreleasePoolPush();
        CFIndex v75 = (void *)qword_100219F60;
        if (qword_100219F60)
        {
          [(id)v2[374] timeIntervalSinceReferenceDate];
          objc_msgSend(v75, "WFLog:message:", 3, "%s: Entire PNL update took %fs", "WiFiManagerMigratePNL", v76 - v4);
        }

        objc_autoreleasePoolPop(v74);
        return;
      }

uint64_t sub_100081554(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 1808);
  }
  uint64_t v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: manager is NULL",  "WiFiManagerIsConnectionQualityLocalCollectionEnabled");
  }
  objc_autoreleasePoolPop(v2);
  return 0LL;
}

void sub_1000815C0(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 1808) != (_DWORD)a2)
    {
      double v4 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: setting connection quality local collection to %d",  "WiFiManagerSetConnectionQualityLocalCollectionEnabled",  a2);
      }
      objc_autoreleasePoolPop(v4);
      *(_BYTE *)(a1 + 180_Block_object_dispose(va, 8) = a2;
    }
  }

  else
  {
    uint64_t v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: manager is NULL",  "WiFiManagerSetConnectionQualityLocalCollectionEnabled");
    }
    objc_autoreleasePoolPop(v5);
  }

uint64_t sub_10008168C(uint64_t a1)
{
  return *(void *)(a1 + 1792);
}

void sub_100081694(const __CFArray *a1, void *a2, uint64_t a3, const __CFDictionary *a4)
{
  if (byte_100219FA1 && ((_DWORD)a3 == 5 || !(_DWORD)a3))
  {
    double v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: Lockdown Mode is enabled, ignoring type %@(%d)", "WiFiManagerSimulateNotification", sub_10003B428(a3), a3 message];
    }
LABEL_6:
    objc_autoreleasePoolPop(v7);
    return;
  }

  double v8 = sub_10006C77C(a1);
  if (!v8)
  {
    double v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: failed to get device managers",  "WiFiManagerSimulateNotification",  v19,  v20);
    }
    goto LABEL_6;
  }

  id v9 = v8;
  if (CFArrayGetCount(v8))
  {
    ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(v9, 0LL);
    if (ValueAtIndex)
    {
      id v11 = ValueAtIndex;
      uint64_t v12 = sub_10003BEDC((uint64_t)ValueAtIndex);
      if (v12)
      {
        switch((int)a3)
        {
          case 2:
            sub_1000EF9DC((uint64_t)v11, a2);
            break;
          case 5:
            if (!a2)
            {
              double v18 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: network is null",  "WiFiManagerSimulateNotification");
              }
              goto LABEL_29;
            }

            sub_10009582C((uint64_t)a2, @"WiFiNetworkUserAcceptedRecommendationAt", 0LL);
            sub_1000EF2D0((uint64_t)v11, (uint64_t)a2);
            break;
          case 7:
            int v13 = sub_10004CE2C(v12);
            CFAllocatorRef v14 = kCFAllocatorDefault;
            int v15 = 7;
            uint64_t v16 = 2LL;
            goto LABEL_17;
          case 8:
            sub_1000EF60C((uint64_t)v11, a2);
            break;
          case 10:
            sub_1000EF69C((uint64_t)v11, a2);
            break;
          case 13:
            CFPropertyListRef Value = (const __CFString *)CFDictionaryGetValue(a4, @"SSID_STR");
            sub_1000F9D2C(v11, Value);
            break;
          case 14:
            sub_1000FA2C0((uint64_t)v11, a2);
            break;
          default:
            int v13 = sub_10004CE2C(v12);
            CFAllocatorRef v14 = kCFAllocatorDefault;
            int v15 = a3;
            uint64_t v16 = 0LL;
LABEL_17:
            sub_1000AB9E4((uint64_t)v14, v15, v16, v11, v13, (CFDictionaryRef *)a2, 0LL);
            break;
        }

        goto LABEL_22;
      }
    }

    double v18 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: device manager is null",  "WiFiManagerSimulateNotification");
    }
  }

  else
  {
    double v18 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: device managers array is empty",  "WiFiManagerSimulateNotification");
    }
  }

uint64_t sub_100081958(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 232);
  }
  uint64_t v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: manager is NULL", "WiFiManagerGetKnownNetworks");
  }
  objc_autoreleasePoolPop(v2);
  return 0LL;
}

void sub_1000819C4(uint64_t a1, uint64_t a2)
{
}

void sub_1000819D4(uint64_t a1)
{
}

uint64_t sub_1000819E0(uint64_t a1)
{
  uint64_t result = sub_10003AFF4((uint64_t)"WiFiManagerGetKnownNetworksCache_block_invoke");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 4kdebug_trace(731381764LL, 0LL, 0LL, 0LL, 0LL) = result;
  return result;
}

void sub_100081A14(uint64_t a1)
{
  if (CFArrayGetCount(*(CFArrayRef *)(*(void *)(a1 + 40) + 232LL)) < 401)
  {
  }

  else
  {
    uint64_t v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s PNL greater than theshold (%d), won't end xpc_transaction",  "WiFiManagerGetKnownNetworksCache_block_invoke_2",  400);
    }
    objc_autoreleasePoolPop(v2);
  }

void sub_100081AA4(uint64_t a1)
{
  v1[0] = a1;
  v1[1] = 0xAAAAAAAA0000004ALL;
  v1[2] = 0LL;
  v1[3] = 1LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v1);
}

uint64_t sub_100081AE8(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 1809);
  }
  uint64_t v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: manager is NULL",  "WiFiManagerArePrivacyRestrictionsForWiFiConnectionQualityDisabled");
  }
  objc_autoreleasePoolPop(v2);
  return 0LL;
}

void sub_100081B54(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 1809) != (_DWORD)a2)
    {
      double v4 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: arePrivacyRestrictionsForWiFiConnectionQualityDisabled now set to %d",  "WiFiManagerSetPrivacyRestrictionsForWiFiConnectionQualityDisabled",  a2);
      }
      objc_autoreleasePoolPop(v4);
      uint64_t v5 = (const void **)&kCFBooleanTrue;
      if (!(_DWORD)a2) {
        uint64_t v5 = (const void **)&kCFBooleanFalse;
      }
      sub_10006D08C((void *)a1, @"ConnectionQualityPrivacyRestrictionsDisabled", *v5, 0);
      *(_BYTE *)(a1 + 1809) = a2;
      context[0] = a1;
      context[1] = 0xAAAAAAAA0000002DLL;
      void context[2] = 0LL;
      void context[3] = 1LL;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    }
  }

  else
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: manager is NULL",  "WiFiManagerSetPrivacyRestrictionsForWiFiConnectionQualityDisabled");
    }
    objc_autoreleasePoolPop(v6);
  }

BOOL sub_100081C7C(uint64_t a1)
{
  return *(_BYTE *)(a1 + 1160) != 0;
}

void sub_100081C8C()
{
}

CFStringRef sub_100081CA0(uint64_t a1)
{
  id v34 = objc_autoreleasePoolPush();
  id v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 1464), "latestLocation"), "copy");
  double v3 = v2;
  if (!v2)
  {
    CFIndex v28 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s won't determine known network SSID for location as there's no location available (are Location Services enabled?)",  "WiFiManagerCopySSIDRepresentingMostUsedNetworkGeoTaggedToCurrentDeviceLocation",  v32);
    }
    goto LABEL_41;
  }

  [v2 horizontalAccuracy];
  if (v4 >= 100.1)
  {
    CFIndex v28 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s won't determine known network SSID for location as location accuracy is greater than threshold (%f)",  "WiFiManagerCopySSIDRepresentingMostUsedNetworkGeoTaggedToCurrentDeviceLocation",  0x4059066666666666);
    }
LABEL_41:
    objc_autoreleasePoolPop(v28);
    uint64_t v6 = 0LL;
    goto LABEL_46;
  }

  id v5 = objc_msgSend( +[WiFiAnalyticsManager sharedWiFiAnalyticsManager]( WiFiAnalyticsManager,  "sharedWiFiAnalyticsManager"),  "copyNetworksAvailableAtLocation:",  v3);
  uint64_t v6 = v5;
  if (!v5 || ![v5 count])
  {
    id v27 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s copyNetworksAvailableAtLocation returned null or empty array, likely no known networks at this location. Returning NULL",  "WiFiManagerCopySSIDRepresentingMostUsedNetworkGeoTaggedToCurrentDeviceLocation");
    }
    goto LABEL_45;
  }

  if ([v6 count] == (id)1)
  {
    id v20 = [v6 firstObject];
    if (v20) {
      goto LABEL_33;
    }
    goto LABEL_43;
  }

  id v7 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  id v8 = [v6 countByEnumeratingWithState:&v39 objects:v44 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v40;
    do
    {
      for (CFIndex i = 0LL; i != v9; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v40 != v10) {
          objc_enumerationMutation(v6);
        }
        uint64_t v12 = *(const void **)(*((void *)&v39 + 1) + 8LL * (void)i);
        if (sub_100095BC8(v12)) {
          [v7 addObject:sub_100095BC8(v12)];
        }
      }

      id v9 = [v6 countByEnumeratingWithState:&v39 objects:v44 count:16];
    }

    while (v9);
  }

  if (![v7 count])
  {
    id v27 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s Multiple matches for current location, but couldn't determine the SSIDs of *any* of them, this is likely a se rious bug but possibly a rare setup",  "WiFiManagerCopySSIDRepresentingMostUsedNetworkGeoTaggedToCurrentDeviceLocation");
    }
    goto LABEL_45;
  }

  uint64_t v13 = sub_100063560(a1);
  if (!v13)
  {
    __int128 v31 = objc_autoreleasePoolPush();
    __int128 v29 = v34;
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s Couldn't get known networks cache, bail",  "WiFiManagerCopySSIDRepresentingMostUsedNetworkGeoTaggedToCurrentDeviceLocation");
    }
    goto LABEL_57;
  }

  CFAllocatorRef v14 = +[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", v13);
  if (!v14 || (int v15 = v14, !-[NSMutableArray count](v14, "count")))
  {
LABEL_46:
    CFStringRef Copy = 0LL;
    goto LABEL_47;
  }

  v45.length = (CFIndex)-[NSMutableArray count](v15, "count");
  v45.CFIndex location = 0LL;
  CFArraySortValues((CFMutableArrayRef)v15, v45, (CFComparatorFunction)sub_10009C1E4, 0LL);
  if (!-[NSMutableArray count](v15, "count"))
  {
    __int128 v31 = objc_autoreleasePoolPush();
    __int128 v29 = v34;
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s Sorted network list empty, this shouldn't happen.",  "WiFiManagerCopySSIDRepresentingMostUsedNetworkGeoTaggedToCurrentDeviceLocation");
    }
    goto LABEL_57;
  }

  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  id v16 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v35,  v43,  16LL);
  if (!v16) {
    goto LABEL_43;
  }
  id v17 = v16;
  id v33 = v3;
  uint64_t v18 = *(void *)v36;
  do
  {
    for (CFIndex j = 0LL; j != v17; CFIndex j = (char *)j + 1)
    {
      if (*(void *)v36 != v18) {
        objc_enumerationMutation(v15);
      }
      id v20 = *(id *)(*((void *)&v35 + 1) + 8LL * (void)j);
      double v21 = objc_autoreleasePoolPush();
      id v22 = [v7 filteredArrayUsingPredicate:+[NSPredicate predicateWithFormat:]( NSPredicate, "predicateWithFormat:", @"SELF MATCHES %@", sub_100095BC8(v20))];
      if (v22)
      {
        id v23 = [v22 count];
        objc_autoreleasePoolPop(v21);
        if (v23) {
          goto LABEL_32;
        }
      }

      else
      {
        objc_autoreleasePoolPop(v21);
      }
    }

    id v17 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v35,  v43,  16LL);
  }

  while (v17);
  id v20 = 0LL;
LABEL_32:
  double v3 = v33;
  if (!v20)
  {
LABEL_43:
    id v27 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s Logic error, determination process finished without detecting a handleable error and didn't finish with a det ermination. This is a bug.",  "WiFiManagerCopySSIDRepresentingMostUsedNetworkGeoTaggedToCurrentDeviceLocation");
    }
LABEL_45:
    objc_autoreleasePoolPop(v27);
    goto LABEL_46;
  }

uint64_t sub_1000821A4(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000054LL;
  v2[2] = 0LL;
  uint64_t v3 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  return v3;
}

uint64_t sub_1000821E8(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000055LL;
  v2[2] = 0LL;
  uint64_t v3 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  return v3;
}

uint64_t sub_10008222C(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000056LL;
  v2[2] = 0LL;
  uint64_t v3 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  return v3;
}

uint64_t sub_100082270(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000058LL;
  v2[2] = 0LL;
  uint64_t v3 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  return v3;
}

BOOL sub_1000822B4(uint64_t a1, char a2)
{
  return (a2 & 2) != 0 && *(_BYTE *)(a1 + 1920) != 0;
}

uint64_t sub_1000822D0(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 1921);
  if (*(_BYTE *)(a1 + 1920))
  {
    BOOL v4 = 1LL;
    switch(*(_BYTE *)(a1 + 1921))
    {
      case 0:
        break;
      case 1:
      case 8:
        BOOL v6 = (((_DWORD)a2 - 2) & 0xFFFFFFFD) == 0;
        goto LABEL_15;
      case 2:
        BOOL v6 = (_DWORD)a2 == 4 || (_DWORD)a2 == 1;
LABEL_15:
        BOOL v4 = v6;
        break;
      case 4:
        BOOL v4 = (a2 - 1) < 2;
        break;
      default:
        BOOL v4 = 0LL;
        break;
    }

    id v7 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: OpMode current state:%d  requested %d status %d",  "WiFiManagerIsOpModeAllowed",  *(unsigned __int8 *)(a1 + 1921),  a2,  v4);
    }
    objc_autoreleasePoolPop(v7);
  }

  else
  {
    BOOL v4 = v3 == 0;
    if ((_DWORD)a2 == 1)
    {
      if (v3 != 2) {
        return v4;
      }
      return 1LL;
    }

    if ((_DWORD)a2 == 2 && v3 == 1) {
      return 1LL;
    }
  }

  return v4;
}

_DWORD *sub_1000823EC(_DWORD *result, int a2, int a3)
{
  if (result[85] != a2)
  {
    result[85] = 0;
    sub_10006D08C(result, @"AutoInstantHotspot", @"Never", a3);
    objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "sendAutoHotspotModeDidChangeEvent");
    return objc_msgSend( +[WiFiXPCManager sharedXPCManager](WiFiXPCManager, "sharedXPCManager"),  "sendUserSettingsDidChangeEvent");
  }

  return result;
}

uint64_t sub_100082454(uint64_t result, int a2, int a3)
{
  if (*(_DWORD *)(result + 348) != a2)
  {
    *(_DWORD *)(result + 34_Block_object_dispose(va, 8) = a2;
    BOOL v4 = @"Never";
    if (a2 == 1) {
      BOOL v4 = @"Ask for Approval";
    }
    if (a2 == 2) {
      id v5 = @"Automatic";
    }
    else {
      id v5 = v4;
    }
    return sub_10006D08C((void *)result, @"ShareMyPersonalHotspot", v5, a3);
  }

  return result;
}

uint64_t sub_1000824A4(uint64_t a1)
{
  id v2 = sub_10006AA50((void *)a1, @"AutoInstantHotspot");
  if (v2)
  {
    int v3 = v2;
    if (!CFEqual(@"Never", v2) && !CFEqual(@"Ask to Join", v3)) {
      CFEqual(@"Automatic", v3);
    }
  }

  *(_DWORD *)(a1 + 340) = 0;
  return 0LL;
}

uint64_t sub_100082518(uint64_t a1)
{
  id v2 = sub_10006AA50((void *)a1, @"ShareMyPersonalHotspot");
  if (v2)
  {
    int v3 = v2;
    if (CFEqual(@"Never", v2))
    {
      uint64_t v4 = 0LL;
    }

    else
    {
      uint64_t v4 = 1LL;
      if (!CFEqual(@"Ask for Approval", v3))
      {
        if (CFEqual(@"Automatic", v3)) {
          uint64_t v4 = 2LL;
        }
        else {
          uint64_t v4 = 1LL;
        }
      }
    }
  }

  else
  {
    uint64_t v4 = 1LL;
  }

  *(_DWORD *)(a1 + 34_Block_object_dispose(va, 8) = v4;
  return v4;
}

void sub_1000825B0(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 1912) != a2)
  {
    *(double *)(a1 + 1912) = a2;
    sub_10006FB94((void *)a1, @"AutoInstantHotspotTriggerInterval", a2);
  }

void sub_1000825D4(uint64_t a1, int a2)
{
  int v3 = a2;
  context[0] = a1;
  context[1] = 0xAAAAAAAA0000005ALL;
  void context[2] = &v3;
  void context[3] = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
}

void sub_10008261C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  if (sub_100068AB0(a1))
  {
    id v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: purging local store if it size exceeds %lu bytes",  "WiFiManagerPrune3BarsNetworks",  a2);
    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend( +[WiFi3BarsObserver sharedWiFi3BarsObserver](WiFi3BarsObserver, "sharedWiFi3BarsObserver"),  "prune3BarsNetworks:",  a2);
  }

  objc_autoreleasePoolPop(v4);
}

void sub_1000826B4(id *a1)
{
  id v2 = objc_autoreleasePoolPush();
  int v3 = (void *)sub_10003AFF4((uint64_t)"WiFiManagerStart3BarsFetchForCurrentLocation");
  if (a1)
  {
    uint64_t v4 = sub_10007E6F0(a1);
    unsigned int v5 = +[WiFiLocationManager isLocationValid:uptoSeconds:isHighAccuracy:]( &OBJC_CLASS___WiFiLocationManager,  "isLocationValid:uptoSeconds:isHighAccuracy:",  v4,  0LL,  3600.0);
    BOOL v6 = objc_autoreleasePoolPush();
    if (v5)
    {
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: fetching networks for current location",  "WiFiManagerStart3BarsFetchForCurrentLocation");
      }
      objc_autoreleasePoolPop(v6);
      objc_msgSend( +[WiFi3BarsObserver sharedWiFi3BarsObserver](WiFi3BarsObserver, "sharedWiFi3BarsObserver"),  "fetch3BarsNetworksForLocation:",  v4);
      if (v4) {
LABEL_6:
      }
        CFRelease(v4);
    }

    else
    {
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: location not valid",  "WiFiManagerStart3BarsFetchForCurrentLocation");
      }
      objc_autoreleasePoolPop(v6);
      if (v4) {
        goto LABEL_6;
      }
    }
  }

  objc_autoreleasePoolPop(v2);
}

uint64_t sub_1000827BC(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 1928);
  }
  id v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: manager ref is null", "WiFiManagerGet3BarsSource");
  }
  objc_autoreleasePoolPop(v2);
  return 0LL;
}

void *sub_100082828(void *a1)
{
  if (a1) {
    return sub_100082834(a1);
  }
  return a1;
}

CFArrayRef sub_100082834(void *a1)
{
  id v2 = +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults");
  int v3 = -[NSUserDefaults arrayForKey:](v2, "arrayForKey:", @"FamilyHotspotPreferences");
  if (v3) {
    return CFArrayCreateCopy(kCFAllocatorDefault, v3);
  }
  unsigned int v5 = sub_10006AA50(a1, @"FamilyHotspotPreferences");
  if (v5
    && (sub_1000829B4(a1, (uint64_t)v5),
        sub_10006D08C(a1, @"FamilyHotspotPreferences", 0LL, 0),
        (int v3 = -[NSUserDefaults arrayForKey:](v2, "arrayForKey:", @"FamilyHotspotPreferences")) != 0LL))
  {
    return CFArrayCreateCopy(kCFAllocatorDefault, v3);
  }

  else
  {
    return 0LL;
  }

CFDictionaryRef sub_1000828E8(void *a1)
{
  id v2 = +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults");
  int v3 = -[NSUserDefaults dictionaryForKey:](v2, "dictionaryForKey:", @"InterfaceDataUsageV1");
  if (v3) {
    return CFDictionaryCreateCopy(kCFAllocatorDefault, v3);
  }
  unsigned int v5 = sub_10006AA50(a1, @"InterfaceDataUsageV1");
  if (v5
    && (-[NSUserDefaults setObject:forKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "setObject:forKey:",  v5,  @"InterfaceDataUsageV1"),  sub_10006D08C(a1, @"InterfaceDataUsageV1", 0LL, 0),  (int v3 = -[NSUserDefaults dictionaryForKey:](v2, "dictionaryForKey:", @"InterfaceDataUsageV1")) != 0LL))
  {
    return CFDictionaryCreateCopy(kCFAllocatorDefault, v3);
  }

  else
  {
    return 0LL;
  }

void sub_1000829B4(void *a1, uint64_t a2)
{
  int v3 = objc_autoreleasePoolPush();
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v5 = CFDateCreate(kCFAllocatorDefault, Current);
  if (v5)
  {
    CFDateRef v6 = v5;
    sub_10006D08C(a1, @"FamilyHotspotPreferencesUpdateTimestamp", v5, 0);
    CFRelease(v6);
  }

  objc_autoreleasePoolPop(v3);
}

uint64_t sub_100082A4C(void *a1)
{
  return sub_10006D08C(a1, @"UserNotificationBlacklist", 0LL, 0);
}

CFDictionaryRef sub_100082A9C(void *a1)
{
  return sub_10007AF34(a1, 0);
}

id sub_100082AA4(uint64_t a1, uint64_t a2)
{
  return -[NSUserDefaults setObject:forKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "setObject:forKey:",  a2,  @"Custom network settings");
}

uint64_t sub_100082ADC()
{
  CFBooleanRef v0 = objc_autoreleasePoolPush();
  uint64_t v1 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    [(id)qword_100219F60 WFLog:3, "%s: returning data usage info %@", "WiFiManagerCopyHotspotDataUsage", 0 message];
  }
  objc_autoreleasePoolPop(v1);
  objc_autoreleasePoolPop(v0);
  return 0LL;
}

void sub_100082B4C(uint64_t a1, int a2)
{
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 1945) != a2)
    {
      *(_BYTE *)(a1 + 1945) = a2;
      id v2 = (const void **)&kCFBooleanTrue;
      if (!a2) {
        id v2 = (const void **)&kCFBooleanFalse;
      }
      sub_10006D08C((void *)a1, @"isWiFiPowerModificationDisabled", *v2, 0);
    }
  }

  else
  {
    int v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null manager",  "WiFiManagerDisablePowerModification");
    }
    objc_autoreleasePoolPop(v3);
  }

uint64_t sub_100082C08(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 352);
  }
  id v2 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null manager",  "WiFiManagerIsPersonalHotspotModificationDisabled");
  }
  objc_autoreleasePoolPop(v2);
  return 0LL;
}

void sub_100082C74(uint64_t a1, int a2)
{
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 352) != a2)
    {
      *(_BYTE *)(a1 + 352) = a2;
      id v2 = (const void **)&kCFBooleanTrue;
      if (!a2) {
        id v2 = (const void **)&kCFBooleanFalse;
      }
      sub_10006D08C((void *)a1, @"isPersonalHotspotModificationDisabled", *v2, 0);
    }
  }

  else
  {
    int v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null manager",  "WiFiManagerDisablePersonalHotspotModification");
    }
    objc_autoreleasePoolPop(v3);
  }

CFDictionaryRef sub_100082D30(CFDictionaryRef result)
{
  if (result) {
    return sub_100082D40(result, 0);
  }
  return result;
}

CFDictionaryRef sub_100082D40(void *a1, int a2)
{
  uint64_t v4 = +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults");
  CFDateRef v5 = -[NSUserDefaults dictionaryForKey:](v4, "dictionaryForKey:", @"UserNotificationBlacklist");
  if (v5) {
    return CFDictionaryCreateCopy(kCFAllocatorDefault, v5);
  }
  id v7 = sub_10006AA50(a1, @"UserNotificationBlacklist");
  if (v7
    && (-[NSUserDefaults setObject:forKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "setObject:forKey:",  v7,  @"UserNotificationBlacklist"),  sub_10006D08C(a1, @"UserNotificationBlacklist", 0LL, a2),  (CFDateRef v5 = -[NSUserDefaults dictionaryForKey:](v4, "dictionaryForKey:", @"UserNotificationBlacklist")) != 0LL))
  {
    return CFDictionaryCreateCopy(kCFAllocatorDefault, v5);
  }

  else
  {
    return 0LL;
  }

void sub_100082E10(uint64_t a1, const __CFArray *a2)
{
  uint64_t v4 = objc_autoreleasePoolPush();
  if (a1)
  {
    if (a2 && *(_BYTE *)(a1 + 1160))
    {
      *(void *)(a1 + 624) = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0LL, a2);
      context[0] = a1;
      context[1] = 0xAAAAAAAA0000007FLL;
      void context[2] = 0LL;
      void context[3] = 1LL;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
    }
  }

  else
  {
    CFDateRef v5 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "%s: manager is NULL", "WiFiManagerSetAmbiguousSSIDs");
    }
    objc_autoreleasePoolPop(v5);
  }

  objc_autoreleasePoolPop(v4);
}

id sub_100082EE8(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  if (a1 && (int v3 = *(void **)(a1 + 1856)) != 0LL)
  {
    id v4 = [v3 appInForeground];
  }

  else
  {
    CFDateRef v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Null appStateManager",  "__WiFiManagerIsAppInForeground");
    }
    objc_autoreleasePoolPop(v6);
    id v4 = 0LL;
  }

  objc_autoreleasePoolPop(v2);
  return v4;
}

CFNumberRef sub_100082F78(const __CFNumber *result, CFDictionaryRef theDict)
{
  if (result)
  {
    if (theDict)
    {
      uint64_t result = (const __CFNumber *)CFDictionaryGetValue(theDict, @"NetworkAppOverride");
      if (result)
      {
        uint64_t valuePtr = 0LL;
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        id v2 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: setting user interaction override to networking application with mask=0x%llx",  "WiFiManagerSetUserInteractionOverride",  valuePtr);
        }
        objc_autoreleasePoolPop(v2);
        int v3 = +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance");
        return (const __CFNumber *)-[WiFiUserInteractionMonitor setOverrideApplicationState:]( v3,  "setOverrideApplicationState:",  valuePtr);
      }
    }

    else
    {
      id v4 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: resetting user interaction overrides",  "WiFiManagerSetUserInteractionOverride");
      }
      objc_autoreleasePoolPop(v4);
      return (const __CFNumber *)-[WiFiUserInteractionMonitor resetOverrideStates]( +[WiFiUserInteractionMonitor sharedInstance]( &OBJC_CLASS___WiFiUserInteractionMonitor,  "sharedInstance"),  "resetOverrideStates");
    }
  }

  return result;
}

CFNumberRef sub_100083078(const __CFNumber *result, CFDictionaryRef theDict)
{
  if (result)
  {
    if (theDict)
    {
      CFPropertyListRef Value = CFDictionaryGetValue(theDict, @"NetworkPropSsidOverride");
      uint64_t result = (const __CFNumber *)CFDictionaryGetValue(theDict, @"NetworkPropOverrideMask");
      if (result)
      {
        uint64_t valuePtr = 0LL;
        CFNumberGetValue(result, kCFNumberLongLongType, &valuePtr);
        id v4 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, "%s: setting user interaction network override for ssid %@ with mask=0x%llx", "WiFiManagerSetUserInteractionNwOverride", Value, valuePtr message];
        }
        objc_autoreleasePoolPop(v4);
        CFDateRef v5 = +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance");
        -[WiFiUserInteractionMonitor updateOverrideNetworkState:overrideValue:]( v5,  "updateOverrideNetworkState:overrideValue:",  Value,  valuePtr);
        return (const __CFNumber *)-[WiFiUserInteractionMonitor dumpOverrideNetworkState]( +[WiFiUserInteractionMonitor sharedInstance]( &OBJC_CLASS___WiFiUserInteractionMonitor,  "sharedInstance"),  "dumpOverrideNetworkState");
      }
    }

    else
    {
      CFDateRef v6 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: resetting user interaction network overrides",  "WiFiManagerSetUserInteractionNwOverride");
      }
      objc_autoreleasePoolPop(v6);
      return (const __CFNumber *)-[WiFiUserInteractionMonitor resetOverrideNetworkStates]( +[WiFiUserInteractionMonitor sharedInstance]( &OBJC_CLASS___WiFiUserInteractionMonitor,  "sharedInstance"),  "resetOverrideNetworkStates");
    }
  }

  return result;
}

BOOL sub_1000831A4(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  id v8 = (const __CFString *)sub_10007F96C(a1, a2, a3);
  id v9 = (const __CFString *)sub_10007F96C(a1, a2, a4);
  uint64_t v10 = (const __CFString *)sub_10007FC8C(a1, a2, a3);
  id v11 = (const __CFString *)sub_10007FC8C(a1, a2, a4);
  if (v8)
  {
    if (CFStringCompare(v8, kSCValNetIPv4ConfigMethodDHCP, 0LL)) {
      BOOL v12 = 1;
    }
    else {
      BOOL v12 = v9 == 0LL;
    }
    BOOL v14 = 0;
    if (!v12)
    {
      BOOL v13 = CFStringCompare(v9, kSCValNetIPv4ConfigMethodDHCP, 0LL) || v10 == 0LL;
      if (!v13
        && CFStringCompare(v10, kSCValNetIPv6ConfigMethodAutomatic, 0LL) == kCFCompareEqualTo
        && v11
        && CFStringCompare(v11, kSCValNetIPv6ConfigMethodAutomatic, 0LL) == kCFCompareEqualTo)
      {
        BOOL v14 = 1;
      }
    }

    CFRelease(v8);
    if (!v9) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  BOOL v14 = 0LL;
  if (v9) {
LABEL_16:
  }
    CFRelease(v9);
LABEL_17:
  if (v10) {
    CFRelease(v10);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v14;
}

void sub_1000832E8(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    id v4 = sub_1000951FC(a2, @"BSSID");
    if (v4) {
      sub_10009582C(a1, @"BSSID", v4);
    }
    CFDateRef v5 = sub_1000951FC(a2, @"addedAt");
    if (v5) {
      sub_10009582C(a1, @"addedAt", v5);
    }
    if (&_CNForgetSSID)
    {
      if (sub_1000951FC(a2, kCNSNetworkWasCaptiveProperty))
      {
        CFDateRef v6 = (void *)kCNSNetworkWasCaptiveProperty;
        id v7 = sub_1000951FC(a2, kCNSNetworkWasCaptiveProperty);
        sub_10009582C(a1, v6, v7);
      }

      if (sub_1000951FC(a2, kCNSCaptiveNetworkProperty))
      {
        id v8 = (void *)kCNSCaptiveNetworkProperty;
        id v9 = sub_1000951FC(a2, kCNSCaptiveNetworkProperty);
        sub_10009582C(a1, v8, v9);
      }

      if (sub_1000951FC(a2, kCNSDisabledByCaptiveProperty) && !sub_1000951FC(a1, kCNSDisabledByCaptiveProperty))
      {
        uint64_t v10 = (void *)kCNSDisabledByCaptiveProperty;
        id v11 = sub_1000951FC(a2, kCNSDisabledByCaptiveProperty);
        sub_10009582C(a1, v10, v11);
      }
    }

    BOOL v12 = sub_100095B4C(a2);
    BOOL v13 = sub_10009860C(a2);
    BOOL v22 = sub_100095318(a2);
    BOOL v23 = sub_10009EFD8(a2);
    uint64_t v24 = (const __CFBoolean *)sub_1000951FC(a2, @"PrivateMacDefaultToOFF");
    BOOL v14 = sub_1000951FC(a2, @"DomainName");
    int v15 = sub_1000951FC(a2, @"DisplayedOperatorName");
    int v27 = sub_10009DF44(a2);
    id v16 = sub_1000951FC(a2, @"PayloadUUID");
    id v17 = sub_1000951FC(a2, @"PolicyUUID");
    int v25 = sub_1000A1D44(a2);
    BOOL v26 = sub_1000A4B04(a2);
    if (v16) {
      sub_10009582C(a1, @"PayloadUUID", v16);
    }
    if (v17) {
      sub_10009582C(a1, @"PolicyUUID", v17);
    }
    CFBooleanRef v18 = (CFBooleanRef)sub_1000951FC(a2, @"NetworkAddedByProfile");
    if (v12) {
      sub_10009582C(a1, @"IsEapNetwork", kCFBooleanTrue);
    }
    if (v18 && v18 == kCFBooleanTrue) {
      sub_10009582C(a1, @"NetworkAddedByProfile", v18);
    }
    if (v13) {
      sub_10009582C(a1, @"isProfileBasedNetwork", kCFBooleanTrue);
    }
    if (v22) {
      sub_10009582C(a1, @"isHs20BasedNetwork", kCFBooleanTrue);
    }
    uint64_t v19 = v15;
    if (v23) {
      sub_10009582C(a1, @"isCarrierBundleBased", kCFBooleanTrue);
    }
    CFBooleanRef v20 = v24;
    if (!sub_1000951FC(a1, @"PrivateMacDefaultToOFF") && v24)
    {
      if (v24 != kCFBooleanTrue) {
        CFBooleanRef v20 = kCFBooleanFalse;
      }
      sub_10009582C(a1, @"PrivateMacDefaultToOFF", v20);
      sub_10009582C(a1, @"PrivateMacProfileDefaultInitialValue", v20);
    }

    if (v14) {
      sub_10009582C(a1, @"DomainName", v14);
    }
    if (v19) {
      sub_10009582C(a1, @"DisplayedOperatorName", v19);
    }
    if (v27) {
      sub_10009582C(a1, @"IsCarplayNetwork", kCFBooleanTrue);
    }
    if (v25) {
      sub_10009582C(a1, @"PublicAirPlayNetwork", kCFBooleanTrue);
    }
    if (v26)
    {
      double v21 = sub_1000951FC(a2, @"AccessoryIdentifier");
      if (v21) {
        sub_10009582C(a1, @"AccessoryIdentifier", v21);
      }
    }
  }

void sub_10008370C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v2[0] = a1;
    v2[1] = 0xAAAAAAAA00000070LL;
    v2[2] = a2;
    void v2[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  }

uint64_t sub_100083754(uint64_t a1, const void *a2)
{
  if (!a1) {
    goto LABEL_21;
  }
  if (!a2) {
    goto LABEL_21;
  }
  int v3 = (const __CFString *)sub_100095BC8(a2);
  if (!v3) {
    goto LABEL_21;
  }
  id v4 = v3;
  CFDateRef v5 = (const __CFString *)sub_1000951FC((uint64_t)a2, @"UpdateReason");
  if (!v5) {
    goto LABEL_21;
  }
  CFDateRef v6 = v5;
  CFTypeID v7 = CFGetTypeID(v5);
  if (v7 != CFStringGetTypeID()) {
    goto LABEL_21;
  }
  if (CFStringCompare(v6, @"UpdatePrivateMacReasonMigration", 0LL) == kCFCompareEqualTo)
  {
    CFComparisonResult v9 = CFStringCompare(@"Apple Store", v4, 0LL);
    uint64_t v10 = objc_autoreleasePoolPush();
    if (v9) {
      goto LABEL_16;
    }
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "WFMacRandomisation : Skipping migration for network <%@>", v4 message];
    }
    goto LABEL_20;
  }

  if (CFStringCompare(v6, @"ProfileAddition", 0LL))
  {
    if (CFStringCompare(v6, @"UpdatePrivateMacReasonMigrateToRotation", 0LL))
    {
      if (CFStringCompare(v6, @"UpdatePrivateMacReasonMigrateToTriState", 0LL) == kCFCompareEqualTo
        || CFStringCompare(v6, @"UpdatePrivateMacReasonLegacyCarplay", 0LL) == kCFCompareEqualTo)
      {
        goto LABEL_11;
      }

LABEL_21:
      uint64_t v12 = 1LL;
      goto LABEL_22;
    }

    CFComparisonResult v11 = CFStringCompare(@"Apple Store", v4, 0LL);
    uint64_t v10 = objc_autoreleasePoolPush();
    if (v11)
    {
LABEL_16:
      id v8 = v10;
      goto LABEL_17;
    }

    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "WFMacRandomisation : Skipping rotation migration for network <%@>", v4 message];
    }
LABEL_20:
    objc_autoreleasePoolPop(v10);
    goto LABEL_21;
  }

    CFRelease(v19);
    a5 = bytes;
    goto LABEL_22;
  }

  if (v7)
  {
    -[WiFiPerfPerAssoc associatedStateDidChange:withAssociatedNetworkRecord:withChangeReason:]( +[WiFiPerfPerAssoc sharedInstance](&OBJC_CLASS___WiFiPerfPerAssoc, "sharedInstance"),  "associatedStateDidChange:withAssociatedNetworkRecord:withChangeReason:",  0LL,  v10,  1020LL);
    CFBooleanRef v18 = +[WiFiPerfPerAssoc sharedInstance](&OBJC_CLASS___WiFiPerfPerAssoc, "sharedInstance");
    uint64_t v19 = 1LL;
    CFBooleanRef v20 = v8;
    id v17 = 2LL;
  }

  else
  {
    int v25 = *(dispatch_source_s **)(a3 + 8920);
    BOOL v26 = dispatch_time(0LL, 1000000000LL);
    dispatch_source_set_timer(v25, v26, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    int v27 = +[WiFiPerfPerAssoc sharedInstance](&OBJC_CLASS___WiFiPerfPerAssoc, "sharedInstance");
    id v17 = sub_100053B20(a1);
    CFBooleanRef v18 = v27;
    uint64_t v19 = 1LL;
    CFBooleanRef v20 = v8;
  }

            CFDictionaryAddValue(v13, @"CHANNEL", (const void *)a3);
            goto LABEL_35;
          }

    int v15 = +[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set");
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    obja = [a3 networks];
    id v16 = [obja countByEnumeratingWithState:&v36 objects:v48 count:16];
    if (v16)
    {
      id v17 = v16;
      CFBooleanRef v18 = *(void *)v37;
      do
      {
        for (CFIndex j = 0LL; j != v17; CFIndex j = (char *)j + 1)
        {
          if (*(void *)v37 != v18) {
            objc_enumerationMutation(obja);
          }
          CFBooleanRef v20 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)j);
          double v21 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
          objc_msgSend(v21, "setObject:forKeyedSubscript:", objc_msgSend(v20, "BSSID"), @"BSSID");
          objc_msgSend( v21,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  objc_msgSend(objc_msgSend(v20, "channel"), "channel")),  @"CHANNEL");
          objc_msgSend( v21,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  objc_msgSend(objc_msgSend(v20, "channel"), "flags")),  @"CHANNEL_FLAGS");
          BOOL v22 = sub_100094AAC((uint64_t)kCFAllocatorDefault, v21);
          if (v22)
          {
            BOOL v23 = v22;
            sub_10009582C((uint64_t)v22, @"forceBGScanParamsCompare", kCFBooleanTrue);
            [v15 addObject:v23];
            CFRelease(v23);
          }
        }

        id v17 = [obja countByEnumeratingWithState:&v36 objects:v48 count:16];
      }

      while (v17);
    }

    uint64_t v24 = (const __CFArray *)[v15 allObjects];
    a1 = (uint64_t *)v31;
    sub_1000D70F4(v31, v24, 0);
    a2 = v32;
    CFDateRef v6 = v33;
    a3 = v30;
    goto LABEL_35;
  }

    v14(a5, a2, *(void *)(a5 + 4440), theDict);
  }

  if (*(_DWORD *)(a1 + 3272) == 14) {
    return (const __CFArray *)14;
  }
  id v17 = *(_DWORD *)(a1 + 3344);
  switch(v17)
  {
    case 4:
      double v53 = objc_autoreleasePoolPush();
      double v54 = (void *)qword_100219F60;
      if (!qword_100219F60) {
        goto LABEL_79;
      }
      double v55 = "Not prompting ATJ, driving";
      goto LABEL_78;
    case 6:
      double v53 = objc_autoreleasePoolPush();
      double v54 = (void *)qword_100219F60;
      if (!qword_100219F60) {
        goto LABEL_79;
      }
      double v55 = "Not prompting ATJ, still driving";
      goto LABEL_78;
    case 3:
      double v53 = objc_autoreleasePoolPush();
      double v54 = (void *)qword_100219F60;
      if (!qword_100219F60) {
        goto LABEL_79;
      }
      double v55 = "Not prompting ATJ, running";
      goto LABEL_78;
  }

  if (!*(_BYTE *)(a1 + 6272))
  {
    double v53 = objc_autoreleasePoolPush();
    double v54 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_79;
    }
    double v55 = "Not prompting ATJ, due to user disabled auto join";
    goto LABEL_78;
  }

  if (!*(_DWORD *)(a1 + 108))
  {
    double v53 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: ask-to-join is set to off",  "__WiFiDeviceManagerDetermineNextAction",  v59);
    }
    goto LABEL_79;
  }

  if (*(_DWORD *)(a1 + 176) != 1)
  {
    double v53 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: not interactive. Suppressing ATJ action",  "__WiFiDeviceManagerDetermineNextAction",  v59);
    }
    goto LABEL_79;
  }

  CFBooleanRef v18 = *(const __CFArray **)(a1 + 1096);
  uint64_t v19 = objc_autoreleasePoolPush();
  if (!*(_DWORD *)(a1 + 108))
  {
    id v57 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: ask-to-join is set to off",  "__WiFiDeviceManagerDetermineAskToJoinActionFromScanResults");
    }
    goto LABEL_111;
  }

  p_superclass = &OBJC_CLASS___WiFiUserNotificationHistory.superclass;
  if (-[WiFiUserInteractionMonitor isAskToJoinAllowed]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isAskToJoinAllowed"))
  {
    if (*(_DWORD *)(a1 + 176) != 1) {
      goto LABEL_112;
    }
  }

  else
  {
    double v21 = -[WiFiUserInteractionMonitor isNetworkRecommendationAllowed]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isNetworkRecommendationAllowed");
    if (*(_DWORD *)(a1 + 176) != 1)
    {
LABEL_112:
      CFRange v45 = 0LL;
      __int128 v46 = 0LL;
      id v43 = 0LL;
      goto LABEL_69;
    }

    if ((v21 & 1) == 0)
    {
      id v57 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: ask to join not allowed due to user interaction state",  "__WiFiDeviceManagerDetermineAskToJoinActionFromScanResults");
      }
      goto LABEL_111;
    }
  }

  if (!v18)
  {
    id v57 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: scanResults is null",  "__WiFiDeviceManagerDetermineAskToJoinActionFromScanResults");
    }
    goto LABEL_111;
  }

  if (!CFArrayGetCount(v18))
  {
    id v57 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: scanResults is empty",  "__WiFiDeviceManagerDetermineAskToJoinActionFromScanResults");
    }
LABEL_111:
    objc_autoreleasePoolPop(v57);
    goto LABEL_112;
  }

  BOOL v22 = objc_autoreleasePoolPush();
  BOOL v23 = *(uint64_t (**(uint64_t, void))(a1 + 4688))(a1, *(void *)(a1 + 4696));
  if (v23 && (uint64_t v24 = v23, CFDictionaryGetCount(v23)))
  {
    int v25 = -[__CFDictionary allKeys](v24, "allKeys");
    BOOL v26 = [v25 mutableCopy];
    BOOL v66 = 0u;
    int v67 = 0u;
    BOOL v68 = 0u;
    id v69 = 0u;
    obCFIndex j = v25;
    int v27 = [v25 countByEnumeratingWithState:&v66 objects:buf count:16];
    if (v27)
    {
      CFIndex v28 = v27;
      id v63 = a1;
      uint64_t v64 = v26;
      uint64_t v60 = v22;
      BOOL v61 = v18;
      uint64_t v62 = v19;
      __int128 v29 = *(void *)v67;
      do
      {
        for (CFIndex i = 0LL; i != v28; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v67 != v29) {
            objc_enumerationMutation(obj);
          }
          __int128 v31 = *(void *)(*((void *)&v66 + 1) + 8LL * (void)i);
          uint64_t v32 = -[__CFDictionary objectForKey:](v24, "objectForKey:", v31);
          id v33 = [v32 objectForKey:@"type"];
          if (v33)
          {
            id v34 = v33;
            __int128 v35 = [v32 objectForKey:@"notificationType"];
            if (v35)
            {
              __int128 v36 = v35;
              __int128 v37 = (_UNKNOWN **)[v32 objectForKey:@"count"];
              __int128 v38 = [v34 unsignedIntValue];
              __int128 v39 = [v36 unsignedIntValue];
              __int128 v40 = [v32 objectForKey:@"timestamp"];
              if (v40)
              {
                __int128 v41 = v40;
                __int128 v42 = v37 ? v37 : &off_100204C50;
                if (+[WiFiUserNotificationManager canRepromptForNotificationType:blacklistType:atDate:count:]( WiFiUserNotificationManager,  "canRepromptForNotificationType:blacklistType:atDate:count:",  v39,  v38,  v41,  [v42 integerValue]))
                {
                  [v64 removeObject:v31];
                }
              }
            }
          }
        }

        CFIndex v28 = [obj countByEnumeratingWithState:&v66 objects:buf count:16];
      }

      while (v28);
      uint64_t v19 = v62;
      a1 = v63;
      p_superclass = (__objc2_class **)(&OBJC_CLASS___WiFiUserNotificationHistory + 8);
      BOOL v22 = v60;
      CFBooleanRef v18 = v61;
      BOOL v26 = v64;
    }
  }

  else
  {
    BOOL v26 = 0LL;
  }

  objc_autoreleasePoolPop(v22);
  id v43 = -[WiFiScanResultsPreparer initWithManager:availabilityEngine:scanResults:disableProminentFiltering:blacklistedSSIDs:]( objc_alloc(&OBJC_CLASS___WiFiScanResultsPreparer),  "initWithManager:availabilityEngine:scanResults:disableProminentFiltering:blacklistedSSIDs:",  a1,  *(void *)(a1 + 6656),  v18,  0LL,  v26);
  if (v26) {
    CFRelease(v26);
  }
  if (-[WiFiScanResultsPreparer topRecommendableNetwork](v43, "topRecommendableNetwork"))
  {
    id v44 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: found recommended network %@", "__WiFiDeviceManagerDetermineAskToJoinActionFromScanResults", -[WiFiScanResultsPreparer topRecommendableNetwork](v43, "topRecommendableNetwork") message];
    }
    objc_autoreleasePoolPop(v44);
    CFRange v45 = -[WiFiScanResultsPreparer topRecommendableNetwork](v43, "topRecommendableNetwork");
    __int128 v46 = 1LL;
  }

  else if (-[WiFiScanResultsPreparer prominentScanResultsCount](v43, "prominentScanResultsCount"))
  {
    uint64_t v47 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: prominent display network count: %ld",  "__WiFiDeviceManagerDetermineAskToJoinActionFromScanResults",  -[WiFiScanResultsPreparer prominentScanResultsCount](v43, "prominentScanResultsCount"));
    }
    objc_autoreleasePoolPop(v47);
    CFRange v45 = 0LL;
    else {
      __int128 v46 = 0LL;
    }
  }

  else
  {
    CFRange v45 = 0LL;
    __int128 v46 = 0LL;
  }

    objc_autoreleasePoolPop(v13);
    return;
  }

  CFMutableDictionaryRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
  if (!Mutable)
  {
    BOOL v13 = objc_autoreleasePoolPush();
    BOOL v14 = (void *)qword_100219F60;
    if (qword_100219F60)
    {
      int v15 = "logMessage is Null!";
      goto LABEL_20;
    }

    goto LABEL_21;
  }

  CFDateRef v5 = Mutable;
  CFIndex Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    for (CFIndex i = 0LL; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      if (ValueAtIndex)
      {
        CFComparisonResult v9 = (const __CFString *)sub_100095BC8(ValueAtIndex);
        if (i >= Count - 1) {
          CFStringAppend(v5, v9);
        }
        else {
          CFStringAppendFormat(v5, 0LL, @"%@, ", v9);
        }
      }
    }
  }

  uint64_t v10 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    CFComparisonResult v11 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%@*} %@",  @"AUTOJOIN, SCAN",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ found %d networks",  sub_1000BDC98(*(_DWORD *)(a1 + 3272)),  Count)),  "UTF8String"));
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buuint64_t f = 136446210;
      id v17 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[WiFiPolicy] %s",  -[NSString UTF8String](v11, "UTF8String")),  "UTF8String");
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%{public}s",  buf,  0xCu);
    }
  }

  objc_autoreleasePoolPop(v10);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = sub_1000BDC98(*(_DWORD *)(a1 + 3272));
    *(_DWORD *)buuint64_t f = 138412546;
    id v17 = (const char *)v12;
    CFBooleanRef v18 = 2112;
    uint64_t v19 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "{AUTOJOIN, SCAN} %@ found: %@",  buf,  0x16u);
  }

  CFRelease(v5);
}

void sub_100083920(void *a1)
{
  if (a1)
  {
    id v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: resetting network settings",  "WiFiManagerResetNetworkSettings");
    }
    objc_autoreleasePoolPop(v2);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
    if (Mutable)
    {
      id v4 = Mutable;
      CFDateRef v5 = sub_10006CA28((uint64_t)a1);
      CFDateRef v6 = v5;
      if (!v5) {
        goto LABEL_40;
      }
      CFIndex Count = CFArrayGetCount(v5);
      if (Count < 1) {
        goto LABEL_40;
      }
      CFIndex v8 = Count;
      CFIndex v9 = 0LL;
      int v10 = 0;
      do
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(v6, v9);
        if (ValueAtIndex)
        {
          uint64_t v12 = ValueAtIndex;
          if (sub_10009860C((uint64_t)ValueAtIndex))
          {
            BOOL v13 = sub_100095BC8(v12);
            if (v13) {
              CFArrayAppendValue(v4, v13);
            }
            int v10 = 1;
          }

          else
          {
            sub_100076340((uint64_t)a1, v12, 13LL);
            int v14 = sub_10009E120((uint64_t)v12);
            int v15 = objc_autoreleasePoolPush();
            if (v14 == 2)
            {
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:4, "%s: %@ is CarPlayUserConfigured, not removing password", "WiFiManagerResetNetworkSettings", sub_100095BC8(v12) message];
              }
              objc_autoreleasePoolPop(v15);
            }

            else
            {
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:4, "%s: Set password not syncable for %@", "WiFiManagerResetNetworkSettings", sub_100095BC8(v12) message];
              }
              objc_autoreleasePoolPop(v15);
              sub_100099EB4();
              id v16 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:4, "%s: REMOVE password for %@", "WiFiManagerResetNetworkSettings", sub_100095BC8(v12) message];
              }
              objc_autoreleasePoolPop(v16);
              sub_100099D38(v12);
            }

            if (&_EAPTLSRemoveTrustExceptionsBindings && sub_100095B4C((uint64_t)v12))
            {
              id v17 = sub_100095BC8(v12);
              EAPTLSRemoveTrustExceptionsBindings(@"WirelessSSID", v17);
            }
          }
        }

        ++v9;
      }

      while (v8 != v9);
      if (v10)
      {
        CFBooleanRef v18 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: device has profile based networks",  "WiFiManagerResetNetworkSettings");
        }
        objc_autoreleasePoolPop(v18);
        uint64_t v19 = (const __CFDictionary *)a1[27];
        if (v19)
        {
          CFMutableDictionaryRef v20 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          if (v20)
          {
            double v21 = v20;
            CFIndex v22 = CFArrayGetCount(v4);
            if (v22 >= 1)
            {
              CFIndex v23 = v22;
              for (CFIndex i = 0LL; i != v23; ++i)
              {
                int v25 = CFArrayGetValueAtIndex(v4, i);
                CFPropertyListRef Value = CFDictionaryGetValue(v19, v25);
                int v27 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  [(id)qword_100219F60 WFLog:3, "%s: preserving network set for %@ (%@)", "WiFiManagerResetNetworkSettings", v25, Value message];
                }
                objc_autoreleasePoolPop(v27);
                if (v25 && Value) {
                  CFDictionarySetValue(v21, v25, Value);
                }
              }
            }

            -[NSUserDefaults setObject:forKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "setObject:forKey:",  v21,  @"Custom network settings");
            CFRelease(v21);
          }
        }
      }

      else
      {
LABEL_40:
        CFIndex v28 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: removing custom network settings",  "WiFiManagerResetNetworkSettings");
        }
        objc_autoreleasePoolPop(v28);
        -[NSUserDefaults setObject:forKey:]( +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"),  "setObject:forKey:",  0LL,  @"Custom network settings");
      }

      sub_100071B18(a1, @"AllowEnable", 0LL);
      sub_100071B18(a1, @"DeviceUUID", 0LL);
      sub_10008261C((uint64_t)a1, 0LL);
      __int128 v29 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: WFMacRandomisation : Special Handling for Private MAC Networks",  "WiFiManagerResetNetworkSettings");
      }
      objc_autoreleasePoolPop(v29);
      if (v6) {
        CFRelease(v6);
      }
      CFRelease(v4);
    }
  }

void sub_100083D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  context[0] = a2;
  context[1] = a3;
  void context[2] = a4;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 136), (CFSetApplierFunction)sub_100083DC8, context);
}

void sub_100083DC8(uint64_t a1, uint64_t a2)
{
  if (a2 && *(void *)a2 && (id v2 = *(void **)(a2 + 8)) != 0LL)
  {
    sub_10003D580(a1, *(void *)a2, v2, *(const void **)(a2 + 16));
  }

  else
  {
    int v3 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: Invalid arguments",  "__WiFiManagerDispatchTdConfirmedEvent");
    }
    objc_autoreleasePoolPop(v3);
  }

void sub_100083E4C(uint64_t a1, const __CFString *a2, int a3)
{
  if ((a3 == 4 || a3 == 1)
    && -[WiFiUserInteractionMonitor isRealTimeAppActive]( +[WiFiUserInteractionMonitor sharedInstance](&OBJC_CLASS___WiFiUserInteractionMonitor, "sharedInstance"),  "isRealTimeAppActive"))
  {
    if (a2)
    {
      CFDateRef v5 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        [(id)qword_100219F60 WFLog:3, "[TrafficEngineering]: Currently Running Critical Apps %@", a2 message];
      }
      objc_autoreleasePoolPop(v5);
    }

    char v6 = 1;
  }

  else
  {
    char v6 = 0;
  }

  CFIndex length = CFStringFind(a2, @"icloud.restore", 1uLL).length;
  CFIndex v8 = CFStringFind(a2, @"mobile.backup", 1uLL).length;
  CFIndex v9 = CFStringFind(a2, @"nfa", 1uLL).length;
  BOOL v10 = (CFStringFind(a2, @"druva", 1uLL).length | v9 | v8 | length) == 0;
  if (a2 && !v10)
  {
    CFComparisonResult v11 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "[TrafficEngineering]: Currently Running NonCritical Apps %@", a2 message];
    }
    objc_autoreleasePoolPop(v11);
  }

  *(_BYTE *)(a1 + 2002) = v6;
  *(_BYTE *)(a1 + 2003) = !v10;
  sub_100083FA8(a1);
}

void sub_100083FA8(uint64_t a1)
{
  if (a1)
  {
    context[0] = a1;
    context[1] = 0xAAAAAAAA0000007DLL;
    void context[2] = 0LL;
    void context[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
  }

  else
  {
    uint64_t v1 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null manager", "WiFiManagerTraficEngrAppInfo");
    }
    objc_autoreleasePoolPop(v1);
  }

CFArrayRef sub_100084040(const __CFArray *a1)
{
  uint64_t result = sub_10006C77C(a1);
  if (result)
  {
    id v2 = result;
    ValueAtIndex = CFArrayGetValueAtIndex(result, 0LL);
    id v4 = sub_1000F78F0((uint64_t)ValueAtIndex);
    CFRelease(v2);
    return (const __CFArray *)v4;
  }

  return result;
}

void sub_100084080(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    if (*(void *)(a1 + 1368) != a2)
    {
      *(void *)(a1 + 136_Block_object_dispose(va, 8) = a2;
      id v4 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        CFDateRef v5 = "enabled";
        if (!a2) {
          CFDateRef v5 = "disabled";
        }
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Battery saver mode is now %s",  "WiFiManagerSetBatterySaveMode",  v5);
      }

      objc_autoreleasePoolPop(v4);
      context[0] = a1;
      context[1] = 0xAAAAAAAA00000040LL;
      void context[2] = a2;
      void context[3] = 1LL;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, context);
      [*(id *)(a1 + 2144) updateWowState:*(_BYTE *)(a1 + 992) != 0 lpasState:*(_BYTE *)(a1 + 1008) != 0 lowPowerState:*(_BYTE *)(a1 + 994) != 0 batterySaverState:*(void *)(a1 + 1368) != 0];
    }
  }

  else
  {
    char v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null manager", "WiFiManagerSetBatterySaveMode");
    }
    objc_autoreleasePoolPop(v6);
  }

uint64_t sub_1000841CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1368);
}

void sub_1000841D4(const __CFArray *a1, const __CFBoolean *a2)
{
  id v4 = +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults");
  if (a2)
  {
    CFDateRef v5 = v4;
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(a2))
    {
      -[NSUserDefaults setBool:forKey:](v5, "setBool:forKey:", kCFBooleanTrue == a2, @"PerpetualWiFiScanEnabled");
      CFTypeID v7 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        CFIndex v8 = "DISABLED";
        if (kCFBooleanTrue == a2) {
          CFIndex v8 = "ENABLED";
        }
        objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "Setting perpetual WiFi scan mode %s", v8);
      }

      objc_autoreleasePoolPop(v7);
      if (kCFBooleanTrue == a2 && sub_10007F84C(a1)) {
        sub_100066124((uint64_t)a1, "WiFiManagerSetPerpetualWiFiScanSettings", 31907LL);
      }
    }
  }

void sub_1000842DC()
{
  CFBooleanRef v0 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: Stand-alone LPAS Test mode is not supported on this platform",  "__WiFiManagerSetStandAloneLPASTestMode");
  }
  objc_autoreleasePoolPop(v0);
}

void sub_100084334(const __CFArray *a1, const void *a2)
{
  int v11 = -1431655766;
  int v12 = -1431655766;
  id v4 = sub_10007D140(a1);
  CFDateRef v5 = (const __CFNumber *)sub_1000951FC((uint64_t)v4, @"CHANNEL_FLAGS");
  if (v5 && (int valuePtr = 0, CFNumberGetValue(v5, kCFNumberIntType, &valuePtr), (valuePtr & 0x2018) == 0x2000)) {
    int v11 = 1;
  }
  else {
    int v12 = 1;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v12);
  if (v7)
  {
    CFNumberRef v8 = v7;
    CFDictionarySetValue(Mutable, @"6E_NETWORK_TRANSITION", v7);
    CFRelease(v8);
  }

  CFNumberRef v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v11);
  if (v9)
  {
    CFNumberRef v10 = v9;
    CFDictionarySetValue(Mutable, @"LEGACY_NETWORK_TRANSITION", v9);
    CFRelease(v10);
  }

  if (a2) {
    CFDictionarySetValue(Mutable, @"CHANNEL", a2);
  }
  sub_100084478((uint64_t)a1, (uint64_t)Mutable);
}

void sub_100084478(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v2[0] = a1;
    v2[1] = 0xAAAAAAAA00000086LL;
    v2[2] = a2;
    void v2[3] = 1LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  }

uint64_t sub_1000844C0(uint64_t a1)
{
  v2[0] = a1;
  v2[1] = 0xAAAAAAAA00000087LL;
  v2[2] = 0LL;
  uint64_t v3 = 0LL;
  CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v2);
  return v3;
}

id sub_100084504(uint64_t a1)
{
  if (a1)
  {
    if (*(_BYTE *)(a1 + 1756)) {
      return [*(id *)(a1 + 200) getLocaleCountryCode];
    }
  }

  else
  {
    id v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null manager", "__WiFiManagerGetLocaleCountryCode");
    }
    objc_autoreleasePoolPop(v2);
  }

  return 0LL;
}

void sub_100084584(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    [*(id *)(a1 + 200) determineAndSetLocale:a2];
  }

  else
  {
    id v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: null manager", "WiFiManagerDetermineAndSetLocale");
    }
    objc_autoreleasePoolPop(v2);
  }

void sub_1000845F8(int a1, CFDictionaryRef theDict)
{
  if (theDict)
  {
    CFPropertyListRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"countryCodeUserDefault");
    if (Value)
    {
      id v4 = Value;
      if (CFStringCompare(Value, @"XZ", 0LL)
        && CFStringCompare(v4, &stru_1001EB6E0, 0LL)
        && CFStringCompare(v4, @"X0", 0LL)
        && CFStringCompare(v4, @"X2", 0LL)
        && CFStringCompare(v4, @"X3", 0LL))
      {
        CFDateRef v5 = +[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults");
        if (v5) {
          -[NSUserDefaults setObject:forKey:](v5, "setObject:forKey:", theDict, @"countryCodeUserDefaultData");
        }
      }

      else
      {
        char v6 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          [(id)qword_100219F60 WFLog:3, " Skipping saving country code [%@] to user defaults", v4 message];
        }
        objc_autoreleasePoolPop(v6);
      }
    }
  }

uint64_t sub_100084718(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2 = 83LL;
  if (a1 && a2)
  {
    id v4 = *(const void **)(a1 + 2184);
    *(void *)(a1 + 2184) = CFArrayCreateCopy(kCFAllocatorDefault, a2);
    v6[0] = a1;
    v6[1] = 0xAAAAAAAA00000005LL;
    void v6[2] = 0LL;
    uint64_t v7 = 0LL;
    CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)sub_1000662CC, v6);
    uint64_t v2 = v7;
    if ((_DWORD)v7)
    {
      CFRelease(*(CFTypeRef *)(a1 + 2184));
      *(void *)(a1 + 2184) = v4;
    }

    else
    {
      if (v4) {
        CFRelease(v4);
      }
      return 0LL;
    }
  }

  return v2;
}

NSError *sub_1000847BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 1552);
  if (v3) {
    return (NSError *)[v3 getServiceFor:a2 withServiceKey:a3];
  }
  else {
    return +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CWFManagerErrorDomain,  -3907LL,  0LL);
  }
}

id sub_1000847F0(uint64_t a1)
{
  if (a1)
  {
    if (+[WiFiSoftApUsageMonitor sharedInstance](&OBJC_CLASS___WiFiSoftApUsageMonitor, "sharedInstance")) {
      return -[WiFiSoftApUsageMonitor statsDictionary]( +[WiFiSoftApUsageMonitor sharedInstance](&OBJC_CLASS___WiFiSoftApUsageMonitor, "sharedInstance"),  "statsDictionary");
    }
  }

  else
  {
    uint64_t v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: manager is NULL", "WiFiManagerGetMISStats");
    }
    objc_autoreleasePoolPop(v2);
  }

  return 0LL;
}

void sub_10008487C(uint64_t a1)
{
  if (a1)
  {
    if (+[WiFiSoftApUsageMonitor sharedInstance](&OBJC_CLASS___WiFiSoftApUsageMonitor, "sharedInstance")) {
      -[WiFiSoftApUsageMonitor resetStats]( +[WiFiSoftApUsageMonitor sharedInstance](&OBJC_CLASS___WiFiSoftApUsageMonitor, "sharedInstance"),  "resetStats");
    }
  }

  else
  {
    uint64_t v1 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend((id)qword_100219F60, "WFLog:message:", 4, "%s: manager is NULL", "WiFiManagerResetMISStats");
    }
    objc_autoreleasePoolPop(v1);
  }

__CFArray *sub_100084910(char *a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  if (Mutable) {
    BOOL v5 = a2 < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    do
    {
      CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, a1);
      if (v6)
      {
        CFNumberRef v7 = v6;
        CFArrayAppendValue(Mutable, v6);
        CFRelease(v7);
      }

      a1 += 8;
      --a2;
    }

    while (a2);
  }

  return Mutable;
}

void sub_1000849AC(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  sub_1000684E8(a1, *(const void **)(a1 + 32));
  uint64_t v3 = *(dispatch_object_s **)(a1 + 1344);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 1344) = 0LL;
  }

  id v4 = *(dispatch_object_s **)(a1 + 1304);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(a1 + 1304) = 0LL;
  }

  BOOL v5 = *(dispatch_object_s **)(a1 + 1264);
  if (v5)
  {
    dispatch_release(v5);
    *(void *)(a1 + 1264) = 0LL;
  }

  CFNumberRef v6 = *(dispatch_object_s **)(a1 + 1168);
  if (v6)
  {
    dispatch_release(v6);
    *(void *)(a1 + 116_Block_object_dispose(va, 8) = 0LL;
  }

  CFNumberRef v7 = *(dispatch_object_s **)(a1 + 1640);
  if (v7)
  {
    dispatch_release(v7);
    *(void *)(a1 + 1640) = 0LL;
  }

  CFNumberRef v8 = *(dispatch_object_s **)(a1 + 744);
  if (v8)
  {
    dispatch_release(v8);
    *(void *)(a1 + 744) = 0LL;
  }

  sub_100090CEC(a1 + 1568);
  CFNumberRef v9 = *(dispatch_object_s **)(a1 + 784);
  if (v9)
  {
    dispatch_release(v9);
    *(void *)(a1 + 784) = 0LL;
  }

  CFNumberRef v10 = *(dispatch_object_s **)(a1 + 1192);
  if (v10)
  {
    dispatch_release(v10);
    *(void *)(a1 + 1192) = 0LL;
  }

  int v11 = *(dispatch_object_s **)(a1 + 2080);
  if (v11)
  {
    dispatch_release(v11);
    *(void *)(a1 + 2080) = 0LL;
  }

  io_object_t v12 = *(_DWORD *)(a1 + 824);
  if (v12) {
    IOObjectRelease(v12);
  }
  io_object_t v13 = *(_DWORD *)(a1 + 832);
  if (v13) {
    IOObjectRelease(v13);
  }
  io_object_t v14 = *(_DWORD *)(a1 + 836);
  if (v14) {
    IOObjectRelease(v14);
  }
  int v15 = *(IONotificationPort **)(a1 + 816);
  if (v15) {
    IONotificationPortDestroy(v15);
  }
  id v16 = *(IONotificationPort **)(a1 + 856);
  if (v16) {
    IONotificationPortDestroy(v16);
  }
  id v17 = *(const void **)(a1 + 904);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(a1 + 904) = 0LL;
  }

  CFBooleanRef v18 = *(const void **)(a1 + 912);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 912) = 0LL;
  }

  uint64_t v19 = *(const void **)(a1 + 920);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 920) = 0LL;
  }

  CFMutableDictionaryRef v20 = *(const void **)(a1 + 936);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(a1 + 936) = 0LL;
  }

  double v21 = *(const void **)(a1 + 928);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(a1 + 92_Block_object_dispose(va, 8) = 0LL;
  }

  *(void *)(a1 + 944) = 0LL;
  *(void *)(a1 + 952) = 0LL;
  CFIndex v22 = *(const void **)(a1 + 216);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(a1 + 216) = 0LL;
  }

  CFIndex v23 = *(const void **)(a1 + 224);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(a1 + 224) = 0LL;
  }

  uint64_t v24 = *(const void **)(a1 + 232);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(a1 + 232) = 0LL;
  }

  int v25 = *(const void **)(a1 + 264);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(a1 + 264) = 0LL;
  }

  BOOL v26 = *(const void **)(a1 + 104);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(a1 + 104) = 0LL;
  }

  int v27 = *(const void **)(a1 + 96);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(a1 + 96) = 0LL;
  }

  CFIndex v28 = *(const void **)(a1 + 136);
  if (v28)
  {
    CFRelease(v28);
    *(void *)(a1 + 136) = 0LL;
  }

  __int128 v29 = *(const void **)(a1 + 144);
  if (v29)
  {
    CFRelease(v29);
    *(void *)(a1 + 144) = 0LL;
  }

  __int128 v30 = *(const void **)(a1 + 152);
  if (v30)
  {
    CFRelease(v30);
    *(void *)(a1 + 152) = 0LL;
  }

  __int128 v31 = *(const void **)(a1 + 160);
  if (v31)
  {
    CFRelease(v31);
    *(void *)(a1 + 160) = 0LL;
  }

  uint64_t v32 = *(const void **)(a1 + 176);
  if (v32)
  {
    CFRelease(v32);
    *(void *)(a1 + 176) = 0LL;
  }

  id v33 = *(const void **)(a1 + 1000);
  if (v33)
  {
    CFRelease(v33);
    *(void *)(a1 + 1000) = 0LL;
  }

  id v34 = *(const void **)(a1 + 1024);
  if (v34)
  {
    CFRelease(v34);
    *(void *)(a1 + 1024) = 0LL;
  }

  __int128 v35 = *(const void **)(a1 + 80);
  if (v35)
  {
    CFRelease(v35);
    *(void *)(a1 + 80) = 0LL;
  }

  __int128 v36 = *(const void **)(a1 + 208);
  if (v36)
  {
    CFRelease(v36);
    *(void *)(a1 + 20_Block_object_dispose(va, 8) = 0LL;
  }

  *(void *)(a1 + 200) = 0LL;
  __int128 v37 = *(const void **)(a1 + 1072);
  if (v37)
  {
    CFRelease(v37);
    *(void *)(a1 + 1072) = 0LL;
  }

  __int128 v38 = *(const void **)(a1 + 1096);
  if (v38)
  {
    CFRelease(v38);
    *(void *)(a1 + 1096) = 0LL;
  }

  __int128 v39 = *(const void **)(a1 + 1200);
  if (v39)
  {
    CFRelease(v39);
    *(void *)(a1 + 1200) = 0LL;
  }

  __int128 v40 = *(const void **)(a1 + 1232);
  if (v40)
  {
    CFRelease(v40);
    *(void *)(a1 + 1232) = 0LL;
  }

  __int128 v41 = *(const void **)(a1 + 1456);
  if (v41)
  {
    CFRelease(v41);
    *(void *)(a1 + 1456) = 0LL;
  }

  __int128 v42 = *(const void **)(a1 + 1376);
  if (v42)
  {
    CFRelease(v42);
    *(void *)(a1 + 1376) = 0LL;
  }

  id v43 = *(const void **)(a1 + 1384);
  if (v43)
  {
    CFRelease(v43);
    *(void *)(a1 + 1384) = 0LL;
  }

  id v44 = *(const void **)(a1 + 1712);
  if (v44)
  {
    CFRelease(v44);
    *(void *)(a1 + 1712) = 0LL;
  }

  CFRange v45 = *(const void **)(a1 + 1720);
  if (v45)
  {
    CFRelease(v45);
    *(void *)(a1 + 1720) = 0LL;
  }

  __int128 v46 = *(const void **)(a1 + 1728);
  if (v46)
  {
    CFRelease(v46);
    *(void *)(a1 + 172_Block_object_dispose(va, 8) = 0LL;
  }

  *(void *)(a1 + 1392) = 0LL;
  *(void *)(a1 + 1496) = 0LL;

  *(void *)(a1 + 1504) = 0LL;
  *(void *)(a1 + 1512) = 0LL;

  *(void *)(a1 + 152_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 1536) = 0LL;

  *(void *)(a1 + 160_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 2216) = 0LL;

  *(void *)(a1 + 1544) = 0LL;
  uint64_t v47 = *(void **)(a1 + 1552);
  if (v47)
  {

    *(void *)(a1 + 1552) = 0LL;
  }

  id v48 = *(void **)(a1 + 1560);
  if (v48)
  {

    *(void *)(a1 + 1560) = 0LL;
  }

  qword_100219908 = 0LL;
  id v49 = *(const void **)(a1 + 1824);
  if (v49)
  {
    CFRelease(v49);
    *(void *)(a1 + 1824) = 0LL;
  }

  __int128 v50 = *(const void **)(a1 + 168);
  if (v50)
  {
    CFRelease(v50);
    *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0LL;
  }

  __int128 v51 = *(const void **)(a1 + 184);
  if (v51)
  {
    CFRelease(v51);
    *(void *)(a1 + 184) = 0LL;
  }

  __int128 v52 = *(const void **)(a1 + 1872);
  if (v52)
  {
    CFRelease(v52);
    *(void *)(a1 + 1872) = 0LL;
  }

  double v53 = *(const void **)(a1 + 328);
  if (v53)
  {
    CFRelease(v53);
    *(void *)(a1 + 32_Block_object_dispose(va, 8) = 0LL;
  }

  double v54 = *(const void **)(a1 + 1992);
  if (v54)
  {
    CFRelease(v54);
    *(void *)(a1 + 1992) = 0LL;
  }

  if (&_ct_green_tea_logger_destroy) {
    ct_green_tea_logger_destroy(*(void *)(a1 + 1800));
  }
  *(void *)(a1 + 1800) = 0LL;
  double v55 = *(const void **)(a1 + 1928);
  if (v55)
  {
    CFRelease(v55);
    *(void *)(a1 + 192_Block_object_dispose(va, 8) = 0LL;
  }

  id v56 = *(const void **)(a1 + 1776);
  if (v56)
  {
    CFRelease(v56);
    *(void *)(a1 + 1776) = 0LL;
  }

  id v57 = *(const void **)(a1 + 2096);
  if (v57)
  {
    CFRelease(v57);
    *(void *)(a1 + 2096) = 0LL;
  }

  id v58 = *(const void **)(a1 + 2104);
  if (v58)
  {
    CFRelease(v58);
    *(void *)(a1 + 2104) = 0LL;
  }

  id v59 = *(const void **)(a1 + 2112);
  if (v59)
  {
    CFRelease(v59);
    *(void *)(a1 + 2112) = 0LL;
  }

  uint64_t v60 = *(const void **)(a1 + 2152);
  if (v60)
  {
    CFRelease(v60);
    *(void *)(a1 + 2152) = 0LL;
  }

  BOOL v61 = *(const void **)(a1 + 2184);
  if (v61)
  {
    CFRelease(v61);
    *(void *)(a1 + 2184) = 0LL;
  }

  uint64_t v62 = *(const void **)(a1 + 2192);
  if (v62)
  {
    CFRelease(v62);
    *(void *)(a1 + 2192) = 0LL;
  }

  id v63 = *(const void **)(a1 + 2200);
  if (v63)
  {
    CFRelease(v63);
    *(void *)(a1 + 2200) = 0LL;
  }

  objc_autoreleasePoolPop(v2);
}

void sub_100084E4C(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  if (a4)
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 1456), 0LL);
    unsigned int v9 = [ValueAtIndex sessionBased];
    id v10 = [ValueAtIndex network];
    if (v10)
    {
      id v11 = [ValueAtIndex client];
      if (v11)
      {
        uint64_t v12 = (uint64_t)v11;
        if (!(_DWORD)a2)
        {
          sub_1000DACEC(a1, a3);
          io_object_t v13 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: request.bypassPrompt=%d assocResult=%d",  "__WiFiDeviceManagerForcedAssociationCallback",  objc_msgSend(ValueAtIndex, "bypassPrompt"),  0);
          }
          objc_autoreleasePoolPop(v13);
          if ([ValueAtIndex bypassPrompt])
          {
            io_object_t v14 = objc_autoreleasePoolPush();
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "%s: showing app join notification for %@", "__WiFiDeviceManagerForcedAssociationCallback", v10 message];
            }
            objc_autoreleasePoolPop(v14);
            sub_1000FA2C0(a1, v10);
            if (sub_1000A4754((uint64_t)v10))
            {
              int v15 = objc_autoreleasePoolPush();
              if (qword_100219F60) {
                [(id)qword_100219F60 WFLog:3, "%s: accessory network (%@) is unsecured", "__WiFiDeviceManagerForcedAssociationCallback", v10 message];
              }
              objc_autoreleasePoolPop(v15);
              uint64_t v16 = 3LL;
            }

            else
            {
              uint64_t v16 = 1LL;
            }

            *(void *)SInt32 error = 0LL;
            __int128 v41 = error;
            uint64_t v42 = 0x3052000000LL;
            id v43 = sub_1000819C4;
            id v44 = sub_1000819D4;
            id v45 = (id)0xAAAAAAAAAAAAAAAALL;
            id v45 = [ValueAtIndex bundleId];
            v39[0] = 0LL;
            v39[1] = v39;
            v39[2] = 0x2020000000LL;
            v39[3] = v10;
            CFRetain(v10);
            CFRetain(*((CFTypeRef *)v41 + 5));
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472LL;
            block[2] = sub_100085918;
            block[3] = &unk_1001E4328;
            void block[6] = v10;
            void block[7] = v16;
            void block[4] = error;
            void block[5] = v39;
            dispatch_async((dispatch_queue_t)qword_100219F80, block);
            _Block_object_dispose(v39, 8);
            _Block_object_dispose(error, 8);
          }

          [ValueAtIndex bypassPrompt];
          uint64_t v17 = 0LL;
          BOOL v18 = 1;
LABEL_17:
          sub_10003DBC8(v12, a4, (uint64_t)v10, v17);
LABEL_18:
          if ([ValueAtIndex callback]) {
            ((void (*)(uint64_t, id, uint64_t, id))[ValueAtIndex callback])( a4,  v10,  v17,  objc_msgSend(ValueAtIndex, "context"));
          }
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a4 + 1456), 0LL);
          if (v18) {
            sub_100075ED4(a4);
          }
          return;
        }

        CFMutableDictionaryRef v20 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: failed to association error %d",  "__WiFiDeviceManagerForcedAssociationCallback",  a2);
        }
        uint64_t v17 = 7LL;
LABEL_34:
        objc_autoreleasePoolPop(v20);
        unsigned __int8 v21 = [ValueAtIndex bypassPrompt];
        BOOL v18 = a2 == 0;
        if (!(_DWORD)a2 || (v21 & 1) != 0) {
          goto LABEL_63;
        }
        if (v9)
        {
          int v22 = sub_100075E00(a4, *(const void **)(a4 + 1424), 0LL);
          CFIndex v23 = objc_autoreleasePoolPush();
          if (v22)
          {
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:3, "%s: %@ is existing network, leaving password", "__WiFiDeviceManagerForcedAssociationCallback", sub_100095BC8(*(const void **)(a4 + 1424)) message];
            }
            objc_autoreleasePoolPop(v23);
          }

          else
          {
            if (qword_100219F60) {
              [(id)qword_100219F60 WFLog:4, "%s: removing password for %@", "__WiFiDeviceManagerForcedAssociationCallback", sub_100095BC8(*(const void **)(a4 + 1424)) message];
            }
            objc_autoreleasePoolPop(v23);
            sub_100099D38(*(const void **)(a4 + 1424));
          }
        }

        error[0] = -1431655766;
        if (a3)
        {
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          if (Mutable)
          {
            if (sub_10012FD80())
            {
              int v25 = sub_100095BC8(a3);
              cuint64_t f = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"%c%@%c", 8LL, v25, 127LL);
              if (cf)
              {
                BOOL v26 = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
                if (v26)
                {
                  int v27 = (const __CFString *)sub_10012FD94((uint64_t)@"WIFI_JOIN_NETWORK_FAILURE_TITLE");
                  if (v27)
                  {
                    CFStringAppendFormat(v26, 0LL, v27, cf);
                    if ((int)sub_100096BD0((const __CFNumber *)a3) <= -75)
                    {
                      CFIndex v28 = objc_autoreleasePoolPush();
                      if (qword_100219F60) {
                        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: weak signal, adding message to alert",  "__WiFiManagerDispatchForcedAssociationFailureNotification");
                      }
                      objc_autoreleasePoolPop(v28);
                      id v29 = sub_10012FD94((uint64_t)@"WIFI_JOIN_NETWORK_FAILURE_BODY_WEAK_SIGNAL");
                      if (v29) {
                        CFDictionarySetValue(Mutable, kCFUserNotificationAlertMessageKey, v29);
                      }
                    }

                    CFDictionarySetValue(Mutable, kCFUserNotificationAlertHeaderKey, v26);
                    id v30 = sub_10012FD94((uint64_t)@"WIFI_FAILURE_OK");
                    CFDictionarySetValue(Mutable, kCFUserNotificationDefaultButtonTitleKey, v30);
                    __int128 v31 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0LL, error, Mutable);
                    if (v31)
                    {
                      uint64_t v32 = v31;
                      CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource( kCFAllocatorDefault,  v31,  (CFUserNotificationCallBack)sub_100085988,  0LL);
                      if (RunLoopSource)
                      {
                        id v34 = RunLoopSource;
                        *(void *)(a4 + 140_Block_object_dispose(va, 8) = RunLoopSource;
                        *(void *)(a4 + 1416) = v32;
                        Maiint n = CFRunLoopGetMain();
                        CFRunLoopAddSource(Main, v34, kCFRunLoopDefaultMode);
                      }

                      else
                      {
                        *(void *)(a4 + 140_Block_object_dispose(va, 8) = 0LL;
                        *(void *)(a4 + 1416) = 0LL;
                        CFRelease(v32);
                        sub_100075ED4(a4);
                      }

LABEL_69:
                *(_OWORD *)(a4 + 140_Block_object_dispose(va, 8) = 0u;
                sub_100075ED4(a4);
                if (!cf) {
                  goto LABEL_59;
                }
                goto LABEL_58;
              }
            }
          }
        }

        else
        {
          __int128 v36 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: network is null",  "__WiFiManagerDispatchForcedAssociationFailureNotification");
          }
          objc_autoreleasePoolPop(v36);
          CFMutableArrayRef Mutable = 0LL;
        }

        cuint64_t f = 0LL;
        BOOL v26 = 0LL;
        goto LABEL_69;
      }

      CFMutableDictionaryRef v20 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: client is null",  "__WiFiDeviceManagerForcedAssociationCallback");
      }
    }

    else
    {
      CFMutableDictionaryRef v20 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: request network is null",  "__WiFiDeviceManagerForcedAssociationCallback");
      }
    }

    uint64_t v12 = 0LL;
    uint64_t v17 = 0x7FFFFFFFLL;
    goto LABEL_34;
  }

  uint64_t v19 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: manager is null",  "__WiFiDeviceManagerForcedAssociationCallback");
  }
  objc_autoreleasePoolPop(v19);
}

    id v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s - Couldn't find network to set blacklist condition",  "WiFiDeviceManagerProcessAutoJoinBlacklistCommandsAndCopyResponse",  v31);
    }
    goto LABEL_33;
  }

  if (!ValueAtIndex) {
    goto LABEL_69;
  }
  if (valuePtr == 13)
  {
LABEL_71:
    id v4 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s - Couldn't determine blacklist condition to set",  "WiFiDeviceManagerProcessAutoJoinBlacklistCommandsAndCopyResponse",  v31);
    }
    goto LABEL_33;
  }

  id v4 = objc_autoreleasePoolPush();
  if (qword_100219F60) {
    objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s - __WiFiDeviceManagerSetAutoJoinBlacklistedNetworkCondition %lu failed",  "WiFiDeviceManagerProcessAutoJoinBlacklistCommandsAndCopyResponse",  valuePtr);
  }
LABEL_33:
  objc_autoreleasePoolPop(v4);
LABEL_34:
  uint64_t context = objc_autoreleasePoolPush();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  io_object_t v13 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
  io_object_t v14 = [*(id *)(a1 + 6632) networksInDenyListedState:1];
  if ([v14 count])
  {
    int v15 = 0LL;
    CFArrayRef theArray = Mutable;
    __int128 v35 = a1;
    do
    {
      uint64_t v16 = [v14 objectAtIndex:v15];
      uint64_t v17 = sub_1000A3DB0(v16);
      BOOL v18 = [*(id *)(a1 + 6632) reasonsForNetworkInDenyListedState:v16 state:1 timestamps:0 reasonData:0];
      if (v18)
      {
        uint64_t v19 = v18;
        if ([v18 count])
        {
          CFMutableDictionaryRef v20 = v13;
          unsigned __int8 v21 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
          if ([v19 count])
          {
            int v22 = 0LL;
            do
            {
              CFIndex v23 = [v19 objectAtIndex:v22];
              __int128 v40 = -1431655766;
              __int128 v40 = [v23 unsignedIntegerValue];
              uint64_t v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v40);
              CFArrayAppendValue(v21, v24);
              if (v24) {
                CFRelease(v24);
              }
              ++v22;
            }

            while (v22 < (unint64_t)[v19 count]);
          }

          io_object_t v13 = v20;
          CFArrayAppendValue(v20, v21);
          if (v21) {
            CFRelease(v21);
          }
          int v25 = sub_100094E60((uint64_t)kCFAllocatorDefault, (uint64_t)v17);
          CFMutableArrayRef Mutable = theArray;
          CFArrayAppendValue(theArray, v25);
          a1 = v35;
          if (v25) {
            CFRelease(v25);
          }
        }
      }

      ++v15;
    }

    while (v15 < (unint64_t)[v14 count]);
  }

  if (CFArrayGetCount(Mutable))
  {
    BOOL v26 = v33;
    if (CFArrayGetCount(v13) && (CFIndex Count = CFArrayGetCount(v13), Count == CFArrayGetCount(Mutable)))
    {
      CFIndex v28 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFDictionarySetValue(v28, @"networks", Mutable);
      CFDictionarySetValue(v28, @"reasons", v13);
    }

    else
    {
      id v30 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s Mismatched reason and network array counts ",  "__WiFiDeviceManagerCopyAutoJoinBlacklistedNetworksAndReasons");
      }
      objc_autoreleasePoolPop(v30);
      CFIndex v28 = 0LL;
    }
  }

  else
  {
    CFIndex v28 = 0LL;
    BOOL v26 = v33;
  }

  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v13) {
    CFRelease(v13);
  }
  objc_autoreleasePoolPop(context);
  objc_autoreleasePoolPop(v26);
  return v28;
}

  objc_autoreleasePoolPop(v19);
  if (!(_DWORD)v46)
  {
    double v53 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s: scan results do not qualify for ask to join",  "__WiFiDeviceManagerDetermineNextAction",  v59);
    }
    goto LABEL_79;
  }

  if (!sub_10013451C(*(void *)(a1 + 96), *(void *)(a1 + 1096), *(const __CFArray **)(a1 + 3568), v46))
  {
    double v53 = objc_autoreleasePoolPush();
    double v54 = (void *)qword_100219F60;
    if (!qword_100219F60)
    {
LABEL_79:
      objc_autoreleasePoolPop(v53);
      return sub_1000F17B8(a1);
    }

    id v58 = "__WiFiDeviceManagerDetermineNextAction";
    id v59 = v46;
    double v55 = "%s: not prompting ATJ action (%d), condition not fulfilled";
LABEL_78:
    objc_msgSend(v54, "WFLog:message:", 3, v55, v58, v59);
    goto LABEL_79;
  }

  if ((_DWORD)v46 == 1)
  {
    uint64_t result = (const __CFArray *)sub_1000EF388(a1, v45, 0);
    goto LABEL_85;
  }

  id v48 = *(void *)(a1 + 64);
  id v49 = (const void *)sub_100043E8C(v48);
  __int128 v50 = sub_100040538(v48, v49);
  if (v50)
  {
    __int128 v51 = v50;
    __int128 v52 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%s: Already connected to %@. Not prompting ATJ.", "__WiFiDeviceManagerDetermineNextAction", sub_100095BC8(v51) message];
    }
    objc_autoreleasePoolPop(v52);
    CFRelease(v51);
    return sub_1000F17B8(a1);
  }

  if (!sub_100134510(*(void *)(a1 + 96)) && !*(_BYTE *)(a1 + 104))
  {
    double v53 = objc_autoreleasePoolPush();
    double v54 = (void *)qword_100219F60;
    if (!qword_100219F60) {
      goto LABEL_79;
    }
    double v55 = "Not prompting ATJ";
    goto LABEL_78;
  }

  sub_1000D157C(a1, 0LL);
  id v56 = sub_100043E8C(*(void *)(a1 + 64));
  uint64_t result = (const __CFArray *)sub_1000EF770(a1, v56, 0LL, 0LL, 0LL, 0LL);
LABEL_85:
  if ((_DWORD)result != 14) {
    return sub_1000F17B8(a1);
  }
  return result;
}

      if (CFArrayGetCount((CFArrayRef)a2) && (id v49 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24)), v49 >= 1))
      {
        __int128 v50 = v49;
        __int128 v51 = 0LL;
        while (1)
        {
          __int128 v52 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v51);
          if (v52)
          {
          }

          if (v50 == ++v51) {
            goto LABEL_75;
          }
        }

        uint64_t v78 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v51);
        a2 = 0LL;
        *(void *)(a1 + 32) = CFRetain(v78);
        *(_BYTE *)(a1 + 56) = 1;
      }

      else
      {
LABEL_75:
        int valuePtr = 0.0;
        double v53 = CFArrayGetCount((CFArrayRef)a2);
        if (v53 && (double v54 = v53, (v55 = CFDateCreate(kCFAllocatorDefault, v9)) != 0LL))
        {
          id v56 = v55;
          id v57 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
          if (v57)
          {
            id v58 = v57;
            CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
            if (Mutable)
            {
              uint64_t v60 = Mutable;
              BOOL v61 = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
              uint64_t v62 = v61;
              if (v61)
              {
                uint64_t v82 = a4;
                CFDictionaryAddValue(v61, @"atjHistTblEntCreationTimeStamp", v56);
                CFDictionaryAddValue(v62, @"atjHistTblEntLastSeenTimeStamp", v56);
                CFDictionaryAddValue(v62, @"atjHistTblEntInRangeTime", v58);
                CFDictionarySetValue(v62, @"atjHistTblEntUserPromptPending", kCFBooleanTrue);
                if (v54 >= 1)
                {
                  for (CFIndex i = 0LL; i != v54; ++i)
                  {
                    if (CFArrayGetCount(v60) > 4) {
                      break;
                    }
                    uint64_t v64 = CFArrayGetValueAtIndex((CFArrayRef)a2, i);
                    if (v64)
                    {
                      BOOL v65 = sub_1000951FC((uint64_t)v64, @"BSSID");
                      if (v65)
                      {
                        BOOL v66 = v65;
                        v90.CFIndex length = CFArrayGetCount(v60);
                        v90.CFIndex location = 0LL;
                        if (!CFArrayContainsValue(v60, v90, v66)) {
                          CFArrayAppendValue(v60, v66);
                        }
                      }
                    }
                  }
                }

                CFDictionaryAddValue(v62, @"atjHistTblEntBSSIDList", v60);
                if (!CFArrayGetCount(v60))
                {
                  CFRelease(v62);
                  uint64_t v62 = 0LL;
                }

                a4 = v82;
              }

              CFRelease(v60);
            }

            else
            {
              uint64_t v62 = 0LL;
            }

            CFRelease(v58);
          }

          else
          {
            uint64_t v62 = 0LL;
          }

          CFRelease(v56);
        }

        else
        {
          uint64_t v62 = 0LL;
        }

        *(void *)(a1 + 32) = v62;
        *(_BYTE *)(a1 + 56) = 0;
        a2 = (_DWORD)a4 == 2;
      }

      *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
      int v67 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        if (*(_BYTE *)(a1 + 56)) {
          BOOL v68 = "monitored";
        }
        else {
          BOOL v68 = "unmonitored";
        }
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "ATJManager: device detected at a previously %s atj point",  v68);
      }

      objc_autoreleasePoolPop(v67);
      CFIndex v23 = *(__CFDictionary **)(a1 + 32);
      if (!v23) {
        goto LABEL_103;
      }
      goto LABEL_101;
    }

    int v25 = *(double *)(a1 + 48);
    BOOL v26 = 60.0;
    if (*(_BYTE *)(a1 + 57)) {
      BOOL v26 = 25.0;
    }
    if (v25 <= v26) {
      goto LABEL_62;
    }
    int v27 = *(__CFDictionary **)(a1 + 32);
    if (v27)
    {
      int valuePtr = v25 + sub_100134EA0(*(const __CFDictionary **)(a1 + 32));
      CFIndex v28 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
      if (v28)
      {
        id v29 = v28;
        CFDictionarySetValue(v27, @"atjHistTblEntInRangeTime", v28);
        CFRelease(v29);
      }
    }

    if (*(_BYTE *)(a1 + 56))
    {
LABEL_62:
      __int128 v46 = objc_autoreleasePoolPush();
      if (qword_100219F60)
      {
        uint64_t v47 = "monitored";
        if (!*(_BYTE *)(a1 + 56)) {
          uint64_t v47 = "unmonitored";
        }
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "ATJManager: device moved from %s atj point after %f seconds",  v47,  *(void *)(a1 + 48));
      }

      objc_autoreleasePoolPop(v46);
      id v48 = *(const void **)(a1 + 32);
      if (v48)
      {
        CFRelease(v48);
        *(void *)(a1 + 32) = 0LL;
      }

      *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
      *(_BYTE *)(a1 + 56) = 0;
      goto LABEL_69;
    }

    id v30 = *(const __CFArray **)(a1 + 24);
    if (!v30)
    {
      uint64_t v32 = objc_autoreleasePoolPush();
      if (qword_100219F60) {
        objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "%s, ATJManager: atj table is NULL",  "__WiFiATJMgrATJHistTblAddEntry");
      }
      goto LABEL_61;
    }

    __int128 v31 = *(const void **)(a1 + 32);
    v86.CFIndex length = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
    v86.CFIndex location = 0LL;
    if (CFArrayContainsValue(v30, v86, v31))
    {
      uint64_t v32 = objc_autoreleasePoolPush();
      id v33 = (void *)qword_100219F60;
      if (!qword_100219F60)
      {
LABEL_61:
        objc_autoreleasePoolPop(v32);
        goto LABEL_62;
      }

      id v34 = "ATJManager: atjTableEntry already exists in table";
    }

    else
    {
      __int128 v35 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
      __int128 v36 = 5LL;
      if (!*(_BYTE *)(a1 + 57)) {
        __int128 v36 = 64LL;
      }
      if (v35 >= v36)
      {
        __int128 v37 = *(const __CFArray **)(a1 + 24);
        v87.CFIndex length = CFArrayGetCount(v37);
        v87.CFIndex location = 0LL;
        CFArraySortValues(v37, v87, (CFComparatorFunction)sub_100134FD8, 0LL);
        if (*(void *)(a1 + 32))
        {
          if (*(_BYTE *)(a1 + 56))
          {
            __int128 v38 = *(const __CFArray **)(a1 + 24);
            v88.CFIndex length = CFArrayGetCount(v38);
            v88.CFIndex location = 0LL;
            CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v38, v88, *(const void **)(a1 + 32));
            if (FirstIndexOfValue != -1)
            {
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), FirstIndexOfValue);
              CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), 0LL, *(const void **)(a1 + 32));
            }
          }
        }

        __int128 v40 = *(__CFArray **)(a1 + 24);
        if (*(_BYTE *)(a1 + 57)) {
          __int128 v41 = 4LL;
        }
        else {
          __int128 v41 = 63LL;
        }
        uint64_t v42 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
        id v43 = -5LL;
        if (!*(_BYTE *)(a1 + 57)) {
          id v43 = -64LL;
        }
        v89.CFIndex length = v42 + v43 + 1;
        v89.CFIndex location = v41;
        CFArrayReplaceValues(v40, v89, 0LL, 0LL);
      }

      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), v31);
      uint64_t v32 = objc_autoreleasePoolPush();
      id v44 = qword_100219F60;
      if (!qword_100219F60) {
        goto LABEL_61;
      }
      id v45 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
      char v80 = v31;
      int v81 = *(void *)(a1 + 24);
      int v79 = v45;
      id v34 = "ATJManager: %ld entries in atjHistory Table, add %@ to %@";
      id v33 = (void *)v44;
    }

    objc_msgSend(v33, "WFLog:message:", 3, v34, v79, v80, v81);
    goto LABEL_61;
  }

void sub_100085544( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

void sub_100085568(uint64_t a1, uint64_t a2, const __CFArray *a3, uint64_t a4, uint64_t a5)
{
  if (!a5)
  {
    int v22 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: manager is null",  "__WiFiManagerAddNetworkScanCallback");
    }
    objc_autoreleasePoolPop(v22);
    return;
  }

  ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a5 + 1456), 0LL);
  id v9 = [ValueAtIndex network];
  if (v9)
  {
    id v10 = [ValueAtIndex client];
    if (v10)
    {
      uint64_t v11 = (uint64_t)v10;
      if ((_DWORD)a2 == 3)
      {
        uint64_t v12 = 0LL;
        uint64_t v13 = 6LL;
      }

      else
      {
        if ((_DWORD)a2)
        {
          uint64_t v24 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: failed to scan error %d",  "__WiFiManagerAddNetworkScanCallback",  a2);
          }
          uint64_t v13 = 7LL;
        }

        else
        {
          else {
            io_object_t v14 = 0LL;
          }
          CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
          if (Mutable)
          {
            uint64_t v12 = Mutable;
            if (a3 && CFArrayGetCount(a3) >= 1)
            {
              CFIndex v16 = 0LL;
              do
              {
                uint64_t v17 = CFArrayGetValueAtIndex(a3, v16);
                if (v17)
                {
                  BOOL v18 = v17;
                  if (sub_100095BC8(v17))
                  {
                    uint64_t v19 = (const __CFString *)sub_100095BC8(v18);
                    if (CFStringCompare(v19, v14, 0LL) == kCFCompareEqualTo) {
                      goto LABEL_22;
                    }
                    CFMutableDictionaryRef v20 = (const __CFString *)sub_100095BC8(v18);
                    if (CFStringHasPrefix(v20, v14)) {
                      CFArrayAppendValue(v12, v18);
                    }
                  }
                }

                ++v16;
              }

              while (v16 < CFArrayGetCount(a3));
            }

            if (CFArrayGetCount(v12))
            {
              BOOL v18 = CFArrayGetValueAtIndex(v12, 0LL);
              if (v18)
              {
LABEL_22:
                unsigned __int8 v21 = objc_autoreleasePoolPush();
                if (qword_100219F60) {
                  [(id)qword_100219F60 WFLog:3, "%s: found network %@ matching prefix %@", "__WiFiManagerAddNetworkScanCallback", sub_100095BC8(v18), v14 message];
                }
                objc_autoreleasePoolPop(v21);
                [ValueAtIndex setNetworkMatchingPrefix:v18];
                sub_100075ED4(a5);
                goto LABEL_31;
              }
            }

            uint64_t v13 = 9LL;
            goto LABEL_27;
          }

          uint64_t v24 = objc_autoreleasePoolPush();
          if (qword_100219F60) {
            objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: null matchingResults",  "__WiFiManagerAddNetworkScanCallback");
          }
          uint64_t v13 = 9LL;
        }

        objc_autoreleasePoolPop(v24);
        uint64_t v12 = 0LL;
      }

void sub_100085918(void *a1)
{
  uint64_t v2 = *(const void **)(*(void *)(a1[5] + 8LL) + 24LL);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = 0LL;
  }

  uint64_t v3 = *(const void **)(*(void *)(a1[4] + 8LL) + 40LL);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(*(void *)(a1[4] + 8LL) + 4kdebug_trace(731381764LL, 0LL, 0LL, 0LL, 0LL) = 0LL;
  }

void sub_100085988()
{
  if (qword_100219908)
  {
    CFBooleanRef v0 = *(dispatch_queue_s **)(qword_100219908 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100085A38;
    block[3] = &unk_1001E2620;
    void block[4] = qword_100219908;
    dispatch_async(v0, block);
  }

  else
  {
    uint64_t v1 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s: unable to get manager",  "__WiFiManagerForcedAssociationFailureUserNotificationCallback");
    }
    objc_autoreleasePoolPop(v1);
  }

void sub_100085A38(uint64_t a1)
{
  Maiint n = CFRunLoopGetMain();
  CFRunLoopRemoveSource(Main, *(CFRunLoopSourceRef *)(*(void *)(a1 + 32) + 1408LL), kCFRunLoopDefaultMode);
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(v3 + 1408))
  {
    CFRelease(*(CFTypeRef *)(v3 + 1408));
    *(void *)(*(void *)(a1 + 32) + 1408LL) = 0LL;
    uint64_t v3 = *(void *)(a1 + 32);
  }

  if (*(void *)(v3 + 1416))
  {
    CFRelease(*(CFTypeRef *)(v3 + 1416));
    *(void *)(*(void *)(a1 + 32) + 1416LL) = 0LL;
    uint64_t v3 = *(void *)(a1 + 32);
  }

  sub_100075ED4(v3);
}

void sub_100085AAC(const __SCDynamicStore *a1, uint64_t a2, const __CFArray *a3)
{
  CFNumberRef v6 = objc_autoreleasePoolPush();
  if (qword_100219F60)
  {
    CFNumberRef v7 = "DyamicStoreChange";
    if (!a2) {
      CFNumberRef v7 = "Initialization";
    }
    objc_msgSend((id)qword_100219F60, "WFLog:message:", 3, "Callback reason=%s", v7);
  }

  objc_autoreleasePoolPop(v6);
  NetworkInterface = SCDynamicStoreKeyCreateNetworkInterface(kCFAllocatorDefault, kSCDynamicStoreDomainState);
  if (NetworkInterface)
  {
    id v9 = NetworkInterface;
    id v10 = (const __CFDictionary *)SCDynamicStoreCopyValue(a1, NetworkInterface);
    if (v10)
    {
      uint64_t v11 = v10;
      CFTypeID v12 = CFGetTypeID(v10);
      if (v12 == CFDictionaryGetTypeID())
      {
        CFPropertyListRef Value = (const __CFArray *)CFDictionaryGetValue(v11, kSCDynamicStorePropNetInterfaces);
        if (Value)
        {
          io_object_t v14 = Value;
          CFTypeID v15 = CFGetTypeID(Value);
          if (v15 == CFArrayGetTypeID())
          {
            if (CFArrayGetCount(v14))
            {
              if (CFArrayGetCount(v14))
              {
                CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
                if (Mutable)
                {
                  uint64_t v17 = Mutable;
                  if (CFArrayGetCount(v14) >= 1)
                  {
                    CFIndex v18 = 0LL;
                    do
                    {
                      ValueAtIndex = CFArrayGetValueAtIndex(v14, v18);
                      ++v18;
                    }

                    while (v18 < CFArrayGetCount(v14));
                  }

                  if (CFArrayGetCount(v17))
                  {
                    CFMutableDictionaryRef v20 = objc_autoreleasePoolPush();
                    if (qword_100219F60) {
                      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  3,  "Discovered %ld airport Interfaces",  CFArrayGetCount(v17));
                    }
                    objc_autoreleasePoolPop(v20);
                    if (CFArrayGetCount(v17) >= 1)
                    {
                      CFIndex v21 = 0LL;
                      do
                      {
                        int v22 = (const __CFString *)CFArrayGetValueAtIndex(v17, v21);
                        if (v22)
                        {
                          CFIndex v23 = v22;
                          if (!sub_100085E40(a3, v22))
                          {
                            uint64_t v24 = objc_autoreleasePoolPush();
                            if (qword_100219F60) {
                              [(id)qword_100219F60 WFLog:3, "Now attempting to add AirPort Interface with BSDName %@", v23 message];
                            }
                            objc_autoreleasePoolPop(v24);
                            sub_100085EE0((int)a3, v23);
                          }
                        }

                        ++v21;
                      }

                      while (v21 < CFArrayGetCount(v17));
                    }
                  }

                  CFRelease(v17);
                }
              }
            }
          }
        }
      }

      CFRelease(v11);
    }

    CFRelease(v9);
  }

void sub_100085D44(uint64_t a1)
{
  CFStringRef NetworkInterface = SCDynamicStoreKeyCreateNetworkInterface(kCFAllocatorDefault, kSCDynamicStoreDomainState);
  if (NetworkInterface)
  {
    CFStringRef v3 = NetworkInterface;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
    if (Mutable)
    {
      BOOL v5 = Mutable;
      CFArrayAppendValue(Mutable, v3);
      if (CFArrayGetCount(v5)) {
        SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 72), v5, 0LL);
      }
      CFRelease(v3);
    }

    else
    {
      BOOL v5 = (const __CFArray *)v3;
    }

    CFRelease(v5);
  }

void sub_100085DF0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100085D44(a2);
  }

  else
  {
    uint64_t v2 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:4 message:"Cannot reconnect to the dynamic store - info is NULL"];
    }
    objc_autoreleasePoolPop(v2);
  }

uint64_t sub_100085E40(const __CFArray *a1, const void *a2)
{
  CFStringRef v3 = sub_10006C854(a1);
  if (!v3) {
    return 0LL;
  }
  id v4 = v3;
  if (CFArrayGetCount(v3) && CFArrayGetCount(v4) >= 1)
  {
    CFIndex v5 = 0LL;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v4, v5);
      if (ValueAtIndex)
      {
        CFNumberRef v7 = (const void *)sub_10004CE2C((uint64_t)ValueAtIndex);
        if (CFEqual(v7, a2)) {
          break;
        }
      }

      if (++v5 >= CFArrayGetCount(v4)) {
        goto LABEL_8;
      }
    }

    uint64_t v8 = 1LL;
  }

  else
  {
LABEL_8:
    uint64_t v8 = 0LL;
  }

  CFRelease(v4);
  return v8;
}

void sub_100085EE0(uint64_t a1, CFStringRef theString)
{
  *(void *)buffer = 0LL;
  uint64_t v63 = 0LL;
  if (!a1) {
    return;
  }
  CFStringRef v2 = theString;
  if (!theString) {
    return;
  }
  CFStringGetCString(theString, buffer, 16LL, 0);
  if (!*(void *)(a1 + 72)) {
    goto LABEL_87;
  }
  CFAllocatorRef v4 = kCFAllocatorDefault;
  CFStringRef NetworkInterface = SCDynamicStoreKeyCreateNetworkInterface(kCFAllocatorDefault, kSCDynamicStoreDomainState);
  if (!NetworkInterface) {
    goto LABEL_87;
  }
  CFNumberRef v6 = NetworkInterface;
  CFNumberRef v7 = (const __CFDictionary *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 72), NetworkInterface);
  if (!v7)
  {
    CFRelease(v6);
LABEL_87:
    __int128 v50 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      [(id)qword_100219F60 WFLog:3, "%@ does not exist in dynamic store", v2 message];
    }
    goto LABEL_91;
  }

  uint64_t v8 = v7;
  CFTypeID v9 = CFGetTypeID(v7);
  if (v9 != CFDictionaryGetTypeID()) {
    goto LABEL_12;
  }
  CFPropertyListRef Value = (const __CFArray *)CFDictionaryGetValue(v8, kSCDynamicStorePropNetInterfaces);
  uint64_t v11 = Value;
  if (!Value) {
    goto LABEL_13;
  }
  CFTypeID v12 = CFGetTypeID(Value);
  if (v12 == CFArrayGetTypeID() && CFArrayGetCount(v11))
  {
    v64.CFIndex length = CFArrayGetCount(v11);
    v64.CFIndex location = 0LL;
    LODWORD(v11) = CFArrayContainsValue(v11, v64, v2);
  }

  else
  {
LABEL_12:
    LODWORD(v11) = 0;
  }

uint64_t sub_100086B3C(uint64_t a1)
{
  *(void *)buffer = 0LL;
  uint64_t v9 = 0LL;
  int v2 = socket(2, 2, 0);
  if (v2 == -1)
  {
    CFNumberRef v6 = objc_autoreleasePoolPush();
    if (qword_100219F60) {
      objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s Socket creation failed",  "__WiFiManagerCheckAirPortInterface");
    }
    objc_autoreleasePoolPop(v6);
    return 0LL;
  }

  else
  {
    int v3 = v2;
    if (a1)
    {
      CFStringGetCString((CFStringRef)a1, buffer, 16LL, 0);
      if (buffer[0])
      {
        __strlcpy_chk(v10, buffer, 16LL, 16LL);
        if (ioctl(v3, 0xC02C6938uLL, v10)) {
          BOOL v4 = 0;
        }
        else {
          BOOL v4 = (v10[1] & 0xE0) == 128;
        }
        a1 = v4;
      }

      else
      {
        CFNumberRef v7 = objc_autoreleasePoolPush();
        if (qword_100219F60) {
          objc_msgSend( (id)qword_100219F60,  "WFLog:message:",  4,  "%s, interfaceCName is zero length.",  "__WiFiManagerCheckAirPortInterface");
        }
        objc_autoreleasePoolPop(v7);
        a1 = 0LL;
      }
    }

    close(v3);
  }

  return a1;
}