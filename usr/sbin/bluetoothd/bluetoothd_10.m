void sub_100512354(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;
  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068CEC0();
  }

  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_1003B67B8(uint64, v6, &value);
    goto LABEL_6;
  }

  v7 = 7LL;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgDoubleTapCapability", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100512460(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  value[0] = 0x300000003LL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068CF20();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003B77CC(uint64, v6, (int *)value + 1, (int *)value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgInEarStatusPrimary", HIDWORD(value[0]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgInEarStatusSecondary", LODWORD(value[0]));
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100512588(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  int v7 = xpc_dictionary_get_uint64(v4, "kCBMsgArgFeature");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068CF80();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_1003B6948(uint64, v6, v7, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v8 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgSupported", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_1005126AC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgDoubleTapAction");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068CFE0();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_1003B6238(uint64, v6, v7);
    goto LABEL_6;
  }

  uint64_t v8 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_1005127AC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  unsigned int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgDoubleTapActionLeft");
  unsigned int v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgDoubleTapActionRight");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D040();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v9 = (int)sub_1003B64E0(uint64, v6, v7, v8);
    goto LABEL_6;
  }

  uint64_t v9 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v11);
    xpc_release(v11);
  }

void sub_1005128CC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D0A0();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003BA634(uint64, v6, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMSgArgFeatureBitMask", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_1005129D8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v14 - v9;
  bzero((char *)&v14 - v9, v7);
  size_t v14 = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D100();
  }

  else if (uint64)
  {
LABEL_3:
    int v11 = sub_1003BA8FC(uint64, v6, v10, &v14, v7);
    goto LABEL_6;
  }

  int v11 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v13 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
    if (!v11) {
      xpc_dictionary_set_data(v13, "kCBMsgArgData", v10, v14);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v13);
    xpc_release(v13);
  }

void sub_100512B6C(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v41 = a1;
  xpc_object_t v48 = xdict;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v3 = xpc_dictionary_get_uint64(value, "kCBMsgArgAddressStringBuffSize");
  uint64_t v4 = xpc_dictionary_get_uint64(value, "kCBMsgArgNameBuffSize");
  uint64_t v5 = xpc_dictionary_get_uint64(value, "kCBMsgArgManufacturerBuffSize");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgModelNumberBuffSize");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgSerialNumberBuffSize");
  uint64_t v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgFWVersionBuffSize");
  uint64_t v9 = xpc_dictionary_get_uint64(value, "kCBMsgArgHWVersionBuffSize");
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v40 - v11;
  size_t v46 = v3;
  bzero((char *)&v40 - v11, v3);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v40 - v15;
  size_t v45 = v4;
  bzero((char *)&v40 - v15, v4);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v40 - v19;
  size_t v44 = v5;
  bzero((char *)&v40 - v19, v5);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v40 - v23;
  size_t v43 = v6;
  bzero((char *)&v40 - v23, v6);
  __chkstk_darwin(v25, v26);
  v28 = (char *)&v40 - v27;
  size_t v42 = v7;
  bzero((char *)&v40 - v27, v7);
  __chkstk_darwin(v29, v30);
  v32 = (char *)&v40 - v31;
  bzero((char *)&v40 - v31, v8);
  __chkstk_darwin(v33, v34);
  v36 = (char *)&v40 - v35;
  bzero((char *)&v40 - v35, v9);
  char *v12 = 0;
  char *v16 = 0;
  char *v20 = 0;
  char *v24 = 0;
  char *v28 = 0;
  char *v32 = 0;
  char *v36 = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10068D160();
  }
  int v37 = sub_1003BAF8C(uint64, v12, v46, v16, v45, v20, v44, v24, v43, v28, v42, v32, v8, v36, v9);
  xpc_object_t reply = xpc_dictionary_create_reply(v48);
  if (reply)
  {
    v39 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v37);
    if (!v37)
    {
      xpc_dictionary_set_string(v39, "kCBMsgArgAddressString", v12);
      xpc_dictionary_set_string(v39, "kCBMsgArgName", v16);
      xpc_dictionary_set_string(v39, "kCBMsgArgManufacturer", v20);
      xpc_dictionary_set_string(v39, "kCBMsgArgModelNumber", v24);
      xpc_dictionary_set_string(v39, "kCBMsgArgSerialNumber", v28);
      xpc_dictionary_set_string(v39, "kCBMsgArgFWVersion", v32);
      xpc_dictionary_set_string(v39, "kCBMsgArgHWVersion", v36);
    }

    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(v41 + 72) + 16LL), v39);
    xpc_release(v39);
  }

void sub_100512F48(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D198();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003BB064(uint64, v6, &value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgColor", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100513054(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D1F8();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003BE4E8(uint64, v6, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgWSSpatial", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100513160(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgSetupType");
  unsigned __int8 v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgOPType");
  size_t length = 0LL;
  data = (unsigned __int16 *)xpc_dictionary_get_data(value, "kCBMsgArgData", &length);
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D258();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v10 = (int)sub_1003B795C(uint64, v6, v7, v8, data, (unsigned __int16)length);
    goto LABEL_6;
  }

  uint64_t v10 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v12);
    xpc_release(v12);
  }

void sub_1005132AC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgRelayMsgType");
  size_t length = 0LL;
  data = xpc_dictionary_get_data(value, "kCBMsgArgAddressBytes", &length);
  if (length == 6)
  {
    uint64_t v9 = (uint64_t)data;
    size_t v15 = 0LL;
    uint64_t v10 = xpc_dictionary_get_data(value, "kCBMsgArgData", &v15);
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
    {
      sub_10068D2B8();
    }

    else if (uint64)
    {
LABEL_4:
      uint64_t v11 = (int)sub_1003B7C5C(uint64, v6, v9, v7, v10, (unsigned __int16)v15);
LABEL_11:
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (!reply) {
        return;
      }
      uint64_t v13 = reply;
      uint64_t v14 = v11;
      goto LABEL_13;
    }

    uint64_t v11 = 7LL;
    goto LABEL_11;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_FAULT)) {
    sub_10066EC08();
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v13 = reply;
    uint64_t v14 = 8LL;
LABEL_13:
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v14);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v13);
    xpc_release(v13);
  }

void sub_100513454(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v21 = a1;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v20 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v5 = xpc_dictionary_get_uint64(value, "kCBMsgArgCmdReqType");
  xpc_object_t array = xpc_dictionary_get_array(value, "kCBMsgArgDeviceArray");
  size_t count = xpc_array_get_count(array);
  unsigned __int8 v8 = count;
  uint64_t v9 = (unsigned __int16)count;
  __chkstk_darwin(count, 6LL * (unsigned __int16)count);
  uint64_t v11 = (int *)((char *)&v20 - v10);
  bzero((char *)&v20 - v10, v12);
  if (v9)
  {
    size_t v13 = 0LL;
    uint64_t v14 = v11;
    do
    {
      size_t length = 0LL;
      data = xpc_array_get_data(array, v13, &length);
      if (length >= 6) {
        size_t v16 = 6LL;
      }
      else {
        size_t v16 = length;
      }
      memcpy(v14, data, v16);
      ++v13;
      uint64_t v14 = (int *)((char *)v14 + 6);
    }

    while (v9 != v13);
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D318();
  }

  else if (uint64)
  {
LABEL_9:
    uint64_t v17 = (int)sub_1003B7EFC(uint64, v20, v5, v11, v8);
    goto LABEL_12;
  }

  uint64_t v17 = 7LL;
LABEL_12:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v19 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v17);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(v21 + 72) + 16LL), v19);
    xpc_release(v19);
  }

void sub_100513648(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  if (v6 > 0x3E7)
  {
    unint64_t v7 = 1000LL;
  }

  else
  {
    uint64_t v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
    unint64_t v7 = v6;
  }

  unint64_t v15 = 0LL;
  __chkstk_darwin(v6, 8 * v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  bzero(v9, v8);
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D378();
  }

  else if (uint64)
  {
LABEL_6:
    uint64_t v10 = (int)sub_1003BB1CC(uint64, (unint64_t *)v9, &v15, v7);
    goto LABEL_9;
  }

  uint64_t v10 = 7LL;
LABEL_9:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_object_t v13 = xpc_array_create(0LL, 0LL);
    if (v15)
    {
      for (unint64_t i = 0LL; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, *(void *)&v9[8 * i]);
    }

    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v12);
    xpc_release(v13);
    xpc_release(v12);
  }

void sub_100513828(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryGenericConfigMode");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D3D8();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_1003BC70C(uint64, v6, v7);
    goto LABEL_6;
  }

  uint64_t v8 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_100513928(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D438();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003BC7D8(uint64, v6, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAccessoryGenericConfigMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100513A34(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D498();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003BCB78(uint64, v6, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAccessoryGenericConfigMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100513B40(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  size_t length = 0LL;
  data = xpc_dictionary_get_data(value, "kCBMsgArgAddressBytes", &length);
  if (length == 6)
  {
    uint64_t v8 = (uint64_t)data;
    int v9 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryDeviceState");
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
    {
      sub_10068D4F8();
    }

    else if (uint64)
    {
LABEL_4:
      uint64_t v10 = (int)sub_1003BCF24(uint64, v6, v8, v9);
LABEL_11:
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (!reply) {
        return;
      }
      size_t v12 = reply;
      uint64_t v13 = v10;
      goto LABEL_13;
    }

    uint64_t v10 = 7LL;
    goto LABEL_11;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_FAULT)) {
    sub_10066EC08();
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v12 = reply;
    uint64_t v13 = 8LL;
LABEL_13:
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v12);
    xpc_release(v12);
  }

void sub_100513CC4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D558();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003BD1B0(uint64, v6, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAccessoryGenericConfigMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100513DD0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  LODWORD(value) = 0;
  if (v4)
  {
    int v5 = v4;
    uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
    uint64_t v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTDevice");
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
    {
      sub_10068D5B8();
    }

    else if (uint64)
    {
LABEL_4:
      uint64_t v8 = (int)sub_1003BD878(uint64, v7, (int *)&value);
      goto LABEL_8;
    }

    uint64_t v8 = 7LL;
  }

  else
  {
    uint64_t v8 = 3LL;
  }

void sub_100513EE8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  LODWORD(value) = -1;
  if (v4)
  {
    int v5 = v4;
    uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
    uint64_t v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTDevice");
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
    {
      sub_10068D618();
    }

    else if (uint64)
    {
LABEL_4:
      uint64_t v8 = (int)sub_1003BD978(uint64, v7, (int *)&value);
      goto LABEL_8;
    }

    uint64_t v8 = 7LL;
  }

  else
  {
    uint64_t v8 = 3LL;
  }

void sub_100514004(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (value)
  {
    int v5 = value;
    uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
    uint64_t v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTDevice");
    int v8 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBool");
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
    {
      sub_10068D678();
    }

    else if (uint64)
    {
LABEL_4:
      uint64_t v9 = (int)sub_1003BDB78(uint64, v7, v8);
      goto LABEL_8;
    }

    uint64_t v9 = 7LL;
  }

  else
  {
    uint64_t v9 = 3LL;
  }

void sub_100514110(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  memset(v14, 0, 7);
  if (!value)
  {
    unsigned int v9 = 0;
    uint64_t v8 = 3LL;
    goto LABEL_11;
  }

  int v5 = value;
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D6D8();
LABEL_10:
    unsigned int v9 = 0;
    uint64_t v8 = 7LL;
    goto LABEL_11;
  }

void sub_1005142A4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t value = 0LL;
  if (v4)
  {
    int v5 = v4;
    uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
    uint64_t v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTDevice");
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
    {
      sub_10068D738();
    }

    else if (uint64)
    {
LABEL_4:
      uint64_t v8 = (int)sub_1003BD5BC(uint64, v7, (uint64_t *)&value);
      goto LABEL_8;
    }

    uint64_t v8 = 7LL;
  }

  else
  {
    uint64_t v8 = 3LL;
  }

void sub_1005143BC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (value)
  {
    int v5 = value;
    uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
    uint64_t v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTDevice");
    uint64_t v8 = xpc_dictionary_get_uint64(v5, "kCBMsgArgFeatureProxCardStatusMessage");
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
    {
      sub_10068D798();
    }

    else if (uint64)
    {
LABEL_4:
      uint64_t v9 = (int)sub_1003BD79C(uint64, v7, v8);
      goto LABEL_8;
    }

    uint64_t v9 = 7LL;
  }

  else
  {
    uint64_t v9 = 3LL;
  }

void sub_1005144C8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  LODWORD(value) = 0;
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D7F8();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003BD2C0(uint64, v6, &value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStereoHFPSupport", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_1005145D4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D858();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003B6A5C(uint64, v6, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAnnounceMsgSupport", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_1005146E0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v7, v8);
  unsigned int v10 = (char *)&v14 - v9;
  bzero((char *)&v14 - v9, v7);
  size_t v14 = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D8B8();
  }

  else if (uint64)
  {
LABEL_3:
    int v11 = sub_1003BADBC(uint64, v6, v10, &v14, v7);
    goto LABEL_6;
  }

  int v11 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v13 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
    if (!v11) {
      xpc_dictionary_set_data(v13, "kCBMsgArgData", v10, v14);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v13);
    xpc_release(v13);
  }

void sub_100514874(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAACPCapabilityInteger");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D918();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_1003BAED4(uint64, v6, v7, &value);
    goto LABEL_6;
  }

  uint64_t v8 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    unsigned int v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgValue", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_100514998(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D978();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_1003B73B8(uint64, v7, v6);
    goto LABEL_6;
  }

  uint64_t v8 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    unsigned int v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_100514A98(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068D9D8();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003BDD24(uint64, v6, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAnnounceCallsSupport", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100514BA4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryGenericConfigMode");
  string = xpc_dictionary_get_string(value, "kCBMsgArgAccessoryBundleID");
  int v9 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryHeadTrackingStatus");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068DA38();
    if (string)
    {
LABEL_3:
      else {
        uint64_t v10 = 7LL;
      }
      goto LABEL_8;
    }
  }

  else if (string)
  {
    goto LABEL_3;
  }

  uint64_t v10 = 3LL;
LABEL_8:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v12);
    xpc_release(v12);
  }

void sub_100514CE8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  string = xpc_dictionary_get_string(v4, "kCBMsgArgAccessoryBundleID");
  value[0] = 0xFFFFFFFFFFLL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068DA98();
    if (string)
    {
LABEL_3:
      else {
        uint64_t v8 = 7LL;
      }
      goto LABEL_8;
    }
  }

  else if (string)
  {
    goto LABEL_3;
  }

  uint64_t v8 = 3LL;
LABEL_8:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgAccessoryGenericConfigMode", HIDWORD(value[0]));
    xpc_dictionary_set_uint64(v10, "kCBMsgArgAccessoryHeadTrackingStatus", LODWORD(value[0]));
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_100514E38(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryGenericConfigMode");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068DAF8();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_1003BB744(uint64, v6, v7);
    goto LABEL_6;
  }

  uint64_t v8 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_100514F3C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068DB74();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003BBB2C(uint64, v6, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAccessoryGenericConfigMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100515048(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LOWORD(value) = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryJBL");
  uint64_t v10 = v6;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068DBEC();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003BDED0(uint64, &v10, (unsigned __int16 *)&value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAccessoryJBL", (unsigned __int16)value);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBTDevice", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_10051517C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068DC4C();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003BB384(uint64, v6, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAccessoryGenericConfigMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100515288(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068DCAC();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_1003B8888(uint64, v6, v7);
    goto LABEL_6;
  }

  uint64_t v8 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_100515388(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  memset(length, 0, sizeof(length));
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068DD0C();
  }

  else if (uint64)
  {
LABEL_3:
    int v7 = sub_1003BE350(uint64, v6, &length[1], length);
    goto LABEL_6;
  }

  int v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    if (!v7 && *(void *)&length[1]) {
      xpc_dictionary_set_data(v9, "kCBMsgArgData", *(const void **)&length[1], length[0]);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

  if (*(void *)&length[1]) {
    free(*(void **)&length[1]);
  }
}

void sub_1005154B4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068DD6C();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003BE1C4(uint64, v6, &value);
    goto LABEL_6;
  }

  uint64_t v7 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgSensorStreamingFrequency", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_1005155C0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgProductId");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v14 - v9;
  bzero((char *)&v14 - v9, v7);
  size_t v14 = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068DDCC();
    if (v6) {
      goto LABEL_3;
    }
  }

  else if (v6)
  {
LABEL_3:
    int v11 = sub_1003BE678(v6, uint64, v10, &v14, v7);
    goto LABEL_6;
  }

  int v11 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v13 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
    if (!v11) {
      xpc_dictionary_set_data(v13, "kCBMsgArgData", v10, v14);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v13);
    xpc_release(v13);
  }

void sub_100515754(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_object_t v5 = xpc_dictionary_get_value(value, "kCBMsgArgProductIds");
  size_t count = xpc_array_get_count(v5);
  uint64_t v7 = malloc(4 * count);
  if (count)
  {
    for (size_t i = 0LL; i != count; ++i)
      v7[i] = xpc_array_get_uint64(v5, i);
  }

  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v10 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v17 - v12;
  bzero((char *)&v17 - v12, v10);
  size_t v17 = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068DE2C();
  }

  else if (uint64)
  {
LABEL_6:
    int v14 = sub_1003BE9B8(uint64, (uint64_t)v7, count, v13, &v17, v10);
    goto LABEL_9;
  }

  int v14 = 7;
LABEL_9:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v16 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v14);
    if (!v14) {
      xpc_dictionary_set_data(v16, "kCBMsgArgData", v13, v17);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v16);
    xpc_release(v16);
  }

  free(v7);
}

void sub_10051592C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 3;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068DE8C();
  }

  else if (uint64)
  {
LABEL_3:
    int v7 = sub_1003BED20(uint64, v6, (int *)&value);
    goto LABEL_6;
  }

  int v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    if (!v7) {
      xpc_dictionary_set_uint64(v9, "kCBMsgArgPrimarySide", value);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100515A40(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(v4, "kCBMsgArgHeadphoneFeatureType");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068DEEC();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_1003BEF20(uint64, v6, v7, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v8 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgHeadphoneFeatureValue", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_100515B64(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgHeadphoneFeatureType");
  int v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgHeadphoneFeatureValue");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10068DF4C();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v9 = (int)sub_1003BF3F8(uint64, v6, v7, v8);
    goto LABEL_6;
  }

  uint64_t v9 = 7LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v11);
    xpc_release(v11);
  }

void sub_100515C84(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  unsigned __int16 v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgAVMsgLen");
  size_t length = 0LL;
  data = (unsigned __int8 *)xpc_dictionary_get_data(value, "kCBMsgArgData", &length);
  if (length == v7)
  {
    uint64_t v9 = data;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
    {
      sub_10068DFAC();
    }

    else if (uint64)
    {
LABEL_4:
      uint64_t v10 = (int)sub_1003B8E48(uint64, v6, v7, v9);
      goto LABEL_10;
    }

    uint64_t v10 = 7LL;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068E00C();
    }
    uint64_t v10 = 3LL;
  }

void sub_100515DEC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  unsigned __int16 v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgPMEMsgLen");
  size_t length = 0LL;
  data = (unsigned __int8 *)xpc_dictionary_get_data(value, "kCBMsgArgData", &length);
  if (length == v7)
  {
    uint64_t v9 = data;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
    {
      sub_10068E06C();
    }

    else if (uint64)
    {
LABEL_4:
      uint64_t v10 = (int)sub_1003B8F74(uint64, v6, v7, v9);
      goto LABEL_10;
    }

    uint64_t v10 = 7LL;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068E0CC();
    }
    uint64_t v10 = 3LL;
  }

uint64_t sub_100515F58(uint64_t a1)
{
  uint64_t v2 = a1 + 80;
  uint64_t v3 = *(void **)(a1 + 80);
  xpc_object_t v4 = (void *)(a1 + 88);
  if (v3 != (void *)(a1 + 88))
  {
    do
    {
      xpc_object_t v5 = (int64x2_t *)v3[4];
      int64x2_t v14 = 0u;
      int64x2_t v15 = 0u;
      int64x2_t v6 = v5[1];
      int64x2_t v14 = *v5;
      int64x2_t v15 = v6;
      uint64_t v7 = v5[2].i64[0];
      uint64_t v13 = v7;
      unint64_t v8 = v5[3].u64[1];
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32( (int32x4_t)vceqzq_s64(v14),  (int32x4_t)vceqzq_s64(v6))))) & 1) != 0)
      {
        sub_1003B4F20(v8, (__int128 *)v14.i8);
      }

      else if (v7 && *(_BYTE *)(a1 + 104))
      {
        sub_1003B8B04(v8, &v13);
        *(_BYTE *)(a1 + 104) = 0;
      }

      free(v5);
      uint64_t v9 = (void *)v3[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          uint64_t v10 = (void *)v3[2];
          BOOL v11 = *v10 == (void)v3;
          uint64_t v3 = v10;
        }

        while (!v11);
      }

      uint64_t v3 = v10;
    }

    while (v10 != v4);
  }

  sub_10023BF24(v2, *(void **)(a1 + 88));
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 80) = v4;
  sub_10023BF24(v2, 0LL);
  *(void *)a1 = &off_100891BA0;
  sub_100242E28(a1 + 8);
  return a1;
}

void sub_100516084(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &off_100891BA0;
  sub_100242E28(v1 + 8);
  _Unwind_Resume(a1);
}

void sub_1005160B4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100515F58(a1);
  operator delete(v1);
}

BOOL sub_1005160C8(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  BOOL v11 = string;
  size_t v12 = strlen(string);
  xpc_object_t v5 = sub_100331854(&xmmword_1008F7760, (uint64_t)&v11);
  if (v5)
  {
    BOOL v11 = string;
    size_t v12 = strlen(string);
    uint64_t v13 = &v11;
    int64x2_t v6 = sub_1005162D0((uint64_t)&xmmword_1008F7760, (uint64_t)&v11, (uint64_t)&unk_1006C2518, (_OWORD **)&v13);
    uint64_t v7 = (void (*)(void *, xpc_object_t))v6[4];
    uint64_t v8 = v6[5];
    uint64_t v9 = (void *)(a1 + (v8 >> 1));
    if ((v8 & 1) != 0) {
      uint64_t v7 = *(void (**)(void *, xpc_object_t))(*v9 + v7);
    }
    v7(v9, xdict);
  }

  return v5 != 0LL;
}

uint64_t sub_100516194(uint64_t a1)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, a1 + 8);
  uint64_t v2 = *(void **)(a1 + 80);
  uint64_t v3 = (void *)(a1 + 88);
  if (v2 != (void *)(a1 + 88))
  {
    do
    {
      xpc_object_t v4 = (int64x2_t *)v2[4];
      int64x2_t v13 = 0u;
      int64x2_t v14 = 0u;
      int64x2_t v5 = v4[1];
      int64x2_t v13 = *v4;
      int64x2_t v14 = v5;
      uint64_t v6 = v4[2].i64[0];
      uint64_t v12 = v6;
      unint64_t v7 = v4[3].u64[1];
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32( (int32x4_t)vceqzq_s64(v13),  (int32x4_t)vceqzq_s64(v5))))) & 1) != 0 && *(_BYTE *)(a1 + 105))
      {
        sub_1003B4F20(v7, (__int128 *)v13.i8);
        *(_BYTE *)(a1 + 105) = 0;
      }

      else if (v6 && *(_BYTE *)(a1 + 104))
      {
        sub_1003B8B04(v7, &v12);
        *(_BYTE *)(a1 + 104) = 0;
      }

      free(v4);
      uint64_t v8 = (void *)v2[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          uint64_t v9 = (void *)v2[2];
          BOOL v10 = *v9 == (void)v2;
          uint64_t v2 = v9;
        }

        while (!v10);
      }

      uint64_t v2 = v9;
    }

    while (v9 != v3);
  }

  sub_10023BF24(a1 + 80, *(void **)(a1 + 88));
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 80) = v3;
  return sub_100242FAC((uint64_t)v15);
}

void sub_1005162BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *sub_1005162D0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = sub_1003313A4((uint64_t)&v29, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }

    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }

    int64x2_t v13 = *(void ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      int64x2_t v14 = *v13;
      if (*v13)
      {
        uint64_t v17 = a2;
        int64x2_t v15 = *(uint64_t **)a2;
        size_t v16 = *(void *)(v17 + 8);
        do
        {
          unint64_t v18 = *((void *)v14 + 1);
          if (v18 == v8)
          {
          }

          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9) {
                v18 %= v9;
              }
            }

            else
            {
              v18 &= v9 - 1;
            }

            if (v18 != v12) {
              break;
            }
          }

          int64x2_t v14 = *(void **)v14;
        }

        while (v14);
      }
    }
  }

  else
  {
    unint64_t v12 = 0LL;
  }

  int64x2_t v14 = operator new(0x30uLL);
  *(void *)int64x2_t v14 = 0LL;
  *((void *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((void *)v14 + 4) = 0LL;
  *((void *)v14 + 5) = 0LL;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1LL;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_10005141C(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }

    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }

  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v12);
  if (v26)
  {
    *(void *)int64x2_t v14 = *v26;
LABEL_40:
    *uint64_t v26 = v14;
    goto LABEL_41;
  }

  *(void *)int64x2_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v25 + 8 * v12) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v27 = *(void *)(*(void *)v14 + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }

    else
    {
      v27 &= v9 - 1;
    }

    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_40;
  }

void sub_100516524(_Unwind_Exception *a1)
{
}

void sub_100516538(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_100516568(_Unwind_Exception *a1)
{
}

  ;
}

void sub_100516598()
{
  v0 = objc_autoreleasePoolPush();
  xmmword_1008F7760 = 0u;
  *(_OWORD *)algn_1008F7770 = 0u;
  dword_1008F7780 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_10050DBF0, &xmmword_1008F7760, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1005165E8(uint64_t a1)
{
  char v6 = 0;
  sub_100242CA4(&v6);
  if (sub_1000E6BCC((uint64_t)off_10089F298))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
      sub_10068E1EC();
    }
    goto LABEL_15;
  }

  uint64_t v2 = sub_1002E6BF0();
  else {
    int v3 = 17;
  }
  if (sub_1000EBF74((uint64_t)&off_10089F2C8, v3, 0LL, (uint64_t *)&off_10089F2F0))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
      sub_10068E18C();
    }
LABEL_14:
    sub_1000E6D50();
LABEL_15:
    uint64_t v4 = 1LL;
    goto LABEL_16;
  }

  if (sub_10009C670((uint64_t)off_10089F300, 2, (uint64_t)&off_10089F2F0))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
      sub_10068E12C();
    }
    sub_1000ECBBC();
    goto LABEL_14;
  }

  atomic_store(0, (unsigned __int8 *)(a1 + 545));
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089F770);
  }
  sub_100522920(qword_1008D6450 + 464, a1 + 272);
  uint64_t v4 = 0LL;
LABEL_16:
  sub_100242CD8(&v6);
  return v4;
}

void sub_100516774( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10051678C(uint64_t a1)
{
  char v4 = 0;
  sub_100242CA4(&v4);
  if (sub_1000ECBBC())
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
      sub_10068E30C();
    }
LABEL_10:
    uint64_t v2 = 1LL;
    goto LABEL_11;
  }

  if (sub_10009CAB4())
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
      sub_10068E2AC();
    }
    goto LABEL_10;
  }

  if (sub_1000E6D50())
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
      sub_10068E24C();
    }
    goto LABEL_10;
  }

  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089F770);
  }
  sub_100009168(qword_1008D6450 + 464, a1 + 272);
  uint64_t v2 = 0LL;
LABEL_11:
  sub_100242CD8(&v4);
  return v2;
}

void sub_1005168B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1005168CC(uint64_t a1, uint64_t a2)
{
  int v3 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, &__p);
    char v4 = v21 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Connecting AVRCP profile to device %{public}s",  buf,  0xCu);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p);
    }
  }

  uint64_t v5 = sub_1002E6BF0();
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 328LL))(v5);
  if ((_DWORD)v6)
  {
    __int128 v18 = xmmword_1006C3CA0;
    __p = 0LL;
    float v20 = 0LL;
    uint64_t v21 = 0LL;
    if (sub_100516BAC(v6, a2, 0x110Fu) >= 0x104
      && sub_1003D4C9C(a2, (uint64_t)&v18, 0x311u, &__p))
    {
      __int128 v17 = *(_OWORD *)__p;
      if ((BYTE8(v17) & 0x40) != 0)
      {
        unint64_t v8 = (os_log_s *)qword_1008F75D0;
        BOOL v9 = os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT);
        if (v9)
        {
          sub_1003CF00C(a2, buf);
          int v10 = v23;
          unint64_t v11 = *(_BYTE **)buf;
          int v13 = sub_100516C98(v12, a2);
          int64x2_t v14 = buf;
          if (v10 < 0) {
            int64x2_t v14 = v11;
          }
          *(_DWORD *)size_t v24 = 136446466;
          uint64_t v25 = v14;
          __int16 v26 = 1024;
          int v27 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Browsing is supported on device %{public}s, isBrowsingBroken %d",  v24,  0x12u);
          if (v23 < 0) {
            operator delete(*(void **)buf);
          }
        }

        char v7 = sub_100516C98(v9, a2) ^ 1;
      }

      else
      {
        char v7 = 0;
      }

      sub_10025EB84(&v17);
    }

    else
    {
      char v7 = 0;
    }

    if (__p)
    {
      float v20 = __p;
      operator delete(__p);
    }
  }

  else
  {
    char v7 = 0;
  }

  v24[0] = 0;
  sub_100242CA4(v24);
  if (sub_1000E6DD8((int *)(a2 + 128), (uint64_t)&unk_1006C3C50, v7))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(a2, &__p);
      sub_10068E36C();
    }

    uint64_t v15 = 1LL;
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  sub_100242CD8(v24);
  return v15;
}

void sub_100516B54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100516BAC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v12[0] = 131075LL;
  v12[1] = a3;
  __p = 0LL;
  int v10 = 0LL;
  uint64_t v11 = 0LL;
  int v3 = sub_1003D4C9C(a2, (uint64_t)v12, 9u, &__p);
  char v4 = __p;
  if (!v3)
  {
    LOWORD(v6) = 0;
    if (!__p) {
      return (unsigned __int16)v6;
    }
    goto LABEL_10;
  }

  uint64_t v5 = *((void *)__p + 1);
  if (*(_DWORD *)(v5 + 8) == 4366) {
    int v6 = *(_DWORD *)(v5 + 24);
  }
  else {
    LOWORD(v6) = 0;
  }
  if (__p == v10) {
    goto LABEL_10;
  }
  do
  {
    __int128 v8 = *v4;
    sub_10025EB84(&v8);
    ++v4;
  }

  while (v4 != v10);
  char v4 = __p;
  if (__p)
  {
LABEL_10:
    int v10 = v4;
    operator delete(v4);
  }

  return (unsigned __int16)v6;
}

void sub_100516C78( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100516C98(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0LL;
  __int128 v13 = 0u;
  memset(v12, 0, sizeof(v12));
  __int128 v10 = 0u;
  *(_OWORD *)__p = 0u;
  __int128 v8 = 0u;
  *(_OWORD *)BOOL v9 = 0u;
  __int128 v6 = 0u;
  *(_OWORD *)char v7 = 0u;
  sub_100532DC0((uint64_t)&v6 + 1);
  BYTE2(v7[0]) = 0;
  BYTE4(v7[0]) = 0;
  BYTE2(v9[0]) = 0;
  BYTE4(v9[0]) = 0;
  DWORD1(v12[1]) = 0;
  __int128 v8 = 0uLL;
  v7[1] = 0LL;
  LOBYTE(v9[0]) = 0;
  __int128 v10 = 0uLL;
  v9[1] = 0LL;
  LOBYTE(__p[0]) = 0;
  memset(v12, 0, 19);
  __p[1] = 0LL;
  BYTE8(v12[1]) = 1;
  BYTE2(v14) = 0;
  *(void *)((char *)&v12[1] + 14) = 0LL;
  *(void *)((char *)&v12[1] + 9) = 0LL;
  __int128 v13 = 0uLL;
  *((void *)&v12[2] + 1) = 0LL;
  LOBYTE(v14) = 0;
  LODWORD(a2) = sub_1003D2408(a2, (uint64_t)&v6);
  int v4 = BYTE14(v12[2]);
  if (SHIBYTE(v12[0]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[1]);
  }
  if (v4) {
    a2 = a2;
  }
  else {
    a2 = 0LL;
  }
  nullsub_63((char *)&v6 + 1, v2);
  return a2;
}

void sub_100516DCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100516DE8(uint64_t a1, uint64_t a2)
{
  int v4 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    if (v10 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Disconnecting AVRCP profile to device %{public}s",  buf,  0xCu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  char v8 = 0;
  sub_100242CA4(&v8);
  if (sub_1000E6F80((int *)(a2 + 128)))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
    {
LABEL_9:
      sub_1003CF00C(a2, __p);
      sub_10068E3B0();
    }
  }

  else
  {
    if (!*(void *)(a1 + 528) || !sub_10009DFD0(*(unsigned __int16 *)(a1 + 536)))
    {
      uint64_t v6 = 0LL;
      goto LABEL_16;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
  }

  uint64_t v6 = 1LL;
LABEL_16:
  sub_100242CD8(&v8);
  return v6;
}

void sub_100516F84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_100516FA8(uint64_t a1, uint64_t a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  int v4 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  int v5 = sub_100411064(a1, (uint64_t)v4);
  uint64_t v6 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    char v7 = v5 ? "Accepting" : "Rejecting";
    sub_1003CF00C((uint64_t)v4, __p);
    char v8 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v29 = 2082;
    uint64_t v30 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}s incoming connection attempt from device %{public}s",  buf,  0x16u);
    if (SHIBYTE(__p[2]) < 0)
    {
      operator delete(__p[0]);
      if ((v5 & 1) != 0) {
        goto LABEL_12;
      }
LABEL_19:
      uint64_t result = sub_1000E6EB4((int *)a2, 0, 0);
      goto LABEL_31;
    }
  }

  if ((v5 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_12:
  uint64_t v9 = sub_1002E6BF0();
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 328LL))(v9);
  if ((_DWORD)v10)
  {
    __int128 v25 = xmmword_1006C3CA0;
    memset(__p, 0, sizeof(__p));
    if (sub_100516BAC(v10, (uint64_t)v4, 0x110Fu) >= 0x104
      && sub_1003D4C9C((uint64_t)v4, (uint64_t)&v25, 0x311u, __p))
    {
      __int128 v24 = *(_OWORD *)__p[0];
      if ((BYTE8(v24) & 0x40) != 0)
      {
        __int128 v13 = (os_log_s *)qword_1008F75D0;
        BOOL v14 = os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT);
        if (v14)
        {
          sub_1003CF00C((uint64_t)v4, buf);
          int v15 = v31;
          size_t v16 = *(_BYTE **)buf;
          int v18 = sub_100516C98(v17, (uint64_t)v4);
          float v19 = buf;
          if (v15 < 0) {
            float v19 = v16;
          }
          *(_DWORD *)v32 = 136446466;
          uint64_t v33 = v19;
          __int16 v34 = 1024;
          int v35 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Browsing is supported on device %{public}s, isBrowsingBroken %d",  v32,  0x12u);
          if (v31 < 0) {
            operator delete(*(void **)buf);
          }
        }

        char v11 = sub_100516C98(v14, (uint64_t)v4) ^ 1;
      }

      else
      {
        char v11 = 0;
      }

      sub_10025EB84(&v24);
    }

    else
    {
      char v11 = 0;
    }

    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100410910(a1, (uint64_t)v4, 1);
  uint64_t result = sub_1000E6EB4((int *)a2, 1, v11);
LABEL_31:
  int v20 = result;
  if ((_DWORD)result)
  {
    uint64_t v21 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
    {
      if (v5) {
        unint64_t v22 = "accept";
      }
      else {
        unint64_t v22 = "reject";
      }
      sub_1003CF00C((uint64_t)v4, buf);
      if (v31 >= 0) {
        char v23 = buf;
      }
      else {
        char v23 = *(_BYTE **)buf;
      }
      LODWORD(__p[0]) = 136446722;
      *(void **)((char *)__p + 4) = (void *)v22;
      WORD2(__p[1]) = 2082;
      *(void **)((char *)&__p[1] + 6) = v23;
      HIWORD(__p[2]) = 1024;
      int v27 = v20;
      _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Failed to %{public}s connection attempt from device %{public}s - result was %{bluetooth:OI_STATUS}u",  (uint8_t *)__p,  0x1Cu);
      if (v31 < 0) {
        operator delete(*(void **)buf);
      }
    }

    return sub_100410A5C(a1, (uint64_t)v4, 1);
  }

  return result;
}

void sub_10051734C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100517390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  *(_DWORD *)__p = *(_DWORD *)a2;
  *(_WORD *)&__p[4] = *(_WORD *)(a2 + 4);
  uint64_t v6 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  uint64_t v31 = (uint64_t)v6;
  char v7 = (os_log_s *)qword_1008F75D0;
  if ((_DWORD)a3)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C((uint64_t)v6, __p);
      uint64_t v30 = v40 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = v30;
      __int16 v33 = 1024;
      int v34 = a3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Failed to connect to device %{public}s - result was %{bluetooth:OI_STATUS}u",  buf,  0x12u);
      if (SHIBYTE(v40) < 0) {
        operator delete(*(void **)__p);
      }
    }

    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_10089F7B0);
    }
    int v8 = sub_1004317E0((uint64_t)off_1008D60A8, a3, 20000);
    return sub_100410A5C(a1, (uint64_t)v6, v8);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)v6, __p);
      uint64_t v10 = v40 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = v10;
      __int16 v33 = 1024;
      int v34 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "RemoteClient connect confirm device %{public}s with result %{bluetooth:OI_STATUS}u",  buf,  0x12u);
      if (SHIBYTE(v40) < 0) {
        operator delete(*(void **)__p);
      }
    }

    char v11 = *(void **)(a1 + 352);
    if (v11)
    {
      uint64_t v12 = a1 + 352;
      do
      {
        unint64_t v13 = v11[4];
        BOOL v14 = v13 >= (unint64_t)v6;
        else {
          int v15 = v11 + 1;
        }
        if (v14) {
          uint64_t v12 = (uint64_t)v11;
        }
        char v11 = (void *)*v15;
      }

      while (*v15);
      if (v12 != a1 + 352 && (unint64_t)v6 >= *(void *)(v12 + 32))
      {
        size_t v16 = (os_log_s *)qword_1008F75D0;
        if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_FAULT)) {
          sub_10068E3F4(v16, v17, v18, v19, v20, v21, v22, v23);
        }
      }
    }

    __int128 v24 = operator new(0xB8uLL);
    sub_10052305C();
    *(void *)__p = &v31;
    sub_100029574((uint64_t **)(a1 + 344), (unint64_t *)&v31, (uint64_t)&unk_1006C2518, (uint64_t **)__p)[5] = (uint64_t)v24;
    if (sub_1003D518C(v31)
      && ((uint64_t v25 = sub_1003DA4FC(v31), (_DWORD)v25) || sub_100516BAC(v25, v31, 0x110Cu) >= 0x104))
    {
      sub_10051779C(a1, v31);
    }

    else
    {
      __int16 v26 = (os_log_s *)qword_1008F75D0;
      if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(v31, buf);
        int v27 = v35 >= 0 ? buf : *(_BYTE **)buf;
        BOOL v28 = sub_1003D518C(v31);
        int v29 = sub_1003DA4FC(v31);
        *(_DWORD *)__p = 136446722;
        *(void *)&__p[4] = v27;
        __int16 v37 = 1024;
        BOOL v38 = v28;
        __int16 v39 = 1024;
        int v40 = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Delaying capability check for device %{public}s as SDP record is %d and AVRCP Version is %d",  __p,  0x18u);
        if (v35 < 0) {
          operator delete(*(void **)buf);
        }
      }

      if (qword_1008D9600 != -1) {
        dispatch_once(&qword_1008D9600, &stru_10089F7D0);
      }
      sub_10041AA14(qword_1008D95F8, v31, a1 + 256, 1, 2);
    }

    return sub_100410A5C(a1, v31, 0);
  }

void sub_10051776C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10051779C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100516BAC(a1, a2, 0x110Cu);
  if ((_DWORD)v3)
  {
    unsigned int v4 = v3;
    uint64_t v5 = sub_1003DA5C0(a2, v3);
  }

  else
  {
    uint64_t v5 = sub_1003DA4FC(a2);
    unsigned int v4 = v5;
  }

  if (v4 < 0x104 || (sub_100518190(v5, a2) & 1) != 0)
  {
    uint64_t v6 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, __p);
      int v7 = v15;
      int v8 = *(_BYTE **)__p;
      int v10 = sub_100518190(v9, a2);
      char v11 = __p;
      *(_DWORD *)buf = 136446722;
      if (v7 < 0) {
        char v11 = v8;
      }
      *(void *)&uint8_t buf[4] = v11;
      __int16 v17 = 1024;
      unsigned int v18 = v4;
      __int16 v19 = 1024;
      int v20 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Skipping capability check for device %{public}s with remote control version 0x%x, brokenAbs %d",  buf,  0x18u);
      if (v15 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }

  else
  {
    uint64_t v12 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, buf);
      unint64_t v13 = v20 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)__p = 136446210;
      *(void *)&__p[4] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Querying capabilities of remote device %{public}s to see if they support absolute volume",  __p,  0xCu);
      if (SHIBYTE(v20) < 0) {
        operator delete(*(void **)buf);
      }
    }

    buf[0] = 0;
  }

void sub_100517994( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005179B8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  int v8 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  BOOL v14 = v8;
  uint64_t v9 = (os_log_s *)qword_1008F75D0;
  if (a3)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C((uint64_t)v8, __p);
      if (v13 >= 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446466;
      *(void *)size_t v16 = v10;
      *(_WORD *)&v16[8] = 1024;
      *(_DWORD *)&v16[10] = a3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Failed to establish browsing channel with device %{public}s: %{bluetooth:OI_STATUS}u",  buf,  0x12u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)v8, __p);
      char v11 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)size_t v16 = a4;
      *(_WORD *)&v16[4] = 2082;
      *(void *)&v16[6] = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Browsing channel (MTU = %u) established with device %{public}s",  buf,  0x12u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    __p[0] = &v14;
  }

void sub_100517BB0(uint64_t a1, uint64_t a2, __int16 a3, int a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  int v8 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  uint64_t v9 = (os_log_s *)qword_1008F75D0;
  if (a4)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C((uint64_t)v8, __p);
      if (v13 >= 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446466;
      char v15 = v10;
      __int16 v16 = 1024;
      int v17 = a4;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Failed to establish BIP cover art channel with device %{public}s: %{bluetooth:OI_STATUS}u",  buf,  0x12u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)v8, __p);
      char v11 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      char v15 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "BIP cover art channel established with device %{public}s",  buf,  0xCu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    *(void *)(a1 + 528) = v8;
    *(_WORD *)(a1 + 536) = a3;
  }

void sub_100517D78(uint64_t a1, uint64_t a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  unsigned int v4 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  uint64_t v5 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)v4, __p);
    uint64_t v6 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    unsigned int v18 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "BIP cover art channel disestablished with device %{public}s",  buf,  0xCu);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }

  if (v4 != *(void **)(a1 + 528))
  {
    int v7 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_FAULT)) {
      sub_10068E4C4(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }

  *(void *)(a1 + 528) = 0LL;
}

void sub_100517EDC(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  LODWORD(v25[0]) = *(_DWORD *)a2;
  WORD2(v25[0]) = *(_WORD *)(a2 + 4);
  uint64_t v6 = sub_1003FFEB0(off_1008D5F48, (uint64_t)v25, 1);
  unint64_t v26 = (unint64_t)v6;
  int v7 = *(void **)(a1 + 352);
  if (!v7) {
    goto LABEL_44;
  }
  uint64_t v8 = a1 + 352;
  do
  {
    unint64_t v9 = v7[4];
    BOOL v10 = v9 >= (unint64_t)v6;
    else {
      uint64_t v11 = v7 + 1;
    }
    if (v10) {
      uint64_t v8 = (uint64_t)v7;
    }
    int v7 = (void *)*v11;
  }

  while (*v11);
  if (v8 != a1 + 352 && (unint64_t)v6 >= *(void *)(v8 + 32))
  {
    v25[0] = 0LL;
    v25[1] = 0LL;
    sub_100242F28((uint64_t)v25, a1 + 280);
    uint64_t v12 = *sub_100403258(a1 + 344, &v26);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 64LL))(v12);
    }
    sub_10020166C(a1 + 344, &v26);
    sub_10020166C(a1 + 504, &v26);
    sub_100242F54((uint64_t)v25);
    v24[0] = 0LL;
    v24[1] = 0LL;
    sub_100242F28((uint64_t)v24, a1 + 392);
    sub_10020166C(a1 + 456, &v26);
    sub_100242F54((uint64_t)v24);
    uint64_t v14 = *(void **)(a1 + 488);
    uint64_t v15 = v26;
    if (v14)
    {
      uint64_t v16 = a1 + 488;
      do
      {
        unint64_t v17 = v14[4];
        BOOL v18 = v17 >= v26;
        if (v17 >= v26) {
          __int16 v19 = v14;
        }
        else {
          __int16 v19 = v14 + 1;
        }
        if (v18) {
          uint64_t v16 = (uint64_t)v14;
        }
        uint64_t v14 = (void *)*v19;
      }

      while (*v19);
      if (v16 != a1 + 488 && v26 >= *(void *)(v16 + 32))
      {
        int v20 = *(void **)(v16 + 40);
        if (v20 != (void *)(v16 + 48))
        {
          do
          {
            if (*((_BYTE *)v20 + 33) == 32) {
              sub_100518158(v13, (char *)v20[5]);
            }
            uint64_t v21 = (void *)v20[1];
            if (v21)
            {
              do
              {
                uint64_t v22 = v21;
                uint64_t v21 = (void *)*v21;
              }

              while (v21);
            }

            else
            {
              do
              {
                uint64_t v22 = (void *)v20[2];
                BOOL v23 = *v22 == (void)v20;
                int v20 = v22;
              }

              while (!v23);
            }

            int v20 = v22;
          }

          while (v22 != (void *)(v16 + 48));
        }

        sub_10032982C((uint64_t **)(a1 + 480), v16);
        uint64_t v15 = v26;
      }
    }

    if (v15 == *(void *)(a1 + 552)) {
      *(void *)(a1 + 552) = 0LL;
    }
    sub_100411718(a1, v15, 0, a3);
    sub_100242FAC((uint64_t)v24);
    sub_100242FAC((uint64_t)v25);
  }

  else
  {
LABEL_44:
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
      sub_10068E534();
    }
  }

void sub_10051812C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_100518158(uint64_t a1, char *a2)
{
  for (uint64_t i = 8LL; i != 200; i += 24LL)
    free(*(void **)&a2[i]);
  free(a2);
}

uint64_t sub_100518190(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0LL;
  __int128 v13 = 0u;
  memset(v12, 0, sizeof(v12));
  __int128 v10 = 0u;
  *(_OWORD *)__p = 0u;
  __int128 v8 = 0u;
  *(_OWORD *)unint64_t v9 = 0u;
  __int128 v6 = 0u;
  *(_OWORD *)int v7 = 0u;
  sub_100532DC0((uint64_t)&v6 + 1);
  BYTE2(v7[0]) = 0;
  BYTE4(v7[0]) = 0;
  BYTE2(v9[0]) = 0;
  BYTE4(v9[0]) = 0;
  DWORD1(v12[1]) = 0;
  __int128 v8 = 0uLL;
  v7[1] = 0LL;
  LOBYTE(v9[0]) = 0;
  __int128 v10 = 0uLL;
  v9[1] = 0LL;
  LOBYTE(__p[0]) = 0;
  memset(v12, 0, 19);
  __p[1] = 0LL;
  BYTE8(v12[1]) = 1;
  BYTE2(v14) = 0;
  *(void *)((char *)&v12[1] + 14) = 0LL;
  *(void *)((char *)&v12[1] + 9) = 0LL;
  __int128 v13 = 0uLL;
  *((void *)&v12[2] + 1) = 0LL;
  LOBYTE(v14) = 0;
  LODWORD(a2) = sub_1003D2408(a2, (uint64_t)&v6);
  int v4 = BYTE13(v12[2]);
  if (SHIBYTE(v12[0]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[1]);
  }
  if (v4) {
    a2 = a2;
  }
  else {
    a2 = 0LL;
  }
  nullsub_63((char *)&v6 + 1, v2);
  return a2;
}

void sub_1005182C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1005182E0(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    int v7 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    uint64_t v14 = v7;
    __int16 v15 = 1024;
    int v16 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "RemoteClient queryComplete for device %{public}s with result %d",  buf,  0x12u);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }

  if (a3 == 307) {
    goto LABEL_22;
  }
  if (!a3)
  {
    *(_BYTE *)(a1 + 544) = 0;
    LOBYTE(__p[0]) = 0;
    sub_100242CA4(__p);
    sub_10051779C(a1, a2);
    sub_100242CD0(__p);
    sub_100242CD8(__p);
    return;
  }

  if ((a3 - 316) < 0x13 || (unsigned int v8 = *(unsigned __int8 *)(a1 + 544), v8 > 3))
  {
LABEL_22:
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
      sub_10068E560();
    }
    *(_BYTE *)(a1 + 544) = 0;
  }

  else
  {
    unsigned int v9 = v8 + 1;
    *(_BYTE *)(a1 + 544) = v8 + 1;
    __int128 v10 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "RemoteClient retrying with sdpAttempts %d",  (uint8_t *)__p,  8u);
    }

    if (qword_1008D9600 != -1) {
      dispatch_once(&qword_1008D9600, &stru_10089F7D0);
    }
    sub_10041AA14(qword_1008D95F8, a2, a1 + 256, 1, 2);
  }

void sub_1005184E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_1005184FC(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t sub_100518504(uint64_t a1, unint64_t a2, float *a3)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, a1 + 392);
  __int128 v6 = *(void **)(a1 + 464);
  if (!v6) {
    goto LABEL_12;
  }
  int v7 = (int *)(a1 + 464);
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      __int128 v10 = v6;
    }
    else {
      __int128 v10 = v6 + 1;
    }
    if (v9) {
      int v7 = (int *)v6;
    }
    __int128 v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 != (int *)(a1 + 464) && *((void *)v7 + 4) <= a2)
  {
    *a3 = (float)v7[10] / 127.0;
    uint64_t v11 = 1LL;
  }

  else
  {
LABEL_12:
    uint64_t v11 = 0LL;
  }

  sub_100242FAC((uint64_t)v13);
  return v11;
}

void sub_1005185B8(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  *(_DWORD *)__p = *(_DWORD *)a2;
  *(_WORD *)&__p[4] = *(_WORD *)(a2 + 4);
  unint64_t v8 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  BOOL v23 = v8;
  BOOL v9 = "Previous Track";
  uint64_t v10 = 504LL;
  unsigned __int8 v11 = 9;
  switch(a4 & 0x7F)
  {
    case 'A':
      BOOL v9 = "Volume Up";
      uint64_t v10 = 506LL;
      goto LABEL_12;
    case 'B':
      BOOL v9 = "Volume Down";
      uint64_t v10 = 507LL;
      goto LABEL_12;
    case 'C':
      BOOL v9 = "Mute";
      uint64_t v10 = 508LL;
      goto LABEL_12;
    case 'D':
      sub_1002428F8(7LL);
      BOOL v9 = "Play";
      uint64_t v10 = 501LL;
      goto LABEL_10;
    case 'E':
      sub_1002428F8(7LL);
      BOOL v9 = "Stop";
      uint64_t v10 = 503LL;
      goto LABEL_10;
    case 'F':
      sub_1002428F8(7LL);
      BOOL v9 = "Pause";
      uint64_t v10 = 502LL;
LABEL_10:
      unsigned __int8 v11 = 9;
      break;
    case 'H':
      if (a4 >= 0) {
        uint64_t v10 = 511LL;
      }
      else {
        uint64_t v10 = 512LL;
      }
      BOOL v9 = "Rewind";
      break;
    case 'I':
      if (a4 >= 0) {
        uint64_t v10 = 509LL;
      }
      else {
        uint64_t v10 = 510LL;
      }
      BOOL v9 = "Fast Forward";
      break;
    case 'K':
      BOOL v9 = "Next Track";
      uint64_t v10 = 505LL;
      break;
    case 'L':
      break;
    default:
      uint64_t v10 = 0LL;
      BOOL v9 = "Unknown";
LABEL_12:
      unsigned __int8 v11 = 8;
      break;
  }

  if (sub_1000ECCCC(a2, a3, a4, v11) && os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
  {
    sub_10068E5B8();
    if (!(_DWORD)v10) {
      return;
    }
  }

  else if (!(_DWORD)v10)
  {
    return;
  }

  if ((a4 & 0x80) == 0 || (a4 & 0xFE) == 0xC8)
  {
    char v12 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)v8, __p);
      __int128 v13 = v27 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446466;
      int v29 = v9;
      __int16 v30 = 2082;
      uint64_t v31 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Received AVRCP %{public}s command from device %{public}s",  buf,  0x16u);
      if (v27 < 0) {
        operator delete(*(void **)__p);
      }
    }

    int v14 = sub_1003D0268((uint64_t)v8);
    uint64_t v15 = sub_1002E8EE8();
    int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 64LL))(v15);
    unint64_t v17 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v18 = atomic_load((unsigned __int8 *)(a1 + 545));
      *(_DWORD *)__p = 67109632;
      *(_DWORD *)&__p[4] = v16;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = v18 & 1;
      __int16 v25 = 1024;
      int v26 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "CoP: %d, call related session:%d delayPlay:%d",  __p,  0x14u);
      unint64_t v8 = v23;
    }

    if (v8 && sub_1003D0670((uint64_t)v8))
    {
      unsigned __int8 v19 = atomic_load((unsigned __int8 *)(a1 + 545));
      if ((v19 & 1) == 0 || v14 != 22 && v14 != 17) {
        goto LABEL_51;
      }
      if ((v10 - 502) < 2)
      {
        int v20 = (os_log_s *)qword_1008F75D0;
        if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__p = 136315138;
          *(void *)&__p[4] = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "AVRCP %s received during call session, ignoring",  __p,  0xCu);
        }

        return;
      }

      if ((_DWORD)v10 != 501)
      {
LABEL_51:
        uint64_t v22 = sub_100403258(a1 + 344, (unint64_t *)&v23);
        (*(void (**)(void, void *, uint64_t))(**(void **)(*v22 + 8LL) + 8LL))( *(void *)(*v22 + 8LL),  v23,  v10);
        return;
      }

      uint64_t v21 = (os_log_s *)qword_1008F75D0;
      if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 136315138;
        *(void *)&__p[4] = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "AVRCP %s received during call session, queueing resumption after session ends",  __p,  0xCu);
      }

      *(void *)(a1 + 552) = v23;
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
    {
      sub_10068E58C();
    }
  }

void sub_100518A58(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1004050C8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100518AC0;
  v5[3] = &unk_1008800D8;
  v5[4] = a1;
  char v6 = a2;
  sub_100405384(v4, v5);
}

uint64_t sub_100518AC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  atomic_store(*(_BYTE *)(a1 + 40), (unsigned __int8 *)(v1 + 545));
  return sub_100518AD8(v1);
}

uint64_t sub_100518AD8(uint64_t result)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(result + 545));
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = result;
    uint64_t result = sub_1003D0670(*(void *)(result + 552));
    if ((_DWORD)result)
    {
      uint64_t v3 = *(void **)(v2 + 352);
      if (v3)
      {
        unint64_t v4 = *(void *)(v2 + 552);
        uint64_t v5 = (void *)(v2 + 352);
        do
        {
          unint64_t v6 = v3[4];
          BOOL v7 = v6 >= v4;
          if (v6 >= v4) {
            unint64_t v8 = v3;
          }
          else {
            unint64_t v8 = v3 + 1;
          }
          if (v7) {
            uint64_t v5 = v3;
          }
          uint64_t v3 = (void *)*v8;
        }

        while (*v8);
        if (v5 != (void *)(v2 + 352) && v4 >= v5[4])
        {
          BOOL v9 = (os_log_s *)qword_1008F75D0;
          if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C(v4, __p);
            if (v12 >= 0) {
              uint64_t v10 = __p;
            }
            else {
              uint64_t v10 = (void **)__p[0];
            }
            *(_DWORD *)buf = 136446210;
            int v14 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "An AVRCP Play command was pending for device %{public}s, sending to MediaRemote",  buf,  0xCu);
            if (v12 < 0) {
              operator delete(__p[0]);
            }
            unint64_t v4 = *(void *)(v2 + 552);
          }

          uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v5[5] + 8LL) + 8LL))( *(void *)(v5[5] + 8LL),  v4,  501LL);
        }
      }

      *(void *)(v2 + 552) = 0LL;
    }
  }

  return result;
}

void sub_100518C38(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  int v15 = 6488;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  BOOL v7 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  unint64_t v8 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v9 = "unknown";
    if (a4 == 3) {
      BOOL v9 = "supported events";
    }
    if (a4 == 2) {
      uint64_t v10 = "company ID";
    }
    else {
      uint64_t v10 = v9;
    }
    sub_1003CF00C((uint64_t)v7, __p);
    if (v14 >= 0) {
      unsigned __int8 v11 = __p;
    }
    else {
      unsigned __int8 v11 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446466;
    unint64_t v17 = v10;
    __int16 v18 = 2082;
    unsigned __int8 v19 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Received 'get capabilities' (%{public}s) request from device %{public}s",  buf,  0x16u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  if (a4 == 2)
  {
    int v12 = sub_1000E9538(a2, a3, 1, (uint64_t)&v15);
  }

  else
  {
    if (a4 == 3)
    {
      sub_1000EA5F8(a2, a3, 7, (uint64_t)&unk_1006C3C70);
      return;
    }

    int v12 = sub_1000E93E8(a2, a3, 16, 3306);
  }

  if (v12)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
      sub_10068E618();
    }
  }

void sub_100518E38(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  uint64_t v5 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  unint64_t v6 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)v5, __p);
    BOOL v7 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    unsigned __int8 v11 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Received 'list player attributes' request from device %{public}s",  buf,  0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  if (sub_1000EA658(a2, a3, 2, (uint64_t)&unk_1006C3C77))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
      sub_10068E678();
    }
  }

void sub_100518FB0(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  BOOL v7 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  unint64_t v8 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    char v9 = "unsupported";
    if (a4 == 3) {
      char v9 = "shuffle mode";
    }
    if (a4 == 2) {
      uint64_t v10 = "repeat mode";
    }
    else {
      uint64_t v10 = v9;
    }
    sub_1003CF00C((uint64_t)v7, __p);
    if (v22 >= 0) {
      unsigned __int8 v11 = __p;
    }
    else {
      unsigned __int8 v11 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446466;
    __int128 v24 = v10;
    __int16 v25 = 2082;
    int v26 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Received 'list player attribute value' (%{public}s) request from device %{public}s",  buf,  0x16u);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }

  switch(a4)
  {
    case 0:
    case 1:
    case 4:
      uint64_t v12 = a2;
      unsigned int v13 = a3;
      int v14 = 3301;
      goto LABEL_17;
    case 2:
      int v16 = &unk_1006C3C79;
      uint64_t v17 = a2;
      unsigned int v18 = a3;
      uint64_t v19 = 2LL;
      int v20 = 3;
      goto LABEL_20;
    case 3:
      int v16 = &unk_1006C3C7C;
      uint64_t v17 = a2;
      unsigned int v18 = a3;
      uint64_t v19 = 3LL;
      int v20 = 2;
LABEL_20:
      int v15 = sub_1000EA6A8(v17, v18, v19, v20, (uint64_t)v16);
      break;
    default:
      uint64_t v12 = a2;
      unsigned int v13 = a3;
      int v14 = 3306;
LABEL_17:
      int v15 = sub_1000E93E8(v12, v13, 18, v14);
      break;
  }

  if (v15)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
      sub_10068E6D8();
    }
  }

void sub_1005191EC(uint64_t a1, uint64_t a2, char a3, unsigned int a4, const void *a5)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v27) = *(_WORD *)(a2 + 4);
  uint64_t v10 = sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
  __int128 v24 = 0LL;
  unint64_t v25 = (unint64_t)v10;
  BOOL v23 = 0LL;
  sub_10056AB04(&v23, a5, a4);
  unsigned __int8 v11 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)v10, __p);
    uint64_t v12 = "s";
    if (a4 == 1) {
      uint64_t v12 = "";
    }
    *(_DWORD *)buf = 67109634;
    if (v22 >= 0) {
      unsigned int v13 = __p;
    }
    else {
      unsigned int v13 = (void **)__p[0];
    }
    unsigned int v27 = a4;
    __int16 v28 = 2082;
    int v29 = v12;
    __int16 v30 = 2082;
    uint64_t v31 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Received 'get player attribute value' (%u value%{public}s) request from device %{public}s",  buf,  0x1Cu);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v14 = *(void *)(*sub_100403258(a1 + 344, &v25) + 8LL);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3321888768LL;
  void v15[2] = sub_100519454;
  v15[3] = &unk_10089F348;
  char v19 = a4;
  int v16 = &off_10087FAA8;
  uint64_t v17 = v24;
  if (v24) {
    sub_1002CD1E0((uint64_t)v24);
  }
  unint64_t v18 = v25;
  char v20 = a3;
  (*(void (**)(uint64_t, void *))(*(void *)v14 + 16LL))(v14, v15);
  int v16 = &off_10087FAA8;
  if (v17) {
    sub_1002CD254(v17);
  }
  BOOL v23 = &off_10087FAA8;
  if (v24) {
    sub_1002CD254(v24);
  }
}

void sub_100519414( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, unsigned int *a21)
{
  if (a21) {
    sub_1002CD254(a21);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_100519454(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v29 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    uint8_t v5 = a4;
    uint8_t v6 = a3;
    unint64_t v7 = 0LL;
    int v8 = 0;
    uint64_t v26 = (a4 - 1);
    uint64_t v25 = (a3 - 1);
    uint64_t v9 = 3301LL;
    do
    {
      if (v8 >= 2u)
      {
        LOBYTE(__p[0]) = 0;
        sub_100242CA4(__p);
        goto LABEL_23;
      }

      uint64_t v10 = v9;
      uint64_t v9 = 3301LL;
      switch(sub_10056AE48(a1 + 32, v7))
      {
        case 0u:
        case 1u:
        case 4u:
          break;
        case 2u:
          uint8_t v11 = sub_10056AE48(a1 + 32, v7);
          uint64_t v12 = &buf[2 * v8 - 4];
          uint8_t *v12 = v11;
          v12[1] = v6;
          ++v8;
          uint64_t v13 = qword_1008F75D0;
          if (!os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_16;
          }
          uint64_t v14 = off_10089F318[v25];
          sub_1003CF00C(*(void *)(a1 + 48), __p);
          int v15 = __p;
          if (v28 < 0) {
            int v15 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136446466;
          uint64_t v31 = v14;
          __int16 v32 = 2082;
          __int16 v33 = v15;
          int v16 = (os_log_s *)v13;
          uint64_t v17 = "Sending repeat mode status '%{public}s' to device %{public}s";
          goto LABEL_14;
        case 3u:
          uint8_t v18 = sub_10056AE48(a1 + 32, v7);
          char v19 = &buf[2 * v8 - 4];
          *char v19 = v18;
          v19[1] = v5;
          ++v8;
          uint64_t v20 = qword_1008F75D0;
          if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v21 = off_10089F330[v26];
            sub_1003CF00C(*(void *)(a1 + 48), __p);
            char v22 = __p;
            if (v28 < 0) {
              char v22 = (void **)__p[0];
            }
            *(_DWORD *)buf = 136446466;
            uint64_t v31 = v21;
            __int16 v32 = 2082;
            __int16 v33 = v22;
            int v16 = (os_log_s *)v20;
            uint64_t v17 = "Sending shuffle mode status '%{public}s' to device %{public}s";
LABEL_14:
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, buf, 0x16u);
            if (v28 < 0) {
              operator delete(__p[0]);
            }
          }

void sub_100519760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_10051977C(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  LODWORD(v6) = a4;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  *(_DWORD *)buf = *(_DWORD *)a2;
  *(_WORD *)&uint8_t buf[4] = *(_WORD *)(a2 + 4);
  uint64_t v10 = sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
  uint64_t v34 = (uint64_t)v10;
  uint8_t v11 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = (_DWORD)v6 == 1 ? "" : "s";
    sub_1003CF00C((uint64_t)v10, v35);
    uint64_t v13 = v38 >= 0 ? v35 : *(_BYTE **)v35;
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = v6;
    *(_WORD *)&buf[8] = 2082;
    *(void *)&buf[10] = v12;
    __int16 v40 = 2082;
    uint64_t v41 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Received 'set player attribute value' (%d value%{public}s) request from device %{public}s",  buf,  0x1Cu);
    if (v38 < 0)
    {
      operator delete(*(void **)v35);
      if ((_DWORD)v6) {
        goto LABEL_12;
      }
LABEL_33:
      LODWORD(v18) = 3301;
      goto LABEL_34;
    }
  }

  if (!(_DWORD)v6) {
    goto LABEL_33;
  }
LABEL_12:
  uint64_t v32 = a1;
  unsigned int v33 = a3;
  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  char v16 = 0;
  uint64_t v6 = v6;
  uint64_t v17 = (unsigned __int8 *)(a5 + 1);
  uint64_t v18 = 3301LL;
  do
  {
    uint64_t v19 = v18;
    uint64_t v18 = 3301LL;
    switch(*(v17 - 1))
    {
      case 0u:
      case 1u:
      case 4u:
        break;
      case 2u:
        uint64_t v15 = *v17;
        uint64_t v20 = qword_1008F75D0;
        if (!os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_21;
        }
        uint64_t v21 = off_10089F318[(v15 - 1)];
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v21;
        char v22 = (os_log_s *)v20;
        int v23 = "Setting repeat mode to '%{public}s'";
        goto LABEL_20;
      case 3u:
        uint64_t v14 = *v17;
        uint64_t v24 = qword_1008F75D0;
        if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v25 = off_10089F330[(v14 - 1)];
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v25;
          char v22 = (os_log_s *)v24;
          int v23 = "Setting shuffle mode to '%{public}s'";
LABEL_20:
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v23, buf, 0xCu);
        }

uint64_t sub_100519BB4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  __int16 v36 = 0LL;
  *(_DWORD *)__p = *(_DWORD *)a2;
  *(_WORD *)&__p[4] = *(_WORD *)(a2 + 4);
  int v8 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  __int16 v36 = v8;
  if (a4 <= 0xC && ((1 << a4) & 0x1F06) != 0)
  {
    uint64_t v9 = operator new(7uLL);
    *(_DWORD *)uint64_t v9 = *(_DWORD *)a2;
    v9[2] = *(_WORD *)(a2 + 4);
    *((_BYTE *)v9 + 6) = a3;
    switch(a4)
    {
      case 1u:
        uint64_t v10 = (os_log_s *)qword_1008F75D0;
        if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C((uint64_t)v8, __p);
          if (SBYTE3(v43) >= 0) {
            uint8_t v11 = __p;
          }
          else {
            uint8_t v11 = *(_BYTE **)__p;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Registering 'playback status changed' event for device %{public}s",  buf,  0xCu);
          if (SBYTE3(v43) < 0) {
            operator delete(*(void **)__p);
          }
        }

        uint64_t v12 = sub_100403258(a1 + 344, (unint64_t *)&v36);
        uint64_t result = sub_100523494(*v12);
        break;
      case 2u:
        char v16 = (os_log_s *)qword_1008F75D0;
        if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C((uint64_t)v8, __p);
          uint64_t v17 = SBYTE3(v43) >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Registering 'track changed' event for device %{public}s",  buf,  0xCu);
          if (SBYTE3(v43) < 0) {
            operator delete(*(void **)__p);
          }
        }

        uint64_t v18 = sub_100403258(a1 + 344, (unint64_t *)&v36);
        uint64_t result = sub_100523674(*v18);
        break;
      case 8u:
        char v22 = (os_log_s *)qword_1008F75D0;
        if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C((uint64_t)v8, __p);
          int v23 = SBYTE3(v43) >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Registering 'player application settings changed' event for device %{public}s",  buf,  0xCu);
          if (SBYTE3(v43) < 0) {
            operator delete(*(void **)__p);
          }
        }

        uint64_t v24 = sub_100403258(a1 + 344, (unint64_t *)&v36);
        uint64_t result = sub_100523854(*v24);
        break;
      case 9u:
        uint64_t v25 = (os_log_s *)qword_1008F75D0;
        if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C((uint64_t)v8, __p);
          BOOL v26 = SBYTE3(v43) >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Registering 'now playing content changed' event for device %{public}s",  buf,  0xCu);
          if (SBYTE3(v43) < 0) {
            operator delete(*(void **)__p);
          }
        }

        unsigned int v27 = sub_100403258(a1 + 344, (unint64_t *)&v36);
        uint64_t result = sub_100523A44(*v27);
        break;
      case 0xAu:
        int v28 = (os_log_s *)qword_1008F75D0;
        if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C((uint64_t)v8, __p);
          int v29 = SBYTE3(v43) >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v29;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Registering 'available players changed' event for device %{public}s",  buf,  0xCu);
          if (SBYTE3(v43) < 0) {
            operator delete(*(void **)__p);
          }
        }

        __int16 v30 = sub_100403258(a1 + 344, (unint64_t *)&v36);
        uint64_t result = sub_100523C14(*v30);
        break;
      case 0xBu:
        uint64_t v31 = (os_log_s *)qword_1008F75D0;
        if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C((uint64_t)v8, __p);
          uint64_t v32 = SBYTE3(v43) >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v32;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Registering 'addressed player changed' event for device %{public}s",  buf,  0xCu);
          if (SBYTE3(v43) < 0) {
            operator delete(*(void **)__p);
          }
        }

        unsigned int v33 = sub_100403258(a1 + 344, (unint64_t *)&v36);
        uint64_t result = sub_100523DE4(*v33);
        break;
      default:
        uint64_t v19 = (os_log_s *)qword_1008F75D0;
        if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C((uint64_t)v8, __p);
          uint64_t v20 = SBYTE3(v43) >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Registering 'uids changed' event for device %{public}s",  buf,  0xCu);
          if (SBYTE3(v43) < 0) {
            operator delete(*(void **)__p);
          }
        }

        uint64_t v21 = sub_100403258(a1 + 344, (unint64_t *)&v36);
        uint64_t result = sub_100523FD4(*v21);
        break;
    }
  }

  else
  {
    if (a4 - 1 >= 0xD) {
      int v14 = 3306;
    }
    else {
      int v14 = 3301;
    }
    uint64_t v15 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = a4 - 1 >= 0xD ? "invalid" : "unimplemented";
      sub_1003CF00C((uint64_t)v8, buf);
      char v35 = v38 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)__p = 136446722;
      *(void *)&__p[4] = v34;
      __int16 v40 = 1024;
      unsigned int v41 = a4;
      __int16 v42 = 2082;
      size_t v43 = v35;
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Received notification registration request for %{public}s event %d from device %{public}s",  __p,  0x1Cu);
      if (v38 < 0) {
        operator delete(*(void **)buf);
      }
    }

    return sub_1000E93E8(a2, a3, 49, v14);
  }

  return result;
}

uint64_t sub_10051A24C(uint64_t a1, unsigned int a2, int a3, unint64_t a4, _WORD *a5)
{
  v26[0] = 0LL;
  v26[1] = 0LL;
  sub_100242F28((uint64_t)v26, a1 + 280);
  uint64_t v10 = *(void **)(a1 + 352);
  if (!v10) {
    goto LABEL_33;
  }
  uint8_t v11 = (void *)(a1 + 352);
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= a4;
    if (v12 >= a4) {
      int v14 = v10;
    }
    else {
      int v14 = v10 + 1;
    }
    if (v13) {
      uint8_t v11 = v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 != (void *)(a1 + 352) && v11[4] <= a4)
  {
    int v15 = *(_DWORD *)a5;
    __int16 v25 = a5[2];
    int v24 = v15;
    unsigned int v16 = *((unsigned __int8 *)a5 + 6);
    if (a3) {
      operator delete(a5);
    }
    sub_100242F54((uint64_t)v26);
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v35 = 0LL;
    uint64_t v17 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      if (a2 > 4) {
        uint64_t v18 = "unknown";
      }
      else {
        uint64_t v18 = off_10089F7F0[a2];
      }
      sub_1003CF00C(a4, __p);
      uint64_t v19 = "interim";
      if (a3) {
        uint64_t v19 = "final";
      }
      *(_DWORD *)buf = 136446722;
      if (v23 >= 0) {
        uint64_t v20 = __p;
      }
      else {
        uint64_t v20 = (void **)__p[0];
      }
      int v28 = v19;
      __int16 v29 = 2082;
      __int16 v30 = v18;
      __int16 v31 = 2082;
      uint64_t v32 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Sending %{public}s notification for playback state '%{public}s' to device %{public}s",  buf,  0x20u);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }

    LOBYTE(v33) = 1;
    LOBYTE(v34) = a2;
    if (a2 <= 2) {
      sub_1002428F8(8LL);
    }
    buf[0] = 0;
    sub_100242CA4(buf);
    sub_1000EA7F0((uint64_t)&v24, v16, (uint64_t)&v33, a3);
    sub_100242CD0(buf);
    sub_100242CD8(buf);
  }

  else
  {
LABEL_33:
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(a4, buf);
      sub_10068E858();
    }
  }

  return sub_100242FAC((uint64_t)v26);
}

void sub_10051A4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

const char *sub_10051A4DC(unsigned int a1)
{
  if (a1 > 4) {
    return "unknown";
  }
  else {
    return off_10089F7F0[a1];
  }
}

uint64_t sub_10051A500(uint64_t a1, unsigned int a2, int a3, unint64_t a4, _WORD *a5)
{
  return sub_10051A24C(a1 - 264, a2, a3, a4, a5);
}

uint64_t sub_10051A508(uint64_t a1, uint64_t a2, int a3, unint64_t a4, _WORD *a5)
{
  v25[0] = 0LL;
  v25[1] = 0LL;
  sub_100242F28((uint64_t)v25, a1 + 280);
  uint64_t v10 = *(void **)(a1 + 352);
  if (!v10) {
    goto LABEL_28;
  }
  uint8_t v11 = (void *)(a1 + 352);
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= a4;
    if (v12 >= a4) {
      int v14 = v10;
    }
    else {
      int v14 = v10 + 1;
    }
    if (v13) {
      uint8_t v11 = v10;
    }
    uint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 != (void *)(a1 + 352) && v11[4] <= a4)
  {
    int v15 = *(_DWORD *)a5;
    __int16 v24 = a5[2];
    int v23 = v15;
    unsigned int v16 = *((unsigned __int8 *)a5 + 6);
    if (a3) {
      operator delete(a5);
    }
    sub_100242F54((uint64_t)v25);
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    uint64_t v17 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a4, __p);
      uint64_t v18 = "interim";
      if (a3) {
        uint64_t v18 = "final";
      }
      *(_DWORD *)buf = 136446722;
      if (v22 >= 0) {
        uint64_t v19 = __p;
      }
      else {
        uint64_t v19 = (void **)__p[0];
      }
      unsigned int v27 = v18;
      __int16 v28 = 2048;
      uint64_t v29 = a2;
      __int16 v30 = 2082;
      __int16 v31 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Sending %{public}s notification for track ID [%llu] to device %{public}s",  buf,  0x20u);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    LOBYTE(v32) = 2;
    uint64_t v33 = a2;
    buf[0] = 0;
    sub_100242CA4(buf);
    sub_1000EA7F0((uint64_t)&v23, v16, (uint64_t)&v32, a3);
    sub_100242CD0(buf);
    sub_100242CD8(buf);
  }

  else
  {
LABEL_28:
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(a4, buf);
      sub_10068E858();
    }
  }

  return sub_100242FAC((uint64_t)v25);
}

void sub_10051A728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_10051A760(uint64_t a1, uint64_t a2, int a3, unint64_t a4, _WORD *a5)
{
  return sub_10051A508(a1 - 264, a2, a3, a4, a5);
}

uint64_t sub_10051A768(uint64_t a1, int a2, int a3, int a4, unint64_t a5, _WORD *a6)
{
  v30[0] = 0LL;
  v30[1] = 0LL;
  sub_100242F28((uint64_t)v30, a1 + 280);
  unint64_t v12 = *(void **)(a1 + 352);
  if (!v12) {
    goto LABEL_28;
  }
  BOOL v13 = (void *)(a1 + 352);
  do
  {
    unint64_t v14 = v12[4];
    BOOL v15 = v14 >= a5;
    if (v14 >= a5) {
      unsigned int v16 = v12;
    }
    else {
      unsigned int v16 = v12 + 1;
    }
    if (v15) {
      BOOL v13 = v12;
    }
    unint64_t v12 = (void *)*v16;
  }

  while (*v16);
  if (v13 != (void *)(a1 + 352) && v13[4] <= a5)
  {
    int v17 = *(_DWORD *)a6;
    __int16 v29 = a6[2];
    int v28 = v17;
    unsigned int v18 = *((unsigned __int8 *)a6 + 6);
    if (a4) {
      operator delete(a6);
    }
    sub_100242F54((uint64_t)v30);
    int v27 = 196610;
    BYTE1(v27) = a2;
    HIBYTE(v27) = a3;
    uint64_t v39 = 0LL;
    __int16 v40 = 0LL;
    uint64_t v41 = 0LL;
    uint64_t v19 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = off_10089F318[a2 - 1];
      uint64_t v21 = off_10089F330[a3 - 1];
      sub_1003CF00C(a5, __p);
      char v22 = "interim";
      if (a4) {
        char v22 = "final";
      }
      *(_DWORD *)buf = 136446978;
      if (v26 >= 0) {
        int v23 = __p;
      }
      else {
        int v23 = (void **)__p[0];
      }
      uint64_t v32 = v22;
      __int16 v33 = 2082;
      uint64_t v34 = v20;
      __int16 v35 = 2082;
      __int16 v36 = v21;
      __int16 v37 = 2082;
      char v38 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Sending %{public}s notification for player settings '%{public}s'/'%{public}s' to device %{public}s",  buf,  0x2Au);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }

    LOBYTE(v39) = 8;
    __int16 v40 = &v27;
    LOBYTE(v41) = 2;
    buf[0] = 0;
    sub_100242CA4(buf);
    sub_1000EA7F0((uint64_t)&v28, v18, (uint64_t)&v39, a4);
    sub_100242CD0(buf);
    sub_100242CD8(buf);
  }

  else
  {
LABEL_28:
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(a5, buf);
      sub_10068E858();
    }
  }

  return sub_100242FAC((uint64_t)v30);
}

void sub_10051A9D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10051AA10(uint64_t a1, int a2, int a3, int a4, unint64_t a5, _WORD *a6)
{
  return sub_10051A768(a1 - 264, a2, a3, a4, a5, a6);
}

uint64_t sub_10051AA18(uint64_t a1, int a2, unint64_t a3, _WORD *a4)
{
  v22[0] = 0LL;
  v22[1] = 0LL;
  sub_100242F28((uint64_t)v22, a1 + 280);
  int v8 = *(void **)(a1 + 352);
  if (!v8) {
    goto LABEL_28;
  }
  uint64_t v9 = (void *)(a1 + 352);
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= a3;
    if (v10 >= a3) {
      unint64_t v12 = v8;
    }
    else {
      unint64_t v12 = v8 + 1;
    }
    if (v11) {
      uint64_t v9 = v8;
    }
    int v8 = (void *)*v12;
  }

  while (*v12);
  if (v9 != (void *)(a1 + 352) && v9[4] <= a3)
  {
    int v13 = *(_DWORD *)a4;
    __int16 v20 = a4[2];
    int v19 = v13;
    unsigned int v14 = *((unsigned __int8 *)a4 + 6);
    if (a2) {
      operator delete(a4);
    }
    sub_100242F54((uint64_t)v22);
    memset(v21, 0, sizeof(v21));
    BOOL v15 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a3, __p);
      unsigned int v16 = "interim";
      if (a2) {
        unsigned int v16 = "final";
      }
      if (v24 >= 0) {
        int v17 = __p;
      }
      else {
        int v17 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446466;
      char v26 = v16;
      __int16 v27 = 2082;
      int v28 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Sending %{public}s notification for now playing content to device %{public}s",  buf,  0x16u);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    LOBYTE(v21[0]) = 9;
    LOBYTE(__p[0]) = 0;
    sub_100242CA4(__p);
    sub_1000EA7F0((uint64_t)&v19, v14, (uint64_t)v21, a2);
    sub_100242CD0(__p);
    sub_100242CD8(__p);
  }

  else
  {
LABEL_28:
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(a3, v21);
      sub_10068E858();
    }
  }

  return sub_100242FAC((uint64_t)v22);
}

void sub_10051AC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_10051AC5C(uint64_t a1, int a2, unint64_t a3, _WORD *a4)
{
  return sub_10051AA18(a1 - 264, a2, a3, a4);
}

uint64_t sub_10051AC64(uint64_t a1, int a2, unint64_t a3, _WORD *a4)
{
  v22[0] = 0LL;
  v22[1] = 0LL;
  sub_100242F28((uint64_t)v22, a1 + 280);
  int v8 = *(void **)(a1 + 352);
  if (!v8) {
    goto LABEL_28;
  }
  uint64_t v9 = (void *)(a1 + 352);
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= a3;
    if (v10 >= a3) {
      unint64_t v12 = v8;
    }
    else {
      unint64_t v12 = v8 + 1;
    }
    if (v11) {
      uint64_t v9 = v8;
    }
    int v8 = (void *)*v12;
  }

  while (*v12);
  if (v9 != (void *)(a1 + 352) && v9[4] <= a3)
  {
    int v13 = *(_DWORD *)a4;
    __int16 v20 = a4[2];
    int v19 = v13;
    unsigned int v14 = *((unsigned __int8 *)a4 + 6);
    if (a2) {
      operator delete(a4);
    }
    sub_100242F54((uint64_t)v22);
    memset(v21, 0, sizeof(v21));
    BOOL v15 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a3, __p);
      unsigned int v16 = "interim";
      if (a2) {
        unsigned int v16 = "final";
      }
      if (v24 >= 0) {
        int v17 = __p;
      }
      else {
        int v17 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446466;
      char v26 = v16;
      __int16 v27 = 2082;
      int v28 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Sending %{public}s notification for available players to device %{public}s",  buf,  0x16u);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    LOBYTE(v21[0]) = 10;
    LOBYTE(__p[0]) = 0;
    sub_100242CA4(__p);
    sub_1000EA7F0((uint64_t)&v19, v14, (uint64_t)v21, a2);
    sub_100242CD0(__p);
    sub_100242CD8(__p);
  }

  else
  {
LABEL_28:
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(a3, v21);
      sub_10068E858();
    }
  }

  return sub_100242FAC((uint64_t)v22);
}

void sub_10051AE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_10051AEA8(uint64_t a1, int a2, unint64_t a3, _WORD *a4)
{
  return sub_10051AC64(a1 - 264, a2, a3, a4);
}

uint64_t sub_10051AEB0(uint64_t a1, int a2, __int16 a3, int a4, unint64_t a5, _WORD *a6)
{
  v27[0] = 0LL;
  v27[1] = 0LL;
  sub_100242F28((uint64_t)v27, a1 + 280);
  unint64_t v12 = *(void **)(a1 + 352);
  if (!v12) {
    goto LABEL_28;
  }
  int v13 = (void *)(a1 + 352);
  do
  {
    unint64_t v14 = v12[4];
    BOOL v15 = v14 >= a5;
    if (v14 >= a5) {
      unsigned int v16 = v12;
    }
    else {
      unsigned int v16 = v12 + 1;
    }
    if (v15) {
      int v13 = v12;
    }
    unint64_t v12 = (void *)*v16;
  }

  while (*v16);
  if (v13 != (void *)(a1 + 352) && v13[4] <= a5)
  {
    int v17 = *(_DWORD *)a6;
    __int16 v26 = a6[2];
    int v25 = v17;
    unsigned int v18 = *((unsigned __int8 *)a6 + 6);
    if (a4) {
      operator delete(a6);
    }
    sub_100242F54((uint64_t)v27);
    uint64_t v34 = 0LL;
    uint64_t v35 = 0LL;
    uint64_t v36 = 0LL;
    int v19 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a5, __p);
      __int16 v20 = "interim";
      if (a4) {
        __int16 v20 = "final";
      }
      *(_DWORD *)buf = 136446722;
      if (v24 >= 0) {
        uint64_t v21 = __p;
      }
      else {
        uint64_t v21 = (void **)__p[0];
      }
      __int16 v29 = v20;
      __int16 v30 = 1024;
      int v31 = a2;
      __int16 v32 = 2082;
      __int16 v33 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Sending %{public}s notification for player addressed %u to device %{public}s",  buf,  0x1Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    LOBYTE(v34) = 11;
    LOWORD(v35) = a2;
    WORD1(v35) = a3;
    buf[0] = 0;
    sub_100242CA4(buf);
    sub_1000EA7F0((uint64_t)&v25, v18, (uint64_t)&v34, a4);
    sub_100242CD0(buf);
    sub_100242CD8(buf);
  }

  else
  {
LABEL_28:
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(a5, buf);
      sub_10068E858();
    }
  }

  return sub_100242FAC((uint64_t)v27);
}

void sub_10051B0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_10051B118(uint64_t a1, int a2, __int16 a3, int a4, unint64_t a5, _WORD *a6)
{
  return sub_10051AEB0(a1 - 264, a2, a3, a4, a5, a6);
}

uint64_t sub_10051B120(uint64_t a1, int a2, int a3, unint64_t a4, _WORD *a5)
{
  v25[0] = 0LL;
  v25[1] = 0LL;
  sub_100242F28((uint64_t)v25, a1 + 280);
  unint64_t v10 = *(void **)(a1 + 352);
  if (!v10) {
    goto LABEL_28;
  }
  BOOL v11 = (void *)(a1 + 352);
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= a4;
    if (v12 >= a4) {
      unint64_t v14 = v10;
    }
    else {
      unint64_t v14 = v10 + 1;
    }
    if (v13) {
      BOOL v11 = v10;
    }
    unint64_t v10 = (void *)*v14;
  }

  while (*v14);
  if (v11 != (void *)(a1 + 352) && v11[4] <= a4)
  {
    int v15 = *(_DWORD *)a5;
    __int16 v24 = a5[2];
    int v23 = v15;
    unsigned int v16 = *((unsigned __int8 *)a5 + 6);
    if (a3) {
      operator delete(a5);
    }
    sub_100242F54((uint64_t)v25);
    uint64_t v32 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    int v17 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a4, __p);
      unsigned int v18 = "interim";
      if (a3) {
        unsigned int v18 = "final";
      }
      *(_DWORD *)buf = 136446722;
      if (v22 >= 0) {
        int v19 = __p;
      }
      else {
        int v19 = (void **)__p[0];
      }
      __int16 v27 = v18;
      __int16 v28 = 1024;
      int v29 = a2;
      __int16 v30 = 2082;
      int v31 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Sending %{public}s notification for uidCounter %u to device %{public}s",  buf,  0x1Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    LOBYTE(v32) = 12;
    LOWORD(v33) = a2;
    buf[0] = 0;
    sub_100242CA4(buf);
    sub_1000EA7F0((uint64_t)&v23, v16, (uint64_t)&v32, a3);
    sub_100242CD0(buf);
    sub_100242CD8(buf);
  }

  else
  {
LABEL_28:
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(a4, buf);
      sub_10068E858();
    }
  }

  return sub_100242FAC((uint64_t)v25);
}

void sub_10051B340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_10051B378(uint64_t a1, int a2, int a3, unint64_t a4, _WORD *a5)
{
  return sub_10051B120(a1 - 264, a2, a3, a4, a5);
}

uint64_t sub_10051B380(uint64_t a1, uint64_t a2, char a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  uint64_t v6 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  int v15 = v6;
  unint64_t v7 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)v6, __p);
    if (v14 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446210;
    int v17 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Received 'get play status' request from device %{public}s",  buf,  0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v9 = *(void *)(*sub_100403258(a1 + 344, (unint64_t *)&v15) + 8LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10051B518;
  v11[3] = &unk_10089F378;
  v11[4] = v15;
  char v12 = a3;
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 32LL))(v9, v11);
}

_BYTE *sub_10051B518(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  v15[1] = a4;
  v15[0] = a3;
  void v15[2] = a5;
  uint64_t v9 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_INFO))
  {
    unint64_t v10 = a5 > 4 ? "unknown" : off_10089F7F0[a5];
    sub_1003CF00C(*(void *)(a1 + 32), __p);
    BOOL v11 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446978;
    int v17 = v10;
    __int16 v18 = 1024;
    int v19 = a4;
    __int16 v20 = 1024;
    int v21 = a3;
    __int16 v22 = 2082;
    int v23 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Sending current play status (%{public}s - %u of %ums) to device %{public}s",  buf,  0x22u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  buf[0] = 0;
  sub_100242CA4(buf);
  if (sub_1000EA748(*(void *)(a1 + 32) + 128LL, *(unsigned __int8 *)(a1 + 40), (uint64_t)v15)
    && os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
  {
    sub_10068E8A4();
  }

  return sub_100242CD8(buf);
}

void sub_10051B6A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10051B6C4(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  char v5 = a3;
  v22[0] = 0LL;
  v22[1] = 0LL;
  int v8 = sub_1000EA848(a2, a3, a4, v22);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  uint64_t v9 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  int v21 = v9;
  unint64_t v10 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_INFO))
  {
    sub_1003CF00C((uint64_t)v9, __p);
    BOOL v11 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)__int16 v24 = a4;
    *(_WORD *)&uint8_t v24[4] = 2082;
    *(void *)&v24[6] = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Received 'continue' command for PDU 0x%x from device %{public}s",  buf,  0x12u);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }

  if (v8 != 3304)
  {
    if (v8)
    {
      int v17 = (os_log_s *)qword_1008F75D0;
      if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C((uint64_t)v9, __p);
        __int16 v18 = v20 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446466;
        *(void *)__int16 v24 = v18;
        *(_WORD *)&v24[8] = 1024;
        *(_DWORD *)&v24[10] = v8;
        _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Failed to continue response for device %{public}s - result was %{bluetooth:OI_STATUS}u",  buf,  0x12u);
        if (v20 < 0)
        {
          unsigned int v16 = (uint64_t *)__p[0];
LABEL_15:
          operator delete(v16);
        }
      }
    }

    else
    {
      __p[0] = &v21;
      char v12 = sub_1002554E8((uint64_t **)(a1 + 480), (unint64_t *)&v21, (uint64_t)&unk_1006C2518, (uint64_t **)__p);
      LOBYTE(__p[0]) = v5;
      BYTE1(__p[0]) = a4;
      BOOL v13 = sub_100522D80((uint64_t)(v12 + 5), (unsigned __int8 *)__p);
      __p[0] = &v21;
      char v14 = sub_1002554E8((uint64_t **)(a1 + 480), (unint64_t *)&v21, (uint64_t)&unk_1006C2518, (uint64_t **)__p);
      if (v14 + 6 != v13)
      {
        if (a4 == 32) {
          sub_100518158((uint64_t)v14, (char *)v13[5]);
        }
        __p[0] = &v21;
        int v15 = sub_1002554E8((uint64_t **)(a1 + 480), (unint64_t *)&v21, (uint64_t)&unk_1006C2518, (uint64_t **)__p);
        sub_1001FDBCC((uint64_t **)v15 + 5, v13);
        unsigned int v16 = v13;
        goto LABEL_15;
      }
    }
  }

uint64_t sub_10051B97C(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  int v8 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  int v19 = v8;
  uint64_t v9 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_INFO))
  {
    sub_1003CF00C((uint64_t)v8, __p);
    unint64_t v10 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    int v21 = a4;
    __int16 v22 = 2082;
    int v23 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Received 'abort' command for PDU 0x%x from device %{public}s",  buf,  0x12u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }

  BOOL v11 = (uint64_t **)(a1 + 480);
  __p[0] = &v19;
  char v12 = sub_1002554E8(v11, (unint64_t *)&v19, (uint64_t)&unk_1006C2518, (uint64_t **)__p);
  LOBYTE(__p[0]) = a3;
  BYTE1(__p[0]) = a4;
  BOOL v13 = sub_100522D80((uint64_t)(v12 + 5), (unsigned __int8 *)__p);
  __p[0] = &v19;
  char v14 = sub_1002554E8(v11, (unint64_t *)&v19, (uint64_t)&unk_1006C2518, (uint64_t **)__p);
  if (v14 + 6 != v13)
  {
    if (a4 == 32) {
      sub_100518158((uint64_t)v14, (char *)v13[5]);
    }
    __p[0] = &v19;
    int v15 = sub_1002554E8(v11, (unint64_t *)&v19, (uint64_t)&unk_1006C2518, (uint64_t **)__p);
    sub_1001FDBCC((uint64_t **)v15 + 5, v13);
    operator delete(v13);
  }

  return sub_1000E93E8(a2, a3, 65, 0);
}

uint64_t sub_10051BB98(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  int v8 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  int v17 = v8;
  uint64_t v9 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)v8, __p);
    if (v16 >= 0) {
      unint64_t v10 = __p;
    }
    else {
      unint64_t v10 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67109378;
    int v19 = a4;
    __int16 v20 = 2082;
    int v21 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Received 'SetAddressedPlayer' request (id - %u) from device %{public}s",  buf,  0x12u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v11 = *(void *)(*sub_100403258(a1 + 344, (unint64_t *)&v17) + 8LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_10051BD44;
  v13[3] = &unk_10089F398;
  v13[4] = a1;
  v13[5] = v17;
  char v14 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v11 + 104LL))(v11, a4, v13);
}

_BYTE *sub_10051BD44(uint64_t a1, int a2)
{
  uint64_t v17 = 0x1000060581900LL;
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  unint64_t v4 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(*(void *)(a1 + 40), __p);
    char v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    int v14 = a2;
    __int16 v15 = 2082;
    char v16 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Sending 'SetAddressedPlayer' response (result - %02x) to device %{public}s",  buf,  0x12u);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  HIBYTE(v17) = a2;
  if (a2 == 4) {
    char v6 = 9;
  }
  else {
    char v6 = 10;
  }
  LOBYTE(v10) = v6;
  *(_WORD *)((char *)&v10 + 1) = 9;
  BYTE3(v10) = 0;
  uint64_t v11 = &v17;
  LOWORD(v12) = 8;
  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  if (sub_1000ECD48(*(void *)(a1 + 40) + 128LL, *(unsigned __int8 *)(a1 + 48), (unsigned __int8 *)&v10)
    && os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
  {
    sub_10068E904();
  }

  return sub_100242CD8(__p);
}

void sub_10051BEC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_10051BEE4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  int v8 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  uint64_t v17 = v8;
  char v9 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)v8, __p);
    if (v16 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67109378;
    int v19 = a4;
    __int16 v20 = 2082;
    int v21 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Received 'SetBrowsedPlayer' request (id - %u) from device %{public}s",  buf,  0x12u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v11 = *(void *)(*sub_100403258(a1 + 344, (unint64_t *)&v17) + 8LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_10051C090;
  v13[3] = &unk_10089F3B8;
  v13[4] = v17;
  char v14 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v11 + 112LL))(v11, a4, v13);
}

_BYTE *sub_10051C090(uint64_t a1, int a2, __int16 a3, int a4, uint64_t a5)
{
  if (a2 == 4)
  {
    uint64_t v10 = *(void *)(a5 + 8);
    unsigned __int16 v11 = 13;
    while (v10 != a5)
    {
      else {
        LOWORD(v12) = *(unsigned __int8 *)(v10 + 39);
      }
      v11 += v12 + 2;
      uint64_t v10 = *(void *)(v10 + 8);
    }
  }

  else
  {
    unsigned __int16 v11 = 4;
  }

  BOOL v13 = (os_log_s *)qword_1008F75D0;
  BOOL v14 = os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    sub_1003CF00C(*(void *)(a1 + 32), v37);
    unsigned __int16 v15 = v11;
    if (v38 >= 0) {
      char v16 = v37;
    }
    else {
      char v16 = (void **)v37[0];
    }
    *(_DWORD *)buf = 67109890;
    int v40 = a2;
    __int16 v41 = 1024;
    int v42 = a4;
    __int16 v43 = 1024;
    int v44 = v11;
    __int16 v45 = 2082;
    size_t v46 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Sending 'SetBrowsedPlayer' response (result - %02x, nbItems - %u, length - %u) to device %{public}s",  buf,  0x1Eu);
    if (v38 < 0) {
      operator delete(v37[0]);
    }
  }

  else
  {
    unsigned __int16 v15 = v11;
  }

  __chkstk_darwin(v14, v11);
  char v18 = (char *)&v37[-1] - v17;
  bzero((char *)&v37[-1] - v17, v19);
  *char v18 = 112;
  v18[2] = v15 - 3;
  v18[1] = (unsigned __int16)(v15 - 3) >> 8;
  v18[3] = a2;
  if (a2 == 4)
  {
    v18[5] = a3;
    v18[4] = HIBYTE(a3);
    v18[9] = a4;
    v18[8] = BYTE1(a4);
    v18[7] = BYTE2(a4);
    v18[6] = HIBYTE(a4);
    *((_WORD *)v18 + 5) = 27136;
    uint64_t v20 = *(void *)(a5 + 8);
    v18[12] = *(void *)(a5 + 16);
    int v21 = 13;
    while (v20 != a5)
    {
      int v22 = *(char *)(v20 + 39);
      if (v22 < 0)
      {
        __int16 v26 = &v18[(unsigned __int16)v21];
        v26[1] = *(void *)(v20 + 24);
        *__int16 v26 = BYTE1(*(void *)(v20 + 24));
        int v25 = v21 + 2;
        memcpy(&v18[(unsigned __int16)(v21 + 2)], *(const void **)(v20 + 16), *(void *)(v20 + 24));
        uint64_t v23 = *(void *)(v20 + 24);
      }

      else
      {
        LODWORD(v23) = *(unsigned __int8 *)(v20 + 39);
        __int16 v24 = &v18[(unsigned __int16)v21];
        v24[1] = v22;
        char *v24 = 0;
        int v25 = v21 + 2;
        memcpy(&v18[(unsigned __int16)(v21 + 2)], (const void *)(v20 + 16), v22);
      }

      int v21 = v25 + v23;
      uint64_t v20 = *(void *)(v20 + 8);
    }
  }

  else
  {
    LOWORD(v21) = 4;
  }

  if ((unsigned __int16)v21 != v11)
  {
    __int16 v27 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_FAULT)) {
      sub_10068E9C4(v27, v28, v29, v30, v31, v32, v33, v34);
    }
  }

  buf[0] = 0;
  sub_100242CA4(buf);
  if (sub_1000ECD8C(*(void *)(a1 + 32) + 128LL, *(unsigned __int8 *)(a1 + 40), v18, v11)
    && os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
  {
    sub_10068E964();
  }

  return sub_100242CD8(buf);
}

void sub_10051C37C(_Unwind_Exception *a1)
{
}

uint64_t sub_10051C398(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5, uint64_t *a6)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v25) = *(_WORD *)(a2 + 4);
  uint64_t v12 = sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
  uint64_t v23 = v12;
  uint64_t v13 = *a6;
  BOOL v14 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    if (a5) {
      unsigned __int16 v15 = "down";
    }
    else {
      unsigned __int16 v15 = "up";
    }
    sub_1003CF00C((uint64_t)v12, __p);
    if (v22 >= 0) {
      char v16 = __p;
    }
    else {
      char v16 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315650;
    int v25 = v15;
    __int16 v26 = 1024;
    int v27 = a4;
    __int16 v28 = 2082;
    uint64_t v29 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Received 'ChangePath(%s)' request (uidCounter - %u) from device %{public}s",  buf,  0x1Cu);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v17 = *(void *)(*sub_100403258(a1 + 344, (unint64_t *)&v23) + 8LL);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_10051C594;
  v19[3] = &unk_10089F3D8;
  v19[4] = v23;
  char v20 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, BOOL, uint64_t, void *))(*(void *)v17 + 120LL))( v17,  a4,  a5 == 0,  v13,  v19);
}

_BYTE *sub_10051C594(uint64_t a1, int a2, unsigned int a3)
{
  if (a2 == 4) {
    size_t v6 = 8LL;
  }
  else {
    size_t v6 = 4LL;
  }
  unint64_t v7 = (os_log_s *)qword_1008F75D0;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    sub_1003CF00C(*(void *)(a1 + 32), v24);
    uint64_t v10 = v25 >= 0 ? v24 : (void **)v24[0];
    *(_DWORD *)buf = 67109634;
    int v27 = a2;
    __int16 v28 = 1024;
    unsigned int v29 = a3;
    __int16 v30 = 2082;
    uint64_t v31 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Sending 'ChangePath' response (result - %02x, nbItems - %u) to device %{public}s",  buf,  0x18u);
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }

  __chkstk_darwin(v8, v9);
  uint64_t v12 = (char *)&v24[-1] - v11;
  bzero((char *)&v24[-1] - v11, v6);
  *(_WORD *)uint64_t v12 = 114;
  void v12[2] = v6 - 3;
  _OWORD v12[3] = a2;
  if (a2 == 4)
  {
    *((_DWORD *)v12 + 1) = bswap32(a3);
    int v13 = 8;
  }

  else
  {
    int v13 = 4;
  }

  if (v13 != (_DWORD)v6)
  {
    BOOL v14 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_FAULT)) {
      sub_10068E9C4(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }

  buf[0] = 0;
  sub_100242CA4(buf);
  if (sub_1000ECD8C(*(void *)(a1 + 32) + 128LL, *(unsigned __int8 *)(a1 + 40), v12, v6)
    && os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
  {
    sub_10068EA34();
  }

  return sub_100242CD8(buf);
}

void sub_10051C784(_Unwind_Exception *a1)
{
}

void *sub_10051C7A0( uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v28) = *(_WORD *)(a2 + 4);
  BOOL v14 = sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
  __int16 v26 = v14;
  uint64_t v15 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = a4 > 3 ? "Unknown" : off_10089F858[(char)a4];
    sub_1003CF00C((uint64_t)v14, __p);
    uint64_t v17 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315906;
    __int16 v28 = v16;
    __int16 v29 = 1024;
    int v30 = a5;
    __int16 v31 = 1024;
    int v32 = a6;
    __int16 v33 = 2082;
    uint64_t v34 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Received 'GetFolderItems(%s)' request (startItem - %u, endItem - %u) from device %{public}s",  buf,  0x22u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }

  if (a4 > 3)
  {
    *(_DWORD *)buf = 167837809;
    return (void *)sub_1000ECD8C(a2, a3, buf, 4uLL);
  }

  else
  {
    uint64_t v18 = *(void *)(*sub_100403258(a1 + 344, (unint64_t *)&v26) + 8LL);
    sub_10051CA14(a8, a7, buf);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    void v22[2] = sub_10051CC0C;
    v22[3] = &unk_10089F3F8;
    v22[4] = a1;
    v22[5] = v26;
    char v23 = a3;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint8_t *, void *))(*(void *)v18 + 128LL))( v18,  a4,  a5,  a6,  buf,  v22);
    return sub_10023DF50(buf);
  }

void sub_10051C9F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_10051CA14(uint64_t a1@<X1>, unsigned int a2@<W2>, void *a3@<X8>)
{
  *a3 = a3;
  a3[1] = a3;
  a3[2] = 0LL;
  if (a2)
  {
    if (a1)
    {
      uint64_t v4 = 0LL;
      char v5 = (unsigned __int8 *)(a1 + 3);
      size_t v6 = a3;
      uint64_t v7 = a2;
      do
      {
        int v8 = *v5;
        int v9 = *(v5 - 1);
        int v10 = *(v5 - 2);
        int v11 = *(v5 - 3);
        uint64_t v12 = operator new(0x18uLL);
        v12[4] = v8 | (v9 << 8) | (v10 << 16) | (v11 << 24);
        v5 += 4;
        *(void *)uint64_t v12 = v6;
        *((void *)v12 + 1) = a3;
        *((void *)v6 + 1) = v12;
        *a3 = v12;
        a3[2] = ++v4;
        size_t v6 = v12;
      }

      while (v7 != v4);
    }
  }

  else
  {
    int v13 = operator new(0x18uLL);
    v13[4] = 1;
    *(void *)int v13 = a3;
    *((void *)v13 + 1) = a3;
    *a3 = v13;
    a3[1] = v13;
    a3[2] = 1LL;
    BOOL v14 = operator new(0x18uLL);
    v14[4] = 2;
    *(void *)BOOL v14 = v13;
    *((void *)v14 + 1) = a3;
    *((void *)v13 + 1) = v14;
    *a3 = v14;
    a3[2] = 2LL;
    uint64_t v15 = operator new(0x18uLL);
    void v15[4] = 3;
    *(void *)uint64_t v15 = v14;
    *((void *)v15 + 1) = a3;
    *((void *)v14 + 1) = v15;
    *a3 = v15;
    a3[2] = 3LL;
    uint64_t v16 = operator new(0x18uLL);
    v16[4] = 4;
    *(void *)uint64_t v16 = v15;
    *((void *)v16 + 1) = a3;
    *((void *)v15 + 1) = v16;
    *a3 = v16;
    a3[2] = 4LL;
    uint64_t v17 = operator new(0x18uLL);
    v17[4] = 5;
    *(void *)uint64_t v17 = v16;
    *((void *)v17 + 1) = a3;
    *((void *)v16 + 1) = v17;
    *a3 = v17;
    a3[2] = 5LL;
    uint64_t v18 = operator new(0x18uLL);
    v18[4] = 6;
    *(void *)uint64_t v18 = v17;
    *((void *)v18 + 1) = a3;
    *((void *)v17 + 1) = v18;
    *a3 = v18;
    a3[2] = 6LL;
    uint64_t v19 = operator new(0x18uLL);
    v19[4] = 7;
    *(void *)uint64_t v19 = v18;
    *((void *)v19 + 1) = a3;
    *((void *)v18 + 1) = v19;
    *a3 = v19;
    a3[2] = 7LL;
    uint64_t v20 = operator new(0x18uLL);
    v20[4] = 8;
    *(void *)uint64_t v20 = v19;
    *((void *)v20 + 1) = a3;
    *((void *)v19 + 1) = v20;
    *a3 = v20;
    a3[2] = 8LL;
  }

void sub_10051CBD8(_Unwind_Exception *a1)
{
}

void sub_10051CC0C(uint64_t a1, int a2, __int16 a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = (uint64_t *)(a1 + 40);
  size_t v6 = *(void **)(v4 + 512);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = a4;
  int v11 = (void *)(v4 + 512);
  unint64_t v12 = *v5;
  int v13 = (void *)(v4 + 512);
  do
  {
    unint64_t v14 = v6[4];
    BOOL v15 = v14 >= v12;
    if (v14 >= v12) {
      uint64_t v16 = v6;
    }
    else {
      uint64_t v16 = v6 + 1;
    }
    if (v15) {
      int v13 = v6;
    }
    size_t v6 = (void *)*v16;
  }

  while (*v16);
  if (v13 != v11 && v12 >= v13[4])
  {
    if (a2 == 4)
    {
      uint64_t v18 = *(void *)(a4 + 8);
      if (v18 == a4)
      {
        unsigned __int16 v19 = 0;
        LOWORD(v20) = 8;
        uint64_t v18 = a4;
      }

      else
      {
        unsigned __int16 v19 = 0;
        unsigned int v20 = *((unsigned __int16 *)v13 + 20);
        unsigned __int16 v21 = 8;
        while (1)
        {
          __int16 v22 = (*(uint64_t (**)(void))(**(void **)(v18 + 16) + 16LL))(*(void *)(v18 + 16));
          unsigned __int16 v23 = v22 + v21;
          if (v18 != *(void *)(v7 + 8) && v20 < v23) {
            break;
          }
          ++v19;
          uint64_t v18 = *(void *)(v18 + 8);
          v21 += v22;
          if (v18 == v7)
          {
            uint64_t v18 = v7;
            LOWORD(v20) = v23;
            goto LABEL_27;
          }
        }

        if (v20 >= v21)
        {
          LOWORD(v20) = v21;
        }

        else if (v19 == 1)
        {
          unsigned __int16 v19 = 1;
        }

        else
        {
          v47 = (os_log_s *)qword_1008F75D0;
          if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_FAULT)) {
            sub_10068EBF0(v47, v48, v49, v50, v51, v52, v53, v54);
          }
        }
      }
    }

    else
    {
      uint64_t v18 = 0LL;
      unsigned __int16 v19 = 0;
      LOWORD(v20) = 4;
    }

void sub_10051D098(_Unwind_Exception *a1)
{
}

void *sub_10051D0B4( uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v29) = *(_WORD *)(a2 + 4);
  unint64_t v14 = sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
  int v27 = v14;
  BOOL v15 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = a4 > 3 ? "Unknown" : off_10089F858[(char)a4];
    sub_1003CF00C((uint64_t)v14, __p);
    uint64_t v17 = v26 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    __int16 v29 = v16;
    __int16 v30 = 1024;
    int v31 = a6;
    __int16 v32 = 2082;
    __int16 v33 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Received 'GetItemAttributes(%s)' request (uidCounter - %u) from device %{public}s",  buf,  0x1Cu);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }

  if ((a4 - 1) > 2)
  {
    *(_DWORD *)buf = 167837811;
    return (void *)sub_1000ECD8C(a2, a3, buf, 4uLL);
  }

  else
  {
    uint64_t v18 = *a5;
    uint64_t v19 = *(void *)(*sub_100403258(a1 + 344, (unint64_t *)&v27) + 8LL);
    sub_10051CA14(a8, a7, buf);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_10051D328;
    v23[3] = &unk_10089F418;
    v23[4] = a1;
    v23[5] = v27;
    char v24 = a3;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint8_t *, void *))(*(void *)v19 + 136LL))( v19,  a4,  v18,  a6,  buf,  v23);
    return sub_10023DF50(buf);
  }

void sub_10051D30C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_10051D328(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (uint64_t *)(a1 + 40);
  char v5 = *(void **)(v3 + 512);
  if (!v5) {
    goto LABEL_12;
  }
  unint64_t v9 = *v4;
  int v10 = (void *)(v3 + 512);
  do
  {
    unint64_t v11 = v5[4];
    BOOL v12 = v11 >= v9;
    if (v11 >= v9) {
      int v13 = v5;
    }
    else {
      int v13 = v5 + 1;
    }
    if (v12) {
      int v10 = v5;
    }
    char v5 = (void *)*v13;
  }

  while (*v13);
  if (v10 == (void *)(v3 + 512) || v9 < v10[4])
  {
LABEL_12:
    unint64_t v14 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
      sub_10068EC60(v4, v14);
    }
    return;
  }

  if (a2 != 4)
  {
    uint64_t v19 = 0LL;
    unsigned __int8 v16 = 0;
    uint64_t v17 = 4LL;
    goto LABEL_33;
  }

  uint64_t v15 = *(void *)(a3 + 8);
  if (v15 == a3)
  {
    unsigned __int8 v16 = 0;
    uint64_t v17 = 5LL;
    uint64_t v19 = a3;
    goto LABEL_33;
  }

  unsigned __int8 v16 = 0;
  uint64_t v17 = *((unsigned __int16 *)v10 + 20);
  uint64_t v18 = 5LL;
  uint64_t v19 = *(void *)(a3 + 8);
  while (1)
  {
    uint64_t v20 = *(void *)(v19 + 16);
    if (*(_DWORD *)(v20 + 4) == 8 && v9 != *(void *)(v3 + 528)) {
      goto LABEL_25;
    }
    else {
      LODWORD(v20) = *(unsigned __int8 *)(v20 + 31);
    }
    uint64_t v21 = (v18 + v20 + 8);
    ++v16;
    uint64_t v18 = v21;
LABEL_25:
    uint64_t v19 = *(void *)(v19 + 8);
    if (v19 == a3)
    {
      uint64_t v19 = a3;
LABEL_32:
      uint64_t v17 = v18;
      goto LABEL_33;
    }
  }

  if (v16 == 1)
  {
    unsigned __int8 v16 = 1;
  }

  else
  {
    uint64_t v49 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_FAULT)) {
      sub_10068ED4C(v49, v50, v51, v52, v53, v54, v55, v56);
    }
  }

void sub_10051D7F8(_Unwind_Exception *a1)
{
}

void sub_10051D814(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, void *a6)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  LODWORD(__dst[0]) = *(_DWORD *)a2;
  WORD2(__dst[0]) = *(_WORD *)(a2 + 4);
  BOOL v12 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__dst, 1);
  uint64_t v24 = 0LL;
  BOOL v25 = v12;
  __dst[0] = 0LL;
  __dst[1] = 0LL;
  sub_100330694(__dst, a6, a5);
  int v13 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = SHIBYTE(v24);
    uint64_t v15 = (void **)__dst[0];
    sub_1003CF00C((uint64_t)v12, __p);
    unsigned __int8 v16 = __dst;
    if (v14 < 0) {
      unsigned __int8 v16 = v15;
    }
    if (v22 >= 0) {
      uint64_t v17 = __p;
    }
    else {
      uint64_t v17 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315394;
    int v27 = v16;
    __int16 v28 = 2082;
    __int128 v29 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Received 'Search(%s)' request from device %{public}s",  buf,  0x16u);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }

  if (a4 == 106)
  {
    uint64_t v18 = *(void *)(*sub_100403258(a1 + 344, (unint64_t *)&v25) + 8LL);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10051DA68;
    v19[3] = &unk_10089F438;
    v19[4] = v25;
    char v20 = a3;
    (*(void (**)(uint64_t, void **, void *))(*(void *)v18 + 144LL))(v18, __dst, v19);
  }

  else
  {
    LODWORD(__p[0]) = 16842880;
    sub_1000ECD8C(a2, a3, __p, 4uLL);
  }

  if (SHIBYTE(v24) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_10051DA3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10051DA68(uint64_t a1, int a2, __int16 a3, int a4)
{
  char v5 = HIBYTE(a3);
  if (a2 == 4) {
    size_t v8 = 10LL;
  }
  else {
    size_t v8 = 4LL;
  }
  unint64_t v9 = (os_log_s *)qword_1008F75D0;
  BOOL v10 = os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    sub_1003CF00C(*(void *)(a1 + 32), v26);
    BOOL v12 = v27 >= 0 ? v26 : (void **)v26[0];
    *(_DWORD *)buf = 67109634;
    int v29 = a2;
    __int16 v30 = 1024;
    int v31 = a4;
    __int16 v32 = 2082;
    int v33 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Sending 'Search' response (result - %02x, nbItems - %u) to device %{public}s",  buf,  0x18u);
    if (v27 < 0) {
      operator delete(v26[0]);
    }
  }

  __chkstk_darwin(v10, v11);
  int v14 = (char *)&v26[-1] - v13;
  bzero((char *)&v26[-1] - v13, v8);
  *(_WORD *)int v14 = 128;
  _DWORD v14[2] = v8 - 3;
  v14[3] = a2;
  if (a2 == 4)
  {
    v14[5] = v5;
    v14[4] = 0;
    v14[9] = a4;
    v14[8] = BYTE1(a4);
    v14[7] = BYTE2(a4);
    int v15 = 10;
    v14[6] = HIBYTE(a4);
  }

  else
  {
    int v15 = 4;
  }

  if (v15 != (_DWORD)v8)
  {
    unsigned __int8 v16 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_FAULT)) {
      sub_10068E9C4(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }

  buf[0] = 0;
  sub_100242CA4(buf);
  if (sub_1000ECD8C(*(void *)(a1 + 32) + 128LL, *(unsigned __int8 *)(a1 + 40), v14, v8)
    && os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
  {
    sub_10068EDBC();
  }

  return sub_100242CD8(buf);
}

void sub_10051DC7C(_Unwind_Exception *a1)
{
}

uint64_t sub_10051DC98(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  size_t v8 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  uint64_t v18 = v8;
  unint64_t v9 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v10 = a4 > 3 ? "Unknown" : off_10089F858[(char)a4];
    sub_1003CF00C((uint64_t)v8, __p);
    uint64_t v11 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    uint64_t v20 = v10;
    __int16 v21 = 2082;
    uint64_t v22 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Received 'GetTotalNumberOfItems(%s)' request from device %{public}s",  buf,  0x16u);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }

  if (a4 > 3)
  {
    LODWORD(__p[0]) = 167837813;
    return sub_1000ECD8C(a2, a3, __p, 4uLL);
  }

  else
  {
    uint64_t v12 = *(void *)(*sub_100403258(a1 + 344, (unint64_t *)&v18) + 8LL);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    _DWORD v14[2] = sub_10051DE9C;
    v14[3] = &unk_10089F438;
    v14[4] = v18;
    char v15 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v12 + 152LL))(v12, a4, v14);
  }

_BYTE *sub_10051DE9C(uint64_t a1, int a2, __int16 a3, int a4)
{
  char v5 = HIBYTE(a3);
  if (a2 == 4) {
    size_t v8 = 10LL;
  }
  else {
    size_t v8 = 4LL;
  }
  unint64_t v9 = (os_log_s *)qword_1008F75D0;
  BOOL v10 = os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    sub_1003CF00C(*(void *)(a1 + 32), v26);
    uint64_t v12 = v27 >= 0 ? v26 : (void **)v26[0];
    *(_DWORD *)buf = 67109634;
    int v29 = a2;
    __int16 v30 = 1024;
    int v31 = a4;
    __int16 v32 = 2082;
    int v33 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Sending 'GetTotalNumberOfItems' response (result - %02x, nbItems - %u) to device %{public}s",  buf,  0x18u);
    if (v27 < 0) {
      operator delete(v26[0]);
    }
  }

  __chkstk_darwin(v10, v11);
  int v14 = (char *)&v26[-1] - v13;
  bzero((char *)&v26[-1] - v13, v8);
  *(_WORD *)int v14 = 117;
  _DWORD v14[2] = v8 - 3;
  v14[3] = a2;
  if (a2 == 4)
  {
    void v14[5] = v5;
    v14[4] = 0;
    v14[9] = a4;
    v14[8] = BYTE1(a4);
    v14[7] = BYTE2(a4);
    int v15 = 10;
    v14[6] = HIBYTE(a4);
  }

  else
  {
    int v15 = 4;
  }

  if (v15 != (_DWORD)v8)
  {
    unsigned __int8 v16 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_FAULT)) {
      sub_10068E9C4(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }

  buf[0] = 0;
  sub_100242CA4(buf);
  if (sub_1000ECD8C(*(void *)(a1 + 32) + 128LL, *(unsigned __int8 *)(a1 + 40), v14, v8)
    && os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
  {
    sub_10068EE1C();
  }

  return sub_100242CD8(buf);
}

void sub_10051E0B0(_Unwind_Exception *a1)
{
}

uint64_t sub_10051E0CC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  *(_DWORD *)buf = *(_DWORD *)a2;
  *(_WORD *)&uint8_t buf[4] = *(_WORD *)(a2 + 4);
  uint64_t v12 = sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
  uint64_t v21 = v12;
  uint64_t v13 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = a4 > 3 ? "Unknown" : off_10089F858[(char)a4];
    sub_1003CF00C((uint64_t)v12, __p);
    int v15 = v23 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = a6;
    *(_WORD *)&_BYTE buf[18] = 2082;
    *(void *)&buf[20] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Received 'PlayItem(%s)' request (uidCounter - %u) from device %{public}s",  buf,  0x1Cu);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }

  if ((a4 - 1) > 2)
  {
    __p[0] = (void *)0xA01000074581900LL;
    *(void *)buf = 2314LL;
    *(void *)&buf[8] = __p;
    *(void *)&uint8_t buf[16] = 8LL;
    return sub_1000ECD48(a2, a3, buf);
  }

  else
  {
    uint64_t v16 = *a5;
    uint64_t v17 = *(void *)(*sub_100403258(a1 + 344, (unint64_t *)&v21) + 8LL);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10051E31C;
    v19[3] = &unk_10089F398;
    v19[4] = a1;
    void v19[5] = v21;
    char v20 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)v17 + 160LL))( v17,  a4,  v16,  a6,  v19);
  }

_BYTE *sub_10051E31C(uint64_t a1, int a2)
{
  uint64_t v17 = 0x1000074581900LL;
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v4 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(*(void *)(a1 + 40), __p);
    char v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    int v14 = a2;
    __int16 v15 = 2082;
    uint64_t v16 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Sending 'play item' response (result - %02x) to device %{public}s",  buf,  0x12u);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  HIBYTE(v17) = a2;
  if (a2 == 4) {
    char v6 = 9;
  }
  else {
    char v6 = 10;
  }
  LOBYTE(v10) = v6;
  *(_WORD *)((char *)&v10 + 1) = 9;
  BYTE3(v10) = 0;
  uint64_t v11 = &v17;
  LOWORD(v12) = 8;
  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  if (sub_1000ECD48(*(void *)(a1 + 40) + 128LL, *(unsigned __int8 *)(a1 + 48), (unsigned __int8 *)&v10)
    && os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
  {
    sub_10068EE7C();
  }

  return sub_100242CD8(__p);
}

void sub_10051E4A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_10051E4BC(uint64_t a1, uint64_t a2, __int16 a3, char *a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  LODWORD(v27[0]) = *(_DWORD *)a2;
  WORD2(v27[0]) = *(_WORD *)(a2 + 4);
  size_t v8 = sub_1003FFEB0(off_1008D5F48, (uint64_t)v27, 1);
  uint64_t v28 = 0LL;
  unint64_t v29 = (unint64_t)v8;
  v27[0] = 0LL;
  v27[1] = 0LL;
  sub_10002418C(v27, a4);
  char v9 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = SHIBYTE(v28);
    uint64_t v11 = (void **)v27[0];
    sub_1003CF00C((uint64_t)v8, __p);
    uint64_t v12 = v27;
    if (v10 < 0) {
      uint64_t v12 = v11;
    }
    if (v26 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Received 'GetImageProperties(%s)' request from device %{public}s",  buf,  0x16u);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }

  *(void *)buf = 0LL;
  *(void *)&buf[8] = 0LL;
  sub_100242F28((uint64_t)buf, a1 + 280);
  int v14 = *(void **)(a1 + 352);
  if (!v14) {
    goto LABEL_33;
  }
  __int16 v15 = (void *)(a1 + 352);
  do
  {
    unint64_t v16 = v14[4];
    BOOL v17 = v16 >= (unint64_t)v8;
    else {
      uint64_t v18 = v14 + 1;
    }
    if (v17) {
      __int16 v15 = v14;
    }
    int v14 = (void *)*v18;
  }

  while (*v18);
  if (v15 != (void *)(a1 + 352) && (unint64_t)v8 >= v15[4])
  {
    uint64_t v19 = *(void *)(*sub_100403258(a1 + 344, &v29) + 8LL);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3321888768LL;
    v20[2] = sub_10051E7D4;
    v20[3] = &unk_10089F458;
    v20[4] = a1;
    if (SHIBYTE(v28) < 0)
    {
      sub_100024238(&v21, v27[0], (unint64_t)v27[1]);
    }

    else
    {
      __int128 v21 = *(_OWORD *)v27;
      uint64_t v22 = v28;
    }

    unint64_t v23 = v29;
    __int16 v24 = a3;
    (*(void (**)(uint64_t, void **, void *))(*(void *)v19 + 168LL))(v19, v27, v20);
    if (SHIBYTE(v22) < 0) {
      operator delete((void *)v21);
    }
  }

  else
  {
LABEL_33:
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C((uint64_t)v8, __p);
      sub_10068EEDC();
    }
  }

  sub_100242FAC((uint64_t)buf);
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
}

void sub_10051E780( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_100242FAC(v31 - 112);
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

void sub_10051E7D4(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  char v6 = (os_log_s *)qword_1008F75D0;
  if (*(void *)(*(void *)(a1 + 32) + 528LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      if (a2 > 2) {
        uint64_t v11 = "UNKNOWN";
      }
      else {
        uint64_t v11 = off_10089F878[(char)a2];
      }
      uint64_t v12 = (void *)(a1 + 40);
      sub_1003CF00C(*(void *)(a1 + 64), __p);
      if (v16 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      uint64_t v18 = v11;
      __int16 v19 = 2080;
      char v20 = v12;
      __int16 v21 = 2082;
      uint64_t v22 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sending 'GetImageProperties' response (result - %s, handle - %s) to device %{public}s",  buf,  0x20u);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }

    buf[0] = 0;
    sub_100242CA4(buf);
    int v14 = (const char *)(a1 + 40);
    if (sub_10009DC3C(*(unsigned __int16 *)(a1 + 72), v14, *a3, *a4, *a5, a3[1] - *a3))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
        sub_10068EFB4();
      }
    }

    sub_100242CD8(buf);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
  {
    sub_10068EF28(a1, v6);
  }

void sub_10051E9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_10051E9CC(uint64_t a1, uint64_t a2, __int16 a3, char *a4, uint64_t a5, uint64_t a6)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v35) = *(_WORD *)(a2 + 4);
  uint64_t v12 = sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
  uint64_t v32 = 0LL;
  unint64_t v33 = (unint64_t)v12;
  v31[0] = 0LL;
  v31[1] = 0LL;
  sub_10002418C(v31, a4);
  uint64_t v13 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = SHIBYTE(v32);
    __int16 v15 = (void **)v31[0];
    sub_1003CF00C((uint64_t)v12, __p);
    char v16 = v31;
    if (v14 < 0) {
      char v16 = v15;
    }
    if (v30 >= 0) {
      BOOL v17 = __p;
    }
    else {
      BOOL v17 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315906;
    unsigned int v35 = v16;
    __int16 v36 = 1024;
    int v37 = a5;
    __int16 v38 = 1024;
    int v39 = a6;
    __int16 v40 = 2082;
    uint64_t v41 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Received 'GetImage(%s)' request (width - %d, height - %d) from device %{public}s",  buf,  0x22u);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  sub_100242F28((uint64_t)__p, a1 + 280);
  uint64_t v18 = *(void **)(a1 + 352);
  if (!v18) {
    goto LABEL_33;
  }
  __int16 v19 = (void *)(a1 + 352);
  do
  {
    unint64_t v20 = v18[4];
    BOOL v21 = v20 >= (unint64_t)v12;
    else {
      uint64_t v22 = v18 + 1;
    }
    if (v21) {
      __int16 v19 = v18;
    }
    uint64_t v18 = (void *)*v22;
  }

  while (*v22);
  if (v19 != (void *)(a1 + 352) && (unint64_t)v12 >= v19[4])
  {
    uint64_t v23 = *(void *)(*sub_100403258(a1 + 344, &v33) + 8LL);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3321888768LL;
    void v24[2] = sub_10051ED08;
    v24[3] = &unk_10089F488;
    uint8_t v24[4] = a1;
    if (SHIBYTE(v32) < 0)
    {
      sub_100024238(&v25, v31[0], (unint64_t)v31[1]);
    }

    else
    {
      __int128 v25 = *(_OWORD *)v31;
      uint64_t v26 = v32;
    }

    unint64_t v27 = v33;
    __int16 v28 = a3;
    (*(void (**)(uint64_t, void **, uint64_t, uint64_t, void *))(*(void *)v23 + 176LL))( v23,  v31,  a5,  a6,  v24);
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
  }

  else
  {
LABEL_33:
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C((uint64_t)v12, buf);
      sub_10068EEDC();
    }
  }

  sub_100242FAC((uint64_t)__p);
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[0]);
  }
}

void sub_10051ECB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a23);
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

void sub_10051ED08(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  char v5 = (os_log_s *)qword_1008F75D0;
  if (*(void *)(*(void *)(a1 + 32) + 528LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      if (a2 > 2) {
        char v9 = "UNKNOWN";
      }
      else {
        char v9 = off_10089F878[(char)a2];
      }
      int v10 = (void *)(a1 + 40);
      sub_1003CF00C(*(void *)(a1 + 64), __p);
      if (v13 >= 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      __int16 v15 = v9;
      __int16 v16 = 2080;
      BOOL v17 = v10;
      __int16 v18 = 2048;
      uint64_t v19 = a4;
      __int16 v20 = 2082;
      BOOL v21 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Sending 'GetImage' response (result - %s, handle - %s, length - %zu) to device %{public}s",  buf,  0x2Au);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    buf[0] = 0;
    sub_100242CA4(buf);
    if (sub_10009DE30(*(unsigned __int16 *)(a1 + 72), a3, a4))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
        sub_10068F0A0();
      }
    }

    sub_100242CD8(buf);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
  {
    sub_10068F014(a1, v5);
  }

void sub_10051EECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_10051EEE8(uint64_t a1, uint64_t a2, __int16 a3, char *a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  LODWORD(v22[0]) = *(_DWORD *)a2;
  WORD2(v22[0]) = *(_WORD *)(a2 + 4);
  size_t v8 = sub_1003FFEB0(off_1008D5F48, (uint64_t)v22, 1);
  unint64_t v24 = (unint64_t)v8;
  v22[0] = 0LL;
  v22[1] = 0LL;
  uint64_t v23 = 0LL;
  sub_10002418C(v22, a4);
  char v9 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = SHIBYTE(v23);
    uint64_t v11 = (void **)v22[0];
    sub_1003CF00C((uint64_t)v8, __p);
    uint64_t v12 = v22;
    if (v10 < 0) {
      uint64_t v12 = v11;
    }
    if (v21 >= 0) {
      char v13 = __p;
    }
    else {
      char v13 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315394;
    uint64_t v26 = v12;
    __int16 v27 = 2082;
    __int16 v28 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Received 'GetLinkedThumbnail(%s)' request from device %{public}s",  buf,  0x16u);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v14 = *(void *)(*sub_100403258(a1 + 344, &v24) + 8LL);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3321888768LL;
  void v15[2] = sub_10051F15C;
  _DWORD v15[3] = &unk_10089F488;
  void v15[4] = a1;
  if (SHIBYTE(v23) < 0)
  {
    sub_100024238(&v16, v22[0], (unint64_t)v22[1]);
  }

  else
  {
    __int128 v16 = *(_OWORD *)v22;
    uint64_t v17 = v23;
  }

  unint64_t v18 = v24;
  __int16 v19 = a3;
  (*(void (**)(uint64_t, void **, void *))(*(void *)v14 + 184LL))(v14, v22, v15);
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)v16);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
}

void sub_10051F11C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10051F15C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  char v5 = (os_log_s *)qword_1008F75D0;
  if (*(void *)(*(void *)(a1 + 32) + 528LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      if (a2 > 2) {
        char v9 = "UNKNOWN";
      }
      else {
        char v9 = off_10089F878[(char)a2];
      }
      int v10 = (void *)(a1 + 40);
      sub_1003CF00C(*(void *)(a1 + 64), __p);
      if (v13 >= 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      __int16 v15 = v9;
      __int16 v16 = 2080;
      uint64_t v17 = v10;
      __int16 v18 = 2048;
      uint64_t v19 = a4;
      __int16 v20 = 2082;
      char v21 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Sending 'GetLinkedThumbnail' response (result - %s, handle - %s, length - %zu) to device %{public}s",  buf,  0x2Au);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    buf[0] = 0;
    sub_100242CA4(buf);
    if (sub_10009DF04(*(unsigned __int16 *)(a1 + 72), a3, a4))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
        sub_10068F18C();
      }
    }

    sub_100242CD8(buf);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
  {
    sub_10068F100(a1, v5);
  }

void sub_10051F320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_10051F33C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unsigned int a5, const void *a6)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  *(_DWORD *)buf = *(_DWORD *)a2;
  *(_WORD *)&uint8_t buf[4] = *(_WORD *)(a2 + 4);
  uint64_t v11 = sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
  uint64_t v26 = 0LL;
  unint64_t v27 = (unint64_t)v11;
  __int128 v25 = &off_10087FAA8;
  uint64_t v12 = (os_log_s *)qword_1008F75D0;
  BOOL v13 = os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT);
  if (a5)
  {
    if (v13)
    {
      sub_1003CF00C((uint64_t)v11, __p);
      uint64_t v14 = "s";
      if (a5 == 1) {
        uint64_t v14 = "";
      }
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = a5;
      if (v29 >= 0) {
        __int16 v15 = __p;
      }
      else {
        __int16 v15 = *(_BYTE **)__p;
      }
      *(_WORD *)uint64_t v31 = 2080;
      *(void *)&v31[2] = v14;
      __int16 v32 = 2082;
      unint64_t v33 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Received 'get element attributes' (%d attribute%s) request from device %{public}s",  buf,  0x1Cu);
      if (v29 < 0) {
        operator delete(*(void **)__p);
      }
    }

    sub_10056AB04(buf, a6, 4LL * a5);
    sub_10002EAC8((uint64_t)&v25, (uint64_t)buf);
  }

  else
  {
    if (v13)
    {
      sub_1003CF00C((uint64_t)v11, buf);
      __int16 v16 = SBYTE3(v33) >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)__p = 136446210;
      *(void *)&__p[4] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Received 'get element attributes' (all attributes) request from device %{public}s",  __p,  0xCu);
      if (SBYTE3(v33) < 0) {
        operator delete(*(void **)buf);
      }
    }

    else {
      LOBYTE(a5) = 7;
    }
    else {
      size_t v17 = 28LL;
    }
    sub_10056AB04(buf, &unk_1006C3C80, v17);
    sub_10002EAC8((uint64_t)&v25, (uint64_t)buf);
  }

  *(void *)buf = &off_10087FAA8;
  if (*(void *)v31) {
    sub_1002CD254(*(unsigned int **)v31);
  }
  uint64_t v18 = *(void *)(*sub_100403258(a1 + 344, &v27) + 8LL);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3321888768LL;
  v19[2] = sub_10051F6A0;
  v19[3] = &unk_10089F4B8;
  char v23 = a5;
  v19[4] = a1;
  __int16 v20 = &off_10087FAA8;
  char v21 = v26;
  if (v26) {
    sub_1002CD1E0((uint64_t)v26);
  }
  unint64_t v22 = v27;
  char v24 = a3;
  (*(void (**)(uint64_t, void *))(*(void *)v18 + 24LL))(v18, v19);
  __int16 v20 = &off_10087FAA8;
  if (v21) {
    sub_1002CD254(v21);
  }
  __int128 v25 = &off_10087FAA8;
  if (v26) {
    sub_1002CD254(v26);
  }
}

void sub_10051F63C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  if (a19) {
    sub_1002CD254(a19);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10051F6A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v47 = *(void *)(a1 + 32);
  char v5 = (char *)calloc(8uLL, 0x18uLL);
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v6 = 0LL;
    unsigned __int8 v7 = 0;
    while (2)
    {
      int v8 = *(_DWORD *)(sub_10056AAF0(a1 + 40) + 4 * v6);
      switch(v8)
      {
        case 1:
          else {
            char v9 = (const char *)*((void *)a3 + 2);
          }
          uint64_t v10 = qword_1008F75D0;
          if (!os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_64;
          }
          sub_1003CF00C(*(void *)(a1 + 56), buf);
          uint64_t v11 = buf;
          if (v50 < 0) {
            uint64_t v11 = *(uint8_t **)buf;
          }
          *(_DWORD *)uint64_t v51 = 136315394;
          *(void *)uint64_t v52 = v9;
          *(_WORD *)&v52[8] = 2082;
          *(void *)&v52[10] = v11;
          uint64_t v12 = (os_log_s *)v10;
          BOOL v13 = "Sending attribute 'title: %s' to device %{public}s";
          goto LABEL_62;
        case 2:
          else {
            char v9 = (const char *)*((void *)a3 + 5);
          }
          uint64_t v15 = qword_1008F75D0;
          if (!os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_64;
          }
          sub_1003CF00C(*(void *)(a1 + 56), buf);
          __int16 v16 = buf;
          if (v50 < 0) {
            __int16 v16 = *(uint8_t **)buf;
          }
          *(_DWORD *)uint64_t v51 = 136315394;
          *(void *)uint64_t v52 = v9;
          *(_WORD *)&v52[8] = 2082;
          *(void *)&v52[10] = v16;
          uint64_t v12 = (os_log_s *)v15;
          BOOL v13 = "Sending attribute 'artist: %s' to device %{public}s";
          goto LABEL_62;
        case 3:
          else {
            char v9 = (const char *)*((void *)a3 + 8);
          }
          uint64_t v17 = qword_1008F75D0;
          if (!os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_64;
          }
          sub_1003CF00C(*(void *)(a1 + 56), buf);
          uint64_t v18 = buf;
          if (v50 < 0) {
            uint64_t v18 = *(uint8_t **)buf;
          }
          *(_DWORD *)uint64_t v51 = 136315394;
          *(void *)uint64_t v52 = v9;
          *(_WORD *)&v52[8] = 2082;
          *(void *)&v52[10] = v18;
          uint64_t v12 = (os_log_s *)v17;
          BOOL v13 = "Sending attribute 'album: %s' to device %{public}s";
          goto LABEL_62;
        case 4:
          int v19 = *a3;
          uint64_t v20 = qword_1008F75D0;
          if (!os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_48;
          }
          sub_1003CF00C(*(void *)(a1 + 56), buf);
          char v21 = buf;
          if (v50 < 0) {
            char v21 = *(uint8_t **)buf;
          }
          *(_DWORD *)uint64_t v51 = 67109378;
          *(_DWORD *)uint64_t v52 = v19;
          *(_WORD *)&v52[4] = 2082;
          *(void *)&v52[6] = v21;
          unint64_t v22 = (os_log_s *)v20;
          char v23 = "Sending attribute 'track number: %u' to device %{public}s";
          goto LABEL_46;
        case 5:
          int v19 = a3[1];
          uint64_t v24 = qword_1008F75D0;
          if (!os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_48;
          }
          sub_1003CF00C(*(void *)(a1 + 56), buf);
          __int128 v25 = buf;
          if (v50 < 0) {
            __int128 v25 = *(uint8_t **)buf;
          }
          *(_DWORD *)uint64_t v51 = 67109378;
          *(_DWORD *)uint64_t v52 = v19;
          *(_WORD *)&v52[4] = 2082;
          *(void *)&v52[6] = v25;
          unint64_t v22 = (os_log_s *)v24;
          char v23 = "Sending attribute 'total tracks: %u' to device %{public}s";
          goto LABEL_46;
        case 6:
          else {
            char v9 = (const char *)*((void *)a3 + 11);
          }
          uint64_t v26 = qword_1008F75D0;
          if (!os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_64;
          }
          sub_1003CF00C(*(void *)(a1 + 56), buf);
          unint64_t v27 = buf;
          if (v50 < 0) {
            unint64_t v27 = *(uint8_t **)buf;
          }
          *(_DWORD *)uint64_t v51 = 136315394;
          *(void *)uint64_t v52 = v9;
          *(_WORD *)&v52[8] = 2082;
          *(void *)&v52[10] = v27;
          uint64_t v12 = (os_log_s *)v26;
          BOOL v13 = "Sending attribute 'genre: %s' to device %{public}s";
          goto LABEL_62;
        case 7:
          int v19 = a3[2];
          uint64_t v28 = qword_1008F75D0;
          if (!os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_48;
          }
          sub_1003CF00C(*(void *)(a1 + 56), buf);
          char v29 = buf;
          if (v50 < 0) {
            char v29 = *(uint8_t **)buf;
          }
          *(_DWORD *)uint64_t v51 = 67109378;
          *(_DWORD *)uint64_t v52 = v19;
          *(_WORD *)&v52[4] = 2082;
          *(void *)&v52[6] = v29;
          unint64_t v22 = (os_log_s *)v28;
          char v23 = "Sending attribute 'playing time: %ums' to device %{public}s";
LABEL_46:
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v23, v51, 0x12u);
          if (v50 < 0) {
            operator delete(*(void **)buf);
          }
LABEL_48:
          int v30 = v7;
          uint64_t v31 = &v5[24 * v7];
          *(_DWORD *)uint64_t v31 = v8;
          *((_WORD *)v31 + 2) = 106;
          goto LABEL_69;
        case 8:
          uint64_t v32 = *(void *)(a1 + 56);
          if (v32 == *(void *)(v47 + 528))
          {
            else {
              char v9 = (const char *)*((void *)a3 + 14);
            }
            uint64_t v35 = qword_1008F75D0;
            if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
            {
              sub_1003CF00C(v32, buf);
              __int16 v36 = buf;
              if (v50 < 0) {
                __int16 v36 = *(uint8_t **)buf;
              }
              *(_DWORD *)uint64_t v51 = 136315394;
              *(void *)uint64_t v52 = v9;
              *(_WORD *)&v52[8] = 2082;
              *(void *)&v52[10] = v36;
              uint64_t v12 = (os_log_s *)v35;
              BOOL v13 = "Sending attribute 'image handle: %s' to device %{public}s";
LABEL_62:
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, v51, 0x16u);
              if (v50 < 0) {
                operator delete(*(void **)buf);
              }
            }

void sub_10051FF00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, int a26, __int16 a27, char a28)
{
}

void sub_10051FF24(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int a5, uint64_t a6, int a7)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089F790);
  }
  uint64_t v59 = 0LL;
  int v71 = *(_DWORD *)a2;
  __int16 v72 = *(_WORD *)(a2 + 4);
  uint64_t v12 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v71, 1);
  __int128 v58 = 0LL;
  uint64_t v59 = (uint64_t)v12;
  uint64_t v56 = 0LL;
  v57 = 0LL;
  bzero(&v71, 0x201uLL);
  if (a7)
  {
    if (a7 != 3301)
    {
      uint64_t v15 = (os_log_s *)qword_1008F75D0;
      if (!os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
        return;
      }
      sub_1003CF00C((uint64_t)v12, __p);
      if (__p[23] >= 0) {
        uint64_t v42 = __p;
      }
      else {
        uint64_t v42 = *(_BYTE **)__p;
      }
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = a5;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = v42;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = a7;
      uint64_t v17 = "Received invalid response for PDU 0x%02x from device %{public}s - result was %{bluetooth:OI_STATUS}u";
      goto LABEL_75;
    }

    BOOL v13 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C((uint64_t)v12, buf);
      uint64_t v41 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)__p = 67109378;
      *(_DWORD *)&__p[4] = a5;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = v41;
      _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "Received 'not implemented' response for PDU 0x%02x from device %{public}s",  __p,  0x12u);
    }
  }

  int v14 = sub_1000E86D8((uint64_t)a4, a5, (uint64_t)&v56, &v71);
  if (v14)
  {
    uint64_t v15 = (os_log_s *)qword_1008F75D0;
    if (!os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
      return;
    }
    sub_1003CF00C(v59, __p);
    if (__p[23] >= 0) {
      __int16 v16 = __p;
    }
    else {
      __int16 v16 = *(_BYTE **)__p;
    }
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = a5;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = v16;
    *(_WORD *)&_BYTE buf[18] = 1024;
    *(_DWORD *)&buf[20] = v14;
    uint64_t v17 = "Failed to unmarshal response for PDU 0x%02x from device %{public}s - result was %{bluetooth:OI_STATUS}u";
LABEL_75:
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, v17, buf, 0x18u);
    if ((__p[23] & 0x80000000) != 0)
    {
      uint64_t v39 = *(void **)__p;
      goto LABEL_77;
    }

    return;
  }

  switch(a5)
  {
    case 80:
      if (*a4 != 9)
      {
        size_t v40 = (os_log_s *)qword_1008F75D0;
        if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
          sub_10068F2D4(&v59, v40);
        }
        return;
      }

      *(void *)buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1 + 392);
      int v30 = v57;
      *(void *)__p = &v59;
      *((_DWORD *)sub_1004510C8( (uint64_t **)(a1 + 456),  (unint64_t *)&v59,  (uint64_t)&unk_1006C2518,  (void **)__p)
      + 10) = v30;
      if (qword_1008D6458 != -1) {
        dispatch_once(&qword_1008D6458, &stru_10089F770);
      }
      LOBYTE(v31) = (_BYTE)v57;
      sub_100377700((void *)qword_1008D6450, v59, *a4, (float)v31 / 127.0);
      goto LABEL_46;
    case 49:
      int v21 = *v57;
      if (v21 == 13)
      {
        if ((*a4 | 2) != 0xF)
        {
          uint64_t v43 = sub_1004050C8();
          v49[0] = _NSConcreteStackBlock;
          v49[1] = 3221225472LL;
          v49[2] = sub_1005209F4;
          v49[3] = &unk_10087EB20;
          v49[4] = v59;
          sub_100405384(v43, v49);
          return;
        }

        int v22 = v57[8];
        char v23 = (os_log_s *)qword_1008F75D0;
        if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C(v59, __p);
          uint64_t v24 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v22;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = (3302700 * v22) >> 22;
          *(_WORD *)&buf[14] = 2082;
          *(void *)&uint8_t buf[16] = v24;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Received notification for absolute volume 0x%02x (~%d%%) from device %{public}s",  buf,  0x18u);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }

        v54[0] = 0LL;
        v54[1] = 0LL;
        sub_100242F28((uint64_t)v54, a1 + 392);
        *(void *)buf = &v59;
        *((_DWORD *)sub_1004510C8( (uint64_t **)(a1 + 456),  (unint64_t *)&v59,  (uint64_t)&unk_1006C2518,  (void **)buf)
        + 10) = v22;
        sub_100242F54((uint64_t)v54);
        uint64_t v69 = 0LL;
        __int128 v68 = 0u;
        memset(v67, 0, sizeof(v67));
        __int128 v65 = 0u;
        __int128 v66 = 0u;
        __int128 v63 = 0u;
        __int128 v64 = 0u;
        memset(buf, 0, sizeof(buf));
        sub_100532DC0((uint64_t)&buf[1]);
        _BYTE buf[18] = 0;
        buf[20] = 0;
        BYTE2(v64) = 0;
        BYTE4(v64) = 0;
        HIDWORD(v67[2]) = 0;
        __int128 v63 = 0uLL;
        *(void *)&buf[24] = 0LL;
        LOBYTE(v64) = 0;
        __int128 v65 = 0uLL;
        *((void *)&v64 + 1) = 0LL;
        LOBYTE(v66) = 0;
        v67[0] = 0LL;
        v67[1] = 0LL;
        *((void *)&v66 + 1) = 0LL;
        *(_DWORD *)((char *)&v67[1] + 7) = 0;
        LOBYTE(v67[3]) = 1;
        BYTE2(v69) = 0;
        *(void *)((char *)&v67[3] + 6) = 0LL;
        *(void *)((char *)&v67[3] + 1) = 0LL;
        __int128 v68 = 0uLL;
        v67[5] = 0LL;
        LOBYTE(v69) = 0;
        BOOL v25 = sub_1003D2408(v59, (uint64_t)buf);
        if (BYTE10(v68)) {
          BOOL v26 = v25;
        }
        else {
          BOOL v26 = 0;
        }
        if (v26)
        {
          unint64_t v27 = (os_log_s *)qword_1008F75D0;
          if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C(v59, v60);
            char v29 = v61 >= 0 ? v60 : (void **)v60[0];
            *(_DWORD *)__p = 67109634;
            *(_DWORD *)&__p[4] = v22;
            *(_WORD *)&__p[8] = 1024;
            *(_DWORD *)&__p[10] = (3302700 * v22) >> 22;
            *(_WORD *)&_BYTE __p[14] = 2082;
            *(void *)&__p[16] = v29;
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Ignoring notification for absolute volume 0x%02x (~%d%%) from device %{public}s",  __p,  0x18u);
            if (v61 < 0) {
              operator delete(v60[0]);
            }
          }
        }

        else
        {
          char v44 = *a4;
          uint64_t v45 = sub_1004050C8();
          v51[0] = _NSConcreteStackBlock;
          v51[1] = 3221225472LL;
          v51[2] = sub_10052098C;
          v51[3] = &unk_10088DA08;
          uint8_t v51[4] = v59;
          int v52 = v22;
          char v53 = v44;
          sub_100405384(v45, v51);
        }

        if (*a4 == 13)
        {
          unsigned __int8 v50 = 0;
          if (sub_1000E8484(a2, &v50, 13))
          {
            if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
            {
              sub_1003CF00C(v59, __p);
              sub_10068F290();
            }
          }
        }

        if (SHIBYTE(v67[1]) < 0) {
          operator delete(*((void **)&v66 + 1));
        }
        if (SHIBYTE(v65) < 0) {
          operator delete(*((void **)&v64 + 1));
        }
        if (SHIBYTE(v63) < 0) {
          operator delete(*(void **)&buf[24]);
        }
        nullsub_63(&buf[1], v28);
        uint64_t v32 = (uint8_t *)v54;
        goto LABEL_91;
      }

      unint64_t v33 = (os_log_s *)qword_1008F75D0;
      if (!os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
        return;
      }
      sub_1003CF00C(v59, buf);
      if ((buf[23] & 0x80u) == 0) {
        __int16 v36 = buf;
      }
      else {
        __int16 v36 = *(uint8_t **)buf;
      }
      *(_DWORD *)__p = 67109378;
      *(_DWORD *)&__p[4] = v21;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = v36;
      uint64_t v35 = "Received notification with unknown id 0x%02x from device %{public}s";
      break;
    case 16:
      if (*a4 == 12 && v57 == 3)
      {
        uint64_t v18 = BYTE1(v57);
        if (!BYTE1(v57)) {
          return;
        }
        int v19 = v58;
        while (1)
        {
          int v20 = *v19++;
          if (v20 == 13) {
            break;
          }
          if (!--v18) {
            return;
          }
        }

        uint64_t v46 = (os_log_s *)qword_1008F75D0;
        if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C(v59, buf);
          uint64_t v47 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)__p = 136446210;
          *(void *)&__p[4] = v47;
          _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "Registering for absolute volume change notifications on device %{public}s",  __p,  0xCu);
        }

        LOBYTE(v54[0]) = 0;
        if (sub_1000E8484(a2, (unsigned __int8 *)v54, 13))
        {
          if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
            sub_10068F230();
          }
          return;
        }

        *(void *)buf = 0LL;
        *(void *)&uint8_t buf[8] = 0LL;
        sub_100242F28((uint64_t)buf, a1 + 392);
        *(void *)__p = &v59;
        *((_DWORD *)sub_1004510C8( (uint64_t **)(a1 + 456),  (unint64_t *)&v59,  (uint64_t)&unk_1006C2518,  (void **)__p)
        + 10) = 30;
        sub_100242F54((uint64_t)buf);
        uint64_t v48 = sub_1004050C8();
        v55[0] = _NSConcreteStackBlock;
        v55[1] = 3221225472LL;
        void v55[2] = sub_100520938;
        v55[3] = &unk_10087EB20;
        v55[4] = v59;
        sub_100405384(v48, v55);
LABEL_46:
        uint64_t v32 = buf;
LABEL_91:
        sub_100242FAC((uint64_t)v32);
        return;
      }

      unint64_t v33 = (os_log_s *)qword_1008F75D0;
      if (!os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
        return;
      }
      sub_1003CF00C(v59, buf);
      if ((buf[23] & 0x80u) == 0) {
        int v37 = buf;
      }
      else {
        int v37 = *(uint8_t **)buf;
      }
      int v38 = *a4;
      *(_DWORD *)__p = 136446466;
      *(void *)&__p[4] = v37;
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&_BYTE __p[14] = v38;
      uint64_t v35 = "Received error response for get capabilities request from device %{public}s - response was 0x%02x";
      break;
    default:
      unint64_t v33 = (os_log_s *)qword_1008F75D0;
      if (!os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
        return;
      }
      sub_1003CF00C(v59, buf);
      if ((buf[23] & 0x80u) == 0) {
        uint64_t v34 = buf;
      }
      else {
        uint64_t v34 = *(uint8_t **)buf;
      }
      *(_DWORD *)__p = 67109378;
      *(_DWORD *)&__p[4] = a5;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = v34;
      uint64_t v35 = "Received response for unsupported PDU 0x%02x from device %{public}s";
      break;
  }

  _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, v35, __p, 0x12u);
  if ((char)buf[23] < 0)
  {
    uint64_t v39 = *(void **)buf;
LABEL_77:
    operator delete(v39);
  }

void sub_1005208E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

uint64_t sub_100520938(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089F770);
  }
  return sub_100377530((void *)qword_1008D6450, *(void *)(a1 + 32), 1);
}

uint64_t sub_10052098C(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089F770);
  }
  return sub_100377700( (void *)qword_1008D6450,  *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 44),  (float)*(int *)(a1 + 40) / 127.0);
}

uint64_t sub_1005209F4(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_10089F770);
  }
  return sub_100377530((void *)qword_1008D6450, *(void *)(a1 + 32), 0);
}

void sub_100520A48(float a1, uint64_t a2, uint64_t a3)
{
  char v18 = 0;
  uint64_t v5 = sub_1002E6E00();
  sub_10002418C(buf, "PTS");
  sub_10002418C(__p, "AVRCPControllerHack");
  char v6 = (*(uint64_t (**)(uint64_t, uint8_t *, _BYTE *, char *))(*(void *)v5 + 72LL))(v5, buf, __p, &v18);
  if (v24 < 0) {
    operator delete(*(void **)__p);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(*(void **)buf);
  }
  char v18 = v6;
  if (a3)
  {
    char v7 = v6 ^ 1;
    if (a1 != 0.0) {
      char v7 = 1;
    }
    if ((v7 & 1) != 0)
    {
      uint64_t v12 = (os_log_s *)qword_1008F75D0;
      if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a3, __p);
        BOOL v13 = v24 >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = (int)(float)(a1 * 127.0);
        __int16 v26 = 1024;
        int v27 = (int)(float)(a1 * 100.0);
        __int16 v28 = 2082;
        char v29 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Setting absolute volume to 0x%02x (~%d%%) on device %{public}s",  buf,  0x18u);
        if (v24 < 0) {
          operator delete(*(void **)__p);
        }
      }

      buf[0] = 0;
      sub_100242CA4(buf);
      int v10 = sub_10009CDD4(a3 + 128, (int)(float)(a1 * 127.0));
      uint64_t v11 = buf;
    }

    else
    {
      LOBYTE(v16[0]) = 0;
      int v8 = (os_log_s *)qword_1008F75D0;
      if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a3, buf);
        char v9 = SHIBYTE(v29) >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)__p = 136446210;
        *(void *)&__p[4] = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Setting absolute volume to zero (muted) on device %{public}s",  __p,  0xCu);
        if (SHIBYTE(v29) < 0) {
          operator delete(*(void **)buf);
        }
      }

      v19[0] = 0;
      sub_100242CA4(v19);
      if (sub_10009CBB4(a3 + 128, (unsigned __int8 *)v16, 67)
        && os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(a3, buf);
        sub_10068F3A4();
      }

      int v10 = sub_10009CBB4(a3 + 128, (unsigned __int8 *)v16, 195);
      if (v10 && os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(a3, __p);
        sub_10068F360();
      }

      uint64_t v11 = v19;
    }

    sub_100242CD8(v11);
    if (v10)
    {
      int v14 = (os_log_s *)qword_1008F75D0;
      if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(a3, v16);
        if (v17 >= 0) {
          uint64_t v15 = v16;
        }
        else {
          uint64_t v15 = (void **)v16[0];
        }
        *(_DWORD *)int v19 = 136446466;
        int v20 = v15;
        __int16 v21 = 1024;
        int v22 = v10;
        _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Failed to set absolute volume on device %{public}s - result was %{bluetooth:OI_STATUS}u",  v19,  0x12u);
        if (v17 < 0) {
          operator delete(v16[0]);
        }
      }
    }
  }

void sub_100520DD8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
}

uint64_t sub_100520E38(uint64_t a1, uint64_t a2, __int16 *a3)
{
  uint64_t v3 = sub_1000D75B8(a2, xmmword_1006C3C50, (uint64_t)xmmword_1006C3C50, a3);
  if ((_DWORD)v3 && os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
    sub_10068F3E8();
  }
  return v3;
}

uint64_t sub_100520EA0(uint64_t a1, uint64_t a2, __int16 *a3, __int16 *a4)
{
  __int16 v11 = 0;
  char v10 = 0;
  __int16 v9 = 0;
  uint64_t v7 = sub_100173ADC((unsigned __int16)*a3, &v9, &v11, &v10);
  if ((_DWORD)v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
      sub_10068F440();
    }
  }

  else
  {
    sub_10040F938(a2, 1);
    sub_10040F938(a2, 7);
    sub_10040F974(a2, *a3);
    sub_10040F974(a2, v9);
    sub_10040F974(a2, v11);
    sub_10040F938(a2, v10);
  }

  if (*a4)
  {
    uint64_t v7 = sub_100173ADC((unsigned __int16)*a4, &v9, &v11, &v10);
    if ((_DWORD)v7)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
        sub_10068F414();
      }
    }

    else
    {
      sub_10040F938(a2, 17);
      sub_10040F938(a2, 7);
      sub_10040F974(a2, *a4);
      sub_10040F974(a2, v9);
      sub_10040F974(a2, v11);
      sub_10040F938(a2, v10);
    }
  }

  return v7;
}

uint64_t sub_100521048(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, unsigned int a5)
{
  unint64_t v35 = a3;
  int v8 = operator new(0xB8uLL);
  sub_10052305C();
  *(void *)buf = &v35;
  sub_100029574((uint64_t **)(a1 + 344), &v35, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] = (uint64_t)v8;
  unsigned int v9 = sub_10056AAD8(a2 + 8) - *(_DWORD *)(a2 + 24);
  uint64_t v34 = 0LL;
  unsigned int v10 = v9 << 16;
  if ((int)(v9 << 16) >= 1)
  {
    uint64_t v11 = 0LL;
    while (1)
    {
      int v12 = (char)sub_10040F7B0(a2);
      if (v12 < 0)
      {
        unsigned int v13 = sub_10040F7FC(a2);
        int v14 = HIWORD(v10) - 3;
      }

      else
      {
        unsigned int v13 = sub_10040F7B0(a2);
        LOWORD(v14) = v9 - 2;
      }

      int v15 = v12 & 0x7F;
      if (v15 > 15)
      {
        if (v15 != 16)
        {
          if (v15 == 17)
          {
            unsigned __int16 v16 = v13 - 7;
            if (v13 >= 7)
            {
              __int16 v17 = sub_10040F7FC(a2);
              sub_10040F7FC(a2);
              __int16 v18 = sub_10040F7FC(a2);
              sub_10040F7B0(a2);
              buf[0] = 0;
              sub_100242CA4(buf);
              if (sub_100171EC4(a5, (uint64_t *)&v34) || !sub_10017AB4C(v34))
              {
                int v19 = (os_log_s *)qword_1008F75D0;
                if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
                  sub_10068F4A0(&v30, v31, v19);
                }
              }

              else
              {
                *(_WORD *)(sub_10017AB4C(v34) + 8) = v17;
                *(_WORD *)(sub_10017AB4C(v34) + 32) = v18;
                uint64_t v24 = sub_10017AB4C(v34);
                nullsub_63(a5, *(unsigned __int16 *)(v24 + 36));
              }

void sub_100521460( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

uint64_t sub_100521490(uint64_t a1, uint64_t a2, char a3)
{
  char v6 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    if (v10 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446210;
    int v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Fast Connect AVRCP Report Connection attempt for %{public}s",  buf,  0xCu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  return sub_100410910(a1, a2, a3);
}

_BYTE *sub_100521588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = (os_log_s *)qword_1008F75D0;
  if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 67109120;
    v9[1] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Fast Connect AVRCP Setup Complete result %d",  (uint8_t *)v9,  8u);
  }

  if ((_DWORD)a3)
  {
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_10089F7B0);
    }
    int v7 = sub_1004317E0((uint64_t)off_1008D60A8, a3, 20000);
    return (_BYTE *)sub_100410A5C(a1, a2, v7);
  }

  else
  {
    sub_100410A5C(a1, a2, 0);
    LOBYTE(v9[0]) = 0;
    sub_100242CA4(v9);
    sub_10051779C(a1, a2);
    return sub_100242CD8(v9);
  }

void sub_1005216BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_1005216D8(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  v20[1] = 0LL;
  unint64_t v21 = a2;
  v20[0] = 0LL;
  sub_100242F28((uint64_t)v20, a1 + 280);
  char v10 = *(void **)(a1 + 352);
  if (v10)
  {
    uint64_t v11 = (void *)(a1 + 352);
    do
    {
      unint64_t v12 = v10[4];
      BOOL v13 = v12 >= a2;
      if (v12 >= a2) {
        int v14 = v10;
      }
      else {
        int v14 = v10 + 1;
      }
      if (v13) {
        uint64_t v11 = v10;
      }
      char v10 = (void *)*v14;
    }

    while (*v14);
    if (v11 != (void *)(a1 + 352) && v11[4] <= a2)
    {
      uint64_t v15 = *sub_100403258(a1 + 344, &v21);
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 64LL))(v15);
      }
      sub_10020166C(a1 + 344, &v21);
    }
  }

  sub_100242F54((uint64_t)v20);
  char v19 = 0;
  sub_100242CA4(&v19);
  if (a5)
  {
    unsigned __int16 v16 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      v18[0] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "fastConnectCleanAVRCP OI_AVRCP_FastConnect_DisconnectTable",  (uint8_t *)v18,  2u);
    }

    sub_1000E70F8(v21 + 128);
  }

  sub_1000D7828(v21 + 128, a3, a4);
  sub_100242CD8(&v19);
  return sub_100242FAC((uint64_t)v20);
}

void sub_10052182C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_100521858(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v14 = a2;
  uint64_t v4 = (void *)result[47];
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = result + 47;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      int v8 = v4;
    }
    else {
      int v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 == result + 47 || v5[4] > a2)
  {
LABEL_12:
    unsigned int v9 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, __p);
      if (v13 >= 0) {
        char v10 = __p;
      }
      else {
        char v10 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446210;
      unsigned __int16 v16 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Workaround RemoteMediaInfo for device %{public}s created",  buf,  0xCu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v11 = operator new(0xB8uLL);
    sub_10052305C();
    __p[0] = &v14;
    uint64_t result = sub_100029574((uint64_t **)v3 + 46, &v14, (uint64_t)&unk_1006C2518, (uint64_t **)__p);
    result[5] = (uint64_t)v11;
  }

  return result;
}

void sub_1005219B0(_Unwind_Exception *a1)
{
}

uint64_t *sub_1005219CC(uint64_t a1, unint64_t a2)
{
  return sub_100521858((uint64_t *)(a1 - 272), a2);
}

uint64_t sub_1005219D4(uint64_t result, unint64_t a2)
{
  unint64_t v14 = a2;
  uint64_t v2 = *(void **)(result + 376);
  if (v2)
  {
    uint64_t v4 = result + 368;
    uint64_t v5 = result + 376;
    do
    {
      unint64_t v6 = v2[4];
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        int v8 = v2;
      }
      else {
        int v8 = v2 + 1;
      }
      if (v7) {
        uint64_t v5 = (uint64_t)v2;
      }
      uint64_t v2 = (void *)*v8;
    }

    while (*v8);
    if (v5 != result + 376 && *(void *)(v5 + 32) <= a2)
    {
      unsigned int v9 = (os_log_s *)qword_1008F75D0;
      if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a2, __p);
        char v10 = v13 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        unsigned __int16 v16 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Workaround RemoteMediaInfo for device %{public}s deleted",  buf,  0xCu);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v11 = *sub_100403258(v4, &v14);
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 64LL))(v11);
      }
      return sub_10020166C(v4, &v14);
    }
  }

  return result;
}

uint64_t sub_100521B20(uint64_t a1, unint64_t a2)
{
  return sub_1005219D4(a1 - 272, a2);
}

uint64_t sub_100521B28(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  uint64_t result = sub_1003D0670(a2);
  if ((_DWORD)result)
  {
    uint64_t v5 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, __p);
      if (v9 >= 0) {
        unint64_t v6 = __p;
      }
      else {
        unint64_t v6 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v12 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Play command for device %{public}s forwarded",  buf,  0xCu);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }

    BOOL v7 = sub_100403258(a1 + 368, (unint64_t *)&v10);
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(*v7 + 8LL) + 8LL))( *(void *)(*v7 + 8LL),  v10,  501LL);
  }

  return result;
}

uint64_t sub_100521C3C(uint64_t a1, uint64_t a2)
{
  return sub_100521B28(a1 - 272, a2);
}

void sub_100521C48(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100522BE4(a1);
  operator delete(v1);
}

uint64_t sub_100521C5C()
{
  return 3LL;
}

uint64_t sub_100521C64(uint64_t a1)
{
  return sub_100522BE4(a1 - 256);
}

void sub_100521C6C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100522BE4(a1 - 256);
  operator delete(v1);
}

uint64_t sub_100521C84(uint64_t a1)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  return sub_100516FA8((uint64_t)off_1008D9248, a1);
}

void sub_100521CD4(uint64_t a1, int a2)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  sub_100517EDC((uint64_t)off_1008D9248, a1, a2);
}

uint64_t sub_100521D2C(uint64_t a1, uint64_t a2)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  return sub_100517390((uint64_t)off_1008D9248, a1, a2);
}

void sub_100521D84(uint64_t a1, int a2, int a3)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  sub_1005179B8((uint64_t)off_1008D9248, a1, a2, a3);
}

void sub_100521DEC(uint64_t a1, __int16 a2, int a3)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  sub_100517BB0((uint64_t)off_1008D9248, a1, a2, a3);
}

void sub_100521E54(uint64_t a1)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  sub_100517D78((uint64_t)off_1008D9248, a1);
}

void sub_100521EA4(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_100271B18((uint64_t)v1);
  off_1008D9248 = v1;
}

void sub_100521ED4(_Unwind_Exception *a1)
{
}

void sub_100521EE8(uint64_t a1, unsigned int a2, char a3)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  sub_1005185B8((uint64_t)off_1008D9248, a1, a2, a3);
}

void sub_100521F50(uint64_t a1, unsigned int a2, int a3)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  sub_100518C38(a1, a1, a2, a3);
}

void sub_100521FB0(uint64_t a1, unsigned int a2)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  sub_100518E38(a1, a1, a2);
}

void sub_100522000(uint64_t a1, unsigned int a2, int a3)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  sub_100518FB0(a1, a1, a2, a3);
}

void sub_100522060(uint64_t a1, char a2, unsigned int a3, const void *a4)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  sub_1005191EC((uint64_t)off_1008D9248, a1, a2, a3, a4);
}

void sub_1005220D0(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  sub_10051977C((uint64_t)off_1008D9248, a1, a2, a3, a4);
}

void sub_100522140(uint64_t a1, char a2, uint64_t a3, uint64_t a4, const void *a5)
{
  unsigned int v6 = a4;
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  sub_10051F33C((uint64_t)off_1008D9248, a1, a2, a4, v6, a5);
}

uint64_t sub_1005221B0(uint64_t a1, char a2)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  return sub_10051B380((uint64_t)off_1008D9248, a1, a2);
}

uint64_t sub_100522208(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  return sub_100519BB4((uint64_t)off_1008D9248, a1, a2, a3);
}

void sub_100522270(uint64_t a1, unsigned int a2, int a3)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  sub_10051B6C4((uint64_t)off_1008D9248, a1, a2, a3);
}

uint64_t sub_1005222E0(uint64_t a1, unsigned int a2, int a3)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  return sub_10051B97C((uint64_t)off_1008D9248, a1, a2, a3);
}

uint64_t sub_100522348(uint64_t a1, char a2, uint64_t a3)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  return sub_10051BB98((uint64_t)off_1008D9248, a1, a2, a3);
}

uint64_t sub_1005223B0(uint64_t a1, char a2, uint64_t a3)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  return sub_10051BEE4((uint64_t)off_1008D9248, a1, a2, a3);
}

void *sub_100522418( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  return sub_10051C7A0((uint64_t)off_1008D9248, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1005224B0(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t *a5)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  return sub_10051C398((uint64_t)off_1008D9248, a1, a2, a3, a4, a5);
}

void *sub_100522530( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  return sub_10051D0B4((uint64_t)off_1008D9248, a1, a2, a3, a4, a5, a6, a7);
}

void sub_1005225C8(uint64_t a1, unsigned int a2, int a3, unsigned int a4, void *a5)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  sub_10051D814((uint64_t)off_1008D9248, a1, a2, a3, a4, a5);
}

uint64_t sub_100522648(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  return sub_10051DC98((uint64_t)off_1008D9248, a1, a2, a3);
}

uint64_t sub_1005226B0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  return sub_10051E0CC((uint64_t)off_1008D9248, a1, a2, a3, a4, a5);
}

void sub_100522730(uint64_t a1, __int16 a2, char *a3)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  sub_10051E4BC((uint64_t)off_1008D9248, a1, a2, a3);
}

void sub_100522798(uint64_t a1, __int16 a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  sub_10051E9CC((uint64_t)off_1008D9248, a1, a2, a3, a4, a5);
}

void sub_100522818(uint64_t a1, __int16 a2, char *a3)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  sub_10051EEE8((uint64_t)off_1008D9248, a1, a2, a3);
}

void sub_100522880()
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
}

void sub_1005228A8(uint64_t a1, uint64_t a2, char *a3, int a4, uint64_t a5, int a6)
{
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089F640);
  }
  sub_10051FF24((uint64_t)off_1008D9248, a1, 0LL, a3, a4, 0LL, a6);
}

void sub_100522920(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }

  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_1005229A8(a1 + 8, v4, (char *)&v6);
    sub_100008A30(a1 + 8);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1005229A8(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    char v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      char v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      char v19 = 0LL;
    }
    __int16 v20 = &v19[8 * v16];
    __p = v19;
    int v27 = v20;
    __int16 v28 = v20;
    char v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        char v23 = (char *)sub_100008BA0(v8, v22);
        __int16 v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        int v27 = v20;
        char v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        int v27 = v20;
      }
    }

    *(void *)__int16 v20 = *(void *)v3;
    __int16 v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }

  else
  {
    char v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_100522BAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100522BE4(uint64_t a1)
{
  *(void *)a1 = off_10089F4F8;
  *(void *)(a1 + 256) = off_10089F5B8;
  *(void *)(a1 + 264) = off_10089F5E0;
  *(void *)(a1 + 272) = &off_10089F628;
  sub_10023BF24(a1 + 504, *(void **)(a1 + 512));
  sub_10025506C(a1 + 480, *(void **)(a1 + 488));
  sub_10023BF24(a1 + 456, *(void **)(a1 + 464));
  sub_100242E28(a1 + 392);
  sub_10023BF24(a1 + 368, *(void **)(a1 + 376));
  sub_10023BF24(a1 + 344, *(void **)(a1 + 352));
  sub_100242E28(a1 + 280);
  return sub_100213D34(a1);
}

void sub_100522C70(id a1)
{
  uint64_t v1 = operator new(0x310uLL);
  sub_10036BB90();
  qword_1008D6450 = (uint64_t)v1;
}

void sub_100522CA0(_Unwind_Exception *a1)
{
}

void sub_100522CB4(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_100522CE4(_Unwind_Exception *a1)
{
}

void sub_100522CF8(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_100522D28(_Unwind_Exception *a1)
{
}

void sub_100522D3C(id a1)
{
  uint64_t v1 = operator new(0x58uLL);
  sub_10041A094(v1);
  qword_1008D95F8 = (uint64_t)v1;
}

void sub_100522D6C(_Unwind_Exception *a1)
{
}

uint64_t *sub_100522D80(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unsigned int v5 = *a2;
  unsigned int v6 = a2[1];
  unint64_t v7 = v2;
  do
  {
    unsigned int v8 = *((unsigned __int8 *)v3 + 32);
    if (v8 >= v5)
    {
      if (v5 >= v8)
      {
        else {
          unint64_t v7 = v3;
        }
      }

      else
      {
        unint64_t v7 = v3;
      }
    }

    else
    {
      ++v3;
    }

    uint64_t v3 = (uint64_t *)*v3;
  }

  while (v3);
  if (v7 == v2) {
    return v2;
  }
  unsigned int v9 = *((unsigned __int8 *)v7 + 32);
  return v7;
}

_WORD *sub_100522E10(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t v10 = 0LL;
  unsigned int v6 = sub_100522E9C((uint64_t)a1, &v10, a2);
  unint64_t v7 = (_WORD *)*v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x30uLL);
    v7[16] = **a4;
    *((void *)v7 + 5) = 0LL;
    sub_100029630(a1, v10, v8, (uint64_t *)v7);
  }

  return v7;
}

uint64_t *sub_100522E9C(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  unsigned int v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    unsigned int v7 = a3[1];
    while (1)
    {
      while (1)
      {
        unsigned int v8 = v4;
        unsigned int v9 = *((unsigned __int8 *)v4 + 32);
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        uint64_t v4 = (uint64_t *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }

      if (v9 >= v6)
      {
        unsigned int v10 = *((unsigned __int8 *)v8 + 33);
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }

      uint64_t result = v8 + 1;
      uint64_t v4 = (uint64_t *)v8[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }

  unsigned int v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

void *sub_100522F04(void *a1)
{
  *a1 = &off_10089F8A0;
  a1[3] = 0LL;
  a1[2] = a1 + 3;
  a1[4] = 0LL;
  a1[6] = 0LL;
  a1[5] = a1 + 6;
  a1[9] = 0LL;
  a1[8] = a1 + 9;
  a1[7] = 0LL;
  a1[10] = 0LL;
  a1[12] = 0LL;
  a1[11] = a1 + 12;
  a1[13] = 0LL;
  a1[15] = 0LL;
  a1[14] = a1 + 15;
  a1[16] = 0LL;
  a1[19] = 0LL;
  a1[18] = 0LL;
  a1[17] = a1 + 18;
  a1[21] = 0LL;
  a1[20] = a1 + 21;
  a1[22] = 0LL;
  a1[1] = sub_1002E9168((uint64_t)a1);
  return a1;
}

void sub_100522FFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14)
{
}

uint64_t sub_100523060(uint64_t a1)
{
  *(void *)a1 = &off_10089F8A0;
  (***(void (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2 != (void *)(a1 + 24))
  {
    do
    {
      uint64_t v3 = (void *)v2[5];
      if (v3) {
        operator delete(v3);
      }
      uint64_t v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          unsigned int v5 = v4;
          uint64_t v4 = (void *)*v4;
        }

        while (v4);
      }

      else
      {
        do
        {
          unsigned int v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }

        while (!v6);
      }

      uint64_t v2 = v5;
    }

    while (v5 != (void *)(a1 + 24));
  }

  unsigned int v7 = *(void **)(a1 + 40);
  if (v7 != (void *)(a1 + 48))
  {
    do
    {
      unsigned int v8 = (void *)v7[5];
      if (v8) {
        operator delete(v8);
      }
      unsigned int v9 = (void *)v7[1];
      if (v9)
      {
        do
        {
          unsigned int v10 = v9;
          unsigned int v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          unsigned int v10 = (void *)v7[2];
          BOOL v6 = *v10 == (void)v7;
          unsigned int v7 = v10;
        }

        while (!v6);
      }

      unsigned int v7 = v10;
    }

    while (v10 != (void *)(a1 + 48));
  }

  uint64_t v11 = *(void **)(a1 + 64);
  if (v11 != (void *)(a1 + 72))
  {
    do
    {
      uint64_t v12 = (void *)v11[5];
      if (v12) {
        operator delete(v12);
      }
      char v13 = (void *)v11[1];
      if (v13)
      {
        do
        {
          unint64_t v14 = v13;
          char v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          unint64_t v14 = (void *)v11[2];
          BOOL v6 = *v14 == (void)v11;
          uint64_t v11 = v14;
        }

        while (!v6);
      }

      uint64_t v11 = v14;
    }

    while (v14 != (void *)(a1 + 72));
  }

  uint64_t v15 = *(void **)(a1 + 88);
  if (v15 != (void *)(a1 + 96))
  {
    do
    {
      uint64_t v16 = (void *)v15[5];
      if (v16) {
        operator delete(v16);
      }
      uint64_t v17 = (void *)v15[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          uint64_t v18 = (void *)v15[2];
          BOOL v6 = *v18 == (void)v15;
          uint64_t v15 = v18;
        }

        while (!v6);
      }

      uint64_t v15 = v18;
    }

    while (v18 != (void *)(a1 + 96));
  }

  uint64_t v19 = *(void **)(a1 + 112);
  if (v19 != (void *)(a1 + 120))
  {
    do
    {
      uint64_t v20 = (void *)v19[5];
      if (v20) {
        operator delete(v20);
      }
      unint64_t v21 = (void *)v19[1];
      if (v21)
      {
        do
        {
          unint64_t v22 = v21;
          unint64_t v21 = (void *)*v21;
        }

        while (v21);
      }

      else
      {
        do
        {
          unint64_t v22 = (void *)v19[2];
          BOOL v6 = *v22 == (void)v19;
          uint64_t v19 = v22;
        }

        while (!v6);
      }

      uint64_t v19 = v22;
    }

    while (v22 != (void *)(a1 + 120));
  }

  char v23 = *(void **)(a1 + 136);
  if (v23 != (void *)(a1 + 144))
  {
    do
    {
      uint64_t v24 = (void *)v23[5];
      if (v24) {
        operator delete(v24);
      }
      uint64_t v25 = (void *)v23[1];
      if (v25)
      {
        do
        {
          uint64_t v26 = v25;
          uint64_t v25 = (void *)*v25;
        }

        while (v25);
      }

      else
      {
        do
        {
          uint64_t v26 = (void *)v23[2];
          BOOL v6 = *v26 == (void)v23;
          char v23 = v26;
        }

        while (!v6);
      }

      char v23 = v26;
    }

    while (v26 != (void *)(a1 + 144));
  }

  int v27 = *(void **)(a1 + 160);
  if (v27 != (void *)(a1 + 168))
  {
    do
    {
      __int16 v28 = (void *)v27[5];
      if (v28) {
        operator delete(v28);
      }
      char v29 = (void *)v27[1];
      if (v29)
      {
        do
        {
          uint64_t v30 = v29;
          char v29 = (void *)*v29;
        }

        while (v29);
      }

      else
      {
        do
        {
          uint64_t v30 = (void *)v27[2];
          BOOL v6 = *v30 == (void)v27;
          int v27 = v30;
        }

        while (!v6);
      }

      int v27 = v30;
    }

    while (v30 != (void *)(a1 + 168));
  }

  sub_10023BF24(a1 + 160, *(void **)(a1 + 168));
  sub_10023BF24(a1 + 136, *(void **)(a1 + 144));
  sub_10023BF24(a1 + 112, *(void **)(a1 + 120));
  sub_10023BF24(a1 + 88, *(void **)(a1 + 96));
  sub_10023BF24(a1 + 64, *(void **)(a1 + 72));
  sub_10023BF24(a1 + 40, *(void **)(a1 + 48));
  sub_10023BF24(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_100523378(_Unwind_Exception *a1)
{
}

void sub_1005233DC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100523060(a1);
  operator delete(v1);
}

void sub_1005233F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v13 = a3;
  unsigned int v5 = *(void **)(a2 + 8);
  if (!v5) {
    goto LABEL_12;
  }
  BOOL v6 = (void *)(a2 + 8);
  do
  {
    unint64_t v7 = v5[4];
    BOOL v8 = v7 >= a3;
    if (v7 >= a3) {
      unsigned int v9 = v5;
    }
    else {
      unsigned int v9 = v5 + 1;
    }
    if (v8) {
      BOOL v6 = v5;
    }
    unsigned int v5 = (void *)*v9;
  }

  while (*v9);
  if (v6 != (void *)(a2 + 8) && v6[4] <= a3)
  {
    uint64_t v12 = (void *)v6[5];
    unsigned int v10 = v6 + 5;
    uint64_t v11 = v12;
    if (v12) {
      operator delete(v11);
    }
  }

  else
  {
LABEL_12:
    unint64_t v14 = &v13;
    unsigned int v10 = sub_100029574((uint64_t **)a2, &v13, (uint64_t)&unk_1006C2518, (uint64_t **)&v14) + 5;
  }

  uint64_t *v10 = a4;
}

uint64_t sub_100523494(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48LL))(*(void *)(a1 + 8));
}

void sub_1005234A4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v22 = 0LL;
  unint64_t v23 = a4;
  uint64_t v20 = (uint64_t *)&v21;
  unint64_t v21 = 0LL;
  if ((a3 & 1) != 0)
  {
    uint64_t v8 = a1 + 16;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    sub_1005241B4((uint64_t *)&v17, a1 + 16);
    unsigned int v10 = *(void **)(a1 + 24);
    unsigned int v9 = (void *)(a1 + 24);
    sub_10023BF24(v8, v10);
    *(v9 - 1) = v9;
    void *v9 = 0LL;
    v9[1] = 0LL;
    sub_10023BF24((uint64_t)&v20, v21);
    uint64_t v11 = v18;
    uint64_t v20 = v17;
    unint64_t v21 = v18;
    uint64_t v22 = v19;
    if (v19)
    {
      v18[2] = &v21;
      uint64_t v17 = (uint64_t *)&v18;
      uint64_t v18 = 0LL;
      uint64_t v19 = 0LL;
      uint64_t v11 = 0LL;
    }

    else
    {
      uint64_t v20 = (uint64_t *)&v21;
    }

    sub_10023BF24((uint64_t)&v17, v11);
  }

  else
  {
    sub_1005233F0(a1, a1 + 16, a4, a5);
    uint64_t v17 = (uint64_t *)&v23;
    sub_100029574(&v20, &v23, (uint64_t)&unk_1006C2518, &v17)[5] = a5;
  }

  unint64_t v13 = v20;
  if (v20 != (uint64_t *)&v21)
  {
    do
    {
      if (qword_1008D9250 != -1) {
        dispatch_once(&qword_1008D9250, &stru_10089F8E8);
      }
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)off_1008D9248 + 120LL))( off_1008D9248,  a2,  a3,  v13[4],  v13[5]);
      unint64_t v14 = (uint64_t *)v13[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          unint64_t v14 = (uint64_t *)*v14;
        }

        while (v14);
      }

      else
      {
        do
        {
          uint64_t v15 = (uint64_t *)v13[2];
          BOOL v16 = *v15 == (void)v13;
          unint64_t v13 = v15;
        }

        while (!v16);
      }

      unint64_t v13 = v15;
    }

    while (v15 != (uint64_t *)&v21);
  }

  sub_10023BF24((uint64_t)&v20, v21);
}

void sub_100523654( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t sub_100523674(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56LL))(*(void *)(a1 + 8));
}

void sub_100523684(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v22 = 0LL;
  unint64_t v23 = a4;
  uint64_t v20 = (uint64_t *)&v21;
  unint64_t v21 = 0LL;
  if ((a3 & 1) != 0)
  {
    uint64_t v8 = a1 + 40;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    sub_1005241B4((uint64_t *)&v17, a1 + 40);
    unsigned int v10 = *(void **)(a1 + 48);
    unsigned int v9 = (void *)(a1 + 48);
    sub_10023BF24(v8, v10);
    *(v9 - 1) = v9;
    void *v9 = 0LL;
    v9[1] = 0LL;
    sub_10023BF24((uint64_t)&v20, v21);
    uint64_t v11 = v18;
    uint64_t v20 = v17;
    unint64_t v21 = v18;
    uint64_t v22 = v19;
    if (v19)
    {
      v18[2] = &v21;
      uint64_t v17 = (uint64_t *)&v18;
      uint64_t v18 = 0LL;
      uint64_t v19 = 0LL;
      uint64_t v11 = 0LL;
    }

    else
    {
      uint64_t v20 = (uint64_t *)&v21;
    }

    sub_10023BF24((uint64_t)&v17, v11);
  }

  else
  {
    sub_1005233F0(a1, a1 + 40, a4, a5);
    uint64_t v17 = (uint64_t *)&v23;
    sub_100029574(&v20, &v23, (uint64_t)&unk_1006C2518, &v17)[5] = a5;
  }

  unint64_t v13 = v20;
  if (v20 != (uint64_t *)&v21)
  {
    do
    {
      if (qword_1008D9250 != -1) {
        dispatch_once(&qword_1008D9250, &stru_10089F8E8);
      }
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)off_1008D9248 + 128LL))( off_1008D9248,  a2,  a3,  v13[4],  v13[5]);
      unint64_t v14 = (uint64_t *)v13[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          unint64_t v14 = (uint64_t *)*v14;
        }

        while (v14);
      }

      else
      {
        do
        {
          uint64_t v15 = (uint64_t *)v13[2];
          BOOL v16 = *v15 == (void)v13;
          unint64_t v13 = v15;
        }

        while (!v16);
      }

      unint64_t v13 = v15;
    }

    while (v15 != (uint64_t *)&v21);
  }

  sub_10023BF24((uint64_t)&v20, v21);
}

void sub_100523834( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t sub_100523854(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64LL))(*(void *)(a1 + 8));
}

void sub_100523864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v24 = 0LL;
  unint64_t v25 = a5;
  uint64_t v22 = (uint64_t *)&v23;
  unint64_t v23 = 0LL;
  if ((a4 & 1) != 0)
  {
    uint64_t v10 = a1 + 64;
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    sub_1005241B4((uint64_t *)&v19, a1 + 64);
    uint64_t v12 = *(void **)(a1 + 72);
    uint64_t v11 = (void *)(a1 + 72);
    sub_10023BF24(v10, v12);
    *(v11 - 1) = v11;
    void *v11 = 0LL;
    v11[1] = 0LL;
    sub_10023BF24((uint64_t)&v22, v23);
    unint64_t v13 = v20;
    uint64_t v22 = v19;
    unint64_t v23 = v20;
    uint64_t v24 = v21;
    if (v21)
    {
      void v20[2] = &v23;
      uint64_t v19 = (uint64_t *)&v20;
      uint64_t v20 = 0LL;
      uint64_t v21 = 0LL;
      unint64_t v13 = 0LL;
    }

    else
    {
      uint64_t v22 = (uint64_t *)&v23;
    }

    sub_10023BF24((uint64_t)&v19, v13);
  }

  else
  {
    sub_1005233F0(a1, a1 + 64, a5, a6);
    uint64_t v19 = (uint64_t *)&v25;
    sub_100029574(&v22, &v25, (uint64_t)&unk_1006C2518, &v19)[5] = a6;
  }

  uint64_t v15 = v22;
  if (v22 != (uint64_t *)&v23)
  {
    do
    {
      if (qword_1008D9250 != -1) {
        dispatch_once(&qword_1008D9250, &stru_10089F8E8);
      }
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)off_1008D9248 + 136LL))( off_1008D9248,  a2,  a3,  a4,  v15[4],  v15[5]);
      BOOL v16 = (uint64_t *)v15[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          BOOL v16 = (uint64_t *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          uint64_t v17 = (uint64_t *)v15[2];
          BOOL v18 = *v17 == (void)v15;
          uint64_t v15 = v17;
        }

        while (!v18);
      }

      uint64_t v15 = v17;
    }

    while (v17 != (uint64_t *)&v23);
  }

  sub_10023BF24((uint64_t)&v22, v23);
}

void sub_100523A24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t sub_100523A44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72LL))(*(void *)(a1 + 8));
}

void sub_100523A54(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v20 = 0LL;
  unint64_t v21 = a3;
  BOOL v18 = (uint64_t *)&v19;
  uint64_t v19 = 0LL;
  if ((a2 & 1) != 0)
  {
    uint64_t v6 = a1 + 88;
    uint64_t v15 = 0LL;
    BOOL v16 = 0LL;
    uint64_t v17 = 0LL;
    sub_1005241B4((uint64_t *)&v15, a1 + 88);
    uint64_t v8 = *(void **)(a1 + 96);
    unint64_t v7 = (void *)(a1 + 96);
    sub_10023BF24(v6, v8);
    *(v7 - 1) = v7;
    *unint64_t v7 = 0LL;
    v7[1] = 0LL;
    sub_10023BF24((uint64_t)&v18, v19);
    unsigned int v9 = v16;
    BOOL v18 = v15;
    uint64_t v19 = v16;
    uint64_t v20 = v17;
    if (v17)
    {
      v16[2] = &v19;
      uint64_t v15 = (uint64_t *)&v16;
      BOOL v16 = 0LL;
      uint64_t v17 = 0LL;
      unsigned int v9 = 0LL;
    }

    else
    {
      BOOL v18 = (uint64_t *)&v19;
    }

    sub_10023BF24((uint64_t)&v15, v9);
  }

  else
  {
    sub_1005233F0(a1, a1 + 88, a3, a4);
    uint64_t v15 = (uint64_t *)&v21;
    sub_100029574(&v18, &v21, (uint64_t)&unk_1006C2518, &v15)[5] = a4;
  }

  uint64_t v11 = v18;
  if (v18 != (uint64_t *)&v19)
  {
    do
    {
      if (qword_1008D9250 != -1) {
        dispatch_once(&qword_1008D9250, &stru_10089F8E8);
      }
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)off_1008D9248 + 144LL))( off_1008D9248,  a2,  v11[4],  v11[5]);
      uint64_t v12 = (uint64_t *)v11[1];
      if (v12)
      {
        do
        {
          unint64_t v13 = v12;
          uint64_t v12 = (uint64_t *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          unint64_t v13 = (uint64_t *)v11[2];
          BOOL v14 = *v13 == (void)v11;
          uint64_t v11 = v13;
        }

        while (!v14);
      }

      uint64_t v11 = v13;
    }

    while (v13 != (uint64_t *)&v19);
  }

  sub_10023BF24((uint64_t)&v18, v19);
}

void sub_100523BF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t sub_100523C14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80LL))(*(void *)(a1 + 8));
}

void sub_100523C24(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v20 = 0LL;
  unint64_t v21 = a3;
  BOOL v18 = (uint64_t *)&v19;
  uint64_t v19 = 0LL;
  if ((a2 & 1) != 0)
  {
    uint64_t v6 = a1 + 112;
    uint64_t v15 = 0LL;
    BOOL v16 = 0LL;
    uint64_t v17 = 0LL;
    sub_1005241B4((uint64_t *)&v15, a1 + 112);
    uint64_t v8 = *(void **)(a1 + 120);
    unint64_t v7 = (void *)(a1 + 120);
    sub_10023BF24(v6, v8);
    *(v7 - 1) = v7;
    *unint64_t v7 = 0LL;
    v7[1] = 0LL;
    sub_10023BF24((uint64_t)&v18, v19);
    unsigned int v9 = v16;
    BOOL v18 = v15;
    uint64_t v19 = v16;
    uint64_t v20 = v17;
    if (v17)
    {
      v16[2] = &v19;
      uint64_t v15 = (uint64_t *)&v16;
      BOOL v16 = 0LL;
      uint64_t v17 = 0LL;
      unsigned int v9 = 0LL;
    }

    else
    {
      BOOL v18 = (uint64_t *)&v19;
    }

    sub_10023BF24((uint64_t)&v15, v9);
  }

  else
  {
    sub_1005233F0(a1, a1 + 112, a3, a4);
    uint64_t v15 = (uint64_t *)&v21;
    sub_100029574(&v18, &v21, (uint64_t)&unk_1006C2518, &v15)[5] = a4;
  }

  uint64_t v11 = v18;
  if (v18 != (uint64_t *)&v19)
  {
    do
    {
      if (qword_1008D9250 != -1) {
        dispatch_once(&qword_1008D9250, &stru_10089F8E8);
      }
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)off_1008D9248 + 152LL))( off_1008D9248,  a2,  v11[4],  v11[5]);
      uint64_t v12 = (uint64_t *)v11[1];
      if (v12)
      {
        do
        {
          unint64_t v13 = v12;
          uint64_t v12 = (uint64_t *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          unint64_t v13 = (uint64_t *)v11[2];
          BOOL v14 = *v13 == (void)v11;
          uint64_t v11 = v13;
        }

        while (!v14);
      }

      uint64_t v11 = v13;
    }

    while (v13 != (uint64_t *)&v19);
  }

  sub_10023BF24((uint64_t)&v18, v19);
}

void sub_100523DC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t sub_100523DE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88LL))(*(void *)(a1 + 8));
}

void sub_100523DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v24 = 0LL;
  unint64_t v25 = a5;
  uint64_t v22 = (uint64_t *)&v23;
  unint64_t v23 = 0LL;
  if ((a4 & 1) != 0)
  {
    uint64_t v10 = a1 + 136;
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    sub_1005241B4((uint64_t *)&v19, a1 + 136);
    uint64_t v12 = *(void **)(a1 + 144);
    uint64_t v11 = (void *)(a1 + 144);
    sub_10023BF24(v10, v12);
    *(v11 - 1) = v11;
    void *v11 = 0LL;
    v11[1] = 0LL;
    sub_10023BF24((uint64_t)&v22, v23);
    unint64_t v13 = v20;
    uint64_t v22 = v19;
    unint64_t v23 = v20;
    uint64_t v24 = v21;
    if (v21)
    {
      void v20[2] = &v23;
      uint64_t v19 = (uint64_t *)&v20;
      uint64_t v20 = 0LL;
      uint64_t v21 = 0LL;
      unint64_t v13 = 0LL;
    }

    else
    {
      uint64_t v22 = (uint64_t *)&v23;
    }

    sub_10023BF24((uint64_t)&v19, v13);
  }

  else
  {
    sub_1005233F0(a1, a1 + 136, a5, a6);
    uint64_t v19 = (uint64_t *)&v25;
    sub_100029574(&v22, &v25, (uint64_t)&unk_1006C2518, &v19)[5] = a6;
  }

  uint64_t v15 = v22;
  if (v22 != (uint64_t *)&v23)
  {
    do
    {
      if (qword_1008D9250 != -1) {
        dispatch_once(&qword_1008D9250, &stru_10089F8E8);
      }
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)off_1008D9248 + 160LL))( off_1008D9248,  a2,  a3,  a4,  v15[4],  v15[5]);
      BOOL v16 = (uint64_t *)v15[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          BOOL v16 = (uint64_t *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          uint64_t v17 = (uint64_t *)v15[2];
          BOOL v18 = *v17 == (void)v15;
          uint64_t v15 = v17;
        }

        while (!v18);
      }

      uint64_t v15 = v17;
    }

    while (v17 != (uint64_t *)&v23);
  }

  sub_10023BF24((uint64_t)&v22, v23);
}

void sub_100523FB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t sub_100523FD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96LL))(*(void *)(a1 + 8));
}

void sub_100523FE4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v22 = 0LL;
  unint64_t v23 = a4;
  uint64_t v20 = (uint64_t *)&v21;
  uint64_t v21 = 0LL;
  if ((a3 & 1) != 0)
  {
    uint64_t v8 = a1 + 160;
    uint64_t v17 = 0LL;
    BOOL v18 = 0LL;
    uint64_t v19 = 0LL;
    sub_1005241B4((uint64_t *)&v17, a1 + 160);
    uint64_t v10 = *(void **)(a1 + 168);
    unsigned int v9 = (void *)(a1 + 168);
    sub_10023BF24(v8, v10);
    *(v9 - 1) = v9;
    void *v9 = 0LL;
    v9[1] = 0LL;
    sub_10023BF24((uint64_t)&v20, v21);
    uint64_t v11 = v18;
    uint64_t v20 = v17;
    uint64_t v21 = v18;
    uint64_t v22 = v19;
    if (v19)
    {
      v18[2] = &v21;
      uint64_t v17 = (uint64_t *)&v18;
      BOOL v18 = 0LL;
      uint64_t v19 = 0LL;
      uint64_t v11 = 0LL;
    }

    else
    {
      uint64_t v20 = (uint64_t *)&v21;
    }

    sub_10023BF24((uint64_t)&v17, v11);
  }

  else
  {
    sub_1005233F0(a1, a1 + 160, a4, a5);
    uint64_t v17 = (uint64_t *)&v23;
    sub_100029574(&v20, &v23, (uint64_t)&unk_1006C2518, &v17)[5] = a5;
  }

  unint64_t v13 = v20;
  if (v20 != (uint64_t *)&v21)
  {
    do
    {
      if (qword_1008D9250 != -1) {
        dispatch_once(&qword_1008D9250, &stru_10089F8E8);
      }
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)off_1008D9248 + 168LL))( off_1008D9248,  a2,  a3,  v13[4],  v13[5]);
      BOOL v14 = (uint64_t *)v13[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          BOOL v14 = (uint64_t *)*v14;
        }

        while (v14);
      }

      else
      {
        do
        {
          uint64_t v15 = (uint64_t *)v13[2];
          BOOL v16 = *v15 == (void)v13;
          unint64_t v13 = v15;
        }

        while (!v16);
      }

      unint64_t v13 = v15;
    }

    while (v15 != (uint64_t *)&v21);
  }

  sub_10023BF24((uint64_t)&v20, v21);
}

void sub_100524194( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t *sub_1005241B4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_100267F48(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1005241F0(_Unwind_Exception *a1)
{
}

void sub_100524208(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_100271B18((uint64_t)v1);
  off_1008D9248 = v1;
}

void sub_100524238(_Unwind_Exception *a1)
{
}

uint64_t sub_10052424C(uint64_t a1)
{
  *(void *)sub_10041BFD4(a1, "RemoteService", 8) = &off_10089F918;
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_10089FA08);
  }
  sub_10041C264(a1, (uint64_t)off_1008D9248);
  return a1;
}

void sub_1005242C0(_Unwind_Exception *a1)
{
}

void sub_1005242DC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10041C0C4(a1);
  operator delete(v1);
}

uint64_t sub_1005242F0(uint64_t a1, uint64_t a2)
{
  __int128 v9 = xmmword_1006C3CB0;
  __int128 v10 = xmmword_1006C3CA0;
  __int128 v8 = xmmword_1006C2550;
  if (sub_1003D518C(a2))
  {
    if (sub_1003D2E50(a2, &v10, 9u))
    {
      int v4 = 4;
      if (sub_1003D2E50(a2, &v9, 9u))
      {
        if (sub_1003D2E50(a2, &v8, 9u)) {
          int v4 = 4;
        }
        else {
          int v4 = 1;
        }
      }
    }

    else
    {
      int v4 = 1;
    }
  }

  else
  {
    int v4 = 0;
  }

  unsigned int v5 = *(_DWORD *)(a1 + 32);
  uint64_t v11 = 0LL;
  sub_1000B0400((uint64_t)&v11);
  *(void *)&__int128 v7 = (int)v11;
  *((void *)&v7 + 1) = SWORD2(v11);
  return sub_1003D1FC4(a2, v5, v4, &v7, 0);
}

void sub_1005243E0(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_100271B18((uint64_t)v1);
  off_1008D9248 = v1;
}

void sub_100524410(_Unwind_Exception *a1)
{
}

uint64_t sub_100524424(unint64_t a1, _OWORD *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v10 = 0LL;
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FA28);
  }
  uint64_t v8 = sub_1005291C0(off_1008D67A0, a1, &v10, a4);
  if (!(_DWORD)v8) {
    sub_100525724(v10, (unint64_t *)*a4, a2, a3);
  }
  return v8;
}

uint64_t sub_1005244C0(unint64_t *a1)
{
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FA28);
  }
  sub_1005294E8(off_1008D67A0, *a1);
  *a1 = 0LL;
  return 0LL;
}

uint64_t sub_10052451C(unint64_t a1)
{
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FA28);
  }
  uint64_t v2 = sub_1005297C0(off_1008D67A0, a1);
  if (v2) {
    return sub_1005259BC(v2, a1);
  }
  else {
    return 7LL;
  }
}

uint64_t sub_100524588(unint64_t a1)
{
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FA28);
  }
  uint64_t v2 = sub_1005297C0(off_1008D67A0, a1);
  if (v2) {
    return sub_100525590(v2, a1);
  }
  else {
    return 7LL;
  }
}

uint64_t sub_1005245F4(uint64_t a1)
{
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FA28);
  }
  uint64_t v2 = sub_1005297C0(off_1008D67A0, a1);
  if (v2) {
    return sub_100526E6C(v2);
  }
  else {
    return 7LL;
  }
}

uint64_t sub_10052465C(uint64_t a1, unint64_t a2, char *a3)
{
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FA28);
  }
  uint64_t v6 = sub_1005297C0(off_1008D67A0, a1);
  if (!v6) {
    return 7LL;
  }
  uint64_t v7 = v6;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089FA48);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v8) {
    return 7LL;
  }
  unint64_t v9 = v8;
  __n128 v13 = 0uLL;
  char v14 = 0;
  sub_100532DC0((uint64_t)&v13);
  if (*a3) {
    sub_100532E6C((char *)&v13, a3);
  }
  uint64_t v10 = sub_100526EC0(v7, v9, &v13);
  nullsub_63(&v13, v11);
  return v10;
}

void sub_100524788(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1005247A4(uint64_t a1, unint64_t a2, int a3)
{
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FA28);
  }
  uint64_t v6 = sub_1005297C0(off_1008D67A0, a1);
  if (!v6) {
    return 7LL;
  }
  uint64_t v7 = v6;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089FA48);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (v8) {
    return sub_1005270E0(v7, v8, a3);
  }
  else {
    return 7LL;
  }
}

uint64_t sub_10052486C(uint64_t a1, unint64_t a2)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10089FA68);
  }
  *(void *)uu = 0LL;
  uint64_t v34 = 0LL;
  sub_1005CCD30((uint64_t)off_1008D5F28, a2, (uint64_t)uu);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089FA48);
  }
  int v4 = (unsigned __int8 *)sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FA28);
  }
  uint64_t v5 = sub_1005297C0(off_1008D67A0, a1);
  if (!v5)
  {
    uint64_t v21 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "PairingAgent is NULL", v27, 2u);
    }

    return 7LL;
  }

  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_10089FA88);
  }
  uint64_t v6 = sub_100496954((void *)qword_1008D61A0, v5);
  BOOL v7 = sub_1003D0670((uint64_t)v4);
  if (v6) {
    BOOL v8 = v7;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    goto LABEL_35;
  }
  if (sub_100487C4C())
  {
    CTGreenTeaOsLogHandle = (os_log_s *)getCTGreenTeaOsLogHandle(qword_1008F7720);
    uint64_t v10 = CTGreenTeaOsLogHandle;
    if (CTGreenTeaOsLogHandle)
    {
      if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
      {
        sub_100494958(v6, (uint64_t)v27);
        int v11 = v28;
        uint64_t v12 = *(uint8_t **)v27;
        sub_1003CF00C((uint64_t)v4, __p);
        __n128 v13 = v27;
        if (v11 < 0) {
          __n128 v13 = v12;
        }
        if (v26 >= 0) {
          char v14 = __p;
        }
        else {
          char v14 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v30 = v13;
        __int16 v31 = 2082;
        uint8_t v32 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Session %{public}s is asking to delete pairing for device %{public}s",  buf,  0x16u);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
        if (v28 < 0) {
          operator delete(*(void **)v27);
        }
      }
    }
  }

  uint64_t v15 = (os_log_s *)qword_1008F7578;
  if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_35;
  }
  sub_100494958(v6, (uint64_t)v27);
  int v16 = v28;
  uint64_t v17 = *(uint8_t **)v27;
  sub_1003CF00C((uint64_t)v4, __p);
  BOOL v18 = v27;
  if (v16 < 0) {
    BOOL v18 = v17;
  }
  if (v26 >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  *(_DWORD *)buf = 136446466;
  uint64_t v30 = v18;
  __int16 v31 = 2082;
  uint8_t v32 = v19;
  _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s is asking to delete pairing for device %{public}s",  buf,  0x16u);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0)
  {
    operator delete(*(void **)v27);
    if (v4) {
      return sub_100526CF0(v5, v4);
    }
  }

  else
  {
LABEL_35:
    if (v4) {
      return sub_100526CF0(v5, v4);
    }
  }

  if (uuid_is_null(uu)) {
    return 7LL;
  }
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_10089FAA8);
  }
  uint64_t v22 = qword_1008D5F18;
  unint64_t v23 = sub_100241F94(uu);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
  sub_100625C0C(v22, v24);

  return 0LL;
}

void sub_100524C3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100524C70(uint64_t a1, int a2)
{
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FA28);
  }
  if (!sub_1005297C0(off_1008D67A0, a1)) {
    return 7LL;
  }
  if (a2 > 3) {
    return 3LL;
  }
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_10089FAC8);
  }
  return sub_100536048((uint64_t)off_1008D67B0, a2);
}

uint64_t sub_100524D20(uint64_t a1, unint64_t a2)
{
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FA28);
  }
  uint64_t v4 = sub_1005297C0(off_1008D67A0, a1);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089FA48);
  }
  unint64_t v5 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v4) {
    return 7LL;
  }
  unint64_t v6 = v5;
  if (!v5) {
    return 7LL;
  }
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_10089FAC8);
  }
  return sub_100536BB4((uint64_t)off_1008D67B0, v6);
}

uint64_t sub_100524E04(uint64_t a1, unint64_t a2, uint64_t a3, __n128 *a4, uint64_t a5, uint64_t a6)
{
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FA28);
  }
  uint64_t v12 = sub_1005297C0(off_1008D67A0, a1);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089FA48);
  }
  unint64_t v13 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  char v14 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 141560835;
    uint64_t v17 = 1752392040LL;
    __int16 v18 = 1041;
    int v19 = 16;
    __int16 v20 = 2097;
    uint64_t v21 = a3;
    __int16 v22 = 2160;
    uint64_t v23 = 1752392040LL;
    __int16 v24 = 1041;
    int v25 = 16;
    __int16 v26 = 2097;
    int v27 = a4;
    __int16 v28 = 2160;
    uint64_t v29 = 1752392040LL;
    __int16 v30 = 1041;
    int v31 = 16;
    __int16 v32 = 2097;
    uint64_t v33 = a5;
    __int16 v34 = 2160;
    uint64_t v35 = 1752392040LL;
    __int16 v36 = 1041;
    int v37 = 16;
    __int16 v38 = 2097;
    uint64_t v39 = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "BTPairingAgentSetOOBDataForDevice C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:%{private, ma sk.hash}.16P R256:%{private, mask.hash}.16P",  (uint8_t *)&v16,  0x6Au);
  }

  uint64_t result = 7LL;
  if (v12 && v13)
  {
    if (qword_1008D67B8 != -1) {
      dispatch_once(&qword_1008D67B8, &stru_10089FAC8);
    }
    return sub_100536788((uint64_t)off_1008D67B0, v13, a3, a4, a5, a6);
  }

  return result;
}

uint64_t sub_10052500C(uint64_t a1)
{
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FA28);
  }
  if (!sub_1005297C0(off_1008D67A0, a1)) {
    return 7LL;
  }
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_10089FAC8);
  }
  return sub_100536CE4((uint64_t)off_1008D67B0);
}

void sub_1005250A4(id a1)
{
  uint64_t v1 = operator new(0x260uLL);
  sub_1005285C8((uint64_t)v1);
  off_1008D67A0 = v1;
}

void sub_1005250D4(_Unwind_Exception *a1)
{
}

void sub_1005250E8(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_100525118(_Unwind_Exception *a1)
{
}

void sub_10052512C(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_10052515C(_Unwind_Exception *a1)
{
}

void sub_100525170(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_1005251A0(_Unwind_Exception *a1)
{
}

void sub_1005251B4(id a1)
{
  uint64_t v1 = operator new(0xEB0uLL);
  sub_10061991C();
  qword_1008D5F18 = (uint64_t)v1;
}

void sub_1005251E4(_Unwind_Exception *a1)
{
}

void sub_1005251F8(id a1)
{
  uint64_t v1 = operator new(0x198uLL);
  sub_100534AB0();
  off_1008D67B0 = v1;
}

void sub_100525228(_Unwind_Exception *a1)
{
}

uint64_t sub_10052523C(uint64_t result)
{
  *(void *)uint64_t result = 0LL;
  *(void *)(result + 8) = 0LL;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

__n128 sub_100525248(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  return result;
}

uint64_t sub_10052525C(uint64_t result, _OWORD *a2, unsigned int a3)
{
  *(_OWORD *)__n128 result = *a2;
  if (a3 <= 8) {
    *(_DWORD *)(result + 16) = a3;
  }
  return result;
}

__n128 sub_100525274(__n128 *a1, __n128 *a2, unsigned __int32 a3)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u32[0] = a3;
  return result;
}

uint64_t sub_100525284(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_10052528C(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 16);
  if (v1 >= 9) {
    return 4LL;
  }
  else {
    return v1;
  }
}

BOOL sub_1005252A0(_BYTE *a1)
{
  if (*a1) {
    return 0LL;
  }
  unint64_t v2 = 0LL;
  do
  {
    unint64_t v3 = v2;
    if (v2 == 15) {
      break;
    }
    ++v2;
  }

  while (!a1[v3 + 1]);
  return v3 > 0xE;
}

uint64_t sub_1005252DC()
{
  return 16LL;
}

uint64_t sub_1005252E4(uint64_t a1)
{
  *(void *)a1 = off_10089FAF8;
  sub_100242DC4(a1 + 8);
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 112) = a1 + 120;
  *(_BYTE *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  sub_100242DC4(a1 + 136);
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 208) = 0LL;
  *(void *)(a1 + 240) = 0LL;
  *(void *)(a1 + 232) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 224) = a1 + 232;
  return a1;
}

void sub_100525378(_Unwind_Exception *a1)
{
}

uint64_t sub_1005253A8(uint64_t a1)
{
  *(void *)a1 = off_10089FAF8;
  sub_100525590(a1, 0LL);
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, a1 + 8);
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3 != (void *)(a1 + 96))
  {
    do
    {
      uint64_t v4 = v3[5];
      if (v4)
      {
        unint64_t v5 = (void *)nullsub_63(v4, v2);
        operator delete(v5);
      }

      unint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          BOOL v7 = v6;
          unint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          BOOL v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          uint64_t v3 = v7;
        }

        while (!v8);
      }

      uint64_t v3 = v7;
    }

    while (v7 != (void *)(a1 + 96));
  }

  unint64_t v9 = *(void **)(a1 + 112);
  if (v9 != (void *)(a1 + 120))
  {
    do
    {
      uint64_t v10 = (void **)v9[5];
      if (v10)
      {
        sub_100527C44(v9[5], v10[1]);
        operator delete(v10);
      }

      int v11 = (void *)v9[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          int v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          uint64_t v12 = (void *)v9[2];
          BOOL v8 = *v12 == (void)v9;
          unint64_t v9 = v12;
        }

        while (!v8);
      }

      unint64_t v9 = v12;
    }

    while (v12 != (void *)(a1 + 120));
  }

  sub_10023BF24(a1 + 224, *(void **)(a1 + 232));
  *(void *)(a1 + 224) = a1 + 232;
  *(void *)(a1 + 232) = 0LL;
  *(void *)(a1 + 240) = 0LL;
  sub_100242FAC((uint64_t)v15);
  sub_10023BF24(a1 + 224, *(void **)(a1 + 232));
  unint64_t v13 = *(void **)(a1 + 200);
  if (v13)
  {
    *(void *)(a1 + 208) = v13;
    operator delete(v13);
  }

  sub_100242E28(a1 + 136);
  sub_10023BF24(a1 + 112, *(void **)(a1 + 120));
  sub_10023BF24(a1 + 88, *(void **)(a1 + 96));
  sub_100242E28(a1 + 8);
  return a1;
}

void sub_10052553C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 200);
  if (v3)
  {
    *(void *)(v1 + 208) = v3;
    operator delete(v3);
  }

  sub_100242E28(v1 + 136);
  sub_10023BF24(v1 + 112, *(void **)(v1 + 120));
  sub_10023BF24(v1 + 88, *(void **)(v1 + 96));
  sub_100242E28(v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100525590(uint64_t a1, unint64_t a2)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 8);
  if (*(_BYTE *)(a1 + 72))
  {
    if (a2)
    {
      uint64_t v4 = *(void **)(a1 + 232);
      if (v4)
      {
        uint64_t v5 = a1 + 232;
        do
        {
          unint64_t v6 = v4[4];
          BOOL v7 = v6 >= a2;
          if (v6 >= a2) {
            BOOL v8 = v4;
          }
          else {
            BOOL v8 = v4 + 1;
          }
          if (v7) {
            uint64_t v5 = (uint64_t)v4;
          }
          uint64_t v4 = (void *)*v8;
        }

        while (*v8);
        if (v5 != a1 + 232 && *(void *)(v5 + 32) <= a2 && *(_BYTE *)(v5 + 40)) {
          *(_BYTE *)(v5 + 40) = 0;
        }
      }
    }

    else
    {
      unint64_t v9 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Stopping pairing agent...", v11, 2u);
      }

      if (*(void *)(a1 + 80))
      {
        sub_100242F54((uint64_t)v12);
        sub_100525DE8(a1, 161);
        sub_100242ECC((uint64_t)v12);
      }

      *(_BYTE *)(a1 + 72) = 0;
      sub_100242F54((uint64_t)v12);
      if (qword_1008D67A8 != -1) {
        dispatch_once(&qword_1008D67A8, &stru_10089FC48);
      }
      sub_10052DAD4((uint64_t)off_1008D67A0);
    }

    sub_100525AA8(a1, 1u, 0LL, 0, a2);
  }

  sub_100242FAC((uint64_t)v12);
  return 0LL;
}

void sub_1005256F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100525710(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1005253A8(a1);
  operator delete(v1);
}

uint64_t sub_100525724(uint64_t a1, unint64_t *a2, _OWORD *a3, uint64_t a4)
{
  v17[1] = 0LL;
  __int16 v18 = a2;
  v17[0] = 0LL;
  sub_100242F28((uint64_t)v17, a1 + 8);
  v16[0] = 0LL;
  v16[1] = 0LL;
  sub_100242F28((uint64_t)v16, a1 + 136);
  unint64_t v9 = *(unint64_t ***)(a1 + 200);
  unint64_t v8 = *(void *)(a1 + 208);
  __int128 v10 = a3[1];
  v25[0] = *a3;
  v25[1] = v10;
  void v25[2] = a3[2];
  if (v9 != (unint64_t **)v8)
  {
    while (*v9 != a2 || memcmp(v25, v9 + 1, 0x30uLL))
    {
      v9 += 9;
    }
  }

  if (v9 == (unint64_t **)v8)
  {
LABEL_7:
    __int128 v11 = a3[1];
    __int128 v20 = *a3;
    __int128 v21 = v11;
    __int128 v22 = a3[2];
    int v19 = a2;
    int v23 = -1;
    uint64_t v24 = a4;
    if (v8 >= *(void *)(a1 + 216))
    {
      uint64_t v14 = sub_100527C8C((uint64_t *)(a1 + 200), (uint64_t)&v19);
    }

    else
    {
      *(void *)unint64_t v8 = a2;
      __int128 v12 = v20;
      __int128 v13 = v21;
      *(_OWORD *)(v8 + 40) = v22;
      *(_OWORD *)(v8 + 24) = v13;
      *(_OWORD *)(v8 + 8) = v12;
      *(_DWORD *)(v8 + 56) = -1;
      *(void *)(v8 + 64) = a4;
      uint64_t v14 = v8 + 72;
    }

    *(void *)(a1 + 208) = v14;
  }

  int v19 = (unint64_t *)&v18;
  *((_BYTE *)sub_100404694((uint64_t **)(a1 + 224), (unint64_t *)&v18, (uint64_t)&unk_1006C2518, &v19) + 40) = 0;
  sub_100242FAC((uint64_t)v16);
  sub_100242FAC((uint64_t)v17);
  return 0LL;
}

void sub_1005258A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1005258CC(uint64_t a1, unint64_t a2)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1 + 136);
  uint64_t v4 = sub_100527EF8(*(void *)(a1 + 200), *(void *)(a1 + 208), a2);
  sub_100527EB4(a1 + 200, v4, *(void *)(a1 + 208));
  uint64_t v5 = *(void **)(a1 + 232);
  if (v5)
  {
    uint64_t v6 = a1 + 232;
    do
    {
      unint64_t v7 = v5[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        unint64_t v9 = v5;
      }
      else {
        unint64_t v9 = v5 + 1;
      }
      if (v8) {
        uint64_t v6 = (uint64_t)v5;
      }
      uint64_t v5 = (void *)*v9;
    }

    while (*v9);
    if (v6 != a1 + 232 && *(void *)(v6 + 32) <= a2)
    {
      if (*(_BYTE *)(v6 + 40)) {
        sub_100525590(a1, a2);
      }
      sub_1001FDBCC((uint64_t **)(a1 + 224), (uint64_t *)v6);
      operator delete((void *)v6);
    }
  }

  sub_100242FAC((uint64_t)v11);
  return 0LL;
}

void sub_1005259A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005259BC(uint64_t a1, unint64_t a2)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1 + 8);
  uint64_t v4 = *(void **)(a1 + 232);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = a1 + 232;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      BOOL v8 = v4;
    }
    else {
      BOOL v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    uint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 != a1 + 232 && *(void *)(v5 + 32) <= a2)
  {
    if (*(_BYTE *)(v5 + 40))
    {
      uint64_t v9 = 160LL;
    }

    else
    {
      *(_BYTE *)(v5 + 40) = 1;
      if (!*(_BYTE *)(a1 + 72))
      {
        *(_BYTE *)(a1 + 72) = 1;
        *(void *)(a1 + 80) = 0LL;
      }

      sub_100242F54((uint64_t)v11);
      sub_100525AA8(a1, 0, 0LL, 0, a2);
      uint64_t v9 = 0LL;
    }
  }

  else
  {
LABEL_12:
    uint64_t v9 = 7LL;
  }

  sub_100242FAC((uint64_t)v11);
  return v9;
}

void sub_100525A94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100525AA8(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a2 > 3) {
    __int128 v10 = "unknown";
  }
  else {
    __int128 v10 = off_10089FCC8[a2];
  }
  __int128 v11 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = v10;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Sending '%{public}s' event with result %d",  buf,  0x12u);
  }

  v25[0] = 0LL;
  v25[1] = 0LL;
  sub_100242F28((uint64_t)v25, a1 + 136);
  uint64_t v12 = *(void *)(a1 + 200);
  uint64_t v13 = *(void *)(a1 + 208);
  if (v12 == v13)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068F4D4();
    }
    uint64_t v23 = 106LL;
  }

  else
  {
    memset(buf, 0, sizeof(buf));
    sub_10052828C((char *)buf, v12, v13, 0x8E38E38E38E38E39LL * ((v13 - v12) >> 3));
    sub_100242F54((uint64_t)v25);
    uint64_t v14 = *(unint64_t **)buf;
    if (*(void *)buf != *(void *)&buf[8])
    {
      do
      {
        if (v14[1] && (!a5 || *v14 == a5))
        {
          if (a3)
          {
            if (qword_1008D5F50 != -1) {
              dispatch_once(&qword_1008D5F50, &stru_10089FC68);
            }
            unint64_t v15 = sub_1003FEFA8((uint64_t)off_1008D5F48, *v14, a3);
          }

          else
          {
            unint64_t v15 = 4294901761LL;
          }

          if (qword_1008D61A8 != -1) {
            dispatch_once(&qword_1008D61A8, &stru_10089FC88);
          }
          uint64_t v16 = sub_10049729C(qword_1008D61A0, *v14);
          if (v16 && v15)
          {
            if (qword_1008D9138 != -1) {
              dispatch_once(&qword_1008D9138, &stru_10089FCA8);
            }
            uint64_t v17 = off_1008D9130;
            __int16 v18 = operator new(0x48uLL);
            unint64_t v20 = *v14;
            unint64_t v19 = v14[1];
            unint64_t v21 = v14[8];
            v18[4] = 1;
            *((void *)v18 + 2) = v16;
            *((void *)v18 + 3) = v19;
            *(void *)__int16 v18 = &off_10089FB18;
            *((void *)v18 + 4) = v21;
            *((void *)v18 + 5) = v20;
            *((_DWORD *)v18 + 12) = a2;
            *((void *)v18 + 7) = v15;
            *((_DWORD *)v18 + 16) = a4;
            sub_1004946C4((uint64_t)v17, v18);
          }

          else
          {
            sub_100242ECC((uint64_t)v25);
            uint64_t v22 = sub_100527EF8(*(void *)(a1 + 200), *(void *)(a1 + 208), *v14);
            sub_100527EB4(a1 + 200, v22, *(void *)(a1 + 208));
            sub_100242F54((uint64_t)v25);
          }
        }

        v14 += 9;
      }

      while (v14 != *(unint64_t **)&buf[8]);
      uint64_t v14 = *(unint64_t **)buf;
    }

    if (v14)
    {
      *(void *)&uint8_t buf[8] = v14;
      operator delete(v14);
    }

    uint64_t v23 = 0LL;
  }

  sub_100242FAC((uint64_t)v25);
  return v23;
}

void sub_100525DAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }

  sub_100242FAC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100525DE8(uint64_t a1, int a2)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, a1 + 8);
  if (*(_BYTE *)(a1 + 72))
  {
    uint64_t v4 = *(void *)(a1 + 80);
    if (v4)
    {
      *(void *)(a1 + 80) = 0LL;
      sub_100242F54((uint64_t)v9);
      uint64_t v5 = sub_100525AA8(a1, 3u, v4, a2, 0LL);
    }

    else
    {
      uint64_t v5 = 0LL;
    }
  }

  else
  {
    unint64_t v6 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Pairing agent is not started - ignoring pairing attempt",  v8,  2u);
    }

    uint64_t v5 = 162LL;
  }

  sub_100242FAC((uint64_t)v9);
  return v5;
}

void sub_100525EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100525ED4(uint64_t a1, uint64_t a2)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, a1 + 8);
  if (*(_BYTE *)(a1 + 72))
  {
    uint64_t v4 = *(void *)(a1 + 80);
    if (v4) {
      BOOL v5 = v4 == a2;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      sub_100242F54((uint64_t)v13);
      unint64_t v6 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(*(void *)(a1 + 80), __p);
        if (v12 >= 0) {
          BOOL v7 = __p;
        }
        else {
          BOOL v7 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136446210;
        unint64_t v15 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Pairing already in progress for device %{public}s",  buf,  0xCu);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
      }

      sub_100525DE8(a1, 161);
      sub_100242ECC((uint64_t)v13);
    }

    *(void *)(a1 + 80) = a2;
    sub_100242F54((uint64_t)v13);
    uint64_t v8 = sub_100525AA8(a1, 2u, a2, 0, 0LL);
  }

  else
  {
    uint64_t v9 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Pairing agent is not started - ignoring pairing attempt",  (uint8_t *)__p,  2u);
    }

    uint64_t v8 = 162LL;
  }

  sub_100242FAC((uint64_t)v13);
  return v8;
}

void sub_100526074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100526094(uint64_t a1)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 8);
  if (!*(_BYTE *)(a1 + 72))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068F500();
    }
    goto LABEL_8;
  }

  uint64_t v2 = *(void *)(a1 + 80);
  if (!v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068F52C();
    }
LABEL_8:
    uint64_t v3 = 162LL;
    goto LABEL_9;
  }

  sub_100242F54((uint64_t)v5);
  uint64_t v3 = sub_10052616C(a1, v2, 4);
LABEL_9:
  sub_100242FAC((uint64_t)v5);
  return v3;
}

void sub_100526158( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10052616C(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v6 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, &__p);
    BOOL v7 = v23 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sending 'pincode request' pairing event for device %{public}s",  buf,  0xCu);
    if (SHIBYTE(v23) < 0) {
      operator delete(__p);
    }
  }

  *(_OWORD *)buf = 0uLL;
  sub_100242F28((uint64_t)buf, a1 + 136);
  uint64_t v8 = *(void *)(a1 + 200);
  uint64_t v9 = *(void *)(a1 + 208);
  if (v8 == v9)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068F4D4();
    }
    uint64_t v19 = 106LL;
  }

  else
  {
    __p = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    sub_10052828C((char *)&__p, v8, v9, 0x8E38E38E38E38E39LL * ((v9 - v8) >> 3));
    sub_100242F54((uint64_t)buf);
    __int128 v10 = (unint64_t *)__p;
    if (__p != v22)
    {
      do
      {
        if (v10[2])
        {
          if (a2)
          {
            if (qword_1008D5F50 != -1) {
              dispatch_once(&qword_1008D5F50, &stru_10089FC68);
            }
            unint64_t v11 = sub_1003FEFA8((uint64_t)off_1008D5F48, *v10, a2);
          }

          else
          {
            unint64_t v11 = 4294901761LL;
          }

          if (qword_1008D61A8 != -1) {
            dispatch_once(&qword_1008D61A8, &stru_10089FC88);
          }
          uint64_t v12 = sub_10049729C(qword_1008D61A0, *v10);
          if (v12 && v11)
          {
            if (qword_1008D9138 != -1) {
              dispatch_once(&qword_1008D9138, &stru_10089FCA8);
            }
            uint64_t v13 = off_1008D9130;
            uint64_t v14 = operator new(0x40uLL);
            unint64_t v15 = v10[2];
            unint64_t v16 = *v10;
            unint64_t v17 = v10[8];
            v14[4] = 1;
            *((void *)v14 + 2) = v12;
            *((void *)v14 + 3) = v15;
            *(void *)uint64_t v14 = &off_10089FB58;
            *((void *)v14 + 4) = v17;
            *((void *)v14 + 5) = v16;
            *((void *)v14 + 6) = v11;
            *((_BYTE *)v14 + 56) = a3;
            sub_1004946C4((uint64_t)v13, v14);
          }

          else
          {
            sub_100242ECC((uint64_t)buf);
            uint64_t v18 = sub_100527EF8(*(void *)(a1 + 200), *(void *)(a1 + 208), *v10);
            sub_100527EB4(a1 + 200, v18, *(void *)(a1 + 208));
            sub_100242F54((uint64_t)buf);
          }
        }

        v10 += 9;
      }

      while (v10 != v22);
      __int128 v10 = (unint64_t *)__p;
    }

    if (v10)
    {
      uint64_t v22 = v10;
      operator delete(v10);
    }

    uint64_t v19 = 0LL;
  }

  sub_100242FAC((uint64_t)buf);
  return v19;
}

void sub_10052645C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100526498(uint64_t a1, int a2, int a3)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, a1 + 8);
  if (!*(_BYTE *)(a1 + 72))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068F500();
    }
    goto LABEL_8;
  }

  uint64_t v6 = *(void *)(a1 + 80);
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068F52C();
    }
LABEL_8:
    uint64_t v7 = 162LL;
    goto LABEL_9;
  }

  sub_100242F54((uint64_t)v9);
  uint64_t v7 = sub_100526584(a1, v6, a2, a3);
LABEL_9:
  sub_100242FAC((uint64_t)v9);
  return v7;
}

void sub_100526570( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100526584(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = a4 ? "numeric comparison" : "user confirmation";
    sub_1003CF00C(a2, &__p);
    uint64_t v9 = v26 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Sending '%{public}s request' pairing event for device %{public}s",  buf,  0x16u);
    if (SHIBYTE(v26) < 0) {
      operator delete(__p);
    }
  }

  *(void *)buf = 0LL;
  *(void *)&uint8_t buf[8] = 0LL;
  sub_100242F28((uint64_t)buf, a1 + 136);
  uint64_t v10 = *(void *)(a1 + 200);
  uint64_t v11 = *(void *)(a1 + 208);
  if (v10 == v11)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068F4D4();
    }
    uint64_t v21 = 106LL;
  }

  else
  {
    __p = 0LL;
    int v25 = 0LL;
    uint64_t v26 = 0LL;
    sub_10052828C((char *)&__p, v10, v11, 0x8E38E38E38E38E39LL * ((v11 - v10) >> 3));
    sub_100242F54((uint64_t)buf);
    uint64_t v12 = (unint64_t *)__p;
    if (__p != v25)
    {
      do
      {
        if (v12[2])
        {
          if (a2)
          {
            if (qword_1008D5F50 != -1) {
              dispatch_once(&qword_1008D5F50, &stru_10089FC68);
            }
            unint64_t v13 = sub_1003FEFA8((uint64_t)off_1008D5F48, *v12, a2);
          }

          else
          {
            unint64_t v13 = 4294901761LL;
          }

          if (qword_1008D61A8 != -1) {
            dispatch_once(&qword_1008D61A8, &stru_10089FC88);
          }
          uint64_t v14 = sub_10049729C(qword_1008D61A0, *v12);
          if (v14 && v13)
          {
            if (qword_1008D9138 != -1) {
              dispatch_once(&qword_1008D9138, &stru_10089FCA8);
            }
            unint64_t v15 = off_1008D9130;
            unint64_t v16 = operator new(0x40uLL);
            unint64_t v17 = v12[4];
            unint64_t v18 = *v12;
            unint64_t v19 = v12[8];
            v16[4] = 1;
            *((void *)v16 + 2) = v14;
            *((void *)v16 + 3) = v17;
            *(void *)unint64_t v16 = &off_10089FB98;
            *((void *)v16 + 4) = v19;
            *((void *)v16 + 5) = v18;
            *((void *)v16 + 6) = v13;
            *((_DWORD *)v16 + 14) = a3;
            *((_BYTE *)v16 + 60) = a4;
            sub_1004946C4((uint64_t)v15, v16);
          }

          else
          {
            sub_100242ECC((uint64_t)buf);
            uint64_t v20 = sub_100527EF8(*(void *)(a1 + 200), *(void *)(a1 + 208), *v12);
            sub_100527EB4(a1 + 200, v20, *(void *)(a1 + 208));
            sub_100242F54((uint64_t)buf);
          }
        }

        v12 += 9;
      }

      while (v12 != v25);
      uint64_t v12 = (unint64_t *)__p;
    }

    if (v12)
    {
      int v25 = v12;
      operator delete(v12);
    }

    uint64_t v21 = 0LL;
  }

  sub_100242FAC((uint64_t)buf);
  return v21;
}

void sub_1005268A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005268E0(uint64_t a1, int a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1 + 8);
  if (!*(_BYTE *)(a1 + 72))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068F500();
    }
    goto LABEL_8;
  }

  uint64_t v4 = *(void *)(a1 + 80);
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068F52C();
    }
LABEL_8:
    uint64_t v5 = 162LL;
    goto LABEL_9;
  }

  sub_100242F54((uint64_t)v7);
  uint64_t v5 = sub_1005269C4(a1, v4, a2);
LABEL_9:
  sub_100242FAC((uint64_t)v7);
  return v5;
}

void sub_1005269B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005269C4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, &__p);
    uint64_t v7 = v23 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sending 'passkey display request' pairing event for device %{public}s",  buf,  0xCu);
    if (SHIBYTE(v23) < 0) {
      operator delete(__p);
    }
  }

  *(_OWORD *)buf = 0uLL;
  sub_100242F28((uint64_t)buf, a1 + 136);
  uint64_t v8 = *(void *)(a1 + 200);
  uint64_t v9 = *(void *)(a1 + 208);
  if (v8 == v9)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068F4D4();
    }
    uint64_t v19 = 106LL;
  }

  else
  {
    __p = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    sub_10052828C((char *)&__p, v8, v9, 0x8E38E38E38E38E39LL * ((v9 - v8) >> 3));
    sub_100242F54((uint64_t)buf);
    uint64_t v10 = (unint64_t *)__p;
    if (__p != v22)
    {
      do
      {
        if (v10[2])
        {
          if (a2)
          {
            if (qword_1008D5F50 != -1) {
              dispatch_once(&qword_1008D5F50, &stru_10089FC68);
            }
            unint64_t v11 = sub_1003FEFA8((uint64_t)off_1008D5F48, *v10, a2);
          }

          else
          {
            unint64_t v11 = 4294901761LL;
          }

          if (qword_1008D61A8 != -1) {
            dispatch_once(&qword_1008D61A8, &stru_10089FC88);
          }
          uint64_t v12 = sub_10049729C(qword_1008D61A0, *v10);
          if (v12 && v11)
          {
            if (qword_1008D9138 != -1) {
              dispatch_once(&qword_1008D9138, &stru_10089FCA8);
            }
            unint64_t v13 = off_1008D9130;
            uint64_t v14 = operator new(0x40uLL);
            unint64_t v15 = v10[5];
            unint64_t v16 = *v10;
            unint64_t v17 = v10[8];
            v14[4] = 1;
            *((void *)v14 + 2) = v12;
            *((void *)v14 + 3) = v15;
            *(void *)uint64_t v14 = &off_10089FBD8;
            *((void *)v14 + 4) = v17;
            *((void *)v14 + 5) = v16;
            *((void *)v14 + 6) = v11;
            *((_DWORD *)v14 + 14) = a3;
            sub_1004946C4((uint64_t)v13, v14);
          }

          else
          {
            sub_100242ECC((uint64_t)buf);
            uint64_t v18 = sub_100527EF8(*(void *)(a1 + 200), *(void *)(a1 + 208), *v10);
            sub_100527EB4(a1 + 200, v18, *(void *)(a1 + 208));
            sub_100242F54((uint64_t)buf);
          }
        }

        v10 += 9;
      }

      while (v10 != v22);
      uint64_t v10 = (unint64_t *)__p;
    }

    if (v10)
    {
      uint64_t v22 = v10;
      operator delete(v10);
    }

    uint64_t v19 = 0LL;
  }

  sub_100242FAC((uint64_t)buf);
  return v19;
}

void sub_100526CB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100526CF0(uint64_t a1, unsigned __int8 *a2)
{
  v23[0] = 0LL;
  v23[1] = 0LL;
  sub_100242F28((uint64_t)v23, a1 + 8);
  uint64_t v5 = *(void **)(a1 + 96);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(a1 + 96);
    do
    {
      unint64_t v7 = v5[4];
      BOOL v8 = v7 >= (unint64_t)a2;
      else {
        uint64_t v9 = v5 + 1;
      }
      if (v8) {
        uint64_t v6 = v5;
      }
      uint64_t v5 = (void *)*v9;
    }

    while (*v9);
    if (v6 != (uint64_t *)(a1 + 96) && v6[4] <= (unint64_t)a2)
    {
      uint64_t v10 = v6[5];
      if (v10)
      {
        unint64_t v11 = (void *)nullsub_63(v10, v4);
        operator delete(v11);
      }

      sub_1001FDBCC((uint64_t **)(a1 + 88), v6);
      operator delete(v6);
    }
  }

  uint64_t v14 = *(void **)(a1 + 120);
  unint64_t v13 = (uint64_t *)(a1 + 120);
  uint64_t v12 = v14;
  if (v14)
  {
    unint64_t v15 = (uint64_t **)(v13 - 1);
    unint64_t v16 = v13;
    do
    {
      unint64_t v17 = v12[4];
      BOOL v18 = v17 >= (unint64_t)a2;
      else {
        uint64_t v19 = v12 + 1;
      }
      if (v18) {
        unint64_t v16 = v12;
      }
      uint64_t v12 = (void *)*v19;
    }

    while (*v19);
    if (v16 != v13 && v16[4] <= (unint64_t)a2)
    {
      uint64_t v20 = (void **)v16[5];
      if (v20)
      {
        sub_100527C44(v16[5], v20[1]);
        operator delete(v20);
      }

      sub_1001FDBCC(v15, v16);
      operator delete(v16);
    }
  }

  sub_100242F54((uint64_t)v23);
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FC48);
  }
  uint64_t v21 = sub_10052F37C((uint64_t)off_1008D67A0, a2);
  sub_100242FAC((uint64_t)v23);
  return v21;
}

void sub_100526E58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100526E6C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 72)) {
    return 0LL;
  }
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FC48);
  }
  return sub_10052DAD4((uint64_t)off_1008D67A0);
}

uint64_t sub_100526EC0(uint64_t a1, unint64_t a2, __n128 *a3)
{
  v19[1] = 0LL;
  unint64_t v20 = a2;
  v19[0] = 0LL;
  sub_100242F28((uint64_t)v19, a1 + 8);
  uint64_t v9 = *(void **)(a1 + 96);
  BOOL v8 = (uint64_t *)(a1 + 96);
  unint64_t v7 = v9;
  if (v9)
  {
    uint64_t v10 = v8;
    do
    {
      unint64_t v11 = v7[4];
      BOOL v12 = v11 >= a2;
      if (v11 >= a2) {
        unint64_t v13 = v7;
      }
      else {
        unint64_t v13 = v7 + 1;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unint64_t v7 = (void *)*v13;
    }

    while (*v13);
    if (v10 != v8 && v10[4] <= a2)
    {
      uint64_t v14 = v10[5];
      if (v14)
      {
        unint64_t v15 = (void *)nullsub_63(v14, v6);
        operator delete(v15);
      }

      sub_1001FDBCC((uint64_t **)v8 - 1, v10);
      operator delete(v10);
    }
  }

  unint64_t v16 = (__n128 *)operator new(0x11uLL);
  sub_100532E50(v16, a3);
  uint64_t v21 = &v20;
  sub_100029574((uint64_t **)v8 - 1, &v20, (uint64_t)&unk_1006C2518, (uint64_t **)&v21)[5] = (uint64_t)v16;
  sub_100242F54((uint64_t)v19);
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FC48);
  }
  uint64_t v17 = sub_10052DE34((uint64_t)off_1008D67A0, v20, a3);
  sub_100242FAC((uint64_t)v19);
  return v17;
}

void sub_100527004( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_100527028(uint64_t a1, unint64_t a2, __n128 *a3)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, a1 + 8);
  BOOL v8 = *(void **)(a1 + 96);
  unint64_t v7 = (void *)(a1 + 96);
  uint64_t v6 = v8;
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = v7;
  do
  {
    unint64_t v10 = v6[4];
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      BOOL v12 = v6;
    }
    else {
      BOOL v12 = v6 + 1;
    }
    if (v11) {
      uint64_t v9 = v6;
    }
    uint64_t v6 = (void *)*v12;
  }

  while (*v12);
  if (v9 != v7 && v9[4] <= a2)
  {
    sub_100532E50(a3, (__n128 *)v9[5]);
    uint64_t v13 = 0LL;
  }

  else
  {
LABEL_12:
    uint64_t v13 = 1LL;
  }

  sub_100242FAC((uint64_t)v15);
  return v13;
}

void sub_1005270CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005270E0(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FC48);
  }
  return sub_10052E160((uint64_t)off_1008D67A0, a2, a3);
}

uint64_t sub_100527138(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v17[0] = 0LL;
  v17[1] = 0LL;
  sub_100242F28((uint64_t)v17, a1 + 8);
  BOOL v8 = *(void **)(a1 + 120);
  unint64_t v7 = (void *)(a1 + 120);
  uint64_t v6 = v8;
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v9 = v7;
  do
  {
    unint64_t v10 = v6[4];
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      BOOL v12 = v6;
    }
    else {
      BOOL v12 = v6 + 1;
    }
    if (v11) {
      uint64_t v9 = v6;
    }
    uint64_t v6 = (void *)*v12;
  }

  while (*v12);
  if (v9 == v7 || v9[4] > a2 || (v13 = v9[5], uint64_t v14 = sub_100528014(v13, a3), (void *)(v13 + 8) == v14)) {
LABEL_14:
  }
    uint64_t v15 = 0LL;
  else {
    uint64_t v15 = *((unsigned int *)v14 + 12);
  }
  sub_100242FAC((uint64_t)v17);
  return v15;
}

void sub_1005271EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100527200(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  v16[1] = 0LL;
  unint64_t v17 = a2;
  v16[0] = 0LL;
  sub_100242F28((uint64_t)v16, a1 + 8);
  BOOL v8 = *(void **)(a1 + 120);
  unint64_t v7 = (void *)(a1 + 120);
  uint64_t v6 = v8;
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = v7;
  do
  {
    unint64_t v10 = v6[4];
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      BOOL v12 = v6;
    }
    else {
      BOOL v12 = v6 + 1;
    }
    if (v11) {
      uint64_t v9 = v6;
    }
    uint64_t v6 = (void *)*v12;
  }

  while (*v12);
  if (v9 != v7 && v9[4] <= a2)
  {
    uint64_t v13 = (uint64_t **)v9[5];
  }

  else
  {
LABEL_12:
    uint64_t v13 = (uint64_t **)operator new(0x18uLL);
    void v13[2] = 0LL;
    v13[1] = 0LL;
    void *v13 = (uint64_t *)(v13 + 1);
    BOOL v18 = &v17;
    sub_100029574((uint64_t **)v7 - 1, &v17, (uint64_t)&unk_1006C2518, (uint64_t **)&v18)[5] = (uint64_t)v13;
  }

  BOOL v18 = (unint64_t *)a3;
  uint64_t v14 = sub_10052808C(v13, (uint64_t)a3, (uint64_t)&unk_1006C2518, (__n128 **)&v18);
  ++*((_DWORD *)v14 + 12);
  return sub_100242FAC((uint64_t)v16);
}

void sub_100527304(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100527318(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, _OWORD *a5)
{
  uint64_t v9 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68159490;
    *(_DWORD *)&uint8_t buf[4] = 16;
    LOWORD(v27) = 2096;
    *(void *)((char *)&v27 + 2) = a2;
    WORD5(v27) = 1040;
    HIDWORD(v27) = 16;
    __int16 v28 = 2096;
    uint64_t v29 = a3;
    __int16 v30 = 1040;
    int v31 = 16;
    __int16 v32 = 2096;
    uint64_t v33 = a4;
    __int16 v34 = 1040;
    int v35 = 16;
    __int16 v36 = 2096;
    int v37 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Sending 'local OOB Data Ready' event C192:{private, mask.hash}%.16P R192:{private, mask.hash}%.16P C256:{private, mask.hash}%.16P R256:{private, mask.hash}%.16P",  buf,  0x42u);
  }

  v25[0] = 0LL;
  v25[1] = 0LL;
  sub_100242F28((uint64_t)v25, a1 + 136);
  uint64_t v10 = *(void *)(a1 + 200);
  uint64_t v11 = *(void *)(a1 + 208);
  if (v10 == v11)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068F4D4();
    }
    uint64_t v22 = 106LL;
  }

  else
  {
    *(void *)buf = 0LL;
    __int128 v27 = 0uLL;
    sub_10052828C((char *)buf, v10, v11, 0x8E38E38E38E38E39LL * ((v11 - v10) >> 3));
    sub_100242F54((uint64_t)v25);
    BOOL v12 = *(unint64_t **)buf;
    if (*(void *)buf != (void)v27)
    {
      do
      {
        if (v12[6])
        {
          if (qword_1008D61A8 != -1) {
            dispatch_once(&qword_1008D61A8, &stru_10089FC88);
          }
          uint64_t v13 = sub_10049729C(qword_1008D61A0, *v12);
          if (v13)
          {
            if (qword_1008D9138 != -1) {
              dispatch_once(&qword_1008D9138, &stru_10089FCA8);
            }
            uint64_t v14 = off_1008D9130;
            uint64_t v15 = operator new(0x70uLL);
            unint64_t v16 = v12[6];
            unint64_t v17 = *v12;
            unint64_t v18 = v12[8];
            void v15[4] = 1;
            *((void *)v15 + 2) = v13;
            *((void *)v15 + 3) = v16;
            *(void *)uint64_t v15 = &off_10089FC18;
            *((void *)v15 + 4) = v18;
            *((void *)v15 + 5) = v17;
            __int128 v19 = *a3;
            *((_OWORD *)v15 + 3) = *a2;
            *((_OWORD *)v15 + 4) = v19;
            __int128 v20 = *a5;
            *((_OWORD *)v15 + 5) = *a4;
            *((_OWORD *)v15 + 6) = v20;
            sub_1004946C4((uint64_t)v14, v15);
          }

          else
          {
            sub_100242ECC((uint64_t)v25);
            uint64_t v21 = sub_100527EF8(*(void *)(a1 + 200), *(void *)(a1 + 208), *v12);
            sub_100527EB4(a1 + 200, v21, *(void *)(a1 + 208));
            sub_100242F54((uint64_t)v25);
          }
        }

        v12 += 9;
      }

      while (v12 != (unint64_t *)v27);
      BOOL v12 = *(unint64_t **)buf;
    }

    if (v12)
    {
      *(void *)&__int128 v27 = v12;
      operator delete(v12);
    }

    uint64_t v22 = 0LL;
  }

  sub_100242FAC((uint64_t)v25);
  return v22;
}

void sub_1005275EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }

  sub_100242FAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void *sub_100527624(void *result)
{
  *__n128 result = &off_10089FB18;
  return result;
}

uint64_t sub_100527638( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result = sub_1005276A4(a1, *(void *)(a1 + 40));
  if ((_DWORD)result)
  {
    uint64_t result = sub_1005276A4(a1, *(void *)(a1 + 56));
    if ((_DWORD)result) {
      return sub_1003B4DA4( a2,  a3,  *(void *)(a1 + 40),  *(unsigned int *)(a1 + 48),  *(void *)(a1 + 56),  *(unsigned int *)(a1 + 64),  a4);
    }
  }

  return result;
}

BOOL sub_1005276A4(uint64_t a1, unint64_t a2)
{
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_10089FC88);
  }
  return sub_100497204(qword_1008D61A0, a2);
}

void *sub_1005276F4(void *result)
{
  *uint64_t result = &off_10089FB58;
  return result;
}

uint64_t sub_100527708( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result = sub_1005276A4(a1, *(void *)(a1 + 40));
  if ((_DWORD)result)
  {
    uint64_t result = sub_1005276A4(a1, *(void *)(a1 + 48));
    if ((_DWORD)result) {
      return sub_1003C64F8(a2, a3, *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), a4);
    }
  }

  return result;
}

void *sub_10052776C(void *result)
{
  *uint64_t result = &off_10089FB98;
  return result;
}

uint64_t sub_100527780( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result = sub_1005276A4(a1, *(void *)(a1 + 40));
  if ((_DWORD)result)
  {
    uint64_t result = sub_1005276A4(a1, *(void *)(a1 + 48));
    if ((_DWORD)result) {
      return sub_1003B4DA4( a2,  a3,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(unsigned int *)(a1 + 56),  -*(char *)(a1 + 60),  a4);
    }
  }

  return result;
}

void *sub_1005277EC(void *result)
{
  *uint64_t result = &off_10089FBD8;
  return result;
}

uint64_t sub_100527800( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result = sub_1005276A4(a1, *(void *)(a1 + 40));
  if ((_DWORD)result)
  {
    uint64_t result = sub_1005276A4(a1, *(void *)(a1 + 48));
    if ((_DWORD)result) {
      return sub_1003C64F8(a2, a3, *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned int *)(a1 + 56), a4);
    }
  }

  return result;
}

void *sub_100527864(void *result)
{
  *uint64_t result = &off_10089FC18;
  return result;
}

uint64_t sub_100527878( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result = sub_1005276A4(a1, *(void *)(a1 + 40));
  if ((_DWORD)result) {
    return sub_1003B4E10(a2, a3, *(void *)(a1 + 40), a1 + 48, a1 + 64, a1 + 80, a1 + 96, a4);
  }
  return result;
}

void sub_1005278D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 8) = 0LL;
  uint64_t v4 = (size_t *)(a2 + 8);
  sub_10002418C((void *)a2, "");
  else {
    size_t v5 = *v4;
  }
  memset(&v14, 0, sizeof(v14));
  uint64_t v6 = &v14;
  sub_100271C18((uint64_t)&v14, v5 + 12);
  if ((v14.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    uint64_t v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    else {
      unint64_t v7 = *(const void **)a2;
    }
    memmove(v6, v7, v5);
  }

  strcpy((char *)v6 + v5, "\t\tfStarted: ");
  if (*(_BYTE *)(a1 + 72)) {
    BOOL v8 = "YES";
  }
  else {
    BOOL v8 = "NO";
  }
  uint64_t v9 = std::string::append(&v14, v8);
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v11 = std::string::append(&v15, "\n");
  std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
  v16[0] = v11->__r_.__value_.__l.__size_;
  *(void *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 size = v11->__r_.__value_.__s.__size_;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  *(void *)a2 = v12;
  *uint64_t v4 = v16[0];
  *(void *)(a2 + 15) = *(void *)((char *)v16 + 7);
  *(_BYTE *)(a2 + 23) = size;
}

void sub_100527A90( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100527ADC(unint64_t *a1)
{
  uint64_t result = sub_1005276A4((uint64_t)a1, a1[2]);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))( a1,  a1[2],  a1[3],  a1[4]);
  }
  return result;
}

uint64_t sub_100527B24(unint64_t *a1)
{
  uint64_t result = sub_1005276A4((uint64_t)a1, a1[2]);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))( a1,  a1[2],  a1[3],  a1[4]);
  }
  return result;
}

uint64_t sub_100527B6C(unint64_t *a1)
{
  uint64_t result = sub_1005276A4((uint64_t)a1, a1[2]);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))( a1,  a1[2],  a1[3],  a1[4]);
  }
  return result;
}

uint64_t sub_100527BB4(unint64_t *a1)
{
  uint64_t result = sub_1005276A4((uint64_t)a1, a1[2]);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))( a1,  a1[2],  a1[3],  a1[4]);
  }
  return result;
}

uint64_t sub_100527BFC(unint64_t *a1)
{
  uint64_t result = sub_1005276A4((uint64_t)a1, a1[2]);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))( a1,  a1[2],  a1[3],  a1[4]);
  }
  return result;
}

void sub_100527C44(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100527C44(a1, *a2);
    sub_100527C44(a1, a2[1]);
    nullsub_63((char *)a2 + 28, v4);
    operator delete(a2);
  }

uint64_t sub_100527C8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0x8E38E38E38E38E39LL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0x8E38E38E38E38E39LL * ((v8 - v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x1C71C71C71C71C7LL) {
    unint64_t v10 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v22 = v7;
  uint64_t v11 = (char *)sub_10050D844(v7, v10);
  std::string::size_type v12 = &v11[72 * v3];
  __p = v11;
  __int128 v19 = v12;
  uint64_t v21 = &v11[72 * v13];
  *(void *)std::string::size_type v12 = *(void *)a2;
  __int128 v14 = *(_OWORD *)(a2 + 8);
  __int128 v15 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v12 + 24) = v15;
  *(_OWORD *)(v12 + 8) = v14;
  *((_DWORD *)v12 + 14) = *(_DWORD *)(a2 + 56);
  *((void *)v12 + 8) = *(void *)(a2 + 64);
  __int128 v20 = v12 + 72;
  sub_100527E34(a1, &__p);
  uint64_t v16 = a1[1];
  if (v20 != v19) {
    __int128 v20 = &v19[(v20 - v19 - 72) % 0x48uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v16;
}

void sub_100527DE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100527E34(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(void *)(v2 - 72);
    v2 -= 72LL;
    *(void *)(v4 - 72) = v5;
    v4 -= 72LL;
    __int128 v6 = *(_OWORD *)(v2 + 8);
    __int128 v7 = *(_OWORD *)(v2 + 24);
    *(_OWORD *)(v4 + 40) = *(_OWORD *)(v2 + 40);
    *(_OWORD *)(v4 + 24) = v7;
    *(_OWORD *)(v4 + 8) = v6;
    *(_DWORD *)(v4 + 56) = *(_DWORD *)(v2 + 56);
    *(void *)(v4 + 64) = *(void *)(v2 + 64);
  }

  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100527EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_100527F74(a3, *(void *)(a1 + 8), a2);
    *(void *)(a1 + 8) = v5;
  }

  return a2;
}

uint64_t sub_100527EF8(uint64_t result, uint64_t a2, uint64_t a3)
{
  while (1)
  {
    if (result == a2) {
      return a2;
    }
    if (*(void *)result == a3) {
      break;
    }
    result += 72LL;
  }

  if (result != a2)
  {
    for (uint64_t i = result + 72; i != a2; i += 72LL)
    {
      if (*(void *)i != a3)
      {
        *(void *)uint64_t result = *(void *)i;
        __int128 v4 = *(_OWORD *)(i + 8);
        __int128 v5 = *(_OWORD *)(i + 24);
        *(_OWORD *)(result + 40) = *(_OWORD *)(i + 40);
        *(_OWORD *)(result + 24) = v5;
        *(_OWORD *)(result + 8) = v4;
        *(_DWORD *)(result + 56) = *(_DWORD *)(i + 56);
        *(void *)(result + 64) = *(void *)(i + 64);
        result += 72LL;
      }
    }
  }

  return result;
}

uint64_t sub_100527F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  do
  {
    *(void *)a3 = *(void *)a1;
    __int128 v3 = *(_OWORD *)(a1 + 8);
    __int128 v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a3 + 24) = v4;
    *(_OWORD *)(a3 + 8) = v3;
    *(_DWORD *)(a3 + 56) = *(_DWORD *)(a1 + 56);
    *(void *)(a3 + 64) = *(void *)(a1 + 64);
    a3 += 72LL;
    a1 += 72LL;
  }

  while (a1 != a2);
  return a2;
}

void sub_100527FD0(id a1)
{
  uint64_t v1 = operator new(0x260uLL);
  sub_1005285C8((uint64_t)v1);
  off_1008D67A0 = v1;
}

void sub_100528000(_Unwind_Exception *a1)
{
}

void *sub_100528014(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  __int128 v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  __int128 v5 = (void *)(a1 + 8);
  do
  {
    int v6 = sub_100532E90((uint64_t)v3 + 28, a2);
    __int128 v7 = v3 + 1;
    if (!v6)
    {
      __int128 v7 = v3;
      __int128 v5 = v3;
    }

    __int128 v3 = (void *)*v7;
  }

  while (*v7);
  return v5;
}

char *sub_10052808C(uint64_t **a1, uint64_t a2, uint64_t a3, __n128 **a4)
{
  uint64_t v11 = 0LL;
  int v6 = (char **)sub_100528140((uint64_t)a1, &v11, a2);
  __int128 v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_1005281D0((uint64_t)a1, a4, v10);
    sub_100029630(a1, v11, v8, (uint64_t *)v10[0]);
    __int128 v7 = v10[0];
    v10[0] = 0LL;
    sub_100528248(v10, 0LL);
  }

  return v7;
}

void *sub_100528140(uint64_t a1, void *a2, uint64_t a3)
{
  __int128 v5 = (void *)(a1 + 8);
  __int128 v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        __int128 v7 = v4;
        uint64_t v8 = (uint64_t)v4 + 28;
        __int128 v4 = (void *)*v7;
        __int128 v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      __int128 v5 = v7 + 1;
      __int128 v4 = (void *)v7[1];
    }

    while (v4);
  }

  else
  {
    __int128 v7 = (void *)(a1 + 8);
  }

void sub_1005281D0(uint64_t a1@<X0>, __n128 **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  int v6 = (char *)operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  sub_100532E50((__n128 *)(v6 + 28), *a2);
  *((_DWORD *)v6 + 12) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_100528230(_Unwind_Exception *a1)
{
}

void sub_100528248(char **a1, char *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16)) {
      nullsub_63(v2 + 28, a2);
    }
    operator delete(v2);
  }

char *sub_10052828C(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = sub_100528310(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      *(void *)uint64_t v7 = *(void *)a2;
      __int128 v8 = *(_OWORD *)(a2 + 8);
      __int128 v9 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v7 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(v7 + 24) = v9;
      *(_OWORD *)(v7 + 8) = v8;
      *(_DWORD *)(v7 + 56) = *(_DWORD *)(a2 + 56);
      *(void *)(v7 + 64) = *(void *)(a2 + 64);
      v7 += 72LL;
      a2 += 72LL;
    }

    *((void *)v6 + 1) = v7;
  }

  return result;
}

char *sub_100528310(void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    abort();
  }
  uint64_t result = (char *)sub_10050D844((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void sub_100528360(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_100528390(_Unwind_Exception *a1)
{
}

void sub_1005283A4(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_1005283D4(_Unwind_Exception *a1)
{
}

void sub_1005283E8(id a1)
{
  uint64_t v1 = operator new(0x68uLL);
  sub_10049435C();
  off_1008D9130 = v1;
}

void sub_100528418(_Unwind_Exception *a1)
{
}

uint64_t sub_10052842C(uint64_t a1)
{
  *(void *)a1 = off_10089FCF8;
  *(void *)(a1 + 8) = off_10089FD80;
  *(void *)(a1 + 16) = off_10089FDA0;
  *(void *)(a1 + 24) = off_10089FDD8;
  *(void *)(a1 + 32) = off_10089FE00;
  *(void *)(a1 + 40) = 0LL;
  sub_100242DC4(a1 + 48);
  *(void *)(a1 + 112) = 0LL;
  sub_100242DC4(a1 + 120);
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 200) = 0LL;
  sub_100242DC4(a1 + 208);
  *(_BYTE *)(a1 + 272) = 0;
  sub_100242DC4(a1 + 280);
  *(void *)(a1 + 344) = 0LL;
  *(void *)(a1 + 352) = 0LL;
  *(void *)(a1 + 360) = 0LL;
  *(void *)(a1 + 368) = &off_10089FF90;
  *(void *)(a1 + 408) = 0LL;
  *(void *)(a1 + 384) = 0LL;
  *(void *)(a1 + 392) = 0LL;
  *(void *)(a1 + 376) = 0LL;
  *(_DWORD *)(a1 + 400) = 0;
  sub_100242DC4(a1 + 416);
  *(void *)(a1 + 480) = 0LL;
  *(void *)(a1 + 488) = 0LL;
  *(void *)(a1 + 520) = 0LL;
  *(void *)(a1 + 504) = a1 + 512;
  *(void *)(a1 + 512) = 0LL;
  *(void *)(a1 + 496) = 0LL;
  sub_100242DC4(a1 + 536);
  *(void *)(a1 + 600) = 0LL;
  return a1;
}

void sub_100528528(_Unwind_Exception *a1)
{
  uint64_t v11 = v9;
  std::string::size_type v12 = v6;
  sub_10023BF24(v11, *v10);
  __int128 v14 = *v12;
  if (*v12)
  {
    v2[61] = v14;
    operator delete(v14);
  }

  sub_100242E28(v7);
  __int128 v15 = (void *)v2[43];
  if (v15)
  {
    v2[44] = v15;
    operator delete(v15);
  }

  sub_100242E28(v5);
  sub_100242E28(v4);
  uint64_t v16 = *v8;
  if (*v8)
  {
    v2[24] = v16;
    operator delete(v16);
  }

  sub_100242E28(v3);
  sub_100242E28(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005285CC(uint64_t a1)
{
  *(void *)a1 = off_10089FCF8;
  *(void *)(a1 + 8) = off_10089FD80;
  *(void *)(a1 + 16) = off_10089FDA0;
  *(void *)(a1 + 24) = off_10089FDD8;
  *(void *)(a1 + 32) = off_10089FE00;
  sub_100242E28(a1 + 536);
  sub_10023BF24(a1 + 504, *(void **)(a1 + 512));
  uint64_t v2 = *(void **)(a1 + 480);
  if (v2)
  {
    *(void *)(a1 + 488) = v2;
    operator delete(v2);
  }

  sub_100242E28(a1 + 416);
  uint64_t v3 = *(void **)(a1 + 344);
  if (v3)
  {
    *(void *)(a1 + 352) = v3;
    operator delete(v3);
  }

  sub_100242E28(a1 + 280);
  sub_100242E28(a1 + 208);
  uint64_t v4 = *(void **)(a1 + 184);
  if (v4)
  {
    *(void *)(a1 + 192) = v4;
    operator delete(v4);
  }

  sub_100242E28(a1 + 120);
  sub_100242E28(a1 + 48);
  return a1;
}

uint64_t sub_100528680(uint64_t a1)
{
  return sub_1005285CC(a1 - 16);
}

void sub_100528688(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1005285CC(a1);
  operator delete(v1);
}

void sub_10052869C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1005285CC(a1 - 16);
  operator delete(v1);
}

void sub_1005286B4(uint64_t a1, int *a2, uint64_t a3, int a4, _OWORD *a5, char a6)
{
  std::string::size_type v12 = malloc(0x10uLL);
  int v13 = *a2;
  __int16 v18 = *((_WORD *)a2 + 2);
  _OWORD *v12 = *a5;
  uint64_t v14 = *(void *)(a1 + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_100528764;
  _DWORD v15[3] = &unk_10089FE20;
  int v16 = a4;
  int v17 = v13;
  char v19 = a6;
  void v15[4] = v12;
  void v15[5] = a2;
  v15[6] = a3;
  sub_100405384(v14, v15);
}

_BYTE *sub_100528764(uint64_t a1)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089FFC8);
  }
  *(_DWORD *)buf = *(_DWORD *)(a1 + 60);
  *(_WORD *)&uint8_t buf[4] = *(_WORD *)(a1 + 64);
  uint64_t v2 = (unsigned __int8 *)sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
  uint64_t v3 = (os_log_s *)qword_1008F75E0;
  if (v2)
  {
    if (!os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    sub_1003D01A0((uint64_t)v2, (uint64_t)__p);
    if (v27 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    goto LABEL_12;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Oh no, we have no device !", buf, 2u);
    uint64_t v3 = (os_log_s *)qword_1008F75E0;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void **)"UNKNOWN";
LABEL_12:
    int v5 = *(_DWORD *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = *(unsigned __int8 *)(a1 + 66);
    *(_DWORD *)buf = 136316419;
    *(void *)&uint8_t buf[4] = v4;
    __int16 v32 = 1024;
    int v33 = v5;
    __int16 v34 = 2160;
    uint64_t v35 = 1752392040LL;
    __int16 v36 = 1041;
    int v37 = 16;
    __int16 v38 = 2097;
    uint64_t v39 = v6;
    __int16 v40 = 1024;
    int v41 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Classic SMP pairing completed to %s with status %d IRK:%{private, mask.hash}.16P useH7=%d",  buf,  0x32u);
    if (v2 && v27 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_100528B34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  sub_100242CD8(&a15);
  nullsub_63(&a19, v30);
  _Unwind_Resume(a1);
}

uint64_t sub_100528B94(uint64_t a1)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1 + 208);
  uint64_t v2 = operator new(0x10uLL);
  sub_100404F28(v2, (uint64_t)"BT PairingMgr");
  *(void *)(a1 + 40) = v2;
  *(_BYTE *)(a1 + 272) = 0;
  sub_100242F54((uint64_t)v7);
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_1008A0008);
  }
  sub_10053608C(off_1008D67B0, a1 + 16);
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008A0048);
  }
  sub_1003B423C(qword_1008D61A0 + 8, a1 + 8);
  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_1008A0068);
  }
  sub_1000762CC((uint64_t)off_1008D67E0 + 24, a1 + 24);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_1008A0088);
  }
  sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1 + 32);
  uint64_t v3 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v3 + 440LL))(v3) & 1) != 0)
  {
    char v4 = 1;
  }

  else
  {
    uint64_t v5 = sub_1002E6BF0();
    char v4 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 344LL))(v5);
  }

  *(_BYTE *)(a1 + 528) = v4;
  return sub_100242FAC((uint64_t)v7);
}

void sub_100528D14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100528D3C(uint64_t a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_1008A0088);
  }
  sub_100009168((uint64_t)off_1008D60A8 + 80, a1 + 32);
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_1008A0008);
  }
  sub_1005361C4((uint64_t)off_1008D67B0, a1 + 16);
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008A0048);
  }
  sub_100009168(qword_1008D61A0 + 8, a1 + 8);
  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_1008A0068);
  }
  sub_100009168((uint64_t)off_1008D67E0 + 24, a1 + 24);
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1 + 48);
  uint64_t v2 = *(unint64_t **)(a1 + 184);
  if (v2 != *(unint64_t **)(a1 + 192))
  {
    do
    {
      unint64_t v3 = *v2;
      uint64_t v4 = *(void *)(a1 + 112);
      if (v4) {
        sub_1005258CC(v4, *v2);
      }
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_1008A0048);
      }
      sub_100497354(qword_1008D61A0, v3);
      ++v2;
    }

    while (v2 != *(unint64_t **)(a1 + 192));
    uint64_t v2 = *(unint64_t **)(a1 + 184);
  }

  *(void *)(a1 + 192) = v2;
  uint64_t v5 = *(void *)(a1 + 112);
  if (v5)
  {
    uint64_t v6 = (os_log_s *)qword_1008F75E0;
    if (!os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT)
      || (LOWORD(v10[0]) = 0,
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PairingManager is terminating. Deleting fAgent!",  (uint8_t *)v10,  2u),  (uint64_t v5 = *(void *)(a1 + 112)) != 0))
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }

    *(void *)(a1 + 112) = 0LL;
  }

  sub_100242F54((uint64_t)v11);
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1 + 208);
  *(_BYTE *)(a1 + 272) = 0;
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7)
  {
    uint64_t v8 = (void *)sub_100405360(v7);
    operator delete(v8);
  }

  *(void *)(a1 + 40) = 0LL;
  sub_100242FAC((uint64_t)v10);
  return sub_100242FAC((uint64_t)v11);
}

void sub_100528F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100528FAC(uint64_t a1, uint64_t a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1 + 120);
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 40);
    if (v3)
    {
      uint64_t v4 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Cancelling existing pairing timeout event",  v6,  2u);
      }

      *(_BYTE *)(v3 + 9) = 1;
      *(void *)(a2 + 40) = 0LL;
    }
  }

  return sub_100242FAC((uint64_t)v7);
}

uint64_t sub_10052904C(uint64_t a1, uint64_t *a2)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1 + 120);
  if (a2)
  {
    sub_100528FAC(a1, (uint64_t)a2);
    uint64_t v4 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Creating a new pairing timeout event",  v10,  2u);
    }

    uint64_t v5 = operator new(0x28uLL);
    v5[4] = 1;
    *(void *)uint64_t v5 = &off_10089FF58;
    uint64_t v7 = *a2;
    uint64_t v6 = a2[1];
    *((void *)v5 + 2) = 0LL;
    *((void *)v5 + 3) = v6;
    *((_DWORD *)v5 + 8) = 161;
    a2[5] = (uint64_t)v5;
    *((void *)v5 + 2) = 1000LL * (*(unsigned int (**)(uint64_t *))(v7 + 24))(a2);
    uint64_t v8 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Dispatching pairing timeout event", v10, 2u);
    }

    sub_100405744(*(void *)(a1 + 40), v5);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
  {
    sub_10068F618();
  }

  return sub_100242FAC((uint64_t)v11);
}

void sub_1005291A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1005291C0(void *a1, unint64_t a2, void *a3, unint64_t *a4)
{
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008A0048);
  }
  uint64_t v8 = sub_100496954((void *)qword_1008D61A0, a2);
  v32[0] = 0LL;
  v32[1] = 0LL;
  sub_100242F28((uint64_t)v32, (uint64_t)(a1 + 6));
  if (!a1[14])
  {
    int v9 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "allocating fAgent", (uint8_t *)__p, 2u);
    }

    uint64_t v10 = operator new(0xF8uLL);
    sub_1005253A4((uint64_t)v10);
    a1[14] = v10;
  }

  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008A0048);
  }
  unint64_t v11 = sub_100496E90(qword_1008D61A0, a2);
  *a4 = v11;
  if (v11)
  {
    *a3 = a1[14];
    unint64_t v12 = a1[25];
    int v13 = (unint64_t *)a1[24];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v16 = a1[23];
      uint64_t v17 = ((uint64_t)v13 - v16) >> 3;
      uint64_t v18 = v12 - v16;
      uint64_t v19 = v18 >> 2;
      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        int v21 = (char *)sub_100008BA0((uint64_t)(a1 + 25), v20);
      }
      else {
        int v21 = 0LL;
      }
      uint64_t v22 = (unint64_t *)&v21[8 * v17];
      uint64_t v23 = &v21[8 * v20];
      *uint64_t v22 = *a4;
      uint64_t v14 = v22 + 1;
      char v25 = (char *)a1[23];
      uint64_t v24 = (char *)a1[24];
      if (v24 != v25)
      {
        do
        {
          unint64_t v26 = *((void *)v24 - 1);
          v24 -= 8;
          *--uint64_t v22 = v26;
        }

        while (v24 != v25);
        uint64_t v24 = (char *)a1[23];
      }

      a1[23] = v22;
      a1[24] = v14;
      a1[25] = v23;
      if (v24) {
        operator delete(v24);
      }
    }

    else
    {
      unint64_t *v13 = *a4;
      uint64_t v14 = v13 + 1;
    }

    a1[24] = v14;
    char v27 = (os_log_s *)qword_1008F75E0;
    uint64_t v15 = 0LL;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      if (v8)
      {
        sub_100494958(v8, (uint64_t)__p);
        if (v31 >= 0) {
          __n128 v28 = __p;
        }
        else {
          __n128 v28 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136446210;
        __int16 v34 = (const char *)v28;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Creating pairing agent for session %{public}s",  buf,  0xCu);
        if (v31 < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        *(_DWORD *)buf = 136446210;
        __int16 v34 = "(NULL)";
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Creating pairing agent for session %{public}s",  buf,  0xCu);
      }

      uint64_t v15 = 0LL;
    }
  }

  else
  {
    uint64_t v15 = 7LL;
  }

  sub_100242FAC((uint64_t)v32);
  return v15;
}

void sub_1005294B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1005294E8(void *a1, unint64_t a2)
{
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008A0048);
  }
  uint64_t v4 = sub_100496954((void *)qword_1008D61A0, a2);
  uint64_t v5 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    if (v4)
    {
      sub_100494958(v4, (uint64_t)__p);
      if (v19 >= 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446210;
      int v21 = (const char *)v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Destroying pairing agent for session %{public}s",  buf,  0xCu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      *(_DWORD *)buf = 136446210;
      int v21 = "(NULL)";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Destroying pairing agent for session %{public}s",  buf,  0xCu);
    }
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  sub_100242F28((uint64_t)__p, (uint64_t)(a1 + 6));
  uint64_t v8 = a1[23];
  uint64_t v7 = (void *)a1[24];
  if ((void *)v8 != v7)
  {
    uint64_t v9 = -v8;
    while (*(void *)v8 != a2)
    {
      v8 += 8LL;
      v9 -= 8LL;
      if ((void *)v8 == v7) {
        goto LABEL_23;
      }
    }

    uint64_t v10 = a1[14];
    if (v10) {
      sub_1005258CC(v10, a2);
    }
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_1008A0048);
    }
    sub_100497354(qword_1008D61A0, a2);
    uint64_t v11 = -v9;
    unint64_t v12 = (const void *)(8 - v9);
    size_t v13 = a1[24] - (8 - v9);
    if (v13) {
      memmove((void *)v11, v12, v13);
    }
    uint64_t v7 = (void *)(v11 + v13);
    a1[24] = v11 + v13;
  }

void sub_1005297A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1005297C0(void *a1, uint64_t a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, (uint64_t)(a1 + 6));
  for (uint64_t i = (void *)a1[23]; ; ++i)
  {
    if (i == (void *)a1[24])
    {
      uint64_t v5 = 0LL;
      goto LABEL_7;
    }

    if (*i == a2) {
      break;
    }
  }

  uint64_t v5 = a1[14];
LABEL_7:
  sub_100242FAC((uint64_t)v7);
  return v5;
}

uint64_t sub_100529838(void *a1, unint64_t a2)
{
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008A0048);
  }
  uint64_t v4 = sub_100496954((void *)qword_1008D61A0, a2);
  uint64_t v5 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 8LL))(v5))
  {
    uint64_t v6 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      if (v4)
      {
        sub_100494958(v4, (uint64_t)__p);
        if (v19 >= 0) {
          uint64_t v7 = __p;
        }
        else {
          uint64_t v7 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315394;
        int v21 = "sessionDetached";
        __int16 v22 = 2082;
        uint64_t v23 = (const char *)v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s - session %{public}s is detaching",  buf,  0x16u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        *(_DWORD *)buf = 136315394;
        int v21 = "sessionDetached";
        __int16 v22 = 2082;
        uint64_t v23 = "(NULL)";
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s - session %{public}s is detaching",  buf,  0x16u);
      }
    }
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  sub_100242F28((uint64_t)__p, (uint64_t)(a1 + 6));
  uint64_t v8 = (unint64_t *)a1[23];
  do
  {
    unint64_t v9 = *v8;
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_1008A0048);
    }
    if (sub_10049729C(qword_1008D61A0, v9) == a2)
    {
      uint64_t v11 = a1[14];
      if (v11) {
        sub_1005258CC(v11, v9);
      }
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_1008A0048);
      }
      sub_100497354(qword_1008D61A0, v9);
      unint64_t v12 = (unint64_t *)a1[24];
      int64_t v13 = (char *)v12 - (char *)(v8 + 1);
      if (v12 != v8 + 1) {
        memmove(v8, v8 + 1, (char *)v12 - (char *)(v8 + 1));
      }
      uint64_t v10 = (unint64_t *)((char *)v8 + v13);
      a1[24] = (char *)v8 + v13;
    }

    else
    {
      ++v8;
      uint64_t v10 = (unint64_t *)a1[24];
    }
  }

  while (v8 != v10);
  if (v10 == (unint64_t *)a1[23])
  {
LABEL_26:
    uint64_t v14 = sub_1002E6E00();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 8LL))(v14))
    {
      uint64_t v15 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        int v21 = "sessionDetached";
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%s - deleting fAgent as fHandleList size is 0",  buf,  0xCu);
      }
    }

    uint64_t v16 = a1[14];
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
    }
    a1[14] = 0LL;
  }

  return sub_100242FAC((uint64_t)__p);
}

void sub_100529B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100529B6C(uint64_t a1, unint64_t a2)
{
  return sub_100529838((void *)(a1 - 8), a2);
}

uint64_t sub_100529B74(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1 + 208);
  if (!*(_BYTE *)(a1 + 272))
  {
    sub_100404F30(*(void *)(a1 + 40), QOS_CLASS_USER_INITIATED);
    *(_BYTE *)(a1 + 272) = 1;
    *(void *)(a1 + 352) = *(void *)(a1 + 344);
    sub_100242F54((uint64_t)v4);
    char v3 = 0;
    sub_100242CA4(&v3);
    sub_1001E63B4(1LL);
    sub_100242CD0(&v3);
    sub_100242CD8(&v3);
  }

  return sub_100242FAC((uint64_t)v4);
}

void sub_100529C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100529C28(uint64_t a1)
{
  return sub_100529B74(a1 - 32);
}

void sub_100529C30(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 528))
  {
    uint64_t v1 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Classic SMP Disabled", buf, 2u);
    }
  }

  else
  {
    LOBYTE(__p[0]) = 0;
    sub_100242CA4(__p);
    int v2 = sub_10011BE14((uint64_t (*)(void, void, void, void, void))sub_100529F1C);
    sub_100242CD0(__p);
    char v3 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Classic_SMPInit returned %d", buf, 8u);
    }

    sub_100242CD8(__p);
  }

  char v15 = 0;
  uint64_t v4 = sub_1002E6E00();
  sub_10002418C(buf, "Pairing");
  sub_10002418C(__p, "DisableH7");
  int v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v4 + 72LL))(v4, buf, __p, &v15);
  if (v15) {
    int v6 = v5;
  }
  else {
    int v6 = 0;
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0)
  {
    operator delete(*(void **)buf);
    if (!v6) {
      goto LABEL_19;
    }
  }

  else if (!v6)
  {
    goto LABEL_19;
  }

  uint64_t v7 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Warning: Disabling Classic SMP local H7 support!",  buf,  2u);
  }

  sub_10011C448();
LABEL_19:
  char v12 = 0;
  uint64_t v8 = sub_1002E6E00();
  sub_10002418C(buf, "Pairing");
  sub_10002418C(__p, "ForceReplyH7");
  int v9 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v8 + 72LL))(v8, buf, __p, &v12);
  if (v12) {
    int v10 = v9;
  }
  else {
    int v10 = 0;
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0)
  {
    operator delete(*(void **)buf);
    if (!v10) {
      return;
    }
  }

  else if (!v10)
  {
    return;
  }

  uint64_t v11 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Warning: Forcing Classic SMP to reply with H7!",  buf,  2u);
  }

  sub_10011C458();
}

void sub_100529EC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
}

void sub_100529F1C(uint64_t a1, int a2, _OWORD *a3, int a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089FFC8);
  }
  *(_DWORD *)buf = *(_DWORD *)a1;
  *(_WORD *)&uint8_t buf[4] = *(_WORD *)(a1 + 4);
  uint64_t v8 = sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
  int v9 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    if (v8)
    {
      sub_1003D01A0((uint64_t)v8, (uint64_t)__p);
      if (v12 >= 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136316419;
      *(void *)&uint8_t buf[4] = v10;
      __int16 v14 = 1024;
      int v15 = a2;
      __int16 v16 = 2160;
      uint64_t v17 = 1752392040LL;
      __int16 v18 = 1041;
      int v19 = 16;
      __int16 v20 = 2097;
      int v21 = a3;
      __int16 v22 = 1024;
      int v23 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "_Classic_SMP_PairingComplete device:%s status %d IRK:%{private, mask.hash}.16P useH7=%d",  buf,  0x32u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      *(_DWORD *)buf = 136316419;
      *(void *)&uint8_t buf[4] = "UNKNOWN";
      __int16 v14 = 1024;
      int v15 = a2;
      __int16 v16 = 2160;
      uint64_t v17 = 1752392040LL;
      __int16 v18 = 1041;
      int v19 = 16;
      __int16 v20 = 2097;
      int v21 = a3;
      __int16 v22 = 1024;
      int v23 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "_Classic_SMP_PairingComplete device:%s status %d IRK:%{private, mask.hash}.16P useH7=%d",  buf,  0x32u);
    }
  }

  *(void *)buf = 0LL;
  sub_10010EEE0(a1, (uint64_t *)buf);
  sub_100117940(a1, 0);
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FFE8);
  }
  sub_1005286B4((uint64_t)off_1008D67A0, (int *)a1, *(uint64_t *)buf, a2, a3, a4);
}

void sub_10052A190(uint64_t a1)
{
}

uint64_t sub_10052A198(uint64_t a1)
{
  int v2 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PairingManager::stackWillStop enter", buf, 2u);
  }

  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1 + 208);
  if (*(_BYTE *)(a1 + 272))
  {
    *(_BYTE *)(a1 + 272) = 0;
    if (!*(_BYTE *)(a1 + 528))
    {
      buf[0] = 0;
      sub_100242CA4(buf);
      sub_10011BFC4();
      sub_100242CD0(buf);
      sub_100242CD8(buf);
    }

    v10[0] = 0LL;
    v10[1] = 0LL;
    sub_100242F28((uint64_t)v10, a1 + 280);
    *(void *)buf = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    sub_100240540(buf, a1 + 344);
    *(void *)(a1 + 352) = *(void *)(a1 + 344);
    sub_100242F54((uint64_t)v10);
    sub_1004052F8(*(void *)(a1 + 40));
    sub_100242F54((uint64_t)v11);
    uint64_t v4 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PairingManager::stackWillStop exit", v6, 2u);
    }

    if (*(void *)buf)
    {
      uint64_t v8 = *(unsigned __int8 ***)buf;
      operator delete(*(void **)buf);
    }

    sub_100242FAC((uint64_t)v10);
  }

  return sub_100242FAC((uint64_t)v11);
}

void sub_10052A314( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t sub_10052A368(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  v50[1] = 0LL;
  uint64_t v51 = 0LL;
  uint64_t v5 = (uint64_t)(a2 + 128);
  uint64_t v4 = a2[128];
  uint64_t v6 = a2[129];
  uint64_t v7 = a2[130];
  uint64_t v8 = a2[131];
  uint64_t v9 = a2[132];
  uint64_t v10 = a2[133];
  v50[0] = 0LL;
  sub_100242F28((uint64_t)v50, a1 + 280);
  sub_1003FE288((char **)(a1 + 344), (uint64_t)a2);
  uint64_t v11 = *(void **)(a1 + 512);
  if (v11)
  {
    char v12 = (uint64_t *)(a1 + 512);
    do
    {
      unint64_t v13 = v11[4];
      BOOL v14 = v13 >= (unint64_t)a2;
      else {
        uint64_t v15 = v11 + 1;
      }
      if (v14) {
        char v12 = v11;
      }
      uint64_t v11 = (void *)*v15;
    }

    while (*v15);
    if (v12 != (uint64_t *)(a1 + 512) && v12[4] <= (unint64_t)a2)
    {
      sub_100528FAC(a1, v12[5]);
      uint64_t v16 = v12[5];
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
      }
      sub_1001FDBCC((uint64_t **)(a1 + 504), v12);
      operator delete(v12);
    }
  }

  sub_100242F54((uint64_t)v50);
  v49[0] = 0LL;
  v49[1] = 0LL;
  sub_100242F28((uint64_t)v49, a1 + 48);
  uint64_t v17 = *(void *)(a1 + 112);
  if (v17) {
    sub_100525DE8(v17, a3);
  }
  unint64_t v18 = (v4 << 40) | (v6 << 32) | (v7 << 24) | (v8 << 16) | (v9 << 8) | v10;
  if (v18)
  {
    int v19 = (os_log_s *)qword_1008F75E0;
    uint64_t v20 = a1;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)a2, __p);
      int v21 = v53[3] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Pairing complete for device %{public}s",  buf,  0xCu);
      if ((v53[3] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

    if (*(_BYTE *)(a1 + 272))
    {
      char v48 = 0;
      sub_100242CA4(&v48);
      sub_1001E61F0(v5, 0);
      unint64_t v22 = sub_1001BEE0C(v18);
      int v46 = v22;
      __int16 v47 = WORD2(v22);
      else {
        BOOL v23 = sub_10012D544(v51);
      }
      int v25 = sub_10012D584(v51);
      sub_100242CD0(&v48);
      unint64_t v26 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C((uint64_t)a2, buf);
        char v27 = v59 >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)__p = 136446722;
        *(void *)&__p[4] = v27;
        *(_WORD *)&_BYTE __p[12] = 1024;
        *(_DWORD *)&_BYTE __p[14] = v23;
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)char v53 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Device %{public}s ClassicSMPSupported:%d encryptionMode:%d",  __p,  0x18u);
        if (v59 < 0) {
          operator delete(*(void **)buf);
        }
      }

      sub_100242CD8(&v48);
    }

    else
    {
      uint64_t v24 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Stack shutting down, ignore pairing timeout",  __p,  2u);
      }

      int v25 = 0;
      BOOL v23 = 0;
    }

    __n128 v28 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = sub_1003E4AB8((uint64_t)a2);
      int v30 = *(unsigned __int8 *)(a1 + 528);
      int v31 = a2[1121];
      id v32 = sub_1005BF848(v18);
      int v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      *(_DWORD *)__p = 67110402;
      *(_DWORD *)&__p[4] = a3;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = v29;
      *(_WORD *)&_BYTE __p[14] = 1024;
      *(_DWORD *)&__p[16] = v23;
      *(_WORD *)char v53 = 1024;
      *(_DWORD *)&v53[2] = v30;
      __int16 v54 = 1024;
      int v55 = v31;
      __int16 v56 = 2112;
      v57 = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "pairingComplete result:%d device->isDerivedFromLE:%d connectionSupportsClassicSMP:%d fCTKDDisabled:%d isPendingC lassicSMP:%d address:%@",  __p,  0x2Au);

      uint64_t v20 = a1;
    }

    if (*(_BYTE *)(a1 + 528) || !v23) {
      goto LABEL_41;
    }
    if (a2[1121])
    {
      sub_100117940(v5, 1);
      uint64_t v39 = (os_log_s *)qword_1008F75E0;
      if (v25 == 2)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C((uint64_t)a2, __p);
          __int16 v40 = v53[3] >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v40;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Initiating Classic SMP with device %{public}s",  buf,  0xCu);
          if ((v53[3] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }

        a2[1121] = 0;
        buf[0] = 0;
        sub_100242CA4(buf);
        int v41 = sub_10011C008(v51);
        sub_100242CD0(buf);
        if (v41)
        {
          if (v41 == 4821)
          {
            uint64_t v42 = (os_log_s *)qword_1008F75E0;
            if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__p = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Failed to start Classic SMP Pairing, waiting for other side to initiate",  __p,  2u);
            }
          }

          else
          {
            if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
              sub_10068F644();
            }
            sub_100242C98(buf);
            sub_100117940(v5, 0);
            sub_100242CD0(buf);
          }
        }

        uint64_t v43 = buf;
        goto LABEL_81;
      }

      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
        sub_10068F6A4();
      }
      __p[0] = 0;
      sub_100242CA4(__p);
      sub_100117940(v5, 0);
      sub_100242CD0(__p);
    }

    else
    {
      a2[1121] = 1;
      __p[0] = 0;
      sub_100242CA4(__p);
      sub_100117940(v5, 1);
      sub_100242CD0(__p);
    }

    uint64_t v43 = __p;
LABEL_81:
    sub_100242CD8(v43);
LABEL_41:
    *(void *)__p = 0LL;
    *(void *)&__p[8] = 0LL;
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_1008A00C8);
    }
    sub_1005C8684( (uint64_t)off_1008D5F28,  ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133],  1u,  0,  0LL,  0LL,  __p);
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_1008A00C8);
    }
    __int16 v34 = off_1008D5F28;
    uint64_t v35 = sub_100241F94(__p);
    __int16 v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    *((_BYTE *)sub_1005C6AC0((uint64_t)v34, v36) + 161) = 1;
  }

  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_1008A0068);
  }
  sub_1003CA474((uint64_t)off_1008D67E0);
  sub_10052B470(a1, a2, a3);
  if (a3 && !sub_1003D7094((uint64_t)a2))
  {
    if (qword_1008D67B8 != -1) {
      dispatch_once(&qword_1008D67B8, &stru_1008A0008);
    }
    sub_100535FDC((uint64_t)off_1008D67B0, (uint64_t)a2);
  }

  sub_100242FAC((uint64_t)v49);
  return sub_100242FAC((uint64_t)v50);
}

void sub_10052AAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_100242FAC((uint64_t)va);
  sub_100242FAC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10052AB5C(uint64_t a1)
{
  return sub_10052A198(a1 - 32);
}

uint64_t sub_10052AB64(void *a1, uint64_t a2)
{
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, (uint64_t)(a1 + 52));
  uint64_t v4 = (void *)a1[60];
  uint64_t v5 = (void *)a1[61];
  uint64_t v6 = v4;
  if (v4 != v5)
  {
    while (*v6 != a2)
    {
      if (++v6 == v5)
      {
        uint64_t v6 = (void *)a1[61];
        break;
      }
    }
  }

  if (v6 == v5)
  {
    unint64_t v7 = a1[62];
    if ((unint64_t)v5 >= v7)
    {
      uint64_t v9 = v5 - v4;
      uint64_t v10 = v7 - (void)v4;
      uint64_t v11 = v10 >> 2;
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        unint64_t v13 = (char *)sub_100008BA0((uint64_t)(a1 + 62), v12);
      }
      else {
        unint64_t v13 = 0LL;
      }
      BOOL v14 = &v13[8 * v9];
      uint64_t v15 = &v13[8 * v12];
      *(void *)BOOL v14 = a2;
      uint64_t v8 = v14 + 8;
      uint64_t v17 = (char *)a1[60];
      uint64_t v16 = (char *)a1[61];
      if (v16 != v17)
      {
        do
        {
          uint64_t v18 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v14 - 1) = v18;
          v14 -= 8;
        }

        while (v16 != v17);
        uint64_t v16 = (char *)a1[60];
      }

      a1[60] = v14;
      a1[61] = v8;
      a1[62] = v15;
      if (v16) {
        operator delete(v16);
      }
    }

    else
    {
      *uint64_t v5 = a2;
      uint64_t v8 = v5 + 1;
    }

    a1[61] = v8;
  }

  return sub_100242FAC((uint64_t)v20);
}

void sub_10052AC88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10052AC9C(uint64_t a1, uint64_t a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 416);
  uint64_t v5 = *(char **)(a1 + 480);
  uint64_t v4 = *(char **)(a1 + 488);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 488);
        break;
      }
    }
  }

  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 488) = &v5[v6];
  }

  return sub_100242FAC((uint64_t)v8);
}

BOOL sub_10052AD34(uint64_t a1, uint64_t a2)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008A00A8);
  }
  int v4 = 0;
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008A00A8);
  }
  return !sub_1003B22C4((uint64_t)off_1008D5F38, a2, &v4) && v4 == 1;
}

uint64_t sub_10052ADF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!a2) {
    return v2;
  }
  uint64_t v20 = 0LL;
  __int128 v19 = 0u;
  *(_OWORD *)uint64_t v17 = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)uint64_t v15 = 0u;
  __int128 v16 = 0u;
  *(_OWORD *)unint64_t v13 = 0u;
  __int128 v14 = 0u;
  __int128 v12 = 0u;
  sub_100532DC0((uint64_t)&v12 + 1);
  BYTE2(v13[0]) = 0;
  BYTE4(v13[0]) = 0;
  BYTE2(v15[0]) = 0;
  BYTE4(v15[0]) = 0;
  DWORD1(v18[1]) = 0;
  __int128 v14 = 0uLL;
  v13[1] = 0LL;
  LOBYTE(v15[0]) = 0;
  __int128 v16 = 0uLL;
  v15[1] = 0LL;
  LOBYTE(v17[0]) = 0;
  memset(v18, 0, 19);
  v17[1] = 0LL;
  BYTE8(v18[1]) = 1;
  BYTE2(v20) = 0;
  *(void *)((char *)&v18[1] + 14) = 0LL;
  *(void *)((char *)&v18[1] + 9) = 0LL;
  __int128 v19 = 0uLL;
  *((void *)&v18[2] + 1) = 0LL;
  LOBYTE(v20) = 0;
  BOOL v4 = sub_1003D2408(v2, (uint64_t)&v12);
  if (BYTE10(v18[1])) {
    BOOL v5 = v4;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5 || sub_1003D7094(v2))
  {
    __p = 0LL;
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    if (sub_10052AFEC(a1, (void ***)&__p))
    {
      uint64_t v2 = 0LL;
      if (!__p) {
        goto LABEL_17;
      }
    }

    else
    {
      unint64_t v7 = __p;
      if (__p != v10)
      {
        while (*v7 != v2)
        {
          if (++v7 == v10)
          {
            unint64_t v7 = v10;
            break;
          }
        }
      }

      uint64_t v2 = v10 != v7;
      if (!__p) {
        goto LABEL_17;
      }
    }

    uint64_t v10 = __p;
    operator delete(__p);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

void sub_10052AFB8( _Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1002071FC((uint64_t)&a13, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_10052AFEC(uint64_t a1, void ***a2)
{
  id v32 = 0LL;
  int v33 = 0LL;
  uint64_t v34 = 0LL;
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_1008A0008);
  }
  uint64_t v4 = sub_100535364(off_1008D67B0, (char **)&v32);
  if ((_DWORD)v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068F6D0();
    }
  }

  else
  {
    BOOL v5 = (uint64_t *)v32;
    uint64_t v6 = v33;
    if (v32 != v33)
    {
      do
      {
        uint64_t v7 = *v5;
        buf[0] = 0;
        uint64_t v8 = sub_1002E6D7C();
        sub_10002418C(__p, "HasTS");
        int v9 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint8_t *))(*(void *)v8 + 784LL))(v8, v7, __p, buf);
        if (SHIBYTE(v41) < 0) {
          operator delete(*(void **)__p);
        }
        uint64_t v10 = (os_log_s *)qword_1008F75E0;
        if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEBUG))
        {
          sub_1003CF00C(v7, v30);
          BOOL v23 = v30;
          if (v31 < 0) {
            BOOL v23 = (void **)v30[0];
          }
          *(_DWORD *)__p = 136446722;
          *(void *)&__p[4] = v23;
          __int16 v38 = 1024;
          int v39 = buf[0];
          __int16 v40 = 1024;
          int v41 = v9;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%{public}s hasTS: %d, res: %d",  __p,  0x18u);
          if (v31 < 0) {
            operator delete(v30[0]);
          }
        }

        if (!buf[0])
        {
          __int128 v12 = (uint64_t *)a2[1];
          unint64_t v11 = (unint64_t)a2[2];
          if ((unint64_t)v12 >= v11)
          {
            uint64_t v14 = ((char *)v12 - (char *)*a2) >> 3;
            uint64_t v15 = v11 - (void)*a2;
            uint64_t v16 = v15 >> 2;
            else {
              unint64_t v17 = v16;
            }
            if (v17) {
              uint64_t v18 = (char *)sub_100008BA0((uint64_t)(a2 + 2), v17);
            }
            else {
              uint64_t v18 = 0LL;
            }
            __int128 v19 = (uint64_t *)&v18[8 * v14];
            *__int128 v19 = v7;
            unint64_t v13 = (void **)(v19 + 1);
            int v21 = *a2;
            uint64_t v20 = (char *)a2[1];
            if (v20 != (char *)*a2)
            {
              do
              {
                uint64_t v22 = *((void *)v20 - 1);
                v20 -= 8;
                *--__int128 v19 = v22;
              }

              while (v20 != (char *)v21);
              uint64_t v20 = (char *)*a2;
            }

            *a2 = (void **)v19;
            a2[1] = v13;
            a2[2] = (void **)&v18[8 * v17];
            if (v20) {
              operator delete(v20);
            }
          }

          else
          {
            uint64_t *v12 = v7;
            unint64_t v13 = (void **)(v12 + 1);
          }

          a2[1] = v13;
        }

        ++v5;
      }

      while (v5 != v6);
    }

    v30[0] = 0LL;
    v30[1] = 0LL;
    sub_100242F28((uint64_t)v30, a1 + 536);
    if (*(void *)(a1 + 600))
    {
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_10089FFC8);
      }
      uint64_t v24 = sub_10040007C(off_1008D5F48, *(void *)(a1 + 600), 0);
      sub_100242F54((uint64_t)v30);
      if (v24)
      {
        int v25 = a2[1];
        unint64_t v26 = *a2;
        if (*a2 != v25)
        {
          while (*v26 != v24)
          {
            if (++v26 == v25)
            {
              unint64_t v26 = a2[1];
              break;
            }
          }
        }

        if (v26 != v25)
        {
          char v27 = (os_log_s *)qword_1008F75E0;
          if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C((uint64_t)v24, __p);
            if (v41 >= 0) {
              __n128 v28 = __p;
            }
            else {
              __n128 v28 = *(_BYTE **)__p;
            }
            *(_DWORD *)buf = 136446210;
            __int16 v36 = v28;
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Currently unpairing device %{public}s. Don't send it as part of the paired devices list",  buf,  0xCu);
            if (SHIBYTE(v41) < 0) {
              operator delete(*(void **)__p);
            }
            int v25 = a2[1];
          }

          if (v25 != v26 + 1) {
            memmove(v26, v26 + 1, (char *)v25 - (char *)(v26 + 1));
          }
          a2[1] = v25 - 1;
        }
      }
    }

    sub_100242FAC((uint64_t)v30);
  }

  if (v32)
  {
    int v33 = (uint64_t *)v32;
    operator delete(v32);
  }

  return v4;
}

void sub_10052B404( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10052B470(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)a2, &__p);
    uint64_t v7 = v20 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sending 'pairing complete' event for device %{public}s with result %d",  buf,  0x12u);
    if (SHIBYTE(v20) < 0) {
      operator delete(__p);
    }
  }

  *(void *)buf = 0LL;
  *(void *)&uint8_t buf[8] = 0LL;
  sub_100242F28((uint64_t)buf, a1 + 416);
  __p = 0LL;
  __int128 v19 = 0LL;
  uint64_t v20 = 0LL;
  sub_100240540(&__p, a1 + 480);
  sub_100242F54((uint64_t)buf);
  for (uint64_t i = __p; i != v19; ++i)
    (*(void (**)(void, unsigned __int8 *, uint64_t))(*(void *)*i + 24LL))(*i, a2, a3);
  if (!(_DWORD)a3)
  {
    uint64_t v9 = a2[128];
    uint64_t v10 = a2[129];
    uint64_t v11 = a2[130];
    uint64_t v12 = a2[131];
    uint64_t v13 = a2[132];
    uint64_t v14 = a2[133];
    uint64_t v15 = sub_100404EB8();
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_10053046C;
    v17[3] = &unk_10087EB20;
    v17[4] = (v9 << 40) | (v10 << 32) | (v11 << 24) | (v12 << 16) | (v13 << 8) | v14;
    sub_100405384(v15, v17);
  }

  if (__p)
  {
    __int128 v19 = __p;
    operator delete(__p);
  }

  return sub_100242FAC((uint64_t)buf);
}

void sub_10052B648( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

BOOL sub_10052B684(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x18uLL);
  BOOL v5 = operator new(0x48uLL);
  sub_100534374((uint64_t)v5, a2);
  v4[4] = 1;
  *(void *)uint64_t v4 = &off_10089FE78;
  *((void *)v4 + 2) = v5;
  return sub_100405744(*(void *)(a1 + 40), v4);
}

void sub_10052B6EC(_Unwind_Exception *a1)
{
}

BOOL sub_10052B710(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = operator new(0x18uLL);
  BOOL v5 = (__n128 *)operator new(0x38uLL);
  sub_10053465C(v5, a2);
  v4[4] = 1;
  *(void *)uint64_t v4 = &off_10089FEB0;
  *((void *)v4 + 2) = v5;
  return sub_100405744(*(void *)(a1 + 40), v4);
}

void sub_10052B778(_Unwind_Exception *a1)
{
}

BOOL sub_10052B79C(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = operator new(0x18uLL);
  BOOL v5 = (__n128 *)operator new(0x38uLL);
  sub_1005347F4(v5, a2);
  v4[4] = 1;
  *(void *)uint64_t v4 = &off_10089FEE8;
  *((void *)v4 + 2) = v5;
  return sub_100405744(*(void *)(a1 + 40), v4);
}

void sub_10052B804(_Unwind_Exception *a1)
{
}

BOOL sub_10052B828(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, _OWORD *a5)
{
  uint64_t v10 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 141560835;
    uint64_t v14 = 1752392040LL;
    __int16 v15 = 1041;
    int v16 = 16;
    __int16 v17 = 2097;
    uint64_t v18 = a2;
    __int16 v19 = 2160;
    uint64_t v20 = 1752392040LL;
    __int16 v21 = 1041;
    int v22 = 16;
    __int16 v23 = 2097;
    uint64_t v24 = a3;
    __int16 v25 = 2160;
    uint64_t v26 = 1752392040LL;
    __int16 v27 = 1041;
    int v28 = 16;
    __int16 v29 = 2097;
    int v30 = a4;
    __int16 v31 = 2160;
    uint64_t v32 = 1752392040LL;
    __int16 v33 = 1041;
    int v34 = 16;
    __int16 v35 = 2097;
    __int16 v36 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "PairingManager::localOOBDataGenerated C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:%{private , mask.hash}.16P R256:%{private, mask.hash}.16P",  (uint8_t *)&v13,  0x6Au);
  }

  uint64_t v11 = (char *)operator new(0x50uLL);
  *((_WORD *)v11 + 4) = 1;
  *(void *)uint64_t v11 = &off_10089FF20;
  *(_OWORD *)(v11 + 10) = *a2;
  *(_OWORD *)(v11 + 26) = *a3;
  *(_OWORD *)(v11 + 42) = *a4;
  *(_OWORD *)(v11 + 58) = *a5;
  return sub_100405744(*(void *)(a1 + 40), v11);
}

uint64_t sub_10052B9A4(uint64_t a1, void **a2)
{
  uint64_t v4 = (unsigned __int8 *)a2[1];
  v56[0] = 0LL;
  v56[1] = 0LL;
  sub_100242F28((uint64_t)v56, a1 + 208);
  v55[0] = 0LL;
  v55[1] = 0LL;
  sub_100242F28((uint64_t)v55, a1 + 280);
  BOOL v5 = a2[1];
  uint64_t v7 = *(void **)(a1 + 352);
  unint64_t v6 = *(void *)(a1 + 360);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *(void *)(a1 + 344);
    uint64_t v10 = ((uint64_t)v7 - v9) >> 3;
    uint64_t v11 = v6 - v9;
    uint64_t v12 = v11 >> 2;
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      uint64_t v14 = (char *)sub_100008BA0(a1 + 360, v13);
    }
    else {
      uint64_t v14 = 0LL;
    }
    __int16 v15 = &v14[8 * v10];
    int v16 = &v14[8 * v13];
    *(void *)__int16 v15 = v5;
    uint64_t v8 = v15 + 8;
    uint64_t v18 = *(char **)(a1 + 344);
    __int16 v17 = *(char **)(a1 + 352);
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }

      while (v17 != v18);
      __int16 v17 = *(char **)(a1 + 344);
    }

    *(void *)(a1 + 344) = v15;
    *(void *)(a1 + 352) = v8;
    *(void *)(a1 + 360) = v16;
    if (v17) {
      operator delete(v17);
    }
  }

  else
  {
    *uint64_t v7 = v5;
    uint64_t v8 = v7 + 1;
  }

  *(void *)(a1 + 352) = v8;
  uint64_t v20 = operator new(0x48uLL);
  sub_100534374((uint64_t)v20, (uint64_t)a2);
  *(void *)buf = a2[1];
  __p[0] = buf;
  sub_100029574((uint64_t **)(a1 + 504), (unint64_t *)buf, (uint64_t)&unk_1006C2518, (uint64_t **)__p)[5] = (uint64_t)v20;
  __int16 v21 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)a2[1], __p);
    int v22 = (SBYTE7(v64) & 0x80u) == 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Tracking pin-code request for device %{public}s",  buf,  0xCu);
    if (SBYTE7(v64) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_100242F54((uint64_t)v55);
  if (!*(_BYTE *)(a1 + 272))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068F6FC();
    }
    goto LABEL_31;
  }

  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_1008A0008);
  }
  if (!sub_100537148((uint64_t)off_1008D67B0, (uint64_t)(v4 + 128)))
  {
    if (qword_1008D67E8 != -1) {
      dispatch_once(&qword_1008D67E8, &stru_1008A0068);
    }
    sub_1003CA40C((uint64_t)off_1008D67E0);
    sub_10052C448(a1, a2, 0LL);
    char v54 = 0;
    sub_100242CA4(&v54);
    unsigned __int8 v23 = (*((uint64_t (**)(void **))*a2 + 3))(a2);
    sub_1001E61F0((uint64_t)(v4 + 128), v23);
    sub_100242CD0(&v54);
    v53[0] = 0LL;
    v53[1] = 0LL;
    sub_100242F28((uint64_t)v53, a1 + 48);
    __n128 __src = 0uLL;
    char v73 = 0;
    uint64_t v24 = sub_100532E28((char *)&__src, "0000");
    if (sub_10052AD34((uint64_t)v24, (uint64_t)v4))
    {
      if (qword_1008D67B8 != -1) {
        dispatch_once(&qword_1008D67B8, &stru_1008A0008);
      }
      sub_100535EF4((uint64_t)off_1008D67B0, (uint64_t)v4, (uint64_t)&__src);
      uint64_t v25 = *(void *)(a1 + 112);
      if (v25) {
        sub_100525ED4(v25, (uint64_t)v4);
      }
      uint64_t v26 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C((uint64_t)v4, __p);
        __int16 v27 = (SBYTE7(v64) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Detected docked accessory - automatically pairing device %{public}s",  buf,  0xCu);
        if (SBYTE7(v64) < 0) {
          operator delete(__p[0]);
        }
      }

      sub_1005344C8(a2, &__src);
      *(void *)buf = a2[1];
      __p[0] = buf;
      int v28 = sub_100029574((uint64_t **)(a1 + 504), (unint64_t *)buf, (uint64_t)&unk_1006C2518, (uint64_t **)__p);
      sub_10052904C(a1, (uint64_t *)v28[5]);
LABEL_105:
      nullsub_63(&__src, v29);
      sub_100242FAC((uint64_t)v53);
      sub_100242CD8(&v54);
      goto LABEL_106;
    }

    int v30 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Checking if this device does unnecessary pairing",  (uint8_t *)__p,  2u);
    }

    if (sub_10052ADF0(a1, (uint64_t)v4))
    {
      if (qword_1008D67B8 != -1) {
        dispatch_once(&qword_1008D67B8, &stru_1008A0008);
      }
      if (!sub_100535EF4((uint64_t)off_1008D67B0, (uint64_t)v4, (uint64_t)&__src))
      {
        __p[0] = 0LL;
        __p[1] = 0LL;
        *(void *)&__int128 v64 = 0LL;
        sub_100532EFC((unsigned __int8 *)&__src, __p);
        uint64_t v42 = (os_log_s *)qword_1008F75E0;
        if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v43 = __p;
          if (SBYTE7(v64) < 0) {
            uint64_t v43 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v43;
          _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Using pre selected pin code for this device: %{public}s",  buf,  0xCu);
        }

        sub_1005344C8(a2, &__src);
        v51[0] = a2[1];
        *(void *)buf = v51;
        char v44 = sub_100029574((uint64_t **)(a1 + 504), (unint64_t *)v51, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
        sub_10052904C(a1, (uint64_t *)v44[5]);
        if (SBYTE7(v64) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_105;
      }

      __int16 v31 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Failed to get pin code for this device",  (uint8_t *)__p,  2u);
      }
    }

    uint64_t v32 = *(void *)(a1 + 112);
    if (!v32)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
        sub_10068F728();
      }
      sub_10052A368(a1, v4, 0xA2u);
      (*((void (**)(void **))*a2 + 4))(a2);
      goto LABEL_105;
    }

    sub_100525ED4(v32, (uint64_t)v4);
    *(void *)buf = a2[1];
    __p[0] = buf;
    __int16 v33 = sub_100029574((uint64_t **)(a1 + 504), (unint64_t *)buf, (uint64_t)&unk_1006C2518, (uint64_t **)__p);
    sub_10052904C(a1, (uint64_t *)v33[5]);
    uint64_t v71 = 0LL;
    __int128 v70 = 0u;
    memset(v69, 0, sizeof(v69));
    __int128 v67 = 0u;
    *(_OWORD *)__int128 v68 = 0u;
    __int128 v65 = 0u;
    *(_OWORD *)__int128 v66 = 0u;
    *(_OWORD *)__p = 0u;
    __int128 v64 = 0u;
    sub_100532DC0((uint64_t)__p + 1);
    BYTE2(v64) = 0;
    BYTE4(v64) = 0;
    BYTE2(v66[0]) = 0;
    BYTE4(v66[0]) = 0;
    DWORD1(v69[1]) = 0;
    __int128 v65 = 0uLL;
    *((void *)&v64 + 1) = 0LL;
    LOBYTE(v66[0]) = 0;
    __int128 v67 = 0uLL;
    v66[1] = 0LL;
    LOBYTE(v68[0]) = 0;
    memset(v69, 0, 19);
    v68[1] = 0LL;
    BYTE8(v69[1]) = 1;
    BYTE2(v71) = 0;
    *(void *)((char *)&v69[1] + 14) = 0LL;
    *(void *)((char *)&v69[1] + 9) = 0LL;
    __int128 v70 = 0uLL;
    *((void *)&v69[2] + 1) = 0LL;
    LOBYTE(v71) = 0;
    if (qword_1008D67E8 != -1) {
      dispatch_once(&qword_1008D67E8, &stru_1008A0068);
    }
    if (sub_1003C9F70((uint64_t)off_1008D67E0, (uint64_t)v4)
      && ((BOOL v34 = sub_1003D2408((uint64_t)v4, (uint64_t)__p), LOBYTE(__p[0])) ? (v35 = v34) : (v35 = 0),
          v35 && (sub_100532E50(&__src, (__n128 *)((char *)__p + 1)), LOBYTE(__p[0]))))
    {
      __int16 v36 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        sub_100532EFC((unsigned __int8 *)&__src, buf);
        int v37 = v58;
        __int16 v38 = *(_BYTE **)buf;
        sub_1003CF00C((uint64_t)v4, v51);
        int v39 = buf;
        if (v37 < 0) {
          int v39 = v38;
        }
        if (v52 >= 0) {
          __int16 v40 = v51;
        }
        else {
          __int16 v40 = (void **)v51[0];
        }
        *(_DWORD *)char v59 = 136315394;
        v60 = v39;
        __int16 v61 = 2082;
        v62 = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Using default pincode %s for device %{public}s",  v59,  0x16u);
        if (v52 < 0) {
          operator delete(v51[0]);
        }
        if (v58 < 0) {
          operator delete(*(void **)buf);
        }
      }
    }

    else
    {
      if (sub_100527028(*(void *)(a1 + 112), (unint64_t)a2[1], &__src)
        || sub_100527138(*(void *)(a1 + 112), (unint64_t)v4, (uint64_t)&__src))
      {
        if (sub_100526094(*(void *)(a1 + 112)))
        {
          (*((void (**)(void **))*a2 + 4))(a2);
          sub_10052A368(a1, v4, 0xA5u);
        }

        goto LABEL_98;
      }

      uint64_t v45 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        sub_100532EFC((unsigned __int8 *)&__src, buf);
        int v46 = v58;
        __int16 v47 = *(_BYTE **)buf;
        sub_1003CF00C((uint64_t)v4, v51);
        char v48 = buf;
        if (v46 < 0) {
          char v48 = v47;
        }
        if (v52 >= 0) {
          uint64_t v49 = v51;
        }
        else {
          uint64_t v49 = (void **)v51[0];
        }
        *(_DWORD *)char v59 = 136315394;
        v60 = v48;
        __int16 v61 = 2082;
        v62 = v49;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "Using cached pincode %s for device %{public}s",  v59,  0x16u);
        if (v52 < 0) {
          operator delete(v51[0]);
        }
        if (v58 < 0) {
          operator delete(*(void **)buf);
        }
      }

      sub_100527200(*(void *)(a1 + 112), (unint64_t)v4, (uint64_t *)&__src);
    }

    sub_1005344C8(a2, &__src);
LABEL_98:
    if (SHIBYTE(v69[0]) < 0) {
      operator delete(v68[1]);
    }
    if (SHIBYTE(v67) < 0) {
      operator delete(v66[1]);
    }
    if (SHIBYTE(v65) < 0) {
      operator delete(*((void **)&v64 + 1));
    }
    nullsub_63((char *)__p + 1, v41);
    goto LABEL_105;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
  {
    sub_1003CF00C((uint64_t)a2[1], __p);
    sub_10068F754();
  }

void sub_10052C35C( _Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  sub_1002071FC((uint64_t)&a33, a2);
  nullsub_63(v38 - 128, v40);
  sub_100242FAC((uint64_t)&a12);
  sub_100242CD8(&a17);
  sub_100242FAC((uint64_t)&a18);
  sub_100242FAC((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_10052C448(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(v6, __p);
    int v8 = v16;
    uint64_t v9 = (void **)__p[0];
    int v10 = (*(uint64_t (**)(void *))(*a2 + 48LL))(a2);
    uint64_t v11 = __p;
    if (v8 < 0) {
      uint64_t v11 = v9;
    }
    uint64_t v12 = "for self-initiated pairing to";
    *(_DWORD *)buf = 136315650;
    if ((_DWORD)a3) {
      uint64_t v12 = "for incoming pairing from";
    }
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v11;
    *(_WORD *)&_BYTE buf[22] = 1024;
    int v18 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Notifying 'pairing started' %s %{public}s for Auth type %d",  buf,  0x1Cu);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  sub_100242F28((uint64_t)__p, a1 + 416);
  memset(buf, 0, sizeof(buf));
  sub_100240540(buf, a1 + 480);
  sub_100242F54((uint64_t)__p);
  unint64_t v13 = *(void **)buf;
  if (*(void *)buf != *(void *)&buf[8])
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v13 + 16LL))(*v13, v6, a3);
      ++v13;
    }

    while (v13 != *(void **)&buf[8]);
    unint64_t v13 = *(void **)buf;
  }

  if (v13)
  {
    *(void *)&uint8_t buf[8] = v13;
    operator delete(v13);
  }

  return sub_100242FAC((uint64_t)__p);
}

void sub_10052C5F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10052C648(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = (unsigned __int8 *)a2->n128_u64[1];
  v45[0] = 0LL;
  v45[1] = 0LL;
  sub_100242F28((uint64_t)v45, a1 + 208);
  v44[0] = 0LL;
  v44[1] = 0LL;
  sub_100242F28((uint64_t)v44, a1 + 280);
  unint64_t v5 = a2->n128_u64[1];
  uint64_t v7 = *(unint64_t **)(a1 + 352);
  unint64_t v6 = *(void *)(a1 + 360);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *(void *)(a1 + 344);
    uint64_t v10 = ((uint64_t)v7 - v9) >> 3;
    uint64_t v11 = v6 - v9;
    uint64_t v12 = v11 >> 2;
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      uint64_t v14 = (char *)sub_100008BA0(a1 + 360, v13);
    }
    else {
      uint64_t v14 = 0LL;
    }
    __int16 v15 = (unint64_t *)&v14[8 * v10];
    char v16 = &v14[8 * v13];
    *__int16 v15 = v5;
    int v8 = v15 + 1;
    int v18 = *(char **)(a1 + 344);
    __int16 v17 = *(char **)(a1 + 352);
    if (v17 != v18)
    {
      do
      {
        unint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *--__int16 v15 = v19;
      }

      while (v17 != v18);
      __int16 v17 = *(char **)(a1 + 344);
    }

    *(void *)(a1 + 344) = v15;
    *(void *)(a1 + 352) = v8;
    *(void *)(a1 + 360) = v16;
    if (v17) {
      operator delete(v17);
    }
  }

  else
  {
    *uint64_t v7 = v5;
    int v8 = v7 + 1;
  }

  *(void *)(a1 + 352) = v8;
  uint64_t v20 = (__n128 *)operator new(0x38uLL);
  sub_10053465C(v20, a2);
  *(void *)buf = a2->n128_u64[1];
  __p[0] = buf;
  sub_100029574((uint64_t **)(a1 + 504), (unint64_t *)buf, (uint64_t)&unk_1006C2518, (uint64_t **)__p)[5] = (uint64_t)v20;
  __int16 v21 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)v4, __p);
    int v22 = v43 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Tracking numeric comparison request for device %{public}s",  buf,  0xCu);
    if (v43 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_100242F54((uint64_t)v44);
  if (!*(_BYTE *)(a1 + 272))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068F6FC();
    }
    goto LABEL_31;
  }

  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_1008A0008);
  }
  if (!sub_100537148((uint64_t)off_1008D67B0, (uint64_t)(v4 + 128)))
  {
    if (sub_1003CF350(v4)
      && (sub_10053469C((uint64_t)a2) & 1) == 0
      && sub_1005346AC((uint64_t)a2))
    {
      unsigned __int8 v23 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a2->n128_i64[1], __p);
        uint64_t v24 = v43 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Reject just works pairing attempt from paired device %{public}s",  buf,  0xCu);
        if (v43 < 0) {
          operator delete(__p[0]);
        }
      }

      goto LABEL_31;
    }

    if (qword_1008D67E8 != -1) {
      dispatch_once(&qword_1008D67E8, &stru_1008A0068);
    }
    sub_1003CA40C((uint64_t)off_1008D67E0);
    sub_10052C448(a1, a2, 0LL);
    char v41 = 0;
    sub_100242CA4(&v41);
    unsigned __int8 v25 = (*(uint64_t (**)(__n128 *))(a2->n128_u64[0] + 24))(a2);
    sub_1001E61F0((uint64_t)(v4 + 128), v25);
    sub_100242CD0(&v41);
    *(_OWORD *)buf = 0uLL;
    uint64_t v26 = sub_100242F28((uint64_t)buf, a1 + 48);
    BOOL v27 = sub_10052AD34(v26, (uint64_t)v4);
    uint64_t v28 = *(void *)(a1 + 112);
    if (v27)
    {
      if (v28) {
        sub_100525ED4(v28, (uint64_t)v4);
      }
      uint64_t v29 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C((uint64_t)v4, __p);
        int v30 = v43 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)int v46 = 136446210;
        *(void *)&v46[4] = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Detected docked accessory - automatically pairing device %{public}s",  v46,  0xCu);
        if (v43 < 0) {
          operator delete(__p[0]);
        }
      }

      (*(void (**)(__n128 *))(a2->n128_u64[0] + 40))(a2);
      *(void *)int v46 = a2->n128_u64[1];
      __p[0] = v46;
      __int16 v31 = sub_100029574((uint64_t **)(a1 + 504), (unint64_t *)v46, (uint64_t)&unk_1006C2518, (uint64_t **)__p);
      sub_10052904C(a1, (uint64_t *)v31[5]);
      goto LABEL_72;
    }

    if (v28)
    {
      sub_100525ED4(v28, (uint64_t)v4);
      *(void *)int v46 = a2->n128_u64[1];
      __p[0] = v46;
      uint64_t v32 = sub_100029574((uint64_t **)(a1 + 504), (unint64_t *)v46, (uint64_t)&unk_1006C2518, (uint64_t **)__p);
      sub_10052904C(a1, (uint64_t *)v32[5]);
      if (qword_1008D67E8 != -1) {
        dispatch_once(&qword_1008D67E8, &stru_1008A0068);
      }
      uint64_t v37 = sub_1002E6BF0();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v37 + 272LL))(v37)
        && (sub_1003D0C00((uint64_t)v4) || sub_1003D56C8((uint64_t)v4)))
      {
        uint64_t v38 = (os_log_s *)qword_1008F75E0;
        if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Cannot auto-accept outgoing SSP request for mouse/trackpad devices",  (uint8_t *)__p,  2u);
        }

void sub_10052CCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_100242FAC((uint64_t)va);
  sub_100242FAC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10052CD78(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = (unsigned __int8 *)a2->n128_u64[1];
  v34[0] = 0LL;
  v34[1] = 0LL;
  sub_100242F28((uint64_t)v34, a1 + 208);
  v33[0] = 0LL;
  v33[1] = 0LL;
  sub_100242F28((uint64_t)v33, a1 + 280);
  unint64_t v5 = a2->n128_u64[1];
  uint64_t v7 = *(unint64_t **)(a1 + 352);
  unint64_t v6 = *(void *)(a1 + 360);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *(void *)(a1 + 344);
    uint64_t v10 = ((uint64_t)v7 - v9) >> 3;
    uint64_t v11 = v6 - v9;
    uint64_t v12 = v11 >> 2;
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      uint64_t v14 = (char *)sub_100008BA0(a1 + 360, v13);
    }
    else {
      uint64_t v14 = 0LL;
    }
    __int16 v15 = (unint64_t *)&v14[8 * v10];
    char v16 = &v14[8 * v13];
    *__int16 v15 = v5;
    int v8 = v15 + 1;
    int v18 = *(char **)(a1 + 344);
    __int16 v17 = *(char **)(a1 + 352);
    if (v17 != v18)
    {
      do
      {
        unint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *--__int16 v15 = v19;
      }

      while (v17 != v18);
      __int16 v17 = *(char **)(a1 + 344);
    }

    *(void *)(a1 + 344) = v15;
    *(void *)(a1 + 352) = v8;
    *(void *)(a1 + 360) = v16;
    if (v17) {
      operator delete(v17);
    }
  }

  else
  {
    *uint64_t v7 = v5;
    int v8 = v7 + 1;
  }

  *(void *)(a1 + 352) = v8;
  uint64_t v20 = (__n128 *)operator new(0x38uLL);
  sub_1005347F4(v20, a2);
  *(void *)buf = a2->n128_u64[1];
  __p[0] = buf;
  sub_100029574((uint64_t **)(a1 + 504), (unint64_t *)buf, (uint64_t)&unk_1006C2518, (uint64_t **)__p)[5] = (uint64_t)v20;
  __int16 v21 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)v4, __p);
    int v22 = v32 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Tracking passkey request for device %{public}s",  buf,  0xCu);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_100242F54((uint64_t)v33);
  if (!*(_BYTE *)(a1 + 272))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068F6FC();
    }
    goto LABEL_31;
  }

  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_1008A0008);
  }
  if (sub_100537148((uint64_t)off_1008D67B0, (uint64_t)(v4 + 128)))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(a2->n128_i64[1], __p);
      sub_10068F7E4();
    }

void sub_10052D1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_100242FAC((uint64_t)va);
  sub_100242FAC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10052D218(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, _OWORD *a5)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, a1 + 208);
  uint64_t v10 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141560835;
    *(void *)&uint8_t buf[4] = 1752392040LL;
    *(_WORD *)&_BYTE buf[12] = 1041;
    *(_DWORD *)&buf[14] = 16;
    __int16 v15 = 2097;
    char v16 = a2;
    __int16 v17 = 2160;
    uint64_t v18 = 1752392040LL;
    __int16 v19 = 1041;
    int v20 = 16;
    __int16 v21 = 2097;
    int v22 = a3;
    __int16 v23 = 2160;
    uint64_t v24 = 1752392040LL;
    __int16 v25 = 1041;
    int v26 = 16;
    __int16 v27 = 2097;
    uint64_t v28 = a4;
    __int16 v29 = 2160;
    uint64_t v30 = 1752392040LL;
    __int16 v31 = 1041;
    int v32 = 16;
    __int16 v33 = 2097;
    int v34 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "PairingManager::notifyLocalOOBDataReady C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:%{priva te, mask.hash}.16P R256:%{private, mask.hash}.16P",  buf,  0x6Au);
  }

  if (*(_BYTE *)(a1 + 272))
  {
    *(void *)buf = 0LL;
    *(void *)&uint8_t buf[8] = 0LL;
    sub_100242F28((uint64_t)buf, a1 + 48);
    uint64_t v11 = *(void *)(a1 + 112);
    if (v11)
    {
      sub_100527318(v11, a2, a3, a4, a5);
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
    {
      sub_10068F728();
    }

    sub_100242FAC((uint64_t)buf);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
  {
    sub_10068F82C();
  }

  return sub_100242FAC((uint64_t)v13);
}

void sub_10052D3E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_10052D410(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!(_DWORD)a3)
  {
    uint64_t v30 = 0LL;
    uint64_t v8 = a2 + 128;
    int v28 = *(_DWORD *)(a2 + 128);
    __int16 v29 = *(_WORD *)(a2 + 132);
    int v27 = sub_10010EEE0((uint64_t)&v28, &v30);
    uint64_t v56 = 0LL;
    __int128 v55 = 0u;
    memset(v54, 0, sizeof(v54));
    __int128 v52 = 0u;
    *(_OWORD *)char v53 = 0u;
    __int128 v50 = 0u;
    *(_OWORD *)uint64_t v51 = 0u;
    __int128 v48 = 0u;
    *(_OWORD *)uint64_t v49 = 0u;
    sub_100532DC0((uint64_t)&v48 + 1);
    BYTE2(v49[0]) = 0;
    BYTE4(v49[0]) = 0;
    BYTE2(v51[0]) = 0;
    BYTE4(v51[0]) = 0;
    DWORD1(v54[1]) = 0;
    __int128 v50 = 0uLL;
    v49[1] = 0LL;
    LOBYTE(v51[0]) = 0;
    __int128 v52 = 0uLL;
    v51[1] = 0LL;
    LOBYTE(v53[0]) = 0;
    memset(v54, 0, 19);
    v53[1] = 0LL;
    BYTE8(v54[1]) = 1;
    BYTE2(v56) = 0;
    *(void *)((char *)&v54[1] + 14) = 0LL;
    *(void *)((char *)&v54[1] + 9) = 0LL;
    __int128 v55 = 0uLL;
    *((void *)&v54[2] + 1) = 0LL;
    LOBYTE(v56) = 0;
    BOOL v9 = sub_1003D2408(a2, (uint64_t)&v48);
    if (BYTE2(v56)) {
      BOOL v10 = v9;
    }
    else {
      BOOL v10 = 0;
    }
    uint64_t v11 = (os_log_s *)qword_1008F75E0;
    if (v10 && os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, &__p);
      if ((v39 & 0x8000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = p_p;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Force No Clasic SMP support for device %{public}s",  buf,  0xCu);
      if (SBYTE1(v39) < 0) {
        operator delete(__p);
      }
      uint64_t v11 = (os_log_s *)qword_1008F75E0;
    }

    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = v8;
      int v14 = *(unsigned __int8 *)(a2 + 1121);
      int v15 = *(unsigned __int8 *)(a1 + 528);
      int v16 = sub_1003CF350((unsigned __int8 *)a2);
      BOOL v17 = sub_1003FE254(a1 + 344, a2);
      sub_1003FE1B4((unsigned __int8 *)&v28, buf);
      uint64_t v18 = buf;
      if (v32 < 0) {
        uint64_t v18 = *(_BYTE **)buf;
      }
      LODWORD(__p) = 67110914;
      HIDWORD(__p) = v27;
      __int16 v34 = 1024;
      int v35 = a4;
      __int16 v36 = 1024;
      int v37 = v14;
      __int16 v38 = 1024;
      int v39 = v15;
      __int16 v40 = 1024;
      int v41 = v16;
      __int16 v42 = 1024;
      BOOL v43 = v17;
      __int16 v44 = 1024;
      BOOL v45 = v10;
      __int16 v46 = 2082;
      __int16 v47 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "encryptionComplete status:%d encryptionMode:%d pendingClassicSMP:%d fCTKDDisabled=%d isPaired:%d isPairing:%d di sableRemoteCTKDSupport:%d address:%{public}s",  (uint8_t *)&__p,  0x36u);
      if (v32 < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v8 = v26;
    }

    if (a4 == 2 && !v27 && !*(_BYTE *)(a1 + 528) && !v10)
    {
      sub_100117940(v8, 1);
      if (*(_BYTE *)(a2 + 1121))
      {
        int v20 = (os_log_s *)qword_1008F75E0;
        if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C(a2, &__p);
          __int16 v21 = (v39 & 0x8000) == 0 ? &__p : (void **)__p;
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Initiating Classic SMP with device %{public}s",  buf,  0xCu);
          if (SBYTE1(v39) < 0) {
            operator delete(__p);
          }
        }

        *(_BYTE *)(a2 + 1121) = 0;
        int v22 = sub_10011C008(v30);
        if (v22)
        {
          if (v22 == 4821)
          {
            __int16 v23 = (os_log_s *)qword_1008F75E0;
            if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__p) = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Failed to start Classic SMP Pairing, waiting for other side to initiate",  (uint8_t *)&__p,  2u);
            }
          }

          else
          {
            if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
              sub_10068F644();
            }
            sub_100117940(v8, 0);
          }
        }
      }

      else if (sub_1003FE254(a1 + 344, a2) || (sub_1003CF350((unsigned __int8 *)a2) & 1) == 0)
      {
        *(_BYTE *)(a2 + 1121) = 1;
      }
    }

    if (SHIBYTE(v54[0]) < 0) {
      operator delete(v53[1]);
    }
    if (SHIBYTE(v52) < 0) {
      operator delete(v51[1]);
    }
    if (SHIBYTE(v50) < 0) {
      operator delete(v49[1]);
    }
    nullsub_63((char *)&v48 + 1, v13);
  }

  uint64_t v24 = sub_1002E8D94();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 640LL))(v24, a3, 1LL);
}

void sub_10052D898( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

uint64_t sub_10052D8C4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char v3 = (unsigned __int8 *)a3;
  v16[1] = 0LL;
  BOOL v17 = (unsigned __int8 *)a3;
  v16[0] = 0LL;
  sub_100242F28((uint64_t)v16, a1 + 280);
  BOOL v5 = sub_1003FE288((char **)(a1 + 344), (uint64_t)v3);
  if (v5 && os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
  {
    sub_1003CF00C((uint64_t)v3, v15);
    sub_10068F8A0();
  }

  unint64_t v6 = *(void **)(a1 + 512);
  if (!v6) {
    goto LABEL_25;
  }
  uint64_t v7 = a1 + 512;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)v3;
    else {
      BOOL v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    unint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 != a1 + 512 && *(void *)(v7 + 32) <= (unint64_t)v3 && (uint64_t v11 = *(void *)(v7 + 40)) != 0)
  {
    uint64_t v12 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v14 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "pairing timedout, rejecting pairing request",  v14,  2u);
    }

    sub_10020166C(a1 + 504, (unint64_t *)&v17);
    sub_100528FAC(a1, v11);
    (*(void (**)(uint64_t))(*(void *)v11 + 32LL))(v11);
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    char v3 = v17;
  }

  else
  {
LABEL_25:
    if (v5 && os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C((uint64_t)v3, v14);
      sub_10068F858();
    }
  }

  sub_10052A368(a1, v3, 0xA1u);
  return sub_100242FAC((uint64_t)v16);
}

void sub_10052DAAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_10052DAD4(uint64_t a1)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 208);
  uint64_t v2 = (os_log_s *)qword_1008F75E0;
  if (*(_BYTE *)(a1 + 272))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Cancelling all currently pending pairing attempts",  buf,  2u);
    }

    v13[0] = 0LL;
    v13[1] = 0LL;
    sub_100242F28((uint64_t)v13, a1 + 280);
    *(void *)buf = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    sub_100240540(buf, a1 + 344);
    *(void *)(a1 + 352) = *(void *)(a1 + 344);
    sub_100242F54((uint64_t)v13);
    sub_100242F54((uint64_t)v14);
    char v3 = *(unsigned __int8 ***)buf;
    if (*(unsigned __int8 ***)buf != v11)
    {
      do
      {
        BOOL v9 = *v3;
        sub_100242ECC((uint64_t)v13);
        *(void *)int v15 = &v9;
        uint64_t v4 = sub_100029574((uint64_t **)(a1 + 504), (unint64_t *)&v9, (uint64_t)&unk_1006C2518, (uint64_t **)v15)[5];
        sub_100242F54((uint64_t)v13);
        if (v4)
        {
          unint64_t v6 = (os_log_s *)qword_1008F75E0;
          if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int v15 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Pairing cancelled, rejecting pairing request",  v15,  2u);
          }

          uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32LL))(v4);
        }

        sub_10052DD14(v5, (uint64_t)v9);
        sub_10052A368(a1, v9, 0xA1u);
        ++v3;
      }

      while (v3 != v11);
      char v3 = *(unsigned __int8 ***)buf;
    }

    if (v3)
    {
      uint64_t v11 = v3;
      operator delete(v3);
    }

    sub_100242FAC((uint64_t)v13);
    uint64_t v7 = 0LL;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068F8E8();
    }
    uint64_t v7 = 1LL;
  }

  sub_100242FAC((uint64_t)v14);
  return v7;
}

void sub_10052DCD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
}

BOOL sub_10052DD14(uint64_t a1, uint64_t a2)
{
  char v3 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    if (v8 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446210;
    BOOL v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Blocking pairing for device %{public}s",  buf,  0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  BOOL v5 = sub_1001E6270(a2 + 128, 1) != 0;
  sub_100242CD8(__p);
  return v5;
}

void sub_10052DE18(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10052DE34(uint64_t a1, unint64_t a2, __n128 *a3)
{
  unint64_t v6 = (os_log_s *)qword_1008F75E0;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    sub_100532EFC((unsigned __int8 *)a3, v20);
    int v8 = SBYTE7(v21);
    BOOL v9 = (void **)v20[0];
    sub_1003CF00C(a2, __p);
    BOOL v10 = v20;
    if (v8 < 0) {
      BOOL v10 = v9;
    }
    if (v26 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v10;
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Setting pincode %s for device %{public}s",  buf,  0x16u);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v21) < 0) {
      operator delete(v20[0]);
    }
  }

  if (sub_10052AD34(v7, a2)) {
    return 0LL;
  }
  *(void *)buf = 0LL;
  *(void *)&uint8_t buf[8] = 0LL;
  sub_100242F28((uint64_t)buf, a1 + 208);
  if (*(_BYTE *)(a1 + 272))
  {
    if ((unint64_t)sub_100532EF4((uint64_t)a3) > 3)
    {
      __p[0] = 0LL;
      __p[1] = 0LL;
      sub_100242F28((uint64_t)__p, a1 + 280);
      if (sub_1003FE254(a1 + 344, a2))
      {
        sub_100242F54((uint64_t)__p);
        uint64_t v16 = *(void *)(a1 + 112);
        if (v16)
        {
          sub_100527138(v16, a2, (uint64_t)a3);
          sub_100527200(v16, a2, (uint64_t *)a3);
        }

        uint64_t v24 = 0LL;
        __int128 v22 = 0u;
        __int128 v23 = 0u;
        *(_OWORD *)int v20 = 0u;
        __int128 v21 = 0u;
        sub_100534444(v20, a2, 0LL);
        if (sub_1003D7094(a2)
          && (uint64_t v17 = sub_1002E6C74(),
              uint64_t v12 = (*(uint64_t (**)(uint64_t, unint64_t, __n128 *))(*(void *)v17 + 16LL))( v17,  a2,  a3),  (_DWORD)v12))
        {
          sub_100534564(v20);
        }

        else
        {
          sub_1005344C8(v20, a3);
          uint64_t v12 = 0LL;
        }

        sub_100534448(v20, v18);
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      sub_100242FAC((uint64_t)__p);
    }

    else
    {
      uint64_t v24 = 0LL;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      *(_OWORD *)int v20 = 0u;
      __int128 v21 = 0u;
      sub_100534444(v20, a2, 0LL);
      uint64_t v13 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = sub_100532EF4((uint64_t)a3);
        sub_10068F914((uint8_t *)__p, v14, v13);
      }

      sub_100534564(v20);
      sub_100534448(v20, v15);
      uint64_t v12 = 159LL;
    }
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  sub_100242FAC((uint64_t)buf);
  return v12;
}

void sub_10052E0E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
}

uint64_t sub_10052E160(uint64_t a1, uint64_t a2, int a3)
{
  v15[1] = 0LL;
  uint64_t v16 = a2;
  v15[0] = 0LL;
  sub_100242F28((uint64_t)v15, a1 + 280);
  if (sub_1003FE254(a1 + 344, a2))
  {
    __p[0] = &v16;
    uint64_t v6 = sub_100029574((uint64_t **)(a1 + 504), (unint64_t *)&v16, (uint64_t)&unk_1006C2518, (uint64_t **)__p)[5];
    sub_100528FAC(a1, v6);
    sub_10020166C(a1 + 504, (unint64_t *)&v16);
    sub_100242F54((uint64_t)v15);
    if (v6)
    {
      BOOL v7 = (os_log_s *)qword_1008F75E0;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT);
      if (a3)
      {
        if (v8)
        {
          sub_1003CF00C(v16, __p);
          if (v14 >= 0) {
            BOOL v9 = __p;
          }
          else {
            BOOL v9 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136446210;
          uint64_t v18 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Rejecting SSP request for device %{public}s",  buf,  0xCu);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }

        (*(void (**)(uint64_t))(*(void *)v6 + 32LL))(v6);
      }

      else
      {
        if (v8)
        {
          sub_1003CF00C(v16, __p);
          uint64_t v11 = v14 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          uint64_t v18 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Accepting SSP request for device %{public}s",  buf,  0xCu);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }

        (*(void (**)(uint64_t))(*(void *)v6 + 40LL))(v6);
      }

      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
      uint64_t v10 = 0LL;
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(v16, __p);
        sub_10068F96C();
      }

      uint64_t v10 = 1LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(a2, __p);
      sub_10068F9B4();
    }

    uint64_t v10 = 165LL;
  }

  sub_100242FAC((uint64_t)v15);
  return v10;
}

void sub_10052E3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_10052E40C(uint64_t a1, uint64_t a2, int a3)
{
  if (*(_BYTE *)(a1 + 272))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    void v4[2] = sub_10052E46C;
    v4[3] = &unk_10087EB68;
    v4[4] = a2;
    int v5 = a3;
    sub_100405384(v3, v4);
  }

uint64_t sub_10052E46C(uint64_t a1)
{
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FFE8);
  }
  return sub_10052E4C0((uint64_t)off_1008D67A0, *(unsigned __int8 **)(a1 + 32), *(_DWORD *)(a1 + 40));
}

uint64_t sub_10052E4C0(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  __n128 v25 = 0uLL;
  char v26 = 0;
  sub_100532DC0((uint64_t)&v25);
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, a1 + 280);
  if (sub_1003FE254(a1 + 344, (uint64_t)a2))
  {
    sub_100242F54((uint64_t)v15);
    uint64_t v6 = (os_log_s *)qword_1008F75E0;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (a2)
      {
        sub_1003CF00C((uint64_t)a2, v14);
        sub_10068FA3C();
      }

      else
      {
        sub_10068F9FC((uint64_t)&v16, v6, v8);
      }
    }

    sub_10052E768(v7, (uint64_t)a2);
    uint64_t v9 = *(void *)(a1 + 112);
    if (!v9
      || sub_100527028(v9, (unint64_t)a2, &v25)
      || (unint64_t)sub_100532EF4((uint64_t)&v25) > 3)
    {
      uint64_t v24 = 0LL;
      __int128 v23 = 0u;
      memset(v22, 0, sizeof(v22));
      __int128 v20 = 0u;
      *(_OWORD *)__p = 0u;
      __int128 v18 = 0u;
      *(_OWORD *)__int16 v19 = 0u;
      __int128 v16 = 0u;
      *(_OWORD *)uint64_t v17 = 0u;
      sub_100532DC0((uint64_t)&v16 + 1);
      BYTE2(v17[0]) = 0;
      BYTE4(v17[0]) = 0;
      BYTE2(v19[0]) = 0;
      BYTE4(v19[0]) = 0;
      HIDWORD(v22[2]) = 0;
      __int128 v18 = 0uLL;
      v17[1] = 0LL;
      LOBYTE(v19[0]) = 0;
      __int128 v20 = 0uLL;
      v19[1] = 0LL;
      LOBYTE(__p[0]) = 0;
      v22[0] = 0LL;
      v22[1] = 0LL;
      __p[1] = 0LL;
      *(_DWORD *)((char *)&v22[1] + 7) = 0;
      LOBYTE(v22[3]) = 1;
      BYTE2(v24) = 0;
      *(void *)((char *)&v22[3] + 6) = 0LL;
      *(void *)((char *)&v22[3] + 1) = 0LL;
      __int128 v23 = 0uLL;
      v22[5] = 0LL;
      LOBYTE(v24) = 0;
      if (sub_1003D2408((uint64_t)a2, (uint64_t)&v16)
        && BYTE2(v17[0])
        && BYTE2(v19[0])
        && !BYTE3(v17[0])
        && BYTE3(v19[0]))
      {
        sub_10052DAD4(a1);
      }

      else
      {
        if (a3) {
          unsigned __int8 v11 = a2[1352] + 1;
        }
        else {
          unsigned __int8 v11 = 0;
        }
        a2[1352] = v11;
        sub_10052A368(a1, a2, a3);
      }

      if (SHIBYTE(v22[1]) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(v20) < 0) {
        operator delete(v19[1]);
      }
      if (SHIBYTE(v18) < 0) {
        operator delete(v17[1]);
      }
      nullsub_63((char *)&v16 + 1, v10);
    }

    else
    {
      sub_10052A368(a1, a2, 0x9Eu);
    }
  }

  sub_100242FAC((uint64_t)v15);
  return nullsub_63(&v25, v12);
}

void sub_10052E724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

BOOL sub_10052E768(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    if (v8 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Unblocking pairing for device %{public}s",  buf,  0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  BOOL v5 = sub_1001E6270(a2 + 128, 0) != 0;
  sub_100242CD8(__p);
  return v5;
}

void sub_10052E86C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10052E888(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5 = sub_100404EB8();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768LL;
  void v10[2] = sub_10052E9E8;
  v10[3] = &unk_100893FC8;
  v10[4] = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100024238(&v11, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v11 = *a3;
    uint64_t v12 = *((void *)a3 + 2);
  }

  sub_100405384(v5, v10);
  uint64_t v6 = sub_100404FE8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768LL;
  void v7[2] = sub_10052EA78;
  v7[3] = &unk_100893FC8;
  v7[4] = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100024238(&__p, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 __p = *a3;
    uint64_t v9 = *((void *)a3 + 2);
  }

  sub_100405384(v6, v7);
  if (SHIBYTE(v9) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)v11);
  }
}

void sub_10052E9B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10052E9E8(uint64_t a1)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089FFC8);
  }
  uint64_t v2 = (std::string *)sub_10040007C(off_1008D5F48, *(void *)(a1 + 32), 1);
  v4.__r_.__value_.__l.__cap_ = 0LL;
  sub_1000B0400((uint64_t)&v4.__r_.__value_.__l.__cap_);
  v4.__r_.__value_.__r.__words[0] = SLODWORD(v4.__r_.__value_.__r.__words[2]);
  v4.__r_.__value_.__l.__size_ = SWORD2(v4.__r_.__value_.__r.__words[2]);
  return sub_1003D0F60(v2, (const std::string *)(a1 + 40), &v4);
}

void sub_10052EA78(uint64_t a1)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A00C8);
  }
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_1005C8684((uint64_t)off_1008D5F28, *(void *)(a1 + 32), 1u, 0, 0LL, 0LL, (unsigned __int8 *)v5);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A00C8);
  }
  uint64_t v2 = off_1008D5F28;
  if (*(char *)(a1 + 63) < 0)
  {
    sub_100024238(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
  }

  else
  {
    *(_OWORD *)__int128 __p = *(_OWORD *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 56);
  }

  sub_1005C9550((uint64_t)v2, (unsigned __int8 *)v5, (uint64_t)__p, 2);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10052EB98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10052EBBC(uint64_t a1, unint64_t a2, __n128 *a3, const std::string *a4)
{
  char v8 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141558787;
    *(void *)&uint8_t buf[4] = 1752392040LL;
    *(_WORD *)&_BYTE buf[12] = 1041;
    *(_DWORD *)&buf[14] = 16;
    *(_WORD *)&_BYTE buf[18] = 2097;
    *(void *)&buf[20] = nullsub_63(a3, v9);
    __int16 v41 = 1024;
    int v42 = sub_10052528C((uint64_t)a3);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "PairingManager::leDevicePaired LK:%{private, mask.hash}.16P LKype:%d",  buf,  0x22u);
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089FFC8);
  }
  uint64_t v10 = (std::string *)sub_10040007C(off_1008D5F48, a2, 1);
  __int16 v34 = 0;
  int v33 = 0;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_1008A0088);
  }
  sub_100431644((uint64_t)off_1008D60A8, (uint64_t)&v33);
  if ((sub_1003CF350((unsigned __int8 *)v10) & 1) == 0)
  {
    sub_1003D01A0((uint64_t)v10, (uint64_t)buf);
    if (buf[23] >= 0) {
      uint64_t v11 = buf[23];
    }
    else {
      uint64_t v11 = *(void *)&buf[8];
    }
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (v11) {
        goto LABEL_16;
      }
    }

    else if (v11)
    {
      goto LABEL_16;
    }

    __p[0] = 0LL;
    sub_1000B0400((uint64_t)__p);
    *(void *)buf = SLODWORD(__p[0]);
    *(void *)&uint8_t buf[8] = SWORD2(__p[0]);
    sub_1003D0F60(v10, a4, (std::string *)buf);
    buf[0] = 0;
    sub_100242CA4(buf);
    sub_10010E794((uint64_t)sub_10052F188, (uint64_t)&v10[5].__r_.__value_.__l.__size_);
    sub_100242CD8(buf);
  }

void sub_10052F124( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_10052F188(int a1, unsigned __int8 *a2, char *__s)
{
  if (!a1)
  {
    uint64_t v3 = *a2;
    uint64_t v4 = a2[1];
    uint64_t v5 = a2[2];
    uint64_t v6 = a2[3];
    uint64_t v7 = a2[4];
    uint64_t v8 = a2[5];
    v12[0] = 0LL;
    v12[1] = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v9 = sub_10002418C(v12, __s);
    if (qword_1008D67A8 != -1) {
      dispatch_once(&qword_1008D67A8, &stru_10089FFE8);
    }
    if (SHIBYTE(v13) < 0)
    {
      uint64_t v9 = sub_100024238(__p, v12[0], (unint64_t)v12[1]);
    }

    else
    {
      *(_OWORD *)__int128 __p = *(_OWORD *)v12;
      uint64_t v11 = v13;
    }

    sub_10052E888((uint64_t)v9, (v3 << 40) | (v4 << 32) | (v5 << 24) | (v6 << 16) | (v7 << 8) | v8, (__int128 *)__p);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v13) < 0) {
      operator delete(v12[0]);
    }
  }

void sub_10052F278( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10052F2AC(uint64_t a1, uint64_t a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10089FFC8);
  }
  uint64_t v4 = (unsigned __int8 *)sub_10040007C(off_1008D5F48, a2, 1);
  if (v4)
  {
    uint64_t v5 = v4;
  }

  return 0LL;
}

uint64_t sub_10052F32C(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_1008A0008);
  }
  return sub_100535618((uint64_t)off_1008D67B0, a2);
}

uint64_t sub_10052F37C(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_1008A00E8);
  }
  char v4 = *((_BYTE *)off_1008D60D8 + 431);
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_1008A00E8);
  }
  if (sub_10021FF44((uint64_t)off_1008D60D8, (uint64_t)a2))
  {
    uint64_t v5 = (os_log_s *)qword_1008F7600;
    if (!os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
    sub_1003CF00C((uint64_t)a2, __p);
    if (v14 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446210;
    __int128 v16 = v6;
    uint64_t v7 = "Easy Unpairing device %{public}s - Wait for Easy Unpair to complete before tearing down link";
  }

  else
  {
LABEL_12:
    uint64_t v5 = (os_log_s *)qword_1008F75E0;
    if (!os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
    sub_1003CF00C((uint64_t)a2, __p);
    if (v14 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446210;
    __int128 v16 = v8;
    uint64_t v7 = "Unpairing device %{public}s - defer unpairing";
  }

  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v7, buf, 0xCu);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
LABEL_19:
  __p[0] = 0LL;
  __p[1] = 0LL;
  sub_100242F28((uint64_t)__p, a1 + 536);
  *(void *)(a1 + 600) = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
  sub_100242F54((uint64_t)__p);
  if (a2[960])
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_10089FFC8);
    }
    sub_1004032A4((uint64_t)off_1008D5F48);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_10052F630;
  v11[3] = &unk_100886EE0;
  v11[4] = a1;
  void v11[5] = a2;
  char v12 = v4;
  sub_100405460(v9, 500LL, v11);
  sub_100242FAC((uint64_t)__p);
  return 0LL;
}

void sub_10052F614( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t sub_10052F630(uint64_t a1)
{
  return sub_10052F640(*(void *)(a1 + 32), *(unsigned __int8 **)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t sub_10052F640(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  if (*(_BYTE *)(a1 + 272))
  {
    uint64_t v5 = a2[128];
    uint64_t v6 = a2[129];
    uint64_t v7 = a2[130];
    uint64_t v8 = a2[131];
    uint64_t v9 = a2[132];
    uint64_t v10 = a2[133];
    __n128 v46 = 0uLL;
    int v47 = 0;
    sub_10052523C((uint64_t)&v46);
    if (qword_1008D67B8 != -1) {
      dispatch_once(&qword_1008D67B8, &stru_1008A0008);
    }
    if (sub_100535750((uint64_t)off_1008D67B0, a2, &v46))
    {
      uint64_t v11 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C((uint64_t)a2, &__p);
        if (v40 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = p_p;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Device %{public}s -  already unpaired",  buf,  0xCu);
        if (SHIBYTE(v40) < 0) {
          operator delete(__p);
        }
      }

      __int128 __p = 0LL;
      int v39 = 0LL;
      sub_100242F28((uint64_t)&__p, a1 + 536);
      *(void *)(a1 + 600) = 0LL;
      sub_100242FAC((uint64_t)&__p);
    }

    else
    {
      sub_10052FD34(a1, a2, 0LL, a3);
      uint64_t v32 = v10;
      __int128 v16 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = &__p;
        sub_1003CF00C((uint64_t)a2, &__p);
        if (v40 < 0) {
          uint64_t v17 = __p;
        }
        if (qword_1008D60E0 != -1) {
          dispatch_once(&qword_1008D60E0, &stru_1008A00E8);
        }
        __int128 v18 = sub_10022084C((uint64_t)off_1008D60D8, a3);
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = v17;
        *(_WORD *)&_BYTE buf[12] = 2080;
        *(void *)&buf[14] = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Unpairing device %{public}s - disconnecting and removing link key with unpair type - %s",  buf,  0x16u);
        if (SHIBYTE(v40) < 0) {
          operator delete(__p);
        }
      }

      if (qword_1008D60D0 != -1) {
        dispatch_once(&qword_1008D60D0, &stru_1008A0108);
      }
      sub_100424304((uint64_t)off_1008D60C8, (uint64_t)a2, 1);
      sub_1003E4AB0((uint64_t)a2, 0);
      unint64_t v19 = (v5 << 40) | (v6 << 32) | (v7 << 24) | (v8 << 16) | (v9 << 8) | v32;
      __int128 __p = 0LL;
      int v39 = &__p;
      uint64_t v40 = 0x4012000000LL;
      __int16 v41 = sub_10052FF68;
      int v42 = nullsub_516;
      v44[0] = 0LL;
      v44[1] = 0LL;
      BOOL v43 = &unk_1007C41D6;
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A00C8);
      }
      sub_1005C8684((uint64_t)off_1008D5F28, v19, 0, 0, 0LL, 0LL, (unsigned __int8 *)v44);
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A00C8);
      }
      __int128 v20 = off_1008D5F28;
      int v21 = sub_100241F94((const unsigned __int8 *)v39 + 48);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      sub_10002418C(v35, "_CTKD_");
      int v23 = sub_1005CE5A8((uint64_t)v20, v22, (uint64_t)v35);
      if (v36 < 0) {
        operator delete(v35[0]);
      }

      if (!v23)
      {
LABEL_39:
        __int16 v29 = (os_log_s *)qword_1008F75E0;
        if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
        {
          id v30 = sub_1005BF848(v19);
          __int16 v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
          sub_10068FB5C(v31, (uint64_t)v37, v29);
        }

        if (qword_1008D5F20 != -1) {
          dispatch_once(&qword_1008D5F20, &stru_1008A0028);
        }
        sub_10062E96C(qword_1008D5F18, v19, 0);
      }

      else
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_1008A00C8);
        }
        uint64_t v24 = off_1008D5F28;
        __n128 v25 = sub_100241F94((const unsigned __int8 *)v39 + 48);
        char v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        BOOL v27 = sub_1005C6AC0((uint64_t)v24, v26);
        v27[161] = 0;
        if (!v27[160]) {
          v27[162] = 0;
        }

        if (qword_1008D5F20 != -1) {
          dispatch_once(&qword_1008D5F20, &stru_1008A0028);
        }
        sub_10062E96C(qword_1008D5F18, v19, 1);
        uint64_t v28 = sub_100404FE8();
        v34[0] = _NSConcreteStackBlock;
        v34[1] = 3221225472LL;
        void v34[2] = sub_10052FF78;
        v34[3] = &unk_10089FE48;
        v34[4] = &__p;
        sub_100405384(v28, v34);
      }

      sub_1003D708C((uint64_t)a2, 0);
      if (qword_1008D67B8 != -1) {
        dispatch_once(&qword_1008D67B8, &stru_1008A0008);
      }
      sub_100535FDC((uint64_t)off_1008D67B0, (uint64_t)a2);
      if (qword_1008D67B8 != -1) {
        dispatch_once(&qword_1008D67B8, &stru_1008A0008);
      }
      if (sub_100535B20((uint64_t)off_1008D67B0, a2, a3))
      {
        sub_1003D708C((uint64_t)a2, 1);
        if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
          sub_10068FB30();
        }
      }

      *(void *)buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1 + 536);
      *(void *)(a1 + 600) = 0LL;
      sub_100242F54((uint64_t)buf);
      sub_100242FAC((uint64_t)buf);
      _Block_object_dispose(&__p, 8);
    }

    nullsub_63(&v46, v13);
    return 0LL;
  }

  else
  {
    char v14 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068FA84((uint64_t)a2, v14);
    }
    __int128 __p = 0LL;
    int v39 = 0LL;
    sub_100242F28((uint64_t)&__p, a1 + 536);
    *(void *)(a1 + 600) = 0LL;
    sub_100242FAC((uint64_t)&__p);
    return 111LL;
  }

void sub_10052FC94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
  _Block_object_dispose(&a24, 8);
  nullsub_63(v36 - 128, v38);
  _Unwind_Resume(a1);
}

uint64_t sub_10052FD34(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)a2, __p);
    uint64_t v9 = v24 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = a4;
    *(_WORD *)&_BYTE buf[18] = 1024;
    *(_DWORD *)&buf[20] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Sending 'device unpaired' event for device %{public}s with UnpairInitiatorType %d, result %d",  buf,  0x18u);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  sub_100242F28((uint64_t)__p, a1 + 416);
  memset(buf, 0, sizeof(buf));
  sub_100240540(buf, a1 + 480);
  sub_100242F54((uint64_t)__p);
  for (uint64_t i = *(void **)buf; i != *(void **)&buf[8]; ++i)
    uint64_t v10 = (*(uint64_t (**)(void, unsigned __int8 *, uint64_t))(*(void *)*i + 32LL))(*i, a2, a3);
  uint64_t v12 = a2[128];
  uint64_t v13 = a2[129];
  uint64_t v14 = a2[130];
  uint64_t v15 = a2[131];
  uint64_t v16 = a2[132];
  uint64_t v17 = a2[133];
  char v18 = sub_1005304C4(v10, a4);
  uint64_t v19 = sub_100404EB8();
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_100530530;
  void v21[3] = &unk_1008800D8;
  v21[4] = (v12 << 40) | (v13 << 32) | (v14 << 24) | (v15 << 16) | (v16 << 8) | v17;
  char v22 = v18;
  sub_100405384(v19, v21);
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  return sub_100242FAC((uint64_t)__p);
}

void sub_10052FF2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }

  sub_100242FAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_10052FF68(uint64_t a1, uint64_t a2)
{
}

void sub_10052FF78(uint64_t a1)
{
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_1008A0128);
  }
  uint64_t v2 = qword_1008D5F58;
  uint64_t v3 = sub_100241F94((const unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 48LL));
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  sub_1005528F8(v2, v4);
}

void sub_10052FFF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL sub_100530008()
{
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_1008A0008);
  }
  return sub_1005356F4((uint64_t)off_1008D67B0);
}

uint64_t sub_100530048(uint64_t result, unsigned __int8 *a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    id v4 = (void *)result;
    v19[0] = 0LL;
    v19[1] = 0LL;
    sub_100242F28((uint64_t)v19, result + 280);
    uint64_t v5 = (char **)(v4 + 43);
    if (!sub_1003FE254((uint64_t)(v4 + 43), (uint64_t)a2))
    {
      uint64_t v7 = (unsigned __int8 **)v4[44];
      unint64_t v6 = v4[45];
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((char *)v7 - *v5) >> 3;
        uint64_t v10 = v6 - (void)*v5;
        uint64_t v11 = v10 >> 2;
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          uint64_t v13 = (char *)sub_100008BA0((uint64_t)(v4 + 45), v12);
        }
        else {
          uint64_t v13 = 0LL;
        }
        uint64_t v14 = (unsigned __int8 **)&v13[8 * v9];
        uint64_t v15 = &v13[8 * v12];
        *uint64_t v14 = a2;
        uint64_t v8 = v14 + 1;
        uint64_t v17 = (char *)v4[43];
        uint64_t v16 = (char *)v4[44];
        if (v16 != v17)
        {
          do
          {
            char v18 = (unsigned __int8 *)*((void *)v16 - 1);
            v16 -= 8;
            *--uint64_t v14 = v18;
          }

          while (v16 != v17);
          uint64_t v16 = *v5;
        }

        v4[43] = v14;
        v4[44] = v8;
        v4[45] = v15;
        if (v16) {
          operator delete(v16);
        }
      }

      else
      {
        *uint64_t v7 = a2;
        uint64_t v8 = v7 + 1;
      }

      v4[44] = v8;
    }

    sub_100242F54((uint64_t)v19);
    sub_10052A368((uint64_t)v4, a2, 0);
    return sub_100242FAC((uint64_t)v19);
  }

  return result;
}

void sub_10053016C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100530180(uint64_t a1, unsigned __int8 *a2, char a3)
{
  return sub_100530048(a1 - 16, a2, a3);
}

uint64_t sub_100530194(uint64_t a1)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1 + 416);
  id v4 = 0LL;
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  sub_100240540(&v4, a1 + 480);
  sub_100242F54((uint64_t)v7);
  uint64_t v2 = v4;
  if (v4 != v5)
  {
    do
    {
      (*(void (**)(void))(*(void *)*v2 + 40LL))(*v2);
      ++v2;
    }

    while (v2 != v5);
    uint64_t v2 = v4;
  }

  if (v2)
  {
    uint64_t v5 = v2;
    operator delete(v2);
  }

  return sub_100242FAC((uint64_t)v7);
}

void sub_10053022C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10053025C(uint64_t a1)
{
  return sub_100530194(a1 - 16);
}

uint64_t sub_100530264(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 112);
  if (result) {
    return sub_100525ED4(result, a2);
  }
  return result;
}

uint64_t sub_1005302A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (_DWORD)a3 ? "incoming device" : "device";
    sub_1003CF00C(a2, &__p);
    uint64_t v8 = v13 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&_BYTE buf[12] = 2080;
    *(void *)&buf[14] = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sending 'pairing started' event for %{public}s %s",  buf,  0x16u);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p);
    }
  }

  *(void *)buf = 0LL;
  *(void *)&uint8_t buf[8] = 0LL;
  sub_100242F28((uint64_t)buf, a1 + 416);
  __int128 __p = 0LL;
  unint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  sub_100240540(&__p, a1 + 480);
  sub_100242F54((uint64_t)buf);
  uint64_t v9 = __p;
  if (__p != v12)
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v9 + 16LL))(*v9, a2, a3);
      ++v9;
    }

    while (v9 != v12);
    uint64_t v9 = __p;
  }

  if (v9)
  {
    unint64_t v12 = v9;
    operator delete(v9);
  }

  return sub_100242FAC((uint64_t)buf);
}

void sub_10053042C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100530464(uint64_t a1, unsigned __int8 *a2)
{
  return sub_10052B470(a1, a2, 0LL);
}

uint64_t sub_10053046C(uint64_t a1)
{
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_1008A0148);
  }
  return sub_100448244((uint64_t)off_1008D6190, 1, *(void *)(a1 + 32), 1LL);
}

uint64_t sub_1005304C4(uint64_t a1, unsigned int a2)
{
  if (a2 >= 4)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068FBA0();
    }
    LOBYTE(v2) = 0;
  }

  else
  {
    return (0xC9CBCAC8 >> (8 * a2));
  }

  return v2;
}

uint64_t sub_100530530(uint64_t a1)
{
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_1008A0148);
  }
  return sub_100448244((uint64_t)off_1008D6190, 0, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *sub_100530588(void *a1)
{
  *a1 = &off_10089FE78;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_1005305C8(void *__p)
{
  void *__p = &off_10089FE78;
  uint64_t v2 = __p[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

uint64_t sub_100530608(uint64_t a1)
{
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FFE8);
  }
  return sub_10052B9A4((uint64_t)off_1008D67A0, *(void ***)(a1 + 16));
}

void *sub_100530658(void *a1)
{
  *a1 = &off_10089FEB0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_100530698(void *__p)
{
  void *__p = &off_10089FEB0;
  uint64_t v2 = __p[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

uint64_t sub_1005306D8(uint64_t a1)
{
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FFE8);
  }
  return sub_10052C648((uint64_t)off_1008D67A0, *(__n128 **)(a1 + 16));
}

void *sub_100530728(void *a1)
{
  *a1 = &off_10089FEE8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_100530768(void *__p)
{
  void *__p = &off_10089FEE8;
  uint64_t v2 = __p[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

uint64_t sub_1005307A8(uint64_t a1)
{
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FFE8);
  }
  return sub_10052CD78((uint64_t)off_1008D67A0, *(__n128 **)(a1 + 16));
}

uint64_t sub_100530800(uint64_t a1)
{
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FFE8);
  }
  return sub_10052D218( (uint64_t)off_1008D67A0,  (_OWORD *)(a1 + 10),  (_OWORD *)(a1 + 26),  (_OWORD *)(a1 + 42),  (_OWORD *)(a1 + 58));
}

uint64_t sub_100530864(uint64_t a1, uint64_t a2)
{
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_10089FFE8);
  }
  return sub_10052D8C4((uint64_t)off_1008D67A0, a2, *(void *)(a1 + 24));
}

double sub_1005308B4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  id v4 = (std::string *)sub_10002418C((void *)a2, "");
  std::string::assign(v4, "\nPairingManager STATUS :{\n");
  uint64_t v5 = (void *)(a2 + 8);
  else {
    size_t v6 = *(void *)(a2 + 8);
  }
  memset(&v30, 0, sizeof(v30));
  uint64_t v7 = &v30;
  sub_100271C18((uint64_t)&v30, v6 + 16);
  if ((v30.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    uint64_t v7 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    else {
      uint64_t v8 = *(const void **)a2;
    }
    memmove(v7, v8, v6);
  }

  strcpy((char *)v7 + v6, "\tfStackStarted: ");
  if (*(_BYTE *)(a1 + 272)) {
    uint64_t v9 = "YES";
  }
  else {
    uint64_t v9 = "NO";
  }
  uint64_t v10 = std::string::append(&v30, v9);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v12 = std::string::append(&v31, "\n");
  std::string::size_type v13 = v12->__r_.__value_.__r.__words[0];
  *(void *)&__int128 __p = v12->__r_.__value_.__l.__size_;
  *(void *)((char *)&__p + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 size = v12->__r_.__value_.__s.__size_;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  *(void *)a2 = v13;
  *uint64_t v5 = __p;
  *(void *)(a2 + 15) = *(void *)((char *)&__p + 7);
  *(_BYTE *)(a2 + 23) = size;
  else {
    size_t v15 = *(void *)(a2 + 8);
  }
  memset(&v30, 0, sizeof(v30));
  uint64_t v16 = &v30;
  sub_100271C18((uint64_t)&v30, v15 + 12);
  if ((v30.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    uint64_t v16 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if (v15)
  {
    else {
      uint64_t v17 = *(const void **)a2;
    }
    memmove(v16, v17, v15);
  }

  strcpy((char *)v16 + v15, "\tfAgent : {\n");
  uint64_t v18 = *(void *)(a1 + 112);
  if (v18) {
    sub_1005278D8(v18, (uint64_t)&__p);
  }
  else {
    sub_10002418C(&__p, "\t\t(null)");
  }
  if ((v33 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v33 & 0x80u) == 0) {
    std::string::size_type v20 = v33;
  }
  else {
    std::string::size_type v20 = *((void *)&__p + 1);
  }
  int v21 = std::string::append(&v30, p_p, v20);
  __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0LL;
  v21->__r_.__value_.__l.__cap_ = 0LL;
  v21->__r_.__value_.__r.__words[0] = 0LL;
  int v23 = std::string::append(&v31, "}\n");
  std::string::size_type v24 = v23->__r_.__value_.__r.__words[0];
  v34[0] = v23->__r_.__value_.__l.__size_;
  *(void *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v25 = v23->__r_.__value_.__s.__size_;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  *(void *)a2 = v24;
  *uint64_t v5 = v34[0];
  *(void *)(a2 + 15) = *(void *)((char *)v34 + 7);
  *(_BYTE *)(a2 + 23) = v25;
  else {
    size_t v26 = *(void *)(a2 + 8);
  }
  memset(&v31, 0, sizeof(v31));
  BOOL v27 = &v31;
  sub_100271C18((uint64_t)&v31, v26 + 29);
  if ((v31.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    BOOL v27 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  if (v26)
  {
    else {
      uint64_t v28 = *(const void **)a2;
    }
    memmove(v27, v28, v26);
  }

  strcpy((char *)v27 + v26, "} END PairingManager STATUS\n\n");
  double result = *(double *)&v31.__r_.__value_.__l.__data_;
  *(std::string *)a2 = v31;
  return result;
}

void sub_100530C70( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
}

uint64_t sub_100530D0C()
{
  return 30LL;
}

uint64_t sub_100530D1C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

void sub_100530D24(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_100530D54(_Unwind_Exception *a1)
{
}

void sub_100530D68(id a1)
{
  uint64_t v1 = operator new(0x260uLL);
  sub_10052842C((uint64_t)v1);
  off_1008D67A0 = v1;
}

void sub_100530D98(_Unwind_Exception *a1)
{
}

void sub_100530DAC(id a1)
{
  uint64_t v1 = operator new(0x198uLL);
  sub_100534AB0();
  off_1008D67B0 = v1;
}

void sub_100530DDC(_Unwind_Exception *a1)
{
}

void sub_100530DF0(id a1)
{
  uint64_t v1 = operator new(0xEB0uLL);
  sub_10061991C();
  qword_1008D5F18 = (uint64_t)v1;
}

void sub_100530E20(_Unwind_Exception *a1)
{
}

void sub_100530E34(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_100530E64(_Unwind_Exception *a1)
{
}

void sub_100530E78(id a1)
{
  uint64_t v1 = operator new(0x98uLL);
  sub_1003C97E4((uint64_t)v1);
  off_1008D67E0 = v1;
}

void sub_100530EA8(_Unwind_Exception *a1)
{
}

void sub_100530EBC(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_100530EEC(_Unwind_Exception *a1)
{
}

void sub_100530F00(id a1)
{
  uint64_t v1 = operator new(0x118uLL);
  sub_1003ADFF0((uint64_t)v1);
  off_1008D5F38 = v1;
}

void sub_100530F30(_Unwind_Exception *a1)
{
}

void sub_100530F44(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_100530F74(_Unwind_Exception *a1)
{
}

void sub_100530F88(id a1)
{
  uint64_t v1 = operator new(0x2C8uLL);
  sub_100213DA8();
  off_1008D60D8 = v1;
}

void sub_100530FB8(_Unwind_Exception *a1)
{
}

void sub_100530FCC(id a1)
{
  uint64_t v1 = operator new(0x2C0uLL);
  sub_1004219F0();
  off_1008D60C8 = v1;
}

void sub_100530FFC(_Unwind_Exception *a1)
{
}

void sub_100531010(id a1)
{
  uint64_t v1 = operator new(0x110uLL);
  sub_100551DD0();
  qword_1008D5F58 = (uint64_t)v1;
}

void sub_100531040(_Unwind_Exception *a1)
{
}

void sub_100531054(id a1)
{
  uint64_t v1 = (char *)operator new(0x200uLL);
  *(void *)uint64_t v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 18) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 108) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 28) = v1 + 232;
  *((void *)v1 + 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 58) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_10053115C(_Unwind_Exception *a1)
{
}

void sub_100531170(void *a1@<X0>, std::string *a2@<X8>)
{
  *(_OWORD *)__str = 0u;
  memset(v50, 0, sizeof(v50));
  int v48 = 0;
  __n128 v47 = 0uLL;
  uint64_t v4 = a1[1];
  __n128 v5 = *(__n128 *)(v4 + 4);
  int v46 = *(_DWORD *)(v4 + 20);
  __n128 v45 = v5;
  sub_100634334(&v47, &v45);
  int v44 = 0;
  __int128 v43 = xmmword_1006C3CD8;
  if (sub_1001BEC7C(v6, (unsigned __int8 *)&v43))
  {
    uint64_t v7 = "Primary Service";
LABEL_21:
    int v8 = *(unsigned __int16 *)a1[1];
LABEL_22:
    snprintf(__str, 0x2CuLL, "0x%04X %-20s", v8, v7);
    goto LABEL_23;
  }

  int v42 = 0;
  __int128 v41 = xmmword_1006C3CEC;
  if (sub_1001BEC7C((unsigned __int8 *)&v47, (unsigned __int8 *)&v41))
  {
    uint64_t v7 = "Secondary Service";
    goto LABEL_21;
  }

  int v40 = 0;
  __int128 v39 = xmmword_1006C3D00;
  if (sub_1001BEC7C((unsigned __int8 *)&v47, (unsigned __int8 *)&v39))
  {
    uint64_t v7 = "Included Service";
    goto LABEL_21;
  }

  int v38 = 0;
  __int128 v37 = xmmword_1006C3D14;
  if (sub_1001BEC7C((unsigned __int8 *)&v47, (unsigned __int8 *)&v37))
  {
    uint64_t v7 = "Characteristic";
    goto LABEL_21;
  }

  int v36 = 0;
  __int128 v35 = xmmword_1006C3D28;
  if (sub_1001BEC7C((unsigned __int8 *)&v47, (unsigned __int8 *)&v35))
  {
    uint64_t v7 = "Characteristic Value";
    goto LABEL_21;
  }

  int v34 = 0;
  __int128 v33 = xmmword_1006C3D3C;
  if (sub_1001BEC7C((unsigned __int8 *)&v47, (unsigned __int8 *)&v33))
  {
    uint64_t v7 = "Extended Properties";
    goto LABEL_21;
  }

  int v32 = 0;
  __int128 v31 = xmmword_1006C3D50;
  if (sub_1001BEC7C((unsigned __int8 *)&v47, (unsigned __int8 *)&v31))
  {
    uint64_t v7 = "User Description";
    goto LABEL_21;
  }

  int v30 = 0;
  __int128 v29 = xmmword_1006C3D64;
  if (sub_1001BEC7C((unsigned __int8 *)&v47, (unsigned __int8 *)&v29))
  {
    uint64_t v7 = "Client Configuration";
    goto LABEL_21;
  }

  int v28 = 0;
  __int128 v27 = xmmword_1006C3D78;
  if (sub_1001BEC7C((unsigned __int8 *)&v47, (unsigned __int8 *)&v27))
  {
    uint64_t v7 = "Server Configuration";
    goto LABEL_21;
  }

  int v26 = 0;
  __int128 v25 = xmmword_1006C3D8C;
  if (sub_1001BEC7C((unsigned __int8 *)&v47, (unsigned __int8 *)&v25))
  {
    uint64_t v7 = "Format";
    goto LABEL_21;
  }

  int v24 = 0;
  __int128 v23 = xmmword_1006C3DA0;
  BOOL v16 = sub_1001BEC7C((unsigned __int8 *)&v47, (unsigned __int8 *)&v23);
  int v8 = *(unsigned __int16 *)a1[1];
  if (v16)
  {
    uint64_t v7 = "Aggregate Format";
    goto LABEL_22;
  }

  sub_1006344B4((uint64_t)&v47, &v22);
  if ((v22.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v17 = &v22;
  }
  else {
    uint64_t v17 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  snprintf(__str, 0x2CuLL, "0x%04X %-20s", v8, (const char *)v17);
LABEL_23:
  sub_10002418C(&v20, __str);
  uint64_t v9 = std::string::append(&v20, " [ ");
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  (*(void (**)(void **__return_ptr, void *))(*a1 + 24LL))(__p, a1);
  if ((v19 & 0x80u) == 0) {
    __int128 v11 = __p;
  }
  else {
    __int128 v11 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v12 = v19;
  }
  else {
    std::string::size_type v12 = (std::string::size_type)__p[1];
  }
  std::string::size_type v13 = std::string::append(&v21, (const std::string::value_type *)v11, v12);
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  size_t v15 = std::string::append(&v22, " ]");
  *a2 = *v15;
  v15->__r_.__value_.__l.__size_ = 0LL;
  v15->__r_.__value_.__l.__cap_ = 0LL;
  v15->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_100531570( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *__p, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005315DC(_BYTE *a1)
{
  uint64_t result = (*(uint64_t (**)(_BYTE *))(*(void *)a1 + 32LL))(a1);
  a1[20] = result;
  return result;
}

BOOL sub_100531608(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (a3 == 2)
  {
    __int16 v3 = *a2;
    *(_WORD *)(a1 + 72) = v3;
    *(_WORD *)(a1 + 72) = v3 | (a2[1] << 8);
  }

  return a3 == 2;
}

uint64_t sub_100531630@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v19 = 0LL;
  __int128 v17 = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)__int128 __p = 0u;
  __int128 v16 = 0u;
  memset(v14, 0, sizeof(v14));
  __int128 v13 = 0u;
  sub_1001FCFC8((uint64_t)&v13);
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(_DWORD *)(v4 + 20);
  __n128 v22 = *(__n128 *)(v4 + 4);
  int v23 = v5;
  sub_100634334(&v24, &v22);
  int v21 = 0;
  __int128 v20 = xmmword_1006C3D64;
  BOOL v7 = sub_1001BEC7C(v6, (unsigned __int8 *)&v20);
  __int16 v8 = *(_WORD *)(a1 + 72);
  if (!v7)
  {
    if (*(_WORD *)(a1 + 72))
    {
      if ((v8 & 1) == 0) {
        goto LABEL_12;
      }
      uint64_t v9 = "broadcast";
      uint64_t v10 = 9LL;
      goto LABEL_11;
    }

    goto LABEL_10;
  }

  if (!*(_WORD *)(a1 + 72))
  {
LABEL_10:
    uint64_t v9 = "none";
    uint64_t v10 = 4LL;
    goto LABEL_11;
  }

  if ((v8 & 1) != 0)
  {
    sub_1001FD17C(v14, (uint64_t)"notification", 12LL);
    __int16 v8 = *(_WORD *)(a1 + 72);
  }

  if ((v8 & 2) != 0)
  {
    uint64_t v9 = "indication";
    uint64_t v10 = 10LL;
LABEL_11:
    sub_1001FD17C(v14, (uint64_t)v9, v10);
  }

void sub_1005317DC(_Unwind_Exception *exception_object)
{
}

void sub_1005317FC(uint64_t a1, const void *a2, size_t __sz)
{
  unsigned int v3 = __sz;
  size_t v6 = *(void **)(a1 + 72);
  if (v6) {
    operator delete[](v6);
  }
  *(void *)(a1 + 72) = 0LL;
  *(_WORD *)(a1 + 80) = 0;
  if (v3)
  {
    BOOL v7 = operator new[](v3);
    *(void *)(a1 + 72) = v7;
    memcpy(v7, a2, v3);
    *(_WORD *)(a1 + 80) = v3;
  }

uint64_t sub_100531860@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v18 = 0LL;
  __int128 v16 = 0u;
  memset(v17, 0, sizeof(v17));
  *(_OWORD *)__int128 v14 = 0u;
  __int128 v15 = 0u;
  memset(v13, 0, sizeof(v13));
  __int128 v12 = 0u;
  sub_1001FCFC8((uint64_t)&v12);
  LOBYTE(__p[0]) = 34;
  uint64_t v4 = sub_1001FD17C(v13, (uint64_t)__p, 1LL);
  sub_10032FB10(a1, __p);
  if ((v11 & 0x80u) == 0) {
    int v5 = __p;
  }
  else {
    int v5 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v6 = v11;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  BOOL v7 = sub_1001FD17C(v4, (uint64_t)v5, v6);
  char v19 = 34;
  sub_1001FD17C(v7, (uint64_t)&v19, 1LL);
  std::stringbuf::str(a2, (const std::stringbuf *)((char *)v13 + 8));
  *(void *)((char *)&v13[-1]
  *(void *)&v13[0] = v8;
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[1]);
  }
  std::streambuf::~streambuf((char *)v13 + 8);
  return std::ios::~ios(v17);
}

void sub_1005319B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

BOOL sub_1005319E4(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (a3 == 2)
  {
    __int16 v3 = *a2;
    *(_WORD *)(a1 + 72) = v3;
    *(_WORD *)(a1 + 72) = v3 | (a2[1] << 8);
  }

  return a3 == 2;
}

uint64_t sub_100531A0C@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v15 = 0LL;
  __int128 v13 = 0u;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)__int128 __p = 0u;
  __int128 v12 = 0u;
  memset(v10, 0, sizeof(v10));
  __int128 v9 = 0u;
  sub_1001FCFC8((uint64_t)&v9);
  __int16 v4 = *(_WORD *)(a1 + 72);
  if (!v4)
  {
    int v5 = "none";
    uint64_t v6 = 4LL;
    goto LABEL_7;
  }

  if ((v4 & 1) != 0)
  {
    sub_1001FD17C(v10, (uint64_t)"reliable-write", 14LL);
    __int16 v4 = *(_WORD *)(a1 + 72);
  }

  if ((v4 & 2) != 0)
  {
    int v5 = "writeable-auxiliaries";
    uint64_t v6 = 21LL;
LABEL_7:
    sub_1001FD17C(v10, (uint64_t)v5, v6);
  }

  std::stringbuf::str(a2, (const std::stringbuf *)((char *)v10 + 8));
  *(void *)((char *)&v10[-1]
  *(void *)&v10[0] = v7;
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf((char *)v10 + 8);
  return std::ios::~ios(v14);
}

void sub_100531B34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100531B48(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 7)
  {
    *(_BYTE *)(a1 + 72) = *(_BYTE *)a2;
    *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 1);
    *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 2);
    *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 4);
    *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 5);
  }

  return a3 == 7;
}

uint64_t sub_100531B84@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v22 = 0LL;
  __int128 v20 = 0u;
  memset(v21, 0, sizeof(v21));
  *(_OWORD *)__int128 __p = 0u;
  __int128 v19 = 0u;
  memset(v17, 0, sizeof(v17));
  __int128 v16 = 0u;
  sub_1001FCFC8((uint64_t)&v16);
  uint64_t v4 = *(void *)&v17[0];
  *(_DWORD *)((char *)v17 + *(void *)(*(void *)&v17[0] - 24LL) + 8) = *(_DWORD *)((_BYTE *)v17
                                                                                    + *(void *)(*(void *)&v17[0]
                                                                                                - 24LL)
                                                                                    + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v17 + *(void *)(v4 - 24) + 8) |= 0x4000u;
  int v5 = sub_1001FD17C(v17, (uint64_t)"format: 0x", 10LL);
  uint64_t v6 = (void *)std::ostream::operator<<(v5, *(unsigned __int8 *)(a1 + 72));
  uint64_t v7 = sub_1001FD17C(v6, (uint64_t)", exponent: 0x", 14LL);
  uint64_t v8 = (void *)std::ostream::operator<<(v7, *(unsigned __int8 *)(a1 + 73));
  __int128 v9 = sub_1001FD17C(v8, (uint64_t)", unit: 0x", 10LL);
  uint64_t v10 = (void *)std::ostream::operator<<(v9, *(unsigned __int16 *)(a1 + 74));
  unsigned __int8 v11 = sub_1001FD17C(v10, (uint64_t)", namespace: 0x", 15LL);
  __int128 v12 = (void *)std::ostream::operator<<(v11, *(unsigned __int8 *)(a1 + 76));
  __int128 v13 = sub_1001FD17C(v12, (uint64_t)", description: 0x", 17LL);
  std::ostream::operator<<(v13, *(unsigned __int16 *)(a1 + 78));
  std::stringbuf::str(a2, (const std::stringbuf *)((char *)v17 + 8));
  *(void *)((char *)&v17[-1]
  *(void *)&v17[0] = v14;
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf((char *)v17 + 8);
  return std::ios::~ios(v21);
}

void sub_100531D10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100531D24(uint64_t a1, const void *a2, size_t __sz)
{
  unsigned int v3 = __sz;
  uint64_t v6 = *(void **)(a1 + 72);
  if (v6) {
    operator delete[](v6);
  }
  *(void *)(a1 + 72) = 0LL;
  *(_WORD *)(a1 + 80) = 0;
  if (v3)
  {
    uint64_t v7 = operator new[](v3);
    *(void *)(a1 + 72) = v7;
    *(_WORD *)(a1 + 80) = v3;
    memcpy(v7, a2, v3);
  }

void sub_100531D94(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  unsigned int v3 = &off_10087FAA8;
  if (v4) {
    sub_1002CD254(v4);
  }
}

void sub_100531DEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  if (a10) {
    sub_1002CD254(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100531E10@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  return sub_10056B0A4(a1 + 72, a2);
}

uint64_t sub_100531E18@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v26 = 0LL;
  __int128 v24 = 0u;
  memset(v25, 0, sizeof(v25));
  *(_OWORD *)uint64_t v22 = 0u;
  __int128 v23 = 0u;
  memset(v21, 0, sizeof(v21));
  __int128 v20 = 0u;
  sub_1001FCFC8((uint64_t)&v20);
  uint64_t v4 = sub_1001FD17C(v21, (uint64_t)"valueUUID: ", 11LL);
  __n128 v28 = *(__n128 *)(a1 + 76);
  int v29 = *(_DWORD *)(a1 + 92);
  sub_100634334(&v27, &v28);
  int v5 = __p;
  sub_1006344B4(v6, __p);
  if (v19 < 0) {
    int v5 = (void **)__p[0];
  }
  size_t v7 = strlen((const char *)v5);
  uint64_t v8 = sub_1001FD17C(v4, (uint64_t)v5, v7);
  sub_1001FD17C(v8, (uint64_t)", ", 2LL);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)((char *)__p + 3) = 0;
  LODWORD(__p[0]) = 0;
  snprintf((char *)__p, 7uLL, "0x%04X", *(unsigned __int16 *)(a1 + 74));
  __int128 v9 = sub_1001FD17C(v21, (uint64_t)"valueHandle: ", 13LL);
  size_t v10 = strlen((const char *)__p);
  unsigned __int8 v11 = sub_1001FD17C(v9, (uint64_t)__p, v10);
  sub_1001FD17C(v11, (uint64_t)", ", 2LL);
  sub_1001FD17C(v21, (uint64_t)"properties:", 11LL);
  char v12 = *(_BYTE *)(a1 + 72);
  if ((v12 & 1) != 0)
  {
    sub_1001FD17C(v21, (uint64_t)" broadcast", 10LL);
    char v12 = *(_BYTE *)(a1 + 72);
  }

  if ((v12 & 2) != 0)
  {
    sub_1001FD17C(v21, (uint64_t)" read", 5LL);
    char v12 = *(_BYTE *)(a1 + 72);
  }

  if ((v12 & 4) != 0)
  {
    sub_1001FD17C(v21, (uint64_t)" responseless-writes", 20LL);
    char v12 = *(_BYTE *)(a1 + 72);
  }

  if ((v12 & 8) != 0)
  {
    sub_1001FD17C(v21, (uint64_t)" write", 6LL);
    char v12 = *(_BYTE *)(a1 + 72);
  }

  if ((v12 & 0x10) != 0)
  {
    sub_1001FD17C(v21, (uint64_t)" notify", 7LL);
    char v12 = *(_BYTE *)(a1 + 72);
  }

  if ((v12 & 0x20) != 0)
  {
    sub_1001FD17C(v21, (uint64_t)" indicate", 9LL);
    char v12 = *(_BYTE *)(a1 + 72);
  }

  if ((v12 & 0x40) != 0)
  {
    sub_1001FD17C(v21, (uint64_t)" signed-writes", 14LL);
    char v12 = *(_BYTE *)(a1 + 72);
  }

  if (v12 < 0) {
    sub_1001FD17C(v21, (uint64_t)" extended", 9LL);
  }
  sub_1001FD17C(v21, (uint64_t)", ", 2LL);
  __int128 v13 = sub_1001FD17C(v21, (uint64_t)"discoveredDescriptors: ", 23LL);
  if (*(_BYTE *)(a1 + 128)) {
    uint64_t v14 = "all";
  }
  else {
    uint64_t v14 = "none";
  }
  if (*(_BYTE *)(a1 + 128)) {
    uint64_t v15 = 3LL;
  }
  else {
    uint64_t v15 = 4LL;
  }
  sub_1001FD17C(v13, (uint64_t)v14, v15);
  std::stringbuf::str(a2, (const std::stringbuf *)((char *)v21 + 8));
  *(void *)((char *)&v21[-1]
  *(void *)&v21[0] = v16;
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[1]);
  }
  std::streambuf::~streambuf((char *)v21 + 8);
  return std::ios::~ios(v25);
}

void sub_10053215C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t sub_100532198@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v19 = 0LL;
  __int128 v17 = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)__int128 __p = 0u;
  __int128 v16 = 0u;
  memset(v14, 0, sizeof(v14));
  __int128 v13 = 0u;
  sub_1001FCFC8((uint64_t)&v13);
  uint64_t v4 = sub_1001FD17C(v14, (uint64_t)"serviceUUID: ", 13LL);
  __n128 v23 = *(__n128 *)(a1 + 76);
  int v24 = *(_DWORD *)(a1 + 92);
  sub_100634334(&v22, &v23);
  int v5 = __str;
  sub_1006344B4(v6, __str);
  if (SBYTE7(v21) < 0) {
    int v5 = *(char **)__str;
  }
  size_t v7 = strlen(v5);
  uint64_t v8 = sub_1001FD17C(v4, (uint64_t)v5, v7);
  sub_1001FD17C(v8, (uint64_t)", ", 2LL);
  if (SBYTE7(v21) < 0) {
    operator delete(*(void **)__str);
  }
  *(_OWORD *)__str = 0u;
  __int128 v21 = 0u;
  snprintf(__str, 0x20uLL, "0x%04X - 0x%04X", *(unsigned __int16 *)(a1 + 72), *(unsigned __int16 *)(a1 + 74));
  __int128 v9 = sub_1001FD17C(v14, (uint64_t)"handleRange: ", 13LL);
  size_t v10 = strlen(__str);
  sub_1001FD17C(v9, (uint64_t)__str, v10);
  std::stringbuf::str(a2, (const std::stringbuf *)((char *)v14 + 8));
  *(void *)((char *)&v14[-1]
  *(void *)&v14[0] = v11;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf((char *)v14 + 8);
  return std::ios::~ios(v18);
}

void sub_100532388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1005323C4@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v27 = 0LL;
  __int128 v25 = 0u;
  memset(v26, 0, sizeof(v26));
  *(_OWORD *)__n128 v23 = 0u;
  __int128 v24 = 0u;
  memset(v22, 0, sizeof(v22));
  __int128 v21 = 0u;
  sub_1001FCFC8((uint64_t)&v21);
  uint64_t v4 = sub_1001FD17C(v22, (uint64_t)"serviceUUID: ", 13LL);
  __n128 v29 = *(__n128 *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 88);
  sub_100634334(&v28, &v29);
  int v5 = __p;
  sub_1006344B4(v6, __p);
  if (v20 < 0) {
    int v5 = (void **)__p[0];
  }
  size_t v7 = strlen((const char *)v5);
  uint64_t v8 = sub_1001FD17C(v4, (uint64_t)v5, v7);
  sub_1001FD17C(v8, (uint64_t)", ", 2LL);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)((char *)__p + 3) = 0;
  LODWORD(__p[0]) = 0;
  snprintf((char *)__p, 7uLL, "0x%04X", *(unsigned __int16 *)(a1 + 48));
  __int128 v9 = sub_1001FD17C(v22, (uint64_t)"endHandle: ", 11LL);
  size_t v10 = strlen((const char *)__p);
  uint64_t v11 = sub_1001FD17C(v9, (uint64_t)__p, v10);
  sub_1001FD17C(v11, (uint64_t)", ", 2LL);
  sub_1001FD17C(v22, (uint64_t)"discoveredCharacteristics: ", 27LL);
  if (*(_BYTE *)(a1 + 160))
  {
    char v12 = "all";
    uint64_t v13 = 3LL;
  }

  else
  {
    if (*(void *)(a1 + 168) == *(void *)(a1 + 176)) {
      char v12 = "none";
    }
    else {
      char v12 = "some";
    }
    uint64_t v13 = 4LL;
  }

  sub_1001FD17C(v22, (uint64_t)v12, v13);
  if (*(_DWORD *)(a1 + 16))
  {
    uint64_t v14 = sub_1001FD17C(v22, (uint64_t)", ID: 0x", 8LL);
    uint64_t v15 = *v14;
    *(_DWORD *)((char *)v14 + *(void *)(*v14 - 24) + 8) = *(_DWORD *)((_BYTE *)v14 + *(void *)(*v14 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v14 + *(void *)(v15 - 24) + 8) |= 0x4000u;
    v29.n128_u8[0] = 48;
    __int128 v16 = sub_100361614(v14, (unsigned __int8 *)&v29);
    *(void *)((char *)v16 + *(void *)(*v16 - 24LL) + 24) = 8LL;
    std::ostream::operator<<(v16, *(unsigned int *)(a1 + 16));
  }

  std::stringbuf::str(a2, (const std::stringbuf *)((char *)v22 + 8));
  *(void *)((char *)&v22[-1]
  *(void *)&v22[0] = v17;
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[1]);
  }
  std::streambuf::~streambuf((char *)v22 + 8);
  return std::ios::~ios(v26);
}

void sub_100532694( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

__n128 sub_1005326E0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  v2[20] = *(_BYTE *)(a1 + 20);
  *(void *)uint64_t v2 = &off_1008A0178;
  *((void *)v2 + 1) = v2 + 24;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  *((void *)v2 + 9) = *(void *)(a1 + 72);
  return result;
}

void *sub_100532744(void *a1)
{
  *a1 = &off_1008A01B0;
  uint64_t v2 = (void *)a1[9];
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_10053277C(void *__p)
{
  void *__p = &off_1008A01B0;
  uint64_t v2 = (void *)__p[9];
  if (v2) {
    operator delete[](v2);
  }
  operator delete(__p);
}

char *sub_1005327B4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  v2[20] = *(_BYTE *)(a1 + 20);
  *(void *)uint64_t v2 = &off_1008A01B0;
  *((void *)v2 + 1) = v2 + 24;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((void *)v2 + 9) = 0LL;
  *((_WORD *)v2 + 40) = 0;
  sub_1005317FC((uint64_t)v2, *(const void **)(a1 + 72), *(unsigned __int16 *)(a1 + 80));
  v2[20] = *(_BYTE *)(a1 + 20);
  return v2;
}

void sub_100532834(_Unwind_Exception *a1)
{
}

uint64_t sub_100532848(uint64_t a1, const void *a2, size_t a3)
{
  return 1LL;
}

__n128 sub_100532868(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  v2[20] = *(_BYTE *)(a1 + 20);
  *(void *)uint64_t v2 = &off_1008A01E8;
  *((void *)v2 + 1) = v2 + 24;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  *((void *)v2 + 9) = *(void *)(a1 + 72);
  return result;
}

__n128 sub_1005328D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  v2[20] = *(_BYTE *)(a1 + 20);
  *(void *)uint64_t v2 = &off_1008A0220;
  *((void *)v2 + 1) = v2 + 24;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  *((void *)v2 + 9) = *(void *)(a1 + 72);
  return result;
}

void *sub_100532938(void *a1)
{
  *a1 = &off_1008A0258;
  uint64_t v2 = (void *)a1[9];
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_100532970(void *__p)
{
  void *__p = &off_1008A0258;
  uint64_t v2 = (void *)__p[9];
  if (v2) {
    operator delete[](v2);
  }
  operator delete(__p);
}

char *sub_1005329A8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  v2[20] = *(_BYTE *)(a1 + 20);
  *(void *)uint64_t v2 = &off_1008A0258;
  *((void *)v2 + 1) = v2 + 24;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((void *)v2 + 9) = 0LL;
  *((_WORD *)v2 + 40) = 0;
  sub_100531D24((uint64_t)v2, *(const void **)(a1 + 72), *(unsigned __int16 *)(a1 + 80));
  return v2;
}

void sub_100532A20(_Unwind_Exception *a1)
{
}

uint64_t sub_100532A34(uint64_t a1, const void *a2, size_t a3)
{
  return 1LL;
}

void *sub_100532A4C(void *a1)
{
  *a1 = &off_1008A0290;
  a1[9] = &off_10087FAA8;
  uint64_t v2 = (unsigned int *)a1[10];
  if (v2) {
    sub_1002CD254(v2);
  }
  return a1;
}

void sub_100532A90(void *__p)
{
  void *__p = &off_1008A0290;
  __p[9] = &off_10087FAA8;
  uint64_t v2 = (unsigned int *)__p[10];
  if (v2) {
    sub_1002CD254(v2);
  }
  operator delete(__p);
}

char *sub_100532AD4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  *(void *)uint64_t v2 = &off_1008A0290;
  *((void *)v2 + 1) = v2 + 24;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 80);
  *((void *)v2 + 9) = &off_10087FAA8;
  *((void *)v2 + 10) = v3;
  if (v3) {
    sub_1002CD1E0(v3);
  }
  return v2;
}

void sub_100532B48(_Unwind_Exception *a1)
{
}

void sub_100532B60(void *a1)
{
  uint64_t v1 = sub_100532C90(a1);
  operator delete(v1);
}

void *sub_100532B74(uint64_t a1)
{
  uint64_t v2 = operator new(0x88uLL);
  sub_10038C2B0((uint64_t)v2, a1);
  return v2;
}

void sub_100532BA8(_Unwind_Exception *a1)
{
}

__n128 sub_100532BC4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x70uLL);
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  *(void *)uint64_t v2 = &off_1008A02F0;
  *((void *)v2 + 1) = v2 + 24;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  uint64_t v4 = *(void *)(a1 + 96);
  *((void *)v2 + 11) = *(void *)(a1 + 88);
  *((void *)v2 + 12) = v4;
  *((_DWORD *)v2 + 26) = *(_DWORD *)(a1 + 104);
  return result;
}

void sub_100532C34(void *a1)
{
  uint64_t v1 = sub_100532D0C(a1);
  operator delete(v1);
}

void *sub_100532C48(uint64_t a1)
{
  uint64_t v2 = operator new(0xC0uLL);
  sub_10038BF24((uint64_t)v2, a1);
  return v2;
}

void sub_100532C7C(_Unwind_Exception *a1)
{
}

void *sub_100532C90(void *a1)
{
  *a1 = off_1008A02C0;
  uint64_t v3 = (void *)a1[13];
  uint64_t v2 = (void *)a1[14];
  while (v3 != v2)
  {
    if (*v3)
    {
      (*(void (**)(void))(*(void *)*v3 + 8LL))(*v3);
      uint64_t v2 = (void *)a1[14];
    }

    ++v3;
  }

  uint64_t v4 = a1[12];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  int v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }

  return a1;
}

void *sub_100532D0C(void *a1)
{
  *a1 = off_1008A0320;
  uint64_t v3 = (void *)a1[13];
  uint64_t v2 = (void *)a1[14];
  while (v3 != v2)
  {
    if (*v3)
    {
      (*(void (**)(void))(*(void *)*v3 + 8LL))(*v3);
      uint64_t v2 = (void *)a1[14];
    }

    ++v3;
  }

  int v5 = (void *)a1[17];
  uint64_t v4 = (void *)a1[18];
  while (v5 != v4)
  {
    if (*v5)
    {
      (*(void (**)(void))(*(void *)*v5 + 8LL))(*v5);
      uint64_t v4 = (void *)a1[18];
    }

    ++v5;
  }

  uint64_t v6 = (void *)a1[21];
  if (v6)
  {
    a1[22] = v6;
    operator delete(v6);
  }

  size_t v7 = (void *)a1[17];
  if (v7)
  {
    a1[18] = v7;
    operator delete(v7);
  }

  uint64_t v8 = (void *)a1[13];
  if (v8)
  {
    a1[14] = v8;
    operator delete(v8);
  }

  return a1;
}

uint64_t sub_100532DC0(uint64_t result)
{
  *(void *)__n128 result = 0LL;
  *(void *)(result + 8) = 0LL;
  *(_BYTE *)(result + 16) = 0;
  return result;
}

char *sub_100532DCC(char *result, char *__s)
{
  result[16] = 0;
  if (__s)
  {
    uint64_t v3 = result;
    unsigned __int8 v4 = strlen(__s);
    if (v4 <= 0x10uLL) {
      unsigned __int8 v5 = v4;
    }
    else {
      unsigned __int8 v5 = 16;
    }
    v3[16] = v5;
    return strncpy(v3, __s, v5);
  }

  return result;
}

char *sub_100532E28(char *a1, char *a2)
{
  a1[16] = 0;
  sub_100532DCC(a1, a2);
  return a1;
}

__n128 sub_100532E50(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  return result;
}

uint64_t sub_100532E64(uint64_t result)
{
  *(_BYTE *)(result + 16) = 0;
  return result;
}

char *sub_100532E6C(char *a1, char *a2)
{
  return a1;
}

uint64_t sub_100532E90(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = bswap64(*(void *)a1);
  unint64_t v4 = bswap64(*(void *)a2);
  if (v3 == v4 && (v3 = bswap64(*(void *)(a1 + 8)), unint64_t v4 = bswap64(*(void *)(a2 + 8)), v3 == v4))
  {
    unsigned int v5 = 0;
  }

  else if (v3 < v4)
  {
    unsigned int v5 = -1;
  }

  else
  {
    unsigned int v5 = 1;
  }

  return v5 >> 31;
}

uint64_t sub_100532EF4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

void *sub_100532EFC@<X0>(unsigned __int8 *__src@<X0>, void *a2@<X8>)
{
  return sub_100330694(a2, __src, __src[16]);
}

uint64_t sub_100532F0C(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 128) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 112) = a1 + 120;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 32) = dispatch_workloop_create("XPCServer");
  return a1;
}

BOOL sub_100532F64(void *a1)
{
  a1[13] = 0LL;
  dispatch_workloop_t v2 = dispatch_workloop_create("com.apple.server.bluetooth.le.att.xpc");
  a1[5] = v2;
  a1[9] = sub_10053304C((uint64_t)a1, "com.apple.server.bluetooth.le.att.xpc", v2);
  dispatch_workloop_t v3 = dispatch_workloop_create("com.apple.server.bluetooth.le.pipe.xpc");
  a1[6] = v3;
  a1[10] = sub_10053304C((uint64_t)a1, "com.apple.server.bluetooth.le.pipe.xpc", v3);
  dispatch_workloop_t v4 = dispatch_workloop_create("com.apple.server.bluetooth.general.xpc");
  a1[7] = v4;
  a1[11] = sub_10053304C((uint64_t)a1, "com.apple.server.bluetooth.general.xpc", v4);
  dispatch_workloop_t v5 = dispatch_workloop_create("com.apple.server.bluetooth.classic.xpc");
  a1[8] = v5;
  uint64_t v6 = sub_10053304C((uint64_t)a1, "com.apple.server.bluetooth.classic.xpc", v5);
  a1[12] = v6;
  if (!a1[9] || !a1[10]) {
    return 0LL;
  }
  if (a1[11]) {
    BOOL v7 = v6 == 0LL;
  }
  else {
    BOOL v7 = 1;
  }
  return !v7;
}

_xpc_connection_s *sub_10053304C(uint64_t a1, char *name, dispatch_queue_t targetq)
{
  mach_service = xpc_connection_create_mach_service(name, targetq, 1uLL);
  if (mach_service)
  {
    uint64_t v6 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      size_t v10 = name;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Registering XPC service %{public}s",  buf,  0xCu);
    }

    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_100533158;
    v8[3] = &unk_1008A0340;
    v8[4] = a1;
    v8[5] = name;
    xpc_connection_set_event_handler(mach_service, v8);
    xpc_connection_resume(mach_service);
  }

  return mach_service;
}

void sub_100533158(uint64_t a1, void *a2)
{
}

void sub_100533164(uint64_t a1, xpc_object_t object, const char *a3)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    sub_100533688(a1, (_xpc_connection_s *)object, a3);
  }

  else if (type == (xpc_type_t)&_xpc_type_error)
  {
    string = xpc_dictionary_get_string(object, _xpc_error_key_description);
    __int128 v9 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068FC00((uint64_t)a3, (uint64_t)string, v9);
    }
  }

  else
  {
    BOOL v7 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10068FC70((uint64_t)a3, (uint64_t)object, v7);
    }
  }

uint64_t **sub_10053324C(uint64_t a1, xpc_connection_t connection, const char *a3)
{
  unsigned int pid = xpc_connection_get_pid(connection);
  *(void *)&v19[0] = &pid;
  uint64_t v6 = sub_100533E7C((uint64_t **)(a1 + 8), (int *)&pid, (uint64_t)&unk_1006C2518, (_DWORD **)v19);
  if (v6[6]) {
    return v6 + 5;
  }
  id v7 = sub_10025D564((uint64_t)connection);
  id v8 = objc_claimAutoreleasedReturnValue(v7);
  __int128 v9 = (const char *)[v8 cStringUsingEncoding:4];

  uint64_t v24 = 0LL;
  memset(v23, 0, sizeof(v23));
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  *(_OWORD *)__int128 __p = 0u;
  memset(v19, 0, sizeof(v19));
  sub_10020E564((uint64_t)v19);
  if (!v9) {
    __int128 v9 = "CoreBluetooth";
  }
  size_t v10 = strlen(v9);
  uint64_t v11 = sub_1001FD17C(v19, (uint64_t)v9, v10);
  char v12 = sub_1001FD17C(v11, (uint64_t)"-", 1LL);
  std::ostream::operator<<(v12, pid);
  uint64_t v13 = *(dispatch_queue_s **)(a1 + 32);
  if (!strcmp(a3, "com.apple.server.bluetooth.le.att.xpc"))
  {
    uint64_t v14 = (dispatch_queue_s **)(a1 + 40);
    goto LABEL_12;
  }

  if (!strcmp(a3, "com.apple.server.bluetooth.le.pipe.xpc"))
  {
    uint64_t v14 = (dispatch_queue_s **)(a1 + 48);
    goto LABEL_12;
  }

  if (!strcmp(a3, "com.apple.server.bluetooth.general.xpc"))
  {
    uint64_t v14 = (dispatch_queue_s **)(a1 + 56);
    goto LABEL_12;
  }

  if (!strcmp(a3, "com.apple.server.bluetooth.classic.xpc"))
  {
    uint64_t v14 = (dispatch_queue_s **)(a1 + 64);
LABEL_12:
    uint64_t v13 = *v14;
  }

  uint64_t v15 = &v18;
  std::stringbuf::str(&v18, (const std::stringbuf *)((char *)v19 + 8));
  if ((v18.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    uint64_t v15 = (std::stringbuf::string_type *)v18.__r_.__value_.__r.__words[0];
  }
  __int128 v16 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v6[6] = (uint64_t *)dispatch_queue_create_with_target_V2((const char *)v15, v16, v13);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf((char *)v19 + 8);
  std::ios::~ios(v23);
  return v6 + 5;
}

void sub_100533494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1005334B8(uint64_t a1, int a2)
{
  dispatch_workloop_t v2 = *(dispatch_queue_s **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100533514;
  v3[3] = &unk_10087EB68;
  v3[4] = a1;
  int v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100533514(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)v2);
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    goto LABEL_11;
  }
  int v4 = *(_DWORD *)(a1 + 40);
  uint64_t v5 = v2 + 16;
  do
  {
    int v6 = *(_DWORD *)(v3 + 32);
    BOOL v7 = v6 < v4;
    if (v6 >= v4) {
      id v8 = (uint64_t *)v3;
    }
    else {
      id v8 = (uint64_t *)(v3 + 8);
    }
    if (!v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }

  while (*v8);
  if (v5 == v2 + 16 || v4 < *(_DWORD *)(v5 + 32))
  {
LABEL_11:
    __int128 v9 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_FAULT)) {
      sub_10068FCE0(v9);
    }
    uint64_t v5 = v2 + 16;
  }

  int v10 = *(_DWORD *)(v5 + 40);
  if (!v10)
  {
    char v12 = (os_log_s *)qword_1008F75F0;
    if (!os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)(v5 + 40) = -1;
      goto LABEL_19;
    }

    int v13 = 136446210;
    uint64_t v14 = "clientInfo.numConnections > 0";
    _os_log_fault_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "Assertion failed: %{public}s",  (uint8_t *)&v13,  0xCu);
    int v10 = *(_DWORD *)(v5 + 40);
  }

  int v11 = v10 - 1;
  *(_DWORD *)(v5 + 40) = v11;
  if (!v11)
  {
    dispatch_release(*(dispatch_object_t *)(v5 + 48));
    sub_1001FDBCC((uint64_t **)(v2 + 8), (uint64_t *)v5);
    operator delete((void *)v5);
  }

void sub_100533688(uint64_t a1, _xpc_connection_s *a2, const char *a3)
{
  int v6 = sub_10053324C(a1, a2, a3);
  if (!strcmp(a3, "com.apple.server.bluetooth.le.att.xpc"))
  {
    operator new(0xE0uLL);
    ++*(void *)(a1 + 104);
    sub_1004C4BE0();
  }

  else if (!strcmp(a3, "com.apple.server.bluetooth.le.pipe.xpc"))
  {
    __int128 v9 = operator new(0x98uLL);
    uint64_t v10 = *(void *)(a1 + 104);
    *(void *)(a1 + 104) = v10 + 1;
    sub_1004FF9D4((uint64_t)v9, v10, a2, (dispatch_object_s *)v6[1]);
  }

  else if (!strcmp(a3, "com.apple.server.bluetooth.general.xpc"))
  {
    int v11 = operator new(0xA8uLL);
    uint64_t v12 = *(void *)(a1 + 104);
    *(void *)(a1 + 104) = v12 + 1;
    sub_100260B08((uint64_t)v11, v12, a2, (dispatch_object_s *)v6[1]);
  }

  else if (!strcmp(a3, "com.apple.server.bluetooth.classic.xpc"))
  {
    BOOL v7 = operator new(0x120uLL);
    uint64_t v8 = *(void *)(a1 + 104);
    *(void *)(a1 + 104) = v8 + 1;
    sub_10020A130((uint64_t)v7, v8, a2, (dispatch_object_s *)v6[1]);
  }

  ++*(_DWORD *)v6;
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1005337C8(_Unwind_Exception *a1)
{
}

void sub_1005337E8(uint64_t a1, char *a2, int a3)
{
  uint64_t v6 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 8LL))(v6))
  {
    v10[0] = 0LL;
    v10[1] = v10;
    void v10[2] = 0x4812000000LL;
    v10[3] = sub_1005338C8;
    _OWORD v10[4] = sub_1005338E4;
    *(_OWORD *)__int128 __p = 0u;
    __int128 v12 = 0u;
    sub_10002418C(&__p[1], a2);
    BOOL v7 = *(dispatch_queue_s **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_1005338F8;
    v8[3] = &unk_10089BB10;
    int v9 = a3;
    v8[4] = v10;
    v8[5] = a1;
    dispatch_async(v7, v8);
    _Block_object_dispose(v10, 8);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[1]);
    }
  }

__n128 sub_1005338C8(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  a2[3].n128_u64[0] = 0LL;
  return result;
}

void sub_1005338E4(uint64_t a1)
{
}

void sub_1005338F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v12 = 0;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  *(_OWORD *)__s = 0u;
  __int128 v7 = 0u;
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008A0360);
  }
  sub_1004978A8(qword_1008D61A0, *(_DWORD *)(a1 + 48), __s, 0x64uLL);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 136));
  __p[0] = (void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 48LL);
  uint64_t v3 = sub_100533F84((uint64_t **)(v2 + 112), (const void **)__p[0], (uint64_t)&unk_1006C2518, (__int128 **)__p);
  sub_10002418C(__p, __s);
  sub_1004F5958((uint64_t **)v3 + 7, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 136));
}

void sub_100533A14( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100533A38(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: ------------------ XPC Server ------------------",  buf,  2u);
  }

  uint64_t v3 = *(void **)(a1 + 8);
  if (v3 != (void *)(a1 + 16))
  {
    do
    {
      int v31 = 0;
      __int128 v29 = 0u;
      __int128 v30 = 0u;
      __int128 v27 = 0u;
      __int128 v28 = 0u;
      *(_OWORD *)buf = 0u;
      __int128 v26 = 0u;
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_1008A0360);
      }
      sub_1004978A8(qword_1008D61A0, *((_DWORD *)v3 + 8), (char *)buf, 0x64uLL);
      int v4 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = *((_DWORD *)v3 + 10);
        *(_DWORD *)__int128 v21 = 136315394;
        __int128 v22 = buf;
        __int16 v23 = 1024;
        int v24 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "statedump: process:%s numOfConnections:%d",  v21,  0x12u);
      }

      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          __int128 v7 = v6;
          uint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          __int128 v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          uint64_t v3 = v7;
        }

        while (!v8);
      }

      uint64_t v3 = v7;
    }

    while (v7 != (void *)(a1 + 16));
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  memset(buf, 0, sizeof(buf));
  *(void *)&__int128 v26 = 0LL;
  sub_100534118((uint64_t *)buf, (const void ***)(a1 + 112));
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
  if ((void)v26)
  {
    __int128 v9 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump: ", v21, 2u);
    }

    __int128 v10 = *(uint8_t **)buf;
    if (*(uint8_t **)buf != &buf[8])
    {
      uint64_t v11 = qword_1008F75F0;
      int v12 = (os_log_s *)qword_1008F75F0;
      do
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = v10 + 32;
          *(_DWORD *)__int128 v21 = 136315138;
          __int128 v22 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:     %s", v21, 0xCu);
          uint64_t v11 = qword_1008F75F0;
          int v12 = (os_log_s *)qword_1008F75F0;
        }

        uint64_t v14 = (uint8_t *)*((void *)v10 + 7);
        uint64_t v15 = (os_log_s *)v11;
        if (v14 != v10 + 64)
        {
          do
          {
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              __int128 v16 = v14 + 32;
              *(_DWORD *)__int128 v21 = 136315138;
              __int128 v22 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump:           %s", v21, 0xCu);
              uint64_t v11 = qword_1008F75F0;
              int v12 = (os_log_s *)qword_1008F75F0;
            }

            else
            {
              int v12 = v15;
            }

            uint64_t v17 = (uint8_t *)*((void *)v14 + 1);
            if (v17)
            {
              do
              {
                std::stringbuf::string_type v18 = v17;
                uint64_t v17 = *(uint8_t **)v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                std::stringbuf::string_type v18 = (uint8_t *)*((void *)v14 + 2);
                BOOL v8 = *(void *)v18 == (void)v14;
                uint64_t v14 = v18;
              }

              while (!v8);
            }

            uint64_t v15 = v12;
            uint64_t v14 = v18;
          }

          while (v18 != v10 + 64);
        }

        uint64_t v19 = (uint8_t *)*((void *)v10 + 1);
        if (v19)
        {
          do
          {
            char v20 = v19;
            uint64_t v19 = *(uint8_t **)v19;
          }

          while (v19);
        }

        else
        {
          do
          {
            char v20 = (uint8_t *)*((void *)v10 + 2);
            BOOL v8 = *(void *)v20 == (void)v10;
            __int128 v10 = v20;
          }

          while (!v8);
        }

        __int128 v10 = v20;
      }

      while (v20 != &buf[8]);
    }
  }

  sub_100533DF4((uint64_t)buf, *(void **)&buf[8]);
}

void sub_100533DF4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100533DF4(a1, *a2);
    sub_100533DF4(a1, a2[1]);
    sub_100533E3C((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void sub_100533E3C(uint64_t a1)
{
}

uint64_t **sub_100533E7C(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  __int128 v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        __int128 v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        __int128 v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        __int128 v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    __int128 v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x38uLL);
    v11[8] = **a4;
    v11[10] = 0;
    *((void *)v11 + 6) = 0LL;
    sub_100029630(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

void sub_100533F40(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_100533F70(_Unwind_Exception *a1)
{
}

uint64_t *sub_100533F84(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v11 = 0LL;
  uint64_t v6 = (uint64_t **)sub_10023E6A4((uint64_t)a1, &v11, a2);
  __int128 v7 = *v6;
  if (!*v6)
  {
    int v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_100534038((uint64_t)a1, a4, v10);
    sub_100029630(a1, v11, v8, v10[0]);
    __int128 v7 = v10[0];
    v10[0] = 0LL;
    sub_1005340D4((uint64_t)v10, 0LL);
  }

  return v7;
}

_BYTE *sub_100534038@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  uint64_t v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  __n128 result = v6 + 4;
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    __n128 result = sub_100024238(result, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)__n128 result = v9;
  }

  v6[8] = 0LL;
  v6[9] = 0LL;
  v6[7] = v6 + 8;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1005340BC(_Unwind_Exception *a1)
{
}

void sub_1005340D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100533E3C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

uint64_t *sub_100534118(uint64_t *a1, const void ***a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_10053416C(a1, *a2, a2 + 1);
  return a1;
}

void sub_100534154(_Unwind_Exception *a1)
{
}

uint64_t *sub_10053416C(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    int v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = sub_1005341F0(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      __int128 v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          int v8 = (const void ***)v7;
          __int128 v7 = (const void **)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          int v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          int v4 = (const void **)v8;
        }

        while (!v9);
      }

      int v4 = (const void **)v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_1005341F0(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  uint64_t v11 = 0LL;
  int v12 = 0LL;
  uint64_t v6 = sub_10023E45C(a1, a2, &v12, &v11, a3);
  __int128 v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_100534290((uint64_t)a1, a4, v10);
    sub_100029630(a1, (uint64_t)v12, v8, v10[0]);
    __int128 v7 = v10[0];
    v10[0] = 0LL;
    sub_1005340D4((uint64_t)v10, 0LL);
  }

  return v7;
}

void *sub_100534290@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  uint64_t v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  __n128 result = sub_100534300(v6 + 4, a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1005342E8(_Unwind_Exception *a1)
{
}

void *sub_100534300(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100024238(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  sub_100291924(__dst + 3, (const void ***)a2 + 3);
  return __dst;
}

void sub_100534358(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100534374(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = 0LL;
  *(void *)a1 = off_1008A0390;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + sub_100242FAC(v15 - 48) = *(_WORD *)(a2 + 48);
  sub_100532E50((__n128 *)(a1 + 50), (__n128 *)(a2 + 50));
  return a1;
}

uint64_t sub_1005343CC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = 0LL;
  sub_1000B0400((uint64_t)&v8);
  uint64_t v6 = SWORD2(v8);
  *(void *)(a1 + 16) = (int)v8;
  *(void *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = 0LL;
  *(void *)a1 = off_1008A0390;
  *(void *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + sub_100242FAC(v15 - 48) = a3;
  *(_BYTE *)(a1 + 49) = 0;
  sub_100532DC0(a1 + 50);
  return a1;
}

void *sub_100534448(void *a1, uint64_t a2)
{
  *a1 = off_1008A0390;
  nullsub_63((char *)a1 + 50, a2);
  return a1;
}

void sub_100534478(char *a1, uint64_t a2)
{
  *(void *)a1 = off_1008A0390;
  nullsub_63(a1 + 50, a2);
  operator delete(a1);
}

uint64_t sub_1005344A8(uint64_t a1)
{
  *(_WORD *)(a1 + sub_100242FAC(v15 - 48) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  return sub_100532E64(a1 + 50);
}

uint64_t sub_1005344C0()
{
  return 30LL;
}

_BYTE *sub_1005344C8(_BYTE *result, __n128 *a2)
{
  if (!result[49])
  {
    uint64_t v3 = result;
    sub_100532E50((__n128 *)(result + 50), a2);
    v3[49] = 1;
    char v12 = 0;
    sub_100242CA4(&v12);
    uint64_t v4 = *((void *)v3 + 1);
    uint64_t v6 = nullsub_63(a2, v5);
    unsigned __int8 v7 = sub_100532EF4((uint64_t)a2);
    sub_1001E923C(1, v4 + 128, v6, v7, v8, v9, v10, v11);
    return sub_100242CD8(&v12);
  }

  return result;
}

void sub_100534550( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

_BYTE *sub_100534564(_BYTE *result)
{
  if (!result[49])
  {
    uint64_t v1 = result;
    result[49] = 1;
    char v6 = 0;
    sub_100242CA4(&v6);
    sub_1001E923C(0, *((void *)v1 + 1) + 128LL, 0LL, 0LL, v2, v3, v4, v5);
    return sub_100242CD8(&v6);
  }

  return result;
}

void sub_1005345C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1005345D8(uint64_t a1, uint64_t a2, int a3, char a4, char a5)
{
  uint64_t v12 = 0LL;
  sub_1000B0400((uint64_t)&v12);
  uint64_t v10 = SWORD2(v12);
  *(void *)(a1 + 16) = (int)v12;
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = 2;
  *(void *)(a1 + 40) = 0LL;
  *(void *)a1 = &off_1008A03D8;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + sub_100242FAC(v15 - 48) = a3;
  *(_BYTE *)(a1 + 52) = a4;
  *(_BYTE *)(a1 + 53) = a5;
  return a1;
}

__n128 sub_10053465C(__n128 *a1, __n128 *a2)
{
  unint64_t v2 = a2->n128_u64[1];
  unsigned __int32 v3 = a2[2].n128_u32[0];
  __n128 result = a2[1];
  a1[1] = result;
  a1[2].n128_u32[0] = v3;
  a1[2].n128_u64[1] = 0LL;
  a1->n128_u64[0] = (unint64_t)&off_1008A03D8;
  a1->n128_u64[1] = v2;
  a1[3].n128_u32[0] = a2[3].n128_u32[0];
  a1[3].n128_u16[2] = a2[3].n128_u16[2];
  return result;
}

uint64_t sub_10053469C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 52);
}

uint64_t sub_1005346A4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_1005346AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 53);
}

_BYTE *sub_1005346B4(uint64_t a1)
{
  char v9 = 0;
  sub_100242CA4(&v9);
  sub_1001E7B60(1, *(void *)(a1 + 8) + 128LL, v2, v3, v4, v5, v6, v7);
  return sub_100242CD8(&v9);
}

void sub_1005346FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100534710()
{
  return 30LL;
}

_BYTE *sub_100534718(uint64_t a1)
{
  char v9 = 0;
  sub_100242CA4(&v9);
  sub_1001E7B60(0, *(void *)(a1 + 8) + 128LL, v2, v3, v4, v5, v6, v7);
  return sub_100242CD8(&v9);
}

void sub_100534760( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100534774(uint64_t result)
{
  *(void *)(result + 8) = 0LL;
  *(_DWORD *)(result + sub_100242FAC(v15 - 48) = 0;
  *(_BYTE *)(result + 52) = 1;
  return result;
}

uint64_t sub_100534788(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = 0LL;
  sub_1000B0400((uint64_t)&v8);
  uint64_t v6 = SWORD2(v8);
  *(void *)(a1 + 16) = (int)v8;
  *(void *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = 3;
  *(void *)(a1 + 40) = 0LL;
  *(void *)a1 = &off_1008A0420;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + sub_100242FAC(v15 - 48) = a3;
  return a1;
}

__n128 sub_1005347F4(__n128 *a1, __n128 *a2)
{
  unint64_t v2 = a2->n128_u64[1];
  unsigned __int32 v3 = a2[2].n128_u32[0];
  __n128 result = a2[1];
  a1[1] = result;
  a1[2].n128_u32[0] = v3;
  a1[2].n128_u64[1] = 0LL;
  a1->n128_u64[0] = (unint64_t)&off_1008A0420;
  a1->n128_u64[1] = v2;
  a1[3].n128_u32[0] = a2[3].n128_u32[0];
  return result;
}

uint64_t sub_10053482C(uint64_t result)
{
  *(void *)(result + 8) = 0LL;
  *(_DWORD *)(result + sub_100242FAC(v15 - 48) = 0;
  return result;
}

uint64_t sub_100534838()
{
  return 30LL;
}

_BYTE *sub_100534840(uint64_t a1)
{
  char v8 = 0;
  sub_100242CA4(&v8);
  sub_1001E7EB0(*(_DWORD *)(a1 + 48) != 0, *(void *)(a1 + 8) + 128LL, *(unsigned int *)(a1 + 48), v2, v3, v4, v5, v6);
  return sub_100242CD8(&v8);
}

void sub_100534890( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

_BYTE *sub_1005348A4(uint64_t a1)
{
  char v8 = 0;
  sub_100242CA4(&v8);
  sub_1001E7EB0(0, *(void *)(a1 + 8) + 128LL, 0LL, v2, v3, v4, v5, v6);
  return sub_100242CD8(&v8);
}

void sub_1005348F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100534914(uint64_t a1)
{
  *(void *)a1 = off_1008A0468;
  *(void *)(a1 + 8) = off_1008A04C0;
  *(void *)(a1 + 16) = &off_1008A04E0;
  sub_100242DC4(a1 + 24);
  *(_BYTE *)(a1 + 88) = 0;
  uint64_t v3 = (char *)sub_100532DC0(a1 + 89);
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 160) = 0LL;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 168) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 208) = 0LL;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 232) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 224) = a1 + 232;
  *(void *)(a1 + 240) = 0LL;
  sub_100242DC4(a1 + 248);
  *(void *)(a1 + 312) = 0LL;
  *(void *)(a1 + 320) = 0LL;
  *(void *)(a1 + 328) = 0LL;
  *(void *)(a1 + 334) = 0LL;
  sub_100532E6C(v3, "0000");
  return a1;
}

void sub_100534A30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v24 = *v21;
  if (*v21)
  {
    *(void *)(v19 + 320) = v24;
    operator delete(v24);
  }

  sub_100242E28(v23);
  sub_10053A1B8(v22, *v18);
  sub_10023BF24(a10, *v17);
  sub_10053A1B8(a11, *v15);
  sub_10023BF24(a12, *v14);
  sub_10023BF24(v16, *v20);
  nullsub_63(a14, v25);
  sub_100242E28(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100534AB4(uint64_t a1)
{
  *(void *)a1 = off_1008A0468;
  *(void *)(a1 + 8) = off_1008A04C0;
  *(void *)(a1 + 16) = &off_1008A04E0;
  uint64_t v2 = *(void **)(a1 + 312);
  if (v2)
  {
    *(void *)(a1 + 320) = v2;
    operator delete(v2);
  }

  sub_100242E28(a1 + 248);
  sub_10053A1B8(a1 + 224, *(void **)(a1 + 232));
  sub_10023BF24(a1 + 200, *(void **)(a1 + 208));
  sub_10053A1B8(a1 + 176, *(void **)(a1 + 184));
  sub_10023BF24(a1 + 152, *(void **)(a1 + 160));
  sub_10023BF24(a1 + 128, *(void **)(a1 + 136));
  nullsub_63(a1 + 89, v3);
  sub_100242E28(a1 + 24);
  return a1;
}

void sub_100534B54(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100534AB4(a1);
  operator delete(v1);
}

double sub_100534B68(uint64_t a1)
{
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008A05A8);
  }
  sub_1003B423C(qword_1008D61A0 + 8, a1 + 8);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_1008A05C8);
  }
  sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1 + 16);
  if (qword_1008D60C0 != -1) {
    dispatch_once(&qword_1008D60C0, &stru_1008A05E8);
  }
  (**(void (***)(void *))off_1008D60B8)(off_1008D60B8);
  double result = 0.0;
  *(_OWORD *)(a1 + 375) = 0u;
  *(_OWORD *)(a1 + 391) = 0u;
  *(_OWORD *)(a1 + 343) = 0u;
  *(_OWORD *)(a1 + 359) = 0u;
  return result;
}

uint64_t sub_100534C48(uint64_t a1)
{
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008A05A8);
  }
  sub_100009168(qword_1008D61A0 + 8, a1 + 8);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_1008A05C8);
  }
  sub_100009168((uint64_t)off_1008D60A8 + 80, a1 + 16);
  if (qword_1008D60C0 != -1) {
    dispatch_once(&qword_1008D60C0, &stru_1008A05E8);
  }
  return (*(uint64_t (**)(void *))(*(void *)off_1008D60B8 + 8LL))(off_1008D60B8);
}

uint64_t sub_100534D14(uint64_t a1)
{
  v23[0] = 0LL;
  v23[1] = 0LL;
  sub_100242F28((uint64_t)v23, a1 + 24);
  if (!*(_BYTE *)(a1 + 88))
  {
    *(_BYTE *)(a1 + 88) = 1;
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_1008A05C8);
    }
    sub_100431644((uint64_t)off_1008D60A8, a1 + 336);
    sub_10023BF24(a1 + 128, *(void **)(a1 + 136));
    *(void *)(a1 + 128) = a1 + 136;
    *(void *)(a1 + 136) = 0LL;
    *(void *)(a1 + 144) = 0LL;
    __int128 __p = 0LL;
    __int128 v21 = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v2 = (void (***)(void, void **))sub_1002E6C74();
    (**v2)(v2, &__p);
    uint64_t v3 = (unsigned __int8 **)__p;
    if (__p != v21)
    {
      do
      {
        uint64_t v19 = *v3;
        unint64_t v18 = ((unint64_t)v19[128] << 40) | ((unint64_t)v19[129] << 32) | ((unint64_t)v19[130] << 24) | ((unint64_t)v19[131] << 16) | ((unint64_t)v19[132] << 8) | v19[133];
        __n128 v26 = 0uLL;
        int v27 = 0;
        sub_10052523C((uint64_t)&v26);
        uint64_t v4 = sub_1002E6C74();
        int v5 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, __n128 *))(*(void *)v4 + 48LL))( v4,  a1 + 336,  v19,  &v26);
        if (v5 || BYTE6(v18) && (BYTE6(v18) != 1 || (v18 & 0xC00000000000LL) == 0x800000000000LL))
        {
          uint64_t v6 = (os_log_s *)qword_1008F75E0;
          if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
          {
            BOOL v16 = (v18 & 0xC00000000000LL) != 0x800000000000LL && BYTE6(v18) == 1LL;
            *(_DWORD *)uu = 67109376;
            *(_DWORD *)&uu[4] = v5;
            if (!BYTE6(v18)) {
              BOOL v16 = 1;
            }
            LOWORD(v25) = 1024;
            *(_DWORD *)((char *)&v25 + 2) = v16;
            _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Not link key, result %d, BTAddressIsValid %d",  uu,  0xEu);
          }
        }

        else
        {
          char v8 = v19;
          *(void *)uu = &v18;
          sub_100029574((uint64_t **)(a1 + 128), &v18, (uint64_t)&unk_1006C2518, (uint64_t **)uu)[5] = (uint64_t)v8;
          *(void *)uu = &v19;
          char v9 = sub_10053A244(a1 + 176, (unint64_t *)&v19, (uint64_t)&unk_1006C2518, (void **)uu);
          sub_100525248((__n128 *)(v9 + 40), &v26);
          uint64_t v10 = (sqlite3 **)sub_1002E6CF8();
          sub_1002D3D2C(v10, (uint64_t)v19);
          *(void *)uu = 0LL;
          uint64_t v25 = 0LL;
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_1008A0608);
          }
          sub_1005C8684( (uint64_t)off_1008D5F28,  ((unint64_t)v19[128] << 40) | ((unint64_t)v19[129] << 32) | ((unint64_t)v19[130] << 24) | ((unint64_t)v19[131] << 16) | ((unint64_t)v19[132] << 8) | v19[133],  1u,  0,  0LL,  0LL,  uu);
          if (!uuid_is_null(uu))
          {
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_1008A0608);
            }
            uint64_t v11 = off_1008D5F28;
            uint64_t v12 = sub_100241F94(uu);
            int v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
            uint64_t v14 = sub_1005C6AC0((uint64_t)v11, v13);

            if (v14) {
              *((_BYTE *)v14 + 161) = 1;
            }
          }
        }

        nullsub_63(&v26, v7);
        ++v3;
      }

      while (v3 != v21);
    }

    *(_DWORD *)(a1 + 108) = 1;
    sub_100535140(a1);
    if (__p)
    {
      __int128 v21 = __p;
      operator delete(__p);
    }
  }

  return sub_100242FAC((uint64_t)v23);
}

void sub_1005350E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
}

uint64_t sub_100535140(uint64_t a1)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1 + 248);
  uint64_t v4 = 0LL;
  int v5 = 0LL;
  uint64_t v6 = 0LL;
  sub_100240540(&v4, a1 + 312);
  sub_100242F54((uint64_t)v7);
  uint64_t v2 = v4;
  if (v4 != v5)
  {
    do
    {
      (*(void (**)(void))(*(void *)*v2 + 32LL))(*v2);
      ++v2;
    }

    while (v2 != v5);
    uint64_t v2 = v4;
  }

  if (v2)
  {
    int v5 = v2;
    operator delete(v2);
  }

  return sub_100242FAC((uint64_t)v7);
}

void sub_1005351D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100535208(uint64_t a1)
{
  return sub_100534D14(a1 - 16);
}

uint64_t sub_100535210(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SecurityManager::stackWillStop enter", buf, 2u);
  }

  *(void *)buf = 0LL;
  uint64_t v13 = 0LL;
  sub_100242F28((uint64_t)buf, a1 + 24);
  uint64_t v3 = *(void **)(a1 + 200);
  *(_BYTE *)(a1 + 88) = 0;
  uint64_t v4 = (void *)(a1 + 208);
  if (v3 != (void *)(a1 + 208))
  {
    do
    {
      int v5 = (void *)v3[5];
      if (v5) {
        operator delete(v5);
      }
      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          uint64_t v3 = v7;
        }

        while (!v8);
      }

      uint64_t v3 = v7;
    }

    while (v7 != v4);
  }

  sub_10023BF24(a1 + 200, *(void **)(a1 + 208));
  *(void *)(a1 + 208) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 200) = v4;
  *(_OWORD *)(a1 + 343) = 0u;
  *(_OWORD *)(a1 + 359) = 0u;
  *(_OWORD *)(a1 + 375) = 0u;
  *(_OWORD *)(a1 + 391) = 0u;
  char v9 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "SecurityManager::stackWillStop exit", v11, 2u);
  }

  return sub_100242FAC((uint64_t)buf);
}

uint64_t sub_10053535C(uint64_t a1)
{
  return sub_100535210(a1 - 16);
}

uint64_t sub_100535364(void *a1, char **a2)
{
  v41[0] = 0LL;
  v41[1] = 0LL;
  sub_100242F28((uint64_t)v41, (uint64_t)(a1 + 3));
  uint64_t v4 = (void *)a1[16];
  int v5 = a1 + 17;
  if (v4 != a1 + 17)
  {
    uint64_t v6 = a2 + 2;
    uint64_t v7 = a2[1];
    do
    {
      uint64_t v8 = v4[5];
      if ((unint64_t)v7 >= *v6)
      {
        uint64_t v9 = (v7 - *a2) >> 3;
        uint64_t v10 = *v6 - (void)*a2;
        uint64_t v11 = v10 >> 2;
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          uint64_t v13 = (char *)sub_100008BA0((uint64_t)(a2 + 2), v12);
        }
        else {
          uint64_t v13 = 0LL;
        }
        uint64_t v14 = &v13[8 * v9];
        *(void *)uint64_t v14 = v8;
        uint64_t v7 = v14 + 8;
        BOOL v16 = *a2;
        uint64_t v15 = a2[1];
        if (v15 != *a2)
        {
          do
          {
            uint64_t v17 = *((void *)v15 - 1);
            v15 -= 8;
            *((void *)v14 - 1) = v17;
            v14 -= 8;
          }

          while (v15 != v16);
          uint64_t v15 = *a2;
        }

        *a2 = v14;
        a2[1] = v7;
        a2[2] = &v13[8 * v12];
        if (v15) {
          operator delete(v15);
        }
      }

      else
      {
        *(void *)uint64_t v7 = v8;
        v7 += 8;
      }

      a2[1] = v7;
      unint64_t v18 = (void *)v4[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          unint64_t v18 = (void *)*v18;
        }

        while (v18);
      }

      else
      {
        do
        {
          uint64_t v19 = (void *)v4[2];
          BOOL v20 = *v19 == (void)v4;
          uint64_t v4 = v19;
        }

        while (!v20);
      }

      uint64_t v4 = v19;
    }

    while (v19 != v5);
  }

  __int128 v21 = (void *)a1[19];
  if (v21 != a1 + 20)
  {
    do
    {
      uint64_t v22 = v21[5];
      uint64_t v23 = (void *)*v5;
      if (*v5)
      {
        unint64_t v24 = v21[4];
        do
        {
          unint64_t v25 = v23[4];
          if (v24 >= v25)
          {
            if (v25 >= v24) {
              goto LABEL_49;
            }
            ++v23;
          }

          uint64_t v23 = (void *)*v23;
        }

        while (v23);
      }

      int v27 = a2[1];
      unint64_t v26 = (unint64_t)a2[2];
      if ((unint64_t)v27 >= v26)
      {
        uint64_t v29 = (v27 - *a2) >> 3;
        uint64_t v30 = v26 - (void)*a2;
        uint64_t v31 = v30 >> 2;
        else {
          unint64_t v32 = v31;
        }
        if (v32) {
          __int128 v33 = (char *)sub_100008BA0((uint64_t)(a2 + 2), v32);
        }
        else {
          __int128 v33 = 0LL;
        }
        int v34 = &v33[8 * v29];
        *(void *)int v34 = v22;
        __int128 v28 = v34 + 8;
        int v36 = *a2;
        __int128 v35 = a2[1];
        if (v35 != *a2)
        {
          do
          {
            uint64_t v37 = *((void *)v35 - 1);
            v35 -= 8;
            *((void *)v34 - 1) = v37;
            v34 -= 8;
          }

          while (v35 != v36);
          __int128 v35 = *a2;
        }

        *a2 = v34;
        a2[1] = v28;
        a2[2] = &v33[8 * v32];
        if (v35) {
          operator delete(v35);
        }
      }

      else
      {
        *(void *)int v27 = v22;
        __int128 v28 = v27 + 8;
      }

      a2[1] = v28;
LABEL_49:
      int v38 = (void *)v21[1];
      if (v38)
      {
        do
        {
          __int128 v39 = v38;
          int v38 = (void *)*v38;
        }

        while (v38);
      }

      else
      {
        do
        {
          __int128 v39 = (void *)v21[2];
          BOOL v20 = *v39 == (void)v21;
          __int128 v21 = v39;
        }

        while (!v20);
      }

      __int128 v21 = v39;
    }

    while (v39 != a1 + 20);
  }

  sub_100242FAC((uint64_t)v41);
  return 0LL;
}

void sub_1005355F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100535618(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2) {
    return 0LL;
  }
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1 + 24);
  unint64_t v4 = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
  for (uint64_t i = *(void **)(a1 + 136); i; uint64_t i = (void *)*i)
  {
    unint64_t v6 = i[4];
    if (v4 >= v6)
    {
      if (v6 >= v4)
      {
LABEL_14:
        uint64_t v9 = 1LL;
        goto LABEL_15;
      }

      ++i;
    }
  }

  for (j = *(void **)(a1 + 160); j; j = (void *)*j)
  {
    unint64_t v8 = j[4];
    if (v4 >= v8)
    {
      if (v8 >= v4) {
        goto LABEL_14;
      }
      ++j;
    }
  }

  uint64_t v9 = 0LL;
LABEL_15:
  sub_100242FAC((uint64_t)v11);
  return v9;
}

BOOL sub_1005356F4(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1 + 24);
  if (*(void *)(a1 + 144)) {
    BOOL v2 = 1LL;
  }
  else {
    BOOL v2 = *(void *)(a1 + 168) != 0LL;
  }
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_100535750(uint64_t a1, unsigned __int8 *a2, __n128 *a3)
{
  v12[1] = 0LL;
  uint64_t v13 = a2;
  v12[0] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 24);
  unint64_t v6 = *(void **)(a1 + 136);
  if (v6)
  {
    unint64_t v7 = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
    do
    {
      unint64_t v8 = v6[4];
      if (v7 >= v8)
      {
        if (v8 >= v7)
        {
          uint64_t v14 = (unint64_t *)&v13;
          uint64_t v10 = sub_10053A244(a1 + 176, (unint64_t *)&v13, (uint64_t)&unk_1006C2518, &v14);
          sub_100525248(a3, (__n128 *)(v10 + 40));
          uint64_t v9 = 0LL;
          goto LABEL_9;
        }

        ++v6;
      }

      unint64_t v6 = (void *)*v6;
    }

    while (v6);
  }

  uint64_t v9 = 150LL;
LABEL_9:
  sub_100242FAC((uint64_t)v12);
  return v9;
}

void sub_100535838(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10053584C(uint64_t a1, unsigned __int8 *a2, __n128 *a3, char a4)
{
  __int128 v21 = a2;
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, a1 + 24);
  uint64_t v8 = sub_1002E6C74();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, __n128 *, void))(*(void *)v8 + 56LL))( v8,  a1 + 336,  a2,  a3,  0LL);
  if (!(_DWORD)v9)
  {
    uint64_t v22 = &v21;
    uint64_t v10 = sub_10053A244(a1 + 176, (unint64_t *)&v21, (uint64_t)&unk_1006C2518, &v22);
    sub_100525248((__n128 *)(v10 + 40), a3);
    uint64_t v11 = (uint64_t)v21;
    unint64_t v12 = ((unint64_t)*(unsigned __int8 *)(v11 + 128) << 40) | ((unint64_t)*(unsigned __int8 *)(v11 + 129) << 32) | ((unint64_t)v21[130] << 24) | ((unint64_t)v21[131] << 16) | v21[133] | ((unint64_t)v21[132] << 8);
    unint64_t v19 = v12;
    for (uint64_t i = *(void **)(a1 + 136); i; uint64_t i = (void *)*i)
    {
      unint64_t v14 = i[4];
      if (v12 >= v14)
      {
        if (v14 >= v12) {
          goto LABEL_8;
        }
        ++i;
      }
    }

    uint64_t v22 = (unsigned __int8 **)&v19;
    sub_100029574((uint64_t **)(a1 + 128), &v19, (uint64_t)&unk_1006C2518, (uint64_t **)&v22)[5] = v11;
LABEL_8:
    sub_100242F54((uint64_t)v20);
    uint64_t v15 = sub_100404EB8();
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_1005359EC;
    v17[3] = &unk_1008800D8;
    _OWORD v17[4] = v21;
    char v18 = a4;
    sub_100405384(v15, v17);
    uint64_t v9 = 0LL;
  }

  sub_100242FAC((uint64_t)v20);
  return v9;
}

void sub_1005359D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_1005359EC(uint64_t a1)
{
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_1008A0628);
  }
  return sub_100535A40((uint64_t)off_1008D67B0, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_100535A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1 + 248);
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  sub_100240540(&v8, a1 + 312);
  sub_100242F54((uint64_t)v11);
  unint64_t v6 = v8;
  if (v8 != v9)
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v6 + 16LL))(*v6, a2, a3);
      ++v6;
    }

    while (v6 != v9);
    unint64_t v6 = v8;
  }

  if (v6)
  {
    uint64_t v9 = v6;
    operator delete(v6);
  }

  return sub_100242FAC((uint64_t)v11);
}

void sub_100535AF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100535B20(uint64_t a1, unsigned __int8 *a2, int a3)
{
  v16[1] = 0LL;
  uint64_t v17 = a2;
  v16[0] = 0LL;
  sub_100242F28((uint64_t)v16, a1 + 24);
  uint64_t v6 = sub_1002E6C74();
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v6 + 64LL))(v6, a1 + 336, a2);
  if (v7)
  {
    uint64_t v8 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      if (a2)
      {
        sub_1003CF00C((uint64_t)a2, __p);
        if (v15 >= 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136446466;
        unint64_t v19 = (const char *)v9;
        __int16 v20 = 1024;
        int v21 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Failed to delete linkey for device %{public}s with error %d, but we'll keep unpairing",  buf,  0x12u);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v19 = "NULL";
        __int16 v20 = 1024;
        int v21 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Failed to delete linkey for device %{public}s with error %d, but we'll keep unpairing",  buf,  0x12u);
      }
    }
  }

  uint64_t v10 = (void *)(((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133]);
  __p[0] = v10;
  for (uint64_t i = *(void **)(a1 + 136); i; uint64_t i = (void *)*i)
  {
    unint64_t v12 = i[4];
    if ((unint64_t)v10 >= v12)
    {
      if (v12 >= (unint64_t)v10)
      {
        sub_10020166C(a1 + 128, (unint64_t *)__p);
        break;
      }

      ++i;
    }
  }

  sub_10053A458(a1 + 176, (unint64_t *)&v17);
  sub_100535DA0(a1, v17);
  sub_100242F54((uint64_t)v16);
  if (!a3)
  {
    if (qword_1008D60C0 != -1) {
      dispatch_once(&qword_1008D60C0, &stru_1008A05E8);
    }
    sub_1003EE5AC((uint64_t)off_1008D60B8, v17, 1);
  }

  sub_100535E24(a1, (uint64_t)v17);
  sub_100242FAC((uint64_t)v16);
  return 0LL;
}

void sub_100535D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100535DA0(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
  unint64_t v5 = v2;
  uint64_t v3 = *(void **)(result + 160);
  if (v3)
  {
    result += 152LL;
    do
    {
      unint64_t v4 = v3[4];
      if (v2 >= v4)
      {
        if (v4 >= v2) {
          return sub_10020166C(result, &v5);
        }
        ++v3;
      }

      uint64_t v3 = (void *)*v3;
    }

    while (v3);
  }

  return result;
}

uint64_t sub_100535E24(uint64_t a1, uint64_t a2)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, a1 + 248);
  uint64_t v6 = 0LL;
  int v7 = 0LL;
  uint64_t v8 = 0LL;
  sub_100240540(&v6, a1 + 312);
  sub_100242F54((uint64_t)v9);
  unint64_t v4 = v6;
  if (v6 != v7)
  {
    do
    {
      (*(void (**)(void, uint64_t))(*(void *)*v4 + 24LL))(*v4, a2);
      ++v4;
    }

    while (v4 != v7);
    unint64_t v4 = v6;
  }

  if (v4)
  {
    int v7 = v4;
    operator delete(v4);
  }

  return sub_100242FAC((uint64_t)v9);
}

void sub_100535EC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100535EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 24);
  uint64_t v5 = sub_1002E6C74();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 8LL))(v5, a2, a3);
  sub_100242FAC((uint64_t)v8);
  return v6;
}

void sub_100535F54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100535F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 24);
  uint64_t v5 = sub_1002E6C74();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 16LL))(v5, a2, a3);
  sub_100242FAC((uint64_t)v8);
  return v6;
}

void sub_100535FC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100535FDC(uint64_t a1, uint64_t a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1 + 24);
  uint64_t v3 = sub_1002E6C74();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 24LL))(v3, a2);
  sub_100242FAC((uint64_t)v6);
  return v4;
}

void sub_100536034( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100536048(uint64_t a1, int a2)
{
  uint64_t v4 = sub_1002E6BF0();
  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 108) = a2;
  return result;
}

uint64_t sub_10053608C(void *a1, uint64_t a2)
{
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, (uint64_t)(a1 + 31));
  uint64_t v4 = (void *)a1[39];
  uint64_t v5 = (void *)a1[40];
  uint64_t v6 = v4;
  if (v4 != v5)
  {
    while (*v6 != a2)
    {
      if (++v6 == v5)
      {
        uint64_t v6 = (void *)a1[40];
        break;
      }
    }
  }

  if (v6 == v5)
  {
    unint64_t v7 = a1[41];
    if ((unint64_t)v5 >= v7)
    {
      uint64_t v9 = v5 - v4;
      uint64_t v10 = v7 - (void)v4;
      uint64_t v11 = v10 >> 2;
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        uint64_t v13 = (char *)sub_100008BA0((uint64_t)(a1 + 41), v12);
      }
      else {
        uint64_t v13 = 0LL;
      }
      unint64_t v14 = &v13[8 * v9];
      char v15 = &v13[8 * v12];
      *(void *)unint64_t v14 = a2;
      uint64_t v8 = v14 + 8;
      uint64_t v17 = (char *)a1[39];
      BOOL v16 = (char *)a1[40];
      if (v16 != v17)
      {
        do
        {
          uint64_t v18 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v14 - 1) = v18;
          v14 -= 8;
        }

        while (v16 != v17);
        BOOL v16 = (char *)a1[39];
      }

      a1[39] = v14;
      a1[40] = v8;
      a1[41] = v15;
      if (v16) {
        operator delete(v16);
      }
    }

    else
    {
      *uint64_t v5 = a2;
      uint64_t v8 = v5 + 1;
    }

    a1[40] = v8;
  }

  return sub_100242FAC((uint64_t)v20);
}

void sub_1005361B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005361C4(uint64_t a1, uint64_t a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 248);
  uint64_t v5 = *(char **)(a1 + 312);
  uint64_t v4 = *(char **)(a1 + 320);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 320);
        break;
      }
    }
  }

  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 320) = &v5[v6];
  }

  return sub_100242FAC((uint64_t)v8);
}

uint64_t sub_10053625C(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, a1 + 24);
  uint64_t v10 = (__int128 *)(a1 + 343);
  uint64_t v11 = &xmmword_1008F1258;
  if (a2) {
    unint64_t v12 = a2;
  }
  else {
    unint64_t v12 = &xmmword_1008F1258;
  }
  __int128 *v10 = *v12;
  uint64_t v13 = (__int128 *)(a1 + 359);
  if (a3) {
    unint64_t v14 = a3;
  }
  else {
    unint64_t v14 = &xmmword_1008F1258;
  }
  __int128 *v13 = *v14;
  char v15 = (__int128 *)(a1 + 375);
  if (a4) {
    BOOL v16 = a4;
  }
  else {
    BOOL v16 = &xmmword_1008F1258;
  }
  *char v15 = *v16;
  uint64_t v17 = (__int128 *)(a1 + 391);
  if (a5) {
    uint64_t v11 = a5;
  }
  *uint64_t v17 = *v11;
  uint64_t v18 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141560835;
    uint64_t v22 = 1752392040LL;
    __int16 v23 = 1041;
    int v24 = 16;
    __int16 v25 = 2097;
    unint64_t v26 = v10;
    __int16 v27 = 2160;
    uint64_t v28 = 1752392040LL;
    __int16 v29 = 1041;
    int v30 = 16;
    __int16 v31 = 2097;
    unint64_t v32 = v13;
    __int16 v33 = 2160;
    uint64_t v34 = 1752392040LL;
    __int16 v35 = 1041;
    int v36 = 16;
    __int16 v37 = 2097;
    int v38 = v15;
    __int16 v39 = 2160;
    uint64_t v40 = 1752392040LL;
    __int16 v41 = 1041;
    int v42 = 16;
    __int16 v43 = 2097;
    int v44 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Received local OOB Data from the controller C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:%{p rivate, mask.hash}.16P R256:%{private, mask.hash}.16P",  buf,  0x6Au);
  }

  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_1008A0648);
  }
  sub_10052B828((uint64_t)off_1008D67A0, v10, v13, v15, v17);
  return sub_100242FAC((uint64_t)v20);
}

void sub_100536440( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10053645C(uint64_t a1, unsigned __int8 *a2)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, a1 + 24);
  unint64_t v4 = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
  unint64_t v8 = v4;
  for (uint64_t i = *(void **)(a1 + 160); i; uint64_t i = (void *)*i)
  {
    unint64_t v6 = i[4];
    if (v4 >= v6)
    {
      if (v6 >= v4) {
        return sub_100242FAC((uint64_t)v9);
      }
      ++i;
    }
  }

  uint64_t v10 = &v8;
  sub_100029574((uint64_t **)(a1 + 152), &v8, (uint64_t)&unk_1006C2518, (uint64_t **)&v10)[5] = (uint64_t)a2;
  return sub_100242FAC((uint64_t)v9);
}

void sub_100536520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

__n128 sub_100536534(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = 0LL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + sub_100242FAC(v15 - 48) = 0u;
  *(_OWORD *)a1 = 0u;
  if (!a4 || !a5 || *(_OWORD *)a4 == xmmword_1008F1258) {
    goto LABEL_15;
  }
  if (!a2 || *(_OWORD *)a5 == xmmword_1008F1258)
  {
    if (*(_OWORD *)a5 != xmmword_1008F1258)
    {
LABEL_14:
      char v6 = 2;
      goto LABEL_25;
    }

uint64_t sub_1005366B8(uint64_t a1, __int128 *a2, __int128 *a3)
{
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_1008A0628);
  }
  return sub_10053625C((uint64_t)off_1008D67B0, a2, a3, 0LL, 0LL);
}

uint64_t sub_100536718(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_1008A0628);
  }
  return sub_10053625C((uint64_t)off_1008D67B0, a2, a3, a4, a5);
}

uint64_t sub_100536788(uint64_t a1, unint64_t a2, uint64_t a3, __n128 *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v40 = a2;
  int v38 = *(_DWORD *)(a2 + 128);
  __int16 v39 = *(_WORD *)(a2 + 132);
  uint64_t v11 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003FE1B4((unsigned __int8 *)&v38, __p);
    unint64_t v12 = v37 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136449283;
    *(void *)&uint8_t buf[4] = v12;
    __int16 v42 = 2160;
    uint64_t v43 = 1752392040LL;
    __int16 v44 = 1041;
    int v45 = 16;
    __int16 v46 = 2097;
    uint64_t v47 = a3;
    __int16 v48 = 2160;
    uint64_t v49 = 1752392040LL;
    __int16 v50 = 1041;
    int v51 = 16;
    __int16 v52 = 2097;
    char v53 = a4;
    __int16 v54 = 2160;
    uint64_t v55 = 1752392040LL;
    __int16 v56 = 1041;
    int v57 = 16;
    __int16 v58 = 2097;
    uint64_t v59 = a5;
    __int16 v60 = 2160;
    uint64_t v61 = 1752392040LL;
    __int16 v62 = 1041;
    int v63 = 16;
    __int16 v64 = 2097;
    uint64_t v65 = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Setting OOB Data for device %{public}s C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:%{privat e, mask.hash}.16P R256:%{private, mask.hash}.16P",  buf,  0x74u);
    if (v37 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v13 = (uint64_t **)(a1 + 200);
  *(void *)buf = &v40;
  if (!sub_100029574(v13, &v40, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5])
  {
    BOOL v23 = (*(_DWORD *)(sub_1002E6E9C() + 708) - 1) < 0xA;
    int v24 = (__n128 *)operator new(0x41uLL);
    __int16 v25 = v24;
    if (v23)
    {
      sub_100536534((uint64_t)v24, a3, a4, 0LL, 0LL);
      uint64_t v26 = qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003FE1B4((unsigned __int8 *)&v38, __p);
        if (v37 >= 0) {
          __int16 v27 = __p;
        }
        else {
          __int16 v27 = (void **)__p[0];
        }
        int v28 = v25[4].n128_u8[0];
        *(_DWORD *)buf = 136448003;
        *(void *)&uint8_t buf[4] = v27;
        __int16 v42 = 2160;
        uint64_t v43 = 1752392040LL;
        __int16 v44 = 1041;
        int v45 = 16;
        __int16 v46 = 2097;
        uint64_t v47 = (uint64_t)v25;
        __int16 v48 = 2160;
        uint64_t v49 = 1752392040LL;
        __int16 v50 = 1041;
        int v51 = 16;
        __int16 v52 = 2097;
        char v53 = v25 + 1;
        __int16 v54 = 1024;
        LODWORD(v55) = v28;
        __int16 v29 = "Setting OOB Data for device %{public}s C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P type:%d";
        int v30 = (os_log_s *)v26;
        uint32_t v31 = 70;
        goto LABEL_22;
      }
    }

    else
    {
      sub_100536534((uint64_t)v24, a3, a4, a5, a6);
      uint64_t v32 = qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003FE1B4((unsigned __int8 *)&v38, __p);
        if (v37 >= 0) {
          __int16 v33 = __p;
        }
        else {
          __int16 v33 = (void **)__p[0];
        }
        int v34 = v25[4].n128_u8[0];
        *(_DWORD *)buf = 136449539;
        *(void *)&uint8_t buf[4] = v33;
        __int16 v42 = 2160;
        uint64_t v43 = 1752392040LL;
        __int16 v44 = 1041;
        int v45 = 16;
        __int16 v46 = 2097;
        uint64_t v47 = (uint64_t)v25;
        __int16 v48 = 2160;
        uint64_t v49 = 1752392040LL;
        __int16 v50 = 1041;
        int v51 = 16;
        __int16 v52 = 2097;
        char v53 = v25 + 1;
        __int16 v54 = 2160;
        uint64_t v55 = 1752392040LL;
        __int16 v56 = 1041;
        int v57 = 16;
        __int16 v58 = 2097;
        uint64_t v59 = (uint64_t)&v25[2];
        __int16 v60 = 2160;
        uint64_t v61 = 1752392040LL;
        __int16 v62 = 1041;
        int v63 = 16;
        __int16 v64 = 2097;
        uint64_t v65 = (uint64_t)&v25[3];
        __int16 v66 = 1024;
        int v67 = v34;
        __int16 v29 = "Setting OOB Data for device %{public}s C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:"
              "%{private, mask.hash}.16P R256:%{private, mask.hash}.16P type:%d";
        int v30 = (os_log_s *)v32;
        uint32_t v31 = 122;
LABEL_22:
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, buf, v31);
        if (v37 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    *(void *)buf = &v40;
    __int16 v35 = sub_100029574(v13, &v40, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
    uint64_t result = 0LL;
    v35[5] = (uint64_t)v25;
    return result;
  }

  unint64_t v14 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
    sub_10068FD5C(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  return 177LL;
}

uint64_t sub_100536BB4(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  int v10 = *(_DWORD *)(a2 + 128);
  __int16 v11 = *(_WORD *)(a2 + 132);
  uint64_t v3 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003FE1B4((unsigned __int8 *)&v10, __p);
    unint64_t v4 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    unint64_t v14 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Clearing OOB Data for device %{public}s",  buf,  0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v5 = (uint64_t **)(a1 + 200);
  __p[0] = &v12;
  char v6 = (void *)sub_100029574(v5, &v12, (uint64_t)&unk_1006C2518, (uint64_t **)__p)[5];
  if (v6) {
    operator delete(v6);
  }
  sub_10020166C((uint64_t)v5, &v12);
  return 0LL;
}

uint64_t sub_100536CE4(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Initiating read local OOB data from local controller",  buf,  2u);
  }

  if (*(_BYTE *)(a1 + 88))
  {
    int v3 = *(_DWORD *)(sub_1002E6E9C() + 708);
    char v13 = 0;
    sub_100242CA4(&v13);
    if ((v3 - 11) > 0x7C4)
    {
      uint64_t v11 = sub_1001E63C0((uint64_t)sub_1005366B8, v4, v5, v6, v7, v8, v9, v10);
      if ((_DWORD)v11)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
          sub_10068FDEC();
        }
        goto LABEL_12;
      }
    }

    else
    {
      uint64_t v11 = sub_1001E6448((uint64_t)sub_100536718, v4, v5, v6, v7, v8, v9, v10);
      if ((_DWORD)v11)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
          sub_10068FD8C();
        }
LABEL_12:
        uint64_t v11 = 1LL;
      }
    }

    sub_100242CD8(&v13);
    return v11;
  }

  return 111LL;
}

void sub_100536E04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100536E18(uint64_t a1, unint64_t a2)
{
  unint64_t v17 = a2;
  int v15 = *(_DWORD *)(a2 + 128);
  __int16 v16 = *(_WORD *)(a2 + 132);
  int v3 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003FE1B4((unsigned __int8 *)&v15, __p);
    uint64_t v4 = v23 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "OOB Data requested for device %{public}s",  buf,  0xCu);
    if (SHIBYTE(v23) < 0) {
      operator delete(*(void **)__p);
    }
  }

  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 248);
  *(void *)__int128 __p = &v17;
  uint64_t v5 = sub_100029574((uint64_t **)(a1 + 200), &v17, (uint64_t)&unk_1006C2518, (uint64_t **)__p)[5];
  if (v5 && *(_BYTE *)(v5 + 64))
  {
    uint64_t v6 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003FE1B4((unsigned __int8 *)&v15, buf);
      if (v19 >= 0) {
        uint64_t v9 = buf;
      }
      else {
        uint64_t v9 = *(_BYTE **)buf;
      }
      *(_DWORD *)__int128 __p = 136449283;
      *(void *)&__p[4] = v9;
      __int16 v21 = 2160;
      uint64_t v22 = 1752392040LL;
      __int16 v23 = 1041;
      int v24 = 16;
      __int16 v25 = 2097;
      uint64_t v26 = v5;
      __int16 v27 = 2160;
      uint64_t v28 = 1752392040LL;
      __int16 v29 = 1041;
      int v30 = 16;
      __int16 v31 = 2097;
      uint64_t v32 = v5 + 16;
      __int16 v33 = 2160;
      uint64_t v34 = 1752392040LL;
      __int16 v35 = 1041;
      int v36 = 16;
      __int16 v37 = 2097;
      uint64_t v38 = v5 + 32;
      __int16 v39 = 2160;
      uint64_t v40 = 1752392040LL;
      __int16 v41 = 1041;
      int v42 = 16;
      __int16 v43 = 2097;
      uint64_t v44 = v5 + 48;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "OOB data found for device %{public}s C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:%{privat e, mask.hash}.16P R256:%{private, mask.hash}.16P",  __p,  0x74u);
      if (v19 < 0) {
        operator delete(*(void **)buf);
      }
    }

    sub_1001E8508(1, v17 + 128, v5, v5 + 16, v5 + 32, v5 + 48, v7, v8);
    sub_100242FAC((uint64_t)v14);
  }

  else
  {
    sub_100242FAC((uint64_t)v14);
    uint64_t v10 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003FE1B4((unsigned __int8 *)&v15, __p);
      char v13 = v23 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "No OOB data found for device %{public}s",  buf,  0xCu);
      if (SHIBYTE(v23) < 0) {
        operator delete(*(void **)__p);
      }
    }

    sub_1001E8508(0, v17 + 128, 0LL, 0LL, 0LL, 0LL, v11, v12);
  }

void sub_100537124( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100537148(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "oobDataForDeviceAvailable", buf, 2u);
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A0668);
  }
  *(_DWORD *)buf = *(_DWORD *)a2;
  *(_WORD *)&uint8_t buf[4] = *(_WORD *)(a2 + 4);
  uint64_t v5 = sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141558531;
    *(void *)&uint8_t buf[4] = 1752392040LL;
    *(_WORD *)&_BYTE buf[12] = 1041;
    *(_DWORD *)&buf[14] = 6;
    __int16 v19 = 2097;
    uint64_t v20 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "oobDataForDeviceAvailable device %{private, mask.hash}.6P is valid",  buf,  0x1Cu);
  }

  *(void *)buf = 0LL;
  *(void *)&uint8_t buf[8] = 0LL;
  sub_100242F28((uint64_t)buf, a1 + 248);
  uint64_t v9 = *(void **)(a1 + 208);
  uint64_t v8 = (void *)(a1 + 208);
  uint64_t v7 = v9;
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v10 = v8;
  do
  {
    unint64_t v11 = v7[4];
    BOOL v12 = v11 >= (unint64_t)v5;
    else {
      char v13 = v7 + 1;
    }
    if (v12) {
      uint64_t v10 = v7;
    }
    uint64_t v7 = (void *)*v13;
  }

  while (*v13);
  else {
LABEL_19:
  }
    uint64_t v14 = 0LL;
  int v15 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    v17[0] = 67109120;
    v17[1] = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "oobDataForDeviceAvailable = %d",  (uint8_t *)v17,  8u);
  }

  sub_100242FAC((uint64_t)buf);
  return v14;
}

uint64_t sub_10053736C(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: ----------------- Security Manager ------------------",  buf,  2u);
    unint64_t v2 = (os_log_s *)qword_1008F75E0;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_100532EFC((unsigned __int8 *)(a1 + 89), buf);
    if ((v25 & 0x80000000LL) == 0) {
      int v3 = buf;
    }
    else {
      int v3 = *(_BYTE **)buf;
    }
    *(_DWORD *)uint64_t v26 = 136315138;
    __int16 v27 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Default pincode: %s", v26, 0xCu);
    if (SBYTE3(v25) < 0) {
      operator delete(*(void **)buf);
    }
    unint64_t v2 = (os_log_s *)qword_1008F75E0;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Paired devices:", buf, 2u);
  }

  uint64_t v4 = *(void **)(a1 + 128);
  if (v4 != (void *)(a1 + 136))
  {
    do
    {
      uint64_t v5 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(v4[5], buf);
        uint64_t v6 = (v25 & 0x80000000LL) == 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)uint64_t v26 = 136446210;
        __int16 v27 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:    Device %{public}s", v26, 0xCu);
        if (SBYTE3(v25) < 0) {
          operator delete(*(void **)buf);
        }
      }

      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }

        while (!v9);
      }

      uint64_t v4 = v8;
    }

    while (v8 != (void *)(a1 + 136));
  }

  uint64_t v10 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump: Generated local OOB data:", buf, 2u);
    uint64_t v10 = (os_log_s *)qword_1008F75E0;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141558531;
    *(void *)&uint8_t buf[4] = 1752392040LL;
    __int16 v22 = 1041;
    int v23 = 16;
    __int16 v24 = 2097;
    uint64_t v25 = a1 + 343;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "statedump: \tC192:%{private, mask.hash}.16P",  buf,  0x1Cu);
    uint64_t v10 = (os_log_s *)qword_1008F75E0;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141558531;
    *(void *)&uint8_t buf[4] = 1752392040LL;
    __int16 v22 = 1041;
    int v23 = 16;
    __int16 v24 = 2097;
    uint64_t v25 = a1 + 359;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "statedump: \tR192:%{private, mask.hash}.16P",  buf,  0x1Cu);
    uint64_t v10 = (os_log_s *)qword_1008F75E0;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141558531;
    *(void *)&uint8_t buf[4] = 1752392040LL;
    __int16 v22 = 1041;
    int v23 = 16;
    __int16 v24 = 2097;
    uint64_t v25 = a1 + 375;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "statedump:    C256:%{private, mask.hash}.16P",  buf,  0x1Cu);
    uint64_t v10 = (os_log_s *)qword_1008F75E0;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141558531;
    *(void *)&uint8_t buf[4] = 1752392040LL;
    __int16 v22 = 1041;
    int v23 = 16;
    __int16 v24 = 2097;
    uint64_t v25 = a1 + 391;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "statedump:    R256:%{private, mask.hash}.16P",  buf,  0x1Cu);
    uint64_t v10 = (os_log_s *)qword_1008F75E0;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump: OOB data for devices:", buf, 2u);
    uint64_t v10 = (os_log_s *)qword_1008F75E0;
  }

  unint64_t v11 = *(void **)(a1 + 200);
  if (v11 != (void *)(a1 + 208))
  {
    do
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(v11[4], buf);
        BOOL v12 = buf;
        if ((v25 & 0x80000000LL) != 0) {
          BOOL v12 = *(_BYTE **)buf;
        }
        *(_DWORD *)uint64_t v26 = 136446210;
        __int16 v27 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s:", v26, 0xCu);
        if (SBYTE3(v25) < 0) {
          operator delete(*(void **)buf);
        }
        uint64_t v10 = (os_log_s *)qword_1008F75E0;
      }

      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = v11[5];
        *(_DWORD *)buf = 141558531;
        *(void *)&uint8_t buf[4] = 1752392040LL;
        __int16 v22 = 1041;
        int v23 = 16;
        __int16 v24 = 2097;
        uint64_t v25 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "statedump:      C192:%{private, mask.hash}.16P",  buf,  0x1Cu);
        uint64_t v10 = (os_log_s *)qword_1008F75E0;
      }

      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = v11[5] + 16LL;
        *(_DWORD *)buf = 141558531;
        *(void *)&uint8_t buf[4] = 1752392040LL;
        __int16 v22 = 1041;
        int v23 = 16;
        __int16 v24 = 2097;
        uint64_t v25 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "statedump:      R192:%{private, mask.hash}.16P",  buf,  0x1Cu);
        uint64_t v10 = (os_log_s *)qword_1008F75E0;
      }

      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = v11[5] + 32LL;
        *(_DWORD *)buf = 141558531;
        *(void *)&uint8_t buf[4] = 1752392040LL;
        __int16 v22 = 1041;
        int v23 = 16;
        __int16 v24 = 2097;
        uint64_t v25 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "statedump:      C256:%{private, mask.hash}.16P",  buf,  0x1Cu);
        uint64_t v10 = (os_log_s *)qword_1008F75E0;
      }

      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = v11[5] + 48LL;
        *(_DWORD *)buf = 141558531;
        *(void *)&uint8_t buf[4] = 1752392040LL;
        __int16 v22 = 1041;
        int v23 = 16;
        __int16 v24 = 2097;
        uint64_t v25 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "statedump:      R256:%{private, mask.hash}.16P",  buf,  0x1Cu);
        uint64_t v10 = (os_log_s *)qword_1008F75E0;
      }

      unint64_t v17 = (void *)v11[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          unint64_t v17 = (void *)*v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          uint64_t v18 = (void *)v11[2];
          BOOL v9 = *v18 == (void)v11;
          unint64_t v11 = v18;
        }

        while (!v9);
      }

      unint64_t v11 = v18;
    }

    while (v18 != (void *)(a1 + 208));
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump: Security keys:", buf, 2u);
  }

  uint64_t v19 = sub_1002E6C74();
  return (*(uint64_t (**)(uint64_t))(*(void *)v19 + 184LL))(v19);
}

uint64_t sub_100537A54(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  v22[0] = 0LL;
  v22[1] = 0LL;
  sub_100242F28((uint64_t)v22, a1 + 24);
  if (!*(void *)(a1 + 112))
  {
    *(void *)(a1 + 120) = a2;
    SInt32 error = 0;
    else {
      uint64_t v10 = *(const char **)a4;
    }
    CFStringRef v11 = CFStringCreateWithCString(kCFAllocatorDefault, v10, 0x600u);
    else {
      BOOL v12 = *(const char **)a5;
    }
    CFStringRef v13 = CFStringCreateWithCString(kCFAllocatorDefault, v12, 0x600u);
    CFStringRef v14 = CFStringCreateWithCString(kCFAllocatorDefault, "Allow", 0x600u);
    CFStringRef v15 = CFStringCreateWithCString(kCFAllocatorDefault, "Don't Allow", 0x600u);
    keys[0] = (void *)kCFUserNotificationAlertHeaderKey;
    keys[1] = (void *)kCFUserNotificationAlertMessageKey;
    keys[2] = (void *)kCFUserNotificationAlternateButtonTitleKey;
    keys[3] = (void *)kCFUserNotificationDefaultButtonTitleKey;
    values[0] = (void *)v11;
    values[1] = (void *)v13;
    values[2] = (void *)v14;
    values[3] = (void *)v15;
    uint64_t v16 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  4LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    unint64_t v17 = CFUserNotificationCreate(kCFAllocatorDefault, (double)a3, 3uLL, &error, v16);
    *(void *)(a1 + 112) = v17;
    RunLoopSource = CFUserNotificationCreateRunLoopSource( kCFAllocatorDefault,  v17,  (CFUserNotificationCallBack)sub_100537C8C,  0LL);
    if (RunLoopSource)
    {
      Main = CFRunLoopGetMain();
      CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopCommonModes);
      CFRelease(RunLoopSource);
    }

    else
    {
      CFUserNotificationCancel(v17);
      CFRelease(v17);
    }

    CFRelease(v16);
    CFRelease(v11);
    CFRelease(v13);
  }

  return sub_100242FAC((uint64_t)v22);
}

void sub_100537C58(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100537C8C(uint64_t a1, uint64_t a2)
{
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_1008A0628);
  }
  return sub_100537CDC((uint64_t)off_1008D67B0, a2, a2);
}

uint64_t sub_100537CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, a1 + 24);
  uint64_t v5 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = "unknown";
    uint64_t v7 = *(void *)(a1 + 120);
    *(_DWORD *)buf = 136447235;
    if (!a3) {
      uint64_t v6 = "disallow";
    }
    if (a3 == 1) {
      uint64_t v6 = "allow";
    }
    __int16 v22 = v6;
    __int16 v23 = 2048;
    uint64_t v24 = a3;
    __int16 v25 = 2160;
    uint64_t v26 = 1752392040LL;
    __int16 v27 = 1041;
    int v28 = 6;
    __int16 v29 = 2097;
    uint64_t v30 = v7 + 128;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "User responded to security alert notification with %{public}s (%ld) button for device %{private,bluetooth:BD_ADDR,mask.hash}.6P",  buf,  0x30u);
  }

  if (!a3)
  {
    int v8 = 2;
    goto LABEL_11;
  }

  if (a3 == 1)
  {
    int v8 = 1;
LABEL_11:
    sub_1003D5CE0(*(void *)(a1 + 120), v8);
    goto LABEL_14;
  }

  BOOL v9 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
    sub_10068FE4C(v9, v10, v11, v12, v13, v14, v15, v16);
  }
LABEL_14:
  uint64_t v18 = *(const void **)(a1 + 112);
  unint64_t v17 = (void *)(a1 + 112);
  CFRelease(v18);
  *unint64_t v17 = 0LL;
  v17[1] = 0LL;
  return sub_100242FAC((uint64_t)v20);
}

void sub_100537E58(_Unwind_Exception *exception_object)
{
}

void sub_100537E74(int *a1)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A0668);
  }
  int v3 = *a1;
  __int16 v4 = *((_WORD *)a1 + 2);
  unint64_t v2 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v3, 1);
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_1008A0628);
  }
  sub_100536E18((uint64_t)off_1008D67B0, (unint64_t)v2);
}

uint64_t (**sub_100537F20())()
{
  return &off_1008A0500;
}

uint64_t (**sub_100537F2C())()
{
  return &off_1008A0578;
}

void sub_100537F40(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 141558531;
    uint64_t v4 = 1752392040LL;
    __int16 v5 = 1041;
    int v6 = 6;
    __int16 v7 = 2097;
    uint64_t v8 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Secure-Simple-Pairing has started on device %{private,bluetooth:BD_ADDR,mask.hash}.6P",  (uint8_t *)&v3,  0x1Cu);
  }

void sub_100538004(uint64_t a1, uint64_t a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A0668);
  }
  LODWORD(__p[0]) = *(_DWORD *)a1;
  WORD2(__p[0]) = *(_WORD *)(a1 + 4);
  uint64_t v4 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  __int16 v5 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    if (v4)
    {
      sub_1003CF00C((uint64_t)v4, __p);
      if (v10 >= 0) {
        int v6 = __p;
      }
      else {
        int v6 = (void **)__p[0];
      }
      *(_DWORD *)buf = 67109378;
      int v12 = a2;
      __int16 v13 = 2082;
      uint64_t v14 = (const char *)v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Pairing has completed with result %{bluetooth:OI_STATUS}u on device %{public}s",  buf,  0x12u);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      *(_DWORD *)buf = 67109378;
      int v12 = a2;
      __int16 v13 = 2082;
      uint64_t v14 = "NULL";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Pairing has completed with result %{bluetooth:OI_STATUS}u on device %{public}s",  buf,  0x12u);
    }
  }

  if ((_DWORD)a2)
  {
    if (qword_1008D67A8 != -1) {
      dispatch_once(&qword_1008D67A8, &stru_1008A0648);
    }
    __int16 v7 = off_1008D67A0;
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_1008A05C8);
    }
    int v8 = sub_1004317E0((uint64_t)off_1008D60A8, a2, 10000);
    sub_10052E40C((uint64_t)v7, (uint64_t)v4, v8);
  }

void sub_100538210(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 141558531;
    uint64_t v5 = 1752392040LL;
    __int16 v6 = 1041;
    int v7 = 6;
    __int16 v8 = 2097;
    uint64_t v9 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Received IO Capability request for device %{private,bluetooth:BD_ADDR,mask.hash}.6P",  (uint8_t *)&v4,  0x1Cu);
  }

  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_1008A0628);
  }
  int v3 = *((unsigned __int8 *)off_1008D67B0 + 108);
  sub_100537148((uint64_t)off_1008D67B0, a1);
  sub_1001E8B10(0, a1, v3);
}

BOOL sub_100538328(int *a1, uint64_t a2)
{
  int v4 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141558531;
    uint64_t v15 = 1752392040LL;
    __int16 v16 = 1041;
    int v17 = 6;
    __int16 v18 = 2097;
    uint64_t v19 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Link key requested for device %{private,bluetooth:BD_ADDR,mask.hash}.6P",  buf,  0x1Cu);
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A0668);
  }
  *(_DWORD *)buf = *a1;
  LOWORD(v15) = *((_WORD *)a1 + 2);
  uint64_t v5 = (unsigned __int8 *)sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
  __n128 v12 = 0uLL;
  int v13 = 0;
  sub_10052523C((uint64_t)&v12);
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_1008A0628);
  }
  if (!sub_100535750((uint64_t)off_1008D67B0, v5, &v12))
  {
    int v7 = *a1;
    *(_WORD *)(a2 + 4) = *((_WORD *)a1 + 2);
    *(_DWORD *)a2 = v7;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)nullsub_63(&v12, v6);
    *(_DWORD *)(a2 + 24) = sub_100525284((uint64_t)&v12);
    __int16 v8 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 141558531;
      uint64_t v15 = 1752392040LL;
      __int16 v16 = 1041;
      int v17 = 6;
      __int16 v18 = 2097;
      uint64_t v19 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Found link key for device %{private,bluetooth:BD_ADDR,mask.hash}.6P",  buf,  0x1Cu);
    }
  }

  BOOL v9 = sub_1005252A0(&v12);
  nullsub_63(&v12, v10);
  return !v9;
}

void sub_100538548( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_100538564(uint64_t a1, __n128 *a2, unsigned __int32 a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A0668);
  }
  *(_DWORD *)__n128 v12 = *(_DWORD *)a1;
  *(_WORD *)&v12[4] = *(_WORD *)(a1 + 4);
  uint64_t v6 = (unsigned __int8 *)sub_1003FFEB0(off_1008D5F48, (uint64_t)v12, 1);
  __n128 v15 = 0uLL;
  int v16 = 0;
  sub_100525274(&v15, a2, a3);
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_1008A0628);
  }
  int v7 = sub_10053584C((uint64_t)off_1008D67B0, v6, &v15, 0);
  __int16 v8 = (os_log_s *)qword_1008F75E0;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068FE7C();
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__n128 v12 = 141558531;
      *(void *)&v12[4] = 1752392040LL;
      *(_WORD *)&v12[12] = 1041;
      *(_DWORD *)&v12[14] = 6;
      __int16 v13 = 2097;
      uint64_t v14 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "New link key created for device %{private,bluetooth:BD_ADDR,mask.hash}.6P",  v12,  0x1Cu);
    }

    sub_1003D01A0((uint64_t)v6, (uint64_t)v12);
    if (SBYTE3(v14) < 0)
    {
      uint64_t v10 = *(void *)&v12[8];
      operator delete(*(void **)v12);
      if (v10) {
        return nullsub_63(&v15, v9);
      }
    }

    else if (BYTE3(v14))
    {
      return nullsub_63(&v15, v9);
    }

    if (qword_1008D63D8 != -1) {
      dispatch_once(&qword_1008D63D8, &stru_1008A0588);
    }
    sub_1004541B8((uint64_t)off_1008D63D0, (uint64_t)v6);
  }

  return nullsub_63(&v15, v9);
}

void sub_10053876C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_10053878C(uint64_t a1)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A0668);
  }
  LODWORD(__p[0]) = *(_DWORD *)a1;
  WORD2(__p[0]) = *(_WORD *)(a1 + 4);
  unint64_t v2 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  int v3 = (os_log_s *)qword_1008F75E0;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)v2, __p);
      int v4 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      uint64_t v14 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Received a new pincode request for device %{public}s",  buf,  0xCu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v5 = sub_100112610(a1);
    if (!(_DWORD)v5) {
      goto LABEL_26;
    }
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_1008A0668);
    }
    sub_1004006DC((uint64_t)off_1008D5F48, (uint64_t)v2, v5);
    sub_1003D01A0((uint64_t)v2, (uint64_t)__p);
    if (v12 < 0)
    {
      int v6 = v5 & 0x1F00;
      int v7 = __p[1];
      operator delete(__p[0]);
      if (v6 != 256 || v7)
      {
LABEL_26:
        if (qword_1008D67A8 != -1) {
          dispatch_once(&qword_1008D67A8, &stru_1008A0648);
        }
        uint64_t v9 = off_1008D67A0;
        sub_100534444(__p, v2, 4LL);
        sub_10052B684((uint64_t)v9, (uint64_t)__p);
        sub_100534448(__p, v10);
        return;
      }
    }

    else if ((v5 & 0x1F00) != 0x100 || v12)
    {
      goto LABEL_26;
    }

    __int16 v8 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Pairing request coming from a computer without a name - try and get the name",  (uint8_t *)__p,  2u);
    }

    if (qword_1008D63D8 != -1) {
      dispatch_once(&qword_1008D63D8, &stru_1008A0588);
    }
    sub_1004541B8((uint64_t)off_1008D63D0, (uint64_t)v2);
    goto LABEL_26;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
    sub_10068FEDC();
  }
}

void sub_100538A30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100538A4C(uint64_t a1, int a2, int a3, char a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A0668);
  }
  __p.n128_u32[0] = *(_DWORD *)a1;
  __p.n128_u16[2] = *(_WORD *)(a1 + 4);
  int v7 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&__p, 1);
  __int16 v8 = (os_log_s *)qword_1008F75E0;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a3 ? "numeric comparison" : "user confirmation";
      sub_1003CF00C((uint64_t)v7, &__p);
      uint64_t v10 = v17 >= 0 ? &__p : (__n128 *)__p.n128_u64[0];
      *(_DWORD *)buf = 136315394;
      uint64_t v19 = v9;
      __int16 v20 = 2082;
      __int16 v21 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Received a new %s request for device %{public}s",  buf,  0x16u);
      if (v17 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
    }

    uint64_t v11 = sub_100112610(a1);
    if (!(_DWORD)v11) {
      goto LABEL_29;
    }
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_1008A0668);
    }
    sub_1004006DC((uint64_t)off_1008D5F48, (uint64_t)v7, v11);
    sub_1003D01A0((uint64_t)v7, (uint64_t)&__p);
    if (v17 < 0)
    {
      unint64_t v12 = __p.n128_u64[1];
      operator delete((void *)__p.n128_u64[0]);
      if ((v11 & 0x1F00) != 0x100 || v12)
      {
LABEL_29:
        if (qword_1008D67A8 != -1) {
          dispatch_once(&qword_1008D67A8, &stru_1008A0648);
        }
        uint64_t v14 = off_1008D67A0;
        sub_1005345D8((uint64_t)&__p, (uint64_t)v7, a2, a3, a4);
        sub_10052B710((uint64_t)v14, &__p);
        nullsub_531(&__p);
        return;
      }
    }

    else if ((v11 & 0x1F00) != 0x100 || v17)
    {
      goto LABEL_29;
    }

    __int16 v13 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      __p.n128_u16[0] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Pairing request coming from a computer without a name - try and get the name",  (uint8_t *)&__p,  2u);
    }

    if (qword_1008D63D8 != -1) {
      dispatch_once(&qword_1008D63D8, &stru_1008A0588);
    }
    sub_1004541B8((uint64_t)off_1008D63D0, (uint64_t)v7);
    goto LABEL_29;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
    sub_10068FEDC();
  }
}

void sub_100538D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100538D4C(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 141558531;
    uint64_t v9 = 1752392040LL;
    __int16 v10 = 1041;
    int v11 = 6;
    __int16 v12 = 2097;
    uint64_t v13 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Received a passkey request for device %{private,bluetooth:BD_ADDR,mask.hash}.6P",  (uint8_t *)&v8,  0x1Cu);
  }

  sub_1001E7EB0(0, a1, 0LL, v3, v4, v5, v6, v7);
}

void sub_100538E20(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 141558787;
    uint64_t v6 = 1752392040LL;
    __int16 v7 = 1041;
    int v8 = 6;
    __int16 v9 = 2097;
    uint64_t v10 = a1;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Received key-press request for device %{private,bluetooth:BD_ADDR,mask.hash}.6P with type %d",  (uint8_t *)&v5,  0x22u);
  }

void sub_100538EFC(uint64_t a1, int a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A0668);
  }
  __p.n128_u32[0] = *(_DWORD *)a1;
  __p.n128_u16[2] = *(_WORD *)(a1 + 4);
  uint64_t v4 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&__p, 1);
  int v5 = (os_log_s *)qword_1008F75E0;
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)v4, &__p);
      uint64_t v6 = v9 >= 0 ? &__p : (__n128 *)__p.n128_u64[0];
      *(_DWORD *)buf = 136446210;
      __int16 v11 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Received a new passkey display request for device %{public}s",  buf,  0xCu);
      if (v9 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
    }

    if (qword_1008D67A8 != -1) {
      dispatch_once(&qword_1008D67A8, &stru_1008A0648);
    }
    __int16 v7 = off_1008D67A0;
    sub_100534788((uint64_t)&__p, (uint64_t)v4, a2);
    sub_10052B79C((uint64_t)v7, &__p);
    nullsub_532(&__p);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
  {
    sub_10068FEDC();
  }

void sub_10053909C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1005390B8(int *a1)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A0668);
  }
  int v3 = *a1;
  __int16 v4 = *((_WORD *)a1 + 2);
  unint64_t v2 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v3, 1);
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_1008A0648);
  }
  sub_10052E40C((uint64_t)off_1008D67A0, (uint64_t)v2, 156);
}

void sub_100539168(int a1, uint64_t a2)
{
  __int16 v4 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 141558787;
    uint64_t v6 = 1752392040LL;
    __int16 v7 = 1041;
    int v8 = 6;
    __int16 v9 = 2097;
    uint64_t v10 = a2;
    __int16 v11 = 1024;
    int v12 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Received encryption refresh for device %{private,bluetooth:BD_ADDR,mask.hash}.6P with status %{bluetooth:OI_STATUS}u",  (uint8_t *)&v5,  0x22u);
  }

void sub_100539244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 141559299;
    *(void *)int v16 = 1752392040LL;
    *(_WORD *)&v16[8] = 1041;
    int v17 = 6;
    __int16 v18 = 2097;
    uint64_t v19 = a2;
    __int16 v20 = 1024;
    int v21 = a1;
    __int16 v22 = 1024;
    int v23 = a3;
    __int16 v24 = 1024;
    int v25 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Received encryption change for device %{private,bluetooth:BD_ADDR,mask.hash}.6P with status %{bluetooth:OI_STATUS} u mode:%d keySize:%d",  (uint8_t *)&v15,  0x2Eu);
  }

  if (a2)
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_1008A0668);
    }
    int v15 = *(_DWORD *)a2;
    *(_WORD *)int v16 = *(_WORD *)(a2 + 4);
    __int16 v9 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v15, 1);
    if (v9)
    {
      uint64_t v10 = (uint64_t)v9;
      if (qword_1008D67A8 != -1) {
        dispatch_once(&qword_1008D67A8, &stru_1008A0648);
      }
      sub_10052D410((uint64_t)off_1008D67A0, v10, a1, a3);
      if ((_DWORD)a3 && (_DWORD)a4 != 255)
      {
        if (!sub_1003D59A8(v10))
        {
          __int16 v11 = (os_log_s *)qword_1008F75E0;
          if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
          {
            int v15 = 67109120;
            *(_DWORD *)int v16 = a4;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Initializing EncryptionKeySize to %d",  (uint8_t *)&v15,  8u);
          }

          sub_1003D59F4(v10, a4);
        }

        if (!sub_1003D5B44(v10))
        {
          int v12 = (os_log_s *)qword_1008F75E0;
          if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
          {
            int v15 = 67109120;
            *(_DWORD *)int v16 = a3;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Initializing EncryptionMode to %d",  (uint8_t *)&v15,  8u);
          }

          sub_1003D5B90(v10, a3);
        }

        if (!sub_10053964C(v10, a2, a4) && !sub_10053981C(v10, a2, a3))
        {
          sub_1003D59F4(v10, a4);
          sub_1003D5B90(v10, a3);
          sub_100539938(v10, a2, a4);
        }

        return;
      }

      uint64_t v13 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 67109376;
        *(_DWORD *)int v16 = a3;
        *(_WORD *)&v16[4] = 1024;
        *(_DWORD *)&v16[6] = a4;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "_encryptChange: Skipping setEncryptionKeySize setEncryptionMode. encryptionMode = %d, keySize = %d",  (uint8_t *)&v15,  0xEu);
      }
    }

    if (!(_DWORD)a1 && (_DWORD)a3)
    {
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_1008A0668);
      }
      int v15 = *(_DWORD *)a2;
      *(_WORD *)int v16 = *(_WORD *)(a2 + 4);
      uint64_t v14 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v15, 1);
      if (sub_10011EB54((uint64_t)sub_100539E54, (uint64_t)v14 + 128))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
          sub_10068FF3C();
        }
      }

      else if (v14 && sub_10053981C((uint64_t)v14, a2, a3))
      {
        sub_1003D5B90((uint64_t)v14, a3);
      }
    }
  }

void sub_100539608(id a1)
{
  uint64_t v1 = operator new(0x260uLL);
  sub_100451734((uint64_t)v1);
  off_1008D63D0 = v1;
}

void sub_100539638(_Unwind_Exception *a1)
{
}

uint64_t sub_10053964C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6 = sub_1003D5B00(a1);
  if (v6 <= a3 || (unsigned int v7 = v6, v6 == 255))
  {
    uint64_t v14 = sub_1002E8D94();
    (*(void (**)(uint64_t, uint64_t, BOOL, void))(*(void *)v14 + 648LL))(v14, a1, a3 < 7, 0LL);
    return 0LL;
  }

  uint64_t v8 = sub_1002E8D94();
  (*(void (**)(uint64_t, uint64_t, BOOL, BOOL))(*(void *)v8 + 648LL))(v8, a1, a3 < 7, a3 < 7);
  if (a3 > 6) {
    return 0LL;
  }
  __int16 v9 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
  {
    int v15 = 141559043;
    uint64_t v16 = 1752392040LL;
    __int16 v17 = 1041;
    int v18 = 6;
    __int16 v19 = 2097;
    uint64_t v20 = a2;
    __int16 v21 = 1024;
    unsigned int v22 = v7;
    __int16 v23 = 1024;
    unsigned int v24 = a3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Encryption key size downgraded for device %{private,bluetooth:BD_ADDR,mask.hash}.6P from %u to %u. Disconnecting device.",  (uint8_t *)&v15,  0x28u);
  }

  uint64_t v10 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v10 + 328LL))(v10) & 1) != 0
    || (uint64_t v11 = sub_1002E6BF0(), (*(unsigned int (**)(uint64_t))(*(void *)v11 + 384LL))(v11)))
  {
    uint64_t v12 = sub_1002E6E00();
  }

  sub_10010D064(a1 + 128);
  return 181LL;
}

uint64_t sub_10053981C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6 = sub_1003D5C9C(a1);
  uint64_t result = 0LL;
  if (v6 > a3 && v6 != 255)
  {
    uint64_t v8 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
    {
      int v9 = 141559043;
      uint64_t v10 = 1752392040LL;
      __int16 v11 = 1041;
      int v12 = 6;
      __int16 v13 = 2097;
      uint64_t v14 = a2;
      __int16 v15 = 1024;
      unsigned int v16 = v6;
      __int16 v17 = 1024;
      unsigned int v18 = a3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Encryption mode downgraded for device %{private,bluetooth:BD_ADDR,mask.hash}.6P from %u to %u. Disconnecting device.",  (uint8_t *)&v9,  0x28u);
    }

    sub_10010D064(a1 + 128);
    return 181LL;
  }

  return result;
}

void sub_100539938(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 <= 6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10068FF9C();
    }
    int v5 = sub_1003D5D14(a1);
    if (v5)
    {
      if (v5 == 2)
      {
        __int16 v11 = (os_log_s *)qword_1008F75E0;
        if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 141558531;
          *(void *)&uint8_t buf[4] = 1752392040LL;
          *(_WORD *)&_BYTE buf[12] = 1041;
          *(_DWORD *)&buf[14] = 6;
          *(_WORD *)&_BYTE buf[18] = 2097;
          *(void *)&buf[20] = a2;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "User has disallowed to connect to the low security device %{private,bluetooth:BD_ADDR,mask.hash}.6P",  buf,  0x1Cu);
        }

        sub_10010D064(a1 + 128);
      }

      else if (v5 == 1)
      {
        unsigned int v6 = (os_log_s *)qword_1008F75E0;
        if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 141558531;
          *(void *)&uint8_t buf[4] = 1752392040LL;
          *(_WORD *)&_BYTE buf[12] = 1041;
          *(_DWORD *)&buf[14] = 6;
          *(_WORD *)&_BYTE buf[18] = 2097;
          *(void *)&buf[20] = a2;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "User has allowed to connect to the low security device %{private,bluetooth:BD_ADDR,mask.hash}.6P",  buf,  0x1Cu);
        }
      }
    }

    else
    {
      unsigned int v7 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 141558531;
        *(void *)&uint8_t buf[4] = 1752392040LL;
        *(_WORD *)&_BYTE buf[12] = 1041;
        *(_DWORD *)&buf[14] = 6;
        *(_WORD *)&_BYTE buf[18] = 2097;
        *(void *)&buf[20] = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Show security alert to user for the low security device %{private,bluetooth:BD_ADDR,mask.hash}.6P",  buf,  0x1Cu);
      }

      sub_10010D064(a1 + 128);
      memset(buf, 0, 24);
      uint64_t v8 = sub_1002E6BF0();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 328LL))(v8))
      {
        uint64_t v9 = sub_1002E6BF0();
        if (((*(uint64_t (**)(uint64_t))(*(void *)v9 + 368LL))(v9) & 1) != 0)
        {
          uint64_t v10 = "iPod";
        }

        else
        {
          uint64_t v12 = sub_1002E6BF0();
          else {
            uint64_t v10 = "iPhone";
          }
        }

        std::string::assign((std::string *)buf, v10);
        __int128 v31 = 0uLL;
        std::string::size_type cap = 0LL;
        sub_1003D01A0(a1, (uint64_t)&v26);
        __int16 v13 = std::string::insert(&v26, 0LL, "");
        __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v27.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0LL;
        v13->__r_.__value_.__l.__cap_ = 0LL;
        v13->__r_.__value_.__r.__words[0] = 0LL;
        __int16 v15 = std::string::append(&v27, "");
        __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__l.__cap_ = v15->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v16;
        v15->__r_.__value_.__l.__size_ = 0LL;
        v15->__r_.__value_.__l.__cap_ = 0LL;
        v15->__r_.__value_.__r.__words[0] = 0LL;
        __int16 v17 = std::string::append( &v28,  " is trying to connect using an unsecured Bluetooth connection. Unsecured Bluetooth accessories can be us ed to control your ");
        __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0LL;
        v17->__r_.__value_.__l.__cap_ = 0LL;
        v17->__r_.__value_.__r.__words[0] = 0LL;
        if (buf[23] >= 0) {
          __int16 v19 = buf;
        }
        else {
          __int16 v19 = *(const std::string::value_type **)buf;
        }
        if (buf[23] >= 0) {
          std::string::size_type v20 = buf[23];
        }
        else {
          std::string::size_type v20 = *(void *)&buf[8];
        }
        __int16 v21 = std::string::append(&v29, v19, v20);
        __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0LL;
        v21->__r_.__value_.__l.__cap_ = 0LL;
        v21->__r_.__value_.__r.__words[0] = 0LL;
        __int16 v23 = std::string::append(&v30, " or gain access to your data.");
        __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        std::string::size_type cap = v23->__r_.__value_.__l.__cap_;
        __int128 v31 = v24;
        v23->__r_.__value_.__l.__size_ = 0LL;
        v23->__r_.__value_.__l.__cap_ = 0LL;
        v23->__r_.__value_.__r.__words[0] = 0LL;
        if (qword_1008D67B8 != -1) {
          dispatch_once(&qword_1008D67B8, &stru_1008A0628);
        }
        int v25 = off_1008D67B0;
        sub_10002418C(&v30, "Unsecured Bluetooth Connection Request");
        sub_100537A54((uint64_t)v25, a1, 0, (uint64_t)&v30, (uint64_t)&v31);
        if (SHIBYTE(cap) < 0) {
          operator delete((void *)v31);
        }
      }

      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
  }

void sub_100539D88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, void *__p, uint64_t a38, int a39, __int16 a40, char a41, char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100539E54(int a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_100690018();
    }
  }

  else
  {
    __int16 v9 = 0;
    int v8 = 0;
    sub_10010EF78(a2, (uint64_t)&v8);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_1008A0668);
    }
    int v6 = v8;
    __int16 v7 = v9;
    __int16 v4 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v6, 1);
    if (v4)
    {
      uint64_t v5 = (uint64_t)v4;
      if (sub_10053964C((uint64_t)v4, (uint64_t)&v8, a3))
      {
        sub_1003D59F4(v5, a3);
        sub_100539938(v5, (uint64_t)&v8, a3);
      }
    }
  }

uint64_t sub_100539F48()
{
  return 2LL;
}

uint64_t sub_100539F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[0] = a1;
  v12[1] = a2;
  __int128 v25 = xmmword_1006BE140;
  int v4 = sub_1001092EC((uint64_t)v12);
  v11[1] = &v25;
  v11[0] = 1048579LL;
  if (a3)
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_1008A0668);
    }
    *(_DWORD *)buf = *(_DWORD *)a3;
    LOWORD(v14) = *(_WORD *)(a3 + 4);
    int v5 = 1;
    int v6 = sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
    if (v6) {
      int v5 = sub_1003D7084((uint64_t)v6);
    }
  }

  else
  {
    int v5 = 1;
  }

  uint64_t v7 = 0LL;
  if (v5 && (v4 - 4099) <= 0xFFFFFFFC)
  {
    else {
      uint64_t v7 = 2LL;
    }
  }

  int v8 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = 1752392040LL;
    __int16 v9 = "not enforcing";
    __int16 v15 = 1041;
    *(_DWORD *)buf = 141559299;
    int v16 = 6;
    if (v5) {
      __int16 v9 = "enforcing";
    }
    __int16 v17 = 2097;
    uint64_t v18 = a3;
    __int16 v19 = 1024;
    int v20 = v4;
    __int16 v21 = 1024;
    int v22 = v7;
    __int16 v23 = 2080;
    __int128 v24 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Device %{private,bluetooth:BD_ADDR,mask.hash}.6P running UUID 0x%x has security level %d and %s",  buf,  0x32u);
  }

  return v7;
}

void sub_10053A130(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_10053A160(_Unwind_Exception *a1)
{
}

void sub_10053A174(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_10053A1A4(_Unwind_Exception *a1)
{
}

void sub_10053A1B8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10053A1B8(a1, *a2);
    sub_10053A1B8(a1, a2[1]);
    nullsub_63(a2 + 5, v4);
    operator delete(a2);
  }

void sub_10053A200(id a1)
{
  uint64_t v1 = operator new(0xF8uLL);
  sub_1003EC784((uint64_t)v1);
  off_1008D60B8 = v1;
}

void sub_10053A230(_Unwind_Exception *a1)
{
}

char *sub_10053A244(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  int v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (char *)v5;
        unint64_t v9 = *(void *)(v5 + 32);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *(void *)v8;
        int v6 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_10;
        }
      }

      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = *((void *)v8 + 1);
      if (!v5)
      {
        int v6 = (uint64_t **)(v8 + 8);
        goto LABEL_10;
      }
    }
  }

  else
  {
    int v8 = (char *)(a1 + 8);
LABEL_10:
    memset(v11, 0, sizeof(v11));
    sub_10053A314(a1, a4, v11);
    sub_100029630((uint64_t **)a1, (uint64_t)v8, v6, (uint64_t *)v11[0]);
    int v8 = v11[0];
    v11[0] = 0LL;
    sub_10053A38C(v11, 0LL);
  }

  return v8;
}

uint64_t sub_10053A314@<X0>(uint64_t a1@<X0>, void **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  int v6 = operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  v6[4] = **a2;
  uint64_t result = sub_10052523C((uint64_t)(v6 + 5));
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_10053A374(_Unwind_Exception *a1)
{
}

void sub_10053A38C(char **a1, char *a2)
{
  unint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16)) {
      nullsub_63(v2 + 40, a2);
    }
    operator delete(v2);
  }

void sub_10053A3D0(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_10053A400(_Unwind_Exception *a1)
{
}

void sub_10053A414(id a1)
{
  uint64_t v1 = operator new(0x198uLL);
  sub_100534914((uint64_t)v1);
  off_1008D67B0 = v1;
}

void sub_10053A444(_Unwind_Exception *a1)
{
}

uint64_t sub_10053A458(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0LL;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = v2;
    }
    else {
      unint64_t v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    unint64_t v2 = (void *)*v7;
  }

  while (*v7);
  sub_1001FDBCC((uint64_t **)a1, v4);
  nullsub_63(v4 + 5, v9);
  operator delete(v4);
  return 1LL;
}

void sub_10053A4D8(id a1)
{
  uint64_t v1 = operator new(0x260uLL);
  sub_1005285C8((uint64_t)v1);
  off_1008D67A0 = v1;
}

void sub_10053A508(_Unwind_Exception *a1)
{
}

void sub_10053A51C(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_10053A54C(_Unwind_Exception *a1)
{
}

  ;
}

void sub_10053A590( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t sub_10053A5A0(uint64_t a1, uint64_t a2, __int16 a3)
{
  *(void *)a1 = &off_1008A0698;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_10053A618(a1);
  *(_WORD *)(a1 + 16) = a3;
  *(void *)(a1 + 8) = a2;
  return a1;
}

void sub_10053A5FC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 + 72);
  if (v3)
  {
    *(void *)(v1 + 80) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_10053A618(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  *(_BYTE *)(a1 + 52) = 0;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = v2;
  *(_BYTE *)(a1 + 49) = 0;
  uint64_t v16 = 0LL;
  __int16 v17 = 0LL;
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_1008A06B0);
  }
  if (sub_1004AAA40((uint64_t)off_1008D60E8, 0LL, 0LL))
  {
    if (qword_1008D60F0 != -1) {
      dispatch_once(&qword_1008D60F0, &stru_1008A06B0);
    }
    sub_1004AAB90((uint64_t)off_1008D60E8, &v14);
    unint64_t v3 = v15;
    uint64_t v16 = v14;
    __int16 v17 = v15;
    if (v14)
    {
      sub_10027522C(v14, a1);
      goto LABEL_10;
    }
  }

  else
  {
    unint64_t v3 = 0LL;
  }

  uint64_t v4 = (os_log_s *)qword_1008F7570;
  if (!os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR))
  {
LABEL_10:
    if (!v3) {
      return;
    }
    goto LABEL_11;
  }

  sub_100690078(v4, v5, v6, v7, v8, v9, v10, v11);
  if (!v3) {
    return;
  }
LABEL_11:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    unint64_t v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }

void sub_10053A744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10053A760(uint64_t a1)
{
  *(void *)a1 = &off_1008A0698;
  sub_10053A7C4(a1);
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0LL;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_10053A7A8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 + 72);
  if (v3)
  {
    *(void *)(v1 + 80) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_10053A7C4(uint64_t a1)
{
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0LL;
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_1008A06B0);
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  sub_1004AAB90((uint64_t)off_1008D60E8, &v5);
  if (v5) {
    sub_100009168(v5 + 128, a1);
  }
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_1008A06B0);
  }
  sub_1004AABB8((uint64_t)off_1008D60E8, 0LL, 0LL);
  uint64_t v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

void sub_10053A8B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10053A8CC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10053A760(a1);
  operator delete(v1);
}

uint64_t sub_10053A8E0(uint64_t result)
{
  __int16 v1 = *(_WORD *)(result + 18);
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(result + 18) = v2;
  return result;
}

void sub_10053A8FC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: TimeSync Notification %d ",  (uint8_t *)v6,  8u);
  }

  *(_BYTE *)(a1 + 49) = a3;
}

BOOL sub_10053A9AC(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  BOOL v5 = a2 > a3 || a2 > a4;
  if (v5)
  {
    uint64_t v9 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 134218496;
      unint64_t v12 = a2;
      __int16 v13 = 2048;
      unint64_t v14 = a3;
      __int16 v15 = 2048;
      unint64_t v16 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Warning: Audio Timesync: Audio Tx complete Timestamp wrapped Previous TS=%llu First in the queue TS=%llu Last in the Queue TS=%llu",  (uint8_t *)&v11,  0x20u);
    }
  }

  return v5;
}

void sub_10053AA90(uint64_t a1, unsigned int a2, uint64_t a3, char a4, uint64_t *a5)
{
  unsigned int v5 = *(unsigned __int16 *)(a1 + 18);
  if (*(_WORD *)(a1 + 18))
  {
    uint64_t v21 = 0LL;
    int v22 = 0LL;
    if (qword_1008D60F0 != -1) {
      dispatch_once(&qword_1008D60F0, &stru_1008A06B0);
    }
    sub_1004AAB90((uint64_t)off_1008D60E8, &v21);
    if (v21 && (a4 & 0x80) == 0 && *(_BYTE *)(a1 + 49))
    {
      sub_10053AD80(a1, a2, 0LL, 0LL, a5, 0LL, v5);
    }

    else
    {
      if (*(float *)(a1 + 24) != 0.0)
      {
        __int16 v10 = *(_WORD *)(a1 + 16);
        uint64_t v11 = sub_1004050C8();
        *(void *)buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472LL;
        *(void *)&uint8_t buf[16] = sub_10053B8F0;
        *(void *)&uint8_t buf[24] = &unk_1008981A0;
        __int16 v25 = v10;
        int v24 = 0;
        char v26 = 0;
        sub_100405384(v11, buf);
        *(void *)(a1 + 32) = 0LL;
        *(_DWORD *)(a1 + 24) = 0;
      }

      unint64_t v12 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v13 = "Yes";
        if (*(_BYTE *)(a1 + 49)) {
          unint64_t v14 = "Yes";
        }
        else {
          unint64_t v14 = "No";
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = v14;
        if (a4 >= 0) {
          __int16 v13 = "No";
        }
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v5;
        *(_WORD *)&_BYTE buf[18] = 2082;
        *(void *)&buf[20] = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Warning: Audio Timesync: Audio Tx not processed, Timesync Engine Ready=%{public}s number of enqueued pacekts=% u, overflow: %{public}s",  buf,  0x1Cu);
      }

      unsigned int v15 = *(unsigned __int16 *)(a1 + 18);
      BOOL v16 = v15 >= v5;
      __int16 v17 = v15 - v5;
      if (v16) {
        *(_WORD *)(a1 + 18) = v17;
      }
    }

    uint64_t v18 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        unint64_t v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }

void sub_10053ACAC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10053ACC8(uint64_t a1, __int16 a2, int a3, int a4)
{
  if (a3) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = a4 == 0;
  }
  uint64_t v5 = v4;
  if (v4)
  {
    char v6 = a4;
    uint64_t v9 = sub_1004050C8();
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    void v20[2] = sub_10053B8F0;
    v20[3] = &unk_1008981A0;
    __int16 v22 = a2;
    int v21 = a3;
    char v23 = v6;
    sub_100405384(v9, v20);
  }

  else
  {
    __int16 v10 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_ERROR)) {
      sub_1006900AC(v10, v12, v13, v14, v15, v16, v17, v18);
    }
  }

  return v5;
}

_BYTE *sub_10053AD80( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, unsigned int a7)
{
  char v41 = 0;
  sub_100242CA4(&v41);
  uint64_t v11 = (unsigned __int16 *)sub_10012D890(*(void *)(a1 + 8) + 128LL);
  sub_100242CD0(&v41);
  unsigned int v39 = a7;
  if (v11)
  {
    int v12 = *v11;
    if (!a2) {
      goto LABEL_27;
    }
  }

  else
  {
    int v12 = 0xFFFF;
    if (!a2) {
      goto LABEL_27;
    }
  }

  int v13 = 0;
  do
  {
    int v14 = *((unsigned __int16 *)a5 + 4);
    if (v12 == v14)
    {
      unint64_t v15 = *(void *)(a1 + 80);
      unint64_t v16 = *(void *)(a1 + 88);
      if (v15 >= v16)
      {
        uint64_t v21 = *(void *)(a1 + 72);
        uint64_t v22 = 0x2E8BA2E8BA2E8BA3LL * (v15 - v21);
        unint64_t v23 = v22 + 1;
        unint64_t v24 = 0x2E8BA2E8BA2E8BA3LL * (v16 - v21);
        if (2 * v24 > v23) {
          unint64_t v23 = 2 * v24;
        }
        if (v24 >= 0xBA2E8BA2E8BA2E8LL) {
          unint64_t v25 = 0x1745D1745D1745D1LL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25) {
          char v26 = (char *)sub_10053C34C(a1 + 88, v25);
        }
        else {
          char v26 = 0LL;
        }
        std::string v27 = &v26[11 * v22];
        uint64_t v28 = *a5;
        *(_DWORD *)(v27 + 7) = *(_DWORD *)((char *)a5 + 7);
        *(void *)std::string v27 = v28;
        uint64_t v30 = *(void *)(a1 + 72);
        uint64_t v29 = *(void *)(a1 + 80);
        __int128 v31 = v27;
        if (v29 != v30)
        {
          do
          {
            uint64_t v32 = *(void *)(v29 - 11);
            v29 -= 11LL;
            int v33 = *(_DWORD *)(v29 + 7);
            *(void *)(v31 - 11) = v32;
            v31 -= 11;
            *(_DWORD *)(v31 + 7) = v33;
          }

          while (v29 != v30);
          uint64_t v29 = *(void *)(a1 + 72);
        }

        uint64_t v18 = v27 + 11;
        *(void *)(a1 + 72) = v31;
        *(void *)(a1 + 80) = v27 + 11;
        *(void *)(a1 + 88) = &v26[11 * v25];
        if (v29) {
          operator delete((void *)v29);
        }
      }

      else
      {
        uint64_t v17 = *a5;
        *(_DWORD *)(v15 + 7) = *(_DWORD *)((char *)a5 + 7);
        *(void *)unint64_t v15 = v17;
        uint64_t v18 = (char *)(v15 + 11);
      }

      *(void *)(a1 + 80) = v18;
    }

    else
    {
      __int16 v19 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = *a5;
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v14;
        LOWORD(v43) = 2048;
        *(void *)((char *)&v43 + 2) = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Warning: Audio Timesync: Invalid LinkID received ID=%x TS=%llu",  buf,  0x12u);
      }
    }

    a5 = (uint64_t *)((char *)a5 + 11);
    ++v13;
  }

  while (a2 > (unsigned __int16)v13);
LABEL_27:
  float v40 = 0.0;
  BOOL v34 = sub_10053B0C8(a1, *(unsigned __int16 *)(a1 + 16), (uint64_t *)(a1 + 72), v39, &v40);
  __int16 v35 = *(_WORD *)(a1 + 16);
  if (v34)
  {
    sub_10053B594(a1, *(unsigned __int16 *)(a1 + 16), v40);
  }

  else
  {
    uint64_t v36 = sub_1004050C8();
    *(void *)buf = _NSConcreteStackBlock;
    *(void *)&__int128 v43 = 3221225472LL;
    *((void *)&v43 + 1) = sub_10053B8F0;
    uint64_t v44 = &unk_1008981A0;
    __int16 v46 = v35;
    int v45 = 0;
    char v47 = 0;
    sub_100405384(v36, buf);
    __int16 v37 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: update average audio transmit time not ready, reset the modifier",  buf,  2u);
    }
  }

  return sub_100242CD8(&v41);
}

void sub_10053B0A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

BOOL sub_10053B0C8(uint64_t a1, int a2, uint64_t *a3, unsigned int a4, float *a5)
{
  uint64_t v8 = (unint64_t *)*a3;
  uint64_t v9 = (unint64_t *)a3[1];
  else {
    uint64_t v10 = 0x2E8BA2E8BA2E8BA3LL * ((void)v9 - *a3);
  }
  if ((_DWORD)v10 && *(_BYTE *)(a1 + 48))
  {
    uint64_t v38 = 0LL;
    unint64_t v13 = *v8;
    unint64_t v14 = *(unint64_t *)((char *)v9 - 11);
    if (sub_10053A9AC(a1, *(void *)(a1 + 40), v13, v14))
    {
      if (a3[1] != *a3) {
        a3[1] = *a3;
      }
      if (*(_WORD *)(a1 + 18))
      {
        if (*(float *)(a1 + 24) != 0.0)
        {
          __int16 v15 = *(_WORD *)(a1 + 16);
          uint64_t v16 = sub_1004050C8();
          *(void *)buf = _NSConcreteStackBlock;
          *(void *)&uint8_t buf[8] = 3221225472LL;
          *(void *)&uint8_t buf[16] = sub_10053B8F0;
          *(void *)&uint8_t buf[24] = &unk_1008981A0;
          LOWORD(v40) = v15;
          *(_DWORD *)&_BYTE buf[32] = 0;
          BYTE2(v40) = 0;
          sub_100405384(v16, buf);
          *(void *)(a1 + 32) = 0LL;
          *(_DWORD *)(a1 + 24) = 0;
        }

        uint64_t v17 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Warning: Audio Timesync: Dynamic Audio Delivery wrapped around, resetting",  buf,  2u);
        }

        BOOL v18 = 0LL;
        *(void *)(a1 + 40) = 0LL;
        *(_WORD *)(a1 + 18) = 0;
        *(_BYTE *)(a1 + sub_100242FAC(v15 - 48) = 0;
      }

      else
      {
        return 0LL;
      }
    }

    else
    {
      uint64_t v36 = 0LL;
      __int16 v37 = 0LL;
      if (qword_1008D60F0 != -1) {
        dispatch_once(&qword_1008D60F0, &stru_1008A06B0);
      }
      sub_1004AAB90((uint64_t)off_1008D60E8, &v36);
      if (v36 && sub_100275CA8(v36, v14, &v38))
      {
        if (!*(void *)(a1 + 32))
        {
          *(void *)buf = 0LL;
        }

        if (qword_1008D60F0 != -1) {
          dispatch_once(&qword_1008D60F0, &stru_1008A06B0);
        }
        float v27 = sub_1004AA0F0((uint64_t)off_1008D60E8, v38 - *(void *)(a1 + 32), 2) / (float)(int)v10;
        *a5 = v27;
        if (v27 > 250000.0) {
          sub_10053B63C(a1, a2, a3, a4);
        }
        BOOL v18 = 1LL;
      }

      else
      {
        BOOL v18 = 0LL;
      }

      unsigned int v28 = *(unsigned __int16 *)(a1 + 18);
      if (v28 >= (unsigned __int16)v10)
      {
        LOWORD(v28) = v28 - v10;
        *(_WORD *)(a1 + 18) = v28;
      }

      if (*(_BYTE *)(a1 + 52))
      {
        uint64_t v29 = (os_log_s *)qword_1008F7570;
        if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
        {
          double v30 = *a5;
          uint64_t v31 = 0x2E8BA2E8BA2E8BA3LL * (a3[1] - *a3);
          *(_DWORD *)buf = 134219008;
          if (v18) {
            int v32 = 84;
          }
          else {
            int v32 = 70;
          }
          *(double *)&uint8_t buf[4] = v30;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = a4;
          *(_WORD *)&_BYTE buf[18] = 2048;
          *(void *)&buf[20] = v31;
          *(_WORD *)&_BYTE buf[28] = 1024;
          *(_DWORD *)&buf[30] = (unsigned __int16)v28;
          *(_WORD *)&buf[34] = 1024;
          int v40 = v32;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Audio Delivery  Average Time=%f, Pending Packets=%d, Tx Completed Tx=%lu, Queue depth=%d, status=%c",  buf,  0x28u);
        }
      }

      if (*a3 != a3[1]) {
        a3[1] = *a3;
      }
      *(void *)(a1 + 32) = v38;
      *(void *)(a1 + 40) = v14;
      int v33 = v37;
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          unint64_t v35 = __ldaxr(p_shared_owners);
        while (__stlxr(v35 - 1, p_shared_owners));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
  }

  else
  {
    if (v9 != v8)
    {
      __int16 v19 = (unint64_t *)a3[1];
      uint64_t v20 = (char *)v9 - (char *)v19;
      if (v9 != v19) {
        memmove((void *)*a3, v19, (char *)v9 - (char *)v19);
      }
      uint64_t v9 = (unint64_t *)((char *)v8 + v20);
      a3[1] = (uint64_t)v8 + v20;
    }

    BOOL v18 = *(_BYTE *)(a1 + 48) != 0;
    if (!*(_BYTE *)(a1 + 48))
    {
      uint64_t v21 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = 0x2E8BA2E8BA2E8BA3LL * ((void)v9 - *a3);
        *(_DWORD *)buf = 134218498;
        *(void *)&uint8_t buf[4] = v22;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = a4;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = "No";
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Number of packets in queue not yet in sync with Tx complete Tx completed=%lu Enqueued Packets=%d Sync =%s",  buf,  0x1Cu);
      }
    }

    unsigned int v23 = *(unsigned __int16 *)(a1 + 18);
    BOOL v24 = v23 >= a4;
    __int16 v25 = v23 - a4;
    if (v24) {
      *(_WORD *)(a1 + 18) = v25;
    }
    *(_BYTE *)(a1 + sub_100242FAC(v15 - 48) = 1;
  }

  return v18;
}

void sub_10053B570(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

unint64_t sub_10053B594(uint64_t a1, int a2, float a3)
{
  *(float *)(a1 + 20) = *(float *)(a1 + 20) + a3;
  sub_10053BB8C(a1, a2, a3);
  if (*(_WORD *)(a1 + 50) == 2)
  {
    *(float *)(a1 + 24) = *(float *)(a1 + 20) * 0.5;
    *(_DWORD *)(a1 + 20) = 0;
    *(_WORD *)(a1 + 50) = 0;
  }

  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_1008A06B0);
  }
  return sub_1004AB70C((uint64_t)off_1008D60E8, a2, a3);
}

void sub_10053B63C(uint64_t a1, int a2, uint64_t *a3, int a4)
{
  uint64_t v8 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    double v9 = *(float *)(a1 + 24);
    double v10 = *(float *)(a1 + 20);
    int v11 = *(unsigned __int16 *)(a1 + 50);
    uint64_t v12 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 67110400;
    int v28 = a2;
    __int16 v29 = 1024;
    int v30 = a4;
    __int16 v31 = 2048;
    double v32 = v9;
    __int16 v33 = 2048;
    double v34 = v10;
    __int16 v35 = 1024;
    LODWORD(v36[0]) = v11;
    WORD2(v36[0]) = 2048;
    *(void *)((char *)v36 + 6) = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Handle=%d, Enqueued Packets=%d Previous Average=%f Current Total Tx time=%f updated count=%d Previous TS=%llu",  buf,  0x32u);
  }

  double v13 = *(double *)(a1 + 32);
  uint64_t v25 = 0LL;
  char v26 = 0LL;
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_1008A06B0);
  }
  sub_1004AAB90((uint64_t)off_1008D60E8, &v25);
  if (v25)
  {
    for (uint64_t i = *a3; i != a3[1]; i += 11LL)
    {
      double v24 = 0.0;
      sub_100275CA8(v25, *(void *)i, &v24);
      __int16 v15 = (os_log_s *)qword_1008F7570;
      if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *(unsigned __int16 *)(i + 8);
        int v17 = *(unsigned __int8 *)(i + 10);
        uint64_t v18 = *(uint64_t *)i;
        double v19 = v24;
        if (qword_1008D60F0 != -1) {
          dispatch_once(&qword_1008D60F0, &stru_1008A06B0);
        }
        float v20 = sub_1004AA0F0((uint64_t)off_1008D60E8, *(void *)&v24 - *(void *)&v13, 2);
        *(_DWORD *)buf = 67110144;
        int v28 = v16;
        __int16 v29 = 1024;
        int v30 = v17;
        __int16 v31 = 2048;
        double v32 = *(double *)&v18;
        __int16 v33 = 2048;
        double v34 = v19;
        __int16 v35 = 2048;
        v36[0] = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Link=%d Status=%d Time=%llu Translated Time=%llu delta=%f",  buf,  0x2Cu);
      }

      double v13 = v24;
    }
  }

  uint64_t v21 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

void sub_10053B8D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_10053B8F0(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_1008A06D0);
  }
  return sub_100379F24( (os_unfair_lock_s *)qword_1008D6450,  *(unsigned __int16 *)(a1 + 36),  *(_DWORD *)(a1 + 32),  *(unsigned __int8 *)(a1 + 38));
}

BOOL sub_10053B948(uint64_t a1, int a2, float a3)
{
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_1008A06B0);
  }
  int v6 = sub_1004A8768((uint64_t)off_1008D60E8, a2);
  int v7 = v6;
  float v8 = *(float *)(a1 + 24);
  BOOL result = v8 < a3;
  if (v8 >= a3) {
    int v7 = 0;
  }
  if (v7 == 1)
  {
    double v10 = (os_log_s *)qword_1008F7570;
    BOOL v11 = os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0LL;
    if (v11)
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Low Latency Mode enabled Timesync paused",  v12,  2u);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10053BA2C(uint64_t a1, float a2, float a3)
{
  if (a2 <= a3) {
    return 0LL;
  }
  float v3 = (float)(a2 - a3) / 1000.0;
  unsigned int v4 = (int)(float)(v3 * 10.0);
  if (v4 >= 0x97)
  {
    double v9 = (os_log_s *)qword_1008F7570;
    uint64_t v6 = 0LL;
    if (!os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT)) {
      return v6;
    }
    int v11 = 134217984;
    v12[0] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Packet Tx Delta High Delta=%fMSec",  (uint8_t *)&v11,  0xCu);
    return 0LL;
  }

  if (v4 >= 0x3C) {
    uint64_t v6 = 60LL;
  }
  else {
    uint64_t v6 = v4;
  }
  int v7 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int16 *)(a1 + 18);
    int v11 = 67109376;
    LODWORD(v12[0]) = v8;
    WORD2(v12[0]) = 2048;
    *(double *)((char *)v12 + 6) = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Starting Timesync speed adjust, Current enqueue count=%d Average A2DP Tx Time in Msec =% f",  (uint8_t *)&v11,  0x12u);
  }

  return v6;
}

void sub_10053BB8C(uint64_t a1, int a2, float a3)
{
  if (!*(_BYTE *)(a1 + 52) && *(float *)(a1 + 24) != 0.0)
  {
    if (qword_1008D60F0 != -1) {
      dispatch_once(&qword_1008D60F0, &stru_1008A06B0);
    }
    if ((sub_1004A8760((uint64_t)off_1008D60E8, a2) & 1) == 0 && sub_10053B948(a1, a2, a3))
    {
      int v6 = sub_10053BA2C(a1, a3, *(float *)(a1 + 24));
      if (v6)
      {
        __int16 v7 = v6;
        *(_WORD *)(a1 + 28) = 0;
        *(void *)(a1 + 56) = mach_absolute_time();
        *(_WORD *)(a1 + 30) = v7;
        sub_10053BC74(a1, a2, 1, v7);
      }
    }
  }

void sub_10053BC74(uint64_t a1, __int16 a2, int a3, int a4)
{
  uint64_t v8 = sub_1004050C8();
  uint64_t v12 = _NSConcreteStackBlock;
  uint64_t v13 = 3221225472LL;
  unint64_t v14 = sub_10053B8F0;
  __int16 v15 = &unk_1008981A0;
  __int16 v17 = a2;
  int v16 = 0;
  char v18 = 0;
  sub_100405384(v8, &v12);
  if (a3 == 2)
  {
    sub_10053ACC8(v9, a2, 2, a4);
    *(_DWORD *)(a1 + 28) = 0;
  }

  else if (a3 == 1)
  {
    sub_10053ACC8(v9, a2, 1, a4);
    *(_WORD *)(a1 + 28) += a4;
  }

  *(_BYTE *)(a1 + 52) = a3;
  double v10 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(unsigned __int16 *)(a1 + 18);
    LODWORD(v12) = 67109632;
    HIDWORD(v12) = a3;
    LOWORD(v13) = 1024;
    *(_DWORD *)((char *)&v13 + 2) = v11;
    HIWORD(v13) = 1024;
    LODWORD(v14) = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Audio Delivery Speed Direction=%d, Pending packets=%d Steps=%d",  (uint8_t *)&v12,  0x14u);
  }

void sub_10053BDCC(uint64_t a1, uint64_t a2, __int16 a3, unsigned int a4)
{
  uint64_t v8 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *(unsigned __int16 *)(a1 + 18);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: delay audio speedup, Pending packets=%d",  buf,  8u);
  }

  uint64_t v10 = sub_1004050C8();
  *(void *)buf = _NSConcreteStackBlock;
  uint64_t v16 = 3221225472LL;
  __int16 v17 = sub_10053B8F0;
  char v18 = &unk_1008981A0;
  __int16 v20 = a3;
  int v19 = 0;
  char v21 = 0;
  sub_100405384(v10, buf);
  dispatch_time_t v11 = dispatch_time(0LL, 1000000LL * a4);
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_1008A06B0);
  }
  uint64_t v12 = (dispatch_queue_s *)*((void *)off_1008D60E8 + 30);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10053BF54;
  block[3] = &unk_10087FF20;
  block[4] = a1;
  block[5] = a2;
  __int16 v14 = a3;
  dispatch_after(v11, v12, block);
}

uint64_t sub_10053BF54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_1008A06B0);
  }
  uint64_t result = sub_1004AB818((uint64_t)off_1008D60E8, *(void *)(a1 + 40));
  if ((_DWORD)result) {
    return sub_10053BFC4(v2, *(unsigned __int16 *)(a1 + 48));
  }
  return result;
}

void sub_10053BFC4(uint64_t a1, int a2)
{
  unsigned int v4 = *(unsigned __int16 *)(a1 + 18);
  uint64_t v5 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(unsigned __int8 *)(a1 + 52);
    int v7 = *(unsigned __int16 *)(a1 + 28);
    v16[0] = 67109376;
    v16[1] = v6;
    __int16 v17 = 1024;
    int v18 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Speed Update Complete current State = %d Slowdown duration = %d ",  (uint8_t *)v16,  0xEu);
  }

  int v8 = *(unsigned __int8 *)(a1 + 52);
  if (*(_BYTE *)(a1 + 52))
  {
    if (v8 == 2)
    {
      *(void *)(a1 + 56) = 0LL;
      uint64_t v12 = a1;
      __int16 v13 = a2;
      int v14 = 0;
      int v15 = 0;
    }

    else
    {
      if (v8 != 1) {
        return;
      }
      if (qword_1008D60F0 != -1) {
        dispatch_once(&qword_1008D60F0, &stru_1008A06B0);
      }
      else {
        unsigned int v9 = 60;
      }
      if (v9 <= *(unsigned __int16 *)(a1 + 28) || v4 < 8)
      {
        sub_10053C17C(a1, a2);
        return;
      }

      int v15 = *(unsigned __int8 *)(a1 + 30);
      uint64_t v12 = a1;
      __int16 v13 = a2;
      int v14 = 1;
    }

    sub_10053BC74(v12, v13, v14, v15);
  }

  else
  {
    dispatch_time_t v11 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Should not reach here",  (uint8_t *)v16,  2u);
    }
  }

void sub_10053C17C(uint64_t a1, __int16 a2)
{
  unsigned int v4 = *(unsigned __int16 *)(a1 + 18);
  uint64_t v5 = *(void *)(a1 + 64);
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_1008A06B0);
  }
  int v6 = off_1008D60E8;
  uint64_t v7 = mach_absolute_time();
  float v8 = sub_1004AA0F0((uint64_t)v6, v7 - *(void *)(a1 + 56), 0);
  if (v4 >= 8 && v8 < 5.0)
  {
    sub_10053BDCC(a1, v5, a2, 0x1F4u);
  }

  else
  {
    uint64_t v10 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *(unsigned __int16 *)(a1 + 18);
      v12[0] = 67109376;
      v12[1] = v11;
      __int16 v13 = 2048;
      double v14 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Speedup %d [%f]",  (uint8_t *)v12,  0x12u);
    }

    sub_10053BC74(a1, a2, 2, *(unsigned __int8 *)(a1 + 28));
  }

void sub_10053C308(id a1)
{
  __int16 v1 = operator new(0x4A8uLL);
  sub_100499870();
  off_1008D60E8 = v1;
}

void sub_10053C338(_Unwind_Exception *a1)
{
}

void *sub_10053C34C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745D2LL) {
    sub_100008BD4();
  }
  return operator new(11 * a2);
}

void sub_10053C394(id a1)
{
  __int16 v1 = operator new(0x310uLL);
  sub_10036BB90();
  qword_1008D6450 = (uint64_t)v1;
}

void sub_10053C3C4(_Unwind_Exception *a1)
{
}

void *sub_10053C3D8(void *result)
{
  *uint64_t result = 0LL;
  result[1] = 0LL;
  result[2] = 0LL;
  return result;
}

uint64_t *sub_10053C3E4(uint64_t *a1, uint64_t *a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a1 != a2) {
    sub_10020789C((uint64_t)a1, *a2, a2[1], 0x4EC4EC4EC4EC4EC5LL * ((a2[1] - *a2) >> 3));
  }
  return a1;
}

void sub_10053C448(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10053C464(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_10053CC44(a1, a2);
  }

  else
  {
    sub_100207B74(a1[1], a2);
    uint64_t result = v3 + 104;
    a1[1] = v3 + 104;
  }

  a1[1] = result;
  return result;
}

void sub_10053C4AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10053C4B4(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    do
    {
      v2 -= 104LL;
      sub_100207864((uint64_t)(a1 + 2), v2);
    }

    while (v2 != v3);
  }

  a1[1] = v3;
}

id *sub_10053C504(uint64_t a1, id *location)
{
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6 != v4)
  {
    do
    {
      v6 -= 104LL;
      sub_100207864(a1 + 16, v6);
    }

    while (v6 != v5);
  }

  *(void *)(a1 + 8) = v5;
  return location;
}

id *sub_10053C584(id **a1, void *a2)
{
  id v3 = a2;
  for (uint64_t i = *a1; i != a1[1]; i += 13)
  {
    id v5 = *i;
    unsigned __int8 v6 = [v3 isEqual:v5];

    if ((v6 & 1) != 0) {
      break;
    }
  }

  return i;
}

void sub_10053C5FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10053C610(uint64_t *a1, int a2)
{
  uint64_t result = *a1;
  uint64_t v4 = a1[1];
  if (result != v4)
  {
    while (*(_DWORD *)(result + 8) != a2)
    {
      result += 104LL;
      if (result == v4) {
        return v4;
      }
    }
  }

  return result;
}

uint64_t sub_10053C644(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  for (uint64_t result = 1LL; ; uint64_t result = (result + 1))
  {
    uint64_t v4 = v1;
    if (v1 != v2)
    {
      uint64_t v4 = v1;
      while (*(_DWORD *)(v4 + 8) != (_DWORD)result)
      {
        v4 += 104LL;
        if (v4 == v2) {
          return result;
        }
      }
    }

    if (v4 == v2) {
      break;
    }
  }

  return result;
}

std::string *sub_10053C68C@<X0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  sub_10002418C(a2, "[ ");
  for (uint64_t i = *a1; i != a1[1]; i += 104LL)
  {
    if (i != *a1) {
      std::string::append(a2, ", ");
    }
    sub_10046DE34(i, __p);
    if ((v9 & 0x80u) == 0) {
      id v5 = __p;
    }
    else {
      id v5 = (void **)__p[0];
    }
    if ((v9 & 0x80u) == 0) {
      std::string::size_type v6 = v9;
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    std::string::append(a2, (const std::string::value_type *)v5, v6);
  }

  return std::string::append(a2, " ]");
}

void sub_10053C768( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

unint64_t sub_10053C7A4(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 1LL;
  }
  uint64_t v3 = *a2;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (-991146299 * ((unint64_t)(a2[1] - *a2) >> 3) != -991146299 {
  if (v5 == v4)
  }
    return 1LL;
  do
  {
    unint64_t result = sub_10053CAEC(v5, v3);
    if (!(_DWORD)result) {
      break;
    }
    v5 += 104LL;
    v3 += 104LL;
  }

  while (v5 != a1[1]);
  return result;
}

uint64_t sub_10053C844(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0LL;
  }
  LODWORD(result) = 0;
  do
  {
    if (*(_DWORD *)(v1 + 16) == 2) {
      uint64_t result = (result + 1);
    }
    else {
      uint64_t result = result;
    }
    v1 += 104LL;
  }

  while (v1 != v2);
  return result;
}

uint64_t sub_10053C878(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0LL;
  }
  LODWORD(result) = 0;
  do
  {
    if (*(_DWORD *)(v1 + 16) == 1) {
      uint64_t result = (result + 1);
    }
    else {
      uint64_t result = result;
    }
    v1 += 104LL;
  }

  while (v1 != v2);
  return result;
}

uint64_t sub_10053C8AC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0LL;
  }
  LODWORD(result) = 0;
  do
  {
    else {
      uint64_t result = (result + 1);
    }
    v1 += 104LL;
  }

  while (v1 != v2);
  return result;
}

BOOL sub_10053C8E4(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0LL;
  }
  uint64_t v2 = *a1 + 104LL;
  do
  {
    int v3 = *(_DWORD *)(v2 - 88);
    BOOL result = v3 == 6;
    BOOL v5 = v3 == 6 || v2 == v1;
    v2 += 104LL;
  }

  while (!v5);
  return result;
}

BOOL sub_10053C918(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0LL;
  }
  uint64_t v2 = *a1 + 104LL;
  do
  {
    int v3 = *(_DWORD *)(v2 - 88);
    BOOL result = v3 == 5;
    BOOL v5 = v3 == 5 || v2 == v1;
    v2 += 104LL;
  }

  while (!v5);
  return result;
}

BOOL sub_10053C94C(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0LL;
  }
  uint64_t v2 = *a1 + 104LL;
  do
  {
    int v3 = *(_DWORD *)(v2 - 88);
    BOOL result = v3 == 3;
    BOOL v5 = v3 == 3 || v2 == v1;
    v2 += 104LL;
  }

  while (!v5);
  return result;
}

BOOL sub_10053C980(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0LL;
  }
  uint64_t v2 = *a1 + 104LL;
  do
  {
    int v3 = *(_DWORD *)(v2 - 88);
    BOOL result = v3 == 4;
    BOOL v5 = v3 == 4 || v2 == v1;
    v2 += 104LL;
  }

  while (!v5);
  return result;
}

BOOL sub_10053C9B4(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 0LL;
  }
  uint64_t v3 = *a2;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (-991146299 * ((unint64_t)(a2[1] - *a2) >> 3) != -991146299 {
  if (v5 == v4)
  }
    return 0LL;
  do
  {
    BOOL result = sub_10053CA54(v5, v3);
    if (result) {
      break;
    }
    v5 += 104LL;
    v3 += 104LL;
  }

  while (v5 != a1[1]);
  return result;
}

BOOL sub_10053CA54(uint64_t a1, uint64_t a2)
{
  return ![*(id *)a1 isEqual:*(void *)a2]
      || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
      || *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12)
      || *(unsigned __int8 *)(a1 + 13) != *(unsigned __int8 *)(a2 + 13)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
}

unint64_t sub_10053CAEC(uint64_t a1, uint64_t a2)
{
  unint64_t result = (unint64_t)[*(id *)a1 isEqual:*(void *)a2];
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
      || *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12)
      || *(unsigned __int8 *)(a1 + 13) != *(unsigned __int8 *)(a2 + 13)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    {
      return 0LL;
    }

    unint64_t result = sub_10054A494((unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a2 + 24));
    if ((_DWORD)result)
    {
      unint64_t result = sub_10053CBA4((unsigned __int8 *)(a1 + 80), (unsigned __int8 *)(a2 + 80));
      if ((_DWORD)result)
      {
        return 0LL;
      }
    }
  }

  return result;
}

BOOL sub_10053CBA4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0LL) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0LL) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0LL;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1LL;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }

  while (v13 && v12);
  return v14;
}

uint64_t sub_10053CC44(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = 0x4EC4EC4EC4EC4EC5LL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0x4EC4EC4EC4EC4EC5LL * ((v8 - v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x13B13B13B13B13BLL) {
    unint64_t v10 = 0x276276276276276LL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    int v11 = (char *)sub_100207CA4(v7, v10);
  }
  else {
    int v11 = 0LL;
  }
  BOOL v14 = v11;
  uint64_t v15 = &v11[104 * v3];
  __int16 v17 = &v11[104 * v10];
  sub_100207B74((uint64_t)v15, a2);
  uint64_t v16 = v15 + 104;
  sub_10053CD58(a1, &v14);
  uint64_t v12 = a1[1];
  sub_10053CDDC(&v14);
  return v12;
}

void sub_10053CD44(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10053CD58(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 104LL;
    uint64_t result = sub_100207B74(result - 104, v4);
  }

  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void **sub_10053CDDC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10053CE0C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 104;
    sub_100207864(v4, i - 104);
  }

uint64_t sub_10053CE50(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1008A0700;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_WORD *)(a1 + 40) = 0;
  if (!a2)
  {
    uint64_t v3 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT)) {
      sub_1006900E8(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }

  return a1;
}

void sub_10053CEB4(uint64_t a1, void *a2, uint64_t *a3, __int16 a4)
{
  id v8 = a2;
  objc_storeStrong((id *)(a1 + 16), a2);
  sub_100452954((void *)(a1 + 24), a3);
  *(_WORD *)(a1 + 40) = a4;
}

void sub_10053CF3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10053CF50(uint64_t a1, uint64_t a2)
{
  __n128 __p = 0LL;
  uint64_t v3 = 0LL;
  uint64_t v4 = 0LL;
  sub_10053CFAC(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v3 = __p;
    operator delete(__p);
  }

void sub_10053CF90( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10053CFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2)
  {
    uint64_t v6 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100690158(a2, v6, v7, v8, v9, v10, v11, v12);
    }
  }

  return (***(uint64_t (****)(void, uint64_t, uint64_t, uint64_t))(a1 + 8))(*(void *)(a1 + 8), a1, a2, a3);
}

void sub_10053D024(uint64_t a1)
{
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_1008A0CF8);
  }
  sub_10055A9EC(qword_1008D5F58, *(void **)(a1 + 16));
}

void sub_10053D074(uint64_t a1, __int16 a2)
{
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_1008A0CF8);
  }
  sub_10055AED4(qword_1008D5F58, *(void **)(a1 + 16), a2);
}

void sub_10053D0CC(uint64_t a1, uint64_t a2)
{
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_1008A0CF8);
  }
  sub_10055AC10(qword_1008D5F58, *(void **)(a1 + 16), a2);
}

void sub_10053D124(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (qword_1008D5F60 == -1)
  {
    uint64_t v4 = v3;
  }

  else
  {
    dispatch_once(&qword_1008D5F60, &stru_1008A0CF8);
    uint64_t v4 = v5;
  }

  sub_10055A454(qword_1008D5F58, a1, v4);
}

void sub_10053D194( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t sub_10053D1A8(uint64_t a1, uint64_t a2, int a3)
{
  id v5 = (os_log_s *)qword_1008F75B0;
  if ((_DWORD)a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_1006901BC();
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 67109120;
      v8[1] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Remote response with MTU %d",  (uint8_t *)v8,  8u);
    }

    if (a3 != 23) {
      sub_10053D074(a1, a3);
    }
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, a2);
}

uint64_t sub_10053D2A4(uint64_t a1)
{
  char v6 = 0;
  sub_100242CA4(&v6);
  uint64_t v2 = sub_1001C0358(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_10053D3D4, *(unsigned __int16 *)(a1 + 42), a1);
  sub_100242CD0(&v6);
  if ((_DWORD)v2 == 146)
  {
    id v3 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 138412290;
      id v8 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Ignoring MTU exchange request - MTU already set for device %@",  buf,  0xCu);
    }

    (*(void (**)(uint64_t, void))(*(void *)a1 + 24LL))(a1, 0LL);
    uint64_t v2 = 0LL;
  }

  sub_100242CD8(&v6);
  return v2;
}

void sub_10053D3B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10053D3D4(uint64_t a1, int a2, uint64_t a3)
{
  return sub_10053D1A8(a3, a1, a2);
}

void sub_10053D3E8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  __n128 __p = 0LL;
  __int16 v33 = 0LL;
  double v34 = 0LL;
  if (!(_DWORD)a2)
  {
    if (!a4) {
      goto LABEL_38;
    }
    uint64_t v7 = 0LL;
    uint64_t v8 = a4;
    do
    {
      uint64_t v9 = (char *)operator new(0xC0uLL);
      uint64_t v10 = (__int16 *)(a3 + 24 * v7);
      __int16 v11 = *v10;
      __int16 v12 = v10[1];
      __n128 v35 = *(__n128 *)(v10 + 2);
      int v36 = *((_DWORD *)v10 + 5);
      sub_100634334(&v37, &v35);
      *((_DWORD *)v9 + 4) = 0;
      *(void *)uint64_t v9 = off_1008A0320;
      *((void *)v9 + 1) = v9 + 24;
      v9[96] = 1;
      *((void *)v9 + 22) = 0LL;
      *((void *)v9 + 23) = 0LL;
      *((void *)v9 + 21) = 0LL;
      *((void *)v9 + 14) = 0LL;
      *((void *)v9 + 15) = 0LL;
      *((void *)v9 + 13) = 0LL;
      v9[128] = 0;
      *((void *)v9 + 18) = 0LL;
      *((void *)v9 + 19) = 0LL;
      *((void *)v9 + 17) = 0LL;
      v9[160] = 0;
      int v13 = v38;
      *(__n128 *)(v9 + 72) = v37;
      *((_WORD *)v9 + 12) = v11;
      *((_WORD *)v9 + 13) = 0;
      *((_DWORD *)v9 + 11) = 0;
      *(_OWORD *)(v9 + 28) = xmmword_1006C3E08;
      *((_WORD *)v9 + 24) = v12;
      *((void *)v9 + 8) = 0LL;
      *(void *)(v9 + 50) = 0LL;
      *(void *)(v9 + 58) = 0LL;
      *((_DWORD *)v9 + 22) = v13;
      *((_DWORD *)v9 + 23) = 0;
      BOOL v14 = v33;
      if (v33 >= v34)
      {
        uint64_t v16 = (v33 - (_BYTE *)__p) >> 3;
        unint64_t v17 = (v34 - (_BYTE *)__p) >> 2;
        if (v17 <= v16 + 1) {
          unint64_t v17 = v16 + 1;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          int v19 = (char *)sub_100008BA0((uint64_t)&v34, v18);
        }
        else {
          int v19 = 0LL;
        }
        __int16 v20 = &v19[8 * v16];
        *(void *)__int16 v20 = v9;
        uint64_t v15 = v20 + 8;
        uint64_t v22 = (char *)__p;
        char v21 = v33;
        if (v33 != __p)
        {
          do
          {
            uint64_t v23 = *((void *)v21 - 1);
            v21 -= 8;
            *((void *)v20 - 1) = v23;
            v20 -= 8;
          }

          while (v21 != v22);
          char v21 = (char *)__p;
        }

        __n128 __p = v20;
        __int16 v33 = v15;
        double v34 = &v19[8 * v18];
        if (v21) {
          operator delete(v21);
        }
      }

      else
      {
        *(void *)__int16 v33 = v9;
        uint64_t v15 = v14 + 8;
      }

      __int16 v33 = v15;
      ++v7;
    }

    while (v7 != v8);
    BOOL v24 = v15 == __p;
    uint64_t v4 = 0LL;
    uint64_t v5 = a1;
    if (v24)
    {
LABEL_38:
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
        sub_10069023C(v5);
      }
    }

    else
    {
      uint64_t v25 = *(void *)(a1 + 24);
      char v26 = *(std::__shared_weak_count **)(a1 + 32);
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          unint64_t v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }

      sub_1004414A4(v25, 0LL, (uint64_t **)&__p);
      if (v26)
      {
        __int16 v29 = (unint64_t *)&v26->__shared_owners_;
        do
          unint64_t v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
  }

  sub_10053CFAC(v5, v4, (uint64_t)&__p);
  if (__p)
  {
    __int16 v33 = (char *)__p;
    operator delete(__p);
  }

void sub_10053D6C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15)
{
}

uint64_t sub_10053D710(uint64_t a1)
{
  __n128 __p = 0LL;
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v2 = *(void *)(a1 + 24);
  id v3 = *(std::__shared_weak_count **)(a1 + 32);
  v13[0] = v2;
  v13[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  int v6 = sub_100440730(v2, 0LL, &__p);
  int v7 = v6;
  if (!v3) {
    goto LABEL_8;
  }
  uint64_t v8 = (unint64_t *)&v3->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v7) {
      goto LABEL_9;
    }
  }

  else
  {
LABEL_8:
    if (v6)
    {
LABEL_9:
      if (__p)
      {
        uint64_t v15 = __p;
        operator delete(__p);
      }

      LOBYTE(__p) = 0;
      sub_100242CA4(&__p);
      uint64_t v10 = sub_1001C0410(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_10053D8A8, a1);
      sub_100242CD8(&__p);
      return v10;
    }
  }

  __int16 v11 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Returning primary services from cache",  (uint8_t *)v13,  2u);
  }

  (***(void (****)(void, uint64_t, void, void **))(a1 + 8))(*(void *)(a1 + 8), a1, 0LL, &__p);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }

  return 0LL;
}

void sub_10053D86C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10053D8A8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
}

void sub_10053D8C0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  __n128 __p = 0LL;
  __n128 v37 = 0LL;
  int v38 = 0LL;
  if (!(_DWORD)a2)
  {
    if (!a4) {
      goto LABEL_33;
    }
    int v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v9 = a1 + 44;
    uint64_t v10 = a4;
    do
    {
      __int16 v11 = (char *)operator new(0xC0uLL);
      __int16 v12 = v11;
      int v13 = (unsigned __int16 *)(a3 + 24 * v8);
      unsigned __int16 v14 = *v13;
      LOWORD(v13) = v13[1];
      *(_OWORD *)(v11 + 72) = *(_OWORD *)v9;
      unsigned int v15 = *(_DWORD *)(v9 + 16);
      *((_DWORD *)v11 + 4) = 0;
      *(void *)__int16 v11 = off_1008A0320;
      *((void *)v11 + 1) = v11 + 24;
      v11[96] = 1;
      *((void *)v11 + 22) = 0LL;
      *((void *)v11 + 23) = 0LL;
      *((void *)v11 + 21) = 0LL;
      *((void *)v11 + 14) = 0LL;
      *((void *)v11 + 15) = 0LL;
      *((void *)v11 + 13) = 0LL;
      v11[128] = 0;
      *((void *)v11 + 17) = 0LL;
      *((void *)v11 + 18) = 0LL;
      v11[160] = 0;
      *((void *)v11 + 19) = 0LL;
      *((_DWORD *)v11 + 6) = v14;
      *((_DWORD *)v11 + 11) = 0;
      *(_OWORD *)(v11 + 28) = xmmword_1006C3E08;
      *((_WORD *)v11 + 24) = (_WORD)v13;
      *((void *)v11 + 8) = 0LL;
      *(void *)(v11 + 50) = 0LL;
      *(void *)(v11 + 58) = 0LL;
      *((void *)v11 + 11) = v15;
      if (v7 >= v38)
      {
        uint64_t v16 = (v7 - (_BYTE *)__p) >> 3;
        unint64_t v17 = (v38 - (_BYTE *)__p) >> 2;
        if (v17 <= v16 + 1) {
          unint64_t v17 = v16 + 1;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          int v19 = (char *)sub_100008BA0((uint64_t)&v38, v18);
        }
        else {
          int v19 = 0LL;
        }
        __int16 v20 = &v19[8 * v16];
        *(void *)__int16 v20 = v12;
        int v7 = v20 + 8;
        uint64_t v22 = (char *)__p;
        char v21 = v37;
        if (v37 != __p)
        {
          do
          {
            uint64_t v23 = *((void *)v21 - 1);
            v21 -= 8;
            *((void *)v20 - 1) = v23;
            v20 -= 8;
          }

          while (v21 != v22);
          char v21 = (char *)__p;
        }

        __n128 __p = v20;
        __n128 v37 = v7;
        int v38 = &v19[8 * v18];
        if (v21) {
          operator delete(v21);
        }
      }

      else
      {
        *(void *)int v7 = v11;
        v7 += 8;
      }

      __n128 v37 = v7;
      ++v8;
    }

    while (v8 != v10);
    uint64_t v4 = 0LL;
    uint64_t v5 = a1;
    if (v7 == __p)
    {
LABEL_33:
      unint64_t v30 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v31 = v34;
        sub_1006344B4(v5 + 44, v34);
        if (v35 < 0) {
          __int16 v31 = (void **)v34[0];
        }
        id v32 = *(id *)(v5 + 16);
        *(_DWORD *)buf = 136446466;
        int v40 = v31;
        __int16 v41 = 2112;
        id v42 = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "No primary services with UUID %{public}s found on device %@",  buf,  0x16u);
        if (v35 < 0) {
          operator delete(v34[0]);
        }
      }
    }

    else
    {
      BOOL v24 = *(void **)(a1 + 24);
      uint64_t v25 = *(std::__shared_weak_count **)(a1 + 32);
      v34[0] = v24;
      v34[1] = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          unint64_t v27 = __ldxr(p_shared_owners);
        while (__stxr(v27 + 1, p_shared_owners));
      }

      sub_1004414A4((uint64_t)v24, (__int128 *)v9, (uint64_t **)&__p);
      if (v25)
      {
        unint64_t v28 = (unint64_t *)&v25->__shared_owners_;
        do
          unint64_t v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
  }

  sub_10053CFAC(v5, v4, (uint64_t)&__p);
  if (__p)
  {
    __n128 v37 = (char *)__p;
    operator delete(__p);
  }

void sub_10053DBF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
}

uint64_t sub_10053DC3C(uint64_t a1)
{
  __n128 __p = 0LL;
  BOOL v24 = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v2 = *(void **)(a1 + 24);
  id v3 = *(std::__shared_weak_count **)(a1 + 32);
  v21[0] = v2;
  v21[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  int v6 = sub_100440730((uint64_t)v2, (unsigned __int8 *)(a1 + 44), &__p);
  int v7 = v6;
  if (!v3) {
    goto LABEL_8;
  }
  uint64_t v8 = (unint64_t *)&v3->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v7) {
      goto LABEL_9;
    }
  }

  else
  {
LABEL_8:
    if (v6)
    {
LABEL_9:
      if (__p)
      {
        BOOL v24 = __p;
        operator delete(__p);
      }

      LOBYTE(__p) = 0;
      sub_100242CA4(&__p);
      unsigned int v10 = *(unsigned __int16 *)(a1 + 40);
      __int128 v26 = *(_OWORD *)(a1 + 44);
      int v27 = *(_DWORD *)(a1 + 60);
      sub_1001C0730(v10, (uint64_t)sub_10053DED0, (unsigned __int8 *)&v26, a1);
      uint64_t v12 = v11;
      sub_100242CD8(&__p);
      return v12;
    }
  }

  unsigned __int16 v14 = __p;
  int v13 = v24;
  unsigned int v15 = (os_log_s *)qword_1008F75B0;
  BOOL v16 = os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT);
  if (v13 == v14)
  {
    if (v16)
    {
      sub_1006344B4(a1 + 44, v21);
      if (v22 >= 0) {
        unint64_t v18 = v21;
      }
      else {
        unint64_t v18 = (void **)v21[0];
      }
      id v19 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 136446466;
      unint64_t v29 = v18;
      __int16 v30 = 2112;
      id v31 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Database cache fetching returned empty for service UUID %{public}s on device %@",  buf,  0x16u);
      if (v22 < 0) {
        operator delete(v21[0]);
      }
    }

    uint64_t v20 = sub_1002E8D94();
    (*(void (**)(uint64_t))(*(void *)v20 + 424LL))(v20);
    goto LABEL_9;
  }

  if (v16)
  {
    LOWORD(v21[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Using local database for discover services by UUID.",  (uint8_t *)v21,  2u);
  }

  (***(void (****)(void, uint64_t, void, void **))(a1 + 8))(*(void *)(a1 + 8), a1, 0LL, &__p);
  if (__p)
  {
    BOOL v24 = __p;
    operator delete(__p);
  }

  return 0LL;
}

void sub_10053DE88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10053DED0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
}

void sub_10053DEE8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  __n128 __p = 0LL;
  int v36 = 0LL;
  __n128 v37 = 0LL;
  if (!(_DWORD)a2)
  {
    if (!a4) {
      goto LABEL_33;
    }
    uint64_t v7 = 0LL;
    uint64_t v8 = a4;
    do
    {
      unint64_t v9 = (char *)operator new(0x70uLL);
      unsigned int v10 = (__int16 *)(a3 + 28 * v7);
      __int16 v11 = *v10;
      __int16 v12 = v10[1];
      __int16 v13 = v10[2];
      __n128 v41 = *(__n128 *)(v10 + 4);
      int v42 = *((_DWORD *)v10 + 6);
      sub_100634334(&v43, &v41);
      *((_WORD *)v9 + 12) = v11;
      *((_DWORD *)v9 + 4) = 0;
      *(void *)unint64_t v9 = &off_1008A02F0;
      *((void *)v9 + 1) = v9 + 24;
      *((_WORD *)v9 + 13) = 0;
      *((_DWORD *)v9 + 11) = 0;
      *(_OWORD *)(v9 + 28) = xmmword_1006C3E30;
      *((void *)v9 + 7) = 0LL;
      *((void *)v9 + 8) = 0LL;
      *((void *)v9 + 6) = 0LL;
      *((_WORD *)v9 + 36) = v12;
      *((_WORD *)v9 + 37) = v13;
      *(__n128 *)(v9 + 76) = v43;
      *((_DWORD *)v9 + 23) = v44;
      unsigned __int16 v14 = v36;
      if (v36 >= v37)
      {
        uint64_t v16 = (v36 - (_BYTE *)__p) >> 3;
        unint64_t v17 = (v37 - (_BYTE *)__p) >> 2;
        if (v17 <= v16 + 1) {
          unint64_t v17 = v16 + 1;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          id v19 = (char *)sub_100008BA0((uint64_t)&v37, v18);
        }
        else {
          id v19 = 0LL;
        }
        uint64_t v20 = &v19[8 * v16];
        *(void *)uint64_t v20 = v9;
        unsigned int v15 = v20 + 8;
        char v22 = (char *)__p;
        char v21 = v36;
        if (v36 != __p)
        {
          do
          {
            uint64_t v23 = *((void *)v21 - 1);
            v21 -= 8;
            *((void *)v20 - 1) = v23;
            v20 -= 8;
          }

          while (v21 != v22);
          char v21 = (char *)__p;
        }

        __n128 __p = v20;
        int v36 = v15;
        __n128 v37 = &v19[8 * v18];
        if (v21) {
          operator delete(v21);
        }
      }

      else
      {
        *(void *)int v36 = v9;
        unsigned int v15 = v14 + 8;
      }

      int v36 = v15;
      ++v7;
    }

    while (v7 != v8);
    uint64_t v4 = 0LL;
    uint64_t v5 = a1;
    if (v15 == __p)
    {
LABEL_33:
      __int16 v30 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
      {
        int v31 = *(unsigned __int16 *)(v5 + 42);
        int v32 = *(unsigned __int16 *)(v5 + 44);
        id v33 = *(id *)(v5 + 16);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v31;
        LOWORD(v39) = 1024;
        *(_DWORD *)((char *)&v39 + 2) = v32;
        HIWORD(v39) = 2112;
        id v40 = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "No included services found in range [0x%04x, 0x%04x] on device %@",  buf,  0x18u);
      }
    }

    else
    {
      BOOL v24 = *(void **)(a1 + 24);
      uint64_t v25 = *(std::__shared_weak_count **)(a1 + 32);
      *(void *)buf = v24;
      unsigned int v39 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          unint64_t v27 = __ldxr(p_shared_owners);
        while (__stxr(v27 + 1, p_shared_owners));
      }

      sub_100441B5C(v24, (uint64_t **)&__p, *(unsigned __int16 *)(a1 + 42), *(unsigned __int16 *)(a1 + 44));
      if (v25)
      {
        unint64_t v28 = (unint64_t *)&v25->__shared_owners_;
        do
          unint64_t v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
  }

  sub_10053CFAC(v5, v4, (uint64_t)&__p);
  if (__p)
  {
    int v36 = (char *)__p;
    operator delete(__p);
  }

void sub_10053E1F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t sub_10053E244(uint64_t a1)
{
  __n128 __p = 0LL;
  unsigned int v15 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v2 = *(void *)(a1 + 24);
  id v3 = *(std::__shared_weak_count **)(a1 + 32);
  v13[0] = v2;
  v13[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  int v6 = sub_100440AF8(v2, *(unsigned __int16 *)(a1 + 42), *(unsigned __int16 *)(a1 + 44), &__p);
  int v7 = v6;
  if (!v3) {
    goto LABEL_8;
  }
  uint64_t v8 = (unint64_t *)&v3->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v7) {
      goto LABEL_9;
    }
  }

  else
  {
LABEL_8:
    if (v6)
    {
LABEL_9:
      if (__p)
      {
        unsigned int v15 = __p;
        operator delete(__p);
      }

      LOBYTE(__p) = 0;
      sub_100242CA4(&__p);
      uint64_t v10 = sub_1001C0AAC( *(unsigned __int16 *)(a1 + 40),  (uint64_t)sub_10053E3E8,  *(_WORD *)(a1 + 42),  *(_WORD *)(a1 + 44),  a1);
      sub_100242CD8(&__p);
      return v10;
    }
  }

  __int16 v11 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Using local database for discover included services.",  (uint8_t *)v13,  2u);
  }

  (***(void (****)(void, uint64_t, void, void **))(a1 + 8))(*(void *)(a1 + 8), a1, 0LL, &__p);
  if (__p)
  {
    unsigned int v15 = __p;
    operator delete(__p);
  }

  return 0LL;
}

void sub_10053E3AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10053E3E8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
}

void sub_10053E400(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  __n128 __p = 0LL;
  unint64_t v27 = 0LL;
  uint64_t v28 = 0LL;
  if (!(_DWORD)a2)
  {
    if (!a4) {
      goto LABEL_43;
    }
    uint64_t v6 = a4;
    int v7 = (unsigned __int16 *)(a3 + 4);
    do
    {
      __n128 v62 = 0uLL;
      int v63 = 0;
      __n128 v60 = *(__n128 *)(v7 + 2);
      int v61 = *((_DWORD *)v7 + 5);
      sub_100634334(&v62, &v60);
      int v9 = *(v7 - 2);
      if (v9 == *v7)
      {
        uint64_t v10 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
        {
          id v11 = *(id *)(a1 + 16);
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v9;
          *(_WORD *)double v34 = 2112;
          *(void *)&void v34[2] = v11;
          _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Ignoring invalid characteristic with identical handle and value handle (0x%04x) on device %@",  buf,  0x12u);
        }
      }

      else
      {
        int v59 = 0;
        __int128 v58 = xmmword_1006C3E08;
        int v57 = 0;
        __int128 v56 = xmmword_1006C3E1C;
        int v55 = 0;
        __int128 v54 = xmmword_1006C3E30;
        int v53 = 0;
        __int128 v52 = xmmword_1006C3E44;
        int v51 = 0;
        __int128 v50 = xmmword_1006C3E58;
        int v49 = 0;
        __int128 v48 = xmmword_1006C3E6C;
        int v47 = 0;
        __int128 v46 = xmmword_1006C3E80;
        if (sub_1001BEC7C((unsigned __int8 *)&v62, (unsigned __int8 *)&v46)
          || (v45 = 0, __int128 v44 = xmmword_1006C3E94, sub_1001BEC7C((unsigned __int8 *)&v62, (unsigned __int8 *)&v44))
          || (v43 = 0, __int128 v42 = xmmword_1006C3EA8, sub_1001BEC7C((unsigned __int8 *)&v62, (unsigned __int8 *)&v42))
          || (v41 = 0, __int128 v40 = xmmword_1006C3EBC, sub_1001BEC7C((unsigned __int8 *)&v62, (unsigned __int8 *)&v40)))
        {
LABEL_20:
          __int16 v12 = (os_log_s *)qword_1008F75B0;
          if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
          {
            sub_1006344B4((uint64_t)&v62, buf);
            if (v35 >= 0) {
              __int16 v13 = buf;
            }
            else {
              __int16 v13 = *(uint8_t **)buf;
            }
            id v14 = *(id *)(a1 + 16);
            *(_DWORD *)int v36 = 136446466;
            __n128 v37 = v13;
            __int16 v38 = 2112;
            id v39 = v14;
            _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Ignoring invalid characteristic with invalid UUID %{public}s on device %@",  v36,  0x16u);
            if (v35 < 0) {
              operator delete(*(void **)buf);
            }
          }
        }

        else
        {
          unsigned int v15 = (char *)operator new(0x88uLL);
          __int16 v16 = *(v7 - 2);
          char v17 = *((_BYTE *)v7 - 2);
          __int16 v25 = *v7;
          __n128 v29 = *(__n128 *)(v7 + 2);
          int v30 = *((_DWORD *)v7 + 5);
          sub_100634334(&v31, &v29);
          *((_WORD *)v15 + 12) = v16;
          *((_DWORD *)v15 + 4) = 0;
          *((void *)v15 + 1) = v15 + 24;
          *(void *)unsigned int v15 = off_1008A02C0;
          *((_OWORD *)v15 + 6) = 0u;
          *((_OWORD *)v15 + 7) = 0u;
          v15[128] = 0;
          *((_WORD *)v15 + 13) = 0;
          *((_DWORD *)v15 + 11) = 0;
          *(_OWORD *)(v15 + 28) = xmmword_1006C3E44;
          *((void *)v15 + 7) = 0LL;
          *((void *)v15 + 8) = 0LL;
          *((void *)v15 + 6) = 0LL;
          v15[72] = v17;
          v15[73] = 0;
          *((_WORD *)v15 + 37) = v25;
          __n128 v18 = v31;
          *((_DWORD *)v15 + 23) = v32;
          *(__n128 *)(v15 + 76) = v18;
          *(void *)buf = v15;
          sub_100381E90(&__p, buf);
        }
      }

      v7 += 14;
      --v6;
    }

    while (v6);
    if (v27 == __p)
    {
LABEL_43:
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
        sub_1006902B4(a1);
      }
    }

    else
    {
      id v19 = *(void **)(a1 + 24);
      uint64_t v20 = *(std::__shared_weak_count **)(a1 + 32);
      *(void *)buf = v19;
      *(void *)double v34 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          unint64_t v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }

      sub_1004423CC(v19, 0LL, (uint64_t **)&__p, *(unsigned __int16 *)(a1 + 42), *(unsigned __int16 *)(a1 + 44));
      if (v20)
      {
        uint64_t v23 = (unint64_t *)&v20->__shared_owners_;
        do
          unint64_t v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
  }

  sub_10053CFAC(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    unint64_t v27 = __p;
    operator delete(__p);
  }

void sub_10053E8CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10053E91C(uint64_t a1)
{
  __n128 __p = 0LL;
  unsigned int v15 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v2 = *(void *)(a1 + 24);
  id v3 = *(std::__shared_weak_count **)(a1 + 32);
  v13[0] = v2;
  v13[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  int v6 = sub_100440D20(v2, 0LL, *(unsigned __int16 *)(a1 + 42), *(unsigned __int16 *)(a1 + 44), &__p);
  int v7 = v6;
  if (!v3) {
    goto LABEL_8;
  }
  uint64_t v8 = (unint64_t *)&v3->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v7) {
      goto LABEL_9;
    }
  }

  else
  {
LABEL_8:
    if (v6)
    {
LABEL_9:
      if (__p)
      {
        unsigned int v15 = __p;
        operator delete(__p);
      }

      LOBYTE(__p) = 0;
      sub_100242CA4(&__p);
      uint64_t v10 = sub_1001C0E30( *(unsigned __int16 *)(a1 + 40),  (uint64_t)sub_10053EAC4,  *(_WORD *)(a1 + 42),  *(_WORD *)(a1 + 44),  a1);
      sub_100242CD8(&__p);
      return v10;
    }
  }

  id v11 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Using local database for discover all characteristics.",  (uint8_t *)v13,  2u);
  }

  (***(void (****)(void, uint64_t, void, void **))(a1 + 8))(*(void *)(a1 + 8), a1, 0LL, &__p);
  if (__p)
  {
    unsigned int v15 = __p;
    operator delete(__p);
  }

  return 0LL;
}

void sub_10053EA88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10053EAC4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
}

void sub_10053EADC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  __n128 __p = 0LL;
  int v45 = 0LL;
  __int128 v46 = 0LL;
  if (!(_DWORD)a2)
  {
    if (!a4) {
      goto LABEL_37;
    }
    uint64_t v7 = 0LL;
    uint64_t v8 = a4;
    do
    {
      unint64_t v9 = (unsigned __int16 *)(a3 + 28 * v7);
      int v10 = *v9;
      int v11 = v9[2];
      if (v10 == v11)
      {
        __int16 v12 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
        {
          id v13 = *(id *)(a1 + 16);
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v10;
          *(_WORD *)&uint8_t buf[8] = 2112;
          *(void *)&buf[10] = v13;
          _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Ignoring invalid characteristic with identical handle and value handle (0x%04x) on device %@",  buf,  0x12u);
        }
      }

      else
      {
        id v14 = (char *)operator new(0x88uLL);
        uint64_t v15 = a3 + 28 * v7;
        char v16 = *(_BYTE *)(v15 + 2);
        __n128 v52 = *(__n128 *)(v15 + 8);
        int v53 = *(_DWORD *)(v15 + 24);
        sub_100634334(&v54, &v52);
        *((_WORD *)v14 + 12) = v10;
        *((_DWORD *)v14 + 4) = 0;
        *(void *)id v14 = off_1008A02C0;
        *((void *)v14 + 1) = v14 + 24;
        *((_OWORD *)v14 + 6) = 0u;
        *((_OWORD *)v14 + 7) = 0u;
        v14[128] = 0;
        *((_WORD *)v14 + 13) = 0;
        *((_DWORD *)v14 + 11) = 0;
        *(_OWORD *)(v14 + 28) = xmmword_1006C3E44;
        *((void *)v14 + 7) = 0LL;
        *((void *)v14 + 8) = 0LL;
        *((void *)v14 + 6) = 0LL;
        v14[72] = v16;
        v14[73] = 0;
        *((_WORD *)v14 + 37) = v11;
        __n128 v17 = v54;
        *((_DWORD *)v14 + 23) = v55;
        *(__n128 *)(v14 + 76) = v17;
        __n128 v18 = v45;
        if (v45 >= v46)
        {
          uint64_t v20 = (v45 - (_BYTE *)__p) >> 3;
          unint64_t v21 = (v46 - (_BYTE *)__p) >> 2;
          if (v21 <= v20 + 1) {
            unint64_t v21 = v20 + 1;
          }
          else {
            unint64_t v22 = v21;
          }
          if (v22) {
            uint64_t v23 = (char *)sub_100008BA0((uint64_t)&v46, v22);
          }
          else {
            uint64_t v23 = 0LL;
          }
          unint64_t v24 = &v23[8 * v20];
          *(void *)unint64_t v24 = v14;
          id v19 = v24 + 8;
          __int128 v26 = (char *)__p;
          __int16 v25 = v45;
          if (v45 != __p)
          {
            do
            {
              uint64_t v27 = *((void *)v25 - 1);
              v25 -= 8;
              *((void *)v24 - 1) = v27;
              v24 -= 8;
            }

            while (v25 != v26);
            __int16 v25 = (char *)__p;
          }

          __n128 __p = v24;
          int v45 = v19;
          __int128 v46 = &v23[8 * v22];
          if (v25) {
            operator delete(v25);
          }
        }

        else
        {
          *(void *)int v45 = v14;
          id v19 = v18 + 8;
        }

        int v45 = v19;
      }

      ++v7;
    }

    while (v7 != v8);
    uint64_t v4 = 0LL;
    uint64_t v5 = a1;
    if (v45 == __p)
    {
LABEL_37:
      double v34 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
      {
        char v35 = v42;
        sub_1006344B4(v5 + 48, v42);
        uint64_t v36 = v4;
        if (v43 < 0) {
          char v35 = (void **)v42[0];
        }
        int v37 = *(unsigned __int16 *)(v5 + 42);
        int v38 = *(unsigned __int16 *)(v5 + 44);
        uint64_t v39 = v5;
        id v40 = *(id *)(v5 + 16);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = v35;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v37;
        __int16 v48 = 1024;
        int v49 = v38;
        __int16 v50 = 2112;
        id v51 = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "No characteristics with UUID %{public}s found in range [0x%04x, 0x%04x] on device %@",  buf,  0x22u);
        if (v43 < 0) {
          operator delete(v42[0]);
        }

        uint64_t v4 = v36;
        uint64_t v5 = v39;
      }
    }

    else
    {
      uint64_t v28 = *(void **)(a1 + 24);
      __n128 v29 = *(std::__shared_weak_count **)(a1 + 32);
      *(void *)buf = v28;
      *(void *)&uint8_t buf[8] = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          unint64_t v31 = __ldxr(p_shared_owners);
        while (__stxr(v31 + 1, p_shared_owners));
      }

      sub_1004423CC( v28,  (__int128 *)(a1 + 48),  (uint64_t **)&__p,  *(unsigned __int16 *)(a1 + 42),  *(unsigned __int16 *)(a1 + 44));
      if (v29)
      {
        int v32 = (unint64_t *)&v29->__shared_owners_;
        do
          unint64_t v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
  }

  sub_10053CFAC(v5, v4, (uint64_t)&__p);
  if (__p)
  {
    int v45 = (char *)__p;
    operator delete(__p);
  }

void sub_10053EECC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20, char a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10053EF1C(uint64_t a1)
{
  __n128 __p = 0LL;
  __n128 v17 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v2 = *(void *)(a1 + 24);
  id v3 = *(std::__shared_weak_count **)(a1 + 32);
  v15[0] = v2;
  v15[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  int v6 = sub_100440D20( v2,  (unsigned __int8 *)(a1 + 48),  *(unsigned __int16 *)(a1 + 42),  *(unsigned __int16 *)(a1 + 44),  &__p);
  int v7 = v6;
  if (!v3) {
    goto LABEL_8;
  }
  uint64_t v8 = (unint64_t *)&v3->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v7) {
      goto LABEL_9;
    }
  }

  else
  {
LABEL_8:
    if (v6)
    {
LABEL_9:
      if (__p)
      {
        __n128 v17 = __p;
        operator delete(__p);
      }

      LOBYTE(__p) = 0;
      sub_100242CA4(&__p);
      unsigned int v10 = *(unsigned __int16 *)(a1 + 40);
      __n128 v19 = *(__n128 *)(a1 + 48);
      int v20 = *(_DWORD *)(a1 + 64);
      sub_1001C11D4(v10, (uint64_t)sub_10053F110, &v19, *(_WORD *)(a1 + 42), *(_WORD *)(a1 + 44), a1);
      uint64_t v12 = v11;
      sub_100242CD8(&__p);
      return v12;
    }
  }

  id v13 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v15[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Using local database for discover characteristics by UUID.",  (uint8_t *)v15,  2u);
  }

  (***(void (****)(void, uint64_t, void, void **))(a1 + 8))(*(void *)(a1 + 8), a1, 0LL, &__p);
  if (__p)
  {
    __n128 v17 = __p;
    operator delete(__p);
  }

  return 0LL;
}

void sub_10053F0CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10053F110(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
}

void sub_10053F128(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = a2;
  __n128 __p = 0LL;
  unint64_t v33 = 0LL;
  double v34 = 0LL;
  if ((_DWORD)a2) {
    goto LABEL_2;
  }
  if (a4)
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = a4;
    while (1)
    {
      memset(buf, 0, sizeof(buf));
      LODWORD(v36) = 0;
      uint64_t v9 = a3 + 40 * v7;
      __n128 v55 = *(__n128 *)(v9 + 4);
      int v56 = *(_DWORD *)(v9 + 20);
      sub_100634334((__n128 *)buf, &v55);
      int v54 = 0;
      __int128 v31 = xmmword_1006C3E58;
      __int128 v53 = xmmword_1006C3E58;
      int v52 = 0;
      __int128 v51 = xmmword_1006C3E6C;
      if (sub_1001BEC7C(buf, (unsigned __int8 *)&v51))
      {
        unsigned int v10 = (char *)operator new(0x58uLL);
        *((_WORD *)v10 + 12) = *(_WORD *)v9;
        *((_DWORD *)v10 + 4) = 0;
        v10[20] = 0;
        *(void *)unsigned int v10 = &off_1008A01B0;
        *((void *)v10 + 1) = v10 + 24;
        *((_WORD *)v10 + 13) = 0;
        *((_DWORD *)v10 + 11) = 0;
        *(_OWORD *)(v10 + 28) = xmmword_1006C3E6C;
        *((_OWORD *)v10 + 3) = 0u;
        *((_OWORD *)v10 + 4) = 0u;
        *((void *)v10 + 10) = 0LL;
        sub_1005317FC((uint64_t)v10, 0LL, 0LL);
        v10[20] = 0;
      }

      else
      {
        int v50 = 0;
        __int128 v49 = xmmword_1006C3E80;
        if (sub_1001BEC7C(buf, (unsigned __int8 *)&v49)
          || (int v48 = 0, v47 = xmmword_1006C3E94, sub_1001BEC7C(buf, (unsigned __int8 *)&v47)))
        {
          unsigned int v10 = (char *)operator new(0x50uLL);
          *((_WORD *)v10 + 12) = *(_WORD *)v9;
          *((_DWORD *)v10 + 4) = 0;
          v10[20] = 0;
          *(void *)unsigned int v10 = &off_1008A0178;
          *((void *)v10 + 1) = v10 + 24;
          *((_WORD *)v10 + 13) = 0;
          *(_OWORD *)(v10 + 28) = *(_OWORD *)buf;
          *((_DWORD *)v10 + 11) = (_DWORD)v36;
          goto LABEL_15;
        }

        int v46 = 0;
        __int128 v31 = xmmword_1006C3EA8;
        __int128 v45 = xmmword_1006C3EA8;
        if (sub_1001BEC7C(buf, (unsigned __int8 *)&v45))
        {
          unsigned int v10 = (char *)operator new(0x50uLL);
          *((_WORD *)v10 + 12) = *(_WORD *)v9;
          *((_DWORD *)v10 + 4) = 0;
          v10[20] = 0;
          *(void *)unsigned int v10 = &off_1008A0220;
          *((void *)v10 + 1) = v10 + 24;
          goto LABEL_9;
        }

        int v44 = 0;
        __int128 v43 = xmmword_1006C3E08;
        if (sub_1001BEC7C(buf, (unsigned __int8 *)&v43)
          || (v42 = 0, __int128 v41 = xmmword_1006C3E1C, sub_1001BEC7C(buf, (unsigned __int8 *)&v41))
          || (int v40 = 0, v39 = xmmword_1006C3E30, sub_1001BEC7C(buf, (unsigned __int8 *)&v39))
          || (v38 = 0, __int128 v37 = xmmword_1006C3E44, sub_1001BEC7C(buf, (unsigned __int8 *)&v37)))
        {
          uint64_t v12 = v33;
          goto LABEL_42;
        }

        unsigned int v10 = (char *)operator new(0x58uLL);
        *((_WORD *)v10 + 12) = *(_WORD *)v9;
        *((_DWORD *)v10 + 4) = 0;
        v10[20] = 0;
        *(void *)unsigned int v10 = &off_1008A0258;
        *((void *)v10 + 1) = v10 + 24;
        *((_WORD *)v10 + 13) = 0;
        *(_OWORD *)(v10 + 28) = *(_OWORD *)(v9 + 4);
        *((_DWORD *)v10 + 11) = *(_DWORD *)(v9 + 20);
        *((_OWORD *)v10 + 3) = 0u;
        *((_OWORD *)v10 + 4) = 0u;
        *((void *)v10 + 10) = 0LL;
        sub_100531D24((uint64_t)v10, 0LL, 0LL);
      }

void sub_10053F6D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20, char a21)
{
}

uint64_t sub_10053F72C(uint64_t a1)
{
  __n128 __p = 0LL;
  unint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v2 = *(void *)(a1 + 24);
  id v3 = *(std::__shared_weak_count **)(a1 + 32);
  v13[0] = v2;
  v13[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  int v6 = sub_1004411EC(v2, *(_WORD *)(a1 + 42), *(unsigned __int16 *)(a1 + 44), &__p);
  int v7 = v6;
  if (!v3) {
    goto LABEL_8;
  }
  uint64_t v8 = (unint64_t *)&v3->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v7) {
      goto LABEL_9;
    }
  }

  else
  {
LABEL_8:
    if (v6)
    {
LABEL_9:
      if (__p)
      {
        unint64_t v15 = __p;
        operator delete(__p);
      }

      LOBYTE(__p) = 0;
      sub_100242CA4(&__p);
      uint64_t v10 = sub_1001C12DC( *(unsigned __int16 *)(a1 + 40),  (uint64_t)sub_10053F8D0,  *(_WORD *)(a1 + 42),  *(_WORD *)(a1 + 44),  a1);
      sub_100242CD8(&__p);
      return v10;
    }
  }

  uint64_t v11 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Using local database for discover all descriptors.",  (uint8_t *)v13,  2u);
  }

  (***(void (****)(void, uint64_t, void, void **))(a1 + 8))(*(void *)(a1 + 8), a1, 0LL, &__p);
  if (__p)
  {
    unint64_t v15 = __p;
    operator delete(__p);
  }

  return 0LL;
}

void sub_10053F894( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10053F8D0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
}

void sub_10053F8E8(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4)
{
  __n128 __p = 0LL;
  unint64_t v30 = 0LL;
  unint64_t v31 = 0LL;
  if ((_DWORD)a2) {
    goto LABEL_37;
  }
  uint64_t v8 = operator new(0x58uLL);
  __int16 v9 = *(_WORD *)(a1 + 42);
  sub_10056AB04(&v27, a3, a4);
  sub_10038BEAC((uint64_t)v8, v9, (uint64_t)&v27);
  uint64_t v27 = &off_10087FAA8;
  if (v28) {
    sub_1002CD254(v28);
  }
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(unsigned int **)(a1 + 32);
  uint64_t v27 = (uint64_t (**)())v10;
  unint64_t v28 = v11;
  if (v11)
  {
    uint64_t v12 = (unint64_t *)(v11 + 2);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  sub_100442C20(v10, (uint64_t)v8, 1);
  if (v11)
  {
    unint64_t v14 = (unint64_t *)(v11 + 2);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(unsigned int *))(*(void *)v11 + 16LL))(v11);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
    }
  }

  uint64_t v16 = v30;
  if ((unint64_t)v30 >= v31)
  {
    uint64_t v18 = (v30 - (_BYTE *)__p) >> 3;
    unint64_t v19 = (uint64_t)(v31 - (void)__p) >> 2;
    if (v19 <= v18 + 1) {
      unint64_t v19 = v18 + 1;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20) {
      unint64_t v21 = (char *)sub_100008BA0((uint64_t)&v31, v20);
    }
    else {
      unint64_t v21 = 0LL;
    }
    int v22 = &v21[8 * v18];
    int v23 = &v21[8 * v20];
    *(void *)int v22 = v8;
    __n128 v17 = v22 + 8;
    __int16 v25 = (char *)__p;
    id v24 = v30;
    if (v30 != __p)
    {
      do
      {
        uint64_t v26 = *((void *)v24 - 1);
        v24 -= 8;
        *((void *)v22 - 1) = v26;
        v22 -= 8;
      }

      while (v24 != v25);
      id v24 = (char *)__p;
    }

    __n128 __p = v22;
    unint64_t v30 = v17;
    unint64_t v31 = (unint64_t)v23;
    if (v24) {
      operator delete(v24);
    }
  }

  else
  {
    *(void *)unint64_t v30 = v8;
    __n128 v17 = v16 + 8;
  }

  unint64_t v30 = v17;
  if (__p == v17)
  {
LABEL_37:
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100690354();
    }
  }

  sub_10053CFAC(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    unint64_t v30 = (char *)__p;
    operator delete(__p);
  }

void sub_10053FAE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10053FB48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  id v3 = *(std::__shared_weak_count **)(a1 + 32);
  v17.n128_u64[0] = v2;
  v17.n128_u64[1] = (unint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  int v6 = sub_1004438FC(v2, *(unsigned __int16 *)(a1 + 44));
  int v7 = v6;
  if (!v3) {
    goto LABEL_8;
  }
  uint64_t v8 = (unint64_t *)&v3->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_8:
    if (v6) {
      goto LABEL_9;
    }
LABEL_17:
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_1006903CC(a1 + 44, a1);
    }
    return 1LL;
  }

  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  if (!v7) {
    goto LABEL_17;
  }
LABEL_9:
  uint64_t v10 = v7[1];
  int v11 = *(_DWORD *)(v10 + 20);
  __n128 v17 = *(__n128 *)(v10 + 4);
  int v18 = v11;
  sub_100634334(&v16, &v17);
  int v15 = 0;
  __int128 v14 = xmmword_1006C3E44;
  if (!sub_1001BEC7C((unsigned __int8 *)&v16, (unsigned __int8 *)&v14))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_1006904A8(a1 + 44, a1);
    }
    return 1LL;
  }

  if ((v7[9] & 2) != 0)
  {
    v17.n128_u8[0] = 0;
    sub_100242CA4(&v17);
    uint64_t v12 = sub_1001C1540(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_10053FD50, *(_WORD *)(a1 + 42), a1);
    sub_100242CD8(&v17);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100690444();
    }
    return 2LL;
  }

  return v12;
}

void sub_10053FD24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10053FD50(uint64_t a1, const void *a2, unsigned int a3, uint64_t a4)
{
}

void sub_10053FD68(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = a2;
  __n128 __p = 0LL;
  int v32 = 0LL;
  unint64_t v33 = 0LL;
  if (!a4) {
    goto LABEL_31;
  }
  unsigned int v29 = a2;
  uint64_t v7 = 0LL;
  uint64_t v8 = a4;
  do
  {
    unint64_t v9 = operator new(0x58uLL);
    uint64_t v10 = a3 + 260 * v7;
    __int16 v11 = *(_WORD *)v10;
    sub_10056AB04(&v34, (const void *)(v10 + 2), *(unsigned __int16 *)(v10 + 258));
    sub_10038BEAC((uint64_t)v9, v11, (uint64_t)&v34);
    double v34 = &off_10087FAA8;
    if (v35) {
      sub_1002CD254(v35);
    }
    uint64_t v12 = *(void *)(a1 + 24);
    unint64_t v13 = *(unsigned int **)(a1 + 32);
    double v34 = (uint64_t (**)())v12;
    char v35 = v13;
    if (v13)
    {
      __int128 v14 = (unint64_t *)(v13 + 2);
      do
        unint64_t v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }

    sub_100442C20(v12, (uint64_t)v9, 0);
    if (v13)
    {
      __n128 v16 = (unint64_t *)(v13 + 2);
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        (*(void (**)(unsigned int *))(*(void *)v13 + 16LL))(v13);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
      }
    }

    int v18 = v32;
    if (v32 >= v33)
    {
      uint64_t v20 = (v32 - (_BYTE *)__p) >> 3;
      unint64_t v21 = (v33 - (_BYTE *)__p) >> 2;
      if (v21 <= v20 + 1) {
        unint64_t v21 = v20 + 1;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22) {
        int v23 = (char *)sub_100008BA0((uint64_t)&v33, v22);
      }
      else {
        int v23 = 0LL;
      }
      id v24 = &v23[8 * v20];
      *(void *)id v24 = v9;
      unint64_t v19 = v24 + 8;
      uint64_t v26 = (char *)__p;
      __int16 v25 = v32;
      if (v32 != __p)
      {
        do
        {
          uint64_t v27 = *((void *)v25 - 1);
          v25 -= 8;
          *((void *)v24 - 1) = v27;
          v24 -= 8;
        }

        while (v25 != v26);
        __int16 v25 = (char *)__p;
      }

      __n128 __p = v24;
      int v32 = v19;
      unint64_t v33 = &v23[8 * v22];
      if (v25) {
        operator delete(v25);
      }
    }

    else
    {
      *(void *)int v32 = v9;
      unint64_t v19 = v18 + 8;
    }

    int v32 = v19;
    ++v7;
  }

  while (v7 != v8);
  uint64_t v4 = v29;
  if (__p == v19)
  {
LABEL_31:
    unint64_t v28 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
    {
      sub_1006344B4(a1 + 44, v30);
      sub_100690520((char *)v30, a1, (uint64_t)&v34, v28);
    }
  }

  sub_10053CFAC(a1, v4, (uint64_t)&__p);
  if (__p)
  {
    int v32 = (char *)__p;
    operator delete(__p);
  }

void sub_10053FFD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

uint64_t sub_100540044(uint64_t a1)
{
  char v5 = 0;
  sub_100242CA4(&v5);
  unsigned int v2 = *(unsigned __int16 *)(a1 + 40);
  __int128 v6 = *(_OWORD *)(a1 + 44);
  int v7 = *(_DWORD *)(a1 + 60);
  uint64_t v3 = sub_1001C176C( v2,  (uint64_t)sub_100540100,  &v6,  *(_WORD *)(a1 + 64),  *(unsigned __int16 *)(a1 + 66),  *(_WORD *)(a1 + 68),  a1);
  sub_100242CD8(&v5);
  return v3;
}

void sub_1005400E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100540100(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
}

void sub_100540118(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4)
{
  __n128 __p = 0LL;
  unint64_t v30 = 0LL;
  unint64_t v31 = 0LL;
  if ((_DWORD)a2) {
    goto LABEL_37;
  }
  uint64_t v8 = operator new(0x58uLL);
  __int16 v9 = *(_WORD *)(a1 + 42);
  sub_10056AB04(&v27, a3, a4);
  sub_10038BEAC((uint64_t)v8, v9, (uint64_t)&v27);
  uint64_t v27 = &off_10087FAA8;
  if (v28) {
    sub_1002CD254(v28);
  }
  uint64_t v10 = *(void *)(a1 + 24);
  __int16 v11 = *(unsigned int **)(a1 + 32);
  uint64_t v27 = (uint64_t (**)())v10;
  unint64_t v28 = v11;
  if (v11)
  {
    uint64_t v12 = (unint64_t *)(v11 + 2);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  sub_100442C20(v10, (uint64_t)v8, 1);
  if (v11)
  {
    __int128 v14 = (unint64_t *)(v11 + 2);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(unsigned int *))(*(void *)v11 + 16LL))(v11);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
    }
  }

  __n128 v16 = v30;
  if ((unint64_t)v30 >= v31)
  {
    uint64_t v18 = (v30 - (_BYTE *)__p) >> 3;
    unint64_t v19 = (uint64_t)(v31 - (void)__p) >> 2;
    if (v19 <= v18 + 1) {
      unint64_t v19 = v18 + 1;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20) {
      unint64_t v21 = (char *)sub_100008BA0((uint64_t)&v31, v20);
    }
    else {
      unint64_t v21 = 0LL;
    }
    unint64_t v22 = &v21[8 * v18];
    int v23 = &v21[8 * v20];
    *(void *)unint64_t v22 = v8;
    unint64_t v17 = v22 + 8;
    __int16 v25 = (char *)__p;
    id v24 = v30;
    if (v30 != __p)
    {
      do
      {
        uint64_t v26 = *((void *)v24 - 1);
        v24 -= 8;
        *((void *)v22 - 1) = v26;
        v22 -= 8;
      }

      while (v24 != v25);
      id v24 = (char *)__p;
    }

    __n128 __p = v22;
    unint64_t v30 = v17;
    unint64_t v31 = (unint64_t)v23;
    if (v24) {
      operator delete(v24);
    }
  }

  else
  {
    *(void *)unint64_t v30 = v8;
    unint64_t v17 = v16 + 8;
  }

  unint64_t v30 = v17;
  if (__p == v17)
  {
LABEL_37:
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_1006905E8();
    }
  }

  sub_10053CFAC(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    unint64_t v30 = (char *)__p;
    operator delete(__p);
  }

void sub_100540318( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100540378(uint64_t a1)
{
  char v4 = 0;
  sub_100242CA4(&v4);
  uint64_t v2 = sub_1001C1AFC( *(unsigned __int16 *)(a1 + 40),  (uint64_t)sub_1005403E8,  *(_WORD *)(a1 + 42),  *(_WORD *)(a1 + 44),  a1);
  sub_100242CD8(&v4);
  return v2;
}

void sub_1005403D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1005403E8(uint64_t a1, const void *a2, unsigned int a3, uint64_t a4)
{
}

void sub_100540400(uint64_t a1, uint64_t a2)
{
  __n128 __p = 0LL;
  unint64_t v28 = 0LL;
  unsigned int v29 = 0LL;
  if (!(_DWORD)a2)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    char v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }

    uint64_t v8 = (_BYTE *)sub_100443B7C(v4, *(unsigned __int16 *)(a1 + 42));
    if (v5)
    {
      __int16 v9 = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }

    if (v8)
    {
      if (sub_1005315DC(v8))
      {
        __int16 v11 = *(void **)(a1 + 24);
        uint64_t v12 = *(std::__shared_weak_count **)(a1 + 32);
        if (v12)
        {
          unint64_t v13 = (unint64_t *)&v12->__shared_owners_;
          do
            unint64_t v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }

        sub_10044389C(v11, (uint64_t)v8);
        if (v12)
        {
          unint64_t v15 = (unint64_t *)&v12->__shared_owners_;
          do
            unint64_t v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }

        uint64_t v17 = (v28 - (_BYTE *)__p) >> 3;
        unint64_t v18 = (v29 - (_BYTE *)__p) >> 2;
        if (v18 <= v17 + 1) {
          unint64_t v18 = v17 + 1;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          unint64_t v20 = (char *)sub_100008BA0((uint64_t)&v29, v19);
        }
        else {
          unint64_t v20 = 0LL;
        }
        unint64_t v21 = &v20[8 * v17];
        unint64_t v22 = &v20[8 * v19];
        *(void *)unint64_t v21 = v8;
        int v23 = v21 + 8;
        __int16 v25 = (char *)__p;
        id v24 = v28;
        if (v28 != __p)
        {
          do
          {
            uint64_t v26 = *((void *)v24 - 1);
            v24 -= 8;
            *((void *)v21 - 1) = v26;
            v21 -= 8;
          }

          while (v24 != v25);
          id v24 = (char *)__p;
        }

        __n128 __p = v21;
        unint64_t v28 = v23;
        unsigned int v29 = v22;
        if (v24) {
          operator delete(v24);
        }
        unint64_t v28 = v23;
      }

      else
      {
        (*(void (**)(_BYTE *))(*(void *)v8 + 8LL))(v8);
      }
    }
  }

  if (__p == v28 && os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
    sub_100690660();
  }
  sub_10053CFAC(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    unint64_t v28 = (char *)__p;
    operator delete(__p);
  }

void sub_100540644( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10054067C(uint64_t a1)
{
  char v4 = 0;
  sub_100242CA4(&v4);
  uint64_t v2 = sub_1001C1540(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_1005406E8, *(_WORD *)(a1 + 42), a1);
  sub_100242CD8(&v4);
  return v2;
}

void sub_1005406D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1005406E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100540700(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2 && os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
    sub_1006906D8();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, a2);
}

uint64_t sub_100540770(uint64_t a1)
{
  char v8 = 0;
  sub_100242CA4(&v8);
  unsigned int v2 = *(unsigned __int16 *)(a1 + 40);
  __int16 v3 = *(_WORD *)(a1 + 42);
  uint64_t v4 = sub_10056AAF0(a1 + 48);
  __int16 v5 = sub_10056AAD8(a1 + 48);
  uint64_t v6 = sub_1001C1BB0(v2, (uint64_t)sub_100540814, v3, v4, v5, a1);
  sub_100242CD8(&v8);
  return v6;
}

void sub_100540800( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100540814(uint64_t a1, uint64_t a2)
{
  return sub_100540700(a2, a1);
}

uint64_t sub_100540824(unsigned __int16 *a1)
{
  char v8 = 0;
  sub_100242CA4(&v8);
  unsigned int v2 = a1[20];
  __int16 v3 = a1[21];
  uint64_t v4 = sub_10056AAF0((uint64_t)(a1 + 24));
  __int16 v5 = sub_10056AAD8((uint64_t)(a1 + 24));
  uint64_t v6 = sub_1001C1BB0(v2, 0LL, v3, v4, v5, (uint64_t)a1);
  sub_100242CD0(&v8);
  if (!(_DWORD)v6) {
    (*(void (**)(unsigned __int16 *, void))(*(void *)a1 + 24LL))(a1, 0LL);
  }
  sub_100242CD8(&v8);
  return v6;
}

void sub_1005408D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1005408E4(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2 && os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
    sub_10069074C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, a2);
}

uint64_t sub_100540954(uint64_t a1)
{
  char v8 = 0;
  sub_100242CA4(&v8);
  unsigned int v2 = *(unsigned __int16 *)(a1 + 40);
  __int16 v3 = *(_WORD *)(a1 + 42);
  uint64_t v4 = (const void *)sub_10056AAF0(a1 + 48);
  unsigned __int16 v5 = sub_10056AAD8(a1 + 48);
  uint64_t v6 = sub_1001C1D60(v2, (uint64_t)sub_1005409FC, v3, 0, v4, v5, a1);
  sub_100242CD8(&v8);
  return v6;
}

void sub_1005409E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1005409FC(uint64_t a1, uint64_t a2)
{
  return sub_1005408E4(a2, a1);
}

uint64_t sub_100540A0C(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2 && os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
    sub_1006907C0();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, a2);
}

uint64_t sub_100540A7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  __int16 v3 = *(std::__shared_weak_count **)(a1 + 32);
  v16[0] = v2;
  v16[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  uint64_t v6 = sub_1004438FC(v2, *(unsigned __int16 *)(a1 + 42));
  unint64_t v7 = v6;
  if (v3)
  {
    char v8 = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v7) {
        goto LABEL_9;
      }
      return 1LL;
    }
  }

  if (!v6) {
    return 1LL;
  }
LABEL_9:
  LOBYTE(v16[0]) = 0;
  sub_100242CA4(v16);
  unsigned int v10 = *(unsigned __int16 *)(a1 + 40);
  __int16 v11 = *(_WORD *)(a1 + 42);
  uint64_t v12 = sub_10056AAF0(a1 + 48);
  __int16 v13 = sub_10056AAD8(a1 + 48);
  uint64_t v14 = sub_1001C2338(v10, (uint64_t)sub_100540BA4, v11, v12, v13, a1);
  sub_100242CD8(v16);
  return v14;
}

void sub_100540B80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100540BA4(uint64_t a1, uint64_t a2)
{
  return sub_100540A0C(a2, a1);
}

uint64_t sub_100540BB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  __int16 v3 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v30 = v2;
  unint64_t v31 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  __int128 v37 = xmmword_1006BD964;
  int v38 = 0;
  sub_100634334((__n128 *)buf, (__n128 *)&v37);
  __int128 v34 = xmmword_1006BD98C;
  int v35 = 0;
  sub_100634334(&v36, (__n128 *)&v34);
  uint64_t v6 = sub_1004439C4(v2, buf, (unsigned __int8 *)&v36);
  uint64_t v7 = v6;
  if (!v3) {
    goto LABEL_8;
  }
  char v8 = (unint64_t *)&v3->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v7) {
      goto LABEL_15;
    }
  }

  else
  {
LABEL_8:
    if (!v6) {
      goto LABEL_15;
    }
  }

  uint64_t v10 = *(void *)(v7 + 8);
  int v11 = *(_DWORD *)(v10 + 20);
  *(_OWORD *)buf = *(_OWORD *)(v10 + 4);
  int v40 = v11;
  sub_100634334(&v36, (__n128 *)buf);
  int v33 = 0;
  __int128 v32 = xmmword_1006C3E44;
  if (sub_1001BEC7C((unsigned __int8 *)&v36, (unsigned __int8 *)&v32))
  {
    uint64_t v12 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Setting GAP name characteristic value on device %@",  buf,  0xCu);
    }

    if (*(char *)(a1 + 87) < 0)
    {
      uint64_t v14 = *(const void **)(a1 + 64);
      size_t v15 = *(void *)(a1 + 72);
    }

    else
    {
      uint64_t v14 = (const void *)(a1 + 64);
      size_t v15 = *(unsigned __int8 *)(a1 + 87);
    }

    __int16 v17 = *(_WORD *)(v7 + 74);
    sub_10056AB04(buf, v14, v15);
    unint64_t v18 = operator new(0x40uLL);
    sub_100549D30((uint64_t)v18, a1 + 48, v17, (uint64_t)buf);
    uint64_t v19 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v18;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
    }
    *(void *)buf = &off_10087FAA8;
    if (*(void *)&buf[8]) {
      sub_1002CD254(*(unsigned int **)&buf[8]);
    }
    uint64_t v20 = *(void *)(a1 + 56);
    id v21 = *(id *)(a1 + 16);
    unint64_t v22 = *(std::__shared_weak_count **)(a1 + 32);
    uint64_t v28 = *(void *)(a1 + 24);
    unsigned int v29 = v22;
    if (v22)
    {
      int v23 = (unint64_t *)&v22->__shared_owners_;
      do
        unint64_t v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }

    sub_10053CEB4(v20, v21, &v28, *(_WORD *)(a1 + 40));
    __int16 v25 = v29;
    if (v29)
    {
      uint64_t v26 = (unint64_t *)&v29->__shared_owners_;
      do
        unint64_t v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }

    return 0LL;
  }

void sub_100540E8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100540EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((_DWORD)a3)
  {
    uint64_t v7 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_1006908AC(a3, v7, v8, v9, v10, v11, v12, v13);
    }
  }

  else
  {
    id v14 = *(id *)(a1 + 16);
    __dst[0] = 0LL;
    __dst[1] = 0LL;
    uint64_t v24 = 0LL;
    if (*(char *)(a1 + 87) < 0)
    {
      sub_100024238(__dst, *(void **)(a1 + 64), *(void *)(a1 + 72));
    }

    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(a1 + 64);
      uint64_t v24 = *(void *)(a1 + 80);
    }

    uint64_t v15 = sub_100404FE8();
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3321888768LL;
    v18[2] = sub_1005410A4;
    _OWORD v18[3] = &unk_1008A0728;
    uint64_t v20 = a1;
    id v16 = v14;
    id v19 = v16;
    if (SHIBYTE(v24) < 0)
    {
      sub_100024238(&__p, __dst[0], (unint64_t)__dst[1]);
    }

    else
    {
      __int128 __p = *(_OWORD *)__dst;
      uint64_t v22 = v24;
    }

    sub_100405384(v15, v18);
    if (SHIBYTE(v22) < 0) {
      operator delete((void *)__p);
    }

    if (SHIBYTE(v24) < 0) {
      operator delete(__dst[0]);
    }
  }

  return sub_10053CFAC(a1, a3, a4);
}

void sub_100541054( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1005410A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
  }
  __int16 v3 = off_1008D5F28;
  sub_100241F90(v8, *(void *)(a1 + 32));
  if (*(char *)(a1 + 71) < 0)
  {
    sub_100024238(__p, *(void **)(a1 + 48), *(void *)(a1 + 56));
  }

  else
  {
    *(_OWORD *)__int128 __p = *(_OWORD *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 64);
  }

  int v4 = sub_1005C9550((uint64_t)v3, v8, (uint64_t)__p, 2);
  int v5 = v4;
  if (SHIBYTE(v7) < 0)
  {
    operator delete(__p[0]);
    if (!v5) {
      return;
    }
    goto LABEL_10;
  }

  if (v4) {
LABEL_10:
  }
    sub_10053D024(v2);
}

void sub_1005411A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005411C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100540EF0(a1 - 48, a2, a3, a4);
}

void sub_1005411D0(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    if (!*(void *)(a1 + 88)) {
      return;
    }
  }

  else if (!*(_BYTE *)(a1 + 103))
  {
    return;
  }

  id v2 = *(id *)(a1 + 16);
  __dst[0] = 0LL;
  __dst[1] = 0LL;
  uint64_t v13 = 0LL;
  if (*(char *)(a1 + 103) < 0)
  {
    sub_100024238(__dst, *(void **)(a1 + 80), *(void *)(a1 + 88));
  }

  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a1 + 80);
    uint64_t v13 = *(void *)(a1 + 96);
  }

  __int16 v3 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = __dst;
    if (v13 < 0) {
      int v4 = (void **)__dst[0];
    }
    *(_DWORD *)buf = 138412546;
    id v15 = v2;
    __int16 v16 = 2080;
    __int16 v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "The device %@ is named %s", buf, 0x16u);
  }

  uint64_t v5 = sub_100404FE8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768LL;
  void v7[2] = sub_1005413F4;
  v7[3] = &unk_1008A0728;
  uint64_t v9 = a1;
  id v6 = v2;
  id v8 = v6;
  if (SHIBYTE(v13) < 0)
  {
    sub_100024238(&__p, __dst[0], (unint64_t)__dst[1]);
  }

  else
  {
    __int128 __p = *(_OWORD *)__dst;
    uint64_t v11 = v13;
  }

  sub_100405384(v5, v7);
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)__p);
  }

  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_10054139C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1005413F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
  }
  __int16 v3 = off_1008D5F28;
  sub_100241F90(v8, *(void *)(a1 + 32));
  if (*(char *)(a1 + 71) < 0)
  {
    sub_100024238(__p, *(void **)(a1 + 48), *(void *)(a1 + 56));
  }

  else
  {
    *(_OWORD *)__int128 __p = *(_OWORD *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 64);
  }

  int v4 = sub_1005C9550((uint64_t)v3, v8, (uint64_t)__p, 2);
  int v5 = v4;
  if (SHIBYTE(v7) < 0)
  {
    operator delete(__p[0]);
    if (!v5) {
      return;
    }
    goto LABEL_10;
  }

  if (v4) {
LABEL_10:
  }
    sub_10053D024(v2);
}

void sub_1005414F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100541518(uint64_t a1, __int16 a2)
{
  uint64_t v5 = *(void *)(a1 + 24);
  int v4 = *(std::__shared_weak_count **)(a1 + 32);
  v28[0] = v5;
  v28[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  __int128 v32 = xmmword_1006BD964;
  int v33 = 0;
  sub_100634334((__n128 *)buf, (__n128 *)&v32);
  sub_10063432C(&v31);
  uint64_t v8 = sub_1004439C4(v5, buf, (unsigned __int8 *)&v31);
  if (v4)
  {
    uint64_t v9 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  LOWORD(v28[0]) = 0;
  if (v8
    && (uint64_t v11 = *(void *)(v8 + 8),
        int v12 = *(_DWORD *)(v11 + 20),
        *(_OWORD *)buf = *(_OWORD *)(v11 + 4),
        int v35 = v12,
        sub_100634334(&v31, (__n128 *)buf),
        int v30 = 0,
        __int128 v29 = xmmword_1006C3E08,
        sub_1001BEC7C((unsigned __int8 *)&v31, (unsigned __int8 *)&v29)))
  {
    uint64_t v13 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Reading long GAP name characteristic value on device %@",  buf,  0xCu);
    }

    if (sub_1001C0240(*(unsigned __int16 *)(a1 + 40), v28))
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, 9501LL);
    }

    else
    {
      LOWORD(v28[0]) -= 4;
      __int16 v15 = v28[0];
      __int16 v16 = operator new(0x30uLL);
      uint64_t v17 = sub_10053CE50((uint64_t)v16, a1 + 48);
      *(void *)uint64_t v17 = off_1008A0938;
      *(_WORD *)(v17 + 42) = a2;
      *(_WORD *)(v17 + 44) = v15;
      uint64_t v18 = *(void *)(a1 + 64);
      *(void *)(a1 + 64) = v16;
      if (v18)
      {
        (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
        __int16 v16 = *(void **)(a1 + 64);
      }

      id v19 = *(id *)(a1 + 16);
      uint64_t v20 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v26 = *(void *)(a1 + 24);
      unint64_t v27 = v20;
      if (v20)
      {
        id v21 = (unint64_t *)&v20->__shared_owners_;
        do
          unint64_t v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }

      sub_10053CEB4((uint64_t)v16, v19, &v26, *(_WORD *)(a1 + 40));
      int v23 = v27;
      if (v27)
      {
        uint64_t v24 = (unint64_t *)&v27->__shared_owners_;
        do
          unint64_t v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100690910(a1);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, 10LL);
  }

void sub_1005417E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_10054181C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7)
  {
    if (v7 != a2
      && (uint64_t v8 = (os_log_s *)qword_1008F75B0,
          BOOL v9 = os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT),
          a2 = v7,
          v9))
    {
      LODWORD(__dst.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)"fReadGapName.get() == command";
      _os_log_fault_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "Assertion failed: %{public}s",  (uint8_t *)&__dst,  0xCu);
      a2 = *(void *)(a1 + 56);
      *(void *)(a1 + 56) = 0LL;
      if (!a2) {
        goto LABEL_6;
      }
    }

    else
    {
      *(void *)(a1 + 56) = 0LL;
    }

    (*(void (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
LABEL_6:
    if (a4[1] == *a4
      || (uint64_t v10 = *(void *)(**a4 + 8),
          int v11 = *(_DWORD *)(v10 + 20),
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)(v10 + 4),
          LODWORD(__dst.__r_.__value_.__r.__words[2]) = v11,
          sub_100634334(&v43, (__n128 *)&__dst),
          int v42 = 0,
          __int128 v41 = xmmword_1006C3ED0,
          !sub_1001BEC7C(v12, (unsigned __int8 *)&v41)))
    {
      sub_10053CFAC(a1, a3, (uint64_t)a4);
    }

    else
    {
      uint64_t v13 = **a4;
      id v14 = (void *)sub_10056AAF0(v13 + 72);
      size_t v15 = sub_10056AAD8(v13 + 72);
      sub_100330694(&__dst, v14, v15);
      __int16 v16 = (void **)(a1 + 80);
      *(_OWORD *)__int16 v16 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(void *)(a1 + sub_100242FAC(v22 - 96) = __dst.__r_.__value_.__l.__cap_;
      if (sub_10056AAD8(v13 + 72) >= (unint64_t)*(unsigned __int16 *)(a1 + 72) - 4)
      {
        __int16 v32 = **(_WORD **)(v13 + 8);
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3221225472LL;
        double v36[2] = sub_100541C88;
        v36[3] = &unk_1008878D8;
        uint8_t v36[4] = a1;
        __int16 v37 = v32;
        sub_10053D124(a1, v36);
        __int128 v34 = *a4;
        int v33 = a4[1];
        while (v34 != v33)
        {
          if (*v34)
          {
            (*(void (**)(uint64_t))(*(void *)*v34 + 8LL))(*v34);
            int v33 = a4[1];
          }

          ++v34;
        }
      }

      else
      {
        sub_1005411D0(a1);
        (***(void (****)(void, uint64_t, void, uint64_t **))(a1 + 8))(*(void *)(a1 + 8), a1, 0LL, a4);
      }
    }

    return;
  }

  uint64_t v17 = *(void *)(a1 + 64);
  if (!v17)
  {
    uint64_t v35 = sub_1002E6E00();
    sub_1004FC118(v35, 1);
  }

  if (v17 != a2
    && (uint64_t v18 = (os_log_s *)qword_1008F75B0,
        BOOL v19 = os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT),
        a2 = v17,
        v19))
  {
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)"fReadLongGapName.get() == command";
    _os_log_fault_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "Assertion failed: %{public}s",  (uint8_t *)&__dst,  0xCu);
    a2 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = 0LL;
    if (!a2) {
      goto LABEL_18;
    }
  }

  else
  {
    *(void *)(a1 + 64) = 0LL;
  }

  (*(void (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
LABEL_18:
  if (a4[1] == *a4
    || (uint64_t v20 = *(void *)(**a4 + 8),
        int v21 = *(_DWORD *)(v20 + 20),
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)(v20 + 4),
        LODWORD(__dst.__r_.__value_.__r.__words[2]) = v21,
        sub_100634334(&v43, (__n128 *)&__dst),
        int v39 = 0,
        __int128 v38 = xmmword_1006C3ED0,
        !sub_1001BEC7C(v22, (unsigned __int8 *)&v38)))
  {
    sub_10053CFAC(a1, a3, (uint64_t)a4);
  }

  else
  {
    uint64_t v23 = **a4 + 72;
    uint64_t v24 = (void *)sub_10056AAF0(v23);
    size_t v25 = sub_10056AAD8(v23);
    sub_100330694(&__dst, v24, v25);
    int v26 = *(char *)(a1 + 103);
    if (v26 >= 0) {
      unint64_t v27 = (const std::string::value_type *)(a1 + 80);
    }
    else {
      unint64_t v27 = *(const std::string::value_type **)(a1 + 80);
    }
    if (v26 >= 0) {
      std::string::size_type v28 = *(unsigned __int8 *)(a1 + 103);
    }
    else {
      std::string::size_type v28 = *(void *)(a1 + 88);
    }
    __int128 v29 = std::string::insert(&__dst, 0LL, v27, v28);
    std::string::size_type v30 = v29->__r_.__value_.__r.__words[0];
    v43.n128_u64[0] = v29->__r_.__value_.__l.__size_;
    *(unint64_t *)((char *)v43.n128_u64 + 7) = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1]
                                                                                + 7);
    unsigned __int8 size = v29->__r_.__value_.__s.__size_;
    v29->__r_.__value_.__l.__size_ = 0LL;
    v29->__r_.__value_.__l.__cap_ = 0LL;
    v29->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 80) = v30;
    *(void *)(a1 + 88) = v43.n128_u64[0];
    *(void *)(a1 + 95) = *(unint64_t *)((char *)v43.n128_u64 + 7);
    *(_BYTE *)(a1 + 103) = size;
    sub_1005411D0(a1);
    (***(void (****)(void, uint64_t, void, uint64_t **))(a1 + 8))(*(void *)(a1 + 8), a1, 0LL, a4);
  }

void sub_100541C64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100541C88(uint64_t a1)
{
}

void sub_100541C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
}

uint64_t sub_100541CA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  __int16 v3 = *(std::__shared_weak_count **)(a1 + 32);
  v28[0] = v2;
  v28[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  __int128 v31 = xmmword_1006BD964;
  int v32 = 0;
  sub_100634334((__n128 *)buf, (__n128 *)&v31);
  sub_10063432C(&v33);
  uint64_t v6 = sub_1004439C4(v2, buf, (unsigned __int8 *)&v33);
  uint64_t v7 = v6;
  if (!v3) {
    goto LABEL_8;
  }
  uint64_t v8 = (unint64_t *)&v3->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v7) {
      goto LABEL_24;
    }
  }

  else
  {
LABEL_8:
    if (!v6) {
      goto LABEL_24;
    }
  }

  uint64_t v10 = *(void *)(v7 + 8);
  int v11 = *(_DWORD *)(v10 + 20);
  *(_OWORD *)buf = *(_OWORD *)(v10 + 4);
  int v36 = v11;
  sub_100634334((__n128 *)&v33, (__n128 *)buf);
  int v30 = 0;
  __int128 v29 = xmmword_1006C3E08;
  if (sub_1001BEC7C((unsigned __int8 *)&v33, (unsigned __int8 *)&v29))
  {
    int v12 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Reading GAP name characteristic value on device %@",  buf,  0xCu);
    }

    LOBYTE(v28[0]) = 0;
    sub_100242CA4(v28);
    sub_1001C0240(*(unsigned __int16 *)(a1 + 40), (_WORD *)(a1 + 72));
    sub_100242CD0(v28);
    __int16 v14 = **(_WORD **)(v7 + 8);
    __int16 v15 = *(_WORD *)(v7 + 48);
    __int16 v16 = (char *)operator new(0x48uLL);
    __int128 v33 = xmmword_1006BD98C;
    int v34 = 0;
    sub_100634334((__n128 *)buf, (__n128 *)&v33);
    sub_10053CE50((uint64_t)v16, a1 + 48);
    *(void *)__int16 v16 = off_1008A0968;
    *(_OWORD *)(v16 + 44) = *(_OWORD *)buf;
    *((_DWORD *)v16 + 15) = v36;
    *((_WORD *)v16 + 32) = v14;
    *((_WORD *)v16 + 33) = v15;
    *((_WORD *)v16 + 34) = 1;
    uint64_t v17 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v16;
    if (v17)
    {
      (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
      __int16 v16 = *(char **)(a1 + 56);
    }

    id v18 = *(id *)(a1 + 16);
    BOOL v19 = *(std::__shared_weak_count **)(a1 + 32);
    uint64_t v26 = *(void *)(a1 + 24);
    unint64_t v27 = v19;
    if (v19)
    {
      uint64_t v20 = (unint64_t *)&v19->__shared_owners_;
      do
        unint64_t v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }

    sub_10053CEB4((uint64_t)v16, v18, &v26, *(_WORD *)(a1 + 40));
    unint64_t v22 = v27;
    if (v27)
    {
      uint64_t v23 = (unint64_t *)&v27->__shared_owners_;
      do
        unint64_t v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }

    sub_100242CD8(v28);
    return 0LL;
  }

void sub_100541FA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100242CD8(&a11);
  _Unwind_Resume(a1);
}

void sub_100541FFC(uint64_t a1, uint64_t a2)
{
  int v4 = (unsigned __int16 *)(a1 + 56);
  unsigned int v5 = *(unsigned __int16 *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 3);
  *(void *)buf = v6;
  __int128 v29 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    unsigned int v10 = *v4;
  }

  else
  {
    unsigned int v10 = v5;
  }

  unsigned int v11 = sub_100443CF0(v6, v10);
  if (!v7) {
    goto LABEL_10;
  }
  int v12 = (unint64_t *)&v7->__shared_owners_;
  do
    unint64_t v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if ((_DWORD)a2) {
      goto LABEL_11;
    }
  }

  else
  {
LABEL_10:
    if ((_DWORD)a2)
    {
LABEL_11:
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, a2);
      return;
    }
  }

  if (v11)
  {
    if (v11 >= (unsigned __int16)(v5 + 2))
    {
      __int16 v14 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = *(id *)(a1 + 16);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)(v5 + 2);
        LOWORD(v29) = 1024;
        *(_DWORD *)((char *)&v29 + 2) = v11;
        HIWORD(v29) = 2112;
        id v30 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Attempting to discover descriptors in range [0x%04x, 0x%04x] on device %@",  buf,  0x18u);
      }

      __int16 v16 = operator new(0x30uLL);
      uint64_t v17 = sub_10053CE50((uint64_t)v16, a1 + 48);
      *(void *)uint64_t v17 = off_1008A08D8;
      *(_WORD *)(v17 + 42) = v5 + 2;
      *(_WORD *)(v17 + 44) = v11;
      uint64_t v18 = *(void *)(a1 + 72);
      *(void *)(a1 + 72) = v16;
      if (v18)
      {
        (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
        __int16 v16 = *(void **)(a1 + 72);
      }

      id v19 = *(id *)(a1 + 16);
      uint64_t v20 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v26 = *(void *)(a1 + 24);
      unint64_t v27 = v20;
      if (v20)
      {
        unint64_t v21 = (unint64_t *)&v20->__shared_owners_;
        do
          unint64_t v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }

      sub_10053CEB4((uint64_t)v16, v19, &v26, *(_WORD *)(a1 + 40));
      uint64_t v23 = v27;
      if (v27)
      {
        unint64_t v24 = (unint64_t *)&v27->__shared_owners_;
        do
          unint64_t v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }

    else
    {
      (*(void (**)(uint64_t, void))(*(void *)a1 + 24LL))(a1, 0LL);
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100690A00((uint64_t)v4, a1);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, 1LL);
  }

void sub_1005422D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_100542304(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void *)(a1 + 64);
  if (!v7)
  {
    uint64_t v12 = *(void *)(a1 + 72);
    if (!v12)
    {
      uint64_t v15 = sub_1002E6E00();
      sub_1004FC118(v15, 1);
    }

    if (v12 != a2
      && (unint64_t v13 = (os_log_s *)qword_1008F75B0,
          BOOL v14 = os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT),
          a2 = v12,
          v14))
    {
      *(_DWORD *)buf = 136446210;
      id v19 = "fDescDisc.get() == command";
      _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
      a2 = *(void *)(a1 + 72);
      *(void *)(a1 + 72) = 0LL;
      if (!a2) {
        goto LABEL_17;
      }
    }

    else
    {
      *(void *)(a1 + 72) = 0LL;
    }

    (*(void (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
LABEL_17:
    sub_10053CFAC(a1, a3, (uint64_t)a4);
    return;
  }

  if (v7 == a2
    || (uint64_t v8 = (os_log_s *)qword_1008F75B0,
        BOOL v9 = os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT),
        a2 = v7,
        !v9))
  {
    *(void *)(a1 + 64) = 0LL;
LABEL_5:
    (*(void (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
    goto LABEL_6;
  }

  *(_DWORD *)buf = 136446210;
  id v19 = "fServiceDisc.get() == command";
  _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
  a2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0LL;
  if (a2) {
    goto LABEL_5;
  }
LABEL_6:
  unsigned int v11 = (void *)*a4;
  unsigned int v10 = (void *)a4[1];
  while (v11 != v10)
  {
    if (*v11)
    {
      (*(void (**)(void))(*(void *)*v11 + 8LL))(*v11);
      unsigned int v10 = (void *)a4[1];
    }

    ++v11;
  }

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_100542518;
  v16[3] = &unk_10087EB68;
  v16[4] = a1;
  int v17 = a3;
  sub_10053D124(a1, v16);
}

void sub_100542518(uint64_t a1)
{
}

void sub_100542528(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
}

uint64_t sub_100542530(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 24);
  int v4 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)buf = v3;
  *(void *)&__int128 v43 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    unsigned int v7 = *(unsigned __int16 *)(a1 + 56);
  }

  else
  {
    unsigned int v7 = v2;
  }

  unsigned int v8 = sub_100443CF0(v3, v7);
  unsigned int v9 = v8;
  if (!v4) {
    goto LABEL_10;
  }
  unsigned int v10 = (unint64_t *)&v4->__shared_owners_;
  do
    unint64_t v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v9)
    {
LABEL_11:
      unsigned __int16 v12 = v2 + 2;
      if (v9 >= (unsigned __int16)(v2 + 2))
      {
        unint64_t v13 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
        {
          id v14 = *(id *)(a1 + 16);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v12;
          LOWORD(v43) = 1024;
          *(_DWORD *)((char *)&v43 + 2) = v9;
          WORD3(v43) = 2112;
          *((void *)&v43 + 1) = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Attempting to discover descriptors in range [0x%04x, 0x%04x] on device %@",  buf,  0x18u);
        }

        uint64_t v15 = operator new(0x30uLL);
        uint64_t v16 = sub_10053CE50((uint64_t)v15, a1 + 48);
        *(void *)uint64_t v16 = off_1008A08D8;
        *(_WORD *)(v16 + 42) = v12;
        *(_WORD *)(v16 + 44) = v9;
        uint64_t v17 = *(void *)(a1 + 72);
        *(void *)(a1 + 72) = v15;
        if (v17)
        {
          (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
          uint64_t v15 = *(void **)(a1 + 72);
        }

        id v18 = *(id *)(a1 + 16);
        id v19 = *(std::__shared_weak_count **)(a1 + 32);
        uint64_t v38 = *(void *)(a1 + 24);
        int v39 = v19;
        if (v19)
        {
          uint64_t v20 = (unint64_t *)&v19->__shared_owners_;
          do
            unint64_t v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }

        sub_10053CEB4((uint64_t)v15, v18, &v38, *(_WORD *)(a1 + 40));
        unint64_t v22 = v39;
        if (v39)
        {
          uint64_t v23 = (unint64_t *)&v39->__shared_owners_;
          do
            unint64_t v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }

      else
      {
        (*(void (**)(uint64_t, void))(*(void *)a1 + 24LL))(a1, 0LL);
      }

      return 0LL;
    }
  }

  else
  {
LABEL_10:
    if (v8) {
      goto LABEL_11;
    }
  }

  unint64_t v25 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    int v26 = *(unsigned __int16 *)(a1 + 56);
    id v27 = *(id *)(a1 + 16);
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v26;
    LOWORD(v43) = 2112;
    *(void *)((char *)&v43 + 2) = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Attempting to find service for characteristic handle 0x%04x on device %@",  buf,  0x12u);
  }

  std::string::size_type v28 = operator new(0x30uLL);
  *(void *)sub_10053CE50((uint64_t)v28, a1 + sub_100242FAC(v15 - 48) = off_1008A07E8;
  uint64_t v29 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v28;
  if (v29)
  {
    (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
    std::string::size_type v28 = *(void **)(a1 + 64);
  }

  id v30 = *(id *)(a1 + 16);
  __int128 v31 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v40 = *(void *)(a1 + 24);
  __int128 v41 = v31;
  if (v31)
  {
    int v32 = (unint64_t *)&v31->__shared_owners_;
    do
      unint64_t v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }

  sub_10053CEB4((uint64_t)v28, v30, &v40, *(_WORD *)(a1 + 40));
  int v34 = v41;
  if (v41)
  {
    uint64_t v35 = (unint64_t *)&v41->__shared_owners_;
    do
      unint64_t v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }

  return 0LL;
}

void sub_100542898( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_1005428DC(uint64_t a1)
{
  __int16 v56 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)buf = v2;
  *(void *)&uint8_t buf[8] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  unint64_t v6 = sub_1004438FC(v2, *(unsigned __int16 *)(a1 + 56));
  unsigned int v7 = v6;
  if (!v3) {
    goto LABEL_8;
  }
  unsigned int v8 = (unint64_t *)&v3->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_8:
    if (v6) {
      goto LABEL_9;
    }
LABEL_30:
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100690A78(a1 + 56, a1);
    }
    goto LABEL_37;
  }

  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  if (!v7) {
    goto LABEL_30;
  }
LABEL_9:
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)buf = v10;
  *(void *)&uint8_t buf[8] = v11;
  if (v11)
  {
    unsigned __int16 v12 = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  id v14 = sub_1004438FC(v10, *(unsigned __int16 *)(a1 + 56));
  uint64_t v15 = v14;
  if (!v11) {
    goto LABEL_16;
  }
  uint64_t v16 = (unint64_t *)&v11->__shared_owners_;
  do
    unint64_t v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
  {
LABEL_16:
    if (v14) {
      goto LABEL_17;
    }
LABEL_35:
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100690AF0(a1 + 56, a1);
    }
    goto LABEL_37;
  }

  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v15) {
    goto LABEL_35;
  }
LABEL_17:
  uint64_t v18 = v15[1];
  int v19 = *(_DWORD *)(v18 + 20);
  *(_OWORD *)buf = *(_OWORD *)(v18 + 4);
  *(_DWORD *)&uint8_t buf[16] = v19;
  sub_100634334(&v63, (__n128 *)buf);
  int v62 = 0;
  __int128 v61 = xmmword_1006C3E44;
  if (!sub_1001BEC7C(v20, (unsigned __int8 *)&v61))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100690BE0(a1 + 56, a1);
    }
LABEL_37:
    uint64_t v29 = 1LL;
LABEL_38:
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, v29);
    return;
  }

  if ((v15[9] & 0x30) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100690B68(a1 + 56, a1);
    }
    uint64_t v29 = 6LL;
    goto LABEL_38;
  }

  if (*(_BYTE *)(a1 + 58))
  {
    if ((v15[9] & 0x10) != 0) {
      char v21 = 1;
    }
    else {
      char v21 = 2;
    }
    LOBYTE(v56) = v21;
  }

  sub_100240540(buf, (uint64_t)(v15 + 13));
  unint64_t v22 = *(void **)buf;
  uint64_t v23 = *(uint64_t **)&buf[8];
  if (*(void *)buf == *(void *)&buf[8]) {
    goto LABEL_52;
  }
  unint64_t v24 = *(uint64_t **)buf;
  while (1)
  {
    uint64_t v25 = *v24;
    uint64_t v26 = *(void *)(*v24 + 8);
    int v27 = *(_DWORD *)(v26 + 20);
    *(_OWORD *)buf = *(_OWORD *)(v26 + 4);
    *(_DWORD *)&uint8_t buf[16] = v27;
    sub_100634334(&v63, (__n128 *)buf);
    int v60 = 0;
    __int128 v59 = xmmword_1006C3E80;
    if (++v24 == v23) {
      goto LABEL_52;
    }
  }

  int v30 = **(unsigned __int16 **)(v25 + 8);
  __int128 v31 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v30;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "Found client configuration descriptor at handle 0x%04x",  buf,  8u);
  }

  if (!v30)
  {
LABEL_52:
    __int16 v37 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      int v38 = *(unsigned __int16 *)(a1 + 56);
      id v39 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v38;
      *(_WORD *)&uint8_t buf[8] = 2112;
      *(void *)&buf[10] = v39;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Unable to find client configuration descriptor for characteristic at handle 0x%04x on device %@",  buf,  0x12u);
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, 10LL);
  }

  else
  {
    int v32 = (os_log_s *)qword_1008F75B0;
    BOOL v33 = os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT);
    if ((_BYTE)v56)
    {
      if (v33)
      {
        if ((v56 & 1) != 0) {
          int v34 = "notifications";
        }
        else {
          int v34 = "indications";
        }
        int v35 = *(unsigned __int16 *)(a1 + 56);
        id v36 = *(id *)(a1 + 16);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = v34;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v35;
        *(_WORD *)&_BYTE buf[18] = 2112;
        id v58 = v36;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Enabling %{public}s on client configuration descriptor for characteristic at handle 0x%04x on device %@",  buf,  0x1Cu);
      }
    }

    else if (v33)
    {
      int v40 = *(unsigned __int16 *)(a1 + 56);
      id v41 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v40;
      *(_WORD *)&uint8_t buf[8] = 2112;
      *(void *)&buf[10] = v41;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Disabling notifications/indications on client configuration descriptor for characteristic at handle 0x%04x on device %@",  buf,  0x12u);
    }

    sub_10056AB04(buf, &v56, 2uLL);
    int v42 = operator new(0x40uLL);
    __int128 v43 = v42;
    if (a1) {
      uint64_t v44 = a1 + 48;
    }
    else {
      uint64_t v44 = 0LL;
    }
    sub_100549DE4((uint64_t)v42, v44, v30, (uint64_t)buf);
    uint64_t v45 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v43;
    if (v45) {
      (*(void (**)(uint64_t))(*(void *)v45 + 8LL))(v45);
    }
    *(void *)buf = &off_10087FAA8;
    if (*(void *)&buf[8]) {
      sub_1002CD254(*(unsigned int **)&buf[8]);
    }
    uint64_t v46 = *(void *)(a1 + 72);
    id v47 = *(id *)(a1 + 16);
    int v48 = *(std::__shared_weak_count **)(a1 + 32);
    uint64_t v54 = *(void *)(a1 + 24);
    __n128 v55 = v48;
    if (v48)
    {
      __int128 v49 = (unint64_t *)&v48->__shared_owners_;
      do
        unint64_t v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }

    sub_10053CEB4(v46, v47, &v54, *(_WORD *)(a1 + 40));
    __int128 v51 = v55;
    if (v55)
    {
      int v52 = (unint64_t *)&v55->__shared_owners_;
      do
        unint64_t v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
  }

  if (v22) {
    operator delete(v22);
  }
}

void sub_100542E94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  if (v2) {
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_100542F1C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1[8];
  if (!v6)
  {
    uint64_t v12 = a1[9];
    if (!v12)
    {
      uint64_t v15 = sub_1002E6E00();
      sub_1004FC118(v15, 1);
    }

    if (v12 != a2
      && (unint64_t v13 = (os_log_s *)qword_1008F75B0,
          BOOL v14 = os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT),
          a2 = v12,
          v14))
    {
      *(_DWORD *)buf = 136446210;
      int v19 = "fWriteCommand.get() == command";
      _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
      a2 = a1[9];
      a1[9] = 0LL;
      if (!a2) {
        goto LABEL_17;
      }
    }

    else
    {
      a1[9] = 0LL;
    }

    (*(void (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
LABEL_17:
    (*(void (**)(void *, uint64_t))(*a1 + 24LL))(a1, a3);
    return;
  }

  if (v6 == a2
    || (unsigned int v8 = (os_log_s *)qword_1008F75B0,
        BOOL v9 = os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT),
        a2 = v6,
        !v9))
  {
    a1[8] = 0LL;
LABEL_5:
    (*(void (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
    goto LABEL_6;
  }

  *(_DWORD *)buf = 136446210;
  int v19 = "fTreeCommand.get() == command";
  _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
  a2 = a1[8];
  a1[8] = 0LL;
  if (a2) {
    goto LABEL_5;
  }
LABEL_6:
  unint64_t v11 = *(void **)a4;
  uint64_t v10 = *(void **)(a4 + 8);
  while (v11 != v10)
  {
    if (*v11)
    {
      (*(void (**)(void))(*(void *)*v11 + 8LL))(*v11);
      uint64_t v10 = *(void **)(a4 + 8);
    }

    ++v11;
  }

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_100543134;
  v16[3] = &unk_10087EB68;
  v16[4] = a1;
  int v17 = a3;
  sub_10053D124((uint64_t)a1, v16);
}

void sub_100543134(uint64_t a1)
{
}

void sub_10054313C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100543144(uint64_t a1)
{
  __int16 v68 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)buf = v2;
  *(void *)&uint8_t buf[8] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  uint64_t v6 = sub_1004438FC(v2, *(unsigned __int16 *)(a1 + 56));
  unsigned int v7 = v6;
  if (!v3) {
    goto LABEL_8;
  }
  unsigned int v8 = (unint64_t *)&v3->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_8:
    if (v6) {
      goto LABEL_9;
    }
LABEL_30:
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100690C58(a1 + 56, a1);
    }
    return 1LL;
  }

  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  if (!v7) {
    goto LABEL_30;
  }
LABEL_9:
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)buf = v10;
  *(void *)&uint8_t buf[8] = v11;
  if (v11)
  {
    uint64_t v12 = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  BOOL v14 = sub_1004438FC(v10, *(unsigned __int16 *)(a1 + 56));
  uint64_t v15 = v14;
  if (!v11) {
    goto LABEL_16;
  }
  uint64_t v16 = (unint64_t *)&v11->__shared_owners_;
  do
    unint64_t v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
  {
LABEL_16:
    if (v14) {
      goto LABEL_17;
    }
LABEL_35:
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100690CD0(a1 + 56, a1);
    }
    return 1LL;
  }

  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v15) {
    goto LABEL_35;
  }
LABEL_17:
  uint64_t v18 = v15[1];
  int v19 = *(_DWORD *)(v18 + 20);
  *(_OWORD *)buf = *(_OWORD *)(v18 + 4);
  *(_DWORD *)&uint8_t buf[16] = v19;
  sub_100634334(&v75, (__n128 *)buf);
  int v74 = 0;
  __int128 v73 = xmmword_1006C3E44;
  if (!sub_1001BEC7C(v20, (unsigned __int8 *)&v73))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100690DC0(a1 + 56, a1);
    }
    return 1LL;
  }

  if ((v15[9] & 0x30) != 0)
  {
    if (*(_BYTE *)(a1 + 58))
    {
      if ((v15[9] & 0x10) != 0) {
        char v21 = 1;
      }
      else {
        char v21 = 2;
      }
      LOBYTE(v68) = v21;
    }

    sub_100240540(buf, (uint64_t)(v15 + 13));
    unint64_t v22 = *(void **)buf;
    uint64_t v23 = *(uint64_t **)&buf[8];
    if (*(void *)buf == *(void *)&buf[8]) {
      goto LABEL_51;
    }
    unint64_t v24 = *(uint64_t **)buf;
    while (1)
    {
      uint64_t v25 = *v24;
      uint64_t v26 = *(void *)(*v24 + 8);
      int v27 = *(_DWORD *)(v26 + 20);
      *(_OWORD *)buf = *(_OWORD *)(v26 + 4);
      *(_DWORD *)&uint8_t buf[16] = v27;
      sub_100634334(&v75, (__n128 *)buf);
      int v72 = 0;
      __int128 v71 = xmmword_1006C3E80;
      if (++v24 == v23) {
        goto LABEL_51;
      }
    }

    int v30 = **(unsigned __int16 **)(v25 + 8);
    __int128 v31 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "Found client configuration descriptor at handle 0x%04x",  buf,  8u);
    }

    if (!v30)
    {
LABEL_51:
      __int16 v37 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_INFO))
      {
        int v38 = *(unsigned __int16 *)(a1 + 56);
        id v39 = *(id *)(a1 + 16);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v38;
        *(_WORD *)&uint8_t buf[8] = 2112;
        *(void *)&buf[10] = v39;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "Don't have client configuration descriptor yet for characteristic at handle 0x%04x on device %@",  buf,  0x12u);
      }

      int v40 = operator new(0x50uLL);
      uint64_t v41 = (uint64_t)v40;
      if (a1) {
        uint64_t v42 = a1 + 48;
      }
      else {
        uint64_t v42 = 0LL;
      }
      __int16 v43 = *(_WORD *)(a1 + 56);
      uint64_t v44 = sub_10053CE50((uint64_t)v40, v42);
      *(void *)uint64_t v44 = off_1008A0B28;
      *(void *)(v44 + sub_100242FAC(v15 - 48) = &off_1008A0B60;
      *(_WORD *)(v44 + 56) = v43;
      *(void *)(v44 + 64) = 0LL;
      *(void *)(v44 + 72) = 0LL;
      uint64_t v45 = *(void *)(a1 + 64);
      *(void *)(a1 + 64) = v41;
      if (v45)
      {
        (*(void (**)(uint64_t))(*(void *)v45 + 8LL))(v45);
        uint64_t v41 = *(void *)(a1 + 64);
      }

      id v46 = *(id *)(a1 + 16);
      id v47 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v66 = *(void *)(a1 + 24);
      int v67 = v47;
      if (v47)
      {
        int v48 = (unint64_t *)&v47->__shared_owners_;
        do
          unint64_t v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }

      sub_10053CEB4(v41, v46, &v66, *(_WORD *)(a1 + 40));
      unint64_t v50 = v67;
      if (!v67) {
        goto LABEL_82;
      }
      __int128 v51 = (unint64_t *)&v67->__shared_owners_;
      do
        unint64_t v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
    }

    else
    {
      int v32 = (os_log_s *)qword_1008F75B0;
      BOOL v33 = os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT);
      if ((_BYTE)v68)
      {
        if (v33)
        {
          if ((v68 & 1) != 0) {
            int v34 = "notifications";
          }
          else {
            int v34 = "indications";
          }
          int v35 = *(unsigned __int16 *)(a1 + 56);
          id v36 = *(id *)(a1 + 16);
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = v34;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = v35;
          *(_WORD *)&_BYTE buf[18] = 2112;
          id v70 = v36;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Enabling %s on client configuration descriptor at handle 0x%04x on device %@",  buf,  0x1Cu);
        }
      }

      else if (v33)
      {
        int v53 = *(unsigned __int16 *)(a1 + 56);
        id v54 = *(id *)(a1 + 16);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v53;
        *(_WORD *)&uint8_t buf[8] = 2112;
        *(void *)&buf[10] = v54;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Disabling notifications/indications on client configuration descriptor at handle 0x%04x on device %@",  buf,  0x12u);
      }

      sub_10056AB04(buf, &v68, 2uLL);
      __n128 v55 = operator new(0x40uLL);
      __int16 v56 = v55;
      if (a1) {
        uint64_t v57 = a1 + 48;
      }
      else {
        uint64_t v57 = 0LL;
      }
      sub_100549DE4((uint64_t)v55, v57, v30, (uint64_t)buf);
      uint64_t v58 = *(void *)(a1 + 72);
      *(void *)(a1 + 72) = v56;
      if (v58) {
        (*(void (**)(uint64_t))(*(void *)v58 + 8LL))(v58);
      }
      *(void *)buf = &off_10087FAA8;
      if (*(void *)&buf[8]) {
        sub_1002CD254(*(unsigned int **)&buf[8]);
      }
      uint64_t v59 = *(void *)(a1 + 72);
      id v46 = *(id *)(a1 + 16);
      int v60 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v64 = *(void *)(a1 + 24);
      uint64_t v65 = v60;
      if (v60)
      {
        __int128 v61 = (unint64_t *)&v60->__shared_owners_;
        do
          unint64_t v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }

      sub_10053CEB4(v59, v46, &v64, *(_WORD *)(a1 + 40));
      unint64_t v50 = v65;
      if (!v65) {
        goto LABEL_82;
      }
      __n128 v63 = (unint64_t *)&v65->__shared_owners_;
      do
        unint64_t v52 = __ldaxr(v63);
      while (__stlxr(v52 - 1, v63));
    }

    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }

void sub_100543790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  if (v2) {
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10054382C(uint64_t a1, uint64_t a2, __int128 **a3)
{
  uint64_t v5 = sub_10053CE50(a1, a2);
  *(void *)uint64_t v5 = off_1008A0768;
  *(void *)(v5 + sub_100242FAC(v15 - 48) = &off_1008A07A0;
  *(void *)(v5 + 64) = 0LL;
  *(void *)(v5 + 72) = 0LL;
  *(void *)(v5 + 56) = 0LL;
  sub_100050EE8((char *)(v5 + 56), *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a3[1] - (char *)*a3) >> 2));
  *(_WORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + sub_100242FAC(v22 - 96) = 0LL;
  return a1;
}

void sub_100543894(_Unwind_Exception *a1)
{
}

uint64_t sub_1005438A8(uint64_t a1)
{
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_1005438E4(uint64_t a1)
{
  unint64_t v2 = *(unsigned __int16 *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 56);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 64) - v3) >> 2) <= v2)
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v25 = 0LL;
    sub_100543B78((void *)a1, (char **)__p);
    (***(void (****)(void, uint64_t, void, void **))(a1 + 8))(*(void *)(a1 + 8), a1, 0LL, __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }

  else
  {
    int v4 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1006344B4(v3 + 20LL * v2, __p);
      if (v25 >= 0) {
        uint64_t v5 = __p;
      }
      else {
        uint64_t v5 = (void **)__p[0];
      }
      id v6 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 136446466;
      char v21 = v5;
      __int16 v22 = 2112;
      id v23 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Attempting to discover services for next UUID %{public}s on device %@",  buf,  0x16u);
      if (SHIBYTE(v25) < 0) {
        operator delete(__p[0]);
      }

      LODWORD(v2) = *(unsigned __int16 *)(a1 + 80);
      uint64_t v3 = *(void *)(a1 + 56);
    }

    unsigned int v7 = operator new(0x40uLL);
    uint64_t v8 = v3 + 20LL * v2;
    *(_OWORD *)__int128 __p = *(_OWORD *)v8;
    LODWORD(v25) = *(_DWORD *)(v8 + 16);
    uint64_t v9 = sub_10053CE50((uint64_t)v7, a1 + 48);
    *(void *)uint64_t v9 = off_1008A0818;
    *(_OWORD *)(v9 + 44) = *(_OWORD *)__p;
    *(_DWORD *)(v9 + 60) = v25;
    uint64_t v10 = *(void *)(a1 + 96);
    *(void *)(a1 + sub_100242FAC(v22 - 96) = v7;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
      unsigned int v7 = *(void **)(a1 + 96);
    }

    id v11 = *(id *)(a1 + 16);
    uint64_t v12 = *(std::__shared_weak_count **)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 24);
    int v19 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    sub_10053CEB4((uint64_t)v7, v11, &v18, *(_WORD *)(a1 + 40));
    uint64_t v15 = v19;
    if (v19)
    {
      uint64_t v16 = (unint64_t *)&v19->__shared_owners_;
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }

    ++*(_WORD *)(a1 + 80);
  }

void sub_100543B40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  _Unwind_Resume(a1);
}

void sub_100543B78(void *a1, char **a2)
{
  unint64_t v2 = (unsigned __int8 *)a1[7];
  if (v2 != (unsigned __int8 *)a1[8])
  {
    uint64_t v5 = a2 + 2;
    do
    {
      __int128 __p = 0LL;
      uint64_t v25 = 0LL;
      uint64_t v26 = 0LL;
      uint64_t v6 = a1[3];
      unsigned int v7 = (std::__shared_weak_count *)a1[4];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          unint64_t v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }

      int v10 = sub_100440730(v6, v2, &__p);
      if (v7)
      {
        id v11 = (unint64_t *)&v7->__shared_owners_;
        do
          unint64_t v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }

      unint64_t v13 = __p;
      if (!v10 && __p != v25)
      {
        unint64_t v14 = a2[1];
        do
        {
          if ((unint64_t)v14 >= *v5)
          {
            uint64_t v15 = (v14 - *a2) >> 3;
            uint64_t v16 = *v5 - (void)*a2;
            uint64_t v17 = v16 >> 2;
            else {
              unint64_t v18 = v17;
            }
            if (v18) {
              int v19 = (char *)sub_100008BA0((uint64_t)v5, v18);
            }
            else {
              int v19 = 0LL;
            }
            uint64_t v20 = &v19[8 * v15];
            *(void *)uint64_t v20 = *v13;
            unint64_t v14 = v20 + 8;
            __int16 v22 = *a2;
            char v21 = a2[1];
            if (v21 != *a2)
            {
              do
              {
                uint64_t v23 = *((void *)v21 - 1);
                v21 -= 8;
                *((void *)v20 - 1) = v23;
                v20 -= 8;
              }

              while (v21 != v22);
              char v21 = *a2;
            }

            *a2 = v20;
            a2[1] = v14;
            a2[2] = &v19[8 * v18];
            if (v21) {
              operator delete(v21);
            }
          }

          else
          {
            *(void *)unint64_t v14 = *v13;
            v14 += 8;
          }

          a2[1] = v14;
          ++v13;
        }

        while (v13 != v25);
        unint64_t v13 = __p;
      }

      if (v13)
      {
        uint64_t v25 = v13;
        operator delete(v13);
      }

      v2 += 20;
    }

    while (v2 != (unsigned __int8 *)a1[8]);
  }

void sub_100543D38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100543D68(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[11];
  if (v3)
  {
    a1[11] = 0LL;
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    __int128 __p = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    sub_100543B78(a1, (char **)&__p);
    sub_10053CFAC((uint64_t)a1, a2, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v8 = __p;
      operator delete(__p);
    }
  }

  else
  {
    uint64_t v5 = a1[12];
    if (!v5)
    {
      uint64_t v6 = sub_1002E6E00();
      sub_1004FC118(v6, 1);
    }

    a1[12] = 0LL;
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    sub_1005438E4((uint64_t)a1);
  }

void sub_100543E14( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100543E30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v7 = *(void **)a4;
  uint64_t v6 = *(void **)(a4 + 8);
  if (*(void **)a4 != v6)
  {
    do
    {
      if (*v7)
      {
        (*(void (**)(void))(*(void *)*v7 + 8LL))(*v7);
        uint64_t v6 = *(void **)(a4 + 8);
      }

      ++v7;
    }

    while (v7 != v6);
  }

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_100543ED4;
  v9[3] = &unk_10087EB68;
  v9[4] = a1;
  int v10 = a3;
  sub_10053D124(a1, v9);
}

void sub_100543ED4(uint64_t a1)
{
}

void sub_100543EE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

uint64_t sub_100543EEC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 64);
  if (0xCCCCCCCCCCCCCCCDLL * ((v2 - v3) >> 2) >= 4)
  {
    int v4 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = 4;
      *(_WORD *)&uint8_t buf[8] = 2112;
      *(void *)&buf[10] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Number of UUIDs exceeds maximum (%d) - discovering all services on device %@",  buf,  0x12u);
    }

    uint64_t v6 = operator new(0x30uLL);
    *(void *)sub_10053CE50((uint64_t)v6, a1 + sub_100242FAC(v15 - 48) = off_1008A07E8;
    uint64_t v7 = *(void *)(a1 + 88);
    *(void *)(a1 + 88) = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
      uint64_t v6 = *(void **)(a1 + 88);
    }

    *(_WORD *)(a1 + 80) = -13107 * ((*(_DWORD *)(a1 + 64) - *(_DWORD *)(a1 + 56)) >> 2);
    id v8 = *(id *)(a1 + 16);
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 32);
    uint64_t v30 = *(void *)(a1 + 24);
    __int128 v31 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }

    sub_10053CEB4((uint64_t)v6, v8, &v30, *(_WORD *)(a1 + 40));
    unint64_t v12 = v31;
    if (!v31) {
      goto LABEL_31;
    }
    unint64_t v13 = (unint64_t *)&v31->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
LABEL_29:
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }

void sub_100544234( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100544260(uint64_t a1)
{
  unsigned __int16 v51 = 23;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)buf = v2;
  *(void *)&uint8_t buf[8] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  uint64_t v6 = sub_1004438FC(v2, *(unsigned __int16 *)(a1 + 56));
  uint64_t v7 = v6;
  if (!v3) {
    goto LABEL_8;
  }
  id v8 = (unint64_t *)&v3->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_8:
    if (v6) {
      goto LABEL_9;
    }
LABEL_17:
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100690E38(a1 + 56, a1);
    }
    return 1LL;
  }

  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  if (!v7) {
    goto LABEL_17;
  }
LABEL_9:
  uint64_t v10 = v7[1];
  int v11 = *(_DWORD *)(v10 + 20);
  *(_OWORD *)buf = *(_OWORD *)(v10 + 4);
  *(_DWORD *)&uint8_t buf[16] = v11;
  sub_100634334(&v57, (__n128 *)buf);
  int v56 = 0;
  __int128 v55 = xmmword_1006C3E44;
  if (!sub_1001BEC7C(v12, (unsigned __int8 *)&v55))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100690F78(a1 + 56, a1);
    }
    return 1LL;
  }

  if (*(_BYTE *)(a1 + 58))
  {
    if ((v7[9] & 8) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
        sub_100690F14();
      }
      return 3LL;
    }
  }

  else if ((v7[9] & 4) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100690EB0();
    }
    return 3LL;
  }

  char v50 = 0;
  sub_100242CA4(&v50);
  sub_1001C0240(*(unsigned __int16 *)(a1 + 40), &v51);
  sub_100242CD0(&v50);
  uint64_t v14 = a1 + 64;
  unint64_t v15 = sub_10056AAD8(a1 + 64);
  if (v15 <= (unint64_t)v51 - 3)
  {
    __int16 v21 = *((_WORD *)v7 + 37);
    if (*(_BYTE *)(a1 + 58))
    {
      uint64_t v22 = operator new(0x40uLL);
      sub_100549D30((uint64_t)v22, a1 + 48, v21, a1 + 64);
    }

    else
    {
      uint64_t v22 = operator new(0x40uLL);
      sub_100549EC4((uint64_t)v22, a1 + 48, v21, a1 + 64);
    }

    uint64_t v20 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v22;
    if (!v20) {
      goto LABEL_34;
    }
LABEL_33:
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
    goto LABEL_34;
  }

  uint64_t v16 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = sub_10056AAD8(a1 + 64);
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = v17;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = v51 - 3;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Using Write Long Characteristic Value, as data exceeds PDU capacity at current MTU (%zu of available %u bytes)",  buf,  0x12u);
  }

  __int16 v18 = *((_WORD *)v7 + 37);
  int v19 = operator new(0x40uLL);
  sub_100549E54((uint64_t)v19, a1 + 48, v18, a1 + 64);
  uint64_t v20 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v19;
  if (v20) {
    goto LABEL_33;
  }
LABEL_34:
  id v23 = *(id *)(a1 + 16);
  uint64_t v24 = *(void *)(a1 + 80);
  unint64_t v25 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v48 = *(void *)(a1 + 24);
  unint64_t v49 = v25;
  if (v25)
  {
    uint64_t v26 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }

  sub_10053CEB4(v24, v23, &v48, *(_WORD *)(a1 + 40));
  uint64_t v28 = v49;
  if (v49)
  {
    uint64_t v29 = (unint64_t *)&v49->__shared_owners_;
    do
      unint64_t v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }

  *(_OWORD *)buf = *(_OWORD *)((char *)v7 + 76);
  *(_DWORD *)&uint8_t buf[16] = *((_DWORD *)v7 + 23);
  sub_100634334(&v57, (__n128 *)buf);
  __int128 v53 = xmmword_1006BDC20;
  int v54 = -428657769;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
  }
  double v32 = sub_1005CC8D0((uint64_t)off_1008D5F28, v23);
  double Current = CFAbsoluteTimeGetCurrent();
  int v34 = (unsigned __int8 *)sub_10056AAF0(v14);
  if (v34)
  {
    int v35 = *v34;
    if (v35 == 1)
    {
      if (v32 == 0.0)
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
        }
        sub_1005CC960((uint64_t)off_1008D5F28, v23, Current);
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
        }
        __int16 v36 = off_1008D5F28;
        int v37 = sub_10056AAD8(v14);
        sub_1005CCB88((uint64_t)v36, v23, v37);
        int v38 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "DigitalID LE_ISO18013_5_CLIENT2SERVER write starts.",  buf,  2u);
          int v38 = (os_log_s *)qword_1008F75B0;
        }

        if (os_signpost_enabled(v38))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v38,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "BTSignPost",  "DigitalID LE_ISO18013_5_CLIENT2SERVER write starts.",  buf,  2u);
        }

        goto LABEL_77;
      }

      if (qword_1008D5F30 == -1) {
        goto LABEL_76;
      }
LABEL_78:
      dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
LABEL_76:
      id v46 = off_1008D5F28;
      int v47 = sub_10056AAD8(v14);
      sub_1005CCC10((uint64_t)v46, v23, v47);
      goto LABEL_77;
    }

    __int16 v43 = (os_log_s *)qword_1008F75B0;
    BOOL v44 = os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT);
    if (!v35)
    {
      if (v44)
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "DigitalID LE_ISO18013_5_CLIENT2SERVER write ends.",  buf,  2u);
        __int16 v43 = (os_log_s *)qword_1008F75B0;
      }

      if (os_signpost_enabled(v43))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v43,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "BTSignPost",  "DigitalID LE_ISO18013_5_CLIENT2SERVER write ends.",  buf,  2u);
      }

      if (Current <= 0.0 || Current < v32)
      {
        uint64_t v45 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(double *)&uint8_t buf[4] = Current;
          *(_WORD *)&_BYTE buf[12] = 2048;
          *(double *)&buf[14] = v32;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "Warning: currentTime %.3f is before lastDigitalIDWriteStartTime %.3f",  buf,  0x16u);
        }
      }

      else
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
        }
        sub_1005CCA78((uint64_t)off_1008D5F28, v23, Current);
      }

      if (qword_1008D5F30 == -1) {
        goto LABEL_76;
      }
      goto LABEL_78;
    }

    if (v44)
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v35;
      int v40 = "Warning: Unexpected prepend in LE_ISO18013_5_CLIENT2SERVER characteristics 0x%2x";
      uint64_t v41 = v43;
      uint32_t v42 = 8;
      goto LABEL_70;
    }
  }

  else
  {
    uint64_t v39 = qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      int v40 = "Warning: No Characteristics value found for LE_ISO18013_5_CLIENT2SERVER characteristic";
      uint64_t v41 = (os_log_s *)v39;
      uint32_t v42 = 2;
LABEL_70:
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, v40, buf, v42);
    }
  }

void sub_100544A04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, char a13, char a14, __int16 a15, char a16)
{
}

uint64_t sub_100544A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 80) != a2)
  {
    uint64_t v7 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT)) {
      sub_100690FF0(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }

  return sub_10053CFAC(a1, a3, a4);
}

uint64_t sub_100544AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100544A88(a1 - 48, a2, a3, a4);
}

uint64_t sub_100544B00(uint64_t a1)
{
  return 0LL;
}

void sub_100544B18(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 56))
  {
    case 0:
      sub_100544C84(a1);
      break;
    case 1:
      sub_100544DE0(a1);
      break;
    case 2:
      sub_100544EFC(a1);
      break;
    case 3:
      sub_100545060(a1);
      break;
    case 4:
      (*(void (**)(uint64_t, void))(*(void *)a1 + 24LL))(a1, 0LL);
      break;
    default:
      return;
  }

void sub_100544B60(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(void *)(a1 + 64) != a2)
  {
    uint64_t v7 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT)) {
      sub_100691060(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }

  uint64_t v16 = *(void **)a4;
  unint64_t v15 = *(void **)(a4 + 8);
  while (v16 != v15)
  {
    if (*v16)
    {
      (*(void (**)(void))(*(void *)*v16 + 8LL))(*v16);
      unint64_t v15 = *(void **)(a4 + 8);
    }

    ++v16;
  }

  int v17 = 4;
  switch(*(_DWORD *)(a1 + 56))
  {
    case 0:
    case 2:
    case 4:
      uint64_t v18 = sub_1002E6E00();
      sub_1004FC118(v18, 1);
    case 1:
      if (a3) {
        int v17 = 4;
      }
      else {
        int v17 = 2;
      }
      goto LABEL_13;
    case 3:
LABEL_13:
      *(_DWORD *)(a1 + 56) = v17;
      break;
    default:
      break;
  }

  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  void v19[2] = sub_100544C74;
  v19[3] = &unk_10087EB20;
  _OWORD v19[4] = a1;
  sub_10053D124(a1, v19);
}

void sub_100544C74(uint64_t a1)
{
}

void sub_100544C7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

void sub_100544C84(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  void v10[5] = v3;
  v10[6] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  __int128 v12 = xmmword_1006BDB1C;
  int v13 = 0;
  sub_100634334(&v14, (__n128 *)&v12);
  sub_10063432C(v11);
  uint64_t v6 = sub_1004439C4(v3, (unsigned __int8 *)&v14, v11);
  *(void *)(a1 + 72) = v6;
  if (v2)
  {
    uint64_t v7 = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }

    uint64_t v6 = *(void *)(a1 + 72);
  }

  if (v6) {
    int v9 = 1;
  }
  else {
    int v9 = 4;
  }
  *(_DWORD *)(a1 + 56) = v9;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1005451C0;
  v10[3] = &unk_10087EB20;
  _OWORD v10[4] = a1;
  sub_10053D124(a1, v10);
}

void sub_100544DC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_100544DE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  __int16 v3 = **(_WORD **)(v2 + 8);
  __int16 v4 = *(_WORD *)(v2 + 48);
  unint64_t v5 = operator new(0x30uLL);
  uint64_t v6 = (uint64_t)v5;
  if (a1) {
    uint64_t v7 = a1 + 48;
  }
  else {
    uint64_t v7 = 0LL;
  }
  uint64_t v8 = sub_10053CE50((uint64_t)v5, v7);
  *(void *)uint64_t v8 = off_1008A0878;
  *(_WORD *)(v8 + 42) = v3;
  *(_WORD *)(v8 + 44) = v4;
  uint64_t v9 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v6;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    uint64_t v6 = *(void *)(a1 + 64);
  }

  id v10 = *(id *)(a1 + 16);
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v18 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }

  sub_10053CEB4(v6, v10, &v17, *(_WORD *)(a1 + 40));
  __n128 v14 = v18;
  if (v18)
  {
    unint64_t v15 = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_100544EE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_100544EFC(uint64_t a1)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  int v15 = 0;
  sub_100634348((uint64_t)v14, 10916);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  void v10[5] = v3;
  v10[6] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  __int128 v11 = xmmword_1006BDB1C;
  int v12 = 0;
  sub_100634334(&v13, (__n128 *)&v11);
  uint64_t v6 = sub_1004439C4(v3, (unsigned __int8 *)&v13, (unsigned __int8 *)v14);
  *(void *)(a1 + 80) = v6;
  if (v2)
  {
    uint64_t v7 = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }

    uint64_t v6 = *(void *)(a1 + 80);
  }

  if (v6) {
    int v9 = 3;
  }
  else {
    int v9 = 4;
  }
  *(_DWORD *)(a1 + 56) = v9;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1005451C8;
  v10[3] = &unk_10087EB20;
  _OWORD v10[4] = a1;
  sub_10053D124(a1, v10);
}

void sub_100545044( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_100545060(uint64_t a1)
{
  char v17 = 3;
  __int16 v2 = *(_WORD *)(*(void *)(a1 + 80) + 74LL);
  sub_10056AB04(&v15, &v17, 1uLL);
  uint64_t v3 = operator new(0x40uLL);
  sub_100549D30((uint64_t)v3, a1 + 48, v2, (uint64_t)&v15);
  uint64_t v4 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  int v15 = &off_10087FAA8;
  if (v16) {
    sub_1002CD254(v16);
  }
  uint64_t v5 = *(void *)(a1 + 64);
  id v6 = *(id *)(a1 + 16);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 24);
  __n128 v14 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  sub_10053CEB4(v5, v6, &v13, *(_WORD *)(a1 + 40));
  id v10 = v14;
  if (v14)
  {
    __int128 v11 = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_100545178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1005451C0(uint64_t a1)
{
  return sub_100544B18(*(void *)(a1 + 32));
}

uint64_t sub_1005451C8(uint64_t a1)
{
  return sub_100544B18(*(void *)(a1 + 32));
}

uint64_t sub_1005451D0(uint64_t a1)
{
  return 0LL;
}

void sub_1005451E8(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 56))
  {
    case 0:
      sub_100546810(a1);
      break;
    case 1:
      sub_100546968(a1);
      break;
    case 2:
      __int128 v32 = xmmword_1006BD9F0;
      int v33 = 0;
      sub_100546BA4(a1, (__n128 *)&v32, 3);
      break;
    case 3:
      __int128 v30 = xmmword_1006BDA04;
      int v31 = 0;
      sub_100546BA4(a1, (__n128 *)&v30, 4);
      break;
    case 4:
      __int128 v28 = xmmword_1006BDA18;
      int v29 = 0;
      sub_100546BA4(a1, (__n128 *)&v28, 5);
      break;
    case 5:
      __int128 v26 = xmmword_1006BDA2C;
      int v27 = 0;
      sub_100546BA4(a1, (__n128 *)&v26, 6);
      break;
    case 6:
      __int128 v24 = xmmword_1006BDA40;
      int v25 = 0;
      sub_100546BA4(a1, (__n128 *)&v24, 7);
      break;
    case 7:
      __int128 v22 = xmmword_1006BDA54;
      int v23 = 0;
      sub_100546BA4(a1, (__n128 *)&v22, 8);
      break;
    case 8:
      __int128 v20 = xmmword_1006BDA68;
      int v21 = 0;
      sub_100546BA4(a1, (__n128 *)&v20, 9);
      break;
    case 9:
      __int128 v18 = xmmword_1006BDA7C;
      int v19 = 0;
      sub_100546BA4(a1, (__n128 *)&v18, 10);
      break;
    case 0xA:
      __int128 v16 = xmmword_1006BDA90;
      int v17 = 0;
      sub_100546BA4(a1, (__n128 *)&v16, 11);
      break;
    case 0xB:
      __int128 v14 = xmmword_1006BDAA4;
      int v15 = 0;
      sub_100546BA4(a1, (__n128 *)&v14, 12);
      break;
    case 0xC:
      __int16 v2 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
      {
        id v3 = *(id *)(a1 + 16);
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
        }
        uint64_t v4 = off_1008D5F28;
        id v5 = *(id *)(a1 + 16);
        sub_1005D6B3C((uint64_t)v4, v5, &__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 138412546;
        id v11 = v3;
        __int16 v12 = 2080;
        uint64_t v13 = p_p;
        _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Completed DIS discovery for device %@ %s",  buf,  0x16u);
      }

      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
      }
      sub_1005CB748((uint64_t)off_1008D5F28, *(void **)(a1 + 16), 1);
      if (qword_1008D5F60 != -1) {
        dispatch_once(&qword_1008D5F60, &stru_1008A0CF8);
      }
      uint64_t v7 = qword_1008D5F58;
      id v8 = *(id *)(a1 + 16);
      sub_100241F90(&__p, v8);
      sub_10055383C(v7, (unsigned __int8 *)&__p);

      (*(void (**)(uint64_t, void))(*(void *)a1 + 24LL))(a1, 0LL);
      break;
    default:
      return;
  }

void sub_100545638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100545698(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  if (*(void *)(a1 + 64) != a2)
  {
    uint64_t v7 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT)) {
      sub_100691060(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }

  id v15 = *(id *)(a1 + 16);
  switch(*(_DWORD *)(a1 + 56))
  {
    case 0:
    case 0xC:
      uint64_t v115 = sub_1002E6E00();
      sub_1004FC118(v115, 1);
    case 1:
      if (a3) {
        int v16 = 12;
      }
      else {
        int v16 = 2;
      }
      goto LABEL_28;
    case 2:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v76 = *(void *)(*(void *)*a4 + 8LL);
        int v77 = *(_DWORD *)(v76 + 20);
        __n128 __dst = *(__n128 *)(v76 + 4);
        int v166 = v77;
        sub_100634334(&v170, &__dst);
        int v169 = 0;
        __int128 v168 = xmmword_1006C3ED0;
        if (sub_1001BEC7C(v78, (unsigned __int8 *)&v168))
        {
          uint64_t v79 = *(void *)*a4 + 72LL;
          v80 = (void *)sub_10056AAF0(v79);
          size_t v81 = sub_10056AAD8(v79);
          sub_100330694(&__dst, v80, v81);
          if (v167 >= 0) {
            p_dst = &__dst;
          }
          else {
            p_dst = (__n128 *)__dst.n128_u64[0];
          }
          v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_dst));
          if (v167 < 0) {
            operator delete((void *)__dst.n128_u64[0]);
          }
          uint64_t v84 = sub_100404FE8();
          v144[0] = _NSConcreteStackBlock;
          v144[1] = 3221225472LL;
          v144[2] = sub_1005464E0;
          v144[3] = &unk_10087FB90;
          id v145 = v15;
          id v85 = v83;
          id v146 = v85;
          sub_100405384(v84, v144);
        }
      }

      int v16 = 3;
      goto LABEL_28;
    case 3:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v66 = *(void *)(*(void *)*a4 + 8LL);
        int v67 = *(_DWORD *)(v66 + 20);
        __n128 __dst = *(__n128 *)(v66 + 4);
        int v166 = v67;
        sub_100634334(&v170, &__dst);
        int v164 = 0;
        __int128 v163 = xmmword_1006C3ED0;
        if (sub_1001BEC7C(v68, (unsigned __int8 *)&v163))
        {
          uint64_t v69 = *(void *)*a4 + 72LL;
          id v70 = (void *)sub_10056AAF0(v69);
          size_t v71 = sub_10056AAD8(v69);
          sub_100330694(&__dst, v70, v71);
          if (v167 >= 0) {
            int v72 = &__dst;
          }
          else {
            int v72 = (__n128 *)__dst.n128_u64[0];
          }
          __int128 v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v72));
          if (v167 < 0) {
            operator delete((void *)__dst.n128_u64[0]);
          }
          uint64_t v74 = sub_100404FE8();
          v141[0] = _NSConcreteStackBlock;
          v141[1] = 3221225472LL;
          v141[2] = sub_100546530;
          v141[3] = &unk_10087FB90;
          id v142 = v15;
          id v75 = v73;
          id v143 = v75;
          sub_100405384(v74, v141);
        }
      }

      int v16 = 4;
      goto LABEL_28;
    case 4:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v47 = *(void *)(*(void *)*a4 + 8LL);
        int v48 = *(_DWORD *)(v47 + 20);
        __n128 __dst = *(__n128 *)(v47 + 4);
        int v166 = v48;
        sub_100634334(&v170, &__dst);
        int v162 = 0;
        __int128 v161 = xmmword_1006C3ED0;
        if (sub_1001BEC7C(v49, (unsigned __int8 *)&v161))
        {
          uint64_t v50 = *(void *)*a4 + 72LL;
          unsigned __int16 v51 = (void *)sub_10056AAF0(v50);
          size_t v52 = sub_10056AAD8(v50);
          sub_100330694(&__dst, v51, v52);
          if (v167 >= 0) {
            __int128 v53 = &__dst;
          }
          else {
            __int128 v53 = (__n128 *)__dst.n128_u64[0];
          }
          int v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v53));
          if (v167 < 0) {
            operator delete((void *)__dst.n128_u64[0]);
          }
          uint64_t v55 = sub_100404FE8();
          v138[0] = _NSConcreteStackBlock;
          v138[1] = 3221225472LL;
          v138[2] = sub_100546580;
          v138[3] = &unk_10087FB90;
          id v139 = v15;
          id v56 = v54;
          id v140 = v56;
          sub_100405384(v55, v138);
        }
      }

      int v16 = 5;
      goto LABEL_28;
    case 5:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v95 = *(void *)(*(void *)*a4 + 8LL);
        int v96 = *(_DWORD *)(v95 + 20);
        __n128 __dst = *(__n128 *)(v95 + 4);
        int v166 = v96;
        sub_100634334(&v170, &__dst);
        int v160 = 0;
        __int128 v159 = xmmword_1006C3ED0;
        if (sub_1001BEC7C(v97, (unsigned __int8 *)&v159))
        {
          uint64_t v98 = *(void *)*a4 + 72LL;
          v99 = (void *)sub_10056AAF0(v98);
          size_t v100 = sub_10056AAD8(v98);
          sub_100330694(&__dst, v99, v100);
          if (v167 >= 0) {
            v101 = &__dst;
          }
          else {
            v101 = (__n128 *)__dst.n128_u64[0];
          }
          v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v101));
          if (v167 < 0) {
            operator delete((void *)__dst.n128_u64[0]);
          }
          uint64_t v103 = sub_100404FE8();
          v135[0] = _NSConcreteStackBlock;
          v135[1] = 3221225472LL;
          v135[2] = sub_1005465D0;
          v135[3] = &unk_10087FB90;
          id v136 = v15;
          id v104 = v102;
          id v137 = v104;
          sub_100405384(v103, v135);
        }
      }

      int v16 = 6;
      goto LABEL_28;
    case 6:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v105 = *(void *)(*(void *)*a4 + 8LL);
        int v106 = *(_DWORD *)(v105 + 20);
        __n128 __dst = *(__n128 *)(v105 + 4);
        int v166 = v106;
        sub_100634334(&v170, &__dst);
        int v158 = 0;
        __int128 v157 = xmmword_1006C3ED0;
        if (sub_1001BEC7C(v107, (unsigned __int8 *)&v157))
        {
          uint64_t v108 = *(void *)*a4 + 72LL;
          v109 = (void *)sub_10056AAF0(v108);
          size_t v110 = sub_10056AAD8(v108);
          sub_100330694(&__dst, v109, v110);
          if (v167 >= 0) {
            v111 = &__dst;
          }
          else {
            v111 = (__n128 *)__dst.n128_u64[0];
          }
          v112 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v111));
          if (v167 < 0) {
            operator delete((void *)__dst.n128_u64[0]);
          }
          uint64_t v113 = sub_100404FE8();
          v132[0] = _NSConcreteStackBlock;
          v132[1] = 3221225472LL;
          v132[2] = sub_100546620;
          v132[3] = &unk_10087FB90;
          id v133 = v15;
          id v114 = v112;
          id v134 = v114;
          sub_100405384(v113, v132);
        }
      }

      int v16 = 7;
      goto LABEL_28;
    case 7:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v37 = *(void *)(*(void *)*a4 + 8LL);
        int v38 = *(_DWORD *)(v37 + 20);
        __n128 __dst = *(__n128 *)(v37 + 4);
        int v166 = v38;
        sub_100634334(&v170, &__dst);
        int v156 = 0;
        __int128 v155 = xmmword_1006C3ED0;
        if (sub_1001BEC7C(v39, (unsigned __int8 *)&v155))
        {
          uint64_t v40 = *(void *)*a4 + 72LL;
          uint64_t v41 = (void *)sub_10056AAF0(v40);
          size_t v42 = sub_10056AAD8(v40);
          sub_100330694(&__dst, v41, v42);
          if (v167 >= 0) {
            __int16 v43 = &__dst;
          }
          else {
            __int16 v43 = (__n128 *)__dst.n128_u64[0];
          }
          BOOL v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v43));
          if (v167 < 0) {
            operator delete((void *)__dst.n128_u64[0]);
          }
          uint64_t v45 = sub_100404FE8();
          v129[0] = _NSConcreteStackBlock;
          v129[1] = 3221225472LL;
          v129[2] = sub_100546670;
          v129[3] = &unk_10087FB90;
          id v130 = v15;
          id v46 = v44;
          id v131 = v46;
          sub_100405384(v45, v129);
        }
      }

      int v16 = 8;
      goto LABEL_28;
    case 8:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v57 = *(void *)(*(void *)*a4 + 8LL);
        int v58 = *(_DWORD *)(v57 + 20);
        __n128 __dst = *(__n128 *)(v57 + 4);
        int v166 = v58;
        sub_100634334(&v170, &__dst);
        int v154 = 0;
        __int128 v153 = xmmword_1006C3ED0;
        if (sub_1001BEC7C(v59, (unsigned __int8 *)&v153))
        {
          uint64_t v60 = *(void *)*a4 + 72LL;
          uint64_t v61 = sub_10056AAF0(v60);
          unint64_t v62 = +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v61, sub_10056AAD8(v60));
          __n128 v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
          uint64_t v64 = sub_100404FE8();
          v126[0] = _NSConcreteStackBlock;
          v126[1] = 3221225472LL;
          v126[2] = sub_1005466C0;
          v126[3] = &unk_10087FB90;
          id v127 = v15;
          id v65 = v63;
          id v128 = v65;
          sub_100405384(v64, v126);
        }
      }

      int v16 = 9;
      goto LABEL_28;
    case 9:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v19 = *(void *)(*(void *)*a4 + 8LL);
        int v20 = *(_DWORD *)(v19 + 20);
        __n128 __dst = *(__n128 *)(v19 + 4);
        int v166 = v20;
        sub_100634334(&v170, &__dst);
        int v152 = 0;
        __int128 v151 = xmmword_1006C3ED0;
        if (sub_1001BEC7C(v21, (unsigned __int8 *)&v151))
        {
          uint64_t v22 = *(void *)*a4 + 72LL;
          uint64_t v23 = sub_10056AAF0(v22);
          __int128 v24 = +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v23, sub_10056AAD8(v22));
          int v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
          uint64_t v26 = sub_100404FE8();
          v123[0] = _NSConcreteStackBlock;
          v123[1] = 3221225472LL;
          v123[2] = sub_100546710;
          v123[3] = &unk_10087FB90;
          id v124 = v15;
          id v27 = v25;
          id v125 = v27;
          sub_100405384(v26, v123);
        }
      }

      int v16 = 10;
      goto LABEL_28;
    case 0xA:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v28 = *(void *)(*(void *)*a4 + 8LL);
        int v29 = *(_DWORD *)(v28 + 20);
        __n128 __dst = *(__n128 *)(v28 + 4);
        int v166 = v29;
        sub_100634334(&v170, &__dst);
        int v150 = 0;
        __int128 v149 = xmmword_1006C3ED0;
        if (sub_1001BEC7C(v30, (unsigned __int8 *)&v149))
        {
          uint64_t v31 = *(void *)*a4 + 72LL;
          uint64_t v32 = sub_10056AAF0(v31);
          int v33 = +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v32, sub_10056AAD8(v31));
          int v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
          uint64_t v35 = sub_100404FE8();
          v120[0] = _NSConcreteStackBlock;
          v120[1] = 3221225472LL;
          v120[2] = sub_100546760;
          v120[3] = &unk_10087FB90;
          id v121 = v15;
          id v36 = v34;
          id v122 = v36;
          sub_100405384(v35, v120);
        }
      }

      int v16 = 11;
      goto LABEL_28;
    case 0xB:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v86 = *(void *)(*(void *)*a4 + 8LL);
        int v87 = *(_DWORD *)(v86 + 20);
        __n128 __dst = *(__n128 *)(v86 + 4);
        int v166 = v87;
        sub_100634334(&v170, &__dst);
        int v148 = 0;
        __int128 v147 = xmmword_1006C3ED0;
        if (sub_1001BEC7C(v88, (unsigned __int8 *)&v147))
        {
          uint64_t v89 = *(void *)*a4 + 72LL;
          uint64_t v90 = sub_10056AAF0(v89);
          v91 = +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v90, sub_10056AAD8(v89));
          v92 = (void *)objc_claimAutoreleasedReturnValue(v91);
          uint64_t v93 = sub_100404FE8();
          v117[0] = _NSConcreteStackBlock;
          v117[1] = 3221225472LL;
          v117[2] = sub_1005467B0;
          v117[3] = &unk_10087FB90;
          id v118 = v15;
          id v94 = v92;
          id v119 = v94;
          sub_100405384(v93, v117);
        }
      }

      int v16 = 12;
LABEL_28:
      *(_DWORD *)(a1 + 56) = v16;
      break;
    default:
      break;
  }

  __int128 v18 = (void *)*a4;
  int v17 = (void *)a4[1];
  while (v18 != v17)
  {
    if (*v18)
    {
      (*(void (**)(void))(*(void *)*v18 + 8LL))(*v18);
      int v17 = (void *)a4[1];
    }

    ++v18;
  }

  v116[0] = _NSConcreteStackBlock;
  v116[1] = 3221225472LL;
  v116[2] = sub_100546800;
  v116[3] = &unk_10087EB20;
  v116[4] = a1;
  sub_10053D124(a1, v116);
}

void sub_1005462E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49, void *a50)
{
  _Unwind_Resume(a1);
}

void sub_1005464E0(uint64_t a1)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
  }
  sub_1005D56B8((uint64_t)off_1008D5F28, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_100546530(uint64_t a1)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
  }
  sub_1005D590C((uint64_t)off_1008D5F28, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_100546580(uint64_t a1)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
  }
  sub_1005D5A44((uint64_t)off_1008D5F28, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1005465D0(uint64_t a1)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
  }
  sub_1005D5B7C((uint64_t)off_1008D5F28, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_100546620(uint64_t a1)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
  }
  sub_1005D5CB4((uint64_t)off_1008D5F28, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_100546670(uint64_t a1)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
  }
  sub_1005D5DEC((uint64_t)off_1008D5F28, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1005466C0(uint64_t a1)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
  }
  sub_1005D5F24((uint64_t)off_1008D5F28, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_100546710(uint64_t a1)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
  }
  sub_1005D605C((uint64_t)off_1008D5F28, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_100546760(uint64_t a1)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
  }
  sub_1005D6194((uint64_t)off_1008D5F28, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1005467B0(uint64_t a1)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A0D18);
  }
  sub_1005D67A0((uint64_t)off_1008D5F28, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_100546800(uint64_t a1)
{
}

void sub_100546808(uint64_t a1, uint64_t a2, int a3, void *a4)
{
}

void sub_100546810(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  __int16 v2 = *(std::__shared_weak_count **)(a1 + 32);
  void v10[5] = v3;
  v10[6] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  __int128 v12 = xmmword_1006BD9DC;
  int v13 = 0;
  sub_100634334(&v14, (__n128 *)&v12);
  sub_10063432C(v11);
  uint64_t v6 = sub_1004439C4(v3, (unsigned __int8 *)&v14, v11);
  if (v2)
  {
    uint64_t v7 = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  if (v6) {
    int v9 = 1;
  }
  else {
    int v9 = 12;
  }
  *(_DWORD *)(a1 + 56) = v9;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100546F00;
  v10[3] = &unk_10087EB20;
  _OWORD v10[4] = a1;
  sub_10053D124(a1, v10);
}

void sub_100546948( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_100546968(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  __int16 v2 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v25 = v3;
  uint64_t v26 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  __int128 v28 = xmmword_1006BD9DC;
  int v29 = 0;
  sub_100634334(&v30, (__n128 *)&v28);
  sub_10063432C(v27);
  uint64_t v6 = sub_1004439C4(v3, (unsigned __int8 *)&v30, v27);
  uint64_t v7 = v6;
  if (v2)
  {
    unint64_t v8 = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (v7) {
        goto LABEL_9;
      }
LABEL_21:
      *(_DWORD *)(a1 + 56) = 12;
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472LL;
      void v22[2] = sub_100546F08;
      v22[3] = &unk_10087EB20;
      _OWORD v22[4] = a1;
      sub_10053D124(a1, v22);
      return;
    }
  }

  if (!v6) {
    goto LABEL_21;
  }
LABEL_9:
  __int16 v10 = **(_WORD **)(v7 + 8);
  __int16 v11 = *(_WORD *)(v7 + 48);
  __int128 v12 = operator new(0x30uLL);
  uint64_t v13 = sub_10053CE50((uint64_t)v12, a1 + 48);
  *(void *)uint64_t v13 = off_1008A0878;
  *(_WORD *)(v13 + 42) = v10;
  *(_WORD *)(v13 + 44) = v11;
  uint64_t v14 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v12;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    __int128 v12 = *(void **)(a1 + 64);
  }

  id v15 = *(id *)(a1 + 16);
  int v16 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v23 = *(void *)(a1 + 24);
  __int128 v24 = v16;
  if (v16)
  {
    int v17 = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }

  sub_10053CEB4((uint64_t)v12, v15, &v23, *(_WORD *)(a1 + 40));
  uint64_t v19 = v24;
  if (v24)
  {
    int v20 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_100546B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _Unwind_Resume(a1);
}

void sub_100546BA4(uint64_t a1, __n128 *a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v36 = v6;
  uint64_t v37 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  __int128 v42 = xmmword_1006BD9DC;
  int v43 = 0;
  sub_100634334(&v46, (__n128 *)&v42);
  sub_10063432C(&v44);
  uint64_t v10 = sub_1004439C4(v6, (unsigned __int8 *)&v46, (unsigned __int8 *)&v44);
  uint64_t v11 = v10;
  if (!v7) {
    goto LABEL_8;
  }
  __int128 v12 = (unint64_t *)&v7->__shared_owners_;
  do
    unint64_t v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
  {
LABEL_8:
    if (v10) {
      goto LABEL_9;
    }
LABEL_29:
    a3 = 12;
    goto LABEL_30;
  }

  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v11) {
    goto LABEL_29;
  }
LABEL_9:
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v36 = v15;
  uint64_t v37 = v14;
  if (v14)
  {
    int v16 = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  __int128 v40 = xmmword_1006BD9DC;
  int v41 = 0;
  sub_100634334(&v46, (__n128 *)&v40);
  __n128 v38 = *a2;
  unsigned __int32 v39 = a2[1].n128_u32[0];
  sub_100634334(&v44, &v38);
  uint64_t v18 = sub_1004439C4(v15, (unsigned __int8 *)&v46, (unsigned __int8 *)&v44);
  uint64_t v19 = v18;
  if (v14)
  {
    int v20 = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if (v19) {
        goto LABEL_17;
      }
LABEL_30:
      *(_DWORD *)(a1 + 56) = a3;
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472LL;
      void v33[2] = sub_100546F10;
      v33[3] = &unk_10087EB20;
      v33[4] = a1;
      sub_10053D124(a1, v33);
      return;
    }
  }

  if (!v18) {
    goto LABEL_30;
  }
LABEL_17:
  __int16 v22 = **(_WORD **)(v11 + 8);
  __int16 v23 = *(_WORD *)(v11 + 48);
  __int128 v24 = (char *)operator new(0x48uLL);
  __n128 v44 = *a2;
  unsigned __int32 v45 = a2[1].n128_u32[0];
  sub_100634334(&v46, &v44);
  sub_10053CE50((uint64_t)v24, a1 + 48);
  *(void *)__int128 v24 = off_1008A0968;
  *(__n128 *)(v24 + 44) = v46;
  *((_DWORD *)v24 + 15) = v47;
  *((_WORD *)v24 + 32) = v22;
  *((_WORD *)v24 + 33) = v23;
  *((_WORD *)v24 + 34) = 1;
  uint64_t v25 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v24;
  if (v25)
  {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
    __int128 v24 = *(char **)(a1 + 64);
  }

  id v26 = *(id *)(a1 + 16);
  id v27 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v34 = *(void *)(a1 + 24);
  uint64_t v35 = v27;
  if (v27)
  {
    __int128 v28 = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }

  sub_10053CEB4((uint64_t)v24, v26, &v34, *(_WORD *)(a1 + 40));
  __n128 v30 = v35;
  if (v35)
  {
    uint64_t v31 = (unint64_t *)&v35->__shared_owners_;
    do
      unint64_t v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_100546EB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100546F00(uint64_t a1)
{
  return sub_1005451E8(*(void *)(a1 + 32));
}

uint64_t sub_100546F08(uint64_t a1)
{
  return sub_1005451E8(*(void *)(a1 + 32));
}

uint64_t sub_100546F10(uint64_t a1)
{
  return sub_1005451E8(*(void *)(a1 + 32));
}

uint64_t sub_100546F18(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_100546F30(uint64_t result)
{
  uint64_t v1 = result;
  switch(*(_DWORD *)(result + 60))
  {
    case 0:
      uint64_t result = sub_1005472E0(result);
      break;
    case 1:
      uint64_t result = sub_100547608(result);
      break;
    case 2:
      if (qword_1008D5F60 != -1) {
        dispatch_once(&qword_1008D5F60, &stru_1008A0CF8);
      }
      uint64_t v2 = qword_1008D5F58;
      id v3 = *(id *)(v1 + 16);
      sub_100241F90(&v20, v3);
      sub_100552BD8(v2, (unsigned __int8 *)&v20);

      if (!*(_BYTE *)(v1 + 58)) {
        goto LABEL_8;
      }
      uint64_t result = sub_100547734((void *)v1);
      break;
    case 3:
LABEL_8:
      *(unsigned __int32 *)((char *)v20.n128_u32 + 3) = 0;
      v20.n128_u32[0] = 0;
      sub_1001BDFB4((uint64_t)&v20);
      if (v20.n128_u8[0] == 1 && v20.n128_u8[1] <= 0x3Fu) {
        uint64_t result = sub_100547944(v1);
      }
      else {
        uint64_t result = sub_100547F80(v1);
      }
      break;
    case 4:
      uint64_t result = sub_100547BFC(result);
      break;
    case 5:
      uint64_t result = sub_100547F80(result);
      break;
    case 6:
      uint64_t v5 = *(void *)(result + 24);
      uint64_t v4 = *(std::__shared_weak_count **)(result + 32);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          unint64_t v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }

      __int128 v18 = xmmword_1006BD978;
      int v19 = 0;
      sub_100634334(&v20, (__n128 *)&v18);
      __int128 v15 = xmmword_1006BD9C8;
      int v16 = 0;
      sub_100634334(&v17, (__n128 *)&v15);
      uint64_t v8 = sub_1004439C4(v5, (unsigned __int8 *)&v20, (unsigned __int8 *)&v17);
      if (v4)
      {
        unint64_t v9 = (unint64_t *)&v4->__shared_owners_;
        do
          unint64_t v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }

      if (v8
        && (uint64_t v11 = *(void *)(v8 + 8),
            int v12 = *(_DWORD *)(v11 + 20),
            __n128 v20 = *(__n128 *)(v11 + 4),
            int v21 = v12,
            sub_100634334(&v17, &v20),
            int v14 = 0,
            __int128 v13 = xmmword_1006C3E44,
            sub_1001BEC7C((unsigned __int8 *)&v17, (unsigned __int8 *)&v13)))
      {
        uint64_t result = sub_100548238(v1);
      }

      else
      {
        uint64_t result = sub_10054850C(v1);
      }

      break;
    case 7:
      uint64_t result = sub_10054850C(result);
      break;
    case 8:
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 24LL))(result, 0LL);
      break;
    default:
      return result;
  }

  return result;
}

void sub_100547290( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005472E0(uint64_t a1)
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_1008A0D38);
  }
  uint64_t v2 = off_1008D5F08;
  id v3 = *(id *)(a1 + 16);
  sub_100241F90(buf, v3);
  BOOL v4 = sub_100595874((uint64_t)v2, buf);

  int v5 = *(unsigned __int16 *)(a1 + 56);
  if (*(_WORD *)(a1 + 56)) {
    BOOL v6 = v4;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    unint64_t v7 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 67109378;
      int v18 = v5;
      __int16 v19 = 2112;
      id v20 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Attempting to set MTU to %u on device %@",  buf,  0x12u);
    }

    unint64_t v9 = operator new(0x30uLL);
    __int16 v10 = *(_WORD *)(a1 + 56);
    uint64_t v11 = sub_10053CE50((uint64_t)v9, a1 + 48);
    *(void *)uint64_t v11 = off_1008A07B8;
    *(_WORD *)(v11 + 42) = v10;
    uint64_t v16 = v11;
    sub_10054751C(a1, &v16, 1);
    uint64_t result = v16;
    if (v16) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
    }
  }

  else
  {
    sub_10053D074(a1, *(_WORD *)(a1 + 56));
    __int128 v13 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *(unsigned __int16 *)(a1 + 56);
      id v15 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 67109378;
      int v18 = v14;
      __int16 v19 = 2112;
      id v20 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Skipping MTU %u set on remote to discovering services for device %@",  buf,  0x12u);
    }

    return sub_100547608(a1);
  }

  return result;
}

void sub_1005474E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10054751C(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5 = *a2;
  *a2 = 0LL;
  uint64_t v6 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    uint64_t v5 = *(void *)(a1 + 64);
  }

  *(_DWORD *)(a1 + 60) = a3;
  id v7 = *(id *)(a1 + 16);
  id v8 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 24);
  id v15 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_10053CEB4(v5, v7, &v14, *(_WORD *)(a1 + 40));
  uint64_t v11 = v15;
  if (v15)
  {
    int v12 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1005475F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100547608(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(id *)(a1 + 16);
    *(_DWORD *)buf = 138412290;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Attempting to find all services on device %@",  buf,  0xCu);
  }

  BOOL v4 = operator new(0x30uLL);
  if (a1) {
    uint64_t v5 = a1 + 48;
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = (void *)sub_10053CE50((uint64_t)v4, v5);
  *uint64_t v6 = off_1008A07E8;
  id v8 = v6;
  sub_10054751C(a1, (uint64_t *)&v8, 2);
  uint64_t result = (uint64_t)v8;
  if (v8) {
    return (*(uint64_t (**)(void *))(*v8 + 8LL))(v8);
  }
  return result;
}

void sub_10054770C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100547734(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  v15[1] = v3;
  void v15[2] = (uint64_t)v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  __int128 v19 = xmmword_1006BD964;
  int v20 = 0;
  sub_100634334(&v21, (__n128 *)&v19);
  sub_10063432C(&v18);
  uint64_t v6 = sub_1004439C4(v3, (unsigned __int8 *)&v21, (unsigned __int8 *)&v18);
  uint64_t v7 = v6;
  if (!v2) {
    goto LABEL_8;
  }
  id v8 = (unint64_t *)&v2->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!v7) {
      goto LABEL_13;
    }
  }

  else
  {
LABEL_8:
    if (!v6) {
      goto LABEL_13;
    }
  }

  uint64_t v10 = *(void *)(v7 + 8);
  int v11 = *(_DWORD *)(v10 + 20);
  __n128 v21 = *(__n128 *)(v10 + 4);
  int v22 = v11;
  sub_100634334(&v18, &v21);
  int v17 = 0;
  __int128 v16 = xmmword_1006C3E08;
  if (sub_1001BEC7C((unsigned __int8 *)&v18, (unsigned __int8 *)&v16))
  {
    int v12 = operator new(0x68uLL);
    uint64_t v13 = sub_10053CE50((uint64_t)v12, (uint64_t)(a1 + 6));
    *(void *)uint64_t v13 = off_1008A0AD8;
    *(void *)(v13 + 88) = 0LL;
    *(void *)(v13 + sub_100242FAC(v22 - 96) = 0LL;
    *(void *)(v13 + 80) = 0LL;
    *(void *)(v13 + 56) = 0LL;
    *(void *)(v13 + 64) = 0LL;
    *(void *)(v13 + sub_100242FAC(v15 - 48) = &off_1008A0B10;
    *(_WORD *)(v13 + 72) = 0;
    v15[0] = v13;
    sub_10054751C((uint64_t)a1, v15, 3);
    uint64_t result = v15[0];
    if (v15[0]) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v15[0] + 8LL))(v15[0]);
    }
    return result;
  }

void sub_100547908( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100547944(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  v18[1] = v2;
  v18[2] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  __int128 v21 = xmmword_1006BD964;
  int v22 = 0;
  sub_100634334((__n128 *)buf, (__n128 *)&v21);
  sub_10063432C(&v23);
  uint64_t v6 = sub_1004439C4(v2, buf, (unsigned __int8 *)&v23);
  uint64_t v7 = v6;
  if (!v3) {
    goto LABEL_8;
  }
  id v8 = (unint64_t *)&v3->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v7) {
      goto LABEL_15;
    }
  }

  else
  {
LABEL_8:
    if (!v6) {
      goto LABEL_15;
    }
  }

  uint64_t v10 = *(void *)(v7 + 8);
  int v11 = *(_DWORD *)(v10 + 20);
  *(_OWORD *)buf = *(_OWORD *)(v10 + 4);
  int v26 = v11;
  sub_100634334((__n128 *)&v23, (__n128 *)buf);
  int v20 = 0;
  __int128 v19 = xmmword_1006C3E08;
  if (sub_1001BEC7C((unsigned __int8 *)&v23, (unsigned __int8 *)&v19))
  {
    int v12 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Finding GAP reconnection characteristic handle on device %@",  buf,  0xCu);
    }

    __int16 v14 = **(_WORD **)(v7 + 8);
    __int16 v15 = *(_WORD *)(v7 + 48);
    __int128 v16 = operator new(0x48uLL);
    __int128 v23 = xmmword_1006BD9B4;
    int v24 = 0;
    sub_100634334((__n128 *)buf, (__n128 *)&v23);
    sub_10053CE50((uint64_t)v16, a1 + 48);
    *(void *)__int128 v16 = off_1008A08A8;
    v16[21] = v14;
    v16[22] = v15;
    *((_OWORD *)v16 + 3) = *(_OWORD *)buf;
    *((_DWORD *)v16 + 16) = v26;
    v18[0] = (uint64_t)v16;
    sub_10054751C(a1, v18, 4);
    uint64_t result = v18[0];
    if (v18[0]) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v18[0] + 8LL))(v18[0]);
    }
    return result;
  }

void sub_100547BB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100547BFC(uint64_t a1)
{
  __int16 v29 = 0;
  int v28 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  v26[1] = v2;
  void v26[2] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  *(_DWORD *)&v27[3] = 0;
  *(_DWORD *)id v27 = 0;
  __int128 v36 = xmmword_1006BD964;
  int v37 = 0;
  sub_100634334((__n128 *)buf, (__n128 *)&v36);
  __int128 v33 = xmmword_1006BD9B4;
  int v34 = 0;
  sub_100634334(&v35, (__n128 *)&v33);
  uint64_t v6 = sub_1004439C4(v2, buf, (unsigned __int8 *)&v35);
  uint64_t v7 = v6;
  if (!v3) {
    goto LABEL_8;
  }
  id v8 = (unint64_t *)&v3->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v7) {
      goto LABEL_19;
    }
  }

  else
  {
LABEL_8:
    if (!v6) {
      goto LABEL_19;
    }
  }

  uint64_t v10 = *(void *)(v7 + 8);
  int v11 = *(_DWORD *)(v10 + 20);
  *(_OWORD *)buf = *(_OWORD *)(v10 + 4);
  *(_DWORD *)&uint8_t buf[16] = v11;
  sub_100634334(&v35, (__n128 *)buf);
  int v32 = 0;
  __int128 v31 = xmmword_1006C3E44;
  if (sub_1001BEC7C(v12, (unsigned __int8 *)&v31))
  {
    sub_1001BDFB4((uint64_t)v27);
    if (v27[0] != 1) {
      return sub_100547F80(a1);
    }
    uint64_t v13 = v27[1];
    if (v27[1] >= 0x40uLL) {
      return sub_100547F80(a1);
    }
    uint64_t v14 = v27[6];
    LOBYTE(v28) = v27[6];
    uint64_t v15 = v27[5];
    BYTE1(v28) = v27[5];
    uint64_t v16 = v27[4];
    BYTE2(v28) = v27[4];
    uint64_t v17 = v27[3];
    HIBYTE(v28) = v27[3];
    uint64_t v18 = v27[2];
    LOBYTE(v29) = v27[2];
    HIBYTE(v29) = v27[1];
    __int128 v19 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = sub_1005BFB9C(v14 | (v13 << 40) | (v15 << 8) | (v16 << 16) | (v17 << 24) | (v18 << 32) | 0x1000000000000LL);
      __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      id v22 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v21;
      *(_WORD *)&_BYTE buf[12] = 2112;
      *(void *)&buf[14] = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Writing local address %@ into GAP reconnection characteristic value on device %@",  buf,  0x16u);
    }

    __int16 v23 = **(_WORD **)(v7 + 8);
    sub_10056AB04(buf, &v28, 6uLL);
    int v24 = operator new(0x40uLL);
    sub_100549D30((uint64_t)v24, a1 + 48, v23, (uint64_t)buf);
    *(void *)buf = &off_10087FAA8;
    if (*(void *)&buf[8]) {
      sub_1002CD254(*(unsigned int **)&buf[8]);
    }
    v26[0] = (uint64_t)v24;
    sub_10054751C(a1, v26, 5);
    uint64_t result = v26[0];
    if (v26[0]) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v26[0] + 8LL))(v26[0]);
    }
    return result;
  }

void sub_100547F14( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100547F80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  v18[1] = v2;
  v18[2] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  __int128 v21 = xmmword_1006BD978;
  int v22 = 0;
  sub_100634334((__n128 *)buf, (__n128 *)&v21);
  sub_10063432C(&v23);
  uint64_t v6 = sub_1004439C4(v2, buf, (unsigned __int8 *)&v23);
  uint64_t v7 = v6;
  if (!v3) {
    goto LABEL_8;
  }
  id v8 = (unint64_t *)&v3->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v7) {
      goto LABEL_15;
    }
  }

  else
  {
LABEL_8:
    if (!v6) {
      goto LABEL_15;
    }
  }

  uint64_t v10 = *(void *)(v7 + 8);
  int v11 = *(_DWORD *)(v10 + 20);
  *(_OWORD *)buf = *(_OWORD *)(v10 + 4);
  int v26 = v11;
  sub_100634334((__n128 *)&v23, (__n128 *)buf);
  int v20 = 0;
  __int128 v19 = xmmword_1006C3E08;
  if (sub_1001BEC7C((unsigned __int8 *)&v23, (unsigned __int8 *)&v19))
  {
    int v12 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Finding GATT service changed characteristic handle on device %@",  buf,  0xCu);
    }

    __int16 v14 = **(_WORD **)(v7 + 8);
    __int16 v15 = *(_WORD *)(v7 + 48);
    uint64_t v16 = operator new(0x48uLL);
    __int128 v23 = xmmword_1006BD9C8;
    int v24 = 0;
    sub_100634334((__n128 *)buf, (__n128 *)&v23);
    sub_10053CE50((uint64_t)v16, a1 + 48);
    *(void *)uint64_t v16 = off_1008A08A8;
    v16[21] = v14;
    v16[22] = v15;
    *((_OWORD *)v16 + 3) = *(_OWORD *)buf;
    *((_DWORD *)v16 + 16) = v26;
    v18[0] = (uint64_t)v16;
    sub_10054751C(a1, v18, 6);
    uint64_t result = v18[0];
    if (v18[0]) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v18[0] + 8LL))(v18[0]);
    }
    return result;
  }

void sub_1005481EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100548238(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  v19[1] = v2;
  void v19[2] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  __int128 v25 = xmmword_1006BD978;
  int v26 = 0;
  sub_100634334(&buf, (__n128 *)&v25);
  __int128 v22 = xmmword_1006BD9C8;
  int v23 = 0;
  sub_100634334(&v24, (__n128 *)&v22);
  uint64_t v6 = sub_1004439C4(v2, (unsigned __int8 *)&buf, (unsigned __int8 *)&v24);
  if (v3)
  {
    uint64_t v7 = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v6
    && (uint64_t v9 = *(void *)(v6 + 8),
        int v10 = *(_DWORD *)(v9 + 20),
        __n128 buf = *(__n128 *)(v9 + 4),
        int v28 = v10,
        sub_100634334(&v24, &buf),
        int v21 = 0,
        __int128 v20 = xmmword_1006C3E44,
        sub_1001BEC7C((unsigned __int8 *)&v24, (unsigned __int8 *)&v20)))
  {
    int v11 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = *(id *)(a1 + 16);
      buf.n128_u32[0] = 138412290;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Enabling GATT service changed indications on device %@",  (uint8_t *)&buf,  0xCu);
    }

    __int16 v13 = **(_WORD **)(v6 + 8);
    __int16 v14 = operator new(0x50uLL);
    uint64_t v15 = sub_10053CE50((uint64_t)v14, a1 + 48);
    *(void *)uint64_t v15 = off_1008A0B78;
    *(void *)(v15 + sub_100242FAC(v15 - 48) = &off_1008A0BB0;
    *(_WORD *)(v15 + 56) = v13;
    *(_BYTE *)(v15 + 58) = 1;
    *(void *)(v15 + 64) = 0LL;
    *(void *)(v15 + 72) = 0LL;
    v19[0] = v15;
    sub_10054751C(a1, v19, 7);
    uint64_t result = v19[0];
    if (v19[0]) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v19[0] + 8LL))(v19[0]);
    }
  }

  else
  {
    uint64_t v17 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      id v18 = *(id *)(a1 + 16);
      buf.n128_u32[0] = 138412290;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Failed to locate GATT service changed characteristic handle on device %@",  (uint8_t *)&buf,  0xCu);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, 10LL);
  }

  return result;
}

void sub_1005484D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10054850C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  v41.n128_u64[0] = v2;
  v41.n128_u64[1] = (unint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  __int128 v49 = xmmword_1006BDAF4;
  int v50 = 0;
  sub_100634334(&buf, (__n128 *)&v49);
  sub_10063432C(&v48);
  uint64_t v6 = sub_1004439C4(v2, (unsigned __int8 *)&buf, (unsigned __int8 *)&v48);
  if (v3)
  {
    uint64_t v7 = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  uint64_t v9 = *(void *)(a1 + 24);
  int v10 = *(std::__shared_weak_count **)(a1 + 32);
  v41.n128_u64[0] = v9;
  v41.n128_u64[1] = (unint64_t)v10;
  if (v10)
  {
    int v11 = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  __int128 v46 = xmmword_1006BDC38;
  int v47 = 13091918;
  sub_100634334(&buf, (__n128 *)&v46);
  sub_10063432C(&v48);
  uint64_t v13 = sub_1004439C4(v9, (unsigned __int8 *)&buf, (unsigned __int8 *)&v48);
  if (v10)
  {
    __int16 v14 = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 32);
  v41.n128_u64[0] = v16;
  v41.n128_u64[1] = (unint64_t)v17;
  if (v17)
  {
    id v18 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }

  __int128 v44 = xmmword_1006BDB08;
  int v45 = 0;
  sub_100634334(&buf, (__n128 *)&v44);
  sub_10063432C(&v48);
  uint64_t v20 = sub_1004439C4(v16, (unsigned __int8 *)&buf, (unsigned __int8 *)&v48);
  if (v17)
  {
    int v21 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if (!v6
    || (uint64_t v23 = *(void *)(v6 + 8),
        int v24 = *(_DWORD *)(v23 + 20),
        __n128 buf = *(__n128 *)(v23 + 4),
        int v52 = v24,
        sub_100634334(&v48, &buf),
        int v43 = 0,
        __int128 v42 = xmmword_1006C3E08,
        !sub_1001BEC7C(v25, (unsigned __int8 *)&v42)))
  {
    if (!v13
      || (uint64_t v26 = *(void *)(v13 + 8),
          int v27 = *(_DWORD *)(v26 + 20),
          __n128 buf = *(__n128 *)(v26 + 4),
          int v52 = v27,
          sub_100634334(&v41, &buf),
          int v40 = 0,
          __int128 v39 = xmmword_1006C3E08,
          !sub_1001BEC7C((unsigned __int8 *)&v41, (unsigned __int8 *)&v39)))
    {
      if (!v20) {
        return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 24LL))(a1, 0LL);
      }
      uint64_t v28 = *(void *)(v20 + 8);
      int v29 = *(_DWORD *)(v28 + 20);
      __n128 buf = *(__n128 *)(v28 + 4);
      int v52 = v29;
      sub_100634334(&v38, &buf);
      int v37 = 0;
      __int128 v36 = xmmword_1006C3E08;
    }
  }

  __n128 v30 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    id v31 = *(id *)(a1 + 16);
    buf.n128_u32[0] = 138412290;
    *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)v31;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Reading DIS information on HID, MIDI, or GHS device %@",  (uint8_t *)&buf,  0xCu);
  }

  int v32 = operator new(0x48uLL);
  uint64_t v33 = sub_10053CE50((uint64_t)v32, a1 + 48);
  *(void *)uint64_t v33 = off_1008A0C68;
  *(void *)(v33 + sub_100242FAC(v15 - 48) = &off_1008A0CA0;
  *(_DWORD *)(v33 + 56) = 0;
  *(void *)(v33 + 64) = 0LL;
  uint64_t v35 = v33;
  sub_10054751C(a1, &v35, 8);
  uint64_t result = v35;
  if (v35) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
  }
  return result;
}

void sub_1005488C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100548910(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 64) != a2)
  {
    uint64_t v6 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT)) {
      sub_100691060(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }

  if (*(_DWORD *)(a1 + 60) == 2)
  {
    __int16 v14 = (void *)*a4;
    if (a4[1] != *a4)
    {
      std::stringbuf::string_type __p = 0LL;
      uint64_t v35 = 0LL;
      __int128 v36 = 0LL;
      do
      {
        uint64_t v15 = *(void *)(*v14 + 8LL);
        int v16 = *(_DWORD *)(v15 + 20);
        __n128 v41 = *(__n128 *)(v15 + 4);
        int v42 = v16;
        sub_100634334(&v39, &v41);
        int v38 = 0;
        __int128 v37 = xmmword_1006C3E08;
        if (sub_1001BEC7C((unsigned __int8 *)&v39, (unsigned __int8 *)&v37))
        {
          uint64_t v17 = *v14;
          __n128 v41 = *(__n128 *)(*v14 + 72LL);
          int v42 = *(_DWORD *)(v17 + 88);
          sub_100634334(&v39, &v41);
          id v18 = v35;
          if (v35 >= (__n128 *)v36)
          {
            unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v35 - (_BYTE *)__p) >> 2);
            unint64_t v22 = v21 + 1;
            if (v21 + 1 > 0xCCCCCCCCCCCCCCCLL) {
              abort();
            }
            if (0x999999999999999ALL * ((v36 - (_BYTE *)__p) >> 2) > v22) {
              unint64_t v22 = 0x999999999999999ALL * ((v36 - (_BYTE *)__p) >> 2);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((v36 - (_BYTE *)__p) >> 2) >= 0x666666666666666LL) {
              unint64_t v23 = 0xCCCCCCCCCCCCCCCLL;
            }
            else {
              unint64_t v23 = v22;
            }
            if (v23) {
              int v24 = (char *)sub_100050420((uint64_t)&v36, v23);
            }
            else {
              int v24 = 0LL;
            }
            __int128 v25 = (__n128 *)&v24[4 * (((char *)v35 - (_BYTE *)__p) >> 2)];
            __n128 v26 = v39;
            v25[1].n128_u32[0] = v40;
            *__int128 v25 = v26;
            uint64_t v28 = (char *)__p;
            int v27 = (char *)v35;
            int v29 = &v24[20 * v21];
            if (v35 != __p)
            {
              do
              {
                __int128 v30 = *(_OWORD *)(v27 - 20);
                *((_DWORD *)v29 - 1) = *((_DWORD *)v27 - 1);
                *(_OWORD *)(v29 - 20) = v30;
                v29 -= 20;
                v27 -= 20;
              }

              while (v27 != v28);
              int v27 = (char *)__p;
            }

            uint64_t v20 = &v25[1].n128_u32[1];
            std::stringbuf::string_type __p = v29;
            uint64_t v35 = (__n128 *)((char *)v25 + 20);
            __int128 v36 = &v24[20 * v23];
            if (v27) {
              operator delete(v27);
            }
          }

          else
          {
            __n128 v19 = v39;
            v35[1].n128_u32[0] = v40;
            *id v18 = v19;
            uint64_t v20 = &v18[1].n128_u32[1];
          }

          uint64_t v35 = (__n128 *)v20;
        }

        ++v14;
      }

      while (v14 != (void *)a4[1]);
      sub_10053D0CC(a1, (uint64_t)&__p);
      if (__p)
      {
        uint64_t v35 = (__n128 *)__p;
        operator delete(__p);
      }
    }
  }

  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  void v33[2] = sub_100548C0C;
  v33[3] = &unk_10087EB20;
  v33[4] = a1;
  sub_10053D124(a1, v33);
  int v32 = (void *)*a4;
  id v31 = (void *)a4[1];
  while (v32 != v31)
  {
    if (*v32)
    {
      (*(void (**)(void))(*(void *)*v32 + 8LL))(*v32);
      id v31 = (void *)a4[1];
    }

    ++v32;
  }

void sub_100548BDC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100548C0C(uint64_t a1)
{
  return sub_100546F30(*(void *)(a1 + 32));
}

void sub_100548C14(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
}

void sub_100548C1C(uint64_t a1, uint64_t a2)
{
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_1008A0CF8);
  }
  sub_10055AD88(qword_1008D5F58, *(void **)(a1 + 16));
  sub_10053CF50(a1, a2);
}

uint64_t sub_100548C7C(uint64_t a1)
{
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_100548CB4(id *a1)
{
  *a1 = off_1008A0700;
  sub_100032BD4((uint64_t)(a1 + 3));

  operator delete(a1);
}

uint64_t sub_100548CEC(uint64_t a1)
{
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_100548D24(id *a1)
{
  *a1 = off_1008A0700;
  sub_100032BD4((uint64_t)(a1 + 3));

  operator delete(a1);
}

uint64_t sub_100548D5C(uint64_t a1)
{
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_100548D94(id *a1)
{
  *a1 = off_1008A0700;
  sub_100032BD4((uint64_t)(a1 + 3));

  operator delete(a1);
}

uint64_t sub_100548DCC(uint64_t a1)
{
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_100548E04(id *a1)
{
  *a1 = off_1008A0700;
  sub_100032BD4((uint64_t)(a1 + 3));

  operator delete(a1);
}

uint64_t sub_100548E3C(uint64_t a1)
{
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_100548E74(id *a1)
{
  *a1 = off_1008A0700;
  sub_100032BD4((uint64_t)(a1 + 3));

  operator delete(a1);
}

uint64_t sub_100548EAC(uint64_t a1)
{
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_100548EE4(id *a1)
{
  *a1 = off_1008A0700;
  sub_100032BD4((uint64_t)(a1 + 3));

  operator delete(a1);
}

uint64_t sub_100548F1C(uint64_t a1)
{
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_100548F54(id *a1)
{
  *a1 = off_1008A0700;
  sub_100032BD4((uint64_t)(a1 + 3));

  operator delete(a1);
}

uint64_t sub_100548F8C(uint64_t a1)
{
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_100548FC4(id *a1)
{
  *a1 = off_1008A0700;
  sub_100032BD4((uint64_t)(a1 + 3));

  operator delete(a1);
}

uint64_t sub_100548FFC(uint64_t a1)
{
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_100549034(id *a1)
{
  *a1 = off_1008A0700;
  sub_100032BD4((uint64_t)(a1 + 3));

  operator delete(a1);
}

uint64_t sub_10054906C(uint64_t a1)
{
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_1005490A4(id *a1)
{
  *a1 = off_1008A0700;
  sub_100032BD4((uint64_t)(a1 + 3));

  operator delete(a1);
}

uint64_t sub_1005490DC(uint64_t a1)
{
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_100549114(id *a1)
{
  *a1 = off_1008A0700;
  sub_100032BD4((uint64_t)(a1 + 3));

  operator delete(a1);
}

uint64_t sub_10054914C(uint64_t a1)
{
  *(void *)a1 = off_1008A09C8;
  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_10087FAA8;
  uint64_t v2 = *(unsigned int **)(a1 + 56);
  if (v2) {
    sub_1002CD254(v2);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_1005491AC(void *a1)
{
  *(void *)a1 = off_1008A09C8;
  *((void *)a1 + 6) = &off_10087FAA8;
  uint64_t v2 = (unsigned int *)*((void *)a1 + 7);
  if (v2) {
    sub_1002CD254(v2);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4((uint64_t)a1 + 24);

  operator delete(a1);
}

uint64_t sub_10054920C(uint64_t a1)
{
  *(void *)a1 = off_1008A09F8;
  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_10087FAA8;
  uint64_t v2 = *(unsigned int **)(a1 + 56);
  if (v2) {
    sub_1002CD254(v2);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_10054926C(void *a1)
{
  *(void *)a1 = off_1008A09F8;
  *((void *)a1 + 6) = &off_10087FAA8;
  uint64_t v2 = (unsigned int *)*((void *)a1 + 7);
  if (v2) {
    sub_1002CD254(v2);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4((uint64_t)a1 + 24);

  operator delete(a1);
}

uint64_t sub_1005492CC(uint64_t a1)
{
  *(void *)a1 = off_1008A0A28;
  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_10087FAA8;
  uint64_t v2 = *(unsigned int **)(a1 + 56);
  if (v2) {
    sub_1002CD254(v2);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_10054932C(void *a1)
{
  *(void *)a1 = off_1008A0A28;
  *((void *)a1 + 6) = &off_10087FAA8;
  uint64_t v2 = (unsigned int *)*((void *)a1 + 7);
  if (v2) {
    sub_1002CD254(v2);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4((uint64_t)a1 + 24);

  operator delete(a1);
}

uint64_t sub_10054938C(uint64_t a1)
{
  *(void *)a1 = off_1008A0A58;
  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_10087FAA8;
  uint64_t v2 = *(unsigned int **)(a1 + 56);
  if (v2) {
    sub_1002CD254(v2);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_1005493EC(void *a1)
{
  *(void *)a1 = off_1008A0A58;
  *((void *)a1 + 6) = &off_10087FAA8;
  uint64_t v2 = (unsigned int *)*((void *)a1 + 7);
  if (v2) {
    sub_1002CD254(v2);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4((uint64_t)a1 + 24);

  operator delete(a1);
}

uint64_t sub_10054944C(uint64_t a1)
{
  *(void *)a1 = off_1008A0A88;
  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_1008A0AC0;
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_1005494C4(char *a1)
{
  *(void *)a1 = off_1008A0A88;
  *((void *)a1 + 6) = &off_1008A0AC0;
  if (a1[87] < 0) {
    operator delete(*((void **)a1 + 8));
  }
  uint64_t v2 = *((void *)a1 + 7);
  *((void *)a1 + 7) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4((uint64_t)(a1 + 24));

  operator delete(a1);
}

uint64_t sub_10054953C(uint64_t a1)
{
  *(void *)a1 = off_1008A0AD8;
  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_1008A0B10;
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_1005495CC(char *a1)
{
  *(void *)a1 = off_1008A0AD8;
  *((void *)a1 + 6) = &off_1008A0B10;
  if (a1[103] < 0) {
    operator delete(*((void **)a1 + 10));
  }
  uint64_t v2 = *((void *)a1 + 8);
  *((void *)a1 + 8) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)a1 + 7);
  *((void *)a1 + 7) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4((uint64_t)(a1 + 24));

  operator delete(a1);
}

uint64_t sub_10054965C(uint64_t a1)
{
  *(void *)a1 = off_1008A0B28;
  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_1008A0B60;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_1005496DC(void *a1)
{
  *(void *)a1 = off_1008A0B28;
  *((void *)a1 + 6) = &off_1008A0B60;
  uint64_t v2 = *((void *)a1 + 9);
  *((void *)a1 + 9) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)a1 + 8);
  *((void *)a1 + 8) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4((uint64_t)a1 + 24);

  operator delete(a1);
}

uint64_t sub_10054975C(uint64_t a1)
{
  *(void *)a1 = off_1008A0B78;
  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_1008A0BB0;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_1005497DC(void *a1)
{
  *(void *)a1 = off_1008A0B78;
  *((void *)a1 + 6) = &off_1008A0BB0;
  uint64_t v2 = *((void *)a1 + 9);
  *((void *)a1 + 9) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)a1 + 8);
  *((void *)a1 + 8) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4((uint64_t)a1 + 24);

  operator delete(a1);
}

uint64_t sub_10054985C(uint64_t a1)
{
  *(void *)a1 = off_1008A0BC8;
  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_1008A0C00;
  uint64_t v2 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *(void *)(a1 + 64) = &off_10087FAA8;
  uint64_t v3 = *(unsigned int **)(a1 + 72);
  if (v3) {
    sub_1002CD254(v3);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_1005498DC(void *a1)
{
  *(void *)a1 = off_1008A0BC8;
  *((void *)a1 + 6) = &off_1008A0C00;
  uint64_t v2 = *((void *)a1 + 10);
  *((void *)a1 + 10) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *((void *)a1 + 8) = &off_10087FAA8;
  uint64_t v3 = (unsigned int *)*((void *)a1 + 9);
  if (v3) {
    sub_1002CD254(v3);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4((uint64_t)a1 + 24);

  operator delete(a1);
}

uint64_t sub_10054995C(uint64_t a1)
{
  *(void *)a1 = off_1008A0C18;
  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_1008A0C50;
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_1005499C4(void *a1)
{
  *(void *)a1 = off_1008A0C18;
  *((void *)a1 + 6) = &off_1008A0C50;
  uint64_t v2 = *((void *)a1 + 8);
  *((void *)a1 + 8) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4((uint64_t)a1 + 24);

  operator delete(a1);
}

uint64_t sub_100549A2C(uint64_t a1)
{
  *(void *)a1 = off_1008A0C68;
  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_1008A0CA0;
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_100549A94(void *a1)
{
  *(void *)a1 = off_1008A0C68;
  *((void *)a1 + 6) = &off_1008A0CA0;
  uint64_t v2 = *((void *)a1 + 8);
  *((void *)a1 + 8) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4((uint64_t)a1 + 24);

  operator delete(a1);
}

uint64_t sub_100549AFC(uint64_t a1)
{
  *(void *)a1 = off_1008A0CB8;
  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_1008A0CF0;
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_100549B64(void *a1)
{
  *(void *)a1 = off_1008A0CB8;
  *((void *)a1 + 6) = &off_1008A0CF0;
  uint64_t v2 = *((void *)a1 + 8);
  *((void *)a1 + 8) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *(void *)a1 = off_1008A0700;
  sub_100032BD4((uint64_t)a1 + 24);

  operator delete(a1);
}

uint64_t sub_100549BCC(uint64_t a1)
{
  *(void *)a1 = off_1008A0768;
  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_1008A07A0;
  uint64_t v2 = *(void *)(a1 + 96);
  *(void *)(a1 + sub_100242FAC(v22 - 96) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  BOOL v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(void *)(a1 + 64) = v4;
    operator delete(v4);
  }

  *(void *)a1 = off_1008A0700;
  sub_100032BD4(a1 + 24);

  return a1;
}

void sub_100549C5C(void *a1)
{
  *(void *)a1 = off_1008A0768;
  *((void *)a1 + 6) = &off_1008A07A0;
  uint64_t v2 = *((void *)a1 + 12);
  *((void *)a1 + 12) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)a1 + 11);
  *((void *)a1 + 11) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  BOOL v4 = (void *)*((void *)a1 + 7);
  if (v4)
  {
    *((void *)a1 + 8) = v4;
    operator delete(v4);
  }

  *(void *)a1 = off_1008A0700;
  sub_100032BD4((uint64_t)a1 + 24);

  operator delete(a1);
}

void sub_100549CEC(id a1)
{
  uint64_t v1 = operator new(0x110uLL);
  sub_100551DD0();
  qword_1008D5F58 = (uint64_t)v1;
}

void sub_100549D1C(_Unwind_Exception *a1)
{
}

uint64_t sub_100549D30(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v7 = sub_10053CE50(a1, a2);
  *(void *)uint64_t v7 = off_1008A09C8;
  *(_WORD *)(v7 + 42) = a3;
  uint64_t v8 = *(void *)(a4 + 8);
  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_10087FAA8;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    sub_1002CD1E0(v8);
  }
  return a1;
}

void sub_100549D8C(_Unwind_Exception *a1)
{
}

void sub_100549DA0(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_100549DD0(_Unwind_Exception *a1)
{
}

uint64_t sub_100549DE4(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v7 = sub_10053CE50(a1, a2);
  *(void *)uint64_t v7 = off_1008A0A58;
  *(_WORD *)(v7 + 42) = a3;
  uint64_t v8 = *(void *)(a4 + 8);
  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_10087FAA8;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    sub_1002CD1E0(v8);
  }
  return a1;
}

void sub_100549E40(_Unwind_Exception *a1)
{
}

uint64_t sub_100549E54(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v7 = sub_10053CE50(a1, a2);
  *(void *)uint64_t v7 = off_1008A0A28;
  *(_WORD *)(v7 + 42) = a3;
  uint64_t v8 = *(void *)(a4 + 8);
  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_10087FAA8;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    sub_1002CD1E0(v8);
  }
  return a1;
}

void sub_100549EB0(_Unwind_Exception *a1)
{
}

uint64_t sub_100549EC4(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v7 = sub_10053CE50(a1, a2);
  *(void *)uint64_t v7 = off_1008A09F8;
  *(_WORD *)(v7 + 42) = a3;
  uint64_t v8 = *(void *)(a4 + 8);
  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_10087FAA8;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    sub_1002CD1E0(v8);
  }
  return a1;
}

void sub_100549F20(_Unwind_Exception *a1)
{
}

void sub_100549F34(id a1)
{
  uint64_t v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_100549F64(_Unwind_Exception *a1)
{
}

  ;
}

id sub_100549F90(uint64_t a1, uint64_t a2)
{
  return *(id *)(a2 + 16);
}

  ;
}

void sub_100549FC4( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

id sub_100549FD8(uint64_t a1)
{
  return *(id *)(a1 + 16);
}

id sub_100549FE8(uint64_t a1)
{
  return *(id *)(a1 + 16);
}

void *sub_100549FF0(void *a1)
{
  uint64_t v2 = sub_10002418C(a1, "");
  *((_BYTE *)v2 + 24) = -127;
  sub_10002418C(v2 + 4, "");
  return a1;
}

void sub_10054A034(_Unwind_Exception *exception_object)
{
}

void sub_10054A054(std::string *__str)
{
  if ((__str[1].__r_.__value_.__s.__data_[0] & 0x70) == 0x10)
  {
    sub_10002418C(&__p, "+");
    int size = (char)__str->__r_.__value_.__s.__size_;
    if (size >= 0) {
      uint64_t v3 = __str;
    }
    else {
      uint64_t v3 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if (size >= 0) {
      std::string::size_type v4 = __str->__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v4 = __str->__r_.__value_.__l.__size_;
    }
    unint64_t v5 = std::string::append(&__p, (const std::string::value_type *)v3, v4);
    std::string::size_type v6 = v5->__r_.__value_.__r.__words[0];
    v10[0] = v5->__r_.__value_.__l.__size_;
    *(void *)((char *)v10 + 7) = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
    std::string::value_type v7 = v5->__r_.__value_.__s.__size_;
    v5->__r_.__value_.__l.__size_ = 0LL;
    v5->__r_.__value_.__l.__cap_ = 0LL;
    v5->__r_.__value_.__r.__words[0] = 0LL;
    if (__str[2].__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)__str[1].__r_.__value_.__l.__size_);
    }
    std::string::size_type v8 = v10[0];
    __str[1].__r_.__value_.__l.__size_ = v6;
    __str[1].__r_.__value_.__l.__cap_ = v8;
    *(std::string::size_type *)((char *)&__str[1].__r_.__value_.__r.__words[2] + 7) = *(void *)((char *)v10 + 7);
    __str[2].__r_.__value_.__s.__data_[7] = v7;
  }

  else
  {
    std::string::operator=((std::string *)((char *)__str + 32), __str);
  }

void sub_10054A170( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10054A194(std::string *this, _BYTE *a2)
{
  if (!a2) {
    goto LABEL_4;
  }
  uint64_t v3 = a2;
  if (*a2 == 43)
  {
    this[1].__r_.__value_.__s.__data_[0] = -111;
    uint64_t v3 = a2 + 1;
  }

  else
  {
    if (!*a2)
    {
LABEL_4:
      std::string::assign(this, "");
      this[1].__r_.__value_.__s.__data_[0] = -127;
      return;
    }

    this[1].__r_.__value_.__s.__data_[0] = -127;
  }

  std::string::assign(this, "");
  LOBYTE(v4) = *v3;
  if (*v3)
  {
    unint64_t v5 = v3 + 1;
    do
    {
      if ((v4 & 0x80) != 0)
      {
        if (!__maskrune(v4, 0x100uLL))
        {
LABEL_14:
          if ((_DefaultRuneLocale.__runetype[v4] & 0x400) == 0
            && (v4 > 0x3Fu || ((1LL << v4) & 0x88001C0800000000LL) == 0))
          {
            goto LABEL_25;
          }

          goto LABEL_24;
        }
      }

      else if ((_DefaultRuneLocale.__runetype[v4] & 0x100) == 0)
      {
        goto LABEL_14;
      }

      unsigned __int8 v6 = __toupper(v4);
      if (v6 > 0x4Fu)
      {
        if (v6 < 0x57u) {
          char v7 = 56;
        }
        else {
          char v7 = 57;
        }
        if (v6 >= 0x54u) {
          LOBYTE(v4) = v7;
        }
        else {
          LOBYTE(v4) = 55;
        }
      }

      else
      {
        unsigned int v4 = (((86 * (char)(v6 - 65)) >> 15) & 1) + ((86 * (char)(v6 - 65)) >> 8) + 50;
      }

std::string *sub_10054A304(std::string *a1, _BYTE *a2)
{
  unsigned int v4 = (std::string *)sub_10002418C(a1, "");
  v4[1].__r_.__value_.__s.__data_[0] = -127;
  v4[1].__r_.__value_.__l.__size_ = 0LL;
  v4[1].__r_.__value_.__l.__cap_ = 0LL;
  v4[2].__r_.__value_.__r.__words[0] = 0LL;
  sub_10054A194(v4, a2);
  sub_10054A054(a1);
  return a1;
}

void sub_10054A360(_Unwind_Exception *a1)
{
}

char *sub_10054A388(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_100024238(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__n128 __dst = v4;
  }

  __dst[24] = *((_BYTE *)a2 + 24);
  unint64_t v5 = __dst + 32;
  if (*((char *)a2 + 55) < 0)
  {
    sub_100024238(v5, *((void **)a2 + 4), *((void *)a2 + 5));
  }

  else
  {
    __int128 v6 = a2[2];
    *((void *)__dst + 6) = *((void *)a2 + 6);
    *(_OWORD *)unint64_t v5 = v6;
  }

  return __dst;
}

void sub_10054A408(_Unwind_Exception *exception_object)
{
}

BOOL sub_10054A42C(uint64_t a1)
{
  else {
    uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  }
  return v1 == 0;
}

std::string *sub_10054A44C(std::string *this, uint64_t a2)
{
  if ((std::string *)a2 != this)
  {
    std::string::operator=(this, (const std::string *)a2);
    this[1].__r_.__value_.__s.__data_[0] = *(_BYTE *)(a2 + 24);
    std::string::operator=((std::string *)((char *)this + 32), (const std::string *)(a2 + 32));
  }

  return this;
}

BOOL sub_10054A494(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a2 == a1) {
    return 1LL;
  }
  if (a1[24] != a2[24]) {
    return 0LL;
  }
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0LL) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0LL) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0LL;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1LL;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }

  while (v13 && v12);
  return v14;
}

char *sub_10054A554@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[55] < 0) {
    return (char *)sub_100024238((_BYTE *)a2, *((void **)result + 4), *((void *)result + 5));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 2);
  *(void *)(a2 + 16) = *((void *)result + 6);
  return result;
}

std::string *sub_10054A580@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  uint64_t v3 = (const std::string *)(a1 + 32);
  int v4 = *(char *)(a1 + 55);
  if ((v4 & 0x80000000) == 0)
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__l.__cap_ = *(void *)(a1 + 48);
    strcpy(v21, "()- ");
    goto LABEL_4;
  }

  sub_100024238(a2, *(void **)(a1 + 32), *(void *)(a1 + 40));
  int v4 = *(char *)(a1 + 55);
  strcpy(v21, "()- ");
  if ((v4 & 0x80000000) == 0)
  {
LABEL_4:
    uint64_t v6 = v4;
    int v7 = (std::string *)v3;
    if (!v6) {
      goto LABEL_16;
    }
    goto LABEL_5;
  }

  int v7 = *(std::string **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    goto LABEL_16;
  }
LABEL_5:
  int v8 = (unsigned __int8 *)v7 + v6;
  int v9 = (unsigned __int8 *)v7;
  while (2)
  {
    for (uint64_t i = 0LL; i != 2; ++i)
    {
      if (*v9 == asc_1007B747E[i])
      {
        if (v9 != v8 && v9 - (unsigned __int8 *)v7 != -1)
        {
          std::string::basic_string(&v20, v3, 0LL, v9 - (unsigned __int8 *)v7, (std::allocator<char> *)&v21[7]);
          *a2 = v20;
        }

        goto LABEL_16;
      }
    }

    if (++v9 != v8) {
      continue;
    }
    break;
  }

void sub_10054A714(_Unwind_Exception *exception_object)
{
}

std::string *sub_10054A738(uint64_t a1)
{
  uint64_t result = std::string::assign((std::string *)(a1 + 32), "");
  *(_BYTE *)(a1 + 24) = -127;
  return result;
}

uint64_t sub_10054A778(uint64_t result)
{
  *(void *)uint64_t result = off_1008A0D68;
  *(void *)(result + 8) = off_1008A0DD8;
  *(void *)(result + 16) = off_1008A0E18;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 40) = 0LL;
  *(void *)(result + sub_100242FAC(v15 - 48) = 0LL;
  *(void *)(result + 56) = result + 16;
  *(void *)(result + 64) = 0LL;
  return result;
}

void sub_10054A7B0(uint64_t a1, uint64_t a2)
{
}

void sub_10054A7B8(uint64_t a1, uint64_t a2)
{
  int v4 = *(char **)(a1 + 8);
  int v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }

  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }

  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_10054B3C0(a1 + 8, v6, (char *)&v7);
      sub_100008A30(a1 + 8);
      goto LABEL_12;
    }

void sub_10054A86C(uint64_t a1, uint64_t a2)
{
}

void *sub_10054A874(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  uint64_t result = sub_1003EC09C(v2, a1 + 8);
  *(void *)(a1 + 64) = v2;
  return result;
}

void sub_10054A8A8(_Unwind_Exception *a1)
{
}

void *sub_10054A8BC(uint64_t a1)
{
  return sub_10054A874(a1 - 16);
}

uint64_t sub_10054A8C4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10054A934;
    v3[3] = &unk_10087EB20;
    v3[4] = result;
    uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 16LL))(result, v3);
    *(void *)(a1 + 64) = 0LL;
  }

  return result;
}

uint64_t sub_10054A934(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_10054A94C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10054A934;
    v3[3] = &unk_10087EB20;
    v3[4] = result;
    uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 16LL))(result, v3);
    *(void *)(a1 + sub_100242FAC(v15 - 48) = 0LL;
  }

  return result;
}

uint64_t sub_10054A9BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 208LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054A9CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 216LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054A9DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 224LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054A9EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 184LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054A9FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 192LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054AA0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 200LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054AA1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 152LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054AA2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 160LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054AA3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 176LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054AA4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 240LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054AA5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 256LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054AA6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100024238(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }

  uint64_t v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 32LL))(v2, __p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_10054AAE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10054AB04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 40LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054AB14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 48LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054AB24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 56LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054AB34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100024238(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }

  uint64_t v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 64LL))(v2, __p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_10054ABB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10054ABCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100024238(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }

  uint64_t v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 72LL))(v2, __p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_10054AC48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10054AC64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 80LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054AC74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 88LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054AC84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 96LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054AC94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100024238(__p, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v8 = *(void *)(a3 + 16);
  }

  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void **))(*(void *)v4 + 104LL))(v4, a2, __p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_10054AD14( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10054AD30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100024238(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }

  uint64_t v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 112LL))(v2, __p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_10054ADAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10054ADC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 120LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054ADD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 136LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054ADE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 144LL))(*(void *)(a1 + 64));
}

uint64_t sub_10054ADF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 24LL))(*(void *)(a1 + 64));
}

void sub_10054AE0C(os_unfair_lock_s *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)qword_1008F75E8;
  if (os_log_type_enabled((os_log_t)qword_1008F75E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Sending 'call status changed' notification to telephony listeners",  buf,  2u);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10054B2B8;
  v6[3] = &unk_1008A0E30;
  id v7 = v3;
  id v5 = v3;
  sub_10054B1FC(a1 + 6, v6);
}

void sub_10054AED8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10054AEF0(uint64_t a1, void *a2)
{
}

void sub_10054AEFC(os_unfair_lock_s *a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F75E8;
  if (os_log_type_enabled((os_log_t)qword_1008F75E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Sending 'operator status changed' notification to telephony listeners",  v3,  2u);
  }

  sub_10054B1FC(a1 + 6, &stru_1008A0E70);
}

void sub_10054AF74(uint64_t a1)
{
}

void sub_10054AF80(os_unfair_lock_s *a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F75E8;
  if (os_log_type_enabled((os_log_t)qword_1008F75E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Sending 'wireless technology changed' notification to telephony listeners",  v3,  2u);
  }

  sub_10054B1FC(a1 + 6, &stru_1008A0E90);
}

void sub_10054AFF8(uint64_t a1)
{
}

void sub_10054B004(os_unfair_lock_s *a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F75E8;
  if (os_log_type_enabled((os_log_t)qword_1008F75E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Sending 'registration status changed' notification to telephony listeners",  v3,  2u);
  }

  sub_10054B1FC(a1 + 6, &stru_1008A0EB0);
}

void sub_10054B07C(uint64_t a1)
{
}

void sub_10054B088(os_unfair_lock_s *a1, char a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F75E8;
  if (os_log_type_enabled((os_log_t)qword_1008F75E8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Sending 'signal strength changed' notification to telephony listeners",  buf,  2u);
  }

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_10054B300;
  v5[3] = &unk_1008A0ED0;
  char v6 = a2;
  sub_10054B1FC(a1 + 6, v5);
}

void sub_10054B138(uint64_t a1, char a2)
{
}

void sub_10054B144(os_unfair_lock_s *a1, char a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F75E8;
  if (os_log_type_enabled((os_log_t)qword_1008F75E8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Sending 'transmit state changed' notification to telephony listeners",  buf,  2u);
  }

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_10054B318;
  v5[3] = &unk_1008A0ED0;
  char v6 = a2;
  sub_10054B1FC(a1 + 6, v5);
}

void sub_10054B1F4(uint64_t a1, char a2)
{
}

void sub_10054B1FC(os_unfair_lock_s *a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_lock(a1);
  id v5 = 0LL;
  char v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_10054B290( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10054B2B8(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(void *)(a1 + 32));
}

void sub_10054B2D0(id a1, TelephonyEventListener *a2)
{
}

void sub_10054B2E0(id a1, TelephonyEventListener *a2)
{
}

void sub_10054B2F0(id a1, TelephonyEventListener *a2)
{
}

uint64_t sub_10054B300(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 32LL))(a2, *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_10054B318(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 40LL))(a2, *(unsigned __int8 *)(a1 + 32));
}

void *sub_10054B330(void *a1)
{
  *a1 = off_1008A0D68;
  a1[1] = off_1008A0DD8;
  a1[2] = off_1008A0E18;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_10054B378(void *__p)
{
  void *__p = off_1008A0D68;
  __p[1] = off_1008A0DD8;
  __p[2] = off_1008A0E18;
  uint64_t v2 = (void *)__p[4];
  if (v2)
  {
    __p[5] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

char *sub_10054B3C0(uint64_t a1, char *__src, char *a3)
{
  id v3 = a3;
  uint64_t v4 = __src;
  char v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    BOOL v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      __n128 v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      __n128 v19 = 0LL;
    }
    std::string v20 = &v19[8 * v16];
    std::string __p = v19;
    int v27 = v20;
    uint64_t v28 = v20;
    int v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        unint64_t v23 = (char *)sub_100008BA0(v8, v22);
        std::string v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        int v27 = v20;
        int v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        int v27 = v20;
      }
    }

    *(void *)std::string v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__n128 __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }

  else
  {
    int v9 = __src + 8;
    int v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_10054B5C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10054B6AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10054B728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10054B868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10054B9BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10054BB20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10054BBDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10054BC58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10054BD08(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10054BD64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10054BE7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10054BF40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10054C074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10054C10C(void *a1)
{
  uint64_t v2 = sub_100213C20((uint64_t)a1, 14);
  sub_1002BDC0C(v2 + 256, 0, 1, 1007);
  *a1 = off_1008A0F00;
  a1[32] = off_1008A0F70;
  a1[66] = 0LL;
  a1[64] = dispatch_queue_create("com.apple.bluetooth.IAP", 0LL);
  a1[65] = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  id v3 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v4 = (void *)a1[66];
  a1[66] = v3;

  return a1;
}

void sub_10054C1C4(_Unwind_Exception *a1)
{
}

uint64_t sub_10054C1F4(uint64_t a1)
{
  *(void *)a1 = off_1008A0F00;
  uint64_t v2 = a1 + 256;
  *(void *)(a1 + 256) = off_1008A0F70;
  dispatch_release(*(dispatch_object_t *)(a1 + 512));
  CFRelease(*(CFTypeRef *)(a1 + 520));

  sub_1002BDD0C(v2);
  return sub_100213D34(a1);
}

void sub_10054C254(_Unwind_Exception *a1)
{
  sub_1002BDD0C(v2);
  sub_100213D34(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10054C27C(uint64_t a1)
{
  return sub_10054C1F4(a1 - 256);
}

void sub_10054C284(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10054C1F4(a1);
  operator delete(v1);
}

void sub_10054C298(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10054C1F4(a1 - 256);
  operator delete(v1);
}

uint64_t sub_10054C2B0(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  uint64_t v2 = (_BYTE *)(a1 + 504);
  *(_BYTE *)(a1 + 504) = 1;
  char v5 = 0;
  sub_100242CA4(&v5);
  if (sub_1001D9964( (uint64_t)sub_10054C458,  (uint64_t)off_1008A0FC0,  0x3EFu,  0x3B01u,  v2,  (uint64_t)&unk_1008A0FE8))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100691384();
    }
LABEL_10:
    uint64_t v3 = 1LL;
    goto LABEL_11;
  }

  *(void *)&__int128 v8 = &unk_1008A1018;
  WORD4(v8) = 3;
  *(void *)&__int128 v9 = &unk_1008A0F90;
  WORD4(v9) = 1;
  *(void *)&__int128 v6 = &unk_1008A1060;
  WORD4(v6) = 3;
  *(void *)&__int128 v7 = &unk_1008A0FA8;
  WORD4(nullsub_63(v5 - 80, v7) = 1;
  byte_1008F1268 = 1;
  word_1008F126A = 1;
  dword_1008F1270 = *(unsigned __int8 *)(a1 + 504);
  if (sub_1001E139C((uint64_t)&v8, (int *)(a1 + 496)))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100691324();
    }
    goto LABEL_10;
  }

  uint64_t v3 = sub_1001E139C((uint64_t)&v6, (int *)(a1 + 500));
  if ((_DWORD)v3)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_1006912C4();
    }
    goto LABEL_10;
  }

void sub_10054C444( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10054C458(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (qword_1008D9C30 != -1) {
    dispatch_once(&qword_1008D9C30, &stru_1008A11F8);
  }
  sub_10054C9E0(off_1008D9C28, a1, a4);
}

uint64_t sub_10054C4B0(uint64_t a1)
{
  char v12 = 0;
  sub_100242CA4(&v12);
  sub_1001E1520(*(_DWORD *)(a1 + 496));
  sub_1001E1520(*(_DWORD *)(a1 + 500));
  if (sub_1001D9C30(*(unsigned __int8 *)(a1 + 504)) == 101)
  {
    uint64_t v2 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_1006913E4(v2, v3, v4, v5, v6, v7, v8, v9);
    }
    uint64_t v10 = 1LL;
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  sub_100242CD8(&v12);
  return v10;
}

void sub_10054C540( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10054C558(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_10054C574(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    __int128 v21 = unk_1008A10B8;
    __int128 v22 = unk_1008A10A8;
    unint64_t v18 = 0LL;
    __n128 v19 = 0LL;
    uint64_t v20 = 0LL;
    int v4 = sub_1003D4C9C(a2, (uint64_t)&v21, 4u, &v18);
    if ((v4 & 1) != 0 || sub_1003D4C9C(a2, (uint64_t)&v22, 4u, &v18))
    {
      uint64_t v6 = v18;
      uint64_t v5 = v19;
      if (v18 != v19)
      {
        uint64_t v7 = v18;
        while (1)
        {
          if (*(_BYTE *)v7 == 6 && *((_WORD *)v7 + 1) == 2)
          {
            uint64_t v9 = v7[1];
            BOOL v10 = *(_BYTE *)v9 == 3 && *(_DWORD *)(v9 + 8) == 3;
            if (v10 && *(_BYTE *)(v9 + 16) == 1) {
              break;
            }
          }

          v7 += 2;
          if (v7 == (void *)v19)
          {
            int v11 = -1;
            goto LABEL_26;
          }
        }

        int v11 = *(_DWORD *)(v9 + 24);
LABEL_26:
        while (v6 != v5)
        {
          *(_OWORD *)__n128 buf = *v6;
          sub_10025EB84(buf);
          ++v6;
          uint64_t v5 = v19;
        }

        if (v11 != -1)
        {
          unint64_t v14 = (os_log_s *)qword_1008F7568;
          if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C(a2, __p);
            if (v24 >= 0) {
              uint64_t v15 = __p;
            }
            else {
              uint64_t v15 = (void **)__p[0];
            }
            uint64_t v16 = "Old WiAP UUID";
            *(_DWORD *)__n128 buf = 136446722;
            if (v4) {
              uint64_t v16 = "New WiAP UUID";
            }
            *(void *)&uint8_t buf[4] = v15;
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = v11;
            __int16 v26 = 2082;
            int v27 = v16;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Initiating outgoing Wireless IAP connection request to device %{public}s on rfcomm channel %d, %{public}s",  buf,  0x1Cu);
            if (v24 < 0) {
              operator delete(__p[0]);
            }
          }

          LOBYTE(__p[0]) = 0;
          sub_100242CA4(__p);
          *(_WORD *)__n128 buf = 0;
          if (sub_1001D9F7C( (uint64_t)sub_10054C8F0,  off_1008A0FC0,  a2 + 128,  v11,  0x3EFu,  0x3B01u,  buf,  (uint64_t)&unk_1008A0FE8))
          {
            if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
              sub_1006914A8();
            }
            uint64_t v12 = 305LL;
          }

          else
          {
            sub_10041127C(a1, a2, *(__int16 *)buf);
            uint64_t v12 = 0LL;
          }

          sub_100242CD8(__p);
          goto LABEL_45;
        }
      }

      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_10069147C();
      }
    }

    else
    {
      BOOL v13 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(a2, buf);
        sub_100691508(buf, (uint64_t)__p, v13);
      }
    }

    uint64_t v12 = 305LL;
LABEL_45:
    if (v18)
    {
      __n128 v19 = v18;
      operator delete(v18);
    }

    return v12;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_100691450();
  }
  return 1LL;
}

void sub_10054C8AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10054C8F0(int a1, uint64_t a2, uint64_t a3)
{
  if (qword_1008D9C30 != -1) {
    dispatch_once(&qword_1008D9C30, &stru_1008A11F8);
  }
  sub_10054CC4C(off_1008D9C28, a1, a3);
}

uint64_t sub_10054C948(void *a1, unint64_t a2)
{
  unsigned int v2 = sub_100411370(a1, a2);
  char v5 = 0;
  sub_100242CA4(&v5);
  uint64_t v3 = sub_1001DA5AC(v2, 1818);
  if ((_DWORD)v3)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_10068400C();
    }
    uint64_t v3 = 1LL;
  }

  sub_100242CD8(&v5);
  return v3;
}

void sub_10054C9CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10054C9E0(void *a1, uint64_t a2, unsigned int a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A1198);
  }
  *(_DWORD *)__n128 buf = *(_DWORD *)a2;
  LOWORD(v19) = *(_WORD *)(a2 + 4);
  uint64_t v6 = sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
  uint64_t v7 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)v6, __p);
    int v8 = v17;
    uint64_t v9 = (void **)__p[0];
    int v10 = sub_100411370(a1, (unint64_t)v6);
    int v11 = __p;
    *(_DWORD *)__n128 buf = 136446722;
    if (v8 < 0) {
      int v11 = v9;
    }
    __n128 v19 = v11;
    __int16 v20 = 1024;
    int v21 = v10;
    __int16 v22 = 1024;
    unsigned int v23 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Received incoming connection attempt from device %{public}s getHandleForDevice %d, linkHandle %d",  buf,  0x18u);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }

  if (sub_100411064((uint64_t)a1, (uint64_t)v6) && !sub_100411370(a1, (unint64_t)v6))
  {
    int v13 = sub_1001DA26C((uint64_t)sub_10054C8F0, a3, 1);
    if (!v13)
    {
      sub_10041127C((uint64_t)a1, (unint64_t)v6, a3);
      sub_100410910((uint64_t)a1, (uint64_t)v6, 1);
      return;
    }

    char v14 = 1;
    goto LABEL_14;
  }

  uint64_t v12 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Denying connection attempt", buf, 2u);
  }

  int v13 = sub_1001DA26C((uint64_t)sub_10054C8F0, a3, 0);
  if (v13)
  {
    char v14 = 0;
LABEL_14:
    uint64_t v15 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100691570(v14, v13, v15);
    }
  }

void sub_10054CC28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10054CC4C(void *a1, int a2, uint64_t a3)
{
  __int16 v4 = a2;
  uint64_t v6 = sub_10041146C(a1, a2);
  if (v6)
  {
    uint64_t v7 = (unsigned __int8 *)v6;
    if ((_DWORD)a3)
    {
      int v8 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C((uint64_t)v7, __p);
        char v14 = v19 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)__n128 buf = 136446466;
        int v21 = v14;
        __int16 v22 = 1024;
        int v23 = a3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Connection to device %{public}s failed - result was %{bluetooth:OI_STATUS}u",  buf,  0x12u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }

      if (qword_1008D60B0 != -1) {
        dispatch_once(&qword_1008D60B0, &stru_1008A11B8);
      }
      int v9 = sub_1004317E0((uint64_t)off_1008D60A8, a3, 20000);
      sub_100410A5C((uint64_t)a1, (uint64_t)v7, v9);
    }

    else
    {
      sub_100410A5C((uint64_t)a1, v6, 0);
      LODWORD(__p[0]) = 0;
      *(_DWORD *)__n128 buf = 0;
      uint64_t v17 = 0LL;
      sub_1003D55EC((uint64_t)v7, __p, buf, (_DWORD *)&v17 + 1, &v17);
      if (*(_DWORD *)buf == 7563 && (HIDWORD(v17) & 0xFFFFFFFD) == 0xC008)
      {
        if (qword_1008D6198 != -1) {
          dispatch_once(&qword_1008D6198, &stru_1008A11D8);
        }
        sub_100448EF8( (uint64_t)off_1008D6190,  1,  ((unint64_t)v7[128] << 40) | ((unint64_t)v7[129] << 32) | ((unint64_t)v7[130] << 24) | ((unint64_t)v7[131] << 16) | ((unint64_t)v7[132] << 8) | v7[133]);
      }

      if ((sub_1002BDE54((uint64_t)(a1 + 32), (unint64_t)v7) & 1) == 0)
      {
        int v10 = (os_log_s *)qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
          sub_100691638((uint64_t)v7, v10);
        }
        uint64_t v11 = a1[1];
        uint64_t v12 = operator new(0x20uLL);
        v12[4] = 1;
        *(void *)uint64_t v12 = &off_100897AA8;
        *((void *)v12 + 2) = v11;
        *((void *)v12 + 3) = v7;
        sub_10041C240(v11, v12);
      }

      int v13 = (dispatch_queue_s *)a1[64];
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      void v15[2] = sub_10054CF38;
      uint64_t v15[3] = &unk_1008878D8;
      void v15[4] = a1;
      __int16 v16 = v4;
      dispatch_async(v13, v15);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
  {
    sub_10069160C();
  }

_BYTE *sub_10054CF38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v18 = 0;
  sub_100242CA4(&v18);
  int v4 = *(unsigned __int16 *)(a1 + 40);
  uint64_t v3 = (unsigned __int16 *)(a1 + 40);
  uint64_t v5 = sub_10041146C((void *)v2, v4);
  sub_100242CD0(&v18);
  if (v5)
  {
    sub_1003FE1B4((unsigned __int8 *)(v5 + 128), __p);
    if (v22 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = *(const char **)__p;
    }
    CFStringRef v7 = CFStringCreateWithCString(kCFAllocatorDefault, v6, 0x600u);
    if (v22 < 0) {
      operator delete(*(void **)__p);
    }
    Connection = (void *)acc_transportClient_createConnection(2LL, v7);
    if (v7) {
      CFRelease(v7);
    }
    if (Connection)
    {
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      void v17[2] = sub_10054D2B8;
      v17[3] = &unk_1008880A0;
      _DWORD v17[4] = v2;
      void v17[5] = v5;
      Endpoint = (void *)acc_transportClient_createEndpoint(Connection, 2LL, 0LL, 0LL, v17, 1LL);
      int v10 = (os_log_s *)qword_1008F7568;
      if (Endpoint)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string __p = 138412546;
          *(void *)&__p[4] = Connection;
          __int16 v20 = 2112;
          int v21 = Endpoint;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[iAP CONNECTED] CONNUUID: %@ and ENDPOINTUUID: %@",  __p,  0x16u);
        }

        CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, v3);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v2 + 520), Connection, v11);
        CFRelease(v11);
        uint64_t v12 = objc_opt_new(&OBJC_CLASS___iapUUID);
        -[iapUUID setConnectionUUID:](v12, "setConnectionUUID:", Connection);

        -[iapUUID setEndpointUUID:](v12, "setEndpointUUID:", Endpoint);
        int v13 = *(void **)(v2 + 528);
        char v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", *v3));
        [v13 setObject:v12 forKey:v14];

        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472LL;
        void v16[2] = sub_10054D30C;
        v16[3] = &unk_10087EB20;
        v16[4] = v2;
        if (qword_1008F1278 != -1) {
          dispatch_once(&qword_1008F1278, v16);
        }
      }

      else
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
          sub_100691710();
        }
        sub_100242C98(&v18);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 80LL))(v2, v5);
      }
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_1006916E4();
      }
      sub_100242C98(&v18);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 80LL))(v2, v5);
    }
  }

  return sub_100242CD8(&v18);
}

void sub_10054D240( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  sub_100242CD8(&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_10054D2B8(uint64_t a1, int a2, int a3, CFDataRef theData)
{
  unint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32) + 256LL;
  BytePtr = CFDataGetBytePtr(theData);
  int Length = CFDataGetLength(theData);
  return sub_1002BE8FC(v6, v5, (uint64_t)BytePtr, Length, 1);
}

uint64_t sub_10054D30C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  acc_transportClient_setConnectionAuthStatusDidChangeHandler(&stru_1008A10E8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10054D628;
  v3[3] = &unk_1008A1108;
  v3[4] = v1;
  return acc_transportClient_setEndpointPropertiesDidChangeHandler(v3);
}

void sub_10054D374(id a1, __CFString *a2, BOOL a3)
{
  BOOL v3 = a3;
  unint64_t v5 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    CFStringRef v7 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "acc_transportClient_setConnectionAuthStatusDidChangeHandler - connUID:%@",  (uint8_t *)&v6,  0xCu);
  }

  if (qword_1008D9C30 != -1) {
    dispatch_once(&qword_1008D9C30, &stru_1008A11F8);
  }
  sub_10054D45C(off_1008D9C28, (uint64_t)a2, v3);
}

void sub_10054D45C(void *a1, uint64_t a2, uint64_t a3)
{
  int v6 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138412290;
    uint64_t v15 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "authStatusDidChange - connUUID: %@",  (uint8_t *)&v14,  0xCu);
  }

  uint64_t v7 = sub_10054DF40((uint64_t)a1, a2);
  uint64_t v8 = sub_10041146C(a1, v7);
  if (v8)
  {
    int v9 = (void *)a1[66];
    int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v7));
    CFNumberRef v11 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v10]);

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 endpointUUID]);
    int v13 = (const __CFDictionary *)acc_transportClient_copyPropertiesForEndpointWithUUID();

    if (v13)
    {
      LOBYTE(v14) = 0;
      if (sub_10054E060(v13, &v14))
      {
        if (qword_1008D9730 != -1) {
          dispatch_once(&qword_1008D9730, &stru_1008A1218);
        }
        (*(void (**)(void *, uint64_t, uint64_t, void))(*(void *)off_1008D9728 + 240LL))( off_1008D9728,  v8,  a3,  v14);
      }

      CFRelease(v13);
    }
  }

void sub_10054D5F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10054D628(uint64_t a1, uint64_t a2, const __CFDictionary *a3, const __CFDictionary *a4, uint64_t a5)
{
  if (sub_10054D6DC(*(void *)(a1 + 32), a2))
  {
    if (qword_1008D9C30 != -1) {
      dispatch_once(&qword_1008D9C30, &stru_1008A11F8);
    }
    sub_10054D77C(off_1008D9C28, v9, a3, a4, a5);
  }

  else
  {
    int v10 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_10069173C(a2, v10, v11);
    }
  }

uint64_t sub_10054D6DC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000LL;
  __int16 v9 = 0;
  if (a2)
  {
    uint64_t v2 = *(dispatch_queue_s **)(a1 + 512);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10054E194;
    block[3] = &unk_10087FEE0;
    block[5] = a1;
    void block[6] = a2;
    block[4] = &v6;
    dispatch_sync(v2, block);
    uint64_t v3 = *((unsigned __int16 *)v7 + 12);
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t sub_10054D77C( void *a1, uint64_t a2, const __CFDictionary *a3, const __CFDictionary *a4, uint64_t a5)
{
  int v9 = sub_10054DF40((uint64_t)a1, a5);
  uint64_t result = sub_10041146C(a1, v9);
  if (a3)
  {
    uint64_t v11 = result;
    if (result)
    {
      uint64_t result = acc_transportClient_isConnectionAuthenticated(a5);
      if ((_DWORD)result)
      {
        uint64_t result = (uint64_t)sub_10054E060(a4, 0LL);
        if ((result & 1) == 0)
        {
          unsigned __int8 v12 = 0;
          uint64_t result = (uint64_t)sub_10054E060(a3, &v12);
          if ((_DWORD)result)
          {
            if (qword_1008D9730 != -1) {
              dispatch_once(&qword_1008D9730, &stru_1008A1218);
            }
            return (*(uint64_t (**)(void *, uint64_t, uint64_t, void))(*(void *)off_1008D9728 + 240LL))( off_1008D9728,  v11,  1LL,  v12);
          }
        }
      }
    }
  }

  return result;
}

void sub_10054D84C(void *a1, int a2, int a3)
{
  __int16 v4 = a2;
  uint64_t v6 = (unsigned __int8 *)sub_10041146C(a1, a2);
  sub_100411718((uint64_t)a1, (uint64_t)v6, 0, a3);
  if (v6)
  {
    uint64_t v12 = 0LL;
    int v11 = 0;
    int v10 = 0;
    sub_1003D55EC((uint64_t)v6, (_DWORD *)&v12 + 1, &v12, &v11, &v10);
    if ((_DWORD)v12 == 7563 && (v11 & 0xFFFFFFFD) == 0xC008)
    {
      if (qword_1008D6198 != -1) {
        dispatch_once(&qword_1008D6198, &stru_1008A11D8);
      }
      sub_100448EF8( (uint64_t)off_1008D6190,  0,  ((unint64_t)v6[128] << 40) | ((unint64_t)v6[129] << 32) | ((unint64_t)v6[130] << 24) | ((unint64_t)v6[131] << 16) | ((unint64_t)v6[132] << 8) | v6[133]);
    }
  }

  sub_1002BE5EC((uint64_t)(a1 + 32), (uint64_t)v6);
  uint64_t v7 = (dispatch_queue_s *)a1[64];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_10054D99C;
  v8[3] = &unk_1008878D8;
  v8[4] = a1;
  __int16 v9 = v4;
  dispatch_async(v7, v8);
}

void sub_10054D99C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 528);
  __int16 v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 40)));
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v4]);

  uint64_t v6 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 connectionUUID]);
    int v13 = 138412290;
    int v14 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[iAP DISCONNECTED] connectionUUID: %@",  (uint8_t *)&v13,  0xCu);
  }

  if (v5)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 connectionUUID]);
    acc_transportClient_destroyConnection(v8);

    __int16 v9 = *(__CFDictionary **)(v2 + 520);
    int v10 = (void *)objc_claimAutoreleasedReturnValue([v5 connectionUUID]);
    CFDictionaryRemoveValue(v9, v10);

    int v11 = *(void **)(v2 + 528);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 40)));
    [v11 removeObjectForKey:v12];
  }
}

void sub_10054DB04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10054DB50(void *a1, int a2, const UInt8 *a3, unsigned int a4)
{
  __int16 v6 = a2;
  if (sub_10041146C(a1, a2))
  {
    CFDataRef v8 = CFDataCreate(kCFAllocatorDefault, a3, a4);
    __int16 v9 = (dispatch_queue_s *)a1[64];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10054DC18;
    block[3] = &unk_10087FF20;
    __int16 v11 = v6;
    block[4] = a1;
    block[5] = v8;
    dispatch_async(v9, block);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
  {
    sub_1006917A8();
  }

void sub_10054DC18(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 528LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 48)));
  __int16 v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  uint64_t v5 = *(void *)(a1 + 40);
  __int16 v6 = (void *)objc_claimAutoreleasedReturnValue([v4 endpointUUID]);
  char v7 = acc_transportClient_processIncomingData(v5, v6);

  CFDataRef v8 = *(const void **)(a1 + 40);
  if (v8) {
    CFRelease(v8);
  }
  if ((v7 & 1) == 0 && os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_1006917D4();
  }
}

void sub_10054DCD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10054DD00(void *a1, int a2)
{
  unint64_t v3 = sub_10041146C(a1, a2);
  if (v3)
  {
    sub_1002BEAF8((uint64_t)(a1 + 32), v3);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
  {
    sub_100691800();
  }

BOOL sub_10054DD60(void *a1, unint64_t a2, char *a3, int a4)
{
  CFDataRef v8 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_INFO))
  {
    v12[0] = 67109120;
    v12[1] = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Sending %d bytes of WiAP data to stack",  (uint8_t *)v12,  8u);
  }

  unsigned int v9 = sub_100411370(a1, a2);
  LOBYTE(v12[0]) = 0;
  sub_100242CA4(v12);
  int v10 = sub_1001D9F70((uint64_t)sub_10054DEA8, v9, a3, (unsigned __int16)a4);
  if (v10 && os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_10069182C();
  }
  sub_100242CD8(v12);
  return v10 == 0;
}

void sub_10054DE8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_10054DEA8(int a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 && os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_10069188C();
  }
  if (qword_1008D9C30 != -1) {
    dispatch_once(&qword_1008D9C30, &stru_1008A11F8);
  }
  sub_10054DD00(off_1008D9C28, a1);
}

BOOL sub_10054DF38(uint64_t a1, unint64_t a2, char *a3, int a4)
{
  return sub_10054DD60((void *)(a1 - 256), a2, a3, a4);
}

uint64_t sub_10054DF40(uint64_t a1, uint64_t a2)
{
  __int16 v4 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "getLinkForConnectionUUID - connectionUUID: %@",  (uint8_t *)&buf,  0xCu);
  }

  *(void *)&__int128 buf = 0LL;
  *((void *)&buf + 1) = &buf;
  uint64_t v9 = 0x2020000000LL;
  __int16 v10 = 0;
  if (a2)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 512);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10054E0C0;
    block[3] = &unk_10087FEE0;
    block[5] = a1;
    void block[6] = a2;
    block[4] = &buf;
    dispatch_sync(v5, block);
    a2 = *(unsigned __int16 *)(*((void *)&buf + 1) + 24LL);
  }

  _Block_object_dispose(&buf, 8);
  return a2;
}

CFDictionaryRef sub_10054E060(const __CFDictionary *result, _BYTE *a2)
{
  if (result)
  {
    uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, kCFACCProperties_Endpoint_Bluetooth_HIDFunction);
    int valuePtr = 0;
    if (result)
    {
      uint64_t result = (const __CFDictionary *)CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
      if ((_DWORD)result)
      {
        if (a2) {
          *a2 = valuePtr;
        }
        return (const __CFDictionary *)1;
      }
    }
  }

  return result;
}

void sub_10054E0C0(uint64_t a1)
{
  Value = (const __CFNumber *)CFDictionaryGetValue( *(CFDictionaryRef *)(*(void *)(a1 + 40) + 520LL),  *(const void **)(a1 + 48));
  unint64_t v3 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    uint64_t v5 = Value;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "getLinkForConnectionUUID - linkCF: %@",  (uint8_t *)&v4,  0xCu);
  }

  if (Value) {
    CFNumberGetValue(Value, kCFNumberSInt16Type, (void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
  }
}

void sub_10054E194(void *a1)
{
  uint64_t v2 = a1[5];
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v3 = *(id *)(v2 + 528);
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v12;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v3);
        }
        char v7 = *(const __CFNumber **)(*((void *)&v11 + 1) + 8LL * (void)i);
        CFDataRef v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 528), "objectForKeyedSubscript:", v7, (void)v11));
        uint64_t v9 = (const __CFString *)a1[6];
        __int16 v10 = (__CFString *)objc_claimAutoreleasedReturnValue([v8 endpointUUID]);
        LODWORD(v9) = CFStringCompare(v9, v10, 0LL) == kCFCompareEqualTo;

        if ((_DWORD)v9) {
          CFNumberGetValue(v7, kCFNumberSInt16Type, (void *)(*(void *)(a1[4] + 8LL) + 24LL));
        }
      }

      id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v4);
  }
}

void sub_10054E2F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10054E32C()
{
  return 5LL;
}

void sub_10054E334(int a1, int a2)
{
  if (qword_1008D9C30 != -1) {
    dispatch_once(&qword_1008D9C30, &stru_1008A11F8);
  }
  sub_10054D84C(off_1008D9C28, a1, a2);
}

void sub_10054E38C(int a1, const UInt8 *a2, unsigned int a3)
{
  if (qword_1008D9C30 != -1) {
    dispatch_once(&qword_1008D9C30, &stru_1008A11F8);
  }
  sub_10054DB50(off_1008D9C28, a1, a2, a3);
}

void sub_10054E3F4(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_10054E424(_Unwind_Exception *a1)
{
}

void sub_10054E438(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_10054E468(_Unwind_Exception *a1)
{
}

void sub_10054E47C(id a1)
{
  uint64_t v1 = (char *)operator new(0x200uLL);
  *(void *)uint64_t v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 18) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 108) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 28) = v1 + 232;
  *((void *)v1 + 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 58) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_10054E584(_Unwind_Exception *a1)
{
}

void sub_10054E598(id a1)
{
  uint64_t v1 = operator new(0x218uLL);
  sub_10054C10C(v1);
  off_1008D9C28 = v1;
}

void sub_10054E5C8(_Unwind_Exception *a1)
{
}

void sub_10054E5DC(id a1)
{
  uint64_t v1 = operator new(0x148uLL);
  sub_100493598();
  off_1008D9728 = v1;
}

void sub_10054E60C(_Unwind_Exception *a1)
{
}

uint64_t sub_10054E620(uint64_t a1)
{
  *(void *)sub_10041BFD4(a1, "WiAPService", 128) = &off_1008A1248;
  if (qword_1008D9C30 != -1) {
    dispatch_once(&qword_1008D9C30, &stru_1008A1358);
  }
  sub_10041C264(a1, (uint64_t)off_1008D9C28);
  return a1;
}

void sub_10054E694(_Unwind_Exception *a1)
{
}

void sub_10054E6B0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10041C0C4(a1);
  operator delete(v1);
}

uint64_t sub_10054E6CC(uint64_t a1, uint64_t a2)
{
  if (qword_1008D9C30 != -1) {
    dispatch_once(&qword_1008D9C30, &stru_1008A1358);
  }
  return (*(uint64_t (**)(char *, uint64_t))(*((void *)off_1008D9C28 + 32) + 16LL))( (char *)off_1008D9C28 + 256,  a2);
}

void sub_10054E728(uint64_t a1, uint64_t a2)
{
  __int128 v20 = unk_1008A1348;
  __int128 v21 = unk_1008A1338;
  std::string __p = 0LL;
  char v18 = 0LL;
  uint64_t v19 = 0LL;
  if (!sub_1003D518C(a2))
  {
    int v7 = 0;
    goto LABEL_22;
  }

  BOOL v4 = sub_1003D2E50(a2, &v21, 4u);
  BOOL v5 = sub_1003D2E50(a2, &v20, 4u);
  int v6 = v5;
  if (!v4 && !v5)
  {
    sub_1003DB230(a2, 0);
    int v7 = 1;
    goto LABEL_22;
  }

  if (v4)
  {
    sub_1003DB230(a2, 1u);
  }

  else if (v5)
  {
    sub_1003DB230(a2, 2u);
    int v6 = sub_1003D4C9C(a2, (uint64_t)&v20, 0x301u, &__p);
  }

  if (!v6) {
    goto LABEL_21;
  }
LABEL_11:
  CFDataRef v8 = (char *)__p;
  if (__p == v18) {
    goto LABEL_21;
  }
  while (1)
  {
    if (*v8 != 1)
    {
      __int16 v10 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_1006918EC(&v15, v16, v10);
      }
      goto LABEL_18;
    }

    if (*((_WORD *)v8 + 1) == 4) {
      break;
    }
    uint64_t v9 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_1006918EC(&v13, v14, v9);
    }
LABEL_18:
    v8 += 16;
    if (v8 == v18) {
      goto LABEL_21;
    }
  }

  sub_1003DA39C(a2, *((_DWORD *)v8 + 2));
LABEL_21:
  int v7 = 4;
LABEL_22:
  unsigned int v11 = *(_DWORD *)(a1 + 32);
  uint64_t v22 = 0LL;
  sub_1000B0400((uint64_t)&v22);
  *(void *)&__int128 v12 = (int)v22;
  *((void *)&v12 + 1) = SWORD2(v22);
  sub_1003D1FC4(a2, v11, v7, &v12, 0);
  if (__p)
  {
    char v18 = (char *)__p;
    operator delete(__p);
  }

void sub_10054E93C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10054E964(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  char v13 = 0;
  int v12 = 0;
  __int128 v17 = xmmword_1006BE150;
  memset(v18, 0, sizeof(v18));
  __int128 v10 = unk_1008A1348;
  __int128 v11 = unk_1008A1338;
  __int128 v15 = xmmword_1006C3F80;
  __int128 v16 = xmmword_1006BE160;
  __int128 v14 = xmmword_1006C3F90;
  *a3 = 0;
  if (sub_1003E235C(a2, v18, &v13)
    && v13
    && ((uint64_t result = sub_10011BB1C((unsigned __int8 *)v18, (uint64_t)&v17, &v12, v5), !(_DWORD)result)
     || (uint64_t result = sub_10011BB1C((unsigned __int8 *)v18, (uint64_t)&v16, &v12, v7), !(_DWORD)result)
     || (uint64_t result = sub_10011BB1C((unsigned __int8 *)v18, (uint64_t)&v15, &v12, v8), !(_DWORD)result)
     || (uint64_t result = sub_10011BB1C((unsigned __int8 *)v18, (uint64_t)&v14, &v12, v9), !(_DWORD)result))
    || (uint64_t result = sub_1003D518C(a2), (_DWORD)result)
    && ((uint64_t result = sub_1003D2E50(a2, &v11, 4u), (result & 1) != 0)
     || (uint64_t result = sub_1003D2E50(a2, &v10, 4u), (_DWORD)result)))
  {
    *a3 = 1;
  }

  return result;
}

void sub_10054EAEC(id a1)
{
  uint64_t v1 = operator new(0x218uLL);
  sub_10054C1F0(v1);
  off_1008D9C28 = v1;
}

void sub_10054EB1C(_Unwind_Exception *a1)
{
}

uint64_t sub_10054EB30(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  uint8x8_t v8 = (void *)sub_10026EC64(a1, 1952539500);
  *uint8x8_t v8 = &off_1008A1388;
  sub_1003A3FB0((uint64_t)(v8 + 50), a2, a3);
  *(void *)(a1 + 776) = a4;
  *(_BYTE *)(a1 + 784) = 0;
  return a1;
}

void sub_10054EB94(_Unwind_Exception *a1)
{
}

uint64_t sub_10054EBAC(void *a1)
{
  *a1 = &off_1008A1388;
  sub_1003A4008((uint64_t)(a1 + 50));
  return sub_10026ED80((uint64_t)a1);
}

void sub_10054EBE0(void *a1)
{
  *a1 = &off_1008A1388;
  sub_1003A4008((uint64_t)(a1 + 50));
  uint64_t v2 = (void *)sub_10026ED80((uint64_t)a1);
  operator delete(v2);
}

uint64_t sub_10054EC18(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 600);
}

void sub_10054EC20(uint64_t a1, char *__s1, const __CFBoolean *a3)
{
  if (!strcmp(__s1, "kBTAudioMsgPropertyGameOn"))
  {
    CFBooleanGetValue(a3);
    int v6 = *(void (**)(void))(**(void **)(a1 + 776) + 48LL);
LABEL_24:
    v6();
    return;
  }

  if (!strcmp(__s1, "kBTAudioMsgPropertyExpanseOn"))
  {
    CFBooleanGetValue(a3);
    int v6 = *(void (**)(void))(**(void **)(a1 + 776) + 56LL);
    goto LABEL_24;
  }

  if (!strcmp(__s1, "kBTAudioMsgPropertyVoiceOverOn"))
  {
    CFBooleanGetValue(a3);
    int v6 = *(void (**)(void))(**(void **)(a1 + 776) + 64LL);
    goto LABEL_24;
  }

  if (!strcmp(__s1, "kBTAudioMsgPropertyDynamicLatencyAudioAndInputAggregationOn"))
  {
    CFBooleanGetValue(a3);
    int v6 = *(void (**)(void))(**(void **)(a1 + 776) + 112LL);
    goto LABEL_24;
  }

  if (!strcmp(__s1, "kBTAudioMsgPropertyWSModeEnabled"))
  {
    BOOL v7 = CFBooleanGetValue(a3) != 0;
    (*(void (**)(void, uint64_t, BOOL, uint64_t))(**(void **)(a1 + 776) + 104LL))( *(void *)(a1 + 776),  a1,  v7,  1LL);
    return;
  }

  if (!strcmp(__s1, "kBTAudioMsgPropertyPMEOnBuds"))
  {
    CFBooleanGetValue(a3);
    int v6 = *(void (**)(void))(**(void **)(a1 + 776) + 120LL);
    goto LABEL_24;
  }

  if (!strcmp(__s1, "kBTAudioMsgPropertySpatialOn"))
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
    if ((valuePtr & 1) != 0)
    {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 776) + 80LL))( *(void *)(a1 + 776),  a1,  1LL);
    }

    else
    {
      uint64_t v8 = **(void **)(a1 + 776);
      if ((valuePtr & 2) != 0)
      {
        (*(void (**)(void))(v8 + 72))();
      }

      else
      {
        (*(void (**)(void))(v8 + 80))();
        (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 776) + 72LL))( *(void *)(a1 + 776),  a1,  0LL);
      }
    }

    return;
  }

  if (!strcmp(__s1, "kBTAudioMsgPropertySpatialAudioActive"))
  {
    CFBooleanGetValue(a3);
    int v6 = *(void (**)(void))(**(void **)(a1 + 776) + 160LL);
    goto LABEL_24;
  }

  if (!strcmp(__s1, "kBTAudioMsgPropertySpatialAudioAppBasedMode"))
  {
    xpc_object_t value = 0LL;
    int valuePtr = 0LL;
    CFBooleanRef BOOLean = 0LL;
    LODWORD(number) = 0;
    else {
      id v9 = 0LL;
    }
    if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyHeadTrack", (const void **)&BOOLean))
    {
      if (CFBooleanGetValue(BOOLean)) {
        uint64_t v12 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v12 = 0LL;
      }
    }

    else
    {
      uint64_t v12 = 0xFFFFFFFFLL;
    }

    (*(void (**)(void, uint64_t, id, void, uint64_t))(**(void **)(a1 + 776) + 152LL))( *(void *)(a1 + 776),  a1,  v9,  number,  v12);
  }

  else if (!strcmp(__s1, "kBTAudioMsgPropertyAdaptiveVolumeRampEnd"))
  {
    CFBooleanRef BOOLean = 0LL;
    xpc_object_t value = 0LL;
    CFNumberRef number = 0LL;
    LODWORD(v18) = 0;
    unsigned int v19 = 0;
    if (CFDictionaryGetValueIfPresent( a3,  @"kBTAudioMsgPropertyAdaptiveVolumeCurrentVolume",  (const void **)&value))
    {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v18);
    }

    if (CFDictionaryGetValueIfPresent( a3,  @"kBTAudioMsgPropertyAdaptiveVolumeAudioCategory",  (const void **)&BOOLean))
    {
      id v10 = -[__CFBoolean copy](BOOLean, "copy");
    }

    else
    {
      id v10 = 0LL;
    }

    if (CFDictionaryGetValueIfPresent( a3,  @"kBTAudioMsgPropertyAdaptiveVolumeRampEndReason",  (const void **)&number))
    {
      CFNumberGetValue(number, kCFNumberSInt32Type, &v19);
      uint64_t v13 = v19;
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    __int128 v14 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(valuePtr) = 67109634;
      HIDWORD(valuePtr) = v18;
      __int16 v24 = 2112;
      id v25 = v10;
      __int16 v26 = 1024;
      int v27 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Adaptive Volume: Volume ramp ended with currentVolume: %d audioCategory %@ rampEndReason %d",  (uint8_t *)&valuePtr,  0x18u);
      uint64_t v13 = v19;
    }

    (*(void (**)(void, uint64_t, void, id, uint64_t))(**(void **)(a1 + 776) + 96LL))( *(void *)(a1 + 776),  a1,  v18,  v10,  v13);
  }

  else if (!strcmp(__s1, "kBTAudioMsgPropertyManualVolumeUpdate"))
  {
    CFBooleanRef BOOLean = 0LL;
    xpc_object_t value = 0LL;
    CFNumberRef number = 0LL;
    uint64_t v17 = 0LL;
    CFNumberRef v18 = 0LL;
    unsigned int v19 = 0;
    if (CFDictionaryGetValueIfPresent( a3,  @"kBTAudioMsgPropertyManualVolumeUpdateNewVolume",  (const void **)&number))
    {
      CFNumberGetValue(number, kCFNumberSInt32Type, &v19);
    }

    if (CFDictionaryGetValueIfPresent( a3,  @"kBTAudioMsgPropertyManualVolumeUpdateCurrentVolume",  (const void **)&value))
    {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, (char *)&v17 + 4);
    }

    if (CFDictionaryGetValueIfPresent( a3,  @"kBTAudioMsgPropertyManualVolumeUpdateCurrentAudioCategory",  (const void **)&BOOLean))
    {
      id v11 = -[__CFBoolean copy](BOOLean, "copy");
    }

    else
    {
      id v11 = 0LL;
    }

    if (CFDictionaryGetValueIfPresent( a3,  @"kBTAudioMsgPropertyManualVolumeUpdateRampInProgress",  (const void **)&v18))
    {
      CFNumberGetValue(v18, kCFNumberSInt32Type, &v17);
      int v15 = v17;
    }

    else
    {
      int v15 = 0;
    }

    __int128 v16 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(valuePtr) = 67109890;
      HIDWORD(valuePtr) = BYTE4(v17);
      __int16 v24 = 2112;
      id v25 = v11;
      __int16 v26 = 1024;
      int v27 = v19;
      __int16 v28 = 1024;
      int v29 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Manual Volume update received currentVolume: %d audioCategory %@ newVolume %d isRampInProgress %d",  (uint8_t *)&valuePtr,  0x1Eu);
      int v15 = v17;
    }

    (*(void (**)(void, uint64_t, void, id, void, BOOL))(**(void **)(a1 + 776) + 88LL))( *(void *)(a1 + 776),  a1,  HIDWORD(v17),  v11,  v19,  v15 != 0);
  }

  else if (!strcmp(__s1, "kBTAudioMsgPropertyFrameCount"))
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
    (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 776) + 168LL))( *(void *)(a1 + 776),  a1,  valuePtr);
  }

  else
  {
    sub_100270F28((uint64_t *)a1, __s1, a3);
  }

void sub_10054F318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10054F350(uint64_t a1)
{
  uint64_t result = (***(uint64_t (****)(void, uint64_t))(a1 + 776))(*(void *)(a1 + 776), a1);
  *(_BYTE *)(a1 + 784) = 1;
  return result;
}

uint64_t sub_10054F38C(uint64_t a1)
{
  *(_BYTE *)(a1 + 784) = 0;
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 776) + 24LL))(*(void *)(a1 + 776), a1);
}

uint64_t sub_10054F3A4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 776) + 40LL))(*(void *)(a1 + 776), a1);
}

uint64_t sub_10054F3B8(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 776) + 32LL))(*(void *)(a1 + 776), a1);
}

uint64_t sub_10054F3CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 784);
}

uint64_t sub_10054F3D4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 776) + 136LL))( *(void *)(a1 + 776),  a1,  a2);
}

uint64_t sub_10054F3EC(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 776) + 144LL))(*(void *)(a1 + 776), a1);
}

uint64_t sub_10054F400(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 776) + 176LL))(*(void *)(a1 + 776), a1);
}

void sub_10054F414(uint64_t a1, int a2)
{
}

void sub_10054F424(uint64_t a1, int a2)
{
}

void sub_10054F434(uint64_t a1, int a2)
{
}

void sub_10054F444(uint64_t a1, int a2)
{
}

void sub_10054F454(uint64_t a1, int a2)
{
}

void sub_10054F464(uint64_t a1, int a2)
{
}

void sub_10054F474(uint64_t a1, int a2)
{
}

void sub_10054F484(uint64_t a1, int a2)
{
}

void sub_10054F494(uint64_t a1, int a2)
{
}

void sub_10054F4A4(uint64_t a1, int a2)
{
}

void sub_10054F4B4(uint64_t a1, int a2, float a3)
{
  float valuePtr = a3;
  int v7 = a2;
  *(_OWORD *)keys = *(_OWORD *)off_1008A1498;
  CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &valuePtr);
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v7);
  values[0] = v4;
  values[1] = v5;
  CFDictionaryRef v6 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  sub_1002703E8(a1, "kBTAudioMsgPropertySamplingSpeedParams", v6);
  CFRelease(v4);
  CFRelease(v5);
  CFRelease(v6);
}

void sub_10054F5B0(uint64_t a1, int a2)
{
}

uint64_t sub_10054F5C0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 776) + 128LL))( *(void *)(a1 + 776),  a1,  a2);
}

void sub_10054F5D8(uint64_t a1, int a2)
{
}

void sub_10054F5E8(uint64_t a1, double a2)
{
}

void sub_10054F5F4(uint64_t a1, int a2)
{
}

void sub_10054F604(uint64_t a1, int a2)
{
}

void sub_10054F614(uint64_t a1, int a2)
{
}

void sub_10054F624(uint64_t a1, int a2)
{
}

unint64_t sub_10054F634(uint64_t a1)
{
  return (unint64_t)*(double *)(a1 + 680);
}

void sub_10054F640(uint64_t a1, CFDictionaryRef theDict)
{
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, theDict);
  sub_1002703E8(a1, "kBTAudioMsgPropertySpatialPerAppModeMap", MutableCopy);
  CFRelease(MutableCopy);
}

void sub_10054F690(uint64_t a1, CFDictionaryRef theDict)
{
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, theDict);
  sub_1002703E8(a1, "kBTAudioMsgPropertyAdaptiveVolumeMap", MutableCopy);
  CFRelease(MutableCopy);
}

void sub_10054F6E0(uint64_t a1, int a2)
{
}

uint64_t sub_10054F6F0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v8 = *(unsigned __int8 *)(a1 + 652);
  unsigned int v6 = *(unsigned __int8 *)(a1 + 660);
  uint64_t v7 = sub_1003A46D4(a1 + 400);
  LODWORD(v8) = vcvtps_s32_f32((float)a3 / (float)(int)v8);
  if (*(_BYTE *)(a1 + 396)
    && (id v9 = (os_log_s *)qword_1008F7570, os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEBUG)))
  {
    int v12 = 134218496;
    unint64_t v13 = a3;
    __int16 v14 = 1024;
    int v15 = v8;
    __int16 v16 = 1024;
    unsigned int v17 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "A2DPAudioDevice readHandler called on data of size %lu (%d frames) with maxFrame count of %d",  (uint8_t *)&v12,  0x18u);
    if ((_DWORD)v7) {
      goto LABEL_4;
    }
  }

  else if ((_DWORD)v7)
  {
LABEL_4:
    uint64_t v8 = 0LL;
    return (*(uint64_t (**)(void, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(**(void **)(a1 + 776) + 16LL))( *(void *)(a1 + 776),  a1,  a2,  a3,  v8,  v7);
  }

  if (v6 < v8)
  {
    id v10 = (os_log_s *)qword_1008F7570;
    if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_FAULT)) {
      sub_10069191C(v8, v6, v10);
    }
  }

  return (*(uint64_t (**)(void, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(**(void **)(a1 + 776)
                                                                                                 + 16LL))( *(void *)(a1 + 776),  a1,  a2,  a3,  v8,  v7);
}

uint64_t sub_10054F85C()
{
  return 1LL;
}

uint64_t sub_10054F868(uint64_t a1)
{
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_10088BF50;
  sub_100242DC4(a1 + 8);
  *(void *)a1 = off_1008A14B8;
  *(void *)(a1 + sub_100242FAC(v22 - 96) = 0LL;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = a1 + 120;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  *(void *)(a1 + 136) = a1 + 144;
  *(void *)(a1 + 168) = 0LL;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 160) = a1 + 168;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 208) = a1 + 216;
  *(void *)(a1 + 240) = 0LL;
  *(void *)(a1 + 2sub_100242FAC(v15 - 48) = 0LL;
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 232) = a1 + 240;
  *(_DWORD *)(a1 + 80) = 2;
  return a1;
}

uint64_t sub_10054F924@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 8);
  sub_100291924(a2, (const void ***)(a1 + 88));
  return sub_100242FAC((uint64_t)v5);
}

void sub_10054F970( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10054F984@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 8);
  sub_100291924(a2, (const void ***)(a1 + 112));
  return sub_100242FAC((uint64_t)v5);
}

void sub_10054F9D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10054F9E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 8);
  sub_100291924(a2, (const void ***)(a1 + 136));
  return sub_100242FAC((uint64_t)v5);
}

void sub_10054FA30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10054FA44@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 8);
  sub_1005509CC(a2, a1 + 160);
  return sub_100242FAC((uint64_t)v5);
}

void sub_10054FA90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10054FAA4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 8);
  sub_100550CF4(a2, (const void ***)(a1 + 184));
  return sub_100242FAC((uint64_t)v5);
}

void sub_10054FAF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10054FB04@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 8);
  sub_100550F08(a2, a1 + 208);
  return sub_100242FAC((uint64_t)v5);
}

void sub_10054FB50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10054FB64(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1 + 8);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 256);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_10054FBA8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 8);
  sub_100550F5C(a2, (const void ***)(a1 + 232));
  return sub_100242FAC((uint64_t)v5);
}

void sub_10054FBF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10054FC08(uint64_t a1, void *a2)
{
  id v34 = a2;
  v39[0] = 0LL;
  v39[1] = 0LL;
  sub_100242F28((uint64_t)v39, a1 + 8);
  objc_storeStrong((id *)(a1 + 72), a2);
  CFNumberRef v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) getLocalFileUrl]);
  CFNumberRef v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSURL URLWithString:relativeToURL:]( &OBJC_CLASS___NSURL,  "URLWithString:relativeToURL:",  @"MobileBluetoothConfig.plist",  v4));

  id v38 = 0LL;
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithContentsOfURL:error:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithContentsOfURL:error:",  v5,  &v38));
  id v33 = v38;
  int v32 = (void *)objc_claimAutoreleasedReturnValue([v6 valueForKey:@"denylistedAVRCPSubstrings"]);
  sub_1005500B8(v32, (uint64_t)&v35);
  uint64_t v7 = a1 + 120;
  sub_10023E78C(a1 + 112, *(char **)(a1 + 120));
  uint64_t v8 = v36;
  *(void *)(a1 + 112) = v35;
  *(void *)(a1 + 120) = v8;
  id v9 = v37;
  *(void *)(a1 + 128) = v37;
  if (v9)
  {
    *((void *)v8 + 2) = v7;
    uint64_t v35 = (char *)&v36;
    __int128 v36 = 0LL;
    __int128 v37 = 0LL;
    uint64_t v8 = 0LL;
  }

  else
  {
    *(void *)(a1 + 112) = v7;
  }

  sub_10023E78C((uint64_t)&v35, v8);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 valueForKey:@"denylistedCATTSubstrings"]);
  sub_1005500B8(v10, (uint64_t)&v35);
  uint64_t v11 = a1 + 144;
  sub_10023E78C(a1 + 136, *(char **)(a1 + 144));
  int v12 = v36;
  *(void *)(a1 + 136) = v35;
  *(void *)(a1 + 144) = v12;
  unint64_t v13 = v37;
  *(void *)(a1 + 152) = v37;
  if (v13)
  {
    *((void *)v12 + 2) = v11;
    uint64_t v35 = (char *)&v36;
    __int128 v36 = 0LL;
    __int128 v37 = 0LL;
    int v12 = 0LL;
  }

  else
  {
    *(void *)(a1 + 136) = v11;
  }

  sub_10023E78C((uint64_t)&v35, v12);
  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v6 valueForKey:@"denylistedPBAPSubstrings"]);
  sub_1005500B8(v14, (uint64_t)&v35);
  uint64_t v15 = a1 + 96;
  sub_10023E78C(a1 + 88, *(char **)(a1 + 96));
  __int16 v16 = v36;
  *(void *)(a1 + 88) = v35;
  *(void *)(a1 + sub_100242FAC(v22 - 96) = v16;
  unsigned int v17 = v37;
  *(void *)(a1 + 104) = v37;
  if (v17)
  {
    *((void *)v16 + 2) = v15;
    uint64_t v35 = (char *)&v36;
    __int128 v36 = 0LL;
    __int128 v37 = 0LL;
    __int16 v16 = 0LL;
  }

  else
  {
    *(void *)(a1 + 88) = v15;
  }

  sub_10023E78C((uint64_t)&v35, v16);
  CFNumberRef v18 = (void *)objc_claimAutoreleasedReturnValue([v6 valueForKey:@"triesteDenylistedAutomationDongles"]);
  sub_100550234(v18, (uint64_t)&v35);
  uint64_t v19 = a1 + 192;
  sub_10023E78C(a1 + 184, *(char **)(a1 + 192));
  __int128 v20 = v36;
  *(void *)(a1 + 184) = v35;
  *(void *)(a1 + 192) = v20;
  __int128 v21 = v37;
  *(void *)(a1 + 200) = v37;
  if (v21)
  {
    *((void *)v20 + 2) = v19;
    uint64_t v35 = (char *)&v36;
    __int128 v36 = 0LL;
    __int128 v37 = 0LL;
    __int128 v20 = 0LL;
  }

  else
  {
    *(void *)(a1 + 184) = v19;
  }

  sub_10023E78C((uint64_t)&v35, v20);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v6 valueForKey:@"maxFindMyLEConnections"]);
  sub_1005503C4(v22, (uint64_t *)&v35);
  uint64_t v23 = a1 + 216;
  sub_10023BF24(a1 + 208, *(void **)(a1 + 216));
  __int16 v24 = v36;
  *(void *)(a1 + 208) = v35;
  *(void *)(a1 + 216) = v24;
  id v25 = v37;
  *(void *)(a1 + 224) = v37;
  if (v25)
  {
    *((void *)v24 + 2) = v23;
    uint64_t v35 = (char *)&v36;
    __int128 v36 = 0LL;
    __int128 v37 = 0LL;
    __int16 v24 = 0LL;
  }

  else
  {
    *(void *)(a1 + 208) = v23;
  }

  sub_10023BF24((uint64_t)&v35, v24);
  __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([v6 valueForKey:@"maxFindMyLETransientConnections"]);
  *(_BYTE *)(a1 + 256) = [v26 unsignedCharValue];
  int v27 = (void *)objc_claimAutoreleasedReturnValue([v6 valueForKey:@"maxSharingNearbyInvitationsHostLEConnections"]);
  sub_1005504C4(v27, (uint64_t *)&v35);
  int v29 = *(char **)(a1 + 240);
  __int16 v28 = (char **)(a1 + 240);
  sub_10023E78C((uint64_t)(v28 - 1), v29);
  uint64_t v30 = v36;
  *(v28 - 1) = v35;
  char *v28 = v30;
  id v31 = v37;
  v28[1] = v37;
  if (v31)
  {
    *((void *)v30 + 2) = v28;
    uint64_t v35 = (char *)&v36;
    __int128 v36 = 0LL;
    __int128 v37 = 0LL;
    uint64_t v30 = 0LL;
  }

  else
  {
    *(v28 - 1) = (char *)v28;
  }

  sub_10023E78C((uint64_t)&v35, v30);

  sub_100242FAC((uint64_t)v39);
}

void sub_10054FFF4( _Unwind_Exception *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100550074()
{
}

void sub_100550080()
{
}

void sub_10055008C()
{
}

void sub_100550094()
{
}

void sub_10055009C()
{
  JUMPOUT(0x10055005CLL);
}

void sub_1005500A8()
{
}

void sub_1005500B0()
{
}

void sub_1005500B8(void *a1@<X1>, uint64_t a2@<X8>)
{
  id v3 = a1;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)a2 = a2 + 8;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v4 = v3;
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v11;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v4);
        }
        sub_10002418C( __p, (char *)[*(id *)(*((void *)&v10 + 1) + 8 * (void)v7) UTF8String]);
        sub_1004F5958((uint64_t **)a2, (const void **)__p, (uint64_t)__p);
        if (v9 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v5);
  }
}

void sub_1005501E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_10023E78C(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

void sub_100550234(void *a1@<X1>, uint64_t a2@<X8>)
{
  id v3 = a1;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)a2 = a2 + 8;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectEnumerator]);
  while (1)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 nextObject]);
    uint64_t v6 = v5;
    if (!v5) {
      break;
    }
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v10 = 0LL;
    id v7 = objc_claimAutoreleasedReturnValue([v5 valueForKey:@"friendlyName"]);
    sub_10002418C(__p, (char *)[v7 UTF8String]);

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 valueForKey:@"chipsetManufacturerNameID"]);
    LOWORD(nullsub_63(v5 - 80, v7) = (unsigned __int16)[v8 unsignedIntValue];

    __int128 v11 = __p;
    *((_WORD *)sub_100551170((uint64_t **)a2, (const void **)__p, (uint64_t)&unk_1006C2518, (__int128 **)&v11) + 28) = (_WORD)v7;
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100550360( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1005503C4(void *a1@<X1>, uint64_t *a2@<X8>)
{
  id v3 = a1;
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x4812000000LL;
  uint64_t v8 = sub_1005505C4;
  char v9 = sub_100550600;
  v12[0] = 0LL;
  v12[1] = 0LL;
  uint64_t v10 = &unk_1007C41D6;
  __int128 v11 = v12;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_100550610;
  v4[3] = &unk_1008A14D8;
  v4[4] = &v5;
  [v3 enumerateKeysAndObjectsUsingBlock:v4];
  sub_100550F08(a2, (uint64_t)(v6 + 6));
  _Block_object_dispose(&v5, 8);
  sub_10023BF24((uint64_t)&v11, v12[0]);
}

void sub_10055049C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21)
{
  _Unwind_Resume(a1);
}

void sub_1005504C4(void *a1@<X1>, uint64_t *a2@<X8>)
{
  id v3 = a1;
  uint64_t v5 = 0LL;
  uint64_t v6 = (const void ***)&v5;
  uint64_t v7 = 0x4812000000LL;
  uint64_t v8 = sub_10055077C;
  char v9 = sub_1005507B8;
  v12[0] = 0LL;
  v12[1] = 0LL;
  uint64_t v10 = &unk_1007C41D6;
  __int128 v11 = v12;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1005507C8;
  v4[3] = &unk_1008A14D8;
  v4[4] = &v5;
  [v3 enumerateKeysAndObjectsUsingBlock:v4];
  sub_100550F5C(a2, v6 + 6);
  _Block_object_dispose(&v5, 8);
  sub_10023E78C((uint64_t)&v11, v12[0]);
}

void sub_10055059C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char *a21)
{
  _Unwind_Resume(a1);
}

void *sub_1005505C4(void *result, void *a2)
{
  result[6] = a2[6];
  uint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  id v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    *uint64_t v2 = 0LL;
    a2[8] = 0LL;
  }

  else
  {
    result[6] = v4;
  }

  return result;
}

void sub_100550600(uint64_t a1)
{
}

void sub_100550610(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v5 isEqualToString:@"legacyBCMChipsets"])
  {
    unsigned __int8 v7 = [v6 unsignedCharValue];
    uint64_t v8 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 48LL);
    int v12 = 0;
    __int128 v13 = &v12;
    char v9 = sub_1002BBE00(v8, &v12, (uint64_t)&unk_1006C2518, &v13);
LABEL_7:
    *((_BYTE *)v9 + 32) = v7;
    goto LABEL_8;
  }

  if ([v5 isEqualToString:@"modernBCMChipsets"])
  {
    unsigned __int8 v7 = [v6 unsignedCharValue];
    uint64_t v10 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 48LL);
    int v12 = 1;
    __int128 v13 = &v12;
    char v9 = sub_1002BBE00(v10, &v12, (uint64_t)&unk_1006C2518, &v13);
    goto LABEL_7;
  }

  if ([v5 isEqualToString:@"aciChipsets"])
  {
    unsigned __int8 v7 = [v6 unsignedCharValue];
    __int128 v11 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 48LL);
    int v12 = 2;
    __int128 v13 = &v12;
    char v9 = sub_1002BBE00(v11, &v12, (uint64_t)&unk_1006C2518, &v13);
    goto LABEL_7;
  }

void sub_10055075C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10055077C(void *result, void *a2)
{
  result[6] = a2[6];
  uint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  id v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    *uint64_t v2 = 0LL;
    a2[8] = 0LL;
  }

  else
  {
    result[6] = v4;
  }

  return result;
}

void sub_1005507B8(uint64_t a1)
{
}

void sub_1005507C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned __int8 v7 = [v6 unsignedCharValue];
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v9 = v5;
  sub_10002418C(__p, (char *)[v9 UTF8String]);
  int v12 = __p;
  *((_BYTE *)sub_1002925B8((uint64_t **)(v8 + 48), (const void **)__p, (uint64_t)&unk_1006C2518, (_OWORD **)&v12) + 56) = v7;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10055087C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1005508AC(uint64_t a1)
{
  *(void *)a1 = off_10088BF50;

  sub_100242E28(a1 + 8);
  return a1;
}

void sub_10055093C(char *a1)
{
  *(void *)a1 = off_10088BF50;

  sub_100242E28(a1 + 8);
  operator delete(a1);
}

uint64_t *sub_1005509CC(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_100550A20(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_100550A08(_Unwind_Exception *a1)
{
}

uint64_t *sub_100550A20(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    id v4 = a2;
    id v5 = (uint64_t **)result;
    id v6 = result + 1;
    do
    {
      uint64_t result = sub_100550AA4(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      unsigned __int8 v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          unsigned __int8 v7 = *(unsigned int **)v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          id v4 = v8;
        }

        while (!v9);
      }

      id v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_100550AA4(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v10 = 0LL;
  char v11 = 0LL;
  id v6 = sub_100550B2C(a1, a2, &v11, &v10, a3);
  unsigned __int8 v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    unsigned __int8 v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_100029630(a1, (uint64_t)v11, v8, v7);
  }

  return v7;
}

uint64_t *sub_100550B2C(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int *a5)
{
  unsigned int v5 = *a5;
  unsigned int v6 = *((_DWORD *)a2 + 7);
  if (*a5 < v6) {
    goto LABEL_3;
  }
  if (v6 < v5)
  {
LABEL_9:
    uint64_t v10 = a2[1];
    if (v10)
    {
      char v11 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v11;
        char v11 = (uint64_t *)*v11;
      }

      while (v11);
    }

    else
    {
      unsigned int v17 = a2;
      do
      {
        a4 = (uint64_t **)v17[2];
        BOOL v13 = *a4 == v17;
        unsigned int v17 = (uint64_t *)a4;
      }

      while (!v13);
    }

    if (a4 != a1 + 1)
    {
      unsigned int v18 = *((_DWORD *)a4 + 7);
      if (v5 >= v18 && (v18 < v5 || a5[1] >= *((_DWORD *)a4 + 8))) {
        return sub_100550C90((uint64_t)a1, a3, a5);
      }
    }

    if (v10)
    {
      *a3 = (uint64_t *)a4;
    }

    else
    {
      *a3 = a2;
      return a2 + 1;
    }

    return (uint64_t *)a4;
  }

  unsigned int v15 = a5[1];
  unsigned int v16 = *((_DWORD *)a2 + 8);
  if (v15 >= v16)
  {
    if (v16 >= v15)
    {
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }

    goto LABEL_9;
  }

uint64_t *sub_100550C90(uint64_t a1, void *a2, unsigned int *a3)
{
  unsigned int v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  id v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    unsigned int v7 = a3[1];
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v4;
        unsigned int v9 = *((_DWORD *)v4 + 7);
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        id v4 = (uint64_t *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }

      if (v9 >= v6)
      {
        unsigned int v10 = *((_DWORD *)v8 + 8);
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }

      uint64_t result = v8 + 1;
      id v4 = (uint64_t *)v8[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }

  uint64_t v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

uint64_t *sub_100550CF4(uint64_t *a1, const void ***a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_100550D48(a1, *a2, a2 + 1);
  return a1;
}

void sub_100550D30(_Unwind_Exception *a1)
{
}

uint64_t *sub_100550D48(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    id v4 = a2;
    unsigned int v5 = (uint64_t **)result;
    unsigned int v6 = result + 1;
    do
    {
      uint64_t result = sub_100550DCC(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      unsigned int v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          unsigned int v7 = (const void **)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          id v4 = (const void **)v8;
        }

        while (!v9);
      }

      id v4 = (const void **)v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_100550DCC(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v9 = 0LL;
  unsigned int v10 = 0LL;
  unsigned int v6 = (uint64_t **)sub_10023E45C(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100550E58((uint64_t)a1, a4, v8);
    sub_100029630(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }

  return result;
}

_BYTE *sub_100550E58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[2] = 0LL;
  a3[1] = 0LL;
  unsigned int v6 = a3 + 1;
  unsigned int v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *unsigned int v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  uint64_t result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_100024238(result, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *((void *)v7 + 6) = *(void *)(a2 + 16);
  }

  *((_WORD *)v7 + 28) = *(_WORD *)(a2 + 24);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100550EEC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_10023E740(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_100550F08(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_1004C2E78(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_100550F44(_Unwind_Exception *a1)
{
}

uint64_t *sub_100550F5C(uint64_t *a1, const void ***a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_100550FB0(a1, *a2, a2 + 1);
  return a1;
}

void sub_100550F98(_Unwind_Exception *a1)
{
}

uint64_t *sub_100550FB0(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    id v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    unsigned int v6 = result + 1;
    do
    {
      uint64_t result = sub_100551034(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      unsigned int v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          unsigned int v7 = (const void **)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          id v4 = (const void **)v8;
        }

        while (!v9);
      }

      id v4 = (const void **)v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_100551034(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v9 = 0LL;
  unsigned int v10 = 0LL;
  unsigned int v6 = (uint64_t **)sub_10023E45C(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1005510C0((uint64_t)a1, a4, v8);
    sub_100029630(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }

  return result;
}

_BYTE *sub_1005510C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[2] = 0LL;
  a3[1] = 0LL;
  unsigned int v6 = a3 + 1;
  unsigned int v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *unsigned int v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  uint64_t result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_100024238(result, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *((void *)v7 + 6) = *(void *)(a2 + 16);
  }

  v7[56] = *(_BYTE *)(a2 + 24);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100551154(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_10023E740(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_100551170(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v9 = 0LL;
  unsigned int v6 = (uint64_t **)sub_10023E6A4((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100551210((uint64_t)a1, a4, v8);
    sub_100029630(a1, v9, v6, v8[0]);
    return v8[0];
  }

  return result;
}

_BYTE *sub_100551210@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[2] = 0LL;
  a3[1] = 0LL;
  unsigned int v6 = a3 + 1;
  unsigned int v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *unsigned int v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  uint64_t result = v7 + 32;
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_100024238(result, *(void **)v9, *((void *)v9 + 1));
  }

  else
  {
    __int128 v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)uint64_t result = v10;
  }

  *((_WORD *)v7 + 28) = 0;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1005512A4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_10023E740(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1005512C0(uint64_t a1)
{
  *(void *)(a1 + 16) = off_1008A1590;
  uint64_t v2 = a1 + 16;
  *(void *)(a1 + 24) = off_1008A15C0;
  uint64_t v3 = a1 + 24;
  *(void *)(a1 + 32) = off_1008A15F0;
  uint64_t v4 = a1 + 32;
  *(void *)a1 = off_1008A1508;
  *(void *)(a1 + 8) = &off_1008A1578;
  *(void *)(a1 + sub_100242FAC(v15 - 48) = 0LL;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 72) = a1 + 80;
  uint64_t v5 = (uint64_t **)(a1 + 72);
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + sub_100242FAC(v22 - 96) = a1 + 104;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  *(void *)(a1 + 120) = a1 + 128;
  uint64_t v22 = (uint64_t **)(a1 + 120);
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 160) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 2sub_100242FAC(v15 - 48) = a1 + 256;
  *(void *)(a1 + 144) = a1 + 152;
  unsigned int v6 = (uint64_t **)(a1 + 144);
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 168) = a1 + 176;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 192) = a1 + 200;
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 216) = a1 + 224;
  *(void *)(a1 + 208) = 0LL;
  *(void *)(a1 + 232) = 0LL;
  *(_DWORD *)(a1 + 240) = 30;
  *(void *)(a1 + 256) = 0LL;
  *(void *)(a1 + 264) = 0LL;
  int v74 = 0;
  __int128 v73 = xmmword_1006BD964;
  sub_100634334((__n128 *)buf, (__n128 *)&v73);
  sub_10038CF98(v5, buf, (uint64_t)buf);
  __int128 v71 = xmmword_1006BD978;
  int v72 = 0;
  sub_100634334((__n128 *)buf, (__n128 *)&v71);
  sub_10038CF98(v5, buf, (uint64_t)buf);
  __int128 v69 = xmmword_1006BDAF4;
  int v70 = 0;
  sub_100634334((__n128 *)buf, (__n128 *)&v69);
  sub_10038CF98(v5, buf, (uint64_t)buf);
  __int128 v67 = xmmword_1006BDB1C;
  int v68 = 0;
  sub_100634334((__n128 *)buf, (__n128 *)&v67);
  sub_10038CF98(v5, buf, (uint64_t)buf);
  __int128 v65 = xmmword_1006BDB30;
  int v66 = -805294830;
  sub_100634334((__n128 *)buf, (__n128 *)&v65);
  sub_10038CF98(v5, buf, (uint64_t)buf);
  __int128 v63 = xmmword_1006BDB44;
  int v64 = -587704915;
  sub_100634334((__n128 *)buf, (__n128 *)&v63);
  sub_10038CF98(v5, buf, (uint64_t)buf);
  __int128 v61 = xmmword_1006BDB58;
  int v62 = -1765695659;
  sub_100634334((__n128 *)buf, (__n128 *)&v61);
  sub_10038CF98(v5, buf, (uint64_t)buf);
  __int128 v59 = xmmword_1006BDB94;
  int v60 = 0;
  sub_100634334((__n128 *)buf, (__n128 *)&v59);
  sub_10038CF98(v5, buf, (uint64_t)buf);
  __int128 v57 = xmmword_1006BDC4C;
  int v58 = 1880579407;
  sub_100634334((__n128 *)buf, (__n128 *)&v57);
  sub_10038CF98(v5, buf, (uint64_t)buf);
  __int128 v55 = xmmword_1006BDB80;
  int v56 = -1171415960;
  sub_100634334((__n128 *)buf, (__n128 *)&v55);
  sub_10038CF98(v5, buf, (uint64_t)buf);
  __int128 v53 = xmmword_1006BDBF8;
  int v54 = 1729713604;
  sub_100634334((__n128 *)buf, (__n128 *)&v53);
  sub_10038CF98(v5, buf, (uint64_t)buf);
  __int128 v51 = xmmword_1006BDC88;
  int v52 = -815610143;
  sub_100634334((__n128 *)buf, (__n128 *)&v51);
  sub_10038CF98(v5, buf, (uint64_t)buf);
  __int128 v49 = xmmword_1006BDC9C;
  int v50 = 1323364242;
  sub_100634334((__n128 *)buf, (__n128 *)&v49);
  sub_10038CF98(v5, buf, (uint64_t)buf);
  __int128 v47 = xmmword_1006BDCB0;
  int v48 = 0;
  sub_100634334((__n128 *)buf, (__n128 *)&v47);
  sub_10038CF98(v5, buf, (uint64_t)buf);
  __int128 v45 = xmmword_1006BDCD8;
  int v46 = 0;
  sub_100634334((__n128 *)buf, (__n128 *)&v45);
  sub_10038CF98(v5, buf, (uint64_t)buf);
  __n128 v43 = 0uLL;
  int v44 = 0;
  *(_OWORD *)__int128 buf = xmmword_1006C3FA0;
  sub_1001BEE18((int8x16_t *)buf, 16LL, 0, (uint64_t)&v43);
  __n128 v41 = v43;
  int v42 = v44;
  sub_100634334((__n128 *)buf, &v41);
  sub_10038CF98(v5, buf, (uint64_t)buf);
  __int128 v39 = xmmword_1006BDBE4;
  int v40 = 0;
  sub_100634334((__n128 *)buf, (__n128 *)&v39);
  sub_10038CF98(v5, buf, (uint64_t)buf);
  __int128 v37 = xmmword_1006BDC0C;
  int v38 = 2027922698;
  sub_100634334((__n128 *)buf, (__n128 *)&v37);
  sub_10038CF98(v22, buf, (uint64_t)buf);
  __int128 v35 = xmmword_1006BDBD0;
  int v36 = 0;
  sub_100634334((__n128 *)buf, (__n128 *)&v35);
  __p.n128_u64[0] = (unint64_t)buf;
  unsigned int v7 = (uint64_t **)sub_10038D0B4(v6, buf, (uint64_t)&unk_1006C2518, &__p);
  __int128 v33 = xmmword_1006BDC60;
  int v34 = 295542594;
  sub_100634334(&__p, (__n128 *)&v33);
  sub_10038CF98(v7 + 7, (unsigned __int8 *)&__p, (uint64_t)&__p);
  __int128 v31 = xmmword_1006BDBD0;
  int v32 = 0;
  sub_100634334((__n128 *)buf, (__n128 *)&v31);
  __p.n128_u64[0] = (unint64_t)buf;
  uint64_t v8 = (uint64_t **)sub_10038D0B4(v6, buf, (uint64_t)&unk_1006C2518, &__p);
  __int128 v29 = xmmword_1006BDC74;
  int v30 = 312319810;
  sub_100634334(&__p, (__n128 *)&v29);
  sub_10038CF98(v8 + 7, (unsigned __int8 *)&__p, (uint64_t)&__p);
  int v24 = 0;
  uint64_t v9 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(&__p, "MaxUnpairedDatabasesCached");
  int v10 = (*(uint64_t (**)(uint64_t, uint8_t *, __n128 *, int *))(*(void *)v9 + 88LL))(v9, buf, &__p, &v24);
  if (v26 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v28 < 0)
  {
    operator delete(*(void **)buf);
    if (!v10) {
      goto LABEL_13;
    }
  }

  else if (!v10)
  {
    goto LABEL_13;
  }

  int v11 = v24;
  int v12 = (os_log_s *)qword_1008F75B0;
  if (v24 < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_1006919CC();
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Warning: Using override value (%d) for max number of unpaired databases to be cached",  buf,  8u);
      LOWORD(v11) = v24;
    }

    *(_WORD *)(a1 + 240) = v11;
  }

void sub_100551C8C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
}

uint64_t sub_100551DD4(uint64_t a1)
{
  *(void *)(a1 + 16) = off_1008A1590;
  uint64_t v2 = a1 + 16;
  *(void *)a1 = off_1008A1508;
  *(void *)(a1 + 8) = &off_1008A1578;
  *(void *)(a1 + 24) = off_1008A15C0;
  uint64_t v3 = a1 + 24;
  *(void *)(a1 + 32) = off_1008A15F0;
  uint64_t v4 = a1 + 32;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_1008A17B8);
  }
  sub_100009168((uint64_t)off_1008D60A8 + 80, v2);
  if (qword_1008D9278 != -1) {
    dispatch_once(&qword_1008D9278, &stru_1008A17D8);
  }
  sub_100413D4C(qword_1008D9270, a1);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A17F8);
  }
  sub_100009168((uint64_t)off_1008D5F48 + 240, v3);
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_1008A1818);
  }
  sub_100622704(qword_1008D5F18, v4);
  sub_1004F52C4(a1 + 248, *(void **)(a1 + 256));
  sub_10055C8A8(a1 + 216, *(void **)(a1 + 224));
  sub_10055C82C(a1 + 192, *(void **)(a1 + 200));
  sub_1004F52C4(a1 + 168, *(void **)(a1 + 176));
  sub_10038CE10(a1 + 144, *(void **)(a1 + 152));
  sub_10023BF24(a1 + 120, *(void **)(a1 + 128));
  sub_10023BF24(a1 + 96, *(void **)(a1 + 104));
  sub_10023BF24(a1 + 72, *(void **)(a1 + 80));
  uint64_t v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(void *)(a1 + 56) = v5;
    operator delete(v5);
  }

  return a1;
}

void sub_100551F88(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 48);
  if (v3)
  {
    *(void *)(v1 + 56) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(a1);
}

void sub_100552008(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100551DD4(a1);
  operator delete(v1);
}

_BYTE *sub_10055201C(uint64_t a1)
{
  char v3 = 0;
  sub_100242CA4(&v3);
  if (sub_1001BEB38())
  {
    sub_1001A1CE0(sub_1005520E4, 0LL);
    sub_1001A1CBC(sub_1005522F4);
    if (*(_WORD *)(a1 + 242)) {
      sub_1001A6AA8(*(unsigned __int16 *)(a1 + 242));
    }
    sub_100242CD0(&v3);
  }

  return sub_100242CD8(&v3);
}

void sub_1005520CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1005520E4(uint64_t a1, __int16 a2, const void *a3, unsigned int a4, char a5, uint64_t a6)
{
  uint64_t v22 = 0LL;
  int v23 = 0LL;
  sub_10056AB04(&v22, a3, a4);
  uint64_t v10 = sub_10024277C();
  if (sub_10012D5EC(a1))
  {
    int v11 = (unsigned __int8 *)sub_10012DADC(a1);
    if (v11)
    {
      unint64_t v12 = ((unint64_t)v11[1] << 40) | ((unint64_t)v11[2] << 32) | ((unint64_t)v11[3] << 24) | ((unint64_t)v11[4] << 16) | ((unint64_t)v11[5] << 8) | v11[6] | ((unint64_t)*v11 << 48);
LABEL_8:
      uint64_t v14 = sub_100404FE8();
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3321888768LL;
      void v15[2] = sub_10055B0D4;
      uint64_t v15[3] = &unk_1008A1760;
      void v15[4] = a1;
      void v15[5] = v12;
      __int16 v20 = a2;
      int v16 = &off_10087FAA8;
      unsigned int v17 = v23;
      if (v23) {
        sub_1002CD1E0((uint64_t)v23);
      }
      char v21 = a5;
      uint64_t v18 = a6;
      uint64_t v19 = v10;
      sub_100405384(v14, v15);
      int v16 = &off_10087FAA8;
      if (v17) {
        sub_1002CD254(v17);
      }
      goto LABEL_14;
    }

    goto LABEL_7;
  }

  if (sub_10012D514(a1))
  {
    uint64_t v13 = (unsigned __int8 *)sub_10012DB30(a1);
    if (v13)
    {
      unint64_t v12 = ((unint64_t)*v13 << 40) | ((unint64_t)v13[1] << 32) | ((unint64_t)v13[2] << 24) | ((unint64_t)v13[3] << 16) | ((unint64_t)v13[4] << 8) | v13[5];
      goto LABEL_8;
    }

void sub_1005522AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  *(void *)(v17 - 80) = &off_10087FAA8;
  uint64_t v19 = *(unsigned int **)(v17 - 72);
  if (v19) {
    sub_1002CD254(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005522F4()
{
  uint64_t v0 = sub_100404FE8();
  sub_100405384(v0, &stru_1008A1740);
}

_BYTE *sub_100552310(uint64_t a1)
{
  return sub_10055201C(a1 - 16);
}

_BYTE *sub_100552318(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "GattGateway::stackWillStop enter", buf, 2u);
  }

  char v7 = 0;
  sub_100242CA4(&v7);
  if (sub_1001BEB38())
  {
    sub_1001A1D18(sub_1005520E4);
    sub_1001BFFDC();
    sub_100242CD0(&v7);
    uint64_t v3 = sub_100404FE8();
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _DWORD v6[2] = sub_100552448;
    v6[3] = &unk_10087EB20;
    void v6[4] = a1;
    sub_1004054B4(v3, v6);
    uint64_t v4 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "GattGateway::stackWillStop exit", buf, 2u);
    }
  }

  return sub_100242CD8(&v7);
}

void sub_100552434( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_100552448(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10055C82C(v1 + 192, *(void **)(v1 + 200));
  *(void *)(v1 + 192) = v1 + 200;
  *(void *)(v1 + 200) = 0LL;
  uint64_t v2 = *(void **)(v1 + 224);
  v1 += 224LL;
  *(void *)(v1 - 16) = 0LL;
  sub_10055C8A8(v1 - 8, v2);
  *(void *)(v1 - 8) = v1;
  *(void *)uint64_t v1 = 0LL;
  *(void *)(v1 + 8) = 0LL;
  sub_1004F52C4(v1 + 24, *(void **)(v1 + 32));
  *(void *)(v1 + 32) = 0LL;
  *(void *)(v1 + 40) = 0LL;
  *(void *)(v1 + 24) = v1 + 32;
}

_BYTE *sub_1005524AC(uint64_t a1)
{
  return sub_100552318(a1 - 16);
}

void sub_1005524B4(uint64_t a1, unsigned __int8 *a2, int a3)
{
  unsigned int v6 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_INFO)
    && ((sub_1003CF00C((uint64_t)a2, __p), v20 >= 0) ? (char v7 = __p) : (char v7 = (void **)__p[0]),
        *(_DWORD *)__int128 buf = 136446466,
        uint64_t v22 = v7,
        __int16 v23 = 1024,
        LODWORD(v24) = a3,
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "deviceInfoChanged device %{public}s infoChanged:%d",  buf,  0x12u),  v20 < 0))
  {
    operator delete(__p[0]);
    if (a2) {
      goto LABEL_7;
    }
  }

  else if (a2)
  {
LABEL_7:
    unint64_t v8 = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
    uint64_t v9 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEBUG))
    {
      sub_1003CF00C((uint64_t)a2, __p);
      int v12 = v20;
      uint64_t v13 = (void **)__p[0];
      id v14 = sub_1005BF848(v8);
      uint64_t v15 = objc_claimAutoreleasedReturnValue(v14);
      int v16 = (void *)v15;
      uint64_t v17 = __p;
      if (v12 < 0) {
        uint64_t v17 = v13;
      }
      *(_DWORD *)__int128 buf = 136446466;
      uint64_t v22 = v17;
      __int16 v23 = 2114;
      uint64_t v24 = v15;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "deviceInfoChanged device %{public}s address %{public}@",  buf,  0x16u);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    if (a3 == 4099)
    {
      uint64_t v10 = sub_100404FE8();
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472LL;
      v18[2] = sub_100552730;
      uint64_t v18[3] = &unk_10087F8E0;
      void v18[4] = a1;
      v18[5] = v8;
      sub_100405384(v10, v18);
    }

    return;
  }

  int v11 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "deviceInfoChanged invalid device",  (uint8_t *)__p,  2u);
  }

void sub_10055270C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100552730(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A1838);
  }
  *(void *)uu = 0LL;
  uint64_t v19 = 0LL;
  sub_1005C8684((uint64_t)off_1008D5F28, *(void *)(a1 + 40), 0, 1u, 0LL, 0LL, uu);
  if (!uuid_is_null(uu))
  {
    uint64_t v3 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      memset(out, 0, 37);
      uuid_unparse_upper(uu, out);
      sub_10002418C(__p, out);
      int v4 = v13;
      uint64_t v5 = (void **)__p[0];
      id v6 = sub_1005BF848(*(void *)(a1 + 40));
      uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
      unint64_t v8 = (void *)v7;
      uint64_t v9 = __p;
      if (v4 < 0) {
        uint64_t v9 = v5;
      }
      *(_DWORD *)__int128 buf = 136446466;
      uint64_t v15 = v9;
      __int16 v16 = 2114;
      uint64_t v17 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "deviceInfoChanged Clearing device DB for device %{public}s (%{public}@)",  buf,  0x16u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v10 = sub_100241F94(uu);
    int v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    sub_1005528F8(v2, v11);
  }

void sub_1005528C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005528F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  sub_100241F90(&v7, v3);
  int v4 = (uint64_t **)(a1 + 216);
  uint64_t v5 = (uint64_t *)sub_1001FDB10(a1 + 216, (unsigned __int8 *)&v7);
  if ((uint64_t *)(a1 + 224) != v5)
  {
    id v6 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138543362;
      id v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Clearing database cache for device %{public}@",  (uint8_t *)&v7,  0xCu);
    }

    sub_1001FDBCC(v4, v5);
    sub_100032BD4((uint64_t)(v5 + 6));
    operator delete(v5);
  }
}

void sub_1005529F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100552A0C(uint64_t a1, unsigned __int8 *a2, int a3)
{
}

void sub_100552A14(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    id v12 = v5;
    __int16 v13 = 1024;
    int v14 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "GattGateway device %@ paired with result %d",  buf,  0x12u);
  }

  if (!a3)
  {
    uint64_t v7 = sub_100404FE8();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _DWORD v8[2] = sub_100552B58;
    v8[3] = &unk_1008800B8;
    uint64_t v10 = a1;
    id v9 = v5;
    sub_100405384(v7, v8);
  }
}

void sub_100552B30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100552B58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_100241F90(v3, *(void *)(a1 + 32));
  sub_100552BD8(v2, v3);
  sub_100241F90(v3, *(void *)(a1 + 32));
  sub_10055383C(v2, v3);
}

void sub_100552BD8(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = sub_100241F94(a2);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A1838);
  }
  if (sub_1005D4ABC((uint64_t)off_1008D5F28, v5))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEBUG)) {
      sub_100691AB8();
    }
  }

  else
  {
    uint64_t v69 = 0LL;
    int v70 = 0LL;
    uint64_t v71 = 0LL;
    *(void *)__int128 buf = a2;
    id v6 = sub_10055D420( (uint64_t **)(a1 + 248),  a2,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)buf);
    sub_10055D554((uint64_t)&v69, (uint64_t)(v6 + 6));
    uint64_t v7 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Trying to detect built in services on device %@",  buf,  0xCu);
    }

    uint64_t v67 = 0LL;
    int v68 = 0LL;
    sub_100241F90(buf, v5);
    sub_100555864(a1, buf, 0, &v67);
    if (v67)
    {
      sub_100444430(v67, (uint64_t)"");
      uint64_t v8 = v67;
      __int128 v101 = xmmword_1006BDAF4;
      int v102 = 0;
      sub_100634334((__n128 *)buf, (__n128 *)&v101);
      sub_10063432C(v75);
      uint64_t v9 = sub_1004439C4(v8, buf, v75);
      uint64_t v10 = v67;
      __int128 v99 = xmmword_1006BDBF8;
      int v100 = 1729713604;
      sub_100634334((__n128 *)buf, (__n128 *)&v99);
      sub_10063432C(v75);
      uint64_t v11 = sub_1004439C4(v10, buf, v75);
      uint64_t v12 = v67;
      __int128 v97 = xmmword_1006BDC0C;
      int v98 = 2027922698;
      sub_100634334((__n128 *)buf, (__n128 *)&v97);
      sub_10063432C(v75);
      uint64_t v55 = sub_1004439C4(v12, buf, v75);
      uint64_t v13 = v67;
      __int128 v95 = xmmword_1006BDB08;
      int v96 = 0;
      sub_100634334((__n128 *)buf, (__n128 *)&v95);
      sub_10063432C(v75);
      uint64_t v54 = sub_1004439C4(v13, buf, v75);
      uint64_t v14 = v67;
      __int128 v93 = xmmword_1006BDACC;
      int v94 = 0;
      sub_100634334((__n128 *)buf, (__n128 *)&v93);
      sub_10063432C(v75);
      uint64_t v56 = sub_1004439C4(v14, buf, v75);
      if (sub_100558E4C(a1, (__n128 *)&xmmword_1006BDAF4, a2))
      {
        if (v9)
        {
          uint64_t v15 = *(void *)(v9 + 8);
          int v16 = *(_DWORD *)(v15 + 20);
          *(_OWORD *)__int128 buf = *(_OWORD *)(v15 + 4);
          int v73 = v16;
          sub_100634334((__n128 *)v75, (__n128 *)buf);
          int v92 = 0;
          __int128 v91 = xmmword_1006C3FC4;
          if (sub_1001BEC7C(v75, (unsigned __int8 *)&v91))
          {
            uint64_t v17 = (os_log_s *)qword_1008F75B0;
            if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412290;
              *(void *)&uint8_t buf[4] = v5;
              _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "The device %@ supports HID",  buf,  0xCu);
            }

            uint64_t v18 = sub_1002E8F6C();
            (*(void (**)(uint64_t, void *))(*(void *)v18 + 24LL))(v18, v5);
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_1008A1838);
            }
            sub_1005D4F6C((uint64_t)off_1008D5F28, v5);
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_1008A1838);
            }
            sub_1005CB748((uint64_t)off_1008D5F28, v5, 0);
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_1008A1838);
            }
            uint64_t v19 = off_1008D5F28;
            sub_10002418C(__p, "_HID_DEVICE_");
            sub_1005CCF08((uint64_t)v19, v5, (unsigned __int8 *)__p);
            if (v66 < 0) {
              operator delete(__p[0]);
            }
            if (qword_1008D5F10 != -1) {
              dispatch_once(&qword_1008D5F10, &stru_1008A1858);
            }
            sub_100592DA8((uint64_t)off_1008D5F08, v5, 1);
            sub_100559070(a1, (__n128 *)&xmmword_1006BDAF4, a2);
            *(void *)id v75 = 0LL;
            if (qword_1008D5F10 != -1) {
              dispatch_once(&qword_1008D5F10, &stru_1008A1858);
            }
            char v20 = off_1008D5F08;
            sub_100241F90(buf, v5);
            if (sub_100599890((uint64_t)v20, buf, v75))
            {
              buf[0] = 0;
              sub_100242CA4(buf);
              __int16 v21 = sub_10012D7D4(*(unsigned __int16 **)v75);
              if ((sub_1000BAF00(v21 & 0xFFF, **(_WORD **)(v9 + 8), *(_WORD *)(v9 + 48)) & 1) == 0)
              {
                uint64_t v22 = (os_log_s *)qword_1008F75B0;
                if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
                {
                  __int16 v23 = sub_100241F94(a2);
                  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
                  sub_100691B50(v24, v90, v22);
                }
              }

              sub_100242CD8(buf);
            }
          }
        }
      }

      if (sub_100558E4C(a1, (__n128 *)&xmmword_1006BDBF8, a2))
      {
        if (v11)
        {
          uint64_t v25 = *(void *)(v11 + 8);
          int v26 = *(_DWORD *)(v25 + 20);
          *(_OWORD *)__int128 buf = *(_OWORD *)(v25 + 4);
          int v73 = v26;
          sub_100634334((__n128 *)v75, (__n128 *)buf);
          int v89 = 0;
          __int128 v88 = xmmword_1006C3FC4;
          if (sub_1001BEC7C(v75, (unsigned __int8 *)&v88))
          {
            int v27 = (os_log_s *)qword_1008F75B0;
            if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412290;
              *(void *)&uint8_t buf[4] = v5;
              _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "The device %@ supports DOAP",  buf,  0xCu);
            }

            uint64_t v28 = sub_1002E8F6C();
            (*(void (**)(uint64_t, void *))(*(void *)v28 + 48LL))(v28, v5);
            sub_100559070(a1, (__n128 *)&xmmword_1006BDBF8, a2);
          }
        }
      }

      if (sub_100558E4C(a1, (__n128 *)&xmmword_1006BDC0C, a2))
      {
        if (v55)
        {
          uint64_t v29 = *(void *)(v55 + 8);
          int v30 = *(_DWORD *)(v29 + 20);
          *(_OWORD *)__int128 buf = *(_OWORD *)(v29 + 4);
          int v73 = v30;
          sub_100634334((__n128 *)v75, (__n128 *)buf);
          int v87 = 0;
          __int128 v86 = xmmword_1006C3FC4;
          if (sub_1001BEC7C(v75, (unsigned __int8 *)&v86))
          {
            __int128 v82 = xmmword_1006BDC0C;
            int v83 = 2027922698;
            sub_100634334(&v84, (__n128 *)&v82);
            BOOL v31 = a1 + 128 != sub_10038DAA8(a1 + 120, (unsigned __int8 *)&v84);
            if (sub_100556CBC(v5, v31))
            {
              int v32 = (os_log_s *)qword_1008F75B0;
              if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138412290;
                *(void *)&uint8_t buf[4] = v5;
                _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "The device %@ supports UARP",  buf,  0xCu);
              }

              uint64_t v33 = sub_1002E8F6C();
              (*(void (**)(uint64_t, void *))(*(void *)v33 + 56LL))(v33, v5);
              sub_100559070(a1, (__n128 *)&xmmword_1006BDC0C, a2);
            }
          }
        }
      }

      if (_os_feature_enabled_impl("BluetoothFeatures", "NativeHealth"))
      {
        if (sub_100558E4C(a1, (__n128 *)&xmmword_1006BDB08, a2))
        {
          if (v54)
          {
            uint64_t v34 = *(void *)(v54 + 8);
            int v35 = *(_DWORD *)(v34 + 20);
            *(_OWORD *)__int128 buf = *(_OWORD *)(v34 + 4);
            int v73 = v35;
            sub_100634334((__n128 *)v75, (__n128 *)buf);
            int v81 = 0;
            __int128 v80 = xmmword_1006C3FC4;
            if (sub_1001BEC7C(v75, (unsigned __int8 *)&v80))
            {
              int v36 = (os_log_s *)qword_1008F75B0;
              if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138412290;
                *(void *)&uint8_t buf[4] = v5;
                _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "The device %@ supports GHS",  buf,  0xCu);
              }

              uint64_t v37 = sub_1002E8F6C();
              (*(void (**)(uint64_t, void *))(*(void *)v37 + 24LL))(v37, v5);
              if (qword_1008D5F30 != -1) {
                dispatch_once(&qword_1008D5F30, &stru_1008A1838);
              }
              int v38 = off_1008D5F28;
              sub_10002418C(v63, "_GHS_DEVICE_");
              sub_1005CCF08((uint64_t)v38, v5, (unsigned __int8 *)v63);
              if (v64 < 0) {
                operator delete(v63[0]);
              }
              sub_100559070(a1, (__n128 *)&xmmword_1006BDB08, a2);
              if (qword_1008D5F30 != -1) {
                dispatch_once(&qword_1008D5F30, &stru_1008A1838);
              }
              sub_1005CB748((uint64_t)off_1008D5F28, v5, 0);
            }
          }
        }
      }

      if (sub_100558E4C(a1, (__n128 *)&xmmword_1006BDACC, a2))
      {
        if (v56)
        {
          uint64_t v39 = *(void *)(v56 + 8);
          int v40 = *(_DWORD *)(v39 + 20);
          *(_OWORD *)__int128 buf = *(_OWORD *)(v39 + 4);
          int v73 = v40;
          sub_100634334((__n128 *)v75, (__n128 *)buf);
          int v79 = 0;
          __int128 v78 = xmmword_1006C3FC4;
          if (sub_1001BEC7C(v75, (unsigned __int8 *)&v78))
          {
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_1008A1838);
            }
            uint64_t v41 = sub_1005CC198((uint64_t)off_1008D5F28, v5, 0);
            if ((v41 & 0xFFFFFFFFFFFFLL) != 0)
            {
              uint64_t v42 = sub_100404EB8();
              v57[0] = _NSConcreteStackBlock;
              v57[1] = 3221225472LL;
              void v57[2] = sub_1005592A8;
              v57[3] = &unk_10089D398;
              uint64_t v59 = a1;
              uint64_t v60 = v41;
              id v58 = v5;
              __int128 v61 = a2;
              uint64_t v62 = v56;
              sub_100405384(v42, v57);
            }
          }
        }
      }

      *(void *)__int128 buf = a2;
      __n128 v43 = sub_10055D420( (uint64_t **)(a1 + 248),  a2,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)buf);
      int v44 = (uint64_t *)v43[6];
      __int128 v45 = v43 + 7;
      if (v44 != v43 + 7)
      {
        do
        {
          __n128 v84 = *(__n128 *)((char *)v44 + 28);
          int v85 = *((_DWORD *)v44 + 11);
          int v46 = (os_log_s *)qword_1008F75B0;
          if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
          {
            sub_1006344B4((uint64_t)&v84, buf);
            __int128 v47 = v74 >= 0 ? buf : *(uint8_t **)buf;
            *(_DWORD *)id v75 = 136315394;
            *(void *)&v75[4] = v47;
            __int16 v76 = 2112;
            int v77 = v5;
            _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "Detected service %s on device %@ and notified",  v75,  0x16u);
            if (v74 < 0) {
              operator delete(*(void **)buf);
            }
          }

          int v48 = (uint64_t *)v44[1];
          if (v48)
          {
            do
            {
              __int128 v49 = v48;
              int v48 = (uint64_t *)*v48;
            }

            while (v48);
          }

          else
          {
            do
            {
              __int128 v49 = (uint64_t *)v44[2];
              BOOL v50 = *v49 == (void)v44;
              int v44 = v49;
            }

            while (!v50);
          }

          int v44 = v49;
        }

        while (v49 != v45);
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
    {
      sub_100691AF0();
    }

    __int128 v51 = v68;
    if (v68)
    {
      p_shared_owners = (unint64_t *)&v68->__shared_owners_;
      do
        unint64_t v53 = __ldaxr(p_shared_owners);
      while (__stlxr(v53 - 1, p_shared_owners));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }

    sub_10023BF24((uint64_t)&v69, v70);
  }
}

void sub_100553750( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, char a34, uint64_t a35, char a36, void *a37, uint64_t a38, char a39)
{
  _Unwind_Resume(a1);
}

void sub_10055383C(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = sub_100241F94(a2);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "MIDI: Trying to detect built in MIDI service on device %@",  buf,  0xCu);
  }

  uint64_t v38 = 0LL;
  uint64_t v39 = 0LL;
  sub_100241F90(buf, v5);
  sub_100555864(a1, buf, 0, &v38);
  if (v38)
  {
    sub_100444430(v38, (uint64_t)"");
    uint64_t v7 = v38;
    __int128 v45 = xmmword_1006BDC38;
    int v46 = 13091918;
    sub_100634334((__n128 *)buf, (__n128 *)&v45);
    sub_10063432C(&v44);
    uint64_t v8 = sub_1004439C4(v7, buf, (unsigned __int8 *)&v44);
    if (sub_100558E4C(a1, (__n128 *)&xmmword_1006BDC38, a2))
    {
      int v9 = _os_feature_enabled_impl("BluetoothFeatures", "LEMIDIAutoConnect");
      if (v8) {
        int v10 = v9;
      }
      else {
        int v10 = 0;
      }
      if (v10 == 1
        && (uint64_t v11 = *(void *)(v8 + 8),
            int v12 = *(_DWORD *)(v11 + 20),
            *(_OWORD *)__int128 buf = *(_OWORD *)(v11 + 4),
            *(_DWORD *)&uint8_t buf[16] = v12,
            sub_100634334(&v44, (__n128 *)buf),
            int v43 = 0,
            __int128 v42 = xmmword_1006C3FC4,
            sub_1001BEC7C((unsigned __int8 *)&v44, (unsigned __int8 *)&v42)))
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_1008A1838);
        }
        if (qword_1008D5F10 != -1) {
          dispatch_once(&qword_1008D5F10, &stru_1008A1858);
        }
        uint64_t v13 = off_1008D5F08;
        sub_100241F90(buf, v5);
        if (sub_100599994((uint64_t)v13, buf))
        {
LABEL_16:
          uint64_t v14 = (os_log_s *)qword_1008F75B0;
          if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)&uint8_t buf[4] = v5;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "MIDI: The device %@ supports MIDI, but it's Apple device - No AutoConnect",  buf,  0xCu);
          }

          goto LABEL_24;
        }

        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_1008A1838);
        }
        id v20 = sub_1005D57F0((uint64_t)off_1008D5F28, v5);
        __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
        uint64_t v22 = v21;
        if (!v21)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
            sub_100691C04();
          }
          goto LABEL_38;
        }

        unsigned int v23 = [v21 localizedCaseInsensitiveContainsString:@"Apple"];
        uint64_t v24 = (os_log_s *)qword_1008F75B0;
        BOOL v25 = os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT);
        if (v23)
        {
          if (v25)
          {
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)&uint8_t buf[4] = v5;
            *(_WORD *)&_BYTE buf[12] = 2112;
            *(void *)&buf[14] = v22;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "MIDI: The device %@ supports MIDI, but it's %@ manufacturer - No AutoConnect",  buf,  0x16u);
          }

void sub_100553EF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  sub_100032BD4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_100553FAC(uint64_t a1, void *a2, int a3)
{
}

void sub_100553FB4(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138543618;
    id v12 = v5;
    __int16 v13 = 1024;
    int v14 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "GattGateway init on device %{public}@ with mtu %d",  buf,  0x12u);
  }

  int v10 = 0;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A1838);
  }
  BOOL v7 = sub_1005D1C60((uint64_t)off_1008D5F28, v5, &v10);
  int v8 = v10;
  sub_100241F90(buf, v5);
  char v9 = v8 != 2 || !v7;
  sub_10055410C(a1, buf, a3, v9);
}

void sub_1005540F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10055410C(uint64_t a1, const unsigned __int8 *a2, __int16 a3, char a4)
{
  int v8 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a2, (char *)out);
    sub_10002418C(__p, (char *)out);
    char v9 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)out = 136446210;
    *(void *)&out[4] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Beginning init sequence for device %{public}s",  out,  0xCu);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }

  int v10 = operator new(0x20uLL);
  _OWORD *v10 = 0u;
  v10[1] = 0u;
  *(void *)out = v10;
  uint64_t v11 = operator new(0x48uLL);
  id v12 = v11;
  if (a1) {
    uint64_t v13 = a1 + 8;
  }
  else {
    uint64_t v13 = 0LL;
  }
  sub_10053CE50((uint64_t)v11, v13);
  void *v12 = off_1008A0CB8;
  v12[6] = &off_1008A0CF0;
  *((_WORD *)v12 + 28) = a3;
  *((_BYTE *)v12 + 58) = a4;
  *((_DWORD *)v12 + 15) = 0;
  v12[8] = 0LL;
  uint64_t v14 = *((void *)v10 + 3);
  *((void *)v10 + 3) = v12;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  *(void *)out = 0LL;
  unsigned int v23 = v10;
  sub_100555F9C(a1, a2, (uint64_t *)&v23, 1);
  uint64_t v15 = v23;
  unsigned int v23 = 0LL;
  if (v15)
  {
    uint64_t v16 = v15[3];
    uint64_t v15[3] = 0LL;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
    }
    operator delete(v15);
  }

  if ((a4 & 1) == 0)
  {
    uint64_t v17 = operator new(0x20uLL);
    *uint64_t v17 = 0u;
    v17[1] = 0u;
    *(void *)out = v17;
    uint64_t v18 = operator new(0x68uLL);
    sub_10053CE50((uint64_t)v18, v13);
    *uint64_t v18 = off_1008A0AD8;
    v18[11] = 0LL;
    v18[12] = 0LL;
    v18[10] = 0LL;
    v18[7] = 0LL;
    v18[8] = 0LL;
    void v18[6] = &off_1008A0B10;
    *((_WORD *)v18 + 36) = 0;
    uint64_t v19 = *((void *)v17 + 3);
    *((void *)v17 + 3) = v18;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
    }
    *(void *)out = 0LL;
    uint64_t v22 = v17;
    sub_100558C4C(a1, a2, (uint64_t *)&v22);
    id v20 = v22;
    uint64_t v22 = 0LL;
    if (v20)
    {
      uint64_t v21 = v20[3];
      v20[3] = 0LL;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
      operator delete(v20);
    }
  }

void sub_10055438C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  id v3 = va_arg(va1, void *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_10055CD68((void **)va, 0LL);
  sub_10055CD68((void **)va1, 0LL);
  _Unwind_Resume(a1);
}

void sub_1005543F0(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v16 = v5;
  sub_100241F90(buf, v5);
  uint64_t v6 = sub_1001FDB10(a1 + 192, buf);
  uint64_t v7 = (os_log_s *)qword_1008F75B0;
  if (a1 + 200 != v6 && os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = "fCommandSchedulerMap.find(device) == fCommandSchedulerMap.end()";
    _os_log_fault_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
    uint64_t v7 = (os_log_s *)qword_1008F75B0;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138543618;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "GattGateway device %{public}@ is connected with Gatt handle 0x%x",  buf,  0x12u);
  }

  *(_WORD *)uint64_t v11 = 0;
  v15[0] = 0LL;
  v15[1] = 0LL;
  memset(v12, 0, sizeof(v12));
  memset(v13, 0, sizeof(v13));
  uint64_t v14 = v15;
  sub_10055C614((uint64_t)buf, &v16, (uint64_t)v11);
  sub_10055CA44((uint64_t **)(a1 + 192), buf, (uint64_t)buf);
  sub_10025506C((uint64_t)v20, v20[1]);
  sub_10055C704(v19);
  sub_10055C704(v18);
  sub_10025506C((uint64_t)&v14, v15[0]);
  sub_10055C704(v13);
  sub_10055C704(v12);
  sub_100241F90(buf, v16);
  uint64_t v8 = sub_10055478C(a1 + 192, buf);
  *(_WORD *)uint64_t v8 = a3;
  *(void *)__int128 buf = 0LL;
  *(void *)&uint8_t buf[8] = 0LL;
  sub_100241F90(buf, v16);
  sub_10055CC88((uint64_t **)(a1 + 248), buf);
  uint64_t v9 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 8LL))(v9) && *(_BYTE *)(a1 + 244))
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_1008A1838);
    }
    if (!sub_1005D49A4((uint64_t)off_1008D5F28, v16))
    {
      int v10 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "GattGateway initSqequence on deviceConnected",  v11,  2u);
      }

      *(_BYTE *)(v8 + 105) = 1;
      sub_100553FB4(a1, v16, 24);
    }
  }
}

void sub_1005546D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id a26, char a27)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100554714(uint64_t a1)
{
  return a1;
}

uint64_t sub_100554750(uint64_t a1)
{
  return a1;
}

uint64_t sub_10055478C(uint64_t a1, unsigned __int8 *uu1)
{
  uint64_t v4 = 0LL;
  uint64_t v2 = *sub_1001FD824(a1, &v4, uu1);
  if (!v2) {
    abort();
  }
  return v2 + 48;
}

void sub_1005547C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v5) = 138543362;
    *(void *)((char *)&v5 + 4) = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "GattGateway device %{public}@ is disconnected",  (uint8_t *)&v5,  0xCu);
  }

  sub_1005548E4(a1, v3);
  sub_100241F90(&v5, v3);
  sub_10055CCCC((uint64_t **)(a1 + 192), (unsigned __int8 *)&v5);
  sub_1005549F0(a1, v3);
  __int128 v5 = 0uLL;
  sub_100241F90(&v5, v3);
  sub_10055CC88((uint64_t **)(a1 + 248), (unsigned __int8 *)&v5);
}

void sub_1005548C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005548E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  sub_100241F90(uu2, v3);
  uint64_t v4 = (uint64_t **)(a1 + 168);
  if (a1 + 176 != sub_1001FDB10(a1 + 168, uu2))
  {
    sub_100241F90(uu2, v3);
    uint64_t v7 = uu2;
    __int128 v5 = sub_10055D0A0( v4,  uu2,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v7);
    uint64_t v6 = v5 + 7;
    sub_10023BF24((uint64_t)(v5 + 6), (void *)v5[7]);
    *(v6 - 1) = v6;
    *uint64_t v6 = 0LL;
    v6[1] = 0LL;
    sub_100241F90(uu2, v3);
    sub_10055CC88(v4, uu2);
  }
}

void sub_1005549D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005549F0(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_1008D9278 != -1) {
    dispatch_once(&qword_1008D9278, &stru_1008A17D8);
  }
  int v3 = sub_10041374C(qword_1008D9270, v2);
  uint64_t v55 = 0LL;
  uint64_t v56 = 0LL;
  sub_100241F90(&v64, v2);
  sub_100555864(a1, (unsigned __int8 *)&v64, 0, &v55);
  uint64_t v4 = v55;
  if (v55)
  {
    __int128 v68 = xmmword_1006BD978;
    int v69 = 0;
    sub_100634334(&v64, (__n128 *)&v68);
    __int128 v66 = xmmword_1006BD9C8;
    int v67 = 0;
    sub_100634334(&__p, (__n128 *)&v66);
    uint64_t v5 = sub_1004439C4(v4, (unsigned __int8 *)&v64, (unsigned __int8 *)&__p);
    __n128 v64 = 0uLL;
    unint64_t v65 = 0LL;
    __n128 __p = 0uLL;
    uint64_t v63 = 0LL;
    if (!sub_100440730(v55, 0LL, (void **)&__p))
    {
      uint64_t v6 = (void *)__p.n128_u64[0];
      if (__p.n128_u64[0] != __p.n128_u64[1])
      {
        uint64_t v52 = v5;
        do
        {
          uint64_t v7 = *v6;
          *(_OWORD *)__int128 buf = *(_OWORD *)(*v6 + 72LL);
          LODWORD(v59) = *(_DWORD *)(v7 + 88);
          sub_100634334((__n128 *)v60, (__n128 *)buf);
          uint64_t v8 = (_OWORD *)v64.n128_u64[1];
          if (v64.n128_u64[1] >= v65)
          {
            unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v64.n128_u64[1] - v64.n128_u64[0]) >> 2);
            unint64_t v12 = v11 + 1;
            if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL) {
              abort();
            }
            else {
              unint64_t v13 = v12;
            }
            if (v13) {
              uint64_t v14 = (char *)sub_100050420((uint64_t)&v65, v13);
            }
            else {
              uint64_t v14 = 0LL;
            }
            uint64_t v15 = &v14[20 * v11];
            __int128 v16 = *(_OWORD *)v60;
            *((_DWORD *)v15 + 4) = v61;
            *(_OWORD *)uint64_t v15 = v16;
            uint64_t v17 = (char *)v64.n128_u64[1];
            unint64_t v18 = v64.n128_u64[0];
            unint64_t v19 = (unint64_t)v15;
            if (v64.n128_u64[1] != v64.n128_u64[0])
            {
              do
              {
                __int128 v20 = *(_OWORD *)(v17 - 20);
                *(_DWORD *)(v19 - 4) = *((_DWORD *)v17 - 1);
                *(_OWORD *)(v19 - 20) = v20;
                v19 -= 20LL;
                v17 -= 20;
              }

              while (v17 != (char *)v18);
              uint64_t v17 = (char *)v64.n128_u64[0];
            }

            unint64_t v10 = (unint64_t)(v15 + 20);
            v64.n128_u64[0] = v19;
            v64.n128_u64[1] = (unint64_t)(v15 + 20);
            unint64_t v65 = (unint64_t)&v14[20 * v13];
            if (v17) {
              operator delete(v17);
            }
          }

          else
          {
            __int128 v9 = *(_OWORD *)v60;
            *(_DWORD *)(v64.n128_u64[1] + 16) = v61;
            *uint64_t v8 = v9;
            unint64_t v10 = (unint64_t)v8 + 20;
          }

          v64.n128_u64[1] = v10;
          if (*v6) {
            (*(void (**)(void))(*(void *)*v6 + 8LL))(*v6);
          }
          ++v6;
        }

        while (v6 != (void *)__p.n128_u64[1]);
        uint64_t v6 = (void *)__p.n128_u64[0];
        uint64_t v5 = v52;
      }

      __p.n128_u64[1] = (unint64_t)v6;
      memset(buf, 0, sizeof(buf));
      uint64_t v59 = 0LL;
      sub_10040CFC8((uint64_t)buf, v2, (uint64_t)&v64);
      if (qword_1008D9298 != -1) {
        dispatch_once(&qword_1008D9298, &stru_1008A1898);
      }
      sub_10040D074(qword_1008D9290, (uint64_t)buf);
    }

    if (v3)
    {
      uint64_t v21 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 138543362;
        *(void *)&uint8_t buf[4] = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "Keeping database for paired device %{public}@",  buf,  0xCu);
      }
    }

    else
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A1838);
      }
      uint64_t v23 = sub_1005CC198((uint64_t)off_1008D5F28, v2, 0);
      if (v5 || BYTE6(v23) && (BYTE6(v23) != 1 || (~v23 & 0xC00000000000LL) != 0))
      {
        sub_1005528F8(a1, v2);
      }

      else
      {
        int v27 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v2;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "Keeping database for public/static device %{public}@",  buf,  0xCu);
        }

        memset(buf, 0, sizeof(buf));
        uuid_clear(buf);
        unsigned __int16 v28 = 0;
        uint64_t v29 = (const unsigned __int8 *)(a1 + 224);
        int v30 = 0x7FFFFFFF;
        while (1)
        {
          BOOL v31 = *(const unsigned __int8 **)(a1 + 216);
          if (v31 != v29)
          {
            do
            {
              if (qword_1008D9278 != -1) {
                dispatch_once(&qword_1008D9278, &stru_1008A17D8);
              }
              uint64_t v32 = qword_1008D9270;
              uint64_t v33 = sub_100241F94(v31 + 32);
              uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
              LOBYTE(v32) = sub_10041374C(v32, v34);

              if ((v32 & 1) == 0)
              {
                if (qword_1008D9278 != -1) {
                  dispatch_once(&qword_1008D9278, &stru_1008A17D8);
                }
                uint64_t v35 = qword_1008D9270;
                int v36 = sub_100241F94(v31 + 32);
                char v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
                LOBYTE(v35) = sub_100413550(v35, v37);

                ++v28;
                if ((v35 & 1) == 0)
                {
                  int v54 = 0;
                  if (qword_1008D9278 != -1) {
                    dispatch_once(&qword_1008D9278, &stru_1008A17D8);
                  }
                  uint64_t v38 = qword_1008D9270;
                  sub_100241F90(v57, v2);
                  if (!sub_1004135EC(v38, v57, &v54))
                  {
                    if (v54 == 1)
                    {
                      if (qword_1008D5F30 != -1) {
                        dispatch_once(&qword_1008D5F30, &stru_1008A1838);
                      }
                      int v43 = off_1008D5F28;
                      __n128 v44 = sub_100241F94(v31 + 32);
                      __int128 v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
                      int v42 = sub_1005CC3F0((uint64_t)v43, v45);
                    }

                    else if (v54 == 2)
                    {
                      if (qword_1008D5F30 != -1) {
                        dispatch_once(&qword_1008D5F30, &stru_1008A1838);
                      }
                      uint64_t v39 = off_1008D5F28;
                      int v40 = sub_100241F94(v31 + 32);
                      char v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
                      int v42 = sub_1005CC368((uint64_t)v39, v41);
                    }

                    else
                    {
                      int v46 = (os_log_s *)qword_1008F75B0;
                      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)uint64_t v60 = 138543362;
                        *(void *)&v60[4] = v2;
                        _os_log_error_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_ERROR,  "Cannot update last connected time for device %{public}@ as no transport was found",  v60,  0xCu);
                      }

                      int v42 = 0;
                    }

                    if (uuid_is_null(buf) || v42 < v30)
                    {
                      uuid_copy(buf, v31 + 32);
                      int v30 = v42;
                    }
                  }
                }
              }

              __int128 v47 = (const unsigned __int8 *)*((void *)v31 + 1);
              if (v47)
              {
                do
                {
                  int v48 = v47;
                  __int128 v47 = *(const unsigned __int8 **)v47;
                }

                while (v47);
              }

              else
              {
                do
                {
                  int v48 = (const unsigned __int8 *)*((void *)v31 + 2);
                  BOOL v49 = *(void *)v48 == (void)v31;
                  BOOL v31 = v48;
                }

                while (!v49);
              }

              BOOL v31 = v48;
            }

            while (v48 != v29);
          }

          BOOL v50 = sub_100241F94(buf);
          __int128 v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
          sub_1005528F8(a1, v51);
        }
      }
    }

    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }

    if (v64.n128_u64[0])
    {
      v64.n128_u64[1] = v64.n128_u64[0];
      operator delete((void *)v64.n128_u64[0]);
    }
  }

  else
  {
    uint64_t v22 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_INFO))
    {
      v64.n128_u32[0] = 138543362;
      *(unint64_t *)((char *)v64.n128_u64 + 4) = (unint64_t)v2;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "Database not found for device %{public}@",  (uint8_t *)&v64,  0xCu);
    }
  }

  uint64_t v24 = v56;
  if (v56)
  {
    p_shared_owners = (unint64_t *)&v56->__shared_owners_;
    do
      unint64_t v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1005551C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *__p, uint64_t a27, uint64_t a28, void *a29, uint64_t a30)
{
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }

  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }

  sub_100032BD4((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_10055528C(uint64_t a1, void *a2, int a3, int a4)
{
  id v7 = a2;
  uint64_t v8 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 138543618;
    id v21 = v7;
    __int16 v22 = 1024;
    int v23 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "GattGateway device %{public}@ is ready with mtu %d",  (uint8_t *)&v20,  0x12u);
  }

  sub_100241F90(&v20, v7);
  if (a1 + 200 == sub_1001FDB10(a1 + 192, (unsigned __int8 *)&v20))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT)) {
      sub_100691D14();
    }
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_1008A1858);
    }
    unint64_t v12 = off_1008D5F08;
    sub_100241F90(&v20, v7);
    if (sub_100597F98((uint64_t)v12, (unsigned __int8 *)&v20, 3u)
      && os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
    {
      sub_100691CB4();
    }
  }

  else
  {
    sub_100241F90(&v20, v7);
    uint64_t v9 = sub_10055478C(a1 + 192, (unsigned __int8 *)&v20);
    if (*(_WORD *)v9)
    {
      if (a3)
      {
        int v10 = *(unsigned __int16 *)(a1 + 242);
        if (*(_WORD *)(a1 + 242))
        {
          unint64_t v11 = (os_log_s *)qword_1008F75B0;
          if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
          {
            int v20 = 67109120;
            LODWORD(v21) = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Warning: MTU override to %d",  (uint8_t *)&v20,  8u);
          }

          a4 = v10;
        }
      }

      else
      {
        a4 = 0;
      }

      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A1838);
      }
      if (sub_1005D49A4((uint64_t)off_1008D5F28, v7))
      {
        uint64_t v14 = qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
        {
          int v20 = 138543362;
          id v21 = v7;
          uint64_t v15 = "Device %{public}@ connected, LE GATT disabled, blocking all GATT client communications";
          __int128 v16 = (os_log_s *)v14;
          uint32_t v17 = 12;
LABEL_31:
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v20, v17);
        }
      }

      else
      {
        uint64_t v18 = sub_1002E6E00();
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v18 + 8LL))(v18) || !*(_BYTE *)(a1 + 244))
        {
          *(_BYTE *)(v9 + 105) = 1;
          sub_100553FB4(a1, v7, a4);
          goto LABEL_33;
        }

        uint64_t v19 = qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v20) = 0;
          uint64_t v15 = "GattGateway initSqequence on deviceConnected, skipping for linkReady ";
          __int128 v16 = (os_log_s *)v19;
          uint32_t v17 = 2;
          goto LABEL_31;
        }
      }
    }

    else
    {
      unint64_t v13 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v20) = 0;
        _os_log_fault_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "Gatt session handle is invalid",  (uint8_t *)&v20,  2u);
        unint64_t v13 = (os_log_s *)qword_1008F75B0;
      }

      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_100691D4C();
      }
    }
  }

void sub_1005555F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10055561C(uint64_t a1@<X0>, void *a2@<X1>, char **a3@<X8>)
{
  id v5 = a2;
  a3[1] = 0LL;
  a3[2] = 0LL;
  *a3 = 0LL;
  uint64_t v22 = 0LL;
  int v23 = 0LL;
  sub_100241F90(&v24, v5);
  sub_100555864(a1, (unsigned __int8 *)&v24, 0, &v22);
  if (v22)
  {
    uint64_t v24 = 0LL;
    char v25 = 0LL;
    uint64_t v26 = 0LL;
    sub_1004405DC(v22, (void **)&v24);
    uint64_t v6 = v25;
    if (v25 != v24)
    {
      sub_100555A1C((void **)a3, v25 - v24);
      uint64_t v6 = v24;
      if (v24 != v25)
      {
        id v7 = a3 + 2;
        uint64_t v8 = a3[1];
        do
        {
          uint64_t v9 = *v6;
          if ((unint64_t)v8 >= *v7)
          {
            uint64_t v10 = (v8 - *a3) >> 3;
            uint64_t v11 = *v7 - (void)*a3;
            uint64_t v12 = v11 >> 2;
            else {
              unint64_t v13 = v12;
            }
            if (v13) {
              uint64_t v14 = (char *)sub_100008BA0((uint64_t)(a3 + 2), v13);
            }
            else {
              uint64_t v14 = 0LL;
            }
            uint64_t v15 = &v14[8 * v10];
            *(void *)uint64_t v15 = v9;
            uint64_t v8 = v15 + 8;
            uint32_t v17 = *a3;
            __int128 v16 = a3[1];
            if (v16 != *a3)
            {
              do
              {
                uint64_t v18 = *((void *)v16 - 1);
                v16 -= 8;
                *((void *)v15 - 1) = v18;
                v15 -= 8;
              }

              while (v16 != v17);
              __int128 v16 = *a3;
            }

            *a3 = v15;
            a3[1] = v8;
            a3[2] = &v14[8 * v13];
            if (v16) {
              operator delete(v16);
            }
          }

          else
          {
            *(void *)uint64_t v8 = v9;
            v8 += 8;
          }

          a3[1] = v8;
          ++v6;
        }

        while (v6 != v25);
        uint64_t v6 = v24;
      }
    }

    if (v6)
    {
      char v25 = v6;
      operator delete(v6);
    }
  }

  uint64_t v19 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_100555814( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }

  sub_100032BD4((uint64_t)&a9);
  uint64_t v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v15;
    operator delete(v15);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100555864@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v8 = (uint64_t **)(a1 + 216);
  *a4 = 0LL;
  a4[1] = 0LL;
  uint64_t result = sub_1001FDB10(a1 + 216, a2);
  if (a1 + 224 == result)
  {
    if (!a3) {
      goto LABEL_10;
    }
    sub_10055E428(&v14);
    uint64_t v15 = a2;
    uint64_t v10 = sub_10055E2B8( v8,  a2,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v15);
    sub_1002102FC((uint64_t)(v10 + 48), &v14);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)&v14 + 1);
    if (*((void *)&v14 + 1))
    {
      uint64_t v12 = (unint64_t *)(*((void *)&v14 + 1) + 8LL);
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }

    *(void *)&__int128 v14 = a2;
    uint64_t result = (uint64_t)sub_10055E2B8( v8,  a2,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v14);
  }

  uint64_t result = (uint64_t)sub_100452954(a4, (uint64_t *)(result + 48));
LABEL_10:
  if (*a4)
  {
    *(void *)&__int128 v14 = 0LL;
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_1008A1858);
    }
    uint64_t result = sub_100599890((uint64_t)off_1008D5F08, a2, &v14);
    if ((_DWORD)result)
    {
      LOBYTE(v15) = 0;
      sub_100242CA4(&v15);
      *(_WORD *)(*a4 + 146LL) = sub_10012D7D4((unsigned __int16 *)v14);
      return (uint64_t)sub_100242CD8(&v15);
    }

    else
    {
      *(_WORD *)(*a4 + 146LL) = 0;
    }
  }

  return result;
}

void sub_1005559DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100555A1C(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61) {
      abort();
    }
    int64_t v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    uint64_t v6 = (char *)sub_100008BA0(v3, a2);
    id v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8LL];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }

      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

void sub_100555AAC(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, char **a4@<X8>)
{
  id v7 = a3;
  a4[1] = 0LL;
  a4[2] = 0LL;
  *a4 = 0LL;
  sub_100241F90(v31, v7);
  uint64_t v8 = sub_100555CC0(a1, v31);
  if (v8)
  {
    uint64_t v9 = *(void **)(v8 + 112);
    uint64_t v10 = (void *)(v8 + 120);
    if (v9 != (void *)(v8 + 120))
    {
      do
      {
        uint64_t v11 = (void *)v9[6];
        if (v11)
        {
          uint64_t v12 = v9 + 6;
          do
          {
            unint64_t v13 = v11[4];
            BOOL v14 = v13 >= a2;
            if (v13 >= a2) {
              uint64_t v15 = v11;
            }
            else {
              uint64_t v15 = v11 + 1;
            }
            if (v14) {
              uint64_t v12 = v11;
            }
            uint64_t v11 = (void *)*v15;
          }

          while (*v15);
          if (v12 != v9 + 6 && v12[4] <= a2)
          {
            uint32_t v17 = a4[1];
            unint64_t v16 = (unint64_t)a4[2];
            if ((unint64_t)v17 >= v16)
            {
              uint64_t v19 = *a4;
              uint64_t v20 = v17 - *a4;
              if (v20 <= -3) {
                abort();
              }
              uint64_t v21 = v20 >> 1;
              unint64_t v22 = v16 - (void)v19;
              if (v22 <= (v20 >> 1) + 1) {
                unint64_t v23 = v21 + 1;
              }
              else {
                unint64_t v23 = v22;
              }
              if (v22 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v24 = v23;
              }
              if (v24)
              {
                char v25 = (char *)sub_10024EF1C((uint64_t)(a4 + 2), v24);
                uint64_t v19 = *a4;
                uint32_t v17 = a4[1];
              }

              else
              {
                char v25 = 0LL;
              }

              uint64_t v26 = &v25[2 * v21];
              *(_WORD *)uint64_t v26 = *((_WORD *)v9 + 16);
              uint64_t v18 = v26 + 2;
              while (v17 != v19)
              {
                __int16 v27 = *((_WORD *)v17 - 1);
                v17 -= 2;
                *((_WORD *)v26 - 1) = v27;
                v26 -= 2;
              }

              *a4 = v26;
              a4[1] = v18;
              a4[2] = &v25[2 * v24];
              if (v19) {
                operator delete(v19);
              }
            }

            else
            {
              *(_WORD *)uint32_t v17 = *((_WORD *)v9 + 16);
              uint64_t v18 = v17 + 2;
            }

            a4[1] = v18;
          }
        }

        unsigned __int16 v28 = (void *)v9[1];
        if (v28)
        {
          do
          {
            uint64_t v29 = v28;
            unsigned __int16 v28 = (void *)*v28;
          }

          while (v28);
        }

        else
        {
          do
          {
            uint64_t v29 = (void *)v9[2];
            BOOL v30 = *v29 == (void)v9;
            uint64_t v9 = v29;
          }

          while (!v30);
        }

        uint64_t v9 = v29;
      }

      while (v29 != v10);
    }
  }
}

void sub_100555C90(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100555CC0(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v3 = sub_100241F94(a2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_100241F90(uu2, v4);
  uint64_t v5 = sub_1001FDB10(a1 + 192, uu2);

  if (a1 + 200 == v5) {
    return 0LL;
  }
  else {
    return v5 + 48;
  }
}

void sub_100555D58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100555D70(uint64_t a1, unint64_t a2)
{
  unint64_t v22 = a2;
  uint64_t v2 = *(void **)(a1 + 192);
  uint64_t v18 = (void *)(a1 + 200);
  if (v2 != (void *)(a1 + 200))
  {
    uint64_t v3 = a1 + 8;
    do
    {
      uint64_t v4 = v2[20];
      if ((void *)v4 != v2 + 21)
      {
        do
        {
          sub_10020166C(v4 + 40, &v22);
          if (*(void *)(v4 + 56))
          {
            uint64_t v5 = *(uint64_t **)(v4 + 8);
            if (v5)
            {
              do
              {
                uint64_t v6 = v5;
                uint64_t v5 = (uint64_t *)*v5;
              }

              while (v5);
            }

            else
            {
              do
              {
                uint64_t v6 = *(uint64_t **)(v4 + 16);
                BOOL v7 = *v6 == v4;
                uint64_t v4 = (uint64_t)v6;
              }

              while (!v7);
            }
          }

          else
          {
            uint64_t v8 = operator new(0x20uLL);
            *(_OWORD *)uint64_t v8 = 0u;
            *((_OWORD *)v8 + 1) = 0u;
            uint64_t v21 = v8;
            uint64_t v9 = operator new(0x50uLL);
            __int16 v10 = *(_WORD *)(v4 + 32);
            sub_10053CE50((uint64_t)v9, v3);
            void *v9 = off_1008A0B78;
            v9[6] = &off_1008A0BB0;
            *((_WORD *)v9 + 28) = v10;
            *((_BYTE *)v9 + 58) = 0;
            v9[8] = 0LL;
            v9[9] = 0LL;
            uint64_t v11 = v8[3];
            v8[3] = v9;
            if (v11) {
              (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
            }
            __n128 __p = v8;
            uint64_t v21 = 0LL;
            sub_100555F9C(a1, (const unsigned __int8 *)v2 + 32, (uint64_t *)&__p, 0);
            uint64_t v12 = __p;
            __n128 __p = 0LL;
            if (v12)
            {
              uint64_t v13 = v12[3];
              _OWORD v12[3] = 0LL;
              if (v13) {
                (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
              }
              operator delete(v12);
            }

            uint64_t v6 = sub_10032982C((uint64_t **)v2 + 20, v4);
            BOOL v14 = v21;
            if (v21)
            {
              uint64_t v15 = *((void *)v21 + 3);
              *((void *)v21 + 3) = 0LL;
              if (v15) {
                (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
              }
              operator delete(v14);
            }
          }

          uint64_t v4 = (uint64_t)v6;
        }

        while (v6 != v2 + 21);
      }

      unint64_t v16 = (void *)v2[1];
      if (v16)
      {
        do
        {
          uint32_t v17 = v16;
          unint64_t v16 = (void *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          uint32_t v17 = (void *)v2[2];
          BOOL v7 = *v17 == (void)v2;
          uint64_t v2 = v17;
        }

        while (!v7);
      }

      uint64_t v2 = v17;
    }

    while (v17 != v18);
  }

void sub_100555F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100555F9C(uint64_t a1, const unsigned __int8 *a2, uint64_t *a3, int a4)
{
  if (!*(void *)(*a3 + 24))
  {
    uint64_t v8 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT)) {
      sub_100691E1C(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }

  uint64_t v16 = sub_100555CC0(a1, a2);
  if (!v16) {
    return 312LL;
  }
  uint64_t v17 = v16;
  if (a4)
  {
    if (*(_BYTE *)(v16 + 104))
    {
      if (!*(void *)(v16 + 48))
      {
        uint64_t v18 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT)) {
          sub_100691DAC(v18, v19, v20, v21, v22, v23, v24, v25);
        }
      }

      uint64_t v26 = *(void *)(v17 + 16);
      __int16 v27 = (uint64_t *)(v26 + 8LL * (*(void *)(v17 + 40) >> 9));
      uint64_t v28 = *v27;
      uint64_t v29 = *v27 + 8 * (*(void *)(v17 + 40) & 0x1FFLL);
      if (*(void *)(v17 + 24) == v26) {
        uint64_t v29 = 0LL;
      }
      uint64_t v30 = v29 - v28;
      uint64_t v31 = (v29 - v28) >> 3;
      if (v30 < -7)
      {
        unint64_t v37 = 510 - v31;
        uint64_t v33 = (char *)&v27[-(v37 >> 9)];
        uint64_t v34 = *(void *)v33;
        uint64_t v35 = ~(_DWORD)v37 & 0x1FFLL;
      }

      else
      {
        unint64_t v32 = v31 + 1;
        uint64_t v33 = (char *)&v27[v32 >> 9];
        uint64_t v34 = *(void *)v33;
        uint64_t v35 = v32 & 0x1FF;
      }

      sub_100559AF4((void **)(v17 + 8), v33, v34 + 8 * v35, a3);
    }

    else
    {
      sub_100559EC4(v16 + 8, a3);
    }
  }

  else
  {
    sub_100559F44((void *)(v16 + 8), a3);
  }

  if (*(_BYTE *)(v17 + 105))
  {
    uint64_t v38 = sub_100241F94(a2);
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
    sub_100559FCC(a1, v39, v17);
  }

  return 0LL;
}

void sub_10055612C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10055613C(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned int a4)
{
  id v7 = a2;
  uint64_t v19 = 0LL;
  uint64_t v20 = 0LL;
  sub_100241F90(&v21, v7);
  sub_100555864(a1, (unsigned __int8 *)&v21, 0, &v19);
  if (!v19)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100691AF0();
    }
    goto LABEL_8;
  }

  uint64_t v8 = sub_1004438FC(v19, a4);
  uint64_t v9 = v8;
  if (!v8) {
    goto LABEL_8;
  }
  uint64_t v10 = v8[1];
  int v11 = *(_DWORD *)(v10 + 20);
  __n128 v21 = *(__n128 *)(v10 + 4);
  LODWORD(v22) = v11;
  sub_100634334(&v25, &v21);
  int v24 = 0;
  __int128 v23 = xmmword_1006C3FB0;
  if (!sub_1001BEC7C(v12, (unsigned __int8 *)&v23)
    || (__n128 v25 = 0uLL,
        int v26 = 0,
        __n128 v21 = *(__n128 *)((char *)v9 + 76),
        LODWORD(v22) = *((_DWORD *)v9 + 23),
        sub_100634334(&v25, &v21),
        uint64_t v13 = sub_100051D00(a1 + 144, a3),
        a1 + 152 == v13))
  {
LABEL_8:
    BOOL v14 = 0LL;
    goto LABEL_9;
  }

  __n128 v21 = 0uLL;
  uint64_t v22 = 0LL;
  sub_10055CDB4((uint64_t)&v21, v13 + 56);
  BOOL v14 = &v21.n128_i8[8] != (__int8 *)sub_10038DAA8((uint64_t)&v21, (unsigned __int8 *)&v25);
  sub_10023BF24((uint64_t)&v21, (void *)v21.n128_u64[1]);
LABEL_9:
  uint64_t v15 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  return v14;
}

void sub_100556308( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100556354(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  id v5 = a2;
  sub_100241F90(uu1, v5);
  id v7 = uu1;
  uint64_t v6 = sub_10055D0A0( (uint64_t **)(a1 + 168),  uu1,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v7);
  sub_10038CF98((uint64_t **)v6 + 6, a3, (uint64_t)a3);
}

void sub_1005563FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100556414(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  id v5 = a3;
  sub_100241F90(uu2, v5);
  uint64_t v6 = (uint64_t **)(a1 + 168);
  if (a1 + 176 == sub_1001FDB10(a1 + 168, uu2)
    || (sub_100241F90(uu1, v5),
        int v11 = uu1,
        !sub_10055D0A0( v6,  uu1,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v11)[8]))
  {
    BOOL v9 = 0LL;
  }

  else
  {
    sub_100241F90(uu2, v5);
    *(void *)uu1 = uu2;
    id v7 = sub_10055D0A0( v6,  uu2,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)uu1);
    uint64_t v8 = (uint64_t *)sub_10038DAA8((uint64_t)(v7 + 6), a2);
    sub_100241F90(uu1, v5);
    int v11 = uu1;
    BOOL v9 = sub_10055D0A0( v6,  uu1,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v11)
       + 7 != v8;
  }

  return v9;
}

void sub_100556564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100556588(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, void *a5)
{
  id v8 = a5;
  uint64_t v9 = sub_10038DAA8(a1 + 72, a2);
  uint64_t v10 = sub_10038DAA8(a1 + 96, a2);
  if (v8) {
    BOOL v11 = sub_100556414(a1, a2, v8);
  }
  else {
    BOOL v11 = 0;
  }
  if (a1 + 80 == v9) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = a3;
  }
  BOOL v13 = a1 + 104 != v10 || a1 + 80 != v9;
  uint64_t v14 = (!v13 && !v11) | v12 | v11 & a3;

  return v14;
}

void sub_100556638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100556650(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, __n128 *a4@<X8>)
{
  id v7 = a2;
  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  sub_100241F90(v16, v7);
  sub_100555864(a1, v16, 0, &v14);
  if (v14)
  {
    sub_100443E20(v14, a3, a4);
    id v8 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        unint64_t v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }

  else
  {
    BOOL v11 = v15;
    if (v15)
    {
      unsigned int v12 = (unint64_t *)&v15->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }

    sub_10063432C(a4);
  }
}

void sub_100556770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10055679C(uint64_t a1, void *a2, __int128 **a3, unsigned int a4, uint64_t a5, int a6)
{
  id v9 = a2;
  uint64_t v55 = 0LL;
  uint64_t v56 = 0LL;
  unint64_t v57 = 0LL;
  BOOL v11 = *a3;
  unint64_t v10 = a3[1];
  if (*a3 != v10)
  {
    do
    {
      if (qword_1008D5F60 != -1) {
        dispatch_once(&qword_1008D5F60, &stru_1008A1878);
      }
      if (sub_100556588(qword_1008D5F58, (unsigned __int8 *)v11, a4, v8, v9))
      {
        unsigned int v12 = v56;
        if ((unint64_t)v56 >= v57)
        {
          unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((v56 - (_BYTE *)v55) >> 2);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            abort();
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            uint64_t v18 = (char *)sub_100050420((uint64_t)&v57, v17);
          }
          else {
            uint64_t v18 = 0LL;
          }
          uint64_t v19 = &v18[4 * ((v56 - (_BYTE *)v55) >> 2)];
          __int128 v20 = *v11;
          *((_DWORD *)v19 + 4) = *((_DWORD *)v11 + 4);
          *(_OWORD *)uint64_t v19 = v20;
          uint64_t v22 = (char *)v55;
          __n128 v21 = v56;
          __int128 v23 = &v18[20 * v15];
          if (v56 != v55)
          {
            do
            {
              __int128 v24 = *(_OWORD *)(v21 - 20);
              *((_DWORD *)v23 - 1) = *((_DWORD *)v21 - 1);
              *(_OWORD *)(v23 - 20) = v24;
              v23 -= 20;
              v21 -= 20;
            }

            while (v21 != v22);
            __n128 v21 = (char *)v55;
          }

          uint64_t v14 = (__int128 *)(v19 + 20);
          uint64_t v55 = v23;
          uint64_t v56 = v19 + 20;
          unint64_t v57 = (unint64_t)&v18[20 * v17];
          if (v21) {
            operator delete(v21);
          }
        }

        else
        {
          __int128 v13 = *v11;
          *((_DWORD *)v56 + 4) = *((_DWORD *)v11 + 4);
          *(_OWORD *)unsigned int v12 = v13;
          uint64_t v14 = (__int128 *)(v12 + 20);
        }

        uint64_t v56 = (char *)v14;
      }

      BOOL v11 = (__int128 *)((char *)v11 + 20);
    }

    while (v11 != v10);
  }

  uint64_t v52 = 0LL;
  unint64_t v53 = 0LL;
  int v54 = 0LL;
  __n128 v25 = (unsigned __int8 *)v55;
  int v26 = v56;
  if (sub_100556CBC(v9, a6))
  {
    sub_100050224(&v52, (__int128 *)v55, (__int128 *)v56, 0xCCCCCCCCCCCCCCCDLL * ((v56 - (_BYTE *)v55) >> 2));
  }

  else if (v55 != v56)
  {
    do
    {
      if (a1 + 128 == sub_10038DAA8(a1 + 120, v25))
      {
        uint64_t v29 = v53;
        if (v53 >= (_DWORD *)v54)
        {
          unint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v53 - (_BYTE *)v52) >> 2);
          unint64_t v33 = v32 + 1;
          if (v32 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            abort();
          }
          if (0x999999999999999ALL * ((v54 - (_BYTE *)v52) >> 2) > v33) {
            unint64_t v33 = 0x999999999999999ALL * ((v54 - (_BYTE *)v52) >> 2);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v54 - (_BYTE *)v52) >> 2) >= 0x666666666666666LL) {
            unint64_t v34 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v34 = v33;
          }
          if (v34) {
            uint64_t v35 = (char *)sub_100050420((uint64_t)&v54, v34);
          }
          else {
            uint64_t v35 = 0LL;
          }
          int v36 = &v35[20 * v32];
          __int128 v37 = *(_OWORD *)v25;
          *((_DWORD *)v36 + 4) = *((_DWORD *)v25 + 4);
          *(_OWORD *)int v36 = v37;
          uint64_t v39 = (char *)v52;
          uint64_t v38 = (char *)v53;
          int v40 = v36;
          if (v53 != v52)
          {
            do
            {
              __int128 v41 = *(_OWORD *)(v38 - 20);
              *((_DWORD *)v40 - 1) = *((_DWORD *)v38 - 1);
              *(_OWORD *)(v40 - 20) = v41;
              v40 -= 20;
              v38 -= 20;
            }

            while (v38 != v39);
            uint64_t v38 = (char *)v52;
          }

          uint64_t v31 = v36 + 20;
          uint64_t v52 = v40;
          unint64_t v53 = v36 + 20;
          int v54 = &v35[20 * v34];
          if (v38) {
            operator delete(v38);
          }
        }

        else
        {
          __int128 v30 = *(_OWORD *)v25;
          v53[4] = *((_DWORD *)v25 + 4);
          *uint64_t v29 = v30;
          uint64_t v31 = (_DWORD *)v29 + 5;
        }

        unint64_t v53 = v31;
      }

      else
      {
        __int16 v27 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_INFO))
        {
          sub_1006344B4((uint64_t)v25, &__p);
          p_p = &__p;
          if (v51 < 0) {
            p_p = __p;
          }
          *(_DWORD *)__int128 buf = 136446466;
          uint64_t v59 = p_p;
          __int16 v60 = 2114;
          id v61 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "deviceHasAnyService skipping %{public}s because %{public}@ link is not encrypted",  buf,  0x16u);
          if (v51 < 0) {
            operator delete(__p);
          }
        }
      }

      v25 += 20;
    }

    while (v25 != (unsigned __int8 *)v26);
  }

  __n128 __p = 0LL;
  BOOL v50 = 0LL;
  sub_100241F90(buf, v9);
  sub_100555864(a1, buf, 0, &__p);
  if (__p) {
    uint64_t v42 = sub_1004404CC((uint64_t)__p, (unsigned __int8 **)&v52);
  }
  else {
    uint64_t v42 = 0LL;
  }
  int v43 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }

  if (v52)
  {
    unint64_t v53 = v52;
    operator delete(v52);
  }

  if (v55)
  {
    uint64_t v56 = (char *)v55;
    operator delete(v55);
  }

  return v42;
}

void sub_100556C58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20, uint64_t a21)
{
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }

  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100556CBC(void *a1, int a2)
{
  id v3 = a1;
  if (a2)
  {
    int v9 = 0xFFFF;
    if (qword_1008D9278 != -1) {
      dispatch_once(&qword_1008D9278, &stru_1008A17D8);
    }
    uint64_t v4 = qword_1008D9270;
    sub_100241F90(v11, v3);
    sub_1004135EC(v4, v11, &v9);
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_1008A1858);
    }
    id v5 = off_1008D5F08;
    sub_100241F90(v10, v3);
    unsigned int v6 = sub_10059A0AC((uint64_t)v5, v10);
    if (v9 == 1) {
      uint64_t v7 = 1LL;
    }
    else {
      uint64_t v7 = v6;
    }
  }

  else
  {
    uint64_t v7 = 1LL;
  }

  return v7;
}

void sub_100556DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSMutableArray *sub_100556DEC(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v5 = *(const unsigned __int8 **)(a1 + 216);
  if (v5 != (const unsigned __int8 *)(a1 + 224))
  {
    do
    {
      unsigned int v6 = sub_100241F94(v5 + 32);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      uint64_t v15 = 0LL;
      unint64_t v16 = 0LL;
      sub_100241F90(v17, v7);
      sub_100555864(a1, v17, 0, &v15);
      uint64_t v8 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          unint64_t v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }

      BOOL v11 = (unsigned __int8 *)*((void *)v5 + 1);
      if (v11)
      {
        do
        {
          unsigned int v12 = (const unsigned __int8 **)v11;
          BOOL v11 = *(unsigned __int8 **)v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          unsigned int v12 = (const unsigned __int8 **)*((void *)v5 + 2);
          BOOL v13 = *v12 == v5;
          id v5 = (const unsigned __int8 *)v12;
        }

        while (!v13);
      }

      id v5 = (const unsigned __int8 *)v12;
    }

    while (v12 != (const unsigned __int8 **)(a1 + 224));
  }

  return v4;
}

void sub_100556F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _Unwind_Resume(a1);
}

NSMutableArray *sub_100556F78(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v3 = *(const unsigned __int8 **)(a1 + 216);
  uint64_t v4 = (const unsigned __int8 **)(a1 + 224);
  if (v3 != (const unsigned __int8 *)(a1 + 224))
  {
    do
    {
      id v5 = sub_100241F94(v3 + 32);
      unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      -[NSMutableArray addObject:](v2, "addObject:", v6);

      uint64_t v7 = (unsigned __int8 *)*((void *)v3 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = (const unsigned __int8 **)v7;
          uint64_t v7 = *(unsigned __int8 **)v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (const unsigned __int8 **)*((void *)v3 + 2);
          BOOL v9 = *v8 == v3;
          id v3 = (const unsigned __int8 *)v8;
        }

        while (!v9);
      }

      id v3 = (const unsigned __int8 *)v8;
    }

    while (v8 != v4);
  }

  return v2;
}

void sub_100557018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100557034(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, uint64_t a5)
{
  unint64_t v10 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a4, (char *)out);
    sub_10002418C(__p, (char *)out);
    BOOL v11 = v25 >= 0 ? __p : (void **)__p[0];
    LODWORD(out[0]) = 136446210;
    *(void **)((char *)out + 4) = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Finding all primary services on device %{public}s",  (uint8_t *)out,  0xCu);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }

  memset(out, 0, sizeof(out));
  sub_100494958(a3, (uint64_t)__p);
  unsigned int v12 = sub_100241F94(a4);
  BOOL v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  sub_10040CF94((uint64_t)out, (__int128 *)__p, 1, v13, 0LL);

  if (v25 < 0) {
    operator delete(__p[0]);
  }
  if (qword_1008D9298 != -1) {
    dispatch_once(&qword_1008D9298, &stru_1008A1898);
  }
  sub_10040D074(qword_1008D9290, (uint64_t)out);
  uint64_t v14 = operator new(0x20uLL);
  *uint64_t v14 = a2;
  v14[1] = a3;
  void v14[2] = a5;
  void v14[3] = 0LL;
  __p[0] = v14;
  uint64_t v15 = operator new(0x30uLL);
  unint64_t v16 = v15;
  if (a1) {
    uint64_t v17 = a1 + 8;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_10053CE50((uint64_t)v15, v17);
  void *v16 = off_1008A07E8;
  uint64_t v18 = v14[3];
  void v14[3] = v16;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  __int128 v23 = v14;
  __p[0] = 0LL;
  uint64_t v19 = sub_100555F9C(a1, a4, (uint64_t *)&v23, 0);
  __int128 v20 = v23;
  __int128 v23 = 0LL;
  if (v20)
  {
    uint64_t v21 = v20[3];
    v20[3] = 0LL;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
    }
    operator delete(v20);
  }

  if (SHIBYTE(out[3]) < 0) {
    operator delete(out[1]);
  }
  return v19;
}

void sub_100557294( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t sub_100557310( uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, __int128 **a5, uint64_t a6)
{
  uint64_t v39 = 0LL;
  __int128 v37 = 0u;
  memset(v38, 0, sizeof(v38));
  *(_OWORD *)uint64_t v35 = 0u;
  __int128 v36 = 0u;
  memset(v34, 0, sizeof(v34));
  __int128 v33 = 0u;
  sub_1001FCFC8((uint64_t)&v33);
  for (uint64_t i = *a5; i != a5[1]; uint64_t i = (__int128 *)((char *)i + 20))
  {
    sub_1006344B4((uint64_t)i, out);
    if (SHIBYTE(out[2]) >= 0) {
      BOOL v13 = out;
    }
    else {
      BOOL v13 = (void **)out[0];
    }
    if (SHIBYTE(out[2]) >= 0) {
      uint64_t v14 = HIBYTE(out[2]);
    }
    else {
      uint64_t v14 = (uint64_t)out[1];
    }
    uint64_t v15 = sub_1001FD17C(v34, (uint64_t)v13, v14);
    sub_1001FD17C(v15, (uint64_t)", ", 2LL);
    if (SHIBYTE(out[2]) < 0) {
      operator delete(out[0]);
    }
  }

  unint64_t v16 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = &v40;
    std::stringbuf::str(&v40, (const std::stringbuf *)((char *)v34 + 8));
    if ((v40.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v17 = (std::stringbuf::string_type *)v40.__r_.__value_.__r.__words[0];
    }
    memset(out, 0, 37);
    uuid_unparse_upper(a4, (char *)out);
    sub_10002418C(__p, (char *)out);
    if (v32 >= 0) {
      uint64_t v18 = __p;
    }
    else {
      uint64_t v18 = (void **)__p[0];
    }
    *(_DWORD *)__int128 buf = 136446466;
    int v43 = v17;
    __int16 v44 = 2082;
    unint64_t v45 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Finding all primary services with UUID(s) %{public}s on device %{public}s",  buf,  0x16u);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
  }

  memset(out, 0, 56);
  sub_100494958(a3, (uint64_t)&v40);
  uint64_t v19 = sub_100241F94(a4);
  __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  sub_10040CF94((uint64_t)out, (__int128 *)&v40, 1, v20, (uint64_t)a5);

  if (qword_1008D9298 != -1) {
    dispatch_once(&qword_1008D9298, &stru_1008A1898);
  }
  sub_10040D074(qword_1008D9290, (uint64_t)out);
  uint64_t v21 = operator new(0x20uLL);
  *uint64_t v21 = a2;
  v21[1] = a3;
  v21[2] = a6;
  void v21[3] = 0LL;
  __p[0] = v21;
  uint64_t v22 = operator new(0x68uLL);
  memset(&v40, 0, sizeof(v40));
  sub_100050EE8((char *)&v40, *a5, a5[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a5[1] - (char *)*a5) >> 2));
  if (a1) {
    uint64_t v23 = a1 + 8;
  }
  else {
    uint64_t v23 = 0LL;
  }
  sub_1005438E0(v22, v23, &v40);
  if (v40.__r_.__value_.__r.__words[0])
  {
    v40.__r_.__value_.__l.__size_ = v40.__r_.__value_.__r.__words[0];
    operator delete(v40.__r_.__value_.__l.__data_);
  }

  uint64_t v24 = v21[3];
  void v21[3] = v22;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
  }
  __int128 v30 = v21;
  __p[0] = 0LL;
  uint64_t v25 = sub_100555F9C(a1, a4, (uint64_t *)&v30, 0);
  int v26 = v30;
  __int128 v30 = 0LL;
  if (v26)
  {
    uint64_t v27 = v26[3];
    uint64_t v26[3] = 0LL;
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
    }
    operator delete(v26);
  }

  if (SHIBYTE(out[3]) < 0) {
    operator delete(out[1]);
  }
  *(void *)((char *)&v34[-1]
  *(void *)&v34[0] = v28;
  if (SHIBYTE(v36) < 0) {
    operator delete(v35[1]);
  }
  std::streambuf::~streambuf((char *)v34 + 8);
  std::ios::~ios(v38);
  return v25;
}

void sub_1005576FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1005577C0( uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5, int a6, uint64_t a7)
{
  uint64_t v14 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_10002418C(__p, out);
    uint64_t v15 = v27 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uuid_string_t out = 67109634;
    *(_DWORD *)&out[4] = a5;
    *(_WORD *)&out[8] = 1024;
    *(_DWORD *)&out[10] = a6;
    *(_WORD *)&out[14] = 2082;
    *(void *)&out[16] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Finding included services in range [0x%04x, 0x%04x] on device %{public}s",  (uint8_t *)out,  0x18u);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
  }

  unint64_t v16 = operator new(0x20uLL);
  void *v16 = a2;
  v16[1] = a3;
  void v16[2] = a7;
  v16[3] = 0LL;
  *(void *)uuid_string_t out = v16;
  uint64_t v17 = operator new(0x30uLL);
  uint64_t v18 = v17;
  if (a1) {
    uint64_t v19 = a1 + 8;
  }
  else {
    uint64_t v19 = 0LL;
  }
  sub_10053CE50((uint64_t)v17, v19);
  *(void *)uint64_t v18 = off_1008A0848;
  v18[21] = a5;
  v18[22] = a6;
  uint64_t v20 = v16[3];
  v16[3] = v18;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  *(void *)uuid_string_t out = 0LL;
  uint64_t v25 = v16;
  uint64_t v21 = sub_100555F9C(a1, a4, (uint64_t *)&v25, 0);
  uint64_t v22 = v25;
  uint64_t v25 = 0LL;
  if (v22)
  {
    uint64_t v23 = v22[3];
    v22[3] = 0LL;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
    }
    operator delete(v22);
  }

  return v21;
}

void sub_1005579AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

uint64_t sub_1005579F0( uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5, int a6, uint64_t a7)
{
  uint64_t v14 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_10002418C(__p, out);
    uint64_t v15 = v27 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uuid_string_t out = 67109634;
    *(_DWORD *)&out[4] = a5;
    *(_WORD *)&out[8] = 1024;
    *(_DWORD *)&out[10] = a6;
    *(_WORD *)&out[14] = 2082;
    *(void *)&out[16] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Finding all characteristics in range [0x%04x, 0x%04x] on device %{public}s",  (uint8_t *)out,  0x18u);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
  }

  unint64_t v16 = operator new(0x20uLL);
  void *v16 = a2;
  v16[1] = a3;
  void v16[2] = a7;
  v16[3] = 0LL;
  *(void *)uuid_string_t out = v16;
  uint64_t v17 = operator new(0x30uLL);
  uint64_t v18 = v17;
  if (a1) {
    uint64_t v19 = a1 + 8;
  }
  else {
    uint64_t v19 = 0LL;
  }
  sub_10053CE50((uint64_t)v17, v19);
  *(void *)uint64_t v18 = off_1008A0878;
  v18[21] = a5;
  v18[22] = a6;
  uint64_t v20 = v16[3];
  v16[3] = v18;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  *(void *)uuid_string_t out = 0LL;
  uint64_t v25 = v16;
  uint64_t v21 = sub_100555F9C(a1, a4, (uint64_t *)&v25, 0);
  uint64_t v22 = v25;
  uint64_t v25 = 0LL;
  if (v22)
  {
    uint64_t v23 = v22[3];
    v22[3] = 0LL;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
    }
    operator delete(v22);
  }

  return v21;
}

void sub_100557BDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

uint64_t sub_100557C20(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5, uint64_t a6)
{
  unsigned int v12 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_10002418C(__p, out);
    BOOL v13 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uuid_string_t out = 67109378;
    *(_DWORD *)&out[4] = a5;
    *(_WORD *)&out[8] = 2082;
    *(void *)&out[10] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Finding all descriptors for characteristic handle 0x%04x on device %{public}s",  (uint8_t *)out,  0x12u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v14 = operator new(0x20uLL);
  *uint64_t v14 = a2;
  v14[1] = a3;
  void v14[2] = a6;
  void v14[3] = 0LL;
  *(void *)uuid_string_t out = v14;
  uint64_t v15 = operator new(0x50uLL);
  unint64_t v16 = v15;
  if (a1) {
    uint64_t v17 = a1 + 8;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_10053CE50((uint64_t)v15, v17);
  void *v16 = off_1008A0B28;
  v16[6] = &off_1008A0B60;
  *((_WORD *)v16 + 28) = a5;
  v16[8] = 0LL;
  v16[9] = 0LL;
  uint64_t v18 = v14[3];
  void v14[3] = v16;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  *(void *)uuid_string_t out = 0LL;
  uint64_t v23 = v14;
  uint64_t v19 = sub_100555F9C(a1, a4, (uint64_t *)&v23, 0);
  uint64_t v20 = v23;
  uint64_t v23 = 0LL;
  if (v20)
  {
    uint64_t v21 = v20[3];
    v20[3] = 0LL;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
    }
    operator delete(v20);
  }

  return v19;
}

void sub_100557DFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

uint64_t sub_100557E40( uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5, int a6, uint64_t a7)
{
  uint64_t v14 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_10002418C(__p, out);
    uint64_t v15 = v27 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uuid_string_t out = 67109634;
    *(_DWORD *)&out[4] = a6;
    *(_WORD *)&out[8] = 1024;
    *(_DWORD *)&out[10] = a5;
    *(_WORD *)&out[14] = 2082;
    *(void *)&out[16] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Reading value for characteristic value handle 0x%04x, char handle 0x%04x on device %{public}s",  (uint8_t *)out,  0x18u);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
  }

  unint64_t v16 = operator new(0x20uLL);
  void *v16 = a2;
  v16[1] = a3;
  void v16[2] = a7;
  v16[3] = 0LL;
  *(void *)uuid_string_t out = v16;
  uint64_t v17 = operator new(0x30uLL);
  uint64_t v18 = v17;
  if (a1) {
    uint64_t v19 = a1 + 8;
  }
  else {
    uint64_t v19 = 0LL;
  }
  sub_10053CE50((uint64_t)v17, v19);
  *(void *)uint64_t v18 = off_1008A0908;
  v18[21] = a6;
  v18[22] = a5;
  uint64_t v20 = v16[3];
  v16[3] = v18;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  *(void *)uuid_string_t out = 0LL;
  char v25 = v16;
  uint64_t v21 = sub_100555F9C(a1, a4, (uint64_t *)&v25, 0);
  uint64_t v22 = v25;
  char v25 = 0LL;
  if (v22)
  {
    uint64_t v23 = v22[3];
    v22[3] = 0LL;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
    }
    operator delete(v22);
  }

  return v21;
}

void sub_10055802C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

uint64_t sub_100558070(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5, uint64_t a6)
{
  unsigned int v12 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_10002418C(__p, out);
    BOOL v13 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uuid_string_t out = 67109378;
    *(_DWORD *)&out[4] = a5;
    *(_WORD *)&out[8] = 2082;
    *(void *)&out[10] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Reading value for descriptor handle 0x%04x on device %{public}s",  (uint8_t *)out,  0x12u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v14 = operator new(0x20uLL);
  *uint64_t v14 = a2;
  v14[1] = a3;
  void v14[2] = a6;
  void v14[3] = 0LL;
  *(void *)uuid_string_t out = v14;
  uint64_t v15 = operator new(0x30uLL);
  unint64_t v16 = v15;
  if (a1) {
    uint64_t v17 = a1 + 8;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_10053CE50((uint64_t)v15, v17);
  *(void *)unint64_t v16 = off_1008A0998;
  v16[21] = a5;
  uint64_t v18 = v14[3];
  void v14[3] = v16;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  *(void *)uuid_string_t out = 0LL;
  uint64_t v23 = v14;
  uint64_t v19 = sub_100555F9C(a1, a4, (uint64_t *)&v23, 0);
  uint64_t v20 = v23;
  uint64_t v23 = 0LL;
  if (v20)
  {
    uint64_t v21 = v20[3];
    v20[3] = 0LL;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
    }
    operator delete(v20);
  }

  return v19;
}

void sub_100558240( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

uint64_t sub_100558284( uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5, __int16 a6, int a7, uint64_t a8, uint64_t a9)
{
  unint64_t v16 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = a5 ? "with" : "without";
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_10002418C(__p, out);
    uint64_t v18 = v31 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uuid_string_t out = 136446722;
    *(void *)&out[4] = v17;
    *(_WORD *)&out[12] = 1024;
    *(_DWORD *)&out[14] = a7;
    *(_WORD *)&out[18] = 2082;
    *(void *)&out[20] = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Writing value %{public}s response to characteristic handle 0x%04x on device %{public}s",  (uint8_t *)out,  0x1Cu);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v19 = operator new(0x20uLL);
  *uint64_t v19 = a2;
  v19[1] = a3;
  void v19[2] = a9;
  uint64_t v19[3] = 0LL;
  *(void *)uuid_string_t out = v19;
  uint64_t v20 = operator new(0x58uLL);
  uint64_t v21 = v20;
  if (a1) {
    uint64_t v22 = a1 + 8;
  }
  else {
    uint64_t v22 = 0LL;
  }
  sub_10055D238(v20, v22, a6, a5, a8);
  uint64_t v23 = v19[3];
  uint64_t v19[3] = v21;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  *(void *)uuid_string_t out = 0LL;
  uint64_t v29 = v19;
  uint64_t v24 = sub_100555F9C(a1, a4, (uint64_t *)&v29, 0);
  char v25 = v29;
  uint64_t v29 = 0LL;
  if (v25)
  {
    uint64_t v26 = v25[3];
    _OWORD v25[3] = 0LL;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
    }
    operator delete(v25);
  }

  return v24;
}

void sub_100558484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_10055CD68((void **)va, 0LL);
  sub_10055CD68((void **)va1, 0LL);
  _Unwind_Resume(a1);
}

uint64_t sub_1005584C8( uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_10002418C(__p, out);
    uint64_t v15 = v27 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uuid_string_t out = 67109378;
    *(_DWORD *)&out[4] = a5;
    *(_WORD *)&out[8] = 2082;
    *(void *)&out[10] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Writing value to descriptor handle 0x%04x on device %{public}s",  (uint8_t *)out,  0x12u);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
  }

  unint64_t v16 = operator new(0x20uLL);
  void *v16 = a2;
  v16[1] = a3;
  void v16[2] = a7;
  v16[3] = 0LL;
  *(void *)uuid_string_t out = v16;
  uint64_t v17 = operator new(0x40uLL);
  uint64_t v18 = v17;
  if (a1) {
    uint64_t v19 = a1 + 8;
  }
  else {
    uint64_t v19 = 0LL;
  }
  sub_100549DE4((uint64_t)v17, v19, a5, a6);
  uint64_t v20 = v16[3];
  v16[3] = v18;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  *(void *)uuid_string_t out = 0LL;
  char v25 = v16;
  uint64_t v21 = sub_100555F9C(a1, a4, (uint64_t *)&v25, 0);
  uint64_t v22 = v25;
  char v25 = 0LL;
  if (v22)
  {
    uint64_t v23 = v22[3];
    v22[3] = 0LL;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
    }
    operator delete(v22);
  }

  return v21;
}

void sub_100558698( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

uint64_t sub_1005586DC( uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, unsigned int a5, int a6, uint64_t a7)
{
  uint64_t v42 = a3;
  unsigned __int16 v41 = a5;
  BOOL v13 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = a6 ? "Subscribing" : "Unsubscribing";
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_10002418C(__p, out);
    uint64_t v15 = v40 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uuid_string_t out = 136446722;
    *(void *)&out[4] = v14;
    *(_WORD *)&out[12] = 1024;
    *(_DWORD *)&out[14] = a5;
    *(_WORD *)&out[18] = 2082;
    *(void *)&out[20] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%{public}s to updates of characteristic handle 0x%04x on device %{public}s",  (uint8_t *)out,  0x1Cu);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v16 = sub_100555CC0(a1, a4);
  if (!v16) {
    goto LABEL_31;
  }
  uint64_t v19 = *(void *)(v16 + 120);
  uint64_t v17 = v16 + 120;
  uint64_t v18 = v19;
  uint64_t v20 = (uint64_t **)(v17 - 8);
  if (!v19) {
    goto LABEL_22;
  }
  uint64_t v21 = v17;
  do
  {
    unsigned int v22 = *(unsigned __int16 *)(v18 + 32);
    BOOL v23 = v22 >= a5;
    if (v22 >= a5) {
      uint64_t v24 = (uint64_t *)v18;
    }
    else {
      uint64_t v24 = (uint64_t *)(v18 + 8);
    }
    if (v23) {
      uint64_t v21 = v18;
    }
    uint64_t v18 = *v24;
  }

  while (*v24);
  if (v21 == v17 || *(unsigned __int16 *)(v21 + 32) > a5) {
LABEL_22:
  }
    uint64_t v21 = v17;
  if (a6)
  {
    *(void *)uuid_string_t out = &v41;
    char v25 = sub_10055D2C0((uint64_t **)(v17 - 8), &v41, (uint64_t)&unk_1006C2518, (_WORD **)out);
    sub_1002555B0(v25 + 5, (unint64_t *)&v42, &v42);
LABEL_31:
    uint64_t v28 = operator new(0x20uLL);
    uint64_t v29 = v42;
    void *v28 = a2;
    v28[1] = v29;
    void v28[2] = a7;
    v28[3] = 0LL;
    *(void *)uuid_string_t out = v28;
    __int128 v30 = operator new(0x50uLL);
    char v31 = v30;
    if (a1) {
      uint64_t v32 = a1 + 8;
    }
    else {
      uint64_t v32 = 0LL;
    }
    unsigned __int16 v33 = v41;
    sub_10053CE50((uint64_t)v30, v32);
    *char v31 = off_1008A0B78;
    v31[6] = &off_1008A0BB0;
    *((_WORD *)v31 + 28) = v33;
    *((_BYTE *)v31 + 58) = a6;
    v31[8] = 0LL;
    v31[9] = 0LL;
    uint64_t v34 = v28[3];
    v28[3] = v31;
    if (v34) {
      (*(void (**)(uint64_t))(*(void *)v34 + 8LL))(v34);
    }
    *(void *)uuid_string_t out = 0LL;
    uint64_t v38 = v28;
    uint64_t v27 = sub_100555F9C(a1, a4, (uint64_t *)&v38, 0);
    uint64_t v35 = v38;
    uint64_t v38 = 0LL;
    if (v35)
    {
      uint64_t v36 = v35[3];
      v35[3] = 0LL;
      if (v36) {
        (*(void (**)(uint64_t))(*(void *)v36 + 8LL))(v36);
      }
      operator delete(v35);
    }

    return v27;
  }

  if (v21 == v17) {
    goto LABEL_31;
  }
  sub_10020166C(v21 + 40, (unint64_t *)&v42);
  if (!*(void *)(v21 + 56))
  {
    sub_10032982C(v20, v21);
    goto LABEL_31;
  }

  uint64_t v26 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uuid_string_t out = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Swallowing unsubscription event as there are other session(s) still subscribed",  (uint8_t *)out,  2u);
  }

  return 913LL;
}

void sub_1005589F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
}

uint64_t sub_100558A38(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, uint64_t a5, uint64_t a6)
{
  unsigned int v12 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_10002418C(__p, out);
    BOOL v13 = v26 >= 0 ? __p : (void **)__p[0];
    uint64_t v14 = *(char *)(a5 + 23) >= 0 ? a5 : *(void *)a5;
    *(_DWORD *)uuid_string_t out = 136446466;
    *(void *)&out[4] = v13;
    *(_WORD *)&out[12] = 2080;
    *(void *)&out[14] = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Setting GAP name on device %{public}s to %s",  (uint8_t *)out,  0x16u);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v15 = operator new(0x20uLL);
  *uint64_t v15 = a2;
  v15[1] = a3;
  void v15[2] = a6;
  uint64_t v15[3] = 0LL;
  *(void *)uuid_string_t out = v15;
  uint64_t v16 = operator new(0x58uLL);
  uint64_t v17 = v16;
  if (a1) {
    uint64_t v18 = a1 + 8;
  }
  else {
    uint64_t v18 = 0LL;
  }
  sub_10055D38C((uint64_t)v16, v18, (__int128 *)a5);
  uint64_t v19 = v15[3];
  uint64_t v15[3] = v17;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  *(void *)uuid_string_t out = 0LL;
  uint64_t v24 = v15;
  uint64_t v20 = sub_100555F9C(a1, a4, (uint64_t *)&v24, 0);
  uint64_t v21 = v24;
  uint64_t v24 = 0LL;
  if (v21)
  {
    uint64_t v22 = v21[3];
    void v21[3] = 0LL;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
    }
    operator delete(v21);
  }

  return v20;
}

void sub_100558C08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

uint64_t sub_100558C4C(uint64_t a1, const unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F75B0;
  if (!*(void *)(*a3 + 24) && os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = "holder->command";
    _os_log_fault_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Assertion failed: %{public}s",  (uint8_t *)out,  0xCu);
    uint64_t v6 = (os_log_s *)qword_1008F75B0;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a2, out);
    sub_10002418C(__p, out);
    uint64_t v7 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Enqueuing a delayed command for device %{public}s",  (uint8_t *)out,  0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v8 = sub_100555CC0(a1, a2);
  if (!v8) {
    return 312LL;
  }
  uint64_t v9 = v8;
  sub_100559F44((void *)(v8 + 56), a3);
  if (*(void *)(v9 + 96) == 1LL)
  {
    *(_BYTE *)(v9 + 106) = 1;
    *(void *)uuid_string_t out = 0LL;
    *(void *)&out[8] = 0LL;
    uuid_copy((unsigned __int8 *)out, a2);
    uint64_t v10 = sub_100404FE8();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3321888768LL;
    void v14[2] = sub_10055A088;
    void v14[3] = &unk_1008A1630;
    uuid_copy(v15, (const unsigned __int8 *)out);
    sub_100405460(v10, 1000LL, v14);
  }

  return 0LL;
}

BOOL sub_100558E4C(uint64_t a1, __n128 *a2, unsigned __int8 *uu1)
{
  uint64_t v13 = 0LL;
  v14[0] = 0LL;
  v14[1] = 0LL;
  *(void *)uuid_string_t out = uu1;
  id v5 = sub_10055D420( (uint64_t **)(a1 + 248),  uu1,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)out);
  sub_10055D554((uint64_t)&v13, (uint64_t)(v5 + 6));
  __n128 v24 = *a2;
  unsigned __int32 v25 = a2[1].n128_u32[0];
  sub_100634334((__n128 *)out, &v24);
  uint64_t v6 = (void **)sub_10038DAA8((uint64_t)&v13, (unsigned __int8 *)out);
  uint64_t v7 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_INFO))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(uu1, out);
    uint64_t v8 = __p;
    sub_10002418C(__p, out);
    if (v12 < 0) {
      uint64_t v8 = (void **)__p[0];
    }
    __n128 v15 = *a2;
    unsigned __int32 v16 = a2[1].n128_u32[0];
    sub_100634334(&v17, &v15);
    sub_1006344B4((uint64_t)&v17, out);
    if (out[23] >= 0) {
      uint64_t v9 = out;
    }
    else {
      uint64_t v9 = *(char **)out;
    }
    *(_DWORD *)__int128 buf = 136315650;
    uint64_t v19 = v8;
    __int16 v20 = 2080;
    uint64_t v21 = v9;
    __int16 v22 = 1024;
    BOOL v23 = v14 == v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "shouldNotifyBuiltInService device:%s service:%s notify:%d",  buf,  0x1Cu);
    if (out[23] < 0) {
      operator delete(*(void **)out);
    }
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10023BF24((uint64_t)&v13, v14[0]);
  return v14 == v6;
}

void sub_100559034( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10023BF24((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void sub_100559070(uint64_t a1, __n128 *a2, unsigned __int8 *uu1)
{
  uint64_t v13 = 0LL;
  v14[0] = 0LL;
  v14[1] = 0LL;
  id v5 = (uint64_t **)(a1 + 248);
  *(void *)uuid_string_t out = uu1;
  uint64_t v6 = sub_10055D420( (uint64_t **)(a1 + 248),  uu1,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)out);
  sub_10055D554((uint64_t)&v13, (uint64_t)(v6 + 6));
  __n128 v22 = *a2;
  unsigned __int32 v23 = a2[1].n128_u32[0];
  sub_100634334((__n128 *)out, &v22);
  sub_10038CF98(&v13, (unsigned __int8 *)out, (uint64_t)out);
  *(void *)uuid_string_t out = uu1;
  uint64_t v7 = (uint64_t **)(sub_10055D420( v5,  uu1,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)out)
                  + 6);
  if (v7 != &v13) {
    sub_10055D5A8(v7, v13, v14);
  }
  uint64_t v8 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_INFO))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(uu1, out);
    uint64_t v9 = __p;
    sub_10002418C(__p, out);
    if (v12 < 0) {
      uint64_t v9 = (void **)__p[0];
    }
    __n128 v15 = *a2;
    unsigned __int32 v16 = a2[1].n128_u32[0];
    sub_100634334(&v17, &v15);
    sub_1006344B4((uint64_t)&v17, out);
    if (out[23] >= 0) {
      uint64_t v10 = out;
    }
    else {
      uint64_t v10 = *(char **)out;
    }
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v19 = v9;
    __int16 v20 = 2080;
    uint64_t v21 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "didNotifyBuiltInService device:%s service:%s",  buf,  0x16u);
    if (out[23] < 0) {
      operator delete(*(void **)out);
    }
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_10023BF24((uint64_t)&v13, v14[0]);
}

void sub_100559268( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10023BF24((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void sub_1005592A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A17F8);
  }
  id v3 = sub_10040007C(off_1008D5F48, *(void *)(a1 + 48), 0);
  if (v3)
  {
    uint64_t v4 = (uint64_t)v3;
    char v5 = sub_1003D2B2C((uint64_t)v3, 12);
    LOBYTE(v4) = sub_1003D2B2C(v4, 31);
    uint64_t v6 = sub_100404FE8();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_1005593C4;
    v10[3] = &unk_1008A1610;
    uint64_t v12 = v2;
    char v16 = v5;
    id v7 = *(id *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    id v11 = v7;
    uint64_t v13 = v8;
    uint64_t v14 = v9;
    uint64_t v15 = *(void *)(a1 + 64);
    char v17 = v4;
    sub_100405384(v6, v10);
  }

void sub_1005593B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void sub_1005593C4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    id v3 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v4 = *(void *)(a1 + 32);
      buf.n128_u32[0] = 138412290;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "The device %@ supports Classic HRM",  (uint8_t *)&buf,  0xCu);
    }

    uint64_t v5 = sub_1002E8F6C();
    (*(void (**)(uint64_t, void))(*(void *)v5 + 64LL))(v5, *(void *)(a1 + 32));
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_1008A1838);
    }
    uint64_t v6 = off_1008D5F28;
    id v7 = *(void **)(a1 + 32);
    sub_10002418C(__p, "HKQuantityTypeIdentifierHeartRate");
    sub_1005CCF08((uint64_t)v6, v7, (unsigned __int8 *)__p);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_1008A1838);
    }
    uint64_t v8 = off_1008D5F28;
    uint64_t v9 = *(void **)(a1 + 32);
    sub_10002418C(v19, "FitnessClassic");
    sub_1005CCF08((uint64_t)v8, v9, (unsigned __int8 *)v19);
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    sub_100559070(v2, (__n128 *)&xmmword_1006BDACC, *(unsigned __int8 **)(a1 + 48));
    char v18 = 0;
    sub_100242CA4(&v18);
    unint64_t v10 = sub_1001BEE0C(*(void *)(a1 + 56));
    int v16 = v10;
    __int16 v17 = WORD2(v10);
    id v11 = (unsigned __int16 *)sub_10012D9F4((uint64_t)&v16);
    if (v11)
    {
      __int16 v12 = sub_10012D7D4(v11);
      if ((sub_1000BAF70( v12 & 0xFFF,  **(_WORD **)(*(void *)(a1 + 64) + 8LL),  *(_WORD *)(*(void *)(a1 + 64) + 48LL)) & 1) == 0)
      {
        uint64_t v13 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = sub_100241F94(*(const unsigned __int8 **)(a1 + 48));
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
          buf.n128_u32[0] = 138412290;
          *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)v15;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Failed to redact HRM reports for device %@",  (uint8_t *)&buf,  0xCu);
        }
      }
    }

    sub_100242CD8(&v18);
  }

  if (*(_BYTE *)(a1 + 73))
  {
    __n128 buf = 0uLL;
    int v26 = 0;
    __int128 v23 = xmmword_1006BDACC;
    int v24 = 0;
    sub_100634334(&buf, (__n128 *)&v23);
    if (qword_1008D5F60 != -1) {
      dispatch_once(&qword_1008D5F60, &stru_1008A1878);
    }
    sub_100556354(qword_1008D5F58, *(void **)(a1 + 32), (unsigned __int8 *)&buf);
  }

void sub_100559694( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
}

uint64_t sub_1005596EC(uint64_t a1, uint64_t a2, const unsigned __int8 *a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a3, (char *)out);
    sub_10002418C(__p, (char *)out);
    id v7 = v19 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Beginning GAP name update sequence for device %{public}s",  out,  0xCu);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v8 = operator new(0x20uLL);
  *uint64_t v8 = a2;
  v8[1] = 0LL;
  _DWORD v8[2] = 0LL;
  v8[3] = 0LL;
  *(void *)uuid_string_t out = v8;
  uint64_t v9 = operator new(0x68uLL);
  unint64_t v10 = v9;
  if (a1) {
    uint64_t v11 = a1 + 8;
  }
  else {
    uint64_t v11 = 0LL;
  }
  sub_10053CE50((uint64_t)v9, v11);
  void *v10 = off_1008A0AD8;
  v10[11] = 0LL;
  v10[12] = 0LL;
  v10[10] = 0LL;
  void v10[7] = 0LL;
  v10[8] = 0LL;
  v10[6] = &off_1008A0B10;
  *((_WORD *)v10 + 36) = 0;
  uint64_t v12 = v8[3];
  v8[3] = v10;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  *(void *)uuid_string_t out = 0LL;
  __int16 v17 = v8;
  uint64_t v13 = sub_100558C4C(a1, a3, (uint64_t *)&v17);
  uint64_t v14 = v17;
  __int16 v17 = 0LL;
  if (v14)
  {
    uint64_t v15 = v14[3];
    void v14[3] = 0LL;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
    }
    operator delete(v14);
  }

  return v13;
}

void sub_1005598AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

uint64_t sub_1005598F0(uint64_t a1, uint64_t a2, const unsigned __int8 *a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a3, (char *)out);
    sub_10002418C(__p, (char *)out);
    id v7 = v19 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Beginning delete bond sequence for device %{public}s",  out,  0xCu);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v8 = operator new(0x20uLL);
  *uint64_t v8 = a2;
  v8[1] = 0LL;
  _DWORD v8[2] = 0LL;
  v8[3] = 0LL;
  *(void *)uuid_string_t out = v8;
  uint64_t v9 = operator new(0x58uLL);
  unint64_t v10 = v9;
  if (a1) {
    uint64_t v11 = a1 + 8;
  }
  else {
    uint64_t v11 = 0LL;
  }
  sub_10053CE50((uint64_t)v9, v11);
  void *v10 = off_1008A0C18;
  v10[6] = &off_1008A0C50;
  *((_DWORD *)v10 + 14) = 0;
  v10[9] = 0LL;
  v10[10] = 0LL;
  v10[8] = 0LL;
  uint64_t v12 = v8[3];
  v8[3] = v10;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  *(void *)uuid_string_t out = 0LL;
  __int16 v17 = v8;
  uint64_t v13 = sub_100555F9C(a1, a3, (uint64_t *)&v17, 1);
  uint64_t v14 = v17;
  __int16 v17 = 0LL;
  if (v14)
  {
    uint64_t v15 = v14[3];
    void v14[3] = 0LL;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
    }
    operator delete(v14);
  }

  return v13;
}

void sub_100559AB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void *sub_100559AF4(void **a1, char *a2, uint64_t a3, void *a4)
{
  unint64_t v6 = (unint64_t)a1[4];
  id v7 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = &v7[8 * (v6 >> 9)];
  if (v8 == v7) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = *(void *)v9 + 8 * ((unint64_t)a1[4] & 0x1FF);
  }
  if (a3 == v10) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = ((a3 - *(void *)a2) >> 3) + ((a2 - v9) << 6) - ((v10 - *(void *)v9) >> 3);
  }
  uint64_t v12 = (char *)a1[5];
  unint64_t v13 = (unint64_t)&v12[-v11];
  if (v11 >= (unint64_t)&v12[-v11])
  {
    if (v8 == v7) {
      uint64_t v21 = 0LL;
    }
    else {
      uint64_t v21 = ((v8 - v7) << 6) - 1;
    }
    if ((char *)v21 == &v12[v6])
    {
      sub_10055DB58(a1);
      uint64_t v12 = (char *)a1[5];
      unint64_t v13 = (unint64_t)&v12[-v11];
    }

    if (v12 == (char *)v11)
    {
      unint64_t v22 = (unint64_t)a1[4] + v11;
      uint64_t v23 = *(void *)((char *)a1[1] + ((v22 >> 6) & 0x3FFFFFFFFFFFFF8LL));
      int v24 = (void *)*a4;
      *a4 = 0LL;
      *(void *)(v23 + 8 * (v22 & 0x1FF)) = v24;
      a1[5] = (void *)(v11 + 1);
      goto LABEL_46;
    }

    unint64_t v25 = (unint64_t)&v12[(void)a1[4]];
    int v26 = (char *)a1[1];
    uint64_t v27 = (char **)&v26[8 * (v25 >> 9)];
    uint64_t v28 = *v27;
    uint64_t v29 = &(*v27)[8 * (v25 & 0x1FF)];
    if (a1[2] == v26) {
      uint64_t v29 = 0LL;
    }
    v60.n128_u64[0] = (unint64_t)v27;
    v60.n128_u64[1] = (unint64_t)v29;
    uint64_t v30 = (v29 - v28) >> 3;
    if (v29 - v28 < 9)
    {
      unint64_t v48 = 512 - v30;
      uint64_t v32 = &v27[-(v48 >> 9)];
      unsigned __int16 v33 = &(*v32)[8 * (~(_WORD)v48 & 0x1FF)];
    }

    else
    {
      unint64_t v31 = v30 - 1;
      uint64_t v32 = &v27[v31 >> 9];
      unsigned __int16 v33 = &(*v32)[8 * (v31 & 0x1FF)];
    }

    uint64_t v49 = *(void *)v33;
    *(void *)unsigned __int16 v33 = 0LL;
    *(void *)uint64_t v29 = v49;
    a1[5] = v12 + 1;
    if (v13 >= 2)
    {
      BOOL v50 = sub_10055DE6C((uint64_t)&v60, v13);
      __n128 v61 = 0u;
      __n128 v62 = 0u;
      sub_10055E090(v50, v51, (void **)v32, v33, v60.n128_u64[0], (void **)v60.n128_u64[1], &v61);
      uint64_t v29 = (char *)v62.n128_u64[1];
      uint64_t v27 = (char **)v62.n128_u64[0];
      __n128 v60 = v62;
    }

    if (v29 == *v27)
    {
      v60.n128_u64[0] = (unint64_t)(v27 - 1);
      uint64_t v29 = *(v27 - 1) + 4096;
    }

    char v18 = v29 - 8;
    goto LABEL_44;
  }

  if (v6)
  {
    if (v11)
    {
LABEL_10:
      unint64_t v14 = (unint64_t)a1[4];
      uint64_t v15 = (char *)a1[1];
      int v16 = (uint64_t *)&v15[8 * (v14 >> 9)];
      uint64_t v17 = *v16;
      if (a1[2] == v15) {
        char v18 = 0LL;
      }
      else {
        char v18 = (char *)(*v16 + 8 * ((unint64_t)a1[4] & 0x1FF));
      }
      v60.n128_u64[0] = (unint64_t)&v15[8 * (v14 >> 9)];
      v60.n128_u64[1] = (unint64_t)v18;
      uint64_t v19 = (uint64_t)&v18[-v17] >> 3;
      else {
      char v40 = *(void **)v18;
      }
      *(void *)char v18 = 0LL;
      void *v20 = v40;
      uint64_t v41 = (uint64_t)a1[5] + 1;
      a1[4] = (void *)(v14 - 1);
      a1[5] = (void *)v41;
      if (v11 == 1) {
        goto LABEL_45;
      }
      uint64_t v42 = (uint64_t)&v18[-*v16];
      uint64_t v43 = v42 >> 3;
      if (v42 < -7)
      {
        unint64_t v52 = 510 - v43;
        unint64_t v45 = &v16[-(v52 >> 9)];
        uint64_t v46 = *v45;
        uint64_t v47 = ~(_DWORD)v52 & 0x1FFLL;
      }

      else
      {
        unint64_t v44 = v43 + 1;
        unint64_t v45 = &v16[v44 >> 9];
        uint64_t v46 = *v45;
        uint64_t v47 = v44 & 0x1FF;
      }

      unint64_t v53 = (void **)(v46 + 8 * v47);
      int v54 = sub_10023FC2C((uint64_t)&v60, v11);
      __n128 v61 = v60;
      sub_10055DED4(v45, v53, (void ***)v54, v55, (uint64_t)&v61);
      char v18 = (char *)v61.n128_u64[1];
      v60.n128_u64[0] = v61.n128_u64[0];
LABEL_44:
      v60.n128_u64[1] = (unint64_t)v18;
LABEL_45:
      uint64_t v56 = (void *)*a4;
      *a4 = 0LL;
      sub_10055CD68((void **)v18, v56);
      goto LABEL_46;
    }
  }

  else
  {
    sub_10055D848(a1);
    if (v11) {
      goto LABEL_10;
    }
  }

  unint64_t v34 = (unint64_t)a1[4];
  uint64_t v35 = (char *)a1[1];
  uint64_t v36 = &v35[8 * (v34 >> 9)];
  uint64_t v37 = *(void *)v36 + 8 * (v34 & 0x1FF);
  if (a1[2] == v35) {
    uint64_t v37 = 0LL;
  }
  if (v37 == *(void *)v36) {
    uint64_t v37 = *((void *)v36 - 1) + 4096LL;
  }
  uint64_t v38 = (void *)*a4;
  *a4 = 0LL;
  *(void *)(v37 - 8) = v38;
  uint64_t v39 = (uint64_t)a1[5] + 1;
  a1[4] = (void *)(v34 - 1);
  a1[5] = (void *)v39;
LABEL_46:
  unint64_t v57 = a1[1];
  if (a1[2] == v57) {
    uint64_t v58 = 0LL;
  }
  else {
    uint64_t v58 = v57[(unint64_t)a1[4] >> 9] + 8 * ((unint64_t)a1[4] & 0x1FF);
  }
  v61.n128_u64[0] = (unint64_t)&v57[(unint64_t)a1[4] >> 9];
  v61.n128_u64[1] = v58;
  return sub_10023FC2C((uint64_t)&v61, v11);
}

void sub_100559EC4(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_10055D848((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }

  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = (void *)(v5 + 8 * (v4 >> 9));
  uint64_t v7 = *v6 + 8 * (v4 & 0x1FF);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0LL;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4096LL;
  }
  uint64_t v8 = *a2;
  *a2 = 0LL;
  *(void *)(v7 - 8) = v8;
  uint64_t v9 = *(void *)(a1 + 40) + 1LL;
  *(void *)(a1 + 32) = v4 - 1;
  *(void *)(a1 + 40) = v9;
}

void sub_100559F44(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_10055DB58(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }

  uint64_t v9 = *(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8LL));
  uint64_t v10 = *a2;
  *a2 = 0LL;
  *(void *)(v9 + 8 * (v8 & 0x1FF)) = v10;
  a1[5] = v7 + 1;
}

void sub_100559FCC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!*(_BYTE *)(a3 + 105))
  {
    uint64_t v6 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT)) {
      sub_100691EFC(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }

  if (!*(void *)(a3 + 48))
  {
    unint64_t v14 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT)) {
      sub_100691E8C(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }

  if (!*(_BYTE *)(a3 + 104)) {
    sub_10055A248(a1, v5, a3);
  }
}

void sub_10055A078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10055A088(uint64_t a1)
{
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_1008A1878);
  }
  sub_10055A0D8(qword_1008D5F58, (const unsigned __int8 *)(a1 + 32));
}

void sub_10055A0D8(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v4 = sub_100555CC0(a1, a2);
  if (v4)
  {
    uint64_t v5 = v4;
    if (*(void *)(v4 + 96))
    {
      if (!*(_BYTE *)(v4 + 105)
        || !*(_BYTE *)(v4 + 106)
        || (sub_100559F44( (void *)(v4 + 8),  (uint64_t *)(*(void *)(*(void *)(v4 + 64) + ((*(void *)(v4 + 88) >> 6) & 0x3FFFFFFFFFFFFF8LL))
                        + 8 * (*(void *)(v4 + 88) & 0x1FFLL))),
            sub_10055A3A8((int64x2_t *)(v5 + 56)),
            uint64_t v6 = sub_100241F94(a2),
            uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6),
            sub_100559FCC(a1, v7, v5),
            v7,
            *(void *)(v5 + 96)))
      {
        *(_BYTE *)(v5 + 106) = 1;
        memset(dst, 0, sizeof(dst));
        uuid_copy(dst, a2);
        uint64_t v8 = sub_100404FE8();
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 3321888768LL;
        void v9[2] = sub_10055A404;
        v9[3] = &unk_1008A1630;
        uuid_copy(v10, dst);
        sub_100405460(v8, 1000LL, v9);
      }
    }
  }

void sub_10055A220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10055A238(uint64_t a1, uint64_t a2)
{
}

void sub_10055A248(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (*(_BYTE *)(a3 + 104)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = *(void *)(a3 + 48) == 0LL;
  }
  if (v6)
  {
    uint64_t v7 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT)) {
      sub_100691F6C(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }

  uint64_t v15 = *(void *)(*(void *)(*(void *)(*(void *)(a3 + 16) + ((*(void *)(a3 + 40) >> 6) & 0x3FFFFFFFFFFFFF8LL))
                              + 8 * (*(void *)(a3 + 40) & 0x1FFLL))
                  + 24LL);
  sub_100241F90(v21, v5);
  sub_100555864(a1, v21, 1, &v19);
  sub_10053CEB4(v15, v5, &v19, *(_WORD *)a3);
  uint64_t v16 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  *(_BYTE *)(a3 + 104) = 1;
  *(_BYTE *)(a3 + 106) = 0;
}

void sub_10055A380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10055A3A8(int64x2_t *a1)
{
  sub_10055CD68( (void **)(*(void *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8LL))
              + 8 * (a1[2].i64[0] & 0x1FF)),
    0LL);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1006BFA70);
  return sub_100254FCC((uint64_t)a1, 1);
}

uint64_t sub_10055A404(uint64_t a1)
{
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_1008A1878);
  }
  return sub_10055A0D8(qword_1008D5F58, a1 + 32);
}

void sub_10055A454(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  BOOL v6 = objc_autoreleasePoolPush();
  *(void *)src = 0LL;
  uint64_t v16 = 0LL;
  sub_100241F90(src, *(void *)(a2 + 16));
  __int16 v7 = *(_WORD *)(a2 + 40);
  uint64_t v8 = sub_100404FE8();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768LL;
  void v10[2] = sub_10055A584;
  v10[3] = &unk_1008A1668;
  uint64_t v12 = a1;
  uuid_copy(v14, src);
  __int16 v13 = v7;
  id v9 = v5;
  id v11 = v9;
  sub_100405384(v8, v10);

  objc_autoreleasePoolPop(v6);
}

void sub_10055A554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned __int16 *sub_10055A584(uint64_t a1)
{
  uint64_t result = (unsigned __int16 *)sub_100555CC0(*(void *)(a1 + 40), (const unsigned __int8 *)(a1 + 50));
  if (result)
  {
  }

  return result;
}

void sub_10055A5D4(uint64_t a1, uint64_t a2)
{
}

void sub_10055A5E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  sub_100240540(&v15, a4);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768LL;
  void v10[2] = sub_10055A710;
  v10[3] = &unk_1008A1698;
  void v10[4] = a1;
  void v10[5] = a2;
  int v14 = a3;
  __n128 __dst = 0LL;
  uint64_t v13 = 0LL;
  __n128 __p = 0LL;
  __int16 v7 = v15;
  int64_t v8 = v16 - v15;
  if (v16 != v15)
  {
    sub_10023DBC8(&__p, v8 >> 3);
    id v9 = (char *)__dst;
    memmove(__dst, v7, v8);
    __n128 __dst = &v9[8 * (v8 >> 3)];
  }

  sub_10055A454(a1, a2, v10);
  if (__p)
  {
    __n128 __dst = __p;
    operator delete(__p);
  }

  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }

void sub_10055A6DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v19 = *(void **)(v17 - 72);
  if (v19)
  {
    *(void *)(v17 - 64) = v19;
    operator delete(v19);
  }

  _Unwind_Resume(exception_object);
}

void sub_10055A710(uint64_t a1)
{
  id v3 = *(void **)(a1 + 48);
  uint64_t v2 = *(void **)(a1 + 56);
  while (v3 != v2)
  {
    if (*v3)
    {
      (*(void (**)(void))(*(void *)*v3 + 8LL))(*v3);
      uint64_t v2 = *(void **)(a1 + 56);
    }

    ++v3;
  }

void sub_10055A76C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v8 = *(id *)(a2 + 16);
  if (a3)
  {
    if (a3 > 255)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
        sub_10069204C();
      }
      uint64_t v9 = 1LL;
    }

    else
    {
      uint64_t v9 = (a3 + 1000);
    }
  }

  else
  {
    if (*a4 != a4[1])
    {
      *(void *)uu1 = 0LL;
      unsigned __int16 v33 = 0LL;
      sub_100241F90(v31, v8);
      sub_100555864(a1, v31, 0, uu1);
      if (*(void *)uu1) {
        sub_100444430(*(uint64_t *)uu1, (uint64_t)"");
      }
      uint64_t v10 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          unint64_t v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }

    uint64_t v9 = 0LL;
  }

  sub_100241F90(uu1, v8);
  uint64_t v13 = sub_10055478C(a1 + 192, uu1);
  if (!*(void *)(v13 + 48))
  {
    int v14 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT)) {
      sub_100691E8C(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }

  unint64_t v22 = *(void **)(*(void *)(*(void *)(v13 + 16) + ((*(void *)(v13 + 40) >> 6) & 0x3FFFFFFFFFFFFF8LL))
                   + 8 * (*(void *)(v13 + 40) & 0x1FFLL));
  if (v22[3] != a2)
  {
    uint64_t v23 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT)) {
      sub_100691FDC(v23, v24, v25, v26, v27, v28, v29, v30);
    }
  }

  if (*v22) {
    (**(void (***)(void, id, void, uint64_t, void *, void))*v22)(*v22, v8, v22[1], v9, a4, v22[2]);
  }
  sub_10055A3A8((int64x2_t *)(v13 + 8));
  *(_BYTE *)(v13 + 104) = 0;
  if (*(void *)(v13 + 48)) {
    sub_10055A248(a1, v8, v13);
  }
}

void sub_10055A990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _Unwind_Resume(a1);
}

void *sub_10055A9C0(uint64_t a1, uint64_t a2)
{
  return sub_100240540((void *)(a1 + 48), a2 + 48);
}

void sub_10055A9CC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

void sub_10055A9E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

void sub_10055A9EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100404FE8();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10055AA9C;
  v6[3] = &unk_1008800B8;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100405384(v4, v6);
}

void sub_10055AA7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10055AA9C(uint64_t a1)
{
}

void sub_10055AAA8(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v2 = a1 + 10;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_10055ABF8;
  v4[3] = &unk_1008A16D0;
  id v5 = a2;
  id v3 = v5;
  sub_10055AB3C(v2, v4);
}

void sub_10055AB24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10055AB3C(os_unfair_lock_s *a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_lock(a1);
  id v5 = 0LL;
  BOOL v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    BOOL v6 = v4;
    operator delete(v4);
  }
}

void sub_10055ABD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10055ABF8(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(void *)(a1 + 32));
}

void sub_10055AC10(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = sub_100404FE8();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_10055ACC8;
  v8[3] = &unk_10087FBF0;
  uint64_t v10 = a1;
  id v7 = v5;
  id v9 = v7;
  uint64_t v11 = a3;
  sub_100405384(v6, v8);
}

void sub_10055ACA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10055ACC8(uint64_t a1)
{
}

void sub_10055ACD8(os_unfair_lock_s *a1, void *a2, uint64_t a3)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10055AD70;
  v6[3] = &unk_1008A16F8;
  id v7 = a2;
  uint64_t v8 = a3;
  id v5 = v7;
  sub_10055AB3C(a1 + 10, v6);
}

void sub_10055AD58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10055AD70(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 8LL))( a2,  *(void *)(a1 + 32),  *(void *)(a1 + 40));
}

void sub_10055AD88(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100404FE8();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10055AE38;
  v6[3] = &unk_1008800B8;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100405384(v4, v6);
}

void sub_10055AE18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10055AE38(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 40) + 40LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10055AEBC;
  v3[3] = &unk_1008A16D0;
  id v4 = v1;
  sub_10055AB3C(v2, v3);
}

void sub_10055AEA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

uint64_t sub_10055AEBC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 40LL))(a2, *(void *)(a1 + 32));
}

void sub_10055AED4(uint64_t a1, void *a2, __int16 a3)
{
  id v5 = a2;
  uint64_t v6 = sub_100404FE8();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_10055AF8C;
  v8[3] = &unk_100890D88;
  uint64_t v10 = a1;
  id v7 = v5;
  id v9 = v7;
  __int16 v11 = a3;
  sub_100405384(v6, v8);
}

void sub_10055AF6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10055AF8C(uint64_t a1)
{
}

void sub_10055AF9C(os_unfair_lock_s *a1, void *a2, __int16 a3)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10055B038;
  v6[3] = &unk_1008A1720;
  id v7 = a2;
  __int16 v8 = a3;
  id v5 = v7;
  sub_10055AB3C(a1 + 10, v6);
}

void sub_10055B020( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10055B038(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 24LL))( a2,  *(void *)(a1 + 32),  *(unsigned __int16 *)(a1 + 40));
}

void sub_10055B054(id a1)
{
  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_1008A1878);
  }
  sub_10055B08C();
}

uint64_t sub_10055B08C()
{
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_1008A18F0);
  }
  return (*(uint64_t (**)(void *))(*(void *)off_1008D67C0 + 272LL))(off_1008D67C0);
}

void sub_10055B0D4(uint64_t a1)
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_1008A1858);
  }
  id v2 = sub_10059A5A8((uint64_t)off_1008D5F08, *(void *)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (v3) {
    goto LABEL_4;
  }
  if (!*(void *)(a1 + 40)) {
    goto LABEL_13;
  }
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A1838);
  }
  sub_1005C8684((uint64_t)off_1008D5F28, *(void *)(a1 + 40), 0, 1u, 0LL, 0LL, (unsigned __int8 *)&v8);
  uint64_t v6 = sub_100241F94((const unsigned __int8 *)&v8);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v3)
  {
LABEL_4:
    id v4 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_INFO))
    {
      int v8 = 138543362;
      id v9 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Dispatching indication for device %{public}@",  (uint8_t *)&v8,  0xCu);
    }

    if (qword_1008D5F60 != -1) {
      dispatch_once(&qword_1008D5F60, &stru_1008A1878);
    }
    sub_10055B2D8( qword_1008D5F58,  v3,  *(unsigned __int16 *)(a1 + 80),  a1 + 48,  v5,  *(unsigned __int8 *)(a1 + 82),  *(void *)(a1 + 72));
  }

  else
  {
LABEL_13:
    id v7 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "incoming indication from a device that is no longer connected. Ignoring.",  (uint8_t *)&v8,  2u);
    }

    id v3 = 0LL;
  }
}

void sub_10055B2C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10055B2D8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  id v12 = a2;
  if (v12)
  {
    uint64_t v75 = 0LL;
    __int16 v76 = 0LL;
    sub_100241F90(&v80, v12);
    sub_100555864(a1, (unsigned __int8 *)&v80, 0, &v75);
    if (!v75)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
        sub_1006920D8();
      }
      goto LABEL_104;
    }

    uint64_t v13 = sub_1004438FC(v75, a3);
    int v14 = v13;
    if (v13)
    {
      uint64_t v15 = v13[1];
      int v16 = *(_DWORD *)(v15 + 20);
      __n128 v80 = *(__n128 *)(v15 + 4);
      LODWORD(v81[0]) = v16;
      sub_100634334((__n128 *)v93, &v80);
      int v92 = 0;
      __int128 v91 = xmmword_1006C3FD8;
      if (!sub_1001BEC7C(v17, (unsigned __int8 *)&v91))
      {
        uint64_t v49 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
        {
          sub_100531170(v14, (std::string *)&v80);
          sub_100692280((uint64_t)v12, (char *)&v80, (uint8_t *)v93, v49);
        }

        goto LABEL_104;
      }

      sub_10002EAC8((uint64_t)(v14 + 9), a4);
    }

    else
    {
      uint64_t v18 = operator new(0x58uLL);
      sub_10038BEAC((uint64_t)v18, a3, a4);
      sub_100442C20(v75, (uint64_t)v18, 1);
      (*(void (**)(void *))(*(void *)v18 + 8LL))(v18);
    }

    uint64_t v19 = v75;
    __int128 v89 = xmmword_1006BD978;
    int v90 = 0;
    sub_100634334(&v80, (__n128 *)&v89);
    __int128 v87 = xmmword_1006BD9C8;
    int v88 = 0;
    sub_100634334((__n128 *)v93, (__n128 *)&v87);
    uint64_t v20 = sub_1004439C4(v19, (unsigned __int8 *)&v80, (unsigned __int8 *)v93);
    uint64_t v86 = 0LL;
    __int128 v84 = 0u;
    memset(v85, 0, sizeof(v85));
    *(_OWORD *)__n128 __p = 0u;
    __int128 v83 = 0u;
    memset(v81, 0, sizeof(v81));
    __n128 v80 = 0u;
    sub_1001FCFC8((uint64_t)&v80);
    if (v20 && *(unsigned __int16 *)(v20 + 74) == (_DWORD)a3 && sub_10056AAD8(a4) == 4)
    {
      memset(v93, 0, 32);
      uint64_t v21 = sub_10040F738((uint64_t)v93, 0, a4);
      unsigned int v22 = sub_10040F7FC(v21);
      unsigned int v23 = sub_10040F7FC((uint64_t)v93);
      uint64_t v24 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v22;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v23;
        HIWORD(buf.__r_.__value_.__r.__words[1]) = 2114;
        buf.__r_.__value_.__l.__cap_ = (std::string::size_type)v12;
        __int16 v78 = 1024;
        int v79 = a6;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Received service changed notification for [0x%04x;0x%04x] for device %{public}@ wakeUp:%d",
          (uint8_t *)&buf,
          0x1Eu);
      }

      sub_100241F90(&buf, v12);
      if (a1 + 200 == sub_1001FDB10(a1 + 192, (unsigned __int8 *)&buf))
      {
        uint64_t v59 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
          sub_1006921F8(v22, v23, v59);
        }
      }

      else
      {
        int v67 = (os_unfair_lock_s *)a1;
        __int128 v68 = v12;
        sub_100241F90(&buf, v12);
        uint64_t v25 = sub_10055478C(a1 + 192, (unsigned __int8 *)&buf);
        uint64_t v26 = (uint64_t **)(v25 + 112);
        uint64_t v27 = *(void *)(v25 + 112);
        uint64_t v28 = (uint64_t *)(v25 + 120);
        if (v27 != v25 + 120)
        {
          do
          {
            unsigned int v29 = *(unsigned __int16 *)(v27 + 32);
            if (v29 < v22 || v29 > v23)
            {
              unint64_t v31 = *(uint64_t **)(v27 + 8);
              if (v31)
              {
                do
                {
                  uint64_t v32 = v31;
                  unint64_t v31 = (uint64_t *)*v31;
                }

                while (v31);
              }

              else
              {
                do
                {
                  uint64_t v32 = *(uint64_t **)(v27 + 16);
                  BOOL v33 = *v32 == v27;
                  uint64_t v27 = (uint64_t)v32;
                }

                while (!v33);
              }
            }

            else
            {
              unint64_t v34 = *(void **)(v27 + 40);
              if (v34 != (void *)(v27 + 48))
              {
                do
                {
                  sub_1004949D8(v34[4], &buf);
                  if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    p_std::string buf = &buf;
                  }
                  else {
                    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
                  }
                  if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    uint64_t size = buf.__r_.__value_.__s.__size_;
                  }
                  else {
                    uint64_t size = buf.__r_.__value_.__l.__size_;
                  }
                  uint64_t v37 = sub_1001FD17C(v81, (uint64_t)p_buf, size);
                  sub_1001FD17C(v37, (uint64_t)",", 1LL);
                  uint64_t v38 = (void *)v34[1];
                  if (v38)
                  {
                    do
                    {
                      uint64_t v39 = v38;
                      uint64_t v38 = (void *)*v38;
                    }

                    while (v38);
                  }

                  else
                  {
                    do
                    {
                      uint64_t v39 = (void *)v34[2];
                      BOOL v33 = *v39 == (void)v34;
                      unint64_t v34 = v39;
                    }

                    while (!v33);
                  }

                  unint64_t v34 = v39;
                }

                while (v39 != (void *)(v27 + 48));
              }

              uint64_t v32 = sub_10032982C(v26, v27);
            }

            uint64_t v27 = (uint64_t)v32;
          }

          while (v32 != v28);
        }

        sub_100443F14(v75, v22, v23);
        v71[0] = _NSConcreteStackBlock;
        v71[1] = 3221225472LL;
        v71[2] = sub_10055BCFC;
        v71[3] = &unk_1008A1798;
        id v12 = v68;
        id v72 = v68;
        __int16 v73 = v22;
        __int16 v74 = v23;
        sub_10055AB3C(v67 + 10, v71);
      }

      v93[0].__r_.__value_.__l.__size_ = (std::string::size_type)&off_10087FAA8;
      if (v93[0].__r_.__value_.__l.__cap_) {
        sub_1002CD254((unsigned int *)v93[0].__r_.__value_.__l.__cap_);
      }
    }

    else
    {
      sub_100241F90(v93, v12);
      if (a1 + 200 == sub_1001FDB10(a1 + 192, (unsigned __int8 *)v93))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
          sub_100692138();
        }
      }

      else
      {
        sub_100241F90(v93, v12);
        uint64_t v40 = sub_10055478C(a1 + 192, (unsigned __int8 *)v93);
        uint64_t v43 = *(void *)(v40 + 120);
        uint64_t v41 = v40 + 120;
        uint64_t v42 = v43;
        if (!v43) {
          goto LABEL_112;
        }
        unsigned __int16 v44 = a3 - 1;
        uint64_t v45 = v41;
        do
        {
          unsigned int v46 = *(unsigned __int16 *)(v42 + 32);
          BOOL v47 = v46 >= v44;
          if (v46 >= v44) {
            unint64_t v48 = (uint64_t *)v42;
          }
          else {
            unint64_t v48 = (uint64_t *)(v42 + 8);
          }
          if (v47) {
            uint64_t v45 = v42;
          }
          uint64_t v42 = *v48;
        }

        while (*v48);
        if (v45 != v41 && *(unsigned __int16 *)(v45 + 32) <= v44)
        {
          if (*(void *)(v45 + 56))
          {
            BOOL v50 = *(void **)(v45 + 40);
            char v51 = (void *)(v45 + 48);
            if (v50 != (void *)(v45 + 48))
            {
              do
              {
                unint64_t v52 = v50[4];
                if (qword_1008D67C8 != -1) {
                  dispatch_once(&qword_1008D67C8, &stru_1008A18F0);
                }
                sub_100287308((uint64_t)off_1008D67C0, v12, v52, a3, a4, a7);
                sub_1004949D8(v52, v93);
                if ((v93[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  unint64_t v53 = v93;
                }
                else {
                  unint64_t v53 = (std::string *)v93[0].__r_.__value_.__r.__words[0];
                }
                if ((v93[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  uint64_t v54 = v93[0].__r_.__value_.__s.__size_;
                }
                else {
                  uint64_t v54 = v93[0].__r_.__value_.__l.__size_;
                }
                uint64_t v55 = sub_1001FD17C(v81, (uint64_t)v53, v54);
                sub_1001FD17C(v55, (uint64_t)",", 1LL);
                uint64_t v56 = (void *)v50[1];
                if (v56)
                {
                  do
                  {
                    unint64_t v57 = v56;
                    uint64_t v56 = (void *)*v56;
                  }

                  while (v56);
                }

                else
                {
                  do
                  {
                    unint64_t v57 = (void *)v50[2];
                    BOOL v33 = *v57 == (void)v50;
                    BOOL v50 = v57;
                  }

                  while (!v33);
                }

                BOOL v50 = v57;
              }

              while (v57 != v51);
            }

            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
            std::ostream::sentry::sentry(&buf, v81);
            uint64_t v58 = (char *)v81 + *(void *)(*(void *)&v81[0] - 24LL);
            if ((v58[32] & 5) == 0)
            {
              (*(void (**)(std::string *__return_ptr, void, uint64_t, uint64_t, uint64_t))(**((void **)v58 + 5) + 32LL))( v93,  *((void *)v58 + 5),  -1LL,  1LL,  16LL);
              if (v94 == -1) {
                std::ios_base::clear( (std::ios_base *)((char *)v81 + *(void *)(*(void *)&v81[0] - 24LL)),  *(_DWORD *)((char *)&v81[2] + *(void *)(*(void *)&v81[0] - 24LL)) | 4);
              }
            }

            std::ostream::sentry::~sentry(&buf);
            v93[0].__r_.__value_.__s.__data_[0] = 0;
            sub_1001FD17C(v81, (uint64_t)v93, 1LL);
          }
        }

        else
        {
LABEL_112:
          if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
            sub_100692198();
          }
        }
      }
    }

    if (a6)
    {
      uint64_t v60 = sub_1002E9074();
      std::stringbuf::str(v93, (const std::stringbuf *)((char *)v81 + 8));
      if ((v93[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __n128 v61 = v93;
      }
      else {
        __n128 v61 = (std::string *)v93[0].__r_.__value_.__r.__words[0];
      }
      __n128 v62 = *(unsigned int **)(a4 + 8);
      int v69 = &off_10087FAA8;
      int v70 = v62;
      if (v62) {
        sub_1002CD1E0((uint64_t)v62);
      }
      (*(void (**)(uint64_t, uint64_t, std::string *, id, uint64_t (***)()))(*(void *)v60 + 40LL))( v60,  4LL,  v61,  v12,  &v69);
      int v69 = &off_10087FAA8;
      if (v70) {
        sub_1002CD254(v70);
      }
    }

    *(unint64_t *)((char *)v80.n128_u64
    *(void *)&v81[0] = v63;
    if (SHIBYTE(v83) < 0) {
      operator delete(__p[1]);
    }
    std::streambuf::~streambuf((char *)v81 + 8);
    std::ios::~ios(v85);
LABEL_104:
    __n128 v64 = v76;
    if (v76)
    {
      p_shared_owners = (unint64_t *)&v76->__shared_owners_;
      do
        unint64_t v66 = __ldaxr(p_shared_owners);
      while (__stlxr(v66 - 1, p_shared_owners));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }

    goto LABEL_109;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
    sub_1006920AC();
  }
LABEL_109:
}

void sub_10055BBC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, char a30)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10055BCFC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a2 + 16LL))( a2,  *(void *)(a1 + 32),  *(unsigned __int16 *)(a1 + 40),  *(unsigned __int16 *)(a1 + 42));
}

void sub_10055BD1C(void *a1)
{
  uint64_t v1 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "statedump: ------------------- GATT Gateway --------------------",  buf,  2u);
    uint64_t v1 = (os_log_s *)qword_1008F75B0;
  }

  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: Active commands:", buf, 2u);
  }

  id v2 = (const unsigned __int8 *)a1[24];
  uint64_t v54 = (const unsigned __int8 *)(a1 + 25);
  if (v2 != (const unsigned __int8 *)(a1 + 25))
  {
    do
    {
      if (v2[152])
      {
        id v3 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
        {
          memset(buf, 0, 37);
          uuid_unparse_upper(v2 + 32, (char *)buf);
          sub_10002418C(__p, (char *)buf);
          id v4 = v61 >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = v4;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", buf, 0xCu);
          if (v61 < 0) {
            operator delete(*(void **)__p);
          }
        }
      }

      uint64_t v5 = (const unsigned __int8 *)*((void *)v2 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(const unsigned __int8 **)v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          uint64_t v6 = (const unsigned __int8 *)*((void *)v2 + 2);
          BOOL v7 = *(void *)v6 == (void)v2;
          id v2 = v6;
        }

        while (!v7);
      }

      id v2 = v6;
    }

    while (v6 != v54);
  }

  int v8 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "statedump: Pending commands:", buf, 2u);
  }

  id v9 = (const unsigned __int8 *)a1[24];
  if (v9 != v54)
  {
    do
    {
      if (*((void *)v9 + 12))
      {
        uint64_t v10 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
        {
          memset(buf, 0, 37);
          uuid_unparse_upper(v9 + 32, (char *)buf);
          sub_10002418C(__p, (char *)buf);
          if (v61 >= 0) {
            __int16 v11 = __p;
          }
          else {
            __int16 v11 = *(_BYTE **)__p;
          }
          uint64_t v12 = *((void *)v9 + 12);
          uint64_t v13 = "s";
          if (v12 == 1) {
            uint64_t v13 = "";
          }
          if (v9[153]) {
            int v14 = "flowing";
          }
          else {
            int v14 = "frozen";
          }
          *(_DWORD *)std::string buf = 136446978;
          *(void *)&uint8_t buf[4] = v11;
          *(_WORD *)&_BYTE buf[12] = 2048;
          *(void *)&buf[14] = v12;
          *(_WORD *)&_BYTE buf[22] = 2082;
          *(void *)&uint8_t buf[24] = v13;
          *(_WORD *)&_BYTE buf[32] = 2082;
          *(void *)&buf[34] = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "statedump:    %{public}s - %lu command%{public}s (%{public}s)",  buf,  0x2Au);
          if (v61 < 0) {
            operator delete(*(void **)__p);
          }
        }
      }

      uint64_t v15 = (const unsigned __int8 *)*((void *)v9 + 1);
      if (v15)
      {
        do
        {
          int v16 = v15;
          uint64_t v15 = *(const unsigned __int8 **)v15;
        }

        while (v15);
      }

      else
      {
        do
        {
          int v16 = (const unsigned __int8 *)*((void *)v9 + 2);
          BOOL v7 = *(void *)v16 == (void)v9;
          id v9 = v16;
        }

        while (!v7);
      }

      id v9 = v16;
    }

    while (v16 != v54);
  }

  uint64_t v17 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "statedump: Device databases:", buf, 2u);
  }

  uint64_t v18 = (const unsigned __int8 *)a1[27];
  if (v18 != (const unsigned __int8 *)(a1 + 28))
  {
    do
    {
      uint64_t v19 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v18 + 32, (char *)buf);
        sub_10002418C(__p, (char *)buf);
        uint64_t v20 = v61 >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", buf, 0xCu);
        if (v61 < 0) {
          operator delete(*(void **)__p);
        }
      }

      sub_100444430(*((void *)v18 + 6), (uint64_t)"      ");
      uint64_t v21 = (unsigned __int8 *)*((void *)v18 + 1);
      if (v21)
      {
        do
        {
          unsigned int v22 = (const unsigned __int8 **)v21;
          uint64_t v21 = *(unsigned __int8 **)v21;
        }

        while (v21);
      }

      else
      {
        do
        {
          unsigned int v22 = (const unsigned __int8 **)*((void *)v18 + 2);
          BOOL v7 = *v22 == v18;
          uint64_t v18 = (const unsigned __int8 *)v22;
        }

        while (!v7);
      }

      uint64_t v18 = (const unsigned __int8 *)v22;
    }

    while (v22 != a1 + 28);
  }

  unsigned int v23 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "statedump: Client subscriptions:", buf, 2u);
  }

  uint64_t v24 = (const unsigned __int8 *)a1[24];
  if (v24 != v54)
  {
    do
    {
      uint64_t v25 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v24 + 32, (char *)buf);
        sub_10002418C(__p, (char *)buf);
        uint64_t v26 = __p;
        if (v61 < 0) {
          uint64_t v26 = *(_BYTE **)__p;
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", buf, 0xCu);
        if (v61 < 0) {
          operator delete(*(void **)__p);
        }
      }

      uint64_t v27 = (const unsigned __int8 *)*((void *)v24 + 20);
      if (v27 != v24 + 168)
      {
        do
        {
          uint64_t v28 = (os_log_s *)qword_1008F75B0;
          if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
          {
            int v29 = *((unsigned __int16 *)v27 + 16);
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v29;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "statedump:       0x%04x", buf, 8u);
          }

          uint64_t v30 = (const unsigned __int8 *)*((void *)v27 + 5);
          if (v30 != v27 + 48)
          {
            do
            {
              unint64_t v31 = (os_log_s *)qword_1008F75B0;
              if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
              {
                sub_100494958(*((void *)v30 + 4), (uint64_t)buf);
                uint64_t v32 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
                *(_DWORD *)__n128 __p = 136446210;
                *(void *)&__p[4] = v32;
                _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "statedump:          %{public}s",  __p,  0xCu);
              }

              BOOL v33 = (const unsigned __int8 *)*((void *)v30 + 1);
              if (v33)
              {
                do
                {
                  unint64_t v34 = v33;
                  BOOL v33 = *(const unsigned __int8 **)v33;
                }

                while (v33);
              }

              else
              {
                do
                {
                  unint64_t v34 = (const unsigned __int8 *)*((void *)v30 + 2);
                  BOOL v7 = *(void *)v34 == (void)v30;
                  uint64_t v30 = v34;
                }

                while (!v7);
              }

              uint64_t v30 = v34;
            }

            while (v34 != v27 + 48);
          }

          uint64_t v35 = (const unsigned __int8 *)*((void *)v27 + 1);
          if (v35)
          {
            do
            {
              uint64_t v36 = v35;
              uint64_t v35 = *(const unsigned __int8 **)v35;
            }

            while (v35);
          }

          else
          {
            do
            {
              uint64_t v36 = (const unsigned __int8 *)*((void *)v27 + 2);
              BOOL v7 = *(void *)v36 == (void)v27;
              uint64_t v27 = v36;
            }

            while (!v7);
          }

          uint64_t v27 = v36;
        }

        while (v36 != v24 + 168);
      }

      uint64_t v37 = (const unsigned __int8 *)*((void *)v24 + 1);
      if (v37)
      {
        do
        {
          uint64_t v38 = v37;
          uint64_t v37 = *(const unsigned __int8 **)v37;
        }

        while (v37);
      }

      else
      {
        do
        {
          uint64_t v38 = (const unsigned __int8 *)*((void *)v24 + 2);
          BOOL v7 = *(void *)v38 == (void)v24;
          uint64_t v24 = v38;
        }

        while (!v7);
      }

      uint64_t v24 = v38;
    }

    while (v38 != v54);
  }

  uint64_t v39 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "statedump: Built-in services detected:",  buf,  2u);
  }

  uint64_t v40 = (const unsigned __int8 *)a1[31];
  if (v40 != (const unsigned __int8 *)(a1 + 32))
  {
    do
    {
      uint64_t v41 = (const unsigned __int8 *)*((void *)v40 + 6);
      if (v41 != v40 + 56)
      {
        uint64_t v42 = (os_log_s *)qword_1008F75B0;
        do
        {
          __int128 v55 = *(_OWORD *)(v41 + 28);
          int v56 = *((_DWORD *)v41 + 11);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            sub_1006344B4((uint64_t)&v55, buf);
            int v43 = (char)buf[23];
            unsigned __int16 v44 = *(uint8_t **)buf;
            uint64_t v45 = sub_100241F94(v40 + 32);
            uint64_t v46 = objc_claimAutoreleasedReturnValue(v45);
            BOOL v47 = (void *)v46;
            *(_DWORD *)__n128 __p = 136315394;
            unint64_t v48 = buf;
            if (v43 < 0) {
              unint64_t v48 = v44;
            }
            *(void *)&__p[4] = v48;
            __int16 v59 = 2112;
            uint64_t v60 = v46;
            _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Detected service %s on device %@ and notified",  __p,  0x16u);

            uint64_t v42 = (os_log_s *)qword_1008F75B0;
          }

          uint64_t v49 = (const unsigned __int8 *)*((void *)v41 + 1);
          if (v49)
          {
            do
            {
              BOOL v50 = v49;
              uint64_t v49 = *(const unsigned __int8 **)v49;
            }

            while (v49);
          }

          else
          {
            do
            {
              BOOL v50 = (const unsigned __int8 *)*((void *)v41 + 2);
              BOOL v7 = *(void *)v50 == (void)v41;
              uint64_t v41 = v50;
            }

            while (!v7);
          }

          uint64_t v41 = v50;
        }

        while (v50 != v40 + 56);
      }

      char v51 = (unsigned __int8 *)*((void *)v40 + 1);
      if (v51)
      {
        do
        {
          unint64_t v52 = (const unsigned __int8 **)v51;
          char v51 = *(unsigned __int8 **)v51;
        }

        while (v51);
      }

      else
      {
        do
        {
          unint64_t v52 = (const unsigned __int8 **)*((void *)v40 + 2);
          BOOL v7 = *v52 == v40;
          uint64_t v40 = (const unsigned __int8 *)v52;
        }

        while (!v7);
      }

      uint64_t v40 = (const unsigned __int8 *)v52;
    }

    while (v52 != a1 + 32);
  }

void sub_10055C5E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10055C614(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = sub_100241F90(a1, *a2);
  *(_WORD *)(result + 16) = *(_WORD *)a3;
  *(void *)(result + 24) = *(void *)(a3 + 8);
  *(void *)(result + 32) = *(void *)(a3 + 16);
  *(void *)(result + 40) = *(void *)(a3 + 24);
  *(void *)(result + sub_100242FAC(v15 - 48) = *(void *)(a3 + 32);
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(result + 56) = *(void *)(a3 + 40);
  *(void *)(result + 64) = *(void *)(a3 + 48);
  *(void *)(a3 + 40) = 0LL;
  *(void *)(a3 + sub_100242FAC(v15 - 48) = 0LL;
  *(void *)(result + 72) = *(void *)(a3 + 56);
  *(void *)(result + 80) = *(void *)(a3 + 64);
  *(void *)(result + 88) = *(void *)(a3 + 72);
  *(void *)(result + sub_100242FAC(v22 - 96) = *(void *)(a3 + 80);
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)(result + 104) = *(void *)(a3 + 88);
  *(void *)(result + 112) = *(void *)(a3 + 96);
  *(void *)(a3 + 88) = 0LL;
  *(void *)(a3 + sub_100242FAC(v22 - 96) = 0LL;
  __int16 v5 = *(_WORD *)(a3 + 104);
  *(_BYTE *)(result + 122) = *(_BYTE *)(a3 + 106);
  *(_WORD *)(result + 120) = v5;
  *(void *)(result + 128) = *(void *)(a3 + 112);
  uint64_t v6 = (void *)(a3 + 120);
  uint64_t v7 = *(void *)(a3 + 120);
  *(void *)(result + 136) = v7;
  uint64_t v8 = result + 136;
  uint64_t v9 = *(void *)(a3 + 128);
  *(void *)(result + 144) = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *(void *)(a3 + 112) = v6;
    *uint64_t v6 = 0LL;
    *(void *)(a3 + 128) = 0LL;
  }

  else
  {
    *(void *)(result + 128) = v8;
  }

  return result;
}

uint64_t sub_10055C704(void *a1)
{
  id v2 = (void **)a1[1];
  id v3 = (void **)a1[2];
  if (v3 == v2)
  {
    id v4 = a1 + 5;
    id v3 = (void **)a1[1];
  }

  else
  {
    id v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 >> 9];
    uint64_t v7 = (char *)*v6 + 8 * (v5 & 0x1FF);
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * ((a1[5] + v5) & 0x1FF);
    if (v7 != (char *)v8)
    {
      do
      {
        sub_10055CD68((void **)v7, 0LL);
        v7 += 8;
        if (v7 - (_BYTE *)*v6 == 4096)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }

      while (v7 != (char *)v8);
      id v2 = (void **)a1[1];
      id v3 = (void **)a1[2];
    }
  }

  *id v4 = 0LL;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      id v3 = (void **)a1[2];
      id v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 256LL;
  }

  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 512LL;
  }

  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    uint64_t v13 = *v2++;
    operator delete(v13);
  }

  return sub_10023DF04((uint64_t)a1);
}

void sub_10055C82C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10055C82C(a1, *a2);
    sub_10055C82C(a1, a2[1]);
    sub_10055C874((uint64_t)(a2 + 4));
    operator delete(a2);
  }

uint64_t sub_10055C874(uint64_t a1)
{
  return sub_10055C704((void *)(a1 + 24));
}

void sub_10055C8A8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10055C8A8(a1, *a2);
    sub_10055C8A8(a1, a2[1]);
    sub_100032BD4((uint64_t)(a2 + 6));
    operator delete(a2);
  }

void sub_10055C8F0(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_10055C920(_Unwind_Exception *a1)
{
}

void sub_10055C934(id a1)
{
  uint64_t v1 = operator new(0x50uLL);
  sub_100411DB0((uint64_t)v1);
  qword_1008D9270 = (uint64_t)v1;
}

void sub_10055C964(_Unwind_Exception *a1)
{
}

void sub_10055C978(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_10055C9A8(_Unwind_Exception *a1)
{
}

void sub_10055C9BC(id a1)
{
  uint64_t v1 = operator new(0xEB0uLL);
  sub_10061991C();
  qword_1008D5F18 = (uint64_t)v1;
}

void sub_10055C9EC(_Unwind_Exception *a1)
{
}

void sub_10055CA00(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_10055CA30(_Unwind_Exception *a1)
{
}

uint64_t *sub_10055CA44(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3)
{
  uint64_t v10 = 0LL;
  unint64_t v5 = (uint64_t **)sub_1001FD824((uint64_t)a1, &v10, uu1);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    memset(v9, 0, sizeof(v9));
    sub_10055CAE0((uint64_t)a1, a3, v9);
    sub_100029630(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0LL;
    sub_10055CC44((uint64_t)v9, 0LL);
  }

  return v6;
}

uint64_t sub_10055CAE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  uint64_t v6 = operator new(0xB8uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uint64_t result = sub_10055CB50((uint64_t)v6 + 32, a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_10055CB38(_Unwind_Exception *a1)
{
}

uint64_t sub_10055CB50(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + sub_100242FAC(v15 - 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + sub_100242FAC(v22 - 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0LL;
  *(void *)(a2 + 112) = 0LL;
  __int16 v4 = *(_WORD *)(a2 + 120);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  *(_WORD *)(a1 + 120) = v4;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v5 = (void *)(a2 + 136);
  uint64_t v6 = *(void *)(a2 + 136);
  *(void *)(a1 + 136) = v6;
  uint64_t v7 = a1 + 136;
  uint64_t v8 = *(void *)(a2 + 144);
  *(void *)(a1 + 144) = v8;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    *(void *)(a2 + 128) = v5;
    *uint64_t v5 = 0LL;
    *(void *)(a2 + 144) = 0LL;
  }

  else
  {
    *(void *)(a1 + 128) = v7;
  }

  return a1;
}

void sub_10055CC44(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_10055C874((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

uint64_t sub_10055CC88(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t v3 = sub_1001FDB10((uint64_t)a1, a2);
  sub_1004F57A0(a1, v3);
  return 1LL;
}

uint64_t sub_10055CCCC(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t v3 = (uint64_t *)sub_1001FDB10((uint64_t)a1, a2);
  __int16 v4 = v3;
  sub_1001FDBCC(a1, v3);
  sub_10055C874((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1LL;
}

void sub_10055CD24(id a1)
{
  uint64_t v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_10055CD54(_Unwind_Exception *a1)
{
}

void sub_10055CD68(void **a1, void *a2)
{
  id v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = v2[3];
    v2[3] = 0LL;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    operator delete(v2);
  }

uint64_t sub_10055CDB4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)a1 = a1 + 8;
  sub_10055CE08((char *)a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_10055CDF0(_Unwind_Exception *a1)
{
}

char *sub_10055CE08(char *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    __int16 v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t *)(result + 8);
    do
    {
      uint64_t result = sub_10055CE8C(v5, v6, v4 + 28, (uint64_t)(v4 + 28));
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(unsigned __int8 **)v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (unsigned __int8 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          __int16 v4 = v8;
        }

        while (!v9);
      }

      __int16 v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

char *sub_10055CE8C(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v10 = 0LL;
  unint64_t v11 = 0LL;
  uint64_t v6 = sub_10055CF1C(a1, a2, &v11, &v10, a3);
  uint64_t v7 = *(char **)v6;
  if (!*(void *)v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v7 + 28) = *(_OWORD *)a4;
    *((_DWORD *)v7 + 11) = *(_DWORD *)(a4 + 16);
    sub_100029630(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }

  return v7;
}

unsigned __int8 *sub_10055CF1C( void *a1, uint64_t *a2, unsigned __int8 **a3, uint64_t *a4, unsigned __int8 *a5)
{
  BOOL v9 = (unsigned __int8 *)(a1 + 1);
  if (a1 + 1 == a2 || sub_10063447C(a5, (unsigned __int8 *)a2 + 28))
  {
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v12 = (unsigned __int8 *)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 8;
      }

      else
      {
        *a3 = (unsigned __int8 *)a2;
        return (unsigned __int8 *)a2;
      }
    }

    unint64_t v11 = (unsigned __int8 *)*a2;
    if (*a2)
    {
      do
      {
        uint64_t v12 = v11;
        unint64_t v11 = (unsigned __int8 *)*((void *)v11 + 1);
      }

      while (v11);
    }

    else
    {
      int v16 = a2;
      do
      {
        uint64_t v12 = (unsigned __int8 *)v16[2];
        BOOL v17 = *(void *)v12 == (void)v16;
        int v16 = (uint64_t *)v12;
      }

      while (v17);
    }

    if (sub_10063447C(v12 + 28, a5)) {
      goto LABEL_16;
    }
    return (unsigned __int8 *)sub_10038D024((uint64_t)a1, a3, a5);
  }

  if (sub_10063447C((unsigned __int8 *)a2 + 28, a5))
  {
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      int v14 = (unsigned __int8 *)a2[1];
      do
      {
        uint64_t v15 = v14;
        int v14 = *(unsigned __int8 **)v14;
      }

      while (v14);
    }

    else
    {
      uint64_t v18 = (unsigned __int8 *)a2;
      do
      {
        uint64_t v15 = (unsigned __int8 *)*((void *)v18 + 2);
        BOOL v17 = *(void *)v15 == (void)v18;
        uint64_t v18 = v15;
      }

      while (!v17);
    }

    if (v15 != v9)
    {
      if (!sub_10063447C(a5, v15 + 28)) {
        return (unsigned __int8 *)sub_10038D024((uint64_t)a1, a3, a5);
      }
      uint64_t v13 = *a4;
    }

    if (v13)
    {
      *a3 = v15;
      return v15;
    }

    else
    {
      *a3 = (unsigned __int8 *)a2;
    }

    return (unsigned __int8 *)a4;
  }

  *a3 = (unsigned __int8 *)a2;
  *a4 = (uint64_t)a2;
  return (unsigned __int8 *)a4;
}

uint64_t *sub_10055D0A0( uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0LL;
  uint64_t v6 = (uint64_t **)sub_1001FD824((uint64_t)a1, &v9, uu1);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_10055D140((uint64_t)a1, a4, v8);
    sub_100029630(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }

  return result;
}

void sub_10055D140( uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[2] = 0LL;
  a3[1] = 0LL;
  uint64_t v6 = a3 + 1;
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  *a3 = v7;
  *uint64_t v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v7 + 32, *a2);
  *((void *)v7 + 7) = 0LL;
  *((void *)v7 + 8) = 0LL;
  *((void *)v7 + 6) = v7 + 56;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_10055D1B8(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_1004F5910(v2, v3);
  _Unwind_Resume(a1);
}

void sub_10055D1D4(id a1)
{
  uint64_t v1 = operator new(0x110uLL);
  sub_1005512C0((uint64_t)v1);
  qword_1008D5F58 = (uint64_t)v1;
}

void sub_10055D204(_Unwind_Exception *a1)
{
}

void sub_10055D218(id a1)
{
  qword_1008D9290 = (uint64_t)operator new(1uLL);
}

void *sub_10055D238(void *a1, uint64_t a2, __int16 a3, char a4, uint64_t a5)
{
  uint64_t v9 = sub_10053CE50((uint64_t)a1, a2);
  *(void *)uint64_t v9 = off_1008A0BC8;
  *(void *)(v9 + sub_100242FAC(v15 - 48) = &off_1008A0C00;
  *(_WORD *)(v9 + 56) = a3;
  *(_BYTE *)(v9 + 58) = a4;
  uint64_t v10 = *(void *)(a5 + 8);
  a1[8] = &off_10087FAA8;
  a1[9] = v10;
  if (v10) {
    sub_1002CD1E0(v10);
  }
  a1[10] = 0LL;
  return a1;
}

void sub_10055D2AC(_Unwind_Exception *a1)
{
}

uint64_t **sub_10055D2C0(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x40uLL);
    unsigned __int8 v11[16] = **a4;
    *((void *)v11 + 7) = 0LL;
    *((void *)v11 + 6) = 0LL;
    *((void *)v11 + 5) = v11 + 24;
    sub_100029630(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

uint64_t sub_10055D38C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5 = (void *)sub_10053CE50(a1, a2);
  *uint64_t v5 = off_1008A0A88;
  v5[6] = &off_1008A0AC0;
  v5[7] = 0LL;
  uint64_t v6 = v5 + 8;
  if (*((char *)a3 + 23) < 0)
  {
    sub_100024238(v6, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v7 = *a3;
    _DWORD v6[2] = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }

  return a1;
}

void sub_10055D3F4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_1005438A8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10055D420( uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0LL;
  uint64_t v6 = (uint64_t **)sub_1001FD824((uint64_t)a1, &v9, uu1);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_10055D4C0((uint64_t)a1, a4, v8);
    sub_100029630(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }

  return result;
}

void sub_10055D4C0( uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[2] = 0LL;
  a3[1] = 0LL;
  uint64_t v6 = a3 + 1;
  __int128 v7 = (unsigned __int8 *)operator new(0x48uLL);
  *a3 = v7;
  *uint64_t v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v7 + 32, *a2);
  *((void *)v7 + 7) = 0LL;
  *((void *)v7 + 8) = 0LL;
  *((void *)v7 + 6) = v7 + 56;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_10055D538(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_1004F5910(v2, v3);
  _Unwind_Resume(a1);
}

uint64_t sub_10055D554(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)a1 = a1 + 8;
  sub_10055CE08((char *)a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_10055D590(_Unwind_Exception *a1)
{
}

uint64_t **sub_10055D5A8(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    __int128 v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    void v7[2] = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    if (v6[1]) {
      unsigned int v8 = (uint64_t *)v6[1];
    }
    else {
      unsigned int v8 = v6;
    }
    uint64_t v15 = result;
    int v16 = v8;
    BOOL v17 = v8;
    if (v8)
    {
      int v16 = sub_10026145C((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          __int128 v10 = *(_OWORD *)((char *)v9 + 28);
          *((_DWORD *)v8 + 11) = *((_DWORD *)v9 + 11);
          *(_OWORD *)((char *)v8 + 28) = v10;
          sub_10055D710(v5, (uint64_t)v8);
          unsigned int v8 = v16;
          BOOL v17 = v16;
          if (v16) {
            int v16 = sub_10026145C((uint64_t)v16);
          }
          unint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              unint64_t v11 = (void *)*v11;
            }

            while (v11);
          }

          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }

            while (!v12);
          }

          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }

        while (a2 != a3);
      }
    }

    uint64_t result = (uint64_t **)sub_1002614B0((uint64_t)&v15);
  }

  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_10055D794(v5, (uint64_t)a2 + 28);
      uint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          int v14 = v13;
          uint64_t v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          int v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }

        while (!v12);
      }

      a2 = v14;
    }

    while (v14 != a3);
  }

  return result;
}

void sub_10055D6FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10055D710(uint64_t **a1, uint64_t a2)
{
  uint64_t v5 = a1 + 1;
  __int16 v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = (uint64_t **)v4;
        __int16 v4 = *v5;
        uint64_t v6 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }

      __int16 v4 = v5[1];
    }

    while (v4);
    uint64_t v6 = v5 + 1;
  }

  else
  {
    uint64_t v6 = a1 + 1;
  }

char *sub_10055D794(uint64_t **a1, uint64_t a2)
{
  __int16 v4 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v4 + 28) = *(_OWORD *)a2;
  *((_DWORD *)v4 + 11) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v5;
        uint64_t v5 = *v6;
        __int128 v7 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }

      uint64_t v5 = v6[1];
    }

    while (v5);
    __int128 v7 = v6 + 1;
  }

  else
  {
    __int128 v7 = a1 + 1;
  }

void sub_10055D834(_Unwind_Exception *a1)
{
}

void sub_10055D848(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = v3 - v2;
  if (v3 == v2) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = ((v3 - v2) << 6) - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x200)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    unsigned int v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9) {
        unint64_t v11 = 1LL;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      uint64_t v46 = a1 + 3;
      __n128 __p = sub_100008BA0(v7, v11);
      int v43 = (char *)__p;
      unsigned __int16 v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      uint64_t v41 = operator new(0x1000uLL);
      sub_10023FEC0(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      int v14 = v44;
      if (v13 == a1[2])
      {
        BOOL v33 = (char *)a1[1];
      }

      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1LL;
              }
              else {
                unint64_t v23 = (v14 - (_BYTE *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_100008BA0((uint64_t)v46, v23);
              uint64_t v26 = v43;
              int v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                int v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v28 = 8 * (v27 >> 3);
                int v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)int v29 = v30;
                  v29 += 8;
                  v28 -= 8LL;
                }

                while (v28);
              }

              unint64_t v31 = __p;
              __n128 __p = v24;
              int v43 = &v24[8 * (v23 >> 2)];
              unsigned __int16 v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                int v14 = v44;
              }
            }

            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                int v14 = v43;
              }

              unsigned int v22 = &v14[-8 * (v19 >> 1)];
              int v14 = &v20[v21];
              int v43 = v22;
              unsigned __int16 v44 = &v20[v21];
            }
          }

          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)int v14 = v32;
          int v14 = v44 + 8;
          v44 += 8;
        }

        while (v13 != a1[2]);
        BOOL v33 = (char *)a1[1];
      }

      uint64_t v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __n128 __p = v36;
      int v43 = v33;
      uint64_t v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      unsigned __int16 v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 256LL;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 512;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        unsigned __int16 v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8LL];
      }
      if (v36) {
        operator delete(v36);
      }
    }

    else
    {
      if (v2 == v9)
      {
        __n128 __p = operator new(0x1000uLL);
        sub_10023FC90(a1, &__p);
        unint64_t v34 = a1[2];
        __n128 __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }

      else
      {
        __n128 __p = operator new(0x1000uLL);
      }

      sub_10023FDA4((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8) {
        uint64_t v35 = 256LL;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 512;
      }
      a1[4] = (void *)v35;
    }
  }

  else
  {
    a1[4] = v6 + 512;
    __n128 __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_10023FDA4((uint64_t)a1, &__p);
  }

void sub_10055DB0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10055DB58(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unsigned int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unsigned int v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_100008BA0(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unsigned int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unsigned int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_10055DE20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_10055DE6C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3) - a2;
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }

  return result;
}

double sub_10055DED4(void *a1, void **a2, void ***a3, void **a4, uint64_t a5)
{
  uint64_t v7 = *(void **)a5;
  unsigned int v8 = *(void ***)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = (void **)(*a1 + 4096LL); ; uint64_t i = v12 + 512)
    {
      uint64_t v14 = 0LL;
      __int128 v15 = 0uLL;
      sub_10055DF74(a2, i, v7, v8, &v14);
      unsigned int v8 = (void **)*((void *)&v15 + 1);
      uint64_t v7 = (void *)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = (void **)*v10++;
      a2 = v12;
    }

    a2 = *a3;
  }

  uint64_t v14 = 0LL;
  __int128 v15 = 0uLL;
  sub_10055DF74(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_10055DF74(void **a1@<X1>, void **a2@<X2>, void *a3@<X3>, void **a4@<X4>, void *a5@<X8>)
{
  uint64_t v5 = a3;
  if (a1 == a2)
  {
    uint64_t v7 = a1;
  }

  else
  {
    uint64_t v7 = a2;
    uint64_t v8 = *a3 - (void)a4 + 4096LL;
    if (a2 - a1 >= v8 >> 3) {
      uint64_t v9 = v8 >> 3;
    }
    else {
      uint64_t v9 = a2 - a1;
    }
    for (uint64_t i = sub_10055E034(a1, &a1[v9], a4); i != v7; uint64_t i = sub_10055E034(i, &i[v14], v12))
    {
      uint64_t v13 = (void **)v5[1];
      ++v5;
      uint64_t v12 = v13;
      uint64_t v14 = v7 - i;
      if (v14 >= 512) {
        uint64_t v14 = 512LL;
      }
    }

    a4 = v11;
    if ((void **)(*v5 + 4096LL) == v11)
    {
      __int128 v15 = (void **)v5[1];
      ++v5;
      a4 = v15;
    }
  }

  *a5 = v7;
  a5[1] = v5;
  a5[2] = a4;
}

void **sub_10055E034(void **a1, void **a2, void **a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v6 = *v4;
      *v4++ = 0LL;
      sub_10055CD68(a3++, v6);
    }

    while (v4 != a2);
    return a2;
  }

  return v4;
}

__n128 sub_10055E090@<Q0>( void *a1@<X1>, void *a2@<X2>, void **a3@<X3>, void *a4@<X4>, void *a5@<X5>, void **a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v21 = 0LL;
    __n128 v22 = 0uLL;
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    __int128 v15 = a5;
    uint64_t v16 = a6;
  }

  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    uint64_t v21 = 0LL;
    __n128 v22 = 0uLL;
    uint64_t v14 = a4;
    __int128 v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_10055E17C(v12, v14, v15, v16, &v21);
      uint64_t v16 = (void **)v22.n128_u64[1];
      __int128 v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = (void *)*v13--;
      uint64_t v12 = v17;
      uint64_t v14 = v17 + 512;
      uint64_t v21 = 0LL;
      __n128 v22 = 0uLL;
    }

    uint64_t v18 = (void *)(*a1 + 4096LL);
    uint64_t v21 = 0LL;
    __n128 v22 = 0uLL;
    uint64_t v19 = a2;
  }

  sub_10055E17C(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10055E17C@<X0>( void *a1@<X1>, void *a2@<X2>, void *a3@<X3>, void **a4@<X4>, void *a5@<X8>)
{
  uint64_t v5 = a3;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }

  else
  {
    uint64_t v8 = a2;
    uint64_t v9 = (uint64_t)a4 - *a3;
    if (a2 - a1 >= v9 >> 3) {
      uint64_t v10 = v9 >> 3;
    }
    else {
      uint64_t v10 = a2 - a1;
    }
    uint64_t v11 = &a2[-v10];
    __n128 result = sub_10055E25C(v11, a2, a4);
    if (v11 != a1)
    {
      do
      {
        uint64_t v14 = *--v5;
        __int128 v15 = (void **)(v14 + 4096);
        uint64_t v16 = v11 - a1;
        if (v16 >= 512) {
          uint64_t v16 = 512LL;
        }
        uint64_t v17 = &v11[-v16];
        __n128 result = sub_10055E25C(v17, v11, v15);
        uint64_t v11 = v17;
      }

      while (v17 != a1);
    }

    a4 = v13;
    if ((void **)(*v5 + 4096LL) == v13)
    {
      uint64_t v18 = (void **)v5[1];
      ++v5;
      a4 = v18;
    }
  }

  *a5 = v8;
  a5[1] = v5;
  a5[2] = a4;
  return result;
}

void *sub_10055E25C(void *a1, void *a2, void **a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v7 = (void *)*--v6;
      --a3;
      *uint64_t v6 = 0LL;
      sub_10055CD68(a3, v7);
    }

    while (v6 != a1);
  }

  return a2;
}

unsigned __int8 *sub_10055E2B8( uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v11 = 0LL;
  uint64_t v6 = (unsigned __int8 **)sub_1001FD824((uint64_t)a1, &v11, uu1);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_10055E36C((uint64_t)a1, a4, v10);
    sub_100029630(a1, v11, v8, (uint64_t *)v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    sub_10055E3E4((uint64_t)v10, 0LL);
  }

  return v7;
}

void sub_10055E36C( uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  uint64_t v6 = (unsigned __int8 *)operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((void *)v6 + 6) = 0LL;
  *((void *)v6 + 7) = 0LL;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_10055E3CC(_Unwind_Exception *a1)
{
}

void sub_10055E3E4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100032BD4((uint64_t)v2 + 48);
    }
    operator delete(v2);
  }

uint64_t sub_10055E428@<X0>(void *a1@<X8>)
{
  unint64_t v2 = (char *)operator new(0xB0uLL);
  uint64_t result = sub_10055E470((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_10055E45C(_Unwind_Exception *a1)
{
}

uint64_t sub_10055E470(uint64_t a1)
{
  *(void *)a1 = off_1008A18C8;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = off_100898AC0;
  sub_100242DC4(a1 + 32);
  *(void *)(a1 + sub_100242FAC(v22 - 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = a1 + 128;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 160) = 0LL;
  *(_BYTE *)(a1 + 168) = 0;
  return a1;
}

void sub_10055E4D0(_Unwind_Exception *a1)
{
}

void sub_10055E4E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1008A18C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10055E4F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1008A18C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_10055E514(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_10055E524(id a1)
{
  uint64_t v1 = operator new(0x1A0uLL);
  sub_1002769A4();
  off_1008D67C0 = v1;
}

void sub_10055E554(_Unwind_Exception *a1)
{
}

uint64_t sub_10055E568(uint64_t a1)
{
  return a1;
}

void *sub_10055E594(void *a1, uint64_t a2)
{
  *sub_10043C910(a1, a2) = &off_1008A1920;
  if (qword_1008F1280 != -1) {
    dispatch_once(&qword_1008F1280, &stru_1008A1940);
  }
  return a1;
}

void sub_10055E5EC(id a1)
{
  uint64_t v105 = "kCBGeneralMsgIdAntennaDiversity";
  uint64_t v106 = 31LL;
  v107 = &v105;
  uint64_t v1 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v1[4] = sub_10055FC48;
  v1[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdReadRSSI";
  uint64_t v106 = 23LL;
  v107 = &v105;
  unint64_t v2 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v2[4] = sub_1005604C0;
  v2[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdReadCurrentAntenna";
  uint64_t v106 = 33LL;
  v107 = &v105;
  BOOL v3 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  void v3[4] = sub_1005605DC;
  void v3[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdDelayedWake";
  uint64_t v106 = 26LL;
  v107 = &v105;
  uint64_t v4 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  void v4[4] = sub_1005606D0;
  void v4[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdChangeConnectionPacketType";
  uint64_t v106 = 41LL;
  v107 = &v105;
  uint64_t v5 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  void v5[4] = sub_1005607A8;
  void v5[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdReadTxPowerLevel";
  uint64_t v106 = 31LL;
  v107 = &v105;
  uint64_t v6 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  void v6[4] = sub_1005608DC;
  void v6[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSetTxPowerCap";
  uint64_t v106 = 28LL;
  v107 = &v105;
  uint64_t v7 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  void v7[4] = sub_100560AE8;
  void v7[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdCountryCode";
  uint64_t v106 = 26LL;
  v107 = &v105;
  uint64_t v8 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  void v8[4] = sub_100560BD4;
  void v8[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdCountryCodeMultiBand";
  uint64_t v106 = 35LL;
  v107 = &v105;
  uint64_t v9 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  void v9[4] = sub_100560D38;
  void v9[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSimulateLocationUpdate";
  uint64_t v106 = 37LL;
  v107 = &v105;
  uint64_t v10 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  void v10[4] = sub_100560FA4;
  void v10[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdCellularTransmitState";
  uint64_t v106 = 36LL;
  v107 = &v105;
  uint64_t v11 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v11[4] = sub_10056104C;
  void v11[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdReadFactoryCalTable";
  uint64_t v106 = 34LL;
  v107 = &v105;
  uint64_t v12 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v12[4] = sub_1005610D0;
  v12[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdDisableTpc";
  uint64_t v106 = 25LL;
  v107 = &v105;
  uint64_t v13 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  _OWORD v13[4] = sub_1005612A4;
  void v13[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdBlackMagickSet";
  uint64_t v106 = 29LL;
  v107 = &v105;
  uint64_t v14 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  void v14[4] = sub_100561334;
  void v14[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdRxTest";
  uint64_t v106 = 21LL;
  v107 = &v105;
  __int128 v15 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  void v15[4] = sub_1005614C8;
  void v15[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdTxTest";
  uint64_t v106 = 21LL;
  v107 = &v105;
  uint64_t v16 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v16[4] = sub_100561660;
  void v16[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdLeTestEnd";
  uint64_t v106 = 24LL;
  v107 = &v105;
  uint64_t v17 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  _DWORD v17[4] = sub_10056182C;
  void v17[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdRxEnhancedTest";
  uint64_t v106 = 29LL;
  v107 = &v105;
  uint64_t v18 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  void v18[4] = sub_100561980;
  v18[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdTxEnhancedTest";
  uint64_t v106 = 29LL;
  v107 = &v105;
  uint64_t v19 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  _OWORD v19[4] = sub_100561B4C;
  void v19[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdReadCountrySettingsTest";
  uint64_t v106 = 38LL;
  v107 = &v105;
  int64_t v20 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  void v20[4] = sub_100561D30;
  void v20[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdReadePAGPIOState";
  uint64_t v106 = 31LL;
  v107 = &v105;
  uint64_t v21 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  uint8_t v21[4] = sub_100561E94;
  void v21[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSetSARState";
  uint64_t v106 = 26LL;
  v107 = &v105;
  __n128 v22 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  _OWORD v22[4] = sub_100561F88;
  void v22[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdWiFi5GState";
  uint64_t v106 = 26LL;
  v107 = &v105;
  uint64_t v23 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v23[4] = sub_10056200C;
  v23[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdReadPowerCapState";
  uint64_t v106 = 32LL;
  v107 = &v105;
  uint64_t v24 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  uint8_t v24[4] = sub_100562094;
  void v24[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdEnhancedReadPowerCapState";
  uint64_t v106 = 40LL;
  v107 = &v105;
  unint64_t v25 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v25[4] = sub_10056217C;
  v25[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdReadRFState";
  uint64_t v106 = 26LL;
  v107 = &v105;
  uint64_t v26 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  uint8_t v26[4] = sub_1005622D8;
  v26[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSetCellularTransmitAntenna";
  uint64_t v106 = 41LL;
  v107 = &v105;
  uint64_t v27 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v27[4] = sub_10056244C;
  v27[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSetBTAntenna";
  uint64_t v106 = 27LL;
  v107 = &v105;
  uint64_t v28 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v28[4] = sub_1005624CC;
  v28[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdTunablesEnable";
  uint64_t v106 = 29LL;
  v107 = &v105;
  int v29 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v29[4] = sub_100562590;
  v29[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSetDiversityAntenna";
  uint64_t v106 = 34LL;
  v107 = &v105;
  __int128 v30 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v30[4] = sub_100562608;
  v30[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdADVBufConfigTool";
  uint64_t v106 = 31LL;
  v107 = &v105;
  __int128 v31 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v31[4] = sub_1005626CC;
  v31[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdADVBufMatchControlTool";
  uint64_t v106 = 37LL;
  v107 = &v105;
  __int128 v32 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  uint8_t v32[4] = sub_1005627F4;
  v32[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdADVBufReadTool";
  uint64_t v106 = 29LL;
  v107 = &v105;
  unint64_t v33 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v33[4] = sub_1005628C4;
  void v33[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdMatchTableConfigTool";
  uint64_t v106 = 35LL;
  v107 = &v105;
  unint64_t v34 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  _OWORD v34[4] = sub_1005629DC;
  void v34[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdMatchTableExtendedFilterConfigTool";
  uint64_t v106 = 49LL;
  v107 = &v105;
  uint64_t v35 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  uint8_t v35[4] = sub_100562B84;
  v35[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdMatchTableParamsTool";
  uint64_t v106 = 35LL;
  v107 = &v105;
  uint64_t v36 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  uint8_t v36[4] = sub_100562C9C;
  void v36[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdMatchBufferConfigTool";
  uint64_t v106 = 36LL;
  v107 = &v105;
  uint64_t v37 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v37[4] = sub_100562EFC;
  v37[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdMatchBufferReadTool";
  uint64_t v106 = 34LL;
  v107 = &v105;
  uint64_t v38 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v38[4] = sub_100562FF8;
  v38[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSPMIDiagnosticsTool";
  uint64_t v106 = 34LL;
  v107 = &v105;
  uint64_t v39 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v39[4] = sub_1005630A4;
  v39[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdBTCLKSensorCTimeSyncTool";
  uint64_t v106 = 39LL;
  v107 = &v105;
  uint64_t v40 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v40[4] = sub_100563128;
  v40[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdAdvTxTriggerTimeStampTool";
  uint64_t v106 = 40LL;
  v107 = &v105;
  uint64_t v41 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v41[4] = sub_1005631DC;
  v41[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdReadLEConnEventCounterTool";
  uint64_t v106 = 41LL;
  v107 = &v105;
  uint64_t v42 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v42[4] = sub_100563290;
  v42[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdStartLEConnEventTriggerTool";
  uint64_t v106 = 42LL;
  v107 = &v105;
  int v43 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v43[4] = sub_100563370;
  v43[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSPMIDebugControlTool";
  uint64_t v106 = 35LL;
  v107 = &v105;
  unsigned __int16 v44 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v44[4] = sub_100563478;
  v44[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSetGPIOStateMsgTool";
  uint64_t v106 = 34LL;
  v107 = &v105;
  uint64_t v45 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v45[4] = sub_1005634FC;
  v45[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdReadACLConnHandle";
  uint64_t v106 = 32LL;
  v107 = &v105;
  unint64_t v46 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v46[4] = sub_1005635D0;
  v46[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdHDRSetupSyncConnMsgTool";
  uint64_t v106 = 38LL;
  v107 = &v105;
  uint64_t v47 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v47[4] = sub_1005636B4;
  v47[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdHDRAcceptSyncConnMsgTool";
  uint64_t v106 = 39LL;
  v107 = &v105;
  unint64_t v48 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v48[4] = sub_100563824;
  v48[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSCOBufferSizeControl";
  uint64_t v106 = 35LL;
  v107 = &v105;
  uint64_t v49 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v49[4] = sub_1005639B8;
  void v49[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdHRBControl";
  uint64_t v106 = 25LL;
  v107 = &v105;
  uint64_t v50 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v50[4] = sub_100563AC8;
  v50[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdHRBAllowedBands";
  uint64_t v106 = 30LL;
  v107 = &v105;
  char v51 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  uint8_t v51[4] = sub_100563C04;
  void v51[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdHRBClassificationBands";
  uint64_t v106 = 37LL;
  v107 = &v105;
  uint64_t v52 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v52[4] = sub_100563D40;
  v52[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdHRBChangeConnectionBand";
  uint64_t v106 = 38LL;
  v107 = &v105;
  unint64_t v53 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v53[4] = sub_100563E7C;
  v53[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdHRBWriteScanEnable";
  uint64_t v106 = 33LL;
  v107 = &v105;
  __int128 v54 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v54[4] = sub_100564068;
  v54[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdHRBWritePageScanActivity";
  uint64_t v106 = 39LL;
  v107 = &v105;
  __int128 v55 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v55[4] = sub_100564158;
  void v55[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdHRBSetAFHHostChannelClassification";
  uint64_t v106 = 49LL;
  v107 = &v105;
  int v56 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v56[4] = sub_100564248;
  v56[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdGetEssentialPowerDatabaseEntries";
  uint64_t v106 = 47LL;
  v107 = &v105;
  unint64_t v57 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  void v57[4] = sub_10056451C;
  v57[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdHRBReadEnhancedTransmitPowerLevel";
  uint64_t v106 = 48LL;
  v107 = &v105;
  uint64_t v58 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v58[4] = sub_10056473C;
  v58[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdHRBReadAFHChannelMap";
  uint64_t v106 = 35LL;
  v107 = &v105;
  __int16 v59 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  uint8_t v59[4] = sub_100564A30;
  v59[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdHRBLimitChannelMap";
  uint64_t v106 = 33LL;
  v107 = &v105;
  uint64_t v60 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v60[4] = sub_100564CDC;
  v60[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdHRBSetBandEdges";
  uint64_t v106 = 30LL;
  v107 = &v105;
  char v61 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v61[4] = sub_100564DA0;
  v61[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdEnhancedTxTest";
  uint64_t v106 = 29LL;
  v107 = &v105;
  __n128 v62 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v62[4] = sub_100564EF0;
  v62[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdEnhancedRxTest2G";
  uint64_t v106 = 31LL;
  v107 = &v105;
  uint64_t v63 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v63[4] = sub_100565214;
  v63[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdEnhancedRxTestHRB";
  uint64_t v106 = 32LL;
  v107 = &v105;
  __n128 v64 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v64[4] = sub_100565458;
  v64[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdEnhancedTxTestCont";
  uint64_t v106 = 33LL;
  v107 = &v105;
  unint64_t v65 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v65[4] = sub_1005656A0;
  v65[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdLERoles";
  uint64_t v106 = 22LL;
  v107 = &v105;
  unint64_t v66 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v66[4] = sub_1005658B4;
  v66[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdBTPerfTest";
  uint64_t v106 = 25LL;
  v107 = &v105;
  int v67 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v67[4] = sub_100565984;
  v67[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSetupL2CAPServer";
  uint64_t v106 = 31LL;
  v107 = &v105;
  __int128 v68 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v68[4] = sub_100565C88;
  v68[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdRemoveL2CAPServer";
  uint64_t v106 = 32LL;
  v107 = &v105;
  int v69 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v69[4] = sub_100565D24;
  v69[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdCreateL2CAPConnection";
  uint64_t v106 = 36LL;
  v107 = &v105;
  int v70 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v70[4] = sub_100565E6C;
  v70[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdRemoveL2CAPConnection";
  uint64_t v106 = 36LL;
  v107 = &v105;
  uint64_t v71 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  void v71[4] = sub_100565F98;
  v71[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdEnterSniffMode";
  uint64_t v106 = 29LL;
  v107 = &v105;
  id v72 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v72[4] = sub_10056619C;
  v72[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdExitSniffMode";
  uint64_t v106 = 28LL;
  v107 = &v105;
  __int16 v73 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v73[4] = sub_1005663E4;
  v73[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdEnablePhyStats";
  uint64_t v106 = 29LL;
  v107 = &v105;
  __int16 v74 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v74[4] = sub_100566598;
  v74[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdAdvancedSniffMode";
  uint64_t v106 = 32LL;
  v107 = &v105;
  uint64_t v75 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v75[4] = sub_1005666F8;
  v75[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdExitAdvancedSniffMode";
  uint64_t v106 = 36LL;
  v107 = &v105;
  __int16 v76 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v76[4] = sub_1005669A0;
  v76[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdAdvancedSniffReconfig";
  uint64_t v106 = 36LL;
  v107 = &v105;
  int v77 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v77[4] = sub_100566AF4;
  v77[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSetPeripheralMaxAge";
  uint64_t v106 = 34LL;
  v107 = &v105;
  __int16 v78 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v78[4] = sub_100566CD4;
  v78[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdLMPFlow";
  uint64_t v106 = 22LL;
  v107 = &v105;
  int v79 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v79[4] = sub_100566E44;
  v79[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdAoSEmptyPacketReport";
  uint64_t v106 = 35LL;
  v107 = &v105;
  __n128 v80 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v80[4] = sub_100566FB4;
  v80[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdConotrolAoS";
  uint64_t v106 = 26LL;
  v107 = &v105;
  int v81 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  _OWORD v81[4] = sub_100567124;
  v81[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdBTSCPageScan";
  uint64_t v106 = 27LL;
  v107 = &v105;
  __int128 v82 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v82[4] = sub_1005671E8;
  v82[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSpmiCoexGetDebugCounter";
  uint64_t v106 = 38LL;
  v107 = &v105;
  __int128 v83 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v83[4] = sub_1005673B0;
  v83[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSpmiCoexResetDebugCounter";
  uint64_t v106 = 40LL;
  v107 = &v105;
  __int128 v84 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v84[4] = sub_100567480;
  v84[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSpmiCoexTestWriteMsg";
  uint64_t v106 = 35LL;
  v107 = &v105;
  int v85 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v85[4] = sub_100567520;
  v85[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSpmiCoexTxControl";
  uint64_t v106 = 32LL;
  v107 = &v105;
  uint64_t v86 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v86[4] = sub_10056762C;
  v86[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSpmiCoexType53Config";
  uint64_t v106 = 35LL;
  v107 = &v105;
  __int128 v87 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v87[4] = sub_100567700;
  v87[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSpmiCoexType60Config";
  uint64_t v106 = 35LL;
  v107 = &v105;
  int v88 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v88[4] = sub_1005677B4;
  v88[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdReadControllerRam";
  uint64_t v106 = 32LL;
  v107 = &v105;
  __int128 v89 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v89[4] = sub_10056790C;
  v89[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSetMinEncryptionKeySize";
  uint64_t v106 = 38LL;
  v107 = &v105;
  int v90 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v90[4] = sub_100567AF4;
  v90[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdCalSetTxPower";
  uint64_t v106 = 28LL;
  v107 = &v105;
  __int128 v91 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v91[4] = sub_100567B84;
  v91[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdHPLinkBFCmd";
  uint64_t v106 = 26LL;
  v107 = &v105;
  int v92 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v92[4] = sub_100567D0C;
  v92[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdMRCLoggingCmd";
  uint64_t v106 = 28LL;
  v107 = &v105;
  __int128 v93 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v93[4] = sub_10056815C;
  std::string v93[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdBTAntennaCfg";
  uint64_t v106 = 27LL;
  v107 = &v105;
  uint64_t v94 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v94[4] = sub_10056835C;
  v94[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdLoadMSFFile";
  uint64_t v106 = 26LL;
  v107 = &v105;
  __int128 v95 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v95[4] = sub_100568558;
  v95[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdLoadPwrRegulatoryFile";
  uint64_t v106 = 36LL;
  v107 = &v105;
  int v96 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v96[4] = sub_10056876C;
  v96[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdLoadPwrRegulatoryFileA3";
  uint64_t v106 = 38LL;
  v107 = &v105;
  __int128 v97 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v97[4] = sub_1005688B0;
  v97[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdTriggerULLM";
  uint64_t v106 = 26LL;
  v107 = &v105;
  int v98 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v98[4] = sub_100568ABC;
  v98[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdSimulateBudswapCmd";
  uint64_t v106 = 33LL;
  v107 = &v105;
  __int128 v99 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v99[4] = sub_100568CDC;
  v99[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgHCICMD";
  uint64_t v106 = 19LL;
  v107 = &v105;
  int v100 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v100[4] = sub_100568E0C;
  v100[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdLEAdvTxPowerIncrease";
  uint64_t v106 = 35LL;
  v107 = &v105;
  __int128 v101 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v101[4] = sub_10056910C;
  v101[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdWriteBdAddr";
  uint64_t v106 = 26LL;
  v107 = &v105;
  int v102 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v102[4] = sub_100569200;
  v102[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdCrcErredPduReportEnable";
  uint64_t v106 = 38LL;
  v107 = &v105;
  uint64_t v103 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v103[4] = sub_100569308;
  v103[5] = 0LL;
  uint64_t v105 = "kCBGeneralMsgIdAppleExtendedAdvReportEnable";
  uint64_t v106 = 43LL;
  v107 = &v105;
  id v104 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v105, (uint64_t)&unk_1006C2518, (_OWORD **)&v107);
  v104[4] = sub_10056938C;
  v104[5] = 0LL;
}

void sub_10055FC48(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1002E6E00();
  uint64_t v31 = a1;
  xpc_object_t original = a2;
  int64_t value = 0LL;
  int64_t v41 = 0LL;
  LOWORD(v43) = 0;
  int64_t v42 = 0LL;
  unsigned __int16 v37 = 26;
  xpc_object_t v5 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  unsigned __int8 int64 = xpc_dictionary_get_int64(v5, "kCBMsgArgAction");
  unsigned __int8 v7 = xpc_dictionary_get_int64(v5, "kCBMsgArgConnHandle");
  unsigned __int8 v8 = xpc_dictionary_get_int64(v5, "kCBMsgArgAntennaDiversityEnable");
  char v9 = xpc_dictionary_get_int64(v5, "kCBMsgArgDiversityRSSIThreshold");
  char v10 = xpc_dictionary_get_int64(v5, "kCBMsgArgRssiSwitchThreshold");
  unsigned __int8 v11 = xpc_dictionary_get_int64(v5, "kCBMsgArgSwitchDecisionDuration");
  unsigned __int8 v12 = xpc_dictionary_get_int64(v5, "kCBMsgArgDeepFadingTimeout");
  unsigned __int8 v13 = xpc_dictionary_get_int64(v5, "kCBMsgArgPacketOnFavorite");
  char v36 = xpc_dictionary_get_int64(v5, "kCBMsgArgRssiFav");
  char v35 = xpc_dictionary_get_int64(v5, "kCBMsgArgRssiBak");
  char v34 = xpc_dictionary_get_int64(v5, "kCBMsgArgInstantRssiFav");
  char v33 = xpc_dictionary_get_int64(v5, "kCBMsgArgInstantRssiBak");
  uint64_t v14 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Args received : \n", buf, 2u);
    uint64_t v14 = (os_log_s *)qword_1008F75F0;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = int64;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "action : %u\n", buf, 8u);
    uint64_t v14 = (os_log_s *)qword_1008F75F0;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v7;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "connHandle : %u\n", buf, 8u);
    uint64_t v14 = (os_log_s *)qword_1008F75F0;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v8;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "antennaDiversityEnable : %u\n", buf, 8u);
    uint64_t v14 = (os_log_s *)qword_1008F75F0;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v9;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "diversityRSSITHreshold : %d\n", buf, 8u);
    uint64_t v14 = (os_log_s *)qword_1008F75F0;
  }

  uint64_t v15 = v10;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "rssiSwitchThreshold : %d\n", buf, 8u);
    uint64_t v14 = (os_log_s *)qword_1008F75F0;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v11;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "switchDecisionDuration : %u\n", buf, 8u);
    uint64_t v14 = (os_log_s *)qword_1008F75F0;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v12;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "deepFadingTimeout : %u\n", buf, 8u);
    uint64_t v14 = (os_log_s *)qword_1008F75F0;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "packetOnFavorite : %u\n", buf, 8u);
    uint64_t v14 = (os_log_s *)qword_1008F75F0;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v36;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "rssiFav : %d\n", buf, 8u);
    uint64_t v14 = (os_log_s *)qword_1008F75F0;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v35;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "rssiBak : %d\n", buf, 8u);
    uint64_t v14 = (os_log_s *)qword_1008F75F0;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v34;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "instantRSSIFav : %d\n", buf, 8u);
    uint64_t v14 = (os_log_s *)qword_1008F75F0;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v33;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "instantRSSIBak : %d\n", buf, 8u);
  }

  uint64_t v16 = sub_1002E6E9C();
  BYTE4(v30) = v33;
  BYTE3(v30) = v34;
  BYTE2(v30) = v35;
  BYTE1(v30) = v36;
  LOBYTE(v30) = v13;
  int v17 = (*(uint64_t (**)(uint64_t, void, void, void, void, uint64_t, void, void, uint64_t, unsigned __int16 *, int64_t *, char))(*(void *)v16 + 904LL))( v16,  int64,  v7,  v8,  v9,  v15,  v11,  v12,  v30,  &v37,  &value,  1);
  uint64_t v18 = qword_1008F75F0;
  if (v17)
  {
    int v19 = v17;
    if (!os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v19;
    int64_t v20 = "Response : %d";
    uint64_t v21 = (os_log_s *)v18;
    os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
    uint32_t v23 = 8;
  }

  else
  {
    if (!os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO)) {
      goto LABEL_34;
    }
    *(_WORD *)std::string buf = 0;
    int64_t v20 = "Response to BCM4350:antennaDiversity registered successfully\n";
    uint64_t v21 = (os_log_s *)v18;
    os_log_type_t v22 = OS_LOG_TYPE_INFO;
    uint32_t v23 = 2;
  }

  _os_log_impl((void *)&_mh_execute_header, v21, v22, v20, buf, v23);
LABEL_34:
  unsigned int v24 = v37;
  if (v37 >= 2u)
  {
    unint64_t v25 = 0LL;
    uint64_t v26 = (os_log_s *)qword_1008F75F0;
    do
    {
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        int v27 = *((unsigned __int8 *)&value + v25);
        *(_DWORD *)std::string buf = 67109120;
        int v39 = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "%x\t", buf, 8u);
        uint64_t v26 = (os_log_s *)qword_1008F75F0;
        unsigned int v24 = v37;
      }

      ++v25;
    }

    while (v25 < v24);
    xpc_object_t reply = xpc_dictionary_create_reply(original);
    if (reply)
    {
      int v29 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", BYTE3(value));
      xpc_dictionary_set_int64(v29, "kCBMsgArgConnHandle", WORD2(value));
      xpc_dictionary_set_int64(v29, "kCBMsgArgCurrProposedAntenna", BYTE6(value));
      xpc_dictionary_set_int64(v29, "kCBMsgArgRssiFav", HIBYTE(value));
      xpc_dictionary_set_int64(v29, "kCBMsgArgRssiBak", v41);
      xpc_dictionary_set_int64(v29, "kCBMsgArgInstantRssiFav", BYTE1(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgInstantRssiBak", BYTE2(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgLinkQualityA", BYTE3(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgLinkQualityB", BYTE4(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgAutoModeEnable", BYTE5(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgCurrPowerCap", BYTE6(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgCurrPowerControlIndex", HIBYTE(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgRxCounterOnActive", (unsigned __int16)v42);
      xpc_dictionary_set_int64(v29, "kCBMsgArgAntennaSwap0to1Counter", WORD1(v42));
      xpc_dictionary_set_int64(v29, "kCBMsgArgAntennaSwap1to0Counter", WORD2(v42));
      xpc_dictionary_set_int64(v29, "kCBMsgArgDeepFadingCount", HIWORD(v42));
      xpc_dictionary_set_int64(v29, "kCBMsgArgAntCmp", (unsigned __int16)v43);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(v31 + 72) + 16LL), v29);
      xpc_release(v29);
    }
  }

void sub_1005604C0(uint64_t a1, xpc_object_t xdict)
{
  __int16 value_5 = 0;
  int value_1 = 0;
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_10025D848(v4, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692360();
    }
  }

  else
  {
    char value = 0;
    uint64_t v11 = sub_1002E6E9C();
    if ((*(unsigned int (**)(uint64_t, int *, char *))(*(void *)v11 + 304LL))(v11, &value_1, &value))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100692300();
      }
    }

    else
    {
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      xpc_dictionary_set_int64(reply, "kCBMsgArgRawRSSI", value);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), reply);
      xpc_release(reply);
    }
  }

void sub_1005605DC(int a1, xpc_object_t xdict)
{
  __int16 v10 = 0;
  int64_t value = 0LL;
  unsigned __int16 v8 = 10;
  xpc_object_t v3 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(v3, "kCBMsgArgConnHandle");
  uint64_t v5 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, void, void, void, void, unsigned __int16 *, int64_t *))(*(void *)v5 + 896LL))( v5,  uint64,  0LL,  0LL,  0LL,  0LL,  &v8,  &value))
  {
    BOOL v6 = 0;
  }

  else
  {
    BOOL v6 = v8 >= 2u;
  }

  if (v6)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", value);
    xpc_dictionary_set_int64(reply, "kCBMsgArgCurrAntenna", BYTE1(value));
    xpc_release(reply);
  }

void sub_1005606D0(uint64_t a1, xpc_object_t xdict)
{
  LOBYTE(value) = 0;
  __int16 v12 = 1;
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgResumeTimer");
  uint64_t v6 = sub_1002E6E9C();
  int v7 = sub_1002D0A7C(v6);
  unsigned __int16 v8 = (void *)sub_1002E6E9C();
  uint64_t v9 = 1144LL;
  if (v7) {
    uint64_t v9 = 1600LL;
  }
  else {
    BOOL v10 = v12 == 0;
  }
  if (!v10)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), reply);
    xpc_release(reply);
  }

void sub_1005607A8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (!sub_10025D848(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
  {
    unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnectionPacketType");
    if (qword_1008D5F00 != -1) {
      dispatch_once(&qword_1008D5F00, &stru_1008A1960);
    }
    if (sub_10040B984((uint64_t)off_1008D5EF8, 0LL, uint64))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10069238C();
      }
    }

    else
    {
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", 0LL);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), reply);
      xpc_release(reply);
    }
  }

void sub_1005608DC(int a1, xpc_object_t object)
{
  uint64_t v3 = qword_1008F7790;
  if (!qword_1008F7790) {
    goto LABEL_11;
  }
  xpc_object_t v4 = &qword_1008F7790;
  do
  {
    int v5 = *(_DWORD *)(v3 + 32);
    BOOL v6 = v5 < 13;
    if (v5 >= 13) {
      uint64_t v7 = (uint64_t *)v3;
    }
    else {
      uint64_t v7 = (uint64_t *)(v3 + 8);
    }
    if (!v6) {
      xpc_object_t v4 = (uint64_t *)v3;
    }
    uint64_t v3 = *v7;
  }

  while (*v7);
  if (v4 != &qword_1008F7790 && *((int *)v4 + 8) <= 13)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692478();
    }
  }

  else
  {
LABEL_11:
    uint64_t v8 = (uint64_t *)xpc_retain(object);
    int v26 = 13;
    uint64_t v28 = (uint64_t)&v26;
    sub_100294740((uint64_t **)&qword_1008F7788, &v26, (uint64_t)&unk_1006C2518, (_DWORD **)&v28)[5] = v8;
    uint64_t v28 = -1LL;
    __int16 v27 = 0;
    int v26 = 0;
    xpc_object_t value = xpc_dictionary_get_value(object, "kCBMsgArgs");
    if (!sub_10025D848( value,  1,  v10,  v11,  v12,  v13,  v14,  v15,  (uint64_t)"kCBMsgArgTransmitPowerLevelType"))
    {
      uint64_t v16 = sub_10012D890((uint64_t)&v26);
      if (v16)
      {
        uint64_t v17 = v16;
        sub_1000A85A0();
        int v23 = sub_10011ED50((uint64_t)sub_1005694E4, v17, v28, v18, v19, v20, v21, v22);
        sub_1000A8688();
        unsigned int v24 = (os_log_s *)qword_1008F75F0;
        if (v23)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
            sub_100692418();
          }
        }

        else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Response to XPC ReadTransmitPowerLevel registered successfully",  buf,  2u);
        }
      }

      else
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_1006923EC();
        }
        sub_1005694E4(0x19Eu, 0LL, 0);
      }
    }
  }

void sub_100560AE8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char int64 = xpc_dictionary_get_int64(v4, "kCBMsgArgTxPowerCap");
  __int16 v11 = 0;
  int64_t value = 0LL;
  unsigned __int16 v9 = 10;
  uint64_t v6 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, unsigned __int16 *, int64_t *))(*(void *)v6 + 928LL))( v6,  int64,  &v9,  &value))
  {
    BOOL v7 = 0;
  }

  else
  {
    BOOL v7 = v9 >= 2u;
  }

  if (v7)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), reply);
    xpc_release(reply);
  }

void sub_100560BD4(uint64_t a1, xpc_object_t xdict)
{
  LODWORD(value) = 0;
  unsigned __int16 v11 = 0;
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 int64 = xpc_dictionary_get_int64(v4, "kCBMsgArgAction");
  if (int64)
  {
    unsigned __int8 v6 = xpc_dictionary_get_int64(v4, "kCBMsgArgCountryCode");
    unsigned __int8 v7 = xpc_dictionary_get_int64(v4, "kCBMsgArgLeFlag");
  }

  else
  {
    unsigned __int8 v6 = 0;
    unsigned __int8 v7 = 0;
  }

  uint64_t v8 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, void, void, unsigned __int16 *, int64_t *))(*(void *)v8 + 568LL))( v8,  int64,  v6,  v7,  &v11,  &value))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006924A4();
    }
  }

  else if (v11 >= 2u)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      uint64_t v10 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", 0LL);
      xpc_dictionary_set_int64(v10, "kCBMsgArgCountryCode", value);
      xpc_dictionary_set_int64(v10, "kCBMsgArgLeFlag", BYTE1(value));
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
      xpc_release(v10);
    }
  }

void sub_100560D38(uint64_t a1, void *a2)
{
  char v18 = 0;
  uint64_t value = 0LL;
  __int16 v16 = 0;
  uint64_t v4 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 2528LL))(v4))
  {
    xpc_object_t v5 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int8 uint64 = xpc_dictionary_get_uint64(v5, "kCBMsgArgAction");
    if (uint64)
    {
      unsigned __int8 v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgCountryCode2G");
      unsigned __int8 v8 = xpc_dictionary_get_uint64(v5, "kCBMsgArgLeFlag");
      unsigned __int8 v9 = xpc_dictionary_get_uint64(v5, "kCBMsgArgCountryCodeUNII1");
      unsigned __int8 v10 = xpc_dictionary_get_uint64(v5, "kCBMsgArgCountryCodeUNII3");
      unsigned __int8 v11 = xpc_dictionary_get_uint64(v5, "kCBMsgArgCountryCodeUNII5");
    }

    else
    {
      unsigned __int8 v7 = 0;
      unsigned __int8 v8 = 0;
      unsigned __int8 v9 = 0;
      unsigned __int8 v10 = 0;
      unsigned __int8 v11 = 0;
    }

    uint64_t v13 = sub_1002E6E9C();
    LODWORD(v12) = (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, __int16 *, uint64_t *))(*(void *)v13 + 576LL))( v13,  uint64,  v7,  v8,  v9,  v10,  v11,  &v16,  &value);
    if ((_DWORD)v12 && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692504();
    }
    uint64_t v12 = (int)v12;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692564();
    }
    uint64_t v12 = 1LL;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    uint64_t v15 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v12);
    xpc_dictionary_set_uint64(v15, "kCBMsgArgCountryCode2G", value);
    xpc_dictionary_set_uint64(v15, "kCBMsgArgLeFlag", BYTE1(value));
    xpc_dictionary_set_uint64(v15, "kCBMsgArgCountryCodeUNII1", BYTE2(value));
    xpc_dictionary_set_uint64(v15, "kCBMsgArgCountryCodeUNII3", BYTE4(value));
    xpc_dictionary_set_uint64(v15, "kCBMsgArgCountryCodeUNII5", BYTE6(value));
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v15);
    xpc_release(v15);
  }

void sub_100560FA4(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v3 = -[NSString initWithCString:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithCString:encoding:",  xpc_dictionary_get_string(value, "kCBMsgArgCountryString"),  4LL);
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_100692590();
  }
  uint64_t v4 = sub_1002E90E4();
  (*(void (**)(uint64_t, NSString *))(*(void *)v4 + 64LL))(v4, v3);
}

void sub_10056103C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10056104C(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v3 = xpc_dictionary_get_BOOL(value, "kCBMsgArgCellularTransmitState");
  uint64_t v4 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, BOOL, uint64_t))(*(void *)v4 + 560LL))(v4, v3, 1LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006925F0();
    }
  }

void sub_1005610D0(uint64_t a1, xpc_object_t xdict)
{
  unsigned __int16 v11 = 55;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v20 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  *(_OWORD *)objects = 0u;
  __int128 v13 = 0u;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgFactoryCalTableType");
  uint64_t v6 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, unsigned __int16 *, _BYTE *))(*(void *)v6 + 584LL))( v6,  uint64,  &v11,  v37))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692650();
    }
  }

  else if (v11 >= 2u)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      unsigned __int8 v8 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", v37[3]);
      xpc_dictionary_set_int64(v8, "kCBMsgArgFactoryCalTableType", v37[4]);
      for (uint64_t i = 0LL; i != 50; ++i)
        objects[i] = xpc_int64_create(v37[i]);
      xpc_object_t v10 = xpc_array_create(objects, 0x32uLL);
      xpc_dictionary_set_value(v8, "kCBMsgArgFactoryCalTable", v10);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
      xpc_release(v8);
    }
  }

void sub_1005612A4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = xpc_dictionary_get_BOOL(value, "kCBMsgArgDisableTpc");
  uint64_t v6 = sub_1002E6E9C();
  LODWORD(v5) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 312LL))(v6, v5);
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", (int)v5);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), reply);
  xpc_release(reply);
}

void sub_100561334(int a1, xpc_object_t xdict)
{
  __int16 v22 = 0;
  int v21 = 0;
  char v20 = 0;
  unsigned __int8 v19 = 1;
  char v18 = 1;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v3 = sub_10025E1C8(value, "kCBMsgArgCountryCode");
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = sub_1002E90E4();
  (*(void (**)(uint64_t, void *, char *, unsigned __int8 *, char *))(*(void *)v5 + 8LL))( v5,  v4,  &v20,  &v19,  &v18);
  if (!sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgBTAddr"))
  {
    char v15 = 0;
    int v16 = v21;
    __int16 v17 = v22;
    char v14 = 0;
    sub_100242CA4(&v14);
    uint64_t v12 = sub_10012D98C(&v15);
    sub_100242CD0(&v14);
    if (!v12 && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006923EC();
    }
    uint64_t v13 = sub_1002E6E9C();
    if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)v13 + 952LL))(v13, v12, v19)
      && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      sub_1006926B0();
    }

    sub_100242CD8(&v14);
  }
}

void sub_1005614A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005614C8(int a1, xpc_object_t object)
{
  uint64_t v3 = qword_1008F7790;
  if (!qword_1008F7790) {
    goto LABEL_11;
  }
  uint64_t v4 = &qword_1008F7790;
  do
  {
    int v5 = *(_DWORD *)(v3 + 32);
    BOOL v6 = v5 < 21;
    if (v5 >= 21) {
      uint64_t v7 = (uint64_t *)v3;
    }
    else {
      uint64_t v7 = (uint64_t *)(v3 + 8);
    }
    if (!v6) {
      uint64_t v4 = (uint64_t *)v3;
    }
    uint64_t v3 = *v7;
  }

  while (*v7);
  if (v4 != &qword_1008F7790 && *((int *)v4 + 8) <= 21)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692770();
    }
  }

  else
  {
LABEL_11:
    uint64_t v8 = (uint64_t *)xpc_retain(object);
    *(_DWORD *)std::string buf = 21;
    __int128 v25 = buf;
    sub_100294740((uint64_t **)&qword_1008F7788, (int *)buf, (uint64_t)&unk_1006C2518, (_DWORD **)&v25)[5] = v8;
    __int128 v25 = 0LL;
    xpc_object_t value = xpc_dictionary_get_value(object, "kCBMsgArgs");
    if (!sub_10025D848(value, 1, v10, v11, v12, v13, v14, v15, (uint64_t)"kCBMsgArgRxChannel"))
    {
      sub_1000A85A0();
      int v22 = sub_10011ED80((uint64_t)sub_1005695FC, v25, v16, v17, v18, v19, v20, v21);
      sub_1000A8688();
      __int128 v23 = (os_log_s *)qword_1008F75F0;
      if (v22)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_100692710();
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Response to XPC HCI_StartRxTest registered successfully",  buf,  2u);
      }
    }
  }

void sub_100561660(int a1, xpc_object_t object)
{
  uint64_t v3 = qword_1008F7790;
  if (!qword_1008F7790) {
    goto LABEL_11;
  }
  uint64_t v4 = &qword_1008F7790;
  do
  {
    int v5 = *(_DWORD *)(v3 + 32);
    BOOL v6 = v5 < 22;
    if (v5 >= 22) {
      uint64_t v7 = (uint64_t *)v3;
    }
    else {
      uint64_t v7 = (uint64_t *)(v3 + 8);
    }
    if (!v6) {
      uint64_t v4 = (uint64_t *)v3;
    }
    uint64_t v3 = *v7;
  }

  while (*v7);
  if (v4 != &qword_1008F7790 && *((int *)v4 + 8) <= 22)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006927FC();
    }
  }

  else
  {
LABEL_11:
    uint64_t v8 = (uint64_t *)xpc_retain(object);
    LODWORD(v24) = 22;
    __int128 v25 = &v24;
    sub_100294740((uint64_t **)&qword_1008F7788, (int *)&v24, (uint64_t)&unk_1006C2518, (_DWORD **)&v25)[5] = v8;
    uint64_t v24 = 0LL;
    __int128 v25 = 0LL;
    uint64_t v23 = 0LL;
    xpc_object_t value = xpc_dictionary_get_value(object, "kCBMsgArgs");
    if (!sub_10025D848(value, 1, v10, v11, v12, v13, v14, v15, (uint64_t)"kCBMsgArgTxChannel"))
    {
      sub_1000A85A0();
      int v20 = sub_10011EDB0( (uint64_t)sub_1005696D0,  v25,  v24,  v23,  v16,  v17,  v18,  v19);
      sub_1000A8688();
      uint64_t v21 = (os_log_s *)qword_1008F75F0;
      if (v20)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_10069279C();
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Response to XPC HCI_StartTxTest registered successfully",  buf,  2u);
      }
    }
  }

void sub_10056182C(int a1, xpc_object_t object)
{
  uint64_t v2 = qword_1008F7790;
  if (!qword_1008F7790) {
    goto LABEL_11;
  }
  uint64_t v3 = &qword_1008F7790;
  do
  {
    int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 < 23;
    if (v4 >= 23) {
      BOOL v6 = (uint64_t *)v2;
    }
    else {
      BOOL v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      uint64_t v3 = (uint64_t *)v2;
    }
    uint64_t v2 = *v6;
  }

  while (*v6);
  if (v3 != &qword_1008F7790 && *((int *)v3 + 8) <= 23)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692888();
    }
  }

  else
  {
LABEL_11:
    uint64_t v7 = (uint64_t *)xpc_retain(object);
    int v17 = 23;
    uint64_t v18 = &v17;
    sub_100294740((uint64_t **)&qword_1008F7788, &v17, (uint64_t)&unk_1006C2518, &v18)[5] = v7;
    sub_1000A85A0();
    int v14 = sub_1001214B4(191, (uint64_t)sub_1005697A4, v8, v9, v10, v11, v12, v13, v16);
    sub_1000A8688();
    uint64_t v15 = (os_log_s *)qword_1008F75F0;
    if (v14)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100692828();
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Response to XPC HCI_LeTestEnd registered successfully",  (uint8_t *)&v16,  2u);
    }
  }

void sub_100561980(int a1, xpc_object_t object)
{
  uint64_t v3 = qword_1008F7790;
  if (!qword_1008F7790) {
    goto LABEL_11;
  }
  int v4 = &qword_1008F7790;
  do
  {
    int v5 = *(_DWORD *)(v3 + 32);
    BOOL v6 = v5 < 24;
    if (v5 >= 24) {
      uint64_t v7 = (uint64_t *)v3;
    }
    else {
      uint64_t v7 = (uint64_t *)(v3 + 8);
    }
    if (!v6) {
      int v4 = (uint64_t *)v3;
    }
    uint64_t v3 = *v7;
  }

  while (*v7);
  if (v4 != &qword_1008F7790 && *((int *)v4 + 8) <= 24)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692914();
    }
  }

  else
  {
LABEL_11:
    uint64_t v8 = (uint64_t *)xpc_retain(object);
    LODWORD(v24) = 24;
    __int128 v25 = &v24;
    sub_100294740((uint64_t **)&qword_1008F7788, (int *)&v24, (uint64_t)&unk_1006C2518, (_DWORD **)&v25)[5] = v8;
    uint64_t v24 = 0LL;
    __int128 v25 = 0LL;
    uint64_t v23 = 0LL;
    xpc_object_t value = xpc_dictionary_get_value(object, "kCBMsgArgs");
    if (!sub_10025D848(value, 1, v10, v11, v12, v13, v14, v15, (uint64_t)"kCBMsgArgRxChannel"))
    {
      sub_1000A85A0();
      int v20 = sub_10011EDEC( (uint64_t)sub_100569898,  v25,  v24,  v23,  v16,  v17,  v18,  v19);
      sub_1000A8688();
      uint64_t v21 = (os_log_s *)qword_1008F75F0;
      if (v20)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_1006928B4();
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Response to XPC HCI_StartRxEnhancedTest registered successfully",  buf,  2u);
      }
    }
  }

void sub_100561B4C(int a1, xpc_object_t object)
{
  uint64_t v3 = qword_1008F7790;
  if (!qword_1008F7790) {
    goto LABEL_11;
  }
  int v4 = &qword_1008F7790;
  do
  {
    int v5 = *(_DWORD *)(v3 + 32);
    BOOL v6 = v5 < 25;
    if (v5 >= 25) {
      uint64_t v7 = (uint64_t *)v3;
    }
    else {
      uint64_t v7 = (uint64_t *)(v3 + 8);
    }
    if (!v6) {
      int v4 = (uint64_t *)v3;
    }
    uint64_t v3 = *v7;
  }

  while (*v7);
  if (v4 != &qword_1008F7790 && *((int *)v4 + 8) <= 25)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006929A0();
    }
  }

  else
  {
LABEL_11:
    uint64_t v8 = (uint64_t *)xpc_retain(object);
    LODWORD(v24) = 25;
    __int128 v25 = &v24;
    sub_100294740((uint64_t **)&qword_1008F7788, (int *)&v24, (uint64_t)&unk_1006C2518, (_DWORD **)&v25)[5] = v8;
    uint64_t v24 = 0LL;
    __int128 v25 = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    xpc_object_t value = xpc_dictionary_get_value(object, "kCBMsgArgs");
    if (!sub_10025D848(value, 1, v10, v11, v12, v13, v14, v15, (uint64_t)"kCBMsgArgTxChannel"))
    {
      sub_1000A85A0();
      int v19 = sub_10011EE28( (uint64_t)sub_10056996C,  v25,  v24,  v23,  v22,  v16,  v17,  v18);
      sub_1000A8688();
      int v20 = (os_log_s *)qword_1008F75F0;
      if (v19)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_100692940();
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Response to XPC HCI_StartTxEnhancedTest registered successfully",  buf,  2u);
      }
    }
  }

void sub_100561D30(uint64_t a1, xpc_object_t xdict)
{
  value_1[0] = 0;
  unsigned __int8 value = 1;
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_10025E1C8(v4, "kCBMsgArgCountryCode");
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_100692A44();
  }
  uint64_t v7 = sub_1002E90E4();
  (*(void (**)(uint64_t, void *, char *, _WORD *, unsigned __int8 *))(*(void *)v7 + 8LL))( v7,  v6,  (char *)value_1 + 1,  value_1,  &value);
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_1006929CC();
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", 0LL);
  xpc_dictionary_set_int64(reply, "kCBMsgArgCountryCode", HIBYTE(value_1[0]));
  xpc_dictionary_set_int64(reply, "kCBMsgArgLeFlag", LOBYTE(value_1[0]));
  xpc_dictionary_set_int64(reply, "kCBMsgArgHDRFlag", value);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), reply);
  xpc_release(reply);
}

void sub_100561E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100561E94(uint64_t a1, void *a2)
{
  value_1[0] = -1;
  unsigned __int8 value = -1;
  uint64_t v4 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, char *, _WORD *, unsigned __int8 *, uint64_t))(*(void *)v4 + 1624LL))( v4,  (char *)value_1 + 1,  value_1,  &value,  1LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692AA4();
    }
  }

  else
  {
    xpc_object_t reply = xpc_dictionary_create_reply(a2);
    if (reply)
    {
      BOOL v6 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgEpaGpioEnabled", HIBYTE(value_1[0]));
      xpc_dictionary_set_int64(v6, "kCBMsgArgEpaGpioNum", LOBYTE(value_1[0]));
      xpc_dictionary_set_int64(v6, "kCBMsgArgEpaGpioState", value);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v6);
      xpc_release(v6);
    }
  }

void sub_100561F88(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v3 = xpc_dictionary_get_BOOL(value, "kCBMsgArgSARHeadState");
  uint64_t v4 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, uint64_t, BOOL))(*(void *)v4 + 88LL))(v4, 1LL, v3))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692B04();
    }
  }

void sub_10056200C(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v3 = xpc_dictionary_get_BOOL(value, "kCBMsgArgWiFi5GState");
  uint64_t v4 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, BOOL, uint64_t, uint64_t))(*(void *)v4 + 1648LL))(v4, v3, 15LL, 1LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692B64();
    }
  }

void sub_100562094(uint64_t a1, xpc_object_t xdict)
{
  int v10 = 0;
  memset(length, 0, sizeof(length));
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
  uint64_t v6 = sub_1002E6E9C();
  if (!(*(unsigned int (**)(uint64_t, void, _BYTE *, _BYTE *, uint64_t))(*(void *)v6 + 1664LL))( v6,  uint64,  &length[1],  length,  1LL))
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      uint64_t v8 = reply;
      xpc_dictionary_set_data(reply, "kCBMsgArgData", &length[1], length[0]);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
      xpc_release(v8);
    }
  }

void sub_10056217C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (value)
  {
    id v5 = value;
    unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
    LOBYTE(v5) = xpc_dictionary_get_uint64(v5, "kCBMsgArgVersion");
    uint64_t v7 = sub_1002E6E9C();
    if (!(*(unsigned int (**)(uint64_t, void, void, char *, size_t *, uint64_t))(*(void *)v7 + 1672LL))( v7,  uint64,  v5,  (char *)length + 1,  length,  1LL))
    {
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (reply)
      {
        uint64_t v9 = reply;
        xpc_dictionary_set_data(reply, "kCBMsgArgData", (char *)length + 1, LOBYTE(length[0]));
        xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
        xpc_release(v9);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100692BC4();
  }

void sub_1005622D8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (value)
  {
    id v5 = value;
    unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
    LOBYTE(v5) = xpc_dictionary_get_uint64(v5, "kCBMsgArgAdvInstance");
    uint64_t v7 = sub_1002E6E9C();
    uint64_t v8 = (*(int (**)(uint64_t, void, void, char *, size_t *, uint64_t))(*(void *)v7 + 1672LL))( v7,  uint64,  v5,  (char *)length + 1,  length,  1LL);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692BC4();
    }
    uint64_t v8 = 3LL;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v8);
    xpc_dictionary_set_data(v10, "kCBMsgArgData", (char *)length + 1, LOBYTE(length[0]));
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_10056244C(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgCellularTransmitAntenna");
  uint64_t v4 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v4 + 1680LL))( v4,  1LL,  uint64,  1LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692BF0();
    }
  }

void sub_1005624CC(int a1, xpc_object_t xdict)
{
  xpc_object_t v2 = xdict;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
  xpc_object_t v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v5, "kCBMsgArgCurrProposedAntenna");
  uint64_t v6 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, uint64_t, void, void, void, void, void))(*(void *)v6 + 896LL))( v6,  uint64,  1LL,  v2,  0LL,  0LL,  0LL,  0LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692C1C();
    }
  }

void sub_100562590(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v3 = xpc_dictionary_get_BOOL(value, "kCBMsgArgTunablesReadEnable");
  uint64_t v4 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)v4 + 1824LL))(v4, v3))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692C84();
    }
  }

void sub_100562608(int a1, xpc_object_t xdict)
{
  xpc_object_t v2 = xdict;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
  xpc_object_t v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v5, "kCBMsgArgCurrDiversityAntenna");
  uint64_t v6 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, uint64_t, uint64_t, void, void, void, void))(*(void *)v6 + 896LL))( v6,  uint64,  8LL,  1LL,  v2,  0LL,  0LL,  0LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692CB0();
    }
  }

void sub_1005626CC(int a1, xpc_object_t xdict)
{
  xpc_object_t v2 = xdict;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  xpc_object_t v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  unsigned __int8 v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgConfigMask");
  xpc_object_t v7 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  unsigned __int8 v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgAdvBufMatchAdvType");
  xpc_object_t v9 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v9, "kCBMsgArgPayloadSize");
  int v11 = -573785174;
  __int16 v12 = -18;
  uint64_t v10 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, void, int *, uint64_t, uint64_t, void, void, char))(*(void *)v10 + 2776LL))( v10,  uint64,  v6,  &v11,  255LL,  76LL,  v8,  v2,  100))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692D18();
    }
  }

void sub_1005627F4(int a1, xpc_object_t xdict)
{
  xpc_object_t v2 = xdict;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  xpc_object_t v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  unsigned __int8 v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgAdvBufEnable");
  xpc_object_t v7 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v7, "kCBMsgArgAdvBufPause");
  uint64_t v8 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, void, void))(*(void *)v8 + 2840LL))( v8,  uint64,  v6,  v2))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692D78();
    }
  }

void sub_1005628C4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAdvBufMatchHandle");
  LODWORD(value) = -1;
  uint64_t v6 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, char *, char *, int64_t *))(*(void *)v6 + 2808LL))( v6,  uint64,  (char *)&value + 3,  (char *)&value + 2,  &value))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692DD8();
    }
  }

  else
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      uint64_t v8 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgAdvBufNumEntries", BYTE3(value));
      xpc_dictionary_set_int64(v8, "kCBMsgArgAdvBufStatusMask", BYTE2(value));
      xpc_dictionary_set_int64(v8, "kCBMsgArgAdvBufNumOverflows", (unsigned __int16)value);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
      xpc_release(v8);
    }
  }

void sub_1005629DC(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgConfigMask");
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgAdvBufMatchAdvType");
  xpc_object_t v9 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v10 = xpc_dictionary_get_uint64(v9, "kCBMsgArgPayloadSize");
  xpc_object_t v11 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v12 = xpc_dictionary_get_uint64(v11, "kCBMsgArgAdvBufNumEntries");
  xpc_object_t v13 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char int64 = xpc_dictionary_get_int64(v13, "kCBMsgArgAdvBufRSSIThreshold");
  xpc_object_t v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v15, "kCBMsgArgAdvBufDupNumEntries");
  xpc_object_t v16 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v16, "kCBMsgArgAdvBufDupClearTimeoutSeconds");
  uint64_t v17 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, void, uint64_t, uint64_t, void, void, void, char, void, _BYTE, void, void, _BYTE))(*(void *)v17 + 2816LL))( v17,  uint64,  v6,  255LL,  76LL,  v8,  v10,  v12,  int64,  0LL,  0,  0LL,  0LL,  0))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692E38();
    }
  }

void sub_100562B84(int a1, xpc_object_t xdict)
{
  xpc_object_t v2 = xdict;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  xpc_object_t v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  unsigned __int8 v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgConfigMask");
  xpc_object_t v7 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  char int64 = xpc_dictionary_get_int64(v7, "kCBMsgArgAdvBufRSSIThreshold");
  xpc_object_t v9 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  unsigned __int16 v10 = xpc_dictionary_get_uint64(v9, "kCBMsgArgAdvBufDupNumEntries");
  xpc_object_t v11 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOWORD(v2) = xpc_dictionary_get_uint64(v11, "kCBMsgArgAdvBufDupClearTimeoutSeconds");
  uint64_t v12 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, void, void, void, void))(*(void *)v12 + 2824LL))( v12,  uint64,  v6,  int64,  v10,  (unsigned __int16)v2))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692E98();
    }
  }

void sub_100562C9C(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgStartEntry");
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgEndEntry");
  xpc_object_t v9 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v10 = xpc_dictionary_get_uint64(v9, "kCBMsgArgAdvBufEnable");
  memset(v27, 0, sizeof(v27));
  __int128 v26 = 0u;
  xpc_object_t v11 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_10025D848(v11, 1, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692FBC();
    }
  }

  else
  {
    int v18 = v8 - v6;
    if (v8 < v6 || v8 - v6 - 14 <= 0xFFFFFFF0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100692EF8();
      }
    }

    else
    {
      int v21 = 0;
      __int16 v22 = 0;
      char v23 = v10;
      uint64_t v24 = 0x12554433221100LL;
      __int16 v25 = 0;
      if (v18 >= 1)
      {
        int v19 = v27;
        do
        {
          *((_DWORD *)v19 - 4) = -573785174;
          *((_WORD *)v19 - 6) = -18;
          *(v19 - 10) = v10;
          *(void *)(v19 - 9) = 0x12554433221100LL;
          *(_WORD *)(v19 - 1) = 0;
          v19 += 17;
          --v18;
        }

        while (v18);
      }

      uint64_t v20 = sub_1002E6E9C();
      if ((*(unsigned int (**)(uint64_t, void, void, void, int *))(*(void *)v20 + 2864LL))( v20,  uint64,  v6,  v8,  &v21)
        && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        sub_100692F5C();
      }
    }
  }

void sub_100562EFC(int a1, xpc_object_t xdict)
{
  xpc_object_t v2 = xdict;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  xpc_object_t v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  unsigned __int8 v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgConfigMask");
  xpc_object_t v7 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  unsigned __int8 v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgPayloadSize");
  xpc_object_t v9 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v9, "kCBMsgArgAdvBufNumEntries");
  uint64_t v10 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, void, void, uint64_t, void))(*(void *)v10 + 2872LL))( v10,  uint64,  v6,  v8,  1LL,  v2))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10069301C();
    }
  }

void sub_100562FF8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAdvBufMatchHandle");
  LOBYTE(value) = -1;
  uint64_t v6 = sub_1002E6E9C();
  if (!(*(unsigned int (**)(uint64_t, void, int64_t *))(*(void *)v6 + 2880LL))(v6, uint64, &value))
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      unsigned __int8 v8 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgAdvBufNumEntries", value);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
      xpc_release(v8);
    }
  }

void sub_1005630A4(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSPMIDiagSubOpcode");
  uint64_t v4 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, uint64_t))(*(void *)v4 + 2888LL))(v4, uint64, 1LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10069307C();
    }
  }

void sub_100563128(int a1, xpc_object_t xdict)
{
  xpc_object_t v2 = xdict;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  xpc_object_t v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v5, "kCBMsgArgAdvBufEnable");
  uint64_t v6 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, void, uint64_t))(*(void *)v6 + 2896LL))( v6,  uint64,  v2,  1LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006930DC();
    }
  }

void sub_1005631DC(int a1, xpc_object_t xdict)
{
  xpc_object_t v2 = xdict;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  xpc_object_t v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v5, "kCBMsgArgAdvBufEnable");
  uint64_t v6 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, void, uint64_t))(*(void *)v6 + 2904LL))( v6,  uint64,  v2,  1LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10069313C();
    }
  }

void sub_100563290(uint64_t a1, xpc_object_t xdict)
{
  LOWORD(value) = -21846;
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAdvBufMatchHandle");
  uint64_t v6 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, int64_t *, uint64_t))(*(void *)v6 + 2912LL))( v6,  uint64,  &value,  1LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10069319C();
    }
  }

  else
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      unsigned __int8 v8 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStartInstant", (unsigned __int16)value);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
      xpc_release(v8);
    }
  }

void sub_100563370(int a1, xpc_object_t xdict)
{
  xpc_object_t v2 = xdict;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  xpc_object_t v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  unsigned __int16 v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgStartInstant");
  xpc_object_t v7 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  unsigned __int8 v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgModValue");
  xpc_object_t v9 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v9, "kCBMsgArgAdvBufEnable");
  uint64_t v10 = sub_10012D6D8(uint64);
  uint64_t v11 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, __int128 *, void, void, void, uint64_t))(*(void *)v11 + 2920LL))( v11,  v10,  v6,  v8,  v2,  1LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006899C0();
    }
  }

void sub_100563478(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufEnable");
  uint64_t v4 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, uint64_t))(*(void *)v4 + 2928LL))(v4, uint64, 1LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006931FC();
    }
  }

void sub_1005634FC(int a1, xpc_object_t xdict)
{
  xpc_object_t v2 = xdict;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgGenericGPIOPinNum");
  xpc_object_t v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  unsigned __int8 v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgGenericGPIOControl");
  xpc_object_t v7 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v7, "kCBMsgArgGenericGPIOState");
  uint64_t v8 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, void, void, uint64_t))(*(void *)v8 + 2984LL))( v8,  uint64,  v6,  v2,  1LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10069325C();
    }
  }

void sub_1005635D0(uint64_t a1, xpc_object_t xdict)
{
  __int16 v15 = 0;
  int v14 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_10025D848(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692360();
    }
  }

  else
  {
    uint64_t v11 = (unsigned __int16 *)sub_10012D890((uint64_t)&v14);
    if (v11) {
      int64_t v12 = *v11;
    }
    else {
      int64_t v12 = 0LL;
    }
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    xpc_dictionary_set_int64(reply, "kCBMsgArgACLConnHandle", v12);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), reply);
    xpc_release(reply);
  }

void sub_1005636B4(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHDRSyncConnHandle");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgHDRSyncConnTxBw");
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgHDRSyncConnRxBw");
  xpc_object_t v9 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 v10 = xpc_dictionary_get_uint64(v9, "kCBMsgArgHDRSyncConnMaxLatency");
  xpc_object_t v11 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 v12 = xpc_dictionary_get_uint64(v11, "kCBMsgArgHDRSyncConnVoiceSettting");
  xpc_object_t v13 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v14 = xpc_dictionary_get_uint64(v13, "kCBMsgArgHDRSyncConnRetxEffort");
  xpc_object_t v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v16 = xpc_dictionary_get_uint64(v15, "kCBMsgArgHDRSyncConnPacketType");
  uint64_t v17 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, uint64_t, uint64_t, void, void, void, uint64_t, char))(*(void *)v17 + 1320LL))( v17,  uint64,  v6,  v8,  v10,  v12,  v14,  v16,  1))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006932BC();
    }
  }

void sub_100563824(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  __int16 v25 = 0;
  int v24 = 0;
  if (!sub_10025D848(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgBTAddr"))
  {
    xpc_object_t v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    uint64_t uint64 = xpc_dictionary_get_uint64(v10, "kCBMsgArgHDRSyncConnTxBw");
    xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    uint64_t v13 = xpc_dictionary_get_uint64(v12, "kCBMsgArgHDRSyncConnRxBw");
    xpc_object_t v14 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int16 v15 = xpc_dictionary_get_uint64(v14, "kCBMsgArgHDRSyncConnMaxLatency");
    xpc_object_t v16 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int16 v17 = xpc_dictionary_get_uint64(v16, "kCBMsgArgHDRSyncConnVoiceSettting");
    xpc_object_t v18 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int8 v19 = xpc_dictionary_get_uint64(v18, "kCBMsgArgHDRSyncConnRetxEffort");
    xpc_object_t v20 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    uint64_t v21 = xpc_dictionary_get_uint64(v20, "kCBMsgArgHDRSyncConnPacketType");
    uint64_t v22 = sub_1002E6E9C();
    LOBYTE(v23) = 1;
    if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t, void, void, void, uint64_t, int, uint64_t (*)(void *, void *), int *, void))(*(void *)v22 + 1328LL))( v22,  &v24,  uint64,  v13,  v15,  v17,  v19,  v21,  v23,  sub_10025DDD0,  &v24,  0LL))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10069331C();
      }
    }
  }

void sub_1005639B8(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2536LL))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSCOControlFormat");
    xpc_object_t v6 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int16 v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgSCOControlBufferSize");
    xpc_object_t v8 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int8 v9 = xpc_dictionary_get_uint64(v8, "kCBMsgArgSCOControlNumBuffer");
    uint64_t v10 = sub_1002E6E9C();
    if ((*(unsigned int (**)(uint64_t, void, void, void, uint64_t))(*(void *)v10 + 1336LL))( v10,  uint64,  v7,  v9,  1LL))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10069337C();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_1006933DC();
  }

void sub_100563AC8(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 2480LL))(v4))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBEnable");
    uint64_t v7 = sub_1002E6E9C();
    int v8 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v7 + 1368LL))(v7, uint64, 1LL);
    if (v8)
    {
      LODWORD(v9) = v8;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100693408();
      }
      uint64_t v9 = (int)v9;
    }

    else
    {
      uint64_t v9 = 0LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100693468();
    }
    unsigned __int8 uint64 = 0;
    uint64_t v9 = 1LL;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    xpc_object_t v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v9);
    xpc_dictionary_set_uint64(v11, "kCBMsgArgHRBEnable", uint64);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v11);
    xpc_release(v11);
  }

void sub_100563C04(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 2480LL))(v4))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBBands");
    uint64_t v7 = sub_1002E6E9C();
    int v8 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v7 + 1376LL))(v7, uint64, 1LL);
    if (v8)
    {
      LODWORD(v9) = v8;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100693494();
      }
      uint64_t v9 = (int)v9;
    }

    else
    {
      uint64_t v9 = 0LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100693468();
    }
    unsigned __int8 uint64 = 0;
    uint64_t v9 = 1LL;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    xpc_object_t v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v9);
    xpc_dictionary_set_uint64(v11, "kCBMsgArgHRBBands", uint64);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v11);
    xpc_release(v11);
  }

void sub_100563D40(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 2480LL))(v4))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBBands");
    uint64_t v7 = sub_1002E6E9C();
    int v8 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v7 + 1384LL))(v7, uint64, 1LL);
    if (v8)
    {
      LODWORD(v9) = v8;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100693494();
      }
      uint64_t v9 = (int)v9;
    }

    else
    {
      uint64_t v9 = 0LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100693468();
    }
    unsigned __int8 uint64 = 0;
    uint64_t v9 = 1LL;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    xpc_object_t v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v9);
    xpc_dictionary_set_uint64(v11, "kCBMsgArgHRBBands", uint64);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v11);
    xpc_release(v11);
  }

void sub_100563E7C(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 2480LL))(v4))
  {
    __int16 v22 = 0;
    int v21 = 0;
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    int v12 = sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgBTAddr");
    if (v12)
    {
      int v13 = v12;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100692360();
      }
LABEL_5:
      unsigned __int8 uint64 = 0;
      goto LABEL_9;
    }

    uint64_t v17 = sub_10012D890((uint64_t)&v21);
    if (!v17)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006934F4();
      }
      int v13 = 0;
      goto LABEL_5;
    }

    xpc_object_t v18 = (unsigned __int16 *)v17;
    xpc_object_t v19 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int8 uint64 = xpc_dictionary_get_uint64(v19, "kCBMsgArgHRBBand");
    uint64_t v20 = sub_1002E6E9C();
    int v13 = (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)v20 + 1400LL))( v20,  *v18,  uint64,  1LL);
    if (v13 && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100693520();
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100693468();
    }
    unsigned __int8 uint64 = 0;
    int v13 = 1;
  }

void sub_100564068(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2480LL))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBEnable");
    xpc_object_t v6 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int8 v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgHRBBands");
    uint64_t v8 = sub_1002E6E9C();
    if ((*(unsigned int (**)(uint64_t, void, void, uint64_t))(*(void *)v8 + 1416LL))( v8,  uint64,  v7,  1LL))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100693580();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100693468();
  }

void sub_100564158(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2480LL))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBScanInterval");
    xpc_object_t v6 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int16 v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgHRBScanWindow");
    uint64_t v8 = sub_1002E6E9C();
    if ((*(unsigned int (**)(uint64_t, void, void, uint64_t))(*(void *)v8 + 1424LL))( v8,  uint64,  v7,  1LL))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006935E0();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100693468();
  }

void sub_100564248(uint64_t a1, xpc_object_t original)
{
  xpc_object_t reply = xpc_dictionary_create_reply(original);
  uint64_t v5 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 2480LL))(v5))
  {
    xpc_object_t value = xpc_dictionary_get_value(original, "kCBMsgArgs");
    unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBNumOfGroups");
    if (uint64 - 4 <= 0xFFFFFFFC)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100693640();
      }
      uint64_t v8 = reply;
      int64_t v9 = 3LL;
      goto LABEL_24;
    }

    size_t length = 0LL;
    xpc_object_t v10 = xpc_dictionary_get_value(original, "kCBMsgArgs");
    data = xpc_dictionary_get_data(v10, "kCBMsgArgHRBStartGroupFrequency", &length);
    size_t v12 = length;
    if (length == 2LL * uint64)
    {
      int v13 = data;
      xpc_object_t v14 = xpc_dictionary_get_value(original, "kCBMsgArgs");
      unsigned __int16 v15 = xpc_dictionary_get_data(v14, "kCBMsgArgHRBSizeGroupChannelMap", &length);
      if (length == v12)
      {
        xpc_object_t v16 = v15;
        xpc_object_t v17 = xpc_dictionary_get_value(original, "kCBMsgArgs");
        xpc_object_t v18 = xpc_dictionary_get_data(v17, "kCBMsgArgHRBChannelMap", &length);
        if (length == 63 * uint64)
        {
          xpc_object_t v19 = v18;
          uint64_t v20 = sub_1002E6E9C();
          int v21 = (*(uint64_t (**)(uint64_t, void, const void *, const void *, const void *, uint64_t))(*(void *)v20 + 1432LL))( v20,  uint64,  v13,  v16,  v19,  1LL);
          if (v21 && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
            sub_1006936B4();
          }
          int64_t v9 = v21;
          goto LABEL_23;
        }

        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_100693714();
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        sub_100693790();
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      sub_1006937F0();
    }

    int64_t v9 = 3LL;
LABEL_23:
    uint64_t v8 = reply;
    goto LABEL_24;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
    sub_100693468();
  }
  uint64_t v8 = reply;
  int64_t v9 = 11LL;
LABEL_24:
  xpc_dictionary_set_int64(v8, "kCBMsgArgStatus", v9);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), reply);
  xpc_release(reply);
}

void sub_10056451C(uint64_t a1, xpc_object_t xdict)
{
  unsigned __int8 v18 = 0;
  char v17 = 0;
  int bytes = 0;
  char v15 = 0;
  int v14 = 0;
  char v13 = 0;
  int v12 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPowerDatabaseVscVersion");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v21 = xpc_dictionary_get_uint64(v5, "kCBMsgArgPowerDatabaseAntenna");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v20 = xpc_dictionary_get_uint64(v6, "kCBMsgArgPowerDatabasePCap");
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v19 = xpc_dictionary_get_uint64(v7, "kCBMsgArgPowerDatabaseBandCode");
  uint64_t v8 = sub_1002E6E9C();
  char v11 = 1;
  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *, int *, int *, int *, char))(*(void *)v8 + 1440LL))( v8,  &uint64,  &v21,  &v20,  &v19,  &v18,  &bytes,  &v14,  &v12,  v11)
    && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100693850();
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgPowerDatabaseVscVersion", uint64);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgPowerDatabaseCountryCode", v18);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgPowerDatabaseAntenna", v21);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgPowerDatabasePCap", v20);
    if (uint64 - 1 <= 1)
    {
      xpc_dictionary_set_data(v10, "kCBMsgArgPowerDatabaseIpaMaxTxPwr", &bytes, 5uLL);
      xpc_dictionary_set_data(v10, "kCBMsgArgPowerDatabaseEpaMaxTxPwr", &v14, 5uLL);
      xpc_dictionary_set_data(v10, "kCBMsgArgPowerDatabaseIpaMaxPwrIdx", &v12, 5uLL);
    }

    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_10056473C(uint64_t a1, void *a2)
{
  unsigned __int16 v28 = 0;
  __int16 v27 = 0;
  __int16 v26 = 0;
  __int16 v25 = 0;
  __int16 v24 = 0;
  __int16 v23 = 0;
  uint64_t v4 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 2480LL))(v4))
  {
    __int16 v22 = 0;
    int v21 = 0;
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    int v12 = sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgBTAddr");
    if (v12)
    {
      int v13 = v12;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100692360();
      }
    }

    else
    {
      xpc_object_t v16 = (unsigned __int16 *)sub_10012D890((uint64_t)&v21);
      if (v16)
      {
        uint64_t v17 = *v16;
        xpc_object_t v18 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
        unsigned __int8 uint64 = xpc_dictionary_get_uint64(v18, "kCBMsgArgHRBReadTxPwrType");
        uint64_t v20 = sub_1002E6E9C();
        int v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unsigned __int16 *, char *, __int16 *, char *, __int16 *, char *, __int16 *, char *, __int16 *, char *, __int16 *))(*(void *)v20 + 1448LL))( v20,  v17,  uint64,  1LL,  &v28,  (char *)&v27 + 1,  &v27,  (char *)&v26 + 1,  &v26,  (char *)&v25 + 1,  &v25,  (char *)&v24 + 1,  &v24,  (char *)&v23 + 1,  &v23);
        if (v13 && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_1006938B0();
        }
      }

      else
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_1006934F4();
        }
        int v13 = 0;
      }
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100693468();
    }
    int v13 = 1;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    char v15 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgConnHandle", v28);
    xpc_dictionary_set_int64(v15, "kCBMsgArgStatus", v13);
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPower2GBr", SHIBYTE(v27));
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPower2GEdr2", (char)v27);
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPower2GEdr3", SHIBYTE(v26));
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPower2GHdr4", (char)v26);
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPower2GHdr8", SHIBYTE(v25));
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPowerHRBBr", (char)v25);
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPowerHRBEdr2", SHIBYTE(v24));
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPowerHRBEdr3", (char)v24);
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPowerHRBHdr4", SHIBYTE(v23));
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPowerHRBHdr8", (char)v23);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v15);
    xpc_release(v15);
  }

void sub_100564A30(uint64_t a1, void *a2)
{
  __int16 v29 = 0;
  uint64_t v28 = 0LL;
  memset(v27, 0, sizeof(v27));
  uint64_t v4 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 2480LL))(v4))
  {
    WORD2(v21[0]) = 0;
    LODWORD(v21[0]) = 0;
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    if (sub_10025D848(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100692360();
      }
    }

    else
    {
      int v12 = (unsigned __int16 *)sub_10012D890((uint64_t)v21);
      if (v12)
      {
        uint64_t v13 = *v12;
        uint64_t v14 = sub_1002E6E9C();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, _OWORD *, uint64_t))(*(void *)v14 + 1464LL))( v14,  v13,  &v28,  v27,  1LL))
        {
          if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
            sub_100693910();
          }
        }

        else
        {
          xpc_object_t reply = xpc_dictionary_create_reply(a2);
          if (reply)
          {
            xpc_object_t v16 = reply;
            __int128 v25 = 0u;
            __int128 v26 = 0u;
            __int128 v23 = 0u;
            __int128 v24 = 0u;
            *(_OWORD *)objects = 0u;
            bzero(v21, 0x280uLL);
            xpc_dictionary_set_uint64(v16, "kCBMsgArgConnHandle", v13);
            xpc_dictionary_set_int64(v16, "kCBMsgArgStatus", 0LL);
            for (uint64_t i = 0LL; i != 10; ++i)
              objects[i] = xpc_int64_create(*((unsigned __int8 *)&v28 + i));
            xpc_object_t v18 = xpc_array_create(objects, 0xAuLL);
            xpc_dictionary_set_value(v16, "kCBMsgArgHRBAfhChannelMap", v18);
            for (uint64_t j = 0LL; j != 80; ++j)
              v21[j] = xpc_int64_create(*((unsigned __int16 *)v27 + j));
            xpc_object_t v20 = xpc_array_create(v21, 0x50uLL);
            xpc_dictionary_set_value(v16, "kCBMsgArgHRBAfhFreqMap", v20);
            xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v16);
            xpc_release(v16);
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        sub_1006934F4();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100693468();
  }

void sub_100564CDC(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2480LL))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBLimitChannelMap");
    uint64_t v6 = sub_1002E6E9C();
    if ((*(unsigned int (**)(uint64_t, void, uint64_t))(*(void *)v6 + 1480LL))(v6, uint64, 1LL))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100693970();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100693468();
  }

void sub_100564DA0(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2480LL))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    char uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBBand");
    xpc_object_t v5 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    char v12 = xpc_dictionary_get_uint64(v5, "kCBMsgArgHRBChannelMaskNumLow");
    xpc_object_t v6 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    char v11 = xpc_dictionary_get_uint64(v6, "kCBMsgArgHRBChannelMaskNumHigh");
    uint64_t v7 = sub_1002E6E9C();
    LODWORD(v8) = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, char *, uint64_t))(*(void *)v7 + 1488LL))( v7,  1LL,  &uint64,  &v12,  &v11,  1LL);
    if ((_DWORD)v8 && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006939D0();
    }
    uint64_t v8 = (int)v8;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100693A30();
    }
    uint64_t v8 = 0LL;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v8);
    xpc_release(v10);
  }

void sub_100564EF0(int a1, xpc_object_t xdict)
{
  __int16 v33 = -1;
  uint64_t v32 = -1LL;
  __int128 v31 = xmmword_1006C4010;
  __int16 v30 = 0;
  int v29 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v10 = sub_10025D848(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgBTAddr");
  if (v10)
  {
    int v11 = v10;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692360();
    }
  }

  else
  {
    xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v12, "kCBMsgArgEnhTestEnable");
    xpc_object_t v13 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int8 uint64 = xpc_dictionary_get_uint64(v13, "kCBMsgArgEnhTxTestHoppingMode");
    xpc_object_t v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v15, "kCBMsgArgEnhTxTestBand");
    xpc_object_t v16 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int8 v28 = xpc_dictionary_get_uint64(v16, "kCBMsgArgEnhTxTestFrequency");
    xpc_object_t v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v17, "kCBMsgArgEnhTxTestInterval");
    xpc_object_t v18 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v18, "kCBMsgArgEnhTxTestNumberPacket");
    xpc_object_t v19 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v19, "kCBMsgArgEnhTxTestModulationType");
    xpc_object_t v20 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v20, "kCBMsgArgEnhTxTestLogicalChan");
    xpc_object_t v21 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v21, "kCBMsgArgEnhTxTestPacketType");
    xpc_object_t v22 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v22, "kCBMsgArgEnhTxTestPacketLen");
    xpc_object_t v23 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v23, "kCBMsgArgEnhTxTestTxPowerLevel");
    xpc_object_t v24 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v24, "kCBMsgArgEnhTxTestTxPowerTableIdx");
    uint64_t v25 = sub_1002E6E9C();
    int v11 = (*(uint64_t (**)(uint64_t, int *, void, void))(*(void *)v25 + 1496LL))(v25, &v29, uint64, v28);
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    __int16 v27 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v11);
    xpc_release(v27);
  }

void sub_100565214(int a1, xpc_object_t xdict)
{
  __int16 v38 = 0;
  int v37 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v10 = sub_10025D848(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgBTAddr");
  if (v10)
  {
    int v11 = v10;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692360();
    }
  }

  else
  {
    xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    char uint64 = xpc_dictionary_get_uint64(v12, "kCBMsgArgEnhTestEnable");
    xpc_object_t v14 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int16 v36 = xpc_dictionary_get_uint64(v14, "kCBMsgArgEnhRxTestReportPeriod");
    xpc_object_t v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int8 v16 = xpc_dictionary_get_uint64(v15, "kCBMsgArgEnhRxTestIs2G");
    xpc_object_t v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int8 v18 = xpc_dictionary_get_uint64(v17, "kCBMsgArgEnhRxTestOffset");
    xpc_object_t v19 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int8 v20 = xpc_dictionary_get_uint64(v19, "kCBMsgArgEnhRxTestFrequency");
    xpc_object_t v21 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int8 v22 = xpc_dictionary_get_uint64(v21, "kCBMsgArgEnhRxTestModulationType");
    xpc_object_t v23 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int8 v24 = xpc_dictionary_get_uint64(v23, "kCBMsgArgEnhRxTestLogicalChan");
    xpc_object_t v25 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    char v26 = xpc_dictionary_get_uint64(v25, "kCBMsgArgEnhRxTestBand");
    xpc_object_t v27 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    char v28 = xpc_dictionary_get_uint64(v27, "kCBMsgArgEnhRxTestPacketType");
    xpc_object_t v29 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    __int16 v30 = xpc_dictionary_get_uint64(v29, "kCBMsgArgEnhRxTestPacketLen");
    else {
      __int16 v31 = 0;
    }
    uint64_t v32 = sub_1002E6E9C();
    BYTE4(v35) = 1;
    WORD1(v35) = v31;
    BYTE1(v35) = v28;
    LOBYTE(v35) = v26;
    int v11 = (*(uint64_t (**)(uint64_t, int *, void, void, void, void, void, void, uint64_t, uint64_t (*)(void *, void *), int *, void))(*(void *)v32 + 1504LL))( v32,  &v37,  v36,  v16,  v18,  v20,  v22,  v24,  v35,  sub_10025DDD0,  &v37,  0LL);
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    __int128 v34 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v11);
    xpc_release(v34);
  }

void sub_100565458(int a1, xpc_object_t xdict)
{
  __int16 v38 = 0;
  int v37 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v10 = sub_10025D848(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgBTAddr");
  if (v10)
  {
    int v11 = v10;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692360();
    }
  }

  else
  {
    xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    char uint64 = xpc_dictionary_get_uint64(v12, "kCBMsgArgEnhTestEnable");
    xpc_object_t v14 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int16 v36 = xpc_dictionary_get_uint64(v14, "kCBMsgArgEnhRxTestReportPeriod");
    xpc_object_t v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int8 v16 = xpc_dictionary_get_uint64(v15, "kCBMsgArgEnhRxTestIs2G");
    xpc_object_t v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int8 v18 = xpc_dictionary_get_uint64(v17, "kCBMsgArgEnhRxTestModulationType");
    xpc_object_t v19 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int8 v20 = xpc_dictionary_get_uint64(v19, "kCBMsgArgEnhRxTestLogicalChan");
    xpc_object_t v21 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    char v22 = xpc_dictionary_get_uint64(v21, "kCBMsgArgEnhRxTestPacketType");
    xpc_object_t v23 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    __int16 v24 = xpc_dictionary_get_uint64(v23, "kCBMsgArgEnhRxTestPacketLen");
    xpc_object_t v25 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    char v26 = xpc_dictionary_get_uint64(v25, "kCBMsgArgEnhRxTestBand");
    xpc_object_t v27 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int8 v28 = xpc_dictionary_get_uint64(v27, "kCBMsgArgEnhRxTestOffset");
    xpc_object_t v29 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int8 v30 = xpc_dictionary_get_uint64(v29, "kCBMsgArgEnhRxTestFrequency");
    else {
      __int16 v31 = 0;
    }
    uint64_t v32 = sub_1002E6E9C();
    BYTE4(v35) = 1;
    WORD1(v35) = v31;
    BYTE1(v35) = v22;
    LOBYTE(v35) = v26;
    int v11 = (*(uint64_t (**)(uint64_t, int *, void, void, void, void, void, void, uint64_t, uint64_t (*)(void *, void *), int *, void))(*(void *)v32 + 1504LL))( v32,  &v37,  v36,  v16,  v28,  v30,  v18,  v20,  v35,  sub_10025DDD0,  &v37,  0LL);
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    __int128 v34 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v11);
    xpc_release(v34);
  }

void sub_1005656A0(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgEnhTxTestContHRBEnable");
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v27 = xpc_dictionary_get_uint64(v4, "kCBMsgArgEnhTxTestContCarrierEnable");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgEnhTxTestContDualCore");
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgEnhTxTestContAntennaSelection");
  xpc_object_t v9 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v10 = xpc_dictionary_get_uint64(v9, "kCBMsgArgEnhTxTestContMode");
  xpc_object_t v11 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v12 = xpc_dictionary_get_uint64(v11, "kCBMsgArgEnhTxTestContModulationType");
  xpc_object_t v13 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v14 = xpc_dictionary_get_uint64(v13, "kCBMsgArgEnhTxTestContTxPower");
  xpc_object_t v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v16 = xpc_dictionary_get_uint64(v15, "kCBMsgArgEnhTxTestContTxPowerTableIdx");
  xpc_object_t v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v18 = xpc_dictionary_get_uint64(v17, "kCBMsgArgEnhTxTestContBand");
  xpc_object_t v19 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v20 = xpc_dictionary_get_uint64(v19, "kCBMsgArgEnhTxTestContFrequency2G");
  xpc_object_t v21 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v21, "kCBMsgArgEnhTxTestContFrequencyHRB");
  uint64_t v22 = sub_1002E6E9C();
  BYTE2(v26) = v20;
  BYTE1(v26) = v18;
  LOBYTE(v26) = v8;
  int v23 = (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, void, int))(*(void *)v22 + 1512LL))( v22,  uint64,  v27,  v10,  v12,  v14,  v16,  v6,  v26);
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v25 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v23);
    xpc_release(v25);
  }

void sub_1005658B4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLERoleIsEnable");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgLERoleRoles");
  sub_1000A85A0();
  else {
    int v15 = sub_1001BA1BC(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  int v16 = v15;
  sub_1000A8688();
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    char v18 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v16);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v18);
    xpc_release(v18);
  }

void sub_100565984(uint64_t a1, xpc_object_t xdict)
{
  __int16 v26 = 0;
  int v25 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_10025D848(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr");
  if (v11)
  {
    LODWORD(v12) = v11;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692360();
    }
    uint64_t v12 = (int)v12;
  }

  else
  {
    uint64_t v13 = sub_10012D890((uint64_t)&v25);
    if (v13)
    {
      uint64_t v14 = (unsigned __int16 *)v13;
      xpc_object_t v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      unsigned __int8 uint64 = xpc_dictionary_get_uint64(v15, "kCBMsgArgBTPerfTestType");
      xpc_object_t v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      int v18 = xpc_dictionary_get_uint64(v17, "kCBMsgArgBTPerfTestDurationInSec");
      xpc_object_t v19 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
      {
        buf.tv_sec = __PAIR64__(*v14, 67109888);
        LOWORD(buf.tv_usec) = 1024;
        *(__darwin_suseconds_t *)((char *)&buf.tv_usec + 2) = uint64;
        *((_WORD *)&buf.tv_usec + 3) = 1024;
        int v28 = 0;
        __int16 v29 = 1024;
        int v30 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "_BTPerfTest handle=%x type=%d isSymmetric=%d durationInSec=%d\n",  (uint8_t *)&buf,  0x1Au);
        xpc_object_t v19 = (os_log_s *)qword_1008F75F0;
      }

      qword_1008F1298 = (uint64_t)v14;
      byte_1008F12A0 = uint64;
      dword_1008F12A8 = v18;
      dword_1008F128C = 0;
      dword_1008F1294 = 0;
      byte_1008F12AC = 0;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = word_1006C4070[uint64];
        LODWORD(buf.tv_sec) = 67109120;
        HIDWORD(buf.tv_sec) = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "_BTPerfTest packetSize=%d\n",  (uint8_t *)&buf,  8u);
      }

      buf.tv_sec = 0LL;
      *(void *)&buf.tv_usec = 0LL;
      gettimeofday(&buf, 0LL);
      *(double *)&qword_1008F12B0 = (double)buf.tv_usec / 1000.0 + (double)(1000 * buf.tv_sec);
      dispatch_time_t v21 = dispatch_time(0LL, 0LL);
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
      dispatch_after_f(v21, global_queue, 0LL, (dispatch_function_t)sub_10056A320);
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      sub_1006934F4();
    }

    uint64_t v12 = 0LL;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    __int16 v24 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v12);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v24);
    xpc_release(v24);
  }

void sub_100565C88(uint64_t a1, void *a2)
{
  byte_1008F1288 = 1;
  sub_1000A85A0();
  int v4 = sub_10017A6F0(20545, (uint64_t)sub_100569A40);
  sub_1000A8688();
  dword_1008F128C = 0;
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    uint64_t v6 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v6);
    xpc_release(v6);
  }

void sub_100565D24(uint64_t a1, void *a2)
{
  int v4 = sub_10017A8B8(20545);
  sub_1000A8688();
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    uint64_t v6 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v4);
    if (byte_1008F12A0 > 6u)
    {
      double v9 = 0.0;
    }

    else
    {
      if (((1 << byte_1008F12A0) & 0x49) != 0)
      {
        double v7 = (double)(1000 * dword_1008F12A8);
        double v8 = 3.75;
      }

      else
      {
        double v7 = (double)(1000 * dword_1008F12A8);
        if (((1 << byte_1008F12A0) & 0x12) != 0) {
          double v8 = 1.25;
        }
        else {
          double v8 = 2.5;
        }
      }

      double v9 = v7 / v8;
    }

    xpc_dictionary_set_double(v6, "kCBMsgArgBTPerfTestMaxPacket", v9);
    if (byte_1008F1288 == 1)
    {
      xpc_dictionary_set_uint64(v6, "kCBMsgArgBTPerfTestPacketRcvd", dword_1008F128C);
      dword_1008F128C = 0;
    }

    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v6);
    xpc_release(v6);
  }

void sub_100565E6C(uint64_t a1, xpc_object_t xdict)
{
  __int16 v16 = 0;
  int v15 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_10025D848(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr");
  if (v11)
  {
    int v12 = v11;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692360();
    }
  }

  else
  {
    byte_1008F1288 = 0;
    sub_1000A85A0();
    int v12 = sub_100174028( (uint64_t)sub_100569B5C,  (uint64_t)sub_100569C30,  (uint64_t)sub_100569D78,  20545,  (uint64_t)&v15,  (uint64_t)&unk_1006C4020,  &word_1008F1290,  (uint64_t)&unk_1006C4040);
    sub_1000A8688();
  }

  dword_1008F1294 = 0;
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v14 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v12);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v14);
    xpc_release(v14);
  }

void sub_100565F98(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_10025D848(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr");
  if (v11)
  {
    int v12 = v11;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692360();
    }
  }

  else
  {
    sub_1000A85A0();
    int v12 = sub_1001759FC((unsigned __int16)word_1008F1290, 436LL);
    sub_1000A8688();
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v14 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v12);
    if (byte_1008F12A0 > 6u)
    {
      double v17 = 0.0;
    }

    else
    {
      if (((1 << byte_1008F12A0) & 0x49) != 0)
      {
        double v15 = (double)(1000 * dword_1008F12A8);
        double v16 = 3.75;
      }

      else
      {
        double v15 = (double)(1000 * dword_1008F12A8);
        if (((1 << byte_1008F12A0) & 0x12) != 0) {
          double v16 = 1.25;
        }
        else {
          double v16 = 2.5;
        }
      }

      double v17 = v15 / v16;
    }

    xpc_dictionary_set_double(v14, "kCBMsgArgBTPerfTestMaxPacket", v17);
    if ((byte_1008F1288 & 1) == 0)
    {
      xpc_dictionary_set_uint64(v14, "kCBMsgArgBTPerfTestPacketSent", dword_1008F1294);
      xpc_dictionary_set_double( v14,  "kCBMsgArgBTPerfTestThroughput",  (double)((word_1006C4070[byte_1008F12A0] + 4) * dword_1008F1294)
      * 8.0
      / (double)(1000 * dword_1008F12A8));
      dword_1008F1294 = 0;
    }

    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v14);
    xpc_release(v14);
  }

void sub_10056619C(int a1, xpc_object_t xdict)
{
  __int16 v24 = 0;
  int v23 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_10025D848(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692360();
    }
LABEL_4:
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100693A88();
    }
    return;
  }

  xpc_object_t v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(v10, "kCBMsgArgSniffIntervalMax");
  xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 v13 = xpc_dictionary_get_uint64(v12, "kCBMsgArgSniffIntervalMin");
  xpc_object_t v14 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v14, "kCBMsgArgSniffAttempt");
  xpc_object_t v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v15, "kCBMsgArgSniffTimeout");
  xpc_object_t v16 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v17 = xpc_dictionary_get_BOOL(v16, "kCBMsgArgAoSStates");
  sub_1000A85A0();
  int v18 = sub_10011394C((uint64_t)&v23, uint64, v13);
  sub_1000A8688();
  if (!v17 || v18)
  {
    if (!v18) {
      return;
    }
    goto LABEL_4;
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A1980);
  }
  int v21 = v23;
  __int16 v22 = v24;
  xpc_object_t v19 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v21, 1);
  if (v19)
  {
    uint64_t v20 = (uint64_t)v19;
    if (qword_1008D6170 != -1) {
      dispatch_once(&qword_1008D6170, &stru_1008A19A0);
    }
    sub_100258A9C(qword_1008D6168, 1, v20);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100693A5C();
  }

void sub_1005663E4(int a1, xpc_object_t xdict)
{
  __int16 v18 = 0;
  int v17 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_10025D848(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692360();
    }
LABEL_4:
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100693AE8();
    }
    return;
  }

  xpc_object_t v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v11 = xpc_dictionary_get_BOOL(v10, "kCBMsgArgAoSStates");
  sub_1000A85A0();
  int v12 = sub_100113CA0((uint64_t)&v17);
  sub_1000A8688();
  if (!v11 || v12)
  {
    if (!v12) {
      return;
    }
    goto LABEL_4;
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A1980);
  }
  int v15 = v17;
  __int16 v16 = v18;
  unsigned __int16 v13 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v15, 1);
  if (v13)
  {
    uint64_t v14 = (uint64_t)v13;
    if (qword_1008D6170 != -1) {
      dispatch_once(&qword_1008D6170, &stru_1008A19A0);
    }
    sub_100258A9C(qword_1008D6168, 0, v14);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100693A5C();
  }

void sub_100566598(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_10025D848(value, 1, v3, v4, v5, v6, v7, v8, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100693BA8();
    }
  }

  else
  {
    char uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPhyStatsEnable");
    unsigned __int16 v10 = xpc_dictionary_get_uint64(value, "kCBMsgArgPhyStatsInterval");
    unint64_t v11 = (unint64_t)xpc_dictionary_get_uint64(value, "kCBMsgArgType") << 48;
    uint64_t v12 = sub_1002E6E9C();
    if ((*(unsigned int (**)(uint64_t, BOOL, void, unint64_t, uint64_t))(*(void *)v12 + 320LL))( v12,  uint64 != 0LL,  v10,  v11,  1LL)
      && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      sub_100693B48();
    }
  }

void sub_1005666F8(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2544LL))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    __int16 v29 = 0;
    int v28 = 0;
    __int16 v24 = sub_10025DDD0;
    if (sub_10025D848(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
LABEL_4:
      }
        sub_100693C08();
    }

    else
    {
      unint64_t v11 = (unsigned __int16 *)sub_10012D890((uint64_t)&v28);
      if (v11)
      {
        unsigned int v27 = *v11;
        unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffInterval");
        unsigned __int8 v25 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffMaxAge");
        unsigned __int8 v12 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffMaxRetry");
        unsigned __int8 v13 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffPacketMerge");
        unsigned __int16 v14 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffAudioDownlinkCID");
        unsigned __int16 v15 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffAudioUplinkCID");
        __int16 v16 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffPolicy");
        __int16 v17 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffTimestampPeriod");
        __int16 v18 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffCToPPacketSize");
        __int16 v19 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffPToCPacketSize");
        char v20 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffMethod");
        char v21 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffAdvanceTime");
        uint64_t v22 = sub_1002E6E9C();
        BYTE2(v24) = 1;
        BYTE1(v24) = v21;
        LOBYTE(v24) = v20;
        HIWORD(v23) = v19;
        WORD2(v23) = v18;
        WORD1(v23) = v17;
        LOWORD(v23) = v16;
        if ((*(unsigned int (**)(uint64_t, void, void, void, void, void, void, void, uint64_t, uint64_t (*)(void *, void *), int *, void))(*(void *)v22 + 1520LL))( v22,  v27,  uint64,  v25,  v12,  v13,  v14,  v15,  v23,  v24,  &v28,  0LL)
          && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_4;
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        sub_1006934F4();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100693C68();
  }

void sub_1005669A0(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2544LL))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    __int16 v15 = 0;
    int v14 = 0;
    if (sub_10025D848(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
LABEL_4:
      }
        sub_100693C94();
    }

    else
    {
      unint64_t v11 = (unsigned __int16 *)sub_10012D890((uint64_t)&v14);
      if (v11)
      {
        uint64_t v12 = *v11;
        uint64_t v13 = sub_1002E6E9C();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 1528LL))(v13, v12, 1LL)
          && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_4;
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        sub_1006934F4();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100693CF4();
  }

void sub_100566AF4(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2544LL))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    __int16 v20 = 0;
    int v19 = 0;
    if (sub_10025D848(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
LABEL_4:
      }
        sub_100693D20();
    }

    else
    {
      unint64_t v11 = (unsigned __int16 *)sub_10012D890((uint64_t)&v19);
      if (v11)
      {
        uint64_t v12 = *v11;
        unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffTimestampPeriod");
        unsigned __int16 v14 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffCToPPacketSize");
        unsigned __int16 v15 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffPToCPacketSize");
        unsigned __int8 v16 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffMaxAge");
        unsigned __int16 v17 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffAudioUplinkCID");
        uint64_t v18 = sub_1002E6E9C();
        if ((*(unsigned int (**)(uint64_t, uint64_t, void, void, void, void, void, uint64_t))(*(void *)v18 + 1536LL))( v18,  v12,  uint64,  v14,  v15,  v16,  v17,  1LL)
          && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_4;
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        sub_1006934F4();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100693D80();
  }

void sub_100566CD4(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2544LL))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    __int16 v16 = 0;
    int v15 = 0;
    if (sub_10025D848(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
LABEL_4:
      }
        sub_100693DAC();
    }

    else
    {
      unint64_t v11 = (unsigned __int16 *)sub_10012D890((uint64_t)&v15);
      if (v11)
      {
        uint64_t v12 = *v11;
        unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffPToCMaxAge");
        uint64_t v14 = sub_1002E6E9C();
        if ((*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v14 + 1544LL))( v14,  v12,  uint64,  1LL)
          && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_4;
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        sub_1006934F4();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100693E0C();
  }

void sub_100566E44(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2544LL))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    __int16 v16 = 0;
    int v15 = 0;
    if (sub_10025D848(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
LABEL_4:
      }
        sub_100693E38();
    }

    else
    {
      unint64_t v11 = (unsigned __int16 *)sub_10012D890((uint64_t)&v15);
      if (v11)
      {
        uint64_t v12 = *v11;
        unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffLMPFlow");
        uint64_t v14 = sub_1002E6E9C();
        if ((*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v14 + 1552LL))( v14,  v12,  uint64,  1LL)
          && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_4;
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        sub_1006934F4();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100693E98();
  }

void sub_100566FB4(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2544LL))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    __int16 v16 = 0;
    int v15 = 0;
    if (sub_10025D848(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
LABEL_4:
      }
        sub_100693EC4();
    }

    else
    {
      unint64_t v11 = (unsigned __int16 *)sub_10012D890((uint64_t)&v15);
      if (v11)
      {
        uint64_t v12 = *v11;
        unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffEmptyPacketReport");
        uint64_t v14 = sub_1002E6E9C();
        if ((*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v14 + 1560LL))( v14,  v12,  uint64,  1LL)
          && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_4;
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        sub_1006934F4();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100693F24();
  }

void sub_100567124(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2544LL))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffControlAoS");
    uint64_t v6 = sub_1002E6E9C();
    if ((*(unsigned int (**)(uint64_t, void, uint64_t))(*(void *)v6 + 1568LL))(v6, uint64, 1LL))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_100693F50();
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
  {
    sub_100693FB0();
  }

void sub_1005671E8(int a1, xpc_object_t xdict)
{
  xpc_object_t v2 = xdict;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v4 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTSCPageScanEnable") != 0LL;
  xpc_object_t v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTSCPageScanInterval");
  xpc_object_t v7 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  unsigned __int16 v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgBTSCPageScanWindow");
  xpc_object_t v9 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  BOOL v10 = xpc_dictionary_get_uint64(v9, "kCBMsgArgBTSCPageScanInterlaced") != 0LL;
  xpc_object_t v11 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  BOOL v12 = xpc_dictionary_get_uint64(v11, "kCBMsgArgBTSCPageScanElnaMode") != 0LL;
  xpc_object_t v13 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  BOOL v14 = xpc_dictionary_get_uint64(v13, "kCBMsgArgBTSCPageScanUseAuxScanParams") != 0LL;
  xpc_object_t v15 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  BOOL v16 = xpc_dictionary_get_uint64(v15, "kCBMsgArgBTSCPageScanEnableAuxScan") != 0LL;
  xpc_object_t v17 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  BOOL v18 = xpc_dictionary_get_uint64(v17, "kCBMsgArgBTSCPageScanPreemptAuxScan") != 0LL;
  xpc_object_t v19 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v19, "kCBMsgArgBTSCPageScanAuxScanDurationInMs");
  uint64_t v20 = sub_1002E6E9C();
  HIBYTE(v21) = (_BYTE)v2;
  LOBYTE(v21) = v18;
  if ((*(unsigned int (**)(uint64_t, BOOL, void, void, BOOL, BOOL, BOOL, BOOL, __int16))(*(void *)v20 + 3400LL))( v20,  v4,  uint64,  v8,  v10,  v12,  v14,  v16,  v21))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100693FDC();
    }
  }

void sub_1005673B0(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1002E6E9C();
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(void *)v4 + 2936LL))(v4, 1LL, v9);
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    xpc_object_t v7 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v5);
    if (v5)
    {
      uint64_t v8 = 0LL;
    }

    else
    {
      uint64_t v8 = 80LL;
      xpc_dictionary_set_data(v7, "kCBMsgArgSPMICoexBufferAddr", v9, 0x50uLL);
    }

    xpc_dictionary_set_uint64(v7, "kCBMsgArgSPMICoexBufferSize", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v7);
    xpc_release(v7);
  }

void sub_100567480(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSPMIPeripheralID");
  uint64_t v4 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(*(void *)v4 + 2944LL))( v4,  uint64,  1LL,  v5))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10069403C();
    }
  }

void sub_100567520(int a1, xpc_object_t xdict)
{
  uint64_t v8 = 0x7766554433221100LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSPMIPeripheralID");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v7 = (16 * xpc_dictionary_get_uint64(v5, "kCBMsgArgSPMICoexMsgPriority")) | 8;
  uint64_t v6 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t *, uint64_t))(*(void *)v6 + 2952LL))( v6,  uint64,  &v7,  &v8,  1LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10069409C();
    }
  }

void sub_10056762C(int a1, xpc_object_t xdict)
{
  xpc_object_t v2 = xdict;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSPMICoexTxType");
  xpc_object_t v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  unsigned __int8 v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgSPMICoexTxID");
  xpc_object_t v7 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v7, "kCBMsgArgSPMICoexTxControl");
  uint64_t v8 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, void, void, uint64_t))(*(void *)v8 + 2960LL))( v8,  uint64,  v6,  v2,  1LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006940FC();
    }
  }

void sub_100567700(int a1, xpc_object_t xdict)
{
  xpc_object_t v2 = xdict;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSPMICoexType53EnabledBitmask");
  xpc_object_t v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v5, "kCBMsgArgSPMICoexType53Interval");
  uint64_t v6 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, void, uint64_t))(*(void *)v6 + 2968LL))( v6,  uint64,  v2,  1LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10069415C();
    }
  }

void sub_1005677B4(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v12[0] = xpc_dictionary_get_uint64(value, "kCBMsgArgSPMICoexType60ID2G");
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v12[1] = xpc_dictionary_get_uint64(v4, "kCBMsgArgSPMICoexType60IDHRB1");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  _DWORD v12[2] = xpc_dictionary_get_uint64(v5, "kCBMsgArgSPMICoexType60IDHRB3");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  _OWORD v12[3] = xpc_dictionary_get_uint64(v6, "kCBMsgArgSPMICoexType60IDHRB4");
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v12[4] = xpc_dictionary_get_uint64(v7, "kCBMsgArgSPMICoexType60IDHRB5A");
  xpc_object_t v8 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v12[5] = xpc_dictionary_get_uint64(v8, "kCBMsgArgSPMICoexType60IDHRB5B");
  xpc_object_t v9 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v12[6] = xpc_dictionary_get_uint64(v9, "kCBMsgArgSPMICoexType60IDHRB5C");
  xpc_object_t v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v12[7] = xpc_dictionary_get_uint64(v10, "kCBMsgArgSPMICoexType60IDHRB5D");
  uint64_t v11 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, _BYTE *, uint64_t))(*(void *)v11 + 2976LL))(v11, v12, 1LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006941BC();
    }
  }

void sub_10056790C(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 8LL))(v4))
  {
    if ((*(_DWORD *)(sub_1002E6E9C() + 708) - 22) > 0x7B9)
    {
      LODWORD(uint64) = 0;
      unsigned __int8 v8 = 0;
      int v10 = 2;
    }

    else
    {
      xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
      uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgReadControllerRamAddr");
      xpc_object_t v7 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
      unsigned __int8 v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgReadControllerRamSize");
      uint64_t v9 = sub_1002E6E9C();
      int v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, _OWORD *))(*(void *)v9 + 3440LL))( v9,  uint64,  v8,  v13);
      if (v10 && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10069421C();
      }
    }
  }

  else
  {
    LODWORD(uint64) = 0;
    unsigned __int8 v8 = 0;
    int v10 = 1;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    BOOL v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v10);
    if (!v10)
    {
      xpc_dictionary_set_uint64(v12, "kCBMsgArgReadControllerRamAddr", uint64);
      xpc_dictionary_set_uint64(v12, "kCBMsgArgReadControllerRamSize", v8);
      xpc_dictionary_set_data(v12, "kCBMsgArgReadControllerRamData", v13, v8);
    }

    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v12);
    xpc_release(v12);
  }

void sub_100567AF4(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgMinEncryptionKeySize");
  sub_1000A85A0();
  int v10 = sub_1001214B4(133, 0LL, v4, v5, v6, v7, v8, v9, uint64);
  sub_1000A8688();
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10069427C();
    }
  }

void sub_100567B84(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgCalSetTxPowerMode");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgTxFEConfigAntenna");
  xpc_object_t v8 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v9 = xpc_dictionary_get_uint64(v8, "kCBMsgArgTxFEConfigCountryCode");
  xpc_object_t v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v11 = xpc_dictionary_get_uint64(v10, "kCBMsgArgTxFEConfigPowerCap");
  if (uint64 == 80)
  {
    v16[0] = uint64;
    v16[1] = 0;
    void v16[2] = v7;
    v16[3] = v9;
    v16[4] = v11;
    uint64_t v12 = sub_1002E6E9C();
    LODWORD(v13) = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(void *)v12 + 496LL))(v12, 5LL, v16);
    if ((_DWORD)v13 && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006942DC();
    }
    uint64_t v13 = (int)v13;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10069433C();
    }
    uint64_t v13 = 1LL;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v15 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v15);
    xpc_release(v15);
  }

void sub_100567D0C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTAddr");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgAction");
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A1980);
  }
  xpc_object_t v8 = sub_10040007C(off_1008D5F48, uint64, 1);
  if (v8)
  {
    char v9 = v8;
    if (v7 == 3)
    {
      *(_DWORD *)uint64_t v35 = 393218;
      xpc_object_t v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      LOBYTE(v36) = xpc_dictionary_get_uint64(v10, "kCBMsgArgBT2GEnable") & 7;
      xpc_object_t v11 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      BYTE1(v36) = xpc_dictionary_get_int64(v11, "kCBMsgArgBT2GSigRssiThreshold");
      xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      BYTE2(v36) = xpc_dictionary_get_int64(v12, "kCBMsgArgBT2GiPABFRssiThreshold");
      xpc_object_t v13 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      HIBYTE(v36) = xpc_dictionary_get_int64(v13, "kCBMsgArgBT2GePABFRssiThreshold");
      xpc_object_t v14 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      v37[0] = xpc_dictionary_get_int64(v14, "kCBMsgArgBT2GBFGainThreshold");
      *(_WORD *)&v37[1] = 1537;
      v37[3] = 0;
      xpc_object_t v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      v37[4] = xpc_dictionary_get_uint64(v15, "kCBMsgArgHRBEnable") & 7;
      xpc_object_t v16 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      v37[5] = xpc_dictionary_get_int64(v16, "kCBMsgArgHRBSigRssiThreshold");
      xpc_object_t v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      LOBYTE(v38) = xpc_dictionary_get_int64(v17, "kCBMsgArgHRBiPABFRssiThreshold");
      xpc_object_t v18 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      HIBYTE(v38) = xpc_dictionary_get_int64(v18, "kCBMsgArgHRBePABFRssiThreshold");
      xpc_object_t v19 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      LOBYTE(v39) = xpc_dictionary_get_int64(v19, "kCBMsgArgHRBBFGainThreshold");
      uint64_t v20 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)timeval buf = 67109120;
        int v45 = 3;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Action:%d Multiband Setting\n", buf, 8u);
      }

      uint64_t v21 = sub_1002E6E9C();
      int v22 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint8_t *))(*(void *)v21 + 144LL))( v21,  v9,  17LL,  v35);
    }

    else
    {
      uint64_t v34 = a1;
      xpc_object_t v23 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      unsigned __int8 v24 = xpc_dictionary_get_uint64(v23, "kCBMsgArgPolicy");
      xpc_object_t v25 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      char int64 = xpc_dictionary_get_int64(v25, "kCBMsgArgiPABFThreshold");
      xpc_object_t v27 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      char v28 = xpc_dictionary_get_int64(v27, "kCBMsgArgePABFThreshold");
      xpc_object_t v29 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      unsigned __int8 v30 = xpc_dictionary_get_uint64(v29, "kCBMsgArgeBFGainThreshold");
      __int16 v31 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v35 = 67110144;
        int v36 = v7;
        *(_WORD *)int v37 = 1024;
        *(_DWORD *)&v37[2] = v24;
        __int16 v38 = 1024;
        int v39 = int64;
        __int16 v40 = 1024;
        int v41 = v28;
        __int16 v42 = 1024;
        int v43 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "Action:%d Policy:%d iPABFThreshold:%d ePABFThreshold:%d BFGainThreshold:%d\n",  v35,  0x20u);
      }

      uint64_t v32 = sub_1002E6E9C();
      int v22 = (*(uint64_t (**)(uint64_t, void, void *, void, void, void, void))(*(void *)v32 + 128LL))( v32,  v7,  v9,  v24,  int64,  (char)v30,  v28);
      a1 = v34;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100693A5C();
    }
    int v22 = 1;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v22);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), reply);
  xpc_release(reply);
}

void sub_10056815C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTAddr");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgAction");
  xpc_object_t v8 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v9 = xpc_dictionary_get_uint64(v8, "kCBMsgArgPolicy");
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A1980);
  }
  xpc_object_t v10 = sub_10040007C(off_1008D5F48, uint64, 1);
  if (v10)
  {
    xpc_object_t v11 = v10;
    xpc_object_t v12 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
    {
      v16[0] = 67109376;
      v16[1] = v7;
      __int16 v17 = 1024;
      int v18 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "MRC logging: Action:%d Policy:%d \n",  (uint8_t *)v16,  0xEu);
    }

    uint64_t v13 = sub_1002E6E9C();
    uint64_t v14 = (*(int (**)(uint64_t, void, void *, BOOL))(*(void *)v13 + 152LL))(v13, v7, v11, v9 != 0LL);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100693A5C();
    }
    uint64_t v14 = 1LL;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v14);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), reply);
  xpc_release(reply);
}

void sub_10056835C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgBTAntennaAction");
  xpc_object_t v8 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v9 = xpc_dictionary_get_uint64(v8, "kCBMsgArgBTAntennaCfg");
  xpc_object_t v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v11 = xpc_dictionary_get_uint64(v10, "kCBMsgArgBTAntennaCfgParam1");
  xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v13 = xpc_dictionary_get_uint64(v12, "kCBMsgArgBTAntennaCfgParam2");
  uint64_t v14 = sub_1002E6E9C();
  int v15 = (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, void))(*(void *)v14 + 896LL))( v14,  uint64,  v7,  v9,  v11,  v13,  0LL,  0LL);
  if (v15)
  {
    xpc_object_t v16 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
    {
      v18[0] = 67110144;
      v18[1] = uint64;
      __int16 v19 = 1024;
      int v20 = v7;
      __int16 v21 = 1024;
      int v22 = v9;
      __int16 v23 = 1024;
      int v24 = v11;
      __int16 v25 = 1024;
      int v26 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Failed to set BT antenna config; Handle: %d, Action: %d, Config: %d, Param1: %d, Param2: %d",
        (uint8_t *)v18,
        0x20u);
    }
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v15);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), reply);
  xpc_release(reply);
}

void sub_100568558(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  string = xpc_dictionary_get_string(value, "kCBMsgArgLoadMSFFilePath");
  off_t v17 = 0LL;
  int v18 = 0LL;
  int v6 = sub_100569F40((uint64_t)string, string, &v18, &v17);
  unsigned __int8 v7 = v18;
  if (v6)
  {
    int v8 = 1;
  }

  else
  {
    off_t v10 = v17;
    if (v17 < 1)
    {
      int v8 = 0;
    }

    else
    {
      int64_t v11 = v17 / 0xE6uLL;
      xpc_object_t v12 = (char *)v18;
      unsigned __int8 v13 = (char *)v18;
      while (1)
      {
        uint64_t v14 = sub_1002E6E9C();
        int v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *, void, uint64_t))(*(void *)v14 + 3576LL))( v14,  3LL,  (unsigned __int16)v11,  v13,  (unsigned __int16)v10,  1LL);
        if (v8) {
          break;
        }
        BOOL v15 = v11-- < 1;
        if (!v15)
        {
          v13 += 230;
          v12 += 230;
          BOOL v15 = v10 <= 230;
          v10 -= 230LL;
          if (!v15) {
            continue;
          }
        }

        goto LABEL_3;
      }

      xpc_object_t v16 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)timeval buf = 67109888;
        int v20 = 3;
        __int16 v21 = 1024;
        int v22 = (unsigned __int16)v11;
        __int16 v23 = 2048;
        int v24 = v12;
        __int16 v25 = 1024;
        int v26 = (unsigned __int16)v10;
        _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Error Downloading MSF File: transferType = %d, chunkLeft = %d,  payID = %p, dataLen = %d\n",  buf,  0x1Eu);
        xpc_object_t v16 = (os_log_s *)qword_1008F75F0;
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_10069439C();
      }
    }
  }

void sub_10056876C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  string = xpc_dictionary_get_string(value, "kCBMsgArgLoadPwrRegulatoryFilePath");
  off_t v12 = 0LL;
  unsigned __int8 v13 = 0LL;
  if (sub_100569F40((uint64_t)string, string, &v13, &v12))
  {
    uint64_t v6 = 1LL;
    goto LABEL_12;
  }

  unsigned __int16 v7 = v12;
  if (v12 != 250 && v12 != 210)
  {
    off_t v10 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006943C8(v7, v10);
    }
    goto LABEL_11;
  }

  uint64_t v8 = sub_1002E6E9C();
  int v9 = (*(uint64_t (**)(uint64_t, void *, void, uint64_t))(*(void *)v8 + 3584LL))(v8, v13, v7, 1LL);
  if (!v9)
  {
LABEL_11:
    uint64_t v6 = 0LL;
    goto LABEL_12;
  }

  LODWORD(v6) = v9;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
    sub_100694458();
  }
  uint64_t v6 = (int)v6;
LABEL_12:
  if (v13) {
    free(v13);
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v6);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), reply);
  xpc_release(reply);
}

void sub_1005688B0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  string = xpc_dictionary_get_string(value, "kCBMsgArgLoadPwrRegulatoryFilePathA3");
  off_t v17 = 0LL;
  int v18 = 0LL;
  int v6 = sub_100569F40((uint64_t)string, string, &v18, &v17);
  unsigned __int16 v7 = v18;
  if (v6)
  {
    int v8 = 1;
  }

  else
  {
    off_t v10 = v17;
    if (v17 < 1)
    {
      int v8 = 0;
    }

    else
    {
      int64_t v11 = v17 / 0xCFuLL;
      off_t v12 = (char *)v18;
      unsigned __int8 v13 = (char *)v18;
      while (1)
      {
        uint64_t v14 = sub_1002E6E9C();
        int v8 = (*(uint64_t (**)(uint64_t, void, char *, void, uint64_t))(*(void *)v14 + 3592LL))( v14,  (unsigned __int16)v11,  v13,  (unsigned __int16)v10,  1LL);
        if (v8) {
          break;
        }
        BOOL v15 = v11-- < 1;
        if (!v15)
        {
          v13 += 207;
          v12 += 207;
          BOOL v15 = v10 <= 207;
          v10 -= 207LL;
          if (!v15) {
            continue;
          }
        }

        goto LABEL_3;
      }

      xpc_object_t v16 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)timeval buf = 67109632;
        int v20 = (unsigned __int16)v11;
        __int16 v21 = 2048;
        int v22 = v12;
        __int16 v23 = 1024;
        int v24 = (unsigned __int16)v10;
        _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Error Downloading Power Regulatory A3 File: chunkLeft = %d,  payID = %p, dataLen = %d\n",  buf,  0x18u);
        xpc_object_t v16 = (os_log_s *)qword_1008F75F0;
      }

      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_10069439C();
      }
    }
  }

void sub_100568ABC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTAddr");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgTriggerULLM");
  int v8 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    v13[0] = 67109120;
    v13[1] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "BTTest Command Low Latency Game received: %d\n",  (uint8_t *)v13,  8u);
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A1980);
  }
  int v9 = sub_10040007C(off_1008D5F48, uint64, 1);
  if (!v9)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100693A5C();
    }
    goto LABEL_15;
  }

  uint64_t v10 = (uint64_t)v9;
  if (!sub_1003D0670((uint64_t)v9))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100694484();
    }
    goto LABEL_15;
  }

  if (!_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming"))
  {
LABEL_15:
    uint64_t v11 = 1LL;
    goto LABEL_16;
  }

  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_1008A19C0);
  }
  sub_1004B41F8((uint64_t)off_1008D60E8, v7 != 0LL, v10);
  uint64_t v11 = 0LL;
LABEL_16:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v11);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), reply);
  xpc_release(reply);
}

void sub_100568CDC(uint64_t a1, xpc_object_t xdict)
{
  __int16 v17 = 0;
  int v16 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_10025D848(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006944B0();
    }
    int v11 = 1;
  }

  else
  {
    xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    int uint64 = xpc_dictionary_get_uint64(v12, "kCBMsgArgBudswapCmd");
    if (uint64 == 2)
    {
      sub_1000A85A0();
      int v14 = sub_1000AFBF0((uint64_t)&v16);
    }

    else
    {
      if (uint64 != 1)
      {
        int v11 = 0;
        goto LABEL_11;
      }

      sub_1000A85A0();
      int v14 = sub_1000AF5BC((unsigned __int8 *)&v16);
    }

    int v11 = v14;
    sub_1000A8688();
  }

void sub_100568E0C(uint64_t a1, xpc_object_t xdict)
{
  size_t length = 0LL;
  LOWORD(v21) = 0;
  memset(bytes, 0, sizeof(bytes));
  char v15 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16LL))(v5))
  {
    LOWORD(v21) = 0;
    uint64_t v6 = sub_1002E6E00();
    sub_10002418C(buf, "Device");
    sub_10002418C(__p, "RAWHCICMD");
    (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v6 + 72LL))(v6, buf, __p, &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v15)
    {
      unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgOpcode");
      data = xpc_dictionary_get_data(value, "kCBMsgArgData", &length);
      uint64_t v9 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)timeval buf = 136315394;
        *(void *)&uint8_t buf[4] = "handleHciCmdMsg";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = uint64;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: %s opcode=%d", buf, 0x12u);
      }

      uint64_t v10 = sub_1002E6E9C();
      int v11 = (*(uint64_t (**)(uint64_t, void, const void *, void, void (*)(int, const void *, unsigned int, void *), _OWORD *))(*(void *)v10 + 3568LL))( v10,  uint64,  data,  (unsigned __int16)length,  sub_10056A278,  bytes);
      if (!v11)
      {
        __int128 v18 = 0u;
        __int128 v19 = 0u;
        memset(buf, 0, sizeof(buf));
        sub_100242DC4(buf);
        __p[0] = 0LL;
        __p[1] = 0LL;
        sub_100242F28((uint64_t)__p, (uint64_t)buf);
        if (sub_1002431A4(&stru_1008F77C8, (pthread_mutex_t **)__p, 0x7D0uLL)) {
          int v11 = 0;
        }
        else {
          int v11 = 316;
        }
        sub_100242FAC((uint64_t)__p);
        sub_100242E28(buf);
      }
    }

    else
    {
      int v11 = 12;
    }
  }

  else
  {
    int v11 = 11;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v11);
  xpc_dictionary_set_data(reply, "kCBMsgArgData", bytes, (unsigned __int16)v21);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), reply);
  xpc_release(reply);
}

void sub_1005690B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
}

void sub_10056910C(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLEAdvTxPowerIncreaseAction");
  unsigned __int8 v4 = xpc_dictionary_get_uint64(value, "kCBMsgArgLEAdvTxPowerIncreaseHandle");
  char int64 = xpc_dictionary_get_int64(value, "kCBMsgArgLEAdvTxPowerIncreaseTxDesiredPower");
  unsigned __int8 v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgLEAdvTxPowerIncreaseePAEnable");
  LOBYTE(value) = xpc_dictionary_get_uint64(value, "kCBMsgArgLEAdvTxPowerIncreaseSARConfiguration");
  uint64_t v7 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, void, void, void, void, void))(*(void *)v7 + 1880LL))( v7,  uint64,  v4,  int64,  v6,  value))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100693B48();
    }
  }

void sub_100569200(int a1, xpc_object_t xdict)
{
  __int16 v14 = 0;
  int v13 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_10025D848(value, 1, v3, v4, v5, v6, v7, v8, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100692360();
    }
  }

  else
  {
    uint64_t v9 = sub_1002E6E9C();
    int v10 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v9 + 3600LL))(v9, &v13);
    int v11 = (os_log_s *)qword_1008F75F0;
    if (v10)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_1006944DC();
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)timeval buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "BD Address was written successfully", buf, 2u);
    }
  }

void sub_100569308(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgCrcErredPduReportEnable");
  uint64_t v4 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)v4 + 1712LL))(v4, uint64 != 0LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10069453C();
    }
  }

void sub_10056938C(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAppleExtendedAdvReportEnable");
  uint64_t v4 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t, BOOL, void))(*(void *)v4 + 1704LL))(v4, uint64 != 0LL, 0LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10069459C();
    }
  }

BOOL sub_100569418(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  int v11 = string;
  size_t v12 = strlen(string);
  uint64_t v5 = sub_100331854(&xmmword_1008F77A0, (uint64_t)&v11);
  if (v5)
  {
    int v11 = string;
    size_t v12 = strlen(string);
    int v13 = &v11;
    uint64_t v6 = sub_10056A6A4((uint64_t)&xmmword_1008F77A0, (uint64_t)&v11, (uint64_t)&unk_1006C2518, (_OWORD **)&v13);
    uint64_t v7 = (void (*)(void *, xpc_object_t))v6[4];
    uint64_t v8 = v6[5];
    uint64_t v9 = (void *)(a1 + (v8 >> 1));
    if ((v8 & 1) != 0) {
      uint64_t v7 = *(void (**)(void *, xpc_object_t))(*v9 + v7);
    }
    v7(v9, xdict);
  }

  return v5 != 0LL;
}

void sub_1005694E4(unsigned int a1, unsigned __int16 *a2, int a3)
{
  if (a2) {
    int64_t v5 = *a2;
  }
  else {
    int64_t v5 = 0LL;
  }
  uint64_t v6 = qword_1008F7790;
  if (!qword_1008F7790) {
    goto LABEL_14;
  }
  uint64_t v7 = &qword_1008F7790;
  do
  {
    int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 < 13;
    if (v8 >= 13) {
      int v10 = (uint64_t *)v6;
    }
    else {
      int v10 = (uint64_t *)(v6 + 8);
    }
    if (!v9) {
      uint64_t v7 = (uint64_t *)v6;
    }
    uint64_t v6 = *v10;
  }

  while (*v10);
  if (v7 == &qword_1008F7790 || *((int *)v7 + 8) >= 14) {
LABEL_14:
  }
    uint64_t v7 = &qword_1008F7790;
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection((xpc_object_t)v7[5]);
  if (remote_connection)
  {
    size_t v12 = remote_connection;
    xpc_object_t reply = xpc_dictionary_create_reply((xpc_object_t)v7[5]);
    if (reply)
    {
      __int16 v14 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", a1);
      xpc_dictionary_set_int64(v14, "kCBMsgArgConnHandle", v5);
      xpc_dictionary_set_int64(v14, "kCBMsgArgTransmitPowerLevel", a3);
      xpc_connection_send_message(v12, v14);
      xpc_release(v14);
    }

    xpc_release((xpc_object_t)v7[5]);
  }

  sub_1001FDBCC((uint64_t **)&qword_1008F7788, v7);
  operator delete(v7);
}

void sub_1005695FC(unsigned int a1)
{
  uint64_t v2 = qword_1008F7790;
  if (!qword_1008F7790) {
    goto LABEL_11;
  }
  uint64_t v3 = &qword_1008F7790;
  do
  {
    int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 < 21;
    if (v4 >= 21) {
      uint64_t v6 = (uint64_t *)v2;
    }
    else {
      uint64_t v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      uint64_t v3 = (uint64_t *)v2;
    }
    uint64_t v2 = *v6;
  }

  while (*v6);
  if (v3 == &qword_1008F7790 || *((int *)v3 + 8) >= 22) {
LABEL_11:
  }
    uint64_t v3 = &qword_1008F7790;
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection((xpc_object_t)v3[5]);
  if (remote_connection)
  {
    int v8 = remote_connection;
    xpc_object_t reply = xpc_dictionary_create_reply((xpc_object_t)v3[5]);
    if (reply)
    {
      int v10 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", a1);
      xpc_connection_send_message(v8, v10);
      xpc_release(v10);
    }
  }

  xpc_release((xpc_object_t)v3[5]);
  sub_1001FDBCC((uint64_t **)&qword_1008F7788, v3);
  operator delete(v3);
}

void sub_1005696D0(unsigned int a1)
{
  uint64_t v2 = qword_1008F7790;
  if (!qword_1008F7790) {
    goto LABEL_11;
  }
  uint64_t v3 = &qword_1008F7790;
  do
  {
    int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 < 22;
    if (v4 >= 22) {
      uint64_t v6 = (uint64_t *)v2;
    }
    else {
      uint64_t v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      uint64_t v3 = (uint64_t *)v2;
    }
    uint64_t v2 = *v6;
  }

  while (*v6);
  if (v3 == &qword_1008F7790 || *((int *)v3 + 8) >= 23) {
LABEL_11:
  }
    uint64_t v3 = &qword_1008F7790;
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection((xpc_object_t)v3[5]);
  if (remote_connection)
  {
    int v8 = remote_connection;
    xpc_object_t reply = xpc_dictionary_create_reply((xpc_object_t)v3[5]);
    if (reply)
    {
      int v10 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", a1);
      xpc_connection_send_message(v8, v10);
      xpc_release(v10);
    }
  }

  xpc_release((xpc_object_t)v3[5]);
  sub_1001FDBCC((uint64_t **)&qword_1008F7788, v3);
  operator delete(v3);
}

void sub_1005697A4(unsigned int a1, unsigned int a2)
{
  uint64_t v4 = qword_1008F7790;
  if (!qword_1008F7790) {
    goto LABEL_11;
  }
  BOOL v5 = &qword_1008F7790;
  do
  {
    int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < 23;
    if (v6 >= 23) {
      int v8 = (uint64_t *)v4;
    }
    else {
      int v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      BOOL v5 = (uint64_t *)v4;
    }
    uint64_t v4 = *v8;
  }

  while (*v8);
  if (v5 == &qword_1008F7790 || *((int *)v5 + 8) >= 24) {
LABEL_11:
  }
    BOOL v5 = &qword_1008F7790;
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection((xpc_object_t)v5[5]);
  if (remote_connection)
  {
    int v10 = remote_connection;
    xpc_object_t reply = xpc_dictionary_create_reply((xpc_object_t)v5[5]);
    if (reply)
    {
      size_t v12 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", a1);
      xpc_dictionary_set_int64(v12, "kCBMsgArgNumberOfPackets", a2);
      xpc_connection_send_message(v10, v12);
      xpc_release(v12);
    }
  }

  xpc_release((xpc_object_t)v5[5]);
  sub_1001FDBCC((uint64_t **)&qword_1008F7788, v5);
  operator delete(v5);
}

void sub_100569898(unsigned int a1)
{
  uint64_t v2 = qword_1008F7790;
  if (!qword_1008F7790) {
    goto LABEL_11;
  }
  uint64_t v3 = &qword_1008F7790;
  do
  {
    int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 < 24;
    if (v4 >= 24) {
      int v6 = (uint64_t *)v2;
    }
    else {
      int v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      uint64_t v3 = (uint64_t *)v2;
    }
    uint64_t v2 = *v6;
  }

  while (*v6);
  if (v3 == &qword_1008F7790 || *((int *)v3 + 8) >= 25) {
LABEL_11:
  }
    uint64_t v3 = &qword_1008F7790;
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection((xpc_object_t)v3[5]);
  if (remote_connection)
  {
    int v8 = remote_connection;
    xpc_object_t reply = xpc_dictionary_create_reply((xpc_object_t)v3[5]);
    if (reply)
    {
      int v10 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", a1);
      xpc_connection_send_message(v8, v10);
      xpc_release(v10);
    }
  }

  xpc_release((xpc_object_t)v3[5]);
  sub_1001FDBCC((uint64_t **)&qword_1008F7788, v3);
  operator delete(v3);
}

void sub_10056996C(unsigned int a1)
{
  uint64_t v2 = qword_1008F7790;
  if (!qword_1008F7790) {
    goto LABEL_11;
  }
  uint64_t v3 = &qword_1008F7790;
  do
  {
    int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 < 25;
    if (v4 >= 25) {
      int v6 = (uint64_t *)v2;
    }
    else {
      int v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      uint64_t v3 = (uint64_t *)v2;
    }
    uint64_t v2 = *v6;
  }

  while (*v6);
  if (v3 == &qword_1008F7790 || *((int *)v3 + 8) >= 26) {
LABEL_11:
  }
    uint64_t v3 = &qword_1008F7790;
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection((xpc_object_t)v3[5]);
  if (remote_connection)
  {
    int v8 = remote_connection;
    xpc_object_t reply = xpc_dictionary_create_reply((xpc_object_t)v3[5]);
    if (reply)
    {
      int v10 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", a1);
      xpc_connection_send_message(v8, v10);
      xpc_release(v10);
    }
  }

  xpc_release((xpc_object_t)v3[5]);
  sub_1001FDBCC((uint64_t **)&qword_1008F7788, v3);
  operator delete(v3);
}

uint64_t sub_100569A40(int a1, uint64_t a2, unsigned int a3)
{
  if (a1 != 20545) {
    sub_1001EE2A0();
  }
  int v6 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109632;
    v8[1] = byte_1008F1288;
    __int16 v9 = 1024;
    int v10 = a1;
    __int16 v11 = 1024;
    unsigned int v12 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "_perfClassicConnectionInd on role %d, psm %x, cid %x",  (uint8_t *)v8,  0x14u);
  }

  uint64_t result = sub_10012D890(a2);
  if (result) {
    return sub_100174B2C( (uint64_t)sub_100569B5C,  (uint64_t)sub_100569C30,  (uint64_t)sub_100569D78,  a3,  (uint64_t)&unk_1006C4020,  1,  (uint64_t)&unk_1006C4040);
  }
  return result;
}

float sub_100569B5C(int a1, int a2, int a3, int a4)
{
  int v8 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109888;
    v10[1] = a1;
    __int16 v11 = 1024;
    int v12 = a2;
    __int16 v13 = 1024;
    int v14 = a3;
    __int16 v15 = 1024;
    int v16 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "_perfClassicConnectCfm: cid %x inMTU %d outMTU %d result %d",  (uint8_t *)v10,  0x1Au);
  }

  return result;
}

void sub_100569C30(int a1, int a2)
{
  int v4 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 67109376;
    int v10 = a1;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "_perfClassicDisconnectCB: cid %x result %d",  (uint8_t *)&v9,  0xEu);
  }

  int v5 = byte_1008F1288;
  int v6 = (os_log_s *)qword_1008F75F0;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT);
  if (v5 == 1)
  {
    if (!v7) {
      return;
    }
    int v9 = 67109120;
    int v10 = dword_1008F128C;
    int v8 = "_perfClassicDisconnectCB: Acceptor packetCountReceived=%d";
  }

  else
  {
    if (!v7) {
      return;
    }
    int v9 = 67109120;
    int v10 = dword_1008F1294;
    int v8 = "_perfClassicDisconnectCB: Initiator packetCountSent=%d";
  }

  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v9, 8u);
}

void sub_100569D78(unsigned int a1, uint64_t a2, int a3)
{
  uint64_t v9 = 0LL;
  int v5 = sub_1001723A0(a1, &v9);
  int v6 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)timeval buf = 67109888;
    int v11 = byte_1008F1288;
    __int16 v12 = 1024;
    unsigned int v13 = a1;
    __int16 v14 = 1024;
    int v15 = a3;
    __int16 v16 = 1024;
    int v17 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "_perfClassicRecvDataInd: role %d, cid %x, dataLen %d status=%d",  buf,  0x1Au);
  }

  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100694628();
    }
  }

  else if (byte_1008F1288 == 1)
  {
    uint64_t v7 = 0LL;
    ++dword_1008F128C;
    while (word_1006C4070[v7] != a3)
    {
      if (++v7 == 7)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_1006945FC();
        }
        LOBYTE(nullsub_63(v5 - 80, v7) = 0;
        break;
      }
    }

    byte_1008F12A0 = v7;
    int v8 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)timeval buf = 67109120;
      int v11 = dword_1008F128C;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "_perfClassicRecvDataInd: packetCountReceived=%d",  buf,  8u);
    }
  }

uint64_t sub_100569F40(uint64_t a1, const char *a2, void **a3, off_t *a4)
{
  uint64_t v7 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
  {
    buf.st_dev = 136315138;
    *(void *)&buf.st_mode = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "loadFile: File Path %s\n", (uint8_t *)&buf, 0xCu);
  }

  memset(&buf, 0, sizeof(buf));
  bzero(&buf, 0x90uLL);
  int v8 = stat(a2, &buf);
  uint64_t v9 = (os_log_s *)qword_1008F75F0;
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100694774(v9);
    }
    return 1LL;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
  {
    int v20 = 136315394;
    size_t v21 = ctime(&buf.st_mtimespec.tv_sec);
    __int16 v22 = 2048;
    st_uint64_t size = buf.st_size;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "loadFile: File last changed:%s File size=%lld Bytes\n",  (uint8_t *)&v20,  0x16u);
  }

  off_t v11 = buf.st_size;
  *a3 = malloc(buf.st_size);
  *a4 = v11;
  __int16 v12 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
  {
    LOWORD(v20) = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "loadFile: Open File\n", (uint8_t *)&v20, 2u);
  }

  unsigned int v13 = fopen(a2, "r");
  __int16 v14 = (os_log_s *)qword_1008F75F0;
  if (!v13)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100694688();
    }
    return 1LL;
  }

  int v15 = v13;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
  {
    LOWORD(v20) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "loadFile: Read File to buffer\n",  (uint8_t *)&v20,  2u);
  }

  size_t v16 = fread(*a3, 1uLL, buf.st_size, v15);
  int v17 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
  {
    int v20 = 134217984;
    size_t v21 = (char *)v16;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "loadFile: Read File to fileBuffer. readResult %zu.\n",  (uint8_t *)&v20,  0xCu);
  }

  if (ferror(v15))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_100694748();
    }
    return 1LL;
  }

  int v18 = feof(v15);
  __int128 v19 = (os_log_s *)qword_1008F75F0;
  if (v18)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006946E8();
    }
    return 1LL;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_INFO))
  {
    LOWORD(v20) = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "loadFile: Close File\n", (uint8_t *)&v20, 2u);
  }

  fclose(v15);
  return 0LL;
}

void sub_10056A278(int a1, const void *a2, unsigned int a3, void *__dst)
{
  if (__dst)
  {
    if (a3 >= 0xFF) {
      size_t v5 = 255LL;
    }
    else {
      size_t v5 = a3;
    }
    memcpy(__dst, a2, v5);
    *((_WORD *)__dst + 128) = v5;
  }

  sub_1002431FC(&stru_1008F77C8);
}

void *sub_10056A2C0(void *a1)
{
  *a1 = &off_100891BA0;
  sub_100242E28(a1 + 1);
  return a1;
}

void sub_10056A2F0(void *a1)
{
  *a1 = &off_100891BA0;
  sub_100242E28(a1 + 1);
  operator delete(a1);
}

void sub_10056A320()
{
  v11.tv_sec = 0LL;
  *(void *)&v11.tv_usec = 0LL;
  gettimeofday(&v11, 0LL);
  double v0 = (double)v11.tv_usec / 1000.0 + (double)(1000 * v11.tv_sec) - *(double *)&qword_1008F12B0;
  int v1 = dword_1008F12A8;
  double v2 = (double)(1000 * dword_1008F12A8);
  uint64_t v3 = (os_log_s *)qword_1008F75F0;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT);
  if (v0 <= v2)
  {
    if (v4)
    {
      int v5 = dword_1008F1294++;
      LODWORD(v11.tv_sec) = 67109120;
      HIDWORD(v11.tv_sec) = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "_writeAclDataCb packetCountSent: %d\n",  (uint8_t *)&v11,  8u);
    }

    int v6 = byte_1008F12AC++;
    memset(byte_1008F12B8, v6, word_1006C4070[byte_1008F12A0]);
    sub_1000A85A0();
    sub_1001EF520((uint64_t)v10, 1u);
    sub_1001EFB10((unsigned __int8 *)v10, byte_1008F12B8, word_1006C4070[byte_1008F12A0], 2u);
    int v7 = sub_100172A98( (uint64_t)sub_10056A5AC,  (unsigned __int16)word_1008F1290,  (__int128 *)qword_1008F1298,  (uint64_t)v10,  0);
    sub_1001EF5E4((uint64_t)v10);
    sub_1000A8688();
    if (v7 == 412) {
      int v7 = 0;
    }
    int v8 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      __darwin_suseconds_t v9 = word_1006C4070[byte_1008F12A0];
      LODWORD(v11.tv_sec) = 67109376;
      HIDWORD(v11.tv_sec) = v7;
      LOWORD(v11.tv_usec) = 1024;
      *(__darwin_suseconds_t *)((char *)&v11.tv_usec + 2) = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "_writeAclDataCb result %d, length %d\n",  (uint8_t *)&v11,  0xEu);
    }

    if (v7 && os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_1006947FC();
    }
  }

  else if (v4)
  {
    LODWORD(v11.tv_sec) = 67109120;
    HIDWORD(v11.tv_sec) = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Finished running the test after %d Sec",  (uint8_t *)&v11,  8u);
  }

void sub_10056A5AC(int a1, uint64_t a2, int a3, int a4)
{
  int v7 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109632;
    v10[1] = a4;
    __int16 v11 = 1024;
    int v12 = a1;
    __int16 v13 = 1024;
    int v14 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "_perfWriteCB result=%d cid=%d\n sendCount=%d",  (uint8_t *)v10,  0x14u);
  }

  dispatch_time_t v8 = dispatch_time(0LL, 0LL);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  dispatch_after_f(v8, global_queue, 0LL, (dispatch_function_t)sub_10056A320);
}

void *sub_10056A6A4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = sub_1003313A4((uint64_t)&v29, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }

    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }

    __int16 v13 = *(void ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      int v14 = *v13;
      if (*v13)
      {
        uint64_t v17 = a2;
        int v15 = *(uint64_t **)a2;
        size_t v16 = *(void *)(v17 + 8);
        do
        {
          unint64_t v18 = *((void *)v14 + 1);
          if (v18 == v8)
          {
          }

          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9) {
                v18 %= v9;
              }
            }

            else
            {
              v18 &= v9 - 1;
            }

            if (v18 != v12) {
              break;
            }
          }

          int v14 = *(void **)v14;
        }

        while (v14);
      }
    }
  }

  else
  {
    unint64_t v12 = 0LL;
  }

  int v14 = operator new(0x30uLL);
  *(void *)int v14 = 0LL;
  *((void *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((void *)v14 + 4) = 0LL;
  *((void *)v14 + 5) = 0LL;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1LL;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_10005141C(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }

    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }

  uint64_t v25 = *(void *)a1;
  int v26 = *(void **)(*(void *)a1 + 8 * v12);
  if (v26)
  {
    *(void *)int v14 = *v26;
LABEL_40:
    *int v26 = v14;
    goto LABEL_41;
  }

  *(void *)int v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v25 + 8 * v12) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v27 = *(void *)(*(void *)v14 + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }

    else
    {
      v27 &= v9 - 1;
    }

    int v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_40;
  }

void sub_10056A8F8(_Unwind_Exception *a1)
{
}

void sub_10056A90C(id a1)
{
  int v1 = operator new(0x2B0uLL);
  sub_10040749C((uint64_t)v1);
  off_1008D5EF8 = v1;
}

void sub_10056A93C(_Unwind_Exception *a1)
{
}

void sub_10056A950(id a1)
{
  int v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_10056A980(_Unwind_Exception *a1)
{
}

void sub_10056A994(id a1)
{
  int v1 = operator new(0x120uLL);
  sub_100256C70();
  qword_1008D6168 = (uint64_t)v1;
}

void sub_10056A9C4(_Unwind_Exception *a1)
{
}

void sub_10056A9D8(id a1)
{
  int v1 = operator new(0x4A8uLL);
  sub_100499870();
  off_1008D60E8 = v1;
}

void sub_10056AA08(_Unwind_Exception *a1)
{
}

void sub_10056AA1C()
{
  double v0 = objc_autoreleasePoolPush();
  qword_1008F7798 = 0LL;
  qword_1008F7790 = 0LL;
  qword_1008F7788 = (uint64_t)&qword_1008F7790;
  __cxa_atexit((void (*)(void *))sub_10055E568, &qword_1008F7788, (void *)&_mh_execute_header);
  xmmword_1008F77A0 = 0u;
  unk_1008F77B0 = 0u;
  dword_1008F77C0 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_10055E590, &xmmword_1008F77A0, (void *)&_mh_execute_header);
  sub_100243040(&stru_1008F77C8);
  __cxa_atexit((void (*)(void *))sub_1002430A8, &stru_1008F77C8, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

BOOL sub_10056AAC8(uint64_t a1)
{
  return *(void *)(a1 + 8) == 0LL;
}

uint64_t sub_10056AAD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    return *(void *)(v1 + 16);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10056AAF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    return v1 + 24;
  }
  else {
    return 0LL;
  }
}

void *sub_10056AB04(void *a1, const void *a2, size_t a3)
{
  int v6 = operator new(a3 + 24);
  _DWORD v6[2] = 1;
  *(void *)int v6 = &off_1008A19F0;
  *((void *)v6 + 2) = a3;
  memcpy(v6 + 6, a2, a3);
  *a1 = &off_10087FAA8;
  a1[1] = v6;
  return a1;
}

size_t sub_10056AB74(uint64_t a1, void *__dst, size_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4)
  {
    unint64_t v7 = 0LL;
    size_t v6 = 0LL;
LABEL_5:
    memcpy(__dst, v7, v6);
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      return *(void *)(v8 + 16);
    }
    else {
      return 0LL;
    }
  }

  size_t v6 = *(void *)(v4 + 16);
  if (v6 <= a3)
  {
    unint64_t v7 = (const void *)(v4 + 24);
    goto LABEL_5;
  }

  uint64_t v10 = sub_1002E6E00();
  sub_1004FC128(v10, 1);
  uint64_t v11 = _os_log_pack_size(12LL);
  unint64_t v12 = (char *)&v21 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int16 v13 = __error();
  uint64_t v14 = _os_log_pack_fill(v12, v11, *v13, &_mh_execute_header, "Assertion failed: %{public}s");
  *(_DWORD *)uint64_t v14 = 136446210;
  *(void *)(v14 + 4) = "dstSize >= getSize()";
  os_log_t v15 = os_log_create("com.apple.bluetooth", "CBCrash");
  if (v15) {
    os_log_t v16 = v15;
  }
  else {
    os_log_t v16 = (os_log_t)&_os_log_default;
  }
  qword_1008D9DB8 = os_log_pack_send_and_compose(v12, v16, 16LL, 0LL, 0LL);
  uint64_t v17 = abort_with_payload(18LL, 2LL, v12, v11, qword_1008D9DB8, 0LL);
  return sub_10056ACE0(v17, v18, v19, v20);
}

size_t sub_10056ACE0(uint64_t a1, void *__dst, uint64_t a3, size_t __n)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    size_t v6 = *(void *)(v5 + 16);
  }
  else {
    size_t v6 = 0LL;
  }
  if (__n + a3 > v6)
  {
    uint64_t v9 = sub_1002E6E00();
    sub_1004FC128(v9, 1);
    uint64_t v10 = _os_log_pack_size(12LL);
    uint64_t v11 = (char *)&v16 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    unint64_t v12 = __error();
    uint64_t v13 = _os_log_pack_fill(v11, v10, *v12, &_mh_execute_header, "Assertion failed: %{public}s");
    *(_DWORD *)uint64_t v13 = 136446210;
    *(void *)(v13 + 4) = "(offset + length) <= getSize()";
    os_log_t v14 = os_log_create("com.apple.bluetooth", "CBCrash");
    if (v14) {
      os_log_t v15 = v14;
    }
    else {
      os_log_t v15 = (os_log_t)&_os_log_default;
    }
    qword_1008D9DB8 = os_log_pack_send_and_compose(v11, v15, 16LL, 0LL, 0LL);
    abort_with_payload(18LL, 2LL, v11, v10, qword_1008D9DB8, 0LL);
  }

  if (v5) {
    uint64_t v7 = v5 + 24;
  }
  else {
    uint64_t v7 = 0LL;
  }
  memcpy(__dst, (const void *)(v7 + a3), __n);
  return __n;
}

uint64_t sub_10056AE48(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || *(void *)(v2 + 16) <= a2)
  {
    uint64_t v4 = sub_1002E6E00();
    sub_1004FC128(v4, 1);
    uint64_t v5 = _os_log_pack_size(12LL);
    size_t v6 = (char *)&v11 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v7 = __error();
    uint64_t v8 = _os_log_pack_fill(v6, v5, *v7, &_mh_execute_header, "Assertion failed: %{public}s");
    *(_DWORD *)uint64_t v8 = 136446210;
    *(void *)(v8 + 4) = "idx < getSize()";
    os_log_t v9 = os_log_create("com.apple.bluetooth", "CBCrash");
    if (v9) {
      os_log_t v10 = v9;
    }
    else {
      os_log_t v10 = (os_log_t)&_os_log_default;
    }
    qword_1008D9DB8 = os_log_pack_send_and_compose(v6, v10, 16LL, 0LL, 0LL);
    abort_with_payload(18LL, 2LL, v6, v5, qword_1008D9DB8, 0LL);
  }

  return *(unsigned __int8 *)(v2 + a2 + 24);
}

BOOL sub_10056AF84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 16);
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 16);
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (v3 != v5) {
    return 0LL;
  }
  if (v2) {
    size_t v6 = (const void *)(v2 + 24);
  }
  else {
    size_t v6 = 0LL;
  }
  if (v4) {
    uint64_t v7 = (const void *)(v4 + 24);
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (v2) {
    size_t v8 = *(void *)(v2 + 16);
  }
  else {
    size_t v8 = 0LL;
  }
  return memcmp(v6, v7, v8) == 0;
}

BOOL sub_10056B000(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    unint64_t v3 = *(void *)(v2 + 16);
  }
  else {
    unint64_t v3 = 0LL;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    unint64_t v5 = *(void *)(v4 + 16);
    if (v3 < v5) {
      size_t v6 = 0LL;
    }
    else {
      size_t v6 = *(void *)(v4 + 16);
    }
    if (v3 < v5 && v2 != 0) {
      size_t v6 = *(void *)(v2 + 16);
    }
  }

  else
  {
    size_t v6 = 0LL;
  }

  if (v2) {
    size_t v8 = (const void *)(v2 + 24);
  }
  else {
    size_t v8 = 0LL;
  }
  if (v4) {
    os_log_t v9 = (const void *)(v4 + 24);
  }
  else {
    os_log_t v9 = 0LL;
  }
  unsigned int v10 = memcmp(v8, v9, v6);
  if (v10) {
    return v10 >> 31;
  }
  if (!v2)
  {
    unint64_t v12 = 0LL;
    if (v4) {
      goto LABEL_24;
    }
LABEL_26:
    unint64_t v13 = 0LL;
    return v12 < v13;
  }

  unint64_t v12 = *(void *)(v2 + 16);
  if (!v4) {
    goto LABEL_26;
  }
LABEL_24:
  unint64_t v13 = *(void *)(v4 + 16);
  return v12 < v13;
}

void *sub_10056B0A4@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  if (!*(void *)(a1 + 8)) {
    return sub_10002418C(a2, "NULL");
  }
  uint64_t v16 = 0LL;
  __int128 v14 = 0u;
  memset(v15, 0, sizeof(v15));
  *(_OWORD *)__n128 __p = 0u;
  __int128 v13 = 0u;
  memset(v11, 0, sizeof(v11));
  __int128 v10 = 0u;
  sub_1001FCFC8((uint64_t)&v10);
  unint64_t v4 = 0LL;
  uint64_t v5 = *(void *)&v11[0];
  *(_DWORD *)((char *)v11 + *(void *)(*(void *)&v11[0] - 24LL) + 8) = *(_DWORD *)((_BYTE *)v11
                                                                                    + *(void *)(*(void *)&v11[0]
                                                                                                - 24LL)
                                                                                    + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v11 + *(void *)(v5 - 24) + 8) |= 0x4000u;
  while (1)
  {
    unint64_t v6 = *(void *)(a1 + 8);
    if (v6) {
      unint64_t v6 = *(void *)(v6 + 16);
    }
    if (v4 >= v6) {
      break;
    }
    if (v4)
    {
      unsigned __int8 v17 = 32;
      sub_1001FD17C(v11, (uint64_t)&v17, 1LL);
    }

    unsigned __int8 v17 = 48;
    uint64_t v7 = sub_100361614(v11, &v17);
    *(void *)((char *)v7 + *(void *)(*v7 - 24LL) + 24) = 2LL;
    std::ostream::operator<<();
    ++v4;
  }

  std::stringbuf::str(a2, (const std::stringbuf *)((char *)v11 + 8));
  *(void *)((char *)&v11[-1]
  *(void *)&v11[0] = v8;
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf((char *)v11 + 8);
  return (void *)std::ios::~ios(v15);
}

void sub_10056B270( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_10056B298(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &off_1008A1A10;
  *(_WORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_10087FAA8;
  *(void *)(a1 + 120) = 0LL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = a1 + 120;
  *(void *)(a1 + 128) = 0LL;
  *(void *)(a1 + 136) = &off_10087FAA8;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = &off_10087FAA8;
  *(_WORD *)(a1 + 222) = 0;
  *(void *)(a1 + 192) = 0LL;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 208) = 0LL;
  *(void *)(a1 + 213) = 0LL;
  *(void *)(a1 + 224) = &off_10087FAA8;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 2sub_100242FAC(v15 - 48) = 0u;
  *(void *)(a1 + 272) = &off_10087FAA8;
  *(void *)(a1 + 280) = 0LL;
  *(void *)(a1 + 288) = &off_10087FAA8;
  *(void *)(a1 + 2sub_100242FAC(v22 - 96) = 0LL;
  *(_WORD *)(a1 + 304) = 0;
  *(_WORD *)(a1 + 307) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 316) = 0;
  *(void *)(a1 + 320) = 0LL;
  *(void *)(a1 + 424) = 0LL;
  *(void *)(a1 + 432) = 0LL;
  *(_DWORD *)(a1 + 344) = 0;
  *(void *)(a1 + 336) = 0LL;
  *(void *)(a1 + 352) = 0LL;
  *(void *)(a1 + 360) = 0LL;
  *(_DWORD *)(a1 + 367) = 0;
  *(void *)(a1 + 416) = a1 + 424;
  *(void *)&double result = 0xFF00000000LL;
  *(void *)(a1 + 440) = 0xFF00000000LL;
  *(void *)(a1 + 4sub_100242FAC(v15 - 48) = &off_10087FAA8;
  *(void *)(a1 + 456) = 0LL;
  *(_BYTE *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 468) = 0;
  return result;
}

double sub_10056B36C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 12) |= *(_BYTE *)(v4 + 12);
  *(_BYTE *)(a1 + 13) |= *(_BYTE *)(v4 + 13);
  uint64_t v5 = (void **)(v4 + 16);
  if (*(char *)(v4 + 39) < 0)
  {
    unint64_t v6 = *(void *)(v4 + 24);
    if (!v6) {
      goto LABEL_8;
    }
    sub_100024238(&__str, *v5, v6);
  }

  else
  {
    if (!*(_BYTE *)(v4 + 39)) {
      goto LABEL_8;
    }
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v5;
    __str.__r_.__value_.__l.__cap_ = *(void *)(v4 + 32);
  }

  std::string::operator=((std::string *)(a1 + 16), &__str);
LABEL_8:
  uint64_t v7 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 40) = *(_WORD *)(v7 + 40);
  if (*(_BYTE *)(v7 + 42))
  {
    char v8 = *(_BYTE *)(v7 + 43);
    *(_BYTE *)(a1 + 42) = 1;
    *(_BYTE *)(a1 + 43) = v8;
  }

  if (sub_10056AAD8(v7 + 48))
  {
    uint64_t v9 = sub_10056AAD8(a1 + 48);
    uint64_t v10 = sub_10056AAD8(*(void *)(a2 + 8) + 48LL);
    size_t v11 = v10 + v9;
    __chkstk_darwin(v10, v12);
    __int128 v14 = (char *)&v41 - v13;
    bzero((char *)&v41 - v13, v11);
    size_t v15 = sub_10056AB74(a1 + 48, v14, v11);
    if ((unint64_t)sub_10056AAD8(a1 + 48) < 3 || (unint64_t)sub_10056AAD8(*(void *)(a2 + 8) + 48LL) < 3)
    {
      uint64_t v17 = 0LL;
    }

    else
    {
      uint64_t v16 = (unsigned __int16 *)sub_10056AAF0(a1 + 48);
      uint64_t v17 = 2LL * (*v16 == *(unsigned __int16 *)sub_10056AAF0(*(void *)(a2 + 8) + 48LL));
    }

    uint64_t v18 = *(void *)(a2 + 8) + 48LL;
    uint64_t v19 = sub_10056AAD8(v18);
    size_t v20 = sub_10056ACE0(v18, &v14[v15], v17, v19 - v17);
    sub_10056AB04(&v41, v14, v20 + v15);
    sub_10002EAC8(a1 + 48, (uint64_t)&v41);
    *(void *)&__int128 v41 = &off_10087FAA8;
    if (*((void *)&v41 + 1)) {
      sub_1002CD254(*((unsigned int **)&v41 + 1));
    }
  }

  if (sub_10056AAD8(*(void *)(a2 + 8) + 224LL))
  {
    size_t v21 = sub_10056AAD8(*(void *)(a2 + 8) + 224LL);
    unint64_t v23 = (char *)&v41 - ((__chkstk_darwin(v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    bzero(v23, v21);
    size_t v24 = sub_10056AB74(*(void *)(a2 + 8) + 224LL, v23, v21);
    sub_10056AB04(&v41, v23, v24);
    sub_10002EAC8(a1 + 224, (uint64_t)&v41);
    *(void *)&__int128 v41 = &off_10087FAA8;
    if (*((void *)&v41 + 1)) {
      sub_1002CD254(*((unsigned int **)&v41 + 1));
    }
  }

  if (sub_10056AAD8(*(void *)(a2 + 8) + 448LL))
  {
    uint64_t v25 = (const void *)sub_10056AAF0(*(void *)(a2 + 8) + 448LL);
    unsigned int v26 = sub_10056AAD8(*(void *)(a2 + 8) + 448LL);
    sub_10056AB04(&v41, v25, v26);
    sub_10002EAC8(a1 + 448, (uint64_t)&v41);
    *(void *)&__int128 v41 = &off_10087FAA8;
    if (*((void *)&v41 + 1)) {
      sub_1002CD254(*((unsigned int **)&v41 + 1));
    }
  }

  uint64_t v27 = *(void *)(a2 + 8);
  for (uint64_t i = *(__int128 **)(v27 + 64); i != *(__int128 **)(v27 + 72); uint64_t i = (__int128 *)((char *)i + 20))
  {
    sub_1004F022C((void *)a1, i);
    uint64_t v27 = *(void *)(a2 + 8);
  }

  for (uint64_t j = *(__int128 **)(v27 + 88); j != *(__int128 **)(v27 + 96); uint64_t j = (__int128 *)((char *)j + 20))
  {
    sub_1004F034C((void *)a1, j);
    uint64_t v27 = *(void *)(a2 + 8);
  }

  unsigned __int8 v30 = *(unsigned __int8 **)(v27 + 112);
  if (v30 != (unsigned __int8 *)(v27 + 120))
  {
    do
    {
      *(void *)&__int128 v41 = v30 + 32;
      __int16 v31 = sub_10002E92C((uint64_t **)(a1 + 112), v30 + 32, (uint64_t)&unk_1006C2518, (_OWORD **)&v41);
      sub_10002EAC8((uint64_t)v31 + 56, (uint64_t)(v30 + 56));
      uint64_t v32 = (unsigned __int8 *)*((void *)v30 + 1);
      if (v32)
      {
        do
        {
          __int16 v33 = v32;
          uint64_t v32 = *(unsigned __int8 **)v32;
        }

        while (v32);
      }

      else
      {
        do
        {
          __int16 v33 = (unsigned __int8 *)*((void *)v30 + 2);
          BOOL v34 = *(void *)v33 == (void)v30;
          unsigned __int8 v30 = v33;
        }

        while (!v34);
      }

      uint64_t v27 = *(void *)(a2 + 8);
      unsigned __int8 v30 = v33;
    }

    while (v33 != (unsigned __int8 *)(v27 + 120));
  }

  uint64_t v35 = 0LL;
  *(_BYTE *)(a1 + 305) |= *(_BYTE *)(v27 + 305);
  *(_BYTE *)(a1 + 304) |= *(_BYTE *)(v27 + 304);
  *(_BYTE *)(a1 + 370) |= *(_BYTE *)(v27 + 370);
  *(void *)(a1 + 376) = *(void *)(v27 + 376);
  *(void *)(a1 + 384) = *(void *)(v27 + 384);
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(v27 + 392);
  uint64_t v36 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 3sub_100242FAC(v22 - 96) = *(_WORD *)(v36 + 396);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(v36 + 312);
  *(_BYTE *)(a1 + 316) = *(_BYTE *)(v36 + 316);
  uint64_t v37 = v36 + 168;
  __int128 v38 = *(_OWORD *)(a1 + 184);
  __int128 v41 = *(_OWORD *)(a1 + 168);
  __int128 v42 = v38;
  do
  {
    *(__int128 *)((char *)&v41 + v35) = (__int128)vorrq_s8( *(int8x16_t *)((char *)&v41 + v35),  *(int8x16_t *)(v37 + v35));
    v35 += 16LL;
  }

  while (v35 != 32);
  double result = *(double *)&v41;
  __int128 v40 = v42;
  *(_OWORD *)(a1 + 168) = v41;
  *(_OWORD *)(a1 + 184) = v40;
  return result;
}

void sub_10056B820(_Unwind_Exception *exception_object)
{
  *(void *)(v1 - 144) = &off_10087FAA8;
  unint64_t v3 = *(unsigned int **)(v1 - 136);
  if (v3) {
    sub_1002CD254(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10056B86C(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  uint64_t v5 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v4 = *(unsigned __int8 **)(a1 + 72);
  if (v5 != v4)
  {
    char v8 = 0LL;
    uint64_t v9 = a3 + 2;
    do
    {
      if (*v5 == a2)
      {
        if ((unint64_t)v8 >= *v9)
        {
          unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v8[-*a3] >> 2);
          unint64_t v12 = v11 + 1;
          if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            abort();
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            __int128 v14 = (char *)sub_100050420((uint64_t)(a3 + 2), v13);
          }
          else {
            __int128 v14 = 0LL;
          }
          size_t v15 = &v14[20 * v11];
          __int128 v16 = *(_OWORD *)v5;
          *((_DWORD *)v15 + 4) = *((_DWORD *)v5 + 4);
          *(_OWORD *)size_t v15 = v16;
          uint64_t v18 = (char *)*a3;
          uint64_t v17 = (char *)a3[1];
          uint64_t v19 = v15;
          if (v17 != (char *)*a3)
          {
            do
            {
              __int128 v20 = *(_OWORD *)(v17 - 20);
              *((_DWORD *)v19 - 1) = *((_DWORD *)v17 - 1);
              *(_OWORD *)(v19 - 20) = v20;
              v19 -= 20;
              v17 -= 20;
            }

            while (v17 != v18);
            uint64_t v17 = (char *)*a3;
          }

          char v8 = v15 + 20;
          *a3 = v19;
          a3[1] = v15 + 20;
          a3[2] = &v14[20 * v13];
          if (v17) {
            operator delete(v17);
          }
        }

        else
        {
          __int128 v10 = *(_OWORD *)v5;
          *((_DWORD *)v8 + 4) = *((_DWORD *)v5 + 4);
          *(_OWORD *)char v8 = v10;
          v8 += 20;
        }

        a3[1] = v8;
        uint64_t v4 = *(unsigned __int8 **)(a1 + 72);
      }

      v5 += 20;
    }

    while (v5 != v4);
  }

void sub_10056B9E8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_10056BA08(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  uint64_t v5 = *(unsigned __int8 **)(a1 + 88);
  uint64_t v4 = *(unsigned __int8 **)(a1 + 96);
  if (v5 != v4)
  {
    char v8 = 0LL;
    uint64_t v9 = a3 + 2;
    do
    {
      if (*v5 == a2)
      {
        if ((unint64_t)v8 >= *v9)
        {
          unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v8[-*a3] >> 2);
          unint64_t v12 = v11 + 1;
          if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            abort();
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            __int128 v14 = (char *)sub_100050420((uint64_t)(a3 + 2), v13);
          }
          else {
            __int128 v14 = 0LL;
          }
          size_t v15 = &v14[20 * v11];
          __int128 v16 = *(_OWORD *)v5;
          *((_DWORD *)v15 + 4) = *((_DWORD *)v5 + 4);
          *(_OWORD *)size_t v15 = v16;
          uint64_t v18 = (char *)*a3;
          uint64_t v17 = (char *)a3[1];
          uint64_t v19 = v15;
          if (v17 != (char *)*a3)
          {
            do
            {
              __int128 v20 = *(_OWORD *)(v17 - 20);
              *((_DWORD *)v19 - 1) = *((_DWORD *)v17 - 1);
              *(_OWORD *)(v19 - 20) = v20;
              v19 -= 20;
              v17 -= 20;
            }

            while (v17 != v18);
            uint64_t v17 = (char *)*a3;
          }

          char v8 = v15 + 20;
          *a3 = v19;
          a3[1] = v15 + 20;
          a3[2] = &v14[20 * v13];
          if (v17) {
            operator delete(v17);
          }
        }

        else
        {
          __int128 v10 = *(_OWORD *)v5;
          *((_DWORD *)v8 + 4) = *((_DWORD *)v5 + 4);
          *(_OWORD *)char v8 = v10;
          v8 += 20;
        }

        a3[1] = v8;
        uint64_t v4 = *(unsigned __int8 **)(a1 + 96);
      }

      v5 += 20;
    }

    while (v5 != v4);
  }

void sub_10056BB84(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_10056BBA4(uint64_t a1, int a2)
{
  if (qword_1008F1CD8 != -1) {
    dispatch_once(&qword_1008F1CD8, &stru_1008A1A20);
  }
  if (a2 == 27 || a2 == 127)
  {
    *(_WORD *)(a1 + 216) = 383;
  }

  else
  {
    char v4 = a2 - 126;
    if (a2 <= 20) {
      char v4 = a2;
    }
    *(_BYTE *)(a1 + 216) = v4;
    *(_BYTE *)(a1 + 217) = a2 > 20;
    int v5 = dword_1008F1CD0;
    if (dword_1008F1CD0)
    {
      int v6 = v4;
      int v7 = dword_1008F1CD0 + v4;
      if (v7 < 21)
      {
        if (v7 <= -128)
        {
          uint64_t v9 = (os_log_s *)qword_1008F7648;
          if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
          {
            int v10 = 67109888;
            int v11 = a2;
            __int16 v12 = 1024;
            int v13 = v6;
            __int16 v14 = 1024;
            int v15 = v5;
            __int16 v16 = 1024;
            int v17 = -127;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Warning: RSSI original: %d converted: %d offset: %d adjusted to %d",  (uint8_t *)&v10,  0x1Au);
          }

          LOBYTE(nullsub_63(v5 - 80, v7) = -127;
        }
      }

      else
      {
        char v8 = (os_log_s *)qword_1008F7648;
        if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = 67109888;
          int v11 = a2;
          __int16 v12 = 1024;
          int v13 = v6;
          __int16 v14 = 1024;
          int v15 = v5;
          __int16 v16 = 1024;
          int v17 = 20;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Warning: RSSI original: %d converted: %d offset: %d adjusted to %d",  (uint8_t *)&v10,  0x1Au);
        }

        LOBYTE(nullsub_63(v5 - 80, v7) = 20;
      }

      *(_BYTE *)(a1 + 216) = v7;
    }
  }

void sub_10056BD70(id a1)
{
  uint64_t v1 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "AdvRSSIOffset");
  int v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v1 + 88LL))( v1,  buf,  __p,  &dword_1008F1CD0);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2) {
      return;
    }
  }

  else if (!v2)
  {
    return;
  }

  unint64_t v3 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = dword_1008F1CD0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Warning: RSSI shall be reported after offset %d (dB) added",  buf,  8u);
  }

void sub_10056BE8C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10056BEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 39);
  if ((v4 & 0x80u) == 0LL) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 24);
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 39);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0LL) {
    uint64_t v6 = *(void *)(a2 + 24);
  }
  if (v5 != v6) {
    return 0LL;
  }
  char v8 = (const void **)(a1 + 16);
  if (v7 >= 0) {
    uint64_t v9 = (unsigned __int8 *)(a2 + 16);
  }
  else {
    uint64_t v9 = *(unsigned __int8 **)(a2 + 16);
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(void *)(a1 + 24))) {
      return 0LL;
    }
  }

  else if (*(_BYTE *)(a1 + 39))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      char v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4) {
        goto LABEL_18;
      }
    }

    return 0LL;
  }

BOOL sub_10056C0E0(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0LL;
  }
  if (v2 == v3) {
    return 1LL;
  }
  do
  {
    BOOL result = sub_1001BEC7C(v2, v4);
    if (!result) {
      break;
    }
    v2 += 20;
    v4 += 20;
  }

  while (v2 != v3);
  return result;
}

void sub_10056C150(uint64_t a1)
{
  *(void *)(a1 + 72) = *(void *)(a1 + 64);
  uint64_t v2 = (__n128 **)(a1 + 72);
  __int128 v27 = xmmword_1006BDBA8;
  int v28 = 0;
  sub_100634334(&v29, (__n128 *)&v27);
  unint64_t v3 = *v2;
  unint64_t v4 = *(void *)(a1 + 80);
  if ((unint64_t)*v2 >= v4)
  {
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v3 - v7) >> 2);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      abort();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - v7) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x666666666666666LL) {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)sub_100050420(a1 + 80, v11);
    }
    else {
      uint64_t v12 = 0LL;
    }
    uint64_t v13 = (__n128 *)&v12[20 * v8];
    uint64_t v14 = &v12[20 * v11];
    __n128 v15 = v29;
    v13[1].n128_u32[0] = v30;
    __n128 *v13 = v15;
    uint64_t v6 = &v13[1].n128_i8[4];
    int v17 = *(char **)(a1 + 64);
    __int16 v16 = *(char **)(a1 + 72);
    if (v16 != v17)
    {
      do
      {
        __n128 v18 = *(__n128 *)(v16 - 20);
        v13[-1].n128_u32[3] = *((_DWORD *)v16 - 1);
        *(__n128 *)((char *)v13 - 20) = v18;
        uint64_t v13 = (__n128 *)((char *)v13 - 20);
        v16 -= 20;
      }

      while (v16 != v17);
      __int16 v16 = *(char **)(a1 + 64);
    }

    *(void *)(a1 + 64) = v13;
    *(void *)(a1 + 72) = v6;
    *(void *)(a1 + 80) = v14;
    if (v16) {
      operator delete(v16);
    }
  }

  else
  {
    __n128 v5 = v29;
    v3[1].n128_u32[0] = v30;
    *unint64_t v3 = v5;
    uint64_t v6 = &v3[1].n128_i8[4];
  }

  *(void *)(a1 + 72) = v6;
  sub_100051CA8(a1 + 112, *(void **)(a1 + 120));
  *(void *)(a1 + 112) = a1 + 120;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  uint64_t v22 = 0LL;
  __n128 v29 = 0uLL;
  unsigned __int32 v30 = 0;
  if (qword_1008D9700 != -1) {
    dispatch_once(&qword_1008D9700, &stru_1008A1A40);
  }
  sub_1000B6578();
  __int128 v24 = xmmword_1006BDBA8;
  int v25 = 0;
  sub_100634334(&v26, (__n128 *)&v24);
  sub_10056AB04(&v20, &v29, 0x14uLL);
  unint64_t v23 = &v26;
  uint64_t v19 = sub_10002E92C((uint64_t **)(a1 + 112), (unsigned __int8 *)&v26, (uint64_t)&unk_1006C2518, (_OWORD **)&v23);
  sub_10002EAC8((uint64_t)v19 + 56, (uint64_t)&v20);
  __int128 v20 = &off_10087FAA8;
  if (v21) {
    sub_1002CD254(v21);
  }
  *(void *)(a1 + 256) = v22;
  *(_BYTE *)(a1 + 364) = 1;
}

void sub_10056C3C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  if (a11) {
    sub_1002CD254(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10056C3F0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 264) == 2 && !*(_BYTE *)(a1 + 364)) {
    sub_10056C150(a1);
  }
}

uint64_t sub_10056C40C(uint64_t result, unsigned int a2, char a3)
{
  if (a2 <= 3) {
    *(_BYTE *)(result + a2 + 392) = a3;
  }
  return result;
}

uint64_t sub_10056C420(uint64_t a1, uint8x8_t a2)
{
  a2.i32[0] = *(_DWORD *)(a1 + 392);
  int16x4_t v2 = (int16x4_t)vmovl_u8(a2).u64[0];
  v2.i16[0] = vaddv_s16(v2);
  return v2.u32[0];
}

uint64_t sub_10056C434@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v77 = 0LL;
  __int128 v75 = 0u;
  memset(v76, 0, sizeof(v76));
  *(_OWORD *)__int16 v73 = 0u;
  __int128 v74 = 0u;
  memset(v72, 0, sizeof(v72));
  __int128 v71 = 0u;
  sub_1001FCFC8((uint64_t)&v71);
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(void *)(a1 + 24)) {
      goto LABEL_12;
    }
  }

  else if (!*(_BYTE *)(a1 + 39))
  {
    goto LABEL_12;
  }

  unint64_t v4 = sub_1001FD17C(v72, (uint64_t)"", 1LL);
  int v5 = *(char *)(a1 + 39);
  if (v5 >= 0) {
    uint64_t v6 = a1 + 16;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 24);
  }
  unint64_t v8 = sub_1001FD17C(v4, v6, v7);
  sub_1001FD17C(v8, (uint64_t)", ", 3LL);
LABEL_12:
  unint64_t v9 = sub_1001FD17C(v72, (uint64_t)"RSSI: ", 6LL);
  unint64_t v10 = (void *)std::ostream::operator<<(v9, *(char *)(a1 + 216));
  sub_1001FD17C(v10, (uint64_t)" dB (", 5LL);
  if (!*(_BYTE *)(a1 + 217)) {
    sub_1001FD17C(v72, (uint64_t)"non-", 4LL);
  }
  sub_1001FD17C(v72, (uint64_t)"saturated), ", 12LL);
  if (*(_BYTE *)(a1 + 42))
  {
    unint64_t v11 = sub_1001FD17C(v72, (uint64_t)"Tx: ", 4LL);
    uint64_t v12 = (void *)std::ostream::operator<<(v11, *(char *)(a1 + 43));
    sub_1001FD17C(v12, (uint64_t)" dB, ", 5LL);
  }

  if (*(void *)(a1 + 72) != *(void *)(a1 + 64))
  {
    sub_1001FD17C(v72, (uint64_t)"Service UUIDs: ", 15LL);
    uint64_t v13 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 72) != v13)
    {
      uint64_t v14 = 0LL;
      unsigned int v15 = 1;
      do
      {
        sub_1006344B4(v13 + 20 * v14, v80);
        if ((v80[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int16 v16 = v80;
        }
        else {
          __int16 v16 = (std::stringbuf::string_type *)v80[0].__r_.__value_.__r.__words[0];
        }
        if ((v80[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t size = v80[0].__r_.__value_.__s.__size_;
        }
        else {
          uint64_t size = v80[0].__r_.__value_.__l.__size_;
        }
        __n128 v18 = sub_1001FD17C(v72, (uint64_t)v16, size);
        sub_1001FD17C(v18, (uint64_t)" ", 1LL);
        uint64_t v14 = v15;
        uint64_t v13 = *(void *)(a1 + 64);
        BOOL v19 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 72) - v13) >> 2) > v15++;
      }

      while (v19);
    }

    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    std::ostream::sentry::sentry(&__p, v72);
    __int128 v20 = (char *)v72 + *(void *)(*(void *)&v72[0] - 24LL);
    if ((v20[32] & 5) == 0)
    {
      (*(void (**)(std::stringbuf::string_type *__return_ptr, void, uint64_t, uint64_t, uint64_t))(**((void **)v20 + 5) + 32LL))( v80,  *((void *)v20 + 5),  -1LL,  1LL,  16LL);
      if (v81 == -1) {
        std::ios_base::clear( (std::ios_base *)((char *)v72 + *(void *)(*(void *)&v72[0] - 24LL)),  *(_DWORD *)((char *)&v72[2] + *(void *)(*(void *)&v72[0] - 24LL)) | 4);
      }
    }

    std::ostream::sentry::~sentry(&__p);
    sub_1001FD17C(v72, (uint64_t)", ", 2LL);
  }

  if (*(void *)(a1 + 128))
  {
    sub_1001FD17C(v72, (uint64_t)"Service Data UUIDs: ", 20LL);
    size_t v21 = *(unsigned __int8 **)(a1 + 112);
    if (v21 != (unsigned __int8 *)(a1 + 120))
    {
      do
      {
        __int128 v78 = xmmword_1006BDBA8;
        int v79 = 0;
        if (!sub_1001BEC7C(v21 + 32, (unsigned __int8 *)&v78))
        {
          sub_1006344B4((uint64_t)(v21 + 32), v80);
          if ((v80[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v22 = v80;
          }
          else {
            uint64_t v22 = (std::stringbuf::string_type *)v80[0].__r_.__value_.__r.__words[0];
          }
          if ((v80[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v23 = v80[0].__r_.__value_.__s.__size_;
          }
          else {
            uint64_t v23 = v80[0].__r_.__value_.__l.__size_;
          }
          __int128 v24 = sub_1001FD17C(v72, (uint64_t)v22, v23);
          int v25 = sub_1001FD17C(v24, (uint64_t)":", 1LL);
          sub_10056B0A4((uint64_t)(v21 + 56), &__p);
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v27 = __p.__r_.__value_.__s.__size_;
          }
          else {
            uint64_t v27 = __p.__r_.__value_.__l.__size_;
          }
          int v28 = sub_1001FD17C(v25, (uint64_t)p_p, v27);
          sub_1001FD17C(v28, (uint64_t)" ", 1LL);
        }

        __n128 v29 = (unsigned __int8 *)*((void *)v21 + 1);
        if (v29)
        {
          do
          {
            unsigned __int32 v30 = v29;
            __n128 v29 = *(unsigned __int8 **)v29;
          }

          while (v29);
        }

        else
        {
          do
          {
            unsigned __int32 v30 = (unsigned __int8 *)*((void *)v21 + 2);
            BOOL v31 = *(void *)v30 == (void)v21;
            size_t v21 = v30;
          }

          while (!v31);
        }

        size_t v21 = v30;
      }

      while (v30 != (unsigned __int8 *)(a1 + 120));
    }

    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    std::ostream::sentry::sentry(&__p, v72);
    uint64_t v32 = (char *)v72 + *(void *)(*(void *)&v72[0] - 24LL);
    if ((v32[32] & 5) == 0)
    {
      (*(void (**)(std::stringbuf::string_type *__return_ptr, void, uint64_t, uint64_t, uint64_t))(**((void **)v32 + 5) + 32LL))( v80,  *((void *)v32 + 5),  -1LL,  1LL,  16LL);
      if (v81 == -1) {
        std::ios_base::clear( (std::ios_base *)((char *)v72 + *(void *)(*(void *)&v72[0] - 24LL)),  *(_DWORD *)((char *)&v72[2] + *(void *)(*(void *)&v72[0] - 24LL)) | 4);
      }
    }

    std::ostream::sentry::~sentry(&__p);
    sub_1001FD17C(v72, (uint64_t)", ", 2LL);
  }

  if (*(void *)(a1 + 96) != *(void *)(a1 + 88))
  {
    sub_1001FD17C(v72, (uint64_t)"Solicited Service UUIDs: ", 25LL);
    uint64_t v33 = *(void *)(a1 + 88);
    if (*(void *)(a1 + 96) != v33)
    {
      uint64_t v34 = 0LL;
      unsigned int v35 = 1;
      do
      {
        sub_1006344B4(v33 + 20 * v34, v80);
        if ((v80[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v36 = v80;
        }
        else {
          uint64_t v36 = (std::stringbuf::string_type *)v80[0].__r_.__value_.__r.__words[0];
        }
        if ((v80[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v37 = v80[0].__r_.__value_.__s.__size_;
        }
        else {
          uint64_t v37 = v80[0].__r_.__value_.__l.__size_;
        }
        __int128 v38 = sub_1001FD17C(v72, (uint64_t)v36, v37);
        sub_1001FD17C(v38, (uint64_t)" ", 1LL);
        uint64_t v34 = v35;
        uint64_t v33 = *(void *)(a1 + 88);
        BOOL v19 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 96) - v33) >> 2) > v35++;
      }

      while (v19);
    }

    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    std::ostream::sentry::sentry(&__p, v72);
    int v39 = (char *)v72 + *(void *)(*(void *)&v72[0] - 24LL);
    if ((v39[32] & 5) == 0)
    {
      (*(void (**)(std::stringbuf::string_type *__return_ptr, void, uint64_t, uint64_t, uint64_t))(**((void **)v39 + 5) + 32LL))( v80,  *((void *)v39 + 5),  -1LL,  1LL,  16LL);
      if (v81 == -1) {
        std::ios_base::clear( (std::ios_base *)((char *)v72 + *(void *)(*(void *)&v72[0] - 24LL)),  *(_DWORD *)((char *)&v72[2] + *(void *)(*(void *)&v72[0] - 24LL)) | 4);
      }
    }

    std::ostream::sentry::~sentry(&__p);
    sub_1001FD17C(v72, (uint64_t)", ", 2LL);
  }

  if (!sub_10056AAC8(a1 + 48))
  {
    sub_1001FD17C(v72, (uint64_t)"MFR Data: ", 10LL);
    sub_10056B0A4(a1 + 48, v80);
    if ((v80[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v40 = v80;
    }
    else {
      __int128 v40 = (std::stringbuf::string_type *)v80[0].__r_.__value_.__r.__words[0];
    }
    if ((v80[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v41 = v80[0].__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v41 = v80[0].__r_.__value_.__l.__size_;
    }
    __int128 v42 = sub_1001FD17C(v72, (uint64_t)v40, v41);
    int v43 = sub_1001FD17C(v42, (uint64_t)"[AppleTypesBitmap:", 18LL);
    sub_10056CFC8(a1 + 168, 0x30u, 49, (int8x16_t **)&__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unsigned __int16 v44 = &__p;
    }
    else {
      unsigned __int16 v44 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v45 = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v45 = __p.__r_.__value_.__l.__size_;
    }
    unint64_t v46 = sub_1001FD17C(v43, (uint64_t)v44, v45);
    sub_1001FD17C(v46, (uint64_t)"], ", 3LL);
  }

  if (!sub_10056AAC8(a1 + 136))
  {
    sub_1001FD17C(v72, (uint64_t)"LE BT Address: ", 15LL);
    sub_10056B0A4(a1 + 136, v80);
    if ((v80[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v47 = v80;
    }
    else {
      uint64_t v47 = (std::stringbuf::string_type *)v80[0].__r_.__value_.__r.__words[0];
    }
    if ((v80[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v48 = v80[0].__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v48 = v80[0].__r_.__value_.__l.__size_;
    }
    sub_1001FD17C(v72, (uint64_t)v47, v48);
    sub_1001FD17C(v72, (uint64_t)", ", 2LL);
  }

  if (!sub_10056AAC8(a1 + 152))
  {
    sub_1001FD17C(v72, (uint64_t)"MFR Data (non-Apple): ", 22LL);
    sub_10056B0A4(a1 + 152, v80);
    if ((v80[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v49 = v80;
    }
    else {
      uint64_t v49 = (std::stringbuf::string_type *)v80[0].__r_.__value_.__r.__words[0];
    }
    if ((v80[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v50 = v80[0].__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v50 = v80[0].__r_.__value_.__l.__size_;
    }
    sub_1001FD17C(v72, (uint64_t)v49, v50);
    sub_1001FD17C(v72, (uint64_t)", ", 2LL);
  }

  if (!sub_10056AAC8(a1 + 224))
  {
    sub_1001FD17C(v72, (uint64_t)"TDS Data: ", 10LL);
    sub_10056B0A4(a1 + 224, v80);
    if ((v80[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v51 = v80;
    }
    else {
      char v51 = (std::stringbuf::string_type *)v80[0].__r_.__value_.__r.__words[0];
    }
    if ((v80[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v52 = v80[0].__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v52 = v80[0].__r_.__value_.__l.__size_;
    }
    sub_1001FD17C(v72, (uint64_t)v51, v52);
    sub_1001FD17C(v72, (uint64_t)", ", 2LL);
  }

  if (!*(_BYTE *)(a1 + 12)) {
    sub_1001FD17C(v72, (uint64_t)"non-", 4LL);
  }
  sub_1001FD17C(v72, (uint64_t)"connectable, ", 13LL);
  if (*(_BYTE *)(a1 + 13)) {
    sub_1001FD17C(v72, (uint64_t)"dual-mode, ", 11LL);
  }
  if (*(_BYTE *)(a1 + 14)) {
    sub_1001FD17C(v72, (uint64_t)"AP wakeup, ", 11LL);
  }
  if (*(_BYTE *)(a1 + 219))
  {
    unint64_t v53 = sub_1001FD17C(v72, (uint64_t)"channel: ", 9LL);
    __int128 v54 = (void *)std::ostream::operator<<(v53, *(unsigned __int8 *)(a1 + 219));
    sub_1001FD17C(v54, (uint64_t)", ", 2LL);
  }

  if (*(_BYTE *)(a1 + 220)) {
    sub_1001FD17C(v72, (uint64_t)"RSSI_WLAN, ", 11LL);
  }
  if (!*(_BYTE *)(a1 + 365))
  {
    __int128 v55 = "sourceCore: MainCore";
    goto LABEL_138;
  }

  if (*(_BYTE *)(a1 + 365) == 1)
  {
    __int128 v55 = "sourceCore: ScanCore";
LABEL_138:
    uint64_t v56 = 20LL;
    goto LABEL_140;
  }

  __int128 v55 = "sourceCore: Unknown";
  uint64_t v56 = 19LL;
LABEL_140:
  unint64_t v57 = sub_1001FD17C(v72, (uint64_t)v55, v56);
  sub_1001FD17C(v57, (uint64_t)", ", 2LL);
  if (!sub_10056AAC8(a1 + 448))
  {
    sub_1001FD17C(v72, (uint64_t)"Resolvable Set ID Data: ", 24LL);
    sub_10056B0A4(a1 + 448, v80);
    if ((v80[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v58 = v80;
    }
    else {
      uint64_t v58 = (std::stringbuf::string_type *)v80[0].__r_.__value_.__r.__words[0];
    }
    if ((v80[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v59 = v80[0].__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v59 = v80[0].__r_.__value_.__l.__size_;
    }
    sub_1001FD17C(v72, (uint64_t)v58, v59);
    sub_1001FD17C(v72, (uint64_t)", ", 2LL);
  }

  uint64_t v60 = sub_1001FD17C(v72, (uint64_t)"IsELNAOn: ", 10LL);
  char v61 = (void *)std::ostream::operator<<(v60, *(unsigned __int8 *)(a1 + 366));
  sub_1001FD17C(v61, (uint64_t)", ", 2LL);
  __n128 v62 = sub_1001FD17C(v72, (uint64_t)"IsPassup: ", 10LL);
  uint64_t v63 = (void *)std::ostream::operator<<(v62, *(unsigned __int8 *)(a1 + 367));
  sub_1001FD17C(v63, (uint64_t)", ", 2LL);
  __n128 v64 = sub_1001FD17C(v72, (uint64_t)"IsFromSCCompensation", 20LL);
  unint64_t v65 = (void *)std::ostream::operator<<(v64, *(unsigned __int8 *)(a1 + 368));
  sub_1001FD17C(v65, (uint64_t)", ", 2LL);
  unint64_t v66 = sub_1001FD17C(v72, (uint64_t)"IsCoexDenied", 12LL);
  int v67 = (void *)std::ostream::operator<<(v66, *(unsigned __int8 *)(a1 + 369));
  sub_1001FD17C(v67, (uint64_t)", ", 2LL);
  std::stringbuf::str(a2, (const std::stringbuf *)((char *)v72 + 8));
  *(void *)((char *)&v72[-1]
  *(void *)&v72[0] = v68;
  if (SHIBYTE(v74) < 0) {
    operator delete(v73[1]);
  }
  std::streambuf::~streambuf((char *)v72 + 8);
  return std::ios::~ios(v76);
}

void sub_10056CF0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

int8x16_t *sub_10056CFC8@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, char a3@<W2>, int8x16_t **a4@<X8>)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  BOOL result = (int8x16_t *)operator new(0x108uLL);
  unint64_t v9 = 0LL;
  *a4 = result;
  *(_OWORD *)(a4 + 1) = xmmword_1006C4080;
  int8x16_t v10 = vdupq_n_s8(a2);
  *BOOL result = v10;
  result[1] = v10;
  result[2] = v10;
  result[3] = v10;
  result[4] = v10;
  result[5] = v10;
  result[6] = v10;
  result[7] = v10;
  result[8] = v10;
  result[9] = v10;
  result[10] = v10;
  result[11] = v10;
  result[12] = v10;
  result[13] = v10;
  result[14] = v10;
  result[15] = v10;
  uint64_t v11 = 255LL;
  result[16].i8[0] = 0;
  do
  {
    if (((*(void *)(a1 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0)
    {
      else {
        uint64_t v12 = (uint64_t *)*a4;
      }
      *((_BYTE *)v12 + v11) = a3;
    }

    ++v9;
    --v11;
  }

  while (v9 != 256);
  return result;
}

void sub_10056D084(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10056D0DC(a1);
  operator delete(v1);
}

void sub_10056D098(id a1)
{
  uint64_t v1 = operator new(0x118uLL);
  sub_1003AA490((uint64_t)v1);
  off_1008D96F8 = v1;
}

void sub_10056D0C8(_Unwind_Exception *a1)
{
}

uint64_t sub_10056D0DC(uint64_t a1)
{
  *(void *)a1 = &off_1008A1A10;
  *(void *)(a1 + 4sub_100242FAC(v15 - 48) = &off_10087FAA8;
  int16x4_t v2 = *(unsigned int **)(a1 + 456);
  if (v2) {
    sub_1002CD254(v2);
  }
  sub_10023E78C(a1 + 416, *(char **)(a1 + 424));

  *(void *)(a1 + 288) = &off_10087FAA8;
  unint64_t v3 = *(unsigned int **)(a1 + 296);
  if (v3) {
    sub_1002CD254(v3);
  }
  *(void *)(a1 + 272) = &off_10087FAA8;
  unint64_t v4 = *(unsigned int **)(a1 + 280);
  if (v4) {
    sub_1002CD254(v4);
  }
  *(void *)(a1 + 224) = &off_10087FAA8;
  int v5 = *(unsigned int **)(a1 + 232);
  if (v5) {
    sub_1002CD254(v5);
  }
  *(void *)(a1 + 152) = &off_10087FAA8;
  uint64_t v6 = *(unsigned int **)(a1 + 160);
  if (v6) {
    sub_1002CD254(v6);
  }
  *(void *)(a1 + 136) = &off_10087FAA8;
  uint64_t v7 = *(unsigned int **)(a1 + 144);
  if (v7) {
    sub_1002CD254(v7);
  }
  sub_100051CA8(a1 + 112, *(void **)(a1 + 120));
  unint64_t v8 = *(void **)(a1 + 88);
  if (v8)
  {
    *(void *)(a1 + sub_100242FAC(v22 - 96) = v8;
    operator delete(v8);
  }

  unint64_t v9 = *(void **)(a1 + 64);
  if (v9)
  {
    *(void *)(a1 + 72) = v9;
    operator delete(v9);
  }

  *(void *)(a1 + sub_100242FAC(v15 - 48) = &off_10087FAA8;
  int8x16_t v10 = *(unsigned int **)(a1 + 56);
  if (v10) {
    sub_1002CD254(v10);
  }
  return a1;
}

uint64_t sub_10056D1D0(uint64_t a1)
{
  *(_BYTE *)(a1 + 100) = 0;
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  atomic_store(0, (unsigned int *)(a1 + 96));
  atomic_store(0, (unsigned __int8 *)(a1 + 17));
  *(void *)(a1 + 88) = 0LL;
  atomic_store(0, (unsigned __int8 *)(a1 + 18));
  *(_BYTE *)(a1 + 100) = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10056D260;
  block[3] = &unk_10087EB20;
  block[4] = a1;
  dispatch_async(&_dispatch_main_q, block);
  return a1;
}

void sub_10056D260(uint64_t a1)
{
}

void sub_10056D268(uint64_t a1)
{
  int16x4_t v2 = (os_log_s *)qword_1008F7580;
  if (os_log_type_enabled((os_log_t)qword_1008F7580, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Registering for WiFi Callback", buf, 2u);
  }

  uint64_t v3 = WiFiManagerClientCreate(kCFAllocatorDefault, 0LL);
  *(void *)a1 = v3;
  if (v3)
  {
    unint64_t v4 = (const __CFArray *)WiFiManagerClientCopyDevices();
    if (v4)
    {
      int v5 = v4;
      if (CFArrayGetCount(v4))
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v5, 0LL);
        *(void *)(a1 + 8) = ValueAtIndex;
        CFRetain(ValueAtIndex);
        uint64_t v7 = *(void *)(a1 + 8);
        if (v7)
        {
          unsigned __int8 v8 = WiFiDeviceClientGetPower(v7) != 0;
          sub_10056DB90(a1, v8);
          uint64_t v9 = WiFiDeviceClientCopyCurrentNetwork(*(void *)(a1 + 8));
          if (v9)
          {
            int8x16_t v10 = (const void *)v9;
            unsigned int OperatingBand = WiFiNetworkGetOperatingBand();
            sub_10056DC08(a1, OperatingBand);
            CFRelease(v10);
          }
        }

        uint64_t v13 = sub_1002E8D54();
        (*(void (**)(uint64_t))(*(void *)v13 + 32LL))(v13);
      }

      CFRelease(v5);
    }
  }

  CFRunLoopRef Main = CFRunLoopGetMain();
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  *(void *)(a1 + 88) = Main;
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 24));
  if (*(void *)a1 && *(void *)(a1 + 88) && (uint64_t v15 = *(void *)(a1 + 8)) != 0)
  {
    WiFiDeviceClientRegisterPowerCallback(v15, sub_10056DD44, a1);
    WiFiDeviceClientRegisterExtendedLinkCallback(*(void *)(a1 + 8), sub_10056DD54, a1);
    WiFiDeviceClientRegisterBssidChangeCallback(*(void *)(a1 + 8), sub_10056DD60, a1);
    WiFiDeviceClientRegisterM1M4Handshake24GHzCountCallback(*(void *)(a1 + 8), sub_10056DD6C, a1);
    WiFiDeviceClientRegisterVirtualInterfaceStateChangeCallback(*(void *)(a1 + 8), sub_10056DD78, a1);
    WiFiManagerClientScheduleWithRunLoop(*(void *)a1, *(void *)(a1 + 88), kCFRunLoopDefaultMode);
    __int16 v16 = (os_log_s *)qword_1008F7580;
    if (os_log_type_enabled((os_log_t)qword_1008F7580, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "WiFi interface is up", buf, 2u);
    }
  }

  else
  {
    int v17 = (os_log_s *)qword_1008F7580;
    if (os_log_type_enabled((os_log_t)qword_1008F7580, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Setting up ReTry Timer to ensure WiFi is up",  buf,  2u);
    }

    dispatch_source_t v18 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, &_dispatch_main_q);
    if (v18)
    {
      BOOL v19 = v18;
      dispatch_time_t v20 = dispatch_time(0LL, 10000000000LL);
      dispatch_source_set_timer(v19, v20, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      v21[2] = sub_10056DD84;
      void v21[3] = &unk_10087F8E0;
      uint8_t v21[4] = a1;
      void v21[5] = v19;
      dispatch_source_set_event_handler(v19, v21);
      dispatch_activate(v19);
    }
  }

void sub_10056D558(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "COEXDEBUG");
  sub_10002418C(__p, "Enabled");
  (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v2 + 72LL))(v2, buf, __p, a1 + 100);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(*(void **)buf);
  }
  if (*(_BYTE *)(a1 + 100))
  {
    uint64_t v3 = (os_log_s *)qword_1008F7580;
    if (os_log_type_enabled((os_log_t)qword_1008F7580, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "WiFiDebugModeUpdated COEXDEBUG", buf, 2u);
    }

    unsigned __int8 v20 = 0;
    uint64_t v4 = sub_1002E6E00();
    sub_10002418C(buf, "COEXDEBUG");
    sub_10002418C(__p, "wifiStatePower");
    int v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v4 + 72LL))( v4,  buf,  __p,  &v20);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (v24 < 0)
    {
      operator delete(*(void **)buf);
      if (!v5) {
        goto LABEL_16;
      }
    }

    else if (!v5)
    {
      goto LABEL_16;
    }

    atomic_store(v20, (unsigned __int8 *)(a1 + 16));
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)(a1 + 16));
    if ((v6 & 1) == 0)
    {
      atomic_store(0, (unsigned int *)(a1 + 96));
      atomic_store(0, (unsigned __int8 *)(a1 + 18));
LABEL_38:
      uint64_t v16 = sub_1002E8D54();
      (*(void (**)(uint64_t))(*(void *)v16 + 32LL))(v16);
      return;
    }

void sub_10056D8A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_10056D8FC(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 100))
  {
    uint64_t v2 = (os_log_s *)qword_1008F7580;
    if (os_log_type_enabled((os_log_t)qword_1008F7580, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", v9, 2u);
    }
  }

  else
  {
    if (a2)
    {
      atomic_store(WiFiDeviceClientGetPower(a2) != 0, (unsigned __int8 *)(a1 + 16));
      uint64_t v5 = WiFiDeviceClientCopyCurrentNetwork(a2);
      if (v5)
      {
        unsigned __int8 v6 = (const void *)v5;
        atomic_store(WiFiNetworkGetOperatingBand(), (unsigned int *)(a1 + 96));
        CFRelease(v6);
      }

      else
      {
        atomic_store(0, (unsigned int *)(a1 + 96));
        atomic_store(0, (unsigned __int8 *)(a1 + 17));
      }
    }

    uint64_t v8 = sub_1002E8D54();
    (*(void (**)(uint64_t))(*(void *)v8 + 32LL))(v8);
  }

void sub_10056D9F4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(_BYTE *)(a1 + 100))
  {
    uint64_t v3 = (os_log_s *)qword_1008F7580;
    if (os_log_type_enabled((os_log_t)qword_1008F7580, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", v5, 2u);
    }
  }

  else
  {
    sub_10056DA84(a1, a3);
    uint64_t v4 = sub_1002E8D54();
    (*(void (**)(uint64_t))(*(void *)v4 + 32LL))(v4);
  }

void sub_10056DA84(uint64_t a1, unsigned int a2)
{
  if (*(_BYTE *)(a1 + 100))
  {
    uint64_t v2 = qword_1008F7580;
    if (!os_log_type_enabled((os_log_t)qword_1008F7580, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v3 = "Ignoring real wifi updates";
    uint64_t v4 = (os_log_s *)v2;
    uint32_t v5 = 2;
  }

  else
  {
    uint64_t v7 = (unsigned int *)(a1 + 20);
    atomic_store(a2, (unsigned int *)(a1 + 20));
    uint64_t v8 = qword_1008F7580;
    if (!os_log_type_enabled((os_log_t)qword_1008F7580, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    unsigned int v9 = atomic_load(v7);
    v10[0] = 67109376;
    v10[1] = v9;
    __int16 v11 = 1024;
    unsigned int v12 = a2;
    uint64_t v3 = "Callback triggered, M1M4HandshakeCount setting to: %u with wifihandshakecount: %u";
    uint64_t v4 = (os_log_s *)v8;
    uint32_t v5 = 14;
  }

  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v3, (uint8_t *)v10, v5);
}

void sub_10056DB90(uint64_t a1, unsigned __int8 a2)
{
  if (*(_BYTE *)(a1 + 100))
  {
    uint64_t v2 = (os_log_s *)qword_1008F7580;
    if (os_log_type_enabled((os_log_t)qword_1008F7580, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", v3, 2u);
    }
  }

  else
  {
    atomic_store(a2, (unsigned __int8 *)(a1 + 16));
  }

void sub_10056DC08(uint64_t a1, unsigned int a2)
{
  if (*(_BYTE *)(a1 + 100))
  {
    uint64_t v2 = (os_log_s *)qword_1008F7580;
    if (os_log_type_enabled((os_log_t)qword_1008F7580, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", v3, 2u);
    }
  }

  else
  {
    atomic_store(a2, (unsigned int *)(a1 + 96));
  }

void sub_10056DC80(uint64_t a1, unsigned __int8 a2)
{
  if (*(_BYTE *)(a1 + 100))
  {
    uint64_t v2 = (os_log_s *)qword_1008F7580;
    if (os_log_type_enabled((os_log_t)qword_1008F7580, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", v3, 2u);
    }
  }

  else
  {
    atomic_store(a2, (unsigned __int8 *)(a1 + 17));
  }

uint64_t sub_10056DCF8(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 20));
}

uint64_t sub_10056DD04(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 16));
  return v1 & 1;
}

uint64_t sub_10056DD14(uint64_t a1)
{
  return (char)atomic_load((unsigned int *)(a1 + 96));
}

uint64_t sub_10056DD24(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 17));
  return v1 & 1;
}

uint64_t sub_10056DD34(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 18));
  return v1 & 1;
}

void sub_10056DD44(uint64_t a1, uint64_t a2)
{
}

void sub_10056DD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10056DD60(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10056DD6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10056DD78(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10056DD84(uint64_t a1)
{
  uint64_t v2 = *(dispatch_source_s **)(a1 + 40);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 40));
  }

uint64_t sub_10056DDC4(uint64_t a1)
{
  *(void *)a1 = off_1008A1A70;
  *(void *)(a1 + 8) = &off_1008A1AF8;
  *(void *)(a1 + 16) = &off_1008A1B28;
  *(void *)(a1 + 24) = off_1008A1B40;
  *(void *)(a1 + 32) = off_1008A1B90;
  *(_BYTE *)(a1 + 41) = 0;
  sub_100242DC4(a1 + 56);
  *(_DWORD *)(a1 + 120) = 0;
  *(CFAbsoluteTime *)(a1 + 128) = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 16832) = 0u;
  *(void *)(a1 + 16824) = a1 + 16832;
  *(void *)(a1 + 168sub_100242FAC(v15 - 48) = a1 + 16848;
  *(void *)(a1 + 16856) = a1 + 16848;
  *(void *)(a1 + 16864) = 0LL;
  *(_BYTE *)(a1 + 16872) = 0;
  *(_BYTE *)(a1 + 16874) = 0;
  *(_OWORD *)(a1 + 16888) = 0u;
  *(void *)(a1 + 16880) = a1 + 16888;
  *(_WORD *)(a1 + 16906) = 7;
  *(void *)(a1 + 16912) = 3600LL;
  *(_BYTE *)(a1 + 16920) = 0;
  *(void *)(a1 + 16936) = 0LL;
  *(_WORD *)(a1 + 16944) = 0;
  *(_OWORD *)(a1 + 16976) = 0u;
  *(void *)(a1 + 16992) = 0LL;
  *(void *)(a1 + 17016) = 0LL;
  *(void *)(a1 + 16965) = 0LL;
  *(_OWORD *)(a1 + 16952) = 0u;
  *(void *)(a1 + 17002) = 0LL;
  *(_DWORD *)(a1 + 17010) = 0;
  *(void *)(a1 + 17024) = a1 + 17024;
  *(void *)(a1 + 17032) = a1 + 17024;
  *(void *)(a1 + 17040) = 0LL;
  *(_BYTE *)(a1 + 17072) = 0;
  *(int32x2_t *)(a1 + 17076) = vdup_n_s32(0x12Cu);
  *(_BYTE *)(a1 + 17084) = 0;
  *(void *)(a1 + sub_100242FAC(v15 - 48) = sub_100404FE8();
  bzero((void *)(a1 + 144), 0x4128uLL);
  *(void *)(a1 + 16952) = 0LL;
  *(void *)(a1 + 16960) = 0LL;
  *(void *)(a1 + 16921) = 0LL;
  *(_WORD *)(a1 + 16929) = 0;
  return a1;
}

void sub_10056DF44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v11 = 0LL;
  uint64_t v12 = v3 + 16960;
  do
  {

    v11 -= 8LL;
  }

  while (v11 != -16);
  sub_10023BF24(v6, *v8);
  sub_10023DF50(v5);
  sub_10057D2C4(v4, *v7);
  sub_100242E28(v2);
  _Unwind_Resume(a1);
}

void sub_10056DFB8(uint64_t a1)
{
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_1008A1C60);
  }
  sub_10057D000((uint64_t)off_1008D67C0 + 192, a1);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_1008A1C80);
  }
  sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1 + 8);
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_1008A1CA0);
  }
  sub_100447B0C((uint64_t)off_1008D6190, a1 + 24);
  if (!*(_BYTE *)(sub_1002E6E9C() + 160))
  {
    uint64_t v2 = (os_log_s *)qword_1008F7648;
    if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Using a single advertising instance", buf, 2u);
    }

    *(_DWORD *)(a1 + 136) = 1;
  }

  int v111 = 0;
  uint64_t v3 = sub_1002E6E00();
  sub_10002418C(buf, "AE");
  sub_10002418C(__p, "EnableBackgroundExtendedAdvertising");
  int v4 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v3 + 88LL))(v3, buf, __p, &v111);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = a1 + 16874;
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v4) {
      goto LABEL_37;
    }
  }

  else if (!v4)
  {
    goto LABEL_37;
  }

  uint64_t v6 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Warning: Enabled Background advertising with extended advertising",  buf,  2u);
  }

  *(_BYTE *)uint64_t v5 = v111 != 0;
  int v108 = 0;
  uint64_t v7 = sub_1002E6E00();
  sub_10002418C(buf, "AE");
  sub_10002418C(__p, "MaxAdvertisingBackgroundSessions");
  int v8 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v7 + 88LL))(v7, buf, __p, &v108);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v8) {
      goto LABEL_28;
    }
  }

  else if (!v8)
  {
    goto LABEL_28;
  }

  unsigned int v9 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v108;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Warning: Overriding max background advertising sessions to %d",  buf,  8u);
  }

  *(_WORD *)(a1 + 16906) = v108;
LABEL_28:
  int v107 = 0;
  uint64_t v10 = sub_1002E6E00();
  sub_10002418C(buf, "AE");
  sub_10002418C(__p, "MaxBackgroundAdvertisingTimeForSession");
  int v11 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v10 + 88LL))(v10, buf, __p, &v107);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v11) {
      goto LABEL_37;
    }
  }

  else if (!v11)
  {
    goto LABEL_37;
  }

  uint64_t v12 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 134217984;
    *(void *)&uint8_t buf[4] = v107 / 1000;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Warning: Overriding max background advertising time for session to %lld seconds",  buf,  0xCu);
  }

  *(void *)(a1 + 16912) = v107;
  *(_BYTE *)(a1 + 16920) = 1;
LABEL_37:
  int v108 = 0;
  uint64_t v13 = sub_1002E6E00();
  sub_10002418C(buf, "ADVDEBUG");
  sub_10002418C(__p, "FakeBusyErrorOnADVStartCount");
  int v14 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v13 + 88LL))(v13, buf, __p, &v108);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v14) {
      goto LABEL_46;
    }
  }

  else if (!v14)
  {
    goto LABEL_46;
  }

  unsigned int v15 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v108;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Warning: Enabling fake OI_BUSY_FAIL on ADV start every %d start attempts",  buf,  8u);
  }

  *(_WORD *)(a1 + 16970) = v108;
LABEL_46:
  uint64_t v16 = sub_1002E6E00();
  sub_10002418C(buf, "ADVDEBUG");
  sub_10002418C(__p, "FakeADVUnsettledStateCount");
  int v17 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v16 + 88LL))(v16, buf, __p, &v108);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v17) {
      goto LABEL_55;
    }
  }

  else if (!v17)
  {
    goto LABEL_55;
  }

  uint64_t v18 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v108;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Warning: Enabling fake advertising unsettled state on ADV start every %d start attempts",  buf,  8u);
  }

  *(_WORD *)(a1 + 16968) = v108;
LABEL_55:
  uint64_t v19 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v19 + 408LL))(v19) & 1) == 0)
  {
    uint64_t v20 = sub_1002E8D54();
    sub_1003CBF90(v20 + 728, a1 + 16);
  }

  uint64_t v21 = sub_1002E8D54();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 152LL))(v21, a1 + 40);
  int v107 = 0;
  uint64_t v22 = sub_1002E6E00();
  sub_10002418C(buf, "LeBroadcaster");
  sub_10002418C(__p, "AdvertisementInterval");
  int v23 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v22 + 88LL))(v22, buf, __p, &v107);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v23) {
      goto LABEL_67;
    }
  }

  else if (!v23)
  {
    goto LABEL_67;
  }

  char v24 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_fault_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "AdvertisementInterval defaults is now obsolete. Please use ConnectableAdvInt, NonConnectableAdvInt, ObjectDiscover yAdvInt and ExtAdvInt instead",  buf,  2u);
    char v24 = (os_log_s *)qword_1008F7648;
  }

  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
    sub_10069485C();
  }
LABEL_67:
  uint64_t v25 = sub_1002E6E00();
  sub_10002418C(buf, "LeBroadcaster");
  sub_10002418C(__p, "ConnectableAdvInt");
  int v26 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v25 + 88LL))(v25, buf, __p, &v107);
  if (v107) {
    int v27 = v26;
  }
  else {
    int v27 = 0;
  }
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v27) {
      goto LABEL_79;
    }
  }

  else if (!v27)
  {
    goto LABEL_79;
  }

  int v28 = (os_log_s *)qword_1008F7648;
  BOOL v29 = os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT);
  __int16 v30 = v107;
  if (v29)
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v107;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Enabling override value (%d) for connectable advertisement interval",  buf,  8u);
    __int16 v30 = v107;
  }

  *(_WORD *)(v5 + 128) = v30;
LABEL_79:
  uint64_t v31 = sub_1002E6E00();
  sub_10002418C(buf, "LeBroadcaster");
  sub_10002418C(__p, "NonConnectableAdvInt");
  int v32 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v31 + 88LL))(v31, buf, __p, &v107);
  if (v107) {
    int v33 = v32;
  }
  else {
    int v33 = 0;
  }
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v33) {
      goto LABEL_91;
    }
  }

  else if (!v33)
  {
    goto LABEL_91;
  }

  uint64_t v34 = (os_log_s *)qword_1008F7648;
  BOOL v35 = os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT);
  __int16 v36 = v107;
  if (v35)
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v107;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Enabling override value (%d) for non connectable advertisement interval",  buf,  8u);
    __int16 v36 = v107;
  }

  *(_WORD *)(v5 + 130) = v36;
LABEL_91:
  uint64_t v37 = sub_1002E6E00();
  sub_10002418C(buf, "LeBroadcaster");
  sub_10002418C(__p, "NonConnectableSecondaryAdvInt");
  int v38 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v37 + 88LL))(v37, buf, __p, &v107);
  if (v107) {
    int v39 = v38;
  }
  else {
    int v39 = 0;
  }
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v39) {
      goto LABEL_103;
    }
  }

  else if (!v39)
  {
    goto LABEL_103;
  }

  __int128 v40 = (os_log_s *)qword_1008F7648;
  BOOL v41 = os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT);
  __int16 v42 = v107;
  if (v41)
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v107;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Enabling override value (%d) for non connectable secondary advertisement interval",  buf,  8u);
    __int16 v42 = v107;
  }

  *(_WORD *)(v5 + 132) = v42;
LABEL_103:
  uint64_t v43 = sub_1002E6E00();
  sub_10002418C(buf, "LeBroadcaster");
  sub_10002418C(__p, "ObjectDiscoveryAdvInt");
  int v44 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v43 + 88LL))(v43, buf, __p, &v107);
  if (v107) {
    int v45 = v44;
  }
  else {
    int v45 = 0;
  }
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v45) {
      goto LABEL_119;
    }
  }

  else if (!v45)
  {
    goto LABEL_119;
  }

  int v46 = v107;
  uint64_t v47 = (os_log_s *)qword_1008F7648;
  if (v107 <= 289)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v46;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = 290;
      _os_log_error_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_ERROR,  "Cannot advertise with this interval (%d) for Object Discovery advertisement, setting this to %d",  buf,  0xEu);
      uint64_t v47 = (os_log_s *)qword_1008F7648;
    }

    int v46 = 290;
    int v107 = 290;
  }

  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v46;
    _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Enabling override value (%d) for Object Discovery advertisement interval",  buf,  8u);
    LOWORD(v46) = v107;
  }

  *(_WORD *)(v5 + 134) = v46;
LABEL_119:
  uint64_t v48 = sub_1002E6E00();
  sub_10002418C(buf, "LeBroadcaster");
  sub_10002418C(__p, "ExtAdvInt");
  int v49 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v48 + 88LL))(v48, buf, __p, &v107);
  if (v107) {
    int v50 = v49;
  }
  else {
    int v50 = 0;
  }
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v50) {
      goto LABEL_131;
    }
  }

  else if (!v50)
  {
    goto LABEL_131;
  }

  char v51 = (os_log_s *)qword_1008F7648;
  BOOL v52 = os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT);
  __int16 v53 = v107;
  if (v52)
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v107;
    _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "Enabling override value (%d) for Extended advertisement interval",  buf,  8u);
    __int16 v53 = v107;
  }

  *(_WORD *)(v5 + 136) = v53;
LABEL_131:
  uint64_t v54 = sub_1002E6E00();
  sub_10002418C(buf, "LeBroadcaster");
  sub_10002418C(__p, "ContactAdvInt");
  int v55 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v54 + 88LL))(v54, buf, __p, &v107);
  if (v107) {
    int v56 = v55;
  }
  else {
    int v56 = 0;
  }
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v56) {
      goto LABEL_143;
    }
  }

  else if (!v56)
  {
    goto LABEL_143;
  }

  unint64_t v57 = (os_log_s *)qword_1008F7648;
  BOOL v58 = os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT);
  __int16 v59 = v107;
  if (v58)
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v107;
    _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "Enabling override value (%d) for Contact advertisement interval",  buf,  8u);
    __int16 v59 = v107;
  }

  *(_WORD *)(v5 + 138) = v59;
LABEL_143:
  int v106 = 0;
  uint64_t v60 = sub_1002E6E00();
  sub_10002418C(buf, "LeBroadcaster");
  sub_10002418C(__p, "AdvStatsInstance1");
  int v61 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v60 + 88LL))(v60, buf, __p, &v106);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0) {
    operator delete(*(void **)buf);
  }
  char v62 = v106;
  if (!v61) {
    char v62 = 0;
  }
  *(_BYTE *)(v5 + 174) = v62;
  uint64_t v63 = sub_1002E6E00();
  sub_10002418C(buf, "LeBroadcaster");
  sub_10002418C(__p, "AdvStatsEnable1");
  int v64 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v63 + 88LL))(v63, buf, __p, &v106);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0) {
    operator delete(*(void **)buf);
  }
  char v65 = v106;
  if (!v64) {
    char v65 = 1;
  }
  *(_BYTE *)(v5 + 175) = v65;
  uint64_t v66 = sub_1002E6E00();
  sub_10002418C(buf, "LeBroadcaster");
  sub_10002418C(__p, "AdvStatsReset1");
  int v67 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v66 + 88LL))(v66, buf, __p, &v106);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0) {
    operator delete(*(void **)buf);
  }
  char v68 = v106;
  if (!v67) {
    char v68 = 1;
  }
  *(_BYTE *)(v5 + 176) = v68;
  uint64_t v69 = sub_1002E6E00();
  sub_10002418C(buf, "LeBroadcaster");
  sub_10002418C(__p, "AdvStatsPeriod1");
  int v70 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v69 + 88LL))(v69, buf, __p, &v106);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0) {
    operator delete(*(void **)buf);
  }
  int v71 = v106;
  if (!v70) {
    int v71 = 60;
  }
  *(_DWORD *)(v5 + 178) = v71;
  uint64_t v72 = sub_1002E6E00();
  sub_10002418C(buf, "LeBroadcaster");
  sub_10002418C(__p, "AdvStatsCanWakeUpAP1");
  int v73 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v72 + 88LL))(v72, buf, __p, &v106);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (v73) {
      goto LABEL_171;
    }
LABEL_173:
    *(_BYTE *)(v5 + 182) = 0;
    if (!(v70 | v67 | v64 | v61)) {
      goto LABEL_182;
    }
    goto LABEL_174;
  }

  if (!v73) {
    goto LABEL_173;
  }
LABEL_171:
  int v73 = v106;
  *(_BYTE *)(v5 + 182) = v106;
LABEL_174:
  __int128 v74 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
  {
    int v75 = *(unsigned __int8 *)(v5 + 174);
    if (*(_BYTE *)(v5 + 175)) {
      __int16 v76 = "Y";
    }
    else {
      __int16 v76 = "N";
    }
    if (*(_BYTE *)(v5 + 176)) {
      uint64_t v77 = "Y";
    }
    else {
      uint64_t v77 = "N";
    }
    int v78 = *(_DWORD *)(v5 + 178);
    *(_DWORD *)stat buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v75;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v76;
    __int16 v113 = 2080;
    id v114 = v77;
    __int16 v115 = 1024;
    int v116 = v78;
    __int16 v117 = 1024;
    int v118 = v73;
    _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "Enabling Adv Stats for instance %d enable %s reset %s period %d (secs) canWakeUpAP %d",  buf,  0x28u);
  }

LABEL_229:
  uint64_t v102 = sub_1002E6E00();
  sub_10002418C(buf, "LeBroadcaster");
  sub_10002418C(__p, "LeExtendStablePrivateAddressInterval");
  int v103 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, uint64_t))(*(void *)v102 + 128LL))( v102,  buf,  __p,  v5 + 206);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v103) {
      return;
    }
  }

  else if (!v103)
  {
    return;
  }

  id v104 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
  {
    int v105 = *(_DWORD *)(v5 + 206);
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v105;
    _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_DEFAULT,  "Warning: LeExtendStablePrivateAddressInterval overriden to %u",  buf,  8u);
  }

void sub_10056F358( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10056F448(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 3336LL))(v2);
  unsigned int v4 = result;
  uint64_t v5 = 0LL;
  unsigned int v6 = 0;
  char v7 = 1;
  do
  {
    if (v6 >= v4) {
      break;
    }
    char v8 = v7;
    unsigned int v9 = (unsigned __int8 *)(a1 + 12 * v5 + 17048);
    if (*(_BYTE *)(a1 + 12 * v5 + 17049))
    {
      uint64_t v10 = (os_log_s *)qword_1008F7648;
      if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *v9;
        if (*(_BYTE *)(a1 + 12 * v5 + 17050)) {
          uint64_t v12 = "Y";
        }
        else {
          uint64_t v12 = "N";
        }
        int v13 = *(_DWORD *)(a1 + 12 * v5 + 17052);
        if (*(_BYTE *)(a1 + 12 * v5 + 17056)) {
          int v14 = "Y";
        }
        else {
          int v14 = "N";
        }
        *(_DWORD *)stat buf = 67110402;
        unsigned int v17 = v6;
        __int16 v18 = 1024;
        int v19 = v11;
        __int16 v20 = 2080;
        uint64_t v21 = "Y";
        __int16 v22 = 2080;
        int v23 = v12;
        __int16 v24 = 1024;
        int v25 = v13;
        __int16 v26 = 2080;
        int v27 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Start %dth Adv Stats for instance %d enable %s reset %s period %d (secs) canWakeUpAP %s",  buf,  0x32u);
      }

      uint64_t v15 = sub_1002E6E9C();
      uint64_t result = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v15 + 1584LL))( v15,  *v9,  *(unsigned __int8 *)(a1 + 12 * v5 + 17049),  *(unsigned __int8 *)(a1 + 12 * v5 + 17050),  *(unsigned int *)(a1 + 12 * v5 + 17052),  *(unsigned __int8 *)(a1 + 12 * v5 + 17056));
      ++v6;
      *(_BYTE *)(a1 + 17072) = 1;
    }

    char v7 = 0;
    uint64_t v5 = 1LL;
  }

  while ((v8 & 1) != 0);
  return result;
}

_BYTE *sub_10056F614(uint64_t a1)
{
  char v27 = 0;
  sub_100242CA4(&v27);
  if (sub_1001BEB38())
  {
    uint64_t v2 = (_BYTE *)(a1 + 16873);
    if (*(_WORD *)(a1 + 16970)) {
      sub_10019FBE0(*(_WORD *)(a1 + 16970));
    }
    uint64_t v3 = sub_1002E6BF0();
    char v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 480LL))(v3);
    *uint64_t v2 = v4;
    if (*(_BYTE *)(a1 + 16874)) {
      char v5 = v4;
    }
    else {
      char v5 = 0;
    }
    *(_BYTE *)(a1 + 16874) = v5;
    uint64_t v6 = sub_1002E6E00();
    *(_BYTE *)(a1 + 16972) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 784LL))(v6, a1 + 16976);
    sub_10056F8E0(a1, 0);
    uint64_t v7 = sub_1002E6BF0();
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 408LL))(v7);
    *(_BYTE *)(a1 + 16944) = 0;
    if (v8) {
      unsigned int v9 = 0;
    }
    else {
      unsigned int v9 = 3;
    }
    if (sub_1001BC780( v9,  1,  (*(_DWORD *)(a1 + 136) & 0xFFFFFFFD) == 0,  (uint64_t (*)(void, void, void))sub_10056FAA8)
      && os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR))
    {
      sub_1006948E8();
    }

    *(_WORD *)(a1 + 16929) = 0;
    *(void *)(a1 + 16921) = 0LL;
    int v10 = *v2;
    int v11 = (os_log_s *)qword_1008F7648;
    BOOL v12 = os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (v12)
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Skip Reading Legacy controller LE Advertising TX Power, will wait.",  buf,  2u);
      }
    }

    else
    {
      if (v12)
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Reading Legacy controller LE Advertising TX Power",  buf,  2u);
      }

      sub_10011DFF0(v12, v13, v14, v15, v16, v17, v18, v19);
    }

    uint64_t v20 = sub_1002E8D54();
    sub_1001FC8A8(v20 + 368, a1 + 32);
    *(_BYTE *)(a1 + 16945) = 0;
    int v21 = sub_1001BE7B4((uint64_t (*)(void, void))sub_10056FB20, sub_10056FBD8);
    if (v21 && os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
      sub_100694888();
    }
    uint64_t v22 = sub_1002E6BF0();
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 936LL))(v22);
    __int16 v24 = (os_log_s *)qword_1008F7648;
    if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = "disabled";
      if ((_DWORD)v23) {
        int v25 = "enabled";
      }
      *(_DWORD *)stat buf = 136315138;
      BOOL v29 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Secondary non-connectable advertising instance is: %s",  buf,  0xCu);
    }

    sub_1001BDAB4(v23);
    if (v21) {
      sub_1001EE2A0();
    }
  }

  return sub_100242CD8(&v27);
}

void sub_10056F8BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10056F8E0(uint64_t a1, unsigned int a2)
{
  char v4 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = *(_DWORD *)(a1 + 120);
    if (v5 > 3) {
      uint64_t v6 = "UNKNOWN";
    }
    else {
      uint64_t v6 = off_1008A1D50[v5];
    }
    if (a2 > 3) {
      uint64_t v7 = "UNKNOWN";
    }
    else {
      uint64_t v7 = off_1008A1D50[a2];
    }
    int v8 = *(unsigned __int8 *)(a1 + 41);
    *(_DWORD *)BOOL v12 = 136447234;
    if (v8) {
      unsigned int v9 = "ON";
    }
    else {
      unsigned int v9 = "OFF";
    }
    *(void *)&v12[4] = v6;
    *(_WORD *)&v12[12] = 1024;
    *(_DWORD *)&v12[14] = v5;
    *(_WORD *)&_BYTE v12[18] = 2082;
    *(void *)&v12[20] = v7;
    *(_WORD *)&v12[28] = 1024;
    *(_DWORD *)&v12[30] = a2;
    *(_WORD *)&v12[34] = 2082;
    *(void *)&v12[36] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Advertising state change:  %{public}s(%d) --> %{public}s(%d) stack:%{public}s",  v12,  0x2Cu);
  }

  *(_DWORD *)(a1 + 120) = a2;
  *(CFAbsoluteTime *)(a1 + 128) = CFAbsoluteTimeGetCurrent();
  switch(*(_DWORD *)(a1 + 120))
  {
    case 0:
    case 2:
      uint64_t v10 = sub_100404EB8();
      *(void *)BOOL v12 = _NSConcreteStackBlock;
      int v11 = sub_10057A5A8;
      goto LABEL_15;
    case 1:
    case 3:
      uint64_t v10 = sub_100404EB8();
      *(void *)BOOL v12 = _NSConcreteStackBlock;
      int v11 = sub_10057A1D0;
LABEL_15:
      *(void *)&_BYTE v12[8] = 3221225472LL;
      *(void *)&uint8_t v12[16] = v11;
      *(void *)&v12[24] = &unk_10087EB68;
      *(void *)&v12[32] = a1;
      *(_DWORD *)&v12[40] = 1;
      sub_100405384(v10, v12);
      break;
    default:
      return;
  }

void sub_10056FAA8(int a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_100404FE8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10057AF4C;
  v7[3] = &unk_10088DA08;
  int v8 = a1;
  void v7[4] = a2;
  char v9 = a3;
  sub_100405384(v6, v7);
}

void sub_10056FB20(int a1, int a2)
{
  char v4 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109376;
    v5[1] = a2;
    __int16 v6 = 1024;
    int v7 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "periodicAdvStartedCb advHandle=%d, status=%d",  (uint8_t *)v5,  0xEu);
  }

void sub_10056FBD8(int a1, int a2)
{
  char v4 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109376;
    v5[1] = a2;
    __int16 v6 = 1024;
    int v7 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "periodicAdvStoppedCb advHandle=%d, status=%d",  (uint8_t *)v5,  0xEu);
  }

_BYTE *sub_10056FC90(uint64_t a1)
{
  return sub_10056F614(a1 - 8);
}

void sub_10056FC98(uint64_t a1)
{
  unsigned __int8 v1 = (_BYTE *)(a1 + 16944);
  sub_10056F8E0(a1, 0);
  *unsigned __int8 v1 = 0;
  v1[128] = 0;
}

void sub_10056FCC8(uint64_t a1)
{
  unsigned __int8 v1 = (_BYTE *)(a1 + 16936);
  sub_10056F8E0(a1 - 8, 0);
  *unsigned __int8 v1 = 0;
  v1[128] = 0;
}

void sub_10056FCFC(uint64_t a1)
{
  if (!*(void *)(a1 + 16936))
  {
    uint64_t v2 = sub_1002E91F8(0LL, 1LL, 0LL);
    *(void *)(a1 + 16936) = v2;
    if (v2)
    {
      uint64_t v3 = v2;
      char v4 = (os_log_s *)qword_1008F7668;
      if (os_log_type_enabled((os_log_t)qword_1008F7668, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v3 + 16LL))(v3);
        int v6 = 136446210;
        uint64_t v7 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Creating %{public}s", (uint8_t *)&v6, 0xCu);
      }
    }
  }

void sub_10056FDD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16936);
  if (v1)
  {
    uint64_t v3 = (os_log_s *)qword_1008F7668;
    if (!os_log_type_enabled((os_log_t)qword_1008F7668, OS_LOG_TYPE_DEFAULT)
      || (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 16LL))(v1),
          int v5 = 136446210,
          uint64_t v6 = v4,
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Destroying %{public}s",  (uint8_t *)&v5,  0xCu),  (uint64_t v1 = *(void *)(a1 + 16936)) != 0))
    {
      (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
    }

    *(void *)(a1 + 16936) = 0LL;
  }

_BYTE *sub_10056FEB0()
{
  char v1 = 0;
  sub_100242CA4(&v1);
  if (sub_1001BEB38()
    && sub_1001B9E04((uint64_t)sub_10056FF44)
    && os_log_type_enabled((os_log_t)qword_1008F76B8, OS_LOG_TYPE_ERROR))
  {
    sub_100694948();
  }

  return sub_100242CD8(&v1);
}

void sub_10056FF2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10056FF44()
{
  *(_DWORD *)&v22[3] = 0;
  *(_DWORD *)uint64_t v22 = 0;
  sub_1001BDFB4((uint64_t)v22);
  uint64_t v16 = v22[1];
  uint64_t v15 = v22[2];
  uint64_t v18 = v22[3];
  uint64_t v17 = v22[4];
  uint64_t v21 = v22[5];
  uint64_t v20 = v22[6];
  uint64_t v19 = v22[0];
  sub_1001BDF5C(1u, (uint64_t)v22);
  uint64_t v13 = v22[1];
  uint64_t v12 = v22[2];
  uint64_t v11 = v22[3];
  uint64_t v0 = v22[4];
  uint64_t v1 = v22[5];
  uint64_t v2 = v22[6];
  uint64_t v14 = v22[0];
  sub_1001BDF5C(3u, (uint64_t)v22);
  uint64_t v3 = v22[1];
  uint64_t v4 = v22[2];
  uint64_t v5 = v22[3];
  uint64_t v6 = v22[4];
  uint64_t v7 = v22[5];
  uint64_t v8 = v22[6];
  uint64_t v9 = v22[0];
  if (qword_1008D6288 != -1) {
    dispatch_once(&qword_1008D6288, &stru_1008A1CC0);
  }
  uint64_t v10 = *((void *)off_1008D6280 + 6);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  void v23[2] = sub_100570110;
  v23[3] = &unk_10087FA48;
  v23[4] = off_1008D6280;
  v23[5] = (v16 << 40) | (v15 << 32) | (v18 << 24) | (v17 << 16) | (v21 << 8) | v20 | (v19 << 48);
  void v23[6] = (v13 << 40) | (v12 << 32) | (v11 << 24) | (v0 << 16) | (v1 << 8) | v2 | (v14 << 48);
  v23[7] = (v3 << 40) | (v4 << 32) | (v5 << 24) | (v6 << 16) | (v7 << 8) | v8 | (v9 << 48);
  sub_100405384(v10, v23);
}

uint64_t sub_100570110(void *a1)
{
  uint64_t v2 = a1[4];
  v22[0] = 0LL;
  v22[1] = 0LL;
  sub_100242F28((uint64_t)v22, v2 + 56);
  if (*(_BYTE *)(v2 + 16944))
  {
    uint64_t v20 = 0LL;
    v21[0] = 0LL;
    v21[1] = 0LL;
    sub_10057D504((uint64_t *)&v20, v2 + 16824);
    uint64_t v3 = v20;
    if (v20 != v21)
    {
      do
      {
        if (*((_BYTE *)v3[6] + 307))
        {
          uint64_t v4 = (os_log_s *)qword_1008F7648;
          if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
          {
            sub_100494958((uint64_t)v3[4], (uint64_t)&__p);
            p_p = &__p;
            if (v19 < 0) {
              p_p = __p;
            }
            *(_DWORD *)stat buf = 136446210;
            __int16 v24 = p_p;
            _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Notifying session %{public}s that advertising stopped due to address change",  buf,  0xCu);
            if (SHIBYTE(v19) < 0) {
              operator delete(__p);
            }
          }

          unint64_t v6 = (unint64_t)v3[4];
          sub_100570414(v2, v6);
          std::stringbuf::string_type __p = 0LL;
          uint64_t v18 = 0LL;
          uint64_t v19 = 0LL;
          sub_10057D75C((uint64_t *)&__p, v2 + 16880);
          uint64_t v7 = (void **)__p;
          if (__p != &v18)
          {
            do
            {
              (*(void (**)(void *, unint64_t, uint64_t))(*v7[4] + 8LL))(v7[4], v6, 116LL);
              uint64_t v8 = v7[1];
              if (v8)
              {
                do
                {
                  uint64_t v9 = (void **)v8;
                  uint64_t v8 = (void *)*v8;
                }

                while (v8);
              }

              else
              {
                do
                {
                  uint64_t v9 = (void **)v7[2];
                  BOOL v10 = *v9 == v7;
                  uint64_t v7 = v9;
                }

                while (!v10);
              }

              uint64_t v7 = v9;
            }

            while (v9 != &v18);
          }

          sub_10023BF24((uint64_t)&__p, v18);
        }

        uint64_t v11 = v3[1];
        if (v11)
        {
          do
          {
            uint64_t v12 = (void **)v11;
            uint64_t v11 = (void *)*v11;
          }

          while (v11);
        }

        else
        {
          do
          {
            uint64_t v12 = (void **)v3[2];
            BOOL v10 = *v12 == v3;
            uint64_t v3 = v12;
          }

          while (!v10);
        }

        uint64_t v3 = v12;
      }

      while (v12 != v21);
    }

    sub_10057D2C4((uint64_t)&v20, v21[0]);
  }

  *(_BYTE *)(v2 + 16944) = 0;
  sub_100570714(v2, a1[5], 0);
  sub_100570714(v2, a1[6], 1u);
  uint64_t v13 = a1[7];
  if ((v13 & 0xFFFFFFFFFFFFLL) != 0) {
    sub_100570714(v2, v13, 3u);
  }
  uint64_t v14 = *(void *)(v2 + 48);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  _DWORD v16[2] = sub_1005707B8;
  v16[3] = &unk_10087EB20;
  v16[4] = v2;
  sub_100405384(v14, v16);
  return sub_100242FAC((uint64_t)v22);
}

void sub_1005703C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_100570414(uint64_t a1, unint64_t a2)
{
  uint64_t v22 = a2;
  uint64_t v3 = *(void **)(a1 + 16832);
  if (!v3) {
    goto LABEL_12;
  }
  uint64_t v5 = (uint64_t **)(a1 + 16824);
  unint64_t v6 = (uint64_t *)(a1 + 16832);
  do
  {
    unint64_t v7 = v3[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      uint64_t v9 = v3;
    }
    else {
      uint64_t v9 = v3 + 1;
    }
    if (v8) {
      unint64_t v6 = v3;
    }
    uint64_t v3 = (void *)*v9;
  }

  while (*v9);
  if (v6 != (uint64_t *)(a1 + 16832) && v6[4] <= a2)
  {
    *(void *)stat buf = &v22;
    uint64_t v12 = (uint64_t)sub_10057D7B0( (uint64_t **)(a1 + 16824),  (unint64_t *)&v22,  (uint64_t)&unk_1006C2518,  (uint64_t **)buf);
    uint64_t v13 = (uint64_t *)v12;
    uint64_t v14 = v12 + 40;
    uint64_t v15 = *(void *)(v12 + 48);
    if (*(_BYTE *)(v15 + 308))
    {
      uint64_t v16 = *(unsigned int *)(v15 + 264);
      if (*(_BYTE *)(a1 + v16 + 16921))
      {
        uint64_t v17 = sub_10019DEE0(*(_DWORD *)(v15 + 264));
        uint64_t v18 = sub_1002E6E9C();
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v18 + 2904LL))( v18,  v17,  0LL,  1LL);
        if ((v12 & 0xFFFFFFFD) != 0)
        {
          uint64_t v12 = os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v12) {
            sub_100694B10();
          }
        }

        uint64_t v15 = v13[6];
        *(_BYTE *)(a1 + *(unsigned int *)(v15 + 264) + 16921) = 0;
      }

      else
      {
        uint64_t v19 = (os_log_s *)qword_1008F7648;
        uint64_t v12 = os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v12)
        {
          *(_DWORD *)stat buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v16;
          _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "Cannot disable ObjectLocator response on handle %d",  buf,  8u);
          uint64_t v15 = v13[6];
        }
      }
    }

    if (*(_BYTE *)(v15 + 409))
    {
      if (*(_BYTE *)(a1 + *(unsigned int *)(v15 + 264) + 16926))
      {
        uint64_t v20 = sub_10019DEE0(*(_DWORD *)(v15 + 264));
        uint64_t v21 = sub_1002E6E9C();
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v21 + 1880LL))( v21,  2LL,  v20,  0LL,  0LL,  0LL);
        if ((v12 & 0xFFFFFFFD) != 0)
        {
          uint64_t v12 = os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v12) {
            sub_100694AB0();
          }
        }

        else
        {
          *(_BYTE *)(a1 + *(unsigned int *)(v13[6] + 264) + 16926) = 0;
        }
      }

      else
      {
        uint64_t v12 = os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v12) {
          sub_100694A50();
        }
      }
    }

    sub_10057496C(v12, v14, 0);
    sub_10057D878(v5, v6);
    sub_100574A40((void *)a1, v22);
    return 0LL;
  }

  else
  {
LABEL_12:
    BOOL v10 = (os_log_s *)qword_1008F7648;
    if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
      sub_1006949A8(a2, v10);
    }
    return 3LL;
  }

void sub_100570714(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *((void *)&v6 + 1) = a2;
  *(void *)&__int128 v6 = a3;
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  sub_100572084(a1 + 17024, (uint64_t)&v6);
  if (*(void *)(a1 + 17040) >= 0x33uLL) {
    sub_1005720E0((uint64_t **)(a1 + 17024));
  }
  __int128 v4 = v6;
  id v5 = v7;
  sub_100572124(a1, (uint64_t)&v4);
}

void sub_1005707A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

uint64_t sub_1005707B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D6288 != -1) {
    dispatch_once(&qword_1008D6288, &stru_1008A1CC0);
  }
  return sub_10057080C((uint64_t)off_1008D6280, *(_BYTE *)(v1 + 16945));
}

uint64_t sub_10057080C(uint64_t a1, char a2)
{
  v190[0] = 0LL;
  v190[1] = 0LL;
  sub_100242F28((uint64_t)v190, a1 + 56);
  if (*(_BYTE *)(a1 + 41))
  {
    if ((a2 & 1) == 0 && *(_BYTE *)(a1 + 16945))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEBUG)) {
        sub_100694DC4();
      }
      return sub_100242FAC((uint64_t)v190);
    }

    if ((*(_DWORD *)(a1 + 120) | 2) == 2)
    {
      __int128 v4 = (os_log_s *)qword_1008F7648;
      if (*(_BYTE *)(a1 + 16944))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)stat buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "updateAdvertisement busy with address change, will try again later",  buf,  2u);
        }

        uint64_t v5 = sub_100404EB8();
        *(void *)stat buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472LL;
        *(void *)&uint8_t buf[16] = sub_10057A1D0;
        *(void *)&uint8_t buf[24] = &unk_10087EB68;
        *(void *)&uint8_t buf[32] = a1;
        *(_DWORD *)&buf[40] = 0;
        sub_100405384(v5, buf);
        return sub_100242FAC((uint64_t)v190);
      }

      if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEBUG)) {
        sub_100694D10(a2, a1, v4);
      }
      uint64_t v8 = sub_100404EB8();
      *(void *)stat buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472LL;
      *(void *)&uint8_t buf[16] = sub_10057A5A8;
      *(void *)&uint8_t buf[24] = &unk_10087EB68;
      *(void *)&uint8_t buf[32] = a1;
      *(_DWORD *)&buf[40] = 0;
      sub_100405384(v8, buf);
      int v160 = (_BYTE *)(a1 + 16944);
      *(_BYTE *)(a1 + 16945) = 0;
      v187 = 0LL;
      v188[0] = 0LL;
      v188[1] = 0LL;
      sub_10057D504((uint64_t *)&v187, a1 + 16824);
      uint64_t v9 = v187;
      uint64_t v161 = a1;
      int v10 = 0;
      if (v187 == v188)
      {
        int v22 = 1;
      }

      else
      {
        char v11 = 0;
        while (1)
        {
          if (qword_1008D67C8 != -1) {
            dispatch_once(&qword_1008D67C8, &stru_1008A1C60);
          }
          int v12 = sub_10027D798((uint64_t)off_1008D67C0, (unint64_t)v9[4]);
          if (qword_1008D67C8 != -1) {
            dispatch_once(&qword_1008D67C8, &stru_1008A1C60);
          }
          BOOL v13 = sub_10027D914((uint64_t)off_1008D67C0, (unint64_t)v9[4]);
          _ZF = (v12 & 0x30) != 0 || v12 == 1;
          char v15 = _ZF || v13;
          if ((v15 & 1) != 0) {
            break;
          }
          uint64_t v16 = v9[6];
          BOOL v17 = *((_DWORD *)v16 + 66) == 2;
          if (*((_BYTE *)v16 + 360))
          {
            uint64_t v18 = (os_log_s *)qword_1008F7648;
            if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
            {
              sub_100494958((uint64_t)v9[4], (uint64_t)buf);
              uint64_t v19 = buf;
              if ((buf[23] & 0x80u) != 0) {
                uint64_t v19 = *(uint8_t **)buf;
              }
              LODWORD(v198) = 136446210;
              *(void *)((char *)&v198 + 4) = v19;
              _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s requires power assertion",  (uint8_t *)&v198,  0xCu);
            }

            char v11 = 1;
          }

          uint64_t v20 = v9[1];
          if (v20)
          {
            do
            {
              uint64_t v21 = (void **)v20;
              uint64_t v20 = (void *)*v20;
            }

            while (v20);
          }

          else
          {
            do
            {
              uint64_t v21 = (void **)v9[2];
              _ZF = *v21 == v9;
              uint64_t v9 = v21;
            }

            while (!_ZF);
          }

          v10 |= v17;
          uint64_t v9 = v21;
          if (v21 == v188) {
            goto LABEL_47;
          }
        }

        int v10 = 1;
LABEL_47:
        int v22 = v10 ^ 1;
        if ((v11 & 1) != 0 && (v10 & 1) != 0)
        {
          sub_10056FCFC(a1);
          goto LABEL_51;
        }
      }

      sub_10056FDD4(a1);
LABEL_51:
      if (!*(_DWORD *)(a1 + 136))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
          sub_100694BF8();
        }
        goto LABEL_257;
      }

      __int128 v198 = 0uLL;
      uint64_t v199 = 0LL;
      v184 = 0LL;
      v185 = 0LL;
      uint64_t v186 = 0LL;
      v181 = 0LL;
      v182 = 0LL;
      uint64_t v183 = 0LL;
      v178 = 0LL;
      v179 = 0LL;
      uint64_t v180 = 0LL;
      v175 = 0LL;
      v176 = 0LL;
      uint64_t v177 = 0LL;
      v173 = 0LL;
      uint64_t v174 = 0LL;
      v172 = (uint64_t *)&v173;
      else {
        unsigned int v23 = 1;
      }
      sub_1005766F0(a1, &v187, __src, v23, &v198, (uint64_t)&v184, &v181, &v178, &v175, &v172);
      int v162 = v22;
      unsigned __int8 v164 = v10;
      unsigned int v159 = v23;
      if (v23)
      {
        unint64_t v24 = 0LL;
        uint64_t v25 = 0LL;
        int v26 = 0;
        __int128 v168 = (std::stringbuf *)(a1 + 6788);
        uint64_t v166 = 3336LL * v23;
        while (1)
        {
          _X22 = &__src[v24 / 2 + 3322];
          _X26 = (char *)v168 + v24;
          BOOL v29 = (unsigned __int8 *)&__src[v24 / 2];
          __int16 v30 = (unsigned __int8 *)(a1 + v24);
          BOOL v31 = sub_10057A0D8(a1, (unsigned __int8 *)&__src[v24 / 2], (unsigned __int8 *)(a1 + v24 + 144));
          __asm
          {
            PRFM            #0, [X26]
            PRFM            #0, [X22]
          }

          BOOL v169 = v31;
          if (v31)
          {
            uint64_t v37 = (os_log_s *)qword_1008F7650;
            if (os_log_type_enabled((os_log_t)qword_1008F7650, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)stat buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v25;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "Advertising instance %d changed:",  buf,  8u);
              uint64_t v37 = (os_log_s *)qword_1008F7650;
            }

            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
            {
              _X8 = v30 + 3481;
              __asm { PRFM            #0, [X8] }

              _X8 = v29 + 3337;
              int v51 = *(unsigned __int8 *)(a1 + v24 + 145);
              __asm { PRFM            #0, [X8] }

              LODWORD(_X8) = HIBYTE(__src[v24 / 2]);
              int v53 = *(unsigned __int16 *)(a1 + v24 + 146);
              int v54 = (unsigned __int16)__src[v24 / 2 + 1];
              *(_DWORD *)stat buf = 67109888;
              *(_DWORD *)&uint8_t buf[4] = v51;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = (_DWORD)_X8;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&uint8_t buf[16] = v53;
              *(_WORD *)&_BYTE buf[20] = 1024;
              *(_DWORD *)&_BYTE buf[22] = v54;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "\ttype:%d-->%d interval:%d-->%d",  buf,  0x1Au);
              uint64_t v37 = (os_log_s *)qword_1008F7650;
            }

            int v38 = &__src[v24 / 2];
            uint64_t v39 = a1;
            unint64_t v40 = a1 + v24;
            int v41 = memcmp((char *)&__src[v24 / 2 + 2] + 1, (const void *)(a1 + v24 + 149), 0x672uLL);
            *((_BYTE *)v38 + 3319) = v41 != 0;
            int v42 = memcmp(&__src[v24 / 2 + 829], (const void *)(v40 + 1802), 0x672uLL);
            *((_BYTE *)v38 + 3320) = v42 != 0;
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)stat buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v41 != 0;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v42 != 0;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "AdvDataChanged:%d scanDataChanged:%d",  buf,  0xEu);
            }

            a1 = v39;
            if (v25 == 2)
            {
              uint64_t v43 = sub_1002E6E00();
            }

            int v44 = (os_log_s *)qword_1008F7650;
            if (os_log_type_enabled((os_log_t)qword_1008F7650, OS_LOG_TYPE_DEBUG))
            {
              _X8 = v30 + 5136;
              __asm { PRFM            #0, [X8] }

              _X8 = v29 + 4992;
              int v58 = *(unsigned __int16 *)(v39 + v24 + 1800);
              __asm { PRFM            #0, [X8] }

              LODWORD(_X8) = (unsigned __int16)__src[v24 / 2 + 828];
              *(_DWORD *)stat buf = 68158978;
              *(_DWORD *)&uint8_t buf[4] = v58;
              *(_WORD *)&uint8_t buf[8] = 2096;
              *(void *)&buf[10] = v39 + v24 + 149;
              *(_WORD *)&_BYTE buf[18] = 1024;
              *(_DWORD *)&_BYTE buf[20] = v58;
              *(_WORD *)&uint8_t buf[24] = 1040;
              *(_DWORD *)&buf[26] = (_DWORD)_X8;
              *(_WORD *)&buf[30] = 2096;
              *(void *)&uint8_t buf[32] = (char *)&__src[v24 / 2 + 2] + 1;
              *(_WORD *)&buf[40] = 1024;
              *(_DWORD *)&buf[42] = (_DWORD)_X8;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "\tAdvertising Data:%.*P(%d)-->%.*P(%d)",  buf,  0x2Eu);
              int v44 = (os_log_s *)qword_1008F7650;
            }

            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
            {
              int v60 = *(unsigned __int16 *)(v39 + v24 + 3452);
              int v61 = (unsigned __int16)__src[v24 / 2 + 1654];
              *(_DWORD *)stat buf = 68158978;
              *(_DWORD *)&uint8_t buf[4] = v60;
              *(_WORD *)&uint8_t buf[8] = 2096;
              *(void *)&buf[10] = v39 + v24 + 1802;
              *(_WORD *)&_BYTE buf[18] = 1024;
              *(_DWORD *)&_BYTE buf[20] = v60;
              *(_WORD *)&uint8_t buf[24] = 1040;
              *(_DWORD *)&buf[26] = v61;
              *(_WORD *)&buf[30] = 2096;
              *(void *)&uint8_t buf[32] = &__src[v24 / 2 + 829];
              *(_WORD *)&buf[40] = 1024;
              *(_DWORD *)&buf[42] = v61;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "\tScan Response:%.*P(%d)-->%.*P(%d)",  buf,  0x2Eu);
              int v44 = (os_log_s *)qword_1008F7650;
            }

            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
            {
              int v62 = *(unsigned __int8 *)(v39 + v24 + 3454);
              int v63 = *(unsigned __int8 *)(v39 + v24 + 3461);
              *(_DWORD *)stat buf = 68158466;
              *(_DWORD *)&uint8_t buf[4] = 6;
              *(_WORD *)&uint8_t buf[8] = 2096;
              *(void *)&buf[10] = v39 + v24 + 3455;
              *(_WORD *)&_BYTE buf[18] = 1024;
              *(_DWORD *)&_BYTE buf[20] = v62;
              *(_WORD *)&uint8_t buf[24] = 1024;
              *(_DWORD *)&buf[26] = v63;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "\tadvertising address:%.6P type:%d override:%d",  buf,  0x1Eu);
            }
          }

          unint64_t v45 = ((unint64_t)v29[3311] << 40) | ((unint64_t)v29[3312] << 32) | ((unint64_t)v29[3313] << 24) | ((unint64_t)v29[3314] << 16) | ((unint64_t)v29[3315] << 8) | v29[3316];
          unint64_t v46 = v45 | ((unint64_t)v29[3310] << 48);
          if (v45) {
            BOOL v47 = v46 == (((unint64_t)v30[3455] << 40) | ((unint64_t)v30[3456] << 32) | ((unint64_t)v30[3457] << 24) | ((unint64_t)v30[3458] << 16) | ((unint64_t)v30[3459] << 8) | v30[3460] | ((unint64_t)v30[3454] << 48));
          }
          else {
            BOOL v47 = 1;
          }
          if (!v47) {
            sub_100570714(a1, v46, v25);
          }
LABEL_79:
          v26 |= v169;
          ++v25;
          v24 += 3336LL;
          if (v166 == v24) {
            goto LABEL_82;
          }
        }
      }

      int v26 = 0;
LABEL_82:
      int v64 = (os_log_s *)qword_1008F7648;
      if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v157 = *(int *)(a1 + 120);
        else {
          int v158 = off_1008A1D50[v157];
        }
        *(_DWORD *)stat buf = 136446722;
        *(void *)&uint8_t buf[4] = v158;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v26 & 1;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&_BYTE buf[20] = v164 & 1;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEBUG,  "fAdvertisementState:%{public}s dataChanged:%d validSession:%d",  buf,  0x18u);
      }

      int v65 = *(_DWORD *)(a1 + 120);
      if (((v65 == 0) & v164) == 1)
      {
        if (v159)
        {
          uint64_t v66 = 0LL;
          while (1)
          {
            uint64_t v197 = 0LL;
            __int128 v195 = 0u;
            memset(v196, 0, sizeof(v196));
            __int128 v193 = 0u;
            __int128 v194 = 0u;
            memset(buf, 0, sizeof(buf));
            sub_1001FCFC8((uint64_t)buf);
            unint64_t v67 = (unint64_t)&__src[1668 * v66];
            unsigned int v68 = *(unsigned __int16 *)(v67 + 2);
            uint64_t v69 = v68 >= 0x4000 ? "Not " : "";
            int v70 = sub_1001FD17C(&buf[16], (uint64_t)v69, 4LL * ((v68 & 0xC000) != 0));
            int v71 = sub_1001FD17C(v70, (uint64_t)"Starting ", 9LL);
            uint64_t v72 = v66 ? "Non " : "";
            int v73 = sub_1001FD17C(v71, (uint64_t)v72, 4LL * (v66 != 0));
            __int128 v74 = sub_1001FD17C(v73, (uint64_t)"Connectable advertisement instance ", 35LL);
            int v75 = (void *)std::ostream::operator<<(v74, v66);
            sub_1001FD17C(v75, (uint64_t)" with ", 6LL);
            if (!v66) {
              break;
            }
            if ((_DWORD)v66 == 2)
            {
              if (!v174)
              {
                uint64_t v85 = "no service data, ";
                uint64_t v86 = 17LL;
                goto LABEL_191;
              }

              sub_1001FD17C(&buf[16], (uint64_t)"service Data [ ", 15LL);
              int v94 = v172;
              if (v172 != (uint64_t *)&v173)
              {
                do
                {
                  sub_1006344B4((uint64_t)(v94 + 4), &__p);
                  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    p_p = &__p;
                  }
                  else {
                    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
                  }
                  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    uint64_t size = __p.__r_.__value_.__s.__size_;
                  }
                  else {
                    uint64_t size = __p.__r_.__value_.__l.__size_;
                  }
                  int v97 = sub_1001FD17C(&buf[16], (uint64_t)p_p, size);
                  uint64_t v98 = sub_1001FD17C(v97, (uint64_t)"(", 1LL);
                  sub_10056B0A4((uint64_t)(v94 + 7), &v191);
                  if ((v191.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    int v99 = &v191;
                  }
                  else {
                    int v99 = (std::stringbuf::string_type *)v191.__r_.__value_.__r.__words[0];
                  }
                  if ((v191.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    uint64_t v100 = v191.__r_.__value_.__s.__size_;
                  }
                  else {
                    uint64_t v100 = v191.__r_.__value_.__l.__size_;
                  }
                  int v101 = sub_1001FD17C(v98, (uint64_t)v99, v100);
                  sub_1001FD17C(v101, (uint64_t)") ", 2LL);
                  uint64_t v102 = (uint64_t *)v94[1];
                  if (v102)
                  {
                    do
                    {
                      int v103 = v102;
                      uint64_t v102 = (uint64_t *)*v102;
                    }

                    while (v102);
                  }

                  else
                  {
                    do
                    {
                      int v103 = (uint64_t *)v94[2];
                      _ZF = *v103 == (void)v94;
                      int v94 = v103;
                    }

                    while (!_ZF);
                  }

                  int v94 = v103;
                }

                while (v103 != (uint64_t *)&v173);
              }

LABEL_216:
        buf[0] = 0;
        sub_100242CA4(buf);
        int v150 = sub_1001BB8A0(__src, v159, 0LL, (uint64_t (*)(void, void))sub_10057A604, 0LL);
        if (v150 == 118) {
          sub_1001BA310(1);
        }
        sub_100242CD0(buf);
        if (v150)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
            sub_100694C50();
          }
          if (v150 == 4073)
          {
            *int v160 = 1;
          }

          else if (v150 == 118)
          {
            if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
              sub_100694C24();
            }
            uint64_t v154 = *(void *)(v161 + 48);
            v170[0] = _NSConcreteStackBlock;
            v170[1] = 3221225472LL;
            v170[2] = sub_10057A664;
            v170[3] = &unk_10087EB20;
            v170[4] = v161;
            sub_100405460(v154, 200LL, v170);
          }
        }

        else
        {
          sub_10056F8E0(v161, 1u);
          if (v159) {
            memcpy((void *)(v161 + 144), __src, 3336LL * v159);
          }
        }

        goto LABEL_246;
      }

      if (v65 != 2 || ((v26 | v162) & 1) == 0)
      {
        __int128 v153 = (os_log_s *)qword_1008F7648;
        if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)stat buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v153,  OS_LOG_TYPE_INFO,  "updateAdvertisement not doing anything",  buf,  2u);
        }

        goto LABEL_247;
      }

      __int128 v151 = (os_log_s *)qword_1008F7648;
      BOOL v152 = os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_INFO);
      if ((v26 & v164 & 1) != 0)
      {
        if (v152)
        {
          *(_WORD *)stat buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v151,  OS_LOG_TYPE_INFO,  "Restarting advertisement as data has changed!",  buf,  2u);
        }
      }

      else
      {
        if (v152)
        {
          *(_WORD *)stat buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v151,  OS_LOG_TYPE_INFO,  "Stopping advertisement as there are no more advertising sessions",  buf,  2u);
        }

        if (v159) {
          bzero((void *)(a1 + 144), 3336LL * v159);
        }
      }

      buf[0] = 0;
      sub_100242CA4(buf);
      int v155 = sub_1001BA310(0);
      sub_100242CD0(buf);
      if (v155 == 4073)
      {
        *int v160 = 1;
      }

      else if (!v155)
      {
        sub_10056F8E0(a1, 3u);
LABEL_246:
        sub_100242CD8(buf);
LABEL_247:
        sub_100051CA8((uint64_t)&v172, v173);
        if (v175) {
          operator delete(v175);
        }
        if (v178)
        {
          v179 = v178;
          operator delete(v178);
        }

        if (v181)
        {
          v182 = v181;
          operator delete(v181);
        }

        if (v184)
        {
          v185 = v184;
          operator delete(v184);
        }

        if (SHIBYTE(v199) < 0) {
          operator delete((void *)v198);
        }
LABEL_257:
        sub_10057D2C4((uint64_t)&v187, v188[0]);
        return sub_100242FAC((uint64_t)v190);
      }

      if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
        sub_100694CB0();
      }
      goto LABEL_246;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEBUG)) {
      sub_100694B70();
    }
    *(_BYTE *)(a1 + 16945) = 1;
    uint64_t v7 = *(void *)(a1 + 48);
    v189[0] = _NSConcreteStackBlock;
    v189[1] = 3221225472LL;
    v189[2] = sub_10057A5F8;
    v189[3] = &unk_10087EB20;
    v189[4] = a1;
    sub_100405460(v7, 200LL, v189);
  }

  else
  {
    __int128 v6 = (os_log_s *)qword_1008F7648;
    if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Stack is not started, updateAdvertisement returning",  buf,  2u);
    }
  }

  return sub_100242FAC((uint64_t)v190);
}

void sub_100571F4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, char a42, uint64_t a43, uint64_t a44, void *__p, uint64_t a46, uint64_t a47, void *a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a48)
  {
    a49 = (uint64_t)a48;
    operator delete(a48);
  }

  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }

  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }

  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  sub_10057D2C4((uint64_t)&a57, (void *)a58);
  sub_100242FAC((uint64_t)&a65);
  _Unwind_Resume(a1);
}

id sub_100572084(uint64_t a1, uint64_t a2)
{
  __int128 v4 = operator new(0x28uLL);
  v4[1] = *(_OWORD *)a2;
  id result = *(id *)(a2 + 16);
  *((void *)v4 + 4) = result;
  __int128 v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)__int128 v4 = a1;
  *((void *)v4 + 1) = v6;
  *__int128 v6 = v4;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v7 + 1;
  return result;
}

void sub_1005720E0(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  *(void *)(v2 + 8) = (*a1)[1];
  *(void *)v1[1] = v2;
  a1[2] = (uint64_t *)((char *)a1[2] - 1);

  operator delete(v1);
}

void sub_100572124(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_opt_new(&OBJC_CLASS___NSDateFormatter);
  -[NSDateFormatter setDateFormat:](v3, "setDateFormat:", @"yyyy-MM-dd HH:mm:ss.SSS");
  __int128 v4 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)a2;
    sub_1005BFC20(*(void *)(a2 + 8), &v11);
    if ((v11.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v6 = &v11;
    }
    else {
      __int128 v6 = (std::stringbuf::string_type *)v11.__r_.__value_.__r.__words[0];
    }
    id v7 = (id)objc_claimAutoreleasedReturnValue(-[NSDateFormatter stringFromDate:](v3, "stringFromDate:", *(void *)(a2 + 16)));
    sub_100572300(*(_DWORD *)a2, __p);
    if (v10 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    *(_DWORD *)stat buf = 67109891;
    int v13 = v5;
    __int16 v14 = 2080;
    char v15 = v6;
    __int16 v16 = 2112;
    id v17 = v7;
    __int16 v18 = 2081;
    uint64_t v19 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "statedump: ADV Instance:%d address:%s time:%@ (%{private}s)",  buf,  0x26u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1005722AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *sub_100572300@<X0>(int a1@<W1>, void *a2@<X8>)
{
  return sub_10002418C(a2, off_1008A1D20[a1]);
}

_BYTE *sub_100572314(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LeBroadcaster::stackWillStop enter", buf, 2u);
  }

  char v14 = 0;
  sub_100242CA4(&v14);
  if (sub_1001BEB38())
  {
    uint64_t v3 = sub_100404EB8();
    *(void *)stat buf = _NSConcreteStackBlock;
    uint64_t v16 = 3221225472LL;
    uint64_t v17 = sub_10057A5A8;
    __int16 v18 = &unk_10087EB68;
    uint64_t v19 = a1;
    int v20 = 0;
    sub_100405384(v3, buf);
    uint64_t v4 = sub_100404EB8();
    *(void *)stat buf = _NSConcreteStackBlock;
    uint64_t v16 = 3221225472LL;
    uint64_t v17 = sub_10057A5A8;
    __int16 v18 = &unk_10087EB68;
    uint64_t v19 = a1;
    int v20 = 1;
    sub_100405384(v4, buf);
    uint64_t v5 = sub_1002E8D54();
    sub_10024E060(v5 + 368, a1 + 32);
    sub_1001BD2B0();
    sub_100242CD0(&v14);
    v13[0] = 0LL;
    v13[1] = 0LL;
    sub_100242F28((uint64_t)v13, a1 + 56);
    sub_10056F8E0(a1, 0);
    bzero((void *)(a1 + 144), 0x4128uLL);
    *(void *)stat buf = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    sub_10057D75C((uint64_t *)buf, a1 + 16880);
    *(_BYTE *)(a1 + 41) = 0;
    sub_100242F54((uint64_t)v13);
    __int128 v6 = *(uint64_t **)buf;
    if (*(uint64_t **)buf != &v16)
    {
      do
      {
        (**(void (***)(uint64_t, void))v6[4])(v6[4], 0LL);
        id v7 = (uint64_t *)v6[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            id v7 = (uint64_t *)*v7;
          }

          while (v7);
        }

        else
        {
          do
          {
            uint64_t v8 = (uint64_t *)v6[2];
            BOOL v9 = *v8 == (void)v6;
            __int128 v6 = v8;
          }

          while (!v9);
        }

        __int128 v6 = v8;
      }

      while (v8 != &v16);
    }

    sub_10056FDD4(a1);
    char v10 = (os_log_s *)qword_1008F7648;
    if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "LeBroadcaster::stackWillStop exit",  (uint8_t *)&v12,  2u);
    }

    sub_10023BF24((uint64_t)buf, (void *)v16);
    sub_100242FAC((uint64_t)v13);
  }

  return sub_100242CD8(&v14);
}

void sub_100572534( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

_BYTE *sub_100572578(uint64_t a1)
{
  return sub_100572314(a1 - 8);
}

uint64_t sub_100572580(uint64_t a1, uint64_t a2)
{
  v4[1] = 0LL;
  uint64_t v5 = a2;
  v4[0] = 0LL;
  sub_100242F28((uint64_t)v4, a1 + 56);
  sub_1002555B0((uint64_t **)(a1 + 16880), (unint64_t *)&v5, &v5);
  return sub_100242FAC((uint64_t)v4);
}

void sub_1005725D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1005725E8(uint64_t a1, unint64_t a2)
{
  v4[1] = 0LL;
  unint64_t v5 = a2;
  v4[0] = 0LL;
  sub_100242F28((uint64_t)v4, a1 + 56);
  sub_10020166C(a1 + 16880, &v5);
  return sub_100242FAC((uint64_t)v4);
}

void sub_100572638(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10057264C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  int v3 = *(unsigned __int8 *)(a1 + 16972);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      uint64_t v4 = *(__int128 **)(a1 + 16976);
      int v42 = *(__int128 **)(a1 + 16984);
      if (v4 == v42)
      {
        char v22 = 1;
        return v22 & 1;
      }

      char v5 = 0;
      while (1)
      {
        __p[1] = 0LL;
        uint64_t v48 = 0LL;
        __p[0] = 0LL;
        if (*((char *)v4 + 23) < 0)
        {
          sub_100024238(__p, *(void **)v4, *((void *)v4 + 1));
        }

        else
        {
          __int128 v6 = *v4;
          uint64_t v48 = *((void *)v4 + 2);
          *(_OWORD *)std::stringbuf::string_type __p = v6;
        }

        sub_100494958(v2, (uint64_t)&v44);
        unsigned __int8 v7 = v46;
        uint64_t v8 = v44;
        BOOL v9 = (v46 & 0x80u) == 0 ? &v44 : (void **)v44;
        char v10 = HIBYTE(v48);
        std::stringbuf::string_type v11 = v48 >= 0 ? __p : (void **)__p[0];
        __int16 v12 = v48 >= 0 ? (void *)HIBYTE(v48) : __p[1];
        if (v12) {
          break;
        }
        uint64_t v16 = 0LL;
        if ((v46 & 0x80) != 0) {
          goto LABEL_36;
        }
LABEL_37:
        BOOL v21 = v16 != -1;
        if (v10 < 0) {
          operator delete(__p[0]);
        }
        v5 |= v21;
        uint64_t v4 = (__int128 *)((char *)v4 + 24);
        if (v4 == v42)
        {
          char v22 = v5 ^ 1;
          return v22 & 1;
        }
      }

      if ((v46 & 0x80u) == 0) {
        uint64_t v13 = v46;
      }
      else {
        uint64_t v13 = v45;
      }
      char v14 = (char *)v9 + v13;
      if (v13 >= (uint64_t)v12)
      {
        unint64_t v40 = v44;
        int v17 = *(unsigned __int8 *)v11;
        __int16 v18 = v9;
        do
        {
          uint64_t v19 = v13 - (void)v12;
          if (v19 == -1) {
            break;
          }
          int v20 = (char *)memchr(v18, v17, v19 + 1);
          if (!v20) {
            break;
          }
          char v15 = v20;
          if (!memcmp(v20, v11, (size_t)v12)) {
            goto LABEL_31;
          }
          __int16 v18 = (void **)(v15 + 1);
          uint64_t v13 = v14 - (v15 + 1);
        }

        while (v13 >= (uint64_t)v12);
        char v15 = v14;
LABEL_31:
        uint64_t v8 = v40;
        uint64_t v2 = a2;
      }

      else
      {
        char v15 = (char *)v9 + v13;
      }

      if (v15 == v14) {
        uint64_t v16 = -1LL;
      }
      else {
        uint64_t v16 = v15 - (char *)v9;
      }
      if ((v7 & 0x80) == 0) {
        goto LABEL_37;
      }
LABEL_36:
      operator delete(v8);
      char v10 = HIBYTE(v48);
      goto LABEL_37;
    }

void sub_100572964( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100572984(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  v143[1] = 0LL;
  unint64_t v144 = a2;
  v143[0] = 0LL;
  sub_100242F28((uint64_t)v143, a1 + 56);
  if (sub_10057264C(a1, a2))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR))
    {
      sub_100494958(a2, (uint64_t)__p);
      sub_100694DF4();
    }

LABEL_198:
    uint64_t v91 = 0LL;
    goto LABEL_199;
  }

  unsigned __int8 v7 = *(void **)(a1 + 16832);
  if (v7)
  {
    uint64_t v8 = a1 + 16832;
    do
    {
      unint64_t v9 = v7[4];
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        std::stringbuf::string_type v11 = v7;
      }
      else {
        std::stringbuf::string_type v11 = v7 + 1;
      }
      if (v10) {
        uint64_t v8 = (uint64_t)v7;
      }
      unsigned __int8 v7 = (void *)*v11;
    }

    while (*v11);
    if (v8 != a1 + 16832 && *(void *)(v8 + 32) <= a2)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR))
      {
        sub_100494958(a2, (uint64_t)__p);
        sub_100695030();
      }

      uint64_t v91 = 122LL;
      goto LABEL_199;
    }
  }

  uint64_t v12 = *(void *)(a3 + 8);
  if (*(_DWORD *)(v12 + 264) != 2)
  {
LABEL_25:
    sub_100291924((uint64_t *)__p, (const void ***)(v12 + 416));
    uint64_t v17 = v152[0];
    sub_10023E78C((uint64_t)__p, (char *)__p[1]);
    if (!v17)
    {
      uint64_t v18 = *(void *)(a3 + 8);
      sub_10002418C(__p, "com.apple.bluetoothd");
      sub_100329294((uint64_t)&v141, (const void **)__p, 1LL);
      if ((void **)(v18 + 416) != &v141) {
        sub_1003AD494((uint64_t **)(v18 + 416), v141, &v142);
      }
      sub_10023E78C((uint64_t)&v141, v142);
      if (SHIBYTE(v152[0]) < 0) {
        operator delete(__p[0]);
      }
    }

    v138 = (uint64_t **)(a1 + 16824);
    uint64_t v157 = 0LL;
    __int128 v155 = 0u;
    memset(v156, 0, sizeof(v156));
    __int128 v153 = 0u;
    __int128 v154 = 0u;
    memset(v152, 0, sizeof(v152));
    *(_OWORD *)std::stringbuf::string_type __p = 0u;
    sub_1001FCFC8((uint64_t)__p);
    uint64_t v19 = sub_1001FD17C(v152, (uint64_t)"Received 'start advertising' request from session ", 51LL);
    sub_100494958(v144, (uint64_t)&__dst);
    if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_uuid_t dst = &__dst;
    }
    else {
      p_uuid_t dst = (std::stringbuf::string_type *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __dst.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __dst.__r_.__value_.__l.__size_;
    }
    char v22 = sub_1001FD17C(v19, (uint64_t)p_dst, size);
    sub_1001FD17C(v22, (uint64_t)", with ", 8LL);
    __int128 v24 = *(void **)(a3 + 8);
    unsigned __int8 v25 = (void *)v24[32];
    if (v25)
    {
      memset(&__dst, 0, sizeof(__dst));
      id v26 = sub_1005BFB9C((uint64_t)v25);
      id v27 = objc_claimAutoreleasedReturnValue(v26);
      sub_10002418C(&__dst, (char *)objc_msgSend(v27, "UTF8String", v138));

      char v28 = sub_1001FD17C(v152, (uint64_t)"instance #", 10LL);
      BOOL v29 = (void *)std::ostream::operator<<(v28, *(unsigned int *)(*(void *)(a3 + 8) + 264LL));
      int64_t v30 = sub_1001FD17C(v29, (uint64_t)" with override address ", 23LL);
      if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v31 = &__dst;
      }
      else {
        uint64_t v31 = (std::stringbuf::string_type *)__dst.__r_.__value_.__r.__words[0];
      }
      size_t v32 = strlen((const char *)v31);
      unsigned __int8 v25 = sub_1001FD17C(v30, (uint64_t)v31, v32);
      __int128 v24 = *(void **)(a3 + 8);
    }

    if (v24[9] != v24[8])
    {
      sub_1001FD17C(v152, (uint64_t)"advertised UUID(s) [ ", 21LL);
      uint64_t v33 = *(void *)(*(void *)(a3 + 8) + 64LL);
      if (*(void *)(*(void *)(a3 + 8) + 72LL) != v33)
      {
        uint64_t v34 = 0LL;
        unsigned int v35 = 1;
        do
        {
          sub_1006344B4(v33 + 20 * v34, &__dst);
          if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            __int16 v36 = &__dst;
          }
          else {
            __int16 v36 = (std::stringbuf::string_type *)__dst.__r_.__value_.__r.__words[0];
          }
          if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v37 = __dst.__r_.__value_.__s.__size_;
          }
          else {
            uint64_t v37 = __dst.__r_.__value_.__l.__size_;
          }
          int v38 = sub_1001FD17C(v152, (uint64_t)v36, v37);
          sub_1001FD17C(v38, (uint64_t)" ", 1LL);
          uint64_t v34 = v35;
          uint64_t v33 = *(void *)(*(void *)(a3 + 8) + 64LL);
          BOOL v39 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*(void *)(a3 + 8) + 72LL) - v33) >> 2) > v35++;
        }

        while (v39);
      }

      unsigned __int8 v25 = sub_1001FD17C(v152, (uint64_t)"], ", 3LL);
      __int128 v24 = *(void **)(a3 + 8);
    }

    if (v24[12] != v24[11])
    {
      sub_1001FD17C(v152, (uint64_t)"solicited UUID(s) [ ", 20LL);
      uint64_t v40 = *(void *)(*(void *)(a3 + 8) + 88LL);
      if (*(void *)(*(void *)(a3 + 8) + 96LL) != v40)
      {
        uint64_t v41 = 0LL;
        unsigned int v42 = 1;
        do
        {
          sub_1006344B4(v40 + 20 * v41, &__dst);
          if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v43 = &__dst;
          }
          else {
            uint64_t v43 = (std::stringbuf::string_type *)__dst.__r_.__value_.__r.__words[0];
          }
          if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v44 = __dst.__r_.__value_.__s.__size_;
          }
          else {
            uint64_t v44 = __dst.__r_.__value_.__l.__size_;
          }
          uint64_t v45 = sub_1001FD17C(v152, (uint64_t)v43, v44);
          sub_1001FD17C(v45, (uint64_t)" ", 1LL);
          uint64_t v41 = v42;
          uint64_t v40 = *(void *)(*(void *)(a3 + 8) + 88LL);
          BOOL v39 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*(void *)(a3 + 8) + 96LL) - v40) >> 2) > v42++;
        }

        while (v39);
      }

      unsigned __int8 v25 = sub_1001FD17C(v152, (uint64_t)"], ", 3LL);
      __int128 v24 = *(void **)(a3 + 8);
    }

    if (v24[16])
    {
      if (IsAppleInternalBuild(v25, v23))
      {
        sub_1001FD17C(v152, (uint64_t)"service data ", 13LL);
        uint64_t v46 = *(void *)(a3 + 8);
        BOOL v47 = *(void **)(v46 + 112);
        uint64_t v48 = (void *)(v46 + 120);
        if (v47 != (void *)(v46 + 120))
        {
          do
          {
            uint64_t v49 = sub_10056AAD8((uint64_t)(v47 + 7));
            int v50 = (unsigned __int8 *)sub_10056AAF0((uint64_t)(v47 + 7));
            int v51 = sub_1001FD17C(v152, (uint64_t)"{UUID: ", 7LL);
            sub_1006344B4((uint64_t)(v47 + 4), &__dst);
            if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              BOOL v52 = &__dst;
            }
            else {
              BOOL v52 = (std::stringbuf::string_type *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v53 = __dst.__r_.__value_.__s.__size_;
            }
            else {
              uint64_t v53 = __dst.__r_.__value_.__l.__size_;
            }
            int v54 = sub_1001FD17C(v51, (uint64_t)v52, v53);
            int v55 = sub_1001FD17C(v54, (uint64_t)", Data: [ ", 10LL);
            uint64_t v56 = *v55;
            *(_DWORD *)((char *)v55 + *(void *)(v56 - 24) + 8) |= 0x4000u;
            buf[0] = 48;
            sub_100361614(v55, buf);
            if ((char)__dst.__r_.__value_.__s.__size_ < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              if (!v49) {
                goto LABEL_83;
              }
            }

            else if (!v49)
            {
              goto LABEL_83;
            }

            do
            {
              *(void *)((char *)&v152[3] + *(void *)(v152[0] - 24LL)) = 2LL;
              unsigned int v57 = *v50++;
              int v58 = (void *)std::ostream::operator<<(v152, v57);
              sub_1001FD17C(v58, (uint64_t)" ", 1LL);
              --v49;
            }

            while (v49);
LABEL_83:
            sub_1001FD17C(v152, (uint64_t)"]}, ", 4LL);
            __int16 v59 = (void *)v47[1];
            if (v59)
            {
              do
              {
                int v60 = v59;
                __int16 v59 = (void *)*v59;
              }

              while (v59);
            }

            else
            {
              do
              {
                int v60 = (void *)v47[2];
                BOOL v16 = *v60 == (void)v47;
                BOOL v47 = v60;
              }

              while (!v16);
            }

            BOOL v47 = v60;
          }

          while (v60 != v48);
        }
      }
    }

    if (sub_10056AAD8(*(void *)(a3 + 8) + 48LL))
    {
      uint64_t v61 = sub_10056AAD8(*(void *)(a3 + 8) + 48LL);
      int v62 = (unsigned __int8 *)sub_10056AAF0(*(void *)(a3 + 8) + 48LL);
      int v63 = sub_1001FD17C(v152, (uint64_t)"manufacturer data [ ", 20LL);
      uint64_t v64 = *v63;
      *(_DWORD *)((char *)v63 + *(void *)(*v63 - 24) + 8) = *(_DWORD *)((_BYTE *)v63 + *(void *)(*v63 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v63 + *(void *)(v64 - 24) + 8) |= 0x4000u;
      __dst.__r_.__value_.__s.__data_[0] = 48;
      sub_100361614(v63, (unsigned __int8 *)&__dst);
      for (; v61; --v61)
      {
        *(void *)((char *)&v152[3] + *(void *)(v152[0] - 24LL)) = 2LL;
        unsigned int v65 = *v62++;
        uint64_t v66 = (void *)std::ostream::operator<<(v152, v65);
        sub_1001FD17C(v66, (uint64_t)" ", 1LL);
      }

      sub_1001FD17C(v152, (uint64_t)"], ", 3LL);
    }

    if (sub_10056AAD8(*(void *)(a3 + 8) + 136LL))
    {
      uint64_t v67 = sub_10056AAD8(*(void *)(a3 + 8) + 136LL);
      unsigned int v68 = (unsigned __int8 *)sub_10056AAF0(*(void *)(a3 + 8) + 136LL);
      uint64_t v69 = sub_1001FD17C(v152, (uint64_t)"le bt addr [ ", 13LL);
      uint64_t v70 = *v69;
      *(_DWORD *)((char *)v69 + *(void *)(*v69 - 24) + 8) = *(_DWORD *)((_BYTE *)v69 + *(void *)(*v69 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v69 + *(void *)(v70 - 24) + 8) |= 0x4000u;
      __dst.__r_.__value_.__s.__data_[0] = 48;
      sub_100361614(v69, (unsigned __int8 *)&__dst);
      for (; v67; --v67)
      {
        *(void *)((char *)&v152[3] + *(void *)(v152[0] - 24LL)) = 2LL;
        unsigned int v71 = *v68++;
        uint64_t v72 = (void *)std::ostream::operator<<(v152, v71);
        sub_1001FD17C(v72, (uint64_t)" ", 1LL);
      }

      sub_1001FD17C(v152, (uint64_t)"], ", 3LL);
    }

    if (sub_10056AAD8(*(void *)(a3 + 8) + 152LL))
    {
      uint64_t v73 = sub_10056AAD8(*(void *)(a3 + 8) + 152LL);
      __int128 v74 = (unsigned __int8 *)sub_10056AAF0(*(void *)(a3 + 8) + 152LL);
      int v75 = sub_1001FD17C(v152, (uint64_t)"non-apple manufacturer data [ ", 30LL);
      uint64_t v76 = *v75;
      *(_DWORD *)((char *)v75 + *(void *)(*v75 - 24) + 8) = *(_DWORD *)((_BYTE *)v75 + *(void *)(*v75 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v75 + *(void *)(v76 - 24) + 8) |= 0x4000u;
      __dst.__r_.__value_.__s.__data_[0] = 48;
      sub_100361614(v75, (unsigned __int8 *)&__dst);
      for (; v73; --v73)
      {
        *(void *)((char *)&v152[3] + *(void *)(v152[0] - 24LL)) = 2LL;
        unsigned int v77 = *v74++;
        uint64_t v78 = (void *)std::ostream::operator<<(v152, v77);
        sub_1001FD17C(v78, (uint64_t)" ", 1LL);
      }

      sub_1001FD17C(v152, (uint64_t)"], ", 3LL);
    }

    if (sub_10056AAD8(*(void *)(a3 + 8) + 224LL))
    {
      uint64_t v79 = sub_10056AAD8(*(void *)(a3 + 8) + 224LL);
      unsigned int v80 = (unsigned __int8 *)sub_10056AAF0(*(void *)(a3 + 8) + 224LL);
      char v81 = sub_1001FD17C(v152, (uint64_t)"tds data [ ", 11LL);
      uint64_t v82 = *v81;
      *(_DWORD *)((char *)v81 + *(void *)(*v81 - 24) + 8) = *(_DWORD *)((_BYTE *)v81 + *(void *)(*v81 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v81 + *(void *)(v82 - 24) + 8) |= 0x4000u;
      __dst.__r_.__value_.__s.__data_[0] = 48;
      sub_100361614(v81, (unsigned __int8 *)&__dst);
      for (; v79; --v79)
      {
        *(void *)((char *)&v152[3] + *(void *)(v152[0] - 24LL)) = 2LL;
        unsigned int v83 = *v80++;
        BOOL v84 = (void *)std::ostream::operator<<(v152, v83);
        sub_1001FD17C(v84, (uint64_t)" ", 1LL);
      }

      sub_1001FD17C(v152, (uint64_t)"], ", 3LL);
    }

    uint64_t v85 = sub_1001FD17C(v152, (uint64_t)"interval ", 9LL);
    uint64_t v86 = (void *)std::ostream::operator<<(v85, *(unsigned __int16 *)(*(void *)(a3 + 8) + 222LL));
    sub_1001FD17C(v86, (uint64_t)", ", 2LL);
    uint64_t v87 = *(void *)(a3 + 8);
    else {
      std::stringbuf::string_type __dst = *(std::stringbuf::string_type *)(v87 + 16);
    }
    if ((char)__dst.__r_.__value_.__s.__size_ < 0)
    {
      std::string::size_type v90 = __dst.__r_.__value_.__l.__size_;
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (v90)
      {
LABEL_113:
        uint64_t v88 = sub_1001FD17C(v152, (uint64_t)"name ", 6LL);
        uint64_t v89 = *(void *)(a3 + 8);
        else {
          std::stringbuf::string_type __dst = *(std::stringbuf::string_type *)(v89 + 16);
        }
        if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v92 = &__dst;
        }
        else {
          int v92 = (std::stringbuf::string_type *)__dst.__r_.__value_.__r.__words[0];
        }
        if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v93 = __dst.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t v93 = __dst.__r_.__value_.__l.__size_;
        }
        int v94 = sub_1001FD17C(v88, (uint64_t)v92, v93);
        sub_1001FD17C(v94, (uint64_t)"", 1LL);
        goto LABEL_129;
      }
    }

    else if (__dst.__r_.__value_.__s.__size_)
    {
      goto LABEL_113;
    }

    sub_1001FD17C(v152, (uint64_t)"no name", 7LL);
LABEL_129:
    uint64_t v95 = *(void *)(a3 + 8);
    if (*(_BYTE *)(v95 + 308))
    {
      sub_1001FD17C(v152, (uint64_t)" ObjectLocatorRspOnAdvHandle", 28LL);
      uint64_t v95 = *(void *)(a3 + 8);
    }

    if (*(_BYTE *)(v95 + 360))
    {
      sub_1001FD17C(v152, (uint64_t)" HoldADVPowerAssert", 19LL);
      uint64_t v95 = *(void *)(a3 + 8);
    }

    if (*(_DWORD *)(v95 + 440))
    {
      int v96 = sub_1001FD17C(v152, (uint64_t)" UseCase:", 9LL);
      int v97 = sub_100573E08(*(_DWORD *)(*(void *)(a3 + 8) + 440LL));
      size_t v98 = strlen(v97);
      sub_1001FD17C(v96, (uint64_t)v97, v98);
      if (qword_1008D6198 != -1) {
        dispatch_once(&qword_1008D6198, &stru_1008A1CA0);
      }
      sub_10044D668((uint64_t)off_1008D6190, *(_DWORD *)(*(void *)(a3 + 8) + 440LL));
    }

    int v99 = (os_log_s *)qword_1008F7648;
    if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str(&__dst, (const std::stringbuf *)&v152[1]);
      uint64_t v100 = (__dst.__r_.__value_.__s.__size_ & 0x80u) == 0
           ? &__dst
           : (std::stringbuf::string_type *)__dst.__r_.__value_.__r.__words[0];
      *(_DWORD *)stat buf = 136446210;
      *(void *)&uint8_t buf[4] = v100;
      _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    }

    if (*(_BYTE *)(a1 + 17084))
    {
      int v101 = (os_log_s *)qword_1008F7648;
      if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR))
      {
        uint64_t v111 = v144;
        sub_100494958(v144, (uint64_t)buf);
        int v112 = v159;
        uint64_t v113 = *(_BYTE **)buf;
        id v114 = v145;
        sub_100494E68(v111, v145);
        if (v112 >= 0) {
          uint64_t v115 = buf;
        }
        else {
          uint64_t v115 = v113;
        }
        if (v148 < 0) {
          id v114 = *(_BYTE **)v145;
        }
        unsigned int v116 = sub_100573E08(*(_DWORD *)(*(void *)(a3 + 8) + 440LL));
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136446722;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v115;
        WORD2(__dst.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v114;
        HIWORD(__dst.__r_.__value_.__r.__words[2]) = 2082;
        int v150 = v116;
        _os_log_error_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_ERROR,  "WILLSLEEP violation! Session %{public}s(%{public}s) %{public}s asking to start advertising",  (uint8_t *)&__dst,  0x20u);
        if (v148 < 0) {
          operator delete(*(void **)v145);
        }
        if (v159 < 0) {
          operator delete(*(void **)buf);
        }
      }
    }

    uint64_t v102 = *(void *)(a3 + 8);
    if (*(_BYTE *)(v102 + 308))
    {
      uint64_t v103 = *(unsigned int *)(v102 + 264);
      if (*(_BYTE *)(a1 + v103 + 16921))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
          sub_100694FD0();
        }
      }

      else
      {
        if ((byte_1008F1CE2 & 1) == 0)
        {
          uint64_t v104 = sub_1002E6E00();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v104 + 792LL))(v104))
          {
            uint64_t v105 = sub_1002E6E00();
            uint64_t v106 = (*(uint64_t (**)(uint64_t))(*(void *)v105 + 800LL))(v105);
            uint64_t v107 = sub_1002E6E9C();
            int v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v107 + 2928LL))(v107, v106, 1LL);
            v109 = (os_log_s *)qword_1008F7648;
            if ((v108 & 0xFFFFFFFD) != 0)
            {
              if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
                sub_100694F70();
              }
            }

            else if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_INFO))
            {
              LODWORD(__dst.__r_.__value_.__l.__data_) = 67109120;
              HIDWORD(__dst.__r_.__value_.__r.__words[0]) = v106;
              _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_INFO,  "SPMI Debug Control set to %d",  (uint8_t *)&__dst,  8u);
            }
          }

          byte_1008F1CE2 = 1;
          LODWORD(v103) = *(_DWORD *)(*(void *)(a3 + 8) + 264LL);
        }

        uint64_t v117 = sub_10019DEE0(v103);
        uint64_t v118 = sub_1002E6E9C();
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v118 + 2904LL))( v118,  v117,  1LL,  1LL) & 0xFFFFFFFD) != 0)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
            sub_100694F10();
          }
        }

        else
        {
          *(_BYTE *)(a1 + *(unsigned int *)(*(void *)(a3 + 8) + 264LL) + 16921) = 1;
        }
      }
    }

    uint64_t v119 = *(void *)(a3 + 8);
    if (*(_BYTE *)(v119 + 409))
    {
      uint64_t v120 = *(unsigned int *)(v119 + 264);
      if (*(_BYTE *)(a1 + v120 + 16926))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
          sub_100694EB0();
        }
      }

      else
      {
        uint64_t v121 = sub_10019DEE0(v120);
        uint64_t v122 = sub_1002E6E9C();
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, void))(*(void *)v122 + 1880LL))( v122,  2LL,  v121,  0LL,  1LL,  0LL) & 0xFFFFFFFD) != 0)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
            sub_100694E50();
          }
        }

        else
        {
          *(_BYTE *)(a1 + *(unsigned int *)(*(void *)(a3 + 8) + 264LL) + 16926) = 1;
        }
      }
    }

    uint64_t v123 = *(void *)(a3 + 8);
    *(_BYTE *)(v123 + 408) = a4;
    *(void *)(v123 + 400) = sub_1000B068C();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
    unsigned int v124 = sub_10057D7B0(v138, &v144, (uint64_t)&unk_1006C2518, (uint64_t **)&__dst);
    sub_10002EAC8((uint64_t)(v124 + 5), a3);
    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_1008A1C60);
    }
    uint64_t v125 = sub_100279D80((uint64_t)off_1008D67C0, v144);
    if ((_DWORD)v125)
    {
      if (qword_1008D67C8 != -1) {
        dispatch_once(&qword_1008D67C8, &stru_1008A1C60);
      }
      uint64_t v125 = sub_10027D798((uint64_t)off_1008D67C0, v144);
      int v126 = v125;
      if ((_DWORD)v125 == 8 || (_DWORD)v125 == 4) {
        uint64_t v125 = sub_100574534(a1, v144);
      }
      uint64_t v127 = *(void *)(a3 + 8);
      *(_BYTE *)(v127 + 336) |= v126 == 16;
      *(_BYTE *)(v127 + 337) = v126 == 16;
    }

    sub_10057496C(v125, a3, 1);
    int v128 = *(unsigned __int8 *)(a1 + 41);
    v129 = (os_log_s *)qword_1008F7648;
    BOOL v130 = os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT);
    if (v128)
    {
      if (v130)
      {
        LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v129,  OS_LOG_TYPE_DEFAULT,  "Calling updateAdvertisement",  (uint8_t *)&__dst,  2u);
      }

      uint64_t v131 = *(void *)(a1 + 48);
      v140[0] = _NSConcreteStackBlock;
      v140[1] = 3221225472LL;
      v140[2] = sub_100574A34;
      v140[3] = &unk_10087EB20;
      v140[4] = a1;
      sub_100405384(v131, v140);
    }

    else if (v130)
    {
      LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v129,  OS_LOG_TYPE_DEFAULT,  "Stack is not ready, waiting for the stack to start",  (uint8_t *)&__dst,  2u);
    }

    *(void **)((char *)__p
    v152[0] = v132;
    if (SHIBYTE(v154) < 0) {
      operator delete(*((void **)&v153 + 1));
    }
    std::streambuf::~streambuf(&v152[1]);
    std::ios::~ios(v156);
    goto LABEL_198;
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  v152[0] = 0LL;
  sub_10057D504((uint64_t *)__p, a1 + 16824);
  uint64_t v13 = (void **)__p[0];
  if (__p[0] == &__p[1])
  {
LABEL_24:
    sub_10057D2C4((uint64_t)__p, (void *)__p[1]);
    uint64_t v12 = *(void *)(a3 + 8);
    goto LABEL_25;
  }

  while (*((_DWORD *)v13[6] + 66) != 2)
  {
    char v14 = (void **)v13[1];
    if (v14)
    {
      do
      {
        char v15 = v14;
        char v14 = (void **)*v14;
      }

      while (v14);
    }

    else
    {
      do
      {
        char v15 = (void **)v13[2];
        BOOL v16 = *v15 == v13;
        uint64_t v13 = v15;
      }

      while (!v16);
    }

    uint64_t v13 = v15;
    if (v15 == &__p[1]) {
      goto LABEL_24;
    }
  }

  uint64_t v110 = (os_log_s *)qword_1008F76B8;
  if (os_log_type_enabled((os_log_t)qword_1008F76B8, OS_LOG_TYPE_ERROR))
  {
    sub_100494958(a2, (uint64_t)&__dst);
    int v134 = (char)__dst.__r_.__value_.__s.__size_;
    std::string::size_type v135 = __dst.__r_.__value_.__r.__words[0];
    sub_100494958((uint64_t)v13[4], (uint64_t)buf);
    id v136 = &__dst;
    if (v134 < 0) {
      id v136 = (std::stringbuf::string_type *)v135;
    }
    if (v159 >= 0) {
      id v137 = buf;
    }
    else {
      id v137 = *(_BYTE **)buf;
    }
    *(_DWORD *)uint64_t v145 = 136446466;
    *(void *)&v145[4] = v136;
    __int16 v146 = 2082;
    __int128 v147 = v137;
    _os_log_error_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_ERROR,  "session %{public}s cannot use the exposure notification instance since its already being used by %{public}s",  v145,  0x16u);
    if (v159 < 0) {
      operator delete(*(void **)buf);
    }
  }

  sub_10057D2C4((uint64_t)__p, (void *)__p[1]);
  uint64_t v91 = 4LL;
LABEL_199:
  sub_100242FAC((uint64_t)v143);
  return v91;
}

void sub_100573C98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39)
{
}

const char *sub_100573E08(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }

        else
        {
          switch(a1)
          {
            case 2147418112:
              id result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              id result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              id result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              id result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              id result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              id result = "InternalTestActiveScan";
              break;
            case 2147418118:
              id result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              id result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              id result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }

      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            id result = "ADPD";
            break;
          case 524289:
            id result = "ADPDBuffer";
            break;
          case 524290:
            id result = "MicroLocation";
            break;
          case 524291:
            id result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              id result = "PrecisionFindingFindee";
            }

            else
            {
              if (a1 != 589824) {
                return "?";
              }
              id result = "FindNearbyRemote";
            }

            break;
        }
      }

      else
      {
        switch(a1)
        {
          case 393216:
            id result = "CaptiveNetworkJoin";
            break;
          case 393217:
            id result = "UseCaseSIMTransfer";
            break;
          case 393218:
            id result = "MacSetup";
            break;
          case 393219:
            id result = "AppleIDSignIn";
            break;
          case 393220:
            id result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              id result = "RapportThirdParty";
            }

            else
            {
              if (a1 != 458752) {
                return "?";
              }
              id result = "PrecisionFindingFinder";
            }

            break;
        }
      }
    }

    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            id result = "DigitalIDTSA";
          }

          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            id result = "DigitalCarKeyThirdParty";
          }

          break;
      }
    }
  }

  else
  {
    id result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        id result = "HealthKit";
        break;
      case 2:
        id result = "HomeKit";
        break;
      case 3:
        id result = "FindMyObjectConnection";
        break;
      case 4:
        id result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        id result = "MIDI";
        break;
      case 6:
        id result = "Continuity";
        break;
      case 7:
        id result = "InstantHotSpot";
        break;
      case 8:
        id result = "NearBy";
        break;
      case 9:
        id result = "Sharing";
        break;
      case 10:
        id result = "HearingSupport";
        break;
      case 11:
        id result = "Magnet";
        break;
      case 12:
        id result = "HID";
        break;
      case 13:
        id result = "LEA";
        break;
      case 14:
        id result = "External";
        break;
      case 15:
        id result = "ExternalMedical";
        break;
      case 16:
        id result = "ExternalLock";
        break;
      case 17:
        id result = "ExternalWatch";
        break;
      case 18:
        id result = "SmartRouting";
        break;
      case 19:
        id result = "DigitalID";
        break;
      case 20:
        id result = "DigitalKey";
        break;
      case 21:
        id result = "DigitalCarKey";
        break;
      case 22:
        id result = "HeySiri";
        break;
      case 23:
        id result = "ThirdPartyApp";
        break;
      case 24:
        id result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            id result = "DevicePresenceDetection";
            break;
          case 257:
            id result = "AudioBox";
            break;
          case 258:
            id result = "SIMTransfer";
            break;
          case 259:
            id result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            id result = "MacMigrate";
            break;
          case 263:
            id result = "HIDUARTService";
            break;
          case 264:
            id result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            id result = "BaseBandFastConnect";
            break;
          case 266:
            id result = "SafetyAlerts";
            break;
          case 267:
            id result = "LECarPlay";
            break;
          case 268:
            id result = "TCCBluetooth";
            break;
          case 269:
            id result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }

        break;
    }
  }

  return result;
}

uint64_t sub_100574534(uint64_t a1, uint64_t a2)
{
  v34[0] = 0LL;
  v34[1] = 0LL;
  sub_100242F28((uint64_t)v34, a1 + 56);
  uint64_t v4 = a1 + 16848;
  for (uint64_t i = *(void *)(a1 + 16856); i != v4; uint64_t i = *(void *)(i + 8))
  {
    if (*(void *)(i + 16) == a2) {
      return sub_100242FAC((uint64_t)v34);
    }
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7650, OS_LOG_TYPE_DEBUG))
  {
    sub_100494958(a2, (uint64_t)v33);
    sub_1006950AC();
  }

  __int128 v6 = operator new(0x18uLL);
  unsigned __int8 v7 = *(void **)(a1 + 16856);
  *__int128 v6 = v4;
  v6[1] = v7;
  _DWORD v6[2] = a2;
  *unsigned __int8 v7 = v6;
  *(void *)(a1 + 16856) = v6;
  ++*(void *)(a1 + 16864);
  uint64_t v31 = 0LL;
  v32[0] = 0LL;
  v32[1] = 0LL;
  sub_10057D504((uint64_t *)&v31, a1 + 16824);
  uint64_t v8 = v31;
  if (v31 != v32)
  {
    do
    {
      if (v8[4] == (void *)a2)
      {
        v8[6][40] = sub_1000B068C();
        uint64_t v9 = 60 * (arc4random() % 0x3C);
        if (*(_BYTE *)(a1 + 16920)) {
          uint64_t v9 = 0LL;
        }
        unint64_t v10 = 1000 * (v9 + *(void *)(a1 + 16912));
        std::stringbuf::string_type v11 = (os_log_s *)qword_1008F7648;
        if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
        {
          sub_100494958(a2, (uint64_t)__p);
          uint64_t v12 = __p;
          if (v30 < 0) {
            uint64_t v12 = (void **)__p[0];
          }
          *(_DWORD *)stat buf = 136446466;
          __int16 v36 = v12;
          __int16 v37 = 2048;
          unint64_t v38 = v10 / 0x3E8;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s can advertise in background for %llu seconds",  buf,  0x16u);
          if (v30 < 0) {
            operator delete(__p[0]);
          }
        }

        v8[6][41] = v10;
      }

      uint64_t v13 = v8[1];
      if (v13)
      {
        do
        {
          char v14 = (void **)v13;
          uint64_t v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          char v14 = (void **)v8[2];
          BOOL v15 = *v14 == v8;
          uint64_t v8 = v14;
        }

        while (!v15);
      }

      uint64_t v8 = v14;
    }

    while (v14 != v32);
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7650, OS_LOG_TYPE_DEBUG)) {
    sub_10069507C();
  }
  uint64_t v16 = *(void *)(a1 + 16856);
  if (v16 != v4)
  {
    uint64_t v17 = (void *)(a1 + 16832);
    do
    {
      uint64_t v18 = (void *)*v17;
      if (!*v17) {
        goto LABEL_38;
      }
      unint64_t v19 = *(void *)(v16 + 16);
      int v20 = (void *)(a1 + 16832);
      do
      {
        unint64_t v21 = v18[4];
        BOOL v22 = v21 >= v19;
        if (v21 >= v19) {
          uint64_t v23 = v18;
        }
        else {
          uint64_t v23 = v18 + 1;
        }
        if (v22) {
          int v20 = v18;
        }
        uint64_t v18 = (void *)*v23;
      }

      while (*v23);
      if (v20 == v17 || v19 < v20[4]) {
LABEL_38:
      }
        int v20 = (void *)(a1 + 16832);
      __int128 v24 = (os_log_s *)qword_1008F7650;
      if (os_log_type_enabled((os_log_t)qword_1008F7650, OS_LOG_TYPE_DEBUG))
      {
        sub_100494958(v20[4], (uint64_t)__p);
        if (v30 >= 0) {
          unsigned __int8 v25 = __p;
        }
        else {
          unsigned __int8 v25 = (void **)__p[0];
        }
        *(_DWORD *)stat buf = 136446210;
        __int16 v36 = v25;
        _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "   %{public}s", buf, 0xCu);
        if (v30 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v16 = *(void *)(v16 + 8);
    }

    while (v16 != v4);
  }

  uint64_t v26 = *(void *)(a1 + 48);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472LL;
  void v28[2] = sub_10057A670;
  v28[3] = &unk_10087EB20;
  v28[4] = a1;
  sub_100405384(v26, v28);
  sub_10057D2C4((uint64_t)&v31, v32[0]);
  return sub_100242FAC((uint64_t)v34);
}

void sub_100574924( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_10057496C(uint64_t a1, uint64_t a2, char a3)
{
  char v5 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEBUG)) {
    sub_100695154(a3, v5);
  }
  unint64_t v6 = sub_10056AAD8(*(void *)(a2 + 8) + 48LL);
  uint64_t v7 = sub_10056AAF0(*(void *)(a2 + 8) + 48LL);
  if (v6 >= 3
    && sub_1001BA580(v7 + 2, v6 - 2, (uint64_t (*)(void))sub_10057664C)
    && os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR))
  {
    sub_1006950F4();
  }

uint64_t sub_100574A34(uint64_t a1)
{
  return sub_10057080C(*(void *)(a1 + 32), 0);
}

uint64_t sub_100574A40(void *a1, uint64_t a2)
{
  v32[0] = 0LL;
  v32[1] = 0LL;
  sub_100242F28((uint64_t)v32, (uint64_t)(a1 + 7));
  char v30 = 0LL;
  v31[0] = 0LL;
  v31[1] = 0LL;
  sub_10057D504((uint64_t *)&v30, (uint64_t)(a1 + 2103));
  uint64_t v4 = v30;
  if (v30 != v31)
  {
    do
    {
      if (v4[4] == (void *)a2) {
        v4[6][40] = 0LL;
      }
      char v5 = v4[1];
      if (v5)
      {
        do
        {
          unint64_t v6 = (void **)v5;
          char v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          unint64_t v6 = (void **)v4[2];
          BOOL v7 = *v6 == v4;
          uint64_t v4 = v6;
        }

        while (!v7);
      }

      uint64_t v4 = v6;
    }

    while (v6 != v31);
  }

  uint64_t v8 = a1 + 2106;
  for (uint64_t i = (uint64_t *)a1[2107]; i != v8; uint64_t i = (uint64_t *)i[1])
  {
    if (i[2] == a2)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7650, OS_LOG_TYPE_DEBUG))
      {
        sub_100494958(a2, (uint64_t)v29);
        sub_1006951C8();
      }

      uint64_t v10 = *i;
      *(void *)(v10 + 8) = i[1];
      *(void *)i[1] = v10;
      --a1[2108];
      operator delete(i);
      std::stringbuf::string_type v11 = v30;
      if (v30 != v31)
      {
        do
        {
          if (v11[4] == (void *)a2) {
            v11[6][40] = 0LL;
          }
          uint64_t v12 = v11[1];
          if (v12)
          {
            do
            {
              uint64_t v13 = (void **)v12;
              uint64_t v12 = (void *)*v12;
            }

            while (v12);
          }

          else
          {
            do
            {
              uint64_t v13 = (void **)v11[2];
              BOOL v7 = *v13 == v11;
              std::stringbuf::string_type v11 = v13;
            }

            while (!v7);
          }

          std::stringbuf::string_type v11 = v13;
        }

        while (v13 != v31);
      }

      break;
    }
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7650, OS_LOG_TYPE_DEBUG)) {
    sub_10069507C();
  }
  char v14 = (uint64_t *)a1[2107];
  if (v14 != v8)
  {
    BOOL v15 = a1 + 2104;
    do
    {
      uint64_t v16 = (void *)*v15;
      if (!*v15) {
        goto LABEL_40;
      }
      unint64_t v17 = v14[2];
      uint64_t v18 = a1 + 2104;
      do
      {
        unint64_t v19 = v16[4];
        BOOL v20 = v19 >= v17;
        if (v19 >= v17) {
          unint64_t v21 = v16;
        }
        else {
          unint64_t v21 = v16 + 1;
        }
        if (v20) {
          uint64_t v18 = v16;
        }
        uint64_t v16 = (void *)*v21;
      }

      while (*v21);
      if (v18 == v15 || v17 < v18[4]) {
LABEL_40:
      }
        uint64_t v18 = a1 + 2104;
      BOOL v22 = (os_log_s *)qword_1008F7650;
      if (os_log_type_enabled((os_log_t)qword_1008F7650, OS_LOG_TYPE_DEBUG))
      {
        sub_100494958(v18[4], (uint64_t)__p);
        if (v28 >= 0) {
          uint64_t v23 = __p;
        }
        else {
          uint64_t v23 = (void **)__p[0];
        }
        *(_DWORD *)stat buf = 136446210;
        uint64_t v34 = v23;
        _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "   %{public}s", buf, 0xCu);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
      }

      char v14 = (uint64_t *)v14[1];
    }

    while (v14 != v8);
  }

  uint64_t v24 = a1[6];
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  void v26[2] = sub_10057A67C;
  uint64_t v26[3] = &unk_10087EB20;
  uint8_t v26[4] = a1;
  sub_100405384(v24, v26);
  sub_10057D2C4((uint64_t)&v30, v31[0]);
  return sub_100242FAC((uint64_t)v32);
}

void sub_100574D78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15 = va_arg(va1, void);
  unint64_t v17 = va_arg(va1, void *);
  uint64_t v18 = va_arg(va1, void);
  sub_10057D2C4((uint64_t)va, v17);
  sub_100242FAC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100574DB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100404FE8();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_100574E60;
  v6[3] = &unk_1008A1BB8;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100405384(v4, v6);
}

void sub_100574E40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100574E60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100574EA4(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100574F4C;
  v5[3] = &unk_1008A1BE0;
  id v4 = v2;
  id v6 = v4;
  sub_100405384(v3, v5);
}

void sub_100574F2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100574F4C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithCapacity:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithCapacity:",  7LL));
  unsigned int v15 = 0;
  else {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", v15));
  }
  __int16 v14 = 0;
  unsigned __int8 v13 = 0;
  unsigned __int16 v12 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  sub_1001BE538((_BYTE *)&v14 + 1, &v14, &v13, &v12, &v11, &v10);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", HIBYTE(v14)));
  [v2 setObject:v4 forKeyedSubscript:@"kCBMsgArgHoldStableAddressState"];

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v14));
  [v2 setObject:v5 forKeyedSubscript:@"kCBMsgArgOverrideLocalAddressState"];

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v13));
  [v2 setObject:v6 forKeyedSubscript:@"kCBMsgArgPrivateModeState"];

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v12));
  [v2 setObject:v7 forKeyedSubscript:@"kCBMsgArgHoldStableAddressCount"];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v11));
  [v2 setObject:v8 forKeyedSubscript:@"kCBMsgArgLePrivateAddressTimer"];

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v10));
  [v2 setObject:v9 forKeyedSubscript:@"kCBMsgArgLeHoldStablePrivateAddressTimer"];

  [v2 setObject:v3 forKeyedSubscript:@"kCBMsgArgTimeoutInMS"];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100575144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100575180(uint64_t a1, unint64_t a2)
{
  v23[1] = 0LL;
  unint64_t v24 = a2;
  v23[0] = 0LL;
  sub_100242F28((uint64_t)v23, a1 + 56);
  id v4 = *(void **)(a1 + 16832);
  if (!v4) {
    goto LABEL_42;
  }
  uint64_t v5 = a1 + 16832;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = v4;
    }
    else {
      uint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    id v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 != a1 + 16832 && *(void *)(v5 + 32) <= a2)
  {
    unsigned int v11 = (os_log_s *)qword_1008F7648;
    if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
    {
      sub_100494958(a2, (uint64_t)__p);
      unsigned __int16 v12 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)stat buf = 136446210;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Received 'stop advertising' request from session %{public}s",  buf,  0xCu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    if (*(_BYTE *)(a1 + 17084))
    {
      unsigned __int8 v13 = (os_log_s *)qword_1008F7648;
      if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR))
      {
        sub_100494958(a2, (uint64_t)__p);
        int v16 = v22;
        unint64_t v17 = (void **)__p[0];
        sub_100494E68(a2, buf);
        uint64_t v18 = __p;
        if (v16 < 0) {
          uint64_t v18 = v17;
        }
        if (v26 >= 0) {
          unint64_t v19 = buf;
        }
        else {
          unint64_t v19 = *(_BYTE **)buf;
        }
        *(_DWORD *)id v27 = 136446466;
        char v28 = v18;
        __int16 v29 = 2082;
        char v30 = v19;
        _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "WILLSLEEP violation! Session %{public}s(%{public}s) asking to stop advertising",  v27,  0x16u);
        if (v26 < 0) {
          operator delete(*(void **)buf);
        }
        if (v22 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    sub_1005754F0(a1, a2);
    __p[0] = &v24;
    __int16 v14 = sub_10057D7B0((uint64_t **)(a1 + 16824), &v24, (uint64_t)&unk_1006C2518, (uint64_t **)__p);
    if (*(_DWORD *)(v14[6] + 440))
    {
      if (qword_1008D6198 != -1) {
        dispatch_once(&qword_1008D6198, &stru_1008A1CA0);
      }
      sub_10044D74C((uint64_t)off_1008D6190, *(_DWORD *)(v14[6] + 440));
    }

    sub_100570414(a1, v24);
    if (*(_BYTE *)(a1 + 41))
    {
      uint64_t v15 = *(void *)(a1 + 48);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472LL;
      void v20[2] = sub_100575C78;
      v20[3] = &unk_10087EB20;
      void v20[4] = a1;
      sub_100405384(v15, v20);
    }

    uint64_t v9 = 0LL;
  }

  else
  {
LABEL_42:
    if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR))
    {
      sub_100494958(a2, (uint64_t)__p);
      sub_100695210();
    }

    uint64_t v9 = 123LL;
  }

  sub_100242FAC((uint64_t)v23);
  return v9;
}

void sub_1005754AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21)
{
}

uint64_t sub_1005754F0(uint64_t a1, unint64_t a2)
{
  v46[1] = 0LL;
  unint64_t v47 = a2;
  v46[0] = 0LL;
  sub_100242F28((uint64_t)v46, a1 + 56);
  id v4 = *(void **)(a1 + 16832);
  if (v4)
  {
    uint64_t v5 = (void *)(a1 + 16832);
    do
    {
      unint64_t v6 = v4[4];
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        uint64_t v8 = v4;
      }
      else {
        uint64_t v8 = v4 + 1;
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      id v4 = (void *)*v8;
    }

    while (*v8);
    if (v5 != (void *)(a1 + 16832) && v5[4] <= a2)
    {
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      __p[0] = &v47;
      uint64_t v9 = sub_10057D7B0((uint64_t **)(a1 + 16824), &v47, (uint64_t)&unk_1006C2518, (uint64_t **)__p);
      uint64_t v10 = v9[6];
      if (*(void *)(v10 + 72) != *(void *)(v10 + 64))
      {
        unsigned int v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
        uint64_t v11 = v9[6];
        unsigned __int16 v12 = *(unsigned __int8 **)(v11 + 64);
        if (v12 == *(unsigned __int8 **)(v11 + 72))
        {
          unsigned __int16 v14 = 0;
          unsigned __int16 v13 = 0;
        }

        else
        {
          unsigned __int16 v13 = 0;
          unsigned __int16 v14 = 0;
          do
          {
            sub_1006344B4((uint64_t)v12, __p);
            if (v45 >= 0) {
              uint64_t v15 = __p;
            }
            else {
              uint64_t v15 = (void **)__p[0];
            }
            int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v15));
            unint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ ",  v16));
            [v42 appendString:v17];

            if (SHIBYTE(v45) < 0) {
              operator delete(__p[0]);
            }
            int v19 = *v12;
            v12 += 20;
            int v18 = v19;
            if (v19 == 16) {
              ++v13;
            }
            if (v18 == 2) {
              ++v14;
            }
          }

          while (v12 != *(unsigned __int8 **)(v9[6] + 72));
        }

        BOOL v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v13));
        [v43 setObject:v20 forKeyedSubscript:@"NumberOf128bitUUID"];

        unint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v14));
        [v43 setObject:v21 forKeyedSubscript:@"NumberOf16bitUUID"];

        [v43 setObject:v42 forKeyedSubscript:@"ServiceUUID"];
        uint64_t v10 = v9[6];
      }

      if (*(char *)(v10 + 39) < 0)
      {
        sub_100024238(__p, *(void **)(v10 + 16), *(void *)(v10 + 24));
      }

      else
      {
        *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)(v10 + 16);
        uint64_t v45 = *(void *)(v10 + 32);
      }

      char v22 = (void *)HIBYTE(v45);
      if (v45 < 0) {
        char v22 = __p[1];
      }
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v22 != 0LL));
      [v43 setObject:v23 forKeyedSubscript:@"HasName"];

      if (SHIBYTE(v45) < 0) {
        operator delete(__p[0]);
      }
      unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(v9[6] + 337)));
      [v43 setObject:v24 forKeyedSubscript:@"AppInForegroundAtStart"];

      unsigned __int8 v25 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  sub_1000B068C() - *(void *)(v9[6] + 400));
      char v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      [v43 setObject:v26 forKeyedSubscript:@"DurationInMS"];

      id v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(v5[6] + 408LL)));
      [v43 setObject:v27 forKeyedSubscript:@"SupportsBackgrounding"];

      char v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v47 + 140)));
      [v43 setObject:v28 forKeyedSubscript:@"ClientType"];

      if (qword_1008D67C8 != -1) {
        dispatch_once(&qword_1008D67C8, &stru_1008A1C60);
      }
      if (sub_100279D80((uint64_t)off_1008D67C0, v47))
      {
        if (qword_1008D67C8 != -1) {
          dispatch_once(&qword_1008D67C8, &stru_1008A1C60);
        }
        BOOL v29 = sub_10028EEDC((uint64_t)off_1008D67C0, v47);
      }

      else
      {
        BOOL v29 = 0LL;
      }

      char v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v29));
      [v43 setObject:v30 forKeyedSubscript:@"SupportsStateRestoration"];

      if (qword_1008D67C8 != -1) {
        dispatch_once(&qword_1008D67C8, &stru_1008A1C60);
      }
      if (sub_100279D80((uint64_t)off_1008D67C0, v47))
      {
        if (qword_1008D67C8 != -1) {
          dispatch_once(&qword_1008D67C8, &stru_1008A1C60);
        }
        BOOL v31 = sub_10027D798((uint64_t)off_1008D67C0, v47) == 16;
      }

      else
      {
        BOOL v31 = 0LL;
      }

      size_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v31));
      [v43 setObject:v32 forKeyedSubscript:@"AppInForegroundAtStop"];

      __p[0] = 0LL;
      __p[1] = 0LL;
      uint64_t v45 = 0LL;
      sub_100291924((uint64_t *)__p, (const void ***)(v5[6] + 416LL));
      uint64_t v33 = (void **)__p[0];
      if (__p[0] != &__p[1])
      {
        do
        {
          uint64_t v34 = v33 + 4;
          unsigned int v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v34));
          [v43 setObject:v35 forKeyedSubscript:@"BundleID"];

          __int16 v36 = (os_log_s *)qword_1008F7648;
          if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)stat buf = 138412290;
            uint64_t v49 = v43;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "Sending LEAdvSession :%@",  buf,  0xCu);
          }

          uint64_t v37 = sub_1002E8D94();
          (*(void (**)(uint64_t, void *))(*(void *)v37 + 320LL))(v37, v43);
          unint64_t v38 = (void **)v33[1];
          if (v38)
          {
            do
            {
              BOOL v39 = v38;
              unint64_t v38 = (void **)*v38;
            }

            while (v38);
          }

          else
          {
            do
            {
              BOOL v39 = (void **)v33[2];
              BOOL v40 = *v39 == v33;
              uint64_t v33 = v39;
            }

            while (!v40);
          }

          uint64_t v33 = v39;
        }

        while (v39 != &__p[1]);
      }

      sub_10023E78C((uint64_t)__p, (char *)__p[1]);
    }
  }

  return sub_100242FAC((uint64_t)v46);
}

void sub_100575B54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21)
{
}

uint64_t sub_100575C78(uint64_t a1)
{
  return sub_10057080C(*(void *)(a1 + 32), 0);
}

uint64_t sub_100575C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v34[0] = 0LL;
  v34[1] = 0LL;
  sub_100242F28((uint64_t)v34, a1 + 56);
  uint64_t v33 = 0LL;
  __int128 v31 = 0u;
  memset(v32, 0, sizeof(v32));
  *(_OWORD *)BOOL v29 = 0u;
  __int128 v30 = 0u;
  memset(v28, 0, sizeof(v28));
  __int128 v27 = 0u;
  sub_1001FCFC8((uint64_t)&v27);
  unint64_t v6 = sub_1001FD17C(v28, (uint64_t)"Received 'start advertising' request from session ", 51LL);
  sub_100494958(a2, (uint64_t)&__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v9 = sub_1001FD17C(v6, (uint64_t)p_p, size);
  sub_1001FD17C(v9, (uint64_t)", with ", 8LL);
  uint64_t v10 = sub_1001FD17C(v28, (uint64_t)"advHandle ", 10LL);
  __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)a3;
  uint64_t v11 = sub_1001FD17C(v10, (uint64_t)&__p, 1LL);
  sub_1001FD17C(v11, (uint64_t)", ", 2LL);
  unsigned __int16 v12 = sub_1001FD17C(v28, (uint64_t)"interval ", 9LL);
  unsigned __int16 v13 = (void *)std::ostream::operator<<(v12, *(unsigned __int16 *)(a3 + 2));
  sub_1001FD17C(v13, (uint64_t)", ", 2LL);
  size_t v14 = sub_10056AAD8(a3 + 48);
  uint64_t v15 = (const char *)sub_10056AAF0(a3 + 48);
  int v16 = sub_1001FD17C(v28, (uint64_t)"dataLen ", 8LL);
  unint64_t v17 = (void *)std::ostream::operator<<(v16, v14);
  sub_1001FD17C(v17, (uint64_t)", ", 2LL);
  int v18 = sub_1001FD17C(v28, (uint64_t)"data ", 5LL);
  size_t v19 = strlen(v15);
  BOOL v20 = sub_1001FD17C(v18, (uint64_t)v15, v19);
  sub_1001FD17C(v20, (uint64_t)", ", 2LL);
  unint64_t v21 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_INFO))
  {
    std::stringbuf::str(&__p, (const std::stringbuf *)((char *)v28 + 8));
    char v22 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
        ? &__p
        : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)stat buf = 136446210;
    __int16 v36 = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%{public}s", buf, 0xCu);
  }

  bzero(v37, 0x67CuLL);
  v37[0] = *(_BYTE *)a3;
  __int16 v38 = *(_WORD *)(a3 + 2);
  char v39 = 64;
  if (v14 - 1 <= 0x671)
  {
    memcpy(v41, v15, v14);
    v41[825] = 0;
    __int16 v40 = v14;
  }

  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_100242CA4(&__p);
  uint64_t v23 = sub_1001BE844(v37);
  sub_100242CD0(&__p);
  if ((_DWORD)v23 && os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
    sub_10069525C();
  }
  sub_100242CD8(&__p);
  *(void *)((char *)&v28[-1]
  *(void *)&v28[0] = v24;
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[1]);
  }
  std::streambuf::~streambuf((char *)v28 + 8);
  std::ios::~ios(v32);
  sub_100242FAC((uint64_t)v34);
  return v23;
}

void sub_100576030( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,char a52)
{
}

uint64_t sub_100576098(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v24[0] = 0LL;
  v24[1] = 0LL;
  sub_100242F28((uint64_t)v24, a1 + 56);
  uint64_t v23 = 0LL;
  __int128 v21 = 0u;
  memset(v22, 0, sizeof(v22));
  *(_OWORD *)size_t v19 = 0u;
  __int128 v20 = 0u;
  memset(v18, 0, sizeof(v18));
  __int128 v17 = 0u;
  sub_1001FCFC8((uint64_t)&v17);
  uint64_t v5 = sub_1001FD17C(v18, (uint64_t)"Received 'stop advertising' request from session ", 50LL);
  sub_100494958(a2, (uint64_t)&__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = sub_1001FD17C(v5, (uint64_t)p_p, size);
  sub_1001FD17C(v8, (uint64_t)", with ", 8LL);
  uint64_t v9 = sub_1001FD17C(v18, (uint64_t)"advHandle ", 10LL);
  __p.__r_.__value_.__s.__data_[0] = a3;
  uint64_t v10 = sub_1001FD17C(v9, (uint64_t)&__p, 1LL);
  sub_1001FD17C(v10, (uint64_t)". ", 2LL);
  uint64_t v11 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_INFO))
  {
    std::stringbuf::str(&__p, (const std::stringbuf *)((char *)v18 + 8));
    unsigned __int16 v12 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
        ? &__p
        : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)stat buf = 136446210;
    char v26 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%{public}s", buf, 0xCu);
  }

  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_100242CA4(&__p);
  uint64_t v13 = sub_1001BE988(a3);
  sub_100242CD0(&__p);
  if ((_DWORD)v13 && os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
    sub_1006952BC();
  }
  sub_100242CD8(&__p);
  *(void *)((char *)&v18[-1]
  *(void *)&v18[0] = v14;
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[1]);
  }
  std::streambuf::~streambuf((char *)v18 + 8);
  std::ios::~ios(v22);
  sub_100242FAC((uint64_t)v24);
  return v13;
}

void sub_100576324( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

BOOL sub_100576384(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1 + 56);
  BOOL v2 = *(_DWORD *)(a1 + 120) != 0;
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1005763D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, a1 + 56);
  unint64_t v6 = *(void **)(a1 + 16832);
  if (!v6) {
    goto LABEL_12;
  }
  BOOL v7 = (void *)(a1 + 16832);
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      BOOL v7 = v6;
    }
    unint64_t v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 != (void *)(a1 + 16832) && v7[4] <= a2)
  {
    uint64_t v12 = v7[6];
    *a3 = &off_10087FAE8;
    a3[1] = v12;
    if (v12) {
      sub_1002CD1E0(v12);
    }
  }

  else
  {
LABEL_12:
    *a3 = &off_10087FAE8;
    a3[1] = 0LL;
  }

  return sub_100242FAC((uint64_t)v13);
}

void sub_100576488( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10057649C(uint64_t a1, void *a2, unsigned __int8 **a3, unsigned int a4)
{
  id v4 = *a3;
  if (*a3 == a3[1])
  {
    return 0;
  }

  else
  {
    unsigned __int16 v8 = 0;
    BOOL v9 = a2 + 2;
    do
    {
      for (uint64_t i = (unsigned __int8 *)*a2; i != (unsigned __int8 *)a2[1]; i += 20)
      {
        if (sub_1001BEC7C(i, v4)) {
          goto LABEL_25;
        }
      }

      if ((unint64_t)i >= *v9)
      {
        unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&i[-*a2] >> 2);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          abort();
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          uint64_t v16 = (char *)sub_100050420((uint64_t)v9, v15);
        }
        else {
          uint64_t v16 = 0LL;
        }
        __int128 v17 = &v16[20 * v13];
        __int128 v18 = *(_OWORD *)v4;
        *((_DWORD *)v17 + 4) = *((_DWORD *)v4 + 4);
        *(_OWORD *)__int128 v17 = v18;
        __int128 v20 = (char *)*a2;
        size_t v19 = (char *)a2[1];
        __int128 v21 = v17;
        if (v19 != (char *)*a2)
        {
          do
          {
            __int128 v22 = *(_OWORD *)(v19 - 20);
            *((_DWORD *)v21 - 1) = *((_DWORD *)v19 - 1);
            *(_OWORD *)(v21 - 20) = v22;
            v21 -= 20;
            v19 -= 20;
          }

          while (v19 != v20);
          size_t v19 = (char *)*a2;
        }

        uint64_t v12 = v17 + 20;
        *a2 = v21;
        a2[1] = v17 + 20;
        a2[2] = &v16[20 * v15];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        __int128 v11 = *(_OWORD *)v4;
        *((_DWORD *)i + 4) = *((_DWORD *)v4 + 4);
        *(_OWORD *)uint64_t i = v11;
        uint64_t v12 = (char *)(i + 20);
      }

      a2[1] = v12;
      v8 += *v4;
LABEL_25:
      v4 += 20;
    }

    while (v4 != a3[1]);
  }

  return v8;
}

uint64_t sub_10057664C(int a1, char *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t result = 161LL;
  if (a2 && a3 && a1 == 15 && a4)
  {
    uint64_t v7 = a2[1];
    int v8 = *a2;
    unsigned int v9 = 2;
    if ((_DWORD)v7 != 56 && (_DWORD)v7 != 51)
    {
      if ((_DWORD)v7 != 9)
      {
        uint64_t v10 = 0LL;
LABEL_13:
        uint64_t v11 = sub_1002E8D94();
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)v11 + 400LL))( v11,  v7,  v8,  v10,  *a4);
        return 0LL;
      }

      unsigned int v9 = 5;
    }

    if (v8 < 0) {
      v9 += 3;
    }
    uint64_t v10 = a2[v9];
    goto LABEL_13;
  }

  return result;
}

void sub_1005766F0( uint64_t a1, void *a2, _WORD *a3, unsigned int a4, void *a5, uint64_t a6, void **a7, void **a8, void *a9, uint64_t **a10)
{
  v351 = 0LL;
  v352 = 0LL;
  unint64_t v353 = 0LL;
  v348 = 0LL;
  v349 = 0LL;
  unint64_t v350 = 0LL;
  v345 = 0LL;
  v346 = 0LL;
  unint64_t v347 = 0LL;
  v342 = 0LL;
  v343 = 0LL;
  unint64_t v344 = 0LL;
  unsigned __int16 v424 = 0x4000;
  uint64_t v423 = 0x4000400040004000LL;
  bzero(a3, 0xD08uLL);
  if (*((char *)a5 + 23) < 0)
  {
    *(_BYTE *)*a5 = 0;
    a5[1] = 0LL;
  }

  else
  {
    *(_BYTE *)a5 = 0;
    *((_BYTE *)a5 + 23) = 0;
  }

  __n128 __src = (void **)a5;
  *(void *)(a6 + 8) = *(void *)a6;
  a7[1] = *a7;
  a9[1] = *a9;
  unint64_t v14 = (void *)*a2;
  unint64_t v13 = a2 + 1;
  uint64_t v12 = v14;
  unint64_t v15 = &unk_1006BB000;
  if (v14 != v13)
  {
    char v16 = 0;
    char v321 = 0;
    char v319 = 0;
    char v324 = 0;
    while (1)
    {
      if (qword_1008D67C8 != -1) {
        dispatch_once(&qword_1008D67C8, &stru_1008A1C60);
      }
      unsigned int v17 = sub_10027D798((uint64_t)off_1008D67C0, v12[4]);
      uint64_t v18 = *(unsigned __int8 *)(v12[6] + 264LL);
      if (qword_1008D67C8 != -1) {
        dispatch_once(&qword_1008D67C8, &stru_1008A1C60);
      }
      if (sub_100279D80((uint64_t)off_1008D67C0, v12[4]))
      {
        LODWORD(v397) = 0;
        buf[0] = 0;
        if (qword_1008D67C8 != -1) {
          dispatch_once(&qword_1008D67C8, &stru_1008A1C60);
        }
        sub_100278A5C((uint64_t)off_1008D67C0, v12[4], &v397, buf);
        if ((_DWORD)v397 != 1)
        {
          __int128 v22 = (os_log_s *)qword_1008F7648;
          if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_INFO))
          {
            sub_100494958(v12[4], (uint64_t)__p);
            uint64_t v23 = __p;
            if (v413 < 0) {
              uint64_t v23 = (void **)__p[0];
            }
            *(_DWORD *)v414 = 136446722;
            *(void *)&v414[4] = v23;
            *(_WORD *)&v414[12] = 1024;
            *(_DWORD *)v415 = v397;
            *(_WORD *)&v415[4] = 1024;
            *(_DWORD *)&v415[6] = buf[0];
            _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "session %{public}s cannot advertise in powerState:%d restrictedMode:%d",  v414,  0x18u);
            if (SHIBYTE(v413) < 0) {
              operator delete(__p[0]);
            }
          }

          goto LABEL_122;
        }
      }

      if (v17 == 1 || v17 == 32) {
        break;
      }
      if (v17 == 16)
      {
        size_t v19 = v352;
        if ((unint64_t)v352 >= v353)
        {
          uint64_t v21 = sub_1003AD978((uint64_t *)&v351, (uint64_t)(v12 + 5));
        }

        else
        {
          *(void *)v352 = &off_10087FAE8;
          uint64_t v20 = v12[6];
          *((void *)v19 + 1) = v20;
          if (v20) {
            sub_1002CD1E0(v20);
          }
          uint64_t v21 = (uint64_t)(v19 + 16);
        }

        v352 = (char *)v21;
        uint64_t v37 = v12[6];
        if ((_DWORD)v18)
        {
          unsigned int v38 = *((unsigned __int16 *)&v423 + v18);
          uint64_t v39 = v18;
        }

        else
        {
          uint64_t v39 = 0LL;
          LOWORD(v38) = 48;
        }

        *((_WORD *)&v423 + v39) = v38;
        unint64_t v35 = *(void *)(v37 + 256);
        if (!v35) {
          goto LABEL_59;
        }
        int v36 = a4 <= 1 ? 0 : v18;
        if ((v36 & 0xFFFFFFFB) == 0) {
          goto LABEL_59;
        }
        goto LABEL_58;
      }

      if (*(_DWORD *)(v12[6] + 264LL) == 2) {
        break;
      }
LABEL_59:
      uint64_t v42 = v12[6];
      if (*(_DWORD *)(v42 + 264) == 4)
      {
        int v43 = *(unsigned __int8 *)(v42 + 339);
        if (*(_BYTE *)(v42 + 339))
        {
          uint64_t v44 = (os_log_s *)qword_1008F7648;
          if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v414 = 67109376;
            *(_DWORD *)&v414[4] = v43;
            *(_WORD *)&v414[8] = 1024;
            *(_DWORD *)&v414[10] = 4;
            _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Overriding primaryPHY:%d instance:%d",  v414,  0xEu);
            uint64_t v42 = v12[6];
            LOBYTE(v43) = *(_BYTE *)(v42 + 339);
            unsigned int v45 = *(_DWORD *)(v42 + 264);
          }

          else
          {
            unsigned int v45 = 4;
          }

          HIBYTE(a3[1668 * v45 + 1660]) = v43;
        }

        else
        {
          unsigned int v45 = 4;
        }

        int v46 = *(unsigned __int8 *)(v42 + 340);
        if (*(_BYTE *)(v42 + 340))
        {
          unint64_t v47 = (os_log_s *)qword_1008F7648;
          if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v414 = 67109376;
            *(_DWORD *)&v414[4] = v46;
            *(_WORD *)&v414[8] = 1024;
            *(_DWORD *)&v414[10] = v45;
            _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Overriding secondaryPHY:%d instance:%d",  v414,  0xEu);
            uint64_t v42 = v12[6];
            LOBYTE(v46) = *(_BYTE *)(v42 + 340);
          }

          LOBYTE(a3[1668 * *(unsigned int *)(v42 + 264) + 1661]) = v46;
        }

        uint64_t v48 = sub_1002E6E9C();
        if (sub_1002D0A84(v48))
        {
          uint64_t v49 = v12[6];
          int v50 = *(unsigned __int8 *)(v49 + 343);
          if (*(_BYTE *)(v49 + 343))
          {
            int v51 = (os_log_s *)qword_1008F7648;
            if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
            {
              int v52 = *(_DWORD *)(v49 + 264);
              *(_DWORD *)v414 = 67109376;
              *(_DWORD *)&v414[4] = v50;
              *(_WORD *)&v414[8] = 1024;
              *(_DWORD *)&v414[10] = v52;
              _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "Overriding primaryPhyOptions:%d instance:%d",  v414,  0xEu);
              uint64_t v49 = v12[6];
              LOBYTE(v50) = *(_BYTE *)(v49 + 343);
            }

            HIBYTE(a3[1668 * *(unsigned int *)(v49 + 264) + 1661]) = v50;
          }

          int v53 = *(unsigned __int8 *)(v49 + 344);
          if (*(_BYTE *)(v49 + 344))
          {
            int v54 = (os_log_s *)qword_1008F7648;
            if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
            {
              int v55 = *(_DWORD *)(v49 + 264);
              *(_DWORD *)v414 = 67109376;
              *(_DWORD *)&v414[4] = v53;
              *(_WORD *)&v414[8] = 1024;
              *(_DWORD *)&v414[10] = v55;
              _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Overriding secondaryPhyOptions:%d instance:%d",  v414,  0xEu);
              uint64_t v49 = v12[6];
              LOBYTE(v53) = *(_BYTE *)(v49 + 344);
            }

            LOBYTE(a3[1668 * *(unsigned int *)(v49 + 264) + 1662]) = v53;
          }
        }
      }

      sub_1002E6E9C();
      if (sub_1000B6578())
      {
        if (_os_feature_enabled_impl("BluetoothFeatures", "LeDecisionBasedAdvFiltering"))
        {
          uint64_t v56 = v12[6];
          if (*(_BYTE *)(v56 + 345))
          {
            unsigned int v57 = (char *)&a3[1668 * *(unsigned int *)(v56 + 264)];
            v57[3325] = *(_BYTE *)(v56 + 345);
            *((_WORD *)v57 + 1663) = *(_WORD *)(v56 + 346);
            id v58 = *(id *)(v56 + 352);
            *(void *)&a3[1668 * *(unsigned int *)(v12[6] + 264) + 1664] = [v58 bytes];

            __int16 v59 = (os_log_s *)qword_1008F7648;
            if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
            {
              int v60 = (char *)&a3[1668 * *(unsigned int *)(v12[6] + 264LL)];
              int v61 = v60[3325];
              int v62 = v60[3326];
              int v63 = v60[3327];
              uint64_t v64 = *((void *)v60 + 416);
              *(_DWORD *)v414 = 67109890;
              *(_WORD *)&v414[8] = 1024;
              *(_DWORD *)&v414[10] = v62;
              *(_WORD *)v415 = 1024;
              *(_DWORD *)&v414[4] = v61;
              *(_DWORD *)&v415[2] = v63;
              *(_WORD *)&v415[6] = 2080;
              *(void *)&v415[8] = v64;
              _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "Using DBAF - getDecisionAdvDataEnable: %d, getDBAFDecisionTypeFlags: %d, getDBAFDecisionDataLength: %d, getDBAFDecisionData: %s",  v414,  0x1Eu);
            }
          }
        }
      }

      uint64_t v65 = v12[6];
      if (*(_BYTE *)(v65 + 12) && *(_DWORD *)(v65 + 264) == 4)
      {
        uint64_t v66 = (os_log_s *)qword_1008F7648;
        if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
        {
          sub_100494958(v12[4], (uint64_t)v414);
          uint64_t v67 = v414;
          if (v415[9] < 0) {
            uint64_t v67 = *(_BYTE **)v414;
          }
          LODWORD(__p[0]) = 136446210;
          *(void **)((char *)__p + 4) = v67;
          _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "Forcing extended connectable instead of legacy connectable due to session %{public}s",  (uint8_t *)__p,  0xCu);
          if ((v415[9] & 0x80000000) != 0) {
            operator delete(*(void **)v414);
          }
          uint64_t v65 = v12[6];
        }

        char v321 = 1;
      }

      if (*(_BYTE *)(v65 + 307))
      {
        unsigned int v68 = (os_log_s *)qword_1008F7648;
        if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_INFO))
        {
          sub_100494958(v12[4], (uint64_t)v414);
          uint64_t v69 = v414;
          if (v415[9] < 0) {
            uint64_t v69 = *(_BYTE **)v414;
          }
          LODWORD(__p[0]) = 136446210;
          *(void **)((char *)__p + 4) = v69;
          _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_INFO,  "Session %{public}s wants to stop on address change",  (uint8_t *)__p,  0xCu);
          if ((v415[9] & 0x80000000) != 0) {
            operator delete(*(void **)v414);
          }
          uint64_t v65 = v12[6];
        }
      }

      if (*(_BYTE *)(v65 + 464))
      {
        int v70 = *(_DWORD *)(v65 + 264);
        if (v70) {
          v324 |= v70 == 1;
        }
        else {
          char v319 = 1;
        }
      }

      if (v17 >= 8 && (sub_10056AAD8(v65 + 152) || sub_10056AAD8(v12[6] + 136LL)))
      {
        unsigned int v71 = v343;
        if ((unint64_t)v343 >= v344)
        {
          uint64_t v73 = sub_1003AD978((uint64_t *)&v342, (uint64_t)(v12 + 5));
        }

        else
        {
          void *v343 = &off_10087FAE8;
          uint64_t v72 = v12[6];
          v71[1] = v72;
          if (v72) {
            sub_1002CD1E0(v72);
          }
          uint64_t v73 = (uint64_t)(v71 + 2);
        }

        v343 = (void *)v73;
        else {
          int v74 = WORD1(v423);
        }
        WORD1(v423) = v74;
        int v75 = (os_log_s *)qword_1008F7648;
        if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
        {
          sub_100494958(v12[4], (uint64_t)__p);
          uint64_t v76 = v413 >= 0 ? __p : (void **)__p[0];
          uint64_t v77 = sub_10056AAD8(v12[6] + 152LL);
          uint64_t v78 = sub_10056AAD8(v12[6] + 136LL);
          int v79 = *(unsigned __int16 *)(v12[6] + 222LL);
          *(_DWORD *)v414 = 136447234;
          *(void *)&v414[4] = v76;
          *(_WORD *)&v414[12] = 2048;
          *(void *)v415 = v77;
          *(_WORD *)&v415[8] = 2048;
          *(void *)&v415[10] = v78;
          __int16 v416 = 1024;
          int v417 = v74;
          __int16 v418 = 1024;
          int v419 = v79;
          _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s has Non-Apple manufacturer data len %zu LE Bluetooth Device address len %zu updated minNo nConnectableInterval %u (%u from session)",  v414,  0x2Cu);
          if (SHIBYTE(v413) < 0) {
            operator delete(__p[0]);
          }
        }
      }

      char v16 = 1;
LABEL_122:
      unint64_t v15 = (void *)&unk_1006BB000;
      unsigned int v80 = (void *)v12[1];
      if (v80)
      {
        do
        {
          char v81 = v80;
          unsigned int v80 = (void *)*v80;
        }

        while (v80);
      }

      else
      {
        do
        {
          char v81 = (void *)v12[2];
          _ZF = *v81 == (void)v12;
          uint64_t v12 = v81;
        }

        while (!_ZF);
      }

      uint64_t v12 = v81;
      if (v81 == v13) {
        goto LABEL_130;
      }
    }

    uint64_t v24 = v12[6];
    if (*(_DWORD *)(v24 + 264) == 2)
    {
      __int128 v421 = xmmword_1006BDCD8;
      int v422 = 0;
      sub_100634334((__n128 *)v414, (__n128 *)&v421);
      uint64_t v25 = sub_100051D00(v24 + 112, v414);
      uint64_t v26 = v12[6];
      if (v26 + 120 == v25)
      {
        sub_10056C3F0(v26);
        __int128 v27 = (os_log_s *)qword_1008F76E0;
        if (os_log_type_enabled((os_log_t)qword_1008F76E0, OS_LOG_TYPE_DEFAULT))
        {
          sub_100494958(v12[4], (uint64_t)v414);
          char v28 = v414;
          if (v415[9] < 0) {
            char v28 = *(_BYTE **)v414;
          }
          LODWORD(__p[0]) = 136446210;
          *(void **)((char *)__p + 4) = v28;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "session %{public}s advertises Exposure Notification data",  (uint8_t *)__p,  0xCu);
          if ((v415[9] & 0x80000000) != 0) {
            operator delete(*(void **)v414);
          }
        }
      }
    }

    BOOL v29 = v349;
    if ((unint64_t)v349 >= v350)
    {
      uint64_t v31 = sub_1003AD978((uint64_t *)&v348, (uint64_t)(v12 + 5));
    }

    else
    {
      *(void *)v349 = &off_10087FAE8;
      uint64_t v30 = v12[6];
      *((void *)v29 + 1) = v30;
      if (v30) {
        sub_1002CD1E0(v30);
      }
      uint64_t v31 = (uint64_t)(v29 + 16);
    }

    v349 = (char *)v31;
    uint64_t v32 = v12[6];
    uint64_t v33 = *(unsigned int *)(v32 + 264);
    unsigned int v34 = *((unsigned __int16 *)&v423 + v33);
    *((_WORD *)&v423 + v33) = v34;
    unint64_t v35 = *(void *)(v32 + 256);
    if (!v35) {
      goto LABEL_59;
    }
    int v36 = a4 <= 1 ? 0 : v18;
    if ((v36 & 0xFFFFFFFB) == 0) {
      goto LABEL_59;
    }
LABEL_58:
    HIBYTE(a3[1668 * v36 + 1658]) = 1;
    uint64_t v40 = sub_1001BCDB0(v35);
    uint64_t v41 = (char *)&a3[1668 * v36];
    v41[3316] = BYTE6(v40);
    *((_WORD *)v41 + 1657) = WORD2(v40);
    *(_DWORD *)(v41 + 3310) = v40;
    goto LABEL_59;
  }

  char v324 = 0;
  char v319 = 0;
  char v321 = 0;
  char v16 = 0;
LABEL_130:
  v327 = (_BYTE *)(a1 + 16873);
  uint64_t v83 = *(void *)(a1 + 16856);
  if (v83 != a1 + 16848)
  {
    unsigned __int8 v84 = 0;
    unsigned __int8 v318 = 0;
    int v322 = v15[238];
    while (1)
    {
      uint64_t v85 = (void *)*v13;
      if (!*v13) {
        goto LABEL_143;
      }
      unint64_t v86 = *(void *)(v83 + 16);
      uint64_t v87 = v13;
      do
      {
        unint64_t v88 = v85[4];
        _CF = v88 >= v86;
        if (v88 >= v86) {
          std::string::size_type v90 = v85;
        }
        else {
          std::string::size_type v90 = v85 + 1;
        }
        if (_CF) {
          uint64_t v87 = v85;
        }
        uint64_t v85 = (void *)*v90;
      }

      while (*v90);
      if (v87 != v13 && (unint64_t v91 = v87[4], v86 >= v91))
      {
        uint64_t v93 = v87[6];
        if (*(_DWORD *)(v93 + 264) != 2)
        {
          *(_OWORD *)std::stringbuf::string_type __p = 0uLL;
          uint64_t v413 = 0LL;
          int v96 = sub_100050EE8( (char *)__p,  *(__int128 **)(v93 + 64),  *(__int128 **)(v93 + 72),  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v93 + 72) - *(void *)(v93 + 64)) >> 2));
          sub_10057649C((uint64_t)v96, a7, (unsigned __int8 **)__p, 0xFFFFu);
          __int16 v97 = v423;
          LOWORD(v423) = v97;
          if (!*(_BYTE *)(a1 + 16874))
          {
            uint64_t v105 = (os_log_s *)qword_1008F7648;
            if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEBUG)) {
              sub_100695354(&v340, v341, v105);
            }
            goto LABEL_174;
          }

          if (a4 < 4 || !*v327)
          {
            uint64_t v106 = (os_log_s *)qword_1008F7648;
            if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEBUG)) {
              sub_100695388(&v338, v339, v106);
            }
            goto LABEL_174;
          }

          __int128 v397 = 0uLL;
          *(void *)&__int128 v398 = 0LL;
          sub_10056B86C(v87[6], 2, &v397);
          size_t v98 = (void *)v397;
          if (*((void *)&v397 + 1) == (void)v397)
          {
            uint64_t v107 = qword_1008F7648;
            if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEBUG))
            {
              sub_100494958(v87[4], (uint64_t)v414);
              uint64_t v120 = v414;
              if (v415[9] < 0) {
                uint64_t v120 = *(_BYTE **)v414;
              }
              *(_DWORD *)stat buf = v322;
              *(void *)&uint8_t buf[4] = v120;
              uint64_t v117 = (os_log_s *)v107;
              uint64_t v118 = "session %{public}s does not have 16bit UUID's";
              goto LABEL_197;
            }

            if (!v98) {
              goto LABEL_174;
            }
          }

          else
          {
            unsigned int v99 = *(unsigned __int16 *)(a1 + 16906);
            if (v99 <= v318)
            {
              int v108 = (os_log_s *)qword_1008F7648;
              if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)v414 = 67109376;
                *(_DWORD *)&v414[4] = v318;
                *(_WORD *)&v414[8] = 1024;
                *(_DWORD *)&v414[10] = v99;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v108,  OS_LOG_TYPE_DEBUG,  "We have %d advertisers, max is %d, can't fit more",  v414,  0xEu);
              }
            }

            else
            {
              uint64_t v100 = sub_1000B068C();
              uint64_t v101 = v87[6];
              if (v100 - *(void *)(v101 + 320) < *(void *)(v101 + 328))
              {
                if (*(_BYTE *)(v101 + 336))
                {
                  uint64_t v102 = v346;
                  if ((unint64_t)v346 >= v347)
                  {
                    uint64_t v103 = sub_1003AD978((uint64_t *)&v345, (uint64_t)(v87 + 5));
                  }

                  else
                  {
                    void *v346 = &off_10087FAE8;
                    v102[1] = v101;
                    sub_1002CD1E0(v101);
                    uint64_t v103 = (uint64_t)(v102 + 2);
                  }

                  v346 = (void *)v103;
                  __int16 v119 = v424;
                  if (v424 >= 0x122u) {
                    __int16 v119 = 290;
                  }
                  unsigned __int16 v424 = v119;
                  ++v318;
                  goto LABEL_192;
                }

                uint64_t v115 = qword_1008F7648;
                if (!os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_192;
                }
                sub_100494958(v87[4], (uint64_t)v414);
                unsigned int v116 = v414;
                if (v415[9] < 0) {
                  unsigned int v116 = *(_BYTE **)v414;
                }
                *(_DWORD *)stat buf = v322;
                *(void *)&uint8_t buf[4] = v116;
                uint64_t v117 = (os_log_s *)v115;
                uint64_t v118 = "session %{public}s was never in foreground, extended advertising not allowed, skipping";
LABEL_197:
                _os_log_debug_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEBUG, v118, buf, 0xCu);
                if ((v415[9] & 0x80000000) == 0) {
                  goto LABEL_192;
                }
                id v114 = *(void **)v414;
LABEL_199:
                operator delete(v114);
                goto LABEL_192;
              }

              v109 = (os_log_s *)qword_1008F7648;
              if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEBUG))
              {
                sub_100494958(v87[4], (uint64_t)buf);
                uint64_t v110 = buf;
                if (SBYTE7(v390) < 0) {
                  uint64_t v110 = *(uint8_t **)buf;
                }
                uint64_t v111 = v87[6];
                uint64_t v113 = *(void *)(v111 + 320);
                uint64_t v112 = *(void *)(v111 + 328);
                *(_DWORD *)v414 = 136446722;
                *(void *)&v414[4] = v110;
                *(_WORD *)&v414[12] = 2048;
                *(void *)v415 = v100 - v113;
                *(_WORD *)&v415[8] = 2048;
                *(void *)&v415[10] = v112;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_DEBUG,  "session %{public}s has been advertising in background for %llu seconds, but max is %llu, skipping",  v414,  0x20u);
                if (SBYTE7(v390) < 0)
                {
                  id v114 = *(void **)buf;
                  goto LABEL_199;
                }
              }
            }

LABEL_192:
            size_t v98 = (void *)v397;
            if (!(void)v397)
            {
LABEL_174:
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }

              ++v84;
              char v16 = 1;
              goto LABEL_144;
            }
          }

          *((void *)&v397 + 1) = v98;
          operator delete(v98);
          goto LABEL_174;
        }

        int v94 = (os_log_s *)qword_1008F76E0;
        if (os_log_type_enabled((os_log_t)qword_1008F76E0, OS_LOG_TYPE_INFO))
        {
          sub_100494958(v91, (uint64_t)v414);
          uint64_t v95 = v414;
          if (v415[9] < 0) {
            uint64_t v95 = *(_BYTE **)v414;
          }
          LODWORD(__p[0]) = v322;
          *(void **)((char *)__p + 4) = v95;
          _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_INFO,  "Session %{public}s is on the EN instance, skipping hash",  (uint8_t *)__p,  0xCu);
          goto LABEL_165;
        }
      }

      else
      {
LABEL_143:
        int v92 = (os_log_s *)qword_1008F7648;
        if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR))
        {
          sub_100494958(*(void *)(v83 + 16), (uint64_t)v414);
          uint64_t v104 = v414;
          if (v415[9] < 0) {
            uint64_t v104 = *(_BYTE **)v414;
          }
          LODWORD(__p[0]) = v322;
          *(void **)((char *)__p + 4) = v104;
          _os_log_error_impl( (void *)&_mh_execute_header,  v92,  OS_LOG_TYPE_ERROR,  "Could not find %{public}s in our advertising sessions, ignoring",  (uint8_t *)__p,  0xCu);
LABEL_165:
          if ((v415[9] & 0x80000000) != 0) {
            operator delete(*(void **)v414);
          }
        }
      }

LABEL_285:
  uint64_t v155 = (uint64_t)v351;
  if (v352 == v351) {
    goto LABEL_301;
  }
  do
  {
    size_t v156 = sub_10056AAD8(*(void *)(v155 + 8) + 224LL);
    int v126 = (const void *)sub_10056AAF0(*(void *)(v155 + 8) + 224LL);
    if (a4 < 2)
    {
      unsigned int v157 = 0;
      if (!v156) {
        goto LABEL_292;
      }
    }

    else
    {
      unsigned int v157 = *(unsigned __int8 *)(*(void *)(v155 + 8) + 264LL);
      if (!v156) {
        goto LABEL_292;
      }
    }

    uint64_t v158 = *((unsigned __int16 *)&v410 + v157);
    if (v156 <= v405[v157] - v158)
    {
      uint64_t v159 = v157;
      int v126 = memcpy(&v414[1650 * v157 + v158], v126, v156);
      *((_WORD *)&v410 + v159) = v158 + v156;
    }

LABEL_292:
    v155 += 16LL;
  }

  while ((char *)v155 != v352);
  uint64_t v160 = (uint64_t)v351;
  if ((char *)v155 != v351)
  {
    do
    {
      size_t v161 = sub_10056AAD8(*(void *)(v160 + 8) + 48LL);
      int v126 = (const void *)sub_10056AAF0(*(void *)(v160 + 8) + 48LL);
      if (a4 < 2)
      {
        unsigned int v162 = 0;
        if (v161)
        {
LABEL_298:
          uint64_t v163 = *((unsigned __int16 *)&v410 + v162);
          if (v161 <= v405[v162] - v163)
          {
            uint64_t v164 = v162;
            int v126 = memcpy(&v414[1650 * v162 + v163], v126, v161);
            *((_WORD *)&v410 + v164) = v163 + v161;
          }
        }
      }

      else
      {
        unsigned int v162 = *(unsigned __int8 *)(*(void *)(v160 + 8) + 264LL);
        if (v161) {
          goto LABEL_298;
        }
      }

      v160 += 16LL;
    }

    while ((char *)v160 != v352);
  }

LABEL_301:
  if ((_BYTE)v336)
  {
    __int16 v165 = v410;
    int v126 = (const void *)sub_100579874( (uint64_t)v126,  &v414[(unsigned __int16)v410],  (unsigned __int16)(v325 - v410),  (__int128 **)v386,  0x10u,  (void **)a6,  a7);
    LOWORD(v410) = (_WORD)v126 + v165;
  }

  if (BYTE1(v336))
  {
    __int16 v166 = WORD1(v410);
    int v126 = (const void *)sub_100579874( (uint64_t)v126,  &v420[WORD1(v410)],  (unsigned __int16)(v323 - WORD1(v410)),  (__int128 **)&v386[1] + 1,  0x10u,  (void **)a6,  a7);
    WORD1(v410) = (_WORD)v126 + v166;
  }

  if (v337)
  {
    unsigned __int16 v167 = v411;
    int v126 = (const void *)sub_100579874( (uint64_t)v126,  &v420[v411 + 4950],  (unsigned __int16)(v320 - v411),  (__int128 **)&v387,  0x10u,  (void **)a6,  a7);
    unsigned __int16 v411 = (_WORD)v126 + v167;
  }

  if (a4)
  {
    uint64_t v168 = 0LL;
    BOOL v169 = &v336;
    __n128 v170 = (__int16 *)v405;
    v171 = &v410;
    v172 = v414;
    do
    {
      uint64_t v173 = *(unsigned __int16 *)v171;
      __int16 v175 = *v170;
      v170 += 4;
      __int16 v174 = v175;
      uint64_t v176 = sub_100579874( (uint64_t)v126,  &v172[v173],  (unsigned __int16)(v175 - v173),  (__int128 **)&buf[v168],  4u,  (void **)a6,  a7);
      LOWORD(v173) = v176 + v173;
      uint64_t v177 = sub_100579874( v176,  &v172[(unsigned __int16)v173],  (unsigned __int16)(v175 - v173),  (__int128 **)((char *)&v397 + v168),  2u,  (void **)a6,  a7);
      unsigned __int16 v178 = v177 + v173;
      unsigned __int16 v179 = v178;
      if (!*(_BYTE *)v169)
      {
        uint64_t v177 = sub_100579874( v177,  &v172[v178],  (unsigned __int16)(v174 - v178),  (__int128 **)((char *)v386 + v168),  0x10u,  (void **)a6,  a7);
        unsigned __int16 v179 = v177 + v178;
        *(_WORD *)v171 = v177 + v178;
      }

      uint64_t v180 = sub_100579CA0( v177,  &v172[v179],  (unsigned __int16)(v174 - v179),  (__int128 **)((char *)v384 + v168),  2u,  a8);
      __int16 v181 = v180 + v179;
      uint64_t v182 = sub_100579CA0( v180,  &v172[(unsigned __int16)(v180 + v179)],  (unsigned __int16)(v174 - (v180 + v179)),  (__int128 **)((char *)v382 + v168),  4u,  a8);
      unsigned __int16 v183 = v182 + v181;
      int v126 = (const void *)sub_100579CA0( v182,  &v172[v183],  (unsigned __int16)(v174 - v183),  (__int128 **)((char *)v380 + v168),  0x10u,  a8);
      *(_WORD *)v171 = (_WORD)v126 + v183;
      v171 = (uint64_t *)((char *)v171 + 2);
      v168 += 24LL;
      BOOL v169 = (int *)((char *)v169 + 1);
      v172 += 1650;
    }

    while (24LL * a4 != v168);
  }

  uint64_t v184 = (uint64_t)v351;
  for (uint64_t j = __src; (char *)v184 != v352; v184 += 16LL)
  {
    memset(__dst, 0, 24);
    uint64_t v186 = sub_1000518C4((uint64_t *)__dst, *(void *)(v184 + 8) + 112LL);
    if (a4 < 2) {
      unsigned int v187 = 0;
    }
    else {
      unsigned int v187 = *(unsigned __int8 *)(*(void *)(v184 + 8) + 264LL);
    }
    uint64_t v188 = *((unsigned __int16 *)&v410 + v187);
    *((_WORD *)&v410 + v187) = sub_100579F08( (uint64_t)v186,  (uint64_t)&v414[1650 * v187 + v188],  (unsigned __int16)v405[v187] - (unsigned __int16)v188,  __dst,  a10,  2)
                             + v188;
    sub_100051CA8((uint64_t)__dst, *(void **)&__dst[8]);
  }

  uint64_t v189 = (uint64_t)v349;
  if (v349 != v348)
  {
    uint64_t v189 = (uint64_t)v348;
    do
    {
      memset(__dst, 0, 24);
      v190 = sub_1000518C4((uint64_t *)__dst, *(void *)(v189 + 8) + 112LL);
      if (a4 < 2) {
        unsigned int v191 = 0;
      }
      else {
        unsigned int v191 = *(unsigned __int8 *)(*(void *)(v189 + 8) + 264LL);
      }
      uint64_t v192 = *((unsigned __int16 *)&v410 + v191);
      *((_WORD *)&v410 + v191) = sub_100579F08( (uint64_t)v190,  (uint64_t)&v414[1650 * v191 + v192],  (unsigned __int16)v405[v191] - (unsigned __int16)v192,  __dst,  a10,  2)
                               + v192;
      sub_100051CA8((uint64_t)__dst, *(void **)&__dst[8]);
      v189 += 16LL;
    }

    while ((char *)v189 != v349);
  }

  unint64_t v193 = *((unsigned __int8 *)__src + 23);
  unsigned __int8 v194 = v193;
  if ((v193 & 0x80u) == 0LL) {
    unint64_t v195 = *((unsigned __int8 *)__src + 23);
  }
  else {
    unint64_t v195 = (unint64_t)__src[1];
  }
  if (v195)
  {
    char v196 = -21;
    if (a7[1] == *a7) {
      char v196 = 0;
    }
    unsigned __int8 v197 = v196 + v325;
    BOOL v198 = (v325 - v410) > v197;
    int v199 = v198;
    unint64_t v200 = v197 - 2LL;
    if (v195 <= v200) {
      v201 = __src[1];
    }
    else {
      LOBYTE(v201) = v200;
    }
    if (v195 <= v200) {
      LOBYTE(v200) = *((_BYTE *)__src + 23);
    }
    if ((v193 & 0x80u) != 0LL) {
      LOBYTE(v200) = (_BYTE)v201;
    }
    else {
      int v202 = v199;
    }
    if (v202) {
      v203 = (void **)v414;
    }
    else {
      v203 = __p;
    }
    if (v202) {
      v204 = &v410;
    }
    else {
      v204 = &v408;
    }
    char v205 = v200;
    if ((char)v193 < 0)
    {
      if ((unint64_t)__src[1] > v200)
      {
        __inbytesleft[0] = (size_t)__src[1];
        size_t __outbytesleft = v200;
        v206 = (char *)*__src;
        goto LABEL_355;
      }
    }

    else if (v200 < v193)
    {
      __inbytesleft[0] = *((unsigned __int8 *)__src + 23);
      size_t __outbytesleft = v200;
      v206 = (char *)__src;
LABEL_355:
      __instat buf = v206;
      v207 = (char *)calloc(v200 + 1LL, 1uLL);
      __outstat buf = v207;
      iconv_t v208 = iconv_open("UTF-8", "UTF-8");
      if (iconv(v208, &__inbuf, __inbytesleft, &__outbuf, &__outbytesleft))
      {
        v209 = (os_log_s *)qword_1008F7648;
        if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_INFO))
        {
          else {
            v210 = *__src;
          }
          *(_DWORD *)std::stringbuf::string_type __dst = 136315394;
          *(void *)&__dst[4] = v210;
          *(_WORD *)&__dst[12] = 2080;
          *(void *)&__dst[14] = v207;
          _os_log_impl( (void *)&_mh_execute_header,  v209,  OS_LOG_TYPE_INFO,  "Adjusted advertisement name %s to fit - using %s",  __dst,  0x16u);
        }
      }

      iconv_close(v208);
      free(v207);
      LOBYTE(v200) = v205 - __outbytesleft;
      unsigned __int8 v194 = *((_BYTE *)__src + 23);
    }

    __int16 v211 = v200;
    uint64_t v212 = *(unsigned __int16 *)v204;
    *(_WORD *)v204 = v212 + 1;
    *((_BYTE *)v203 + v212) = v200 + 1;
    unsigned __int16 v213 = v212 + 2;
    if ((v194 & 0x80) != 0)
    {
      uint64_t j = *__src;
      else {
        char v214 = 9;
      }
    }

    else if (v200 < (unint64_t)v194)
    {
      char v214 = 8;
    }

    else
    {
      char v214 = 9;
    }

    *(_WORD *)v204 = v213;
    *((_BYTE *)v203 + (unsigned __int16)(v212 + 1)) = v214;
    memcpy((char *)v203 + v213, j, v200);
    *(_WORD *)v204 = v213 + v211;
    uint64_t v189 = (uint64_t)v349;
  }

  uint64_t v215 = (uint64_t)v348;
  if ((char *)v189 != v348)
  {
    while (2)
    {
      size_t v216 = sub_10056AAD8(*(void *)(v215 + 8) + 224LL);
      v217 = (const void *)sub_10056AAF0(*(void *)(v215 + 8) + 224LL);
      if (a4 < 2)
      {
        unsigned int v218 = 0;
        if (!v216) {
          goto LABEL_377;
        }
      }

      else
      {
        unsigned int v218 = *(unsigned __int8 *)(*(void *)(v215 + 8) + 264LL);
        if (!v216) {
          goto LABEL_377;
        }
      }

      uint64_t v219 = *((unsigned __int16 *)&v410 + v218);
      if (v216 <= v405[v218] - v219)
      {
        uint64_t v220 = v218;
        memcpy(&v414[1650 * v218 + v219], v217, v216);
        *((_WORD *)&v410 + v220) = v219 + v216;
      }

LABEL_377:
      v215 += 16LL;
      break;
    }

    uint64_t v221 = (uint64_t)v348;
    if ((char *)v215 != v348)
    {
      while (2)
      {
        size_t v222 = sub_10056AAD8(*(void *)(v221 + 8) + 48LL);
        v223 = (const void *)sub_10056AAF0(*(void *)(v221 + 8) + 48LL);
        if (a4 < 2)
        {
          unsigned int v224 = 0;
          if (!v222) {
            goto LABEL_385;
          }
        }

        else
        {
          unsigned int v224 = *(unsigned __int8 *)(*(void *)(v221 + 8) + 264LL);
          if (!v222) {
            goto LABEL_385;
          }
        }

        uint64_t v225 = *((unsigned __int16 *)&v410 + v224);
        if (v222 <= v405[v224] - v225)
        {
          uint64_t v226 = v224;
          memcpy(&v414[1650 * v224 + v225], v223, v222);
          *((_WORD *)&v410 + v226) = v225 + v222;
        }

LABEL_385:
        v221 += 16LL;
        continue;
      }
    }
  }

  uint64_t v227 = (uint64_t)v342;
  uint64_t v228 = (uint64_t)v343;
  if (v343 == v342)
  {
    uint64_t v227 = (uint64_t)v343;
  }

  else
  {
    BOOL v229 = a4 > 1;
    v230 = &v414[1650 * v229];
    v231 = (_WORD *)((unint64_t)&v410 | (2 * v229));
    do
    {
      size_t v232 = sub_10056AAD8(*(void *)(v227 + 8) + 152LL);
      if (v232)
      {
        v233 = (const void *)sub_10056AAF0(*(void *)(v227 + 8) + 152LL);
        unint64_t v234 = v232 + 2;
        if (v232 != -2LL)
        {
          uint64_t v235 = (unsigned __int16)*v231;
          uint64_t v236 = 1650 - v235;
          if (v234 <= 1650 - v235)
          {
            v230[v235] = v232 + 1;
            __int16 v238 = v235 + 2;
            v230[(unsigned __int16)(v235 + 1)] = -1;
            memcpy(&v230[(unsigned __int16)(v235 + 2)], v233, v232);
            _WORD *v231 = v238 + v232;
          }

          else
          {
            v237 = (os_log_s *)qword_1008F7648;
            if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::stringbuf::string_type __dst = 67109632;
              *(_DWORD *)&__dst[4] = v229;
              *(_WORD *)&__dst[8] = 2048;
              *(void *)&__dst[10] = v234;
              *(_WORD *)&__dst[18] = 2048;
              *(void *)&__dst[20] = v236;
              _os_log_impl( (void *)&_mh_execute_header,  v237,  OS_LOG_TYPE_DEFAULT,  "Non Apple manufacturer data cannot fit in advertisement instance %u mfgDataLen %zu available space %lu",  __dst,  0x1Cu);
            }
          }
        }
      }

      v227 += 16LL;
    }

    while ((void *)v227 != v343);
    uint64_t v228 = (uint64_t)v342;
  }

  v239 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::stringbuf::string_type __dst = 134218496;
    *(void *)&__dst[4] = (v349 - v348) >> 4;
    *(_WORD *)&__dst[12] = 2048;
    *(void *)&__dst[14] = (v352 - v351) >> 4;
    *(_WORD *)&__dst[22] = 2048;
    *(void *)&__dst[24] = (v227 - v228) >> 4;
    _os_log_impl((void *)&_mh_execute_header, v239, OS_LOG_TYPE_INFO, "dameon %lu fg %lu lp %lu", __dst, 0x20u);
    uint64_t v228 = (uint64_t)v342;
    uint64_t v227 = (uint64_t)v343;
  }

  if (v227 != v228)
  {
    BOOL v240 = a4 > 1;
    v241 = &v414[1650 * v240];
    v242 = (_WORD *)((unint64_t)&v410 | (2 * v240));
    do
    {
      uint64_t v243 = sub_10056AAD8(*(void *)(v228 + 8) + 136LL);
      uint64_t v244 = v243;
      if (v243)
      {
        if (v243 == 7)
        {
          v245 = (int *)sub_10056AAF0(*(void *)(v228 + 8) + 136LL);
          uint64_t v246 = (unsigned __int16)*v242;
          if ((unint64_t)(v246 - 1651) > 0xFFFFFFFFFFFFFFF6LL)
          {
            v250 = (os_log_s *)qword_1008F7648;
            if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::stringbuf::string_type __dst = 67109632;
              *(_DWORD *)&__dst[4] = v240;
              *(_WORD *)&__dst[8] = 1024;
              *(_DWORD *)&__dst[10] = 9;
              *(_WORD *)&__dst[14] = 2048;
              *(void *)&__dst[16] = 1650 - v246;
              _os_log_impl( (void *)&_mh_execute_header,  v250,  OS_LOG_TYPE_DEFAULT,  "LE Bluetooth Device Address cannot fit in advertisement instance %u leBtAddrAdStructLen %hhu available space %lu",  __dst,  0x18u);
            }
          }

          else
          {
            v241[v246] = 8;
            v241[(unsigned __int16)(v246 + 1)] = 27;
            v247 = &v241[(unsigned __int16)(v246 + 2)];
            int v248 = *v245;
            *(_DWORD *)((char *)v247 + 3) = *(int *)((char *)v245 + 3);
            _DWORD *v247 = v248;
            _WORD *v242 = v246 + 9;
          }
        }

        else
        {
          v249 = (os_log_s *)qword_1008F7648;
          if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::stringbuf::string_type __dst = 67109632;
            *(_DWORD *)&__dst[4] = 7;
            *(_WORD *)&__dst[8] = 2048;
            *(void *)&__dst[10] = v244;
            *(_WORD *)&__dst[18] = 1024;
            *(_DWORD *)&__dst[20] = v240;
            _os_log_error_impl( (void *)&_mh_execute_header,  v249,  OS_LOG_TYPE_ERROR,  "Advertisement data for device address must have length %d (len %zu), instance %u",  __dst,  0x18u);
          }
        }
      }

      v228 += 16LL;
    }

    while ((void *)v228 != v343);
  }

  v251 = *a7;
  if (a7[1] != *a7)
  {
    __inbytesleft[1] = 0LL;
    __inbytesleft[0] = 0LL;
    do
    {
      __dst[0] = 0;
      LOBYTE(__outbytesleft) = 0;
      int v252 = v251[4];
      __int128 v376 = *(_OWORD *)v251;
      int v377 = v252;
      sub_100404798((unsigned __int8 *)&v376, __dst, &__outbytesleft);
      *((_BYTE *)__inbytesleft + __dst[0]) |= 1 << __outbytesleft;
      v251 += 5;
    }

    while (v251 != a7[1]);
    v253 = (os_log_s *)qword_1008F7648;
    if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type __dst = 68157954;
      *(_DWORD *)&__dst[4] = 16;
      *(_WORD *)&__dst[8] = 2096;
      *(void *)&__dst[10] = __inbytesleft;
      _os_log_impl((void *)&_mh_execute_header, v253, OS_LOG_TYPE_INFO, "Hashed UUIDs: %.16P", __dst, 0x12u);
    }

    char v254 = v405[0];
    char v255 = v410;
    if ((LOBYTE(v405[0]) - v408) <= 0x14uLL
      && os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_FAULT))
    {
      sub_10069531C();
    }

    v256 = __p;
    v257 = &v408;
    uint64_t v258 = *(unsigned __int16 *)v257;
    *((_BYTE *)v256 + v258) = 20;
    *((_BYTE *)v256 + (unsigned __int16)(v258 + 1)) = -1;
    *((_BYTE *)v256 + (unsigned __int16)(v258 + 2)) = 76;
    *((_BYTE *)v256 + (unsigned __int16)(v258 + 3)) = 0;
    *((_BYTE *)v256 + (unsigned __int16)(v258 + 4)) = 1;
    *(_OWORD *)((char *)v256 + (unsigned __int16)(v258 + 5)) = *(_OWORD *)__inbytesleft;
    *(_WORD *)v257 = v258 + 21;
  }

  uint64_t v259 = (uint64_t)v351;
  if (v352 != v351)
  {
    while (2)
    {
      size_t v260 = sub_10056AAD8(*(void *)(v259 + 8) + 272LL);
      v261 = (const void *)sub_10056AAF0(*(void *)(v259 + 8) + 272LL);
      size_t v262 = sub_10056AAD8(*(void *)(v259 + 8) + 288LL);
      v263 = (const void *)sub_10056AAF0(*(void *)(v259 + 8) + 288LL);
      if (a4 < 2)
      {
        uint64_t v264 = 0LL;
      }

      else
      {
        uint64_t v264 = *(unsigned __int8 *)(*(void *)(v259 + 8) + 264LL);
        if (v264 == 4)
        {
          unsigned int v265 = *(unsigned __int16 *)(a1 + 16904);
          goto LABEL_429;
        }
      }

      unsigned int v265 = 31;
LABEL_429:
      if (v260 - 1 < v265)
      {
        memcpy(&v414[1650 * v264], v261, v260);
        *((_WORD *)&v410 + v264) = v260;
        LOBYTE(a3[1668 * v264 + 1659]) = 1;
      }

      if (v262 - 1 < v265)
      {
        memcpy((char *)__p + 1650 * v264, v263, v262);
        *((_WORD *)&v408 + v264) = v262;
      }

      v259 += 16LL;
      continue;
    }
  }

  uint64_t v266 = (uint64_t)v348;
  if (v349 != v348)
  {
    while (2)
    {
      size_t v267 = sub_10056AAD8(*(void *)(v266 + 8) + 272LL);
      v268 = (const void *)sub_10056AAF0(*(void *)(v266 + 8) + 272LL);
      size_t v269 = sub_10056AAD8(*(void *)(v266 + 8) + 288LL);
      v270 = (const void *)sub_10056AAF0(*(void *)(v266 + 8) + 288LL);
      if (a4 < 2)
      {
        uint64_t v271 = 0LL;
      }

      else
      {
        uint64_t v271 = *(unsigned __int8 *)(*(void *)(v266 + 8) + 264LL);
        if (v271 == 4)
        {
          unsigned int v272 = *(unsigned __int16 *)(a1 + 16904);
          goto LABEL_440;
        }
      }

      unsigned int v272 = 31;
LABEL_440:
      if (v267 - 1 < v272)
      {
        memcpy(&v414[1650 * v271], v268, v267);
        *((_WORD *)&v410 + v271) = v267;
        LOBYTE(a3[1668 * v271 + 1659]) = 1;
      }

      if (v269 - 1 < v272)
      {
        memcpy((char *)__p + 1650 * v271, v270, v269);
        *((_WORD *)&v408 + v271) = v269;
      }

      v266 += 16LL;
      continue;
    }
  }

  if (a4)
  {
    uint64_t v273 = 0LL;
    uint64_t v274 = 0LL;
    if ((v321 & 1) != 0) {
      char v275 = 0;
    }
    else {
      char v275 = 3;
    }
    if ((v321 & 1) != 0) {
      char v276 = 3;
    }
    else {
      char v276 = 0;
    }
    v277 = __p;
    v278 = v414;
    do
    {
      v279 = (char *)&a3[v273];
      char *v279 = 0;
      *((_WORD *)v279 + 1) = *((_WORD *)&v423 + v274);
      char v280 = v276;
      if ((_DWORD)v274)
      {
        char v280 = v275;
        if ((_DWORD)v274 != 4) {
          char v280 = 3;
        }
      }

      v279[1] = v280;
      __int16 v281 = *((_WORD *)&v410 + v274);
      if (v281)
      {
        memcpy((char *)&a3[v273 + 2] + 1, v278, *((unsigned __int16 *)&v410 + v274));
        a3[v273 + 828] = v281;
      }

      __int16 v282 = *((_WORD *)&v408 + v274);
      if (v282)
      {
        memcpy(&a3[v273 + 829], v277, *((unsigned __int16 *)&v408 + v274));
        a3[v273 + 1654] = v282;
      }

      switch((int)v274)
      {
        case 0:
          int v283 = *(unsigned __int16 *)(a1 + 17002);
          if (!*(_WORD *)(a1 + 17002)) {
            goto LABEL_480;
          }
          v284 = (os_log_s *)qword_1008F7648;
          if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::stringbuf::string_type __dst = 67109120;
            *(_DWORD *)&__dst[4] = v283;
            _os_log_impl( (void *)&_mh_execute_header,  v284,  OS_LOG_TYPE_DEFAULT,  "Using override value (%d) for connectable advertisement interval",  __dst,  8u);
            LOWORD(v283) = *(_WORD *)(a1 + 17002);
          }

          break;
        case 1:
          int v283 = *(unsigned __int16 *)(a1 + 17004);
          if (!*(_WORD *)(a1 + 17004)) {
            goto LABEL_480;
          }
          v285 = (os_log_s *)qword_1008F7648;
          if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::stringbuf::string_type __dst = 67109120;
            *(_DWORD *)&__dst[4] = v283;
            _os_log_impl( (void *)&_mh_execute_header,  v285,  OS_LOG_TYPE_DEFAULT,  "Using override value (%d) for non connectable advertisement interval",  __dst,  8u);
            LOWORD(v283) = *(_WORD *)(a1 + 17004);
          }

          break;
        case 2:
          int v286 = *(unsigned __int16 *)(a1 + 17012);
          if (*(_WORD *)(a1 + 17012))
          {
            v287 = (os_log_s *)qword_1008F7648;
            if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::stringbuf::string_type __dst = 67109120;
              *(_DWORD *)&__dst[4] = v286;
              _os_log_impl( (void *)&_mh_execute_header,  v287,  OS_LOG_TYPE_DEFAULT,  "Using override value (%d) for Contact advertisement interval",  __dst,  8u);
              LOWORD(v286) = *(_WORD *)(a1 + 17012);
            }

            *((_WORD *)v279 + 1) = v286;
          }

          uint64_t v288 = sub_1002E6E00();
          goto LABEL_480;
        case 3:
          int v283 = *(unsigned __int16 *)(a1 + 17006);
          if (!*(_WORD *)(a1 + 17006)) {
            goto LABEL_480;
          }
          v289 = (os_log_s *)qword_1008F7648;
          if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::stringbuf::string_type __dst = 67109120;
            *(_DWORD *)&__dst[4] = v283;
            _os_log_impl( (void *)&_mh_execute_header,  v289,  OS_LOG_TYPE_DEFAULT,  "Using override value (%d) for non connectable secondary advertisement interval",  __dst,  8u);
            LOWORD(v283) = *(_WORD *)(a1 + 17006);
          }

          break;
        case 4:
          int v283 = *(unsigned __int16 *)(a1 + 17010);
          if (!*(_WORD *)(a1 + 17010)) {
            goto LABEL_480;
          }
          v290 = (os_log_s *)qword_1008F7648;
          if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::stringbuf::string_type __dst = 67109120;
            *(_DWORD *)&__dst[4] = v283;
            _os_log_impl( (void *)&_mh_execute_header,  v290,  OS_LOG_TYPE_DEFAULT,  "Using override value (%d) for Extended advertisement interval",  __dst,  8u);
            LOWORD(v283) = *(_WORD *)(a1 + 17010);
          }

          break;
        default:
          goto LABEL_480;
      }

      *((_WORD *)v279 + 1) = v283;
LABEL_480:
      v291 = (os_log_s *)qword_1008F7650;
      if (os_log_type_enabled((os_log_t)qword_1008F7650, OS_LOG_TYPE_DEBUG))
      {
        _X8 = v279 + 4992;
        __asm { PRFM            #0, [X8] }

        _X8 = v279 + 3338;
        int v297 = (unsigned __int16)a3[v273 + 828];
        _X11 = (char *)&a3[v273 + 3322];
        uint64_t v299 = v405[v274];
        __asm { PRFM            #0, [X11] }

        LODWORD(_X11) = (unsigned __int16)a3[v273 + 1654];
        __asm { PRFM            #0, [X8] }

        LODWORD(_X8) = *((unsigned __int16 *)v279 + 1);
        int v302 = LOBYTE(a3[v273 + 1655]);
        int v303 = HIBYTE(a3[v273 + 1658]);
        int v304 = v279[1];
        *(_DWORD *)std::stringbuf::string_type __dst = 67112706;
        *(_DWORD *)&__dst[4] = v274;
        *(_WORD *)&__dst[8] = 1040;
        *(_DWORD *)&__dst[10] = v297;
        *(_WORD *)&__dst[14] = 2096;
        *(void *)&__dst[16] = (char *)&a3[v273 + 2] + 1;
        *(_WORD *)&__dst[24] = 1024;
        *(_DWORD *)&__dst[26] = v297;
        *(_WORD *)&__dst[30] = 2048;
        uint64_t v355 = v299;
        __int16 v356 = 1040;
        int v357 = (int)_X11;
        __int16 v358 = 2096;
        uint64_t v359 = (uint64_t)&a3[v273 + 829];
        __int16 v360 = 1024;
        int v361 = (int)_X11;
        __int16 v362 = 2048;
        uint64_t v363 = v299;
        __int16 v364 = 1024;
        int v365 = (int)_X8;
        __int16 v366 = 1040;
        int v367 = 6;
        __int16 v368 = 2096;
        uint64_t v369 = (uint64_t)&a3[v273 + 1655] + 1;
        __int16 v370 = 1024;
        int v371 = v302;
        __int16 v372 = 1024;
        int v373 = v303;
        __int16 v374 = 1024;
        int v375 = v304;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v291,  OS_LOG_TYPE_DEBUG,  "%d. AdvData=%.*P(%d/%ld) ScanRspData=%.*P(%d/%ld) interval=%x address:%.6P type:%d overrideAddress:%d ADVType:%d",  __dst,  0x70u);
      }

LABEL_507:
  *(void *)v414 = &v342;
  sub_1003ADE48((void ***)v414);
  *(void *)v414 = &v345;
  sub_1003ADE48((void ***)v414);
  *(void *)v414 = &v348;
  sub_1003ADE48((void ***)v414);
  *(void *)v414 = &v351;
  sub_1003ADE48((void ***)v414);
}

void sub_10057951C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, char a46, uint64_t a47, uint64_t a48, char a49, uint64_t a50,uint64_t a51,char a52)
{
  int v53 = (void *)STACK[0x4A0];
  if (STACK[0x4A0])
  {
    STACK[0x4A8] = (unint64_t)v53;
    operator delete(v53);
  }

  int v54 = (void *)STACK[0x560];
  if (STACK[0x560])
  {
    STACK[0x568] = (unint64_t)v54;
    operator delete(v54);
  }

  STACK[0x25A0] = (unint64_t)&a43;
  sub_1003ADE48((void ***)&STACK[0x25A0]);
  STACK[0x25A0] = (unint64_t)&a46;
  sub_1003ADE48((void ***)&STACK[0x25A0]);
  STACK[0x25A0] = (unint64_t)&a49;
  sub_1003ADE48((void ***)&STACK[0x25A0]);
  STACK[0x25A0] = (unint64_t)&a52;
  sub_1003ADE48((void ***)&STACK[0x25A0]);
  _Unwind_Resume(a1);
}

void sub_100579838(void *a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10057D8C0(a1, v4);
  }

  else if (!v3)
  {
    a1[1] = *a1 + 20 * a2;
  }

uint64_t sub_100579874( uint64_t a1, _BYTE *a2, unsigned int a3, __int128 **a4, unsigned int a5, void **a6, void **a7)
{
  switch(a5)
  {
    case 2u:
      char v13 = 2;
      char v14 = 3;
      break;
    case 0x10u:
      char v13 = 6;
      char v14 = 7;
      break;
    case 4u:
      char v13 = 4;
      char v14 = 5;
      break;
    default:
      return 0;
  }

  uint64_t v15 = (char *)a4[1] - (char *)*a4;
  if (!v15 || a5 + 2 > a3) {
    return 0;
  }
  unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * (v15 >> 2);
  unsigned int v19 = (unsigned __int16)(a3 - 2);
  if (v18 >= v19 / a5) {
    unint64_t v20 = v19 / a5;
  }
  else {
    unint64_t v20 = v18;
  }
  unsigned __int16 v56 = v20 * a5 + 1;
  log = (os_log_s *)qword_1008F7650;
  if (os_log_type_enabled((os_log_t)qword_1008F7650, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 67110144;
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = 2;
    *(_WORD *)&buf[14] = 1024;
    unsigned int v58 = v19;
    __int16 v59 = 1024;
    int v60 = v20;
    __int16 v61 = 1024;
    int v62 = v56;
    _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "uuidsToData size:%d position:%d sizeRemaining:%d numUUISThatFit:%d advStructureLen:%d",  buf,  0x20u);
  }

  *a2 = v56;
  else {
    char v21 = v13;
  }
  a2[1] = v21;
  __int128 v22 = *a4;
  if (*a4 == a4[1])
  {
    return 2;
  }

  else
  {
    int v23 = a3 - a5;
    unsigned __int16 v16 = 2;
    do
    {
      if (v23 >= v16)
      {
        __int128 v28 = *v22;
        unsigned int v58 = *((_DWORD *)v22 + 4);
        *(_OWORD *)stat buf = v28;
        sub_1001BEF1C(&a2[v16], buf, 1);
        uint64_t v30 = (char *)a6[1];
        BOOL v29 = (char *)a6[2];
        if (v30 >= v29)
        {
          unint64_t v38 = 0xCCCCCCCCCCCCCCCDLL * ((v30 - (_BYTE *)*a6) >> 2);
          unint64_t v39 = v38 + 1;
          if (v38 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            abort();
          }
          unint64_t v40 = 0xCCCCCCCCCCCCCCCDLL * ((v29 - (_BYTE *)*a6) >> 2);
          if (2 * v40 > v39) {
            unint64_t v39 = 2 * v40;
          }
          if (v40 >= 0x666666666666666LL) {
            unint64_t v41 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41) {
            uint64_t v42 = (char *)sub_100050420((uint64_t)(a6 + 2), v41);
          }
          else {
            uint64_t v42 = 0LL;
          }
          uint64_t v49 = &v42[20 * v38];
          __int128 v50 = *v22;
          *((_DWORD *)v49 + 4) = *((_DWORD *)v22 + 4);
          *(_OWORD *)uint64_t v49 = v50;
          int v52 = (char *)*a6;
          int v51 = (char *)a6[1];
          int v53 = v49;
          if (v51 != *a6)
          {
            do
            {
              __int128 v54 = *(_OWORD *)(v51 - 20);
              *((_DWORD *)v53 - 1) = *((_DWORD *)v51 - 1);
              *(_OWORD *)(v53 - 20) = v54;
              v53 -= 20;
              v51 -= 20;
            }

            while (v51 != v52);
            int v51 = (char *)*a6;
          }

          uint64_t v32 = v49 + 20;
          *a6 = v53;
          a6[1] = v49 + 20;
          a6[2] = &v42[20 * v41];
          if (v51) {
            operator delete(v51);
          }
        }

        else
        {
          __int128 v31 = *v22;
          *((_DWORD *)v30 + 4) = *((_DWORD *)v22 + 4);
          *(_OWORD *)uint64_t v30 = v31;
          uint64_t v32 = v30 + 20;
        }

        v16 += a5;
        a6[1] = v32;
      }

      else
      {
        uint64_t v25 = (char *)a7[1];
        uint64_t v24 = (char *)a7[2];
        if (v25 >= v24)
        {
          unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((v25 - (_BYTE *)*a7) >> 2);
          unint64_t v34 = v33 + 1;
          if (v33 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            abort();
          }
          unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * ((v24 - (_BYTE *)*a7) >> 2);
          if (2 * v35 > v34) {
            unint64_t v34 = 2 * v35;
          }
          if (v35 >= 0x666666666666666LL) {
            unint64_t v36 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36) {
            uint64_t v37 = (char *)sub_100050420((uint64_t)(a7 + 2), v36);
          }
          else {
            uint64_t v37 = 0LL;
          }
          int v43 = &v37[20 * v33];
          __int128 v44 = *v22;
          *((_DWORD *)v43 + 4) = *((_DWORD *)v22 + 4);
          *(_OWORD *)int v43 = v44;
          int v46 = (char *)*a7;
          unsigned int v45 = (char *)a7[1];
          unint64_t v47 = v43;
          if (v45 != *a7)
          {
            do
            {
              __int128 v48 = *(_OWORD *)(v45 - 20);
              *((_DWORD *)v47 - 1) = *((_DWORD *)v45 - 1);
              *(_OWORD *)(v47 - 20) = v48;
              v47 -= 20;
              v45 -= 20;
            }

            while (v45 != v46);
            unsigned int v45 = (char *)*a7;
          }

          __int128 v27 = v43 + 20;
          *a7 = v47;
          a7[1] = v43 + 20;
          a7[2] = &v37[20 * v36];
          if (v45) {
            operator delete(v45);
          }
        }

        else
        {
          __int128 v26 = *v22;
          *((_DWORD *)v25 + 4) = *((_DWORD *)v22 + 4);
          *(_OWORD *)uint64_t v25 = v26;
          __int128 v27 = v25 + 20;
        }

        a7[1] = v27;
      }

      __int128 v22 = (__int128 *)((char *)v22 + 20);
    }

    while (v22 != a4[1]);
  }

  return v16;
}

uint64_t sub_100579CA0(uint64_t a1, _BYTE *a2, unsigned int a3, __int128 **a4, unsigned int a5, void **a6)
{
  uint64_t v6 = (char *)a4[1] - (char *)*a4;
  if (!v6) {
    return 0;
  }
  __int16 v7 = a5;
  if (a5 + 2 > a3) {
    return 0;
  }
  unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 2);
  *a2 = v13 * a5 + 1;
  switch(a5)
  {
    case 2u:
      char v14 = 20;
      break;
    case 0x10u:
      char v14 = 21;
      break;
    case 4u:
      char v14 = 31;
      break;
    default:
      return 0;
  }

  a2[1] = v14;
  unsigned __int16 v16 = *a4;
  uint64_t v15 = a4[1];
  if (*a4 == v15)
  {
    return 2;
  }

  else
  {
    int v17 = a3 - a5;
    uint64_t v34 = (uint64_t)(a6 + 2);
    unsigned __int16 v8 = 2;
    do
    {
      if (v17 >= v8)
      {
        __int128 v18 = *v16;
        int v36 = *((_DWORD *)v16 + 4);
        __int128 v35 = v18;
        sub_1001BEF1C(&a2[v8], (unsigned __int8 *)&v35, 1);
        unint64_t v20 = (char *)a6[1];
        unsigned int v19 = (char *)a6[2];
        if (v20 >= v19)
        {
          unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - (_BYTE *)*a6) >> 2);
          unint64_t v24 = v23 + 1;
          if (v23 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            abort();
          }
          unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - (_BYTE *)*a6) >> 2);
          if (2 * v25 > v24) {
            unint64_t v24 = 2 * v25;
          }
          if (v25 >= 0x666666666666666LL) {
            unint64_t v26 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26) {
            __int128 v27 = (char *)sub_100050420(v34, v26);
          }
          else {
            __int128 v27 = 0LL;
          }
          __int128 v28 = &v27[20 * v23];
          __int128 v29 = *v16;
          *((_DWORD *)v28 + 4) = *((_DWORD *)v16 + 4);
          *(_OWORD *)__int128 v28 = v29;
          __int128 v31 = (char *)*a6;
          uint64_t v30 = (char *)a6[1];
          uint64_t v32 = v28;
          if (v30 != *a6)
          {
            do
            {
              __int128 v33 = *(_OWORD *)(v30 - 20);
              *((_DWORD *)v32 - 1) = *((_DWORD *)v30 - 1);
              *(_OWORD *)(v32 - 20) = v33;
              v32 -= 20;
              v30 -= 20;
            }

            while (v30 != v31);
            uint64_t v30 = (char *)*a6;
          }

          __int128 v22 = v28 + 20;
          *a6 = v32;
          a6[1] = v28 + 20;
          a6[2] = &v27[20 * v26];
          if (v30) {
            operator delete(v30);
          }
        }

        else
        {
          __int128 v21 = *v16;
          *((_DWORD *)v20 + 4) = *((_DWORD *)v16 + 4);
          *(_OWORD *)unint64_t v20 = v21;
          __int128 v22 = v20 + 20;
        }

        v8 += v7;
        a6[1] = v22;
        uint64_t v15 = a4[1];
      }

      unsigned __int16 v16 = (__int128 *)((char *)v16 + 20);
    }

    while (v16 != v15);
  }

  return v8;
}

uint64_t sub_100579F08(uint64_t a1, uint64_t a2, __int16 a3, void *a4, uint64_t **a5, int a6)
{
  __int16 v7 = a4 + 1;
  uint64_t v6 = (void *)*a4;
  if ((void *)*a4 == a4 + 1)
  {
LABEL_17:
    LOWORD(v10) = 0;
  }

  else
  {
    int v10 = 0;
    __int16 v11 = a6 + 1;
    do
    {
      __int16 v12 = sub_10056AAD8((uint64_t)(v6 + 7));
      switch(a6)
      {
        case 2:
          char v13 = 22;
          break;
        case 16:
          char v13 = 33;
          break;
        case 4:
          char v13 = 32;
          break;
        default:
          goto LABEL_17;
      }

      *(_BYTE *)(a2 + (unsigned __int16)v10) = v11 + v12;
      *(_BYTE *)(a2 + (unsigned __int16)(v10 + 1)) = v13;
      __int128 v26 = *((_OWORD *)v6 + 2);
      int v27 = *((_DWORD *)v6 + 12);
      sub_1001BEF1C((_BYTE *)(a2 + (unsigned __int16)(v10 + 2)), (unsigned __int8 *)&v26, 1);
      int v14 = v10 + 2 + a6;
      uint64_t v15 = (const void *)sub_10056AAF0((uint64_t)(v6 + 7));
      size_t v16 = sub_10056AAD8((uint64_t)(v6 + 7));
      memcpy((void *)(a2 + (unsigned __int16)v14), v15, v16);
      int v17 = sub_10056AAD8((uint64_t)(v6 + 7));
      unint64_t v25 = v6 + 4;
      __int128 v18 = sub_10002E92C(a5, (unsigned __int8 *)v6 + 32, (uint64_t)&unk_1006C2518, &v25);
      sub_10002EAC8((uint64_t)v18 + 56, (uint64_t)(v6 + 7));
      unsigned int v19 = (void *)v6[1];
      if (v19)
      {
        do
        {
          unint64_t v20 = v19;
          unsigned int v19 = (void *)*v19;
        }

        while (v19);
      }

      else
      {
        do
        {
          unint64_t v20 = (void *)v6[2];
          BOOL v21 = *v20 == (void)v6;
          uint64_t v6 = v20;
        }

        while (!v21);
      }

      int v10 = v14 + v17;
      uint64_t v6 = v20;
    }

    while (v20 != v7);
  }

  return (unsigned __int16)v10;
}

BOOL sub_10057A0D8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (*a2 != *a3) {
    return 1LL;
  }
  if (a2[4] != a3[4]) {
    return 1LL;
  }
  if (a2[3317] != a3[3317]) {
    return 1LL;
  }
  if (a2[3318] != a3[3318]) {
    return 1LL;
  }
  size_t v5 = *(unsigned __int16 *)(a1 + 16904);
  if (memcmp(a2 + 5, a3 + 5, v5) || memcmp(a2 + 1658, a3 + 1658, v5)) {
    return 1LL;
  }
  return *(_DWORD *)(a2 + 3310) != *(_DWORD *)(a3 + 3310) || *(_DWORD *)(a2 + 3313) != *(_DWORD *)(a3 + 3313);
}

void sub_10057A1D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (!*(void *)(v1 + 8 * v2 + 16952))
  {
    if ((_DWORD)v2 == 1)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10057A3B4;
      block[3] = &unk_10087EB20;
      block[4] = v1;
      dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, block);
      uint64_t v10 = *(unsigned int *)(a1 + 40);
      uint64_t v11 = v1 + 16952;
      __int16 v12 = *(void **)(v11 + 8 * v10);
      *(void *)(v11 + 8 * v10) = v9;

      uint64_t v13 = sub_100404EB8();
      sub_100405460(v13, 10000LL, *(void **)(v11 + 8LL * *(unsigned int *)(a1 + 40)));
    }

    else if (!(_DWORD)v2)
    {
      dispatch_block_t v4 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, &stru_1008A1C00);
      uint64_t v5 = *(unsigned int *)(a1 + 40);
      uint64_t v6 = v1 + 16952;
      __int16 v7 = *(void **)(v6 + 8 * v5);
      *(void *)(v6 + 8 * v5) = v4;

      uint64_t v8 = sub_100404EB8();
      sub_100405460(v8, 10000LL, *(void **)(v6 + 8LL * *(unsigned int *)(a1 + 40)));
    }
  }

void sub_10057A2C8(id a1)
{
  uint64_t v1 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
    sub_1006953E8(v1, v2, v3, v4, v5, v6, v7, v8);
  }
  char v11 = 0;
  sub_100242CA4(&v11);
  if (!sub_1000B1BD0())
  {
    sub_1001BC434();
    sub_100242CD0(&v11);
    uint64_t v9 = sub_1002E6E00();
    sub_10002418C(v10, "updateAdvertisement busy with address change timeout");
    sub_1004FB370(v9, 4074LL, (uint64_t)v10, 1);
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
    sub_1006953BC();
  }
  sub_100242CD8(&v11);
}

void sub_10057A388( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_100242CD8((_BYTE *)(v14 - 17));
  _Unwind_Resume(a1);
}

_BYTE *sub_10057A3B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
    sub_100695454(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  char v22 = 0;
  uint64_t v10 = sub_1002E6E00();
  sub_10002418C(v20, "LE");
  sub_10002418C(__p, "CrashOnAdvertisingWatchdog");
  int v11 = (*(uint64_t (**)(uint64_t, void **, void **, char *))(*(void *)v10 + 72LL))(v10, v20, __p, &v22);
  if (v22) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (v12)
  {
    uint64_t v15 = sub_1002E6E00();
    sub_10002418C(v17, "updateAdvertisement in unsettled state timeout");
    sub_1004FB370(v15, 4075LL, (uint64_t)v17, 1);
  }

  sub_10056F8E0(v1, 0LL);
  LOBYTE(v20[0]) = 0;
  sub_100242CA4(v20);
  if (sub_1000B1BD0())
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
      sub_1006953BC();
    }
  }

  else
  {
    sub_1001BC434();
    sub_1001BA310(1);
    uint64_t v13 = *(void *)(v1 + 48);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    _DWORD v16[2] = sub_10057A59C;
    v16[3] = &unk_10087EB20;
    v16[4] = v1;
    sub_100405460(v13, 200LL, v16);
  }

  return sub_100242CD8(v20);
}

void sub_10057A544( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10057A59C(uint64_t a1)
{
  return sub_10057080C(*(void *)(a1 + 32), 0LL);
}

void sub_10057A5A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 8LL * *(unsigned int *)(a1 + 40) + 16952);
  if (v3)
  {
    dispatch_block_cancel(v3);
    uint64_t v4 = v2 + 8LL * *(unsigned int *)(a1 + 40);
    uint64_t v5 = *(void **)(v4 + 16952);
    *(void *)(v4 + 16952) = 0LL;
  }

uint64_t sub_10057A5F8(uint64_t a1)
{
  return sub_10057080C(*(void *)(a1 + 32), 1LL);
}

void sub_10057A604(int a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10057AEFC;
  v3[3] = &unk_10087F980;
  int v4 = a1;
  sub_100405384(v2, v3);
}

uint64_t sub_10057A664(uint64_t a1)
{
  return sub_10057080C(*(void *)(a1 + 32), 0LL);
}

uint64_t sub_10057A670(uint64_t a1)
{
  return sub_10057080C(*(void *)(a1 + 32), 0);
}

uint64_t sub_10057A67C(uint64_t a1)
{
  return sub_10057080C(*(void *)(a1 + 32), 0);
}

uint64_t sub_10057A688(uint64_t a1, unint64_t a2, int a3)
{
  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_100242F28((uint64_t)v18, a1 + 56);
  uint64_t v6 = *(void **)(a1 + 16832);
  if (v6)
  {
    uint64_t v7 = a1 + 16832;
    do
    {
      unint64_t v8 = v6[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        uint64_t v10 = v6;
      }
      else {
        uint64_t v10 = v6 + 1;
      }
      if (v9) {
        uint64_t v7 = (uint64_t)v6;
      }
      uint64_t v6 = (void *)*v10;
    }

    while (*v10);
    if (v7 != a1 + 16832 && *(void *)(v7 + 32) <= a2 && *(_BYTE *)(a1 + 41))
    {
      if (qword_1008D67C8 != -1) {
        dispatch_once(&qword_1008D67C8, &stru_1008A1C60);
      }
      BOOL v11 = sub_10027D914((uint64_t)off_1008D67C0, a2);
      BOOL v12 = os_log_type_enabled((os_log_t)qword_1008F7650, OS_LOG_TYPE_DEBUG);
      if (v11)
      {
        if (v12)
        {
          sub_100494958(a2, (uint64_t)v17);
          sub_1006954C0();
        }

        uint64_t v13 = *(void *)(v7 + 48);
        if (v13) {
          sub_1002CD1E0(*(void *)(v7 + 48));
        }
        *(_BYTE *)(v13 + 336) |= a3 == 16;
        if (a3 == 8 || a3 == 4) {
          sub_100574534(a1, a2);
        }
        else {
          sub_100574A40((void *)a1, a2);
        }
        sub_1002CD254((unsigned int *)v13);
      }

      else
      {
        if (v12)
        {
          sub_100494958(a2, (uint64_t)v17);
          sub_100695518();
        }

        uint64_t v14 = *(void *)(a1 + 48);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472LL;
        _DWORD v16[2] = sub_10057A8C0;
        v16[3] = &unk_10087EB20;
        v16[4] = a1;
        sub_100405384(v14, v16);
      }
    }
  }

  return sub_100242FAC((uint64_t)v18);
}

void sub_10057A888( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10057A8C0(uint64_t a1)
{
  return sub_10057080C(*(void *)(a1 + 32), 0);
}

uint64_t sub_10057A8CC(uint64_t a1, int a2)
{
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, a1 + 56);
  if (*(_BYTE *)(a1 + 41))
  {
    if (a2 != 4073 && a2)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
        sub_100695560();
      }
      sub_10056F8E0(a1, 0);
      buf[0] = 0;
      sub_100242CA4(buf);
      sub_1001BA310(1);
      sub_100242CD0(buf);
      uint64_t v9 = *(void *)(a1 + 48);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      void v17[2] = sub_10057ACB8;
      void v17[3] = &unk_10087EB20;
      _DWORD v17[4] = a1;
      sub_100405384(v9, v17);
      sub_100242CD8(buf);
    }

    else
    {
      int v4 = (_BYTE *)(a1 + 16944);
      uint64_t v5 = (os_log_s *)qword_1008F7648;
      if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = "Stopped";
        if (*(_DWORD *)(a1 + 120) == 1) {
          uint64_t v6 = "Started";
        }
        *(_DWORD *)stat buf = 136446466;
        *(void *)&uint8_t buf[4] = v6;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%{public}s advertising successfully status=%{bluetooth:OI_STATUS}u",  buf,  0x12u);
      }

      unsigned int v7 = *(unsigned __int16 *)(a1 + 16968);
      if (*(_WORD *)(a1 + 16968) && (++word_1008F1CE0, !((unsigned __int16)word_1008F1CE0 % v7)))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
          sub_1006955E8();
        }
      }

      else if (*(_DWORD *)(a1 + 120) == 1)
      {
        sub_10056F8E0(a1, 2u);
        if (!*(_BYTE *)(a1 + 17072)) {
          sub_10056F448(a1);
        }
      }

      else
      {
        sub_10056F8E0(a1, 0);
      }

      memset(buf, 0, sizeof(buf));
      sub_10057D75C((uint64_t *)buf, a1 + 16880);
      uint64_t v10 = *(uint8_t **)buf;
      if (*(uint8_t **)buf != &buf[8])
      {
        do
        {
          (***((void (****)(void, BOOL))v10 + 4))(*((void *)v10 + 4), *(_DWORD *)(a1 + 120) != 0);
          BOOL v11 = (uint8_t *)*((void *)v10 + 1);
          if (v11)
          {
            do
            {
              BOOL v12 = v11;
              BOOL v11 = *(uint8_t **)v11;
            }

            while (v11);
          }

          else
          {
            do
            {
              BOOL v12 = (uint8_t *)*((void *)v10 + 2);
              BOOL v13 = *(void *)v12 == (void)v10;
              uint64_t v10 = v12;
            }

            while (!v13);
          }

          uint64_t v10 = v12;
        }

        while (v12 != &buf[8]);
      }

      if (a2 == 4073)
      {
        uint64_t v14 = (os_log_s *)qword_1008F7648;
        if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)char v19 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Advertising stopped due to LE_GAP_ADDRESS_REFRESH_IN_PROGRESS, need to update our advertisers",  v19,  2u);
        }

        *int v4 = 1;
      }

      else
      {
        uint64_t v15 = *(void *)(a1 + 48);
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472LL;
        void v18[2] = sub_10057ACA8;
        uint64_t v18[3] = &unk_10087EB20;
        _OWORD v18[4] = a1;
        sub_100405384(v15, v18);
      }

      sub_100242F54((uint64_t)v20);
      sub_10023BF24((uint64_t)buf, *(void **)&buf[8]);
    }
  }

  else
  {
    unint64_t v8 = (os_log_s *)qword_1008F7648;
    if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Stack is off", buf, 2u);
    }

    sub_10056F8E0(a1, 0);
  }

  return sub_100242FAC((uint64_t)v20);
}

void sub_10057AC5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_10057ACA8(uint64_t a1)
{
  return sub_10057080C(*(void *)(a1 + 32), *(unsigned __int8 *)(*(void *)(a1 + 32) + 16945LL));
}

uint64_t sub_10057ACB8(uint64_t a1)
{
  return sub_10057080C(*(void *)(a1 + 32), 0LL);
}

uint64_t sub_10057ACC4(uint64_t result, int a2, uint64_t a3, int a4)
{
  if (a2) {
    return result;
  }
  uint64_t v5 = result;
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, result + 56);
  *(_BYTE *)(v5 + 16872) = a4;
  if (a4) {
    int v6 = 2;
  }
  else {
    int v6 = 1;
  }
  *(_DWORD *)(v5 + 136) = v6;
  char v19 = 0;
  sub_100242CA4(&v19);
  *(_WORD *)(v5 + 16904) = sub_10019E55C();
  sub_100242CD0(&v19);
  uint64_t v7 = *(unsigned __int16 *)(v5 + 16904);
  if (v7 >= 0x673)
  {
    unint64_t v8 = (os_log_s *)qword_1008F7648;
    if (!os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_FAULT))
    {
LABEL_7:
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_100695614(v7, v8, v9, v10, v11, v12, v13, v14);
      }
      *(_WORD *)(v5 + 16904) = 1650;
      goto LABEL_10;
    }

    *(_DWORD *)stat buf = 67109120;
    int v22 = v7;
    _os_log_fault_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "fControllerMaxExtendedAdvertisingPayloadSize=%d",  buf,  8u);
    uint64_t v7 = *(unsigned __int16 *)(v5 + 16904);
    if (v7 >= 0x673)
    {
      unint64_t v8 = (os_log_s *)qword_1008F7648;
      goto LABEL_7;
    }
  }

void sub_10057AEC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

uint64_t sub_10057AEF0(uint64_t a1)
{
  return sub_10057080C(*(void *)(a1 + 32), 0);
}

uint64_t sub_10057AEFC(uint64_t a1)
{
  if (qword_1008D6288 != -1) {
    dispatch_once(&qword_1008D6288, &stru_1008A1CC0);
  }
  return sub_10057A8CC((uint64_t)off_1008D6280, *(_DWORD *)(a1 + 32));
}

uint64_t sub_10057AF4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1008D6288 != -1) {
    dispatch_once(&qword_1008D6288, &stru_1008A1CC0);
  }
  return sub_10057ACC4((uint64_t)off_1008D6280, *(_DWORD *)(a1 + 40), a3, *(unsigned __int8 *)(a1 + 44));
}

uint64_t sub_10057AFA0(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v7 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109632;
    v10[1] = a2;
    __int16 v11 = 1024;
    int v12 = a3;
    __int16 v13 = 1024;
    int v14 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "setAddressTypeForInstance instance:%d addrType:%d refreshRootKeys:%d",  (uint8_t *)v10,  0x14u);
  }

  if (a2 != 1) {
    return 3LL;
  }
  if ((a3 & 0xFFFFFFFE) != 2) {
    return 0LL;
  }
  if (a4)
  {
    unint64_t v8 = (os_log_s *)qword_1008F7648;
    if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "setAddressTypeForInstance requires refresh of identity info",  (uint8_t *)v10,  2u);
    }

    if (qword_1008D5F20 != -1) {
      dispatch_once(&qword_1008D5F20, &stru_1008A1CE0);
    }
    if (sub_100619C74((__n128 *)qword_1008D5F18))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
        sub_1006956DC();
      }
      return 148LL;
    }
  }

  LOBYTE(v10[0]) = 0;
  sub_100242CA4(v10);
  if (!sub_1001BDDF4(a3, 1))
  {
    sub_100242CD8(v10);
    return 0LL;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
    sub_10069567C();
  }
  sub_100242CD8(v10);
  return 147LL;
}

void sub_10057B188( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_10057B1A4(uint64_t a1, unint64_t a2)
{
  char v5 = 0;
  sub_100242CA4(&v5);
  uint64_t v3 = sub_1001BCA1C(a2);
  if ((_DWORD)v3 && os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_ERROR)) {
    sub_10069573C();
  }
  sub_100242CD8(&v5);
  return v3;
}

void sub_10057B21C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10057B230()
{
  uint64_t v0 = sub_100404FE8();
  sub_100405384(v0, &stru_1008A1C20);
}

void sub_10057B24C(id a1)
{
  char v1 = 0;
  sub_100242CA4(&v1);
  sub_1001BDE68();
  sub_100242CD8(&v1);
}

void sub_10057B284( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10057B298(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10057B300;
  v5[3] = &unk_1008800D8;
  void v5[4] = a1;
  char v6 = a2;
  sub_100405384(v4, v5);
}

uint64_t sub_10057B300(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  *(_BYTE *)(v1 + 40) = *(_BYTE *)(result + 40);
  if (*(_BYTE *)(v1 + 16874))
  {
    uint64_t v2 = (os_log_s *)qword_1008F7650;
    if (os_log_type_enabled((os_log_t)qword_1008F7650, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Screen state changed, updating advertisers",  v3,  2u);
    }

    return sub_10057080C(v1, 0);
  }

  return result;
}

void sub_10057B388(uint64_t a1, char a2)
{
}

void sub_10057B390()
{
  uint64_t v0 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "Stream state changed, re-evaluating scan params",  v2,  2u);
  }

  uint64_t v1 = sub_100404FE8();
  sub_100405384(v1, &stru_1008A1C40);
}

void sub_10057B404(id a1)
{
  if (qword_1008D6288 != -1) {
    dispatch_once(&qword_1008D6288, &stru_1008A1CC0);
  }
  sub_10057080C((uint64_t)off_1008D6280, 0);
}

void sub_10057B448()
{
}

void sub_10057B450(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  if (v3) {
    sub_1002CD1E0(*(void *)(a2 + 48));
  }
  sub_10056B86C(v3, 2, __p);
  char v5 = __p[0];
  uint64_t v4 = __p[1];
  sub_10056B86C(v3, 4, __p);
  uint64_t v7 = __p[0];
  char v6 = (char *)__p[1];
  sub_10056B86C(v3, 16, __p);
  unint64_t v8 = __p[0];
  uint64_t v9 = __p[1];
  uint64_t v10 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
  {
    sub_100494958(*(void *)(a2 + 32), (uint64_t)__p);
    if ((SBYTE7(v81) & 0x80u) == 0) {
      __int16 v11 = __p;
    }
    else {
      __int16 v11 = (void **)__p[0];
    }
    int v12 = "";
    if (!*(_BYTE *)(v3 + 12)) {
      int v12 = "NON-";
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v12;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "statedump:    %{public}s %{public}sConnectable",  (uint8_t *)&buf,  0x16u);
    if (SBYTE7(v81) < 0) {
      operator delete(__p[0]);
    }
  }

  __int16 v13 = (_OWORD *)(v3 + 16);
  if (*(char *)(v3 + 39) < 0)
  {
    sub_100024238(__p, *(void **)(v3 + 16), *(void *)(v3 + 24));
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *v13;
    *(void *)&__int128 v81 = *(void *)(v3 + 32);
  }

  uint64_t v76 = v7;
  if (SBYTE7(v81) < 0)
  {
    int v14 = __p[1];
    operator delete(__p[0]);
    if (!v14) {
      goto LABEL_26;
    }
  }

  else if (!BYTE7(v81))
  {
    goto LABEL_26;
  }

  uint64_t v15 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(v3 + 39) < 0)
    {
      sub_100024238(__p, *(void **)(v3 + 16), *(void *)(v3 + 24));
    }

    else
    {
      *(_OWORD *)std::stringbuf::string_type __p = *v13;
      *(void *)&__int128 v81 = *(void *)(v3 + 32);
    }

    size_t v16 = __p;
    if (SBYTE7(v81) < 0) {
      size_t v16 = (void **)__p[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "statedump:       Name: %s",  (uint8_t *)&buf,  0xCu);
    if (SBYTE7(v81) < 0) {
      operator delete(__p[0]);
    }
  }

void sub_10057C2D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, char a27)
{
  if (v28)
  {
    operator delete(v28);
    if (a11)
    {
LABEL_8:
      operator delete(a11);
      if (!v29) {
LABEL_5:
      }
        _Unwind_Resume(a1);
LABEL_4:
      operator delete(v29);
      goto LABEL_5;
    }
  }

  else if (a11)
  {
    goto LABEL_8;
  }

  if (!v29) {
    goto LABEL_5;
  }
  goto LABEL_4;
}

void sub_10057C490(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 16872);
  uint64_t v3 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "statedump: -------------------- LE Broadcaster ---------------------",  buf,  2u);
    uint64_t v3 = (os_log_s *)qword_1008F7648;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = *(_DWORD *)(a1 + 120);
    if (v4 > 3) {
      char v5 = "UNKNOWN";
    }
    else {
      char v5 = off_1008A1D50[v4];
    }
    unsigned int v6 = (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 128));
    int v7 = v2[212];
    *(_DWORD *)std::stringbuf::string_type buf = 136446978;
    *(void *)uint64_t v63 = v5;
    *(_WORD *)&v63[8] = 1024;
    *(_DWORD *)&v63[10] = v4;
    *(_WORD *)&v63[14] = 1024;
    *(_DWORD *)&v63[16] = v6;
    LOWORD(v64) = 1024;
    *(_DWORD *)((char *)&v64 + 2) = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "statedump: Advertisement state: %{public}s(%d) duration:%d seconds fSystemWillSleep: %d",  buf,  0x1Eu);
    uint64_t v3 = (os_log_s *)qword_1008F7648;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(_DWORD *)(a1 + 136);
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)uint64_t v63 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: Advertisement tech: %d", buf, 8u);
    uint64_t v3 = (os_log_s *)qword_1008F7648;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = "";
    if (!v2[1]) {
      uint64_t v9 = "not";
    }
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    *(void *)uint64_t v63 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "statedump: Extended advertising %{public}s supported",  buf,  0xCu);
    uint64_t v3 = (os_log_s *)qword_1008F7648;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *v2;
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)uint64_t v63 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "statedump: Advertisement # of instances: %d",  buf,  8u);
    uint64_t v3 = (os_log_s *)qword_1008F7648;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v11 = "ON";
    if (!*(_BYTE *)(a1 + 41)) {
      __int16 v11 = "OFF";
    }
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    *(void *)uint64_t v63 = v11;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: Stack:%{public}s", buf, 0xCu);
    uint64_t v3 = (os_log_s *)qword_1008F7648;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = *((unsigned __int16 *)v2 + 16);
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)uint64_t v63 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "statedump: fControllerMaxExtendedAdvertisingPayloadSize:%d",  buf,  8u);
    uint64_t v3 = (os_log_s *)qword_1008F7648;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = v2[2];
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)uint64_t v63 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "statedump: fHostSupportsBackgroundAdvertisingOnExtended:%d",  buf,  8u);
    uint64_t v3 = (os_log_s *)qword_1008F7648;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v14 = *(void *)(a1 + 17016) != 0LL;
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)uint64_t v63 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "statedump: fConfigAdvertisingPowerAssertion:%d",  buf,  8u);
    uint64_t v3 = (os_log_s *)qword_1008F7648;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 16936);
    size_t v16 = "NO";
    if (v2[72]) {
      int v17 = "YES";
    }
    else {
      int v17 = "NO";
    }
    if (v2[73]) {
      size_t v16 = "YES";
    }
    *(_DWORD *)std::stringbuf::string_type buf = 134218754;
    *(void *)uint64_t v63 = v15;
    *(_WORD *)&v63[8] = 2082;
    *(void *)&v63[10] = v17;
    *(_WORD *)&v63[18] = 2082;
    unint64_t v64 = (unint64_t)v16;
    __int16 v65 = 2082;
    uint64_t v66 = "YES";
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "statedump: fAdvertisingPowerAssertion:%llx fAddressChangeInProgress:%{public}s fDeferringUpdateAdvertisingState:%{ public}s fAddressRefreshTimeoutCB created:%{public}s",  buf,  0x2Au);
    uint64_t v3 = (os_log_s *)qword_1008F7648;
  }

  if (*v2)
  {
    unint64_t v18 = 0LL;
    do
    {
      unint64_t v19 = a1 + 3336 * v18;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        _X8 = v19 + 6817;
        unint64_t v21 = a1 + 3336 * v18;
        __asm { PRFM            #0, [X8] }

        LODWORD(_X8) = *(unsigned __int8 *)(v21 + 145);
        LODWORD(v21) = *(unsigned __int16 *)(v21 + 146);
        *(_DWORD *)std::stringbuf::string_type buf = 67109632;
        *(_DWORD *)uint64_t v63 = v18;
        *(_WORD *)&v63[4] = 1024;
        *(_DWORD *)&v63[6] = _X8;
        *(_WORD *)&v63[10] = 1024;
        *(_DWORD *)&v63[12] = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "statedump: %d. type:%d interval:%d ",  buf,  0x14u);
        uint64_t v3 = (os_log_s *)qword_1008F7648;
      }

      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        _X8 = v19 + 8472;
        unint64_t v27 = a1 + 3336 * v18;
        __asm { PRFM            #0, [X8] }

        LODWORD(_X8) = *(unsigned __int16 *)(v27 + 1800);
        *(_DWORD *)std::stringbuf::string_type buf = 68158210;
        *(_DWORD *)uint64_t v63 = _X8;
        *(_WORD *)&v63[4] = 2096;
        *(void *)&v63[6] = v27 + 149;
        *(_WORD *)&v63[14] = 1024;
        *(_DWORD *)&v63[16] = _X8;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump:     data:%.*P(%d)", buf, 0x18u);
        uint64_t v3 = (os_log_s *)qword_1008F7648;
      }

      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        _X8 = v19 + 10124;
        unint64_t v30 = a1 + 3336 * v18;
        __asm { PRFM            #0, [X8] }

        LODWORD(_X8) = *(unsigned __int16 *)(v30 + 3452);
        *(_DWORD *)std::stringbuf::string_type buf = 68158210;
        *(_DWORD *)uint64_t v63 = _X8;
        *(_WORD *)&v63[4] = 2096;
        *(void *)&v63[6] = v30 + 1802;
        *(_WORD *)&v63[14] = 1024;
        *(_DWORD *)&v63[16] = _X8;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "statedump:     scanRspData:%.*P(%d)",  buf,  0x18u);
        uint64_t v3 = (os_log_s *)qword_1008F7648;
      }

      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int v32 = *(unsigned __int8 *)(a1 + v18 + 16921);
        *(_DWORD *)std::stringbuf::string_type buf = 67109120;
        *(_DWORD *)uint64_t v63 = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "statedump:     fObjectLocatorResponseOnAdvertisingHandle:%d",  buf,  8u);
        uint64_t v3 = (os_log_s *)qword_1008F7648;
      }

      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int v33 = *(unsigned __int8 *)(a1 + v18 + 16926);
        *(_DWORD *)std::stringbuf::string_type buf = 67109120;
        *(_DWORD *)uint64_t v63 = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "statedump:     fLEAdvTxPowerIncreaseAdvertisingHandle:%d",  buf,  8u);
        uint64_t v3 = (os_log_s *)qword_1008F7648;
      }

      ++v18;
    }

    while (v18 < *v2);
  }

  BOOL v34 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v34)
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: Advertising sessions:", buf, 2u);
  }

  uint64_t v35 = *(void *)(a1 + 16824);
  uint64_t v36 = (void *)(a1 + 16832);
  if (v35 != a1 + 16832)
  {
    do
    {
      sub_10057B450(v34, v35);
      uint64_t v37 = *(void **)(v35 + 8);
      if (v37)
      {
        do
        {
          unint64_t v38 = v37;
          uint64_t v37 = (void *)*v37;
        }

        while (v37);
      }

      else
      {
        do
        {
          unint64_t v38 = *(void **)(v35 + 16);
          _ZF = *v38 == v35;
          uint64_t v35 = (uint64_t)v38;
        }

        while (!_ZF);
      }

      uint64_t v35 = (uint64_t)v38;
    }

    while (v38 != v36);
  }

  uint64_t v39 = sub_1000B068C();
  uint64_t v40 = *(void *)(a1 + 16864);
  if (v40)
  {
    uint64_t v41 = v39;
    uint64_t v42 = a1 + 16848;
    uint64_t v43 = (os_log_s *)qword_1008F7648;
    if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      *(void *)uint64_t v63 = v40;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "statedump: Backgrounded advertising sessions (%ld, sorted):",  buf,  0xCu);
    }

    for (uint64_t i = *(void *)(a1 + 16856); i != v42; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v45 = (void *)*v36;
      if (!*v36) {
        goto LABEL_70;
      }
      unint64_t v46 = *(void *)(i + 16);
      unint64_t v47 = (void *)(a1 + 16832);
      do
      {
        unint64_t v48 = v45[4];
        _CF = v48 >= v46;
        if (v48 >= v46) {
          __int128 v50 = v45;
        }
        else {
          __int128 v50 = v45 + 1;
        }
        if (_CF) {
          unint64_t v47 = v45;
        }
        uint64_t v45 = (void *)*v50;
      }

      while (*v50);
      if (v47 == v36 || v46 < v47[4]) {
LABEL_70:
      }
        unint64_t v47 = (void *)(a1 + 16832);
      int v51 = (os_log_s *)qword_1008F7648;
      if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
      {
        sub_100494958(v47[4], (uint64_t)__p);
        int v52 = __p;
        if (v61 < 0) {
          int v52 = (void **)__p[0];
        }
        uint64_t v53 = v47[6];
        uint64_t v54 = v41 - *(void *)(v53 + 320) / 0x3E8uLL;
        unint64_t v55 = *(void *)(v53 + 328) / 0x3E8uLL;
        *(_DWORD *)std::stringbuf::string_type buf = 136446722;
        *(void *)uint64_t v63 = v52;
        *(_WORD *)&v63[8] = 2048;
        *(void *)&v63[10] = v54;
        *(_WORD *)&v63[18] = 2048;
        unint64_t v64 = v55;
        _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "statedump:    %{public}s for %llu seconds, timeout after %llu seconds",  buf,  0x20u);
        if (v61 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  unsigned __int16 v56 = (os_log_s *)qword_1008F7648;
  if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "statedump: ADV Instance address history (recent first):",  buf,  2u);
  }

  for (uint64_t j = *(void *)(a1 + 17032); j != a1 + 17024; uint64_t j = *(void *)(j + 8))
  {
    __int128 v58 = *(_OWORD *)(j + 16);
    id v59 = *(id *)(j + 32);
    sub_100572124(a1, (uint64_t)&v58);
  }

void sub_10057CD64(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10057CDC4;
  v3[3] = &unk_10087EB20;
  void v3[4] = a1;
  sub_1004054B4(v2, v3);
}

uint64_t sub_10057CDC4(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 17084LL) = 1;
  return result;
}

void sub_10057CDD8(uint64_t a1)
{
  uint64_t v1 = a1 - 32;
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10057CDC4;
  v3[3] = &unk_10087EB20;
  void v3[4] = v1;
  sub_1004054B4(v2, v3);
}

void sub_10057CE38(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10057CE98;
  v3[3] = &unk_10087EB20;
  void v3[4] = a1;
  sub_1004054B4(v2, v3);
}

void sub_10057CE98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(_BYTE *)(v1 + 17084) = 0;
  if (*(_BYTE *)(v1 + 41))
  {
    uint64_t v2 = *(void *)(v1 + 48);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10057CF00;
    v3[3] = &unk_10087EB20;
    void v3[4] = v1;
    sub_100405384(v2, v3);
  }

uint64_t sub_10057CF00(uint64_t a1)
{
  return sub_10057080C(*(void *)(a1 + 32), 0);
}

void sub_10057CF0C(uint64_t a1)
{
  uint64_t v1 = a1 - 32;
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10057CE98;
  v3[3] = &unk_10087EB20;
  void v3[4] = v1;
  sub_1004054B4(v2, v3);
}

uint64_t sub_10057CF6C()
{
  return 1LL;
}

uint64_t sub_10057CF74()
{
  return 1LL;
}

uint64_t sub_10057CF80()
{
  return 1LL;
}

uint64_t sub_10057CF88()
{
  return 1LL;
}

void sub_10057CF90(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0LL;
    if (v3 != a1)
    {
      do
      {
        char v5 = (uint64_t *)v3[1];

        operator delete(v3);
        uint64_t v3 = v5;
      }

      while (v5 != a1);
    }
  }

void sub_10057D000(uint64_t a1, uint64_t a2)
{
  char v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        char v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }

  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_10057D088(a1 + 8, v4, (char *)&v6);
    sub_100008A30(a1 + 8);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10057D088(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    int v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      unint64_t v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      unint64_t v19 = 0LL;
    }
    unint64_t v20 = &v19[8 * v16];
    std::stringbuf::string_type __p = v19;
    unint64_t v27 = v20;
    __int128 v28 = v20;
    __int128 v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)sub_100008BA0(v8, v22);
        unint64_t v20 = &v23[8 * (v22 >> 2)];
        std::stringbuf::string_type __p = v23;
        unint64_t v27 = v20;
        __int128 v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        unint64_t v27 = v20;
      }
    }

    *(void *)unint64_t v20 = *(void *)v3;
    __int128 v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__n128 __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }

  else
  {
    uint64_t v9 = __src + 8;
    int v10 = v6 - 8;
    __int16 v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_10057D28C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10057D2C4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10057D2C4(a1, *a2);
    sub_10057D2C4(a1, a2[1]);
    a2[5] = &off_10087FAE8;
    uint64_t v4 = (unsigned int *)a2[6];
    if (v4) {
      sub_1002CD254(v4);
    }
    operator delete(a2);
  }

void sub_10057D31C(id a1)
{
  uint64_t v1 = operator new(0x1A0uLL);
  sub_1002769A4();
  off_1008D67C0 = v1;
}

void sub_10057D34C(_Unwind_Exception *a1)
{
}

void sub_10057D360(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_10057D390(_Unwind_Exception *a1)
{
}

void sub_10057D3A4(id a1)
{
  uint64_t v1 = (char *)operator new(0x200uLL);
  *(void *)uint64_t v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 18) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 1memset(v37, 0, 55) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 108) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 28) = v1 + 232;
  *((void *)v1 + 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + memset(v37, 0, 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 58) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_10057D4AC(_Unwind_Exception *a1)
{
}

void sub_10057D4C0(id a1)
{
  uint64_t v1 = operator new(0x42C0uLL);
  sub_10056DDC4((uint64_t)v1);
  off_1008D6280 = v1;
}

void sub_10057D4F0(_Unwind_Exception *a1)
{
}

uint64_t *sub_10057D504(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_10057D558(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_10057D540(_Unwind_Exception *a1)
{
}

uint64_t *sub_10057D558(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    char v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_10057D5DC(v5, v6, v4 + 4, v4 + 4);
      unint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          unint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }

        while (!v9);
      }

      uint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_10057D5DC(uint64_t **a1, void *a2, unint64_t *a3, void *a4)
{
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v6 = (uint64_t **)sub_100268054(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_10057D668((uint64_t)a1, a4, v8);
    sub_100029630(a1, v10, v6, v8[0]);
    return v8[0];
  }

  return result;
}

void sub_10057D668(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[2] = 0LL;
  a3[1] = 0LL;
  uint64_t v6 = a3 + 1;
  unint64_t v7 = operator new(0x38uLL);
  *a3 = v7;
  *uint64_t v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  void v7[4] = *a2;
  void v7[5] = &off_10087FAE8;
  uint64_t v8 = a2[2];
  v7[6] = v8;
  if (v8) {
    sub_1002CD1E0(v8);
  }
  *((_BYTE *)a3 + 16) = 1;
}

void sub_10057D6EC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_10057D708(v2, v3);
  _Unwind_Resume(a1);
}

void sub_10057D708(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    __p[5] = &off_10087FAE8;
    uint64_t v3 = (unsigned int *)__p[6];
    if (v3) {
      sub_1002CD254(v3);
    }
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t *sub_10057D75C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002BB9EC(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_10057D798(_Unwind_Exception *a1)
{
}

uint64_t *sub_10057D7B0(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    __int16 v11 = (uint64_t *)operator new(0x38uLL);
    _OWORD v11[4] = **a4;
    void v11[5] = (uint64_t)&off_10087FAE8;
    void v11[6] = 0LL;
    sub_100029630(a1, (uint64_t)v9, v7, v11);
    return v11;
  }

  return (uint64_t *)v9;
}

uint64_t *sub_10057D878(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = sub_1001FDBCC(a1, a2);
  a2[5] = (uint64_t)&off_10087FAE8;
  uint64_t v4 = (unsigned int *)a2[6];
  if (v4) {
    sub_1002CD254(v4);
  }
  operator delete(a2);
  return v3;
}

void sub_10057D8C0(void *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(_BYTE **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - (uint64_t)v7) >> 2) >= a2)
  {
    if (a2)
    {
      int v13 = &v7[20 * a2];
      uint64_t v14 = 20 * a2;
      do
      {
        sub_10063432C(v7);
        v7 += 20;
        v14 -= 20LL;
      }

      while (v14);
      unint64_t v7 = v13;
    }

    a1[1] = v7;
  }

  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v7[-*a1] >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL) {
      abort();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x666666666666666LL) {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)sub_100050420(v4, v11);
    }
    else {
      uint64_t v12 = 0LL;
    }
    uint64_t v15 = &v12[20 * v8];
    uint64_t v16 = &v12[20 * v11];
    uint64_t v17 = 5 * a2;
    unint64_t v18 = &v15[20 * a2];
    uint64_t v19 = 4 * v17;
    unint64_t v20 = v15;
    do
    {
      unint64_t v20 = sub_10063432C(v20) + 20;
      v19 -= 20LL;
    }

    while (v19);
    unint64_t v22 = (char *)*a1;
    unint64_t v21 = (char *)a1[1];
    if (v21 != (char *)*a1)
    {
      do
      {
        __int128 v23 = *(_OWORD *)(v21 - 20);
        *((_DWORD *)v15 - 1) = *((_DWORD *)v21 - 1);
        *(_OWORD *)(v15 - 20) = v23;
        v15 -= 20;
        v21 -= 20;
      }

      while (v21 != v22);
      unint64_t v21 = (char *)*a1;
    }

    *a1 = v15;
    a1[1] = v18;
    a1[2] = v16;
    if (v21) {
      operator delete(v21);
    }
  }

void sub_10057DA34(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_10057DA58(id a1)
{
  uint64_t v1 = operator new(0xEB0uLL);
  sub_10061991C();
  qword_1008D5F18 = (uint64_t)v1;
}

void sub_10057DA88(_Unwind_Exception *a1)
{
}

  ;
}

void sub_10057DAB8(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
}

void sub_10057DAC8(float a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(float *)a4 = a1;
  *(void *)(a4 + 4) = v4;
  *(_WORD *)(a4 + 12) = 1024;
  *(_DWORD *)(a4 + 14) = v5;
}

uint64_t sub_10057DAE0(uint64_t a1)
{
  *(void *)a1 = off_1008A1D80;
  *(void *)(a1 + 8) = off_1008A1DE0;
  uint64_t v2 = (void *)(a1 + 16);
  for (uint64_t i = 216LL; i != 840; i += 208LL)
    *(void *)(a1 + i) = 0LL;
  *(_DWORD *)(a1 + 664) = 0;
  *(void *)(a1 + 672) = 5LL;
  bzero(v2, 0x288uLL);
  else {
    __int16 v4 = 4;
  }
  *(_WORD *)(a1 + 680) = v4;
  uint64_t v5 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 48LL))(v5, 1LL))
  {
    uint64_t v6 = sub_1002E6E9C();
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 2496LL))(v6);
    BOOL v8 = os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      if (v8) {
        sub_100695820();
      }
    }

    else if (v8)
    {
      sub_10069584C();
    }

    *(_DWORD *)(a1 + 664) |= 1u;
  }

  uint64_t v9 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v9 + 48LL))(v9, 16LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEBUG)) {
      sub_1006957F4();
    }
    *(_DWORD *)(a1 + 664) |= 0x10u;
  }

  uint64_t v10 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v10 + 48LL))(v10, 0x80000LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEBUG)) {
      sub_1006957C8();
    }
    *(_DWORD *)(a1 + 664) |= 0x80000u;
  }

  uint64_t v11 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v11 + 48LL))(v11, 8LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEBUG)) {
      sub_10069579C();
    }
    *(_DWORD *)(a1 + 664) |= 8u;
  }

  uint64_t v12 = sub_1002E6BF0();
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 48LL))(v12, 0x100000LL);
  uint64_t v14 = (os_log_s *)qword_1008F7748;
  if (v13)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Source supports GATT", buf, 2u);
      uint64_t v14 = (os_log_s *)qword_1008F7748;
    }

    *(_DWORD *)(a1 + 664) |= 0x100000u;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = *(_DWORD *)(a1 + 664);
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Source supported profiles = %x", buf, 8u);
  }

  unsigned __int8 v25 = 0;
  uint64_t v16 = sub_1002E6E00();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v16 + 8LL))(v16) & 1) == 0)
  {
    uint64_t v21 = *(void *)(a1 + 672);
LABEL_41:
    v21 |= 0x10uLL;
    *(void *)(a1 + 672) = v21;
    goto LABEL_42;
  }

  uint64_t v17 = sub_1002E6E00();
  sub_10002418C(buf, "FastConnect");
  sub_10002418C(__p, "DisableFastConnectAll");
  (*(void (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v17 + 72LL))(v17, buf, __p, &v25);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (v27 < 0) {
    operator delete(*(void **)buf);
  }
  unint64_t v18 = (os_log_s *)qword_1008F7748;
  BOOL v19 = os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT);
  int v20 = v25;
  if (v19)
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v25;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "disableFastConnectAll = %d", buf, 8u);
    int v20 = v25;
  }

  uint64_t v21 = *(void *)(a1 + 672);
  if (!v20) {
    goto LABEL_41;
  }
LABEL_42:
  *(_BYTE *)(a1 + 682) = (v21 & 0x10) != 0;
  return a1;
}

void sub_10057DE64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  for (uint64_t i = 632LL; i != 8; i -= 208LL)

  _Unwind_Resume(a1);
}

void *sub_10057DECC(void *a1)
{
  *a1 = off_1008A1D80;
  a1[1] = off_1008A1DE0;
  sub_10057E554((uint64_t)a1);
  for (uint64_t i = 79LL; i != 1; i -= 26LL)

  return a1;
}

void sub_10057DF20(_Unwind_Exception *a1)
{
  for (uint64_t i = 632LL; i != 8; i -= 208LL)

  _Unwind_Resume(a1);
}

void sub_10057DF48(void *a1)
{
  uint64_t v1 = sub_10057DECC(a1);
  operator delete(v1);
}

void sub_10057DF5C(uint64_t a1)
{
  unsigned __int8 v7 = 0;
  uint64_t v2 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 8LL))(v2))
  {
    uint64_t v3 = sub_1002E6E00();
    sub_10002418C(buf, "FastConnect");
    sub_10002418C(__p, "DisableFastConnect");
    (*(void (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v3 + 72LL))(v3, buf, __p, &v7);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete(*(void **)buf);
    }
    __int16 v4 = (os_log_s *)qword_1008F7748;
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v7;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "disableFastConnect = %d", buf, 8u);
      if (v7) {
        return;
      }
    }

    else if (v7)
    {
      return;
    }
  }

  sub_100198E08(sub_10057E158);
  mach_timebase_info((mach_timebase_info_t)&dword_1008F1CE4);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_1008A1F48);
  }
  sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A1F68);
  }
  sub_10000876C((uint64_t)off_1008D5F48 + 240, a1 + 8);
}

void sub_10057E11C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10057E158(const void *a1, unsigned int a2, __int16 a3, char a4, uint64_t a5)
{
  uint64_t v10 = sub_100404EB8();
  uint64_t v11 = operator new(0x28uLL);
  _OWORD v11[4] = 1;
  *(void *)uint64_t v11 = &off_1008A1E78;
  uint64_t v12 = operator new[](a2);
  *((void *)v11 + 2) = v12;
  memcpy(v12, a1, a2);
  v11[12] = a2;
  v11[13] = a3;
  *((_BYTE *)v11 + 28) = a4;
  *((void *)v11 + 4) = a5;
  return sub_100405744(v10, v11);
}

void sub_10057E1F8(_Unwind_Exception *a1)
{
}

uint64_t sub_10057E20C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  while (1)
  {
    uint64_t v3 = a1 + v2;
    if (*(_DWORD *)(a1 + v2 + 32))
    {
      int v4 = *(_DWORD *)(v3 + 24);
      int v5 = *(unsigned __int16 *)(v3 + 28);
    }

    v2 += 208LL;
    if (v2 == 624) {
      return 0LL;
    }
  }

  return a1 + v2 + 16;
}

uint64_t sub_10057E258(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  while (1)
  {
    uint64_t v3 = a1 + v2;
    if (*(_DWORD *)(a1 + v2 + 32))
    {
      int v4 = *(_DWORD *)(v3 + 24);
      int v5 = *(unsigned __int16 *)(v3 + 28);
    }

    v2 += 208LL;
    if (v2 == 624) {
      return 120LL;
    }
  }

  uint64_t v8 = a1 + v2;
  sub_10057E2D0(a1, a1 + v2 + 16, 0);
  char v9 = *(void **)(v8 + 216);
  *(void *)(v8 + 216) = 0LL;

  return 0LL;
}

void sub_10057E2D0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5 = (os_log_s *)qword_1008F7748;
  if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(int *)(a2 + 16);
    else {
      unsigned __int8 v7 = off_1008A2120[v6];
    }
    if (a3 > 9) {
      uint64_t v8 = "Unknown State";
    }
    else {
      uint64_t v8 = off_1008A2120[a3];
    }
    v9[0] = 68158466;
    v9[1] = 6;
    __int16 v10 = 2096;
    uint64_t v11 = a2 + 8;
    __int16 v12 = 2080;
    int v13 = v7;
    __int16 v14 = 2080;
    int v15 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%{bluetooth:BD_ADDR}.6P state changed from %s to %s",  (uint8_t *)v9,  0x26u);
  }

  *(_DWORD *)(a2 + 16) = a3;
}

uint64_t sub_10057E3E4(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 680);
}

void sub_10057E3EC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7748;
  BOOL v3 = os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Destroy all devices", v6, 2u);
  }

  for (uint64_t i = 0LL; i != 624; i += 208LL)
  {
    sub_10057E2D0(v3, a1 + i + 16, 0);
    int v5 = *(void **)(a1 + i + 216);
    *(void *)(a1 + i + 216) = 0LL;
  }

uint64_t sub_10057E488(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 128;
  uint64_t v5 = sub_10057E20C(a1, a2 + 128);
  if (!v5)
  {
    uint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = a1 + v6;
      if (!*(_DWORD *)(a1 + v6 + 32)) {
        break;
      }
      v6 += 208LL;
      if (v6 == 624) {
        return 0LL;
      }
    }

    *(_OWORD *)(v7 + 16) = 0u;
    uint64_t v5 = v7 + 16;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + sub_100242FAC(v16 - 96) = 0u;
    *(_OWORD *)(v5 + sub_100242FAC(v15 - 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    int v8 = *(_DWORD *)v4;
    *(_WORD *)(v5 + 12) = *(_WORD *)(v4 + 4);
    *(_DWORD *)(v5 + 8) = v8;
    sub_10057E2D0(0LL, v5, 1u);
    *(_DWORD *)(v5 + 20) = *(_DWORD *)(a1 + 664);
    int v9 = sub_1003E46A4(a2);
    *(_BYTE *)(v5 + 53) = v9;
    *(_BYTE *)(v5 + 145) = 0;
    if (v9 != 2) {
      sub_1003E4660(a2, 2);
    }
  }

  return v5;
}

void sub_10057E554(uint64_t a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_1008A1F48);
  }
  sub_100009168((uint64_t)off_1008D60A8 + 80, a1);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A1F68);
  }
  sub_100009168((uint64_t)off_1008D5F48 + 240, a1 + 8);
}

uint64_t sub_10057E5E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F7748;
  if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    int v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cleanup with result %d", buf, 8u);
  }

  uint64_t v7 = (void *)sub_10057E20C(a1, a2);
  if (v7)
  {
    int v8 = v7;
    if (*v7)
    {
      char v14 = 0;
      sub_100242CA4(&v14);
      sub_1001759FC(*((unsigned __int16 *)v8 + 24), 436LL);
      sub_100242CD0(&v14);
      if ((_DWORD)a3)
      {
        if (qword_1008D60B0 != -1) {
          dispatch_once(&qword_1008D60B0, &stru_1008A1F48);
        }
        uint64_t v9 = sub_1004317E0((uint64_t)off_1008D60A8, a3, 20000);
        if (qword_1008D60D0 != -1) {
          dispatch_once(&qword_1008D60D0, &stru_1008A1F88);
        }
        sub_10042A3B8((int64x2_t *)off_1008D60C8, *v8, v9);
      }

      *((_WORD *)v8 + 24) = 0;
      if (*((_WORD *)v8 + 27))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
          sub_100695954();
        }
        if (qword_1008D6458 != -1) {
          dispatch_once(&qword_1008D6458, &stru_1008A1FA8);
        }
        sub_10037D41C( qword_1008D6450,  *v8,  (void *)*((unsigned __int16 *)v8 + 27),  *((unsigned __int16 *)v8 + 32),  *((unsigned __int16 *)v8 + 68),  *((unsigned __int8 *)v8 + 135));
      }

      int v10 = *((unsigned __int16 *)v8 + 37);
      *((_WORD *)v8 + 27) = 0;
      *((_WORD *)v8 + 32) = 0;
      if (v10)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
          sub_100695928();
        }
        if (qword_1008D9030 != -1) {
          dispatch_once(&qword_1008D9030, &stru_1008A1FC8);
        }
        sub_100473F04((uint64_t)off_1008D9028, *v8 + 128LL, (unsigned __int16 *)v8 + 37, (unsigned __int16 *)v8 + 70);
      }

      *((_WORD *)v8 + 37) = 0;
      if (*((_WORD *)v8 + 62))
      {
        sub_100242C98(&v14);
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
          sub_1006958FC();
        }
        sub_1001F7554(*v8 + 128LL, *((unsigned __int16 *)v8 + 62));
        sub_100242CD0(&v14);
      }

      *((_WORD *)v8 + 62) = 0;
      if (*((_WORD *)v8 + 42))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
          sub_1006958D0();
        }
        if (qword_1008D60E0 != -1) {
          dispatch_once(&qword_1008D60E0, &stru_1008A1FE8);
        }
        sub_10023B40C(off_1008D60D8, *v8, *((unsigned __int16 *)v8 + 42), a3);
      }

      *((_WORD *)v8 + 42) = 0;
      if (qword_1008D60E0 != -1) {
        dispatch_once(&qword_1008D60E0, &stru_1008A1FE8);
      }
      if (sub_10021B4B4((uint64_t)off_1008D60D8))
      {
        uint64_t v11 = (os_log_s *)qword_1008F7748;
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Reset TiPi pending flag as a result of connection failure",  buf,  2u);
        }

        if (qword_1008D60E0 != -1) {
          dispatch_once(&qword_1008D60E0, &stru_1008A1FE8);
        }
        sub_10021B4BC((uint64_t)off_1008D60D8, *v8, 0);
      }

      if (!*((_WORD *)v8 + 47)) {
        goto LABEL_49;
      }
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
        sub_1006958A4();
      }
      int v12 = *((_DWORD *)v8 + 4);
      if (v12 < 5)
      {
        if (qword_1008D9250 == -1)
        {
LABEL_48:
          sub_1005216D8( (uint64_t)off_1008D9248,  *v8,  *((unsigned __int16 *)v8 + 47),  *((unsigned __int16 *)v8 + 52),  v12 > 4);
LABEL_49:
          *((_WORD *)v8 + 47) = 0;
          *((_WORD *)v8 + 52) = 0;
          if (*((_WORD *)v8 + 57) && (*((_BYTE *)v8 + 22) & 0x10) != 0)
          {
            if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
              sub_100695878();
            }
            sub_100242C98(&v14);
            sub_1000B2E1C(a2, *((unsigned __int16 *)v8 + 57));
            sub_100242CD0(&v14);
          }

          *((_WORD *)v8 + 57) = 0;
          sub_100242CD8(&v14);
          goto LABEL_55;
        }
      }

      else if (qword_1008D9250 == -1)
      {
        goto LABEL_48;
      }

      dispatch_once(&qword_1008D9250, &stru_1008A2008);
      goto LABEL_48;
    }
  }

void sub_10057EA94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10057EAB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_10057E20C(a1, a2);
  if (v2)
  {
    *(_OWORD *)(v2 + 180) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    *(_OWORD *)(v2 + 152) = 0u;
    BOOL v3 = *(void **)(v2 + 200);
    *(void *)(v2 + 200) = 0LL;
  }

uint64_t sub_10057EAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = 0LL;
  uint64_t v4 = (os_log_s *)qword_1008F7748;
  if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D0100(a2, (uint64_t)__p);
    uint64_t v5 = v27 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::stringbuf::string_type buf = 136315138;
    __int128 v23 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Check Fast Connect Support for device %s",  buf,  0xCu);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
  }

  char v20 = 0;
  sub_100242CA4(&v20);
  uint64_t v6 = sub_10012D890(a2 + 128);
  if (v6 && (int v7 = *(_DWORD *)(v6 + 148), v7 >= 3))
  {
    sub_100242CD0(&v20);
    uint64_t v9 = (os_log_s *)qword_1008F7748;
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = (unsigned __int16)v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Killing Fast Connect attempt, already connected %d",  (uint8_t *)__p,  8u);
    }

    uint64_t v8 = 4506LL;
  }

  else
  {
    uint64_t v8 = sub_100172ECC(2u, (uint64_t *)&v21, 0);
    if ((_DWORD)v8)
    {
      sub_100242CD0(&v20);
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
        sub_100695980();
      }
    }

    else
    {
      int v10 = *(_DWORD *)(a1 + 664);
      if (*(_BYTE *)(a2 + 976))
      {
        uint64_t v11 = (os_log_s *)qword_1008F7748;
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter guest not in contacts removing HFP and GATT profiles from support",  (uint8_t *)__p,  2u);
        }

        v10 &= 0xFFEFFFFE;
      }

      word_1008F77F8 = 1;
      word_1008F77FA = *(_WORD *)(a1 + 680);
      byte_1008F77FC = *((_BYTE *)v21 + 4);
      byte_1008F77FD = *((_BYTE *)v21 + 5);
      byte_1008F77FE = *(_BYTE *)(sub_10017AB4C(v21) + 36);
      byte_1008F77FF = *(_BYTE *)(sub_10017AB4C(v21) + 37);
      dword_1008F7800 = v10;
      unk_1008F7804 = *(void *)(a1 + 672);
      if (qword_1008D60B0 != -1) {
        dispatch_once(&qword_1008D60B0, &stru_1008A1F48);
      }
      byte_1008F780C = sub_100434070((uint64_t)off_1008D60A8);
      if (qword_1008D60B0 != -1) {
        dispatch_once(&qword_1008D60B0, &stru_1008A1F48);
      }
      byte_1008F780D = (unsigned __int16)sub_100434070((uint64_t)off_1008D60A8) >> 8;
      if (qword_1008D60B0 != -1) {
        dispatch_once(&qword_1008D60B0, &stru_1008A1F48);
      }
      byte_1008F780E = sub_100434070((uint64_t)off_1008D60A8) >> 16;
      if (qword_1008D60B0 != -1) {
        dispatch_once(&qword_1008D60B0, &stru_1008A1F48);
      }
      byte_1008F780F = sub_100434070((uint64_t)off_1008D60A8) >> 24;
      byte_1008F7810 = sub_1001E1628();
      byte_1008F7811 = (unsigned __int16)sub_1001E1628() >> 8;
      byte_1008F7812 = sub_1001E1628() >> 16;
      byte_1008F7813 = sub_1001E1628() >> 24;
      unk_1008F7814 = 1;
      if (qword_1008D60B0 != -1) {
        dispatch_once(&qword_1008D60B0, &stru_1008A1F48);
      }
      uint64_t v12 = sub_100434078((uint64_t)off_1008D60A8);
      byte_1008F7816 = BYTE4(v12);
      byte_1008F7817 = BYTE5(v12);
      byte_1008F7818 = BYTE6(v12);
      byte_1008F7819 = HIBYTE(v12);
      word_1008F781A = v12;
      byte_1008F781C = BYTE2(v12);
      byte_1008F781D = BYTE3(v12);
      *(void *)(sub_10017AB4C(v21) + 88) = sub_10057F0C0;
      int v13 = v21;
      *((void *)v21 + 4) = sub_10057F11C;
      *(_BYTE *)(sub_10017AB4C(v13) + 16) = 0;
      uint64_t v8 = sub_100198214((uint64_t)sub_10057F46C, *((unsigned __int16 *)v21 + 2), a2 + 128, (uint64_t)&word_1008F77F8, 42);
      char v14 = (os_log_s *)qword_1008F7748;
      BOOL v15 = os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v8)
      {
        if (v15)
        {
          sub_1003CF00C(a2, __p);
          int v16 = v27 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)std::stringbuf::string_type buf = 136446466;
          __int128 v23 = v16;
          __int16 v24 = 1024;
          int v25 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Failed to send Fast Connect Echo Request for device %{public}s with status %d",  buf,  0x12u);
          if (v27 < 0) {
            operator delete(__p[0]);
          }
        }

        sub_1001734D8((uint64_t)v21);
      }

      else
      {
        if (v15)
        {
          sub_1003CF00C(a2, __p);
          uint64_t v17 = v27 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)std::stringbuf::string_type buf = 136446466;
          __int128 v23 = v17;
          __int16 v24 = 1024;
          int v25 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Sent Fast Connect Echo Request for device %{public}s with status %d",  buf,  0x12u);
          if (v27 < 0) {
            operator delete(__p[0]);
          }
        }

        unint64_t v18 = (void *)sub_10057E20C(a1, a2 + 128);
        *unint64_t v18 = a2;
        sub_10057E2D0((uint64_t)v18, (uint64_t)v18, 2u);
      }

      sub_100242CD0(&v20);
    }
  }

  sub_100242CD8(&v20);
  return v8;
}

void sub_10057F08C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

BOOL sub_10057F0C0(__int16 a1, int a2)
{
  uint64_t v4 = sub_100404EB8();
  uint64_t v5 = operator new(0x10uLL);
  void v5[4] = 1;
  *(void *)uint64_t v5 = &off_1008A1EE8;
  void v5[5] = a1;
  *((_DWORD *)v5 + 3) = a2;
  return sub_100405744(v4, v5);
}

void sub_10057F11C(int a1, const void *a2, unsigned int a3)
{
  __int16 v3 = a3;
  uint64_t v17 = 0LL;
  unint64_t v18 = 0LL;
  size_t v6 = a3;
  sub_10056AB04(&v17, a2, a3);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  sub_10040F738((uint64_t)&v15, 0, (uint64_t)&v17);
  if (sub_10040F7B0((uint64_t)&v15) == 6)
  {
    char v14 = 0LL;
    if (qword_1008D9148 != -1) {
      dispatch_once(&qword_1008D9148, &stru_1008A2028);
    }
    uint64_t v7 = 0LL;
    while (!*(_DWORD *)((char *)off_1008D9140 + v7 + 32)
         || *(unsigned __int16 *)((char *)off_1008D9140 + v7 + 64) != a1)
    {
      v7 += 208LL;
      if (v7 == 624)
      {
        uint64_t v8 = 0LL;
        goto LABEL_10;
      }
    }

    uint64_t v8 = (unsigned __int16 *)((char *)off_1008D9140 + v7 + 16);
LABEL_10:
    uint64_t v9 = (os_log_s *)qword_1008F7748;
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Setup Complete received, setting all channels to OPEN",  v13,  2u);
    }

    if (v8)
    {
      if (v8[32])
      {
        sub_100171EC4(v8[32], (uint64_t *)&v14);
        if (v14)
        {
          if (sub_10017AB4C(v14)) {
            *(_BYTE *)(sub_10017AB4C(v14) + 16) = 4;
          }
        }
      }

      if (v8[27])
      {
        sub_100171EC4(v8[27], (uint64_t *)&v14);
        if (v14)
        {
          if (sub_10017AB4C(v14)) {
            *(_BYTE *)(sub_10017AB4C(v14) + 16) = 4;
          }
        }
      }

      if (v8[37])
      {
        sub_100171EC4(v8[37], (uint64_t *)&v14);
        if (v14)
        {
          if (sub_10017AB4C(v14)) {
            *(_BYTE *)(sub_10017AB4C(v14) + 16) = 4;
          }
        }
      }

      if (v8[42])
      {
        sub_100171EC4(v8[42], (uint64_t *)&v14);
        if (v14)
        {
          if (sub_10017AB4C(v14)) {
            *(_BYTE *)(sub_10017AB4C(v14) + 16) = 4;
          }
        }
      }

      if (v8[57])
      {
        sub_100171EC4(v8[57], (uint64_t *)&v14);
        if (v14)
        {
          if (sub_10017AB4C(v14)) {
            *(_BYTE *)(sub_10017AB4C(v14) + 16) = 4;
          }
        }
      }

      if (v8[47])
      {
        sub_100171EC4(v8[47], (uint64_t *)&v14);
        if (v14)
        {
          if (sub_10017AB4C(v14)) {
            *(_BYTE *)(sub_10017AB4C(v14) + 16) = 4;
          }
        }
      }

      if (v8[62])
      {
        sub_100171EC4(v8[62], (uint64_t *)&v14);
        if (v14)
        {
          if (sub_10017AB4C(v14)) {
            *(_BYTE *)(sub_10017AB4C(v14) + 16) = 4;
          }
        }
      }
    }
  }

  uint64_t v10 = sub_100404EB8();
  uint64_t v11 = operator new(0x18uLL);
  _OWORD v11[4] = 1;
  *(void *)uint64_t v11 = &off_1008A1F20;
  void v11[5] = a1;
  void v11[6] = v3;
  uint64_t v12 = operator new[](v6);
  *((void *)v11 + 2) = v12;
  memcpy(v12, a2, v6);
  sub_100405744(v10, v11);
  *((void *)&v15 + 1) = &off_10087FAA8;
  if ((void)v16) {
    sub_1002CD254((unsigned int *)v16);
  }
  uint64_t v17 = &off_10087FAA8;
  if (v18) {
    sub_1002CD254(v18);
  }
}

void sub_10057F414( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13, uint64_t a14, uint64_t a15, unsigned int *a16)
{
  if (a13) {
    sub_1002CD254(a13);
  }
  if (a16) {
    sub_1002CD254(a16);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10057F46C( uint64_t a1, uint64_t a2, const void *a3, unsigned int a4, const void *a5, unsigned int a6, int a7)
{
  if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEBUG)) {
    sub_1006959E0();
  }
  uint64_t v14 = sub_100404EB8();
  __int128 v15 = (char *)operator new(0x38uLL);
  *((_WORD *)v15 + 4) = 1;
  *(void *)__int128 v15 = off_1008A1EB0;
  *(_DWORD *)(v15 + 10) = *(_DWORD *)a1;
  *((_WORD *)v15 + 7) = *(_WORD *)(a1 + 4);
  *((void *)v15 + 2) = a2;
  __int128 v16 = operator new[](a4);
  *((void *)v15 + 3) = v16;
  memcpy(v16, a3, a4);
  *((_WORD *)v15 + 16) = a4;
  uint64_t v17 = operator new[](a6);
  *((void *)v15 + 5) = v17;
  memcpy(v17, a5, a6);
  *((_WORD *)v15 + 24) = a6;
  *((_DWORD *)v15 + 13) = a7;
  return sub_100405744(v14, v15);
}

void sub_10057F574(_Unwind_Exception *a1)
{
}

uint64_t sub_10057F588(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10057E488(a1, a2);
  uint64_t v5 = v4;
  if (*(int *)(v4 + 16) < 2)
  {
    if (!*(void *)(v4 + 152)) {
      *(void *)(v4 + 152) = mach_absolute_time();
    }
    *(void *)(v5 + 160) = mach_absolute_time();
    uint64_t v8 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v9 = *(void **)(v5 + 200);
    *(void *)(v5 + 200) = v8;

    return sub_10057EAEC(a1, a2);
  }

  else
  {
    size_t v6 = (os_log_s *)qword_1008F7748;
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
    {
      sub_1003D0100(a2, (uint64_t)__p);
      if (v14 >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      uint64_t v11 = *(int *)(v5 + 16);
      else {
        uint64_t v12 = off_1008A2120[v11];
      }
      *(_DWORD *)std::stringbuf::string_type buf = 136315394;
      __int128 v16 = v10;
      __int16 v17 = 2080;
      unint64_t v18 = v12;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "PFC in progress for device %s, ignoring duplicate request - current state is %s",  buf,  0x16u);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }

    return 4508LL;
  }

uint64_t sub_10057F71C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 672) & 0x10) != 0) {
    return sub_1003D2B2C(a2, 47);
  }
  else {
    return 0LL;
  }
}

void sub_10057F738(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(a2 + 20);
  int v4 = *(_DWORD *)(a2 + 24);
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  uint64_t v7 = (os_log_s *)qword_1008F7748;
  if ((int)v6 >= 4 && os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_FAULT))
  {
    sub_100695A38(v6, (uint64_t)v7, __p);
    uint64_t v7 = (os_log_s *)__p[0];
  }

  int v8 = v4 & v5;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D0100(*(void *)a2, (uint64_t)__p);
    uint64_t v9 = (SBYTE7(v49) & 0x80u) == 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::stringbuf::string_type buf = 136315394;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Compose Profile Descriptor for device %s with supported profiles %x",  buf,  0x12u);
    if (SBYTE7(v49) < 0) {
      operator delete(__p[0]);
    }
  }

  if (*(_BYTE *)(*(void *)a2 + 976LL))
  {
    uint64_t v10 = (os_log_s *)qword_1008F7748;
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter this is a guest not in contacts device removing HFP / GATT profiles",  (uint8_t *)__p,  2u);
    }

    v8 &= 0xFFEFFFFE;
  }

  if (v8)
  {
    *(_OWORD *)std::stringbuf::string_type __p = 0u;
    __int128 v49 = 0u;
    sub_10040F90C((uint64_t)__p, 0);
    __int16 v11 = *(_WORD *)(a1 + 680);
    sub_10040F938((uint64_t)__p, 3);
    sub_10040F938((uint64_t)__p, 0);
    uint64_t v12 = sub_10040F974((uint64_t)__p, v11);
    sub_1005804E4((uint64_t)v12, (uint64_t)__p, v13, a2);
    sub_10040F974((uint64_t)__p, 2);
    char v47 = 0;
    sub_100242CA4(&v47);
    if ((v8 & 0x10) != 0)
    {
      if (qword_1008D6458 != -1) {
        dispatch_once(&qword_1008D6458, &stru_1008A1FA8);
      }
      int v14 = sub_10037BDB4(qword_1008D6450, (int *)(*(void *)a2 + 128LL), (__int16 *)(a2 + 54), (_WORD *)(a2 + 64));
      memset(buf, 0, 32);
      sub_10040F90C((uint64_t)buf, 0);
      if (!v14)
      {
        if (qword_1008D6458 != -1) {
          dispatch_once(&qword_1008D6458, &stru_1008A1FA8);
        }
        int v14 = sub_10037BE20(qword_1008D6450, (uint64_t)buf, (__int16 *)(a2 + 54), (__int16 *)(a2 + 64));
      }

      sub_100242CD0(&v47);
      if (v14)
      {
        if (qword_1008D6458 != -1) {
          dispatch_once(&qword_1008D6458, &stru_1008A1FA8);
        }
        sub_10037D41C( qword_1008D6450,  *(void *)a2,  (void *)*(unsigned __int16 *)(a2 + 54),  *(unsigned __int16 *)(a2 + 64),  0,  *(unsigned __int8 *)(a2 + 135));
        v8 &= ~0x10u;
        *(_WORD *)(a2 + 54) = 0;
        *(_WORD *)(a2 + 64) = 0;
      }

      else
      {
        sub_10040F9C4((uint64_t)__p, 0x10u);
        sub_10056AB04(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        __int16 v15 = sub_10056AAD8((uint64_t)v50);
        sub_10040F974((uint64_t)__p, v15);
        *(void *)__int128 v50 = &off_10087FAA8;
        if (v51) {
          sub_1002CD254(v51);
        }
        sub_10056AB04(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        __int128 v16 = (char *)sub_10056AAF0((uint64_t)v50);
        sub_10056AB04(&v45, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        int64_t v17 = sub_10056AAD8((uint64_t)&v45);
        sub_10040F91C((uint64_t)__p, v16, v17);
        uint64_t v45 = &off_10087FAA8;
        if (v46) {
          sub_1002CD254(v46);
        }
        *(void *)__int128 v50 = &off_10087FAA8;
        if (v51) {
          sub_1002CD254(v51);
        }
      }

      sub_100242C98(&v47);
      if (*(void *)&buf[8])
      {
        *(void *)&uint8_t buf[16] = *(void *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
    }

    if ((v8 & 1) != 0)
    {
      if (qword_1008D9030 != -1) {
        dispatch_once(&qword_1008D9030, &stru_1008A1FC8);
      }
      int v18 = sub_100473EA8((uint64_t)off_1008D9028, *(void *)a2 + 128LL, (_WORD *)(a2 + 74), (_WORD *)(a2 + 140));
      if (!v18)
      {
        if (*(_BYTE *)(a2 + 145)) {
          int v18 = sub_1001F73CC(*(void *)a2 + 128LL, (_WORD *)(a2 + 124));
        }
        else {
          int v18 = 0;
        }
      }

      memset(buf, 0, 32);
      sub_10040F90C((uint64_t)buf, 0);
      if (!v18)
      {
        if (qword_1008D9030 != -1) {
          dispatch_once(&qword_1008D9030, &stru_1008A1FC8);
        }
        int v18 = sub_100473F90( (uint64_t)off_1008D9028,  (uint64_t)buf,  *(void *)a2,  (__int16 *)(a2 + 74),  (unsigned __int16 *)(a2 + 140),  *(unsigned __int8 *)(a2 + 145));
      }

      sub_100242CD0(&v47);
      if (v18)
      {
        if (qword_1008D9030 != -1) {
          dispatch_once(&qword_1008D9030, &stru_1008A1FC8);
        }
        sub_100473F04( (uint64_t)off_1008D9028,  *(void *)a2 + 128LL,  (unsigned __int16 *)(a2 + 74),  (unsigned __int16 *)(a2 + 140));
        v8 &= ~1u;
        *(_WORD *)(a2 + 74) = 0;
        if (*(_BYTE *)(a2 + 145))
        {
          sub_1001F7554(*(void *)a2 + 128LL, *(unsigned __int16 *)(a2 + 124));
          *(_WORD *)(a2 + 124) = 0;
        }
      }

      else
      {
        sub_10040F9C4((uint64_t)__p, 1u);
        sub_10056AB04(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        __int16 v19 = sub_10056AAD8((uint64_t)v50);
        sub_10040F974((uint64_t)__p, v19);
        *(void *)__int128 v50 = &off_10087FAA8;
        if (v51) {
          sub_1002CD254(v51);
        }
        sub_10056AB04(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        char v20 = (char *)sub_10056AAF0((uint64_t)v50);
        sub_10056AB04(&v45, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        int64_t v21 = sub_10056AAD8((uint64_t)&v45);
        sub_10040F91C((uint64_t)__p, v20, v21);
        uint64_t v45 = &off_10087FAA8;
        if (v46) {
          sub_1002CD254(v46);
        }
        *(void *)__int128 v50 = &off_10087FAA8;
        if (v51) {
          sub_1002CD254(v51);
        }
      }

      sub_100242C98(&v47);
      if (*(void *)&buf[8])
      {
        *(void *)&uint8_t buf[16] = *(void *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
    }

    if ((v8 & 0x80000) != 0)
    {
      if (qword_1008D60E0 != -1) {
        dispatch_once(&qword_1008D60E0, &stru_1008A1FE8);
      }
      int v22 = sub_100238C60((uint64_t)off_1008D60D8, *(void *)a2 + 128LL, (unsigned __int16 *)(a2 + 84));
      memset(buf, 0, 32);
      sub_10040F90C((uint64_t)buf, 0);
      if (!v22)
      {
        if (qword_1008D60E0 != -1) {
          dispatch_once(&qword_1008D60E0, &stru_1008A1FE8);
        }
        int v22 = sub_100238CC4((uint64_t)off_1008D60D8, *(void *)a2, (uint64_t)buf, (__int16 *)(a2 + 84));
      }

      sub_1003D9ECC(*(void *)a2, v22 == 0);
      sub_100242CD0(&v47);
      if (v22)
      {
        if (qword_1008D60E0 != -1) {
          dispatch_once(&qword_1008D60E0, &stru_1008A1FE8);
        }
        sub_10023B40C(off_1008D60D8, *(void *)a2, *(unsigned __int16 *)(a2 + 84), 114);
        v8 &= ~0x80000u;
        *(_WORD *)(a2 + 84) = 0;
      }

      else
      {
        sub_10040F9C4((uint64_t)__p, 0x80000u);
        sub_10056AB04(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        __int16 v23 = sub_10056AAD8((uint64_t)v50);
        sub_10040F974((uint64_t)__p, v23);
        *(void *)__int128 v50 = &off_10087FAA8;
        if (v51) {
          sub_1002CD254(v51);
        }
        sub_10056AB04(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        __int16 v24 = (char *)sub_10056AAF0((uint64_t)v50);
        sub_10056AB04(&v45, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        int64_t v25 = sub_10056AAD8((uint64_t)&v45);
        sub_10040F91C((uint64_t)__p, v24, v25);
        uint64_t v45 = &off_10087FAA8;
        if (v46) {
          sub_1002CD254(v46);
        }
        *(void *)__int128 v50 = &off_10087FAA8;
        if (v51) {
          sub_1002CD254(v51);
        }
      }

      sub_100242C98(&v47);
      if (*(void *)&buf[8])
      {
        *(void *)&uint8_t buf[16] = *(void *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
    }

    if ((v8 & 8) != 0)
    {
      if (qword_1008D9250 != -1) {
        dispatch_once(&qword_1008D9250, &stru_1008A2008);
      }
      int v26 = sub_100520E38((uint64_t)off_1008D9248, *(void *)a2 + 128LL, (__int16 *)(a2 + 94));
      memset(buf, 0, 32);
      sub_10040F90C((uint64_t)buf, 0);
      if (!v26)
      {
        if (qword_1008D9250 != -1) {
          dispatch_once(&qword_1008D9250, &stru_1008A2008);
        }
        int v26 = sub_100520EA0((uint64_t)off_1008D9248, (uint64_t)buf, (__int16 *)(a2 + 94), (__int16 *)(a2 + 104));
      }

      sub_100242CD0(&v47);
      if (v26)
      {
        if (qword_1008D9250 != -1) {
          dispatch_once(&qword_1008D9250, &stru_1008A2008);
        }
        sub_1005216D8( (uint64_t)off_1008D9248,  *(void *)a2,  *(unsigned __int16 *)(a2 + 94),  *(unsigned __int16 *)(a2 + 104),  0);
        v8 &= ~8u;
        *(_WORD *)(a2 + 94) = 0;
        *(_WORD *)(a2 + 104) = 0;
      }

      else
      {
        sub_10040F9C4((uint64_t)__p, 8u);
        sub_10056AB04(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        __int16 v27 = sub_10056AAD8((uint64_t)v50);
        sub_10040F974((uint64_t)__p, v27);
        *(void *)__int128 v50 = &off_10087FAA8;
        if (v51) {
          sub_1002CD254(v51);
        }
        sub_10056AB04(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        __int128 v28 = (char *)sub_10056AAF0((uint64_t)v50);
        sub_10056AB04(&v45, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        int64_t v29 = sub_10056AAD8((uint64_t)&v45);
        sub_10040F91C((uint64_t)__p, v28, v29);
        uint64_t v45 = &off_10087FAA8;
        if (v46) {
          sub_1002CD254(v46);
        }
        *(void *)__int128 v50 = &off_10087FAA8;
        if (v51) {
          sub_1002CD254(v51);
        }
      }

      sub_100242C98(&v47);
      if (*(void *)&buf[8])
      {
        *(void *)&uint8_t buf[16] = *(void *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
    }

    if ((v8 & 0x100000) != 0)
    {
      uint64_t v30 = (__int16 *)(a2 + 114);
      sub_1000B2CF4(*(void *)a2 + 128LL, (_WORD *)(a2 + 114));
      memset(buf, 0, 32);
      sub_10040F90C((uint64_t)buf, 0);
      __int16 v44 = 0;
      char v43 = 0;
      __int16 v42 = 0;
      if (sub_100173ADC(*(unsigned __int16 *)(a2 + 114), &v42, &v44, &v43))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
          sub_100695A0C();
        }
        sub_1000B2E1C(*(void *)a2 + 128LL, *(unsigned __int16 *)(a2 + 114));
        v8 &= ~0x100000u;
        *uint64_t v30 = 0;
      }

      else
      {
        sub_10040F938((uint64_t)buf, 1);
        sub_10040F938((uint64_t)buf, 7);
        sub_10040F974((uint64_t)buf, *v30);
        sub_10040F974((uint64_t)buf, v42);
        sub_10040F974((uint64_t)buf, v44);
        sub_10040F938((uint64_t)buf, v43);
        sub_10040F9C4((uint64_t)__p, 0x100000u);
        sub_10056AB04(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        __int16 v31 = sub_10056AAD8((uint64_t)v50);
        sub_10040F974((uint64_t)__p, v31);
        *(void *)__int128 v50 = &off_10087FAA8;
        if (v51) {
          sub_1002CD254(v51);
        }
        sub_10056AB04(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        int v32 = (char *)sub_10056AAF0((uint64_t)v50);
        sub_10056AB04(&v45, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        int64_t v33 = sub_10056AAD8((uint64_t)&v45);
        sub_10040F91C((uint64_t)__p, v32, v33);
        uint64_t v45 = &off_10087FAA8;
        if (v46) {
          sub_1002CD254(v46);
        }
        *(void *)__int128 v50 = &off_10087FAA8;
        if (v51) {
          sub_1002CD254(v51);
        }
      }

      if (*(void *)&buf[8])
      {
        *(void *)&uint8_t buf[16] = *(void *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
    }

    if (*(_DWORD *)(a2 + 20) != v8) {
      *(_DWORD *)(a2 + 20) = v8;
    }
    uint64_t v34 = *(unsigned __int16 *)(a2 + 48);
    uint64_t v35 = *(void *)a2;
    sub_10056AB04(buf, __p[1], v49 - (unint64_t)__p[1]);
    uint64_t v36 = (char *)sub_10056AAF0((uint64_t)buf);
    sub_10056AB04(v50, __p[1], v49 - (unint64_t)__p[1]);
    unsigned __int16 v37 = sub_10056AAD8((uint64_t)v50);
    uint64_t v38 = sub_100172DA0((uint64_t)sub_100580760, v34, (__int128 *)(v35 + 128), v36, v37);
    *(void *)__int128 v50 = &off_10087FAA8;
    if (v51) {
      sub_1002CD254(v51);
    }
    *(void *)std::stringbuf::string_type buf = &off_10087FAA8;
    uint64_t v39 = *(void *)&buf[8];
    if (*(void *)&buf[8]) {
      sub_1002CD254(*(unsigned int **)&buf[8]);
    }
    if ((_DWORD)v38)
    {
      uint64_t v40 = (os_log_s *)qword_1008F7748;
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
      {
        sub_10056AB04(buf, __p[1], v49 - (unint64_t)__p[1]);
        int v41 = sub_10056AAD8((uint64_t)buf);
        *(_DWORD *)__int128 v50 = 67109376;
        *(_DWORD *)&v50[4] = v38;
        LOWORD(v51) = 1024;
        *(_DWORD *)((char *)&v51 + 2) = v41;
        _os_log_error_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "Fast Connect L2CAP Write failed with result %d for data size %d",  v50,  0xEu);
        *(void *)std::stringbuf::string_type buf = &off_10087FAA8;
        if (*(void *)&buf[8]) {
          sub_1002CD254(*(unsigned int **)&buf[8]);
        }
      }

      sub_10057E5E8(a1, *(void *)a2 + 128LL, v38);
    }

    else
    {
      sub_10057E2D0(v39, a2, 4u);
    }

    sub_100242CD8(&v47);
    if (__p[1])
    {
      *(void **)&__int128 v49 = __p[1];
      operator delete(__p[1]);
    }
  }

void sub_100580364( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, unsigned int *a21, uint64_t a22, void *__p, uint64_t a24)
{
  if (a21) {
    sub_1002CD254(a21);
  }
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }

  sub_100242CD8(&a15);
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }

  _Unwind_Resume(a1);
}

void sub_1005804E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)std::stringbuf::string_type __p = 0u;
  __int128 v16 = 0u;
  sub_10040F90C((uint64_t)__p, 0);
  sub_10040F938((uint64_t)__p, 1);
  sub_10040F938((uint64_t)__p, 4);
  sub_10040F9C4((uint64_t)__p, *(_DWORD *)(a4 + 20));
  sub_10040F938((uint64_t)__p, 2);
  sub_10040F938((uint64_t)__p, 8);
  sub_10040FA14((uint64_t)__p, 0LL);
  sub_10040F938((uint64_t)__p, 3);
  sub_10040F938((uint64_t)__p, 4);
  unsigned int v14 = 0;
  char v13 = 0;
  sub_100242CA4(&v13);
  sub_1001964BC((char *)&v14);
  sub_10040F9C4((uint64_t)__p, v14);
  sub_10040F938((uint64_t)__p, 4);
  sub_10040F938((uint64_t)__p, 8);
  uint64_t __src = 0LL;
  sub_100172934(&__src);
  sub_10040F91C((uint64_t)__p, (char *)&__src, 8LL);
  sub_10056AB04(&v11, __p[1], v16 - (unint64_t)__p[1]);
  __int16 v6 = sub_10056AAD8((uint64_t)&v11);
  sub_10040F974(a2, v6);
  __int16 v11 = &off_10087FAA8;
  if (v12) {
    sub_1002CD254(v12);
  }
  sub_10056AB04(&v11, __p[1], v16 - (unint64_t)__p[1]);
  uint64_t v7 = (char *)sub_10056AAF0((uint64_t)&v11);
  sub_10056AB04(&v9, __p[1], v16 - (unint64_t)__p[1]);
  int64_t v8 = sub_10056AAD8((uint64_t)&v9);
  sub_10040F91C(a2, v7, v8);
  uint64_t v9 = &off_10087FAA8;
  if (v10) {
    sub_1002CD254(v10);
  }
  __int16 v11 = &off_10087FAA8;
  if (v12) {
    sub_1002CD254(v12);
  }
  sub_100242CD8(&v13);
  if (__p[1])
  {
    *(void **)&__int128 v16 = __p[1];
    operator delete(__p[1]);
  }

void sub_1005806D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (a13) {
    sub_1002CD254(a13);
  }
  sub_100242CD8(&a16);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100580760(uint64_t a1, uint64_t a2, int a3, int a4)
{
  __int16 v6 = (os_log_s *)qword_1008F7748;
  if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109376;
    v7[1] = a3;
    __int16 v8 = 1024;
    int v9 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Wrote %d bytes with result %d",  (uint8_t *)v7,  0xEu);
  }

_BYTE *sub_100580818(uint64_t a1, unsigned int a2, uint64_t a3)
{
  char v47 = 0;
  sub_100242CA4(&v47);
  __int16 v46 = 0;
  int v45 = 0;
  if (sub_1001988A4(a2, (uint64_t)&v45))
  {
    sub_100242CD0(&v47);
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
      sub_100695C68();
    }
    return sub_100242CD8(&v47);
  }

  uint64_t v6 = sub_10057E20C(a1, (uint64_t)&v45);
  uint64_t v7 = v6;
  if (*(int *)(v6 + 16) >= 5)
  {
    uint64_t v6 = os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_FAULT);
    if ((_DWORD)v6) {
      sub_100695BE4();
    }
  }

  sub_10057E2D0(v6, v7, 5u);
  __int16 v8 = (os_log_s *)qword_1008F7748;
  if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D0100(*(void *)v7, (uint64_t)v48);
    int v9 = (SBYTE7(v49) & 0x80u) == 0 ? v48 : *(uint8_t **)v48;
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Parsing Profile Descriptor for device %s",  (uint8_t *)&buf,  0xCu);
    if (SBYTE7(v49) < 0) {
      operator delete(*(void **)v48);
    }
  }

  unsigned int v10 = sub_10040F7FC(a3);
  uint64_t v11 = sub_10012D890((uint64_t)&v45);
  if (v10)
  {
    uint64_t v12 = v11;
    while (1)
    {
      int v13 = (char)sub_10040F7B0(a3);
      if (v13 < 0)
      {
        unsigned int v14 = sub_10040F7FC(a3);
        int v15 = 65533;
      }

      else
      {
        unsigned int v14 = sub_10040F7B0(a3);
        int v15 = 65534;
      }

      int v16 = v13 & 0x7F;
      switch(v16)
      {
        case 1:
          if (v14)
          {
            if (v14 != 4) {
              goto LABEL_38;
            }
            sub_10040F860(a3);
          }

          goto LABEL_41;
        case 2:
          if (v14)
          {
            if (v14 != 8) {
              goto LABEL_38;
            }
            *(void *)unint64_t v48 = 0LL;
            sub_10040F778(a3, v48, 8uLL);
          }

          goto LABEL_41;
        case 3:
          if (v14)
          {
            if (v14 != 4) {
              goto LABEL_38;
            }
            *(_DWORD *)(v12 + 229) = sub_10040F860(a3);
            *(_BYTE *)(v12 + 228) = 1;
          }

          goto LABEL_41;
        case 4:
          if (v14)
          {
            if (v14 != 8) {
              goto LABEL_38;
            }
            *(void *)unint64_t v48 = 0LL;
            sub_10040F778(a3, v48, 8uLL);
            sub_100179864((uint64_t)sub_1001C3530);
            sub_100176BBC((uint64_t)&v45, 0LL, 3, v48, 8, 0);
            sub_100179804((uint64_t)sub_1001C3530, 48);
          }

          goto LABEL_41;
        default:
          int64_t v17 = (os_log_s *)qword_1008F7748;
          if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)unint64_t v48 = 67109120;
            *(_DWORD *)&v48[4] = v16;
            _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "fastConnectParseProfileDescriptorMessage Key not recognized %d",  v48,  8u);
            if (v14)
            {
LABEL_38:
              int v18 = (os_log_s *)qword_1008F7748;
              if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)unint64_t v48 = 67109632;
                *(_DWORD *)&v48[4] = v16;
                *(_WORD *)&v48[8] = 1024;
                *(_DWORD *)&v48[10] = v14;
                *(_WORD *)&v48[14] = 1024;
                LODWORD(v49) = v14;
                _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "fastConnectParseProfileDescriptorMessage Key:%d Dumped %d of %d bytes ",  v48,  0x14u);
              }

              sub_10040F8BC(a3, v14);
            }
          }

          else if (v14)
          {
            goto LABEL_38;
          }

void sub_100581244(_Unwind_Exception *a1)
{
}

uint64_t sub_1005812D0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v6 = sub_10056AAD8(a2 + 8) - *(_DWORD *)(a2 + 24);
  unsigned int v7 = v6 << 16;
  if ((int)(v6 << 16) >= 1)
  {
    int v21 = 0LL;
    do
    {
      int v8 = (char)sub_10040F7B0(a2);
      if (v8 < 0)
      {
        unsigned int v9 = sub_10040F7FC(a2);
        int v10 = HIWORD(v7) - 3;
      }

      else
      {
        unsigned int v9 = sub_10040F7B0(a2);
        LOWORD(v10) = v6 - 2;
      }

      int v11 = v8 & 0x7F;
      if (v11 == 16)
      {
        unsigned int v12 = v9;
        unsigned __int16 v13 = v9;
        if (v9 != 2) {
          goto LABEL_22;
        }
      }

      else
      {
        if (v11 != 3)
        {
          if (v11 == 1)
          {
            unsigned int v12 = v9;
            unsigned __int16 v13 = v9;
            if (v9 >= 7)
            {
              __int16 v14 = sub_10040F7FC(a2);
              sub_10040F7FC(a2);
              __int16 v15 = sub_10040F7FC(a2);
              sub_10040F7B0(a2);
              buf[0] = 0;
              sub_100242CA4(buf);
              if (sub_100171EC4(a4, (uint64_t *)&v21) || !sub_10017AB4C(v21))
              {
                if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
                  sub_100695D28(&v19, v20);
                }
              }

              else
              {
                *(_WORD *)(sub_10017AB4C(v21) + 8) = v14;
                *(_WORD *)(sub_10017AB4C(v21) + 32) = v15;
              }

              sub_100242CD0(buf);
              sub_100242CD8(buf);
              unsigned int v12 = (unsigned __int16)(v9 - 7);
              unsigned __int16 v13 = v9 - 7;
            }
          }

          else
          {
            int v16 = (os_log_s *)qword_1008F7748;
            unsigned int v12 = v9;
            unsigned __int16 v13 = v9;
            if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 67109120;
              int v23 = v11;
              _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "parseGATTDescriptor Key not recognized %d",  buf,  8u);
              unsigned int v12 = v9;
              unsigned __int16 v13 = v9;
            }
          }

void sub_1005815B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

_BYTE *sub_1005815D4(uint64_t a1, uint64_t a2)
{
  WORD2(v29) = 0;
  LODWORD(v29) = 0;
  char v28 = 0;
  sub_100242CA4(&v28);
  if (sub_1001988A4(a2, (uint64_t)&v29))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
      sub_100695DD8();
    }
  }

  else
  {
    sub_100242CD0(&v28);
    uint64_t v4 = sub_10057E20C(a1, (uint64_t)&v29);
    uint64_t v5 = mach_absolute_time();
    *(void *)(v4 + 184) = v5;
    unsigned int v6 = (os_log_s *)qword_1008F7748;
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v7 = (v5 - *(void *)(v4 + 176)) * dword_1008F1CE4 / *(unsigned int *)algn_1008F1CE8 / 0xF4240;
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Descriptor took %d ms", buf, 8u);
      unsigned int v6 = (os_log_s *)qword_1008F7748;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003D0100(*(void *)v4, (uint64_t)buf);
      int v8 = (SBYTE7(v33) & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      int v9 = *(_DWORD *)(v4 + 20);
      *(_DWORD *)__int16 v31 = 136315394;
      *(void *)&v31[4] = v8;
      *(_WORD *)&v31[12] = 1024;
      *(_DWORD *)&v31[14] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Compose Service Configure message for device %s with profiles %x",  v31,  0x12u);
      if (SBYTE7(v33) < 0) {
        operator delete(*(void **)buf);
      }
    }

    int v26 = v29;
    __int16 v27 = WORD2(v29);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_1008A1F68);
    }
    int v10 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v26, 1);
    if (*(_DWORD *)(v4 + 20))
    {
      uint64_t v11 = (uint64_t)v10;
      *(_OWORD *)__int128 buf = 0u;
      __int128 v33 = 0u;
      sub_10040F90C((uint64_t)buf, 0);
      __int16 v12 = *(_WORD *)(a1 + 680);
      sub_10040F938((uint64_t)buf, 5);
      sub_10040F938((uint64_t)buf, 0);
      sub_10040F974((uint64_t)buf, v12);
      sub_10040F974((uint64_t)buf, 2);
      int v13 = *(_DWORD *)(v4 + 20);
      if ((v13 & 0x10) != 0)
      {
        sub_10040F9C4((uint64_t)buf, 0x10u);
        sub_10040F974((uint64_t)buf, 6);
        sub_10040F938((uint64_t)buf, 21);
        sub_10040F938((uint64_t)buf, 1);
        sub_10040F938((uint64_t)buf, *(_BYTE *)(v4 + 134));
        sub_10040F938((uint64_t)buf, 20);
        sub_10040F938((uint64_t)buf, 1);
        sub_10040F938((uint64_t)buf, *(_BYTE *)(v4 + 135));
        int v13 = *(_DWORD *)(v4 + 20);
      }

      if ((v13 & 1) != 0)
      {
        sub_10040F9C4((uint64_t)buf, 1u);
        sub_10040F974((uint64_t)buf, 0);
        int v13 = *(_DWORD *)(v4 + 20);
      }

      if ((v13 & 0x80000) != 0)
      {
        memset(v31, 0, sizeof(v31));
        sub_10040F90C((uint64_t)v31, 0);
        if (qword_1008D60E0 != -1) {
          dispatch_once(&qword_1008D60E0, &stru_1008A1FE8);
        }
        if (sub_10023A774((uint64_t)off_1008D60D8, v11, (uint64_t)v31))
        {
          *(_DWORD *)(v4 + 20) &= ~0x80000u;
          if (qword_1008D60E0 != -1) {
            dispatch_once(&qword_1008D60E0, &stru_1008A1FE8);
          }
          sub_10023B40C(off_1008D60D8, *(void *)v4, *(unsigned __int16 *)(v4 + 84), 114);
        }

        else
        {
          sub_10040F9C4((uint64_t)buf, 0x80000u);
          sub_10056AB04((void *)&v29 + 1, *(const void **)&v31[8], *(void *)&v31[16] - *(void *)&v31[8]);
          __int16 v14 = sub_10056AAD8((uint64_t)&v29 + 8);
          sub_10040F974((uint64_t)buf, v14);
          *((void *)&v29 + 1) = &off_10087FAA8;
          if (v30) {
            sub_1002CD254(v30);
          }
          sub_10056AB04((void *)&v29 + 1, *(const void **)&v31[8], *(void *)&v31[16] - *(void *)&v31[8]);
          __int16 v15 = (char *)sub_10056AAF0((uint64_t)&v29 + 8);
          sub_10056AB04(&v24, *(const void **)&v31[8], *(void *)&v31[16] - *(void *)&v31[8]);
          int64_t v16 = sub_10056AAD8((uint64_t)&v24);
          sub_10040F91C((uint64_t)buf, v15, v16);
          __int16 v24 = &off_10087FAA8;
          if (v25) {
            sub_1002CD254(v25);
          }
          *((void *)&v29 + 1) = &off_10087FAA8;
          if (v30) {
            sub_1002CD254(v30);
          }
        }

        if (*(void *)&v31[8])
        {
          *(void *)&unsigned __int8 v31[16] = *(void *)&v31[8];
          operator delete(*(void **)&v31[8]);
        }

        int v13 = *(_DWORD *)(v4 + 20);
      }

      if ((v13 & 8) != 0)
      {
        sub_10040F9C4((uint64_t)buf, 8u);
        sub_10040F974((uint64_t)buf, 0);
        int v13 = *(_DWORD *)(v4 + 20);
      }

      if ((v13 & 0x100000) != 0)
      {
        sub_10040F9C4((uint64_t)buf, 0x100000u);
        sub_10040F974((uint64_t)buf, 0);
      }

      sub_100242C98(&v28);
      sub_10056AB04(v31, *(const void **)&buf[8], v33 - *(void *)&buf[8]);
      int64_t v17 = (char *)sub_10056AAF0((uint64_t)v31);
      sub_10056AB04((void *)&v29 + 1, *(const void **)&buf[8], v33 - *(void *)&buf[8]);
      unsigned __int16 v18 = sub_10056AAD8((uint64_t)&v29 + 8);
      uint64_t v19 = sub_100172DA0((uint64_t)sub_100580760, a2, &v29, v17, v18);
      *((void *)&v29 + 1) = &off_10087FAA8;
      if (v30) {
        sub_1002CD254(v30);
      }
      *(void *)__int16 v31 = &off_10087FAA8;
      if (*(void *)&v31[8]) {
        sub_1002CD254(*(unsigned int **)&v31[8]);
      }
      uint64_t v20 = sub_100242CD0(&v28);
      if ((_DWORD)v19)
      {
        int v21 = (os_log_s *)qword_1008F7748;
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
        {
          sub_10056AB04(v31, *(const void **)&buf[8], v33 - *(void *)&buf[8]);
          int v23 = sub_10056AAD8((uint64_t)v31);
          DWORD2(v29) = 67109376;
          HIDWORD(v29) = v19;
          LOWORD(v30) = 1024;
          *(_DWORD *)((char *)&v30 + 2) = v23;
          _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "L2CAP Write failed with result %d for data size %d",  (uint8_t *)&v29 + 8,  0xEu);
          *(void *)__int16 v31 = &off_10087FAA8;
          if (*(void *)&v31[8]) {
            sub_1002CD254(*(unsigned int **)&v31[8]);
          }
        }

        sub_10057E5E8(a1, *(void *)v4 + 128LL, v19);
      }

      else
      {
        sub_10057E2D0(v20, v4, 6u);
      }

      if (*(void *)&buf[8])
      {
        *(void *)&__int128 v33 = *(void *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
    }
  }

  return sub_100242CD8(&v28);
}

void sub_100581C10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, unsigned int *a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24)
{
  if (a17) {
    sub_1002CD254(a17);
  }
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }

  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }

  sub_100242CD8(&a14);
  _Unwind_Resume(a1);
}

void sub_100581D1C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v7 = *a2;
  if ((*a2 & 0x10) != 0)
  {
    char v16 = 0;
    sub_100242CA4(&v16);
    __int16 v15 = 0LL;
    int v8 = sub_100171EC4(*(unsigned __int16 *)(a4 + 64), (uint64_t *)&v15);
    uint64_t v9 = sub_10017AB4C(v15);
    sub_100242CD0(&v16);
    if (v8 || !v9)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
        sub_100695FB8();
      }
      *(_DWORD *)(a4 + 20) &= ~0x10u;
      *a2 &= ~0x10u;
      if (qword_1008D6458 != -1) {
        dispatch_once(&qword_1008D6458, &stru_1008A1FA8);
      }
      sub_10037D41C( qword_1008D6450,  a3,  (void *)*(unsigned __int16 *)(a4 + 54),  *(unsigned __int16 *)(a4 + 64),  *(unsigned __int16 *)(a4 + 136),  *(unsigned __int8 *)(a4 + 135));
    }

    else
    {
      if (qword_1008D6458 != -1) {
        dispatch_once(&qword_1008D6458, &stru_1008A1FA8);
      }
      sub_10037CFC8(qword_1008D6450, a3, *(_BYTE *)(a4 + 28));
    }

    sub_100242CD8(&v16);
    int v7 = *a2;
  }

  if ((v7 & 1) != 0)
  {
    __int16 v15 = 0LL;
    char v16 = 0;
    sub_100242CA4(&v16);
    int v10 = sub_100171EC4(*(unsigned __int16 *)(a4 + 74), (uint64_t *)&v15);
    sub_100242CD0(&v16);
    if (v10)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
        sub_100695F58();
      }
      *(_DWORD *)(a4 + 20) &= ~1u;
      *a2 &= ~1u;
    }

    else
    {
      if (qword_1008D9030 != -1) {
        dispatch_once(&qword_1008D9030, &stru_1008A1FC8);
      }
      sub_100474990((uint64_t)off_1008D9028, a3, *(_BYTE *)(a4 + 28));
    }

    sub_100242CD8(&v16);
    int v7 = *a2;
  }

  if ((v7 & 0x80000) != 0)
  {
    __int16 v15 = 0LL;
    char v16 = 0;
    sub_100242CA4(&v16);
    int v11 = sub_100171EC4(*(unsigned __int16 *)(a4 + 84), (uint64_t *)&v15);
    sub_100242CD0(&v16);
    if (v11)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
        sub_100695EF8();
      }
      *(_DWORD *)(a4 + 20) &= ~0x80000u;
      *a2 &= ~0x80000u;
    }

    else
    {
      if (qword_1008D60E0 != -1) {
        dispatch_once(&qword_1008D60E0, &stru_1008A1FE8);
      }
      sub_10023B0B0((uint64_t)off_1008D60D8, a3, *(_BYTE *)(a4 + 28));
    }

    sub_100242CD8(&v16);
    int v7 = *a2;
  }

  if ((v7 & 8) != 0)
  {
    __int16 v15 = 0LL;
    char v16 = 0;
    sub_100242CA4(&v16);
    int v12 = sub_100171EC4(*(unsigned __int16 *)(a4 + 94), (uint64_t *)&v15);
    sub_100242CD0(&v16);
    if (v12)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
        sub_100695E98();
      }
      *(_DWORD *)(a4 + 20) &= ~0x80000u;
      *a2 &= ~0x80000u;
    }

    else
    {
      if (qword_1008D9250 != -1) {
        dispatch_once(&qword_1008D9250, &stru_1008A2008);
      }
      sub_100521490((uint64_t)off_1008D9248, a3, *(_BYTE *)(a4 + 28));
    }

    sub_100242CD8(&v16);
    int v7 = *a2;
  }

  if ((v7 & 0x100000) != 0)
  {
    char v16 = 0;
    sub_100242CA4(&v16);
    __int16 v15 = 0LL;
    int v13 = sub_100171EC4(*(unsigned __int16 *)(a4 + 114), (uint64_t *)&v15);
    uint64_t v14 = sub_10017AB4C(v15);
    sub_100242CD0(&v16);
    if (v13 || !v14)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
        sub_100695E38();
      }
      *(_DWORD *)(a4 + 20) &= ~0x100000u;
      *a2 &= ~0x100000u;
    }

    else
    {
      if (qword_1008D9720 != -1) {
        dispatch_once(&qword_1008D9720, &stru_1008A2048);
      }
      sub_1003C1508(qword_1008D9718, a3, *(_BYTE *)(a4 + 28));
    }

    sub_100242CD8(&v16);
  }

void sub_1005821A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1005821D4(uint64_t a1, int *a2, unsigned __int8 *a3, uint64_t a4)
{
  int v7 = *a2;
  if ((*a2 & 0x10) != 0)
  {
    v25[0] = 0;
    sub_100242CA4(v25);
    __int16 v27 = 0LL;
    int v8 = sub_100171EC4(*(unsigned __int16 *)(a4 + 64), (uint64_t *)&v27);
    uint64_t v9 = sub_10017AB4C(v27);
    sub_100242CD0(v25);
    if (v8 || !v9)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
        sub_100696198();
      }
      *(_DWORD *)(a4 + 20) &= ~0x10u;
      *a2 &= ~0x10u;
      if (qword_1008D6458 != -1) {
        dispatch_once(&qword_1008D6458, &stru_1008A1FA8);
      }
      sub_10037D41C( qword_1008D6450,  (uint64_t)a3,  (void *)*(unsigned __int16 *)(a4 + 54),  *(unsigned __int16 *)(a4 + 64),  *(unsigned __int16 *)(a4 + 136),  *(unsigned __int8 *)(a4 + 135));
      if (qword_1008D6458 != -1) {
        dispatch_once(&qword_1008D6458, &stru_1008A1FA8);
      }
      sub_10037D0C0( (os_unfair_lock_s *)qword_1008D6450,  *(unsigned __int8 **)a4,  *(unsigned __int16 *)(a4 + 136),  0,  4509LL);
    }

    else
    {
      if (qword_1008D6458 != -1) {
        dispatch_once(&qword_1008D6458, &stru_1008A1FA8);
      }
      int v10 = (os_unfair_lock_s *)qword_1008D6450;
      int v11 = *(unsigned __int8 **)a4;
      unsigned int v12 = *(unsigned __int16 *)(a4 + 136);
      uint64_t v13 = sub_10017AB4C(v27);
      sub_10037D0C0(v10, v11, v12, *(unsigned __int16 *)(v13 + 32), 0LL);
      *(_WORD *)(a4 + 54) = 0;
      *(_WORD *)(a4 + 64) = 0;
    }

    sub_100242CD8(v25);
    int v7 = *a2;
  }

  if ((v7 & 1) != 0)
  {
    __int16 v27 = 0LL;
    char v26 = 0;
    sub_100242CA4(&v26);
    int v14 = sub_100171EC4(*(unsigned __int16 *)(a4 + 74), (uint64_t *)&v27);
    sub_100242CD0(&v26);
    if (v14)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
        sub_100696138();
      }
      *(_DWORD *)(a4 + 20) &= ~1u;
      *a2 &= ~1u;
      if (qword_1008D9030 != -1) {
        dispatch_once(&qword_1008D9030, &stru_1008A1FC8);
      }
      sub_100474A88( (uint64_t)off_1008D9028,  a3,  (unsigned __int16 *)(a4 + 140),  (char *)(a4 + 142),  (char *)(a4 + 143),  *(unsigned __int8 *)(a4 + 144),  4510LL);
    }

    else
    {
      if (qword_1008D9030 != -1) {
        dispatch_once(&qword_1008D9030, &stru_1008A1FC8);
      }
      sub_100474A88( (uint64_t)off_1008D9028,  a3,  (unsigned __int16 *)(a4 + 140),  (char *)(a4 + 142),  (char *)(a4 + 143),  *(unsigned __int8 *)(a4 + 144),  0LL);
      *(_WORD *)(a4 + 74) = 0;
      if (*(_BYTE *)(a4 + 145))
      {
        sub_100242C98(&v26);
        int v16 = sub_100171EC4(*(unsigned __int16 *)(a4 + 124), (uint64_t *)&v27);
        sub_100242CD0(&v26);
        *(_WORD *)(a4 + 124) = 0;
        int64_t v17 = (os_log_s *)qword_1008F7748;
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)unsigned int v25 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "FastConnect success for HandsfreeAoS L2CAP channel",  v25,  2u);
        }

        if (v16) {
          sub_1001EE2A0();
        }
      }
    }

    sub_100242CD8(&v26);
    int v7 = *a2;
  }

  if ((v7 & 0x80000) != 0)
  {
    __int16 v27 = 0LL;
    v25[0] = 0;
    sub_100242CA4(v25);
    int v15 = sub_100171EC4(*(unsigned __int16 *)(a4 + 84), (uint64_t *)&v27);
    sub_100242CD0(v25);
    if (v15)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
        sub_1006960D8();
      }
      *(_DWORD *)(a4 + 20) &= ~0x80000u;
      *a2 &= ~0x80000u;
      if (qword_1008D60E0 != -1) {
        dispatch_once(&qword_1008D60E0, &stru_1008A1FE8);
      }
      sub_10023B1A8(off_1008D60D8, a3, 4512LL);
    }

    else
    {
      if (qword_1008D60E0 != -1) {
        dispatch_once(&qword_1008D60E0, &stru_1008A1FE8);
      }
      sub_10023B1A8(off_1008D60D8, a3, 0LL);
      *(_WORD *)(a4 + 84) = 0;
    }

    sub_100242CD8(v25);
    int v7 = *a2;
  }

  if ((v7 & 8) != 0)
  {
    __int16 v27 = 0LL;
    v25[0] = 0;
    sub_100242CA4(v25);
    int v18 = sub_100171EC4(*(unsigned __int16 *)(a4 + 94), (uint64_t *)&v27);
    sub_100242CD0(v25);
    if (v18)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
        sub_100696078();
      }
      *(_DWORD *)(a4 + 20) &= ~8u;
      *a2 &= ~8u;
      if (qword_1008D9250 != -1) {
        dispatch_once(&qword_1008D9250, &stru_1008A2008);
      }
      sub_100521588((uint64_t)off_1008D9248, (uint64_t)a3, 4511LL);
    }

    else
    {
      if (qword_1008D9250 != -1) {
        dispatch_once(&qword_1008D9250, &stru_1008A2008);
      }
      sub_100521588((uint64_t)off_1008D9248, (uint64_t)a3, 0LL);
      *(_WORD *)(a4 + 94) = 0;
      *(_WORD *)(a4 + 104) = 0;
    }

    sub_100242CD8(v25);
    int v7 = *a2;
  }

  if ((v7 & 0x100000) != 0)
  {
    char v26 = 0;
    sub_100242CA4(&v26);
    __int16 v27 = 0LL;
    uint64_t v19 = (_WORD *)(a4 + 114);
    int v20 = sub_100171EC4(*(unsigned __int16 *)(a4 + 114), (uint64_t *)&v27);
    if (!v20)
    {
      if (sub_10017AB4C(v27))
      {
        unsigned int v21 = (unsigned __int16)*v19;
        unsigned int v22 = *(unsigned __int16 *)(sub_10017AB4C(v27) + 36);
        uint64_t v23 = sub_10017AB4C(v27);
        int v20 = sub_1000B2D50(v21, v22, *(unsigned __int16 *)(v23 + 32), 0LL);
      }

      else
      {
        int v20 = 0;
      }
    }

    sub_100242CD0(&v26);
    __int16 v24 = (os_log_s *)qword_1008F7748;
    if (v20)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
        sub_100696018();
      }
      if (qword_1008D9720 != -1) {
        dispatch_once(&qword_1008D9720, &stru_1008A2048);
      }
      sub_1003C1600(qword_1008D9718, (uint64_t)a3, 4513LL);
      *(_DWORD *)(a4 + 20) &= ~0x100000u;
      *a2 &= ~0x100000u;
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unsigned int v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "GATT Setup Complete", v25, 2u);
      }

      *uint64_t v19 = 0;
    }

    sub_100242CD8(&v26);
  }

void sub_10058288C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

_BYTE *sub_1005828BC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  __int16 v98 = 0;
  int v97 = 0;
  char v96 = 0;
  sub_100242CA4(&v96);
  int v5 = sub_1001988A4(a2, (uint64_t)&v97);
  sub_100242CD0(&v96);
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
      sub_1006963E4();
    }
    return sub_100242CD8(&v96);
  }

  int v94 = v97;
  __int16 v95 = v98;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A1F68);
  }
  unsigned int v6 = (unsigned __int8 *)sub_1003FFEB0(off_1008D5F48, (uint64_t)&v94, 1);
  uint64_t v7 = sub_10057E20C(a1, (uint64_t)&v97);
  if (v7)
  {
    uint64_t v8 = v7;
    __int128 v83 = v6;
    uint64_t v86 = v7;
    if (*(int *)(v7 + 16) >= 9)
    {
      uint64_t v7 = os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_FAULT);
      if ((_DWORD)v7)
      {
        sub_10069636C();
        uint64_t v8 = v86;
      }
    }

    sub_10057E2D0(v7, v8, 9u);
    uint64_t v9 = (os_log_s *)qword_1008F7748;
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003D0100(*(void *)v86, (uint64_t)__p);
      int v10 = (SBYTE7(v116) & 0x80u) == 0 ? __p : (void **)__p[0];
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Setup Complete received from device %s",  buf,  0xCu);
      if (SBYTE7(v116) < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v11 = sub_10040F7FC(a3);
    uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    sub_100242C98(&v96);
    uint64_t v12 = sub_10012D890((uint64_t)&v97);
    LOWORD(v13) = v11;
    if (v11 >= 1)
    {
      uint64_t v14 = v12;
      int v82 = 0;
      while (1)
      {
        int v15 = (char)sub_10040F7B0(a3);
        if (v15 < 0)
        {
          unsigned int v16 = sub_10040F7FC(a3);
          __int16 v17 = -3;
        }

        else
        {
          unsigned int v16 = sub_10040F7B0(a3);
          __int16 v17 = -2;
        }

        int v18 = v15 & 0x7F;
        switch(v15 & 0x7F)
        {
          case 1:
            if (v16)
            {
              if (v16 != 4) {
                goto LABEL_39;
              }
              int v82 = sub_10040F860(a3);
            }

            goto LABEL_42;
          case 2:
            if (v16)
            {
              if (v16 != 8) {
                goto LABEL_39;
              }
              __p[0] = 0LL;
              sub_10040F778(a3, __p, 8uLL);
            }

            goto LABEL_42;
          case 3:
            if (v16)
            {
              if (v16 != 4) {
                goto LABEL_39;
              }
              *(_DWORD *)(v14 + 229) = sub_10040F860(a3);
              *(_BYTE *)(v14 + 228) = 1;
            }

            goto LABEL_42;
          case 4:
            if (v16)
            {
              if (v16 != 8) {
                goto LABEL_39;
              }
              __p[0] = 0LL;
              sub_10040F778(a3, __p, 8uLL);
              sub_100179864((uint64_t)sub_1001C3530);
              sub_100176BBC((uint64_t)&v97, 0LL, 3, __p, 8, 0);
              sub_100179804((uint64_t)sub_1001C3530, 48);
            }

            goto LABEL_42;
          default:
            uint64_t v19 = (os_log_s *)qword_1008F7748;
            if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
            {
              LODWORD(__p[0]) = 67109120;
              HIDWORD(__p[0]) = v18;
              _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "Key %d not recognized in setup complete message",  (uint8_t *)__p,  8u);
              if (v16)
              {
LABEL_39:
                int v20 = (os_log_s *)qword_1008F7748;
                if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(__p[0]) = 67109632;
                  HIDWORD(__p[0]) = v18;
                  LOWORD(__p[1]) = 1024;
                  *(_DWORD *)((char *)&__p[1] + 2) = v16;
                  HIWORD(__p[1]) = 1024;
                  LODWORD(v116) = v16;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "Key:%d Dumped %d of %d bytes ",  (uint8_t *)__p,  0x14u);
                }

                sub_10040F8BC(a3, v16);
              }
            }

            else if (v16)
            {
              goto LABEL_39;
            }

void sub_1005837CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
}

uint64_t sub_100583938(uint64_t a1)
{
  uint64_t v2 = sub_1002E8D94();
  return (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 344LL))(v2, *(void *)(a1 + 32));
}

void sub_100583964(int a1, int a2, int a3)
{
  unsigned int v6 = sub_1001728E8(a1);
  if (v6)
  {
    uint64_t v7 = (os_log_s *)qword_1008F7748;
    if (a2)
    {
      uint64_t v8 = v6;
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
      {
        int v9 = *((unsigned __int16 *)v8 + 2);
        int v10 = 67109888;
        int v11 = a2;
        __int16 v12 = 1024;
        int v13 = v9;
        __int16 v14 = 1024;
        int v15 = a1;
        __int16 v16 = 1024;
        int v17 = a3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "FastConnectMagicPolicyCB: Policy enforcement failed %{bluetooth:OI_STATUS}u - cid 0x%x, handle %d securityFailed %d",  (uint8_t *)&v10,  0x1Au);
        uint64_t v7 = (os_log_s *)qword_1008F7748;
      }
    }

    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 67109120;
      int v11 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Magic Pairing came back with result %d",  (uint8_t *)&v10,  8u);
    }

    if (a2 != 1500) {
      sub_100583AD4(a2, a1);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
  {
    sub_100696444();
  }

BOOL sub_100583AD4(int a1, int a2)
{
  uint64_t v4 = sub_100404EB8();
  int v5 = operator new(0x18uLL);
  void v5[4] = 1;
  *(void *)int v5 = &off_1008A1E40;
  *((_DWORD *)v5 + 3) = a1;
  *((_DWORD *)v5 + 4) = a2;
  return sub_100405744(v4, v5);
}

void sub_100583B2C(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = sub_1001728E8(a3);
  if (v5)
  {
    unsigned int v6 = v5;
    uint64_t v7 = v5;
    uint64_t v8 = sub_10017AB4C(v5);
    int v42 = *(_DWORD *)(v8 + 10);
    __int16 v43 = *(_WORD *)(v8 + 14);
    uint64_t v9 = sub_10057E20C(a1, (uint64_t)&v42);
    if (v9)
    {
      uint64_t v10 = v9;
      if ((_DWORD)a2 == 1414 || (_DWORD)a2 == 742)
      {
        if (!*(_BYTE *)(v9 + 51))
        {
          __int16 v31 = (os_log_s *)qword_1008F7748;
          BOOL v32 = os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT);
          char v33 = 1;
          if (v32)
          {
            *(_DWORD *)__int128 buf = 67109632;
            *(_DWORD *)&uint8_t buf[4] = a2;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = 0;
            *(_WORD *)&buf[14] = 1024;
            LODWORD(v45) = 1;
            _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Authentication failed with result: %d. Retrying authentication since auth retries %d < %d",  buf,  0x14u);
            char v33 = *(_BYTE *)(v10 + 51) + 1;
          }

          *(_BYTE *)(v10 + 51) = v33;
          *((void *)v7 + 8) = &unk_1008A1E00;
          char v41 = 0;
          sub_100242CA4(&v41);
          uint64_t v34 = sub_1001F0324((uint64_t)sub_100583964, (uint64_t)&v42, *((__int128 **)v7 + 8), (int *)v6 + 18, 1);
          if ((_DWORD)v34)
          {
            char v35 = (os_log_s *)qword_1008F7748;
            if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v34;
              _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Policy Mgr for PFC new connection failed %d",  buf,  8u);
            }
          }

          sub_100242CD0(&v41);
          if ((_DWORD)v34) {
            sub_10057E5E8(a1, (uint64_t)&v42, v34);
          }
          goto LABEL_25;
        }
      }

      else if (!(_DWORD)a2)
      {
        uint64_t v11 = (mach_absolute_time() - *(void *)(v9 + 168))
            * dword_1008F1CE4
            / *(unsigned int *)algn_1008F1CE8
            / 0xF4240;
        *(_DWORD *)(v10 + 192) += v11;
        __int16 v12 = *(void **)(v10 + 200);
        int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v11));
        [v12 setObject:v13 forKey:@"EncryptionConnectionTimeMs"];

        __int16 v14 = (os_log_s *)qword_1008F7748;
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v11;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Authentication took %d ms", buf, 8u);
        }

        uint64_t v15 = mach_absolute_time();
        unsigned int v16 = *(unsigned __int16 *)(v10 + 48);
        *(void *)(v10 + 176) = v15;
        if (sub_1001988A4(v16, (uint64_t)&v42))
        {
          int v17 = (os_log_s *)qword_1008F7748;
          if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
            sub_100696518(v10 + 48, v17, v18, v19, v20, v21, v22, v23);
          }
          return;
        }

        char v41 = 0;
        sub_100242CA4(&v41);
        __int128 v58 = 0u;
        __int128 v59 = 0u;
        __int128 v56 = 0u;
        __int128 v57 = 0u;
        __int128 v54 = 0u;
        __int128 v55 = 0u;
        __int128 v52 = 0u;
        __int128 v53 = 0u;
        __int128 v50 = 0u;
        __int128 v51 = 0u;
        __int128 v48 = 0u;
        __int128 v49 = 0u;
        __int128 v46 = 0u;
        __int128 v47 = 0u;
        *(_OWORD *)__int128 buf = 0u;
        __int128 v45 = 0u;
        sub_1001EE0BC((uint64_t)buf, 256, (uint64_t)"PFC Authentication took %d", v36, v37, v38, v39, v40, v11);
        sub_1000B9914((const char *)buf);
        sub_100242CD0(&v41);
        *(_BYTE *)(v10 + 51) = 0;
        sub_10057F738(a1, v10);
LABEL_25:
        sub_100242CD8(&v41);
        return;
      }

      *(_BYTE *)(v9 + 51) = 0;
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
        sub_1006964EC();
      }
      sub_10057E5E8(a1, v10 + 8, a2);
    }

    else
    {
      int v24 = (os_log_s *)qword_1008F7748;
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
        sub_100696470((uint64_t)&v42, v24, v25, v26, v27, v28, v29, v30);
      }
    }
  }

void sub_100583EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100583F1C(uint64_t a1, __int16 a2, char a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  int v74 = a8;
  __int16 v75 = WORD2(a8);
  __int16 v14 = (os_log_s *)qword_1008F7748;
  if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Channel support came back with status %d",  buf,  8u);
  }

  int v72 = v74;
  __int16 v73 = v75;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A1F68);
  }
  uint64_t v15 = (char *)sub_1003FFEB0(off_1008D5F48, (uint64_t)&v72, 1);
  BOOL v17 = (_DWORD)a6 != 4500 && (_DWORD)a6 != 0;
  if (!a4 || v17)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
      sub_100696630();
    }
    if (a7 || !v15)
    {
      if ((_DWORD)a6 == 4515 && a7 && v15)
      {
        sub_10057E258(a1, (uint64_t)&v74);
        BOOL v32 = (os_log_s *)qword_1008F7748;
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Start SDP due to SDP mismatch of incoming FC",  buf,  2u);
        }

        if (qword_1008D9600 != -1) {
          dispatch_once(&qword_1008D9600, &stru_1008A2088);
        }
        sub_10041ABC8();
        if (qword_1008D9600 != -1) {
          dispatch_once(&qword_1008D9600, &stru_1008A2088);
        }
        sub_10041AA14(qword_1008D95F8, (uint64_t)v15, 0LL, 1, 2);
      }

      return;
    }

    uint64_t v24 = sub_10057E20C(a1, (uint64_t)&v74);
    if (!v24)
    {
      if ((_DWORD)a6 != 711)
      {
LABEL_108:
        sub_10057E258(a1, (uint64_t)&v74);
        int v66 = a6 == 4515;
        *(_BYTE *)(a1 + 682) = v66;
        uint64_t v67 = (os_log_s *)qword_1008F7748;
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v68 = "Legacy";
          if ((_DWORD)a6 == 4515) {
            unsigned int v68 = "FC";
          }
          *(_DWORD *)__int128 buf = 136315138;
          *(void *)&uint8_t buf[4] = v68;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "Profile connection: %s", buf, 0xCu);
          int v66 = *(unsigned __int8 *)(a1 + 682);
        }

        if (v66)
        {
          if (qword_1008D9600 != -1) {
            dispatch_once(&qword_1008D9600, &stru_1008A2088);
          }
          sub_10041ABC8();
        }

        if (qword_1008D60D0 != -1) {
          dispatch_once(&qword_1008D60D0, &stru_1008A1F88);
        }
        sub_100426A10((uint64_t)off_1008D60C8, (uint64_t)v15, 0, 2);
        return;
      }

void sub_100584B48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100584BD0(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v6 = (os_log_s *)qword_1008F7748;
  if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 67109376;
    int v10 = a2;
    __int16 v11 = 1024;
    int v12 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Fast connect channel disconnected for CID %d with status %d",  (uint8_t *)&v9,  0xEu);
  }

  if ((_DWORD)a3 != 436)
  {
    for (uint64_t i = 0LL; i != 624; i += 208LL)
    {
      if (*(_DWORD *)(a1 + i + 32) && *(unsigned __int16 *)(a1 + i + 64) == a2)
      {
        sub_10057E5E8(a1, a1 + i + 24, a3);
        return;
      }
    }

    uint64_t v8 = (os_log_s *)qword_1008F7748;
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 67109120;
      int v10 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Fast connect channel disconnected can not find FC device for cid %d",  (uint8_t *)&v9,  8u);
    }
  }

void sub_100584D24(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4)
{
  unsigned int v16 = 0LL;
  BOOL v17 = 0LL;
  sub_10056AB04(&v16, a3, a4);
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  sub_10040F738((uint64_t)&v14, 0, (uint64_t)&v16);
  int v6 = sub_10040F7B0((uint64_t)&v14);
  sub_10040F7B0((uint64_t)&v14);
  int v7 = sub_10040F7FC((uint64_t)&v14);
  uint64_t v8 = 0LL;
  while (!*(_DWORD *)(a1 + v8 + 32) || *(unsigned __int16 *)(a1 + v8 + 64) != (_DWORD)a2)
  {
    v8 += 208LL;
    if (v8 == 624) {
      goto LABEL_7;
    }
  }

  *(_DWORD *)(a1 + v8 + sub_100242FAC(v15 - 48) = v7;
LABEL_7:
  switch(v6)
  {
    case 3:
      int v9 = (os_log_s *)qword_1008F7748;
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v13 = 0;
        int v10 = "Service Descriptor received";
        goto LABEL_17;
      }

      break;
    case 4:
      __int16 v11 = (os_log_s *)qword_1008F7748;
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Service Descriptor Rsp received", v13, 2u);
      }

      sub_100580818(a1, a2, (uint64_t)&v14);
      sub_1005815D4(a1, a2);
      break;
    case 5:
      int v9 = (os_log_s *)qword_1008F7748;
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v13 = 0;
        int v10 = "Service Negotiation received";
LABEL_17:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, v13, 2u);
      }

      break;
    case 6:
      int v12 = (os_log_s *)qword_1008F7748;
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Setup Complete received", v13, 2u);
      }

      sub_1005828BC(a1, a2, (uint64_t)&v14);
      break;
    case 7:
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
        sub_100696748();
      }
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
        sub_1006966E8();
      }
      break;
  }

  *((void *)&v14 + 1) = &off_10087FAA8;
  if ((void)v15) {
    sub_1002CD254((unsigned int *)v15);
  }
  unsigned int v16 = &off_10087FAA8;
  if (v17) {
    sub_1002CD254(v17);
  }
}

void sub_100584FAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13, uint64_t a14, uint64_t a15, unsigned int *a16)
{
  if (a13) {
    sub_1002CD254(a13);
  }
  if (a16) {
    sub_1002CD254(a16);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_100584FF8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, char a5, uint64_t a6)
{
  __int128 v80 = 0LL;
  unsigned __int16 v79 = 0;
  unsigned int v78 = 0;
  char v77 = 0;
  sub_100242CA4(&v77);
  if (sub_10010EF78(a6, (uint64_t)&v78))
  {
    int v12 = (os_log_s *)qword_1008F7748;
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
      sub_1006969E0(a6, v12, v13);
    }
    return sub_100242CD8(&v77);
  }

  sub_100242CD0(&v77);
  unsigned int v75 = v78;
  unsigned __int16 v76 = v79;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A1F68);
  }
  __int128 v14 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v75, 1);
  if (sub_10057E20C(a1, (uint64_t)&v78))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
    {
      sub_1003D0100((uint64_t)v14, (uint64_t)buf);
      sub_100696990();
    }

    return sub_100242CD8(&v77);
  }

  int v15 = *(_DWORD *)(a1 + 664);
  if (v14[976])
  {
    unsigned int v16 = (os_log_s *)qword_1008F7748;
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter guest device removing HFP and GATT profiles from support",  buf,  2u);
    }

    v15 &= 0xFFEFFFFE;
  }

  if (a4 < 0x18)
  {
LABEL_56:
    sub_100242C98(&v77);
    sub_1001967F4("d", 9u, 0LL, (_BYTE *)a6, a5, v34, v35, v36, 0LL);
    sub_100242CD0(&v77);
    return sub_100242CD8(&v77);
  }

  BOOL v17 = (os_log_s *)qword_1008F7748;
  if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D0100((uint64_t)v14, (uint64_t)buf);
    uint64_t v18 = v83[0] >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)__int128 v84 = 136315138;
    *(void *)&v84[4] = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Received Echo Request from %s", v84, 0xCu);
    if (SHIBYTE(v83[0]) < 0) {
      operator delete(*(void **)buf);
    }
  }

  sub_100242C98(&v77);
  if (!a2)
  {
    int v55 = "data";
LABEL_121:
    int v56 = 2231;
    goto LABEL_128;
  }

  if (!a3)
  {
    int v55 = "(dataSize) > 0";
    goto LABEL_121;
  }

  if (a3 == 1)
  {
    int v55 = "ByteStream_NumReadBytesAvail(pBs) >= 1";
    int v56 = 2234;
    goto LABEL_128;
  }

  if (a3 < 4)
  {
    int v55 = "ByteStream_NumReadBytesAvail(pBs) >= 2";
    int v56 = 2235;
    goto LABEL_128;
  }

  if (a3 < 6)
  {
    int v55 = "ByteStream_NumReadBytesAvail(pBs) >= 2";
    int v56 = 2236;
    goto LABEL_128;
  }

  if (a3 == 6)
  {
    int v55 = "ByteStream_NumReadBytesAvail(pBs) >= 1";
    int v56 = 2237;
    goto LABEL_128;
  }

  if (a3 < 8)
  {
    int v55 = "ByteStream_NumReadBytesAvail(pBs) >= 1";
    int v56 = 2238;
    goto LABEL_128;
  }

  if (a3 <= 9)
  {
    int v55 = "ByteStream_NumReadBytesAvail(pBs) >= 2";
    int v56 = 2239;
LABEL_128:
    sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/FastConnectManager.mm",  v56,  v55);
  }

  int v19 = *(unsigned __int8 *)(a2 + 6);
  if (v19 != 1 || *(int *)(a6 + 148) > 2)
  {
    sub_100242CD0(&v77);
    uint64_t v33 = (os_log_s *)qword_1008F7748;
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
    {
      sub_1003D0100((uint64_t)v14, (uint64_t)v84);
      uint64_t v38 = v85 >= 0 ? v84 : *(_BYTE **)v84;
      int v39 = *(_DWORD *)(a6 + 148);
      *(_DWORD *)__int128 buf = 136315650;
      *(void *)&uint8_t buf[4] = v38;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)__int128 v82 = v19;
      *(_WORD *)&v82[4] = 1024;
      v83[0] = v39;
      _os_log_error_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "Echo Request failed for device %s cmd:%d refCount:%d",  buf,  0x18u);
      if (v85 < 0) {
        operator delete(*(void **)v84);
      }
    }

    goto LABEL_56;
  }

  char v66 = *(_BYTE *)(a2 + 7);
  unsigned int v20 = *(unsigned __int16 *)(a2 + 8);
  char v74 = 0;
  int v68 = sub_1001E6578(a6, &v74);
  uint64_t v21 = (os_log_s *)qword_1008F7748;
  if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v68;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "parseFastConnectEchoReq isPaired %d", buf, 8u);
  }

  if (!v68)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
      sub_100696964();
    }
    int v65 = 0;
    LOBYTE(v67) = 0;
    uint64_t v32 = 4502LL;
    goto LABEL_94;
  }

  if (a3 < 0xC)
  {
    __int128 v57 = "ByteStream_NumReadBytesAvail(pBs) >= 2";
    int v58 = 2256;
    goto LABEL_136;
  }

  if (a3 < 0xE)
  {
    __int128 v57 = "ByteStream_NumReadBytesAvail(pBs) >= 2";
    int v58 = 2258;
    goto LABEL_136;
  }

  if (a3 < 0x12)
  {
    __int128 v57 = "ByteStream_NumReadBytesAvail(pBs) >= 4";
    int v58 = 2261;
    goto LABEL_136;
  }

  if (a3 <= 0x19) {
    sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/FastConnectManager.mm",  2262,  "ByteStream_NumReadBytesAvail(pBs) >= (8)");
  }
  __int16 v61 = *(_WORD *)(a2 + 12);
  __int16 v62 = *(_WORD *)(a2 + 10);
  int v22 = *(_DWORD *)(a2 + 14);
  unint64_t v67 = *(void *)(a2 + 18);
  uint64_t v23 = (os_log_s *)qword_1008F7748;
  if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "parseFastConnectEchoReq remote version %d",  buf,  8u);
  }

  int v65 = v22;
  if (v20 >= 2)
  {
    if (a3 < 0x1E)
    {
      __int128 v57 = "ByteStream_NumReadBytesAvail(pBs) >= 4";
      int v58 = 2267;
    }

    else if (a3 < 0x22)
    {
      __int128 v57 = "ByteStream_NumReadBytesAvail(pBs) >= 4";
      int v58 = 2268;
    }

    else
    {
      if (a3 > 0x23)
      {
        int v63 = *(_DWORD *)(a2 + 26);
        int v24 = *(_DWORD *)(a2 + 30);
        uint64_t v25 = (os_log_s *)qword_1008F7748;
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v63;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v24;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "remoteAppleSupportedFeatures %x remoteSdpServiceDataBaseState %x",  buf,  0xEu);
        }

        int v60 = v24;
        int v72 = 0;
        int v73 = 0;
        sub_100585EC4((int *)&v78, &v73, &v72);
        uint64_t v26 = (os_log_s *)qword_1008F7748;
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v73;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v72;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "parseFastConnectEchoReq deviceAppleSupportedFeatures %x deviceSdpServiceDataBaseState %x",  buf,  0xEu);
        }

        int v30 = v73;
        if (v73 != v63)
        {
          __int16 v31 = (os_log_s *)qword_1008F7748;
          if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v30;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = v63;
            _os_log_error_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "parseFastConnectEchoReq DID expected %x received %x",  buf,  0xEu);
            __int16 v31 = (os_log_s *)qword_1008F7748;
          }

          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            sub_1003D0100((uint64_t)v14, (uint64_t)v84);
            sub_10069691C();
          }

          sub_1003D6758((uint64_t)v14, v63, 0);
        }

        if (v72 == v60)
        {
          uint64_t v32 = 4500LL;
        }

        else
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
            sub_1006968BC();
          }
          else {
            uint64_t v32 = 4504LL;
          }
        }

        if (v20 >= 3)
        {
          uint64_t v71 = 0LL;
          if (a3 <= 0x27)
          {
            int v59 = 2297;
          }

          else
          {
            if (a3 > 0x2B)
            {
              uint64_t v40 = *(unsigned int *)(a2 + 40);
              uint64_t v64 = *(unsigned int *)(a2 + 36);
              sub_100585FF4((int *)&v78, &v71);
              int v41 = v71;
              int v42 = HIDWORD(v71);
              if (__PAIR64__(v71, HIDWORD(v71)) != __PAIR64__(v40, v64))
              {
                uint64_t v43 = (os_log_s *)qword_1008F7748;
                if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)__int128 buf = 67109888;
                  *(_DWORD *)&uint8_t buf[4] = v41;
                  *(_WORD *)&uint8_t buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v42;
                  *(_WORD *)__int128 v82 = 1024;
                  *(_DWORD *)&v82[2] = v40;
                  LOWORD(v83[0]) = 1024;
                  *(_DWORD *)((char *)v83 + 2) = v64;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "Supported Extended Features expected: 0x%x 0x%x, Received: 0x%x 0x%x",  buf,  0x1Au);
                  uint64_t v43 = (os_log_s *)qword_1008F7748;
                }

                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                {
                  sub_1003D0100((uint64_t)v14, (uint64_t)__p);
                  uint64_t v44 = v70 >= 0 ? __p : (void **)__p[0];
                  *(_DWORD *)__int128 buf = 136315650;
                  *(void *)&uint8_t buf[4] = v44;
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)__int128 v82 = v40;
                  *(_WORD *)&v82[4] = 1024;
                  v83[0] = v64;
                  _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "Updating Supported Extended Features for device %s to 0x%x 0x%x",  buf,  0x18u);
                  if (v70 < 0) {
                    operator delete(__p[0]);
                  }
                }

                sub_1003D6A34((uint64_t)v14, v40 | (v64 << 32), 0);
              }

              goto LABEL_86;
            }

            int v59 = 2298;
          }

          sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/FastConnectManager.mm",  v59,  "ByteStream_NumReadBytesAvail(pBs) >= 4");
        }

void sub_100585E68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
}

void sub_100585EC4(int *a1, _DWORD *a2, _DWORD *a3)
{
  int v12 = *a1;
  __int16 v13 = *((_WORD *)a1 + 2);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A1F68);
  }
  int v5 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v12, 1);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    sub_1003D6ED8((uint64_t)v5, a2);
    __int128 v11 = xmmword_1006C2CD0;
    std::stringbuf::string_type __p = 0LL;
    int v9 = 0LL;
    uint64_t v10 = 0LL;
    if (sub_1003D4C9C(v6, (uint64_t)&v11, 0x201u, &__p))
    {
      int v7 = __p;
      if (*(_BYTE *)__p == 1) {
        *a3 = *((_DWORD *)__p + 2);
      }
    }

    else
    {
      *a3 = 0;
      int v7 = __p;
      if (!__p) {
        return;
      }
    }

    int v9 = v7;
    operator delete(v7);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
  {
    sub_100696A48();
  }

void sub_100585FD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100585FF4(int *a1, void *a2)
{
  int v4 = *a1;
  __int16 v5 = *((_WORD *)a1 + 2);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A1F68);
  }
  __int16 v3 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v4, 1);
  if (v3)
  {
    sub_1003D6F90((uint64_t)v3, a2);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
  {
    sub_100696A74();
  }

_BYTE *sub_10058609C( uint64_t a1, int *a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, unsigned int a7, uint64_t a8)
{
  int v67 = *a2;
  __int16 v68 = *((_WORD *)a2 + 2);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008A1F68);
  }
  __int128 v14 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v67, 1);
  char v66 = 0;
  sub_100242CA4(&v66);
  int v65 = 0LL;
  int v15 = sub_100171EC4(a3, (uint64_t *)&v65);
  if (v15 || !v65 || !sub_10017AB4C(v65))
  {
    unsigned int v20 = (os_log_s *)qword_1008F7748;
    if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
      sub_100696AA0((uint64_t *)&v65, v15, v20);
    }
    goto LABEL_22;
  }

  unsigned int v16 = (os_log_s *)qword_1008F7748;
  if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D0100((uint64_t)v14, (uint64_t)__p);
    BOOL v17 = v64 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 136315650;
    *(void *)char v70 = v17;
    *(_WORD *)&v70[8] = 1024;
    *(_DWORD *)uint64_t v71 = a7;
    *(_WORD *)&void v71[4] = 1024;
    *(_DWORD *)int v72 = a8;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "fastConnectEchoRspEvent for device %s of length %d with result %d",  buf,  0x18u);
    if (v64 < 0) {
      operator delete(__p[0]);
    }
  }

  if (a7 >= 0x18)
  {
    int v18 = *a6;
    if (v18 != 2)
    {
      if (v18 == 7)
      {
        a8 = *((unsigned __int16 *)a6 + 2);
        int v19 = (os_log_s *)qword_1008F7748;
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 67109120;
          *(_DWORD *)char v70 = a8;
          _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "fastConnectEchoRspEvent with errorCode %d",  buf,  8u);
        }
      }

      goto LABEL_17;
    }

    uint64_t v57 = sub_10012D890((uint64_t)a2);
    unsigned int v22 = *((unsigned __int16 *)a6 + 1);
    __int16 v23 = a6[4];
    __int16 v24 = a6[5];
    *(_WORD *)(sub_10017AB4C(v65) + 8) = v23 | (v24 << 8);
    __int16 v25 = a6[6];
    __int16 v26 = a6[7];
    *(_WORD *)(sub_10017AB4C(v65) + 32) = v25 | (v26 << 8);
    int v27 = *((_DWORD *)a6 + 2);
    uint64_t v28 = *(void *)(a6 + 12);
    if (v22 < 2)
    {
LABEL_58:
      if ((v28 & 1) != 0)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
          sub_100696890();
        }
        a8 = 4507LL;
      }

      else if (!(_DWORD)a8)
      {
        int v39 = (os_log_s *)qword_1008F7748;
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
        {
          int v40 = v27;
          int v41 = *(unsigned __int16 *)(sub_10017AB4C(v65) + 8);
          int v42 = *((unsigned __int16 *)v65 + 2);
          int v43 = *(unsigned __int16 *)(sub_10017AB4C(v65) + 32);
          int v44 = *(unsigned __int16 *)(sub_10017AB4C(v65) + 36);
          *(_DWORD *)__int128 buf = 67110144;
          *(_DWORD *)char v70 = v41;
          *(_WORD *)&v70[4] = 1024;
          *(_DWORD *)&v70[6] = v42;
          *(_WORD *)uint64_t v71 = 1024;
          *(_DWORD *)&v71[2] = v43;
          *(_WORD *)int v72 = 1024;
          *(_DWORD *)&v72[2] = v44;
          __int16 v73 = 1024;
          int v27 = v40;
          int v74 = v40;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "fastConnectEchoRspEvent CID sizes Remote %d, Local %d, Remote MTU %d, local %d, supported profiles %d",  buf,  0x20u);
        }

        sub_10010C9D4(v57);
        uint64_t v45 = sub_10017AB4C(v65);
        int v46 = *(_DWORD *)(v57 + 48);
        *(_WORD *)(v45 + 14) = *(_WORD *)(v57 + 52);
        *(_DWORD *)(v45 + 10) = v46;
        *(void *)sub_10017AB4C(v65) = v57;
        *(_BYTE *)(sub_10017AB4C(v65) + 25) = 0;
        *(_BYTE *)(sub_10017AB4C(v65) + 28) = 0;
        if ((v28 & 4) != 0) {
          sub_1001C3530((uint64_t)a2);
        }
        *(_BYTE *)(sub_10017AB4C(v65) + 16) = 4;
        unsigned __int16 v47 = v65;
        v65[19] = -1;
        a8 = sub_100187CD4(*((unsigned __int16 *)v47 + 2), 4, 5u, 0LL, (uint64_t *)v47 + 12, 0xFFFFFFFF);
        uint64_t v48 = (uint64_t *)sub_10017AB4C(v65);
        sub_10018A690(*v48);
        *(_WORD *)(sub_10017AB4C(v65) + 40) = 5000;
        uint64_t v49 = (uint64_t *)sub_10017AB4C(v65);
        sub_100173B8C(*v49);
        if (!(_DWORD)a8)
        {
          sub_100242CD0(&v66);
          a8 = 0LL;
          __int16 v50 = *((_WORD *)v65 + 2);
LABEL_72:
          sub_100583F1C( a1,  v50,  v28,  v27,  0LL,  a8,  0,  *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32));
          return sub_100242CD8(&v66);
        }
      }

      sub_1001734D8((uint64_t)v65);
      sub_100242CD0(&v66);
      if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
        sub_100696B7C();
      }
      __int16 v50 = 0;
      LOBYTE(v28) = 0;
      int v27 = 0;
      goto LABEL_72;
    }

    if (a7 < 0x1C)
    {
      uint64_t v51 = "ByteStream_NumReadBytesAvail(bs) >= 4";
      int v52 = 2544;
    }

    else
    {
      int v54 = *((_DWORD *)a6 + 2);
      if (a7 > 0x1D)
      {
        unint64_t v55 = *(void *)(a6 + 12);
        int v58 = *((_DWORD *)a6 + 5);
        int v56 = *((_DWORD *)a6 + 6);
        uint64_t v29 = (os_log_s *)qword_1008F7748;
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109376;
          *(_DWORD *)char v70 = v58;
          *(_WORD *)&v70[4] = 1024;
          *(_DWORD *)&v70[6] = v56;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "remoteAppleSupportedFeatures %x remoteSdpServiceDataBaseState %x",  buf,  0xEu);
        }

        uint64_t v62 = 0LL;
        sub_100585EC4(a2, (_DWORD *)&v62 + 1, &v62);
        int v30 = (os_log_s *)qword_1008F7748;
        if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109376;
          *(_DWORD *)char v70 = HIDWORD(v62);
          *(_WORD *)&v70[4] = 1024;
          *(_DWORD *)&v70[6] = v62;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "deviceAppleSupportedFeatures %x deviceSdpServiceDataBaseState %x",  buf,  0xEu);
        }

        int v31 = HIDWORD(v62);
        if (HIDWORD(v62) != v58)
        {
          uint64_t v32 = (os_log_s *)qword_1008F7748;
          if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 67109376;
            *(_DWORD *)char v70 = v31;
            *(_WORD *)&v70[4] = 1024;
            *(_DWORD *)&v70[6] = v58;
            _os_log_error_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "DID expected %x received %x",  buf,  0xEu);
            uint64_t v32 = (os_log_s *)qword_1008F7748;
          }

          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            sub_1003D0100((uint64_t)v14, (uint64_t)__p);
            sub_10069691C();
          }

          sub_1003D6758((uint64_t)v14, v58, 0);
        }

        LOBYTE(v28) = v55;
        if ((_DWORD)v62 != v56)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR)) {
            sub_100696BDC();
          }
          else {
            a8 = 4504LL;
          }
        }

        if (v22 < 3) {
          goto LABEL_57;
        }
        uint64_t v61 = 0LL;
        if (a7 <= 0x21)
        {
          int v53 = 2571;
        }

        else
        {
          if (a7 > 0x25)
          {
            uint64_t v33 = *(unsigned int *)(a6 + 30);
            uint64_t v34 = *(unsigned int *)(a6 + 34);
            sub_100585FF4(a2, &v61);
            int v36 = v61;
            int v35 = HIDWORD(v61);
            if (__PAIR64__(v61, HIDWORD(v61)) != __PAIR64__(v34, v33))
            {
              uint64_t v37 = (os_log_s *)qword_1008F7748;
              if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__int128 buf = 67109888;
                *(_DWORD *)char v70 = v36;
                *(_WORD *)&v70[4] = 1024;
                *(_DWORD *)&v70[6] = v35;
                *(_WORD *)uint64_t v71 = 1024;
                *(_DWORD *)&v71[2] = v34;
                *(_WORD *)int v72 = 1024;
                *(_DWORD *)&v72[2] = v33;
                _os_log_error_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "Supported Extended Features expected: 0x%x 0x%x, Received: 0x%x 0x%x",  buf,  0x1Au);
                uint64_t v37 = (os_log_s *)qword_1008F7748;
              }

              if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
              {
                sub_1003D0100((uint64_t)v14, (uint64_t)v59);
                uint64_t v38 = v60 >= 0 ? v59 : (void **)v59[0];
                *(_DWORD *)__int128 buf = 136315650;
                *(void *)char v70 = v38;
                *(_WORD *)&v70[8] = 1024;
                *(_DWORD *)uint64_t v71 = v34;
                *(_WORD *)&void v71[4] = 1024;
                *(_DWORD *)int v72 = v33;
                _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Updating Supported Extended Features for device %s to 0x%x 0x%x",  buf,  0x18u);
                if (v60 < 0) {
                  operator delete(v59[0]);
                }
              }

              sub_1003D6A34((uint64_t)v14, v34 | (v33 << 32), 0);
            }

            LOBYTE(v28) = v55;
LABEL_57:
            int v27 = v54;
            goto LABEL_58;
          }

          int v53 = 2572;
        }

        sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/FastConnectManager.mm",  v53,  "ByteStream_NumReadBytesAvail(bs) >= 4");
      }

      uint64_t v51 = "ByteStream_NumReadBytesAvail(bs) >= 2";
      int v52 = 2545;
    }

    sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/FastConnectManager.mm",  v52,  v51);
  }

void sub_100586924( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
}

void sub_100586960(uint64_t a1, void **a2)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = (uint64_t)(a2 + 2);
  do
  {
    uint64_t v6 = (uint64_t *)(v4 + 208 * v3);
    if (*((_DWORD *)v6 + 4))
    {
      uint64_t v7 = *v6;
      if (*v6)
      {
        int v9 = a2[1];
        unint64_t v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 >= v8)
        {
          uint64_t v11 = ((char *)v9 - (_BYTE *)*a2) >> 3;
          uint64_t v12 = v8 - (void)*a2;
          uint64_t v13 = v12 >> 2;
          else {
            unint64_t v14 = v13;
          }
          if (v14)
          {
            int v15 = (char *)sub_100008BA0(v5, v14);
            uint64_t v7 = *v6;
          }

          else
          {
            int v15 = 0LL;
          }

          unsigned int v16 = &v15[8 * v11];
          *(void *)unsigned int v16 = v7;
          uint64_t v10 = v16 + 8;
          int v18 = (char *)*a2;
          BOOL v17 = (char *)a2[1];
          if (v17 != *a2)
          {
            do
            {
              uint64_t v19 = *((void *)v17 - 1);
              v17 -= 8;
              *((void *)v16 - 1) = v19;
              v16 -= 8;
            }

            while (v17 != v18);
            BOOL v17 = (char *)*a2;
          }

          *a2 = v16;
          a2[1] = v10;
          a2[2] = &v15[8 * v14];
          if (v17) {
            operator delete(v17);
          }
        }

        else
        {
          void *v9 = v7;
          uint64_t v10 = v9 + 1;
        }

        a2[1] = v10;
      }
    }

    ++v3;
  }

  while (v3 != 3);
}

void sub_100586A7C()
{
  uint64_t v0 = (os_log_s *)qword_1008F7748;
  if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "stackDidStart", v1, 2u);
  }

void sub_100586AE0()
{
  uint64_t v0 = (os_log_s *)qword_1008F7748;
  if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "stackWillStop", v1, 2u);
  }

void sub_100586B44(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7748;
  if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "stackDidStop", v3, 2u);
  }

  sub_10057E3EC(a1);
}

uint64_t sub_100586BB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v8 = (os_log_s *)qword_1008F7748;
  if (os_log_type_enabled((os_log_t)qword_1008F7748, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D0100(a2, (uint64_t)__p);
    if (v12 >= 0) {
      int v9 = __p;
    }
    else {
      int v9 = (void **)__p[0];
    }
    *(_DWORD *)__int128 buf = 136315650;
    unint64_t v14 = v9;
    __int16 v15 = 1024;
    int v16 = a3;
    __int16 v17 = 1024;
    int v18 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "aclDisconnected for %s with result %d and reason %d",  buf,  0x18u);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }

  return sub_10057E5E8(a1, a2 + 128, a4);
}

uint64_t sub_100586CC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100586BB4(a1 - 8, a2, a3, a4);
}

void sub_100586CDC(uint64_t a1)
{
  if (qword_1008D9148 != -1) {
    dispatch_once(&qword_1008D9148, &stru_1008A2028);
  }
  sub_100583B2C((uint64_t)off_1008D9140, *(unsigned int *)(a1 + 12), *(_DWORD *)(a1 + 16));
}

void *sub_100586D2C(void *a1)
{
  *a1 = &off_1008A1E78;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_100586D64(void *__p)
{
  void *__p = &off_1008A1E78;
  uint64_t v2 = (void *)__p[2];
  if (v2) {
    operator delete[](v2);
  }
  operator delete(__p);
}

_BYTE *sub_100586D9C(uint64_t a1)
{
  if (qword_1008D9148 != -1) {
    dispatch_once(&qword_1008D9148, &stru_1008A2028);
  }
  return sub_100584FF8( (uint64_t)off_1008D9140,  *(void *)(a1 + 16),  *(unsigned __int16 *)(a1 + 24),  *(unsigned __int16 *)(a1 + 26),  *(_BYTE *)(a1 + 28),  *(void *)(a1 + 32));
}

void sub_100586E00(void *a1)
{
  uint64_t v1 = sub_100586E78(a1);
  operator delete(v1);
}

_BYTE *sub_100586E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1008D9148 != -1) {
    dispatch_once(&qword_1008D9148, &stru_1008A2028);
  }
  return sub_10058609C( (uint64_t)off_1008D9140,  (int *)(a1 + 10),  *(void *)(a1 + 16),  a4,  0LL,  *(unsigned __int8 **)(a1 + 40),  *(unsigned __int16 *)(a1 + 48),  *(unsigned int *)(a1 + 52));
}

void *sub_100586E78(void *a1)
{
  *a1 = off_1008A1EB0;
  uint64_t v2 = (void *)a1[3];
  if (v2) {
    operator delete[](v2);
  }
  uint64_t v3 = (void *)a1[5];
  if (v3) {
    operator delete[](v3);
  }
  return a1;
}

void sub_100586EC4(uint64_t a1)
{
  if (qword_1008D9148 != -1) {
    dispatch_once(&qword_1008D9148, &stru_1008A2028);
  }
  sub_100584BD0((uint64_t)off_1008D9140, *(unsigned __int16 *)(a1 + 10), *(unsigned int *)(a1 + 12));
}

void *sub_100586F18(void *a1)
{
  *a1 = &off_1008A1F20;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_100586F50(void *__p)
{
  void *__p = &off_1008A1F20;
  uint64_t v2 = (void *)__p[2];
  if (v2) {
    operator delete[](v2);
  }
  operator delete(__p);
}

void sub_100586F88(uint64_t a1)
{
  if (qword_1008D9148 != -1) {
    dispatch_once(&qword_1008D9148, &stru_1008A2028);
  }
  sub_100584D24( (uint64_t)off_1008D9140,  *(unsigned __int16 *)(a1 + 10),  *(const void **)(a1 + 16),  *(unsigned __int16 *)(a1 + 12));
}

void sub_100586FE0(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_100587010(_Unwind_Exception *a1)
{
}

void sub_100587024(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_100587054(_Unwind_Exception *a1)
{
}

void sub_100587068(id a1)
{
  uint64_t v1 = operator new(0x2C0uLL);
  sub_1004219F0();
  off_1008D60C8 = v1;
}

void sub_100587098(_Unwind_Exception *a1)
{
}

void sub_1005870AC(id a1)
{
  uint64_t v1 = operator new(0x310uLL);
  sub_10036BB90();
  qword_1008D6450 = (uint64_t)v1;
}

void sub_1005870DC(_Unwind_Exception *a1)
{
}

void sub_1005870F0(id a1)
{
  uint64_t v1 = operator new(0x350uLL);
  sub_100461C70();
  off_1008D9028 = v1;
}

void sub_100587120(_Unwind_Exception *a1)
{
}

void sub_100587134(id a1)
{
  uint64_t v1 = operator new(0x2C8uLL);
  sub_100213DA8();
  off_1008D60D8 = v1;
}

void sub_100587164(_Unwind_Exception *a1)
{
}

void sub_100587178(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_100271B18((uint64_t)v1);
  off_1008D9248 = v1;
}

void sub_1005871A8(_Unwind_Exception *a1)
{
}

void sub_1005871BC(id a1)
{
  uint64_t v1 = operator new(0x2B0uLL);
  sub_10057DAE0((uint64_t)v1);
  off_1008D9140 = v1;
}

void sub_1005871EC(_Unwind_Exception *a1)
{
}

void sub_100587200(id a1)
{
  uint64_t v1 = operator new(0x110uLL);
  sub_1003C0CFC((uint64_t)v1);
  qword_1008D9718 = (uint64_t)v1;
}

void sub_100587230(_Unwind_Exception *a1)
{
}

void sub_100587244(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_100587274(_Unwind_Exception *a1)
{
}

void sub_100587288(id a1)
{
  uint64_t v1 = operator new(0x58uLL);
  sub_10041A094(v1);
  qword_1008D95F8 = (uint64_t)v1;
}

void sub_1005872B8(_Unwind_Exception *a1)
{
}

void sub_1005872CC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t sub_1005872D8(uint64_t a1)
{
  *(void *)a1 = &off_1008A29E8;
  *(void *)(a1 + 8) = &off_1008A2A18;
  *(void *)(a1 + 16) = &off_1008A2A30;
  *(void *)(a1 + 24) = &off_1008A2A60;
  sub_10002418C(&v173, "LeConnectionManager");
  sub_10043C948((void *)(a1 + 32), &v173);
  *(void *)a1 = off_1008A2180;
  *(void *)(a1 + 8) = &off_1008A2210;
  *(void *)(a1 + 16) = off_1008A2228;
  *(void *)(a1 + 24) = off_1008A2258;
  *(void *)(a1 + 32) = &off_1008A22A8;
  *(void *)(a1 + 88) = off_1008A22C0;
  *(void *)(a1 + sub_100242FAC(v16 - 96) = off_1008A22E0;
  sub_100242DC4(a1 + 120);
  *(void *)(a1 + 200) = 0LL;
  *(_BYTE *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(void *)(a1 + 232) = 0LL;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 288) = 0LL;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 328) = 0LL;
  *(void *)(a1 + 336) = a1 + 344;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 360) = a1 + 368;
  *(_OWORD *)(a1 + 392) = 0u;
  *(void *)(a1 + 384) = a1 + 392;
  *(_OWORD *)(a1 + 416) = 0u;
  *(void *)(a1 + 408) = a1 + 416;
  *(_OWORD *)(a1 + 440) = 0u;
  *(void *)(a1 + 432) = a1 + 440;
  *(_OWORD *)(a1 + 464) = 0u;
  *(void *)(a1 + 456) = a1 + 464;
  *(_OWORD *)(a1 + 488) = 0u;
  *(void *)(a1 + 480) = a1 + 488;
  *(_OWORD *)(a1 + 512) = 0u;
  *(void *)(a1 + 504) = a1 + 512;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 528) = a1 + 536;
  *(void *)(a1 + 552) = 0LL;
  *(_OWORD *)(a1 + 616) = 0u;
  *(void *)(a1 + 608) = a1 + 616;
  *(_BYTE *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 6sub_100242FAC(v15 - 48) = 0u;
  *(void *)(a1 + 640) = a1 + 648;
  *(_OWORD *)(a1 + 672) = 0u;
  *(void *)(a1 + 664) = a1 + 672;
  *(_OWORD *)(a1 + 6sub_100242FAC(v16 - 96) = 0u;
  *(void *)(a1 + 688) = a1 + 696;
  *(_OWORD *)(a1 + 720) = 0u;
  *(void *)(a1 + 712) = a1 + 720;
  *(_BYTE *)(a1 + 736) = -127;
  uint64_t v2 = (void **)(a1 + 744);
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(void *)(a1 + 792) = 0LL;
  *(void *)(a1 + 800) = a1 + 808;
  *(void *)(a1 + 824) = 0LL;
  *(_BYTE *)(a1 + 832) = 0;
  *(_DWORD *)(a1 + 834) = 30;
  *(_OWORD *)(a1 + 8sub_100242FAC(v15 - 48) = 0u;
  *(void *)(a1 + 840) = a1 + 848;
  *(_DWORD *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(void *)(a1 + 944) = 0LL;
  *(void *)(a1 + 952) = 0LL;
  *(_DWORD *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 8sub_100242FAC(v16 - 96) = 0u;
  *(void *)(a1 + 936) = a1 + 944;
  sub_100243040((pthread_cond_t *)(a1 + 960));
  *(_BYTE *)(a1 + 1008) = 1;
  sub_100243040((pthread_cond_t *)(a1 + 1016));
  *(_BYTE *)(a1 + 1064) = 1;
  *(_BYTE *)(a1 + 1067) = 0;
  *(_OWORD *)(a1 + 1080) = xmmword_1006C4170;
  *(void *)(a1 + 10sub_100242FAC(v16 - 96) = 0xE10025801F407D0LL;
  *(_DWORD *)(a1 + 1104) = 786444;
  *(_WORD *)(a1 + 1108) = 2562;
  *(_BYTE *)(a1 + 1110) = 0;
  *(_DWORD *)(a1 + 1112) = 1572888;
  *(_DWORD *)(a1 + 1116) = 0x10000;
  *(_BYTE *)(a1 + 1120) = 0;
  *(void *)(a1 + 1144) = 0LL;
  *(void *)(a1 + 1136) = 0LL;
  *(void *)(a1 + 1128) = a1 + 1136;
  *(void *)(a1 + 1168) = 0LL;
  *(void *)(a1 + 1160) = 0LL;
  *(void *)(a1 + 1152) = a1 + 1160;
  *(void *)(a1 + 1176) = 0LL;
  *(void *)(a1 + 1192) = 0LL;
  *(void *)(a1 + 1200) = 0LL;
  *(void *)(a1 + 1184) = a1 + 1192;
  *(_WORD *)(a1 + 1208) = 10;
  *(_DWORD *)(a1 + 1212) = 3600;
  *(_WORD *)(a1 + 1216) = 2;
  *(_DWORD *)(a1 + 1220) = 3600;
  *(void *)(a1 + 1240) = 0LL;
  *(void *)(a1 + 1232) = 0LL;
  *(void *)(a1 + 1224) = a1 + 1232;
  *(void *)(a1 + 1256) = 0LL;
  *(void *)(a1 + 1264) = 0LL;
  *(void *)(a1 + 12sub_100242FAC(v15 - 48) = a1 + 1256;
  *(void *)(a1 + 1280) = 0LL;
  *(void *)(a1 + 1288) = 0LL;
  *(void *)(a1 + 1272) = a1 + 1280;
  *(void *)(a1 + 1304) = 0LL;
  *(void *)(a1 + 1312) = 0LL;
  *(void *)(a1 + 12sub_100242FAC(v16 - 96) = a1 + 1304;
  *(void *)(a1 + 1336) = 0LL;
  *(void *)(a1 + 1328) = 0LL;
  *(void *)(a1 + 1320) = a1 + 1328;
  *(_DWORD *)(a1 + 1344) = -1415142493;
  *(_WORD *)(a1 + 13sub_100242FAC(v15 - 48) = -24149;
  *(_BYTE *)(a1 + 1350) = -90;
  *(void *)(a1 + 1368) = 0LL;
  *(void *)(a1 + 1360) = 0LL;
  *(void *)(a1 + 1352) = a1 + 1360;
  *(_BYTE *)(a1 + 1380) = 0;
  *(_DWORD *)(a1 + 1376) = 0;
  *(_WORD *)(a1 + 1382) = 2;
  *(void *)(a1 + 1400) = 0LL;
  *(void *)(a1 + 1392) = 0LL;
  *(void *)(a1 + 1384) = a1 + 1392;
  *(void *)(a1 + 1416) = 0LL;
  *(void *)(a1 + 1424) = 0LL;
  *(void *)(a1 + 1408) = a1 + 1416;
  *(void *)(a1 + 1440) = 0LL;
  *(void *)(a1 + 14sub_100242FAC(v15 - 48) = 0LL;
  *(void *)(a1 + 1432) = a1 + 1440;
  *(void *)(a1 + 1472) = 0LL;
  *(void *)(a1 + 1464) = 0LL;
  *(void *)(a1 + 1456) = a1 + 1464;
  *(void *)(a1 + 1480) = 0x7080000000ALL;
  *(_DWORD *)(a1 + 1488) = 10;
  *(void *)(a1 + 14sub_100242FAC(v16 - 96) = 0LL;
  *(_BYTE *)(a1 + 1504) = 0;
  *(_DWORD *)(a1 + 1508) = 0;
  *(void *)(a1 + 1520) = 0LL;
  *(void *)(a1 + 1528) = 0LL;
  *(void *)(a1 + 1512) = a1 + 1520;
  *(void *)(a1 + 1536) = 0LL;
  *(_BYTE *)(a1 + 1544) = 0;
  int v172 = 0;
  uint64_t v3 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "MaxFilterAcceptListSize");
  int v4 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v3 + 88LL))(v3, buf, __p, &v172);
  if (v171 < 0) {
    operator delete(__p[0]);
  }
  if (v175 < 0)
  {
    operator delete(*(void **)buf);
    if (!v4) {
      goto LABEL_15;
    }
  }

  else if (!v4)
  {
    goto LABEL_15;
  }

  int v5 = v172;
  uint64_t v6 = (os_log_s *)qword_1008F7620;
  if (v172 < 2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
      sub_100696F4C();
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Warning: Using override value (%d) for max number of devices in connection Filter Accept List",  buf,  8u);
      LOBYTE(v5) = v172;
    }

    *(_BYTE *)(a1 + 832) = v5;
  }

LABEL_190:
  uint64_t v89 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "MinRSSIConnectionEnabled");
  if ((*(unsigned int (**)(uint64_t, _BYTE *, void **, uint64_t))(*(void *)v89 + 72LL))( v89,  buf,  __p,  a1 + 1118))
  {
    int v90 = *(unsigned __int8 *)(a1 + 1118);
    if (v171 < 0) {
      operator delete(__p[0]);
    }
    if (v175 < 0) {
      operator delete(*(void **)buf);
    }
    if (v90)
    {
      __int128 v91 = (os_log_s *)qword_1008F7620;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEFAULT,  "MinRSSIConnectionEnabled is enabled (overridden)",  buf,  2u);
      }
    }
  }

  else
  {
    if (v171 < 0) {
      operator delete(__p[0]);
    }
    if (v175 < 0) {
      operator delete(*(void **)buf);
    }
  }

  int v165 = 0;
  uint64_t v92 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "NumDisconnectionsFromDisabledToStageOne");
  int v93 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v92 + 88LL))(v92, buf, __p, &v165);
  if (v171 < 0) {
    operator delete(__p[0]);
  }
  if (v175 < 0)
  {
    operator delete(*(void **)buf);
    if (!v93) {
      goto LABEL_210;
    }
  }

  else if (!v93)
  {
    goto LABEL_210;
  }

  unsigned __int16 v94 = (char)v165;
  *(_WORD *)(a1 + 1208) = (char)v165;
  __int16 v95 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v94;
    _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEFAULT,  "NumDisconnectionsFromDisabledToStageOne %d overridden",  buf,  8u);
  }

LABEL_210:
  uint64_t v96 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "NumDisconnectionsFromStageOneToDisabled");
  int v97 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v96 + 88LL))(v96, buf, __p, &v165);
  if (v171 < 0) {
    operator delete(__p[0]);
  }
  if (v175 < 0)
  {
    operator delete(*(void **)buf);
    if (!v97) {
      goto LABEL_218;
    }
  }

  else if (!v97)
  {
    goto LABEL_218;
  }

  unsigned __int16 v98 = (char)v165;
  *(_WORD *)(a1 + 1216) = (char)v165;
  unsigned int v99 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v98;
    _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_DEFAULT,  "NumDisconnectionsFromStageOneToDisabled %d overridden",  buf,  8u);
  }

LABEL_218:
  int v164 = 0;
  uint64_t v100 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "TimeDurationFromDisabledToStageOne");
  int v101 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v100 + 88LL))(v100, buf, __p, &v164);
  if (v171 < 0) {
    operator delete(__p[0]);
  }
  if (v175 < 0)
  {
    operator delete(*(void **)buf);
    if (!v101) {
      goto LABEL_226;
    }
  }

  else if (!v101)
  {
    goto LABEL_226;
  }

  int v102 = v164;
  *(_DWORD *)(a1 + 1212) = v164;
  __int128 v103 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v102;
    _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "TimeDurationFromDisabledToStageOne %d overridden",  buf,  8u);
  }

  *(_BYTE *)(a1 + 2245) = 0;
  __int16 v95 = sub_1002E6E00();
  sub_10002418C(buf, "BLESCAN");
  sub_10002418C(__p, "IsScanCoreDebug");
  if ((*(unsigned int (**)(uint64_t, _BYTE *, void **, uint64_t))(*(void *)v95 + 72LL))( v95,  buf,  __p,  a1 + 2245))
  {
    uint64_t v96 = *(unsigned __int8 *)(a1 + 2245);
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v96)
    {
      int v97 = (os_log_s *)qword_1008F75B8;
      if (os_log_type_enabled((os_log_t)qword_1008F75B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "Enabling ScanCore Debug prints", buf, 2u);
      }
    }
  }

  else
  {
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }

  xpc_set_event_stream_handler("com.apple.alarm", 0LL, &stru_1008A3990);
  unsigned __int16 v98 = sub_1002E6E00();
  sub_10002418C(buf, "SCANDEBUG");
  sub_10002418C(__p, "DebugControllerConfigDispatchSequence");
  if ((*(unsigned int (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v98 + 72LL))( v98,  buf,  __p,  v134))
  {
    unsigned int v99 = *v134;
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v99)
    {
      uint64_t v100 = (os_log_s *)qword_1008F75B8;
      if (os_log_type_enabled((os_log_t)qword_1008F75B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v100,  OS_LOG_TYPE_DEFAULT,  "fDebugControllerConfigDispatchSequence is true, dispatching config after serial config",  buf,  2u);
      }
    }
  }

  else
  {
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }

  int v101 = sub_1002E6E00();
  sub_10002418C(buf, "SCANDEBUG");
  sub_10002418C(__p, "ForceDispatchInsteadOfSerialConfig");
  if ((*(unsigned int (**)(uint64_t, _BYTE *, void **, uint64_t))(*(void *)v101 + 72LL))( v101,  buf,  __p,  a1 + 4382))
  {
    int v102 = *(unsigned __int8 *)(a1 + 4382);
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (v102) {
        goto LABEL_255;
      }
    }

    else if (v102)
    {
      goto LABEL_255;
    }

    __int128 v103 = (os_log_s *)qword_1008F75B8;
    if (os_log_type_enabled((os_log_t)qword_1008F75B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "fForceDispatchInsteadOfSerialConfig is false, Forcing disable dispatch config",  buf,  2u);
    }
  }

  else
  {
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }

LABEL_226:
  uint64_t v104 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "TimeDurationFromStageOneToDisabled");
  int v105 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v104 + 88LL))(v104, buf, __p, &v164);
  if (v171 < 0) {
    operator delete(__p[0]);
  }
  if (v175 < 0)
  {
    operator delete(*(void **)buf);
    if (!v105) {
      goto LABEL_234;
    }
  }

  else if (!v105)
  {
    goto LABEL_234;
  }

  int v106 = v164;
  *(_DWORD *)(a1 + 1220) = v164;
  __int128 v107 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v106;
    _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_DEFAULT,  "TimeDurationFromStageOneToDisabled %d overridden",  buf,  8u);
  }

      char v126 = *(id *)j;
      sub_10002418C(__p, (char *)[v126 UTF8String]);
      __int128 v127 = (char **)sub_100024098((uint64_t)&v180, (const void **)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }

      if (v181 == v127)
      {
        uint64_t v128 = *(id *)j;
        sub_10002418C(__p, (char *)[v128 UTF8String]);
        *(void *)uuid_string_t out = __p;
        *((_BYTE *)sub_1002925B8((uint64_t **)&v180, (const void **)__p, (uint64_t)&unk_1006C2518, (_OWORD **)out) + 56) = v114;
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }

      else
      {
        uint64_t v128 = *(id *)j;
        sub_10002418C(__p, (char *)[v128 UTF8String]);
        *(void *)uuid_string_t out = __p;
        int v129 = sub_1002925B8((uint64_t **)&v180, (const void **)__p, (uint64_t)&unk_1006C2518, (_OWORD **)out);
        if (*((_BYTE *)v129 + 56)) {
          __int128 v130 = v114;
        }
        else {
          __int128 v130 = 0;
        }
        *((_BYTE *)v129 + 56) = v130;
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }

      int v131 = (os_log_s *)qword_1008F75B8;
      if (os_log_type_enabled((os_log_t)qword_1008F75B8, OS_LOG_TYPE_INFO))
      {
        uint64_t v132 = v151 + 232;
        memset(out, 0, sizeof(out));
        uuid_unparse_upper(a2, out);
        sub_10002418C(&v188, out);
        if ((v188.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v133 = &v188;
        }
        else {
          int v133 = (std::stringbuf::string_type *)v188.__r_.__value_.__r.__words[0];
        }
        char v134 = *(id *)(j + 96);
        uint64_t v135 = *(_DWORD *)(j + 80);
        uint64_t v136 = *(_DWORD *)(j + 88);
        int v137 = *(id *)j;
        char v138 = *(id *)j;
        sub_10002418C(out, (char *)[v138 UTF8String]);
        v170.__r_.__value_.__r.__words[0] = (std::string::size_type)out;
        *(_DWORD *)std::stringbuf::string_type __p = 136316930;
        *(void *)&__p[4] = v132;
        *(_WORD *)&_BYTE __p[12] = 2080;
        *(void *)&_BYTE __p[14] = v133;
        *(_WORD *)&__p[22] = 2112;
        *(void *)uint64_t v184 = v134;
        *(_WORD *)&v184[8] = 1024;
        *(_DWORD *)v185 = v135;
        *(_WORD *)&v185[4] = 1024;
        *(_DWORD *)&v185[6] = v136;
        *(_WORD *)&v185[10] = 1024;
        *(_DWORD *)&v185[12] = v114;
        *(_WORD *)&v185[16] = 2112;
        *(void *)&v185[18] = v137;
        *(_WORD *)&v185[26] = 1024;
        *(_DWORD *)&v185[28] = v139;
        _os_log_impl( (void *)&_mh_execute_header,  v131,  OS_LOG_TYPE_INFO,  "filterByEnhancedRules Name session:%s device:%s filterNameSubstr:%@ matchOption:%d NSStringCompareOptions:%d m atch:%d matchMap[%@]:%d",  __p,  0x42u);
        if (out[23] < 0) {
          operator delete(*(void **)out);
        }
      }
    }

    *(void *)std::stringbuf::string_type __p = &v191;
    sub_10004FF34((void ***)__p);
LABEL_250:
    uint64_t v140 = (uint64_t *)v180;
    if (v180 == v181)
    {
LABEL_258:
      uint64_t v143 = 0;
    }

    else
    {
      while (!*((_BYTE *)v140 + 56))
      {
        int v141 = (char *)v140[1];
        if (v141)
        {
          do
          {
            int v142 = (char **)v141;
            int v141 = *(char **)v141;
          }

          while (v141);
        }

        else
        {
          do
          {
            int v142 = (char **)v140[2];
            int v25 = *v142 == (char *)v140;
            uint64_t v140 = (uint64_t *)v142;
          }

          while (!v25);
        }

        uint64_t v140 = (uint64_t *)v142;
        int v109 = v181;
        if (v142 == v181) {
          goto LABEL_258;
        }
      }

      uint64_t v144 = v140 + 4;
      int v145 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v144, v147));
      [v147 setString:v145];

      LODWORD(v109) = *((_BYTE *)v140 + 56) != 0;
      uint64_t v143 = 1;
    }

    __int128 v84 = v143 & v109;
    *(void *)std::stringbuf::string_type __p = &v171;
    sub_10004FF34((void ***)__p);
    *(void *)std::stringbuf::string_type __p = &v174;
    sub_10004FF34((void ***)__p);
    if (v177)
    {
      unsigned __int16 v178 = (char *)v177;
      operator delete(v177);
    }

    sub_10023E78C((uint64_t)&v180, v181[0]);
  }

  return v84;
}

LABEL_250:
  uint64_t v116 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "ConnRSSIStageOneExternal_Lock");
  int v117 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v116 + 88LL))(v116, buf, __p, &v163);
  if (v171 < 0) {
    operator delete(__p[0]);
  }
  if (v175 < 0)
  {
    operator delete(*(void **)buf);
    if (!v117) {
      goto LABEL_258;
    }
  }

  else if (!v117)
  {
    goto LABEL_258;
  }

  char v118 = v163;
  *(_BYTE *)(a1 + 1346) = v163;
  __int128 v119 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v118;
    _os_log_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_DEFAULT,  "ConnRSSIStageOneExternal_Lock %d overridden",  buf,  8u);
  }

LABEL_258:
  uint64_t v120 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "ConnRSSIStageOneDigitalCarKey");
  int v121 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v120 + 88LL))(v120, buf, __p, &v163);
  if (v171 < 0) {
    operator delete(__p[0]);
  }
  if (v175 < 0)
  {
    operator delete(*(void **)buf);
    if (!v121) {
      goto LABEL_266;
    }
  }

  else if (!v121)
  {
    goto LABEL_266;
  }

  char v122 = v163;
  *(_BYTE *)(a1 + 1347) = v163;
  __int128 v123 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v122;
    _os_log_impl( (void *)&_mh_execute_header,  v123,  OS_LOG_TYPE_DEFAULT,  "ConnRSSIStageOneDigitalCarKey %d overridden",  buf,  8u);
  }

LABEL_266:
  uint64_t v124 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "ConnRSSIStageOneDigitalHomeKey");
  int v125 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v124 + 88LL))(v124, buf, __p, &v163);
  if (v171 < 0) {
    operator delete(__p[0]);
  }
  if (v175 < 0)
  {
    operator delete(*(void **)buf);
    if (!v125) {
      goto LABEL_274;
    }
  }

  else if (!v125)
  {
    goto LABEL_274;
  }

  char v126 = v163;
  *(_BYTE *)(a1 + 13sub_100242FAC(v15 - 48) = v163;
  __int128 v127 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v126;
    _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_DEFAULT,  "ConnRSSIStageOneDigitalHomeKey %d overridden",  buf,  8u);
  }

  uint64_t v108 = sub_1002E6E00();
  sub_10002418C(buf, "BLESCAN");
  sub_10002418C(__p, "DisablePrioritizationOverBT");
  int v109 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v108 + 72LL))( v108,  buf,  __p,  &byte_1008F1E9D);
  if (byte_1008F1E9D) {
    char v110 = v109;
  }
  else {
    char v110 = 0;
  }
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  if ((v142[3] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v110) {
      goto LABEL_277;
    }
  }

  else if (!v110)
  {
    goto LABEL_277;
  }

  __int128 v111 = (os_log_s *)qword_1008F75B8;
  if (os_log_type_enabled((os_log_t)qword_1008F75B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_DEFAULT,  "Disable Scan Prioritization over BT.",  buf,  2u);
  }

LABEL_274:
  uint64_t v128 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "ConfigureCreateConnectionEnabled");
  int v129 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, uint64_t))(*(void *)v128 + 72LL))( v128,  buf,  __p,  a1 + 1119);
  if (v171 < 0) {
    operator delete(__p[0]);
  }
  if (v175 < 0)
  {
    operator delete(*(void **)buf);
    if (!v129) {
      goto LABEL_282;
    }
  }

  else if (!v129)
  {
    goto LABEL_282;
  }

  __int128 v130 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    int v131 = *(unsigned __int8 *)(a1 + 1119);
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v131;
    _os_log_impl( (void *)&_mh_execute_header,  v130,  OS_LOG_TYPE_DEFAULT,  "ConfigureCreateConnectionEnabled is set to %d (overridden)",  buf,  8u);
  }

LABEL_298:
  int v162 = 0;
  uint64_t v140 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "ConnScanTimeoutExtendPercent");
  int v141 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v140 + 88LL))(v140, buf, __p, &v162);
  if (v171 < 0) {
    operator delete(__p[0]);
  }
  if (v175 < 0)
  {
    operator delete(*(void **)buf);
    if (!v141) {
      goto LABEL_310;
    }
  }

  else if (!v141)
  {
    goto LABEL_310;
  }

  int v142 = v162;
  uint64_t v143 = (os_log_s *)qword_1008F7620;
  if (v162 < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
      sub_100696C3C();
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v142;
      _os_log_impl( (void *)&_mh_execute_header,  v143,  OS_LOG_TYPE_DEFAULT,  "Set ConnScanTimeoutExtendPercent %d percent",  buf,  8u);
      LOBYTE(v142) = v162;
    }

    *(_BYTE *)(a1 + 1380) = v142;
  }

LABEL_310:
  uint64_t v144 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "ConnectionDenyListTimeoutSecondsOverride");
  int v145 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v144 + 88LL))(v144, buf, __p, &v172);
  if (v171 < 0) {
    operator delete(__p[0]);
  }
  if (v175 < 0) {
    operator delete(*(void **)buf);
  }
  int v146 = v172;
  if (v172 > 0) {
    int v147 = v145;
  }
  else {
    int v147 = 0;
  }
  if (v147 == 1)
  {
    unsigned int v148 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v146;
      _os_log_impl( (void *)&_mh_execute_header,  v148,  OS_LOG_TYPE_DEFAULT,  "Warning: LeConnectionDenyList: Using override value (%d) for fLeConnectionDenyListTimeoutSec",  buf,  8u);
      int v146 = v172;
    }

    *(_DWORD *)(a1 + 1484) = v146;
  }

  uint64_t v149 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "ConnectionDenyListIntervalSecondsOverride");
  int v150 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v149 + 88LL))(v149, buf, __p, &v172);
  if (v171 < 0) {
    operator delete(__p[0]);
  }
  if (v175 < 0) {
    operator delete(*(void **)buf);
  }
  int v151 = v172;
  if (v172 > 0) {
    int v152 = v150;
  }
  else {
    int v152 = 0;
  }
  if (v152 == 1)
  {
    uint64_t v153 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v151;
      _os_log_impl( (void *)&_mh_execute_header,  v153,  OS_LOG_TYPE_DEFAULT,  "Warning: LeConnectionDenyList: Using override value (%d) for fLeConnectionDenyListIntervalSec",  buf,  8u);
      int v151 = v172;
    }

    *(_DWORD *)(a1 + 1480) = v151;
  }

  uint64_t v154 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "ConnectionDenyListCountThresholdOverride");
  int v155 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v154 + 88LL))(v154, buf, __p, &v172);
  if (v171 < 0) {
    operator delete(__p[0]);
  }
  if (v175 < 0) {
    operator delete(*(void **)buf);
  }
  int v156 = v172;
  if (v172 > 0) {
    int v157 = v155;
  }
  else {
    int v157 = 0;
  }
  if (v157 == 1)
  {
    uint64_t v158 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v156;
      _os_log_impl( (void *)&_mh_execute_header,  v158,  OS_LOG_TYPE_DEFAULT,  "Warning: LeConnectionDenyList: Using override value (%d) for fLeConnectionDenyListCountThreshold",  buf,  8u);
      int v156 = v172;
    }

    *(_DWORD *)(a1 + 1488) = v156;
  }

  *(void *)(a1 + 104) = 0LL;
  *(_WORD *)(a1 + 112) = 0;
  return a1;
}

void sub_100589580( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *__p, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }

  sub_1005BC360(v37 + 1512, *(void **)(v37 + 1520));
  sub_1005BC2E8(v37 + 1456, *(void **)(v37 + 1464));
  sub_1005BC2E8(v37 + 1432, *(void **)(v37 + 1440));
  sub_10023BF24(v37 + 1408, *(void **)(v37 + 1416));
  sub_10023BF24(v37 + 1384, *(void **)(v37 + 1392));
  sub_10023E78C(v37 + 1352, *(char **)(v37 + 1360));
  sub_10023BF24(v37 + 1320, *(void **)(v37 + 1328));
  sub_10023BF24(v37 + 1296, *(void **)(v37 + 1304));
  sub_10023BF24(v37 + 1272, *(void **)(v37 + 1280));
  sub_10023BF24(v37 + 1248, *(void **)(v37 + 1256));
  sub_10023BF24(v37 + 1224, *(void **)(v37 + 1232));
  sub_10023E78C(v37 + 1184, *(char **)(v37 + 1192));
  sub_100291CE8(v37 + 1152, *(void **)(v37 + 1160));
  sub_10023BF24(v37 + 1128, *(void **)(v37 + 1136));
  sub_1002430A8(v41);
  sub_1002430A8(v40);
  sub_1004F52C4((uint64_t)(v42 + 92), *(void **)(v37 + 944));
  uint64_t v45 = *(void **)(v37 + 904);
  if (v45)
  {
    *(void *)(v37 + 912) = v45;
    operator delete(v45);
  }

  sub_10023BF24((uint64_t)(v42 + 80), *(void **)(v37 + 848));

  sub_10023BF24(v39, *(void **)(v37 + 808));
  sub_10023BF24((uint64_t)(v42 + 64), *(void **)(v37 + 720));
  sub_10023BF24(v38, *(void **)(v37 + 696));
  sub_10023BF24((uint64_t)(v42 + 58), *(void **)(v37 + 672));
  sub_10023BF24(a25, *(void **)(v37 + 648));
  sub_10023BF24(a26, *(void **)(v37 + 616));

  sub_10023BF24(a19, *(void **)(v37 + 536));
  sub_10023BF24((uint64_t)(v42 + 38), *(void **)(v37 + 512));
  sub_10023BF24(a20, *(void **)(v37 + 488));
  sub_10023BF24((uint64_t)(v42 + 32), *(void **)(v37 + 464));
  sub_10023BF24(a21, *(void **)(v37 + 440));
  sub_10023BF24((uint64_t)(v42 + 26), *(void **)(v37 + 416));
  sub_10023BF24(a22, *(void **)(v37 + 392));
  sub_10023BF24((uint64_t)(v42 + 20), *(void **)(v37 + 368));
  sub_10023BF24(a23, *(void **)(v37 + 344));
  int v46 = *(void **)(v37 + 232);
  if (v46)
  {
    *(void *)(v37 + 240) = v46;
    operator delete(v46);
  }

  uint64_t v47 = *v42;
  if (*v42)
  {
    *(void *)(v37 + 208) = v47;
    operator delete(v47);
  }

  sub_100242E28(a24);
  sub_10043CB0C(a27);
  _Unwind_Resume(a1);
}

void sub_100589A10(uint64_t a1)
{
  int v96 = 0;
  int v94 = 0;
  int v95 = 0;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "LeConnectionLatencyLowMinInterval");
  int v3 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v2 + 88LL))(v2, buf, __p, &v96);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      goto LABEL_12;
    }
  }

  else if (!v3)
  {
    goto LABEL_12;
  }

  int v4 = v96;
  int v5 = (os_log_s *)qword_1008F7620;
  if ((v96 - 8) >= 0xF9A && os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_fault_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Override rejected latency minInterval:%d LeConnectionLatencyLow",  buf,  8u);
    LOWORD(v4) = v96;
    int v5 = (os_log_s *)qword_1008F7620;
  }

  *(_WORD *)(a1 + 1080) = v4;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Override latency minInterval:%d LeConnectionLatencyLow",  buf,  8u);
  }

LABEL_120:
  uint64_t v45 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "LeConnectionLatencyVeryHighMaxInterval");
  int v46 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v45 + 88LL))(v45, buf, __p, &v95);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v46) {
      goto LABEL_131;
    }
  }

  else if (!v46)
  {
    goto LABEL_131;
  }

  int v47 = v95;
  uint64_t v48 = (os_log_s *)qword_1008F7620;
  if ((v95 - 8) >= 0xF9A && os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_fault_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_FAULT,  "Override rejected latency maxInterval:%d LeConnectionLatencyVeryHigh",  buf,  8u);
    LOWORD(v47) = v95;
    uint64_t v48 = (os_log_s *)qword_1008F7620;
  }

  *(_WORD *)(a1 + 1100) = v47;
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v47;
    _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "Override latency maxInterval:%d LeConnectionLatencyVeryHigh",  buf,  8u);
  }

LABEL_153:
  int v90 = 0;
  uint64_t v57 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "LeConnectionMaxIntervalDigitalID");
  int v58 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v57 + 88LL))(v57, buf, __p, &v90);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v58) {
      goto LABEL_161;
    }
  }

  else if (!v58)
  {
    goto LABEL_161;
  }

  unsigned __int16 v59 = v90;
  *(_WORD *)(a1 + 1106) = v90;
  int v60 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v59;
    _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "Override LeConnectionMaxIntervalDigitalID:%d",  buf,  8u);
  }

  int v67 = (char)a3[23];
  if ((v67 & 0x80000000) == 0)
  {
    __int16 v68 = a3;
    if (v67 != 5) {
      goto LABEL_172;
    }
LABEL_158:
    unsigned int v69 = *(_DWORD *)v68;
    unsigned int v70 = v68[4];
    uint64_t v71 = v69 == 1416847688 && v70 == 83;
    if (v71 && sub_1005CE2FC(a1, v5) == 16)
    {
      if (qword_1008D9060 != -1) {
        dispatch_once(&qword_1008D9060, &stru_1008A3538);
      }
      uint64_t v72 = qword_1008D9058;
      sub_10002418C(buf, "HasTS");
      sub_10002418C(v101, "External Lock Tagged HasTS setTag");
      sub_10040C784(60.0, v72, (uint64_t *)buf, (uint64_t *)v101);
      if (v102 < 0) {
        operator delete(v101[0]);
      }
      if (os_log_type_enabled((os_log_t)qword_1008F75A0, OS_LOG_TYPE_ERROR)) {
        sub_10069B230();
      }
    }

    goto LABEL_172;
  }

  if (*((void *)a3 + 1) == 5LL)
  {
    __int16 v68 = *(unsigned __int8 **)a3;
    goto LABEL_158;
  }

LABEL_169:
  int v88 = 0;
  uint64_t v65 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "LeMinCEDigitalID");
  int v66 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v65 + 88LL))(v65, buf, __p, &v88);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v66) {
      goto LABEL_177;
    }
  }

  else if (!v66)
  {
    goto LABEL_177;
  }

  int v67 = v88;
  *(_BYTE *)(a1 + 1108) = v88;
  __int16 v68 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v67;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Override LeMinCEDigitalID:%d", buf, 8u);
  }

LABEL_199:
  int v85 = 0;
  uint64_t v81 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "LeConnectionMaxIntervalFindMy");
  int v82 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v81 + 88LL))(v81, buf, __p, &v85);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v82) {
      return;
    }
  }

  else if (!v82)
  {
    return;
  }

  unsigned __int16 v83 = v85;
  *(_WORD *)(a1 + 1114) = v85;
  __int128 v84 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v83;
    _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEFAULT,  "Override LeConnectionMaxIntervalFindMy:%d",  buf,  8u);
  }

void sub_10058AFD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10058B0A8(unsigned __int8 *a1, uint64_t a2, int a3, char a4)
{
  unint64_t v7 = ((unint64_t)a1[1] << 40) | ((unint64_t)a1[2] << 32) | ((unint64_t)a1[3] << 24) | ((unint64_t)a1[4] << 16) | ((unint64_t)a1[5] << 8) | a1[6] | ((unint64_t)*a1 << 48);
  BOOL v8 = sub_1001B9B0C(a2);
  uint64_t v9 = sub_100404FE8();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _DWORD v10[2] = sub_1005B5528;
  void v10[3] = &unk_100899CF0;
  BOOL v12 = v8;
  void v10[4] = a2;
  void v10[5] = v7;
  int v11 = a3;
  char v13 = a4;
  sub_100405384(v9, v10);
}

void sub_10058B170(uint64_t a1, int a2, char a3, int a4)
{
  if (*(_BYTE *)(a1 + 55))
  {
    uint64_t v6 = (unsigned __int8 *)(a1 + 56);
    unint64_t v7 = ((unint64_t)*(unsigned __int8 *)(a1 + 57) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 58) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 59) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 60) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 61) << 8);
    BOOL v8 = (unsigned __int8 *)(a1 + 62);
  }

  else
  {
    uint64_t v6 = (unsigned __int8 *)(a1 + 48);
    unint64_t v7 = ((unint64_t)*(unsigned __int8 *)(a1 + 49) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 50) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 51) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 52) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 53) << 8);
    BOOL v8 = (unsigned __int8 *)(a1 + 54);
  }

  unint64_t v9 = v7 | *v8 | ((unint64_t)*v6 << 48);
  char v10 = *(_BYTE *)(a1 + 70);
  unsigned int v11 = *(unsigned __int8 *)(a1 + 166);
  char v12 = *(_BYTE *)(a1 + 280);
  __int16 v13 = sub_10012D7D4((unsigned __int16 *)a1);
  if (sub_10012D5EC(a1) && *(_BYTE *)(a1 + 220))
  {
    uint64_t v14 = sub_100404FE8();
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    void v30[2] = sub_1005B56C4;
    v30[3] = &unk_10087F8E0;
    v30[4] = v9;
    v30[5] = a1;
    sub_100405384(v14, v30);
  }

  BOOL v15 = v11 == 1;
  BOOL v16 = v11 > 1;
  char v17 = v15;
  char v18 = v12 | a3;
  if (a2 == 708 && v16) {
    a2 = 4834;
  }
  uint64_t v19 = sub_100404FE8();
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  void v22[2] = sub_1005B578C;
  v22[3] = &unk_10089BBB8;
  _OWORD v22[4] = a1;
  void v22[5] = v9;
  BOOL v26 = v16;
  __int16 v25 = v13;
  char v27 = v10;
  char v28 = v18;
  char v29 = v17;
  int v23 = a2;
  int v24 = a4;
  sub_100405384(v19, v22);
}

void sub_10058B314(int a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v7 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "LE Connection Cancelled with status %d",  buf,  8u);
  }

  uint64_t v3 = sub_100404FE8();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1005B5674;
  v4[3] = &unk_10087F980;
  int v5 = a1;
  sub_100405384(v3, v4);
}

void sub_10058B3F0(uint64_t a1, int a2, int a3, int a4, int a5)
{
  char v10 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134219008;
    uint64_t v17 = a1;
    __int16 v18 = 1024;
    int v19 = a2;
    __int16 v20 = 1024;
    int v21 = a3;
    __int16 v22 = 1024;
    int v23 = a4;
    __int16 v24 = 1024;
    int v25 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "LE Connection Parameters Updated for handle %p, interval:%d peripheral latency:%d supervisionTO:%d maxCELen:%d",  buf,  0x24u);
  }

  uint64_t v11 = sub_100404FE8();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_1005B5E1C;
  _OWORD v12[3] = &unk_100893818;
  v12[4] = a1;
  __int16 v13 = a2;
  __int16 v14 = a3;
  __int16 v15 = a4;
  sub_100405384(v11, v12);
}

void sub_10058B51C(uint64_t a1, int a2, int a3, int a4, int a5)
{
  char v10 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134219008;
    uint64_t v18 = a1;
    __int16 v19 = 1024;
    int v20 = a2;
    __int16 v21 = 1024;
    int v22 = a3;
    __int16 v23 = 1024;
    int v24 = a4;
    __int16 v25 = 1024;
    int v26 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Connection Subrating Update completed for handle %p. Subrate factor: %d, Peripheral latency: %d, Continuation Numb er: %d, Supervision TO: %d",  buf,  0x24u);
  }

  uint64_t v11 = sub_100404FE8();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_1005B5E78;
  _OWORD v12[3] = &unk_10087F8E0;
  v12[4] = a1;
  __int16 v13 = a2;
  __int16 v14 = a3;
  __int16 v15 = a4;
  __int16 v16 = a5;
  sub_100405384(v11, v12);
}

void sub_10058B64C(uint64_t a1, int a2, int a3)
{
  if (*(_WORD *)(a1 + 22) == 26119)
  {
    uint64_t v6 = sub_1002E6BF0();
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 344LL))(v6);
  }

  else
  {
    int v7 = 0;
  }

  int v8 = *(_DWORD *)(a1 + 328);
  unint64_t v9 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134219008;
    uint64_t v17 = a1;
    __int16 v18 = 1024;
    int v19 = a2;
    __int16 v20 = 1024;
    int v21 = a3;
    __int16 v22 = 1024;
    int v23 = v8;
    __int16 v24 = 1024;
    int v25 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "LE Link Ready for handle %p with status %d fastLEConnectionEnabled:%d linkReadyDurationMS:%d requiresCTOFix:%d",  buf,  0x24u);
  }

  uint64_t v10 = sub_100404FE8();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1005B5ED8;
  v11[3] = &unk_10087FF20;
  _OWORD v11[4] = a1;
  char v14 = v7;
  char v15 = a3;
  int v12 = a2;
  int v13 = v8;
  sub_100405384(v10, v11);
}

uint64_t sub_10058B7A0(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v3 = ((unint64_t)a1[1] << 40) | ((unint64_t)a1[2] << 32) | ((unint64_t)a1[3] << 24) | ((unint64_t)a1[4] << 16) | ((unint64_t)a1[5] << 8) | a1[6] | ((unint64_t)*a1 << 48);
  int v4 = objc_autoreleasePoolPush();
  int v5 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = sub_1005BFB9C(v3);
    int v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    *(_DWORD *)uint64_t v11 = 138543618;
    *(void *)&_OWORD v11[4] = v7;
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Address %{public}@ Added to Filter Accept List with status:%d",  v11,  0x12u);
  }

  objc_autoreleasePoolPop(v4);
  if ((_DWORD)a2)
  {
    if ((_DWORD)a2 != 758)
    {
      unint64_t v9 = (os_log_s *)qword_1008F7620;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
        sub_10069716C(v3, a2, v9);
      }
      uint64_t v10 = sub_1002E6E00();
      sub_1004FC118(v10, 1);
    }

    *(void *)uint64_t v11 = 0LL;
    *(void *)&uint8_t v11[8] = 0LL;
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
    }
    sub_1005C8684((uint64_t)off_1008D5F28, v3, 0, 0, 0LL, 0LL, v11);
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_1008A2B10);
    }
    sub_100594AE4((uint64_t)off_1008D5F08, v11);
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_1008A2B10);
    }
    sub_1005911F0((uint64_t)off_1008D5F08, 4u);
  }

  *(void *)uint64_t v11 = 0LL;
  *(void *)&uint8_t v11[8] = 0LL;
  sub_100242F28((uint64_t)v11, (uint64_t)&unk_1008F78B0);
  byte_1008F7930 = 0;
  sub_1002431FC(&stru_1008F7850);
  return sub_100242FAC((uint64_t)v11);
}

void sub_10058B9E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10058B9FC(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v3 = ((unint64_t)a1[1] << 40) | ((unint64_t)a1[2] << 32) | ((unint64_t)a1[3] << 24) | ((unint64_t)a1[4] << 16) | ((unint64_t)a1[5] << 8) | a1[6] | ((unint64_t)*a1 << 48);
  int v4 = objc_autoreleasePoolPush();
  int v5 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = sub_1005BFB9C(v3);
    int v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    *(_DWORD *)uint64_t v11 = 138543618;
    *(void *)&_OWORD v11[4] = v7;
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Address %{public}@ Removed from Filter Accept List with status:%d",  v11,  0x12u);
  }

  objc_autoreleasePoolPop(v4);
  if ((_DWORD)a2)
  {
    int v8 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
      sub_1006971F8(v3, a2, v8);
    }
    if ((_DWORD)a2 != 718)
    {
      if ((_DWORD)a2 != 758)
      {
        uint64_t v10 = sub_1002E6E00();
        sub_1004FC118(v10, 1);
      }

      *(void *)uint64_t v11 = 0LL;
      *(void *)&uint8_t v11[8] = 0LL;
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
      }
      sub_1005C8684((uint64_t)off_1008D5F28, v3, 0, 0, 0LL, 0LL, v11);
      if (qword_1008D5F10 != -1) {
        dispatch_once(&qword_1008D5F10, &stru_1008A2B10);
      }
      sub_100594C3C((uint64_t)off_1008D5F08, v11);
      if (qword_1008D5F10 != -1) {
        dispatch_once(&qword_1008D5F10, &stru_1008A2B10);
      }
      sub_1005911F0((uint64_t)off_1008D5F08, 4u);
    }
  }

  *(void *)uint64_t v11 = 0LL;
  *(void *)&uint8_t v11[8] = 0LL;
  sub_100242F28((uint64_t)v11, (uint64_t)&unk_1008F78F0);
  byte_1008F7931 = 0;
  sub_1002431FC(&stru_1008F7880);
  return sub_100242FAC((uint64_t)v11);
}

void sub_10058BC44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10058BC60(int a1, uint64_t a2, unsigned __int8 *a3)
{
  id v6 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *a3;
    *(_DWORD *)__int128 buf = 134218240;
    uint64_t v12 = a2;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "LE Read Remote FAE Table  handle %p, FAETable[0]:%0X ",  buf,  0x12u);
  }

  uint64_t v8 = sub_100404FE8();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  _DWORD v9[2] = sub_1005B2F9C;
  v9[3] = &unk_10087F900;
  int v10 = a1;
  void v9[4] = a2;
  _OWORD v9[5] = a3;
  sub_100405384(v8, v9);
}

void sub_10058BD60(int a1, uint64_t a2)
{
  int v4 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134217984;
    uint64_t v9 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "LE Security Enable handle %p, FAETable[0]: ",  buf,  0xCu);
  }

  uint64_t v5 = sub_100404FE8();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1005B2FF0;
  v6[3] = &unk_10087EB68;
  int v7 = a1;
  void v6[4] = a2;
  sub_100405384(v5, v6);
}

void sub_10058BE4C( int a1, uint64_t a2, char a3, int a4, char a5, char a6, char a7, char a8, char a9, char a10, char a11)
{
  uint64_t v17 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134218240;
    uint64_t v33 = a2;
    __int16 v34 = 1024;
    int v35 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "LE Procedure Enable  handle %p, enable:%0X ",  buf,  0x12u);
  }

  uint64_t v18 = sub_100404FE8();
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_1005B3044;
  void v21[3] = &unk_100889658;
  int v22 = a1;
  uint8_t v21[4] = a2;
  char v23 = a3;
  char v24 = a4;
  char v25 = a5;
  char v26 = a6;
  char v27 = a7;
  char v28 = a8;
  char v29 = a9;
  char v30 = a10;
  char v31 = a11;
  sub_100405384(v18, v21);
}

void sub_10058BFA8( uint64_t a1, int a2, char a3, char a4, char a5, char a6, char a7, char a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134218240;
    uint64_t v33 = a1;
    __int16 v34 = 1024;
    int v35 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "LE SubEvent Result handle %p, enable:%0X ",  buf,  0x12u);
  }

  uint64_t v19 = sub_100404FE8();
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  void v23[2] = sub_1005B30C0;
  v23[3] = &unk_1008A2820;
  char v24 = a2;
  char v25 = a3;
  char v26 = a4;
  char v27 = a5;
  char v28 = a6;
  char v29 = a7;
  char v30 = a8;
  char v31 = a9;
  v23[4] = a1;
  v23[5] = a10;
  void v23[6] = a11;
  v23[7] = a12;
  v23[8] = a13;
  sub_100405384(v19, v23);
}

void sub_10058C114( uint64_t a1, int a2, char a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134218240;
    uint64_t v27 = a1;
    __int16 v28 = 1024;
    int v29 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "LE SubEvent Result Continue handle %p, enable:%0X ",  buf,  0x12u);
  }

  uint64_t v18 = sub_100404FE8();
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  void v20[2] = sub_1005B314C;
  v20[3] = &unk_1008A2840;
  char v21 = a2;
  char v22 = a3;
  char v23 = a4;
  char v24 = a5;
  char v25 = a6;
  void v20[4] = a1;
  void v20[5] = a7;
  v20[6] = a8;
  char v20[7] = a9;
  v20[8] = a10;
  sub_100405384(v18, v20);
}

void sub_10058C25C(uint64_t a1, uint64_t a2, unsigned __int8 a3, int a4, unsigned __int8 a5, int a6)
{
  uint64_t v12 = *(const unsigned __int8 **)(a1 + 384);
  if (v12 != (const unsigned __int8 *)(a1 + 392))
  {
    while (*((void *)v12 + 6) != a2)
    {
      __int16 v13 = (unsigned __int8 *)*((void *)v12 + 1);
      if (v13)
      {
        do
        {
          int v14 = (const unsigned __int8 **)v13;
          __int16 v13 = *(unsigned __int8 **)v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          int v14 = (const unsigned __int8 **)*((void *)v12 + 2);
          BOOL v15 = *v14 == v12;
          uint64_t v12 = (const unsigned __int8 *)v14;
        }

        while (!v15);
      }

      uint64_t v12 = (const unsigned __int8 *)v14;
    }

    uuid_copy(uu, v12 + 32);
  }

void sub_10058C4CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_10058C504(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = a2;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + sub_100242FAC(v15 - 48) = 0u;
  *(void *)(a3 + 64) = 0LL;
  sub_100241F90(uu2, v5);
  if (a1 + 1520 != sub_1001FDB10(a1 + 1512, uu2))
  {
    sub_100241F90(uu2, v5);
    int v10 = uu2;
    id v6 = sub_1005BEE54( (uint64_t **)(a1 + 1512),  uu2,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v10);
    *(void *)a3 = (id)v6[6];
    *(void *)(a3 + 8) = (id)v6[7];
    __int128 v8 = *((_OWORD *)v6 + 5);
    __int128 v7 = *((_OWORD *)v6 + 6);
    __int128 v9 = *((_OWORD *)v6 + 4);
    *(_DWORD *)(a3 + 64) = *((_DWORD *)v6 + 28);
    *(_OWORD *)(a3 + 32) = v8;
    *(_OWORD *)(a3 + sub_100242FAC(v15 - 48) = v7;
    *(_OWORD *)(a3 + 16) = v9;
  }
}

void sub_10058C608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10058C62C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  sub_100241F90(uu1, v5);
  int v10 = uu1;
  id v6 = sub_1005BEE54( (uint64_t **)(a1 + 1512),  uu1,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v10);
  objc_storeStrong((id *)v6 + 6, *(id *)a3);
  objc_storeStrong((id *)v6 + 7, *(id *)(a3 + 8));
  __int128 v7 = *(_OWORD *)(a3 + 16);
  __int128 v8 = *(_OWORD *)(a3 + 32);
  __int128 v9 = *(_OWORD *)(a3 + 48);
  *((_DWORD *)v6 + 28) = *(_DWORD *)(a3 + 64);
  *((_OWORD *)v6 + 5) = v8;
  *((_OWORD *)v6 + 6) = v9;
  *((_OWORD *)v6 + 4) = v7;
}

void sub_10058C70C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10058C72C(os_unfair_lock_s *a1, void *a2)
{
  id v3 = a2;
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, (uint64_t)&a1[30]);
  sub_1005AD148(a1 + 48, v3);
  sub_1005AD148(a1 + 56, v3);
  sub_100242FAC((uint64_t)v4);
}

void sub_10058C78C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10058C7AC(uint64_t a1, uint64_t a2)
{
  id v3 = sub_100241F94((const unsigned __int8 *)(a1 + 40));
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
}

void sub_10058C808( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id *sub_10058C81C(id *a1)
{
  return a1;
}

char *sub_10058C84C(uint64_t a1)
{
  int v91 = 1800;
  int v92 = 3;
  int v89 = 7200;
  int v90 = 1;
  int v87 = 1800;
  int v88 = 3;
  int v85 = 7200;
  int v86 = 1;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "CONNECTION");
  sub_10002418C(__p, "LeConnectionDCKDisconnectionDisabledToStageOneValue");
  int v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v2 + 88LL))(v2, buf, __p, &v92);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      goto LABEL_9;
    }
  }

  else if (!v3)
  {
    goto LABEL_9;
  }

  id v4 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v92;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "LeConnectionDCKDisconnectionDisabledToStageOneValue=%d (override)",  buf,  8u);
  }

void sub_10058DF18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10058DFD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = *(_BYTE *)(a1 + 1117);
  if (v4) {
    goto LABEL_34;
  }
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
  }
  int v5 = sub_1005CFAF8((uint64_t)off_1008D5F28, v3);
  if (v5)
  {
    if (v5 == -127) {
      char v4 = 0;
    }
    else {
      char v4 = v5;
    }
    goto LABEL_34;
  }

  if (!sub_10058E250(a1, v3))
  {
    char v4 = 0;
    goto LABEL_34;
  }

  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
  }
  unsigned int v6 = sub_1005CE2FC((uint64_t)off_1008D5F28, v3);
  v17[0] = 0LL;
  v17[1] = 0LL;
  uint64_t v18 = 0LL;
  id v7 = objc_claimAutoreleasedReturnValue([v3 UUIDString]);
  sub_10002418C(v17, (char *)[v7 UTF8String]);

  if (SHIBYTE(v18) < 0)
  {
    sub_100024238(__p, v17[0], (unint64_t)v17[1]);
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)v17;
    uint64_t v16 = v18;
  }

  uint64_t v8 = sub_100024098(a1 + 1184, (const void **)__p);
  if (a1 + 1192 == v8) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 56);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  v14[0] = v6;
  v14[1] = v9;
  uint64_t v10 = sub_1005BC71C(a1 + 1320, v14);
  if (a1 + 1328 == v10)
  {
    char v4 = 0;
    goto LABEL_32;
  }

  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
  }
  int v11 = sub_1005CC588((uint64_t)off_1008D5F28, v3);
  char v4 = *(_BYTE *)(v10 + 36);
  if (v11 == 1) {
    goto LABEL_32;
  }
  if (v9 != 1) {
    goto LABEL_30;
  }
  if (v6 == 16)
  {
    char v12 = 8;
    goto LABEL_31;
  }

  if (v6 == 267 || v6 == 23) {
    char v12 = 4;
  }
  else {
LABEL_30:
  }
    char v12 = 0;
LABEL_31:
  v4 += v12;
LABEL_32:
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
LABEL_34:

  return v4;
}

void sub_10058E1F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10058E250(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(_BYTE *)(a1 + 1118))
  {
    uint64_t v4 = 0LL;
    goto LABEL_8;
  }

  if (*(_BYTE *)(a1 + 1117)) {
    goto LABEL_6;
  }
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
  }
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
  }
  int v6 = sub_1005CE2FC((uint64_t)off_1008D5F28, v3);
  uint64_t v4 = 0LL;
  if (v6 <= 22)
  {
    if (v6 != 11 && v6 != 16 && v6 != 21) {
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v4 = 1LL;
    goto LABEL_8;
  }

  if (v6 == 23 || v6 == 267 || v6 == 655360) {
    goto LABEL_6;
  }
LABEL_8:

  return v4;
}

void sub_10058E350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10058E364(uint64_t a1, int a2)
{
  uint64_t v2 = *(const unsigned __int8 **)(a1 + 336);
  id v3 = (const unsigned __int8 **)(a1 + 344);
  if (v2 == (const unsigned __int8 *)(a1 + 344))
  {
    char v5 = 0;
  }

  else
  {
    char v5 = 0;
    while (1)
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
      }
      int v6 = off_1008D5F28;
      id v7 = sub_100241F94(v2 + 25);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      int v9 = sub_1005CE2FC((uint64_t)v6, v8);

      if (v9 == a2) {
        break;
      }
      uint64_t v10 = (unsigned __int8 *)*((void *)v2 + 1);
      if (v10)
      {
        do
        {
          int v11 = (const unsigned __int8 **)v10;
          uint64_t v10 = *(unsigned __int8 **)v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          int v11 = (const unsigned __int8 **)*((void *)v2 + 2);
          BOOL v12 = *v11 == v2;
          uint64_t v2 = (const unsigned __int8 *)v11;
        }

        while (!v12);
      }

      v5 |= v9 == a2;
      uint64_t v2 = (const unsigned __int8 *)v11;
      if (v11 == v3) {
        return v5 & 1;
      }
    }

    char v5 = 1;
  }

  return v5 & 1;
}

void sub_10058E46C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10058E47C(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
  }
  int v3 = sub_1005CF748((uint64_t)off_1008D5F28, v2);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
  }
  unsigned int v4 = sub_1005CF600((uint64_t)off_1008D5F28, v2);
  if ((v4 & 4) == 0)
  {
    uint64_t v5 = 0LL;
    goto LABEL_16;
  }

  if (v3 != 1)
  {
    if (v3 == 2)
    {
      int v6 = 8;
      goto LABEL_13;
    }

    id v7 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PHY options are not specified, set to default S2 only",  v10,  2u);
    }
  }

  int v6 = 16;
LABEL_13:
  uint64_t v8 = sub_1002E6BF0();
  else {
    uint64_t v5 = v6 | v4;
  }
LABEL_16:

  return v5;
}

void sub_10058E5B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10058E5C4(uint64_t a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_1008A2B50);
  }
  sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1);
  uint64_t v2 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 408LL))(v2) & 1) == 0)
  {
    uint64_t v3 = sub_1002E8D54();
    sub_1003CBF90(v3 + 728, a1 + 8);
  }

  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_1008A2B70);
  }
  sub_100447B0C((uint64_t)off_1008D6190, a1 + 24);
  if (qword_1008D6628 != -1) {
    dispatch_once(&qword_1008D6628, &stru_1008A2B90);
  }
  sub_100331D58(qword_1008D6620, a1 + 96);
  int v37 = 0;
  uint64_t v4 = sub_1002E6E00();
  sub_10002418C(buf, "CONNECTION");
  sub_10002418C(__p, "LeConnectionManagerConnectionScansDefaultDuration");
  int v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v4 + 88LL))(v4, buf, __p, &v37);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v40) < 0)
  {
    operator delete(*(void **)buf);
    if (!v5) {
      goto LABEL_17;
    }
  }

  else if (!v5)
  {
    goto LABEL_17;
  }

  int v6 = v37;
  *(_DWORD *)(a1 + 568) = v37;
  id v7 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "LeConnectionManagerConnectionScansDefault duration=%d",  buf,  8u);
  }

void sub_10058EB58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void **a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  a18 = &a25;
  sub_100024304(&a18);
  _Unwind_Resume(a1);
}

void sub_10058EBFC(uint64_t a1, char a2, int a3, char a4, int a5)
{
  uint64_t v10 = sub_100404FE8();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1005BC214;
  v11[3] = &unk_10087FF20;
  _OWORD v11[4] = a1;
  char v14 = a2;
  char v15 = a4;
  int v12 = a3;
  int v13 = a5;
  sub_100405384(v10, v11);
}

_BYTE *sub_10058EC88(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stack Will Start", buf, 2u);
  }

  char v12 = 0;
  sub_100242CA4(&v12);
  if (sub_1001BEB38())
  {
    uint64_t v3 = sub_1002E6E00();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 8LL))(v3))
    {
      unsigned int v11 = 0;
      uint64_t v4 = sub_1002E6E00();
      sub_10002418C(buf, "CONNECTION");
      sub_10002418C(__p, "ForceConnectionDelay");
      int v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned int *))(*(void *)v4 + 88LL))( v4,  buf,  __p,  &v11);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(*(void **)buf);
      }
      int v6 = (os_log_s *)qword_1008F7620;
      BOOL v7 = os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT);
      if (v5)
      {
        if (v7)
        {
          *(_DWORD *)__int128 buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v11;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ForceConnectionDelay=%d", buf, 8u);
        }

        sub_1001BEAB8(v11);
      }

      else if (v7)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Could not find ForceConnectionDelay",  buf,  2u);
      }
    }

    sub_1001BD588();
    if (sub_1001BA118(8LL))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
        sub_1006975A4();
      }
    }

    else if (sub_1001BA118(4LL))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
        sub_100697544();
      }
    }

    else if (sub_1001B7C4C((uint64_t)off_1008A2300))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
        sub_1006974E4();
      }
    }

    else if (sub_1001B7D14((uint64_t)off_1008A2340))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
        sub_100697484();
      }
    }

    else if (sub_1001B9E04((uint64_t)sub_10058F06C))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
        sub_100697424();
      }
    }

    else if (sub_1001B9F84((uint64_t)sub_10058F218))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
        sub_1006973C4();
      }
    }

    else if (sub_1001D53AC((uint64_t)off_1008A2330))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
        sub_100697364();
      }
    }

    else
    {
      sub_1001BA0B0((uint64_t (*)(void))sub_10058F28C);
      sub_1001BA0DC(sub_10058F37C);
      if (*(_WORD *)(a1 + 836)) {
        sub_1001ACFF0(*(unsigned __int16 *)(a1 + 836));
      }
      sub_100242CD0(&v12);
      *(_BYTE *)(a1 + 1066) = 0;
      *(void *)__int128 buf = 0LL;
      uint64_t v14 = 0LL;
      sub_100242F28((uint64_t)buf, a1 + 120);
      sub_100242FAC((uint64_t)buf);
    }
  }

  return sub_100242CD8(&v12);
}

void sub_10058F014( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
}

void sub_10058F06C()
{
  *(_DWORD *)&void v13[3] = 0;
  *(_DWORD *)int v13 = 0;
  sub_1001BDFB4((uint64_t)v13);
  uint64_t v4 = 0LL;
  int v5 = &v4;
  uint64_t v6 = 0x4812000000LL;
  BOOL v7 = sub_1005B52E4;
  uint64_t v8 = nullsub_569;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  unint64_t v9 = &unk_1007C41D6;
  unint64_t v10 = ((unint64_t)v13[1] << 40) | ((unint64_t)v13[2] << 32) | ((unint64_t)v13[3] << 24) | ((unint64_t)v13[4] << 16) | ((unint64_t)v13[5] << 8) | v13[6] | ((unint64_t)v13[0] << 48);
  sub_1001BDF5C(1u, (uint64_t)v13);
  v5[7] = ((unint64_t)v13[1] << 40) | ((unint64_t)v13[2] << 32) | ((unint64_t)v13[3] << 24) | ((unint64_t)v13[4] << 16) | ((unint64_t)v13[5] << 8) | v13[6] | ((unint64_t)v13[0] << 48);
  sub_1001BDF5C(3u, (uint64_t)v13);
  unint64_t v0 = ((unint64_t)v13[1] << 40) | ((unint64_t)v13[2] << 32) | ((unint64_t)v13[3] << 24) | ((unint64_t)v13[4] << 16) | ((unint64_t)v13[5] << 8) | v13[6];
  v5[8] = v0 | ((unint64_t)v13[0] << 48);
  uint64_t v1 = sub_100404FE8();
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_1005B52FC;
  v2[3] = &unk_1008A2928;
  v2[4] = &v4;
  BOOL v3 = v0 == 0;
  sub_100405384(v1, v2);
  _Block_object_dispose(&v4, 8);
}

void sub_10058F1FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10058F218()
{
  unint64_t v0 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "LeConnectionManager::leAddressWillChangeCallback",  v2,  2u);
  }

  uint64_t v1 = sub_100404FE8();
  sub_100405384(v1, &stru_1008A2948);
}

void sub_10058F28C(uint64_t a1, char a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, int a7, char a8)
{
  if (a1)
  {
    char v16 = *(_BYTE *)(a1 + 70);
    uint64_t v17 = sub_100404FE8();
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    void v18[2] = sub_1005B1488;
    uint64_t v18[3] = &unk_1008A27D0;
    _OWORD v18[4] = a1;
    char v24 = a2;
    __int16 v20 = a3;
    __int16 v21 = a4;
    __int16 v22 = a5;
    __int16 v23 = a6;
    int v19 = a7;
    char v25 = v16;
    char v26 = a8;
    sub_100405384(v17, v18);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR))
  {
    sub_100697604();
  }

void sub_10058F37C(char a1, __int16 a2, __int16 a3, unsigned int a4, unint64_t *a5)
{
  v17[0] = 0LL;
  v17[1] = 0LL;
  char v16 = (uint64_t *)v17;
  if (a4)
  {
    uint64_t v9 = a4;
    do
    {
      sub_1002555B0(&v16, a5, (uint64_t *)a5);
      ++a5;
      --v9;
    }

    while (v9);
  }

  uint64_t v10 = sub_100404FE8();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768LL;
  void v11[2] = sub_1005B28D8;
  v11[3] = &unk_1008A27F0;
  char v15 = a1;
  __int16 v13 = a2;
  __int16 v14 = a3;
  sub_1005BE2D8(v12, (uint64_t)&v16);
  sub_100405384(v10, v11);
  sub_10023BF24((uint64_t)v12, (void *)v12[1]);
  sub_10023BF24((uint64_t)&v16, v17[0]);
}

void sub_10058F468( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

_BYTE *sub_10058F498(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stack Did Start", buf, 2u);
  }

  uint64_t v3 = sub_1002E6E9C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 336LL))(v3, 1LL);
  uint64_t v4 = sub_1002E6E9C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 448LL))(v4, 12LL, 1LL);
  int v5 = *(_DWORD *)(sub_1002E6E9C() + 708);
  if ((v5 - 1) > 0xA)
  {
    if ((v5 - 2000) <= 0x7CF)
    {
      uint64_t v7 = sub_1002E6E9C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 856LL))(v7, 14LL, 1LL);
    }
  }

  else
  {
    uint64_t v6 = sub_1002E6E9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 856LL))(v6, 4LL, 1LL);
  }

  uint64_t v8 = sub_1002E6E9C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 984LL))(v8, 10LL);
  uint64_t v9 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 3416LL))(v9))
  {
    uint64_t v10 = sub_1002E6E9C();
    (*(void (**)(uint64_t, void))(*(void *)v10 + 3424LL))(v10, 0LL);
  }

  *(_BYTE *)(a1 + 184) = 1;
  *(_BYTE *)(a1 + 100_Block_object_dispose(va, 8) = 1;
  *(_WORD *)(a1 + 1064) = 1;
  *(_BYTE *)(a1 + 1067) = 0;
  uint64_t v11 = sub_1002E8D54();
  sub_1001FC8A8(v11 + 368, a1 + 16);
  uint64_t v12 = sub_1002E8D54();
  sub_1003FDB08(v12 + 328, a1 + 88);
  unsigned __int8 v38 = 0;
  *(_BYTE *)(a1 + 633) = 0;
  uint64_t v13 = sub_1002E8D54();
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v13 + 72LL))(v13, &v38);
  uint64_t v14 = sub_1002E8D54();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 80LL))(v14, a1 + 633);
  char v15 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = *(unsigned __int8 *)(a1 + 633);
    *(_DWORD *)__int128 buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v16;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v38;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Low Power mode: %d. Airplane Mode: %d",  buf,  0xEu);
  }

  char v37 = 0;
  sub_100242CA4(&v37);
  *(_DWORD *)&v36[3] = 0;
  *(_DWORD *)char v36 = 0;
  *(_DWORD *)&v35[3] = 0;
  *(_DWORD *)uint64_t v35 = 0;
  sub_1001BDFB4((uint64_t)v36);
  sub_1001BDF5C(1u, (uint64_t)v35);
  *(void *)(a1 + 1545) = sub_10011F188();
  sub_100242CD0(&v37);
  unint64_t v17 = ((unint64_t)v35[1] << 40) | ((unint64_t)v35[2] << 32) | ((unint64_t)v35[3] << 24) | ((unint64_t)v35[4] << 16) | ((unint64_t)v35[5] << 8) | v35[6] | ((unint64_t)v35[0] << 48);
  *(void *)(a1 + 28_Block_object_dispose(va, 8) = ((unint64_t)v36[1] << 40) | ((unint64_t)v36[2] << 32) | ((unint64_t)v36[3] << 24) | ((unint64_t)v36[4] << 16) | ((unint64_t)v36[5] << 8) | v36[6] | ((unint64_t)v36[0] << 48);
  *(void *)(a1 + 2sub_100242FAC(v16 - 96) = v17;
  *(CFAbsoluteTime *)(a1 + 32_Block_object_dispose(va, 8) = CFAbsoluteTimeGetCurrent();
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_1008A2B70);
  }
  sub_1004491EC((uint64_t)off_1008D6190, 0);
  sub_10058FBC4(a1, 0LL, 0, 1);
  if (qword_1008F1CF8 != -1) {
    dispatch_once(&qword_1008F1CF8, &stru_1008A2398);
  }
  char v34 = 0;
  uint64_t v18 = sub_1002E6E00();
  sub_10002418C(buf, "Magnet");
  sub_10002418C(__p, "DisableMagnetSetLatency");
  int v19 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v18 + 72LL))(v18, buf, __p, &v34);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if ((SBYTE7(v40) & 0x80000000) == 0)
  {
    if (!v19) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

  operator delete(*(void **)buf);
  if (v19) {
LABEL_19:
  }
    *(_BYTE *)(a1 + 632) = 1;
LABEL_20:
  int v31 = 0;
  *(_BYTE *)(a1 + 1504) = 0;
  uint64_t v20 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "ConnectionScanTimeoutOverride");
  int v21 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v20 + 88LL))(v20, buf, __p, &v31);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v40) < 0)
  {
    operator delete(*(void **)buf);
    if (!v21) {
      goto LABEL_31;
    }
  }

  else if (!v21)
  {
    goto LABEL_31;
  }

  __int16 v22 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v31;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Warning: LeConnectionScanTimeoutOverride: Using override value (%d) for fLeConnectionScanTimeoutOverride",  buf,  8u);
  }

  *(_DWORD *)(a1 + 150_Block_object_dispose(va, 8) = v31;
  *(_BYTE *)(a1 + 1504) = 1;
LABEL_31:
  sub_1005BC2E8(a1 + 1432, *(void **)(a1 + 1440));
  *(void *)(a1 + 1432) = a1 + 1440;
  *(void *)(a1 + 14sub_100242FAC(v15 - 48) = 0LL;
  *(void *)(a1 + 1440) = 0LL;
  sub_1005BC2E8(a1 + 1456, *(void **)(a1 + 1464));
  *(void *)(a1 + 1456) = a1 + 1464;
  *(void *)(a1 + 1472) = 0LL;
  *(void *)(a1 + 1464) = 0LL;
  LOBYTE(__p[0]) = -1;
  __int128 v52 = 0u;
  memset(v53, 0, sizeof(v53));
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  *(_OWORD *)__int128 buf = 0u;
  char v30 = 0;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_1008A2B50);
  }
  if (*((_BYTE *)off_1008D60A8 + 556))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
      sub_100697690();
    }
  }

  else
  {
    uint64_t v23 = sub_1002E6E9C();
    if ((*(unsigned int (**)(uint64_t, char *, void **, uint8_t *))(*(void *)v23 + 1848LL))( v23,  &v30,  __p,  buf))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
        sub_100697630();
      }
    }

    else
    {
      uint64_t v24 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", buf, LOBYTE(__p[0])));
      char v25 = *(void **)(a1 + 1536);
      *(void *)(a1 + 1536) = v24;

      *(_BYTE *)(a1 + 1544) = v30;
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472LL;
      v29[2] = sub_100590058;
      v29[3] = &unk_1008A23B8;
      v29[4] = a1;
      sub_10058C72C((os_unfair_lock_s *)a1, v29);
      uint64_t v26 = sub_100404FE8();
      sub_100405384(v26, &stru_1008A23D8);
    }
  }

  uint64_t v27 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v27 + 328LL))(v27))
  {
    if (qword_1008D92A8 != -1) {
      dispatch_once(&qword_1008D92A8, &stru_1008A2BB0);
    }
    sub_10064B7CC(qword_1008D92A0, 0x10000u);
    if (qword_1008D92A8 != -1) {
      dispatch_once(&qword_1008D92A8, &stru_1008A2BB0);
    }
    sub_10064B7CC(qword_1008D92A0, 0x10001u);
  }

  return sub_100242CD8(&v37);
}

void sub_10058FB54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, int a23, __int16 a24, char a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  sub_100242CD8(&a25);
  _Unwind_Resume(a1);
}

void sub_10058FBC4(uint64_t a1, void *a2, char a3, int a4)
{
  id v7 = a2;
  uint64_t v8 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 2616LL))(v8))
  {
    uint64_t v9 = *(const unsigned __int8 **)(a1 + 336);
    char v10 = -127;
    if (v9 != (const unsigned __int8 *)(a1 + 344))
    {
      do
      {
        uint64_t v11 = sub_100241F94(v9 + 25);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        int v13 = sub_10058DFD4(a1, v12);

        if (v13)
        {
          uint64_t v14 = sub_100241F94(v9 + 25);
          char v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
          int v16 = sub_10058DFD4(a1, v15);

          if (v16 > v10)
          {
            unint64_t v17 = sub_100241F94(v9 + 25);
            uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
            char v10 = sub_10058DFD4(a1, v18);
          }
        }

        int v19 = (unsigned __int8 *)*((void *)v9 + 1);
        if (v19)
        {
          do
          {
            uint64_t v20 = (const unsigned __int8 **)v19;
            int v19 = *(unsigned __int8 **)v19;
          }

          while (v19);
        }

        else
        {
          do
          {
            uint64_t v20 = (const unsigned __int8 **)*((void *)v9 + 2);
            BOOL v26 = *v20 == v9;
            uint64_t v9 = (const unsigned __int8 *)v20;
          }

          while (!v26);
        }

        uint64_t v9 = (const unsigned __int8 *)v20;
      }

      while (v20 != (const unsigned __int8 **)(a1 + 344));
    }

    int v21 = *(unsigned __int8 *)(a1 + 1120);
    if (*(_BYTE *)(a1 + 1120)) {
      char v22 = *(_BYTE *)(a1 + 1120);
    }
    else {
      char v22 = v10;
    }
    if (sub_10058E364(a1, 3))
    {
      uint64_t v23 = (os_log_s *)qword_1008F7620;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = *(char *)(a1 + 736);
        int v31 = 67109120;
        LODWORD(v32) = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "FindMy object connection enabled, skipping Global RSSI. LastApplied =%d dBm)",  (uint8_t *)&v31,  8u);
      }

      if (*(_BYTE *)(a1 + 736))
      {
        char v22 = 0;
        a4 = 1;
      }
    }

    if (a4) {
      char v25 = a3;
    }
    else {
      char v25 = v22;
    }
    if ((a4 & 1) != 0 || (v22 == a3 ? (BOOL v26 = v21 == 0) : (BOOL v26 = 0), !v26))
    {
      *(_BYTE *)(a1 + 736) = v25;
      uint64_t v27 = (os_log_s *)qword_1008F7620;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
      {
        int v31 = 138544386;
        id v32 = v7;
        __int16 v33 = 1024;
        int v34 = -1;
        __int16 v35 = 1024;
        int v36 = -1;
        __int16 v37 = 1024;
        int v38 = -1;
        __int16 v39 = 1024;
        int v40 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Applying configureCreateConnection for device %{public}@ to connection filter accept list with option Time out=%d, smartNotification=%d, connectRequestRetry=%d, minRssiToUpdate=%d",  (uint8_t *)&v31,  0x24u);
      }

      uint64_t v28 = sub_1002E6E9C();
      int v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v28 + 1632LL))( v28,  255LL,  255LL,  255LL,  v25);
      if (v29)
      {
        char v30 = (os_log_s *)qword_1008F7620;
        if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
        {
          int v31 = 67109120;
          LODWORD(v32) = v29;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "configureCreateConnection failed with error %d",  (uint8_t *)&v31,  8u);
        }
      }
    }
  }
}

void sub_10058FEA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10058FEE8(id a1)
{
  int v8 = 0;
  uint64_t v1 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "FastConnectionOverrideInstance");
  int v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v1 + 88LL))(v1, buf, __p, &v8);
  if (v8 > 0) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      return;
    }
  }

  else if (!v3)
  {
    return;
  }

  uint64_t v4 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "FastLEConnection:calling setMaxInstantUpdateForFastLEConnection with %d",  buf,  8u);
  }

  uint64_t v5 = sub_1002E6E9C();
  (*(void (**)(uint64_t, void))(*(void *)v5 + 1872LL))(v5, v8);
}

void sub_10059001C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100590058(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 152LL))( a2,  *(unsigned __int8 *)(*(void *)(a1 + 32) + 1544LL),  *(void *)(*(void *)(a1 + 32) + 1536LL));
}

void sub_100590078(id a1)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
  }
  sub_1005D2334((uint64_t)off_1008D5F28);
}

_BYTE *sub_1005900B8(uint64_t a1)
{
  int v2 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "LeConnectionManager::stackWillStop enter",  (uint8_t *)&buf,  2u);
  }

  uint64_t v3 = sub_1002E8D54();
  sub_10024E060(v3 + 368, a1 + 16);
  uint64_t v4 = sub_1002E8D54();
  sub_10024E060(v4 + 328, a1 + 88);
  char v51 = 0;
  sub_100242CA4(&v51);
  if (sub_1001BEB38())
  {
    sub_100242CD0(&v51);
    *(_BYTE *)(a1 + 1067) = 1;
    uint64_t v5 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 352);
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Trying to cancel all pending connections (%lu)",  (uint8_t *)&buf,  0xCu);
    }

    __int128 buf = 0uLL;
    sub_100242F28((uint64_t)&buf, a1 + 120);
    if (*(void *)(a1 + 352)
      && !sub_100590B30(a1, 1)
      && *(_BYTE *)(a1 + 1064)
      && !sub_1002431A4((pthread_cond_t *)(a1 + 1016), (pthread_mutex_t **)&buf, 0x1388uLL))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
        sub_100697748();
      }
      uint64_t v44 = sub_1002E6E00();
      sub_10002418C(v50, "");
      sub_1004FB370(v44, 141LL, (uint64_t)v50, 1);
    }

    sub_100242F54((uint64_t)&buf);
    sub_100242C98(&v51);
    char v7 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v53 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Trying to disconnect all LE connections",  v53,  2u);
    }

    int v8 = sub_1001BD7A4((uint64_t (*)(void))sub_100591114);
    if (v8)
    {
      uint64_t v9 = (os_log_s *)qword_1008F7620;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v53 = 67109120;
        int v54 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "LE_GAP_DisconnectAll returned %{bluetooth:OI_STATUS}u",  v53,  8u);
      }
    }

    sub_100242CD0(&v51);
    char v10 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v53 = 67109120;
      int v54 = 5000;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "waiting for all LE devices complete disconnection, timeout %d",  v53,  8u);
    }

    sub_100242ECC((uint64_t)&buf);
    if (!v8
      && *(_BYTE *)(a1 + 1008)
      && !sub_1002431A4((pthread_cond_t *)(a1 + 960), (pthread_mutex_t **)&buf, 0x1388uLL))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
        sub_10069771C();
      }
      uint64_t v43 = sub_1002E6E00();
      sub_10002418C(v49, "");
      sub_1004FB370(v43, 141LL, (uint64_t)v49, 1);
    }

    sub_100242F54((uint64_t)&buf);
    byte_1008F7930 = 0;
    byte_1008F7931 = 0;
    sub_1002431FC(&stru_1008F7880);
    sub_1002431FC(&stru_1008F7850);
    uint64_t v11 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "No more LE connections", v53, 2u);
    }

    sub_1002431FC(&stru_1008F7938);
    byte_1008F79A8 = 0;
    sub_100242C98(&v51);
    if (sub_1001BA1BC(8LL, v12, v13, v14, v15, v16, v17, v18)
      && os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR))
    {
      sub_1006976BC();
    }

    sub_1001B7DDC((uint64_t)off_1008A2300);
    sub_1001B9ECC((uint64_t)sub_10058F06C);
    sub_100242CD0(&v51);
    sub_100242ECC((uint64_t)&buf);
    *(_BYTE *)(a1 + 184) = 0;
    int v19 = *(const unsigned __int8 **)(a1 + 384);
    uint64_t v20 = (const unsigned __int8 **)(a1 + 392);
    if (v19 != (const unsigned __int8 *)(a1 + 392))
    {
      do
      {
        if (qword_1008D92A8 != -1) {
          dispatch_once(&qword_1008D92A8, &stru_1008A2BB0);
        }
        uint64_t v21 = qword_1008D92A0;
        char v22 = sub_100241F94(v19 + 32);
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        sub_10064CA40(v21, v23, 0LL);

        int v24 = (unsigned __int8 *)*((void *)v19 + 1);
        if (v24)
        {
          do
          {
            char v25 = (const unsigned __int8 **)v24;
            int v24 = *(unsigned __int8 **)v24;
          }

          while (v24);
        }

        else
        {
          do
          {
            char v25 = (const unsigned __int8 **)*((void *)v19 + 2);
            BOOL v26 = *v25 == v19;
            int v19 = (const unsigned __int8 *)v25;
          }

          while (!v26);
        }

        int v19 = (const unsigned __int8 *)v25;
      }

      while (v25 != v20);
    }

    sub_10023BF24(a1 + 384, *(void **)(a1 + 392));
    *(void *)(a1 + 392) = 0LL;
    *(void *)(a1 + 400) = 0LL;
    *(void *)(a1 + 384) = v20;
    uint64_t v27 = *(const unsigned __int8 **)(a1 + 336);
    uint64_t v28 = (const unsigned __int8 **)(a1 + 344);
    if (v27 != (const unsigned __int8 *)(a1 + 344))
    {
      do
      {
        if (qword_1008D92A8 != -1) {
          dispatch_once(&qword_1008D92A8, &stru_1008A2BB0);
        }
        uint64_t v29 = qword_1008D92A0;
        char v30 = sub_100241F94(v27 + 25);
        int v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
        sub_10064CA40(v29, v31, 0LL);

        id v32 = (unsigned __int8 *)*((void *)v27 + 1);
        if (v32)
        {
          do
          {
            __int16 v33 = (const unsigned __int8 **)v32;
            id v32 = *(unsigned __int8 **)v32;
          }

          while (v32);
        }

        else
        {
          do
          {
            __int16 v33 = (const unsigned __int8 **)*((void *)v27 + 2);
            BOOL v26 = *v33 == v27;
            uint64_t v27 = (const unsigned __int8 *)v33;
          }

          while (!v26);
        }

        uint64_t v27 = (const unsigned __int8 *)v33;
      }

      while (v33 != v28);
    }

    sub_10023BF24(a1 + 336, *(void **)(a1 + 344));
    *(void *)(a1 + 344) = 0LL;
    *(void *)(a1 + 352) = 0LL;
    *(void *)(a1 + 336) = v28;
    sub_10023BF24(a1 + 608, *(void **)(a1 + 616));
    *(void *)(a1 + 60_Block_object_dispose(va, 8) = a1 + 616;
    *(void *)(a1 + 624) = 0LL;
    *(void *)(a1 + 616) = 0LL;
    sub_10023BF24(a1 + 360, *(void **)(a1 + 368));
    *(void *)(a1 + 36_Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 376) = 0LL;
    *(void *)(a1 + 360) = a1 + 368;
    sub_10023BF24(a1 + 640, *(void **)(a1 + 648));
    *(void *)(a1 + 640) = a1 + 648;
    *(void *)(a1 + 656) = 0LL;
    *(void *)(a1 + 6sub_100242FAC(v15 - 48) = 0LL;
    sub_10023BF24(a1 + 664, *(void **)(a1 + 672));
    *(void *)(a1 + 664) = a1 + 672;
    *(void *)(a1 + 680) = 0LL;
    *(void *)(a1 + 672) = 0LL;
    sub_10023BF24(a1 + 688, *(void **)(a1 + 696));
    *(void *)(a1 + 68_Block_object_dispose(va, 8) = a1 + 696;
    *(void *)(a1 + 704) = 0LL;
    *(void *)(a1 + 6sub_100242FAC(v16 - 96) = 0LL;
    sub_10023BF24(a1 + 712, *(void **)(a1 + 720));
    *(void *)(a1 + 712) = a1 + 720;
    *(void *)(a1 + 72_Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 720) = 0LL;
    sub_10023BF24(a1 + 408, *(void **)(a1 + 416));
    *(void *)(a1 + 416) = 0LL;
    *(void *)(a1 + 424) = 0LL;
    *(void *)(a1 + 40_Block_object_dispose(va, 8) = a1 + 416;
    sub_10023BF24(a1 + 432, *(void **)(a1 + 440));
    *(void *)(a1 + 440) = 0LL;
    *(void *)(a1 + 4sub_100242FAC(v15 - 48) = 0LL;
    *(void *)(a1 + 432) = a1 + 440;
    sub_10023BF24(a1 + 840, *(void **)(a1 + 848));
    *(void *)(a1 + 840) = a1 + 848;
    *(void *)(a1 + 856) = 0LL;
    *(void *)(a1 + 8sub_100242FAC(v15 - 48) = 0LL;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    __int128 v48 = 0u;
    id v34 = *(id *)(a1 + 744);
    id v35 = [v34 countByEnumeratingWithState:&v45 objects:v52 count:16];
    if (v35)
    {
      uint64_t v36 = *(void *)v46;
      do
      {
        __int16 v37 = 0LL;
        do
        {
          if (*(void *)v46 != v36) {
            objc_enumerationMutation(v34);
          }
          id v38 = *(id *)(*((void *)&v45 + 1) + 8LL * (void)v37);
          if (qword_1008D92A8 != -1) {
            dispatch_once(&qword_1008D92A8, &stru_1008A2BB0);
          }
          sub_10064CA40(qword_1008D92A0, v38, 0LL);

          __int16 v37 = (char *)v37 + 1;
        }

        while (v35 != v37);
        id v35 = [v34 countByEnumeratingWithState:&v45 objects:v52 count:16];
      }

      while (v35);
    }

    objc_msgSend(*(id *)(a1 + 744), "removeAllObjects", (void)v45);
    [*(id *)(a1 + 752) removeAllObjects];
    [*(id *)(a1 + 760) removeAllObjects];
    [*(id *)(a1 + 768) removeAllObjects];
    [*(id *)(a1 + 776) removeAllObjects];
    [*(id *)(a1 + 784) removeAllObjects];
    [*(id *)(a1 + 792) removeAllObjects];
    [*(id *)(a1 + 824) removeAllObjects];
    sub_10023BF24(a1 + 456, *(void **)(a1 + 464));
    *(void *)(a1 + 464) = 0LL;
    *(void *)(a1 + 472) = 0LL;
    *(void *)(a1 + 456) = a1 + 464;
    sub_10023BF24(a1 + 480, *(void **)(a1 + 488));
    *(void *)(a1 + 48_Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 4sub_100242FAC(v16 - 96) = 0LL;
    *(void *)(a1 + 480) = a1 + 488;
    sub_10023BF24(a1 + 504, *(void **)(a1 + 512));
    *(void *)(a1 + 520) = 0LL;
    *(void *)(a1 + 504) = a1 + 512;
    *(void *)(a1 + 512) = 0LL;
    sub_10023BF24(a1 + 528, *(void **)(a1 + 536));
    *(void *)(a1 + 52_Block_object_dispose(va, 8) = a1 + 536;
    *(void *)(a1 + 544) = 0LL;
    *(void *)(a1 + 536) = 0LL;
    sub_10023BF24(a1 + 800, *(void **)(a1 + 808));
    *(void *)(a1 + 800) = a1 + 808;
    *(void *)(a1 + 816) = 0LL;
    *(void *)(a1 + 80_Block_object_dispose(va, 8) = 0LL;
    __int16 v39 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Setting initial connection state", v53, 2u);
    }

    sub_1005911F0(a1, 0);
    sub_1005915A8((os_unfair_lock_s *)a1, 0);
    sub_10059172C(a1);
    sub_100591808(a1);
    sub_1004F52C4(a1 + 936, *(void **)(a1 + 944));
    *(void *)(a1 + 936) = a1 + 944;
    *(void *)(a1 + 952) = 0LL;
    *(void *)(a1 + 944) = 0LL;
    *(void *)(a1 + 32_Block_object_dispose(va, 8) = 0LL;
    sub_100291CE8(a1 + 1152, *(void **)(a1 + 1160));
    *(void *)(a1 + 1152) = a1 + 1160;
    *(void *)(a1 + 116_Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 1160) = 0LL;
    sub_10023E78C(a1 + 1184, *(char **)(a1 + 1192));
    *(void *)(a1 + 1184) = a1 + 1192;
    *(void *)(a1 + 1200) = 0LL;
    *(void *)(a1 + 1192) = 0LL;
    sub_10023E78C(a1 + 1352, *(char **)(a1 + 1360));
    *(void *)(a1 + 1352) = a1 + 1360;
    *(void *)(a1 + 136_Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 1360) = 0LL;
    sub_10023BF24(a1 + 1384, *(void **)(a1 + 1392));
    *(void *)(a1 + 1384) = a1 + 1392;
    *(void *)(a1 + 1400) = 0LL;
    *(void *)(a1 + 1392) = 0LL;
    sub_10023BF24(a1 + 1128, *(void **)(a1 + 1136));
    *(void *)(a1 + 112_Block_object_dispose(va, 8) = a1 + 1136;
    *(void *)(a1 + 1144) = 0LL;
    *(void *)(a1 + 1136) = 0LL;
    sub_10043CB4C(a1 + 32);
    sub_1005BC2E8(a1 + 1432, *(void **)(a1 + 1440));
    *(void *)(a1 + 1432) = a1 + 1440;
    *(void *)(a1 + 14sub_100242FAC(v15 - 48) = 0LL;
    *(void *)(a1 + 1440) = 0LL;
    sub_1005BC2E8(a1 + 1456, *(void **)(a1 + 1464));
    *(void *)(a1 + 1456) = a1 + 1464;
    *(void *)(a1 + 1472) = 0LL;
    *(void *)(a1 + 1464) = 0LL;
    sub_10059189C(a1);
    uint64_t v40 = sub_1002E6E9C();
    (*(void (**)(uint64_t))(*(void *)v40 + 3624LL))(v40);
    __int128 v41 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v53 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "LeConnectionManager::stackWillStop exit",  v53,  2u);
    }

    sub_100242FAC((uint64_t)&buf);
  }

  return sub_100242CD8(&v51);
}

void sub_100590A94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, int a30, __int16 a31, char a32, char a33)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  sub_100242FAC(v33 - 112);
  sub_100242CD8(&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_100590B30(uint64_t a1, int a2)
{
  v50[0] = 0LL;
  v50[1] = 0LL;
  sub_100242F28((uint64_t)v50, a1 + 120);
  unint64_t v4 = *(void *)(a1 + 352);
  if (a2)
  {
    uint64_t v5 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Clearing fDevicesToAddToFilterAcceptList",  buf,  2u);
    }

    [*(id *)(a1 + 768) removeAllObjects];
  }

  if (*(_DWORD *)(a1 + 864) == 1)
  {
    if (v4)
    {
      uint64_t v6 = (os_log_s *)qword_1008F7620;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
      {
        char v7 = "connection";
        if (v4 > 1) {
          char v7 = "connections";
        }
        *(_DWORD *)__int128 buf = 134218242;
        *(void *)&uint8_t buf[4] = v4;
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&_BYTE buf[14] = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Cancelling %lu pending %{public}s",  buf,  0x16u);
      }

      char v49 = 0;
      int v8 = sub_100242CA4(&v49);
      uint64_t v16 = sub_1001BA2D4((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15);
      sub_100242CD0(&v49);
      if ((v16 - 1301) >= 2)
      {
        if (!(_DWORD)v16)
        {
          sub_1005911F0(a1, 2u);
LABEL_25:
          sub_100242CD8(&v49);
          goto LABEL_26;
        }

        if ((_DWORD)v16 != 3704)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
            sub_100697774();
          }
          uint64_t v42 = sub_1002E6E00();
          sub_1004FC118(v42, 1);
        }
      }

      uint64_t v17 = *(void *)(a1 + 872);
      uint64_t v18 = *(void *)(a1 + 880);
      unint64_t v47 = 0LL;
      unint64_t v48 = 0LL;
      *(void *)__int128 buf = 0LL;
      sub_1000B0400((uint64_t)buf);
      unint64_t v19 = 1000 * (*(int *)buf - *(void *)(a1 + 872)) - *(void *)(a1 + 880) + *(__int16 *)&buf[4];
      unint64_t v47 = v19 / 0x3E8;
      unint64_t v48 = v19 % 0x3E8;
      uint64_t v20 = (os_log_s *)qword_1008F7620;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = *(int *)(a1 + 864);
        uint64_t v29 = v28 > 4 ? "UNKNOWN" : (&off_1008A2DC0)[v28];
        sub_10038FCC8(&v47, __p);
        char v30 = v46 >= 0 ? __p : (void **)__p[0];
        int v31 = *(unsigned __int8 *)(a1 + 888);
        *(_DWORD *)__int128 buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v16;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = v29;
        *(_WORD *)&_BYTE buf[18] = 2082;
        *(void *)&_BYTE buf[20] = v30;
        *(_WORD *)&_BYTE buf[28] = 1024;
        *(_DWORD *)&buf[30] = v31;
        _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "Failed to cancel connection(s) with result %{bluetooth:OI_STATUS}u (state %{public}s,%{public}ssec %d errors)",  buf,  0x22u);
        if (v46 < 0) {
          operator delete(__p[0]);
        }
      }

      if ((_DWORD)v16 == 1301)
      {
        unsigned int v21 = ++*(_BYTE *)(a1 + 888);
        if (v21 >= 2)
        {
          unint64_t v22 = (v18 + 60000) / 0x3E8uLL;
          *(_WORD *)&buf[6] = 0;
          *(_DWORD *)__int128 buf = v17 + v22;
          *(_WORD *)&uint8_t buf[4] = v18 - 5536 - 1000 * v22;
          if (sub_1001F4468((uint64_t)buf))
          {
            uint64_t v23 = (os_log_s *)qword_1008F7620;
            if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR))
            {
              uint64_t v24 = *(int *)(a1 + 864);
              else {
                char v25 = (&off_1008A2DC0)[v24];
              }
              sub_10038FCC8(&v47, __p);
              int v32 = v46;
              uint64_t v33 = (void **)__p[0];
              sub_10038FCC8((void *)(a1 + 872), v43);
              id v34 = __p;
              if (v32 < 0) {
                id v34 = v33;
              }
              if (v44 >= 0) {
                id v35 = v43;
              }
              else {
                id v35 = (void **)v43[0];
              }
              int v36 = *(unsigned __int8 *)(a1 + 888);
              *(_DWORD *)__int128 buf = 136446978;
              *(void *)&uint8_t buf[4] = v25;
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)&_BYTE buf[14] = v34;
              *(_WORD *)&_BYTE buf[22] = 2082;
              *(void *)&uint8_t buf[24] = v35;
              *(_WORD *)&uint8_t buf[32] = 1024;
              int v52 = v36;
              _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "ABORTING TO RECOVER - %{public}s %{public}ssec (%{public}s) %d errors",  buf,  0x26u);
              if (v44 < 0) {
                operator delete(v43[0]);
              }
              if (v46 < 0) {
                operator delete(__p[0]);
              }
            }

            uint64_t v37 = sub_1002E6E00();
            if ((*(unsigned int (**)(uint64_t))(*(void *)v37 + 8LL))(v37))
            {
              if (qword_1008D9060 != -1) {
                dispatch_once(&qword_1008D9060, &stru_1008A2C50);
              }
              uint64_t v38 = qword_1008D9058;
              sub_10002418C(buf, "Failed to cancel all pending connection/s");
              uint64_t v39 = *(int *)(a1 + 864);
              else {
                uint64_t v40 = (&off_1008A2DC0)[v39];
              }
              sub_10002418C(__p, v40);
              sub_10040C784(0.0, v38, (uint64_t *)buf, (uint64_t *)__p);
              if (v46 < 0) {
                operator delete(__p[0]);
              }
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }

            uint64_t v41 = sub_1002E6E00();
            sub_1004FC118(v41, 1);
          }
        }
      }

      goto LABEL_25;
    }
  }

  else
  {
    BOOL v26 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Cannot cancel connections when not in connecting state",  buf,  2u);
    }
  }

  uint64_t v16 = 408LL;
LABEL_26:
  sub_100242FAC((uint64_t)v50);
  return v16;
}

void sub_10059108C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_100242CD8(&a24);
  sub_100242FAC((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_100591114(int a1)
{
  int v2 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LE All Disconnected with status %d", buf, 8u);
  }

  uint64_t v3 = sub_100404FE8();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1005B5F90;
  v4[3] = &unk_10087F980;
  int v5 = a1;
  sub_100405384(v3, v4);
}

void sub_1005911F0(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 864) == a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEBUG)) {
      sub_1006977D4();
    }
  }

  else
  {
    *(void *)std::string __str = 0LL;
    sub_1000B0400((uint64_t)__str);
    uint64_t v4 = *(int *)__str;
    uint64_t v5 = *(__int16 *)&__str[4];
    uint64_t v6 = *(void *)(a1 + 872);
    uint64_t v7 = *(void *)(a1 + 880);
    int v8 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v9 = 1000 * (v4 - v6) - v7 + v5;
      unsigned int v10 = *(_DWORD *)(a1 + 864);
      uint64_t v11 = v10 > 4 ? "UNKNOWN" : (&off_1008A2DC0)[v10];
      memset(__str, 0, 64);
      snprintf(__str, 0x3FuLL, "%0llu.%0llu", v9 / 0x3E8, v9 % 0x3E8);
      sub_10002418C(__p, __str);
      uint64_t v12 = v24 >= 0 ? __p : (void **)__p[0];
      uint64_t v13 = a2 > 4 ? "UNKNOWN" : (&off_1008A2DC0)[a2];
      int v14 = *(unsigned __int8 *)(a1 + 888);
      unsigned int v15 = *(_DWORD *)(a1 + 928);
      uint64_t v16 = v15 > 3 ? "UNKNOWN" : (&off_1008A2DA0)[v15];
      *(_DWORD *)std::string __str = 136448002;
      *(void *)&__str[4] = v11;
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = v10;
      *(_WORD *)&__str[18] = 2082;
      *(void *)&__str[20] = v12;
      *(_WORD *)&__str[28] = 1024;
      *(_DWORD *)&__str[30] = v14;
      *(_WORD *)&__str[34] = 2082;
      *(void *)&__str[36] = v13;
      *(_WORD *)&__str[44] = 1024;
      *(_DWORD *)&__str[46] = a2;
      *(_WORD *)&__str[50] = 2082;
      *(void *)&__str[52] = v16;
      *(_WORD *)&__str[60] = 1024;
      *(_DWORD *)&__str[62] = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Setting new connection state %{public}s(%d), %{public}ssec, %d errs --> %{public}s(%d), Connection Manager %{public}s(%d)",  (uint8_t *)__str,  0x42u);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    *(void *)std::string __str = 0LL;
    sub_1000B0400((uint64_t)__str);
    uint64_t v17 = *(__int16 *)&__str[4];
    *(void *)(a1 + 872) = *(int *)__str;
    *(void *)(a1 + 880) = v17;
    *(_DWORD *)(a1 + 864) = a2;
    *(_BYTE *)(a1 + 88_Block_object_dispose(va, 8) = 0;
    if (a2 != 1)
    {
      if (qword_1008D6198 != -1) {
        dispatch_once(&qword_1008D6198, &stru_1008A2B70);
      }
      sub_1004491EC((uint64_t)off_1008D6190, 0);
      int v18 = *(_DWORD *)(a1 + 864);
      if (v18 == 4)
      {
        unsigned int v21 = (os_log_s *)qword_1008F7620;
        if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string __str = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "autoReconnect caused pausing",  (uint8_t *)__str,  2u);
        }

        sub_1005B493C((os_unfair_lock_s *)a1);
      }

      else if (!v18)
      {
        unint64_t v19 = (os_log_s *)qword_1008F7620;
        if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string __str = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Idle, checking Connection Manager state",  (uint8_t *)__str,  2u);
        }

        int v20 = *(_DWORD *)(a1 + 928);
        if (v20 == 3)
        {
          sub_1005915A8((os_unfair_lock_s *)a1, 0);
        }

        else if (v20 == 1)
        {
          sub_1005915A8((os_unfair_lock_s *)a1, 2u);
        }

        else
        {
          unint64_t v22 = (os_log_s *)qword_1008F7620;
          if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string __str = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Connection Manager state is settled",  (uint8_t *)__str,  2u);
          }
        }
      }
    }
  }

void sub_1005915A8(os_unfair_lock_s *a1, unsigned int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int os_unfair_lock_opaque = a1[232]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque > 3) {
      uint64_t v6 = "UNKNOWN";
    }
    else {
      uint64_t v6 = (&off_1008A2DA0)[os_unfair_lock_opaque];
    }
    if (a2 > 3) {
      uint64_t v7 = "UNKNOWN";
    }
    else {
      uint64_t v7 = (&off_1008A2DA0)[a2];
    }
    unsigned int v8 = a1[216]._os_unfair_lock_opaque;
    if (v8 > 4) {
      unint64_t v9 = "UNKNOWN";
    }
    else {
      unint64_t v9 = (&off_1008A2DC0)[v8];
    }
    int v11 = 136447490;
    uint64_t v12 = v6;
    __int16 v13 = 1024;
    unsigned int v14 = os_unfair_lock_opaque;
    __int16 v15 = 2082;
    uint64_t v16 = v7;
    __int16 v17 = 1024;
    unsigned int v18 = a2;
    __int16 v19 = 2082;
    int v20 = v9;
    __int16 v21 = 1024;
    unsigned int v22 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Setting new Connection Manager State %{public}s(%d) --> %{public}s(%d) Connection %{public}s(%d)",  (uint8_t *)&v11,  0x32u);
  }

  a1[232]._unsigned int os_unfair_lock_opaque = a2;
  if (!a2)
  {
    sub_10043CB4C((uint64_t)&a1[8]);
    unsigned int v10 = &stru_1008A28A0;
    goto LABEL_16;
  }

  if (a2 == 2)
  {
    unsigned int v10 = &stru_1008A2880;
LABEL_16:
    sub_10058C72C(a1, v10);
    return;
  }

  sub_10043CC24((uint64_t)&a1[8]);
}

void sub_10059172C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 896);
  if (v1)
  {
    uint64_t v3 = (os_log_s *)qword_1008F7668;
    if (!os_log_type_enabled((os_log_t)qword_1008F7668, OS_LOG_TYPE_DEFAULT)
      || (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 16LL))(v1),
          int v5 = 136446210,
          uint64_t v6 = v4,
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "destroying %{public}s",  (uint8_t *)&v5,  0xCu),  (uint64_t v1 = *(void *)(a1 + 896)) != 0))
    {
      (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
    }

    *(void *)(a1 + 8sub_100242FAC(v16 - 96) = 0LL;
  }

void sub_100591808(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 552);
  if (v1)
  {
    *(void *)(a1 + 560) = 0LL;
    uint64_t v3 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Canceling Fast connection scan Timer", v5, 2u);
      uint64_t v1 = *(void **)(a1 + 552);
    }

    [v1 invalidate];
    uint64_t v4 = *(void **)(a1 + 552);
    *(void *)(a1 + 552) = 0LL;
  }

void sub_10059189C(uint64_t a1)
{
  uint64_t v1 = *(dispatch_source_s **)(a1 + 1496);
  if (v1)
  {
    uint64_t v3 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "LeConnectionDenyList: fLeConnectionDenyListMaintainTimer destroyed!",  v4,  2u);
      uint64_t v1 = *(dispatch_source_s **)(a1 + 1496);
    }

    dispatch_source_cancel(v1);
    dispatch_release(*(dispatch_object_t *)(a1 + 1496));
    *(void *)(a1 + 14sub_100242FAC(v16 - 96) = 0LL;
  }

uint64_t sub_10059192C(uint64_t result)
{
  *(_BYTE *)(result + 1067) = 0;
  return result;
}

uint64_t sub_100591934()
{
  return 1LL;
}

uint64_t sub_10059193C()
{
  return 1LL;
}

void sub_100591944(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1005919A4;
  v3[3] = &unk_10087EB20;
  void v3[4] = a1;
  sub_1004054B4(v2, v3);
}

void sub_1005919A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(const unsigned __int8 **)(v1 + 384);
  if (v2 != (const unsigned __int8 *)(v1 + 392))
  {
    do
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
      }
      uint64_t v3 = off_1008D5F28;
      uint64_t v4 = sub_100241F94(v2 + 32);
      int v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LODWORD(v3) = sub_1005CE518((uint64_t)v3, v5);

      if ((_DWORD)v3)
      {
        uint64_t v6 = sub_1002E6E9C();
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
        }
        uint64_t v7 = off_1008D5F28;
        unsigned int v8 = sub_100241F94(v2 + 32);
        unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        uint64_t v10 = sub_1005CC198((uint64_t)v7, v9, 0);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 320LL))( v6,  0LL,  1LL,  v10,  1LL);
      }

      else
      {
        int v11 = sub_100241F94(v2 + 32);
        unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v11);
        sub_100591D60(v1, v9);
      }

      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
      }
      uint64_t v12 = off_1008D5F28;
      __int16 v13 = sub_100241F94(v2 + 32);
      unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      LODWORD(v12) = sub_1005D4FEC((uint64_t)v12, v14);

      if ((_DWORD)v12)
      {
        __int16 v15 = sub_100241F94(v2 + 32);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        sub_100591EA8(v1, v16);
      }

      __int16 v17 = (unsigned __int8 *)*((void *)v2 + 1);
      if (v17)
      {
        do
        {
          unsigned int v18 = (const unsigned __int8 **)v17;
          __int16 v17 = *(unsigned __int8 **)v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          unsigned int v18 = (const unsigned __int8 **)*((void *)v2 + 2);
          BOOL v19 = *v18 == v2;
          uint64_t v2 = (const unsigned __int8 *)v18;
        }

        while (!v19);
      }

      uint64_t v2 = (const unsigned __int8 *)v18;
    }

    while (v18 != (const unsigned __int8 **)(v1 + 392));
  }

  int v20 = *(const unsigned __int8 **)(v1 + 336);
  if (v20 == (const unsigned __int8 *)(v1 + 344))
  {
    char v21 = 0;
  }

  else
  {
    char v21 = 0;
    while (1)
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
      }
      unsigned int v22 = off_1008D5F28;
      uint64_t v23 = sub_100241F94(v20 + 25);
      char v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      BOOL v25 = sub_1005D733C((uint64_t)v22, v24);

      if (v25) {
        break;
      }
      BOOL v26 = (unsigned __int8 *)*((void *)v20 + 1);
      if (v26)
      {
        do
        {
          uint64_t v27 = (const unsigned __int8 **)v26;
          BOOL v26 = *(unsigned __int8 **)v26;
        }

        while (v26);
      }

      else
      {
        do
        {
          uint64_t v27 = (const unsigned __int8 **)*((void *)v20 + 2);
          BOOL v19 = *v27 == v20;
          int v20 = (const unsigned __int8 *)v27;
        }

        while (!v19);
      }

      v21 |= v25;
      int v20 = (const unsigned __int8 *)v27;
    }

    char v21 = 1;
  }

void sub_100591D34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100591D60(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (sub_1005924C4((uint64_t)v2, v2))
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
    }
    if (sub_1005D4090((uint64_t)off_1008D5F28, v2))
    {
      uint64_t v3 = sub_1002E6E9C();
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
      }
      uint64_t v4 = sub_1005CC198((uint64_t)off_1008D5F28, v2, 0);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 320LL))( v3,  0LL,  1LL,  v4,  1LL);
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
      }
      sub_1005D4008((uint64_t)off_1008D5F28, v2, 0);
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
      }
      sub_1005D4118((uint64_t)off_1008D5F28, v2);
    }
  }

  return 0LL;
}

void sub_100591E98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100591EA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1002E6E00();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 8LL))(v4) & 1) == 0)
  {
    uint64_t v5 = sub_1002E6E00();
  }

  unsigned int v14 = 0LL;
  if (!v3)
  {
    int v11 = (os_log_s *)qword_1008F7620;
    if (!os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    *(_WORD *)__int128 buf = 0;
    uint64_t v12 = "disableHIDLatencyStats -- device is NULL";
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v12, buf, 2u);
    goto LABEL_21;
  }

  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
  }
  if (!sub_1005D4FEC((uint64_t)off_1008D5F28, v3))
  {
    int v11 = (os_log_s *)qword_1008F7620;
    if (!os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    *(_WORD *)__int128 buf = 0;
    uint64_t v12 = "disableHIDLatencyStats -- does not have HID service";
    goto LABEL_20;
  }

  sub_100241F90(buf, v3);
  if (!sub_100599890(a1, buf, &v14))
  {
    int v11 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      uint64_t v12 = "disableHIDLatencyStats -- cannot get connection handle";
      goto LABEL_20;
    }

void sub_10059210C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100592134(id a1, NSError *a2)
{
  id v3 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    uint64_t v5 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "enableSystemWakesForUpdate returned %@",  (uint8_t *)&v4,  0xCu);
  }

uint64_t sub_1005921D4(uint64_t a1, int a2)
{
  uint64_t v13 = *(void *)(a1 + 1545);
  int v2 = BYTE4(v13);
  if (a2)
  {
    BYTE4(v13) |= 4u;
    if ((v2 | 4) != v2)
    {
      char v12 = 0;
      sub_100242CA4(&v12);
      uint64_t v9 = sub_100599264;
      goto LABEL_7;
    }

    return 0LL;
  }

  BYTE4(v13) &= ~4u;
  if ((v2 & 0xFFFFFFFB) == v2) {
    return 0LL;
  }
  char v12 = 0;
  sub_100242CA4(&v12);
  uint64_t v9 = sub_10059932C;
LABEL_7:
  uint64_t v10 = sub_1001214B4(162, (uint64_t)v9, v3, v4, v5, v6, v7, v8, (uint64_t)&v13);
  if ((_DWORD)v10 && os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
    sub_1006978FC();
  }
  sub_100242CD8(&v12);
  return v10;
}

void sub_1005922E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100592304(uint64_t a1)
{
  uint64_t v1 = a1 - 16;
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1005919A4;
  v3[3] = &unk_10087EB20;
  void v3[4] = v1;
  sub_1004054B4(v2, v3);
}

uint64_t sub_100592364(uint64_t a1, void *a2)
{
  id v2 = a2;
  sub_1002E6E9C();
  unsigned int v3 = sub_1002D0A34();
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
  }
  uint64_t v4 = sub_1002E6E9C();
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
  }
  uint64_t v5 = sub_1005CC198((uint64_t)off_1008D5F28, v2, 0);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 320LL))( v4,  1LL,  1LL,  v5,  1LL);
  if (!(_DWORD)v6)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
    }
    sub_1005D4008((uint64_t)off_1008D5F28, v2, 1);
LABEL_13:
    uint64_t v6 = 0LL;
    goto LABEL_14;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
    sub_10069795C();
  }
LABEL_14:

  return v6;
}

void sub_1005924B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t sub_1005924C4(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
  }
  int v3 = sub_1005CE2FC((uint64_t)off_1008D5F28, v2);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
  }
  int v4 = sub_1005CE2FC((uint64_t)off_1008D5F28, v2);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
  }
  int v5 = sub_1005CE2FC((uint64_t)off_1008D5F28, v2);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
  }
  uint64_t v6 = off_1008D5F28;
  sub_10002418C(__p, "BluetoothTVRemote");
  int v7 = sub_1005CE5A8((uint64_t)v6, v2, (uint64_t)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = sub_1002E6E9C();
  if (sub_1002D0A04(v8))
  {
    uint64_t v9 = sub_1002E6E00();
    if ((((*(unsigned int (**)(uint64_t))(*(void *)v9 + 472LL))(v9) | v7) & 1) != 0)
    {
      unint64_t v10 = 1LL;
    }

    else
    {
      unint64_t v10 = 1LL;
      if (v3 != 19 && v3 != 196608 && v4 != 21 && v5 != 655360)
      {
        uint64_t v12 = sub_1002E8D94();
        if (((*(uint64_t (**)(uint64_t, id))(*(void *)v12 + 512LL))(v12, v2) & 1) == 0)
        {
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
          }
          uint64_t v13 = off_1008D5F28;
          sub_10002418C(v14, "_HID_DEVICE_");
          unint64_t v10 = sub_1005CE5A8((uint64_t)v13, v2, (uint64_t)v14);
          if (v15 < 0) {
            operator delete(v14[0]);
          }
        }
      }
    }
  }

  else
  {
    unint64_t v10 = 0LL;
  }

  return v10;
}

void sub_1005926D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100592720(uint64_t a1, const unsigned __int8 **a2)
{
  int v4 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Multiple devices addresses changed", buf, 2u);
  }

  uint64_t v8 = *a2;
  uint64_t v6 = a2 + 1;
  int v7 = v8;
  if (v8 != (const unsigned __int8 *)v6)
  {
    *(void *)&__int128 v5 = 136446466LL;
    __int128 v22 = v5;
    do
    {
      uint64_t v9 = (os_log_s *)qword_1008F7620;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
      {
        *(_OWORD *)__int128 buf = 0u;
        memset(v30, 0, sizeof(v30));
        uuid_unparse_upper(v7 + 25, (char *)buf);
        sub_10002418C(__p, (char *)buf);
        int v10 = v24;
        int v11 = (void **)__p[0];
        int v12 = sub_100592970((void *)a1, (unsigned __int8 *)v7 + 25);
        uint64_t v13 = __p;
        if (v10 < 0) {
          uint64_t v13 = v11;
        }
        *(_DWORD *)BOOL v25 = v22;
        BOOL v26 = v13;
        unsigned int v14 = "NO";
        if (v12) {
          unsigned int v14 = "YES";
        }
        __int16 v27 = 2082;
        id v28 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Device %{public}s addresses changed connecting:%{public}s",  v25,  0x16u);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
      }

      if (sub_100592970((void *)a1, (unsigned __int8 *)v7 + 25))
      {
        char v15 = *(void **)(a1 + 784);
        uint64_t v16 = sub_100241F94(v7 + 25);
        char v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        [v15 addObject:v17];
      }

      unsigned int v18 = (unsigned __int8 *)*((void *)v7 + 1);
      if (v18)
      {
        do
        {
          BOOL v19 = (const unsigned __int8 **)v18;
          unsigned int v18 = *(unsigned __int8 **)v18;
        }

        while (v18);
      }

      else
      {
        do
        {
          BOOL v19 = (const unsigned __int8 **)*((void *)v7 + 2);
          BOOL v20 = *v19 == v7;
          int v7 = (const unsigned __int8 *)v19;
        }

        while (!v20);
      }

      int v7 = (const unsigned __int8 *)v19;
    }

    while (v19 != v6);
  }

  if (objc_msgSend(*(id *)(a1 + 784), "count", v22)) {
    sub_100590B30(a1, 0);
  }
  return 0LL;
}

void sub_100592940( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100592970(void *a1, unsigned __int8 *a2)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, (uint64_t)(a1 + 15));
  int v4 = (void *)a1[94];
  __int128 v5 = sub_100241F94(a2);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  LOBYTE(v4) = [v4 containsObject:v6];

  if ((v4 & 1) != 0 {
    || (int v7 = (void *)a1[95],
  }
        uint64_t v8 = sub_100241F94(a2),
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8),
        LOBYTE(nullsub_63(v5 - 80, v7) = [v7 containsObject:v9],
        v9,
        (v7 & 1) != 0))
  {
LABEL_4:
    uint64_t v10 = 1LL;
  }

  else
  {
    int v12 = (void *)a1[96];
    uint64_t v13 = sub_100241F94(a2);
    unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    uint64_t v10 = (uint64_t)[v12 containsObject:v14];
  }

  sub_100242FAC((uint64_t)v15);
  return v10;
}

void sub_100592A5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100242FAC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100592A90(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100592AF0;
  v3[3] = &unk_10087EB20;
  void v3[4] = a1;
  sub_100405384(v2, v3);
}

void sub_100592AF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(const unsigned __int8 **)(v1 + 384);
  if (v2 != (const unsigned __int8 *)(v1 + 392))
  {
    do
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
      }
      int v3 = off_1008D5F28;
      int v4 = sub_100241F94(v2 + 32);
      __int128 v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LODWORD(v3) = sub_1005CE518((uint64_t)v3, v5);

      if ((_DWORD)v3)
      {
        uint64_t v6 = sub_1002E6E9C();
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
        }
        int v7 = off_1008D5F28;
        uint64_t v8 = sub_100241F94(v2 + 32);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        uint64_t v10 = sub_1005CC198((uint64_t)v7, v9, 0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 320LL))( v6,  1LL,  1LL,  v10,  1LL);
      }

      else
      {
        int v11 = sub_100241F94(v2 + 32);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v11);
        sub_100592364(v1, v9);
      }

      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
      }
      int v12 = off_1008D5F28;
      uint64_t v13 = sub_100241F94(v2 + 32);
      unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      LODWORD(v12) = sub_1005D4FEC((uint64_t)v12, v14);

      if ((_DWORD)v12)
      {
        char v15 = sub_100241F94(v2 + 32);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        sub_100592DA8(v1, v16, 0);
      }

      char v17 = (unsigned __int8 *)*((void *)v2 + 1);
      if (v17)
      {
        do
        {
          unsigned int v18 = (const unsigned __int8 **)v17;
          char v17 = *(unsigned __int8 **)v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          unsigned int v18 = (const unsigned __int8 **)*((void *)v2 + 2);
          BOOL v19 = *v18 == v2;
          uint64_t v2 = (const unsigned __int8 *)v18;
        }

        while (!v19);
      }

      uint64_t v2 = (const unsigned __int8 *)v18;
    }

    while (v18 != (const unsigned __int8 **)(v1 + 392));
  }

  uint64_t v20 = sub_100404FE8();
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  void v23[2] = sub_10059AB34;
  v23[3] = &unk_10087EB20;
  v23[4] = v1;
  sub_100405384(v20, v23);
  uint64_t v21 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v21 + 344LL))(v21) & 1) != 0)
  {
    uint64_t v22 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 952LL))(v22))
    {
      if (*(_BYTE *)(v1 + 633))
      {
        sub_1005921D4(v1, 1);
        if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEBUG)) {
          sub_1006979BC();
        }
      }
    }
  }

void sub_100592D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100592DA8(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = sub_1002E6E00();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 8LL))(v6) & 1) == 0)
  {
    uint64_t v7 = sub_1002E6E00();
  }

  unsigned int v18 = 0LL;
  if (!v5)
  {
    unsigned int v14 = (os_log_s *)qword_1008F7620;
    if (!os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    *(_WORD *)__int128 buf = 0;
    char v15 = "enableHIDLatencyStats -- device is NULL";
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 2u);
    goto LABEL_22;
  }

  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
  }
  if (!sub_1005D4FEC((uint64_t)off_1008D5F28, v5))
  {
    unsigned int v14 = (os_log_s *)qword_1008F7620;
    if (!os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    *(_WORD *)__int128 buf = 0;
    char v15 = "enableHIDLatencyStats -- does not have HID service";
    goto LABEL_21;
  }

  sub_100241F90(buf, v5);
  if (sub_100599890(a1, buf, &v18))
  {
    uint64_t v8 = v18;
    uint64_t v9 = sub_10012D7D4(v18);
    if (a3)
    {
      uint64_t v10 = sub_1002E8D94();
      (*(void (**)(uint64_t, unsigned __int16 *, uint64_t))(*(void *)v10 + 536LL))(v10, v8, v9);
    }

    sub_100241F90(buf, v5);
    uint64_t v11 = sub_10059A848(a1, buf);
    uint64_t v12 = sub_1002E8D94();
    (*(void (**)(uint64_t, uint64_t, unsigned __int16 *, uint64_t, uint64_t))(*(void *)v12 + 544LL))( v12,  v9,  v8,  2LL,  v11);
    uint64_t v13 = sub_1002E6E9C();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 1032LL))( v13,  v9,  1LL,  1LL))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR))
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
        }
        sub_1005CC0D4((uint64_t)off_1008D5F28, v5, (uint64_t)buf);
        sub_100697A1C();
      }

      goto LABEL_22;
    }

    if (a3) {
      sub_100592364(a1, v5);
    }
LABEL_25:
    uint64_t v16 = 0LL;
    goto LABEL_26;
  }

  unsigned int v14 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    char v15 = "enableHIDLatencyStats -- cannot get connection handle";
    goto LABEL_21;
  }

void sub_100593068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100593098(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10059AB34;
  v3[3] = &unk_10087EB20;
  void v3[4] = a1;
  sub_100405384(v2, v3);
}

void sub_1005930F8(uint64_t a1)
{
  uint64_t v1 = a1 - 16;
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100592AF0;
  v3[3] = &unk_10087EB20;
  void v3[4] = v1;
  sub_100405384(v2, v3);
}

void sub_100593158(uint64_t a1, unint64_t a2)
{
  unint64_t v22 = a2;
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  if (sub_100593548(a1, a2, uu))
  {
    int v4 = sub_100241F94(uu);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
    }
    if (sub_1005CE518((uint64_t)off_1008D5F28, v5))
    {
      if (!*(_BYTE *)(a1 + 632))
      {
        uint64_t v6 = sub_1002E6BF0();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 344LL))(v6))
        {
          uint64_t v7 = sub_1002E6BF0();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 952LL))(v7))
          {
            if (*(_BYTE *)(a1 + 633))
            {
              uint64_t v8 = (os_log_s *)qword_1008F7620;
              if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)__int128 buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "setMagnetLatencyForLowPowerMode: Low power mode enabled; Requesting subrating on magnet link",
                  buf,
                  2u);
              }

              if (qword_1008D5F10 != -1) {
                dispatch_once(&qword_1008D5F10, &stru_1008A2B10);
              }
              sub_100593618((uint64_t)off_1008D5F08, v5, -11, 1);
            }

            else
            {
              uint64_t v9 = *(void **)(a1 + 536);
              if (v9)
              {
                uint64_t v10 = (uint64_t **)(a1 + 528);
                uint64_t v11 = a1 + 536;
                do
                {
                  unint64_t v12 = v9[4];
                  BOOL v13 = v12 >= a2;
                  if (v12 >= a2) {
                    unsigned int v14 = v9;
                  }
                  else {
                    unsigned int v14 = v9 + 1;
                  }
                  if (v13) {
                    uint64_t v11 = (uint64_t)v9;
                  }
                  uint64_t v9 = (void *)*v14;
                }

                while (*v14);
                if (v11 != a1 + 536 && *(void *)(v11 + 32) <= a2)
                {
                  char v15 = (os_log_s *)qword_1008F7620;
                  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v23 = &v22;
                    int v16 = *((unsigned __int16 *)sub_1005BC978(v10, &v22, (uint64_t)&unk_1006C2518, (uint64_t **)&v23) + 23);
                    uint64_t v23 = &v22;
                    int v17 = *((unsigned __int16 *)sub_1005BC978(v10, &v22, (uint64_t)&unk_1006C2518, (uint64_t **)&v23) + 21);
                    uint64_t v23 = &v22;
                    int v18 = *((unsigned __int16 *)sub_1005BC978(v10, &v22, (uint64_t)&unk_1006C2518, (uint64_t **)&v23) + 24);
                    uint64_t v23 = &v22;
                    int v19 = *((unsigned __int16 *)sub_1005BC978(v10, &v22, (uint64_t)&unk_1006C2518, (uint64_t **)&v23) + 22);
                    uint64_t v23 = &v22;
                    int v20 = *((_DWORD *)sub_1005BC978(v10, &v22, (uint64_t)&unk_1006C2518, (uint64_t **)&v23) + 13);
                    *(_DWORD *)__int128 buf = 134219264;
                    *(void *)&uint8_t buf[4] = a2;
                    __int16 v25 = 1024;
                    int v26 = v16;
                    __int16 v27 = 1024;
                    int v28 = v17;
                    __int16 v29 = 1024;
                    int v30 = v18;
                    __int16 v31 = 1024;
                    int v32 = v19;
                    __int16 v33 = 1024;
                    int v34 = v20;
                    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "setMagnetLatencyForLowPowerMode: Low power mode not enabled. Found configured parameters for handl e %p. Subrate factor:%d Peripheral latency:%d Continuation Number=%d Supervision Timeout=%d. Subrating Status: %d",  buf,  0x2Au);
                  }

                  *(void *)__int128 buf = &v22;
                  if (*((_DWORD *)sub_1005BC978(v10, &v22, (uint64_t)&unk_1006C2518, (uint64_t **)buf) + 13))
                  {
                    uint64_t v21 = (os_log_s *)qword_1008F7620;
                    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)__int128 buf = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "setMagnetLatencyForLowPowerMode: Low power mode disabled while LE Connection is subrated. Exitin g subrating on magnet link",  buf,  2u);
                    }

                    if (qword_1008D5F10 != -1) {
                      dispatch_once(&qword_1008D5F10, &stru_1008A2B10);
                    }
                    sub_100593618((uint64_t)off_1008D5F08, v5, -2, 1);
                  }
                }
              }
            }
          }
        }
      }
    }
  }

void sub_100593528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100593548(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 120);
  uint64_t v6 = *(const unsigned __int8 **)(a1 + 384);
  if (v6 == (const unsigned __int8 *)(a1 + 392))
  {
LABEL_9:
    uint64_t v10 = 0LL;
  }

  else
  {
    while (*((void *)v6 + 6) != a2)
    {
      uint64_t v7 = (unsigned __int8 *)*((void *)v6 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = (const unsigned __int8 **)v7;
          uint64_t v7 = *(unsigned __int8 **)v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (const unsigned __int8 **)*((void *)v6 + 2);
          BOOL v9 = *v8 == v6;
          uint64_t v6 = (const unsigned __int8 *)v8;
        }

        while (!v9);
      }

      uint64_t v6 = (const unsigned __int8 *)v8;
    }

    uuid_copy(a3, v6 + 32);
    uint64_t v10 = 1LL;
  }

  sub_100242FAC((uint64_t)v12);
  return v10;
}

void sub_100593604( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100593618(uint64_t a1, void *a2, int a3, int a4)
{
  id v7 = a2;
  unint64_t v87 = 0LL;
  v79[0] = 0LL;
  v79[1] = 0LL;
  sub_100242F28((uint64_t)v79, a1 + 120);
  uint64_t v8 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v9 = sub_10028D0AC(a3);
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&_BYTE buf[12] = 2114;
    *(void *)int v90 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "setConnectionLatency %{public}s to device %{public}@",  buf,  0x16u);
  }

  sub_100241F90(buf, v7);
  uint64_t v10 = sub_1001FDB10(a1 + 384, buf);
  if (a1 + 392 == v10)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
      sub_100697A64();
    }
    uint64_t v11 = 3LL;
  }

  else
  {
    int v85 = 0;
    int v86 = 0;
    int v83 = 0;
    int v84 = 0;
    int v82 = 0;
    unsigned __int16 v81 = 0;
    __int16 v80 = 0;
    unint64_t v87 = *(void *)(v10 + 48);
    uint64_t v11 = sub_100598F90( (_WORD *)a1,  a3,  (__int16 *)&v86 + 1,  (__int16 *)&v86,  (__int16 *)&v84,  (__int16 *)&v84 + 1,  (_WORD *)&v85 + 1,  (__int16 *)&v85,  (_WORD *)&v83 + 1,  &v83,  (_WORD *)&v82 + 1,  &v82,  &v81,  (_BYTE *)&v80 + 1,  &v80);
    if ((_DWORD)v11) {
      goto LABEL_97;
    }
    if (a3 == -2)
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
      }
      if (!sub_1005CE518((uint64_t)off_1008D5F28, v7))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
          sub_100697C5C();
        }
        goto LABEL_93;
      }

      uint64_t v12 = sub_1002E6E9C();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 2720LL))(v12))
      {
        BOOL v13 = *(void **)(a1 + 536);
        if (v13)
        {
          uint64_t v14 = a1 + 536;
          do
          {
            unint64_t v15 = v13[4];
            BOOL v16 = v15 >= v87;
            if (v15 >= v87) {
              int v17 = v13;
            }
            else {
              int v17 = v13 + 1;
            }
            if (v16) {
              uint64_t v14 = (uint64_t)v13;
            }
            BOOL v13 = (void *)*v17;
          }

          while (*v17);
          if (v14 != a1 + 536 && v87 >= *(void *)(v14 + 32))
          {
            *(void *)__int128 buf = &v87;
            if (*((_DWORD *)sub_1005BC978((uint64_t **)(a1 + 528), &v87, (uint64_t)&unk_1006C2518, (uint64_t **)buf) + 13) == 2)
            {
              int v18 = (os_log_s *)qword_1008F7620;
              if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138543618;
                *(void *)&uint8_t buf[4] = v7;
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)int v90 = 1;
                _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Magnet link to %{public}@ is currently subrated. Switching to un-subrated link without parameter u pdate (using a subrate factor of %d).",  buf,  0x12u);
              }

              int v19 = 0;
              int v20 = 1;
              __int16 v80 = 256;
              goto LABEL_62;
            }
          }
        }

        if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEBUG)) {
          sub_100697B9C();
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEBUG))
      {
        sub_100697BFC();
      }
    }

    int v19 = v80;
    if (!(_BYTE)v80)
    {
      int v20 = 1;
LABEL_62:
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
      }
      int v45 = sub_1005CE518((uint64_t)off_1008D5F28, v7);
      int v46 = HIBYTE(v80);
      if (HIBYTE(v80)) {
        int v47 = v45;
      }
      else {
        int v47 = 0;
      }
      if (v47 == 1)
      {
        uint64_t v48 = sub_1002E6E9C();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v48 + 2720LL))(v48))
        {
          int v77 = v19;
          char v49 = (os_log_s *)qword_1008F7620;
          if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v46;
            _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_INFO,  "Enable Subrating set to %d. This platform supports connection subrating.",  buf,  8u);
          }

          uint64_t v50 = HIWORD(v83);
          uint64_t v51 = (unsigned __int16)v83;
          uint64_t v52 = HIWORD(v82);
          uint64_t v53 = (unsigned __int16)v82;
          int v54 = v81;
          int v75 = (uint64_t **)(a1 + 504);
          char v55 = *(void **)(a1 + 512);
          if (v55)
          {
            unint64_t v56 = v87;
            uint64_t v57 = a1 + 512;
            do
            {
              unint64_t v58 = v55[4];
              BOOL v59 = v58 >= v87;
              if (v58 >= v87) {
                uint64_t v60 = v55;
              }
              else {
                uint64_t v60 = v55 + 1;
              }
              if (v59) {
                uint64_t v57 = (uint64_t)v55;
              }
              char v55 = (void *)*v60;
            }

            while (*v60);
            if (v57 != a1 + 512 && v87 >= *(void *)(v57 + 32))
            {
              int v73 = v81;
              int v61 = (os_log_s *)qword_1008F7620;
              if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 134217984;
                *(void *)&uint8_t buf[4] = v56;
                _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "Warning: Already pending on sending connection subrating parameters for handle %p",  buf,  0xCu);
              }

              sub_10020166C((uint64_t)v75, &v87);
              int v54 = v73;
            }
          }

          v88[0] = 0LL;
          v88[1] = 0LL;
          sub_100241F90(v88, v7);
          uint64_t v62 = v53;
          uint64_t v63 = v52;
          uint64_t v64 = v51;
          uint64_t v65 = v50;
          if (v20 && sub_1005996B4(a1, (unsigned __int8 *)v88))
          {
            uint64_t v66 = (os_log_s *)qword_1008F7620;
            if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138544642;
              *(void *)&uint8_t buf[4] = v7;
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)int v90 = v65;
              *(_WORD *)&v90[4] = 1024;
              *(_DWORD *)&v90[6] = v64;
              *(_WORD *)&v90[10] = 1024;
              *(_DWORD *)int v91 = v63;
              *(_WORD *)&v91[4] = 1024;
              int v92 = v62;
              __int16 v93 = 1024;
              int v94 = v54;
              _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "No locally initiated connection parameter update in progress and link is ready. Proceeding with subratin g mode for device %{public}@ subrateMin:%d subrateMax:%d maxLatency:%d continueationNumber=%d supervisionTimeout=%d",  buf,  0x2Au);
            }

            sub_100242F54((uint64_t)v79);
            uint64_t v11 = sub_1005993F4(a1, v87, (v65 << 16) | (v64 << 32) | v63 | (v62 << 48), v54);
            goto LABEL_97;
          }

          *(void *)__int128 buf = &v87;
          int v67 = sub_1005BD44C(v75, &v87, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
          v67[5] = (uint64_t *)((v50 << 16) | (v64 << 32) | v63 | (v62 << 48));
          *((_WORD *)v67 + 24) = v54;
          __int16 v68 = (os_log_s *)qword_1008F7620;
          uint64_t v11 = 0LL;
          if (!os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_97;
          }
          BOOL v69 = sub_1005996B4(a1, (unsigned __int8 *)v88);
          *(_DWORD *)__int128 buf = 138543874;
          *(void *)&uint8_t buf[4] = v7;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)int v90 = v77;
          *(_WORD *)&v90[4] = 1024;
          *(_DWORD *)&v90[6] = v69;
          _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "For device %{public}@ - Locally initiated connection parameter update in progress: %d. LE Link Ready: %d.",  buf,  0x18u);
LABEL_96:
          uint64_t v11 = 0LL;
          goto LABEL_97;
        }
      }

      if (a3 != -11) {
        goto LABEL_96;
      }
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
        sub_100697AC8();
      }
LABEL_93:
      uint64_t v11 = 17LL;
      goto LABEL_97;
    }

    if (a4)
    {
      if (!sub_1001B9B0C(v87))
      {
LABEL_61:
        int v20 = 0;
        goto LABEL_62;
      }
    }

    else if (sub_1001B9B0C(v87))
    {
      goto LABEL_61;
    }

    uint64_t v21 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v22 = sub_10028D0AC(a3);
      *(_DWORD *)__int128 buf = 136446466;
      *(void *)&uint8_t buf[4] = v22;
      *(_WORD *)&_BYTE buf[12] = 2114;
      *(void *)int v90 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Setting connection latency to %{public}s for device %{public}@",  buf,  0x16u);
    }

    sub_100241F90(buf, v7);
    int v76 = v19;
    if (a1 + 848 == sub_1005BD2B0(a1 + 840, buf))
    {
      int v35 = 0;
      uint64_t v33 = 0x60006001E0006LL;
      __int16 v34 = 4;
      int v32 = 2;
    }

    else
    {
      sub_100241F90(buf, v7);
      v88[0] = buf;
      if (*((_DWORD *)sub_1005BD328((uint64_t **)(a1 + 840), buf, (uint64_t)&unk_1006C2518, v88) + 11) != 2)
      {
        uint64_t v23 = (os_log_s *)qword_1008F7620;
        if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_FAULT)) {
          sub_100697B2C(v23, v24, v25, v26, v27, v28, v29, v30);
        }
      }

      sub_100241F90(buf, v7);
      v88[0] = buf;
      __int16 v31 = sub_1005BD328((uint64_t **)(a1 + 840), buf, (uint64_t)&unk_1006C2518, v88);
      int v32 = *((_DWORD *)v31 + 11);
      uint64_t v33 = *(uint64_t *)((char *)v31 + 50);
      __int16 v34 = *((_WORD *)v31 + 30);
      int v35 = *((_DWORD *)v31 + 19);
    }

    unsigned int v36 = HIWORD(v86);
    unsigned int v74 = (unsigned __int16)v86;
    unsigned int v71 = HIWORD(v85);
    int v72 = (unsigned __int16)v85;
    char v78 = 0;
    sub_100242CA4(&v78);
    sub_100241F90(buf, v7);
    v88[0] = buf;
    uint64_t v37 = sub_1005BD328((uint64_t **)(a1 + 840), buf, (uint64_t)&unk_1006C2518, v88);
    *((_DWORD *)v37 + 11) = v32;
    *((_WORD *)v37 + 24) = 256;
    *(uint64_t *)((char *)v37 + 50) = v33;
    *((_WORD *)v37 + 29) = v71;
    *((_WORD *)v37 + 30) = v34;
    *((_WORD *)v37 + 31) = v72;
    *((float *)v37 + 16) = (float)v36;
    *((float *)v37 + 17) = (float)v74;
    *((float *)v37 + 1_Block_object_dispose(va, 8) = (float)v74;
    *((_DWORD *)v37 + 19) = v35;
    uint64_t v38 = (os_log_s *)qword_1008F7620;
    BOOL v39 = os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT);
    int v40 = (unsigned __int16)v84;
    int v41 = HIWORD(v84);
    if (v39)
    {
      *(_DWORD *)__int128 buf = 138544898;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)int v90 = v36;
      *(_WORD *)&v90[4] = 1024;
      *(_DWORD *)&v90[6] = v74;
      *(_WORD *)&v90[10] = 1024;
      *(_DWORD *)int v91 = v71;
      *(_WORD *)&v91[4] = 1024;
      int v92 = (unsigned __int16)v84;
      __int16 v93 = 1024;
      int v94 = HIWORD(v84);
      __int16 v95 = 1024;
      int v96 = v72;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Trying to update connection parameters for device %{public}@ minInterval:%d maxInterval:%d peripheralLatency :%d minCE=%d maxCE=%d timeout:%d",  buf,  0x30u);
    }

    int v19 = v76;
    int v42 = sub_1001BD58C( v87,  (int)((double)v36 / 1.25),  (int)((double)v74 / 1.25),  v71,  (52429 * v72) >> 19,  v40,  v41);
    sub_100242CD0(&v78);
    if (!v42)
    {
      if (v74 == 1000) {
        goto LABEL_59;
      }
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
      }
      if (!sub_1005D2878((uint64_t)off_1008D5F28, v7))
      {
LABEL_59:
        uint64_t v44 = sub_1002E6E9C();
        (*(void (**)(uint64_t, unint64_t, BOOL, void))(*(void *)v44 + 1048LL))( v44,  v87,  v74 == 1000,  0LL);
      }

      sub_100242CD8(&v78);
      goto LABEL_61;
    }

    if (v42 != 4170)
    {
      uint64_t v43 = (os_log_s *)qword_1008F7620;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 67110144;
        *(_DWORD *)&uint8_t buf[4] = v36;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v74;
        *(_WORD *)int v90 = 1024;
        *(_DWORD *)&v90[2] = v71;
        *(_WORD *)&v90[6] = 1024;
        *(_DWORD *)&v90[8] = v72;
        *(_WORD *)int v91 = 1024;
        *(_DWORD *)&v91[2] = v42;
        _os_log_error_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "Failed to update connection parameters with interval=(%d/%d) peripheralLatency=%d, timeout=%d, status=%{bluetooth:OI_STATUS}u",  buf,  0x20u);
      }
    }

    sub_100242CD8(&v78);
    uint64_t v11 = 914LL;
  }

void sub_10059409C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  _Unwind_Resume(a1);
}

void sub_100594108(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100594170;
  v5[3] = &unk_1008800D8;
  void v5[4] = a1;
  char v6 = a2;
  sub_100405384(v4, v5);
}

void sub_100594170(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  int v3 = *(unsigned __int8 *)(v1 + 633);
  if (v2 != v3)
  {
    id v5 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      v15[0] = 67109376;
      v15[1] = v3;
      __int16 v16 = 1024;
      int v17 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Low Power Mode has changed from %d to %d",  (uint8_t *)v15,  0xEu);
      LOBYTE(v2) = *(_BYTE *)(a1 + 40);
    }

    *(_BYTE *)(v1 + 633) = v2;
    uint64_t v6 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 952LL))(v6))
    {
      uint64_t v7 = sub_1002E6BF0();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 344LL))(v7))
      {
        uint64_t v8 = *(const unsigned __int8 **)(v1 + 384);
        if (v8 != (const unsigned __int8 *)(v1 + 392))
        {
          do
          {
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
            }
            BOOL v9 = off_1008D5F28;
            uint64_t v10 = sub_100241F94(v8 + 32);
            uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
            LODWORD(v9) = sub_1005CE518((uint64_t)v9, v11);

            if ((_DWORD)v9) {
              sub_100593158(v1, *((void *)v8 + 6));
            }
            uint64_t v12 = (unsigned __int8 *)*((void *)v8 + 1);
            if (v12)
            {
              do
              {
                BOOL v13 = (const unsigned __int8 **)v12;
                uint64_t v12 = *(unsigned __int8 **)v12;
              }

              while (v12);
            }

            else
            {
              do
              {
                BOOL v13 = (const unsigned __int8 **)*((void *)v8 + 2);
                BOOL v14 = *v13 == v8;
                uint64_t v8 = (const unsigned __int8 *)v13;
              }

              while (!v14);
            }

            uint64_t v8 = (const unsigned __int8 *)v13;
          }

          while (v13 != (const unsigned __int8 **)(v1 + 392));
        }
      }
    }
  }

void sub_100594338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100594350(uint64_t a1, char a2)
{
}

void sub_100594370(uint64_t a1, __int128 *a2)
{
  __int128 v2 = a2[1];
  __int128 v5 = *a2;
  __int128 v6 = v2;
  uint64_t v3 = sub_100404FE8();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1005943F8;
  v4[3] = &unk_10087FA48;
  sub_100405384(v3, v4);
}

void sub_1005943F8(uint64_t a1)
{
  uint64_t v3 = a1 + 52;
  uint64_t v2 = *(void *)(a1 + 52);
  unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
  __int128 v5 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEBUG))
  {
    int v22 = *(unsigned __int16 *)(a1 + 42);
    int v23 = *(char *)(a1 + 46);
    int v24 = *(char *)(a1 + 45);
    int v25 = *(char *)(a1 + 44);
    *(_DWORD *)__int128 buf = 68159746;
    *(_DWORD *)&uint8_t buf[4] = 43;
    LOWORD(v2_Block_object_dispose(va, 8) = 2096;
    *(void *)((char *)&v28 + 2) = a1 + 32;
    WORD5(v2_Block_object_dispose(va, 8) = 1024;
    HIDWORD(v2_Block_object_dispose(va, 8) = v4;
    LOWORD(v29) = 1024;
    *(_DWORD *)((char *)&v29 + 2) = v22;
    HIWORD(v29) = 1040;
    LODWORD(v30) = 8;
    WORD2(v30) = 2096;
    *(void *)((char *)&v30 + 6) = v3;
    HIWORD(v30) = 1024;
    LODWORD(v31) = v23;
    WORD2(v31) = 1024;
    *(_DWORD *)((char *)&v31 + 6) = v24;
    WORD5(v31) = 1024;
    HIDWORD(v31) = v25;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "aopRssiDetectEvent: AOPBTConnectionRSSIDetect entry, entry_buff:%.43P len:%d handle:0x%2X rssi:%.8P rssi:%d:%d:%d",  buf,  0x40u);
    __int128 v5 = (os_log_s *)qword_1008F7620;
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    sub_100697D4C(v5, v6, v7, v8, v9, v10, v11, v12);
    if (v4)
    {
LABEL_5:
      if (v4 < 0x20)
      {
        BOOL v13 = sub_10012D6D8(*(unsigned __int16 *)(a1 + 42));
        uint64_t v26 = v2;
        char v14 = *(_BYTE *)(a1 + 44);
        char v15 = *(_BYTE *)(a1 + 45);
        uint64_t v16 = 1LL;
        int v17 = (uint8_t *)&v26;
        char v18 = *(_BYTE *)(a1 + 46);
        do
        {
          if ((char)buf[v16 - 8] < (char)v2)
          {
            LOBYTE(v2) = buf[v16 - 8];
            int v17 = &buf[v16 - 8];
          }

          ++v16;
        }

        while (v16 != 8);
        char v19 = *(_BYTE *)(a1 + 51);
        if (qword_1008D5F10 != -1) {
          dispatch_once(&qword_1008D5F10, &stru_1008A2B10);
        }
        uint8_t v20 = *v17;
        uint64_t v21 = sub_100404FE8();
        *(void *)__int128 buf = _NSConcreteStackBlock;
        *(void *)&__int128 v28 = 3221225472LL;
        *((void *)&v28 + 1) = sub_1005B5AE0;
        uint64_t v29 = &unk_1008A2840;
        __int128 v31 = 0uLL;
        *(void *)&__int128 v30 = v13;
        *((void *)&v30 + 1) = &v26;
        char v34 = 32;
        char v35 = v14;
        char v36 = v15;
        char v37 = v18;
        uint8_t v38 = v20;
        __int16 v33 = 0;
        int v32 = 0;
        char v39 = 0;
        char v40 = v19;
        sub_100405384(v21, buf);
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR))
      {
        sub_100697CEC();
      }

      return;
    }
  }

  else if (v4)
  {
    goto LABEL_5;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEBUG)) {
    sub_100697CC0();
  }
}

void sub_100594684( uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, char a8, char a9, char a10, char a11, char a12, __int16 a13, int a14, char a15, char a16)
{
  uint64_t v21 = sub_100404FE8();
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  void v24[2] = sub_1005B5AE0;
  v24[3] = &unk_1008A2840;
  int v25 = a3;
  int v26 = a4;
  int v27 = a5;
  int v28 = a6;
  uint8_t v24[4] = a2;
  void v24[5] = a7;
  char v31 = a8;
  char v32 = a9;
  char v33 = a10;
  char v34 = a11;
  char v35 = a12;
  __int16 v30 = a13;
  int v29 = a14;
  char v36 = a15;
  char v37 = a16;
  sub_100405384(v21, v24);
}

void sub_100594788(uint64_t a1, __int128 *a2)
{
  __int128 v2 = a2[1];
  __int128 v5 = *a2;
  __int128 v6 = v2;
  uint64_t v3 = sub_100404FE8();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1005943F8;
  v4[3] = &unk_10087FA48;
  sub_100405384(v3, v4);
}

uint64_t sub_100594810(uint64_t a1, uint64_t a2, int a3)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 120);
  uint64_t v6 = 224LL;
  if (a3) {
    uint64_t v6 = 192LL;
  }
  sub_10059488C(a1 + v6, a2);
  return sub_100242FAC((uint64_t)v8);
}

void sub_100594878( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10059488C(uint64_t a1, uint64_t a2)
{
  __int128 v5 = *(char **)(a1 + 8);
  unsigned int v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        __int128 v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }

  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_1005BCA38(a1 + 8, v4, (char *)&v6);
    sub_100008A30(a1 + 8);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

uint64_t sub_100594914(uint64_t a1, uint64_t a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 120);
  sub_100009168(a1 + 192, a2);
  sub_100009168(a1 + 224, a2);
  return sub_100242FAC((uint64_t)v5);
}

void sub_10059496C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100594980(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v11 = a3;
  __int128 v5 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = sub_100241F94(a2);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    *(_DWORD *)__int128 buf = 138543362;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "AutoReconnect - Added device %{public}@ to connection filter accept list",  buf,  0xCu);
  }

  if (a1 + 808 == sub_1005BCC74(a1 + 800, a2))
  {
    uint64_t v9 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
      sub_100697DB8(a2, v9);
    }
    uint64_t v10 = sub_1002E6E00();
    sub_1004FC118(v10, 1);
  }

  sub_1005BCCEC((uint64_t **)(a1 + 336), a2, a2);
  *(void *)__int128 buf = &v11;
  uint64_t v8 = sub_1005BCE78(a1 + 360, &v11, (uint64_t)&unk_1006C2518, (void **)buf);
  uuid_copy((unsigned __int8 *)v8 + 40, a2);
  if (!*(_DWORD *)(a1 + 864)) {
    sub_1005911F0(a1, 1u);
  }
}

void sub_100594AE4(uint64_t a1, const unsigned __int8 *a2)
{
  unsigned int v4 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a2, (char *)out);
    sub_10002418C(__p, (char *)out);
    if (v13 >= 0) {
      __int128 v5 = __p;
    }
    else {
      __int128 v5 = (void **)__p[0];
    }
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Adding %{public}s to AddToFilterAcceptList list",  out,  0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v6 = *(void **)(a1 + 768);
  uint64_t v7 = sub_100241F94(a2);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  [v6 addObject:v8];

  uint64_t v9 = *(void **)(a1 + 776);
  uint64_t v10 = sub_100241F94(a2);
  unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  [v9 removeObject:v11];
}

void sub_100594C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100594C3C(uint64_t a1, const unsigned __int8 *a2)
{
  unsigned int v4 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a2, (char *)out);
    sub_10002418C(__p, (char *)out);
    if (v13 >= 0) {
      __int128 v5 = __p;
    }
    else {
      __int128 v5 = (void **)__p[0];
    }
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Adding %{public}s to RemoveFromFilterAcceptList list",  out,  0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v6 = *(void **)(a1 + 776);
  uint64_t v7 = sub_100241F94(a2);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  [v6 addObject:v8];

  uint64_t v9 = *(void **)(a1 + 768);
  uint64_t v10 = sub_100241F94(a2);
  unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  [v9 removeObject:v11];
}

void sub_100594D78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100594D94(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138543362;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Connect called to %{public}@", buf, 0xCu);
  }

  v51[0] = 0LL;
  v51[1] = 0LL;
  sub_100242F28((uint64_t)v51, a1 + 120);
  if (*(_BYTE *)(a1 + 1067))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
      sub_100697F04();
    }
    uint64_t v5 = 202LL;
  }

  else
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
    }
    if (sub_1005CC0B8((uint64_t)off_1008D5F28, v3))
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
      }
      id v6 = sub_1005D7650((uint64_t)off_1008D5F28, v3);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      BOOL v8 = v7 == 0LL;

      if (v8) {
        goto LABEL_16;
      }
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
      }
      sub_1005D73C8((uint64_t)off_1008D5F28, v3, 2u, (uint64_t)buf);
      uint64_t v9 = *(void *)&buf[16];
      sub_10023BF24((uint64_t)buf, *(void **)&buf[8]);
      if (v9)
      {
LABEL_16:
        sub_100241F90(buf, v3);
        if (sub_100592970((void *)a1, buf))
        {
          if (([*(id *)(a1 + 776) containsObject:v3] & 1) != 0
            || (sub_100241F90(buf, v3), (sub_1005957E8(a1, buf) & 1) != 0))
          {
            uint64_t v10 = (os_log_s *)qword_1008F7620;
            if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138543362;
              *(void *)&uint8_t buf[4] = v3;
              _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "device %{public}@ pending for removal from filter accept list after asked to disconnect, moving back to our connection list",  buf,  0xCu);
            }

            [*(id *)(a1 + 776) removeObject:v3];
            [*(id *)(a1 + 744) removeObject:v3];
          }

          else
          {
            char v18 = (os_log_s *)qword_1008F7620;
            uint64_t v5 = 0LL;
            if (!os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_26;
            }
            *(_DWORD *)__int128 buf = 138543362;
            *(void *)&uint8_t buf[4] = v3;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Already trying to connect device %{public}@",  buf,  0xCu);
          }

          uint64_t v5 = 0LL;
        }

        else
        {
          sub_100241F90(buf, v3);
          if (sub_100595874(a1, buf))
          {
            sub_100241F90(buf, v3);
            unsigned int v12 = sub_1005957E8(a1, buf);
            char v13 = (os_log_s *)qword_1008F7620;
            BOOL v14 = os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT);
            if (v12)
            {
              if (v14)
              {
                *(_DWORD *)__int128 buf = 138543362;
                *(void *)&uint8_t buf[4] = v3;
                _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Device %{public}@ as it is already connected and in the process of disconnecting",  buf,  0xCu);
              }

              uint64_t v5 = 310LL;
            }

            else
            {
              if (v14)
              {
                *(_DWORD *)__int128 buf = 138543362;
                *(void *)&uint8_t buf[4] = v3;
                _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Cannot connect device %{public}@ as it is already connected",  buf,  0xCu);
              }

              uint64_t v5 = 311LL;
            }
          }

          else
          {
            char v15 = (os_log_s *)qword_1008F7620;
            if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v16 = *(_DWORD *)(a1 + 864);
              if (v16 > 4) {
                int v17 = "UNKNOWN";
              }
              else {
                int v17 = (&off_1008A2DC0)[v16];
              }
              *(_DWORD *)__int128 buf = 136446466;
              *(void *)&uint8_t buf[4] = v17;
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Current state when trying to connect %{public}s(%d)",  buf,  0x12u);
            }

            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
            }
            int v19 = sub_1005CE2FC((uint64_t)off_1008D5F28, v3);
            __int128 v49 = 0uLL;
            int v50 = 0;
            if (sub_1005958E4(a1, v19, (uint64_t)&v49)
              && _os_feature_enabled_impl("BluetoothFeatures", "Sentinel"))
            {
              if (qword_1008D5F30 != -1) {
                dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
              }
              sub_1005D6C64((uint64_t)off_1008D5F28, v3, SBYTE8(v49));
              if (qword_1008D5F30 != -1) {
                dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
              }
              sub_1005CFD18((uint64_t)off_1008D5F28, v3, v50);
              v47[0] = 0LL;
              v47[1] = 0LL;
              uint64_t v48 = 0LL;
              id v20 = objc_claimAutoreleasedReturnValue([v3 UUIDString]);
              sub_10002418C(v47, (char *)[v20 UTF8String]);

              *(void *)__int128 buf = v47;
              uint64_t v21 = sub_1005BCFB4( (uint64_t **)(a1 + 1352),  (const void **)v47,  (uint64_t)&unk_1006C2518,  (__int128 **)buf);
              *(_OWORD *)(v21 + 7) = v49;
              *((_DWORD *)v21 + 1_Block_object_dispose(va, 8) = v50;
              int v22 = (os_log_s *)qword_1008F7620;
              if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
              {
                int v23 = SHIBYTE(v48);
                int v24 = (void **)v47[0];
                sub_10059622C((unsigned int *)&v49, &__p);
                int v25 = sub_100595B00(v19);
                int v26 = v47;
                if (v23 < 0) {
                  int v26 = v24;
                }
                if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  p_p = &__p;
                }
                else {
                  p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)__int128 buf = 136315650;
                *(void *)&uint8_t buf[4] = v26;
                *(_WORD *)&_BYTE buf[12] = 2080;
                *(void *)&_BYTE buf[14] = v25;
                *(_WORD *)&_BYTE buf[22] = 2080;
                int v54 = p_p;
                _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "connScanUseCaseEntryCoex at connect: device %s useCase %s useCaseEntryCoex %s",  buf,  0x20u);
              }

              if (SHIBYTE(v48) < 0) {
                operator delete(v47[0]);
              }
            }

            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
            }
            id v28 = sub_1005D373C((uint64_t)off_1008D5F28, v3);
            int v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
            __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([v29 cuFilteredArrayUsingBlock:&stru_1008A2438]);

            __int128 v44 = 0u;
            __int128 v45 = 0u;
            __int128 v42 = 0u;
            __int128 v43 = 0u;
            id v31 = v30;
            id v32 = [v31 countByEnumeratingWithState:&v42 objects:v52 count:16];
            if (v32)
            {
              uint64_t v33 = *(void *)v43;
              do
              {
                char v34 = 0LL;
                do
                {
                  if (*(void *)v43 != v33) {
                    objc_enumerationMutation(v31);
                  }
                  char v35 = *(void **)(*((void *)&v42 + 1) + 8LL * (void)v34);
                  if (qword_1008D6198 != -1) {
                    dispatch_once(&qword_1008D6198, &stru_1008A2B70);
                  }
                  sub_10044D668((uint64_t)off_1008D6190, objc_msgSend(v35, "integerValue", (void)v42));
                  char v34 = (char *)v34 + 1;
                }

                while (v32 != v34);
                id v32 = [v31 countByEnumeratingWithState:&v42 objects:v52 count:16];
              }

              while (v32);
            }

            if (*(_DWORD *)(a1 + 928))
            {
              sub_100241F90(buf, v3);
              sub_100594AE4(a1, buf);
              uint64_t v5 = 0LL;
            }

            else
            {
              switch(*(_DWORD *)(a1 + 864))
              {
                case 0:
                  char v36 = (os_log_s *)qword_1008F7620;
                  if (!os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_89;
                  }
                  *(_WORD *)__int128 buf = 0;
                  char v37 = "Adding device to connecting list";
                  goto LABEL_88;
                case 1:
                  uint8_t v38 = (os_log_s *)qword_1008F7620;
                  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)__int128 buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Lets wait for the controller, cancelling",  buf,  2u);
                  }

                  goto LABEL_92;
                case 2:
                  char v39 = (os_log_s *)qword_1008F7620;
                  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)__int128 buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "will add the device to connecting list once we're done with the pending cancelation",  buf,  2u);
                  }

                  goto LABEL_92;
                case 3:
                  char v36 = (os_log_s *)qword_1008F7620;
                  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)__int128 buf = 0;
                    char v37 = "adding the device to connecting list , will wait for cancelation to complete before trying to connect to it.";
LABEL_88:
                    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, v37, buf, 2u);
                  }

void sub_100595720( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
  sub_100242FAC((uint64_t)&a30);
  _Unwind_Resume(a1);
}

id sub_1005957E8(uint64_t a1, const unsigned __int8 *a2)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, a1 + 120);
  unsigned int v4 = *(void **)(a1 + 744);
  uint64_t v5 = sub_100241F94(a2);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = [v4 containsObject:v6];

  sub_100242FAC((uint64_t)v9);
  return v7;
}

void sub_100595854( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100242FAC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_100595874(uint64_t a1, unsigned __int8 *a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1 + 120);
  BOOL v4 = a1 + 392 != sub_1001FDB10(a1 + 384, a2);
  sub_100242FAC((uint64_t)v6);
  return v4;
}

void sub_1005958D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005958E4(uint64_t a1, int a2, uint64_t a3)
{
  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_100242F28((uint64_t)v18, a1 + 120);
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_1008A2B70);
  }
  unint64_t v6 = sub_10044C108((uint64_t)off_1008D6190, 0LL, 1u);
  id v7 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v8 = sub_100595B00(a2);
    uint64_t v9 = "Yes";
    buf[0] = 136447746;
    *(void *)&buf[1] = v8;
    LOWORD(buf[3]) = 2082;
    if ((v6 & 4) != 0) {
      uint64_t v10 = "Yes";
    }
    else {
      uint64_t v10 = "No";
    }
    *(void *)((char *)&buf[3] + 2) = v10;
    HIWORD(buf[5]) = 2048;
    if ((v6 & 2) != 0) {
      unint64_t v11 = "Yes";
    }
    else {
      unint64_t v11 = "No";
    }
    *(void *)&buf[6] = 0LL;
    if ((v6 & 1) != 0) {
      unsigned int v12 = "Yes";
    }
    else {
      unsigned int v12 = "No";
    }
    LOWORD(buf[8]) = 2082;
    if ((v6 & 8) == 0) {
      uint64_t v9 = "No";
    }
    *(void *)((char *)&buf[8] + 2) = v11;
    HIWORD(buf[10]) = 2082;
    *(void *)&buf[11] = v12;
    LOWORD(buf[13]) = 2082;
    *(void *)((char *)&buf[13] + 2) = v9;
    HIWORD(buf[15]) = 2048;
    *(void *)&__int128 v20 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "getConnScanUseCaseEntryCoex for useCase %{public}s WiFi Coex Critical %{public}s (0x%llx) WiFi assoc 2.4GHz %{publ ic}s BT Audio Active %{public}s HRB %{public}s coexState 0x%llx",  (uint8_t *)buf,  0x48u);
  }

  int v36 = 0;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  memset(buf, 0, sizeof(buf));
  unsigned int v13 = sub_1005B620C(a1, a2, (uint64_t)buf);
  if (v6 < 0x10) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0LL;
  }
  if ((_DWORD)v14 == 1)
  {
    if (LOBYTE(buf[0])) {
      unint64_t v15 = v6;
    }
    else {
      unint64_t v15 = 0LL;
    }
    unsigned int v16 = &buf[5 * v15];
    *(_DWORD *)(a3 + 16) = v16[5];
    *(_OWORD *)a3 = *(_OWORD *)(v16 + 1);
  }

  sub_100242FAC((uint64_t)v18);
  return v14;
}

void sub_100595AE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const char *sub_100595B00(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }

        else
        {
          switch(a1)
          {
            case 2147418112:
              uint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              uint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              uint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              uint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              uint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              uint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              uint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              uint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              uint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }

      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "ADPD";
            break;
          case 524289:
            uint64_t result = "ADPDBuffer";
            break;
          case 524290:
            uint64_t result = "MicroLocation";
            break;
          case 524291:
            uint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              uint64_t result = "PrecisionFindingFindee";
            }

            else
            {
              if (a1 != 589824) {
                return "?";
              }
              uint64_t result = "FindNearbyRemote";
            }

            break;
        }
      }

      else
      {
        switch(a1)
        {
          case 393216:
            uint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            uint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            uint64_t result = "MacSetup";
            break;
          case 393219:
            uint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            uint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              uint64_t result = "RapportThirdParty";
            }

            else
            {
              if (a1 != 458752) {
                return "?";
              }
              uint64_t result = "PrecisionFindingFinder";
            }

            break;
        }
      }
    }

    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            uint64_t result = "DigitalIDTSA";
          }

          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            uint64_t result = "DigitalCarKeyThirdParty";
          }

          break;
      }
    }
  }

  else
  {
    uint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "HealthKit";
        break;
      case 2:
        uint64_t result = "HomeKit";
        break;
      case 3:
        uint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        uint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        uint64_t result = "MIDI";
        break;
      case 6:
        uint64_t result = "Continuity";
        break;
      case 7:
        uint64_t result = "InstantHotSpot";
        break;
      case 8:
        uint64_t result = "NearBy";
        break;
      case 9:
        uint64_t result = "Sharing";
        break;
      case 10:
        uint64_t result = "HearingSupport";
        break;
      case 11:
        uint64_t result = "Magnet";
        break;
      case 12:
        uint64_t result = "HID";
        break;
      case 13:
        uint64_t result = "LEA";
        break;
      case 14:
        uint64_t result = "External";
        break;
      case 15:
        uint64_t result = "ExternalMedical";
        break;
      case 16:
        uint64_t result = "ExternalLock";
        break;
      case 17:
        uint64_t result = "ExternalWatch";
        break;
      case 18:
        uint64_t result = "SmartRouting";
        break;
      case 19:
        uint64_t result = "DigitalID";
        break;
      case 20:
        uint64_t result = "DigitalKey";
        break;
      case 21:
        uint64_t result = "DigitalCarKey";
        break;
      case 22:
        uint64_t result = "HeySiri";
        break;
      case 23:
        uint64_t result = "ThirdPartyApp";
        break;
      case 24:
        uint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            uint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            uint64_t result = "AudioBox";
            break;
          case 258:
            uint64_t result = "SIMTransfer";
            break;
          case 259:
            uint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            uint64_t result = "MacMigrate";
            break;
          case 263:
            uint64_t result = "HIDUARTService";
            break;
          case 264:
            uint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            uint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            uint64_t result = "SafetyAlerts";
            break;
          case 267:
            uint64_t result = "LECarPlay";
            break;
          case 268:
            uint64_t result = "TCCBluetooth";
            break;
          case 269:
            uint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }

        break;
    }
  }

  return result;
}

uint64_t sub_10059622C@<X0>(unsigned int *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v19 = 0LL;
  __int128 v17 = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)std::stringbuf::string_type __p = 0u;
  __int128 v16 = 0u;
  memset(v14, 0, sizeof(v14));
  sub_10020E564((uint64_t)v14);
  BOOL v4 = sub_1001FD17C(v14, (uint64_t)"totalRx:", 8LL);
  uint64_t v5 = (void *)std::ostream::operator<<(v4, *a1);
  unint64_t v6 = sub_1001FD17C(v5, (uint64_t)" btMCRx:", 8LL);
  id v7 = (void *)std::ostream::operator<<(v6, a1[1]);
  BOOL v8 = sub_1001FD17C(v7, (uint64_t)" timeout:", 9LL);
  uint64_t v9 = (void *)std::ostream::operator<<(v8, a1[3]);
  uint64_t v10 = sub_1001FD17C(v9, (uint64_t)" connDutyCycle:", 15LL);
  unint64_t v11 = (void *)std::ostream::operator<<(v10, a1[2]);
  unsigned int v12 = sub_1001FD17C(v11, (uint64_t)" scWindow:", 10LL);
  std::ostream::operator<<(v12, a1[4]);
  std::stringbuf::str(a2, (const std::stringbuf *)((char *)v14 + 8));
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf((char *)v14 + 8);
  return std::ios::~ios(v18);
}

void sub_100596378( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_10059638C(id a1, NSNumber *a2)
{
  __int128 v2 = a2;
  else {
    id v3 = v2;
  }
  BOOL v4 = v3;

  return v4;
}

void sub_1005963C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1005963D8(uint64_t a1, void *a2)
{
  id v5 = a2;
  v139[0] = 0LL;
  v139[1] = 0LL;
  sub_100242F28((uint64_t)v139, a1 + 120);
  __int16 v137 = 0;
  char v136 = 0;
  v138[0] = 0;
  *(_DWORD *)((char *)v138 + 3) = 0;
  if (!*(_BYTE *)(a1 + 184)) {
    goto LABEL_88;
  }
  if (sub_1005A15FC(a1, v5))
  {
    unint64_t v6 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138543362;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Warning: LeConnectionDenyList: Device %{public}@ is currently blocked, ignoring request",  buf,  0xCu);
    }

void sub_100597BF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  if (a61 < 0) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a72);

  _Unwind_Resume(a1);
}

void sub_100597E14(id a1)
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_1008A2B10);
  }
  sub_100597E54((uint64_t)off_1008D5F08);
}

uint64_t sub_100597E54(uint64_t a1)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 120);
  unsigned int v2 = *(_DWORD *)(a1 + 928);
  if (v2)
  {
    unint64_t v3 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(int *)(a1 + 864);
      else {
        id v5 = (&off_1008A2DC0)[v4];
      }
      if (v2 > 3) {
        unint64_t v6 = "UNKNOWN";
      }
      else {
        unint64_t v6 = off_1008A2CB8[v2 - 1];
      }
      *(_DWORD *)__int128 buf = 136446466;
      int v10 = v5;
      __int16 v11 = 2082;
      unsigned int v12 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Not processing outgoing connections. LE Connection State=%{public}s LE Connection Manager State=%{public}s",  buf,  0x16u);
    }
  }

  else
  {
    sub_10059EB5C(a1);
  }

  return sub_100242FAC((uint64_t)v8);
}

void sub_100597F7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100597F98(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  unint64_t v6 = (os_log_s *)qword_1008F7660;
  if (os_log_type_enabled((os_log_t)qword_1008F7660, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a2, out);
    sub_10002418C(__p, out);
    id v7 = v36 >= 0 ? __p : (void **)__p[0];
    BOOL v8 = a3 > 0xA ? "unknown" : (&off_1008A2DE8)[a3];
    *(_DWORD *)uuid_string_t out = 136446466;
    *(void *)&out[4] = v7;
    *(_WORD *)&out[12] = 2082;
    *(void *)&out[14] = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Device disconnecting - {cbuuid: %{public}s, ledisconnectionreason: %{public}s}",  (uint8_t *)out,  0x16u);
    if (v36 < 0) {
      operator delete(__p[0]);
    }
  }

  if (sub_1005957E8(a1, a2))
  {
    uint64_t v9 = (os_log_s *)qword_1008F7620;
    BOOL v10 = os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (!v10) {
      return result;
    }
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a2, out);
    sub_10002418C(__p, out);
    if (v36 >= 0) {
      unsigned int v12 = __p;
    }
    else {
      unsigned int v12 = (void **)__p[0];
    }
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Already trying to disconnect device %{public}s",  (uint8_t *)out,  0xCu);
    if (v36 < 0) {
      operator delete(__p[0]);
    }
    return 0LL;
  }

  if ((sub_100592970((void *)a1, a2) & 1) != 0 || sub_100595874(a1, a2))
  {
    *(void *)uuid_string_t out = 0LL;
    *(void *)&out[8] = 0LL;
    uuid_copy((unsigned __int8 *)out, a2);
    __p[0] = a2;
    *((_DWORD *)sub_1005BD108( (uint64_t **)(a1 + 456),  a2,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)__p)
    + 11) = a3;
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
    }
    unsigned int v13 = off_1008D5F28;
    uint64_t v14 = sub_100241F94(a2);
    unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    unsigned int v16 = sub_1005CE2FC((uint64_t)v13, v15);

    if (v16)
    {
      if (qword_1008D6198 != -1) {
        dispatch_once(&qword_1008D6198, &stru_1008A2B70);
      }
      sub_10044D74C((uint64_t)off_1008D6190, v16);
    }

    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
    }
    id v17 = off_1008D5F28;
    id v18 = sub_100241F94(a2);
    int v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    id v20 = sub_1005D373C((uint64_t)v17, v19);
    id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v21 cuFilteredArrayUsingBlock:&stru_1008A2478]);

    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    id v23 = v22;
    id v24 = [v23 countByEnumeratingWithState:&v31 objects:v39 count:16];
    if (v24)
    {
      uint64_t v25 = *(void *)v32;
      do
      {
        BOOL v26 = 0LL;
        do
        {
          if (*(void *)v32 != v25) {
            objc_enumerationMutation(v23);
          }
          uint64_t v27 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)v26);
          if (qword_1008D6198 != -1) {
            dispatch_once(&qword_1008D6198, &stru_1008A2B70);
          }
          sub_10044D74C((uint64_t)off_1008D6190, objc_msgSend(v27, "integerValue", (void)v31));
          BOOL v26 = (char *)v26 + 1;
        }

        while (v24 != v26);
        id v24 = [v23 countByEnumeratingWithState:&v31 objects:v39 count:16];
      }

      while (v24);
    }

    uint64_t v28 = sub_100404FE8();
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3321888768LL;
    unsigned __int8 v37[2] = sub_100598528;
    v37[3] = &unk_1008A1630;
    uuid_copy(v38, (const unsigned __int8 *)out);
    sub_100405384(v28, v37);

    return 0LL;
  }

  int v29 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a2, out);
    sub_10002418C(__p, out);
    int v30 = v36 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = v30;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Cannot disconnect device %{public}s as it is not connecting or connected!",  (uint8_t *)out,  0xCu);
    if (v36 < 0) {
      operator delete(__p[0]);
    }
  }

  return 312LL;
}

void sub_10059849C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1005984DC(id a1, NSNumber *a2)
{
  unsigned int v2 = a2;
  else {
    unint64_t v3 = v2;
  }
  uint64_t v4 = v3;

  return v4;
}

void sub_100598518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100598528(uint64_t a1)
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_1008A2B10);
  }
  return sub_100598578((uint64_t)off_1008D5F08, (unsigned __int8 *)(a1 + 32));
}

uint64_t sub_100598578(uint64_t a1, unsigned __int8 *a2)
{
  v65[0] = 0LL;
  v65[1] = 0LL;
  sub_100242F28((uint64_t)v65, a1 + 120);
  if (sub_1005957E8(a1, a2))
  {
    uint64_t v4 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      memset(out, 0, sizeof(out));
      uuid_unparse_upper(a2, out);
      sub_10002418C(__p, out);
      if (v67 >= 0) {
        id v5 = __p;
      }
      else {
        id v5 = *(_BYTE **)__p;
      }
      *(_DWORD *)__int128 buf = 136446210;
      int v69 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Device %{public}s is already disconnecting",  buf,  0xCu);
      if (v67 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }

  else if ((sub_100592970((void *)a1, a2) & 1) != 0 || sub_100595874(a1, a2))
  {
    if (qword_1008D5F20 != -1) {
      dispatch_once(&qword_1008D5F20, &stru_1008A2BF0);
    }
    sub_10062A7B4(qword_1008D5F18, a2);
    if (qword_1008D5F20 != -1) {
      dispatch_once(&qword_1008D5F20, &stru_1008A2BF0);
    }
    sub_10062A96C(qword_1008D5F18, a2);
    sub_100599B60(a1, a2);
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
    }
    unint64_t v6 = off_1008D5F28;
    id v7 = sub_100241F94(a2);
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    sub_1005D3C5C((uint64_t)v6, v8);

    if (qword_1008D5F20 != -1) {
      dispatch_once(&qword_1008D5F20, &stru_1008A2BF0);
    }
    uint64_t v9 = qword_1008D5F18;
    BOOL v10 = sub_100241F94(a2);
    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    LOBYTE(v9) = sub_10061C0F8(v9, v11);

    if ((v9 & 1) == 0)
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
      }
      unsigned int v12 = off_1008D5F28;
      unsigned int v13 = sub_100241F94(a2);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      sub_1005D4D10((uint64_t)v12, v14, 0);
    }

    if (qword_1008D92A8 != -1) {
      dispatch_once(&qword_1008D92A8, &stru_1008A2BB0);
    }
    uint64_t v15 = qword_1008D92A0;
    unsigned int v16 = sub_100241F94(a2);
    id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    sub_10064CA40(v15, v17, 3LL);

    uint64_t v18 = sub_1001FDB10(a1 + 384, a2);
    if (a1 + 392 == v18)
    {
      uint64_t v28 = *(void **)(a1 + 752);
      int v29 = sub_100241F94(a2);
      int v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      LODWORD(v2_Block_object_dispose(va, 8) = [v28 containsObject:v30];

      if ((_DWORD)v28)
      {
        __int128 v31 = (os_log_s *)qword_1008F7620;
        if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
        {
          memset(out, 0, sizeof(out));
          uuid_unparse_upper(a2, out);
          sub_10002418C(__p, out);
          __int128 v32 = v67 >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)__int128 buf = 136446210;
          int v69 = v32;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Removing device %{public}s from connection overflow list",  buf,  0xCu);
          if (v67 < 0) {
            operator delete(*(void **)__p);
          }
        }

        __int128 v33 = *(void **)(a1 + 752);
        __int128 v34 = sub_100241F94(a2);
        __int128 v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
        [v33 removeObject:v35];
      }

      else
      {
        char v36 = *(void **)(a1 + 760);
        int v37 = sub_100241F94(a2);
        uint8_t v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
        LODWORD(v36) = [v36 containsObject:v38];

        if ((_DWORD)v36)
        {
          char v39 = (os_log_s *)qword_1008F7620;
          if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
          {
            memset(out, 0, sizeof(out));
            uuid_unparse_upper(a2, out);
            sub_10002418C(__p, out);
            char v40 = v67 >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)__int128 buf = 136446210;
            int v69 = v40;
            _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "LeConnectionDenyList: Removing device %{public}s from blocked connection list",  buf,  0xCu);
            if (v67 < 0) {
              operator delete(*(void **)__p);
            }
          }

          id v41 = *(void **)(a1 + 760);
          int v42 = sub_100241F94(a2);
          __int128 v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
          [v41 removeObject:v43];
        }

        else
        {
          unsigned int v48 = *(void **)(a1 + 768);
          id v49 = sub_100241F94(a2);
          int v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
          LODWORD(vsub_100242FAC(v15 - 48) = [v48 containsObject:v50];

          uint64_t v51 = (os_log_s *)qword_1008F7620;
          BOOL v52 = os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v48)
          {
            if (v52)
            {
              sub_100366664(a2, out);
              uint64_t v53 = out[23] >= 0 ? out : *(char **)out;
              *(_DWORD *)std::stringbuf::string_type __p = 136446210;
              *(void *)&__p[4] = v53;
              _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "Removing device %{public}s from pending to go into filter accept list",  __p,  0xCu);
              if (out[23] < 0) {
                operator delete(*(void **)out);
              }
            }

            int v54 = *(void **)(a1 + 768);
            char v55 = sub_100241F94(a2);
            int v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
            [v54 removeObject:v56];
          }

          else
          {
            if (v52)
            {
              sub_100366664(a2, out);
              int v57 = out[23] >= 0 ? out : *(char **)out;
              *(_DWORD *)std::stringbuf::string_type __p = 136446210;
              *(void *)&__p[4] = v57;
              _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "Disconnecting pending device %{public}s",  __p,  0xCu);
              if (out[23] < 0) {
                operator delete(*(void **)out);
              }
            }

            switch(*(_DWORD *)(a1 + 864))
            {
              case 0:
                if (!*(_DWORD *)(a1 + 928))
                {
                  unint64_t v58 = (os_log_s *)qword_1008F7620;
                  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_FAULT)) {
                    sub_1006981AC(v58);
                  }
                }

                break;
              case 1:
                int v59 = (os_log_s *)qword_1008F7620;
                if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)uuid_string_t out = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "cancelling, waiting for controller before removing from filter accept list",  (uint8_t *)out,  2u);
                }

                uint64_t v60 = *(void **)(a1 + 744);
                int v61 = sub_100241F94(a2);
                int v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
                [v60 addObject:v62];

                break;
              case 2:
              case 4:
LABEL_76:
                sub_100594C3C(a1, a2);
                break;
              case 3:
                unsigned int v63 = sub_100241F94(a2);
                uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
                sub_10059F800(a1, v64);

                break;
              default:
                return sub_100242FAC((uint64_t)v65);
            }
          }
        }
      }
    }

    else
    {
      int v19 = (os_log_s *)qword_1008F7620;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
      {
        memset(out, 0, sizeof(out));
        uuid_unparse_upper(a2, out);
        sub_10002418C(__p, out);
        id v20 = v67 >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)__int128 buf = 136446210;
        int v69 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Disconnecting connected device %{public}s",  buf,  0xCu);
        if (v67 < 0) {
          operator delete(*(void **)__p);
        }
      }

      id v21 = *(void **)(a1 + 744);
      __int128 v22 = sub_100241F94(a2);
      id v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      [v21 addObject:v23];

      *(void *)uuid_string_t out = 0LL;
      BOOL v24 = sub_100599890(a1, a2, out);
      uint64_t v25 = *(void *)out;
      if (*(void *)out) {
        BOOL v26 = v24;
      }
      else {
        BOOL v26 = 0;
      }
      if (v26)
      {
        __p[0] = 0;
        sub_100242CA4(__p);
        BOOL v27 = sub_10012D5EC(v25) && *(_BYTE *)(v25 + 220) != 0;
        sub_100242CD0(__p);
        if (v27)
        {
          uint64_t v44 = sub_1002E6E9C();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)v44 + 2920LL))( v44,  v25,  0xFFFFLL,  1LL,  0LL,  1LL);
        }

        sub_100242CD8(__p);
      }

      __int128 v45 = sub_100241F94(a2);
      int v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
      sub_100591D60(a1, v46);

      __p[0] = 0;
      sub_100242CA4(__p);
      sub_1001B7974(*(void *)(v18 + 48));
      sub_100242CD8(__p);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR))
  {
    sub_100366664(a2, out);
    sub_10069823C();
  }

  return sub_100242FAC((uint64_t)v65);
}

void sub_100598E70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100242FAC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100598F90( _WORD *a1, int a2, __int16 *a3, __int16 *a4, __int16 *a5, __int16 *a6, _WORD *a7, __int16 *a8, _WORD *a9, _WORD *a10, _WORD *a11, _WORD *a12, _WORD *a13, _BYTE *a14, _BYTE *a15)
{
  *a3 = 10;
  *a4 = 30;
  *a7 = 1;
  *a8 = 2000;
  *a6 = 10;
  *a5 = 2;
  *a9 = 3;
  *a10 = 3;
  *a11 = 1;
  *a12 = 2;
  *a13 = 200;
  *a14 = 0;
  *a15 = 1;
  switch(a2)
  {
    case -11:
      uint64_t result = 0LL;
      *a3 = 10;
      *a4 = 30;
      *a7 = 1;
      *a6 = 12;
      *a5 = 12;
      *a9 = 3;
      *a10 = 3;
      *a11 = 1;
      *a12 = 2;
      *a13 = 200;
      *a14 = 1;
      *a15 = 0;
      return result;
    case -10:
      uint64_t result = 0LL;
      *a3 = a1[549];
      *a4 = a1[550];
      *a7 = 1;
      __int16 v20 = a1[551];
      goto LABEL_22;
    case -9:
      uint64_t result = 0LL;
      __int16 v21 = 150;
      goto LABEL_10;
    case -8:
      uint64_t result = 0LL;
      __int16 v21 = 30;
LABEL_10:
      *a3 = v21;
      *a4 = v21;
      *a7 = 0;
      return result;
    case -7:
      uint64_t result = 0LL;
      *a3 = 15;
      *a4 = 15;
      *a7 = 0;
      __int16 v20 = 2000;
      goto LABEL_22;
    case -6:
      uint64_t result = 0LL;
      *a3 = 970;
      *a4 = 1000;
      *a7 = 0;
      *a8 = 8000;
      __int16 v22 = 4;
      goto LABEL_14;
    case -5:
      *a3 = 30;
      *a4 = 30;
      *a7 = 0;
      sub_1002E6E9C();
      uint64_t result = 0LL;
      __int16 v22 = 8;
LABEL_14:
      *a6 = v22;
      __int16 v19 = 2;
      goto LABEL_17;
    case -4:
    case -1:
      uint64_t result = 0LL;
      *a3 = 15;
      *a4 = 15;
      *a7 = 0;
      __int16 v19 = 6;
      goto LABEL_16;
    case -3:
      uint64_t result = 0LL;
      *a3 = 60;
      *a4 = 60;
      *a7 = 5;
      __int16 v19 = 12;
LABEL_16:
      *a6 = v19;
LABEL_17:
      *a5 = v19;
      return result;
    case -2:
      uint64_t result = 0LL;
      *a3 = 20;
      *a4 = 30;
      *a7 = 5;
      *a6 = 12;
      *a5 = 12;
      *a9 = 1;
      *a10 = 1;
      *a11 = 5;
      *a12 = 0;
      *a13 = 200;
      return result;
    case 0:
      uint64_t result = 0LL;
      *a3 = a1[540];
      *a4 = a1[541];
      *a7 = 0;
      __int16 v20 = a1[542];
      goto LABEL_22;
    case 1:
      uint64_t result = 0LL;
      *a3 = a1[543];
      *a4 = a1[544];
      *a7 = 1;
      __int16 v20 = a1[545];
      goto LABEL_22;
    case 2:
      uint64_t result = 0LL;
      *a3 = a1[546];
      *a4 = a1[547];
      *a7 = 1;
      __int16 v20 = a1[548];
LABEL_22:
      *a8 = v20;
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
        sub_100698288();
      }
      uint64_t result = 3LL;
      break;
  }

  return result;
}

void sub_100599264(int a1)
{
  uint64_t v1 = (os_log_s *)qword_1008F7620;
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
      sub_1006982B4();
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v2 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "Successfully Enabled event for connection subrating",  v2,  2u);
    }

    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_1008A2B10);
    }
    *((_BYTE *)off_1008D5F08 + 1549) |= 4u;
  }

void sub_10059932C(int a1)
{
  uint64_t v1 = (os_log_s *)qword_1008F7620;
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
      sub_100698314();
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v2 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "Successfully Disabled event for connection subrating",  v2,  2u);
    }

    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_1008A2B10);
    }
    *((_BYTE *)off_1008D5F08 + 1549) &= ~4u;
  }

uint64_t sub_1005993F4(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int16 a4)
{
  unint64_t v23 = a2;
  char v22 = 0;
  sub_100242CA4(&v22);
  uint64_t v8 = sub_1001BD69C(a2, WORD1(a3), WORD2(a3), (unsigned __int16)a3, HIWORD(a3), a4);
  sub_100242CD0(&v22);
  v21[0] = 0LL;
  v21[1] = 0LL;
  sub_100242F28((uint64_t)v21, a1 + 120);
  uint64_t v9 = *(void **)(a1 + 536);
  if (v9)
  {
    BOOL v10 = (void *)(a1 + 536);
    do
    {
      unint64_t v11 = v9[4];
      BOOL v12 = v11 >= a2;
      if (v11 >= a2) {
        unsigned int v13 = v9;
      }
      else {
        unsigned int v13 = v9 + 1;
      }
      if (v12) {
        BOOL v10 = v9;
      }
      uint64_t v9 = (void *)*v13;
    }

    while (*v13);
    if (v10 != (void *)(a1 + 536) && v10[4] <= a2)
    {
      *(void *)__int128 buf = &v23;
      *((_DWORD *)sub_1005BC978((uint64_t **)(a1 + 528), &v23, (uint64_t)&unk_1006C2518, (uint64_t **)buf) + 13) = v8 == 0;
    }
  }

  uint64_t v14 = (os_log_s *)qword_1008F7620;
  if ((_DWORD)v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 67110400;
      *(_DWORD *)&uint8_t buf[4] = WORD1(a3);
      __int16 v25 = 1024;
      int v26 = WORD2(a3);
      __int16 v27 = 1024;
      int v28 = (unsigned __int16)a3;
      __int16 v29 = 1024;
      int v30 = HIWORD(a3);
      __int16 v31 = 1024;
      int v32 = a4;
      __int16 v33 = 1024;
      int v34 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Failed to enter Connection Subrating Mode with parameters: Subrate_Min=%d, Subrate_Max=%d, Max_Latency=%d, Conti nuation_Number=%d, Supervision_Timeout=%d. Status=%d",  buf,  0x26u);
    }

    uint64_t v15 = *(void **)(a1 + 512);
    if (v15)
    {
      unsigned int v16 = (void *)(a1 + 512);
      do
      {
        unint64_t v17 = v15[4];
        BOOL v18 = v17 >= v23;
        if (v17 >= v23) {
          __int16 v19 = v15;
        }
        else {
          __int16 v19 = v15 + 1;
        }
        if (v18) {
          unsigned int v16 = v15;
        }
        uint64_t v15 = (void *)*v19;
      }

      while (*v19);
      if (v16 != (void *)(a1 + 512) && v23 >= v16[4])
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEBUG)) {
          sub_100698374();
        }
        sub_10020166C(a1 + 504, &v23);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Successfully sent connection subrating request",  buf,  2u);
  }

  sub_100242FAC((uint64_t)v21);
  sub_100242CD8(&v22);
  return v8;
}

void sub_100599680( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

BOOL sub_1005996B4(uint64_t a1, unsigned __int8 *a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1 + 120);
  BOOL v4 = a1 + 416 != sub_1001FDB10(a1 + 408, a2);
  sub_100242FAC((uint64_t)v6);
  return v4;
}

void sub_100599710( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100599724(uint64_t a1, uint64_t a2, unsigned __int8 *a3, char a4)
{
  v11[1] = 0LL;
  unint64_t v12 = a2;
  v11[0] = 0LL;
  sub_100242F28((uint64_t)v11, a1 + 120);
  id v7 = (uint64_t **)(a1 + 936);
  uint64_t v8 = sub_1001FDB10(a1 + 936, a3);
  if (a1 + 944 != v8 && (a4 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v9 = sub_1005997F4(a1, a3);
  if (!(_DWORD)v9)
  {
    unsigned int v13 = a3;
    uint64_t v8 = (uint64_t)sub_1005BD50C( v7,  a3,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v13);
LABEL_5:
    sub_1002555B0((uint64_t **)(v8 + 48), &v12, (uint64_t *)&v12);
    uint64_t v9 = 0LL;
  }

  sub_100242FAC((uint64_t)v11);
  return v9;
}

void sub_1005997E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1005997F4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v12 = 0LL;
  if (!sub_100599890(a1, a2, &v12)) {
    return 312LL;
  }
  char v11 = 0;
  sub_100242CA4(&v11);
  uint64_t v2 = v12;
  if (sub_10012D5EC(v12))
  {
    else {
      uint64_t v9 = 0LL;
    }
  }

  else
  {
    uint64_t v9 = 7LL;
  }

  sub_100242CD8(&v11);
  return v9;
}

void sub_100599878( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

BOOL sub_100599890(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, a1 + 120);
  uint64_t v6 = sub_1001FDB10(a1 + 384, a2);
  if (a1 + 392 != v6) {
    *a3 = *(void *)(v6 + 48);
  }
  BOOL v7 = a1 + 392 != v6;
  sub_100242FAC((uint64_t)v9);
  return v7;
}

void sub_100599908( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10059991C(int a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_100404FE8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1005B58C0;
  v7[3] = &unk_10088DA08;
  int v8 = a1;
  void v7[4] = a2;
  char v9 = a3;
  sub_100405384(v6, v7);
}

BOOL sub_100599994(uint64_t a1, unsigned __int8 *a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1 + 120);
  BOOL v4 = a1 + 440 != sub_1001FDB10(a1 + 432, a2);
  sub_100242FAC((uint64_t)v6);
  return v4;
}

void sub_1005999F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100599A04(uint64_t a1, const unsigned __int8 *a2)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 120);
  BOOL v4 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a2, out);
    sub_10002418C(__p, out);
    if (v11 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Device %{public}s requires low latency",  buf,  0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v6 = *(void **)(a1 + 824);
  BOOL v7 = sub_100241F94(a2);
  int v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  [v6 addObject:v8];

  return sub_100242FAC((uint64_t)v12);
}

void sub_100599B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100599B60(uint64_t a1, const unsigned __int8 *a2)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 120);
  BOOL v4 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a2, out);
    sub_10002418C(__p, out);
    if (v11 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Device %{public}s does not require low latency",  buf,  0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v6 = *(void **)(a1 + 824);
  BOOL v7 = sub_100241F94(a2);
  int v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  [v6 removeObject:v8];

  return sub_100242FAC((uint64_t)v12);
}

void sub_100599C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100599CBC(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void **)(a1 + 824);
  uint64_t v3 = sub_100241F94(a2);
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = [v2 containsObject:v4];

  return v5;
}

void sub_100599D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100599D10(uint64_t a1, unsigned __int8 *a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1 + 120);
  BOOL v4 = a1 + 648 != sub_1001FDB10(a1 + 640, a2);
  sub_100242FAC((uint64_t)v6);
  return v4;
}

void sub_100599D6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100599D80(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 120);
  BOOL v6 = *(void *)(sub_1001FDB10(a1 + 640, a3) + 48) == a2;
  sub_100242FAC((uint64_t)v8);
  return v6;
}

void sub_100599DE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100599DFC(uint64_t a1, unsigned __int8 *a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1 + 120);
  BOOL v4 = a1 + 672 != sub_1001FDB10(a1 + 664, a2);
  sub_100242FAC((uint64_t)v6);
  return v4;
}

void sub_100599E58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100599E6C(uint64_t a1, const unsigned __int8 *a2)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1 + 120);
  BOOL v4 = *(const unsigned __int8 **)(a1 + 688);
  uuid_copy(dst, a2);
  id v5 = (const unsigned __int8 *)(a1 + 696);
  if (v4 != v5)
  {
    while (uuid_compare(v4 + 40, dst))
    {
      BOOL v6 = (const unsigned __int8 *)*((void *)v4 + 1);
      if (v6)
      {
        do
        {
          BOOL v7 = v6;
          BOOL v6 = *(const unsigned __int8 **)v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          BOOL v7 = (const unsigned __int8 *)*((void *)v4 + 2);
          BOOL v8 = *(void *)v7 == (void)v4;
          BOOL v4 = v7;
        }

        while (!v8);
      }

      BOOL v4 = v7;
      if (v7 == v5)
      {
        BOOL v4 = v5;
        break;
      }
    }
  }

  sub_100242FAC((uint64_t)v10);
  return v4 != v5;
}

void sub_100599F54(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_100599F74(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 120);
  BOOL v6 = *(void *)(sub_1001FDB10(a1 + 664, a3) + 48) == a2;
  sub_100242FAC((uint64_t)v8);
  return v6;
}

void sub_100599FDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100599FF0(uint64_t a1, unint64_t a2, const unsigned __int8 *a3)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, a1 + 120);
  BOOL v6 = *(void **)(a1 + 696);
  if (!v6) {
    goto LABEL_12;
  }
  BOOL v7 = (const unsigned __int8 *)(a1 + 696);
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      BOOL v10 = v6;
    }
    else {
      BOOL v10 = v6 + 1;
    }
    if (v9) {
      BOOL v7 = (const unsigned __int8 *)v6;
    }
    BOOL v6 = (void *)*v10;
  }

  while (*v10);
  if (v7 == (const unsigned __int8 *)(a1 + 696) || *((void *)v7 + 4) > a2) {
LABEL_12:
  }
    BOOL v7 = (const unsigned __int8 *)(a1 + 696);
  BOOL v11 = uuid_compare(v7 + 40, a3) == 0;
  sub_100242FAC((uint64_t)v13);
  return v11;
}

void sub_10059A098( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10059A0AC(uint64_t a1, unsigned __int8 *a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 120);
  uint64_t v4 = sub_1001FDB10(a1 + 384, a2);
  if (a1 + 392 == v4)
  {
    uint64_t v5 = 0LL;
  }

  else
  {
    char v7 = 0;
    sub_100242CA4(&v7);
    uint64_t v5 = sub_1001C8ECC(*(void *)(v4 + 48));
    sub_100242CD8(&v7);
  }

  sub_100242FAC((uint64_t)v8);
  return v5;
}

void sub_10059A134( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
}

uint64_t sub_10059A15C(uint64_t a1, unsigned __int8 *a2)
{
  if (a1 + 392 == sub_1001FDB10(a1 + 384, a2)) {
    return 255LL;
  }
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
  }
  uint64_t v3 = off_1008D5F28;
  uint64_t v4 = sub_100241F94(a2);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  BOOL v6 = !sub_1005D2760((uint64_t)v3, v5);

  return v6;
}

void sub_10059A1F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10059A200(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  if (sub_100599890(a1, a2, &v6))
  {
    char v5 = 0;
    sub_100242CA4(&v5);
    sub_1001AEB2C(v6, a3);
    sub_100242CD8(&v5);
  }

  return 1LL;
}

void sub_10059A260( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_10059A274(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  if (sub_100599890(a1, a2, &v6))
  {
    char v5 = 0;
    sub_100242CA4(&v5);
    sub_1001AFBB4(v6, a3);
    sub_100242CD8(&v5);
  }

  return 1LL;
}

void sub_10059A2EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

BOOL sub_10059A300(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1 + 120);
  BOOL v2 = *(void *)(a1 + 400) != 0LL;
  sub_100242FAC((uint64_t)v4);
  return v2;
}

id sub_10059A34C(uint64_t a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1 + 120);
  uint64_t v3 = *(const unsigned __int8 **)(a1 + 384);
  uint64_t v4 = (const unsigned __int8 **)(a1 + 392);
  if (v3 != (const unsigned __int8 *)(a1 + 392))
  {
    do
    {
      char v5 = sub_100241F94(v3 + 32);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      [v2 addObject:v6];

      char v7 = (unsigned __int8 *)*((void *)v3 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = (const unsigned __int8 **)v7;
          char v7 = *(unsigned __int8 **)v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          unint64_t v8 = (const unsigned __int8 **)*((void *)v3 + 2);
          BOOL v9 = *v8 == v3;
          uint64_t v3 = (const unsigned __int8 *)v8;
        }

        while (!v9);
      }

      uint64_t v3 = (const unsigned __int8 *)v8;
    }

    while (v8 != v4);
  }

  sub_100242FAC((uint64_t)v11);
  return v2;
}

void sub_10059A410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10059A440(uint64_t a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, a1 + 120);
  uint64_t v3 = *(const unsigned __int8 **)(a1 + 336);
  if (v3 != (const unsigned __int8 *)(a1 + 344))
  {
    do
    {
      uint64_t v4 = sub_100241F94(v3 + 25);
      char v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      [v2 addObject:v5];

      uint64_t v6 = (unsigned __int8 *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          char v7 = (const unsigned __int8 **)v6;
          uint64_t v6 = *(unsigned __int8 **)v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          char v7 = (const unsigned __int8 **)*((void *)v3 + 2);
          BOOL v8 = *v7 == v3;
          uint64_t v3 = (const unsigned __int8 *)v7;
        }

        while (!v8);
      }

      uint64_t v3 = (const unsigned __int8 *)v7;
    }

    while (v7 != (const unsigned __int8 **)(a1 + 344));
  }

  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 752) allObjects]);
  [v2 addObjectsFromArray:v9];

  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 768) allObjects]);
  [v2 addObjectsFromArray:v10];

  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 760) allObjects]);
  [v2 addObjectsFromArray:v11];

  sub_100242FAC((uint64_t)v13);
  return v2;
}

void sub_10059A56C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100242FAC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_10059A5A8(uint64_t a1, uint64_t a2)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1 + 120);
  uint64_t v4 = *(const unsigned __int8 **)(a1 + 384);
  if (v4 == (const unsigned __int8 *)(a1 + 392))
  {
LABEL_9:
    BOOL v8 = 0LL;
  }

  else
  {
    while (*((void *)v4 + 6) != a2)
    {
      char v5 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = (const unsigned __int8 **)v5;
          char v5 = *(unsigned __int8 **)v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          uint64_t v6 = (const unsigned __int8 **)*((void *)v4 + 2);
          BOOL v7 = *v6 == v4;
          uint64_t v4 = (const unsigned __int8 *)v6;
        }

        while (!v7);
      }

      uint64_t v4 = (const unsigned __int8 *)v6;
    }

    BOOL v9 = sub_100241F94(v4 + 32);
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue(v9);
  }

  sub_100242FAC((uint64_t)v11);
  return v8;
}

void sub_10059A658( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10059A66C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1 + 120);
  BOOL v10 = 0LL;
  sub_100241F90(v12, v5);
  if (sub_100599890(a1, v12, &v10))
  {
    v12[0] = 0;
    sub_100242CA4(v12);
    int v6 = sub_10008DB60(v10, (uint64_t)sub_10059A7AC, a2);
    sub_100242CD0(v12);
    if (v6 == 414) {
      unsigned int v7 = 409;
    }
    else {
      unsigned int v7 = v6 != 0;
    }
    if (v6 == 116) {
      uint64_t v8 = 10LL;
    }
    else {
      uint64_t v8 = v7;
    }
    sub_100242CD8(v12);
  }

  else
  {
    uint64_t v8 = 312LL;
  }

  sub_100242FAC((uint64_t)v11);

  return v8;
}

void sub_10059A770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _Unwind_Resume(a1);
}

void sub_10059A7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v10 = __ROR8__(a2, 32);
  uint64_t v11 = __ROR8__(a3, 32);
  uint64_t v12 = __ROR8__(a4, 32);
  uint64_t v13 = __ROR8__(a5, 32);
  uint64_t v14 = sub_100404FE8();
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  _DWORD v15[2] = sub_1005B5F34;
  uint64_t v15[3] = &unk_100886E40;
  void v15[4] = a1;
  void v15[5] = v10;
  void v15[6] = v11;
  void v15[7] = v12;
  int v16 = a6;
  uint8_t v15[8] = v13;
  _OWORD v15[9] = a7;
  sub_100405384(v14, v15);
}

uint64_t sub_10059A848(uint64_t a1, unsigned __int8 *a2)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, a1 + 120);
  uint64_t v8 = 0LL;
  unsigned __int16 v7 = 0;
  if (sub_100599890(a1, a2, &v8))
  {
    char v6 = 0;
    sub_100242CA4(&v6);
    sub_1001B998C(v8, &v7);
    sub_100242CD8(&v6);
    uint64_t v4 = v7;
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  sub_100242FAC((uint64_t)v9);
  return v4;
}

void sub_10059A8D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, char a11, uint64_t a12, char a13)
{
}

uint64_t sub_10059A8FC(uint64_t a1, unsigned __int8 *a2)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, a1 + 120);
  uint64_t v8 = 0LL;
  unsigned __int16 v7 = 10;
  if (sub_100599890(a1, a2, &v8))
  {
    char v6 = 0;
    sub_100242CA4(&v6);
    sub_1001B99EC(v8, (__int16 *)&v7);
    sub_100242CD8(&v6);
    uint64_t v4 = v7;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
      sub_1006983D4();
    }
    uint64_t v4 = 10LL;
  }

  sub_100242FAC((uint64_t)v9);
  return v4;
}

void sub_10059A9B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, char a11, uint64_t a12, char a13)
{
}

uint64_t sub_10059A9DC(uint64_t a1, unsigned __int8 *a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 120);
  uint64_t v7 = 0LL;
  if (sub_100599890(a1, a2, &v7))
  {
    char v6 = 0;
    sub_100242CA4(&v6);
    uint64_t v4 = sub_1001B9B9C(v7);
    sub_100242CD8(&v6);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  sub_100242FAC((uint64_t)v8);
  return v4;
}

void sub_10059AA60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, char a14)
{
}

uint64_t sub_10059AA88(uint64_t a1, unsigned __int8 *a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 120);
  uint64_t v7 = 0LL;
  if (sub_100599890(a1, a2, &v7))
  {
    char v6 = 0;
    sub_100242CA4(&v6);
    uint64_t v4 = sub_1001B9BE0(v7);
    sub_100242CD8(&v6);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  sub_100242FAC((uint64_t)v8);
  return v4;
}

void sub_10059AB0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, char a14)
{
}

void sub_10059AB34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  double Current = CFAbsoluteTimeGetCurrent();
  double v3 = *(double *)(v1 + 328);
  if (v3 != 0.0)
  {
    double v4 = Current;
    if (Current - v3 > 1200.0)
    {
      id v5 = (os_log_s *)qword_1008F7620;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
      {
        char v6 = "YES";
        if (*(_BYTE *)(v1 + 184)) {
          uint64_t v7 = "YES";
        }
        else {
          uint64_t v7 = "NO";
        }
        uint64_t v8 = *(void *)(v1 + 352);
        uint64_t v9 = *(int *)(v1 + 864);
        else {
          uint64_t v10 = (&off_1008A2DC0)[v9];
        }
        if (!*(_BYTE *)(v1 + 1066)) {
          char v6 = "NO";
        }
        int v11 = 134219266;
        double v12 = v4;
        __int16 v13 = 2048;
        double v14 = v3;
        __int16 v15 = 2082;
        int v16 = v7;
        __int16 v17 = 2048;
        uint64_t v18 = v8;
        __int16 v19 = 2082;
        __int16 v20 = v10;
        __int16 v21 = 2082;
        char v22 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Last address changed over 20 minutes ago (now:%f lastTime:%f fStarted:%{public}s fConnectingDevices.size():%zu fConnectionState:%{public}s fWaitForAddressChangeToComplete:%{public}s), forcing address change",  (uint8_t *)&v11,  0x3Eu);
      }

      LOBYTE(v11) = 0;
      sub_100242CA4(&v11);
      sub_1001BDAB0();
      sub_100242CD0(&v11);
      sub_100242CD8(&v11);
    }
  }

void sub_10059ACA4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10059ACC0(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4, void *a5)
{
  id v9 = a3;
  id v10 = a5;
  if (!v9)
  {
    double v14 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
      sub_100698400((uint64_t)v10, v14, v15);
    }
    v59[1] = 3221225472LL;
    __int128 v16 = *((_OWORD *)a4 + 1);
    __int128 v60 = *(_OWORD *)a4;
    v59[0] = _NSConcreteStackBlock;
    v59[2] = sub_10059B4A0;
    v59[3] = &unk_1008A24A0;
    __int16 v17 = v59;
    uint8_t v59[4] = 0LL;
    __int128 v61 = v16;
    uint64_t v13 = 22LL;
    int v62 = *((_DWORD *)a4 + 8);
    int v63 = 22;
    sub_10058C72C((os_unfair_lock_s *)a1, v59);
    goto LABEL_14;
  }

  sub_100241F90(buf, v9);
  if (a1 + 392 == sub_1001FDB10(a1 + 384, buf))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
      sub_100698474();
    }
    v54[0] = _NSConcreteStackBlock;
    v54[1] = 3221225472LL;
    void v54[2] = sub_10059B4F8;
    _OWORD v54[3] = &unk_1008A24A0;
    __int16 v17 = v54;
    v54[4] = v9;
    __int128 v18 = *((_OWORD *)a4 + 1);
    __int128 v55 = *(_OWORD *)a4;
    __int128 v56 = v18;
    uint64_t v13 = 312LL;
    int v57 = *((_DWORD *)a4 + 8);
    int v58 = 312;
    sub_10058C72C((os_unfair_lock_s *)a1, v54);
LABEL_14:
    __int16 v19 = (id *)(v17 + 4);
    goto LABEL_48;
  }

  if (*a4)
  {
    sub_100241F90(buf, v9);
    if (sub_100599D10(a1, buf))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
        sub_1006985B4();
      }
      v49[0] = _NSConcreteStackBlock;
      v49[1] = 3221225472LL;
      void v49[2] = sub_10059B550;
      void v49[3] = &unk_1008A24A0;
      int v11 = v49;
      v49[4] = v9;
      __int128 v12 = *((_OWORD *)a4 + 1);
      __int128 v50 = *(_OWORD *)a4;
      __int128 v51 = v12;
      uint64_t v13 = 1500LL;
      int v52 = *((_DWORD *)a4 + 8);
      int v53 = 1500;
      sub_10058C72C((os_unfair_lock_s *)a1, v49);
LABEL_47:
      __int16 v19 = (id *)(v11 + 4);
      goto LABEL_48;
    }
  }

  else
  {
    sub_100241F90(buf, v9);
    if (!sub_100599D10(a1, buf))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
        sub_10069854C();
      }
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472LL;
      void v44[2] = sub_10059B5A8;
      v44[3] = &unk_1008A24A0;
      int v11 = v44;
      v44[4] = v9;
      __int128 v26 = *((_OWORD *)a4 + 1);
      __int128 v45 = *(_OWORD *)a4;
      __int128 v46 = v26;
      uint64_t v13 = 1501LL;
      int v47 = *((_DWORD *)a4 + 8);
      int v48 = 1501;
      sub_10058C72C((os_unfair_lock_s *)a1, v44);
      goto LABEL_47;
    }
  }

  if (*a4)
  {
    sub_100241F90(buf, v9);
    uint64_t v64 = buf;
    sub_1005BD6B8( (uint64_t **)(a1 + 640),  buf,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v64)[6] = a2;
  }

  else
  {
    sub_100241F90(buf, v9);
    if (!sub_100599D80(a1, a2, buf))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
        sub_10069854C();
      }
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472LL;
      void v39[2] = sub_10059B600;
      v39[3] = &unk_1008A24A0;
      int v11 = v39;
      v39[4] = v9;
      __int128 v28 = *((_OWORD *)a4 + 1);
      __int128 v40 = *(_OWORD *)a4;
      __int128 v41 = v28;
      uint64_t v13 = 1502LL;
      int v42 = *((_DWORD *)a4 + 8);
      int v43 = 1502;
      sub_10058C72C((os_unfair_lock_s *)a1, v39);
      goto LABEL_47;
    }

    sub_100241F90(buf, v9);
    __int16 v27 = (uint64_t *)sub_1001FDB10(a1 + 640, buf);
    if ((uint64_t *)(a1 + 648) != v27)
    {
      sub_1001FDBCC((uint64_t **)(a1 + 640), v27);
      operator delete(v27);
    }
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10059B658;
  block[3] = &unk_10087EA48;
  id v20 = v9;
  id v38 = v20;
  if (qword_1008F1D08 != -1) {
    dispatch_once(&qword_1008F1D08, block);
  }
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
  }
  uint64_t v64 = 0LL;
  sub_100241F90(buf, v20);
  if (sub_100599890(a1, buf, &v64))
  {
    uint64_t v13 = 0LL;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
      sub_1006984D8();
    }
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_10059B810;
    v31[3] = &unk_1008A24A0;
    id v32 = v20;
    __int128 v21 = *((_OWORD *)a4 + 1);
    __int128 v33 = *(_OWORD *)a4;
    __int128 v34 = v21;
    int v35 = *((_DWORD *)a4 + 8);
    int v36 = 7;
    sub_10058C72C((os_unfair_lock_s *)a1, v31);

    uint64_t v13 = 7LL;
  }

  if ((a4[30] & 1) != 0)
  {
    if (qword_1008D6628 != -1) {
      dispatch_once(&qword_1008D6628, &stru_1008A2B90);
    }
    sub_1003339FC(qword_1008D6620, (uint64_t)v20, *(_WORD *)v64, a4[1], a4[3], a4[6], a4[29], 0);
    a4[28] |= 2u;
    char v22 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = (char)a4[3];
      int v24 = (char)a4[6];
      *(_DWORD *)__int128 buf = 138543874;
      id v66 = v20;
      __int16 v67 = 1024;
      int v68 = v23;
      __int16 v69 = 1024;
      int v70 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "RSSI Detection Enabled AOP Path  %{public}@. RSSI Further=%d Closer=%d",  buf,  0x18u);
    }
  }

  if ((a4[30] & 2) != 0)
  {
    *(_DWORD *)(a4 + 2) = 344492168;
    *((_WORD *)a4 + 3) = 5140;
  }

  uint64_t v25 = sub_1002E6E9C();
  DWORD2(v30) = *((_DWORD *)a4 + 6);
  *(void *)&__int128 v30 = *((void *)a4 + 2);
  (*(void (**)(uint64_t, void, void, void, void, void, void, void, void, unsigned __int8, void, unsigned __int8))(*(void *)v25 + 1760LL))( v25,  *a4,  *(unsigned __int16 *)v64,  a4[1],  (char)a4[2],  (char)a4[3],  (char)a4[4],  (char)a4[5],  *(void *)(a4 + 6),  a4[14],  *(void *)((char *)&v30 + 4),  a4[28]);
  __int16 v19 = &v38;
LABEL_48:

  return v13;
}