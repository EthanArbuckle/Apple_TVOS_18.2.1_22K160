uint64_t sub_1002B9E1C()
{
  return sub_100195CE8();
}

uint64_t sub_1002B9E40()
{
  v0 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109120;
    v2[1] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEFAULT,  "supportsIncomingLEConnectionsDenyList %d",  (uint8_t *)v2,  8u);
  }

  return 0LL;
}

uint64_t sub_1002B9EE0(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x8Cu);
}

uint64_t sub_1002B9F2C(uint64_t a1, int a2)
{
  v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    int v9 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "LEHardwareModel::enableIncomingLEConnectionDenyList %d",  buf,  8u);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1002BA054;
  v6[3] = &unk_10088D2A8;
  char v7 = a2;
  return sub_1002D04D0(a1, 140LL, 1, v6, 0LL);
}

uint64_t sub_1002BA054(uint64_t a1)
{
  byte_1008EFC30 = *(_BYTE *)(a1 + 32);
  return sub_100195E04();
}

uint64_t sub_1002BA06C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x8Au);
}

uint64_t sub_1002BA0B8(_DWORD *a1, uint64_t a2)
{
  v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    id v5 = sub_1005BFB9C(a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    *(_DWORD *)buf = 138412290;
    v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "LEHardwareModel::addAddressToIncomingLEConnectionDenyList %@",  buf,  0xCu);
  }

  uint64_t v7 = sub_1002B9F2C((uint64_t)a1, 1);
  if (!(_DWORD)v7)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1002BA21C;
    v10[3] = &unk_10088D3C8;
    v10[4] = a2;
    uint64_t v7 = sub_1002D04D0((uint64_t)a1, 138LL, 1, v10, 0LL);
    int v8 = a1[360];
    if (!(_DWORD)v7 || v8) {
      a1[360] = v8 + 1;
    }
    else {
      sub_1002B9F2C((uint64_t)a1, 0);
    }
  }

  return v7;
}

uint64_t sub_1002BA21C(uint64_t a1)
{
  return sub_100195E8C(*(void *)(a1 + 32));
}

uint64_t sub_1002BA22C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x8Bu);
}

uint64_t sub_1002BA278(_DWORD *a1, uint64_t a2)
{
  v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    id v5 = sub_1005BFB9C(a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    *(_DWORD *)buf = 138412290;
    v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "LEHardwareModel::removeAddressFromIncomingLEConnectionDenyList %@",  buf,  0xCu);
  }

  if (!a1[360]) {
    return 12LL;
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1002BA3D0;
  v9[3] = &unk_10088D3C8;
  v9[4] = a2;
  uint64_t result = sub_1002D04D0((uint64_t)a1, 139LL, 1, v9, 0LL);
  if (!(_DWORD)result)
  {
    int v8 = a1[360] - 1;
    a1[360] = v8;
    if (!v8) {
      sub_1002B9F2C((uint64_t)a1, 0);
    }
    return 0LL;
  }

  return result;
}

uint64_t sub_1002BA3D0(uint64_t a1)
{
  return sub_100195F20(*(void *)(a1 + 32));
}

uint64_t sub_1002BA3E0(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x8Du);
}

uint64_t sub_1002BA42C(_DWORD *a1)
{
  v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "LEHardwareModel::clearIncomingLEConnectionDenyList()",  v4,  2u);
  }

  a1[360] = 0;
  uint64_t result = sub_1002D04D0((uint64_t)a1, 141LL, 1, &stru_10088DA88, 0LL);
  if (!(_DWORD)result)
  {
    sub_1002B9F2C((uint64_t)a1, 0);
    return 0LL;
  }

  return result;
}

int sub_1002BA4E4(id a1)
{
  return sub_100195FB4();
}

uint64_t sub_1002BA4F0(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x107u);
}

uint64_t sub_1002BA53C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x109u);
}

uint64_t sub_1002BA588( uint64_t *a1, uint64_t a2, int a3, __int16 a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8, __int16 a9, uint64_t a10, char a11, char a12, char a13, char a14)
{
  uint64_t v19 = sub_1002E6E9C();
  if (sub_1002D11F0(v19))
  {
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_1002BA71C;
    v26[3] = &unk_10088D8F8;
    char v33 = a14;
    char v34 = a3;
    __int16 v27 = a4;
    __int16 v28 = a5;
    __int16 v29 = a6;
    __int16 v30 = a7;
    __int16 v31 = a8;
    __int16 v32 = a9;
    v26[4] = a2;
    v26[5] = a10;
    char v35 = a11;
    char v36 = a12;
    char v37 = a13;
    return sub_1002D04D0((uint64_t)a1, 263LL, 1, v26, 0LL);
  }

  else
  {
    uint64_t v21 = *a1;
    if (a3) {
      v22 = *(uint64_t (**)(void))(v21 + 1120);
    }
    else {
      v22 = *(uint64_t (**)(void))(v21 + 1800);
    }
    return v22();
  }

uint64_t sub_1002BA71C(uint64_t a1)
{
  __int16 v12 = 0;
  int v11 = 0;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v8 = 0u;
  v1 = *(char **)(a1 + 32);
  char v2 = *v1;
  *((void *)&v8 + 1) = v1 + 1;
  BYTE1(v8) = v2;
  int v3 = *(unsigned __int8 *)(a1 + 60);
  BYTE11(v10) = *(_BYTE *)(a1 + 60);
  char v4 = *(_BYTE *)(a1 + 61);
  if (v4)
  {
    *(void *)((char *)&v9 + 2) = *(void *)(a1 + 48);
    *(_DWORD *)((char *)&v9 + 10) = *(_DWORD *)(a1 + 56);
    char v4 = 1;
    LOBYTE(v9) = 1;
  }

  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5 || (v11 == *(_DWORD *)(v5 + 1) ? (BOOL v6 = v12 == *(_WORD *)(v5 + 5)) : (BOOL v6 = 0), v6))
  {
    BYTE14(v9) = -1;
    *(void *)&__int128 v10 = &v11;
  }

  else
  {
    BYTE14(v9) = *(_BYTE *)v5;
    *(void *)&__int128 v10 = v5 + 1;
    v4 |= 2u;
    LOBYTE(v9) = v4;
  }

  if (*(_BYTE *)(a1 + 62))
  {
    BYTE8(v10) = *(_BYTE *)(a1 + 62);
    v4 |= 4u;
    LOBYTE(v9) = v4;
  }

  if (*(_BYTE *)(a1 + 63))
  {
    BYTE9(v10) = *(_BYTE *)(a1 + 63);
    v4 |= 8u;
    LOBYTE(v9) = v4;
  }

  if (*(_BYTE *)(a1 + 64))
  {
    BYTE10(v10) = *(_BYTE *)(a1 + 64);
    v4 |= 0x10u;
    LOBYTE(v9) = v4;
  }

  if (v3) {
    LOBYTE(v9) = v4 | 0x20;
  }
  return sub_10019603C((uint64_t)&v8);
}

uint64_t sub_1002BA828( uint64_t a1, unsigned int a2, const void *a3, unsigned int a4, uint64_t (*a5)(void, void, void, void), uint64_t a6)
{
  v17[0] = 0LL;
  v17[1] = 0LL;
  sub_100242F28((uint64_t)v17, a1 + 72);
  char v16 = 0;
  sub_100242CA4(&v16);
  uint64_t v14 = sub_100196204(a2, a3, a4, a5, a6, v11, v12, v13);
  sub_100242CD8(&v16);
  sub_100242FAC((uint64_t)v17);
  return v14;
}

void sub_1002BA8B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
}

uint64_t sub_1002BA8DC(uint64_t a1, __int16 a2, __int16 a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002BA93C;
  v4[3] = &unk_10088D508;
  __int16 v5 = a2;
  __int16 v6 = a3;
  return sub_1002D04D0(a1, 265LL, 1, v4, 0LL);
}

uint64_t sub_1002BA93C()
{
  return sub_1001960E4();
}

uint64_t sub_1002BA954(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x10Bu);
}

uint64_t sub_1002BA9A0(uint64_t a1, char a2, uint64_t a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002BAA00;
  v4[3] = &unk_10088D268;
  char v5 = a2;
  void v4[4] = a3;
  return sub_1002D04D0(a1, 267LL, 1, v4, 0LL);
}

uint64_t sub_1002BAA00(uint64_t a1)
{
  return sub_10019616C(*(unsigned __int8 *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1002BAA18(int a1)
{
  char v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Init Done callback status=%d", (uint8_t *)v4, 8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x8Fu);
}

uint64_t sub_1002BAAEC(uint64_t a1)
{
  return sub_1002D04D0(a1, 143LL, 1, &stru_10088DAA8, 0LL);
}

int sub_1002BAB04(id a1)
{
  return sub_100196284();
}

uint64_t sub_1002BAB10(int a1)
{
  char v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Set Random Seed callback status=%d",  (uint8_t *)v4,  8u);
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x90u);
}

uint64_t sub_1002BABE4(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1002BAC40;
  v3[3] = &unk_10088D3C8;
  v3[4] = a2;
  return sub_1002D04D0(a1, 144LL, 1, v3, 0LL);
}

uint64_t sub_1002BAC40()
{
  return sub_100196394();
}

uint64_t sub_1002BAC50( int a1, __int16 a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8, __int16 a9)
{
  v17 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    v19[0] = 67109120;
    v19[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "Get FW Versions callback status=%d",  (uint8_t *)v19,  8u);
  }

  LOWORD(xmmword_1008EFA30) = a2;
  WORD1(xmmword_1008EFA30) = a3;
  WORD2(xmmword_1008EFA30) = a4;
  WORD3(xmmword_1008EFA30) = a5;
  WORD4(xmmword_1008EFA30) = a6;
  WORD5(xmmword_1008EFA30) = a7;
  WORD6(xmmword_1008EFA30) = a8;
  HIWORD(xmmword_1008EFA30) = a9;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x8Eu);
}

uint64_t sub_1002BAD8C(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1002BADF8;
  v3[3] = &unk_10087EB20;
  v3[4] = a2;
  return sub_1002D04D0(a1, 142LL, 1, &stru_10088DAC8, v3);
}

int sub_1002BADEC(id a1)
{
  return sub_10019630C();
}

double sub_1002BADF8(uint64_t a1)
{
  double result = *(double *)&xmmword_1008EFA30;
  *(_OWORD *)*(void *)(a1 + 32) = xmmword_1008EFA30;
  return result;
}

uint64_t sub_1002BAE0C(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088DAE8);
  }
  return sub_1004335B8(a1, 0x10Du);
}

uint64_t sub_1002BAE58(uint64_t a1, uint64_t a2, char a3, int *a4, uint64_t a5)
{
  uint64_t v8 = a1;
  int v9 = *a4;
  if (*a4 == 129)
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_1002BB238;
    v22[3] = &unk_10088D288;
    v22[4] = a4;
    v22[5] = a2;
    char v23 = a3;
    uint64_t v11 = 1LL;
    sub_1002D04D0(a1, 236LL, 1, v22, 0LL);
  }

  else
  {
    if (v9 == 128)
    {
      BOOL v12 = *((_BYTE *)a4 + 20) != 0;
      if (*((_BYTE *)a4 + 27))
      {
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472LL;
        v25[2] = sub_1002BB1FC;
        v25[3] = &unk_10088D5E8;
        v25[4] = a2;
        v25[5] = a4;
        uint64_t v13 = v25;
        uint64_t v14 = 40LL;
      }

      else
      {
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472LL;
        v24[2] = sub_1002BB214;
        v24[3] = &unk_10088D5E8;
        v24[4] = a2;
        v24[5] = a4;
        uint64_t v13 = v24;
        uint64_t v14 = 32LL;
      }

      return sub_1002D04D0(a1, v14, v12, v13, 0LL);
    }

    if (v9)
    {
      return 1LL;
    }

    else
    {
      if ((*((_BYTE *)a4 + 21) & 1) != 0)
      {
        BOOL v15 = *((_BYTE *)a4 + 20) != 0;
        v31[0] = _NSConcreteStackBlock;
        v31[1] = 3221225472LL;
        v31[2] = sub_1002BB13C;
        v31[3] = &unk_10088D288;
        v31[4] = a5;
        v31[5] = a4;
        char v32 = a3;
        int v10 = sub_1002D04D0(a1, 4LL, v15, v31, 0LL);
      }

      else
      {
        int v10 = 1;
      }

      if (v10) {
        BOOL v16 = v10 == 3603;
      }
      else {
        BOOL v16 = 1;
      }
      int v17 = v16;
      uint64_t v11 = v17 ^ 1u;
      int v18 = a4[1];
      if ((v18 & 1) != 0 && v17 && *((_BYTE *)a4 + 16))
      {
        BOOL v19 = *((_BYTE *)a4 + 20) != 0;
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472LL;
        v30[2] = sub_1002BB18C;
        v30[3] = &unk_10088D3C8;
        v30[4] = a4;
        uint64_t v11 = sub_1002D04D0(v8, 172LL, v19, v30, 0LL);
        int v18 = a4[1];
      }

      if ((v18 & 4) != 0)
      {
        BOOL v20 = *((_BYTE *)a4 + 20) != 0;
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472LL;
        v28[2] = sub_1002BB1AC;
        v28[3] = &unk_10088D268;
        char v29 = a3;
        v28[4] = a4;
        uint64_t v11 = sub_1002D04D0(v8, 167LL, v20, v28, 0LL);
      }

      if ((*((_BYTE *)a4 + 21) & 2) != 0)
      {
        BOOL v12 = *((_BYTE *)a4 + 20) != 0;
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472LL;
        v26[2] = sub_1002BB1D8;
        v26[3] = &unk_10088D268;
        v26[4] = a2;
        char v27 = a3;
        uint64_t v13 = v26;
        a1 = v8;
        uint64_t v14 = 5LL;
        return sub_1002D04D0(a1, v14, v12, v13, 0LL);
      }
    }
  }

  return v11;
}

uint64_t sub_1002BB13C(uint64_t a1)
{
  int v4 = 0;
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(_BYTE *)(v1 + 20)) {
    char v2 = sub_1002A714C;
  }
  else {
    char v2 = 0LL;
  }
  return sub_10018F980(*(void *)(a1 + 32), *(unsigned int *)(v1 + 12), *(_BYTE *)(a1 + 48) != 0, &v4, (uint64_t)v2);
}

uint64_t sub_1002BB18C()
{
  return sub_10018CF08();
}

uint64_t sub_1002BB1AC()
{
  return sub_10018C694();
}

uint64_t sub_1002BB1D8(uint64_t a1)
{
  return sub_1001912E0(*(void *)(a1 + 32) + 48LL);
}

uint64_t sub_1002BB1FC(uint64_t a1)
{
  return sub_1001913B0(*(void *)(a1 + 32), *(unsigned __int8 *)(*(void *)(a1 + 40) + 27LL), (uint64_t)sub_1002A3CA0);
}

uint64_t sub_1002BB214(uint64_t a1)
{
  return sub_100190F28( *(unsigned __int16 **)(a1 + 32),  *(_BYTE *)(*(void *)(a1 + 40) + 28LL) != 0,  0LL,  (uint64_t)sub_1002A3BD4);
}

uint64_t sub_1002BB238()
{
  return sub_10018E1E8();
}

uint64_t sub_1002BB268(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  int v4 = *(_DWORD *)a4;
  uint64_t v5 = 1LL;
  if (*(int *)a4 <= 127)
  {
    if (v4)
    {
      if (v4 == 1)
      {
        uint64_t v6 = a4 + 23;
        __int16 v7 = 4;
LABEL_11:
        BOOL v8 = *(_BYTE *)(a4 + 20) != 0;
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472LL;
        v10[2] = sub_1002BB338;
        v10[3] = &unk_10088D5A8;
        char v12 = a3;
        v10[4] = a2;
        void v10[5] = a4;
        __int16 v11 = v7;
        v10[6] = v6;
        return sub_1002D04D0(a1, 269LL, v8, v10, 0LL);
      }

      return v5;
    }

    uint64_t v6 = a4 + 21;
LABEL_10:
    __int16 v7 = 2;
    goto LABEL_11;
  }

  if (v4 == 128)
  {
    uint64_t v6 = a4 + 27;
    goto LABEL_10;
  }

  if (v4 == 129)
  {
    uint64_t v6 = a4 + 29;
    __int16 v7 = 3;
    goto LABEL_11;
  }

  return v5;
}

uint64_t sub_1002BB338()
{
  return sub_10019641C();
}

uint64_t sub_1002BB360(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  if (!a5)
  {
    int v10 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
      sub_1006684CC(v10, v11, v12, v13, v14, v15, v16, v17);
    }
  }

  char v22 = 0;
  sub_100242CA4(&v22);
  uint64_t v18 = sub_10012D9F4(a2);
  sub_100242CD0(&v22);
  if (v18)
  {
    *(_BYTE *)(a5 + 20) = a4;
    else {
      uint64_t v19 = sub_1002BAE58(a1, v18, a3, (int *)a5, a2);
    }
    uint64_t v20 = v19;
  }

  else
  {
    uint64_t v20 = 12LL;
  }

  sub_100242CD8(&v22);
  return v20;
}

void sub_1002BB454( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1002BB468(uint64_t a1, uint64_t a2, int a3, char a4, char a5)
{
  if (!a2 || a3 != 128)
  {
    int v9 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
      sub_10066853C(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }

  *(_DWORD *)a2 = a3;
  *(_BYTE *)(a2 + 27) = a4;
  *(_BYTE *)(a2 + 28) = a5;
}

void sub_1002BB4E0(uint64_t a1, uint64_t a2, int a3, char a4, int a5, int a6, int a7, int a8, char a9)
{
  if (!a2 || a3)
  {
    uint64_t v16 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
      sub_1006685AC(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }

  *(_DWORD *)a2 = a3;
  *(_DWORD *)(a2 + 4) = a5;
  *(_DWORD *)(a2 + 8) = a6;
  *(_DWORD *)(a2 + 12) = a7;
  *(_BYTE *)(a2 + 16) = a8;
  *(_BYTE *)(a2 + 17) = a9;
  *(_BYTE *)(a2 + 21) = a4;
  *(_BYTE *)(a2 + 22) = 0;
  if ((a5 & 1) != 0 && a8)
  {
    if (a6 == 22 || a6 == 17) {
      char v25 = 60;
    }
    else {
      char v25 = 45;
    }
    int v32 = 0;
    if (a9) {
      LOBYTE(v26) = 75;
    }
    else {
      LOBYTE(v26) = v25;
    }
    uint64_t v27 = sub_1002E6E00();
    sub_10002418C(buf, "ePA");
    sub_10002418C(__p, "iPAMaxThreshold");
    int v28 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v27 + 88LL))(v27, buf, __p, &v32);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    if (v34 < 0)
    {
      operator delete(*(void **)buf);
      if (!v28)
      {
LABEL_24:
        *(_BYTE *)(a2 + 22) = v26;
        return;
      }
    }

    else if (!v28)
    {
      goto LABEL_24;
    }

    int v26 = -v32;
    char v29 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Warning: Setting user defined iPA-Max threshold to -%d dBm through defaults write",  buf,  8u);
    }

    goto LABEL_24;
  }

void sub_1002BB6A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002BB6E4(uint64_t a1, uint64_t a2, int a3, __int16 a4, char a5, char a6)
{
  if (!a2 || a3 != 1)
  {
    uint64_t v11 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
      sub_10066861C(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }

  *(_DWORD *)a2 = a3;
  *(_WORD *)(a2 + 23) = a4;
  *(_BYTE *)(a2 + 25) = a5;
  *(_BYTE *)(a2 + 26) = a6;
}

void sub_1002BB764(uint64_t a1, uint64_t a2, int a3, char a4, __int16 a5)
{
  if (!a2 || a3 != 129)
  {
    int v9 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
      sub_10066868C(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }

  *(_DWORD *)a2 = a3;
  *(_BYTE *)(a2 + 29) = a4;
  *(_WORD *)(a2 + 30) = a5;
}

BOOL sub_1002BB7DC(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  return v1 >= 0x7D0 && v1 <= 0xF9F && v1 != 2000;
}

void sub_1002BB810(uint64_t a1)
{
  unsigned int v1 = (void *)sub_10029BF58(a1);
  operator delete(v1);
}

uint64_t sub_1002BB824()
{
  return 0LL;
}

uint64_t sub_1002BB82C()
{
  return 0LL;
}

uint64_t sub_1002BB834()
{
  return 1LL;
}

uint64_t sub_1002BB83C()
{
  return 0LL;
}

uint64_t sub_1002BB844()
{
  return 0LL;
}

uint64_t sub_1002BB84C()
{
  return 0LL;
}

uint64_t sub_1002BB854()
{
  return 0LL;
}

uint64_t sub_1002BB85C()
{
  return 0LL;
}

uint64_t sub_1002BB864()
{
  return 0LL;
}

uint64_t sub_1002BB86C()
{
  return 0LL;
}

uint64_t sub_1002BB874()
{
  return 2LL;
}

uint64_t sub_1002BB87C()
{
  return 2LL;
}

uint64_t sub_1002BB884()
{
  return 2LL;
}

uint64_t sub_1002BB88C()
{
  return 2LL;
}

uint64_t sub_1002BB894()
{
  return 2LL;
}

uint64_t sub_1002BB89C()
{
  return 2LL;
}

uint64_t sub_1002BB8A4()
{
  return 2LL;
}

uint64_t sub_1002BB8AC()
{
  return 2LL;
}

uint64_t sub_1002BB8B4()
{
  return 2LL;
}

uint64_t sub_1002BB8BC()
{
  return 2LL;
}

uint64_t sub_1002BB8C4()
{
  return 1LL;
}

void sub_1002BB8CC(id a1)
{
  unsigned int v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_1002BB8FC(_Unwind_Exception *a1)
{
}

void sub_1002BB910(id a1)
{
  unsigned int v1 = operator new(0x1128uLL);
  sub_1005DDADC();
  off_1008D6600 = v1;
}

void sub_1002BB940(_Unwind_Exception *a1)
{
}

void sub_1002BB954(id a1)
{
  unsigned int v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_1002BB984(_Unwind_Exception *a1)
{
}

uint64_t *sub_1002BB998(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002BB9EC(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1002BB9D4(_Unwind_Exception *a1)
{
}

uint64_t *sub_1002BB9EC(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    int v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      double result = sub_1002BBA70(v5, v6, v4 + 4, v4 + 4);
      __int16 v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          __int16 v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          BOOL v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          int v4 = v8;
        }

        while (!v9);
      }

      int v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_1002BBA70(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v6 = (uint64_t **)sub_100268054(a1, a2, &v11, &v10, a3);
  __int16 v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = v6;
    __int16 v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    sub_100029630(a1, v11, v8, v7);
  }

  return v7;
}

void sub_1002BBAF8(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_1002BBB28(_Unwind_Exception *a1)
{
}

void sub_1002BBB3C(id a1)
{
  uint64_t v1 = (char *)operator new(0x200uLL);
  *(void *)uint64_t v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 18) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 108) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 28) = v1 + 232;
  *((void *)v1 + 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 58) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_1002BBC44(_Unwind_Exception *a1)
{
}

void sub_1002BBC58(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_1002BBC88(_Unwind_Exception *a1)
{
}

void sub_1002BBC9C(id a1)
{
  qword_1008D9160 = (uint64_t)operator new(1uLL);
}

void sub_1002BBCBC(id a1)
{
  uint64_t v1 = operator new(0x58uLL);
  sub_100242DC4(v1);
  v1[10] = 0LL;
  v1[9] = 0LL;
  v1[8] = v1 + 9;
  qword_1008D6770 = (uint64_t)v1;
}

void sub_1002BBCFC(_Unwind_Exception *a1)
{
}

void sub_1002BBD10(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100256C70();
  qword_1008D6168 = (uint64_t)v1;
}

void sub_1002BBD40(_Unwind_Exception *a1)
{
}

void sub_1002BBD54(id a1)
{
  uint64_t v1 = operator new(0x88uLL);
  v1[2] = 0LL;
  void *v1 = @"com.apple.MobileAsset.MobileBluetoothAssets";
  v1[1] = v1 + 2;
  v1[3] = 0LL;
  *((_DWORD *)v1 + 8) = 0;
  v1[5] = 0LL;
  v1[6] = 0LL;
  v1[7] = 0LL;
  sub_100242DC4(v1 + 8);
  *((_BYTE *)v1 + 128) = 0;
  qword_1008D92B8 = (uint64_t)v1;
}

void sub_1002BBDC4(_Unwind_Exception *a1)
{
  int v4 = v3;
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 48) = v6;
    operator delete(v6);
  }

  sub_1002948EC(v2, *(void **)(v1 + 16));

  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_1002BBE00(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  __int16 v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        __int16 v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        __int16 v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    BOOL v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_BYTE *)v11 + 32) = 0;
    sub_100029630(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

uint64_t sub_1002BBEC0(uint64_t a1, const char *a2)
{
  uint64_t v4 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 8LL))(v4))
  {
    unsigned int v22 = 0;
    uint64_t v5 = sub_1002E6E00();
    sub_10002418C(buf, "HWRepair");
    sub_10002418C(__p, "BlueToolBTResult");
    char v6 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned int *))(*(void *)v5 + 88LL))( v5,  buf,  __p,  &v22);
    if (v22) {
      char v7 = v6;
    }
    else {
      char v7 = 0;
    }
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v25) < 0)
    {
      operator delete(*(void **)buf);
      if ((v7 & 1) != 0)
      {
LABEL_9:
        int v8 = (os_log_s *)qword_1008F7578;
        BOOL v9 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
        uint64_t v10 = v22;
        if (v9)
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v22;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Using override value (%d) for runBlueTool BTResult",  buf,  8u);
          return v22;
        }

        return v10;
      }
    }

    else if ((v7 & 1) != 0)
    {
      goto LABEL_9;
    }
  }

  __uint64_t v11 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  *(void *)buf = 0LL;
  v24 = buf;
  uint64_t v25 = 0x2020000000LL;
  int v26 = 0;
  uint64_t v12 = operator new(0x28uLL);
  sub_100207EC0((int)v12, a1 + 8, "com.apple.BlueTool", 0LL);
  xpc_object_t v13 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_string(v13, "script", a2);
  if (*(_BYTE *)(a1 + 80))
  {
LABEL_13:
    sub_1003FE1B4((unsigned __int8 *)(a1 + 80), __p);
    if (v21 >= 0) {
      uint64_t v14 = __p;
    }
    else {
      uint64_t v14 = (void **)__p[0];
    }
    xpc_dictionary_set_string(v13, "btaddress", (const char *)v14);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    uint64_t v15 = 0LL;
    while (v15 != 5)
    {
      if (*(unsigned __int8 *)(a1 + 81 + v15++))
      {
        break;
      }
    }
  }

  sub_1002BC234(a1);
  sub_100207EFC((uint64_t)v12);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  _DWORD v19[2] = sub_1002BC330;
  v19[3] = &unk_10088DD68;
  v19[4] = buf;
  v19[5] = a1;
  v19[6] = a2;
  v19[7] = v11;
  sub_100208214((uint64_t)v12, "RunBuiltinScript", v13, v19);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_1002BC610;
  v18[3] = &unk_10087EB20;
  v18[4] = v12;
  sub_100207FA8((uint64_t)v12, v18);
  sub_1002BC634(a1);
  sub_1002BC778(a1, *((_DWORD *)v24 + 6));
  uint64_t v10 = *((unsigned int *)v24 + 6);
  _Block_object_dispose(buf, 8);
  return v10;
}

void sub_1002BC1B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002BC234(uint64_t a1)
{
  if (*(void *)(a1 + 120))
  {
    uint64_t v2 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
      sub_1006686FC(v2);
    }
  }

  int v3 = sub_1002E91F8(4LL, 8LL, 0LL);
  *(void *)(a1 + 120) = v3;
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (os_log_s *)qword_1008F7668;
    if (os_log_type_enabled((os_log_t)qword_1008F7668, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v4 + 16LL))(v4);
      int v7 = 136315138;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Creating %s", (uint8_t *)&v7, 0xCu);
    }
  }

uint64_t sub_1002BC330(void *a1, xpc_object_t object)
{
  uint64_t v4 = a1[5];
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    int64_t int64 = xpc_dictionary_get_int64(object, "result");
    uint64_t v15 = int64;
    BOOL v17 = int64 == 10 || int64 == 13;
    if (int64)
    {
      uint64_t v18 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_100668778((uint64_t)a1, v15, v18);
      }
    }

    else
    {
      unsigned int v22 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = a1[6];
        *(_DWORD *)__str = 136446210;
        *(void *)&__str[4] = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "BlueTool finished running %{public}s script",  (uint8_t *)__str,  0xCu);
      }
    }

    if (v17) {
      int v19 = 2;
    }
    else {
      int v19 = 1;
    }
    if (!v15) {
      int v19 = 0;
    }
    *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL) = v19;
    *(_DWORD *)(v4 + 128) = *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL);
    string = xpc_dictionary_get_string(object, "firmware");
    int64_t v21 = xpc_dictionary_get_int64(object, "manufacturer");
    if (string) {
      std::string::assign((std::string *)(v4 + 96), string);
    }
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    *(_OWORD *)__str = 0u;
    __int128 v25 = 0u;
    snprintf(__str, 0x80uLL, "%lld/%s", v21, string);
    clock_gettime_nsec_np(_CLOCK_MONOTONIC);
    uint64_t result = sub_1002E8D94();
    if (result)
    {
      xpc_object_t v13 = *(uint64_t (**)(void))(*(void *)sub_1002E8D94() + 64LL);
      return v13();
    }
  }

  else
  {
    uint64_t v5 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100668828((uint64_t)a1, v5, v6, v7, v8, v9, v10, v11);
    }
    *(_DWORD *)(v4 + 128) = 213;
    *(_DWORD *)(*(void *)(a1[4] + 8LL) + 24LL) = 1;
    clock_gettime_nsec_np(_CLOCK_MONOTONIC);
    uint64_t result = sub_1002E8D94();
    if (result)
    {
      xpc_object_t v13 = *(uint64_t (**)(void))(*(void *)sub_1002E8D94() + 64LL);
      return v13();
    }
  }

  return result;
}

void sub_1002BC610(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = (void *)sub_100207EF8(v1);
    operator delete(v2);
  }

void sub_1002BC634(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2
    || (uint64_t v5 = (os_log_s *)qword_1008F7578, os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT))
    && (int v6 = 136446210,
        uint64_t v7 = "fPowerAssertion != NULL",
        _os_log_fault_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Assertion failed: %{public}s",  (uint8_t *)&v6,  0xCu),  (uint64_t v2 = *(void *)(a1 + 120)) != 0))
  {
    int v3 = (os_log_s *)qword_1008F7668;
    if (!os_log_type_enabled((os_log_t)qword_1008F7668, OS_LOG_TYPE_DEFAULT)
      || (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16LL))(v2),
          int v6 = 136315138,
          uint64_t v7 = (const char *)v4,
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Destroying %s", (uint8_t *)&v6, 0xCu),
          (uint64_t v2 = *(void *)(a1 + 120)) != 0))
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }

    *(void *)(a1 + 120) = 0LL;
  }

void sub_1002BC778(uint64_t a1, int a2)
{
  if (a2)
  {
    if (!*(_BYTE *)(a1 + 132))
    {
      int v3 = dword_1008EFC38++;
      __uint64_t v4 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
      uint64_t v5 = v4;
      if (v3)
      {
        if (v4 > qword_1008EFC40 + 5000000000LL)
        {
          int v6 = (os_log_s *)qword_1008F7578;
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEBUG)) {
            sub_1006689F8(v5, v6, v7);
          }
          int v8 = dword_1008EFC38;
          if (dword_1008EFC38 < 0xB)
          {
            dword_1008EFC38 = 0;
            uint64_t v11 = (os_log_s *)qword_1008F7578;
            if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEBUG)) {
              sub_100668984(v11);
            }
          }

          else
          {
            uint64_t v9 = (os_log_s *)qword_1008F7578;
            if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEBUG)) {
              sub_100668900(v5, v8, v9);
            }
            *(_BYTE *)(a1 + 132) = 1;
          }
        }
      }

      else
      {
        qword_1008EFC40 = v4;
        uint64_t v10 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEBUG)) {
          sub_100668890(v5, v10);
        }
      }
    }
  }

  else
  {
    dword_1008EFC38 = 0;
    *(_BYTE *)(a1 + 132) = 0;
  }

uint64_t sub_1002BC8BC(int a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v8 = operator new(0x28uLL);
  sub_100207EC0((int)v8, a1 + 8, "com.apple.BlueTool", 0LL);
  uint64_t v14 = 0LL;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000LL;
  int v17 = 0;
  xpc_object_t v9 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_string(v9, "command", a2);
  sub_100207EFC((uint64_t)v8);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1002BCA24;
  v13[3] = &unk_10088DD68;
  v13[6] = a4;
  v13[7] = a2;
  v13[4] = &v14;
  v13[5] = a3;
  sub_100208214((uint64_t)v8, "RunCommand", v9, v13);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1002BCB54;
  v12[3] = &unk_10087EB20;
  v12[4] = v8;
  sub_100207FA8((uint64_t)v8, v12);
  uint64_t v10 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v10;
}

void sub_1002BC9FC(_Unwind_Exception *a1)
{
}

void sub_1002BCA24(uint64_t a1, xpc_object_t object)
{
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    string = xpc_dictionary_get_string(object, "output");
    if (string) {
      strlcpy(*(char **)(a1 + 40), string, *(void *)(a1 + 48));
    }
    uint64_t v12 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 56);
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = 136446466;
      uint64_t v16 = v13;
      __int16 v17 = 2082;
      uint64_t v18 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "BlueTool finished running %{public}s command - output was %{public}s",  (uint8_t *)&v15,  0x16u);
    }
  }

  else
  {
    __uint64_t v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100668A74(a1, v4, v5, v6, v7, v8, v9, v10);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }

void sub_1002BCB54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = (void *)sub_100207EF8(v1);
    operator delete(v2);
  }

uint64_t sub_1002BCB78(const std::string *a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Booting chipset", v5, 2u);
  }

  uint64_t v3 = sub_1002BCC38(a1);
  (*(void (**)(const std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 144))(a1, v3);
  else {
    return (*(uint64_t (**)(const std::string *))(a1->__r_.__value_.__r.__words[0] + 136))(a1);
  }
}

uint64_t sub_1002BCC38(const std::string *a1)
{
  __int16 v29 = 0;
  int v28 = 0;
  sub_10011F19C((uint64_t)&v28);
  char v27 = 0;
  uint64_t v4 = sub_1002E6E00();
  sub_10002418C(__p, "ChipBoot");
  sub_10002418C(&buf, "DisableInitChipSimpleFast");
  (*(void (**)(uint64_t, _BYTE *, std::string *, char *))(*(void *)v4 + 72LL))(v4, __p, &buf, &v27);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v5 = (os_log_s *)qword_1008F7578;
  if (v27)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100668B14();
    }
    return 11LL;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Booting chipset simple and fast", __p, 2u);
  }

  __uint64_t v6 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  int v26 = 0;
  __int128 v25 = 0LL;
  memset(&__p[4], 0, 60);
  *(_DWORD *)__p = 1818845542;
  uint64_t v7 = sub_1002E8D54();
  sub_10002418C(v23, ".bin");
  p_data = (void **)&a1[4].__r_.__value_.__l.__data_;
  uint64_t v2 = (*(uint64_t (**)(uint64_t, void **, void **, int *, const std::string *))(*(void *)v7 + 408LL))( v7,  v23,  &v25,  &v26,  a1 + 4);
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if ((_DWORD)v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
      sub_100668ADC();
    }
    goto LABEL_28;
  }

  unsigned int v9 = sub_1000FC2BC();
  if (!v9)
  {
    uint64_t v10 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Function Level Reset (FLR) of Bluetooth PCIe transport -- Completed",  (uint8_t *)&buf,  2u);
    }

    int v11 = sub_1000FC2D4();
    if (!v11)
    {
      int v15 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "PCIe successfully transferred firmware image file",  (uint8_t *)&buf,  2u);
      }

      if (!std::string::compare(a1 + 4, 0LL, 0xEuLL, "/etc/bluetool/"))
      {
        *(_OWORD *)__p = *(_OWORD *)"override";
        memset(&__p[16], 0, 48);
      }

      else
      {
        uint64_t v16 = sub_1002E8D54();
        (*(void (**)(std::string *__return_ptr))(*(void *)v16 + 344LL))(&buf);
        if ((char)buf.__r_.__value_.__s.__size_ < 0)
        {
          __int16 v17 = (void *)buf.__r_.__value_.__r.__words[0];
          strncpy(__p, buf.__r_.__value_.__l.__data_, 0x40uLL);
          operator delete(v17);
        }

        else
        {
          strncpy(__p, (const char *)&buf, 0x40uLL);
        }

        __p[63] = 0;
        std::string::size_type v18 = std::string::rfind(a1 + 4, 47, 0xFFFFFFFFFFFFFFFFLL);
        std::string::basic_string(&buf, a1 + 4, v18 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v30);
        *(_OWORD *)p_data = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        a1[4].__r_.__value_.__l.__cap_ = buf.__r_.__value_.__l.__cap_;
      }

      int v19 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_data;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Setting firmware filename to %s",  (uint8_t *)&buf,  0xCu);
      }

      uint64_t v20 = sub_1002E6B38();
      (*(void (**)(uint64_t, int *))(*(void *)v20 + 32LL))(v20, &v28);
      sub_10011F19C((uint64_t)&v28);
      int64_t v21 = (os_log_s *)qword_1008F7578;
      uint64_t v2 = 0LL;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003FE1B4((unsigned __int8 *)&v28, &buf);
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)__int128 v30 = 136315138;
        __int128 v31 = p_buf;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Providing the local device address of %s",  v30,  0xCu);
        uint64_t v2 = 0LL;
      }

      goto LABEL_28;
    }

    if (v11 != 1220)
    {
      uint64_t v2 = 2410LL;
      goto LABEL_28;
    }

    goto LABEL_27;
  }

  if (v9 == 1220)
  {
LABEL_27:
    uint64_t v2 = 2411LL;
    goto LABEL_28;
  }

  uint64_t v2 = 2408LL;
LABEL_28:
  if (v25) {
    free(v25);
  }
  uint64_t v12 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Booting chipset simple and fast returns %d",  (uint8_t *)&buf,  8u);
  }

  __uint64_t v13 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  if (sub_1002E8D94())
  {
    uint64_t v14 = sub_1002E8D94();
    (*(void (**)(uint64_t, _BYTE *, uint64_t, const char *, __uint64_t))(*(void *)v14 + 64LL))( v14,  __p,  v2,  "boot",  (v13 - v6) / 0xF4240);
  }

  return v2;
}

void sub_1002BD164( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002BD1B4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Powering on chipset", v4, 2u);
  }

  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136LL))(a1);
  }
}

uint64_t sub_1002BD258(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Powering off chipset", v4, 2u);
  }

  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136LL))(a1);
  }
}

uint64_t sub_1002BD2FC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Resetting chipset", v4, 2u);
  }

  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8LL))(a1);
  }
  return result;
}

uint64_t sub_1002BD388(int a1, char *name, uint64_t a3)
{
  uint64_t v4 = IOServiceNameMatching(name);
  if (!v4) {
    return 1LL;
  }
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v4);
  if (!MatchingService) {
    return 1LL;
  }
  io_object_t v6 = MatchingService;
  __int16 v13 = 0;
  *(_DWORD *)buffer = 0;
  uint64_t v7 = 1LL;
  uint64_t v8 = (const __CFData *)IORegistryEntrySearchCFProperty( MatchingService,  "IODeviceTree",  @"local-mac-address",  kCFAllocatorDefault,  1u);
  if (v8)
  {
    unsigned int v9 = v8;
    v18.location = 0LL;
    v18.length = 6LL;
    CFDataGetBytes(v8, v18, buffer);
    *(_DWORD *)a3 = *(_DWORD *)buffer;
    *(_WORD *)(a3 + 4) = v13;
    uint64_t v10 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68157954;
      int v15 = 6;
      __int16 v16 = 2096;
      __int16 v17 = buffer;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "DeviceTree address = %{bluetooth:BD_ADDR}.6P",  buf,  0x12u);
    }

    CFRelease(v9);
    uint64_t v7 = 0LL;
  }

  IOObjectRelease(v6);
  return v7;
}

uint64_t sub_1002BD4EC(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 80))
  {
LABEL_2:
    int v3 = *(_DWORD *)(a1 + 80);
    *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 84);
    *(_DWORD *)a2 = v3;
    return 0LL;
  }

  uint64_t v5 = 0LL;
  while (v5 != 5)
  {
    if (*(unsigned __int8 *)(a1 + 81 + v5++))
    {
      break;
    }
  }

  int v7 = sub_1002BD388(a1, "marconi-bt", a2);
  if (!v7) {
    return 0LL;
  }
  return sub_1002BD388(v7, "bluetooth", a2);
}

uint64_t sub_1002BD57C(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 84) = *((_WORD *)a2 + 2);
  *(_DWORD *)(result + 80) = v2;
  return result;
}

uint64_t sub_1002BD590()
{
  return 203LL;
}

uint64_t sub_1002BD598()
{
  return 203LL;
}

uint64_t sub_1002BD5A0(const std::string *a1, std::string *this)
{
  if ((char)a1[4].__r_.__value_.__s.__size_ < 0)
  {
    if (a1[4].__r_.__value_.__l.__size_) {
      goto LABEL_3;
    }
  }

  else if (a1[4].__r_.__value_.__s.__size_)
  {
LABEL_3:
    std::string::operator=(this, a1 + 4);
    return 0LL;
  }

  return 203LL;
}

uint64_t sub_1002BD5E4(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1 + 4, a2);
  return 0LL;
}

uint64_t sub_1002BD600(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 132)) {
    return 214LL;
  }
  else {
    return *(unsigned int *)(a1 + 128);
  }
}

uint64_t sub_1002BD618()
{
  CFPropertyListRef v0 = CFPreferencesCopyAppValue(@"defaultPoweredState", @"com.apple.BTServer");
  if (v0)
  {
    uint64_t v1 = v0;
    if (CFEqual(v0, @"off"))
    {
      uint64_t v2 = 0LL;
    }

    else
    {
      CFEqual(v1, @"on");
      uint64_t v2 = 1LL;
    }

    CFRelease(v1);
  }

  else
  {
    uint64_t v2 = 1LL;
  }

  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Default power state : %d", (uint8_t *)v5, 8u);
  }

  return v2;
}

uint64_t sub_1002BD710(uint64_t a1, int a2)
{
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Write default power state : %d",  (uint8_t *)v7,  8u);
  }

  uint64_t v4 = @"on";
  if (a2 != 1) {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = @"off";
  }
  CFPreferencesSetAppValue(@"defaultPoweredState", v5, @"com.apple.BTServer");
  return CFPreferencesAppSynchronize(@"com.apple.BTServer");
}

uint64_t sub_1002BD7F0()
{
  CFPropertyListRef v0 = CFPreferencesCopyAppValue(@"defaultAirplaneModePowerState", @"com.apple.BTServer");
  if (v0)
  {
    uint64_t v1 = v0;
    if (CFEqual(v0, @"off"))
    {
      uint64_t v2 = 0LL;
    }

    else
    {
      CFEqual(v1, @"on");
      uint64_t v2 = 1LL;
    }

    CFRelease(v1);
  }

  else
  {
    uint64_t v2 = 1LL;
  }

  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Default airplane mode power state : %d",  (uint8_t *)v5,  8u);
  }

  return v2;
}

uint64_t sub_1002BD8E8(uint64_t a1, int a2)
{
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Write default airplane mode power state : %d",  (uint8_t *)v7,  8u);
  }

  uint64_t v4 = @"on";
  if (a2 != 1) {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = @"off";
  }
  CFPreferencesSetAppValue(@"defaultAirplaneModePowerState", v5, @"com.apple.BTServer");
  return CFPreferencesAppSynchronize(@"com.apple.BTServer");
}

uint64_t sub_1002BD9C8(uint64_t a1, int a2, int a3)
{
  int valuePtr = a3;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v6 = CFDateCreate(kCFAllocatorDefault, Current + (double)a2);
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100668B40();
    }
    return 1LL;
  }

  CFDateRef v7 = v6;
  Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  3LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    CFRelease(v7);
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100668B6C();
    }
    return 1LL;
  }

  unsigned int v9 = Mutable;
  CFDictionarySetValue(Mutable, @"scheduledby", @"BT_Wakeup");
  CFDictionarySetValue(v9, @"time", v7);
  if (a3 >= 1)
  {
    CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v10)
    {
      CFNumberRef v11 = v10;
      CFDictionarySetValue(v9, @"leeway", v10);
      CFRelease(v11);
    }
  }

  int v12 = IOPMRequestSysWake(v9);
  CFRelease(v9);
  CFRelease(v7);
  if (v12)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100668B98();
    }
    return 1LL;
  }

  return 0LL;
}

uint64_t sub_1002BDB58(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_1002BDB60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 88) = a2;
  return result;
}

uint64_t sub_1002BDB68(uint64_t a1)
{
  *(void *)a1 = off_10088DD98;
  *(void *)(a1 + 8) = off_10088DE58;
  sub_100242E28(a1 + 16);
  return a1;
}

void sub_1002BDBB0(char *a1)
{
  *(void *)a1 = off_10088DD98;
  *((void *)a1 + 1) = off_10088DE58;
  if (a1[119] < 0) {
    operator delete(*((void **)a1 + 12));
  }
  sub_100242E28(a1 + 16);
  operator delete(a1);
}

void sub_1002BDC00(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_1002BDC0C(uint64_t a1, char a2, char a3, int a4)
{
  *(void *)a1 = off_10088DE80;
  *(_BYTE *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 9) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  sub_100242DC4(a1 + 16);
  sub_100242DC4(a1 + 88);
  *(void *)(a1 + 160) = 0LL;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0LL;
  sub_100242DC4(a1 + 176);
  uint64_t v5 = operator new(0x10uLL);
  sub_100404F28(v5, (uint64_t)"ComPortHandler Dispatcher");
  *(void *)(a1 + 80) = v5;
  sub_100404F30((uint64_t)v5, QOS_CLASS_USER_INITIATED);
  return a1;
}

void sub_1002BDCBC(_Unwind_Exception *a1)
{
}

uint64_t sub_1002BDD0C(uint64_t a1)
{
  *(void *)a1 = off_10088DE80;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    uint64_t v3 = (void *)sub_100405360(v2);
    operator delete(v3);
  }

  sub_100242E28(a1 + 176);
  sub_10023BF24(a1 + 152, *(void **)(a1 + 160));
  sub_100242E28(a1 + 88);
  sub_100242E28(a1 + 16);
  return a1;
}

id sub_1002BDD74(uint64_t a1, unint64_t a2)
{
  v14[1] = 0LL;
  unint64_t v15 = a2;
  v14[0] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 88);
  CFDateRef v6 = *(void **)(a1 + 160);
  uint64_t v5 = (void *)(a1 + 160);
  uint64_t v4 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  CFDateRef v7 = v5;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      CFNumberRef v10 = v4;
    }
    else {
      CFNumberRef v10 = v4 + 1;
    }
    if (v9) {
      CFDateRef v7 = v4;
    }
    uint64_t v4 = (void *)*v10;
  }

  while (*v10);
  if (v7 != v5 && v7[4] <= a2)
  {
    __int16 v16 = &v15;
    __int16 v13 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  *(void *)(sub_100029574((uint64_t **)v5 - 1, &v15, (uint64_t)&unk_1006C2518, (uint64_t **)&v16)[5] + 8));
    CFNumberRef v11 = (void *)objc_claimAutoreleasedReturnValue(v13);
  }

  else
  {
LABEL_12:
    CFNumberRef v11 = 0LL;
  }

  sub_100242FAC((uint64_t)v14);
  return v11;
}

void sub_1002BDE40(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1002BDE54(uint64_t a1, unint64_t a2)
{
  v37[1] = 0LL;
  unint64_t v38 = a2;
  v37[0] = 0LL;
  sub_100242F28((uint64_t)v37, a1 + 88);
  uint64_t v5 = (uint64_t **)(a1 + 160);
  uint64_t v4 = *(void **)(a1 + 160);
  if (v4)
  {
    CFDateRef v6 = (uint64_t **)(a1 + 160);
    do
    {
      unint64_t v7 = v4[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        BOOL v9 = v4;
      }
      else {
        BOOL v9 = v4 + 1;
      }
      if (v8) {
        CFDateRef v6 = (uint64_t **)v4;
      }
      uint64_t v4 = (void *)*v9;
    }

    while (*v9);
  }

  uint64_t v10 = *(void *)(a1 + 168);
  sub_100242F54((uint64_t)v37);
  if (!*(_BYTE *)(a1 + 9) && v10)
  {
    sub_100242ECC((uint64_t)v37);
    uint64_t v11 = *(void *)(*(void *)(a1 + 152) + 40LL);
    *(void *)&__s1[0] = &v38;
    sub_100029574(v5 - 1, &v38, (uint64_t)&unk_1006C2518, (uint64_t **)__s1)[5] = v11;
LABEL_15:
    uint64_t v12 = 1LL;
    goto LABEL_22;
  }

  *(void *)char v36 = 0LL;
  memset(__s1, 0, sizeof(__s1));
  memset(&v44, 0, sizeof(v44));
  int v13 = openpty(&v36[1], v36, (char *)__s1, 0LL, 0LL);
  uint64_t v14 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v36[1];
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v36[0];
    __int16 v40 = 2080;
    v41 = __s1;
    __int16 v42 = 1024;
    int v43 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "Tried to open PTY with central = %d, peripheral = %d, name = %s - result was %d",  buf,  0x1Eu);
  }

  if (!v13)
  {
    if (*(_BYTE *)(a1 + 8) == 2)
    {
      int v18 = fcntl(v36[1], 3);
      int v19 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Flags are 0x%08x", buf, 8u);
      }

      fcntl(v36[1], 4, v18 | 4u);
    }

    tcgetattr(v36[1], &v44);
    cfsetspeed(&v44, 0x38400uLL);
    cfmakeraw(&v44);
    tcsetattr(v36[1], 0, &v44);
    int v35 = 3145728;
    ioctl(v36[1], 0x80085402uLL, &v35);
    uint64_t v20 = operator new(0x30uLL);
    int v21 = v36[0];
    uintptr_t v22 = v36[1];
    *(_DWORD *)uint64_t v20 = v36[1];
    *((_DWORD *)v20 + 1) = v21;
    *((void *)v20 + 1) = strdup((const char *)__s1);
    if (*(_BYTE *)(a1 + 8) == 2)
    {
      uint64_t v23 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Handler is write-only", buf, 2u);
      }

      char v24 = 0LL;
      *((void *)v20 + 3) = 0LL;
    }

    else
    {
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
      int v26 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, v22, 0LL, global_queue);
      *((void *)v20 + 3) = v26;
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472LL;
      handler[2] = sub_1002BE39C;
      handler[3] = &unk_10087F8E0;
      handler[4] = a1;
      handler[5] = v38;
      dispatch_source_set_event_handler(v26, handler);
      char v27 = (dispatch_source_s *)*((void *)v20 + 3);
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472LL;
      v33[2] = sub_1002BE5A4;
      v33[3] = &unk_10087EB20;
      v33[4] = v20;
      dispatch_source_set_cancel_handler(v27, v33);
      char v24 = malloc(*(unsigned int *)(a1 + 12));
    }

    *((void *)v20 + 5) = v24;
    int v28 = operator new(0x10uLL);
    sub_100404F28(v28, (uint64_t)"ComPortHandler WriteDispatcher");
    *((void *)v20 + 2) = v28;
    uint64_t v29 = sub_1002E6BF0();
    else {
      dispatch_qos_class_t v30 = QOS_CLASS_USER_INITIATED;
    }
    sub_100404F30(*((void *)v20 + 2), v30);
    sub_100242ECC((uint64_t)v37);
    *(void *)std::string buf = &v38;
    sub_100029574((uint64_t **)(a1 + 152), &v38, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] = (uint64_t)v20;
    sub_100242F54((uint64_t)v37);
    if (*(_BYTE *)(a1 + 8) != 2)
    {
      __int128 v31 = (dispatch_object_s *)*((void *)v20 + 3);
      if (!v31)
      {
        int v32 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = "deviceStruct->readSource";
          _os_log_fault_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_FAULT,  "Assertion failed: %{public}s",  buf,  0xCu);
          __int128 v31 = (dispatch_object_s *)*((void *)v20 + 3);
        }

        else
        {
          __int128 v31 = 0LL;
        }
      }

      *((_BYTE *)v20 + 32) = 0;
      dispatch_resume(v31);
    }

    goto LABEL_15;
  }

  unint64_t v15 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
  {
    __int16 v16 = __error();
    sub_100668BC4(v16, (uint64_t)buf, v15);
  }

  uint64_t v12 = 0LL;
LABEL_22:
  sub_100242FAC((uint64_t)v37);
  return v12;
}

void sub_1002BE358( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_1002BE39C(uint64_t a1)
{
  return sub_1002BE3A8(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t sub_1002BE3A8(uint64_t a1, unint64_t a2)
{
  v31[1] = 0LL;
  unint64_t v32 = a2;
  v31[0] = 0LL;
  sub_100242F28((uint64_t)v31, a1 + 88);
  uint64_t v4 = *(void **)(a1 + 160);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = (void *)(a1 + 160);
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      BOOL v8 = v4;
    }
    else {
      BOOL v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = (void *)*v8;
  }

  while (*v8);
  if (v5 != (void *)(a1 + 160) && v5[4] <= a2)
  {
    v30[0] = (uint64_t *)&v32;
    uint64_t v17 = sub_100029574((uint64_t **)(a1 + 152), &v32, (uint64_t)&unk_1006C2518, v30)[5];
    sub_100242F54((uint64_t)v31);
    v30[0] = 0LL;
    v30[1] = 0LL;
    sub_100242F28((uint64_t)v30, a1 + 176);
    ssize_t v18 = read(*(_DWORD *)v17, *(void **)(v17 + 40), *(unsigned int *)(a1 + 12));
    if (v18 < 1)
    {
      char v27 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
      {
        int v28 = __error();
        sub_100668C64(v28, (uint64_t)v33, v27);
      }
    }

    else
    {
      *(_BYTE *)(v17 + 32) = 1;
      dispatch_suspend(*(dispatch_object_t *)(v17 + 24));
      if (((*(uint64_t (**)(uint64_t, unint64_t, void, ssize_t))(*(void *)a1 + 24LL))( a1,  v32,  *(void *)(v17 + 40),  v18) & 1) == 0)
      {
        int v19 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
          sub_100668C34(v19, v20, v21, v22, v23, v24, v25, v26);
        }
      }
    }

    sub_100242FAC((uint64_t)v30);
  }

  else
  {
LABEL_12:
    BOOL v9 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100668C04(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }

  return sub_100242FAC((uint64_t)v31);
}

void sub_1002BE570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_100242FAC((uint64_t)va);
  sub_100242FAC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002BE5A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 32))
  {
    dispatch_release(*(dispatch_object_t *)(v2 + 24));
    uint64_t v2 = *(void *)(a1 + 32);
  }

  uint64_t result = close(*(_DWORD *)v2);
  **(_DWORD **)(a1 + 32) = -1;
  return result;
}

void sub_1002BE5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1002BE644;
  v3[3] = &unk_10087F8E0;
  v3[4] = a1;
  void v3[5] = a2;
  sub_100405384(v2, v3);
}

uint64_t sub_1002BE644(uint64_t a1)
{
  return sub_1002BE650(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t sub_1002BE650(uint64_t a1, unint64_t a2)
{
  v14[1] = 0LL;
  unint64_t v15 = a2;
  v14[0] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 88);
  uint64_t v4 = *(void **)(a1 + 160);
  if (v4)
  {
    uint64_t v5 = (uint64_t **)(a1 + 152);
    unint64_t v6 = (void *)(a1 + 160);
    do
    {
      unint64_t v7 = v4[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        BOOL v9 = v4;
      }
      else {
        BOOL v9 = v4 + 1;
      }
      if (v8) {
        unint64_t v6 = v4;
      }
      uint64_t v4 = (void *)*v9;
    }

    while (*v9);
    if (v6 != (void *)(a1 + 160) && v6[4] <= a2)
    {
      v13[0] = (uint64_t *)&v15;
      uint64_t v10 = sub_100029574(v5, &v15, (uint64_t)&unk_1006C2518, v13)[5];
      sub_10020166C((uint64_t)v5, &v15);
      if (*(_BYTE *)(a1 + 9) || !*(void *)(a1 + 168))
      {
        v13[0] = 0LL;
        v13[1] = 0LL;
        sub_100242F28((uint64_t)v13, a1 + 176);
        sub_1004052F8(*(void *)(v10 + 16));
        uint64_t v11 = *(dispatch_object_s **)(v10 + 24);
        if (v11)
        {
          dispatch_set_finalizer_f(v11, (dispatch_function_t)sub_1002BE7B8);
          dispatch_set_context(*(dispatch_object_t *)(v10 + 24), (void *)v10);
          if (*(_BYTE *)(v10 + 32))
          {
            *(_BYTE *)(v10 + 32) = 0;
            dispatch_resume(*(dispatch_object_t *)(v10 + 24));
          }

          dispatch_source_cancel(*(dispatch_source_t *)(v10 + 24));
        }

        else
        {
          sub_1002BE7B8(v10);
        }

        sub_100242FAC((uint64_t)v13);
      }
    }
  }

  return sub_100242FAC((uint64_t)v14);
}

void sub_1002BE790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1002BE7B8(uint64_t a1)
{
  *(_DWORD *)(a1 + 4) = -1;
  free(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0LL;
  free(*(void **)(a1 + 40));
  *(void *)(a1 + 40) = 0LL;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (void *)sub_100405360(v2);
    operator delete(v3);
  }

  operator delete((void *)a1);
}

void sub_1002BE810(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  _DWORD v2[2] = sub_1002BE868;
  v2[3] = &unk_10087EB20;
  v2[4] = a1;
  sub_100405384(v1, v2);
}

uint64_t sub_1002BE868(uint64_t a1)
{
  return sub_1002BE870(*(void *)(a1 + 32));
}

uint64_t sub_1002BE870(uint64_t a1)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 88);
  while (1)
  {
    uint64_t v2 = *(void *)(a1 + 152);
    if (v2 == a1 + 160) {
      break;
    }
    unint64_t v3 = *(void *)(v2 + 32);
    sub_100242F54((uint64_t)v5);
    sub_1002BE650(a1, v3);
    sub_100242ECC((uint64_t)v5);
  }

  return sub_100242FAC((uint64_t)v5);
}

void sub_1002BE8E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002BE8FC(uint64_t a1, unint64_t a2, uint64_t a3, int a4, int a5)
{
  v27[1] = 0LL;
  unint64_t v28 = a2;
  v27[0] = 0LL;
  sub_100242F28((uint64_t)v27, a1 + 88);
  uint64_t v12 = *(void **)(a1 + 160);
  uint64_t v11 = (void *)(a1 + 160);
  uint64_t v10 = v12;
  if (v12)
  {
    uint64_t v13 = v11;
    do
    {
      unint64_t v14 = v10[4];
      BOOL v15 = v14 >= a2;
      if (v14 >= a2) {
        uint64_t v16 = v10;
      }
      else {
        uint64_t v16 = v10 + 1;
      }
      if (v15) {
        uint64_t v13 = v10;
      }
      uint64_t v10 = (void *)*v16;
    }

    while (*v16);
    if (v13 != v11 && v13[4] <= a2)
    {
      uint64_t v29 = &v28;
      uint64_t v17 = sub_100029574((uint64_t **)v11 - 1, &v28, (uint64_t)&unk_1006C2518, (uint64_t **)&v29)[5];
      ssize_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a3, a4));
      uint64_t v19 = 4LL;
      if (!a5) {
        uint64_t v19 = 0LL;
      }
      int v20 = *(_DWORD *)(v17 + v19);
      uint64_t v21 = *(void *)(v17 + 16);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472LL;
      v24[2] = sub_1002BEA6C;
      v24[3] = &unk_10087EB48;
      id v25 = v18;
      int v26 = v20;
      id v22 = v18;
      sub_100405384(v21, v24);
    }
  }

  return sub_100242FAC((uint64_t)v27);
}

void sub_1002BEA40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002BEA6C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) length];
  if (v2 != (id) write( *(_DWORD *)(a1 + 40), [*(id *)(a1 + 32) bytes], (size_t)objc_msgSend(*(id *)(a1 + 32), "length")))
  {
    unint64_t v3 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100668CA4(v3);
    }
  }

uint64_t sub_1002BEAF8(uint64_t a1, unint64_t a2)
{
  v21[1] = 0LL;
  unint64_t v22 = a2;
  v21[0] = 0LL;
  sub_100242F28((uint64_t)v21, a1 + 88);
  unint64_t v6 = *(void **)(a1 + 160);
  uint64_t v5 = (void *)(a1 + 160);
  uint64_t v4 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  unint64_t v7 = v5;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v4 + 1;
    }
    if (v9) {
      unint64_t v7 = v4;
    }
    uint64_t v4 = (void *)*v10;
  }

  while (*v10);
  if (v7 != v5 && v7[4] <= a2)
  {
    uint64_t v23 = &v22;
    uint64_t v20 = sub_100029574((uint64_t **)v5 - 1, &v22, (uint64_t)&unk_1006C2518, (uint64_t **)&v23)[5];
    sub_100242F54((uint64_t)v21);
    if (*(_BYTE *)(v20 + 32))
    {
      *(_BYTE *)(v20 + 32) = 0;
      dispatch_resume(*(dispatch_object_t *)(v20 + 24));
    }
  }

  else
  {
LABEL_12:
    uint64_t v11 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100668C04(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }

  return sub_100242FAC((uint64_t)v21);
}

void sub_1002BEBE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1002BEBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_1002E8E64();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 176LL))( v10,  a1,  a2,  a3,  a4,  a5);
}

uint64_t sub_1002BEC58(uint64_t a1)
{
  *(void *)a1 = off_10088DEB0;
  *(void *)(a1 + 8) = off_10088E260;
  *(void *)(a1 + 16) = -1LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(_BYTE *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = &off_10088E448;
  sub_1002CC7B4(a1 + 72);
  *(_WORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 5;
  *(_BYTE *)(a1 + 100) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  *(_BYTE *)(a1 + 127) = 0;
  *(_BYTE *)(a1 + 218) = 0;
  *(_WORD *)(a1 + 220) = 0;
  *(_BYTE *)(a1 + 222) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 180) = 0;
  *(void *)(a1 + 183) = 0LL;
  *(void *)(a1 + 190) = 0LL;
  *(_DWORD *)(a1 + 224) = 1;
  *(_BYTE *)(a1 + 228) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_WORD *)(a1 + 241) = 0;
  *(_DWORD *)(a1 + 237) = 0;
  *(_DWORD *)(a1 + 243) = 257;
  *(_BYTE *)(a1 + 247) = 1;
  *(void *)(a1 + 248) = 0LL;
  *(_BYTE *)(a1 + 257) = 1;
  *(void *)(a1 + 268) = &_mh_execute_header;
  *(void *)(a1 + 258) = 0LL;
  *(void *)(a1 + 280) = 0LL;
  *(void *)(a1 + 288) = 60000LL;
  sub_100242DC4(a1 + 296);
  *(_BYTE *)(a1 + 360) = 0;
  *(_WORD *)(a1 + 198) = 0;
  *(_BYTE *)(a1 + 204) = 0;
  *(_BYTE *)(a1 + 219) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 212) = 0;
  *(_WORD *)(a1 + 216) = 0;
  id v2 = objc_autoreleasePoolPush();
  unint64_t v3 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = objc_alloc(&OBJC_CLASS___NSString);
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectAtIndexedSubscript:0]);
  unint64_t v7 = -[NSString initWithFormat:](v5, "initWithFormat:", @"%@/Logs/Bluetooth", v6);
  unint64_t v8 = (void *)qword_1008EFC48;
  qword_1008EFC48 = (uint64_t)v7;

  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1008EFC48 stringByAppendingPathComponent:@"PacketLogs"]);
  id v10 = [v9 copy];
  uint64_t v11 = (void *)qword_1008EFC50;
  qword_1008EFC50 = (uint64_t)v10;

  objc_autoreleasePoolPop(v2);
  *(void *)(a1 + 24) = dispatch_queue_create("com.apple.MobileBluetooth.debugSettings", 0LL);
  return a1;
}

void sub_1002BEE38(_Unwind_Exception *a1)
{
}

uint64_t sub_1002BEE70(uint64_t a1)
{
  *(void *)a1 = off_10088DEB0;
  *(void *)(a1 + 8) = off_10088E260;
  uint64_t v2 = a1 + 8;
  notify_cancel(*(_DWORD *)(a1 + 20));
  notify_cancel(*(_DWORD *)(a1 + 16));
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088E318);
  }
  sub_100009168((uint64_t)off_1008D60A8 + 80, v2);
  sub_100242E28(a1 + 296);
  return a1;
}

void sub_1002BEEFC(_Unwind_Exception *a1)
{
}

void sub_1002BEF14(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1002BEE70(a1);
  operator delete(v1);
}

uint64_t sub_1002BEF28(uint64_t a1)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  uint64_t v2 = sub_100242F28((uint64_t)v11, a1 + 296);
  if ((byte_1008EFC58 & 1) == 0)
  {
    byte_1008EFC58 = 1;
    sub_100242F54(v2);
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_10088E318);
    }
    sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1 + 8);
    __int16 v10 = 0;
    char v9 = 0;
    sub_1002BF0D8((_BYTE *)a1, (BOOL *)&v10 + 1, (BOOL *)&v10, (unsigned __int8 *)&v9);
    uint64_t v3 = sub_1002E6E9C();
    sub_1000B90D8(0LL, v9, *(_DWORD *)(v3 + 708));
    if (*(_DWORD *)(a1 + 20) == -1)
    {
      uint64_t v4 = *(dispatch_queue_s **)(a1 + 24);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472LL;
      handler[2] = sub_1002BF508;
      handler[3] = &unk_10088E280;
      handler[4] = a1;
      notify_register_dispatch("com.apple.MCX._managementStatusChangedForDomains", (int *)(a1 + 20), v4, handler);
    }

    if (*(_DWORD *)(a1 + 16) == -1)
    {
      uint64_t v5 = *(dispatch_queue_s **)(a1 + 24);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472LL;
      _DWORD v7[2] = sub_1002BF518;
      v7[3] = &unk_10088E280;
      v7[4] = a1;
      notify_register_dispatch("com.apple.bluetooth.prefsChanged", (int *)(a1 + 16), v5, v7);
    }

    sub_1001EE328(sub_1002BEBFC);
    (**(void (***)(uint64_t))a1)(a1);
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
  }

  return sub_100242FAC((uint64_t)v11);
}

void sub_1002BF0BC(_Unwind_Exception *a1)
{
}

void sub_1002BF0D8(_BYTE *a1, BOOL *a2, BOOL *a3, unsigned __int8 *a4)
{
  char v23 = 0;
  BOOL v8 = ((*(uint64_t (**)(_BYTE *))(*(void *)a1 + 8LL))(a1) & 1) != 0 || a1[89] != 0;
  *a2 = v8;
  BOOL v9 = ((*(uint64_t (**)(_BYTE *))(*(void *)a1 + 8LL))(a1) & 1) != 0 || a1[89] != 0;
  *a3 = v9;
  int v10 = *(_DWORD *)(sub_1002E6E9C() + 708);
  uint64_t v11 = sub_1002E6BF0();
  else {
    BOOL v12 = 1;
  }
  if (!v12 && v10 == 9)
  {
    *a2 = 0;
    *a3 = 0;
  }

  sub_10002418C(buf, "HCITraces");
  sub_10002418C(__p, "StackDebugEnabled");
  (*(void (**)(_BYTE *, _BYTE *, void **, char *))(*(void *)a1 + 72LL))(a1, buf, __p, &v23);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(*(void **)buf);
  }
  if (v23)
  {
    *a2 = 1;
    *a3 = 1;
  }

  unsigned __int8 v20 = 0;
  sub_10002418C(buf, "Stack");
  sub_10002418C(__p, "HCILiteLogging");
  (*(void (**)(_BYTE *, _BYTE *, void **, unsigned __int8 *))(*(void *)a1 + 72LL))(a1, buf, __p, &v20);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(*(void **)buf);
  }
  int v13 = _os_feature_enabled_impl("BluetoothFeatures", "PacketlogLite");
  if ((v13 & ~(*(unsigned int (**)(_BYTE *))(*(void *)a1 + 8LL))(a1)) != 1 || v23)
  {
    if (((*(unsigned int (**)(_BYTE *))(*(void *)a1 + 8LL))(a1) & v13) == 1)
    {
      int v14 = v20;
      *a4 = v20;
      if (!v14) {
        goto LABEL_32;
      }
      goto LABEL_29;
    }

void sub_1002BF4B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002BF508(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 32))(*(void *)(a1 + 32));
}

uint64_t sub_1002BF518(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)(void))(a1 + 32);
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Root prefs changed", v4, 2u);
  }

  return (**v1)(v1);
}

void sub_1002BF598(_BYTE *a1)
{
  a1[88] = 1;
  memset(&v69, 0, sizeof(v69));
  v66 = 0LL;
  uint64_t v67 = 0LL;
  uint64_t v68 = 0LL;
  v63 = 0LL;
  uint64_t v64 = 0LL;
  uint64_t v65 = 0LL;
  uint64_t v2 = sub_1002E6BF0();
  if (!(*(unsigned int (**)(uint64_t, void **))(*(void *)v2 + 24LL))(v2, &v66))
  {
    uint64_t v29 = HIBYTE(v68);
    if (v68 < 0) {
      uint64_t v29 = v67;
    }
    if (v29)
    {
      std::operator+<char>(&v60, "Product: ", &v66);
      dispatch_qos_class_t v30 = std::string::append(&v60, "\n");
      __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      int64_t cap = v30->__r_.__value_.__l.__cap_;
      *(_OWORD *)__p = v31;
      v30->__r_.__value_.__l.__size_ = 0LL;
      v30->__r_.__value_.__l.__cap_ = 0LL;
      v30->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        unint64_t v32 = __p;
      }
      else {
        unint64_t v32 = (void **)__p[0];
      }
      if (cap >= 0) {
        std::string::size_type v33 = HIBYTE(cap);
      }
      else {
        std::string::size_type v33 = (std::string::size_type)__p[1];
      }
      std::string::append(&v69, (const std::string::value_type *)v32, v33);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
    }
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([gCBDaemonServer stackController]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 controllerInfo]);

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 firmwareVersion]);
  if (v5)
  {
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([gCBDaemonServer stackController]);
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 controllerInfo]);
    id v8 = objc_claimAutoreleasedReturnValue([v7 firmwareVersion]);
    sub_10002418C(&v59, (char *)[v8 UTF8String]);
    BOOL v9 = std::string::insert(&v59, 0LL, "Firmware Version: ");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v11 = std::string::append(&v60, "\n");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t cap = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)__p = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      int v13 = __p;
    }
    else {
      int v13 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v14 = HIBYTE(cap);
    }
    else {
      std::string::size_type v14 = (std::string::size_type)__p[1];
    }
    std::string::append(&v69, (const std::string::value_type *)v13, v14);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v4 chipsetID]);

  if (v15)
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([gCBDaemonServer stackController]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 controllerInfo]);
    id v18 = objc_claimAutoreleasedReturnValue([v17 chipsetID]);
    sub_10002418C(&v59, (char *)[v18 UTF8String]);
    uint64_t v19 = std::string::insert(&v59, 0LL, "Chipset: ");
    __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0LL;
    v19->__r_.__value_.__l.__cap_ = 0LL;
    v19->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v21 = std::string::append(&v60, "\n");
    __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    int64_t cap = v21->__r_.__value_.__l.__cap_;
    *(_OWORD *)__p = v22;
    v21->__r_.__value_.__l.__size_ = 0LL;
    v21->__r_.__value_.__l.__cap_ = 0LL;
    v21->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      char v23 = __p;
    }
    else {
      char v23 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v24 = HIBYTE(cap);
    }
    else {
      std::string::size_type v24 = (std::string::size_type)__p[1];
    }
    std::string::append(&v69, (const std::string::value_type *)v23, v24);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

  if ([v4 hciTransportType])
  {
    __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([gCBDaemonServer stackController]);
    int v26 = (void *)objc_claimAutoreleasedReturnValue([v25 controllerInfo]);
    unsigned int v27 = [v26 hciTransportType];
    if (v27 > 4) {
      unint64_t v28 = "?";
    }
    else {
      unint64_t v28 = off_10088E398[v27];
    }
    sub_10002418C(&v59, v28);
    char v34 = std::string::insert(&v59, 0LL, "Transport: ");
    __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__l.__cap_ = v34->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0LL;
    v34->__r_.__value_.__l.__cap_ = 0LL;
    v34->__r_.__value_.__r.__words[0] = 0LL;
    char v36 = std::string::append(&v60, "\n");
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    int64_t cap = v36->__r_.__value_.__l.__cap_;
    *(_OWORD *)__p = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      unint64_t v38 = __p;
    }
    else {
      unint64_t v38 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v39 = HIBYTE(cap);
    }
    else {
      std::string::size_type v39 = (std::string::size_type)__p[1];
    }
    std::string::append(&v69, (const std::string::value_type *)v38, v39);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

  __int16 v40 = (void *)objc_claimAutoreleasedReturnValue([v4 firmwareName]);

  if (v40)
  {
    id v41 = objc_claimAutoreleasedReturnValue([v4 firmwareName]);
    sub_10002418C(&v59, (char *)[v41 UTF8String]);
    __int16 v42 = std::string::insert(&v59, 0LL, "Firmware Filename: ");
    __int128 v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__l.__cap_ = v42->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0LL;
    v42->__r_.__value_.__l.__cap_ = 0LL;
    v42->__r_.__value_.__r.__words[0] = 0LL;
    termios v44 = std::string::append(&v60, "\n");
    __int128 v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    int64_t cap = v44->__r_.__value_.__l.__cap_;
    *(_OWORD *)__p = v45;
    v44->__r_.__value_.__l.__size_ = 0LL;
    v44->__r_.__value_.__l.__cap_ = 0LL;
    v44->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      v46 = __p;
    }
    else {
      v46 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v47 = HIBYTE(cap);
    }
    else {
      std::string::size_type v47 = (std::string::size_type)__p[1];
    }
    std::string::append(&v69, (const std::string::value_type *)v46, v47);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v48 = sub_1002E6BF0();
  if (!(*(unsigned int (**)(uint64_t, void **, uint64_t))(*(void *)v48 + 32LL))(v48, &v63, 1LL))
  {
    uint64_t v53 = HIBYTE(v65);
    if (v65 < 0) {
      uint64_t v53 = v64;
    }
    if (v53)
    {
      std::operator+<char>(&v60, "Software: ", &v63);
      v54 = std::string::append(&v60, "\n");
      __int128 v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      int64_t cap = v54->__r_.__value_.__l.__cap_;
      *(_OWORD *)__p = v55;
      v54->__r_.__value_.__l.__size_ = 0LL;
      v54->__r_.__value_.__l.__cap_ = 0LL;
      v54->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        v56 = __p;
      }
      else {
        v56 = (void **)__p[0];
      }
      if (cap >= 0) {
        std::string::size_type v57 = HIBYTE(cap);
      }
      else {
        std::string::size_type v57 = (std::string::size_type)__p[1];
      }
      std::string::append(&v69, (const std::string::value_type *)v56, v57);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
    }
  }

  v59.__r_.__value_.__s.__data_[0] = 0;
  sub_10002418C(__p, "Stack");
  sub_10002418C(&v60, "HCILiteLogging");
  (*(void (**)(_BYTE *, void **, std::string *, std::string *))(*(void *)a1 + 72LL))(a1, __p, &v60, &v59);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  int v49 = _os_feature_enabled_impl("BluetoothFeatures", "PacketlogLite");
  if (((*(unsigned int (**)(_BYTE *))(*(void *)a1 + 8LL))(a1) | v49 ^ 1) != 1
    || ((*(unsigned int (**)(_BYTE *))(*(void *)a1 + 8LL))(a1) & v49) == 1
    && v59.__r_.__value_.__s.__data_[0])
  {
    std::string::append(&v69, "HCILite Logging Mode\n");
  }

  char v58 = 0;
  uint64_t v50 = sub_1002E6E00();
  sub_10002418C(__p, "LE");
  sub_10002418C(&v60, "EnableXPCLog");
  int v51 = (*(uint64_t (**)(uint64_t, void **, std::string *, char *))(*(void *)v50 + 72LL))( v50,  __p,  &v60,  &v58);
  if ((SHIBYTE(cap) & 0x80000000) == 0)
  {
    if (!v51) {
      goto LABEL_88;
    }
    goto LABEL_87;
  }

  operator delete(__p[0]);
  if (v51) {
LABEL_87:
  }
    a1[236] = 1;
LABEL_88:
  if ((v69.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    v52 = &v69;
  }
  else {
    v52 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  sub_1000B9774((const char *)v52);
  sub_1002CAD5C((void (***)(void, void, const UInt8 *, void))a1 + 8);
  sub_1002CC7B8((uint64_t)(a1 + 72));
  (*(void (**)(_BYTE *, uint64_t))(*(void *)a1 + 488LL))(a1, 1LL);
  (*(void (**)(_BYTE *))(*(void *)a1 + 520LL))(a1);
  (*(void (**)(_BYTE *))(*(void *)a1 + 808LL))(a1);

  if (SHIBYTE(v65) < 0) {
    operator delete(v63);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(v66);
  }
}

void sub_1002BFD80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }

  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(a1);
}

void sub_1002BFFB4(uint64_t a1)
{
  uint64_t v2 = sub_1002E6BF0();
  memset(&v31, 0, sizeof(v31));
  *(_DWORD *)(a1 + 96) = 5;
  sub_10002418C(&buf, "Diversity");
  sub_10002418C(&__p, "DiversityMode");
  *(_BYTE *)(a1 + 93) = (*(uint64_t (**)(uint64_t, std::string *, std::string *, std::string *))(*(void *)a1 + 56LL))( a1,  &buf,  &__p,  &v31);
  if (*(_BYTE *)(a1 + 93))
  {
    if (!std::string::compare(&v31, "AUTO"))
    {
      *(_DWORD *)(a1 + 96) = 5;
      uint64_t v3 = (os_log_s *)qword_1008F7578;
      if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      uint64_t v4 = "Diversity mode override: Auto";
    }

    else if (!std::string::compare(&v31, "AUTO_NO_COEX"))
    {
      *(_DWORD *)(a1 + 96) = 4;
      uint64_t v3 = (os_log_s *)qword_1008F7578;
      if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      uint64_t v4 = "Diversity mode override: Auto with no cellular coex support";
    }

    else if (!std::string::compare(&v31, "DISABLED"))
    {
      *(_DWORD *)(a1 + 96) = 3;
      uint64_t v3 = (os_log_s *)qword_1008F7578;
      if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      uint64_t v4 = "Diversity mode override: Disabled";
    }

    else if (!std::string::compare(&v31, "FORCE_ANT0"))
    {
      *(_DWORD *)(a1 + 96) = 0;
      uint64_t v3 = (os_log_s *)qword_1008F7578;
      if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      uint64_t v4 = "Diversity mode override: Force Antenna 0";
    }

    else if (!std::string::compare(&v31, "FORCE_ANT1"))
    {
      *(_DWORD *)(a1 + 96) = 1;
      uint64_t v3 = (os_log_s *)qword_1008F7578;
      if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      uint64_t v4 = "Diversity mode override: Force Antenna 1";
    }

    else if (!std::string::compare(&v31, "MRC_BF"))
    {
      *(_DWORD *)(a1 + 96) = 6;
      uint64_t v3 = (os_log_s *)qword_1008F7578;
      if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      uint64_t v4 = "Diversity/beamforming mode override: MRC diversity with tx beamforming";
    }

    else if (!std::string::compare(&v31, "HYBRID_BF"))
    {
      *(_DWORD *)(a1 + 96) = 7;
      uint64_t v3 = (os_log_s *)qword_1008F7578;
      if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      uint64_t v4 = "Diversity/beamforming mode override: Hybrid diversity with tx beamforming";
    }

    else if (!std::string::compare(&v31, "MRC_DISABLE_BF"))
    {
      *(_DWORD *)(a1 + 96) = 8;
      uint64_t v3 = (os_log_s *)qword_1008F7578;
      if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      uint64_t v4 = "Diversity/beamforming mode override: MRC diversity without tx beamforming";
    }

    else
    {
      *(_BYTE *)(a1 + 93) = 0;
      uint64_t v3 = (os_log_s *)qword_1008F7578;
      if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      uint64_t v4 = "Warning: Diversity mode override: Invalid.  Using default diversity mode.";
    }

    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v4, (uint8_t *)&buf, 2u);
  }

LABEL_160:
    __int16 v25 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Warning: Diversity coex HAA maps ignored: all 4 HAA maps must be set",  (uint8_t *)&buf,  2u);
    }

    goto LABEL_162;
  }

  *(_BYTE *)(a1 + 127) = 0;
  if (*(_BYTE *)(a1 + 139) || *v20 || *(_BYTE *)(a1 + 161)) {
    goto LABEL_160;
  }
LABEL_162:
}

void sub_1002C0FD4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002C1134(uint64_t a1)
{
}

uint64_t sub_1002C113C(uint64_t result)
{
  *(_BYTE *)(result + 88) = 0;
  return result;
}

uint64_t sub_1002C1144(uint64_t result)
{
  *(_BYTE *)(result + 80) = 0;
  return result;
}

uint64_t sub_1002C1150(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 360);
}

void sub_1002C1158(uint64_t a1)
{
  uint64_t v2 = (const void *)MGCopyAnswer(@"ReleaseType", 0LL);
  uint64_t v3 = v2;
  if (v2) {
    BOOL v4 = CFEqual(v2, @"Vendor") != 0;
  }
  else {
    BOOL v4 = 0;
  }
  *(_BYTE *)(a1 + 360) = v4;
  uint64_t v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412802;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    BOOL v9 = @"Vendor";
    __int16 v10 = 1024;
    BOOL v11 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "check Vendor build %@ %@ %d",  (uint8_t *)&v6,  0x1Cu);
  }

  if (v3) {
    CFRelease(v3);
  }
}

BOOL sub_1002C1268()
{
  return MGCopyAnswer(@"ReleaseType", 0LL) != 0;
}

uint64_t sub_1002C1290(dispatch_queue_s **a1)
{
  *((_BYTE *)a1 + 248) = 0;
  uint64_t v2 = (unsigned __int8 *)(a1 + 31);
  sub_10002418C(buf, "ExposureNotification");
  sub_10002418C(__p, "insecureDatabasePath");
  (*((void (**)(dispatch_queue_s **, _BYTE *, void **, unsigned __int8 *))*a1 + 9))(a1, buf, __p, v2);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    int v4 = *v2;
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "fInsecureDatabasePath is %d", buf, 8u);
  }

  *((_BYTE *)a1 + 252) = 0;
  sub_10002418C(buf, "ExposureNotification");
  sub_10002418C(__p, "RequireEntitlementAndProfileOnInternalForLogging");
  (*((void (**)(dispatch_queue_s **, _BYTE *, void **, _BYTE *))*a1 + 9))(a1, buf, __p, (_BYTE *)a1 + 252);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0) {
    operator delete(*(void **)buf);
  }
  int v5 = (*((uint64_t (**)(dispatch_queue_s **))*a1 + 26))(a1);
  *((_BYTE *)a1 + 249) = v5;
  int v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *((unsigned __int8 *)a1 + 252);
    int v8 = *v2;
    *(_DWORD *)std::string buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v5;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v7;
    LOWORD(v24) = 1024;
    *(_DWORD *)((char *)&v24 + 2) = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "loading fENAppHasLoggingEntitlement:%d fRequireENLoggingProfileOnInternal:%d fInsecureDatabasePath:%d",  buf,  0x14u);
  }

  *((_BYTE *)a1 + 89) = CFPrefs_GetInt64(@"com.apple.bluetooth", @"APLogCloudCollectionEnabled", 0LL) != 0;
  char v20 = 0;
  sub_10002418C(buf, "HCI");
  sub_10002418C(__p, "lmpRouting");
  (*((void (**)(dispatch_queue_s **, _BYTE *, void **, char *))*a1 + 9))(a1, buf, __p, &v20);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0) {
    operator delete(*(void **)buf);
  }
  char v9 = (*((uint64_t (**)(dispatch_queue_s **))*a1 + 1))(a1);
  if (v20) {
    char v10 = 1;
  }
  else {
    char v10 = v9;
  }
  BOOL v11 = (v10 & 1) != 0 || *((_BYTE *)a1 + 89) != 0;
  *((_BYTE *)a1 + 237) = v11;
  int v12 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = "disabled";
    if (v11) {
      uint64_t v13 = "enabled";
    }
    std::string::size_type v14 = " [cloud]";
    if (!*((_BYTE *)a1 + 89)) {
      std::string::size_type v14 = "";
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&_BYTE buf[12] = 2080;
    uint64_t v24 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "LMP logging is %s%s", buf, 0x16u);
  }

  uint64_t v15 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002C16DC;
  block[3] = &unk_10087EB20;
  block[4] = a1;
  dispatch_async(v15, block);
  uint64_t result = (*((uint64_t (**)(dispatch_queue_s **, void))*a1 + 61))(a1, 0LL);
  if (*((_BYTE *)a1 + 88))
  {
    sub_1002CAD5C((void (***)(void, void, const UInt8 *, void))a1 + 8);
    sub_1002CC7B8((uint64_t)(a1 + 9));
    (*((void (**)(dispatch_queue_s **))*a1 + 65))(a1);
    (*((void (**)(dispatch_queue_s **))*a1 + 101))(a1);
    uint64_t v17 = sub_1002E8D54();
    (*(void (**)(uint64_t))(*(void *)v17 + 40LL))(v17);
    uint64_t v18 = sub_1002E8EE8();
    return (*(uint64_t (**)(uint64_t))(*(void *)v18 + 144LL))(v18);
  }

  return result;
}

void sub_1002C1690( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002C16DC(uint64_t a1)
{
  uint64_t v1 = *(_BYTE **)(a1 + 32);
  v1[250] = (*(uint64_t (**)(_BYTE *))(*(void *)v1 + 240LL))(v1);
  v1[251] = (*(uint64_t (**)(_BYTE *))(*(void *)v1 + 248LL))(v1);
  (*(void (**)(_BYTE *))(*(void *)v1 + 256LL))(v1);
  sub_1002C4B00((uint64_t)v1);
  sub_10002418C(buf, "ControllerStatistics");
  sub_10002418C(&__p, "ControllerStatisticsEnabled");
  (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, &__p, v1 + 197);
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  memset(v119, 0, 14);
  int v117 = 8;
  int v118 = 1023;
  int v115 = 0;
  int v116 = 100000;
  __int16 v114 = 0;
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(&__p, "TimeStampPeriodically");
  (*(void (**)(_BYTE *, _BYTE *, void **, unint64_t *))(*(void *)v1 + 72LL))(v1, buf, &__p, v119);
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(&__p, "DisableDiagnosticsPeriodically");
  (*(void (**)(_BYTE *, _BYTE *, void **, char *))(*(void *)v1 + 72LL))(v1, buf, &__p, (char *)v119 + 1);
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(&__p, "CrashLoggingDisabled");
  (*(void (**)(_BYTE *, _BYTE *, void **, char *))(*(void *)v1 + 72LL))(v1, buf, &__p, (char *)v119 + 2);
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(&__p, "AccessoryW1LogModule");
  (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(void *)v1 + 88LL))(v1, buf, &__p, &v118);
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(&__p, "AccessoryW1LogLevel");
  (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(void *)v1 + 88LL))(v1, buf, &__p, &v117);
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(&__p, "AccessoryLogPrintInterval");
  (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(void *)v1 + 88LL))(v1, buf, &__p, &v116);
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(&__p, "AccessoryLogPowerLoggingInterval");
  (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(void *)v1 + 88LL))(v1, buf, &__p, &v115);
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(&__p, "TriggerAccessoryW1AWD");
  (*(void (**)(_BYTE *, _BYTE *, void **, char *))(*(void *)v1 + 72LL))(v1, buf, &__p, (char *)&v114 + 1);
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(&__p, "DumpAccessoryW1TraceLog");
  (*(void (**)(_BYTE *, _BYTE *, void **, __int16 *))(*(void *)v1 + 72LL))(v1, buf, &__p, &v114);
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  *(_WORD *)((char *)v119 + 3) = v118;
  BYTE5(v119[0]) = v117;
  *(_DWORD *)((char *)v119 + 6) = v116;
  *(_DWORD *)((char *)&v119[1] + 2) = v115;
  if (qword_1008D67D8 != -1) {
    dispatch_once(&qword_1008D67D8, &stru_10088E338);
  }
  sub_1003558F8(qword_1008D67D0, v119[0], LODWORD(v119[1]) | ((unint64_t)WORD2(v119[1]) << 32));
  int v112 = 0;
  int v113 = 255;
  int v111 = 2;
  int v117 = 2;
  int v118 = 255;
  __int16 v110 = 0;
  __int16 v109 = 0;
  __int16 v108 = 0;
  __int16 v107 = 0;
  __int16 v106 = 0;
  std::string __p = 0LL;
  uint64_t v121 = 0LL;
  uint64_t v122 = 0LL;
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(v104, "AccessoryLogDevice");
  (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(void *)v1 + 88LL))(v1, buf, v104, &v113);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(v104, "AccessoryLog2Module");
  (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(void *)v1 + 88LL))(v1, buf, v104, &v118);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(v104, "AccessoryLogSubModule");
  (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(void *)v1 + 88LL))(v1, buf, v104, &v112);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(v104, "AccessoryLogType");
  (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(void *)v1 + 88LL))(v1, buf, v104, &v111);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(v104, "AccessoryLog2Level");
  (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(void *)v1 + 88LL))(v1, buf, v104, &v117);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(v104, "AccessoryLogStart");
  (*(void (**)(_BYTE *, _BYTE *, void **, char *))(*(void *)v1 + 72LL))(v1, buf, v104, (char *)&v110 + 1);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(v104, "AccessoryLogStop");
  (*(void (**)(_BYTE *, _BYTE *, void **, __int16 *))(*(void *)v1 + 72LL))(v1, buf, v104, &v110);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(v104, "AccessoryLogConfigSet");
  (*(void (**)(_BYTE *, _BYTE *, void **, char *))(*(void *)v1 + 72LL))(v1, buf, v104, (char *)&v109 + 1);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(v104, "AccessoryLogConfigGet");
  (*(void (**)(_BYTE *, _BYTE *, void **, __int16 *))(*(void *)v1 + 72LL))(v1, buf, v104, &v109);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(v104, "AccessoryLogDump");
  (*(void (**)(_BYTE *, _BYTE *, void **, char *))(*(void *)v1 + 72LL))(v1, buf, v104, (char *)&v108 + 1);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(v104, "AccessoryLogDismiss");
  (*(void (**)(_BYTE *, _BYTE *, void **, __int16 *))(*(void *)v1 + 72LL))(v1, buf, v104, &v108);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(v104, "AccessoryVSCCaptureTraceHistory");
  (*(void (**)(_BYTE *, _BYTE *, void **, char *))(*(void *)v1 + 72LL))(v1, buf, v104, (char *)&v107 + 1);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(v104, "AccessoryCoredumpEnable");
  (*(void (**)(_BYTE *, _BYTE *, void **, __int16 *))(*(void *)v1 + 72LL))(v1, buf, v104, &v107);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(v104, "AccessoryCoredumpAACP");
  (*(void (**)(_BYTE *, _BYTE *, void **, char *))(*(void *)v1 + 72LL))(v1, buf, v104, (char *)&v106 + 1);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(v104, "AccessoryCoredumpDisable");
  (*(void (**)(_BYTE *, _BYTE *, void **, __int16 *))(*(void *)v1 + 72LL))(v1, buf, v104, &v106);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(v104, "AccessoryLogCommand");
  (*(void (**)(_BYTE *, _BYTE *, void **, void **))(*(void *)v1 + 56LL))(v1, buf, v104, &__p);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v2 = v113;
  unsigned __int8 v3 = v118;
  int v5 = v111;
  unsigned __int8 v4 = v112;
  uint64_t v6 = v117;
  if (qword_1008D67D8 != -1) {
    dispatch_once(&qword_1008D67D8, &stru_10088E338);
  }
  sub_100355A18( qword_1008D67D0,  (v5 << 24) | (unint64_t)(v6 << 32) | ((unint64_t)v4 << 16) | ((unint64_t)v3 << 8) | v2);
  if ((_BYTE)v114)
  {
    if (qword_1008D67D8 != -1) {
      dispatch_once(&qword_1008D67D8, &stru_10088E338);
    }
    sub_100355FC0(qword_1008D67D0, 0LL, 0);
  }

  if (HIBYTE(v114))
  {
    if (qword_1008D67D8 != -1) {
      dispatch_once(&qword_1008D67D8, &stru_10088E338);
    }
    sub_100355B10();
  }

  if (HIBYTE(v110))
  {
    if (qword_1008D67D8 != -1) {
      dispatch_once(&qword_1008D67D8, &stru_10088E338);
    }
    sub_100353ED0(qword_1008D67D0, 0LL, 1, 0);
  }

  if ((_BYTE)v110)
  {
    if (qword_1008D67D8 != -1) {
      dispatch_once(&qword_1008D67D8, &stru_10088E338);
    }
    sub_100353ED0(qword_1008D67D0, 0LL, 2, 0);
  }

  if (HIBYTE(v109))
  {
    if (qword_1008D67D8 != -1) {
      dispatch_once(&qword_1008D67D8, &stru_10088E338);
    }
    sub_100353ED0(qword_1008D67D0, 0LL, 3, 0);
  }

  if ((_BYTE)v109)
  {
    if (qword_1008D67D8 != -1) {
      dispatch_once(&qword_1008D67D8, &stru_10088E338);
    }
    sub_100353ED0(qword_1008D67D0, 0LL, 4, 0);
  }

  if (HIBYTE(v108))
  {
    if (qword_1008D67D8 != -1) {
      dispatch_once(&qword_1008D67D8, &stru_10088E338);
    }
    sub_100353ED0(qword_1008D67D0, 0LL, 5, 0);
  }

  if ((_BYTE)v108)
  {
    if (qword_1008D67D8 != -1) {
      dispatch_once(&qword_1008D67D8, &stru_10088E338);
    }
    sub_100353ED0(qword_1008D67D0, 0LL, 6, 0);
  }

  if (HIBYTE(v107))
  {
    if (qword_1008D67D8 != -1) {
      dispatch_once(&qword_1008D67D8, &stru_10088E338);
    }
    sub_100353ED0(qword_1008D67D0, 0LL, 7, 0);
  }

  if ((*(unsigned int (**)(_BYTE *))(*(void *)v1 + 8LL))(v1))
  {
    if ((_BYTE)v106)
    {
      if (qword_1008D67D8 != -1) {
        dispatch_once(&qword_1008D67D8, &stru_10088E338);
      }
      sub_100353ED0(qword_1008D67D0, 0LL, 18, 0);
      sub_10002418C(buf, "AccessoryLogging");
      sub_10002418C(v104, "AccessoryCoredumpDisable");
      (*(void (**)(_BYTE *, _BYTE *, void **, void))(*(void *)v1 + 80LL))(v1, buf, v104, 0LL);
      if (v105 < 0) {
        operator delete(v104[0]);
      }
      if ((v125[1] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    else
    {
      if ((_BYTE)v107)
      {
        if (qword_1008D67D8 != -1) {
          dispatch_once(&qword_1008D67D8, &stru_10088E338);
        }
        int v7 = 16;
      }

      else
      {
        if (!HIBYTE(v106)) {
          goto LABEL_162;
        }
        if (qword_1008D67D8 != -1) {
          dispatch_once(&qword_1008D67D8, &stru_10088E338);
        }
        int v7 = 17;
      }

      sub_100353ED0(qword_1008D67D0, 0LL, v7, 0);
    }
  }

LABEL_162:
  uint64_t v8 = HIBYTE(v122);
  if (v122 < 0) {
    uint64_t v8 = v121;
  }
  if (v8)
  {
    sub_10002418C(buf, "AccessoryLogging");
    sub_10002418C(v104, "AccessoryLogCommand");
    sub_10002418C(v102, "");
    (*(void (**)(_BYTE *, _BYTE *, void **, void **))(*(void *)v1 + 64LL))(v1, buf, v104, v102);
    if (v103 < 0) {
      operator delete(v102[0]);
    }
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v122 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    char v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_p));
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @" ,"));
    int v12 = (void *)objc_claimAutoreleasedReturnValue([v10 componentsSeparatedByCharactersInSet:v11]);
    if ([v12 count] == (id)2)
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 objectAtIndexedSubscript:0]);
      unsigned __int8 v14 = [v13 intValue];

      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v12 objectAtIndexedSubscript:1]);
      unsigned __int8 v16 = [v15 intValue];

      if (qword_1008D67D8 != -1) {
        dispatch_once(&qword_1008D67D8, &stru_10088E338);
      }
      sub_100353ED0(qword_1008D67D0, 0LL, v14, v16);
    }
  }

  unsigned __int8 v101 = 0;
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(v104, "BBFCTimeLogging");
  (*(void (**)(_BYTE *, _BYTE *, void **, unsigned __int8 *))(*(void *)v1 + 72LL))(v1, buf, v104, &v101);
  if (v105 < 0) {
    operator delete(v104[0]);
  }
  if ((v125[1] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v17 = sub_1002E9328();
  (*(void (**)(void *, void))(*(void *)v17 + 16LL))(v17, v101);
  v1[216] = 0;
  uint64_t v18 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 384LL))(v18))
  {
    sub_10002418C(buf, "A2DP");
    sub_10002418C(v104, "EnableUltraHighPriorityVSC");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 216);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }

  if ((*(unsigned int (**)(_BYTE *))(*(void *)v1 + 8LL))(v1))
  {
    v1[90] = 0;
    sub_10002418C(buf, "Audio");
    sub_10002418C(v104, "EnableAudioLogging");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 90);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v19 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[90]) {
        char v20 = "enabled";
      }
      else {
        char v20 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Audio Logging %{public}s", buf, 0xCu);
    }

    v1[91] = 0;
    sub_10002418C(buf, "Audio");
    sub_10002418C(v104, "DisableEnhancedAudioLogging");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 91);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v21 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[91]) {
        char v22 = "enabled";
      }
      else {
        char v22 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Audio Enhanced Logging %{public}s",  buf,  0xCu);
    }

    v1[92] = 0;
    sub_10002418C(buf, "Audio");
    sub_10002418C(v104, "DisableAdaptiveEncoderBitrate");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 92);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v23 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[92]) {
        uint64_t v24 = "enabled";
      }
      else {
        uint64_t v24 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Audio Adaptive Encoder Bitrate %{public}s",  buf,  0xCu);
    }

    v1[221] = 0;
    sub_10002418C(buf, "A2DP");
    sub_10002418C(v104, "Disable3EDR");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 221);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    char v25 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[221]) {
        int v26 = "on";
      }
      else {
        int v26 = "off";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Disable 3EDR packet type (force 2EDR instead) is %{public}s based on defaults write",  buf,  0xCu);
    }

    v1[220] = 0;
    sub_10002418C(buf, "A2DP");
    sub_10002418C(v104, "DisableAdaptivePacketType");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 220);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    unsigned int v27 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[220]) {
        char v28 = "enabled";
      }
      else {
        char v28 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Audio Adaptive Packet type %{public}s",  buf,  0xCu);
    }

    v1[176] = 0;
    sub_10002418C(buf, "A2DP");
    sub_10002418C(v104, "DisableAudioTimeSync");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 176);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    std::string v29 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[176]) {
        dispatch_qos_class_t v30 = "enabled";
      }
      else {
        dispatch_qos_class_t v30 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Audio Time Sync Disable %{public}s",  buf,  0xCu);
    }

    v1[180] = 0;
    sub_10002418C(buf, "A2DP");
    sub_10002418C(v104, "SubJitterBufferEnable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 180);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    std::string v31 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[180]) {
        unint64_t v32 = "enabled";
      }
      else {
        unint64_t v32 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Sub Jitter Buffer %{public}s", buf, 0xCu);
    }

    v1[181] = 0;
    __int16 v33 = v1 + 181;
    sub_10002418C(buf, "A2DP");
    sub_10002418C(v104, "AdaptiveEQEnable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 181);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v34 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      if (*v33) {
        __int16 v35 = "enabled";
      }
      else {
        __int16 v35 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Adaptive EQ %{public}s", buf, 0xCu);
    }

    v1[182] = 0;
    __int16 v36 = v1 + 182;
    sub_10002418C(buf, "A2DP");
    sub_10002418C(v104, "LoudnessCompensationEQEnable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 182);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v37 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      if (*v36) {
        __int16 v38 = "enabled";
      }
      else {
        __int16 v38 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Loudness Compensation EQ %{public}s",  buf,  0xCu);
    }

    LODWORD(v102[0]) = 0;
    int v99 = 0;
    int v100 = 0;
    sub_10002418C(buf, "GyroJammingSimulationKey");
    sub_10002418C(v104, "GyroJammingSimulationIsEnabledKey");
    (*(void (**)(_BYTE *, _BYTE *, void **, void **))(*(void *)v1 + 128LL))(v1, buf, v104, v102);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_10002418C(buf, "GyroJammingSimulationKey");
    sub_10002418C(v104, "GyroJammingSimulationRightBudInfoKey");
    (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(void *)v1 + 128LL))(v1, buf, v104, &v100);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_10002418C(buf, "GyroJammingSimulationKey");
    sub_10002418C(v104, "GyroJammingSimulationLeftBudInfoKey");
    (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(void *)v1 + 128LL))(v1, buf, v104, &v99);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    std::string::size_type v39 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v102[0];
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = 1;
      LOWORD(v124) = 1024;
      *(_DWORD *)((char *)&v124 + 2) = v100;
      HIWORD(v124) = 1024;
      *(_DWORD *)v125 = v99;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "DebugSettings::loadDebugSettings: Gyro jam simulation is enabled = %u, info version = %u, right bud is jammed = %u, left bud is jammed = %u",  buf,  0x1Au);
    }

    char v40 = (char)v102[0];
    id v41 = operator new(1uLL);
    _BYTE *v41 = v40;
    uint64_t v42 = operator new(2uLL);
    v42[1] = 1;
    *uint64_t v42 = v40;
    operator delete(v41);
    char v43 = v100;
    termios v44 = operator new(4uLL);
    v44[2] = v43;
    *(_WORD *)termios v44 = *(_WORD *)v42;
    operator delete(v42);
    v44[3] = v99;
    if (*v33) {
      float v45 = 1.0;
    }
    else {
      float v45 = 0.0;
    }
    v46 = (float *)malloc(0x10uLL);
    *(void *)v46 = 514LL;
    v46[2] = 9.445e21;
    v46[3] = v45;
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_10088E358);
    }
    sub_1002177A0((uint64_t)off_1008D60D8, 1LL, 16LL, (uint64_t)v46);
    free(v46);
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_10088E358);
    }
    uint64_t v47 = sub_10021795C((uint64_t)off_1008D60D8);
    if (v47)
    {
      if (qword_1008D6458 != -1) {
        dispatch_once(&qword_1008D6458, &stru_10088E378);
      }
      double v48 = sub_10037BD1C((void *)qword_1008D6450, v47);
      if (qword_1008D60E0 != -1) {
        dispatch_once(&qword_1008D60E0, &stru_10088E358);
      }
      int v49 = sub_1002178E4(v48);
      if (v49)
      {
        int v50 = v49 - 1;
        if (*v36) {
          float v51 = 1.0;
        }
        else {
          float v51 = 0.0;
        }
        v52 = (float *)malloc(0x10uLL);
        *(_DWORD *)v52 = 258;
        *((_DWORD *)v52 + 1) = v50;
        v52[2] = 2.1991e12;
        v52[3] = v51;
        if (qword_1008D60E0 != -1) {
          dispatch_once(&qword_1008D60E0, &stru_10088E358);
        }
        sub_100214E98((uint64_t)off_1008D60D8, v47, 1LL, 16LL, (uint64_t)v52);
        free(v52);
      }

      else
      {
        uint64_t v53 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
          sub_100668D80(v53, v48);
        }
      }
    }

    *((_DWORD *)v1 + 65) = 0;
    sub_10002418C(buf, "HFP");
    sub_10002418C(v104, "HfpUplinkMode");
    v54 = v1 + 260;
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 128LL))(v1, buf, v104, v1 + 260);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (*v54 >= 3u) {
      _DWORD *v54 = 0;
    }
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_10088E358);
    }
    sub_10021764C((uint64_t)off_1008D60D8, 34LL, *v54, 1u);
    v1[177] = 0;
    if (!v1[176])
    {
      sub_10002418C(buf, "A2DP");
      sub_10002418C(v104, "EnableRemoteAudioTimeSync");
      (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 177);
      if (v105 < 0) {
        operator delete(v104[0]);
      }
      if ((v125[1] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    __int128 v55 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[177]) {
        v56 = "enabled";
      }
      else {
        v56 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v56;
      _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "Remote Audio Time Sync : %{public}s",  buf,  0xCu);
    }

    v1[198] = 0;
    sub_10002418C(buf, "A2DP");
    sub_10002418C(v104, "DynamicLatencyDebugDisable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 198);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v1[199] = 0;
    sub_10002418C(buf, "A2DP");
    sub_10002418C(v104, "DynamicLatencyHighEnable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 199);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    *((_DWORD *)v1 + 50) = 0;
    std::string::size_type v57 = (int *)(v1 + 200);
    sub_10002418C(buf, "A2DP");
    sub_10002418C(v104, "DynamicLatencyLowEnable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 88LL))(v1, buf, v104, v1 + 200);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    *((_DWORD *)v1 + 52) = 100;
    sub_10002418C(buf, "A2DP");
    sub_10002418C(v104, "DynamicAdaptiveLowJitterBufferCutoff");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 88LL))(v1, buf, v104, v1 + 208);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v1[214] = 0;
    sub_10002418C(buf, "A2DP");
    sub_10002418C(v104, "DynamicLatencyDefaultEnable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 214);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v1[215] = 0;
    sub_10002418C(buf, "A2DP");
    sub_10002418C(v104, "SpatialProfileTuningEnable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 215);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v1[204] = 0;
    char v58 = v1 + 204;
    sub_10002418C(buf, "A2DP");
    sub_10002418C(v104, "DynamicAdaptiveLowJitterBufferDisable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 204);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v1[212] = 0;
    sub_10002418C(buf, "A2DP");
    sub_10002418C(v104, "DynamicAdaptiveLowDebugJitterBufferEnable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 212);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v1[213] = 0;
    sub_10002418C(buf, "A2DP");
    sub_10002418C(v104, "DynamicAdaptiveLowJitterBufferLogging");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 213);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    std::string v59 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      std::string v60 = "disabled";
      if (*v58) {
        v61 = "disabled";
      }
      else {
        v61 = "enabled";
      }
      int v62 = v1[212];
      if (v1[213]) {
        v63 = "enabled";
      }
      else {
        v63 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446722;
      if (v62) {
        std::string v60 = "enabled";
      }
      *(void *)&uint8_t buf[4] = v61;
      *(_WORD *)&_BYTE buf[12] = 2082;
      v124 = v63;
      *(_WORD *)v125 = 2082;
      *(void *)&v125[2] = v60;
      _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "Adaptive Low Latency is %{public}s, Logging is %{public}s DEBUG Low Latency is %{public}s",  buf,  0x20u);
    }

    v1[217] = 0;
    sub_10002418C(buf, "A2DP");
    sub_10002418C(v104, "DisableSpatialOnMacOS");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 217);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v64 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v65 = "disabled";
      if (!v1[198]) {
        uint64_t v65 = "enabled";
      }
      v66 = "FORCED";
      int v67 = v1[214];
      if (v1[199]) {
        uint64_t v68 = "FORCED";
      }
      else {
        uint64_t v68 = "NOT FORCED";
      }
      int v69 = v1[216];
      if (*v57 <= 0) {
        v70 = "NOT FORCED";
      }
      else {
        v70 = "FORCED";
      }
      int v71 = v1[217];
      if (*v58) {
        v72 = "NOT FORCED";
      }
      else {
        v72 = "FORCED";
      }
      *(_DWORD *)std::string buf = 136447746;
      if (v67) {
        v73 = "FORCED";
      }
      else {
        v73 = "NOT FORCED";
      }
      *(void *)&uint8_t buf[4] = v65;
      *(_WORD *)&_BYTE buf[12] = 2080;
      v124 = v68;
      v74 = "AUTO";
      *(_WORD *)v125 = 2080;
      if (!v69) {
        v66 = "NOT FORCED";
      }
      *(void *)&v125[2] = v70;
      if (v71) {
        v74 = "FORCED OFF";
      }
      __int16 v126 = 2080;
      v127 = v72;
      __int16 v128 = 2080;
      v129 = v73;
      __int16 v130 = 2080;
      v131 = v66;
      __int16 v132 = 2080;
      v133 = v74;
      _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "A2DP Dynamic Latency is %{public}s, it is %s into HLM, it is %s into LLM, it is %s into adaptive latency,it is % s into MLM Ultra High Priority VSC is %s Spatial On MacOS is %s",  buf,  0x48u);
    }

    int v75 = *v57;
    if (*v57 >= 1)
    {
      v76 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v75;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "A2DP Dynamic Latency JBL %i", buf, 8u);
      }
    }

    v1[218] = 0;
    sub_10002418C(buf, "Audio");
    sub_10002418C(v104, "EnableTailspinLogging");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 218);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v77 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[218]) {
        v78 = "enabled";
      }
      else {
        v78 = "disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v78;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "A2DP Tailspin logging %{public}s", buf, 0xCu);
    }

    v1[219] = 0;
    sub_10002418C(buf, "Audio");
    sub_10002418C(v104, "DisableOverwaitMitigaton");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 219);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v79 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[219]) {
        v80 = "disabled";
      }
      else {
        v80 = "enabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v80;
      _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "A2DP Overwait Mitigation %{public}s",  buf,  0xCu);
    }

    v1[238] = 0;
    sub_10002418C(buf, "BTPageScan");
    sub_10002418C(v104, "BTPageScanDisabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 238);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[238])
    {
      v81 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEFAULT,  "BT Page Scan is explicitly disabled",  buf,  2u);
      }
    }

    sub_10002418C(buf, "GAPA");
    sub_10002418C(v104, "ForceAuthPassEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 239);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[239])
    {
      v82 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEFAULT,  "GAPA force auth pass explicitly enabled",  buf,  2u);
      }
    }

    sub_10002418C(buf, "GAPA");
    sub_10002418C(v104, "ForceAuthFailEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 240);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[240])
    {
      v83 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_DEFAULT,  "GAPA force auth fail explicitly enabled",  buf,  2u);
      }
    }

    sub_10002418C(buf, "GAPA");
    sub_10002418C(v104, "HideAuthFailEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 241);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[241])
    {
      v84 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEFAULT,  "GAPA hide auth fail explicitly enabled",  buf,  2u);
      }
    }

    sub_10002418C(buf, "GAPA");
    sub_10002418C(v104, "ForceNonAppleMfgEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 242);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[242])
    {
      v85 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "GAPA force non Apple manufacturer explicitly enabled",  buf,  2u);
      }
    }

    sub_10002418C(buf, "GAPA");
    sub_10002418C(v104, "AuthEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 243);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (!v1[243])
    {
      v86 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "GAPA auth explicity disabled", buf, 2u);
      }
    }

    sub_10002418C(buf, "GAPA");
    sub_10002418C(v104, "NonAuthEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 244);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (!v1[244])
    {
      v87 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "GAPA non-auth explicity disabled", buf, 2u);
      }
    }

    sub_10002418C(buf, "GAPA");
    sub_10002418C(v104, "ForceZeroEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 245);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[245])
    {
      v88 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEFAULT,  "GAPA force zero device explicity enabled",  buf,  2u);
      }
    }

    sub_10002418C(buf, "GAPA");
    sub_10002418C(v104, "ForceInvalidCertsEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 246);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[246])
    {
      v89 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEFAULT,  "GAPA force invalid certificate support explicitly enabled",  buf,  2u);
      }
    }

    sub_10002418C(buf, "GAPA");
    sub_10002418C(v104, "SkipCertFailEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 247);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[247])
    {
      v90 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_DEFAULT,  "GAPA skip certificate fail explicitly enabled",  buf,  2u);
      }
    }

    v1[257] = 1;
    sub_10002418C(buf, "DebugLevel");
    sub_10002418C(v104, "EnableNotifyCrashes");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 257);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v1[258] = 0;
    sub_10002418C(buf, "XPC");
    sub_10002418C(v104, "XpcStackshotReportEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 258);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v1[259] = 0;
    sub_10002418C(buf, "XPC");
    sub_10002418C(v104, "XpcAbcReportEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 259);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    v1[264] = 0;
    sub_10002418C(buf, "LEConnectedAudioServerModeKey");
    sub_10002418C(v104, "LEConnectedAudioServerModeEnable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 264);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[264])
    {
      v91 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEFAULT,  "LE Connected Audio Server Mode enabled",  buf,  2u);
      }
    }

    sub_10002418C(buf, "LEConnectedAudioServerModeKey");
    sub_10002418C(v104, "LEConnectedAudioFakeCISStackCallbacksEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 72LL))(v1, buf, v104, v1 + 265);
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    if ((v125[1] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v1[265])
    {
      v92 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v92,  OS_LOG_TYPE_DEFAULT,  "LE Connected Stack Bypass enabled",  buf,  2u);
      }
    }

    if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming"))
    {
      *((_DWORD *)v1 + 67) = 0;
      sub_10002418C(buf, "A2DP");
      sub_10002418C(v104, "A2DPOverSniffJBL");
      v93 = (int *)(v1 + 268);
      (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 88LL))(v1, buf, v104, v1 + 268);
      if (v105 < 0) {
        operator delete(v104[0]);
      }
      if ((v125[1] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      int v94 = *v93;
      if ((*v93 - 301) <= 0xFFFFFEE1)
      {
        int v94 = 60;
        int *v93 = 60;
      }

      v95 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v94;
        _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "JBL Value: %d", buf, 8u);
      }
    }

    if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming"))
    {
      *((_DWORD *)v1 + 68) = 1;
      sub_10002418C(buf, "A2DP");
      sub_10002418C(v104, "A2DPOverSniffAACELDFrames");
      v96 = (int *)(v1 + 272);
      (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(void *)v1 + 88LL))(v1, buf, v104, v1 + 272);
      if (v105 < 0) {
        operator delete(v104[0]);
      }
      if ((v125[1] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      int v97 = *v96;
      if ((*v96 - 4) <= 0xFFFFFFFC)
      {
        int v97 = 1;
        int *v96 = 1;
      }

      v98 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v97;
        _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEFAULT, "Overriden AACELD Frame Count: %d", buf, 8u);
      }
    }

    operator delete(v44);
  }

  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
}

  int v117 = 0;
  v84 = sub_1002E6E00();
  sub_10002418C(&buf, "hci");
  sub_10002418C(v121, "AssertOnFlowErrors");
  (*(void (**)(uint64_t, __int128 *, uint8_t *, char *))(*(void *)v84 + 72LL))(v84, &buf, v121, &v117);
  if (v122 < 0) {
    operator delete(*(void **)v121);
  }
  if (SBYTE7(v131) < 0) {
    operator delete((void *)buf);
  }
  if (v117) {
    sub_100137148();
  }
  v85 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v85 + 320LL))(v85))
  {
    v86 = sub_1002E6E9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v86 + 1616LL))(v86, 1LL, 1LL);
  }

  int v118 = 2;
  v119 = 124;
  int v115 = 2;
  int v116 = 10;
  __int16 v114 = 50;
  v87 = sub_1002E6BF0();
  v88 = sub_1002E6E00();
  sub_10002418C(&buf, "LE");
  sub_10002418C(v121, "AElengthAllowed");
  (*(void (**)(uint64_t, __int128 *, uint8_t *, int *))(*(void *)v88 + 128LL))(v88, &buf, v121, &v119);
  if (v122 < 0) {
    operator delete(*(void **)v121);
  }
  if (SBYTE7(v131) < 0) {
    operator delete((void *)buf);
  }
  v89 = sub_1002E6E00();
  sub_10002418C(&buf, "LE");
  sub_10002418C(v121, "AEAuxPhyMask");
  (*(void (**)(uint64_t, __int128 *, uint8_t *, unsigned int *))(*(void *)v89 + 128LL))( v89,  &buf,  v121,  &v118);
  if (v122 < 0) {
    operator delete(*(void **)v121);
  }
  if (SBYTE7(v131) < 0) {
    operator delete((void *)buf);
  }
  v90 = sub_1002E6E00();
  sub_10002418C(&buf, "LE");
  sub_10002418C(v121, "AEMaxAuxOffset");
  (*(void (**)(uint64_t, __int128 *, uint8_t *, int *))(*(void *)v90 + 128LL))(v90, &buf, v121, &v116);
  if (v122 < 0) {
    operator delete(*(void **)v121);
  }
  if (SBYTE7(v131) < 0) {
    operator delete((void *)buf);
  }
  v91 = sub_1002E6E00();
  sub_10002418C(&buf, "LE");
  sub_10002418C(v121, "AEMaxChanins");
  (*(void (**)(uint64_t, __int128 *, uint8_t *, int *))(*(void *)v91 + 128LL))(v91, &buf, v121, &v115);
  if (v122 < 0) {
    operator delete(*(void **)v121);
  }
  if (SBYTE7(v131) < 0) {
    operator delete((void *)buf);
  }
  int v118 = 0;
  v92 = sub_1002E6E9C();
  (*(void (**)(uint64_t, uint64_t, void, void, void, void))(*(void *)v92 + 1000LL))( v92,  1LL,  (unsigned __int16)v119,  v118,  (unsigned __int16)v116,  v115);
  v93 = sub_1002E6E00();
  sub_10002418C(&buf, "LE");
  sub_10002418C(v121, "AEMaxScanBuffers");
  (*(void (**)(uint64_t, __int128 *, uint8_t *, int *))(*(void *)v93 + 128LL))(v93, &buf, v121, &v114);
  if (v122 < 0) {
    operator delete(*(void **)v121);
  }
  if (SBYTE7(v131) < 0) {
    operator delete((void *)buf);
  }
  int v94 = sub_1002E6E9C();
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v94 + 1008LL))( v94,  1LL,  (unsigned __int16)v114,  0LL);
  v119 = 10;
  v95 = sub_1002E6E00();
  sub_10002418C(&buf, "LE");
  sub_10002418C(v121, "AEMaxAuxOffset");
  (*(void (**)(uint64_t, __int128 *, uint8_t *, int *))(*(void *)v95 + 128LL))(v95, &buf, v121, &v119);
  if (v122 < 0) {
    operator delete(*(void **)v121);
  }
  if (SBYTE7(v131) < 0) {
    operator delete((void *)buf);
  }
  v96 = sub_1002E6E9C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v96 + 1024LL))(v96, 1LL, (unsigned __int16)v119);
  LOBYTE(v118) = 0;
  int v97 = sub_1002E6E00();
  sub_10002418C(&buf, "HRB");
  sub_10002418C(v121, "SwitchToHRB");
  (*(void (**)(uint64_t, __int128 *, uint8_t *, unsigned int *))(*(void *)v97 + 72LL))( v97,  &buf,  v121,  &v118);
  if (v122 < 0) {
    operator delete(*(void **)v121);
  }
  if (SBYTE7(v131) < 0) {
    operator delete((void *)buf);
  }
  sub_10010F96C(v118);
  v119 = 1;
  v98 = sub_1002E6E00();
  sub_10002418C(&buf, "HRB");
  sub_10002418C(v121, "HRBBand");
  (*(void (**)(uint64_t, __int128 *, uint8_t *, int *))(*(void *)v98 + 128LL))(v98, &buf, v121, &v119);
  if (v122 < 0) {
    operator delete(*(void **)v121);
  }
  if (SBYTE7(v131) < 0) {
    operator delete((void *)buf);
  }
  sub_10010F978(v119);
  int v99 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v99 + 2600LL))(v99))
  {
    __int16 v132 = 0xFFFF0000FFFF0046LL;
    std::string buf = xmmword_1006C2FDC;
    v131 = unk_1006C2FEC;
    int v100 = sub_1002E6BF0();
    else {
      unsigned __int8 v101 = 4;
    }
    v102 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v121 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v102,  OS_LOG_TYPE_DEFAULT,  "stackManager sending Apple LE Feature Set Vendor List",  v121,  2u);
    }

    char v103 = sub_1002E6E9C();
    (*(void (**)(uint64_t, void, __int128 *))(*(void *)v103 + 1920LL))(v103, v101, &buf);
  }

  sub_100242ECC((uint64_t)v128);
  sub_10042C278(a1, 1u, 1);
  sub_100242F54((uint64_t)v128);
  sub_100430674((os_unfair_lock_s *)a1);
  sub_1004306EC(a1);
  if (*(_DWORD *)(sub_1002E6E9C() + 708)
    && *(_DWORD *)(sub_1002E6E9C() + 708) <= 0x7CFu
    && *(_DWORD *)(sub_1002E6E9C() + 708) == 23)
  {
    v104 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_DEFAULT,  "Disable antenna switch VSE for unsupported platforms!",  (uint8_t *)&buf,  2u);
    }

    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100898440);
    }
    char v105 = sub_10040007C(off_1008D5F48, 1LL, 1);
    __int16 v106 = sub_1002E6E9C();
    if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(*(void *)v106 + 168LL))(v106, 255LL, v105)
      && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
    {
      sub_10067E4E4();
    }
  }

  __int16 v107 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v107 + 336LL))(v107))
  {
    __int16 v108 = sub_1002E6BF0();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v108 + 408LL))(v108) & 1) == 0)
    {
      __int16 v109 = sub_1002E8D54();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v109 + 112LL))(v109, a1 + 557);
      if (*(_BYTE *)(a1 + 557))
      {
        v121[0] = 0;
        sub_100242CA4(v121);
        __int16 v110 = sub_1001B9E04((uint64_t)sub_10042B9A4);
        sub_100242CD0(v121);
        int v111 = (os_log_s *)qword_1008F7578;
        if (v110 && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 67109120;
          DWORD1(buf) = v110;
          _os_log_error_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_ERROR,  "Failed to set address change callbacks with result %{bluetooth:OI_STATUS}u",  (uint8_t *)&buf,  8u);
          int v111 = (os_log_s *)qword_1008F7578;
        }

        if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_DEFAULT,  "In StackManager Setup. Registering for Setup state change notifications.",  (uint8_t *)&buf,  2u);
        }

        int v112 = sub_1002E8D54();
        sub_1002912E4(v112 + 488, a1 + 56);
        sub_10042B840(a1);
        sub_100242C98(v121);
        sub_1001BF0BC();
        sub_100242CD0(v121);
        sub_100242CD8(v121);
      }
    }
  }

  unsigned __int8 v4 = 0LL;
LABEL_231:
  sub_100242FAC((uint64_t)v128);
  return v4;
}

void sub_1002C4670( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, void *a38, uint64_t a39, int a40, __int16 a41, char a42, char a43)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  operator delete(a9);
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void sub_1002C4AF8()
{
}

void sub_1002C4B00(uint64_t a1)
{
  __int16 v50 = 0;
  unsigned __int8 v49 = 0;
  sub_1002BF0D8((_BYTE *)a1, (BOOL *)&v50 + 1, (BOOL *)&v50, &v49);
  int v2 = 4997400;
  unsigned __int8 v48 = 0;
  __int16 v47 = 0;
  __int16 v46 = 0;
  int v44 = 4997400;
  int v45 = 3;
  unsigned __int8 v43 = 0;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184LL))(a1);
  sub_10002418C(&__p, "HCITraces");
  sub_10002418C(buf, "UnlimitedHCIFileSize");
  (*(void (**)(uint64_t, void **, _BYTE *, char *))(*(void *)a1 + 72LL))(a1, &__p, buf, (char *)&v46 + 1);
  if (v67 < 0) {
    operator delete(*(void **)buf);
  }
  if ((v53[7] & 0x80000000) != 0) {
    operator delete(__p);
  }
  sub_10002418C(&__p, "HCITraces");
  sub_10002418C(buf, "RawAudioTrace");
  (*(void (**)(uint64_t, void **, _BYTE *, unsigned __int8 *))(*(void *)a1 + 72LL))(a1, &__p, buf, &v48);
  if (v67 < 0) {
    operator delete(*(void **)buf);
  }
  if ((v53[7] & 0x80000000) != 0) {
    operator delete(__p);
  }
  sub_10002418C(&__p, "HCITraces");
  sub_10002418C(buf, "HIDTrace");
  (*(void (**)(uint64_t, void **, _BYTE *, __int16 *))(*(void *)a1 + 72LL))(a1, &__p, buf, &v47);
  if (v67 < 0) {
    operator delete(*(void **)buf);
  }
  if ((v53[7] & 0x80000000) != 0) {
    operator delete(__p);
  }
  sub_10002418C(&__p, "HCITraces");
  sub_10002418C(buf, "AudioTimeSyncAudioLog");
  (*(void (**)(uint64_t, void **, _BYTE *, char *))(*(void *)a1 + 72LL))(a1, &__p, buf, (char *)&v47 + 1);
  if (v67 < 0) {
    operator delete(*(void **)buf);
  }
  if ((v53[7] & 0x80000000) != 0) {
    operator delete(__p);
  }
  sub_10002418C(&__p, "HCITraces");
  sub_10002418C(buf, "MaxFileSize");
  (*(void (**)(uint64_t, void **, _BYTE *, __int16 *))(*(void *)a1 + 72LL))(a1, &__p, buf, &v46);
  if (v67 < 0) {
    operator delete(*(void **)buf);
  }
  if ((v53[7] & 0x80000000) != 0) {
    operator delete(__p);
  }
  sub_10002418C(&__p, "HCITraces");
  sub_10002418C(buf, "MaxTraces");
  (*(void (**)(uint64_t, void **, _BYTE *, int *))(*(void *)a1 + 88LL))(a1, &__p, buf, &v45);
  if (v67 < 0) {
    operator delete(*(void **)buf);
  }
  if ((v53[7] & 0x80000000) != 0) {
    operator delete(__p);
  }
  sub_10002418C(&__p, "HCITraces");
  sub_10002418C(buf, "MaxFileSize");
  (*(void (**)(uint64_t, void **, _BYTE *, int *))(*(void *)a1 + 88LL))(a1, &__p, buf, &v44);
  if (v67 < 0) {
    operator delete(*(void **)buf);
  }
  if ((v53[7] & 0x80000000) != 0) {
    operator delete(__p);
  }
  sub_10002418C(&__p, "HCITraces");
  sub_10002418C(buf, "HCISkipAuth");
  (*(void (**)(uint64_t, void **, _BYTE *, unsigned __int8 *))(*(void *)a1 + 72LL))(a1, &__p, buf, &v43);
  if (v67 < 0) {
    operator delete(*(void **)buf);
  }
  if ((v53[7] & 0x80000000) != 0) {
    operator delete(__p);
  }
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue( @"enableHIDLogging",  @"com.apple.bluetooth",  &keyExistsAndHasValidFormat);
  Boolean keyExistsAndHasValidFormat = 0;
  int v5 = CFPreferencesGetAppBooleanValue( @"enableHRMLogging",  @"com.apple.bluetooth",  &keyExistsAndHasValidFormat);
  int v6 = v45;
  if (v45 < 0 || v44 <= 999999)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100668E24();
    }
    int v6 = 5;
    int v44 = 4997400;
    int v45 = 5;
  }

  else
  {
    int v2 = v44;
  }

  if (HIBYTE(v46) && !(_BYTE)v46)
  {
    int v2 = 200000000;
    int v44 = 200000000;
  }

  int v7 = (os_log_s *)qword_1008F7578;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
  int v9 = v49;
  if (v8)
  {
    LODWORD(__p) = 67111424;
    HIDWORD(__p) = v48;
    LOWORD(v52) = 1024;
    *(_DWORD *)((char *)&v52 + 2) = v47;
    HIWORD(v52) = 1024;
    *(_DWORD *)uint64_t v53 = AppBooleanValue != 0;
    *(_WORD *)&v53[4] = 1024;
    *(_DWORD *)&v53[6] = v2;
    __int16 v54 = 1024;
    int v55 = v6;
    __int16 v56 = 1024;
    int v57 = HIBYTE(v50);
    __int16 v58 = 1024;
    int v59 = v50;
    __int16 v60 = 1024;
    int v61 = HIBYTE(v47);
    __int16 v62 = 1024;
    int v63 = v3;
    __int16 v64 = 1024;
    int v65 = v49;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Set HCI config raw:%d HID:%d developerEnableHIDLogging:%d size:%d files:%d liveTracing:%d fileTracing:%d timesync: %d logENPackets:%d hciLiteLogging:%d",  (uint8_t *)&__p,  0x3Eu);
    int v2 = v44;
    int v6 = v45;
  }

  sub_1000B8AD8( v48,  (v47 | AppBooleanValue) != 0,  v5 != 0,  v2,  v6,  SHIBYTE(v50),  v50,  SHIBYTE(v47),  v3,  v9 != 0);
  sub_1000B8FF0(v43);
  std::string __p = 0LL;
  uint64_t v52 = 0LL;
  *(void *)uint64_t v53 = 0LL;
  sub_10002418C(buf, "HCITraces");
  sub_10002418C(v40, "AutoDisableTime");
  if ((*(unsigned int (**)(uint64_t, _BYTE *, void **, void **))(*(void *)a1 + 56LL))(a1, buf, v40, &__p))
  {
    if (v53[7] >= 0) {
      uint64_t v10 = v53[7];
    }
    else {
      uint64_t v10 = v52;
    }
    if (v41 < 0) {
      operator delete(v40[0]);
    }
    if (v67 < 0)
    {
      operator delete(*(void **)buf);
      if (!v10) {
        goto LABEL_74;
      }
    }

    else if (!v10)
    {
      goto LABEL_74;
    }

    if (v53[7] >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    int v12 = CFStringCreateWithCString(0LL, p_p, 0x600u);
    uint64_t v13 = CFDateFormatterCreate(0LL, 0LL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    CFDateFormatterSetFormat(v13, @"HH:mm:ss MM-dd-yyyy");
    DateFromString = CFDateFormatterCreateDateFromString(0LL, v13, v12, 0LL);
    uint64_t v15 = DateFromString;
    if (DateFromString)
    {
      unsigned __int8 v16 = *(const __CFDate **)(a1 + 40);
      if (!v16 || CFDateCompare(DateFromString, v16, 0LL))
      {
        uint64_t v17 = *(dispatch_object_s **)(a1 + 32);
        if (v17)
        {
          dispatch_suspend(v17);
        }

        else
        {
          uint64_t v18 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(a1 + 24));
          *(void *)(a1 + sub_100242FAC(v1 - 32) = v18;
          handler[0] = _NSConcreteStackBlock;
          handler[1] = 3221225472LL;
          handler[2] = sub_1002C7738;
          handler[3] = &unk_10087EB20;
          handler[4] = a1;
          dispatch_source_set_event_handler(v18, handler);
          uint64_t v19 = *(dispatch_source_s **)(a1 + 32);
          v38[0] = _NSConcreteStackBlock;
          v38[1] = 3221225472LL;
          v38[2] = sub_1002C7760;
          v38[3] = &unk_10087EB20;
          v38[4] = a1;
          dispatch_source_set_cancel_handler(v19, v38);
        }

        char v20 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = &__p;
          if (v53[7] < 0) {
            uint64_t v21 = __p;
          }
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Enabling HCI unlimited tracing auto-disable for %s",  buf,  0xCu);
        }

        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        uint64_t v23 = CFDateCreate(0LL, Current);
        double AbsoluteTime = CFDateGetAbsoluteTime(v15);
        double v25 = CFDateGetAbsoluteTime(v23);
        CFRelease(v23);
        int v26 = *(dispatch_source_s **)(a1 + 32);
        dispatch_time_t v27 = dispatch_walltime(0LL, (uint64_t)((AbsoluteTime - v25) * 1000000000.0));
        dispatch_source_set_timer(v26, v27, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        dispatch_resume(*(dispatch_object_t *)(a1 + 32));
      }

      CFRelease(v15);
    }

    CFRelease(v13);
    CFRelease(v12);
  }

  else
  {
    if (v41 < 0) {
      operator delete(v40[0]);
    }
    if (v67 < 0) {
      operator delete(*(void **)buf);
    }
  }

void sub_1002C5478( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, void *__p, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002C5544(_BYTE *a1)
{
  uint64_t v2 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 2384LL))(v2))
  {
    unsigned int v8 = 0;
    sub_10002418C(buf, "SPMI");
    sub_10002418C(__p, "DebugControl");
    a1[255] = (*(uint64_t (**)(_BYTE *, uint8_t *, void **, unsigned int *))(*(void *)a1 + 128LL))( a1,  buf,  __p,  &v8);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(*(void **)buf);
    }
    if (a1[255])
    {
      int v3 = v8;
      if (v8 > 3)
      {
        a1[255] = 0;
        int v5 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
          sub_100668E50(v3, v5);
        }
      }

      else
      {
        a1[256] = v8;
        unsigned __int8 v4 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 67240192;
          *(_DWORD *)&uint8_t buf[4] = v3;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SPMI Debug Control is %{public}d", buf, 8u);
        }
      }
    }
  }

void sub_1002C56A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C56E0(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E00();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 8LL))(v2))
  {
    BOOL v4 = 0LL;
    return sub_1000B1DAC(v4);
  }

  unsigned int v3 = *(_DWORD *)(sub_1002E6E9C() + 708) - 2000;
  BOOL v4 = v3 < 0x7D0;
  char v13 = 0;
  sub_10002418C(buf, "Firmware");
  sub_10002418C(__p, "DisableAppleFwLogsCapture");
  int v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)a1 + 72LL))(a1, buf, __p, &v13);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0)
  {
    operator delete(*(void **)buf);
    if (!v5) {
      return sub_1000B1DAC(v4);
    }
  }

  else if (!v5)
  {
    return sub_1000B1DAC(v4);
  }

  BOOL v4 = v3 < 0x7D0 && v13 == 0;
  unsigned int v8 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Default writes disabling AppleFwLogCapture",  buf,  2u);
  }

  return sub_1000B1DAC(v4);
}

void sub_1002C5808( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C583C(uint64_t a1, uint64_t *a2, uint64_t *a3, std::string *a4)
{
  char v7 = objc_autoreleasePoolPush();
  else {
    unsigned int v8 = (uint64_t *)*a2;
  }
  int v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
  char v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    else {
      char v12 = (uint64_t *)*a3;
    }
    char v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v12));
    unsigned __int8 v14 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:v13]);

    uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSString);
    char isKindOfClass = objc_opt_isKindOfClass(v14, v15);
    if ((isKindOfClass & 1) != 0) {
      std::string::assign(a4, (const std::string::value_type *)[v14 UTF8String]);
    }
  }

  else
  {
    char isKindOfClass = 0;
  }

  objc_autoreleasePoolPop(v7);
  return isKindOfClass & 1;
}

void sub_1002C5954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002C598C(uint64_t a1, uint64_t *a2, int64x2_t *a3)
{
  context = objc_autoreleasePoolPush();
  else {
    int v5 = (uint64_t *)*a2;
  }
  int v6 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5));
  uint64_t v37 = (void *)CFPreferencesCopyAppValue(v6, @"com.apple.MobileBluetooth.debug");

  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSArray);
  if ((objc_opt_isKindOfClass(v37, v7) & 1) != 0)
  {
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    id v8 = v37;
    char v9 = 0;
    id v10 = [v8 countByEnumeratingWithState:&v40 objects:v48 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v41;
      do
      {
        for (i = 0LL; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v41 != v11) {
            objc_enumerationMutation(v8);
          }
          char v13 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)i);
          uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSString);
          if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
          {
            id v15 = v13;
            sub_10002418C(__p, (char *)[v15 UTF8String]);
            unint64_t v17 = a3->u64[1];
            unint64_t v16 = a3[1].u64[0];
            if (v17 >= v16)
            {
              unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - a3->i64[0]) >> 3);
              unint64_t v20 = v19 + 1;
              if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
                abort();
              }
              unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - a3->i64[0]) >> 3);
              if (2 * v21 > v20) {
                unint64_t v20 = 2 * v21;
              }
              if (v21 >= 0x555555555555555LL) {
                unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v22 = v20;
              }
              __int16 v47 = a3 + 1;
              if (v22) {
                uint64_t v23 = (char *)sub_10023F114((uint64_t)a3[1].i64, v22);
              }
              else {
                uint64_t v23 = 0LL;
              }
              uint64_t v24 = &v23[24 * v19];
              __int128 v25 = *(_OWORD *)__p;
              *((void *)v24 + 2) = v39;
              *(_OWORD *)uint64_t v24 = v25;
              __p[1] = 0LL;
              uint64_t v39 = 0LL;
              __p[0] = 0LL;
              uint64_t v27 = a3->i64[0];
              unint64_t v26 = a3->u64[1];
              if (v26 == a3->i64[0])
              {
                int64x2_t v30 = vdupq_n_s64(v26);
                char v28 = &v23[24 * v19];
              }

              else
              {
                char v28 = &v23[24 * v19];
                do
                {
                  __int128 v29 = *(_OWORD *)(v26 - 24);
                  *((void *)v28 - 1) = *(void *)(v26 - 8);
                  *(_OWORD *)(v28 - 24) = v29;
                  v28 -= 24;
                  *(void *)(v26 - 16) = 0LL;
                  *(void *)(v26 - 8) = 0LL;
                  *(void *)(v26 - 24) = 0LL;
                  v26 -= 24LL;
                }

                while (v26 != v27);
                int64x2_t v30 = *a3;
              }

              std::string v31 = v24 + 24;
              a3->i64[0] = (uint64_t)v28;
              a3->i64[1] = (uint64_t)(v24 + 24);
              int64x2_t v45 = v30;
              uint64_t v32 = a3[1].i64[0];
              a3[1].i64[0] = (uint64_t)&v23[24 * v22];
              uint64_t v46 = v32;
              uint64_t v44 = v30.i64[0];
              sub_10023F158((uint64_t)&v44);
              int v33 = SHIBYTE(v39);
              a3->i64[1] = (uint64_t)v31;
              if (v33 < 0) {
                operator delete(__p[0]);
              }
            }

            else
            {
              __int128 v18 = *(_OWORD *)__p;
              *(void *)(v17 + 16) = v39;
              *(_OWORD *)unint64_t v17 = v18;
              a3->i64[1] = v17 + 24;
            }

            char v9 = 1;
          }
        }

        id v10 = [v8 countByEnumeratingWithState:&v40 objects:v48 count:16];
      }

      while (v10);
    }

    uint64_t v34 = v9 & 1;
  }

  else
  {
    uint64_t v34 = 0LL;
  }

  objc_autoreleasePoolPop(context);
  return v34;
}

void sub_1002C5C8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void sub_1002C5CF0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = objc_autoreleasePoolPush();
  else {
    id v8 = (uint64_t *)*a2;
  }
  char v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
  id v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    id v12 = [v10 mutableCopy];
    else {
      char v13 = (uint64_t *)*a4;
    }
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v13));
    else {
      id v15 = (uint64_t *)*a3;
    }
    unint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v15));
    [v12 setObject:v14 forKey:v16];

    else {
      unint64_t v17 = (uint64_t *)*a2;
    }
  }

  else
  {
    else {
      __int128 v18 = (uint64_t *)*a4;
    }
    unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v18));
    else {
      unint64_t v20 = (uint64_t *)*a3;
    }
    unint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v20));
    id v12 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v19,  v21));

    else {
      unint64_t v17 = (uint64_t *)*a2;
    }
  }

  unint64_t v22 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v17));
  CFPreferencesSetAppValue(v22, v12, @"com.apple.MobileBluetooth.debug");

  CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
  objc_autoreleasePoolPop(v7);
}

void sub_1002C5EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002C5F54(uint64_t a1, uint64_t *a2, uint64_t *a3, char *a4)
{
  uint64_t v7 = objc_autoreleasePoolPush();
  else {
    id v8 = (uint64_t *)*a2;
  }
  char v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
  id v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    else {
      id v12 = (uint64_t *)*a3;
    }
    char v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v12));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:v13]);

    uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSString);
    if ((objc_opt_isKindOfClass(v14, v15) & 1) != 0)
    {
      id v16 = v14;
      if (([v16 isEqualToString:@"TRUE"] & 1) != 0
        || ([v16 isEqualToString:@"YES"] & 1) != 0)
      {
        char v17 = 1;
LABEL_12:
        *a4 = v17;

LABEL_16:
        uint64_t v18 = 1LL;
LABEL_22:

        goto LABEL_23;
      }

      if (([v16 isEqualToString:@"FALSE"] & 1) != 0
        || ([v16 isEqualToString:@"NO"] & 1) != 0)
      {
        char v17 = 0;
        goto LABEL_12;
      }
    }

    else
    {
      uint64_t v19 = objc_opt_class(&OBJC_CLASS___NSNumber);
      if ((objc_opt_isKindOfClass(v14, v19) & 1) != 0)
      {
        *a4 = [v14 BOOLValue];
        goto LABEL_16;
      }
    }

    uint64_t v18 = 0LL;
    goto LABEL_22;
  }

  uint64_t v18 = 0LL;
LABEL_23:

  objc_autoreleasePoolPop(v7);
  return v18;
}

void sub_1002C60F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002C613C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = objc_autoreleasePoolPush();
  else {
    id v8 = (uint64_t *)*a2;
  }
  char v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
  id v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    id v12 = [v10 mutableCopy];
    char v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a4));
    else {
      uint64_t v14 = (uint64_t *)*a3;
    }
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v14));
    [v12 setObject:v13 forKey:v15];

    else {
      id v16 = (uint64_t *)*a2;
    }
  }

  else
  {
    char v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a4));
    else {
      uint64_t v18 = (uint64_t *)*a3;
    }
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v18));
    id v12 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v17,  v19));

    else {
      id v16 = (uint64_t *)*a2;
    }
  }

  unint64_t v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v16));
  CFPreferencesSetAppValue(v20, v12, @"com.apple.MobileBluetooth.debug");

  CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
  objc_autoreleasePoolPop(v7);
}

void sub_1002C631C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002C6390(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v7 = objc_autoreleasePoolPush();
  else {
    id v8 = (uint64_t *)*a2;
  }
  char v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
  id v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    else {
      id v12 = (uint64_t *)*a3;
    }
    char v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v12));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:v13]);

    uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSNumber);
    char isKindOfClass = objc_opt_isKindOfClass(v14, v15);
    if ((isKindOfClass & 1) != 0) {
      *a4 = [v14 intValue];
    }
  }

  else
  {
    char isKindOfClass = 0;
  }

  objc_autoreleasePoolPop(v7);
  return isKindOfClass & 1;
}

void sub_1002C64A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002C64D8(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7 = objc_autoreleasePoolPush();
  else {
    id v8 = (uint64_t *)*a2;
  }
  char v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
  id v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    id v12 = [v10 mutableCopy];
    char v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
    else {
      uint64_t v14 = (uint64_t *)*a3;
    }
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v14));
    [v12 setObject:v13 forKey:v15];

    else {
      id v16 = (uint64_t *)*a2;
    }
  }

  else
  {
    char v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
    else {
      uint64_t v18 = (uint64_t *)*a3;
    }
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v18));
    id v12 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v17,  v19));

    else {
      id v16 = (uint64_t *)*a2;
    }
  }

  unint64_t v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v16));
  CFPreferencesSetAppValue(v20, v12, @"com.apple.MobileBluetooth.debug");

  CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
  objc_autoreleasePoolPop(v7);
}

void sub_1002C66B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002C672C(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v7 = objc_autoreleasePoolPush();
  else {
    id v8 = (uint64_t *)*a2;
  }
  char v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
  id v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    else {
      id v12 = (uint64_t *)*a3;
    }
    char v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v12));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:v13]);

    uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSNumber);
    char isKindOfClass = objc_opt_isKindOfClass(v14, v15);
    if ((isKindOfClass & 1) != 0)
    {
      [v14 floatValue];
      *a4 = v17;
    }
  }

  else
  {
    char isKindOfClass = 0;
  }

  objc_autoreleasePoolPop(v7);
  return isKindOfClass & 1;
}

void sub_1002C683C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002C6874(float a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = objc_autoreleasePoolPush();
  else {
    id v8 = (uint64_t *)*a3;
  }
  char v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
  id v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    id v13 = [v10 mutableCopy];
    *(float *)&double v14 = a1;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v14));
    else {
      id v16 = (uint64_t *)*a4;
    }
    int v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v16));
    [v13 setObject:v15 forKey:v17];

    else {
      uint64_t v18 = (uint64_t *)*a3;
    }
  }

  else
  {
    *(float *)&double v12 = a1;
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v12));
    else {
      unint64_t v20 = (uint64_t *)*a4;
    }
    unint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v20));
    id v13 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v19,  v21));

    else {
      uint64_t v18 = (uint64_t *)*a3;
    }
  }

  unint64_t v22 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v18));
  CFPreferencesSetAppValue(v22, v13, @"com.apple.MobileBluetooth.debug");

  CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
  objc_autoreleasePoolPop(v7);
}

void sub_1002C6A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002C6AD0(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v7 = objc_autoreleasePoolPush();
  else {
    id v8 = (uint64_t *)*a2;
  }
  char v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
  id v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    else {
      double v12 = (uint64_t *)*a3;
    }
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v12));
    double v14 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:v13]);

    uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSNumber);
    char isKindOfClass = objc_opt_isKindOfClass(v14, v15);
    if ((isKindOfClass & 1) != 0) {
      *a4 = [v14 unsignedIntValue];
    }
  }

  else
  {
    char isKindOfClass = 0;
  }

  objc_autoreleasePoolPop(v7);
  return isKindOfClass & 1;
}

void sub_1002C6BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002C6C18(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v7 = objc_autoreleasePoolPush();
  else {
    id v8 = (uint64_t *)*a2;
  }
  char v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
  id v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    id v12 = [v10 mutableCopy];
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a4));
    else {
      double v14 = (uint64_t *)*a3;
    }
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v14));
    [v12 setObject:v13 forKey:v15];

    else {
      id v16 = (uint64_t *)*a2;
    }
  }

  else
  {
    int v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a4));
    else {
      uint64_t v18 = (uint64_t *)*a3;
    }
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v18));
    id v12 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v17,  v19));

    else {
      id v16 = (uint64_t *)*a2;
    }
  }

  unint64_t v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v16));
  CFPreferencesSetAppValue(v20, v12, @"com.apple.MobileBluetooth.debug");

  CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
  objc_autoreleasePoolPop(v7);
}

void sub_1002C6DF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002C6E6C(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v7 = objc_autoreleasePoolPush();
  else {
    id v8 = (uint64_t *)*a2;
  }
  char v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
  id v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    else {
      id v12 = (uint64_t *)*a3;
    }
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v12));
    double v14 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:v13]);

    uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSNumber);
    char isKindOfClass = objc_opt_isKindOfClass(v14, v15);
    if ((isKindOfClass & 1) != 0) {
      *a4 = [v14 unsignedLongLongValue];
    }
  }

  else
  {
    char isKindOfClass = 0;
  }

  objc_autoreleasePoolPop(v7);
  return isKindOfClass & 1;
}

void sub_1002C6F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002C6FB4(uint64_t a1, uint64_t *a2, int64x2_t *a3)
{
  context = objc_autoreleasePoolPush();
  else {
    int v5 = (uint64_t *)*a2;
  }
  int v6 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5));
  uint64_t v37 = (void *)CFPreferencesCopyAppValue(v6, @"com.apple.MobileBluetooth.debug");

  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSArray);
  if ((objc_opt_isKindOfClass(v37, v7) & 1) != 0)
  {
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    id v8 = v37;
    char v9 = 0;
    id v10 = [v8 countByEnumeratingWithState:&v40 objects:v48 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v41;
      do
      {
        for (i = 0LL; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v41 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)i);
          uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSString);
          if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
          {
            id v15 = v13;
            sub_10002418C(__p, (char *)[v15 UTF8String]);
            unint64_t v17 = a3->u64[1];
            unint64_t v16 = a3[1].u64[0];
            if (v17 >= v16)
            {
              unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - a3->i64[0]) >> 3);
              unint64_t v20 = v19 + 1;
              if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
                abort();
              }
              unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - a3->i64[0]) >> 3);
              if (2 * v21 > v20) {
                unint64_t v20 = 2 * v21;
              }
              if (v21 >= 0x555555555555555LL) {
                unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v22 = v20;
              }
              __int16 v47 = a3 + 1;
              if (v22) {
                uint64_t v23 = (char *)sub_10023F114((uint64_t)a3[1].i64, v22);
              }
              else {
                uint64_t v23 = 0LL;
              }
              uint64_t v24 = &v23[24 * v19];
              __int128 v25 = *(_OWORD *)__p;
              *((void *)v24 + 2) = v39;
              *(_OWORD *)uint64_t v24 = v25;
              __p[1] = 0LL;
              uint64_t v39 = 0LL;
              __p[0] = 0LL;
              uint64_t v27 = a3->i64[0];
              unint64_t v26 = a3->u64[1];
              if (v26 == a3->i64[0])
              {
                int64x2_t v30 = vdupq_n_s64(v26);
                char v28 = &v23[24 * v19];
              }

              else
              {
                char v28 = &v23[24 * v19];
                do
                {
                  __int128 v29 = *(_OWORD *)(v26 - 24);
                  *((void *)v28 - 1) = *(void *)(v26 - 8);
                  *(_OWORD *)(v28 - 24) = v29;
                  v28 -= 24;
                  *(void *)(v26 - 16) = 0LL;
                  *(void *)(v26 - 8) = 0LL;
                  *(void *)(v26 - 24) = 0LL;
                  v26 -= 24LL;
                }

                while (v26 != v27);
                int64x2_t v30 = *a3;
              }

              std::string v31 = v24 + 24;
              a3->i64[0] = (uint64_t)v28;
              a3->i64[1] = (uint64_t)(v24 + 24);
              int64x2_t v45 = v30;
              uint64_t v32 = a3[1].i64[0];
              a3[1].i64[0] = (uint64_t)&v23[24 * v22];
              uint64_t v46 = v32;
              uint64_t v44 = v30.i64[0];
              sub_10023F158((uint64_t)&v44);
              int v33 = SHIBYTE(v39);
              a3->i64[1] = (uint64_t)v31;
              if (v33 < 0) {
                operator delete(__p[0]);
              }
            }

            else
            {
              __int128 v18 = *(_OWORD *)__p;
              *(void *)(v17 + 16) = v39;
              *(_OWORD *)unint64_t v17 = v18;
              a3->i64[1] = v17 + 24;
            }

            char v9 = 1;
          }
        }

        id v10 = [v8 countByEnumeratingWithState:&v40 objects:v48 count:16];
      }

      while (v10);
    }

    uint64_t v34 = v9 & 1;
  }

  else
  {
    uint64_t v34 = 0LL;
  }

  objc_autoreleasePoolPop(context);
  return v34;
}

void sub_1002C72B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void sub_1002C7318(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = objc_autoreleasePoolPush();
  else {
    id v8 = (uint64_t *)*a2;
  }
  char v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
  id v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    id v12 = [v10 mutableCopy];
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a4));
    else {
      uint64_t v14 = (uint64_t *)*a3;
    }
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v14));
    [v12 setObject:v13 forKey:v15];

    else {
      unint64_t v16 = (uint64_t *)*a2;
    }
  }

  else
  {
    unint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a4));
    else {
      __int128 v18 = (uint64_t *)*a3;
    }
    unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v18));
    id v12 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v17,  v19));

    else {
      unint64_t v16 = (uint64_t *)*a2;
    }
  }

  unint64_t v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v16));
  CFPreferencesSetAppValue(v20, v12, @"com.apple.MobileBluetooth.debug");

  CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
  objc_autoreleasePoolPop(v7);
}

void sub_1002C74F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1002C756C(_BYTE *a1)
{
  return a1[237] || ((*(uint64_t (**)(_BYTE *))(*(void *)a1 + 8LL))(a1) & 1) != 0 || a1[89] != 0;
}

BOOL sub_1002C75B4(_BYTE *a1)
{
  if (a1[250] || a1[248]) {
    return 1LL;
  }
  return os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT);
}

void sub_1002C7608(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "HCI tracing timer expired - disabling unlimited tracing",  v7,  2u);
  }

  unsigned int v3 = (const __CFDictionary *)CFPreferencesCopyAppValue(@"HCITraces", @"com.apple.MobileBluetooth.debug");
  BOOL v4 = v3;
  if (v3 && (CFTypeID v5 = CFGetTypeID(v3), v5 == CFDictionaryGetTypeID()))
  {
    MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, v4);
    CFDictionaryRemoveValue(MutableCopy, @"UnlimitedHCIFileSize");
    CFDictionaryRemoveValue(MutableCopy, @"MaxFileSize");
    CFDictionaryRemoveValue(MutableCopy, @"AutoDisableTime");
  }

  else
  {
    MutableCopy = 0LL;
  }

  CFPreferencesSetAppValue(@"HCITraces", MutableCopy, @"com.apple.MobileBluetooth.debug");
  CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
  sub_1002C4B00(a1);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1002C7738(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  dispatch_source_cancel(*(dispatch_source_t *)(v1 + 32));
  sub_1002C7608(v1);
}

void sub_1002C7760(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  dispatch_release(*(dispatch_object_t *)(v1 + 32));
  *(void *)(v1 + sub_100242FAC(v1 - 32) = 0LL;
}

void sub_1002C7788(uint64_t a1, int a2)
{
  uint64_t v4 = sub_1002E6E00();
  *(_BYTE *)(a1 + 196) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16LL))(v4);
  sub_10002418C(&v57, "FWStreamLogging");
  sub_10002418C(__p, "FWCoreDumpEnable");
  (*(void (**)(uint64_t, std::string *, void **, uint64_t))(*(void *)a1 + 72LL))(a1, &v57, __p, a1 + 196);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  sub_1000B1BB4(*(unsigned __int8 *)(a1 + 196));
  if (!*(_BYTE *)(a1 + 88)) {
    return;
  }
  sub_1002E6E9C();
  if (sub_1002CDD44())
  {
    LOBYTE(v43[0]) = 0;
    uint64_t v5 = sub_1002E6E00();
    LOBYTE(v43[0]) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    sub_10002418C(&v57, "Enable FW Logs");
    sub_10002418C(__p, "FWEnhancedLoggingEnable");
    int v6 = (*(uint64_t (**)(uint64_t, std::string *, void **, void **))(*(void *)a1 + 72LL))( a1,  &v57,  __p,  v43);
    if (v56 < 0) {
      operator delete(__p[0]);
    }
    int v7 = *(unsigned __int8 *)(a1 + 183);
    BOOL v8 = v7 != LOBYTE(v43[0]);
    if (v7 != LOBYTE(v43[0])) {
      *(_BYTE *)(a1 + 183) = v43[0];
    }
    uint64_t v9 = sub_1002E6BF0();
    BOOL v11 = (*(unsigned int (**)(uint64_t))(*(void *)v9 + 384LL))(v9)
    if (*(_BYTE *)(a1 + 183))
    {
      if (*(_DWORD *)(sub_1002E6E9C() + 708) == 15) {
        int v12 = 2048;
      }
      else {
        int v12 = 3072;
      }
      if (*(_DWORD *)(a1 + 184) != v12)
      {
        *(_DWORD *)(a1 + 184) = v12;
        BOOL v8 = 1;
      }

      if (*(_DWORD *)(a1 + 188) != 4)
      {
        *(_DWORD *)(a1 + 188) = 4;
        BOOL v8 = 1;
      }

      BOOL v54 = v11;
      BOOL v53 = v11;
      BOOL v52 = v11;
      unsigned __int8 v51 = 0;
      BOOL v50 = v11;
      BOOL v49 = v11;
      __int16 v48 = 0;
      unsigned __int8 v47 = 0;
      BOOL v46 = v11;
      __int16 v45 = 0;
      sub_10002418C(&v57, "Route to HCI");
      sub_10002418C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(void *)a1 + 72LL))(a1, &v57, __p, &v54);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      BOOL v13 = v54;
      sub_10002418C(&v57, "Log Level Lite");
      sub_10002418C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(void *)a1 + 72LL))(a1, &v57, __p, &v53);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      BOOL v14 = v53;
      sub_10002418C(&v57, "Log Level Advanced");
      sub_10002418C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(void *)a1 + 72LL))(a1, &v57, __p, &v52);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      BOOL v15 = v52;
      sub_10002418C(&v57, "Voice");
      sub_10002418C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, unsigned __int8 *))(*(void *)a1 + 72LL))( a1,  &v57,  __p,  &v51);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      int v16 = v51;
      sub_10002418C(&v57, "CoEx");
      sub_10002418C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(void *)a1 + 72LL))(a1, &v57, __p, &v50);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      BOOL v17 = v50;
      sub_10002418C(&v57, "CoEx1");
      sub_10002418C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(void *)a1 + 72LL))(a1, &v57, __p, &v49);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      BOOL v40 = v49;
      sub_10002418C(&v57, "CoEx2");
      sub_10002418C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, char *))(*(void *)a1 + 72LL))( a1,  &v57,  __p,  (char *)&v48 + 1);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      int v39 = HIBYTE(v48);
      sub_10002418C(&v57, "LTE CoEx");
      sub_10002418C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, __int16 *))(*(void *)a1 + 72LL))(a1, &v57, __p, &v48);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      int v38 = v48;
      sub_10002418C(&v57, "Apipe");
      sub_10002418C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, unsigned __int8 *))(*(void *)a1 + 72LL))( a1,  &v57,  __p,  &v47);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      int v37 = v47;
      sub_10002418C(&v57, "Non Connection");
      sub_10002418C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(void *)a1 + 72LL))(a1, &v57, __p, &v46);
      BOOL v35 = v17;
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      int v18 = v16;
      BOOL v36 = v11;
      int v19 = v46;
      sub_10002418C(&v57, "Scan Core");
      sub_10002418C(__p, "FWEnhancedLoggingEnable");
      int v20 = a2;
      (*(void (**)(uint64_t, std::string *, void **, char *))(*(void *)a1 + 72LL))( a1,  &v57,  __p,  (char *)&v45 + 1);
      BOOL v21 = v8;
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      int v22 = v6;
      int v23 = HIBYTE(v45);
      sub_10002418C(&v57, "HP Link");
      sub_10002418C(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, __int16 *))(*(void *)a1 + 72LL))(a1, &v57, __p, &v45);
      int v24 = v13 | (2 * v14) | (4 * v15) | (8 * v18) | (16 * v35) | (32 * v40) | (v39 << 6) | (v38 << 7) | (v37 << 8) | (v19 << 9);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      int v25 = v24 | (v23 << 10);
      int v26 = v25 | (v45 << 12);
      int v6 = v22;
      BOOL v8 = v21;
      if (*(_DWORD *)(a1 + 192) != v26)
      {
        *(_DWORD *)(a1 + 192) = v26;
        BOOL v8 = 1;
      }

      a2 = v20;
      BOOL v11 = v36;
    }

    if (v8 || a2)
    {
      if (*(_BYTE *)(a1 + 183))
      {
        uint64_t v27 = sub_1002E6E9C();
        (*(void (**)(uint64_t, void, void, void))(*(void *)v27 + 1232LL))(v27, 0LL, 0LL, 0LL);
      }

      uint64_t v28 = sub_1002E6E9C();
      (*(void (**)(uint64_t, void, void, void))(*(void *)v28 + 1232LL))( v28,  *(unsigned __int8 *)(a1 + 183),  *(unsigned int *)(a1 + 184),  *(unsigned int *)(a1 + 188));
      if (*(_BYTE *)(a1 + 183))
      {
        uint64_t v29 = sub_1002E6E9C();
        if ((v6 | v11) == 1) {
          uint64_t v30 = *(unsigned int *)(a1 + 192);
        }
        else {
          uint64_t v30 = 2LL;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 3352LL))(v29, v30);
      }
    }
  }

  BOOL v54 = 0;
  sub_10002418C(&v57, "FWStreamLogging");
  sub_10002418C(__p, "FWStreamLoggingTriggerLogDump");
  (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(void *)a1 + 72LL))(a1, &v57, __p, &v54);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (v54)
  {
    sub_10002418C(&v57, "FWStreamLogging");
    sub_10002418C(__p, "FWStreamLoggingTriggerLogDump");
    (*(void (**)(uint64_t, std::string *, void **, void))(*(void *)a1 + 80LL))(a1, &v57, __p, 0LL);
    if (v56 < 0) {
      operator delete(__p[0]);
    }
    memset(&v57, 0, sizeof(v57));
    sub_10002418C(__p, "FWStreamLogging");
    sub_10002418C(v43, "FWStreamLoggingLogDumpReason");
    char v31 = (*(uint64_t (**)(uint64_t, void **, void **, std::string *))(*(void *)a1 + 56LL))( a1,  __p,  v43,  &v57);
    if (v44 < 0) {
      operator delete(v43[0]);
    }
    if (v56 < 0)
    {
      operator delete(__p[0]);
      if ((v31 & 1) != 0) {
        goto LABEL_101;
      }
    }

    else if ((v31 & 1) != 0)
    {
LABEL_101:
      if ((v57.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v32 = &v57;
      }
      else {
        uint64_t v32 = (std::string *)v57.__r_.__value_.__r.__words[0];
      }
      (*(void (**)(uint64_t, std::string *))(*(void *)a1 + 496LL))(a1, v32);
      goto LABEL_106;
    }

    std::string::assign(&v57, "Manually triggered log dump");
    goto LABEL_101;
  }

void sub_1002C8274( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002C8364(uint64_t a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088E318);
  }
  uint64_t v2 = off_1008D60A8;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_100024238(__p, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 48);
  }

  sub_1004319D0((uint64_t)v2, 3703, (__int128 *)__p);
}

void sub_1002C8404( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002C8420(IOBTDebug *a1, const char *a2)
{
  if (*((_BYTE *)a1 + 183))
  {
    unsigned int v3 = IOBTDebug::create(a1);
    if (v3)
    {
      uint64_t v4 = (IOBTDebug *)v3;
      IOBTDebug::dumpLogs((IOBTDebug *)v3, a2);
      IOBTDebug::~IOBTDebug(v4);
      operator delete(v5);
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
    {
      sub_100668EDC();
    }
  }

  else
  {
    int v6 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "FW log streaming disabled, skipping BTDebug log dump",  v7,  2u);
    }
  }

void sub_1002C84E8(_Unwind_Exception *a1)
{
}

void sub_1002C8500(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1002C8508(_BYTE *a1, uint64_t a2, const char *a3)
{
  uint64_t v19 = 0LL;
  int v20 = &v19;
  uint64_t v21 = 0x2020000000LL;
  int v22 = -536870186;
  sub_1002E6E9C();
  BOOL v5 = sub_1002CDD44();
  if (!v5 || !a1[196])
  {
    BOOL v13 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "FW PCIe core dumps disabled or not supported",  buf,  2u);
    }

    goto LABEL_12;
  }

  int v6 = IOBTDebug::create((IOBTDebug *)v5);
  int v7 = (os_log_s *)qword_1008F7578;
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100668F08();
    }
LABEL_12:
    uint64_t v10 = 0LL;
    uint64_t v14 = 0LL;
    goto LABEL_13;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v24 = 1770496LL;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Triggering PCIe core dump with size %llu",  buf,  0xCu);
  }

  BOOL v8 = dispatch_group_create();
  uint64_t v9 = v8;
  if (v8)
  {
    dispatch_group_enter(v8);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_1002C8810;
    v18[3] = &unk_10088E2D8;
    v18[4] = &v19;
    void v18[5] = v9;
    uint64_t v10 = objc_retainBlock(v18);
    int v11 = IOBTDebug::coreDump( (std::mutex *)v6,  0x1B0400uLL,  a3,  (void (*)(void *, int))sub_1002C8820,  (uint64_t)v10);
    if (v11)
    {
      int v12 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_100668F8C(v11, v12);
      }
    }

    else
    {
      dispatch_time_t v17 = dispatch_time(0LL, 3000000000LL);
      if (dispatch_group_wait(v9, v17) && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_100668F60();
      }
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100668F34();
    }
    uint64_t v10 = 0LL;
  }

  IOBTDebug::~IOBTDebug((IOBTDebug *)v6);
  operator delete(v16);
  if (v9) {
    dispatch_release(v9);
  }
  uint64_t v14 = 1LL;
LABEL_13:
  if (*((_DWORD *)v20 + 6)) {
    (*(void (**)(_BYTE *, const char *))(*(void *)a1 + 496LL))(a1, a3);
  }

  _Block_object_dispose(&v19, 8);
  return v14;
}

void sub_1002C87CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1002C8810(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = *(dispatch_group_s **)(a1 + 40);
  *(_DWORD *)(*(void *)(v2 + 8) + 24LL) = a2;
  dispatch_group_leave(v3);
}

void sub_1002C8820(void *a1, uint64_t a2)
{
  unsigned int v3 = objc_retainBlock(a1);
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PCIe core dump complete: 0x%08X",  (uint8_t *)v5,  8u);
  }

  v3[2](v3, a2);
}

void sub_1002C88E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002C88FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 176);
}

uint64_t sub_1002C8904(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 180);
}

uint64_t sub_1002C890C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 177);
}

uint64_t sub_1002C8914(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002C8988;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EFC60 != -1) {
    dispatch_once(&qword_1008EFC60, block);
  }
  return byte_1008EFC59;
}

void sub_1002C8988(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "ForcePhyStats");
  int v3 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v2 + 72LL))( v2,  buf,  __p,  &byte_1008EFC59);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      return;
    }
  }

  else if (!v3)
  {
    return;
  }

  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008EFC59) {
      BOOL v5 = "enabled";
    }
    else {
      BOOL v5 = "disabled";
    }
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Forcing PHY Stats - %{public}s", buf, 0xCu);
  }

  *(_BYTE *)(v1 + 197) = byte_1008EFC59;
}

void sub_1002C8AD0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C8B0C()
{
  if (qword_1008EFC70 != -1) {
    dispatch_once(&qword_1008EFC70, &stru_10088E2F8);
  }
  return byte_1008EFC68;
}

void sub_1002C8B4C(id a1)
{
  uint64_t v1 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "ForceLatencyStats");
  int v2 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v1 + 72LL))( v1,  buf,  __p,  &byte_1008EFC68);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2) {
      return;
    }
  }

  else if (!v2)
  {
    return;
  }

  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008EFC68) {
      uint64_t v4 = "enabled";
    }
    else {
      uint64_t v4 = "disabled";
    }
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Forcing Latency Stats - %{public}s", buf, 0xCu);
  }

void sub_1002C8C80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C8CBC(uint64_t a1, uint64_t a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002C8D30;
  block[3] = &unk_10087EB20;
  void block[4] = a2;
  if (qword_1008EFC80 != -1) {
    dispatch_once(&qword_1008EFC80, block);
  }
  return byte_1008EFC78;
}

void sub_1002C8D30(uint64_t a1)
{
  __int16 v12 = 0;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "ScanAllowListEnabled");
  (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v2 + 72LL))(v2, buf, __p, (char *)&v12 + 1);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(*(void **)buf);
  }
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (HIBYTE(v12)) {
      uint64_t v4 = "enabled";
    }
    else {
      uint64_t v4 = "disabled";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "ScanAllowList is %s", buf, 0xCu);
  }

  if (HIBYTE(v12))
  {
    byte_1008EFC78 = 1;
    uint64_t v5 = sub_1002E6E00();
    sub_10002418C(buf, "LEScanAgentList");
    (*(void (**)(uint64_t, _BYTE *, void))(*(void *)v5 + 48LL))(v5, buf, *(void *)(a1 + 32));
    goto LABEL_23;
  }

  uint64_t v6 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "ScanDenyListEnabled");
  (*(void (**)(uint64_t, _BYTE *, void **, __int16 *))(*(void *)v6 + 72LL))(v6, buf, __p, &v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(*(void **)buf);
  }
  char v7 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if ((_BYTE)v12) {
      char v8 = "enabled";
    }
    else {
      char v8 = "disabled";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ScanDenyList is %s", buf, 0xCu);
  }

  if ((_BYTE)v12)
  {
    byte_1008EFC78 = 2;
    uint64_t v9 = sub_1002E6E00();
    sub_10002418C(buf, "LEScanAgentList");
    (*(void (**)(uint64_t, _BYTE *, void))(*(void *)v9 + 48LL))(v9, buf, *(void *)(a1 + 32));
LABEL_23:
    if (v14 < 0) {
      operator delete(*(void **)buf);
    }
  }

void sub_1002C8FC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C900C(uint64_t a1, uint64_t a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002C9080;
  block[3] = &unk_10087EB20;
  void block[4] = a2;
  if (qword_1008EFC90 != -1) {
    dispatch_once(&qword_1008EFC90, block);
  }
  return byte_1008EFC88;
}

void sub_1002C9080(uint64_t a1)
{
  __int16 v12 = 0;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "ConnectionScanAllowListEnabled");
  (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v2 + 72LL))(v2, buf, __p, (char *)&v12 + 1);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(*(void **)buf);
  }
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (HIBYTE(v12)) {
      uint64_t v4 = "enabled";
    }
    else {
      uint64_t v4 = "disabled";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "ConnectionScanAllowList is %s", buf, 0xCu);
  }

  if (HIBYTE(v12))
  {
    byte_1008EFC88 = 1;
    uint64_t v5 = sub_1002E6E00();
    sub_10002418C(buf, "LEConnectionScanAgentList");
    (*(void (**)(uint64_t, _BYTE *, void))(*(void *)v5 + 48LL))(v5, buf, *(void *)(a1 + 32));
    goto LABEL_23;
  }

  uint64_t v6 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "ConnectionScanDenyListEnabled");
  (*(void (**)(uint64_t, _BYTE *, void **, __int16 *))(*(void *)v6 + 72LL))(v6, buf, __p, &v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(*(void **)buf);
  }
  char v7 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if ((_BYTE)v12) {
      char v8 = "enabled";
    }
    else {
      char v8 = "disabled";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ConnectionScanDenyList is %s", buf, 0xCu);
  }

  if ((_BYTE)v12)
  {
    byte_1008EFC88 = 2;
    uint64_t v9 = sub_1002E6E00();
    sub_10002418C(buf, "LEConnectionScanAgentList");
    (*(void (**)(uint64_t, _BYTE *, void))(*(void *)v9 + 48LL))(v9, buf, *(void *)(a1 + 32));
LABEL_23:
    if (v14 < 0) {
      operator delete(*(void **)buf);
    }
  }

void sub_1002C9310( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C935C(uint64_t a1, uint64_t a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002C93D0;
  block[3] = &unk_10087EB20;
  void block[4] = a2;
  if (qword_1008EFCA0 != -1) {
    dispatch_once(&qword_1008EFCA0, block);
  }
  return byte_1008EFC98;
}

void sub_1002C93D0(uint64_t a1)
{
  __int16 v12 = 0;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "advAllowListEnabled");
  (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v2 + 72LL))(v2, buf, __p, (char *)&v12 + 1);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(*(void **)buf);
  }
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (HIBYTE(v12)) {
      uint64_t v4 = "enabled";
    }
    else {
      uint64_t v4 = "disabled";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "AdvAllowList is %s", buf, 0xCu);
  }

  if (HIBYTE(v12))
  {
    byte_1008EFC98 = 1;
    uint64_t v5 = sub_1002E6E00();
    sub_10002418C(buf, "AdvAgentList");
    (*(void (**)(uint64_t, _BYTE *, void))(*(void *)v5 + 48LL))(v5, buf, *(void *)(a1 + 32));
    goto LABEL_23;
  }

  uint64_t v6 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "AdvDenyListEnabled");
  (*(void (**)(uint64_t, _BYTE *, void **, __int16 *))(*(void *)v6 + 72LL))(v6, buf, __p, &v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(*(void **)buf);
  }
  char v7 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if ((_BYTE)v12) {
      char v8 = "enabled";
    }
    else {
      char v8 = "disabled";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "AdvDenyList is %s", buf, 0xCu);
  }

  if ((_BYTE)v12)
  {
    byte_1008EFC98 = 2;
    uint64_t v9 = sub_1002E6E00();
    sub_10002418C(buf, "AdvAgentList");
    (*(void (**)(uint64_t, _BYTE *, void))(*(void *)v9 + 48LL))(v9, buf, *(void *)(a1 + 32));
LABEL_23:
    if (v14 < 0) {
      operator delete(*(void **)buf);
    }
  }

void sub_1002C9660( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C96AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 90);
}

uint64_t sub_1002C96B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 91);
}

uint64_t sub_1002C96BC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 198);
}

uint64_t sub_1002C96C4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 199);
}

uint64_t sub_1002C96CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 200);
}

uint64_t sub_1002C96D4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 208);
}

uint64_t sub_1002C96DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 214);
}

uint64_t sub_1002C96E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 215);
}

BOOL sub_1002C96EC(uint64_t a1)
{
  return *(_BYTE *)(a1 + 204) == 0;
}

uint64_t sub_1002C96FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 212);
}

uint64_t sub_1002C9704(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 213);
}

uint64_t sub_1002C970C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 217);
}

uint64_t sub_1002C9714(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 216);
}

uint64_t sub_1002C971C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 92);
}

uint64_t sub_1002C9724(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 220);
}

uint64_t sub_1002C972C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 221);
}

void sub_1002C9734(uint64_t a1, char *a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  *(void *)a4 = 0LL;
  *(_WORD *)(a4 + 8) = 0;
  sub_10002418C(buf, "Diversity");
  sub_10002418C(__p, a2);
  int v10 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, std::string *))(*(void *)a1 + 56LL))( a1,  buf,  __p,  &__str);
  *a3 = v10;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v23 < 0) {
    operator delete(*(void **)buf);
  }
  if (*a3)
  {
    if (sub_1002C994C(v10, &__str, a4))
    {
      uint64_t v11 = qword_1008F7578;
      if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      p_str = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a5;
      __int16 v21 = 2080;
      int v22 = p_str;
      BOOL v13 = "Diversity coex %s override: %s";
      char v14 = (os_log_s *)v11;
      uint32_t v15 = 22;
    }

    else
    {
      *a3 = 0;
      uint64_t v16 = qword_1008F7578;
      if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = a5;
      BOOL v13 = "Warning: Diversity coex %s override: Invalid.  Override disabled.";
      char v14 = (os_log_s *)v16;
      uint32_t v15 = 12;
    }

    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
  }

void sub_1002C98FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1002C994C(int a1, std::string *__str, uint64_t a3)
{
  std::string::size_type size = __str->__r_.__value_.__s.__size_;
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (size == 20)
  {
    std::string::size_type v6 = 0LL;
    unint64_t v7 = 0LL;
    BOOL v8 = 0;
    __int16 v15 = 0;
    uint64_t v14 = 0LL;
    while (1)
    {
      memset(&v13, 0, sizeof(v13));
      std::string::basic_string(&v13, __str, v6, 2uLL, (std::allocator<char> *)&__endptr);
      __endptr = 0LL;
      uint64_t v9 = (v13.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v13 : (std::string *)v13.__r_.__value_.__r.__words[0];
      *((_BYTE *)&v14 + v7) = strtol((const char *)v9, &__endptr, 16);
      int v10 = *__endptr;
      if (v10) {
        break;
      }
      BOOL v8 = v7 > 8;
      v6 += 2LL;
      if (++v7 == 10)
      {
        *(void *)a3 = v14;
        *(_WORD *)(a3 + 8) = v15;
        return 1;
      }
    }
  }

  else
  {
    return 0;
  }

  return v8;
}

uint64_t sub_1002C9A90(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 93);
}

uint64_t sub_1002C9A98(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t sub_1002C9AA0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 100);
}

uint64_t sub_1002C9AA8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_1002C9AB0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 108);
}

uint64_t sub_1002C9AB8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 127);
}

uint64_t sub_1002C9AC0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 222);
}

uint64_t sub_1002C9AC8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 224);
}

uint64_t sub_1002C9AD0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 228);
}

uint64_t sub_1002C9AD8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 172);
}

uint64_t sub_1002C9AE0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 173);
}

uint64_t sub_1002C9AE8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 174);
}

uint64_t sub_1002C9AF0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 175);
}

uint64_t sub_1002C9AF8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 232);
}

void sub_1002C9B00(_BYTE *a1, int a2)
{
  uint64_t v4 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 352LL))(v4))
  {
    if (a1[249] != a2)
    {
      a1[249] = a2;
      if (a2) {
        uint64_t v5 = @"yes";
      }
      else {
        uint64_t v5 = @"no";
      }
      CFPreferencesSetAppValue(@"ENLoggingEntitledApp", v5, @"com.apple.MobileBluetooth.debug");
      CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
      int v6 = (*(uint64_t (**)(_BYTE *))(*(void *)a1 + 208LL))(a1);
      unint64_t v7 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = a1[249];
        v10[0] = 67109376;
        v10[1] = v8;
        __int16 v11 = 1024;
        int v12 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "fENAppHasLoggingEntitlement:%d plistEntitled:%d",  (uint8_t *)v10,  0xEu);
      }

      (*(void (**)(_BYTE *))(*(void *)a1 + 256LL))(a1);
      sub_1002C4B00((uint64_t)a1);
    }

    uint64_t v9 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "setENAppHasLoggingEntitlement",  (uint8_t *)v10,  2u);
    }
  }

uint64_t sub_1002C9C80()
{
  return 1LL;
}

uint64_t sub_1002C9C88()
{
  return 0LL;
}

void sub_1002C9C90(uint64_t a1, char a2, char a3)
{
  int v3 = *(dispatch_queue_s **)(a1 + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002C9CF0;
  v4[3] = &unk_1008878D8;
  void v4[4] = a1;
  char v5 = a2;
  char v6 = a3;
  dispatch_sync(v3, v4);
}

void sub_1002C9CF0(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v3 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 352LL))(v3))
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 == v2[251])
    {
      int v5 = *(unsigned __int8 *)(a1 + 41);
      int v6 = v2[250];
      if (v5 == v6)
      {
LABEL_15:
        uint64_t v9 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int v10 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "setENLoggingParams", v10, 2u);
        }

        return;
      }
    }

    else
    {
      v2[251] = v4;
      if (v4) {
        unint64_t v7 = @"yes";
      }
      else {
        unint64_t v7 = @"no";
      }
      CFPreferencesSetAppValue(@"rpiLogging", v7, @"com.apple.MobileBluetooth.debug");
      CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
      int v5 = *(unsigned __int8 *)(a1 + 41);
      int v6 = v2[250];
    }

    if (v5 != v6)
    {
      v2[250] = v5;
      if (v5) {
        int v8 = @"yes";
      }
      else {
        int v8 = @"no";
      }
      CFPreferencesSetAppValue(@"sensitiveLogging", v8, @"com.apple.MobileBluetooth.debug");
      CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
    }

    (*(void (**)(unsigned __int8 *))(*(void *)v2 + 256LL))(v2);
    sub_1002C4B00((uint64_t)v2);
    goto LABEL_15;
  }

BOOL sub_1002C9E3C()
{
  CFPropertyListRef v0 = CFPreferencesCopyAppValue(@"ENLoggingEntitledApp", @"com.apple.MobileBluetooth.debug");
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  BOOL v2 = CFEqual(v0, @"yes") != 0;
  CFRelease(v1);
  return v2;
}

BOOL sub_1002C9E98()
{
  CFPropertyListRef v0 = CFPreferencesCopyAppValue(@"sensitiveLogging", @"com.apple.MobileBluetooth.debug");
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  BOOL v2 = CFEqual(v0, @"yes") != 0;
  CFRelease(v1);
  return v2;
}

BOOL sub_1002C9EF4()
{
  CFPropertyListRef v0 = CFPreferencesCopyAppValue(@"rpiLogging", @"com.apple.MobileBluetooth.debug");
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  BOOL v2 = CFEqual(v0, @"yes") != 0;
  CFRelease(v1);
  return v2;
}

void sub_1002C9F50(_BYTE *a1)
{
  a1[253] = a1[250];
  BOOL v2 = ((*(unsigned int (**)(_BYTE *))(*(void *)a1 + 8LL))(a1) && !a1[252] || a1[249])
    && a1[250]
    && a1[251] != 0;
  a1[254] = v2;
  uint64_t v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = a1[250];
    int v5 = a1[251];
    int v6 = a1[252];
    int v7 = a1[249];
    int v8 = a1[253];
    v9[0] = 67110400;
    v9[1] = v4;
    __int16 v10 = 1024;
    int v11 = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    __int16 v18 = 1024;
    BOOL v19 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "fENSensitiveLogging: %d, fENRPILogging: %d, fRequireENLoggingProfileOnInternal:%d, fENAppHasLoggingEntitlement:%d, fPrivacySensitiveENLoggingEnabled:%d fRPIENLoggingEnabled: %d",  (uint8_t *)v9,  0x26u);
  }

BOOL sub_1002CA080(_BYTE *a1)
{
  BOOL v2 = (((*(uint64_t (**)(_BYTE *))(*(void *)a1 + 8LL))(a1) & 1) != 0 || a1[249]) && a1[248] != 0;
  uint64_t v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = a1[249];
    int v5 = a1[248];
    v7[0] = 67109376;
    v7[1] = v4;
    __int16 v8 = 1024;
    int v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "fENAppHasLoggingEntitlement:%d fInsecureDatabasePath:%d",  (uint8_t *)v7,  0xEu);
  }

  return v2;
}

uint64_t sub_1002CA16C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 257);
}

uint64_t sub_1002CA174(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 258);
}

uint64_t sub_1002CA17C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 259);
}

uint64_t sub_1002CA184(uint64_t a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, _BYTE *a6)
{
  return sub_1002CA1A4(a1, "CBUseCaseDigitalID", a2, a3, a4, a5, a6);
}

uint64_t sub_1002CA1A4( uint64_t a1, const std::string::value_type *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, _BYTE *a6, _BYTE *a7)
{
  int v13 = *a3;
  int v48 = *a4;
  int v49 = v13;
  int v14 = *a5;
  int v15 = *a6;
  int v46 = *a7;
  int v47 = v14;
  memset(&v45, 0, sizeof(v45));
  sub_10002418C(&v45, "LEConnectionPrioritization");
  std::string::append(&v45, a2);
  uint64_t v16 = sub_1002E6E00();
  if ((v45.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v17 = &v45;
  }
  else {
    int v17 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  sub_10002418C(buf, (char *)v17);
  sub_10002418C(__p, "priority");
  int v18 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v16 + 128LL))(v16, buf, __p, &v49);
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  if (v53 < 0)
  {
    operator delete(*(void **)buf);
    if (!v18) {
      goto LABEL_14;
    }
  }

  else if (!v18)
  {
    goto LABEL_14;
  }

  BOOL v19 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = &v45;
    if ((v45.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v20 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v20;
    __int16 v51 = 1024;
    int v52 = v49;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%s priority parameter set to %d", buf, 0x12u);
  }

void sub_1002CA774( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002CA7FC(uint64_t a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, _BYTE *a6)
{
  return sub_1002CA1A4(a1, "CBUseCaseDigitalIDTSA", a2, a3, a4, a5, a6);
}

uint64_t sub_1002CA81C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 280) = a2;
  return result;
}

BOOL sub_1002CA824(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 280);
  return !v3 || v3 + *(void *)(a1 + 288) * a2 < a3;
}

uint64_t sub_1002CA84C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 268);
}

uint64_t sub_1002CA854(uint64_t a1)
{
  return *(unsigned int *)(a1 + 272);
}

BOOL sub_1002CA85C(uint64_t a1)
{
  char v7 = 0;
  sub_10002418C(v5, "Scan");
  sub_10002418C(__p, "DisableRssiFilter");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)a1 + 72LL))(a1, v5, __p, &v7);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  return v7 != 0;
}

void sub_1002CA904( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1002CA938(uint64_t a1)
{
  char v7 = 0;
  sub_10002418C(v5, "Scan");
  sub_10002418C(__p, "EnableNearbyActionNoWakeAdvMatchingRuleScan");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)a1 + 72LL))(a1, v5, __p, &v7);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  return v7 != 0;
}

void sub_1002CA9E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002CAA14(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 253);
}

uint64_t sub_1002CAA1C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 254);
}

uint64_t sub_1002CAA24(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 89);
}

uint64_t sub_1002CAA2C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 192);
}

uint64_t sub_1002CAA34(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 218);
}

uint64_t sub_1002CAA3C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 219);
}

uint64_t sub_1002CAA44(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 236);
}

uint64_t sub_1002CAA4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 183);
}

uint64_t sub_1002CAA54(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 196);
}

uint64_t sub_1002CAA5C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 238);
}

uint64_t sub_1002CAA64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 237);
}

uint64_t sub_1002CAA6C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 264);
}

uint64_t sub_1002CAA74(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 265);
}

uint64_t sub_1002CAA7C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 239);
}

uint64_t sub_1002CAA84(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 240);
}

uint64_t sub_1002CAA8C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 241);
}

uint64_t sub_1002CAA94(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 242);
}

uint64_t sub_1002CAA9C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 243);
}

uint64_t sub_1002CAAA4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 244);
}

uint64_t sub_1002CAAAC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 245);
}

uint64_t sub_1002CAAB4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 246);
}

uint64_t sub_1002CAABC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 247);
}

uint64_t sub_1002CAAC4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 255);
}

uint64_t sub_1002CAACC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 256);
}

uint64_t sub_1002CAAD4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 260);
}

void sub_1002CAADC(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_1002CAB0C(_Unwind_Exception *a1)
{
}

void sub_1002CAB20(id a1)
{
  uint64_t v1 = operator new(0x1C8uLL);
  sub_100352FF0();
  qword_1008D67D0 = (uint64_t)v1;
}

void sub_1002CAB50(_Unwind_Exception *a1)
{
}

void sub_1002CAB64(id a1)
{
  uint64_t v1 = operator new(0x2C8uLL);
  sub_100213DA8();
  off_1008D60D8 = v1;
}

void sub_1002CAB94(_Unwind_Exception *a1)
{
}

void sub_1002CABA8(id a1)
{
  uint64_t v1 = operator new(0x310uLL);
  sub_10036BB90();
  qword_1008D6450 = (uint64_t)v1;
}

void sub_1002CABD8(_Unwind_Exception *a1)
{
}

void *sub_1002CABEC(void *a1)
{
  *a1 = &off_10088E3D0;
  a1[1] = sub_1002E9168((uint64_t)a1);
  return a1;
}

uint64_t sub_1002CAC20(uint64_t a1)
{
  *(void *)a1 = &off_10088E3D0;
  (***(void (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  return a1;
}

void sub_1002CAC5C(void (****a1)(void))
{
  *a1 = (void (***)(void))&off_10088E3D0;
  (**a1[1])(a1[1]);
  operator delete(a1);
}

uint64_t sub_1002CAC98(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 8) + 48LL))( *(void *)(a1 + 8),  0LL,  0LL);
}

void sub_1002CACB0(uint64_t a1, unsigned int a2)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_10088E418);
  }
  sub_10023B684((uint64_t)off_1008D60D8, a2);
}

void sub_1002CAD18(id a1)
{
  uint64_t v1 = operator new(0x2C8uLL);
  sub_100213DA8();
  off_1008D60D8 = v1;
}

void sub_1002CAD48(_Unwind_Exception *a1)
{
}

void sub_1002CAD5C(void (***a1)(void, void, const UInt8 *, void))
{
  BOOL v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v3[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Firmware Debug Settings", (uint8_t *)v3, 2u);
  }

  memset(v3, 0, sizeof(v3));
  if (sub_1002CAF8C( @"com.apple.MobileBluetooth.debug",  @"fw.TraceMode",  -1LL,  7LL,  (const char **)off_1008D92C8) != -1) {
    sub_1002CB298();
  }
  if (sub_1002CAF8C( @"com.apple.MobileBluetooth.debug",  @"fw.TraceLevel",  -1LL,  7LL,  (const char **)off_1008D9308) != -1) {
    sub_1002CB320();
  }
  if (sub_1002CB3A8(@"com.apple.MobileBluetooth.debug", @"fw.TraceMask", v3, 32)) {
    sub_1002CB680();
  }
  if (sub_1002CB3A8(@"com.apple.MobileBluetooth.debug", @"phy.TraceMask", v3, 32)) {
    sub_1002CB708();
  }
  if (sub_1002CAF8C(@"com.apple.MobileBluetooth.debug", @"phy.TraceLevel", -1LL, 256LL, 0LL) != -1) {
    sub_1002CB790();
  }
  if (sub_1002CAF8C( @"com.apple.MobileBluetooth.debug",  @"fw.CaptureTimeout",  -1LL,  (uint64_t)&_mh_execute_header,  0LL) != -1) {
    sub_1002CB818();
  }
  if (sub_1002CAF8C( @"com.apple.MobileBluetooth.debug",  @"fw.TriggerCapture",  -1LL,  (uint64_t)&_mh_execute_header,  0LL) != -1) {
    sub_1002CB8A0();
  }
  if (sub_1002CAF8C(@"com.apple.MobileBluetooth.debug", @"fw.TapToRadar", -1LL, 2LL, 0LL) != -1) {
    sub_1002CB9D8();
  }
  sub_1002CBA60(a1, @"com.apple.MobileBluetooth.debug", @"fw.GeneralDebug");
}

uint64_t sub_1002CAF8C(const __CFString *a1, CFStringRef theString, uint64_t a3, uint64_t a4, const char **a5)
{
  uint64_t v7 = a3;
  uint64_t valuePtr = a3;
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  int v11 = (const __CFString *)CFPreferencesCopyAppValue(theString, a1);
  __int16 v12 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = CStringPtr;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Checking for %s", buf, 0xCu);
  }

  if (v11)
  {
    CFTypeID v13 = CFGetTypeID(v11);
    if (v13 == CFNumberGetTypeID())
    {
      int Value = CFNumberGetValue((CFNumberRef)v11, kCFNumberSInt64Type, &valuePtr);
      uint64_t v15 = valuePtr;
      uint64_t v16 = "";
      if (Value && valuePtr > v7 && valuePtr < a4)
      {
        if (a5)
        {
LABEL_9:
          uint64_t v16 = a5[v15];
          goto LABEL_31;
        }

void sub_1002CB298()
{
  int v0 = sub_100193FE0();
  sub_1000A8688();
  if (v0)
  {
    uint64_t v1 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v2 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "Warning: BT_VSC_SetTraceMode not implemented for current chipset!",  v2,  2u);
    }
  }

void sub_1002CB320()
{
  int v0 = sub_100194068();
  sub_1000A8688();
  if (v0)
  {
    uint64_t v1 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v2 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "Warning: BT_VSC_SetTraceLevel not implemented for current chipset!",  v2,  2u);
    }
  }

void *sub_1002CB3A8(const __CFString *a1, CFStringRef theString, void *a3, int a4)
{
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  CFPropertyListRef v9 = CFPreferencesCopyAppValue(theString, a1);
  __int16 v10 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v30 = CStringPtr;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Checking for %s", buf, 0xCu);
  }

  if (!v9) {
    return 0LL;
  }
  CFTypeID v11 = CFGetTypeID(v9);
  if (v11 == CFDataGetTypeID())
  {
    CFIndex Length = CFDataGetLength((CFDataRef)v9);
    BytePtr = CFDataGetBytePtr((CFDataRef)v9);
    uint64_t v15 = 0LL;
    if (BytePtr && Length)
    {
      uint64_t v16 = BytePtr;
      __chkstk_darwin(BytePtr, v14);
      int v18 = &buf[-((v17 + 16) & 0xFFFFFFFFFFFFFFF0LL)];
      bzero(v18, 3 * Length + 1);
      sub_1001EE0BC( (uint64_t)v18,  (unsigned __int16)(3 * Length + 1),  (uint64_t)"%@",  v19,  v20,  v21,  v22,  v23,  (uint64_t)v16);
      BOOL v24 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v30 = CStringPtr;
        __int16 v31 = 2080;
        *(void *)uint64_t v32 = v18;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "\t%s = <%s>", buf, 0x16u);
      }

      if (Length == a4)
      {
        memcpy(a3, v16, Length);
      }

      else
      {
        uint64_t v27 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315650;
          uint64_t v30 = CStringPtr;
          __int16 v31 = 1024;
          *(_DWORD *)uint64_t v32 = Length;
          *(_WORD *)&v32[4] = 1024;
          *(_DWORD *)&v32[6] = a4;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Warning: \t\tIllegal %s value len %d expecting %d, ignoring!",  buf,  0x18u);
        }

        a3 = 0LL;
      }

      uint64_t v15 = a3;
    }
  }

  else
  {
    int v25 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      CFTypeID v26 = CFGetTypeID(v9);
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v30 = CStringPtr;
      __int16 v31 = 2048;
      *(void *)uint64_t v32 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Warning: \tIllegal %s data type %lu should be Data, ignoring!",  buf,  0x16u);
    }

    uint64_t v15 = 0LL;
  }

  CFRelease(v9);
  return v15;
}

void sub_1002CB680()
{
  int v0 = sub_100194178();
  sub_1000A8688();
  if (v0)
  {
    uint64_t v1 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v2 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "Warning: BT_VSC_SetTraceMask not implemented for current chipset!",  v2,  2u);
    }
  }

void sub_1002CB708()
{
  int v0 = sub_100194200();
  sub_1000A8688();
  if (v0)
  {
    uint64_t v1 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v2 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "Warning: BT_VSC_SetPhyTraceMask not implemented for current chipset!",  v2,  2u);
    }
  }

void sub_1002CB790()
{
  int v0 = sub_1001940F0();
  sub_1000A8688();
  if (v0)
  {
    uint64_t v1 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v2 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "Warning: BT_VSC_SetPhyTraceLevel not implemented for current chipset!",  v2,  2u);
    }
  }

void sub_1002CB818()
{
  int v0 = sub_100194288();
  sub_1000A8688();
  if (v0)
  {
    uint64_t v1 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v2 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "Warning: BT_VSC_SetCaptureTimeout not implemented for current chipset!",  v2,  2u);
    }
  }

void sub_1002CB8A0()
{
  int v0 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "initiating FW triggerCapture", buf, 2u);
  }

  sub_1000A85A0();
  int v1 = sub_100194310();
  sub_1000A8688();
  BOOL v2 = (os_log_s *)qword_1008F7578;
  BOOL v3 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
  if (v1)
  {
    if (!v3) {
      return;
    }
    __int16 v8 = 0;
    char v4 = "Warning: BT_VSC_TriggerCapture not implemented for current chipset!";
    int v5 = (uint8_t *)&v8;
    goto LABEL_10;
  }

  if (v3)
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "waiting for FW triggerCapture completion...",  v7,  2u);
  }

  sub_1000A8BF0(byte_1008EFCA8, 0);
  BOOL v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v6 = 0;
    char v4 = "FW triggerCapture Completed";
    int v5 = (uint8_t *)&v6;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v4, v5, 2u);
  }

void sub_1002CB9D8()
{
  int v0 = sub_100194398();
  sub_1000A8688();
  if (v0)
  {
    int v1 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v2 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "Warning: BT_VSC_EnableTapToRadar not implemented for current chipset!",  v2,  2u);
    }
  }

void sub_1002CBA60( void (***a1)(void, void, const UInt8 *, void), const __CFString *a2, CFStringRef theString)
{
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  CFPropertyListRef v7 = CFPreferencesCopyAppValue(theString, a2);
  __int16 v8 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    BOOL v54 = CStringPtr;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Checking for %s", buf, 0xCu);
  }

  if (v7)
  {
    CFTypeID v9 = CFGetTypeID(v7);
    if (v9 == CFArrayGetTypeID())
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)v7);
      CFTypeID v11 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315138;
        BOOL v54 = CStringPtr;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "\t%s = (", buf, 0xCu);
      }

      if (Count >= 1)
      {
        CFIndex v13 = 0LL;
        *(void *)&__int128 v12 = 67109120LL;
        __int128 v51 = v12;
        *(void *)&__int128 v12 = 136315138LL;
        __int128 v52 = v12;
        v50[0] = a1;
        do
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v7, v13);
          uint64_t v15 = (os_log_s *)qword_1008F7578;
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "\t\t{", buf, 2u);
          }

          int Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"Description");
          if (Value)
          {
            uint64_t v17 = Value;
            CFTypeID v18 = CFGetTypeID(Value);
            if (v18 == CFStringGetTypeID())
            {
              uint64_t v19 = CFStringGetCStringPtr(v17, 0x8000100u);
              uint64_t v20 = (os_log_s *)qword_1008F7578;
              if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)std::string buf = v52;
                BOOL v54 = v19;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "\t\t\tDescription: %s;", buf, 0xCu);
              }
            }
          }

          uint64_t v21 = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, @"Code");
          if (v21 && (v22 = v21, CFTypeID v23 = CFGetTypeID(v21), v23 == CFDataGetTypeID()) && CFDataGetLength(v22) == 2)
          {
            BytePtr = CFDataGetBytePtr(v22);
            int v25 = (os_log_s *)qword_1008F7578;
            if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v26 = bswap32(*(unsigned __int16 *)BytePtr) >> 16;
              *(_DWORD *)std::string buf = v51;
              LODWORD(v54) = v26;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "\t\t\tCode: <%04X>;", buf, 8u);
            }

            uint64_t v27 = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, @"Value");
            if (!v27)
            {
              std::string v42 = (os_log_s *)qword_1008F7578;
              if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Warning: \t\t\tValue: <empty>;",
                  buf,
                  2u);
              }

              LOWORD(Length) = 0;
              __int16 v31 = (const UInt8 *)"";
              goto LABEL_34;
            }

            int v28 = v27;
            CFTypeID v29 = CFGetTypeID(v27);
            if (v29 == CFDataGetTypeID())
            {
              CFIndex Length = CFDataGetLength(v28);
              __int16 v31 = CFDataGetBytePtr(v28);
              v50[1] = v50;
              __chkstk_darwin(v31, v32);
              uint64_t v34 = (char *)v50 - ((v33 + 16) & 0xFFFFFFFFFFFFFFF0LL);
              bzero(v34, 3 * Length + 1);
              sub_1001EE0BC( (uint64_t)v34,  (unsigned __int16)(3 * Length + 1),  (uint64_t)"%@",  v35,  v36,  v37,  v38,  v39,  (uint64_t)v31);
              BOOL v40 = (os_log_s *)qword_1008F7578;
              if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)std::string buf = v52;
                BOOL v54 = v34;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "\t\t\tValue: <%s>;", buf, 0xCu);
              }

              a1 = (void (***)(void, void, const UInt8 *, void))v50[0];
LABEL_34:
              __int128 v43 = (os_log_s *)qword_1008F7578;
              if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "\t\t}", buf, 2u);
              }

              (**a1)(a1, *(unsigned __int16 *)BytePtr, v31, (unsigned __int16)Length);
              goto LABEL_29;
            }

            uint64_t v41 = (os_log_s *)qword_1008F7578;
            if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Warning: \t\t\tValue: wrong type, ignoring this entry!",  buf,  2u);
              uint64_t v41 = (os_log_s *)qword_1008F7578;
            }

            if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_29;
            }
          }

          else
          {
            uint64_t v41 = (os_log_s *)qword_1008F7578;
            if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Warning: \t\t\tCode: missing or wrong type or len, ignoring this entry!",  buf,  2u);
              uint64_t v41 = (os_log_s *)qword_1008F7578;
            }

            if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_29;
            }
          }

          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "\t\t}", buf, 2u);
LABEL_29:
          ++v13;
        }

        while (Count != v13);
      }

      uint64_t v49 = qword_1008F7578;
      if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_46;
      }
      *(_WORD *)std::string buf = 0;
      int v46 = "\t)";
      int v47 = (os_log_s *)v49;
      uint32_t v48 = 2;
    }

    else
    {
      uint64_t v44 = qword_1008F7578;
      if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
LABEL_46:
        CFRelease(v7);
        return;
      }

      CFTypeID v45 = CFGetTypeID(v7);
      *(_DWORD *)std::string buf = 136315394;
      BOOL v54 = CStringPtr;
      __int16 v55 = 2048;
      CFTypeID v56 = v45;
      int v46 = "Warning: \tIllegal %s data type %lu should be Array, ignoring!";
      int v47 = (os_log_s *)v44;
      uint32_t v48 = 22;
    }

    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, v46, buf, v48);
    goto LABEL_46;
  }

void sub_1002CC06C()
{
  int v0 = sub_100194420();
  sub_1000A8688();
  if (v0)
  {
    int v1 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v2 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "Warning: BT_VSC_GeneralDebug not implemented for current chipset!",  v2,  2u);
    }
  }

void sub_1002CC10C(int a1)
{
  BOOL v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "BT_VSC_SetTraceMode completed with status 0x%08X",  (uint8_t *)v3,  8u);
  }

void sub_1002CC1AC(int a1)
{
  BOOL v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "BT_VSC_SetTraceLevel completed with status 0x%08X",  (uint8_t *)v3,  8u);
  }

void sub_1002CC24C(int a1)
{
  BOOL v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "BT_VSC_SetPhyTraceLevel completed with status 0x%08X",  (uint8_t *)v3,  8u);
  }

void sub_1002CC2EC(int a1)
{
  BOOL v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "BT_VSC_SetTraceMask completed with status 0x%08X",  (uint8_t *)v3,  8u);
  }

void sub_1002CC38C(int a1)
{
  BOOL v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "BT_VSC_SetPhyTraceMask completed with status 0x%08X",  (uint8_t *)v3,  8u);
  }

void sub_1002CC42C(int a1)
{
  BOOL v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "BT_VSC_SetCaptureTimeout completed with status 0x%08X",  (uint8_t *)v3,  8u);
  }

uint64_t sub_1002CC4CC(int a1)
{
  BOOL v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "BT_VSC_TriggerCapture completed with status 0x%08X",  (uint8_t *)v4,  8u);
  }

  return sub_1000A8E98(byte_1008EFCA8);
}

void sub_1002CC578(int a1)
{
  BOOL v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "BT_VSC_EnableTapToRadar completed with status 0x%08X",  (uint8_t *)v3,  8u);
  }

void sub_1002CC618(int a1)
{
  BOOL v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "BT_VSC_GeneralDebug completed with status 0x%08X",  (uint8_t *)v3,  8u);
  }

void *sub_1002CC6B8(void *a1)
{
  *a1 = &off_10088E460;
  uint64_t v9 = 0LL;
  sub_10017B000(a1 + 1, &v9);
  uint64_t v2 = a1[1];
  uint64_t v3 = qword_1008F7578;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_DWORD *)std::string buf = 134217984;
      uint64_t v11 = v2;
      int v5 = "Warning: BT driver=0x%08llX";
      __int16 v6 = (os_log_s *)v3;
      uint32_t v7 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
    }
  }

  else if (v4)
  {
    *(_WORD *)std::string buf = 0;
    int v5 = "Warning: BT driver not ready yet!, skipping";
    __int16 v6 = (os_log_s *)v3;
    uint32_t v7 = 2;
    goto LABEL_6;
  }

  return a1;
}

void sub_1002CC7B8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Driver Debug Settings", buf, 2u);
  }

  *(_OWORD *)std::string buf = 0u;
  __int128 v12 = 0u;
  if (*(void *)(a1 + 8))
  {
    uint64_t v3 = sub_1002CAF8C( @"com.apple.MobileBluetooth.debug",  @"driver.TraceMode",  -1LL,  5LL,  (const char **)off_1008D9348);
    if (v3 != -1) {
      sub_1002CC9F8(a1, v3);
    }
    uint64_t v4 = sub_1002CAF8C( @"com.apple.MobileBluetooth.debug",  @"driver.TraceLevel",  -1LL,  7LL,  (const char **)off_1008D9378);
    if (v4 != -1) {
      sub_1002CCAF4(a1, v4);
    }
    int v5 = sub_1002CB3A8(@"com.apple.MobileBluetooth.debug", @"driver.TraceMask", buf, 32);
    if (v5) {
      sub_1002CCBF0(a1, (uint64_t)v5);
    }
    uint64_t v6 = sub_1002CAF8C( @"com.apple.MobileBluetooth.debug",  @"driver.CaptureTimeout",  -1LL,  (uint64_t)&_mh_execute_header,  0LL);
    if (v6 != -1) {
      sub_1002CCCEC(a1, v6);
    }
    uint64_t v7 = sub_1002CAF8C( @"com.apple.MobileBluetooth.debug",  @"driver.TriggerCapture",  -1LL,  (uint64_t)&_mh_execute_header,  0LL);
    if (v7 != -1) {
      sub_1002CCDE8(a1, v7);
    }
    uint64_t v8 = sub_1002CAF8C(@"com.apple.MobileBluetooth.debug", @"driver.TapToRadar", -1LL, 2LL, 0LL);
    if (v8 != -1) {
      sub_1002CCEE4(a1, v8 != 0);
    }
    sub_1002CBA60( (void (***)(void, void, const UInt8 *, void))a1,  @"com.apple.MobileBluetooth.debug",  @"driver.GeneralDebug");
  }

  else
  {
    uint64_t v9 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int16 v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Warning: BT driver not ready yet!, skipping",  v10,  2u);
    }
  }

void sub_1002CC9F8(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 8) + 64LL);
  if (!v2)
  {
    uint64_t v9 = qword_1008F7578;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v6 = "Warning: HciDriver_t::setTraceMode not implemented for current chipset!";
    uint64_t v7 = (os_log_s *)v9;
    uint32_t v8 = 2;
    goto LABEL_7;
  }

  int v3 = v2(a2);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      uint64_t v6 = "Warning: Calling HciDriver_t::setTraceMode failed with status 0x%08X!";
      uint64_t v7 = (os_log_s *)v5;
      uint32_t v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }

void sub_1002CCAF4(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 8) + 72LL);
  if (!v2)
  {
    uint64_t v9 = qword_1008F7578;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v6 = "Warning: HciDriver_t::setTraceLevel not implemented for current chipset!";
    uint64_t v7 = (os_log_s *)v9;
    uint32_t v8 = 2;
    goto LABEL_7;
  }

  int v3 = v2(a2);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      uint64_t v6 = "Warning: Calling HciDriver_t::setTraceLevel failed with status 0x%08X!";
      uint64_t v7 = (os_log_s *)v5;
      uint32_t v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }

void sub_1002CCBF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 8) + 80LL);
  if (!v2)
  {
    uint64_t v9 = qword_1008F7578;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v6 = "Warning: HciDriver_t::setTraceMask not implemented for current chipset!";
    uint64_t v7 = (os_log_s *)v9;
    uint32_t v8 = 2;
    goto LABEL_7;
  }

  int v3 = v2(a2);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      uint64_t v6 = "Warning: Calling HciDriver_t::setTraceMask failed with status 0x%08X!";
      uint64_t v7 = (os_log_s *)v5;
      uint32_t v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }

void sub_1002CCCEC(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 8) + 88LL);
  if (!v2)
  {
    uint64_t v9 = qword_1008F7578;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v6 = "Warning: HciDriver_t::setCaptureTimeout not implemented for current chipset!";
    uint64_t v7 = (os_log_s *)v9;
    uint32_t v8 = 2;
    goto LABEL_7;
  }

  int v3 = v2(a2);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      uint64_t v6 = "Warning: Calling HciDriver_t::setCaptureTimeout failed with status 0x%08X!";
      uint64_t v7 = (os_log_s *)v5;
      uint32_t v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }

void sub_1002CCDE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 8) + 96LL);
  if (!v2)
  {
    uint64_t v9 = qword_1008F7578;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v6 = "Warning: HciDriver_t::triggerCapture not implemented for current chipset!";
    uint64_t v7 = (os_log_s *)v9;
    uint32_t v8 = 2;
    goto LABEL_7;
  }

  int v3 = v2(a2);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      uint64_t v6 = "Warning: Calling HciDriver_t::triggerCapture failed with status 0x%08X!";
      uint64_t v7 = (os_log_s *)v5;
      uint32_t v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }

void sub_1002CCEE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 8) + 104LL);
  if (!v2)
  {
    uint64_t v9 = qword_1008F7578;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v6 = "Warning: HciDriver_t::enableTapToRadar not implemented for current chipset!";
    uint64_t v7 = (os_log_s *)v9;
    uint32_t v8 = 2;
    goto LABEL_7;
  }

  int v3 = v2(a2);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      uint64_t v6 = "Warning: Calling HciDriver_t::enableTapToRadar failed with status 0x%08X!";
      uint64_t v7 = (os_log_s *)v5;
      uint32_t v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }

void sub_1002CCFE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 8) + 120LL);
  if (!v2)
  {
    uint64_t v9 = qword_1008F7578;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v6 = "Warning: HciDriver_t::enableBtDriverFwTraces not implemented for current chipset!";
    uint64_t v7 = (os_log_s *)v9;
    uint32_t v8 = 2;
    goto LABEL_7;
  }

  int v3 = v2(a2);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      uint64_t v6 = "Warning: Calling HciDriver_t::enableBtDriverFwTraces failed with status 0x%08X!";
      uint64_t v7 = (os_log_s *)v5;
      uint32_t v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }

void sub_1002CD0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 112LL);
  if (!v4)
  {
    uint64_t v11 = qword_1008F7578;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v12[0]) = 0;
    uint32_t v8 = "Warning: HciDriver_t::generalDebug not implemented for current chipset!";
    uint64_t v9 = (os_log_s *)v11;
    uint32_t v10 = 2;
    goto LABEL_7;
  }

  int v5 = v4(a2, a3, a4);
  if (v5)
  {
    int v6 = v5;
    uint64_t v7 = qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      v12[0] = 67109120;
      v12[1] = v6;
      uint32_t v8 = "Warning: Calling HciDriver_t::generalDebug failed with status 0x%08X!";
      uint64_t v9 = (os_log_s *)v7;
      uint32_t v10 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)v12, v10);
    }
  }

void sub_1002CD1E0(uint64_t a1)
{
  int v1 = (unsigned int *)(a1 + 8);
  do
    signed int v2 = __ldxr(v1);
  while (__stxr(v2, v1));
  if (v2 <= 0x3FFFFFFF)
  {
    do
      int v3 = __ldxr(v1);
    while (__stxr(v3 + 1, v1));
    if (v3 <= 0)
    {
      int v4 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
        sub_100668FFC(v4, v5, v6, v7, v8, v9, v10, v11);
      }
    }
  }

void sub_1002CD254(unsigned int *a1)
{
  int v1 = a1 + 2;
  do
    signed int v2 = __ldxr(v1);
  while (__stxr(v2, v1));
  if (v2 <= 0x3FFFFFFF)
  {
    do
      int v3 = __ldxr(v1);
    while (__stxr(v3 - 1, v1));
    if (v3 <= 0)
    {
      int v4 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
        sub_100669070(v4, v5, v6, v7, v8, v9, v10, v11);
      }
    }

    else if (a1)
    {
      if (v3 == 1) {
        (*(void (**)(unsigned int *))(*(void *)a1 + 8LL))(a1);
      }
    }
  }

uint64_t sub_1002CD2E8()
{
  unsigned int v0 = *(_DWORD *)(sub_1002E6E9C() + 708);
  unsigned int v1 = v0 - 1;
  BOOL v2 = v0 - 2000 < 0x7D0;
  BOOL v3 = v0 >= 0xA;
  unsigned int v4 = (0x1F3u >> v0) & 1;
  if (v3) {
    unsigned int v4 = 1;
  }
  if (v1 <= 0x7CE) {
    return v4;
  }
  else {
    return v2;
  }
}

uint64_t sub_1002CD330()
{
  int v0 = *(_DWORD *)(sub_1002E6E9C() + 708);
  uint64_t v1 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 384LL))(v1))
  {
    if ((v0 - 18) <= 0x7BD)
    {
      BOOL v2 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v9 = 0;
        BOOL v3 = "UWBS supported, Mac, Chipset >= BCM_4364B3";
        unsigned int v4 = (uint8_t *)&v9;
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
        return 1LL;
      }

      return 1LL;
    }

    return 0LL;
  }

  uint64_t v5 = sub_1002E6BF0();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v5 + 336LL))(v5))
  {
    if ((v0 - 12) <= 0x7C3)
    {
      BOOL v2 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v8 = 0;
        BOOL v3 = "UWBS supported, Chipset >= BCM_4355C0";
        unsigned int v4 = (uint8_t *)&v8;
        goto LABEL_13;
      }

      return 1LL;
    }

    return 0LL;
  }

  uint64_t result = _os_feature_enabled_impl("BluetoothFeatures", "AACELDStereotvOS");
  if ((_DWORD)result)
  {
    int v7 = sub_100361020();
    else {
      return (0x701u >> (v7 + 106)) & 1;
    }
  }

  return result;
}

BOOL sub_1002CD458()
{
  unsigned int v0 = *(_DWORD *)(sub_1002E6E9C() + 708);
  uint64_t v1 = sub_1002E6BF0();
  uint64_t v2 = sub_1002E6BF0();
  else {
    BOOL v3 = 1;
  }
  if (v3 || v0 > 0x7CF)
  {
    uint64_t v5 = sub_1002E6BF0();
    int v6 = sub_100361020();
    else {
      return (0x701u >> (v6 + 106)) & 1;
    }
  }

  else
  {
    if (v0 > 0x12) {
      return 1LL;
    }
    uint64_t v4 = 1LL;
    int v7 = sub_100361020();
  }

  return v4;
}

uint64_t sub_1002CD53C(uint64_t a1, unsigned int a2)
{
  if (a2 > 6) {
    return 0LL;
  }
  if (((1 << a2) & 0x65) == 0) {
    return 1LL;
  }
  uint64_t v2 = sub_1002E6BF0();
  return (*(unsigned int (**)(uint64_t))(*(void *)v2 + 424LL))(v2) ^ 1;
}

uint64_t sub_1002CD58C(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 708);
  uint64_t v2 = sub_1002E6BF0();
  unsigned int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 328LL))(v2);
  if (v1) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 0;
  }
  if (v1 >= 0x7D0) {
    unsigned int v4 = 0;
  }
  if (v1 > 0xE) {
    return v4;
  }
  else {
    return 0LL;
  }
}

BOOL sub_1002CD5D0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 708) - 20) < 0x7BC;
}

uint64_t sub_1002CD5E4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 708);
  uint64_t v2 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 328LL))(v2) & 1) == 0)
  {
    uint64_t v3 = sub_1002E6BF0();
    return _os_feature_enabled_impl("BluetoothFeatures", "HandsfreeAoS");
  }

  return 0LL;
}

BOOL sub_1002CD664()
{
  uint64_t v0 = sub_1002E6BF0();
  return ((*(uint64_t (**)(uint64_t))(*(void *)v0 + 384LL))(v0) & 1) == 0
      && (sub_100361020() & 0xFFFFFFFE) != 4;
}

BOOL sub_1002CD6A0()
{
  int v0 = *(_DWORD *)(sub_1002E6E9C() + 708);
  uint64_t v1 = sub_1002E6BF0();
  else {
    return (v0 - 19) < 0x7BD;
  }
}

BOOL sub_1002CD6F0()
{
  int v0 = *(_DWORD *)(sub_1002E6E9C() + 708);
  uint64_t v1 = sub_1002E6BF0();
  else {
    return (v0 - 12) < 0x7C4;
  }
}

BOOL sub_1002CD740()
{
  return (*(_DWORD *)(sub_1002E6E9C() + 708) - 20) < 0x7BC;
}

uint64_t sub_1002CD764(uint64_t a1)
{
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16LL))(v4, a1);
  if (v5 < 0)
  {
    if (v4[1] == (void *)2)
    {
      unsigned int v2 = bswap32(*(unsigned __int16 *)v4[0]);
      operator delete(v4[0]);
      if (HIWORD(v2) == 17200) {
        return 0LL;
      }
    }

    else
    {
      operator delete(v4[0]);
    }
  }

  else if (v5 == 2 && bswap32(LOWORD(v4[0])) >> 16 == 17200)
  {
    return 0LL;
  }

  return 1LL;
}

BOOL sub_1002CD80C(uint64_t a1)
{
  if ((*(_DWORD *)(sub_1002E6E9C() + 708) - 1) <= 0x7CE
    && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1) & 1) == 0
    && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(void *)a1 + 56LL))(a1))
  {
    return 0LL;
  }

  uint64_t v2 = 1LL;
  int v3 = sub_100361020();
  if (((v3 - 233) > 0x24 || ((1LL << (v3 + 23)) & 0x1FFFFFF6FDLL) == 0)
    && ((v3 - 112) > 0x11 || ((1 << (v3 - 112)) & 0x3FF0F) == 0))
  {
    return (v3 - 44) < 6;
  }

  return v2;
}

BOOL sub_1002CD8E0()
{
  return (sub_100361020() & 0xFFFFFFFE) == 40;
}

uint64_t sub_1002CD900()
{
  uint64_t v0 = sub_1002E6BF0();
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 424LL))(v0);
}

uint64_t sub_1002CD91C()
{
  unsigned int v0 = *(_DWORD *)(sub_1002E6E9C() + 708);
  BOOL v1 = v0 - 2001 < 2;
  BOOL v2 = v0 >= 0x19;
  BOOL v4 = v0 == 25;
  int v3 = (1 << v0) & 0x2D89040;
  BOOL v4 = !v4 && v2 || v3 == 0;
  return !v4 || v1;
}

uint64_t sub_1002CD960()
{
  unsigned int v0 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEFAULT,  "supports PER based power control check",  (uint8_t *)v10,  2u);
  }

  int v1 = *(_DWORD *)(sub_1002E6E9C() + 708);
  uint64_t v2 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 352LL))(v2) & 1) != 0
    || (uint64_t v3 = sub_1002E6BF0(), ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 360LL))(v3) & 1) != 0)
    || (uint64_t v4 = sub_1002E6BF0(), ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 376LL))(v4) & 1) != 0))
  {
    unsigned int v5 = 1;
  }

  else
  {
    uint64_t v9 = sub_1002E6BF0();
    unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 424LL))(v9);
  }

  else {
    uint64_t v6 = 0LL;
  }
  int v7 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109120;
    v10[1] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "supports PER based power control check return : %d",  (uint8_t *)v10,  8u);
  }

  return v6;
}

uint64_t sub_1002CDAA4()
{
  uint64_t v0 = sub_1002E6BF0();
  int v1 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 384LL))(v0);
  unsigned int v2 = *(_DWORD *)(sub_1002E6E9C() + 708);
  if (v1)
  {
    return v2 - 1 <= 0x7CE && (v2 == 14 || v2 > 0x12);
  }

  else
  {
    unsigned int v5 = sub_100361020();
    BOOL v4 = v5 - 149 <= 9 && ((1 << (v5 + 107)) & 0x20B) != 0 || v5 < 4;
    uint64_t v6 = sub_1002E6BF0();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 352LL))(v6) & 1) != 0
      || (uint64_t v7 = sub_1002E6BF0(), ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 360LL))(v7) & 1) != 0)
      || (uint64_t v8 = sub_1002E6BF0(), ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 376LL))(v8) & 1) != 0))
    {
      int v9 = 1;
    }

    else
    {
      uint64_t v13 = sub_1002E6BF0();
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 424LL))(v13);
    }

    if (v2 - 1 <= 0x7CE)
    {
      if (v2 > 0xB || v2 == 9) {
        int v11 = v9;
      }
      else {
        int v11 = 0;
      }
      return v4 | v11;
    }
  }

  return v4;
}

uint64_t sub_1002CDBAC()
{
  uint64_t v0 = sub_1002E6BF0();
  uint64_t v1 = 0LL;
  if (((*(uint64_t (**)(uint64_t))(*(void *)v0 + 384LL))(v0) & 1) == 0)
  {
    switch(sub_100361020())
    {
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x59u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Eu:
      case 0x5Fu:
      case 0x60u:
      case 0x61u:
      case 0x62u:
      case 0x63u:
      case 0x64u:
      case 0x65u:
      case 0x66u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Fu:
      case 0x70u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x78u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
      case 0x7Du:
      case 0x7Eu:
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x9Au:
        uint64_t v1 = 1LL;
        break;
      default:
        return v1;
    }
  }

  return v1;
}

BOOL sub_1002CDC0C()
{
  uint64_t v0 = sub_1002E6BF0();
  unsigned int v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "supports PER based power control check",  (uint8_t *)v6,  2u);
  }

  int v3 = sub_100361020();
  BOOL v1 = (v3 - 156) <= 0x3D && ((1LL << (v3 + 100)) & 0x3EFFFFFFC3C1E003LL) != 0
    || v3 == 27;
  BOOL v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "supports PER based power control check return : %d",  (uint8_t *)v6,  8u);
  }

  return v1;
}

BOOL sub_1002CDD44()
{
  return (*(_DWORD *)(sub_1002E6E9C() + 708) - 19) < 0x7BD;
}

BOOL sub_1002CDD68()
{
  return sub_100361020() - 6 < 4;
}

uint64_t sub_1002CDD88()
{
  unsigned int v0 = *(_DWORD *)(sub_1002E6E9C() + 708);
  if (v0 - 1 > 0x7CE) {
    goto LABEL_18;
  }
  if (v0 > 0xE)
  {
    uint64_t v1 = 76LL;
    goto LABEL_31;
  }

  BOOL v2 = v0 > 0xB || v0 == 9;
  if (!v2 && v0 != 6)
  {
LABEL_18:
    uint64_t v1 = 34LL;
    goto LABEL_31;
  }

  LODWORD(v1) = 34;
  int v4 = sub_100361020();
  if (v4 <= 61)
  {
    if (v4 >= 4)
    {
      if ((v4 - 57) >= 2)
      {
        if (v4 == 61) {
          LODWORD(v1) = 48;
        }
        goto LABEL_28;
      }

      goto LABEL_24;
    }

uint64_t sub_1002CDF04()
{
  unsigned int v0 = *(_DWORD *)(sub_1002E6E9C() + 708);
  if (v0 - 1 > 0x7CE) {
    goto LABEL_18;
  }
  if (v0 >= 0xF)
  {
    else {
      uint64_t v1 = 76LL;
    }
    goto LABEL_42;
  }

  BOOL v2 = v0 > 0xB || v0 == 9;
  if (!v2 && v0 != 6)
  {
LABEL_18:
    uint64_t v1 = 34LL;
    goto LABEL_42;
  }

  int v4 = sub_100361020();
  if (v4 <= 77)
  {
    if (v4 > 74)
    {
      if (v4 != 76) {
        goto LABEL_37;
      }
      goto LABEL_38;
    }

    if (((1LL << v4) & 0x3C0) != 0)
    {
      LODWORD(v1) = 54;
      goto LABEL_39;
    }

    if (((1LL << v4) & 0x2200000000000000LL) != 0) {
      goto LABEL_37;
    }
    if (((1LL << v4) & 0x4400000000000000LL) == 0)
    {
LABEL_32:
      if (v4 >= 2)
      {
        if ((v4 - 2) < 2)
        {
          LODWORD(v1) = 48;
          goto LABEL_39;
        }

        goto LABEL_47;
      }

uint64_t sub_1002CE130()
{
  if ((*(_DWORD *)(sub_1002E6E9C() + 708) - 12) > 0x7C3)
  {
    unsigned __int8 v1 = 34;
  }

  else
  {
    int v0 = sub_100361020();
    else {
      unsigned __int8 v1 = 34;
    }
  }

  BOOL v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ePA mid Tx power is : %d", (uint8_t *)v4, 8u);
  }

  return v1;
}

BOOL sub_1002CE214()
{
  return (*(_DWORD *)(sub_1002E6E9C() + 708) - 10) < 0x7C6;
}

uint64_t sub_1002CE238()
{
  uint64_t v0 = 1LL;
  unsigned int v1 = sub_100361020();
  switch(v1)
  {
    case 0x92u:
    case 0x9Cu:
    case 0x9Du:
    case 0xBAu:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xC2u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
      return v0;
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xB7u:
    case 0xB8u:
    case 0xB9u:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xD4u:
      goto LABEL_5;
    default:
      if (v1 > 0x32 || ((1LL << v1) & 0x7FFDFE0700000LL) == 0) {
LABEL_5:
      }
        uint64_t v0 = 0LL;
      break;
  }

  return v0;
}

uint64_t sub_1002CE2B0()
{
  uint64_t v0 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v0 + 352LL))(v0) & 1) != 0)
  {
    unsigned int v1 = 1980;
    int v2 = -20;
  }

  else
  {
    uint64_t v3 = sub_1002E6BF0();
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 360LL))(v3);
    if (!(_DWORD)result) {
      return result;
    }
    unsigned int v1 = 1977;
    int v2 = -23;
  }

  return *(_DWORD *)(sub_1002E6E9C() + 708) + v2 < v1;
}

uint64_t sub_1002CE318()
{
  uint64_t result = _os_feature_enabled_impl("BluetoothFeatures", "ADVOverConnection");
  if ((_DWORD)result) {
    return (*(_DWORD *)(sub_1002E6E9C() + 708) - 22) < 0x7BA;
  }
  return result;
}

const char *sub_1002CE354(uint64_t a1, int a2)
{
  uint64_t result = "BD_VSC_GET_POWER_CONSUMPTION";
  switch(a2)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "BD_VSC_WRITE_PCM_PARAM";
      break;
    case 2:
      uint64_t result = "BD_VSC_WRITE_SLEEPMODE_PARAM";
      break;
    case 3:
      uint64_t result = "BD_VSC_READ_RAW_RSSI";
      break;
    case 4:
      uint64_t result = "BD_VSC_WRITE_HI_PRIO_CONN";
      break;
    case 5:
      uint64_t result = "BD_VSC_OP_LOW_LATENCY_PRIO_CONN";
      break;
    case 6:
      uint64_t result = "BD_VSC_SET_SCO_PATH";
      break;
    case 7:
      uint64_t result = "BD_VSC_WRITE_I2SPCM_INTF";
      break;
    case 8:
      uint64_t result = "BD_VSC_ENA_WBS";
      break;
    case 9:
      uint64_t result = "BD_VSC_DYN_VOICE_ROUTE_CHANGE";
      break;
    case 10:
      uint64_t result = "BD_VSC_OLYMPIC_SETTINGS";
      break;
    case 11:
      uint64_t result = "BD_VSC_LE_META_VSC";
      break;
    case 12:
      uint64_t result = "BD_VSC_OP_DELAYED_HOST_WAKE";
      break;
    case 13:
      uint64_t result = "BD_VSC_LTE_COEX_LINK_QUAL_METRICS";
      break;
    case 14:
      uint64_t result = "BD_VSC_LTE_TRIGGER_WCI2";
      break;
    case 15:
      uint64_t result = "BD_VSC_LTE_ENA_WCI2";
      break;
    case 16:
      uint64_t result = "DB_VSC_FACTORY_CAL_SET_TX_POWER";
      break;
    case 17:
      uint64_t result = "BD_VSC_FACTORY_CAL_READ_TABLE";
      break;
    case 18:
      uint64_t result = "BD_VSC_OP_ANTENNA_DIVERSITY";
      break;
    case 19:
      uint64_t result = "BD_VSC_OP_DIVERSITY_AFH_MAPS";
      break;
    case 20:
      uint64_t result = "BD_VSC_OP_DIVERSITY_CELL_COEX";
      break;
    case 21:
      uint64_t result = "BD_VSC_REMOTE_AP_WRITE_LOCAL_STATE";
      break;
    case 22:
      uint64_t result = "BD_VSC_OP_BT_SYNC";
      break;
    case 23:
      uint64_t result = "BD_VSC_LTE_VSC";
      break;
    case 24:
      uint64_t result = "BD_VSC_OP_POWER_LDO_DURING_SLEEP";
      break;
    case 25:
      uint64_t result = "BD_VSC_WRITE_LE_REMOTE_PUBLIC_ADDR";
      break;
    case 26:
      uint64_t result = "BD_VSC_OP_GIZMO_DETECTED";
      break;
    case 27:
      uint64_t result = "BD_VSC_DISABLE_TPC";
      break;
    case 28:
      uint64_t result = "BD_VSC_CORE_DUMP";
      break;
    case 29:
      uint64_t result = "BD_VSC_CONFIG_LINK_QUALITY_STATS_TRIG";
      break;
    case 30:
      uint64_t result = "BD_VSC_LE_WRITE_LOCAL_SUPPORTED_FEATURES";
      break;
    case 31:
      uint64_t result = "BD_VSC_ENABLE_EXTENDED_DUPLICATE_FILTER";
      break;
    case 32:
      uint64_t result = "BD_VSC_WRITE_HI_PRIO_LE_CONN";
      break;
    case 33:
      uint64_t result = "BD_VSC_LE_CREATE_EXT_ADV_INSTANCE";
      break;
    case 34:
      uint64_t result = "BD_VSC_LE_REMOVE_EXT_ADV_INSTANCE";
      break;
    case 35:
      uint64_t result = "BD_VSC_LE_SET_EXT_ADV_INST_PARAMS";
      break;
    case 36:
      uint64_t result = "BD_VSC_LE_SET_EXT_ADV_INST_DATA";
      break;
    case 37:
      uint64_t result = "BD_VSC_LE_SET_EXT_SCAN_RSP_DATA";
      break;
    case 38:
      uint64_t result = "BD_VSC_LE_SET_EXT_ADV_INST_ENABLE";
      break;
    case 39:
      uint64_t result = "BD_VSC_HP_BT_CLASSIC";
      break;
    case 40:
      uint64_t result = "BD_VSC_SET_PRIORITIZATION_THRESHOLD";
      break;
    case 41:
      uint64_t result = "BD_VSC_ENABLE_LMP_ROUTING";
      break;
    case 42:
      uint64_t result = "BD_VSC_ENABLE_LMP_ROUTING_THROUGH_VSE";
      break;
    case 43:
      uint64_t result = "BD_VSC_GET_AWD_DATA_EVENT";
      break;
    case 44:
      uint64_t result = "BD_VSC_ENABLE_DISABLE_FW_LOG_STREAMING";
      break;
    case 45:
      uint64_t result = "BD_VSC_ENABLE_COEX_DEBUG_COUNTERS";
      break;
    case 46:
      uint64_t result = "BD_VSC_READ_DETAILED_PROFILE_STATS";
      break;
    case 47:
      uint64_t result = "BD_VSC_CLEAR_DETAILED_PROFILE_STATS";
      break;
    case 48:
      uint64_t result = "BD_VSC_READ_TRANSPORT_SWITCH_STATS";
      break;
    case 49:
      uint64_t result = "BD_VSC_CLEAR_TRANSPORT_SWITCH_STATS";
      break;
    case 50:
      uint64_t result = "BD_VSC_HP_EDR_ACCESSORY";
      break;
    case 51:
      uint64_t result = "BD_VSC_READ_FW_MEMORY_STATISTICS";
      break;
    case 52:
      uint64_t result = "BD_VSC_ENABLE_HIGH_POWER";
      break;
    case 53:
      uint64_t result = "BD_VSC_SET_FW_TRACE_MODE";
      break;
    case 54:
      uint64_t result = "BD_VSC_SET_MAXIMUM_CONNECTION_UPDATE_INSTANT";
      break;
    case 55:
      uint64_t result = "BD_VSC_CONFIG_PAGE_SCAN_RESPONSE";
      break;
    case 56:
      uint64_t result = "BD_VSC_HDR_CONTROL";
      break;
    case 57:
      uint64_t result = "BD_VSC_READ_PROP_LOCAL_FEATURES";
      break;
    case 58:
      uint64_t result = "BD_VSC_READ_PROP_REMOTE_FEATURES";
      break;
    case 59:
      uint64_t result = "BD_VSC_HDR_CHANGE_CONN_PKT_TYPE";
      break;
    case 60:
      uint64_t result = "BD_VSC_HDR_SETUP_SYNCHRONOUS_CONNECTION";
      break;
    case 61:
      uint64_t result = "BD_VSC_HDR_ACCEPT_SYNCHRONOUS_CONNECTION";
      break;
    case 62:
      uint64_t result = "BD_VSC_SCO_BUFFER_SIZE_CONTROL";
      break;
    case 63:
      uint64_t result = "BD_VSC_HRB_CONTROL";
      break;
    case 64:
      uint64_t result = "BD_VSC_HRB_ALLOWED_BANDS";
      break;
    case 65:
      uint64_t result = "BD_VSC_HRB_CLASSIFICATION_BANDS";
      break;
    case 66:
      uint64_t result = "BD_VSC_HRB_CREATE_CONNECTION";
      break;
    case 67:
      uint64_t result = "BD_VSC_HRB_CHANGE_CONNECTION_BAND";
      break;
    case 68:
      uint64_t result = "BD_VSC_HRB_WRITE_SCAN_ENABLE";
      break;
    case 69:
      uint64_t result = "BD_VSC_HRB_WRITE_PAGE_SCAN_ACTIVITY";
      break;
    case 70:
      uint64_t result = "BD_VSC_HRB_READ_AFH_CHANNEL_MAP";
      break;
    case 71:
      uint64_t result = "BD_VSC_HRB_SET_AFH_CHANNEL_CLASSIFICATION";
      break;
    case 72:
      uint64_t result = "BD_VSC_GET_ESSENTIAL_POWER_DATABASE_ENTRIES";
      break;
    case 73:
      uint64_t result = "BD_VSC_HRB_LIMIT_CHANNEL_MAP";
      break;
    case 74:
      uint64_t result = "BD_VSC_HRB_SET_BAND_EDGES";
      break;
    case 75:
      uint64_t result = "BD_VSC_HRB_READ_ENHANCED_TRANSMIT_POWER_LEVEL";
      break;
    case 79:
      uint64_t result = "BD_VSC_ADVANCED_SNIFF_MODE";
      break;
    case 80:
      uint64_t result = "BD_VSC_EXIT_ADVANCED_SNIFF_MODE";
      break;
    case 81:
      uint64_t result = "BD_VSC_ADVANCED_SNIFF_RECONFIG";
      break;
    case 82:
      uint64_t result = "BD_VSC_SET_PERIPHERAL_MAX_AGE";
      break;
    case 83:
      uint64_t result = "BD_VSC_LMP_FLOW";
      break;
    case 84:
      uint64_t result = "BD_VSC_AOS_EMPTY_PACKET_REPORT";
      break;
    case 85:
      uint64_t result = "BD_VSC_CONTROL_AOS";
      break;
    case 86:
      uint64_t result = "BD_VSC_SET_LE_POWER_CONTROL";
      break;
    case 87:
      uint64_t result = "BD_VSC_GET_ADV_STATS";
      break;
    case 88:
      uint64_t result = "BD_VSC_PHY_STATISTIC";
      break;
    case 89:
      uint64_t result = "BD_VSC_DISCONNECT_EVENT";
      break;
    case 90:
      uint64_t result = "BD_VSC_SET_MWS_COEX_RX_GAIN_MODE";
      break;
    case 91:
      uint64_t result = "BD_VSC_ENABLE_AUDIO_STATISTICS";
      break;
    case 92:
      uint64_t result = "BD_VSC_EPA_GPIO_TOGGLE_ENABLE";
      break;
    case 93:
      uint64_t result = "BD_VSC_EPA_GPIO_READ_STATUS";
      break;
    case 94:
      uint64_t result = "BD_VSC_SET_BIDIRECTIONAL_MAX_POWER_MODE";
      break;
    case 95:
      uint64_t result = "BD_VSC_HP_EDR_HDR";
      break;
    case 96:
      uint64_t result = "BD_VSC_ENABLE_HOST_WAKE_REPORT";
      break;
    case 97:
      uint64_t result = "BD_VSC_ENABLE_POWER_TAG";
      break;
    case 98:
      uint64_t result = "BD_VSC_ENABLE_POWER_TAG_V2";
      break;
    case 99:
      uint64_t result = "BD_VSC_ADJUST_LE_INSTANT_FACTOR";
      break;
    case 100:
      uint64_t result = "BD_VSC_DISABLE_HOST_WAKE_ON_LE_LINK_DROP";
      break;
    case 101:
      uint64_t result = "BD_VSC_SET_BAD_COMPANY_ID_FOR_LE2M";
      break;
    case 102:
      uint64_t result = "BD_VSC_TUNABLES_READ_ENABLE_DISABLE";
      break;
    case 103:
      uint64_t result = "BD_VSC_ENABLE_WIRELESS_SPLITTER";
      break;
    case 104:
      uint64_t result = "BD_VSC_ADVBUF_CONFIG";
      break;
    case 105:
      uint64_t result = "BD_VSC_ADVBUF_READ_COMMAND";
      break;
    case 106:
      uint64_t result = "BD_VSC_MATCHTABLE_CONFIG";
      break;
    case 107:
      uint64_t result = "BD_VSC_MATCHTABLE_CONFIG_V2";
      break;
    case 108:
      uint64_t result = "BD_VSC_MATCHTABLE_CONFIG_V3";
      break;
    case 109:
      uint64_t result = "BD_VSC_MATCHTABLE_EXT_FILTER_CONFIG";
      break;
    case 110:
      uint64_t result = "BD_VSC_MATCHTABLE_EXT_FILTER_CONFIG_V2";
      break;
    case 111:
      uint64_t result = "BD_VSC_ADVBUFMATCH_CONTROL";
      break;
    case 112:
      uint64_t result = "BD_VSC_ADVBUF_RSSI_THRESHOLD";
      break;
    case 113:
      uint64_t result = "BD_VSC_ADVBUF_CFG_TIME_SLICE";
      break;
    case 114:
      uint64_t result = "BD_VSC_ADVBUF_EXT_FILTER_CONFIG";
      break;
    case 115:
      uint64_t result = "BD_VSC_MATCHTABLE_PARAMS";
      break;
    case 116:
      uint64_t result = "BD_VSC_MATCHBUFFER_CONFIG";
      break;
    case 117:
      uint64_t result = "BD_VSC_MATCHBUFFER_READ";
      break;
    case 118:
      uint64_t result = "BD_VSC_SPMI_DIAGNOSTICS";
      break;
    case 119:
      uint64_t result = "BD_VSC_BTCLK_SENSORC_TIMESYNC";
      break;
    case 120:
      uint64_t result = "BD_VSC_ADV_TX_TRIG_TIMESTAMP";
      break;
    case 121:
      uint64_t result = "BD_VSC_READ_CONN_EVENT_TRIGGER";
      break;
    case 122:
      uint64_t result = "BD_VSC_LE_CONN_EVENT_TRIGGER";
      break;
    case 123:
      uint64_t result = "BD_VSC_SPMI_DEBUG_VSE_CONTROL";
      break;
    case 124:
      uint64_t result = "BD_VSC_HP_BF";
      break;
    case 125:
      uint64_t result = "BD_VSC_SET_ENCRYPTION_KEY_SIZE";
      break;
    case 126:
      uint64_t result = "BD_VSC_DUP_FILTER_REPORT_ENABLE";
      break;
    case 127:
      uint64_t result = "BD_VSC_BEAMFORMING_MRC_CONTROL";
      break;
    case 128:
      uint64_t result = "BD_VSC_SNR_MRC_CONTROL";
      break;
    case 129:
      uint64_t result = "BD_VSC_BT_CORE_ANTENNA_SWITCH";
      break;
    case 130:
      uint64_t result = "BD_VSC_USE_SINGLE_CORE_POWER_DB_FOR_ANT_DIVERSITY";
      break;
    case 131:
      uint64_t result = "BD_VSC_CONFIGURE_CONTROLLER_BTCLK_CAPTURE";
      break;
    case 132:
      uint64_t result = "BD_VSC_ENABLE_LE_SCAN_PROTECTION";
      break;
    case 133:
      uint64_t result = "BD_VSC_SET_FW_LOG_MASK";
      break;
    case 134:
      uint64_t result = "BD_VSC_SET_BTSC_PAGE_SCAN";
      break;
    case 135:
      uint64_t result = "BD_VSC_CONFIGURE_RSSI_STATISTICS_AND_DETECTION";
      break;
    case 136:
      uint64_t result = "BD_VSC_GET_SCAN_STATS_WITH_THRESHOLD";
      break;
    case 137:
      uint64_t result = "BD_VSC_READ_SCAN_STATS_WITH_THRESHOLD";
      break;
    case 138:
      uint64_t result = "BD_VSC_INCOMING_LE_CONNECTION_DENY_LIST_ADD";
      break;
    case 139:
      uint64_t result = "BD_VSC_INCOMING_LE_CONNECTION_DENY_LIST_REMOVE";
      break;
    case 140:
      uint64_t result = "BD_VSC_INCOMING_LE_CONNECTION_DENY_LIST_ENABLE";
      break;
    case 141:
      uint64_t result = "BD_VSC_INCOMING_LE_CONNECTION_DENY_LIST_CLEAR";
      break;
    case 142:
      uint64_t result = "BD_VSC_GET_FW_VERSIONS";
      break;
    case 143:
      uint64_t result = "BD_VSC_INIT_DONE";
      break;
    case 144:
      uint64_t result = "BD_VSC_SET_RANDOM_SEED";
      break;
    case 145:
      uint64_t result = "BD_VSC_OLYMPIC_NUM_CMPLT_PKT_THRESH";
      break;
    case 146:
      uint64_t result = "BD_VSC_OLYMPIC_RSSI_THRESH";
      break;
    case 147:
      uint64_t result = "BD_VSC_OLYMPIC_READ_BT_SETTINGS";
      break;
    case 148:
      uint64_t result = "BD_VSC_OLYMPIC_IGNORE_FEC";
      break;
    case 149:
      uint64_t result = "BD_VSC_OLYMPIC_LINK_QUAL_STATS";
      break;
    case 150:
      uint64_t result = "BD_VSC_OLYMPIC_ENHANCED_LINK_QUAL_STATS";
      break;
    case 151:
      uint64_t result = "BD_VSC_OLYMPIC_ENABLE_EPA_VSE";
      break;
    case 152:
      uint64_t result = "BD_VSC_OLYMPIC_LE_AUDIO";
      break;
    case 153:
      uint64_t result = "BD_VSC_OLYMPIC_LE_AUDIO_STATS";
      break;
    case 154:
      uint64_t result = "BD_VSC_OLYMPIC_READ_LE_SETTINGS";
      break;
    case 155:
      uint64_t result = "BD_VSC_OLYMPIC_CHANGE_LE_SETTINGS";
      break;
    case 156:
      uint64_t result = "BD_VSC_OLYMPIC_READ_PROFILING_STATS";
      break;
    case 157:
      uint64_t result = "BD_VSC_OLYMPIC_READ_ENHANCED_PROFILING_STATS";
      break;
    case 158:
      uint64_t result = "BD_VSC_OLYMPIC_READ_TRANSMIT_IPA_EPA_COUNTERS";
      break;
    case 159:
      uint64_t result = "BD_VSC_OLYMPIC_LE_NUM_OF_COMPLT_PKT";
      break;
    case 160:
      uint64_t result = "BD_VSC_OLYMPIC_SET_MAX_TXRX_PAIRS";
      break;
    case 161:
      uint64_t result = "BD_VSC_OLYMPIC_ANTENNA_PREF";
      break;
    case 162:
      uint64_t result = "BD_VSC_OLYMPIC_LE_COUNTRY_PWR_SELECT";
      break;
    case 163:
      uint64_t result = "BD_VSC_OLYMPIC_COUNTRY_CODE_SELECTION";
      break;
    case 164:
      uint64_t result = "BD_VSC_OLYMPIC_COUNTRY_CODE_SELECTION_MULTI_BAND";
      break;
    case 165:
      uint64_t result = "BD_VSC_OLYMPIC_300KHZ_DEV_SELECT";
      break;
    case 166:
      uint64_t result = "BD_VSC_OLYMPIC_ANTENNA_PREF_B";
      break;
    case 167:
      uint64_t result = "BD_VSC_OLYMPIC_A2DP_ACL_SIMULTANEOUS";
      break;
    case 168:
      uint64_t result = "BD_VSC_OLYMPIC_SET_TX_POWER_CAP";
      break;
    case 169:
      uint64_t result = "BD_VSC_OLYMPIC_SET_SAR_LOCATION";
      break;
    case 170:
      uint64_t result = "BD_VSC_OLYMPIC_SET_MIN_AFH_LE_CHANNELS";
      break;
    case 171:
      uint64_t result = "BD_VSC_OLYMPIC_ADV_DUPLICATE_FILTER_BYPASS_CONFIG";
      break;
    case 172:
      uint64_t result = "BD_VSC_OLYMPIC_SET_HI_PRIO_RSSI";
      break;
    case 173:
      uint64_t result = "BD_VSC_OLYMPIC_COEX_MULTI_HID_LE_CONFIG";
      break;
    case 174:
      uint64_t result = "BD_VSC_OLYMPIC_GPIO_AUDIO_SYNC_REPORT";
      break;
    case 175:
      uint64_t result = "BD_VSC_FORCE_WLAN_5G";
      break;
    case 176:
      uint64_t result = "BD_VSC_OLYMPIC_SET_CONNECTION_DESCRIPTOR";
      break;
    case 177:
      uint64_t result = "BD_VSC_PCAP_ANT_WIFI5G_HB_STATUS";
      break;
    case 178:
      uint64_t result = "BD_VSC_ENHANCED_PCAP_ANT_WIFI5G_HB_STATUS";
      break;
    case 179:
      uint64_t result = "BD_VSC_OLYMPIC_SET_ENHANCED_SCAN_ENABLE";
      break;
    case 180:
      uint64_t result = "BD_VSC_OLYMPIC_SET_SCAN_PARAMETERS_MULTICORE";
      break;
    case 181:
      uint64_t result = "BD_VSC_OLYMPIC_SET_EXT_SCAN_LIMITS";
      break;
    case 182:
      uint64_t result = "BD_VSC_OLYMPIC_GET_EXT_ADV_DROPPED";
      break;
    case 183:
      uint64_t result = "BD_VSC_OLYMPIC_SET_EXT_ADV_LIMITS";
      break;
    case 184:
      uint64_t result = "BD_VSC_OLYMPIC_SET_EXT_SCAN_BUFFERS";
      break;
    case 185:
      uint64_t result = "BD_VSC_OLYMPIC_SET_SINGLE_SHOT_ROLE_SWITCH";
      break;
    case 186:
      uint64_t result = "BD_VSC_OLYMPIC_SET_EXT_ADV_PHY_OPTIONS";
      break;
    case 187:
      uint64_t result = "BD_VSC_OLYMPIC_SET_RC2_BT_SUPPRESSION";
      break;
    case 188:
      uint64_t result = "BD_VSC_OLYMPIC_ENABLE_BT_GRANT_RC2_COEX";
      break;
    case 189:
      uint64_t result = "BD_VSC_OLYMPIC_SET_SNIFF_ATTEMPT_OPTIMIZATION";
      break;
    case 190:
      uint64_t result = "BD_VSC_OLYMPIC_UPDATE_LE_PHY_DENYLIST";
      break;
    case 191:
      uint64_t result = "BT_VSC_OLYMPIC_SET_RETAIN_LE_SCAN_DUPLICATES_ON_START";
      break;
    case 192:
      uint64_t result = "BD_VSC_OLYMPIC_SET_HID_LATENCY_STATS";
      break;
    case 193:
      uint64_t result = "BD_VSC_OLYMPIC_SET_DIAG_DEBUG_EVENT_BEHAVIOR";
      break;
    case 194:
      uint64_t result = "BD_VSC_LE_META_ENA_FEATURES";
      break;
    case 195:
      uint64_t result = "BD_VSC_LE_META_ADD_IRK_TO_LIST";
      break;
    case 196:
      uint64_t result = "BD_VSC_LE_META_REMV_IRK_FROM_LIST";
      break;
    case 197:
      uint64_t result = "BD_VSC_LE_META_CLEAR_IRK_LIST";
      break;
    case 198:
      uint64_t result = "BD_VSC_LE_META_ADV_PCF_FEATURE_SEL";
      break;
    case 199:
      uint64_t result = "BD_VSC_LE_META_ADV_PCF_SERVICE_UUID";
      break;
    case 200:
      uint64_t result = "BD_VSC_LE_META_MONITOR_RSSI_FOR_PROX";
      break;
    case 201:
      uint64_t result = "BD_VSC_LE_META_TRACK_SENSOR";
      break;
    case 202:
      uint64_t result = "BD_VSC_LE_META_TRACK_SENSOR_INCREASE_SCAN_PARAMS";
      break;
    case 203:
      uint64_t result = "BD_VSC_LE_META_SET_ZONE_RSSI";
      break;
    case 204:
      uint64_t result = "BD_VSC_LE_META_GET_ZONE_MONITOR_CAP";
      break;
    case 205:
      uint64_t result = "BD_VSC_LE_META_ADD_ZONE_MONITOR_ENTRY";
      break;
    case 206:
      uint64_t result = "BD_VSC_LE_META_RESET_ADV_MATCHING_RULES";
      break;
    case 207:
      uint64_t result = "BD_VSC_LE_META_REMV_ZONE_MONITOR_ENTRY";
      break;
    case 208:
      uint64_t result = "BD_VSC_LE_META_RESET_ZONE_MONITOR_FEAT";
      break;
    case 209:
      uint64_t result = "BD_VSC_LE_META_ADD_ADV_MATCHING_RULE";
      break;
    case 210:
      uint64_t result = "BD_VSC_LE_META_REMV_ADV_MATCHING_RULE";
      break;
    case 211:
      uint64_t result = "BD_VSC_LE_META_CONN_RSSI_HISTORY";
      break;
    case 212:
      uint64_t result = "BD_VSC_LE_META_ADD_TO_FILTER_ACCEPT_LIST";
      break;
    case 213:
      uint64_t result = "BD_VSC_LE_META_ENABLE_ASYMMETRIC_LATENCY";
      break;
    case 214:
      uint64_t result = "BD_VSC_LE_META_ADD_ADV_MATCHING_RULE_WITH_ADDRESS";
      break;
    case 215:
      uint64_t result = "BD_VSC_LE_META_REMV_ADV_MATCHING_RULE_WITH_ADDRESS";
      break;
    case 216:
      uint64_t result = "BD_VSC_LE_META_CONFIG_ADV_MATCHING_ADDRESS_LIST";
      break;
    case 217:
      uint64_t result = "BD_VSC_LE_META_ADD_ADV_MATCHING_RULE_ENHANCED";
      break;
    case 218:
      uint64_t result = "BD_VSC_LE_META_REMV_ADV_MATCHING_RULE_ENHANCED";
      break;
    case 219:
      uint64_t result = "BD_VSC_LE_META_WIPE_ADV_MATCHING_RULE";
      break;
    case 220:
      uint64_t result = "BD_VSC_LE_META_ADD_ADV_MATCHING_RULE_ENHANCED_BATCHED";
      break;
    case 222:
      uint64_t result = "BD_VSC_LE_META_REMV_DUPLICATE_ENTRY_ADV_MATCHING_RULE";
      break;
    case 223:
      uint64_t result = "BD_VSC_LE_META_REMV_MULTIPLE_DUPLICATE_ENTRIE_ADV_MATCHING_RULE";
      break;
    case 224:
      uint64_t result = "BD_VSC_LE_META_STATUS_ADV_MATCHING_RULE_ENHANCED";
      break;
    case 225:
      uint64_t result = "BD_VSC_LE_META_STATUS_ADV_MATCHING_RULE_ENHANCED_EXTENDED_BLOBMASK";
      break;
    case 226:
      uint64_t result = "BD_VSC_LE_META_LPCORE_GET_STATS";
      break;
    case 227:
      uint64_t result = "BD_VSC_LE_META_GET_SCAN_STATS";
      break;
    case 228:
      uint64_t result = "BD_VSC_LE_META_ENABLE_TDS";
      break;
    case 229:
      uint64_t result = "BD_VSC_LE_META_ADD_TDS_FILTER_SERVICE";
      break;
    case 230:
      uint64_t result = "BD_VSC_LE_META_REMV_TDS_FILTER_SERVICE";
      break;
    case 231:
      uint64_t result = "BD_VSC_LE_META_ADD_TO_FILTER_ACCEPT_LIST_WITH_OPTIONS_V1";
      break;
    case 232:
      uint64_t result = "BD_VSC_LE_META_ADD_TO_FILTERACCEPTLIST_WITH_OPTIONS_POLL_STATS";
      break;
    case 233:
      uint64_t result = "BD_VSC_LE_META_ADD_TO_FILTER_ACCEPT_LIST_WITH_OPTIONS_V2";
      break;
    case 234:
      uint64_t result = "BD_VSC_LE_META_BTSC_LE_SET_CONNECTION_SCAN";
      break;
    case 235:
      uint64_t result = "BD_VSC_LE_META_MFG_SCAN_FILTER";
      break;
    case 236:
      uint64_t result = "BD_VSC_LE_META_SET_CONNECTION_PRIORITIZATION";
      break;
    case 237:
      uint64_t result = "BD_VSC_LE_META_ADD_TO_FILTER_ACCEPT_LIST_WITH_OPTIONS_V3";
      break;
    case 238:
      uint64_t result = "BD_VSC_LE_META2_WRITE_STORED_LTK";
      break;
    case 239:
      uint64_t result = "BD_VSC_LE_META2_REMOVE_STORED_LTK";
      break;
    case 240:
      uint64_t result = "BD_VSC_LE_META2_READ_LOCAL_CONTROLLER_CACHED_INFO";
      break;
    case 241:
      uint64_t result = "BD_VSC_LE_META2_WRITE_PEER_CACHED_INFO";
      break;
    case 242:
      uint64_t result = "BD_VSC_LE_META2_SET_MAX_INSTANT_UPDATE_INFO";
      break;
    case 243:
      uint64_t result = "BD_VSC_LE_META2_ENABLE_ADV_CONN_IND";
      break;
    case 244:
      uint64_t result = "BD_VSC_LE_META2_CONFIGURE_ADV_CONN_IND";
      break;
    case 245:
      uint64_t result = "BD_VSC_BT_ENA_FEATURES";
      break;
    case 246:
      uint64_t result = "BD_VSC_OP_DELAYED_HOST_WAKE_PCIE";
      break;
    case 247:
      uint64_t result = "BD_VSC_SET_GPIO_STATE";
      break;
    case 248:
      uint64_t result = "BD_VSC_SET_AGC_TABLE_OVERRIDE";
      break;
    case 249:
      uint64_t result = "BD_VSC_GET_LPEM_DATA";
      break;
    case 250:
      uint64_t result = "BD_VSC_READ_CONTROLLER_RAM";
      break;
    case 251:
      uint64_t result = "BD_VSC_LE_META_ADD_IRK_TO_FAST_LIST";
      break;
    case 252:
      uint64_t result = "BD_VSC_CONFIGURE_CREATE_CONNECTION";
      break;
    case 253:
      uint64_t result = "BD_VSC_SPMI_COEX_DEBUG_COUNTERS";
      break;
    case 254:
      uint64_t result = "BD_VSC_SPMI_COEX_TEST_COMMAND";
      break;
    case 255:
      uint64_t result = "BD_VSC_SPMI_COEX_TX_CONTROL";
      break;
    case 256:
      uint64_t result = "BD_VSC_SPMI_COEX_TYPE_53_CONFIG";
      break;
    case 257:
      uint64_t result = "BD_VSC_SPMI_COEX_TYPE_60_CONFIG";
      break;
    case 258:
      uint64_t result = "BD_VSC_LE_META_ENA_FILTERING_FEATURES";
      break;
    case 259:
      uint64_t result = "BD_VSC_LOAD_MSFFILE";
      break;
    case 260:
      uint64_t result = "BD_VSC_LOAD_PWR_REGULATORYFILE";
      break;
    case 261:
      uint64_t result = "BD_VSC_LOAD_PWR_REGULATORYFILE_A3";
      break;
    case 262:
      uint64_t result = "BD_VSC_WRITE_BT_ADDRESS";
      break;
    case 263:
      uint64_t result = "BD_VSC_ADD_TO_FILTER_ACCEPT_LIST_UNIFIED";
      break;
    case 264:
      uint64_t result = "BD_VSC_LE_ADV_TX_POWER_INCREASE";
      break;
    case 266:
      uint64_t result = "BD_VSC_CONFIG_APPLE_EXTENDED_ADV_REPORT";
      break;
    case 267:
      uint64_t result = "BD_VSC_APPLE_LE_FEATURE_SET_VENDOR_LIST";
      break;
    case 269:
      uint64_t result = "BD_VSC_SET_UNIFIED_PRIORITY";
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEBUG)) {
        sub_1006690E4();
      }
      uint64_t result = "Unknown VSC";
      break;
  }

  return result;
}

const char *sub_1002CF02C(uint64_t a1, int a2)
{
  if (a2 > 1999)
  {
    if (a2 > 2001)
    {
      if (a2 == 2002)
      {
        return "APPLE_M2_5";
      }

      else if (a2 == 6000)
      {
        return "APPLE_VIRTUAL";
      }

      else
      {
        return "Unknown Chipset";
      }
    }

    else if (a2 == 2000)
    {
      return "APPLE_M1";
    }

    else
    {
      return "APPLE_M2";
    }
  }

  else
  {
    uint64_t result = "THIRD_PARTY_DONGLE";
    switch(a2)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "BCM_4350C2";
        break;
      case 2:
        uint64_t result = "BCM_20702A3";
        break;
      case 3:
        uint64_t result = "BCM_20702B0";
        break;
      case 4:
        uint64_t result = "BCM_4350";
        break;
      case 5:
        uint64_t result = "BCM_4350A0";
        break;
      case 6:
        uint64_t result = "BCM_4350C5";
        break;
      case 7:
        uint64_t result = "BCM_20703A1";
        break;
      case 8:
        uint64_t result = "BCM_20703A2";
        break;
      case 9:
        uint64_t result = "BCM_43430";
        break;
      case 10:
        uint64_t result = "BCM_43452";
        break;
      case 11:
        uint64_t result = "BCM_4355B3";
        break;
      case 12:
        uint64_t result = "BCM_4355C0";
        break;
      case 13:
        uint64_t result = "BCM_4355C1";
        break;
      case 14:
        uint64_t result = "BCM_4355";
        break;
      case 15:
        uint64_t result = "BCM_4357";
        break;
      case 16:
        uint64_t result = "BCM_4364";
        break;
      case 17:
        uint64_t result = "BCM_4364B0";
        break;
      case 18:
        uint64_t result = "BCM_4364B3";
        break;
      case 19:
        uint64_t result = "BCM_4377";
        break;
      case 20:
        uint64_t result = "BCM_4378";
        break;
      case 21:
        uint64_t result = "BCM_4378B3";
        break;
      case 22:
        uint64_t result = "BCM_4387";
        break;
      case 23:
        uint64_t result = "BCM_4388";
        break;
      case 24:
        uint64_t result = "BCM_4388C2";
        break;
      case 25:
        uint64_t result = "BCM_4399";
        break;
      default:
        return "Unknown Chipset";
    }
  }

  return result;
}

const char *sub_1002CF1F4(int a1)
{
  if (a1 > 1)
  {
    if (a1 != 2)
    {
      if (a1 == 240) {
        return "Advanced Sniff";
      }
      return "Unknown";
    }

    return "Sniff";
  }

  else
  {
    if (a1)
    {
      if (a1 == 1) {
        return "Reserved";
      }
      return "Unknown";
    }

    return "Active";
  }

BOOL sub_1002CF254(uint64_t a1, uint64_t a2)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088F2E8);
  }
  if (*((_DWORD *)off_1008D60A8 + 18) == 1)
  {
    uint64_t v4 = a1 + a2;
    int v6 = *(unsigned __int8 *)(v4 + 168);
    uint64_t v5 = (_BYTE *)(v4 + 168);
    if (v6)
    {
      uint64_t v7 = (_BYTE *)(a1 + a2 + 438);
      if (*v7)
      {
        uint64_t v8 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
          sub_100669150(a2, v8);
        }
      }

      *uint64_t v7 = 1;
    }

    else
    {
      int v11 = (os_log_s *)qword_1008F7578;
      BOOL v12 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO);
      if (v12)
      {
        int v13 = 136446210;
        uint64_t v14 = sub_1002CE354(v12, a2);
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "VSC %{public}s, not supported",  (uint8_t *)&v13,  0xCu);
      }
    }

    return *v5 != 0;
  }

  else
  {
    int v9 = (os_log_s *)qword_1008F7578;
    BOOL result = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006691CC(a2, v9);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1002CF3FC(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(a1 + a2 + 438);
}

uint64_t sub_1002CF408(uint64_t a1)
{
  uint64_t v2 = a1 + 306;
  unsigned int v3 = *(_DWORD *)(a1 + 708);
  uint64_t v4 = a1 + 168;
  bzero((void *)(a1 + 168), 0x21CuLL);
  if (v3 - 1 <= 0x7CE)
  {
    *(_WORD *)(a1 + 171) = 257;
    *(_BYTE *)(a1 + 174) = 1;
    *(_BYTE *)(a1 + 176) = 1;
    *(_WORD *)(a1 + 178) = 257;
    *(_BYTE *)(a1 + 189) = 1;
    *(_BYTE *)(a1 + 193) = 1;
    *(_BYTE *)(a1 + 195) = 1;
    *(_WORD *)(v4 + 151) = 257;
    *(_WORD *)(a1 + 322) = 257;
    *(_WORD *)(v4 + 159) = 257;
    *(_BYTE *)(a1 + 333) = 1;
    *(_WORD *)(v4 + 167) = 257;
    *(_WORD *)(a1 + 198) = 257;
    *(_BYTE *)(a1 + 340) = 1;
    *(_BYTE *)(a1 + 293) = 1;
    *(_BYTE *)(a1 + 418) = 1;
    *(_BYTE *)(a1 + 317) = 1;
    *(_DWORD *)(v4 + 145) = 16843009;
    *(_DWORD *)(v4 + 197) = 16843009;
    *(_DWORD *)(v4 + 194) = 16843009;
    *(void *)(v2 + 65) = 0x101010101010101LL;
    *(_BYTE *)(a1 + 212) = (*(_DWORD *)(sub_1002E6E9C() + 708) - 19) < 0x7BD;
    *(_BYTE *)(a1 + 301) = (*(_DWORD *)(sub_1002E6E9C() + 708) - 20) < 0x7BC;
    *(_BYTE *)(a1 + 192) = 1;
    *(_BYTE *)(a1 + 330) = 1;
    *(_WORD *)(a1 + 205) = 257;
    *(_DWORD *)(a1 + 201) = 16843009;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2152LL))(a1) ^ 1;
    if (v3 == 9) {
      LOBYTE(v5) = 0;
    }
    *(_BYTE *)(a1 + 339) = v5;
    *(_BYTE *)(a1 + 384) = 1;
    *(_BYTE *)(a1 + 175) = 1;
    *(_BYTE *)(a1 + 177) = 1;
    *(_BYTE *)(a1 + 183) = 1;
    *(_WORD *)(a1 + 181) = 257;
    *(_BYTE *)(a1 + 324) = 1;
    *(_WORD *)(a1 + 382) = 257;
    BOOL v8 = v3 != 1 && v3 != 11 && v3 != 16;
    *(_WORD *)(a1 + 169) = 257;
    *(_BYTE *)(a1 + 209) = v8;
    *(_BYTE *)(a1 + 334) = 1;
    *(_BYTE *)(a1 + 194) = 1;
    *(_WORD *)(a1 + 190) = 257;
    *(_WORD *)(a1 + 185) = 257;
    *(_BYTE *)(a1 + 336) = 1;
    *(_BYTE *)(a1 + 331) = 1;
    *(_WORD *)(a1 + 379) = 257;
    *(_BYTE *)(a1 + 200) = 1;
    unsigned int v9 = v3 - 6;
    if (v3 == 6)
    {
      int v10 = 0;
      int v11 = 0;
      *(_BYTE *)(a1 + 341) = 1;
      *(_BYTE *)(a1 + 207) = 1;
      *(_BYTE *)(a1 + 338) = 1;
      goto LABEL_82;
    }

    if (v3 >= 0xA)
    {
      *(_BYTE *)(a1 + 196) = 1;
      if (v3 == 10) {
        goto LABEL_81;
      }
      *(_BYTE *)(a1 + 180) = 1;
      *(_BYTE *)(a1 + 207) = 1;
      *(_BYTE *)(a1 + 338) = 1;
      *(_BYTE *)(a1 + 173) = 1;
      *(_BYTE *)(a1 + 219) = 1;
      *(_BYTE *)(a1 + 222) = 1;
    }

    if (v3 == 15)
    {
      int v10 = 0;
      int v11 = 0;
      *(_WORD *)(a1 + 317) = 256;
      *(_WORD *)(a1 + 187) = 257;
      *(_BYTE *)(a1 + 341) = 1;
      *(_BYTE *)(a1 + 213) = 1;
      *(_BYTE *)(a1 + 218) = 1;
      *(_BYTE *)(a1 + 337) = 1;
      *(_BYTE *)(a1 + 343) = 1;
      *(_BYTE *)(a1 + 208) = 1;
      *(_BYTE *)(a1 + 319) = 0;
      goto LABEL_82;
    }

    if (v3 != 9)
    {
LABEL_45:
      if (v3 < 0xC) {
        goto LABEL_81;
      }
      int v10 = 0;
      int v11 = 0;
      *(_WORD *)(a1 + 317) = 256;
      *(_BYTE *)(a1 + 319) = 0;
      if (v3 < 0x13) {
        goto LABEL_82;
      }
      *(_WORD *)(a1 + 260) = 257;
      *(_BYTE *)(a1 + 337) = 1;
      *(_BYTE *)(a1 + 343) = 1;
      *(_BYTE *)(a1 + 345) = 1;
      *(_DWORD *)(a1 + 224) = 16843009;
      *(_WORD *)(a1 + 228) = 257;
      if (v3 <= 0x14) {
        *(_BYTE *)(a1 + 188) = 1;
      }
      *(_BYTE *)(a1 + 342) = 1;
      *(_BYTE *)(a1 + 210) = 1;
      *(_BYTE *)(a1 + 414) = 1;
      *(_WORD *)(a1 + 325) = 257;
      *(_BYTE *)(a1 + 264) = 1;
      *(_BYTE *)(a1 + 272) = 1;
      *(_BYTE *)(a1 + 282) = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 2312LL))(a1) != 0;
      *(_WORD *)(a1 + 273) = 257;
      *(_BYTE *)(a1 + 279) = 1;
      *(_WORD *)(a1 + 283) = 257;
      *(_BYTE *)(a1 + 285) = 1;
      *(_WORD *)(a1 + 385) = 257;
      *(_BYTE *)(a1 + 387) = 1;
      *(_BYTE *)(a1 + 390) = 1;
      *(_BYTE *)(a1 + 392) = 1;
      *(_WORD *)(a1 + 396) = 257;
      *(_BYTE *)(a1 + 398) = 1;
      *(_WORD *)(a1 + 369) = 257;
      *(_WORD *)(a1 + 256) = 257;
      *(_BYTE *)(a1 + 358) = 1;
      *(_BYTE *)(a1 + 208) = 1;
      *(_BYTE *)(a1 + 351) = 1;
      *(_DWORD *)(a1 + 347) = 16843009;
      *(_DWORD *)(v2 + 121) = 16843009;
      if (v3 == 19)
      {
        *(_BYTE *)(a1 + 263) = 1;
      }

      else if ((v3 & 0xFFFFFFFE) == 0x14)
      {
        goto LABEL_70;
      }

      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 16LL))(&__p, a1);
      if ((char)__p.__r_.__value_.__s.__size_ < 0)
      {
        if (__p.__r_.__value_.__l.__size_ != 2)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_72;
        }

        int v19 = *(unsigned __int16 *)__p.__r_.__value_.__l.__data_;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v19 != 12355)
        {
LABEL_72:
          if (v3 == 21)
          {
            int v20 = 0;
            int v10 = 1;
            *(_BYTE *)(a1 + 391) = 1;
            *(_BYTE *)(a1 + 265) = 1;
            *(_BYTE *)(a1 + 346) = 1;
            *(_BYTE *)(a1 + 240) = 1;
            int v21 = 1;
            int v11 = 1;
LABEL_85:
            *(_BYTE *)(a1 + 403) = 1;
            int v23 = v21;
LABEL_86:
            if (v3 >= 0x17)
            {
              *(_BYTE *)(a1 + 235) = 1;
              *(_DWORD *)(a1 + 231) = 16843009;
              *(_DWORD *)(a1 + 236) = 16842752;
              *(_BYTE *)(a1 + 243) = 1;
              *(_WORD *)(a1 + 241) = 257;
              *(_BYTE *)(a1 + 184) = 1;
              *(_BYTE *)(a1 + 3sub_100242FAC(v1 - 32) = 1;
              *(_BYTE *)(a1 + 298) = 1;
              *(_WORD *)(a1 + 424) = 257;
              *(void *)(a1 + 247) = 0x101010101010101LL;
              *(_BYTE *)(a1 + 255) = 1;
            }

            if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2728LL))(a1))
            {
              *(_BYTE *)(a1 + 410) = 1;
              *(_DWORD *)(a1 + 406) = 16843009;
            }

            switch(v3)
            {
              case 6u:
                *(_BYTE *)(a1 + 208) = 1;
                if (v11) {
                  goto LABEL_138;
                }
                goto LABEL_151;
              case 0xAu:
                memset(&__p, 0, sizeof(__p));
                uint64_t v24 = sub_1002E6B38();
                std::string::size_type size = __p.__r_.__value_.__s.__size_;
                if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  std::string::size_type size = __p.__r_.__value_.__l.__size_;
                }
                unsigned int v26 = (os_log_s *)qword_1008F7578;
                if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_125;
                }
                *(_WORD *)std::string buf = 0;
                uint64_t v27 = "BCM_43452 that supports Wireless Splitter";
                goto LABEL_124;
              case 0xCu:
                memset(&__p, 0, sizeof(__p));
                uint64_t v28 = sub_1002E6B38();
                if (!(*(unsigned int (**)(uint64_t, std::string *))(*(void *)v28 + 64LL))(v28, &__p))
                {
                  std::string::size_type v29 = __p.__r_.__value_.__s.__size_;
                  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                    std::string::size_type v29 = __p.__r_.__value_.__l.__size_;
                  }
                  if (v29
                    && (sub_10029C238((uint64_t *)&__p, "Joy", 0LL) != -1LL
                     || sub_10029C238((uint64_t *)&__p, "Anger", 0LL) != -1LL
                     || sub_10029C238((uint64_t *)&__p, "Fear", 0LL) != -1LL
                     || sub_10029C238((uint64_t *)&__p, "Elsa", 0LL) != -1LL
                     || sub_10029C238((uint64_t *)&__p, "Kristoff", 0LL) != -1LL
                     || sub_10029C238((uint64_t *)&__p, "Olaf", 0LL) != -1LL
                     || sub_10029C238((uint64_t *)&__p, "Sven", 0LL) != -1LL))
                  {
                    unsigned int v26 = (os_log_s *)qword_1008F7578;
                    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)std::string buf = 0;
                      uint64_t v27 = "BCM_4355C0 that supports Wireless Splitter";
LABEL_124:
                      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v27, buf, 2u);
                    }

void sub_1002D0424( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D0454(int *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 180);
  if (!(*(unsigned int (**)(int *, int *))(*(void *)a1 + 1208LL))(a1, a1 + 180))
  {
    uint64_t result = sub_10018BE6C(a1[177], v2);
    if (!(_DWORD)result) {
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_1006692B4();
    }
  }

  return 110LL;
}

uint64_t sub_1002D04D0(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5)
{
  unsigned int v9 = a4;
  int v10 = a5;
  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_100242F28((uint64_t)v18, a1 + 72);
  int v11 = (os_log_s *)qword_1008F7578;
  BOOL v12 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO);
  if (v12)
  {
    int v13 = sub_1002CE354(v12, a2);
    *(_DWORD *)std::string buf = 136446210;
    int v20 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
  }

  if (sub_1002CF254(a1, a2))
  {
    buf[0] = 0;
    sub_100242CA4(buf);
    int v14 = v9[2](v9);
    sub_100242CD0(buf);
    if (v14 == 3603)
    {
      a3 = 0;
    }

    else if (v14)
    {
      uint64_t v16 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_100669314(a2, v14, v16);
      }
      a3 = 1;
    }

    else
    {
      if (a3)
      {
        if (qword_1008D60B0 != -1) {
          dispatch_once(&qword_1008D60B0, &stru_10088F2E8);
        }
        a3 = sub_1004336D8((uint64_t)off_1008D60A8, a2);
      }

      if (v10) {
        v10[2](v10);
      }
    }

    *(_BYTE *)(a1 + a2 + 438) = 0;
    uint64_t v15 = a3 != 0;
    sub_100242CD8(buf);
  }

  else
  {
    uint64_t v15 = 2LL;
  }

  sub_100242FAC((uint64_t)v18);

  return v15;
}

void sub_1002D06B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002D06F4(uint64_t result, unsigned int a2)
{
  *(_BYTE *)(result + a2 + 438) = 0;
  return result;
}

uint64_t sub_1002D0700()
{
  uint64_t result = sub_1000848B0(sub_1002D075C);
  if ((_DWORD)result)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_1006693A0();
    }
    return 110LL;
  }

  return result;
}

void sub_1002D075C(uint64_t a1, uint64_t a2, char *a3)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088F2E8);
  }
  sub_100431D6C((uint64_t)off_1008D60A8, a1, a2, a3);
}

uint64_t sub_1002D07C4()
{
  uint64_t result = sub_1000848C0(sub_1002D0820);
  if ((_DWORD)result)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100669400();
    }
    return 110LL;
  }

  return result;
}

void sub_1002D0820(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088F2E8);
  }
  sub_100431C18((uint64_t)off_1008D60A8, a1);
}

uint64_t sub_1002D0870(uint64_t a1, uint64_t a2)
{
  v4[1] = 0LL;
  uint64_t v5 = a2;
  v4[0] = 0LL;
  sub_100242F28((uint64_t)v4, a1 + 8);
  sub_1002555B0((uint64_t **)(a1 + 136), (unint64_t *)&v5, &v5);
  return sub_100242FAC((uint64_t)v4);
}

void sub_1002D08C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1002D08D4(uint64_t a1, unint64_t a2)
{
  v4[1] = 0LL;
  unint64_t v5 = a2;
  v4[0] = 0LL;
  sub_100242F28((uint64_t)v4, a1 + 8);
  sub_10020166C(a1 + 136, &v5);
  return sub_100242FAC((uint64_t)v4);
}

void sub_1002D0920(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1002D0934(uint64_t a1, uint64_t a2, int a3)
{
  if (*(_DWORD *)(a1 + 164) == a3) {
    return 0LL;
  }
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 8LL * qword_1006C05A8[a3 - 1]))();
  if (!(_DWORD)result) {
    *(_DWORD *)(a1 + 164) = a3;
  }
  return result;
}

BOOL sub_1002D099C()
{
  unsigned int v0 = *(_DWORD *)(sub_1002E6E9C() + 708) - 1;
  if (v0 >= 0xF9F && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_100669460();
  }
  return v0 < 0x7CF;
}

uint64_t sub_1002D0A04(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 256);
}

uint64_t sub_1002D0A0C()
{
  return 2 * ((*(_DWORD *)(sub_1002E6E9C() + 708) - 19) < 0x7BD);
}

uint64_t sub_1002D0A34()
{
  int v0 = *(_DWORD *)(sub_1002E6E9C() + 708);
  unsigned int v1 = v0 - 19;
  else {
    unsigned int v2 = 3;
  }
  if (v0 == 19) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = 4;
  }
  if (v1 <= 0x7BC) {
    return v3;
  }
  else {
    return v2;
  }
}

uint64_t sub_1002D0A74(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 257);
}

uint64_t sub_1002D0A7C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 414);
}

uint64_t sub_1002D0A84(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 354);
}

BOOL sub_1002D0A8C()
{
  uint64_t v0 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v0 + 344LL))(v0)
    && (uint64_t v1 = sub_1002E6E9C(), ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 2360LL))(v1) & 1) != 0))
  {
    return 1LL;
  }

  else
  {
    return (*(_DWORD *)(sub_1002E6E9C() + 708) - 19) < 0x7BD;
  }

void sub_1002D0AE0()
{
  if (qword_1008EFCB0 != -1) {
    dispatch_once(&qword_1008EFCB0, &stru_10088E468);
  }
  if (dword_1008D93B8 == 3)
  {
    uint64_t v0 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "BT Sleep now", buf, 2u);
    }

    char v1 = 0;
    sub_100242CA4(&v1);
    sub_1000A8ED0();
    sub_100242CD0(&v1);
    sub_100242CD8(&v1);
  }

void sub_1002D0B9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1002D0BB0(id a1)
{
  dword_1008D93B8 = sub_1000FCD0C();
}

uint64_t sub_1002D0BCC(uint64_t a1, uint64_t a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002D0C40;
  block[3] = &unk_10087EB20;
  void block[4] = a2;
  if (qword_1008EFCC0 != -1) {
    dispatch_once(&qword_1008EFCC0, block);
  }
  return byte_1008EFCB8;
}

void sub_1002D0C40(uint64_t a1)
{
  **(_BYTE **)(a1 + sub_100242FAC(v1 - 32) = 0;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "Device");
  sub_10002418C(__p, "GazeOnHeadOverride");
  int v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, void))(*(void *)v2 + 72LL))( v2,  buf,  __p,  *(void *)(a1 + 32));
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if ((v9 & 0x80000000) == 0)
  {
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  operator delete(*(void **)buf);
  if (v3) {
LABEL_5:
  }
    byte_1008EFCB8 = 1;
LABEL_6:
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = **(unsigned __int8 **)(a1 + 32);
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "gazeOverrideConfiguration is %d", buf, 8u);
  }

void sub_1002D0D70( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D0DAC(uint64_t a1, uint64_t a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002D0E20;
  block[3] = &unk_10087EB20;
  void block[4] = a2;
  if (qword_1008EFCD0 != -1) {
    dispatch_once(&qword_1008EFCD0, block);
  }
  return byte_1008EFCC8;
}

void sub_1002D0E20(uint64_t a1)
{
  **(_BYTE **)(a1 + sub_100242FAC(v1 - 32) = 0;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "Device");
  sub_10002418C(__p, "GazePresentOverride");
  int v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, void))(*(void *)v2 + 72LL))( v2,  buf,  __p,  *(void *)(a1 + 32));
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if ((v9 & 0x80000000) == 0)
  {
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  operator delete(*(void **)buf);
  if (v3) {
LABEL_5:
  }
    byte_1008EFCC8 = 1;
LABEL_6:
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = **(unsigned __int8 **)(a1 + 32);
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "forceGazePresentOverride is %d", buf, 8u);
  }

void sub_1002D0F50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D0F8C(uint64_t a1)
{
  int v2 = sub_100361020() - 20;
  uint64_t result = 2LL;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 85:
    case 86:
    case 87:
    case 88:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 134:
    case 158:
    case 159:
    case 160:
    case 161:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
      return result;
    default:
      uint64_t v4 = sub_1002E6BF0();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 344LL))(v4) & 1) != 0)
      {
        uint64_t result = 0LL;
      }

      else
      {
        uint64_t v5 = sub_1002E6BF0();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 384LL))(v5))
        {
          unsigned int v6 = *(_DWORD *)(a1 + 708);
          unsigned int v7 = v6 - 1;
          unsigned int v8 = 2 * (v6 > 0x14);
          if (v7 <= 0x7CE) {
            uint64_t result = v8;
          }
          else {
            uint64_t result = 0LL;
          }
        }

        else
        {
          uint64_t result = 1LL;
        }
      }

      break;
  }

  return result;
}

BOOL sub_1002D102C(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 708);
  if (!v2) {
    return 0LL;
  }
  if (a2 - 1 <= 0x7CE && v2 < 0x7D0) {
    return v2 >= a2;
  }
  if (v2 < 0x7D0) {
    return 0LL;
  }
  BOOL result = 0LL;
  if (a2 - 2000 <= 0x7CF && v2 <= 0xF9F) {
    return v2 >= a2;
  }
  return result;
}

uint64_t sub_1002D1080(int a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_10088F2E8);
  }
  return sub_1004335B8(a1, 0xF5u);
}

uint64_t sub_1002D10CC(_DWORD *a1, char a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002D1174;
  v5[3] = &unk_10088D268;
  v5[4] = a1;
  char v6 = a2;
  return sub_1002D04D0((uint64_t)a1, 245LL, 1, v5, 0LL);
}

uint64_t sub_1002D1174()
{
  return sub_10018DBBC();
}

BOOL sub_1002D1198()
{
  return (*(_DWORD *)(sub_1002E6E9C() + 708) - 20) < 0x7BC;
}

uint64_t sub_1002D11BC()
{
  int v0 = *(_DWORD *)(sub_1002E6E9C() + 708);
  return ((v0 - 1) < 0x13) & (0x8B000u >> v0);
}

BOOL sub_1002D11F0(uint64_t a1)
{
}

BOOL sub_1002D1240(uint64_t a1, int a2)
{
  int v4 = _os_feature_enabled_impl("BluetoothFeatures", "FilterAcceptListUnifiedWatch");
  unsigned int v5 = *(_DWORD *)(a1 + 708);
  if (v4 && v5 - 2001 < 0x7CF) {
    return 1LL;
  }
  if (v5 - 1 > 0xF9E) {
    return 0LL;
  }
  switch(a2)
  {
    case 0:
    case 1:
      int v7 = *(unsigned __int8 *)(a1 + 380);
      goto LABEL_15;
    case 2:
    case 3:
    case 4:
      goto LABEL_8;
    case 5:
      goto LABEL_13;
    case 6:
      int v7 = *(unsigned __int8 *)(a1 + 405);
      goto LABEL_15;
    default:
      if (a2 != 100) {
        return 0LL;
      }
LABEL_8:
      if (v5 > 0x7CF)
      {
        if (v5 != 2000) {
          return 1LL;
        }
      }

      else if (v5 - 20 < 6)
      {
        return 1LL;
      }

void sub_1002D1310(uint64_t a1)
{
  char v1 = (void *)sub_10029BF58(a1);
  operator delete(v1);
}

void *sub_1002D1324@<X0>(void *a1@<X8>)
{
  return sub_10002418C(a1, "");
}

uint64_t sub_1002D1334()
{
  return 0LL;
}

uint64_t sub_1002D133C()
{
  return 0LL;
}

uint64_t sub_1002D1344()
{
  return 0LL;
}

uint64_t sub_1002D134C()
{
  return 0LL;
}

uint64_t sub_1002D1354()
{
  return 0LL;
}

uint64_t sub_1002D135C()
{
  return 0LL;
}

uint64_t sub_1002D1364()
{
  return 0LL;
}

uint64_t sub_1002D136C()
{
  return 0LL;
}

uint64_t sub_1002D1374()
{
  return 0LL;
}

uint64_t sub_1002D137C()
{
  return 0LL;
}

uint64_t sub_1002D1384()
{
  return 0LL;
}

uint64_t sub_1002D138C()
{
  return 0LL;
}

uint64_t sub_1002D1394()
{
  return 0LL;
}

uint64_t sub_1002D139C()
{
  return 0LL;
}

uint64_t sub_1002D13A4()
{
  return 0LL;
}

uint64_t sub_1002D13AC()
{
  return 0LL;
}

uint64_t sub_1002D13B4()
{
  return 0LL;
}

uint64_t sub_1002D13BC()
{
  return 0LL;
}

uint64_t sub_1002D13C4()
{
  return 0LL;
}

uint64_t sub_1002D13CC(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  return 0LL;
}

uint64_t sub_1002D13D8()
{
  return 0LL;
}

uint64_t sub_1002D13E0()
{
  return 0LL;
}

uint64_t sub_1002D13E8(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
  return 0LL;
}

uint64_t sub_1002D13F4()
{
  return 0LL;
}

uint64_t sub_1002D13FC()
{
  return 0LL;
}

uint64_t sub_1002D1404()
{
  return 0LL;
}

uint64_t sub_1002D140C()
{
  return 0LL;
}

uint64_t sub_1002D1414()
{
  return 2LL;
}

uint64_t sub_1002D141C()
{
  return 2LL;
}

uint64_t sub_1002D1424()
{
  return 2LL;
}

uint64_t sub_1002D142C()
{
  return 2LL;
}

uint64_t sub_1002D1434()
{
  return 2LL;
}

uint64_t sub_1002D143C()
{
  return 2LL;
}

uint64_t sub_1002D1444()
{
  return 2LL;
}

uint64_t sub_1002D144C()
{
  return 2LL;
}

uint64_t sub_1002D1454()
{
  return 2LL;
}

uint64_t sub_1002D145C()
{
  return 2LL;
}

uint64_t sub_1002D1464()
{
  return 2LL;
}

uint64_t sub_1002D146C()
{
  return 2LL;
}

uint64_t sub_1002D1474()
{
  return 2LL;
}

uint64_t sub_1002D147C()
{
  return 2LL;
}

uint64_t sub_1002D1484()
{
  return 2LL;
}

uint64_t sub_1002D148C()
{
  return 2LL;
}

uint64_t sub_1002D1494()
{
  return 2LL;
}

uint64_t sub_1002D149C()
{
  return 2LL;
}

uint64_t sub_1002D14A4()
{
  return 2LL;
}

uint64_t sub_1002D14AC()
{
  return 2LL;
}

uint64_t sub_1002D14B4()
{
  return 2LL;
}

uint64_t sub_1002D14BC()
{
  return 2LL;
}

uint64_t sub_1002D14C4()
{
  return 2LL;
}

uint64_t sub_1002D14CC()
{
  return 2LL;
}

uint64_t sub_1002D14D4()
{
  return 2LL;
}

uint64_t sub_1002D14DC()
{
  return 2LL;
}

uint64_t sub_1002D14E4()
{
  return 2LL;
}

uint64_t sub_1002D14EC()
{
  return 2LL;
}

uint64_t sub_1002D14F4(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
  return 2LL;
}

uint64_t sub_1002D1500()
{
  return 2LL;
}

uint64_t sub_1002D1508()
{
  return 2LL;
}

uint64_t sub_1002D1510()
{
  return 2LL;
}

uint64_t sub_1002D1518()
{
  return 2LL;
}

uint64_t sub_1002D1520()
{
  return 2LL;
}

uint64_t sub_1002D1528()
{
  return 2LL;
}

uint64_t sub_1002D1530()
{
  return 2LL;
}

uint64_t sub_1002D1538()
{
  return 2LL;
}

uint64_t sub_1002D1540()
{
  return 2LL;
}

uint64_t sub_1002D1548()
{
  return 2LL;
}

uint64_t sub_1002D1550()
{
  return 2LL;
}

uint64_t sub_1002D1558()
{
  return 2LL;
}

uint64_t sub_1002D1560()
{
  return 2LL;
}

uint64_t sub_1002D1568()
{
  return 2LL;
}

uint64_t sub_1002D1578()
{
  return 2LL;
}

uint64_t sub_1002D1580()
{
  return 2LL;
}

uint64_t sub_1002D1588()
{
  return 2LL;
}

uint64_t sub_1002D1590()
{
  return 2LL;
}

uint64_t sub_1002D1598()
{
  return 2LL;
}

uint64_t sub_1002D15A0()
{
  return 2LL;
}

uint64_t sub_1002D15A8()
{
  return 2LL;
}

uint64_t sub_1002D15B0()
{
  return 2LL;
}

uint64_t sub_1002D15B8()
{
  return 2LL;
}

uint64_t sub_1002D15C0()
{
  return 2LL;
}

uint64_t sub_1002D15C8()
{
  return 2LL;
}

uint64_t sub_1002D15D0()
{
  return 2LL;
}

uint64_t sub_1002D15D8()
{
  return 2LL;
}

uint64_t sub_1002D15E0()
{
  return 2LL;
}

uint64_t sub_1002D15E8()
{
  return 2LL;
}

uint64_t sub_1002D15F0()
{
  return 2LL;
}

uint64_t sub_1002D15F8()
{
  return 2LL;
}

uint64_t sub_1002D1600()
{
  return 2LL;
}

uint64_t sub_1002D1608()
{
  return 2LL;
}

uint64_t sub_1002D1610()
{
  return 2LL;
}

uint64_t sub_1002D1618()
{
  return 2LL;
}

uint64_t sub_1002D1620()
{
  return 2LL;
}

uint64_t sub_1002D1628()
{
  return 2LL;
}

uint64_t sub_1002D1630()
{
  return 2LL;
}

uint64_t sub_1002D1638()
{
  return 2LL;
}

uint64_t sub_1002D1640()
{
  return 2LL;
}

uint64_t sub_1002D1648()
{
  return 2LL;
}

uint64_t sub_1002D1650()
{
  return 2LL;
}

uint64_t sub_1002D1658()
{
  return 2LL;
}

uint64_t sub_1002D1660()
{
  return 2LL;
}

uint64_t sub_1002D1668()
{
  return 2LL;
}

uint64_t sub_1002D1670()
{
  return 2LL;
}

uint64_t sub_1002D1678()
{
  return 2LL;
}

uint64_t sub_1002D1680()
{
  return 2LL;
}

uint64_t sub_1002D1688(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  return 2LL;
}

uint64_t sub_1002D1694()
{
  return 2LL;
}

uint64_t sub_1002D169C()
{
  return 2LL;
}

uint64_t sub_1002D16A4()
{
  return 2LL;
}

uint64_t sub_1002D16AC()
{
  return 2LL;
}

uint64_t sub_1002D16B4()
{
  return 2LL;
}

uint64_t sub_1002D16BC()
{
  return 2LL;
}

uint64_t sub_1002D16C4()
{
  return 2LL;
}

uint64_t sub_1002D16CC()
{
  return 2LL;
}

uint64_t sub_1002D16D4()
{
  return 2LL;
}

uint64_t sub_1002D16DC()
{
  return 2LL;
}

uint64_t sub_1002D16E4()
{
  return 2LL;
}

uint64_t sub_1002D16EC()
{
  return 2LL;
}

uint64_t sub_1002D16F4()
{
  return 2LL;
}

uint64_t sub_1002D16FC()
{
  return 2LL;
}

uint64_t sub_1002D1704()
{
  return 2LL;
}

uint64_t sub_1002D170C()
{
  return 2LL;
}

uint64_t sub_1002D1714()
{
  return 2LL;
}

uint64_t sub_1002D171C()
{
  return 2LL;
}

uint64_t sub_1002D1724()
{
  return 2LL;
}

uint64_t sub_1002D172C()
{
  return 2LL;
}

uint64_t sub_1002D1734()
{
  return 2LL;
}

uint64_t sub_1002D173C()
{
  return 2LL;
}

uint64_t sub_1002D1744()
{
  return 2LL;
}

uint64_t sub_1002D174C()
{
  return 2LL;
}

uint64_t sub_1002D1754()
{
  return 2LL;
}

uint64_t sub_1002D175C()
{
  return 2LL;
}

uint64_t sub_1002D1764()
{
  return 2LL;
}

uint64_t sub_1002D176C()
{
  return 2LL;
}

uint64_t sub_1002D1774()
{
  return 2LL;
}

uint64_t sub_1002D177C()
{
  return 2LL;
}

uint64_t sub_1002D1784()
{
  return 2LL;
}

uint64_t sub_1002D178C()
{
  return 2LL;
}

uint64_t sub_1002D1794()
{
  return 2LL;
}

uint64_t sub_1002D179C()
{
  return 2LL;
}

uint64_t sub_1002D17A4()
{
  return 2LL;
}

uint64_t sub_1002D17AC()
{
  return 2LL;
}

uint64_t sub_1002D17B4()
{
  return 2LL;
}

uint64_t sub_1002D17BC()
{
  return 2LL;
}

uint64_t sub_1002D17C4()
{
  return 2LL;
}

uint64_t sub_1002D17CC()
{
  return 2LL;
}

uint64_t sub_1002D17D4()
{
  return 2LL;
}

uint64_t sub_1002D17DC()
{
  return 2LL;
}

uint64_t sub_1002D17E4()
{
  return 2LL;
}

uint64_t sub_1002D17EC()
{
  return 2LL;
}

uint64_t sub_1002D17F4()
{
  return 2LL;
}

uint64_t sub_1002D17FC()
{
  return 2LL;
}

uint64_t sub_1002D1804()
{
  return 2LL;
}

uint64_t sub_1002D180C()
{
  return 2LL;
}

uint64_t sub_1002D1814()
{
  return 2LL;
}

uint64_t sub_1002D181C()
{
  return 2LL;
}

uint64_t sub_1002D1824()
{
  return 2LL;
}

uint64_t sub_1002D182C()
{
  return 2LL;
}

uint64_t sub_1002D1834()
{
  return 2LL;
}

uint64_t sub_1002D183C()
{
  return 2LL;
}

uint64_t sub_1002D1844()
{
  return 2LL;
}

uint64_t sub_1002D184C()
{
  return 2LL;
}

uint64_t sub_1002D1854()
{
  return 2LL;
}

uint64_t sub_1002D185C()
{
  return 2LL;
}

uint64_t sub_1002D1864()
{
  return 2LL;
}

uint64_t sub_1002D186C()
{
  return 2LL;
}

uint64_t sub_1002D1874()
{
  return 2LL;
}

uint64_t sub_1002D187C()
{
  return 2LL;
}

uint64_t sub_1002D1884()
{
  return 2LL;
}

uint64_t sub_1002D188C()
{
  return 2LL;
}

uint64_t sub_1002D1894()
{
  return 2LL;
}

uint64_t sub_1002D189C()
{
  return 2LL;
}

uint64_t sub_1002D18A4()
{
  return 2LL;
}

uint64_t sub_1002D18AC()
{
  return 2LL;
}

uint64_t sub_1002D18B4()
{
  return 2LL;
}

uint64_t sub_1002D18BC()
{
  return 2LL;
}

uint64_t sub_1002D18C4()
{
  return 2LL;
}

uint64_t sub_1002D18CC()
{
  return 2LL;
}

uint64_t sub_1002D18D4()
{
  return 2LL;
}

uint64_t sub_1002D18DC()
{
  return 2LL;
}

uint64_t sub_1002D18E4()
{
  return 2LL;
}

uint64_t sub_1002D18EC()
{
  return 2LL;
}

uint64_t sub_1002D18F4()
{
  return 2LL;
}

uint64_t sub_1002D18FC()
{
  return 2LL;
}

uint64_t sub_1002D1904()
{
  return 2LL;
}

uint64_t sub_1002D190C()
{
  return 2LL;
}

uint64_t sub_1002D1914()
{
  return 2LL;
}

uint64_t sub_1002D191C()
{
  return 2LL;
}

uint64_t sub_1002D1924()
{
  return 2LL;
}

uint64_t sub_1002D192C()
{
  return 2LL;
}

uint64_t sub_1002D1934()
{
  return 2LL;
}

uint64_t sub_1002D193C()
{
  return 2LL;
}

uint64_t sub_1002D1944()
{
  return 2LL;
}

uint64_t sub_1002D194C()
{
  return 2LL;
}

uint64_t sub_1002D1954()
{
  return 2LL;
}

uint64_t sub_1002D195C()
{
  return 2LL;
}

uint64_t sub_1002D1964()
{
  return 2LL;
}

uint64_t sub_1002D196C()
{
  return 2LL;
}

uint64_t sub_1002D1974()
{
  return 2LL;
}

uint64_t sub_1002D197C()
{
  return 2LL;
}

uint64_t sub_1002D1984()
{
  return 2LL;
}

uint64_t sub_1002D198C()
{
  return 2LL;
}

uint64_t sub_1002D1994()
{
  return 2LL;
}

uint64_t sub_1002D199C()
{
  return 2LL;
}

uint64_t sub_1002D19A4()
{
  return 2LL;
}

uint64_t sub_1002D19AC()
{
  return 2LL;
}

uint64_t sub_1002D19B4()
{
  return 2LL;
}

uint64_t sub_1002D19BC()
{
  return 2LL;
}

uint64_t sub_1002D19C4()
{
  return 2LL;
}

uint64_t sub_1002D19CC()
{
  return 2LL;
}

uint64_t sub_1002D19D4()
{
  return 2LL;
}

uint64_t sub_1002D19DC()
{
  return 2LL;
}

uint64_t sub_1002D19E4()
{
  return 2LL;
}

uint64_t sub_1002D19EC()
{
  return 2LL;
}

uint64_t sub_1002D19F4()
{
  return 2LL;
}

uint64_t sub_1002D19FC()
{
  return 2LL;
}

uint64_t sub_1002D1A04()
{
  return 2LL;
}

uint64_t sub_1002D1A0C()
{
  return 2LL;
}

uint64_t sub_1002D1A14()
{
  return 2LL;
}

uint64_t sub_1002D1A1C()
{
  return 0LL;
}

uint64_t sub_1002D1A24()
{
  return 2LL;
}

uint64_t sub_1002D1A3C()
{
  return 0LL;
}

uint64_t sub_1002D1A44()
{
  return 0LL;
}

uint64_t sub_1002D1A4C()
{
  return 0LL;
}

uint64_t sub_1002D1A54()
{
  return 0LL;
}

uint64_t sub_1002D1A5C()
{
  return 0LL;
}

uint64_t sub_1002D1A64()
{
  return 0LL;
}

uint64_t sub_1002D1A6C()
{
  return 0LL;
}

uint64_t sub_1002D1A74()
{
  return 0LL;
}

uint64_t sub_1002D1A7C()
{
  return 0LL;
}

uint64_t sub_1002D1A84()
{
  return 0LL;
}

uint64_t sub_1002D1A8C()
{
  return 0LL;
}

uint64_t sub_1002D1A94()
{
  return 0LL;
}

uint64_t sub_1002D1A9C()
{
  return 0LL;
}

uint64_t sub_1002D1AA4()
{
  return 0LL;
}

uint64_t sub_1002D1AAC()
{
  return 0LL;
}

uint64_t sub_1002D1AB4()
{
  return 0LL;
}

uint64_t sub_1002D1ABC()
{
  return 0LL;
}

uint64_t sub_1002D1AC4()
{
  return 0LL;
}

uint64_t sub_1002D1ACC()
{
  return 0LL;
}

uint64_t sub_1002D1AD4()
{
  return 0LL;
}

uint64_t sub_1002D1ADC()
{
  return 0LL;
}

uint64_t sub_1002D1AE4()
{
  return 0LL;
}

uint64_t sub_1002D1AEC()
{
  return 0LL;
}

uint64_t sub_1002D1AF4()
{
  return 0LL;
}

uint64_t sub_1002D1AFC()
{
  return 0LL;
}

uint64_t sub_1002D1B04()
{
  return 0LL;
}

uint64_t sub_1002D1B0C()
{
  return 0LL;
}

uint64_t sub_1002D1B14()
{
  return 0LL;
}

uint64_t sub_1002D1B1C()
{
  return 0LL;
}

uint64_t sub_1002D1B24()
{
  return 0LL;
}

uint64_t sub_1002D1B2C()
{
  return 0LL;
}

uint64_t sub_1002D1B34()
{
  return 0LL;
}

uint64_t sub_1002D1B3C()
{
  return 0LL;
}

uint64_t sub_1002D1B44()
{
  return 0LL;
}

uint64_t sub_1002D1B4C()
{
  return 0LL;
}

uint64_t sub_1002D1B54()
{
  return 0LL;
}

uint64_t sub_1002D1B5C()
{
  return 0LL;
}

uint64_t sub_1002D1B64()
{
  return 0LL;
}

uint64_t sub_1002D1B6C()
{
  return 0LL;
}

uint64_t sub_1002D1B74()
{
  return 0LL;
}

uint64_t sub_1002D1B7C()
{
  return 0LL;
}

uint64_t sub_1002D1B84()
{
  return 0LL;
}

uint64_t sub_1002D1B8C()
{
  return 0LL;
}

uint64_t sub_1002D1B94()
{
  return 0LL;
}

uint64_t sub_1002D1B9C()
{
  return 0LL;
}

uint64_t sub_1002D1BA4()
{
  return 0LL;
}

uint64_t sub_1002D1BAC()
{
  return 0LL;
}

uint64_t sub_1002D1BB4()
{
  return 0LL;
}

uint64_t sub_1002D1BBC()
{
  return 0LL;
}

uint64_t sub_1002D1BC4()
{
  return 0LL;
}

uint64_t sub_1002D1BCC()
{
  return 0LL;
}

uint64_t sub_1002D1BD4()
{
  return 0LL;
}

uint64_t sub_1002D1BDC()
{
  return 0LL;
}

uint64_t sub_1002D1BE4()
{
  return 0LL;
}

uint64_t sub_1002D1BEC()
{
  return 0LL;
}

uint64_t sub_1002D1BF4()
{
  return 0LL;
}

uint64_t sub_1002D1BFC()
{
  return 0LL;
}

uint64_t sub_1002D1C04()
{
  return 0LL;
}

uint64_t sub_1002D1C0C()
{
  return 0LL;
}

uint64_t sub_1002D1C14()
{
  return 0LL;
}

uint64_t sub_1002D1C1C()
{
  return 0LL;
}

uint64_t sub_1002D1C24()
{
  return 0LL;
}

uint64_t sub_1002D1C2C()
{
  return 0LL;
}

uint64_t sub_1002D1C34()
{
  return 0LL;
}

uint64_t sub_1002D1C3C()
{
  return 0LL;
}

uint64_t sub_1002D1C44()
{
  return 0LL;
}

uint64_t sub_1002D1C4C()
{
  return 0LL;
}

uint64_t sub_1002D1C54()
{
  return 0LL;
}

uint64_t sub_1002D1C5C()
{
  return 0LL;
}

uint64_t sub_1002D1C64()
{
  return 0LL;
}

uint64_t sub_1002D1C6C()
{
  return 0LL;
}

uint64_t sub_1002D1C74()
{
  return 0LL;
}

uint64_t sub_1002D1C7C()
{
  return 0LL;
}

uint64_t sub_1002D1C84()
{
  return 0LL;
}

uint64_t sub_1002D1C8C()
{
  return 0LL;
}

uint64_t sub_1002D1C94()
{
  return 0LL;
}

uint64_t sub_1002D1C9C()
{
  return 0LL;
}

uint64_t sub_1002D1CA4()
{
  return 0LL;
}

uint64_t sub_1002D1CAC()
{
  return 0LL;
}

uint64_t sub_1002D1CB4()
{
  return 48LL;
}

uint64_t sub_1002D1CBC()
{
  return 0LL;
}

uint64_t sub_1002D1CC4()
{
  return 0LL;
}

uint64_t sub_1002D1CCC()
{
  return 0LL;
}

uint64_t sub_1002D1CD4()
{
  return 0LL;
}

uint64_t sub_1002D1CDC()
{
  return 0LL;
}

uint64_t sub_1002D1CE4()
{
  return 0LL;
}

uint64_t sub_1002D1CEC()
{
  return 0LL;
}

uint64_t sub_1002D1CF4()
{
  return 0LL;
}

uint64_t sub_1002D1CFC()
{
  return 0LL;
}

uint64_t sub_1002D1D04()
{
  return 0LL;
}

uint64_t sub_1002D1D0C()
{
  return 0LL;
}

uint64_t sub_1002D1D14()
{
  return 0LL;
}

uint64_t sub_1002D1D1C()
{
  return 0LL;
}

uint64_t sub_1002D1D24()
{
  return 0LL;
}

uint64_t sub_1002D1D2C()
{
  return 0LL;
}

uint64_t sub_1002D1D34()
{
  return 0LL;
}

uint64_t sub_1002D1D3C()
{
  return 0LL;
}

uint64_t sub_1002D1D44()
{
  return 0LL;
}

uint64_t sub_1002D1D4C()
{
  return 2LL;
}

uint64_t sub_1002D1D54()
{
  return 2LL;
}

uint64_t sub_1002D1D5C()
{
  return 2LL;
}

uint64_t sub_1002D1D64()
{
  return 2LL;
}

uint64_t sub_1002D1D6C()
{
  return 2LL;
}

uint64_t sub_1002D1D74()
{
  return 2LL;
}

uint64_t sub_1002D1D7C()
{
  return 2LL;
}

uint64_t sub_1002D1D84()
{
  return 2LL;
}

uint64_t sub_1002D1D8C()
{
  return 2LL;
}

uint64_t sub_1002D1D94()
{
  return 2LL;
}

uint64_t sub_1002D1D9C()
{
  return 2LL;
}

uint64_t sub_1002D1DA4()
{
  return 2LL;
}

uint64_t sub_1002D1DAC()
{
  return 2LL;
}

uint64_t sub_1002D1DB4()
{
  return 2LL;
}

uint64_t sub_1002D1DBC()
{
  return 2LL;
}

uint64_t sub_1002D1DC4()
{
  return 2LL;
}

uint64_t sub_1002D1DCC()
{
  return 2LL;
}

uint64_t sub_1002D1DD4()
{
  return 2LL;
}

uint64_t sub_1002D1DDC()
{
  return 2LL;
}

uint64_t sub_1002D1DE4()
{
  return 2LL;
}

uint64_t sub_1002D1DEC()
{
  return 2LL;
}

uint64_t sub_1002D1DF4()
{
  return 2LL;
}

uint64_t sub_1002D1DFC()
{
  return 2LL;
}

uint64_t sub_1002D1E04()
{
  return 2LL;
}

uint64_t sub_1002D1E0C()
{
  return 2LL;
}

uint64_t sub_1002D1E14()
{
  return 2LL;
}

uint64_t sub_1002D1E1C()
{
  return 2LL;
}

uint64_t sub_1002D1E24()
{
  return 2LL;
}

uint64_t sub_1002D1E2C(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 708) = a2;
  return 0LL;
}

uint64_t sub_1002D1E38()
{
  return 2LL;
}

uint64_t sub_1002D1E40()
{
  return 2LL;
}

uint64_t sub_1002D1E48()
{
  return 2LL;
}

uint64_t sub_1002D1E50()
{
  return 2LL;
}

uint64_t sub_1002D1E58()
{
  return 2LL;
}

uint64_t sub_1002D1E60()
{
  return 2LL;
}

uint64_t sub_1002D1E68()
{
  return 2LL;
}

uint64_t sub_1002D1E70()
{
  return 2LL;
}

uint64_t sub_1002D1E78()
{
  return 2LL;
}

uint64_t sub_1002D1E80()
{
  return 2LL;
}

uint64_t sub_1002D1E88()
{
  return 2LL;
}

uint64_t sub_1002D1E90()
{
  return 2LL;
}

uint64_t sub_1002D1E98()
{
  return 2LL;
}

uint64_t sub_1002D1EA0()
{
  return 2LL;
}

uint64_t sub_1002D1EA8()
{
  return 2LL;
}

uint64_t sub_1002D1EB0()
{
  return 2LL;
}

uint64_t sub_1002D1EB8()
{
  return 2LL;
}

uint64_t sub_1002D1EC0()
{
  return 2LL;
}

uint64_t sub_1002D1EC8()
{
  return 2LL;
}

uint64_t sub_1002D1ED0()
{
  return 2LL;
}

uint64_t sub_1002D1ED8()
{
  return 2LL;
}

uint64_t sub_1002D1EE0()
{
  return 2LL;
}

uint64_t sub_1002D1EE8()
{
  return 2LL;
}

uint64_t sub_1002D1EF0()
{
  return 2LL;
}

uint64_t sub_1002D1EF8()
{
  return 2LL;
}

uint64_t sub_1002D1F00()
{
  return 2LL;
}

uint64_t sub_1002D1F08()
{
  return 2LL;
}

uint64_t sub_1002D1F10()
{
  return 2LL;
}

uint64_t sub_1002D1F18()
{
  return 2LL;
}

uint64_t sub_1002D1F20()
{
  return 2LL;
}

uint64_t sub_1002D1F28()
{
  return 2LL;
}

uint64_t sub_1002D1F30()
{
  return 2LL;
}

uint64_t sub_1002D1F38()
{
  return 2LL;
}

uint64_t sub_1002D1F48()
{
  return 2LL;
}

uint64_t sub_1002D1F50()
{
  return 0LL;
}

uint64_t sub_1002D1F58()
{
  return 0LL;
}

uint64_t sub_1002D1F60()
{
  return 2LL;
}

uint64_t sub_1002D1F68()
{
  return 2LL;
}

uint64_t sub_1002D1F70()
{
  return 2LL;
}

uint64_t sub_1002D1F78()
{
  return 2LL;
}

uint64_t sub_1002D1F80()
{
  return 2LL;
}

uint64_t sub_1002D1F88()
{
  return 2LL;
}

uint64_t sub_1002D1F90()
{
  return 2LL;
}

uint64_t sub_1002D1F98()
{
  return 2LL;
}

uint64_t sub_1002D1FA0()
{
  return 0LL;
}

uint64_t sub_1002D1FA8()
{
  return 2LL;
}

uint64_t sub_1002D1FB0()
{
  return 2LL;
}

uint64_t sub_1002D1FB8()
{
  return 2LL;
}

uint64_t sub_1002D1FC0()
{
  return 0LL;
}

uint64_t sub_1002D1FC8()
{
  return 0LL;
}

uint64_t sub_1002D1FD0()
{
  return 0LL;
}

uint64_t sub_1002D1FD8()
{
  return 0LL;
}

uint64_t sub_1002D1FE0()
{
  return 0LL;
}

uint64_t sub_1002D1FE8()
{
  return 0LL;
}

uint64_t sub_1002D1FF0()
{
  return 0LL;
}

uint64_t sub_1002D1FF8()
{
  return 8LL;
}

uint64_t sub_1002D2000()
{
  return 0LL;
}

uint64_t sub_1002D2008()
{
  return 2LL;
}

uint64_t sub_1002D2010()
{
  return 0LL;
}

uint64_t sub_1002D2018()
{
  return 0LL;
}

uint64_t sub_1002D2020()
{
  return 0LL;
}

uint64_t sub_1002D2028()
{
  return 2LL;
}

uint64_t sub_1002D2030()
{
  return 2LL;
}

uint64_t sub_1002D2038()
{
  return 2LL;
}

uint64_t sub_1002D2040()
{
  return 2LL;
}

uint64_t sub_1002D2048()
{
  return 2LL;
}

uint64_t sub_1002D2050()
{
  return 2LL;
}

uint64_t sub_1002D2058()
{
  return 2LL;
}

uint64_t sub_1002D2060()
{
  return 2LL;
}

uint64_t sub_1002D2068()
{
  return 2LL;
}

uint64_t sub_1002D2070()
{
  return 0LL;
}

uint64_t sub_1002D2078()
{
  return 0LL;
}

uint64_t sub_1002D2080()
{
  return 0LL;
}

uint64_t sub_1002D2088()
{
  return 0LL;
}

void sub_1002D2090(id a1)
{
  char v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_1002D20C0(_Unwind_Exception *a1)
{
}

const char *sub_1002D20D4(uint64_t a1)
{
  return sub_1002CE354(a1, a1);
}

void *sub_1002D20E0(void *a1)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  sub_100242DC4(a1 + 2);
  return a1;
}

uint64_t sub_1002D210C(uint64_t a1)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1 + 16);
  unsigned int v2 = *(dispatch_source_s **)(a1 + 8);
  if (v2)
  {
    dispatch_time_t v3 = dispatch_time(0LL, 10000000000LL);
    dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
  }

  else
  {
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    unsigned int v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, global_queue);
    *(void *)(a1 + 8) = v5;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_1002D2218;
    handler[3] = &unk_10087EB20;
    handler[4] = a1;
    dispatch_source_set_event_handler(v5, handler);
    char v6 = *(dispatch_source_s **)(a1 + 8);
    dispatch_time_t v7 = dispatch_time(0LL, 10000000000LL);
    dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    dispatch_resume(*(dispatch_object_t *)(a1 + 8));
  }

  return sub_100242FAC((uint64_t)v10);
}

uint64_t sub_1002D2218(uint64_t a1)
{
  return sub_1002D2220(*(void *)(a1 + 32));
}

uint64_t sub_1002D2220(uint64_t a1)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1 + 16);
  if (*(void *)a1)
  {
    sqlite3_close(*(sqlite3 **)a1);
    *(void *)a1 = 0LL;
    unsigned int v2 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unsigned int v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Closed device database", v5, 2u);
    }
  }

  dispatch_time_t v3 = *(dispatch_source_s **)(a1 + 8);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(a1 + 8));
    *(void *)(a1 + 8) = 0LL;
  }

  return sub_100242FAC((uint64_t)v6);
}

void sub_1002D22C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1002D22DC(uint64_t a1@<X8>)
{
  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v17 = 0LL;
  sub_10002418C(__p, "/Library/Application Support/BTServer/pincode_defaults.db");
  if (qword_1008D92C0 != -1) {
    dispatch_once(&qword_1008D92C0, &stru_10088F7D0);
  }
  uint64_t v2 = sub_100292FBC(qword_1008D92B8, 1);
  if (v2)
  {
    v14[0] = 0LL;
    v14[1] = 0LL;
    uint64_t v15 = 0LL;
    sub_1004513A4(v2, (uint64_t)v14);
    dispatch_time_t v3 = (void *)HIBYTE(v15);
    char v4 = HIBYTE(v15);
    if (v15 < 0) {
      dispatch_time_t v3 = v14[1];
    }
    if (v3)
    {
      *(_OWORD *)a1 = *(_OWORD *)v14;
      uint64_t v5 = v15;
LABEL_12:
      *(void *)(a1 + 16) = v5;
      goto LABEL_13;
    }

    if (SHIBYTE(v17) < 0)
    {
      sub_100024238((_BYTE *)a1, __p[0], (unint64_t)__p[1]);
      if ((v15 & 0x8000000000000000LL) == 0) {
        goto LABEL_13;
      }
    }

    else
    {
      *(_OWORD *)a1 = *(_OWORD *)__p;
      *(void *)(a1 + 16) = v17;
      if ((v4 & 0x80) == 0) {
        goto LABEL_13;
      }
    }

    operator delete(v14[0]);
  }

  else
  {
    char v6 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_FAULT)) {
      sub_1006694C0(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    if ((SHIBYTE(v17) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__p;
      uint64_t v5 = v17;
      goto LABEL_12;
    }

    sub_100024238((_BYTE *)a1, __p[0], (unint64_t)__p[1]);
  }

void sub_1002D242C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D2464(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  dispatch_time_t v3 = a2;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0LL) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(unsigned __int8 **)a2;
  }
  if ((v4 & 0x80u) != 0LL) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  int v6 = (char)a3[23];
  if (v6 >= 0) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = *(unsigned __int8 **)a3;
  }
  if (v6 >= 0) {
    uint64_t v8 = a3[23];
  }
  else {
    uint64_t v8 = *((void *)a3 + 1);
  }
  if (v8)
  {
    uint64_t v9 = &v5[v4];
    if (v4 < v8 || (uint64_t v10 = (uint64_t)&v9[-v8 + 1], (unsigned __int8 *)v10 == v5))
    {
LABEL_20:
      uint64_t v5 = v9;
    }

    else
    {
      while (1)
      {
        __darwin_ct_rune_t v11 = *v7;
        __darwin_ct_rune_t v12 = __toupper(*v5);
        if (v12 == __toupper(v11)) {
          break;
        }
LABEL_19:
      }

      uint64_t v13 = 1LL;
      while (v8 != v13)
      {
        __darwin_ct_rune_t v14 = v7[v13];
        __darwin_ct_rune_t v15 = __toupper(v5[v13++]);
        if (v15 != __toupper(v14)) {
          goto LABEL_19;
        }
      }
    }
  }

  if ((char)v3[23] < 0)
  {
    uint64_t v17 = v3;
    dispatch_time_t v3 = *(unsigned __int8 **)v3;
    uint64_t v16 = *((void *)v17 + 1);
  }

  else
  {
    uint64_t v16 = v3[23];
  }

  if (&v3[v16] == v5) {
    return -1LL;
  }
  else {
    return v5 - v3;
  }
}

void sub_1002D257C(const std::string *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  memset(&v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  *(_OWORD *)std::string __p = 0u;
  __int128 v12 = 0u;
  memset(v10, 0, sizeof(v10));
  __int128 v9 = 0u;
  sub_1002D272C((void (__cdecl ***)(std::istringstream *__hidden))&v9, a1, 8);
  while (1)
  {
    uint64_t v5 = sub_1002D2810(&v9, &v14, a2);
    if ((*((_BYTE *)v5 + *(void *)(*v5 - 24LL) + 32) & 5) != 0) {
      break;
    }
    unint64_t v6 = *(void *)(a3 + 8);
    if (v6 >= *(void *)(a3 + 16))
    {
      uint64_t v8 = sub_10023EFAC((char **)a3, (__int128 *)&v14);
    }

    else
    {
      if ((char)v14.__r_.__value_.__s.__size_ < 0)
      {
        sub_100024238(*(_BYTE **)(a3 + 8), v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
      }

      else
      {
        __int128 v7 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
        *(void *)(v6 + 16) = v14.__r_.__value_.__l.__cap_;
        *(_OWORD *)unint64_t v6 = v7;
      }

      uint64_t v8 = (char *)(v6 + 24);
      *(void *)(a3 + 8) = v6 + 24;
    }

    *(void *)(a3 + 8) = v8;
  }

  if (SBYTE7(v12) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf(v10);
  std::ios::~ios((char *)v13 + 8);
}

void sub_1002D26E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void (__cdecl ***sub_1002D272C( void (__cdecl ***a1)(std::istringstream *__hidden this), const std::string *a2, int a3))(std::istringstream *__hidden this)
{
  uint64_t v6 = (uint64_t)(a1 + 2);
  *a1 = v7;
  *(void *)((char *)*(v7 - 3) + (void)a1) = v8;
  a1[1] = 0LL;
  __int128 v9 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0LL;
  v9[1].__fmtflags_ = -1;
  sub_1002D5010(v6, a2, a3 | 8);
  return a1;
}

void sub_1002D27E8(_Unwind_Exception *a1)
{
}

void *sub_1002D2810(void *a1, std::string *a2, int a3)
{
  char v11 = 0;
  std::istream::sentry::sentry(&v11, a1, 1LL);
  if (!v11) {
    return a1;
  }
  if ((char)a2->__r_.__value_.__s.__size_ < 0)
  {
    *a2->__r_.__value_.__l.__data_ = 0;
    a2->__r_.__value_.__l.__size_ = 0LL;
  }

  else
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2->__r_.__value_.__s.__size_ = 0;
  }

  uint64_t v6 = 0LL;
  while (1)
  {
    __int128 v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24LL) + 40);
    uint64_t v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }

    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80LL))(v7);
    if ((_DWORD)v7 == -1) {
      break;
    }
LABEL_9:
    if (a3 == v7)
    {
      int v9 = 0;
      goto LABEL_17;
    }

    std::string::push_back(a2, (std::string::value_type)v7);
    --v6;
    if ((char)a2->__r_.__value_.__s.__size_ < 0 && a2->__r_.__value_.__l.__size_ == 0x7FFFFFFFFFFFFFF7LL)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }

  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear( (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)),  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 32) | v9);
  return a1;
}

uint64_t sub_1002D293C(uint64_t a1)
{
  uint64_t v3 = a1 + 16;
  std::streambuf::~streambuf(v3);
  std::ios::~ios(a1 + 120);
  return a1;
}

sqlite3_stmt *sub_1002D29C0(sqlite3 **a1, const std::string::value_type *a2)
{
  if (!*a1)
  {
    uint64_t v4 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_FAULT)) {
      sub_100669568(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }

  memset(&v19, 0, sizeof(v19));
  sub_10002418C(&v19, "SELECT ");
  unint64_t v12 = 0LL;
  uint64_t v13 = "devices.id";
  do
  {
    std::string::append(&v19, v13);
    if (v12 <= 7) {
      std::string::append(&v19, ", ");
    }
    ++v12;
    v13 += 136;
  }

  while (v12 != 9);
  std::string::append(&v19, a2);
  CFTypeID v18 = 0LL;
  if ((v19.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string v14 = &v19;
  }
  else {
    std::string v14 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if (sqlite3_prepare(*a1, (const char *)v14, -1, &v18, 0LL)
    && os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
  {
    __darwin_ct_rune_t v15 = sqlite3_errmsg(*a1);
    sub_100669530((uint64_t)v15, (uint64_t)v20);
  }

  uint64_t v16 = v18;
  return v16;
}

void sub_1002D2B30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

sqlite3_stmt *sub_1002D2B60(sqlite3 **a1)
{
  if (!*a1)
  {
    uint64_t v2 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_FAULT)) {
      sub_100669568(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v16 = 0LL;
  sub_10002418C( __p,  "SELECT makes.name, makes.common_abbreviation, makes.make_name_match_BOOLean_modifiers FROM makes WHERE makes.name IS NOT NULL");
  std::string v14 = 0LL;
  if (v16 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if (sqlite3_prepare(*a1, (const char *)v10, -1, &v14, 0LL)
    && os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = sqlite3_errmsg(*a1);
    sub_100669530((uint64_t)v11, (uint64_t)v17);
  }

  unint64_t v12 = v14;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  return v12;
}

void sub_1002D2C6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

sqlite3_stmt *sub_1002D2C94(sqlite3 **a1)
{
  if (!*a1)
  {
    uint64_t v2 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_FAULT)) {
      sub_100669568(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v16 = 0LL;
  sub_10002418C( __p,  "SELECT makeGroups.make_group_name, makeGroups.make_group_friendly_names FROM makeGroups WHERE makeGroups.make_group_ friendly_names IS NOT NULL");
  std::string v14 = 0LL;
  if (v16 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if (sqlite3_prepare(*a1, (const char *)v10, -1, &v14, 0LL)
    && os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = sqlite3_errmsg(*a1);
    sub_100669530((uint64_t)v11, (uint64_t)v17);
  }

  unint64_t v12 = v14;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  return v12;
}

void sub_1002D2DA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D2DC8(sqlite3 **a1, sqlite3_stmt *a2, uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_FAULT)) {
      sub_100669568(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }

  uint64_t v13 = 0LL;
  while (1)
  {
    while (1)
    {
      int v14 = sqlite3_step(a2);
      if (v14 != 100) {
        break;
      }
      if ((_DWORD)v13)
      {
        __darwin_ct_rune_t v15 = (os_log_s *)qword_1008F75E0;
        if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
        {
          int v16 = sqlite3_column_int(a2, 0);
          *(_DWORD *)std::string buf = 67109376;
          int v26 = v13;
          __int16 v27 = 1024;
          int v28 = v16;
          _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Device database returned more than one row (%d and %d) - db is corrupt",  buf,  0xEu);
        }
      }

      else
      {
        uint64_t v13 = sqlite3_column_int(a2, 0);
        if (sqlite3_column_count(a2) >= 2)
        {
          int v17 = 1;
          do
          {
            CFTypeID v18 = sqlite3_column_name(a2, v17);
            std::string v19 = sqlite3_column_text(a2, v17);
            if (v18)
            {
              int v20 = v19;
              if (v19)
              {
                uint64_t v21 = 0LL;
                while (strcmp(v18, &aDevicesId[v21 + 200]))
                {
                  v21 += 136LL;
                  if (v21 == 1088) {
                    goto LABEL_22;
                  }
                }

                (*(void (**)(uint64_t, const unsigned __int8 *))&aDevicesId[v21 + 264])(a3, v20);
              }
            }

BOOL sub_1002D2FF8(sqlite3 **a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  if ((char)v81.__r_.__value_.__s.__size_ < 0)
  {
    std::string::size_type size = v81.__r_.__value_.__l.__size_;
    operator delete(v81.__r_.__value_.__l.__data_);
    if (size) {
      goto LABEL_3;
    }
  }

  else if (v81.__r_.__value_.__s.__size_)
  {
LABEL_3:
    if (!*a1)
    {
      uint64_t v5 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_FAULT)) {
        sub_100669568(v5, v6, v7, v8, v9, v10, v11, v12);
      }
    }

    char v67 = (std::string *)(a3 + 88);
    while (1)
    {
      while (1)
      {
        int v13 = sqlite3_step(a2);
        if (v13 > 20) {
          break;
        }
        if (v13 != 5)
        {
          if (v13 == 1) {
            goto LABEL_115;
          }
          goto LABEL_117;
        }
      }

      if (v13 != 100) {
        break;
      }
      if (sqlite3_column_count(a2) >= 1)
      {
        int v14 = 0;
        LOBYTE(v15) = 0;
        LOBYTE(v16) = 0;
        char v17 = 0;
        CFTypeID v18 = 0LL;
        __s = 0LL;
        do
        {
          std::string v19 = sqlite3_column_name(a2, v14);
          int v20 = sqlite3_column_text(a2, v14);
          if (v19)
          {
            uint64_t v21 = (const char *)v20;
            if (!strcmp(v19, "name"))
            {
              __s = (std::string::value_type *)v21;
            }

            else if (!strcmp(v19, "common_abbreviation"))
            {
              CFTypeID v18 = (char *)v21;
            }

            else if (!strcmp(v19, "make_name_match_BOOLean_modifiers"))
            {
              unint64_t v22 = atol(v21);
              char v17 = v22 & 1;
              uint64_t v16 = (v22 >> 1) & 1;
              uint64_t v15 = (v22 >> 2) & 1;
            }
          }

          ++v14;
        }

        while (v14 < sqlite3_column_count(a2));
        if (__s)
        {
          memset(&v76, 0, sizeof(v76));
          if ((v16 & 1) != 0) {
            std::string::assign(&v76, " ");
          }
          std::string::append(&v76, __s);
          if ((v15 & 1) != 0) {
            std::string::append(&v76, " ");
          }
          if ((v17 & 1) != 0)
          {
            sub_1003D01A0(a4, (uint64_t)&v81);
            unsigned __int8 v23 = v81.__r_.__value_.__s.__size_;
            uint64_t v24 = (void *)v81.__r_.__value_.__r.__words[0];
            if ((v81.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              int v25 = &v81;
            }
            else {
              int v25 = (std::string *)v81.__r_.__value_.__r.__words[0];
            }
            if ((v76.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              int v26 = &v76;
            }
            else {
              int v26 = (std::string *)v76.__r_.__value_.__r.__words[0];
            }
            if ((v76.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              int64_t v27 = v76.__r_.__value_.__s.__size_;
            }
            else {
              int64_t v27 = v76.__r_.__value_.__l.__size_;
            }
            if (v27)
            {
              if ((v81.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                int64_t v28 = v81.__r_.__value_.__s.__size_;
              }
              else {
                int64_t v28 = v81.__r_.__value_.__l.__size_;
              }
              if (v28 >= v27)
              {
                std::string __p = (void *)v81.__r_.__value_.__r.__words[0];
                uint64_t v32 = (char *)v25 + v28;
                int v33 = v26->__r_.__value_.__s.__data_[0];
                uint64_t v34 = v25;
                do
                {
                  int64_t v35 = v28 - v27;
                  if (v35 == -1) {
                    break;
                  }
                  uint64_t v36 = (char *)memchr(v34, v33, v35 + 1);
                  if (!v36) {
                    break;
                  }
                  uint64_t v37 = v36;
                  if (!memcmp(v36, v26, v27)) {
                    goto LABEL_53;
                  }
                  uint64_t v34 = (std::string *)(v37 + 1);
                  int64_t v28 = v32 - (v37 + 1);
                }

                while (v28 >= v27);
                uint64_t v37 = v32;
LABEL_53:
                BOOL v29 = v37 != v32 && v37 - (char *)v25 != -1;
                uint64_t v24 = __p;
              }

              else
              {
                BOOL v29 = 0;
              }
            }

            else
            {
              BOOL v29 = 1;
            }

            if ((v23 & 0x80) != 0) {
              operator delete(v24);
            }
            if (v29)
            {
              sub_10002418C(&v81, __s);
              std::string::operator=(v67, &v81);
              *(_BYTE *)(a3 + 80) = 1;
              int v61 = (os_log_s *)qword_1008F75E0;
              if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEBUG))
              {
                sub_1003D01A0(a4, (uint64_t)&__str);
                if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  p_str = &__str;
                }
                else {
                  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                }
                int v63 = &v76;
                if ((v76.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  int v63 = (std::string *)v76.__r_.__value_.__r.__words[0];
                }
                LODWORD(v81.__r_.__value_.__l.__data_) = 136446722;
                *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_str;
                WORD2(v81.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v81.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v63;
                HIWORD(v81.__r_.__value_.__r.__words[2]) = 1024;
                int v82 = 1;
                goto LABEL_139;
              }

              goto LABEL_111;
            }
          }

          else
          {
            uint64_t v30 = sub_1003D01A0(a4, (uint64_t)&v81);
            uint64_t v31 = sub_1002D2464(v30, (unsigned __int8 *)&v81, (unsigned __int8 *)&v76);
            if (v31 != -1)
            {
              sub_10002418C(&v81, __s);
              std::string::operator=(v67, &v81);
              *(_BYTE *)(a3 + 80) = 1;
              int v61 = (os_log_s *)qword_1008F75E0;
              if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEBUG))
              {
                sub_1003D01A0(a4, (uint64_t)&__str);
                if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  __int16 v64 = &__str;
                }
                else {
                  __int16 v64 = (std::string *)__str.__r_.__value_.__r.__words[0];
                }
                int v65 = &v76;
                if ((v76.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  int v65 = (std::string *)v76.__r_.__value_.__r.__words[0];
                }
                LODWORD(v81.__r_.__value_.__l.__data_) = 136446722;
                *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = (std::string::size_type)v64;
                WORD2(v81.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v81.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v65;
                HIWORD(v81.__r_.__value_.__r.__words[2]) = 1024;
                int v82 = v17 & 1;
LABEL_139:
                _os_log_debug_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEBUG,  "Friendly Name: %{public}s to Make Name substring matched: %s, require case sensitive match: %d",  (uint8_t *)&v81,  0x1Cu);
              }

LABEL_98:
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
            sub_100024304((void ***)&__str);
          }
        }
      }
    }

    if (v13 == 21)
    {
LABEL_115:
      int v59 = (os_log_s *)qword_1008F75E0;
      BOOL result = os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_10066975C(a1, v59);
      return 0LL;
    }

    if (v13 == 101) {
      return 0LL;
    }
LABEL_117:
    __int16 v60 = (os_log_s *)qword_1008F75E0;
    BOOL result = os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_1006696D4(a4, v60);
    return 0LL;
  }

  uint64_t v56 = qword_1008F75E0;
  BOOL result = os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEBUG);
  if (!result) {
    return result;
  }
  sub_100669654(a4, v56);
  return 0LL;
}

  sub_100242FAC((uint64_t)v28);
  return v6;
}

void sub_1002D37C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1002D386C(sqlite3 **a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  if ((SHIBYTE(v53) & 0x80000000) == 0)
  {
    if (HIBYTE(v53)) {
      goto LABEL_3;
    }
LABEL_59:
    uint64_t v38 = qword_1008F75E0;
    BOOL result = os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    sub_1006697DC(a4, v38);
    return 0LL;
  }

  uint64_t v37 = v52;
  operator delete(v51);
  if (!v37) {
    goto LABEL_59;
  }
LABEL_3:
  if (!*a1)
  {
    uint64_t v6 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_FAULT)) {
      sub_100669568(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }

  CFTypeID v45 = a1;
  while (1)
  {
LABEL_7:
    while (1)
    {
      int v14 = sqlite3_step(a2);
      if (v14 > 20) {
        break;
      }
      if (v14 != 5)
      {
        if (v14 != 1)
        {
LABEL_71:
          uint64_t v42 = (os_log_s *)qword_1008F75E0;
          BOOL result = os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          sub_10066985C(a4, v42);
          return 0LL;
        }

        goto LABEL_69;
      }
    }

    if (v14 != 100)
    {
      if (v14 != 21)
      {
        if (v14 != 101) {
          goto LABEL_71;
        }
        return 0LL;
      }

void sub_1002D3CD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21)
{
  std::string __p = &a21;
  sub_100024304((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D3D2C(sqlite3 **a1, uint64_t a2)
{
  v68[0] = 0LL;
  v68[1] = 0LL;
  sub_100242F28((uint64_t)v68, (uint64_t)(a1 + 2));
  uint64_t v90 = 0LL;
  __int128 v89 = 0u;
  memset(v88, 0, sizeof(v88));
  __int128 v86 = 0u;
  *(_OWORD *)std::string __p = 0u;
  __int128 v84 = 0u;
  *(_OWORD *)v85 = 0u;
  __int128 v82 = 0u;
  *(_OWORD *)v83 = 0u;
  sub_100532DC0((uint64_t)&v82 + 1);
  BYTE2(v83[0]) = 0;
  BYTE4(v83[0]) = 0;
  BYTE2(v85[0]) = 0;
  BYTE4(v85[0]) = 0;
  DWORD1(v88[1]) = 0;
  __int128 v84 = 0uLL;
  v83[1] = 0LL;
  LOBYTE(v85[0]) = 0;
  __int128 v86 = 0uLL;
  v85[1] = 0LL;
  LOBYTE(__p[0]) = 0;
  memset(v88, 0, 19);
  __p[1] = 0LL;
  BYTE8(v88[1]) = 1;
  BYTE2(v90) = 0;
  *(void *)((char *)&v88[1] + 14) = 0LL;
  *(void *)((char *)&v88[1] + 9) = 0LL;
  __int128 v89 = 0uLL;
  *((void *)&v88[2] + 1) = 0LL;
  LOBYTE(v90) = 0;
  if (!*a1)
  {
    memset(v73, 0, 24);
    sub_1002D22DC((uint64_t)v73);
    uint64_t v4 = v73[23] >= 0 ? v73 : *(const char **)v73;
    int v5 = sqlite3_open_v2(v4, a1, 1, 0LL);
    uint64_t v6 = (os_log_s *)qword_1008F75E0;
    if (v5)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = sqlite3_errmsg(*a1);
        sub_10066999C((uint64_t)v7, (uint64_t)v81);
      }

      sub_1002D2220((uint64_t)a1);
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v22 = v73;
      if (v73[23] < 0) {
        unint64_t v22 = *(_BYTE **)v73;
      }
      LODWORD(__str.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Opened device database at location %s",  (uint8_t *)&__str,  0xCu);
    }

    if ((v73[23] & 0x80000000) != 0) {
      operator delete(*(void **)v73);
    }
    if (v5)
    {
      uint64_t v23 = 1LL;
      goto LABEL_158;
    }
  }

  sub_1003D01A0(a2, (uint64_t)v73);
  if ((v73[23] & 0x80000000) != 0)
  {
    uint64_t v9 = *(void *)&v73[8];
    operator delete(*(void **)v73);
    if (!v9)
    {
LABEL_43:
      int v19 = 0;
      goto LABEL_44;
    }
  }

  else if (!v73[23])
  {
    goto LABEL_43;
  }

  uint64_t v10 = sub_1002D29C0( a1,  " FROM devices, manufacturers, matching_rules_oui, oui_assignments, makes WHERE ((oui_assignments.oui = ?1) AND (matching_rules_oui.manufacturer_id = oui_assignments.manufacturer_id)) AND (matching_rules_oui.name = ?2) AN D (matching_rules_oui.manufacturer_id = manufacturers.id) AND (matching_rules_oui.device_id = devices.id) AND CASE WHEN devices.make_id is NULL THEN (makes.id = 0) ELSE (devices.make_id = makes.id) END");
  if (!v10) {
    goto LABEL_43;
  }
  memset(v73, 0, 24);
  sub_1003FE1B4((unsigned __int8 *)(a2 + 128), &__str);
  std::string::basic_string((std::string *)v73, &__str, 0LL, 8uLL, (std::allocator<char> *)buf);
  memset(&__str, 0, sizeof(__str));
  sub_1003D01A0(a2, (uint64_t)&__str);
  uint64_t v11 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = v73;
    if (v73[23] < 0) {
      uint64_t v12 = *(_BYTE **)v73;
    }
    p_str = &__str;
    if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&_BYTE buf[12] = 2080;
    *(void *)&_BYTE buf[14] = p_str;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Looking up by OUI %s and Name %s", buf, 0x16u);
  }

  if (v73[23] >= 0) {
    int v14 = v73;
  }
  else {
    int v14 = *(const char **)v73;
  }
  if (v73[23] >= 0) {
    int v15 = v73[23];
  }
  else {
    int v15 = *(_DWORD *)&v73[8];
  }
  if (sqlite3_bind_text(v10, 1, v14, v15, 0LL)
    || ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0
      ? (uint64_t v16 = &__str)
      : (uint64_t v16 = (std::string *)__str.__r_.__value_.__r.__words[0]),
        (__str.__r_.__value_.__s.__size_ & 0x80u) == 0
      ? (int size = __str.__r_.__value_.__s.__size_)
      : (int size = __str.__r_.__value_.__r.__words[1]),
        sqlite3_bind_text(v10, 2, (const char *)v16, size, 0LL)))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
    {
      CFTypeID v18 = sqlite3_errmsg(*a1);
      sub_100669964((uint64_t)v18, (uint64_t)v77);
    }
  }

  else
  {
    int v57 = sub_1002D2DC8(a1, v10, (uint64_t)&v82);
    if (v57)
    {
      __int16 v58 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a2, buf);
        int v59 = v79 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)std::string v76 = 136446466;
        *(void *)&v76[4] = v59;
        *(_WORD *)&v76[12] = 1024;
        *(_DWORD *)&v76[14] = v57;
        _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "Found a OUI profile for device %{public}s at row %d",  v76,  0x12u);
        if (v79 < 0) {
          operator delete(*(void **)buf);
        }
      }

      int v19 = 1;
      goto LABEL_39;
    }
  }

  int v19 = 0;
LABEL_39:
  sqlite3_finalize(v10);
  if ((v73[23] & 0x80000000) != 0) {
    operator delete(*(void **)v73);
  }
LABEL_44:
  sub_1003D01A0(a2, (uint64_t)v73);
  if ((v73[23] & 0x80000000) != 0)
  {
    if (!*(void *)&v73[8])
    {
      uint64_t v24 = *(void **)v73;
LABEL_82:
      operator delete(v24);
      goto LABEL_83;
    }
  }

  else if (!v73[23])
  {
    goto LABEL_83;
  }

  if ((sub_1003DB5C8(a2) & 1) != 0)
  {
    if ((v73[23] & 0x80000000) != 0) {
      operator delete(*(void **)v73);
    }
    goto LABEL_64;
  }

  char v20 = sub_1003DB5FC(a2);
  char v21 = v20;
  if ((v73[23] & 0x80000000) == 0)
  {
    if ((v20 & 1) == 0) {
      goto LABEL_83;
    }
    goto LABEL_64;
  }

  operator delete(*(void **)v73);
  if ((v21 & 1) != 0)
  {
LABEL_64:
    int v25 = sub_1002D29C0( a1,  " FROM devices, matching_rules_hash, makes WHERE ((matching_rules_hash.name IS NULL) OR (matching_rules_hash. name = ?1)) AND ((matching_rules_hash.primaryHash IS NULL) OR (matching_rules_hash.primaryHash = ?2)) AND (( matching_rules_hash.secondaryHash IS NULL) OR (matching_rules_hash.secondaryHash = ?3)) AND (matching_rules_ hash.device_id = devices.id) AND CASE WHEN devices.make_id is NULL THEN (makes.id = 0) ELSE (devices.make_id = makes.id) END");
    if (!v25) {
      goto LABEL_83;
    }
    memset(&__str, 0, sizeof(__str));
    sub_1003D01A0(a2, (uint64_t)&__str);
    memset(buf, 0, 20);
    sub_1003DB5D0(a2, (uint64_t)buf);
    memset(v76, 0, 20);
    sub_1003DB604(a2, (uint64_t)v76);
    int v26 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      int64_t v27 = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int64_t v27 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)v73 = 136316162;
      *(void *)&v73[4] = v27;
      *(_WORD *)&v73[12] = 1042;
      *(_DWORD *)&v73[14] = 20;
      *(_WORD *)&v73[18] = 2098;
      *(void *)&v73[20] = buf;
      uint64_t v74 = 0x832000000140412LL;
      int v75 = v76;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Looking up by name %s, primaryHash %{public}.20P, secondaryHash %{public}.20P",  v73,  0x2Cu);
    }

    int64_t v28 = (__str.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__str : (std::string *)__str.__r_.__value_.__r.__words[0];
    int v29 = (__str.__r_.__value_.__s.__size_ & 0x80u) == 0
        ? __str.__r_.__value_.__s.__size_
        : LODWORD(__str.__r_.__value_.__r.__words[1]);
    if (sqlite3_bind_text(v25, 1, (const char *)v28, v29, 0LL)
      || sqlite3_bind_blob(v25, 2, buf, 20, 0LL)
      || sqlite3_bind_blob(v25, 3, v76, 20, 0LL))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = sqlite3_errmsg(*a1);
        sub_100669964((uint64_t)v30, (uint64_t)v69);
      }
    }

    else
    {
      int v60 = sub_1002D2DC8(a1, v25, (uint64_t)&v82);
      if (v60)
      {
        int v61 = (os_log_s *)qword_1008F75E0;
        if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C(a2, v73);
          __int16 v62 = v73[23] >= 0 ? v73 : *(_BYTE **)v73;
          *(_DWORD *)int v69 = 136446466;
          std::string::size_type v70 = v62;
          __int16 v71 = 1024;
          int v72 = v60;
          _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "Found a hash profile for device %{public}s at row %d",  v69,  0x12u);
          if ((v73[23] & 0x80000000) != 0) {
            operator delete(*(void **)v73);
          }
        }

        int v19 = 1;
      }
    }

    sqlite3_finalize(v25);
    uint64_t v24 = (void *)__str.__r_.__value_.__r.__words[0];
    goto LABEL_82;
  }

void sub_1002D4AF4( _Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, void *__p, uint64_t a39, int a40, __int16 a41, char a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47)
{
}

unint64_t sub_1002D4BE4(uint64_t a1, char *a2)
{
  unint64_t result = atol(a2);
  *(_BYTE *)(a1 + 49) = result & 1;
  *(_BYTE *)(a1 + 4std::istream::~istream(v2, v3 + 8) = 1;
  *(_BYTE *)(a1 + 19) = (result & 2) != 0;
  *(_BYTE *)(a1 + 1std::istream::~istream(v2, v3 + 8) = 1;
  *(_BYTE *)(a1 + 51) = (result & 4) != 0;
  *(_BYTE *)(a1 + 50) = 1;
  *(_BYTE *)(a1 + 112) = (result & 8) != 0;
  *(_BYTE *)(a1 + 113) = (result & 0x10) != 0;
  *(_BYTE *)(a1 + 114) = (result & 0x20) != 0;
  *(_BYTE *)(a1 + 121) = (result & 0x40) != 0;
  *(_BYTE *)(a1 + 122) = (result & 0x80) != 0;
  *(_BYTE *)(a1 + 123) = BYTE1(result) & 1;
  *(_BYTE *)(a1 + 1sub_100242FAC(v1 - 32) = (result & 0x200) != 0;
  *(_BYTE *)(a1 + 133) = (result & 0x400) != 0;
  *(_BYTE *)(a1 + 120) = (result & 0x800) != 0;
  uint64x2_t v4 = (uint64x2_t)vdupq_n_s64(result);
  int16x8_t v5 = (int16x8_t)vuzp1q_s32( (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1006C05E0),  (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1006C05D0));
  *(int8x8_t *)v5.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v5), (int8x8_t)0x1000100010001LL);
  *(_DWORD *)(a1 + 140) = vmovn_s16(v5).u32[0];
  *(_BYTE *)(a1 + 144) = BYTE2(result) & 1;
  *(_BYTE *)(a1 + 145) = (result & 0x20000) != 0;
  *(int8x8_t *)(a1 + 147) = vand_s8( vmovn_s16( vuzp1q_s16( (int16x8_t)vuzp1q_s32( (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1006C0600),  (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1006C05F0)),  (int16x8_t)vuzp1q_s32( (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1006C0620),  (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1006C0610)))),  (int8x8_t)0x101010101010101LL);
  int16x8_t v6 = (int16x8_t)vuzp1q_s32( (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1006C0640),  (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1006C0630));
  *(int8x8_t *)v6.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v6), (int8x8_t)0x1000100010001LL);
  *(_DWORD *)(a1 + 155) = vmovn_s16(v6).u32[0];
  *(_BYTE *)(a1 + 159) = (result & 0x40000000) != 0;
  BOOL v7 = (result & 0xFFFFFFFF80000000LL) != 0;
  *(_BYTE *)(a1 + 160) = v7;
  *(_BYTE *)(a1 + 161) = v7;
  *(_BYTE *)(a1 + 146) = v7;
  *(_BYTE *)(a1 + 162) = v7;
  return result;
}

void sub_1002D4D54(std::string *a1, char *a2)
{
  std::string::operator=(a1 + 1, &__str);
  a1->__r_.__value_.__s.__data_[20] = 1;
}

void sub_1002D4DA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D4DC0(uint64_t a1, char *a2)
{
  *(_BYTE *)a1 = 1;
  return nullsub_63(&v5, v3);
}

void sub_1002D4E34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_1002D4E50(uint64_t a1, char *a2)
{
  if (a2) {
    uint64_t result = atoi(a2);
  }
  else {
    uint64_t result = 0LL;
  }
  *(_DWORD *)(a1 + 136) = result;
  return result;
}

uint64_t sub_1002D4E84(uint64_t a1, char *a2)
{
  if (a2) {
    uint64_t result = atoi(a2);
  }
  else {
    uint64_t result = 0LL;
  }
  *(_DWORD *)(a1 + 12std::istream::~istream(v2, v3 + 8) = result;
  return result;
}

uint64_t sub_1002D4EB8(uint64_t result)
{
  *(_DWORD *)(result + 124) = 36;
  return result;
}

uint64_t sub_1002D4EC4(uint64_t a1, char *a2)
{
  if (a2) {
    uint64_t result = atoi(a2);
  }
  else {
    uint64_t result = 0LL;
  }
  *(_DWORD *)(a1 + 116) = result;
  return result;
}

void sub_1002D4EF8(uint64_t a1, char *a2)
{
  std::string::operator=((std::string *)(a1 + 88), &__str);
  *(_BYTE *)(a1 + 80) = 1;
}

void sub_1002D4F48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002D4F64(id a1)
{
  uint64_t v1 = operator new(0x88uLL);
  v1[2] = 0LL;
  void *v1 = @"com.apple.MobileAsset.MobileBluetoothAssets";
  v1[1] = v1 + 2;
  v1[3] = 0LL;
  *((_DWORD *)v1 + std::istream::~istream(v2, v3 + 8) = 0;
  v1[5] = 0LL;
  v1[6] = 0LL;
  v1[7] = 0LL;
  sub_100242DC4(v1 + 8);
  *((_BYTE *)v1 + 12std::istream::~istream(v2, v3 + 8) = 0;
  qword_1008D92B8 = (uint64_t)v1;
}

void sub_1002D4FD4(_Unwind_Exception *a1)
{
  uint64x2_t v4 = v3;
  int16x8_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 4std::istream::~istream(v2, v3 + 8) = v6;
    operator delete(v6);
  }

  sub_1002948EC(v2, *(void **)(v1 + 16));

  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D5010(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf(a1);
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  sub_1002D50A0(a1);
  return a1;
}

void sub_1002D507C(_Unwind_Exception *a1)
{
}

void sub_1002D50A0(uint64_t a1)
{
  *(void *)(a1 + 8std::istream::~istream(v2, v3 + 8) = 0LL;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    uint64x2_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }

  else
  {
    uint64x2_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }

  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 8std::istream::~istream(v2, v3 + 8) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + sub_100242FAC(v1 - 32) = (char *)v4 + v5;
  }

  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 8std::istream::~istream(v2, v3 + 8) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22LL;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 4std::istream::~istream(v2, v3 + 8) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64x2_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 4std::istream::~istream(v2, v3 + 8) = v4;
      }

      if (v5) {
        *(void *)(a1 + 4std::istream::~istream(v2, v3 + 8) = (char *)v4 + v5;
      }
    }
  }

uint64_t sub_1002D51B0(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(void *)(a2 + 4) = result;
  return result;
}

void sub_1002D51BC( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
}

void *sub_1002D51D0(void *a1)
{
  *a1 = &off_10088F800;
  sub_100242DC4(a1 + 1);
  uint64_t v2 = objc_autoreleasePoolPush();
  CFStringRef v3 = sub_1002D531C();
  uint64x2_t v4 = (void *)_CFPreferencesCopyKeyListWithContainer( @"com.apple.MobileBluetooth.devices",  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost,  v3);
  CFArrayRef v5 = CFPreferencesCopyKeyList( @"com.apple.MobileBluetooth.devices",  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost);
  if (![v4 count] && -[__CFArray count](v5, "count"))
  {
    int v6 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Using legacy keys", v8, 2u);
    }

    byte_1008D93C0 = 0;
  }

  objc_autoreleasePoolPop(v2);
  return a1;
}

void sub_1002D52EC(_Unwind_Exception *a1)
{
}

CFStringRef sub_1002D531C()
{
  CFStringRef result = (CFStringRef)qword_1008EFCD8;
  if (!qword_1008EFCD8)
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v4 = 0LL;
    uint64_t v1 = sub_1002E8D54();
    (*(void (**)(uint64_t, void **))(*(void *)v1 + 168LL))(v1, __p);
    if (v4 >= 0) {
      uint64_t v2 = __p;
    }
    else {
      uint64_t v2 = (void **)__p[0];
    }
    CFStringRef result = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v2, 0x8000100u);
    qword_1008EFCD8 = (uint64_t)result;
    if (SHIBYTE(v4) < 0)
    {
      operator delete(__p[0]);
      return (CFStringRef)qword_1008EFCD8;
    }
  }

  return result;
}

void sub_1002D53A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002D53C8(void *a1)
{
  *a1 = &off_10088F800;
  sub_100242E28(a1 + 1);
  return a1;
}

void sub_1002D53F8(void *a1)
{
  *a1 = &off_10088F800;
  sub_100242E28(a1 + 1);
  operator delete(a1);
}

uint64_t sub_1002D5428(uint64_t a1, void **a2)
{
  context = objc_autoreleasePoolPush();
  if (byte_1008D93C0)
  {
    CFStringRef v3 = sub_1002D531C();
    CFArrayRef v4 = (CFArrayRef)_CFPreferencesCopyKeyListWithContainer( @"com.apple.MobileBluetooth.devices",  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost,  v3);
  }

  else
  {
    CFArrayRef v4 = CFPreferencesCopyKeyList( @"com.apple.MobileBluetooth.devices",  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost);
  }

  CFArrayRef v5 = v4;
  if (v4)
  {
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSArray);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) == 0)
    {
      std::string::size_type v7 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
        sub_1006699D4(v7, v8, v9, v10, v11, v12, v13, v14);
      }
    }
  }

  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  int v15 = v5;
  id v16 = -[__CFArray countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v38,  v42,  16LL);
  if (v16)
  {
    uint64_t v17 = *(void *)v39;
    do
    {
      CFTypeID v18 = 0LL;
      do
      {
        if (*(void *)v39 != v17) {
          objc_enumerationMutation(v15);
        }
        int v19 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)v18);
        __int16 v37 = 0;
        int v36 = 0;
        if (sub_1003FE1A4( (uint64_t)&v36, (unsigned __int8 *)objc_msgSend(v19, "UTF8String", context)))
        {
          if (qword_1008D5F50 != -1) {
            dispatch_once(&qword_1008D5F50, &stru_10088FDF8);
          }
          char v20 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v36, 1);
          char v21 = v20;
          uint64_t v23 = a2[1];
          unint64_t v22 = (unint64_t)a2[2];
          if ((unint64_t)v23 >= v22)
          {
            uint64_t v25 = ((char *)v23 - (_BYTE *)*a2) >> 3;
            uint64_t v26 = v22 - (void)*a2;
            uint64_t v27 = v26 >> 2;
            else {
              unint64_t v28 = v27;
            }
            if (v28) {
              int v29 = (char *)sub_100008BA0((uint64_t)(a2 + 2), v28);
            }
            else {
              int v29 = 0LL;
            }
            uint64_t v30 = &v29[8 * v25];
            *(void *)uint64_t v30 = v21;
            uint64_t v24 = v30 + 8;
            int v32 = (char *)*a2;
            uint64_t v31 = (char *)a2[1];
            if (v31 != *a2)
            {
              do
              {
                uint64_t v33 = *((void *)v31 - 1);
                v31 -= 8;
                *((void *)v30 - 1) = v33;
                v30 -= 8;
              }

              while (v31 != v32);
              uint64_t v31 = (char *)*a2;
            }

            *a2 = v30;
            a2[1] = v24;
            a2[2] = &v29[8 * v28];
            if (v31) {
              operator delete(v31);
            }
          }

          else
          {
            *uint64_t v23 = v20;
            uint64_t v24 = v23 + 1;
          }

          a2[1] = v24;
        }

        CFTypeID v18 = (char *)v18 + 1;
      }

      while (v18 != v16);
      id v16 = -[__CFArray countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v38,  v42,  16LL);
    }

    while (v16);
  }

  objc_autoreleasePoolPop(context);
  return 0LL;
}

void sub_1002D56F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002D5730()
{
  return _CFPreferencesFlushCachesForIdentifier(@"com.apple.MobileBluetooth.devices", kCFPreferencesCurrentUser);
}

uint64_t sub_1002D5748()
{
  int v0 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Disable cfprefs daemon cache", v2, 2u);
  }

  return _CFPreferencesSetDaemonCacheEnabled( @"com.apple.MobileBluetooth.devices",  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost,  0LL,  0LL);
}

uint64_t sub_1002D57D8(uint64_t a1, uint64_t a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10088FDF8);
  }
  char v3 = sub_100401058((uint64_t)off_1008D5F48);
  CFArrayRef v4 = (os_log_s *)qword_1008F7578;
  if ((v3 & 1) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003D01A0(a2, (uint64_t)__p);
      CFArrayRef v5 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Trying to delete device %s", buf, 0xCu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v6 = objc_autoreleasePoolPush();
    int v8 = *(_DWORD *)(a2 + 128);
    uint64_t v7 = a2 + 128;
    *(_DWORD *)std::string buf = v8;
    LOWORD(v23) = *(_WORD *)(v7 + 4);
    sub_1003FE1B4(buf, __p);
    if (v21 >= 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    uint64_t v10 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v9));
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    sub_1002D5AFC(v10, 0LL);

    objc_autoreleasePoolPop(v6);
    int v18 = *(_DWORD *)v7;
    __int16 v19 = *(_WORD *)(v7 + 4);
    sub_1003FE1B4((unsigned __int8 *)&v18, __p);
    if (v21 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    uint64_t v12 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v11));
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v13 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003FE1B4((unsigned __int8 *)&v18, __p);
      uint64_t v14 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Deleting address %{public}s", buf, 0xCu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    int v15 = (void *)sub_1002D5B74(v12);
    uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSDictionary);
    if ((objc_opt_isKindOfClass(v15, v16) & 1) != 0
      && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT))
    {
      sub_100669A44();
    }

    return 0LL;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100669A7C(a2, v4);
    }
    return 1LL;
  }

void sub_1002D5AA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1002D5AFC(CFStringRef key, CFPropertyListRef value)
{
  if (byte_1008D93C0)
  {
    CFStringRef v4 = sub_1002D531C();
    _CFPreferencesSetAppValueWithContainer(key, value, @"com.apple.MobileBluetooth.devices", v4);
  }

  else
  {
    CFPreferencesSetValue( key,  value,  @"com.apple.MobileBluetooth.devices",  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost);
  }

CFPropertyListRef sub_1002D5B74(CFStringRef key)
{
  if (!byte_1008D93C0) {
    return CFPreferencesCopyValue( key,  @"com.apple.MobileBluetooth.devices",  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost);
  }
  CFStringRef v2 = sub_1002D531C();
  return (CFPropertyListRef)_CFPreferencesCopyAppValueWithContainer(key, @"com.apple.MobileBluetooth.devices", v2);
}

uint64_t sub_1002D5BE0(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_1002D5BF0(a1, a2, "Name", a3);
}

uint64_t sub_1002D5BF0(uint64_t a1, unsigned __int8 *a2, const char *a3, std::string *a4)
{
  uint64_t v7 = objc_autoreleasePoolPush();
  id v8 = sub_1002D7584((uint64_t)v7, (uint64_t)a2, (uint64_t)a3);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSString);
  if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
  {
    id v11 = v9;
    std::string::assign(a4, (const std::string::value_type *)[v11 UTF8String]);

    objc_autoreleasePoolPop(v7);
    return 0LL;
  }

  else
  {

    objc_autoreleasePoolPop(v7);
    if (!strncmp("Name", a3, 4uLL) && sub_1003CF350(a2))
    {
      uint64_t v13 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_100669B0C((uint64_t)a2, v13);
      }
    }

    return 1LL;
  }

void sub_1002D5CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002D5CFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0LL;
}

uint64_t sub_1002D5D20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  id v8 = objc_autoreleasePoolPush();
  else {
    uint64_t v9 = (uint64_t *)*a4;
  }
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v9));
  sub_1002D78C4(a1, a2, a3, v10);

  objc_autoreleasePoolPop(v8);
  return 0LL;
}

void sub_1002D5DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002D5DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"DevicePrimaryHash", a3, (id)0x14);
}

uint64_t sub_1002D5DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5)
{
  uint64_t v9 = objc_autoreleasePoolPush();
  id v10 = sub_1002D7584((uint64_t)v9, a2, a3);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSData);
  if ((objc_opt_isKindOfClass(v11, v12) & 1) != 0 && [v11 length] == a5)
  {
    [v11 getBytes:a4 length:a5];
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v13 = 1LL;
  }

  objc_autoreleasePoolPop(v9);
  return v13;
}

void sub_1002D5E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002D5E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0LL;
}

uint64_t sub_1002D5EB0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v10 = objc_autoreleasePoolPush();
  if (a4) {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a4, a5));
  }
  else {
    id v11 = 0LL;
  }
  sub_1002D78C4(a1, a2, a3, v11);

  objc_autoreleasePoolPop(v10);
  return 0LL;
}

void sub_1002D5F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002D5F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"DeviceSecondaryHash", a3, (id)0x14);
}

uint64_t sub_1002D5F64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0LL;
}

uint64_t sub_1002D5F8C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"DevicePrimaryHashData", a3, (id)a4);
}

uint64_t sub_1002D5FA4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return 0LL;
}

uint64_t sub_1002D5FD0(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_1002D5BF0(a1, a2, "DeviceBundleID", a3);
}

uint64_t sub_1002D5FE0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0LL;
}

uint64_t sub_1002D6004(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_1002D5BF0(a1, a2, "DeviceCarVendorName", a3);
}

uint64_t sub_1002D6014(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0LL;
}

uint64_t sub_1002D6038(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_1002D5BF0(a1, a2, "DeviceManufacturerName", a3);
}

uint64_t sub_1002D6048(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0LL;
}

uint64_t sub_1002D606C(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_1002D5BF0(a1, a2, "DeviceModelName", a3);
}

uint64_t sub_1002D607C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0LL;
}

uint64_t sub_1002D60A0(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_1002D5BF0(a1, a2, "DeviceHWRevision", a3);
}

uint64_t sub_1002D60B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0LL;
}

uint64_t sub_1002D60D4(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_1002D5BF0(a1, a2, "DeviceFWRevision", a3);
}

uint64_t sub_1002D60E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0LL;
}

uint64_t sub_1002D6108(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_1002D5BF0(a1, a2, "DeviceSWRevision", a3);
}

uint64_t sub_1002D6118(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0LL;
}

uint64_t sub_1002D613C(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_1002D5BF0(a1, a2, "UserNameKey", a3);
}

uint64_t sub_1002D614C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0LL;
}

uint64_t sub_1002D6170(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_1002D5BF0(a1, a2, "DefaultName", a3);
}

uint64_t sub_1002D6180(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0LL;
}

uint64_t sub_1002D61A4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = (void *)(a3 + 8);
  sub_10023BF24(a3, *(void **)(a3 + 8));
  *(void *)a3 = v6;
  *(void *)(a3 + 16) = 0LL;
  void *v6 = 0LL;
  memset(&__p, 0, sizeof(__p));
  uint64_t v7 = 1LL;
  if (!sub_1002D5BF0(a1, a2, "ServiceHandsfree", &__p))
  {
    int v8 = sub_1002D6594(0, &__p);
    unsigned int v18 = 1;
    char v20 = &v18;
    uint64_t v7 = 0LL;
    *((_DWORD *)sub_1002DBB90((uint64_t **)a3, &v18, (uint64_t)&unk_1006C2518, &v20) + std::istream::~istream(v2, v3 + 8) = v8;
  }

  if (!sub_1002D5BF0(a1, a2, "ServicePhoneBook", &__p))
  {
    int v9 = sub_1002D6594(0, &__p);
    unsigned int v18 = 2;
    char v20 = &v18;
    uint64_t v7 = 0LL;
    *((_DWORD *)sub_1002DBB90((uint64_t **)a3, &v18, (uint64_t)&unk_1006C2518, &v20) + std::istream::~istream(v2, v3 + 8) = v9;
  }

  if (!sub_1002D5BF0(a1, a2, "ServiceRemote", &__p))
  {
    int v10 = sub_1002D6594(0, &__p);
    unsigned int v18 = 8;
    char v20 = &v18;
    uint64_t v7 = 0LL;
    *((_DWORD *)sub_1002DBB90((uint64_t **)a3, &v18, (uint64_t)&unk_1006C2518, &v20) + std::istream::~istream(v2, v3 + 8) = v10;
  }

  if (!sub_1002D5BF0(a1, a2, "ServiceA2DP", &__p))
  {
    int v11 = sub_1002D6594(0, &__p);
    unsigned int v18 = 16;
    char v20 = &v18;
    uint64_t v7 = 0LL;
    *((_DWORD *)sub_1002DBB90((uint64_t **)a3, &v18, (uint64_t)&unk_1006C2518, &v20) + std::istream::~istream(v2, v3 + 8) = v11;
  }

  if (!sub_1002D5BF0(a1, a2, "ServiceHID", &__p))
  {
    int v12 = sub_1002D6594(0, &__p);
    unsigned int v18 = 32;
    char v20 = &v18;
    uint64_t v7 = 0LL;
    *((_DWORD *)sub_1002DBB90((uint64_t **)a3, &v18, (uint64_t)&unk_1006C2518, &v20) + std::istream::~istream(v2, v3 + 8) = v12;
  }

  if (!sub_1002D5BF0(a1, a2, "ServiceWiAP", &__p))
  {
    int v13 = sub_1002D6594(0, &__p);
    unsigned int v18 = 128;
    char v20 = &v18;
    uint64_t v7 = 0LL;
    *((_DWORD *)sub_1002DBB90((uint64_t **)a3, &v18, (uint64_t)&unk_1006C2518, &v20) + std::istream::~istream(v2, v3 + 8) = v13;
  }

  if (!sub_1002D5BF0(a1, a2, "ServiceBraille", &__p))
  {
    int v14 = sub_1002D6594(0, &__p);
    unsigned int v18 = 0x2000;
    char v20 = &v18;
    uint64_t v7 = 0LL;
    *((_DWORD *)sub_1002DBB90((uint64_t **)a3, &v18, (uint64_t)&unk_1006C2518, &v20) + std::istream::~istream(v2, v3 + 8) = v14;
  }

  if (!sub_1002D5BF0(a1, a2, "ServiceAACP", &__p))
  {
    int v15 = sub_1002D6594(0, &__p);
    unsigned int v18 = 0x80000;
    char v20 = &v18;
    uint64_t v7 = 0LL;
    *((_DWORD *)sub_1002DBB90((uint64_t **)a3, &v18, (uint64_t)&unk_1006C2518, &v20) + std::istream::~istream(v2, v3 + 8) = v15;
  }

  if (!sub_1002D5BF0(a1, a2, "ServiceGATT", &__p))
  {
    int v16 = sub_1002D6594(0, &__p);
    unsigned int v18 = 0x100000;
    char v20 = &v18;
    uint64_t v7 = 0LL;
    *((_DWORD *)sub_1002DBB90((uint64_t **)a3, &v18, (uint64_t)&unk_1006C2518, &v20) + std::istream::~istream(v2, v3 + 8) = v16;
  }

  return v7;
}

void sub_1002D6554( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D6594(int a1, std::string *this)
{
  uint64_t result = std::string::compare(this, "Unknown");
  if ((_DWORD)result)
  {
    if (!std::string::compare(this, "Unsupported"))
    {
      return 1LL;
    }

    else if (!std::string::compare(this, "Unlikely"))
    {
      return 2LL;
    }

    else if (!std::string::compare(this, "Likely"))
    {
      return 3LL;
    }

    else
    {
      return 4 * (std::string::compare(this, "Supported") == 0);
    }
  }

  return result;
}

uint64_t sub_1002D6634(uint64_t a1, uint64_t a2, void *a3)
{
  char v3 = a3 + 1;
  CFStringRef v4 = (void *)*a3;
  if ((void *)*a3 != a3 + 1)
  {
    do
    {
      int v7 = *((_DWORD *)v4 + 7);
      if (v7 <= 31)
      {
        if (v7 > 7)
        {
          if (v7 == 8)
          {
            sub_1002D68F0((int *)v4 + 8, &__p);
            sub_1002D5D20(a1, a2, "ServiceRemote", (uint64_t *)&__p);
LABEL_23:
            goto LABEL_25;
          }

          if (v7 == 16)
          {
            sub_1002D68F0((int *)v4 + 8, &__p);
            sub_1002D5D20(a1, a2, "ServiceA2DP", (uint64_t *)&__p);
            goto LABEL_23;
          }
        }

        else
        {
          if (v7 == 1)
          {
            sub_1002D68F0((int *)v4 + 8, &__p);
            sub_1002D5D20(a1, a2, "ServiceHandsfree", (uint64_t *)&__p);
            goto LABEL_23;
          }

          if (v7 == 2)
          {
            sub_1002D68F0((int *)v4 + 8, &__p);
            sub_1002D5D20(a1, a2, "ServicePhoneBook", (uint64_t *)&__p);
            goto LABEL_23;
          }
        }
      }

      else if (v7 < 0x2000)
      {
        if (v7 == 32)
        {
          sub_1002D68F0((int *)v4 + 8, &__p);
          sub_1002D5D20(a1, a2, "ServiceHID", (uint64_t *)&__p);
          goto LABEL_23;
        }

        if (v7 == 128)
        {
          sub_1002D68F0((int *)v4 + 8, &__p);
          sub_1002D5D20(a1, a2, "ServiceWiAP", (uint64_t *)&__p);
          goto LABEL_23;
        }
      }

      else
      {
        switch(v7)
        {
          case 0x2000:
            sub_1002D68F0((int *)v4 + 8, &__p);
            sub_1002D5D20(a1, a2, "ServiceBraille", (uint64_t *)&__p);
            goto LABEL_23;
          case 0x80000:
            sub_1002D68F0((int *)v4 + 8, &__p);
            sub_1002D5D20(a1, a2, "ServiceAACP", (uint64_t *)&__p);
            goto LABEL_23;
          case 0x100000:
            sub_1002D68F0((int *)v4 + 8, &__p);
            sub_1002D5D20(a1, a2, "ServiceGATT", (uint64_t *)&__p);
            goto LABEL_23;
        }
      }

void sub_1002D68B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1002D68F0@<X0>(int *a1@<X1>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  uint64_t v3 = *a1;
  return result;
}

void sub_1002D6934(_Unwind_Exception *exception_object)
{
}

BOOL sub_1002D6950(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  return sub_1002D6960(a1, a2, (uint64_t)"PhonebookSyncSettings", a3);
}

BOOL sub_1002D6960(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v7 = objc_autoreleasePoolPush();
  id v8 = sub_1002D7584((uint64_t)v7, a2, a3);
  int v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSNumber);
  char isKindOfClass = objc_opt_isKindOfClass(v9, v10);
  if ((isKindOfClass & 1) != 0) {
    *a4 = [v9 intValue];
  }

  objc_autoreleasePoolPop(v7);
  return (isKindOfClass & 1) == 0;
}

void sub_1002D69E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002D69F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0LL;
}

uint64_t sub_1002D6A1C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v8 = objc_autoreleasePoolPush();
  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a4));
  sub_1002D78C4(a1, a2, a3, v9);

  objc_autoreleasePoolPop(v8);
  return 0LL;
}

void sub_1002D6A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002D6AA8(uint64_t a1, uint64_t a2, int **a3)
{
  int v22 = -1;
  uint64_t v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v7 = *a3 == a3[1];
    *(_DWORD *)std::string buf = 67109120;
    int v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Group list is empty: %d", buf, 8u);
  }

  sub_1002D6960(a1, a2, (uint64_t)"PhonebookSyncGroup", &v22);
  id v8 = *a3;
  a3[1] = *a3;
  int v9 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v24 = v22;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Read group ID: %d", buf, 8u);
    id v8 = a3[1];
  }

  unint64_t v10 = (unint64_t)a3[2];
  if ((unint64_t)v8 >= v10)
  {
    int v12 = *a3;
    uint64_t v13 = v8 - *a3;
    unint64_t v14 = v13 + 1;
    uint64_t v15 = v10 - (void)v12;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      uint64_t v17 = (char *)sub_10024E33C((uint64_t)(a3 + 2), v16);
      int v12 = *a3;
      id v8 = a3[1];
    }

    else
    {
      uint64_t v17 = 0LL;
    }

    unsigned int v18 = (int *)&v17[4 * v13];
    __int16 v19 = (int *)&v17[4 * v16];
    *unsigned int v18 = v22;
    int v11 = v18 + 1;
    while (v8 != v12)
    {
      int v20 = *--v8;
      *--unsigned int v18 = v20;
    }

    *a3 = v18;
    a3[1] = v11;
    a3[2] = v19;
    if (v12) {
      operator delete(v12);
    }
  }

  else
  {
    *id v8 = v22;
    int v11 = v8 + 1;
  }

  a3[1] = v11;
  return 0LL;
}

uint64_t sub_1002D6CA4(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  return 0LL;
}

uint64_t sub_1002D6CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0LL;
}

uint64_t sub_1002D6CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"DeviceClass", a3, (id)4);
}

uint64_t sub_1002D6D04(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "DeviceClass", (uint64_t)&v4, 4LL);
  return 0LL;
}

BOOL sub_1002D6D38(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_1002D6D48(a1, a2, (uint64_t)"PincodeHasSucceeded", a3);
}

BOOL sub_1002D6D48(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  BOOL v7 = objc_autoreleasePoolPush();
  id v8 = sub_1002D7584((uint64_t)v7, a2, a3);
  int v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSNumber);
  char isKindOfClass = objc_opt_isKindOfClass(v9, v10);
  if ((isKindOfClass & 1) != 0) {
    *a4 = [v9 BOOLValue];
  }

  objc_autoreleasePoolPop(v7);
  return (isKindOfClass & 1) == 0;
}

void sub_1002D6DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002D6DE0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  if (a3) {
    BOOL v7 = &__kCFBooleanTrue;
  }
  else {
    BOOL v7 = &__kCFBooleanFalse;
  }
  sub_1002D78C4(a1, a2, "PincodeHasSucceeded", v7);
  objc_autoreleasePoolPop(v6);
  return 0LL;
}

BOOL sub_1002D6E4C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_1002D6D48(a1, a2, (uint64_t)"AllowScoForTBT", a3);
}

uint64_t sub_1002D6E5C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  if (a3) {
    BOOL v7 = &__kCFBooleanTrue;
  }
  else {
    BOOL v7 = &__kCFBooleanFalse;
  }
  sub_1002D78C4(a1, a2, "AllowScoForTBT", v7);
  objc_autoreleasePoolPop(v6);
  return 0LL;
}

uint64_t sub_1002D6EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastAVRCPVersion", a3, (id)2);
}

uint64_t sub_1002D6EDC(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4 = a3;
  sub_1002D5EB0(a1, a2, "LastAVRCPVersion", (uint64_t)&v4, 2LL);
  return 0LL;
}

uint64_t sub_1002D6F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastPBAPVersion", a3, (id)2);
}

uint64_t sub_1002D6F24(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4 = a3;
  sub_1002D5EB0(a1, a2, "LastPBAPVersion", (uint64_t)&v4, 2LL);
  return 0LL;
}

uint64_t sub_1002D6F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastPBAPSupportedFeatures", a3, (id)2);
}

uint64_t sub_1002D6F6C(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4 = a3;
  sub_1002D5EB0(a1, a2, "LastPBAPSupportedFeatures", (uint64_t)&v4, 2LL);
  return 0LL;
}

uint64_t sub_1002D6FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastAVRCPControllerVersion", a3, (id)2);
}

uint64_t sub_1002D6FB4(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4 = a3;
  sub_1002D5EB0(a1, a2, "LastAVRCPControllerVersion", (uint64_t)&v4, 2LL);
  return 0LL;
}

uint64_t sub_1002D6FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastAVRCPControllerSupportedFeatures", a3, (id)2);
}

uint64_t sub_1002D6FFC(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4 = a3;
  sub_1002D5EB0(a1, a2, "LastAVRCPControllerSupportedFeatures", (uint64_t)&v4, 2LL);
  return 0LL;
}

uint64_t sub_1002D7030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastAVRCPTargetVersion", a3, (id)2);
}

uint64_t sub_1002D7044(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4 = a3;
  sub_1002D5EB0(a1, a2, "LastAVRCPTargetVersion", (uint64_t)&v4, 2LL);
  return 0LL;
}

uint64_t sub_1002D7078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastAVRCPTargetSupportedFeatures", a3, (id)2);
}

uint64_t sub_1002D708C(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4 = a3;
  sub_1002D5EB0(a1, a2, "LastAVRCPTargetSupportedFeatures", (uint64_t)&v4, 2LL);
  return 0LL;
}

uint64_t sub_1002D70C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastHandsfreeVersion", a3, (id)2);
}

uint64_t sub_1002D70D4(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4 = a3;
  sub_1002D5EB0(a1, a2, "LastHandsfreeVersion", (uint64_t)&v4, 2LL);
  return 0LL;
}

uint64_t sub_1002D7108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastHandsfreeSupportedFeatures", a3, (id)2);
}

uint64_t sub_1002D711C(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4 = a3;
  sub_1002D5EB0(a1, a2, "LastHandsfreeSupportedFeatures", (uint64_t)&v4, 2LL);
  return 0LL;
}

uint64_t sub_1002D7150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastA2DPSinkVersion", a3, (id)2);
}

uint64_t sub_1002D7164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0LL;
}

uint64_t sub_1002D718C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastA2DPSinkSupportedFeatures", a3, (id)2);
}

uint64_t sub_1002D71A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0LL;
}

uint64_t sub_1002D71C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastMAPVersion", a3, (id)2);
}

uint64_t sub_1002D71DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0LL;
}

uint64_t sub_1002D7204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastOBEXObjectPushVersion", a3, (id)2);
}

uint64_t sub_1002D7218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0LL;
}

uint64_t sub_1002D7240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastPNPInformationVersion", a3, (id)2);
}

uint64_t sub_1002D7254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0LL;
}

uint64_t sub_1002D727C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastSerialPortVersion", a3, (id)2);
}

uint64_t sub_1002D7290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0LL;
}

uint64_t sub_1002D72B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastHIDVersion", a3, (id)2);
}

uint64_t sub_1002D72CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0LL;
}

uint64_t sub_1002D72F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastGATTVersion", a3, (id)2);
}

uint64_t sub_1002D7308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0LL;
}

uint64_t sub_1002D7330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastWIAPVersion", a3, (id)2);
}

uint64_t sub_1002D7344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0LL;
}

uint64_t sub_1002D736C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastAVDTPVersion", a3, (id)2);
}

uint64_t sub_1002D7380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0LL;
}

uint64_t sub_1002D73A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LastAVCTPVersion", a3, (id)2);
}

uint64_t sub_1002D73BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0LL;
}

BOOL sub_1002D73E4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_1002D6D48(a1, a2, (uint64_t)"initiateSDPMirroringState", a3);
}

uint64_t sub_1002D73F4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  if (a3) {
    BOOL v7 = &__kCFBooleanTrue;
  }
  else {
    BOOL v7 = &__kCFBooleanFalse;
  }
  sub_1002D78C4(a1, a2, "initiateSDPMirroringState", v7);
  objc_autoreleasePoolPop(v6);
  return 0LL;
}

uint64_t sub_1002D7460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"AssetLastCheckedTime", a3, (id)8);
}

uint64_t sub_1002D7474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  sub_1002D5EB0(a1, a2, "AssetLastCheckedTime", (uint64_t)&v4, 8LL);
  return 0LL;
}

uint64_t sub_1002D74A8(uint64_t a1, uint64_t a2, uint64_t *a3, _BYTE *a4)
{
  BOOL v7 = objc_autoreleasePoolPush();
  id v8 = sub_1002D7584((uint64_t)v7, a2, (uint64_t)"DeviceTags");
  int v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSArray);
  if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
  {
    else {
      int v11 = (uint64_t *)*a3;
    }
    int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v11));
    *a4 = [v9 containsObject:v12];

    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v13 = 1LL;
  }

  objc_autoreleasePoolPop(v7);
  return v13;
}

void sub_1002D7564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1002D7584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10088FDF8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    int v13 = *(_DWORD *)(a2 + 128);
    __int16 v14 = *(_WORD *)(a2 + 132);
    sub_1003FE1B4((unsigned __int8 *)&v13, __p);
    if (v16 >= 0) {
      CFArrayRef v5 = __p;
    }
    else {
      CFArrayRef v5 = *(_BYTE **)__p;
    }
    uint64_t v6 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5));
    if (v16 < 0) {
      operator delete(*(void **)__p);
    }
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a3));
    id v8 = (void *)sub_1002D5B74(v6);
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSDictionary);
    if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0) {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:v7]);
    }
    else {
      uint64_t v10 = 0LL;
    }

    return v10;
  }

  else
  {
    int v11 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "System has not passed first unlock (or device prefs not read yet). Do not read device property %s",  __p,  0xCu);
    }

    return 0LL;
  }

void sub_1002D7730( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002D777C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  id v7 = sub_1002D7584((uint64_t)v6, a2, (uint64_t)"DeviceTags");
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (v8 && (uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSArray), (objc_opt_isKindOfClass(v8, v9) & 1) == 0))
  {
    uint64_t v14 = 1LL;
  }

  else
  {
    else {
      uint64_t v10 = (uint64_t *)*a3;
    }
    int v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v10));
    int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", v8));
    [v12 addObject:v11];
    int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 allObjects]);
    uint64_t v14 = sub_1002D78C4(a1, a2, "DeviceTags", v13);
  }

  objc_autoreleasePoolPop(v6);
  return v14;
}

void sub_1002D788C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002D78C4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a4;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10088FDF8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    int v26 = *(_DWORD *)(a2 + 128);
    __int16 v27 = *(_WORD *)(a2 + 132);
    sub_1003FE1B4((unsigned __int8 *)&v26, __p);
    if (v31 >= 0) {
      id v8 = __p;
    }
    else {
      id v8 = (void **)__p[0];
    }
    uint64_t v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a3));
    *(_OWORD *)std::string __p = 0uLL;
    sub_100242F28((uint64_t)__p, a1 + 8);
    int v11 = (void *)sub_1002D5B74(v9);
    if (v11)
    {
      uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSDictionary);
      if ((objc_opt_isKindOfClass(v11, v12) & 1) == 0)
      {
        int v13 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
          sub_100669B94(v13, v14, v15, v16, v17, v18, v19, v20);
        }
      }
    }

    else if (!v7)
    {
      uint64_t v25 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315138;
        int v29 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Trying to write property %s but no dictionary",  buf,  0xCu);
      }

      goto LABEL_18;
    }

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v11));
    [v23 setValue:v7 forKey:v10];
    sub_1002D5AFC(v9, v23);

LABEL_18:
    sub_100242FAC((uint64_t)__p);

    uint64_t v22 = 0LL;
    goto LABEL_19;
  }

  char v21 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "System has not passed first unlock (or device prefs not read yet). Do not write device property %s",  (uint8_t *)__p,  0xCu);
  }

  uint64_t v22 = 1LL;
LABEL_19:

  return v22;
}

void sub_1002D7B40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_100242FAC((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D7BBC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  id v7 = sub_1002D7584((uint64_t)v6, a2, (uint64_t)"DeviceTags");
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", v8));

  if (v9)
  {
    else {
      uint64_t v10 = (uint64_t *)*a3;
    }
    int v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v10));
    if ([v9 containsObject:v11])
    {
      [v9 removeObject:v11];
      uint64_t v12 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEBUG))
      {
        int v17 = *((char *)a3 + 23);
        uint64_t v18 = (uint64_t *)*a3;
        sub_1003CF00C(a2, __p);
        if (v17 >= 0) {
          uint64_t v19 = a3;
        }
        else {
          uint64_t v19 = v18;
        }
        if (v26 >= 0) {
          uint64_t v20 = __p;
        }
        else {
          uint64_t v20 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446466;
        unint64_t v28 = v19;
        __int16 v29 = 2082;
        uint64_t v30 = v20;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "Removing tag: %{public}s for %{public}s from device settings",  buf,  0x16u);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v13 = sub_1002D78C4(a1, a2, "DeviceTags", v9);
    }

    else
    {
      uint64_t v15 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
      {
        int v21 = *((char *)a3 + 23);
        uint64_t v22 = (uint64_t *)*a3;
        sub_1003CF00C(a2, __p);
        uint64_t v23 = (uint64_t)(v21 >= 0 ? a3 : v22);
        int v24 = v26 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446466;
        unint64_t v28 = (uint64_t *)v23;
        __int16 v29 = 2082;
        uint64_t v30 = v24;
        _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Tag: %{public}s wasn't stored for device %{public}s",  buf,  0x16u);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v13 = 1LL;
    }
  }

  else
  {
    uint64_t v14 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(a2, __p);
      sub_100669C04((char *)__p, (uint64_t)buf, v14);
    }

    uint64_t v13 = 1LL;
  }

  objc_autoreleasePoolPop(v6);
  return v13;
}

void sub_1002D7E70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002D7EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_autoreleasePoolPush();
  sub_1002D80EC((uint64_t)v3, a2, (uint64_t)"DeviceTags");
  objc_autoreleasePoolPop(v3);
  return 0LL;
}

uint64_t sub_1002D7EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_autoreleasePoolPush();
  id v4 = sub_1002D7584((uint64_t)v3, a2, (uint64_t)"DeviceTags");
  CFArrayRef v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSArray);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
  {
    id v7 = (os_log_s *)qword_1008F7578;
    uint64_t v8 = 0LL;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      int v11 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "statedump:    Tags: %@",  (uint8_t *)&v10,  0xCu);
      uint64_t v8 = 0LL;
    }
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  objc_autoreleasePoolPop(v3);
  return v8;
}

void sub_1002D7FF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1002D8008(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_autoreleasePoolPush();
  id v4 = sub_1002D7584((uint64_t)v3, a2, (uint64_t)"DeviceTags");
  CFArrayRef v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_autoreleasePoolPop(v3);
  return v5;
}

BOOL sub_1002D8050(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = objc_autoreleasePoolPush();
  id v8 = sub_1002D7584((uint64_t)v7, a2, a3);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSNumber);
  char isKindOfClass = objc_opt_isKindOfClass(v9, v10);
  if ((isKindOfClass & 1) != 0) {
    *a4 = (int)[v9 intValue];
  }

  objc_autoreleasePoolPop(v7);
  return (isKindOfClass & 1) == 0;
}

void sub_1002D80DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002D80EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10088FDF8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    int v21 = *(_DWORD *)(a2 + 128);
    __int16 v22 = *(_WORD *)(a2 + 132);
    sub_1003FE1B4((unsigned __int8 *)&v21, __p);
    if (v24 >= 0) {
      CFArrayRef v5 = __p;
    }
    else {
      CFArrayRef v5 = *(_BYTE **)__p;
    }
    uint64_t v6 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5));
    if (v24 < 0) {
      operator delete(*(void **)__p);
    }
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a3));
    id v8 = (void *)sub_1002D5B74(v6);
    if (v8)
    {
      uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSDictionary);
      if ((objc_opt_isKindOfClass(v8, v9) & 1) == 0)
      {
        uint64_t v10 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
          sub_100669B94(v10, v11, v12, v13, v14, v15, v16, v17);
        }
      }
    }

    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v8));
    [v18 removeObjectForKey:v7];
    sub_1002D5AFC(v6, v18);

    return 0LL;
  }

  else
  {
    uint64_t v20 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "System has not passed first unlock (or device prefs not read yet). Do not delete device property %s",  __p,  0xCu);
    }

    return 1LL;
  }

void sub_1002D82D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002D8330(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v8 = objc_autoreleasePoolPush();
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a4));
  sub_1002D78C4(a1, a2, a3, v9);

  objc_autoreleasePoolPop(v8);
  return 0LL;
}

void sub_1002D83AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002D83BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"EnableMAP", a3, (id)1);
}

uint64_t sub_1002D83D0(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3;
  sub_1002D5EB0(a1, a2, "EnableMAP", (uint64_t)&v4, 1LL);
  return 0LL;
}

uint64_t sub_1002D8404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"WiAPAssoc", a3, (id)4);
}

uint64_t sub_1002D8418(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "WiAPAssoc", (uint64_t)&v4, 4LL);
  return 0LL;
}

uint64_t sub_1002D844C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v48 = 0LL;
  uint64_t v49 = 0LL;
  uint64_t v47 = 0LL;
  uint64_t v6 = (os_log_t *)&qword_1008F7578;
  id v7 = (os_log_s *)qword_1008F7578;
  if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)
    || ((sub_1003CF00C(a2, &v52), v53 >= 0) ? (id v8 = &v52) : (id v8 = (__int128 *)v52),
        *(_DWORD *)std::string buf = 136446210,
        *(void *)&uint8_t buf[4] = v8,
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Starting SDP record processing for device %{public}s",  buf,  0xCu),  (SHIBYTE(v53) & 0x80000000) == 0))
  {
    if (a2) {
      goto LABEL_7;
    }
    return 1LL;
  }

  operator delete((void *)v52);
  if (!a2) {
    return 1LL;
  }
LABEL_7:
  if (*(void *)(a3 + 16))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100669D1C();
    }
    return 1LL;
  }

  BOOL v9 = sub_1002D6960(a1, a2, (uint64_t)"SdpCacheVersion", &v47);
  uint64_t v10 = (os_log_s *)qword_1008F7578;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (v11)
    {
      LOWORD(v52) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Read SDP cache version failed",  (uint8_t *)&v52,  2u);
    }
  }

  else
  {
    int v12 = v47;
    if (v11)
    {
      LODWORD(v52) = 67109120;
      DWORD1(v52) = v47;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Read SDP cache version success %d",  (uint8_t *)&v52,  8u);
    }

    if (v12 != 1)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_100669CF0();
      }
      char v24 = objc_autoreleasePoolPush();
      sub_1002D80EC((uint64_t)v24, a2, (uint64_t)"SdpCacheSize");
      objc_autoreleasePoolPop(v24);
      uint64_t v25 = objc_autoreleasePoolPush();
      sub_1002D80EC((uint64_t)v25, a2, (uint64_t)"SdpCache");
      objc_autoreleasePoolPop(v25);
      char v26 = objc_autoreleasePoolPush();
      sub_1002D80EC((uint64_t)v26, a2, (uint64_t)"SdpCacheVersion");
      objc_autoreleasePoolPop(v26);
      return 1LL;
    }

    sub_1002D6A1C(a1, a2, "SdpCacheVersion", 0LL);
  }

  uint64_t v13 = (unsigned __int16 *)malloc(0xFA0uLL);
  if (!v13)
  {
    uint64_t v19 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v52) = 136446210;
      *(void *)((char *)&v52 + 4) = "pSerializedData";
      _os_log_fault_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_FAULT,  "Assertion failed: %{public}s",  (uint8_t *)&v52,  0xCu);
      uint64_t v19 = (os_log_s *)qword_1008F7578;
    }

    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      sub_100669C6C();
    }
    return 1LL;
  }

  int v44 = v13;
  BOOL v14 = sub_1002D6960(a1, a2, (uint64_t)"SdpCacheSize", (_DWORD *)&v47 + 1);
  uint64_t v15 = (os_log_s *)qword_1008F7578;
  BOOL v16 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    if (v16)
    {
      LOWORD(v52) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "SDP record cache size is empty",  (uint8_t *)&v52,  2u);
    }

    int v17 = 0;
    uint64_t v18 = 1LL;
  }

  else
  {
    if (v16)
    {
      LODWORD(v52) = 67109120;
      DWORD1(v52) = HIDWORD(v47);
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "SDP record cache size is %d",  (uint8_t *)&v52,  8u);
    }

    if (v9)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_100669CC4();
      }
      sub_1002D6A1C(a1, a2, "SdpCacheVersion", 0LL);
    }

    __int16 v20 = WORD2(v47);
    if ((HIDWORD(v47) - 1) > 0xF9F
      || sub_1002D5DCC(a1, a2, (uint64_t)"SdpCache", (uint64_t)v44, (id)HIDWORD(v47)))
    {
      goto LABEL_74;
    }

    BOOL v48 = v44;
    LOWORD(v49) = v20;
    HIWORD(v49) = 1;
    WORD1(v49) = v20;
    if ((v20 & 0xFFFE) == 0) {
      sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm",  1334,  "ByteStream_NumReadBytesAvail(bs) >= 2");
    }
    int v28 = *v44;
    WORD2(v49) = 2;
    int v43 = v28;
    if (!v28) {
      goto LABEL_62;
    }
    int v29 = 0;
    int v30 = 1;
    __int128 v41 = "ByteStream_NumReadBytesAvail(bs) >= 2";
    uint64_t v42 = a2;
    do
    {
      int64_t v46 = 0LL;
      int64_t v46 = calloc(1uLL, 0x10uLL);
      BOOL v31 = sub_10025EC98((uint64_t *)&v48, (uint64_t)v46);
      if (HIBYTE(v49))
      {
        sub_1001ED1C4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm");
LABEL_70:
        sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm",  1341,  "ByteStream_NumReadBytesAvail(bs) >= 2");
      }

      if (WORD1(v49) - WORD2(v49) <= 1) {
        goto LABEL_70;
      }
      if (BYTE6(v49) != 1) {
        sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm",  1341,  "(bs).__RWFlag == BYTESTREAM_READ");
      }
      uint64_t v32 = a1;
      uint64_t v33 = v6;
      unsigned int v34 = *(unsigned __int16 *)((char *)v48 + WORD2(v49));
      v30 &= v31;
      WORD2(v49) += 2;
      *((void *)&v52 + 1) = 0LL;
      uint64_t v53 = 0LL;
      *(void *)&__int128 v52 = (char *)&v52 + 8;
      if (v34)
      {
        int v35 = 0;
        while (1)
        {
          unsigned int v45 = 0;
          memset(buf, 0, sizeof(buf));
          if (HIBYTE(v49)) {
            break;
          }
          if (WORD1(v49) - WORD2(v49) <= 1) {
            goto LABEL_67;
          }
          if (BYTE6(v49) != 1)
          {
            __int128 v40 = "(bs).__RWFlag == BYTESTREAM_READ";
            goto LABEL_66;
          }

          unsigned int v45 = *(unsigned __int16 *)((char *)v48 + WORD2(v49));
          WORD2(v49) += 2;
          BOOL v36 = sub_10025EC98((uint64_t *)&v48, (uint64_t)buf);
          uint64_t v50 = &v45;
          __int16 v37 = sub_1002DBC4C((uint64_t **)&v52, &v45, (uint64_t)&unk_1006C2518, &v50);
          v30 &= v36;
          *(_OWORD *)(v37 + 5) = *(_OWORD *)buf;
        }

        sub_1001ED1C4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm");
        __int128 v40 = "ByteStream_NumReadBytesAvail(bs) >= 2";
LABEL_66:
        __int128 v41 = v40;
LABEL_67:
        sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm",  1349,  v41);
      }

void sub_1002D8BB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, void *a24)
{
}

uint64_t sub_1002D8BE0(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a2) {
    return 1LL;
  }
  uint64_t v6 = (void *)*a3;
  id v7 = (unsigned __int16 *)malloc(0xFA0uLL);
  id v8 = (os_log_s *)qword_1008F7578;
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT))
    {
      LODWORD(__p) = 136446210;
      *(void *)((char *)&__p + 4) = "pSerializedData";
      _os_log_fault_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "Assertion failed: %{public}s",  (uint8_t *)&__p,  0xCu);
      id v8 = (os_log_s *)qword_1008F7578;
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100669C6C();
    }
    return 1LL;
  }

  BOOL v9 = v7;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, &__p);
    uint64_t v10 = v39 >= 0 ? &__p : (__int128 *)__p;
    *(_DWORD *)std::string buf = 136446210;
    __int128 v41 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Writing SDP record for device %{public}s to disk",  buf,  0xCu);
    if (SHIBYTE(v39) < 0) {
      operator delete((void *)__p);
    }
  }

  unsigned int v34 = v9;
  __int16 v35 = 4000;
  __int16 v37 = 2;
  int v36 = 135072;
  BOOL v11 = a3 + 1;
  *BOOL v9 = 0;
  if (v6 != v11)
  {
    unsigned __int16 v12 = 0;
    while (sub_10025F3E0((uint64_t *)&v34, (unsigned __int8 *)v6[4]))
    {
      if (HIBYTE(v37))
      {
        sub_1001ED1C4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm");
LABEL_59:
        sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm",  1423,  "ByteStream_NumReadBytesAvail(bs) >= 2");
      }

      uint64_t v13 = HIWORD(v36);
      if (v37 != 2) {
        sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm",  1423,  "(bs).__RWFlag == BYTESTREAM_WRITE");
      }
      *(unsigned __int16 *)((char *)v34 + HIWORD(v36)) = 0;
      HIWORD(v36) += 2;
      __int128 __p = 0uLL;
      uint64_t v39 = 0LL;
      sub_1002DBF7C((uint64_t)&__p, (uint64_t)(v6 + 5));
      ++v12;
      BOOL v14 = (_OWORD *)__p;
      if ((__int128 *)__p == (__int128 *)((char *)&__p + 8))
      {
        LOBYTE(v15) = 0;
        char v19 = 0;
      }

      else
      {
        __int16 v15 = 0;
        while (1)
        {
          if (HIBYTE(v37))
          {
            sub_1001ED1C4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm");
LABEL_54:
            uint64_t v33 = "ByteStream_NumReadBytesAvail(bs) >= 2";
LABEL_56:
            sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm",  1430,  v33);
          }

          if (v37 != 2)
          {
            uint64_t v33 = "(bs).__RWFlag == BYTESTREAM_WRITE";
            goto LABEL_56;
          }

          *(unsigned __int16 *)((char *)v34 + HIWORD(v36)) = *((_DWORD *)v14 + 8);
          HIWORD(v36) += 2;
          ++v15;
          BOOL v16 = (void *)*((void *)v14 + 1);
          if (v16)
          {
            do
            {
              int v17 = v16;
              BOOL v16 = (void *)*v16;
            }

            while (v16);
          }

          else
          {
            do
            {
              int v17 = (_OWORD *)*((void *)v14 + 2);
              BOOL v18 = *(void *)v17 == (void)v14;
              BOOL v14 = v17;
            }

            while (!v18);
          }

          BOOL v14 = v17;
        }

        unsigned __int16 v12 = 0;
LABEL_30:
        char v19 = HIBYTE(v15);
      }

      *((_BYTE *)v34 + v13) = v15;
      *((_BYTE *)v34 + v13 + 1) = v19;
      sub_10023BF24((uint64_t)&__p, *((void **)&__p + 1));
      __int16 v20 = (void *)v6[1];
      if (v20)
      {
        do
        {
          int v21 = v20;
          __int16 v20 = (void *)*v20;
        }

        while (v20);
      }

      else
      {
        do
        {
          int v21 = (void *)v6[2];
          BOOL v18 = *v21 == (void)v6;
          uint64_t v6 = v21;
        }

        while (!v18);
      }

      uint64_t v6 = v21;
      if (v21 == v11)
      {
        if (!v12) {
          break;
        }
        *unsigned int v34 = v12;
        uint64_t v22 = HIWORD(v36);
        uint64_t v23 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(__p) = 67109376;
          DWORD1(__p) = v22;
          WORD4(__p) = 1024;
          *(_DWORD *)((char *)&__p + 10) = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "SDP record cache size %d with %d services",  (uint8_t *)&__p,  0xEu);
        }

        if (v22 <= 0xFA0)
        {
          sub_1002D6A1C(a1, a2, "SdpCacheSize", v22);
          sub_1002D5EB0(a1, a2, "SdpCache", (uint64_t)v34, v22);
          sub_1002D6A1C(a1, a2, "SdpCacheVersion", 1LL);
          goto LABEL_45;
        }

        uint64_t v32 = qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(__p) = 67109120;
          DWORD1(__p) = v22;
          int v28 = "SDP record cache size %d larger than storage";
          int v29 = (os_log_s *)v32;
          uint32_t v30 = 8;
          goto LABEL_44;
        }

        goto LABEL_45;
      }
    }
  }

  char v24 = objc_autoreleasePoolPush();
  sub_1002D80EC((uint64_t)v24, a2, (uint64_t)"SdpCacheSize");
  objc_autoreleasePoolPop(v24);
  uint64_t v25 = objc_autoreleasePoolPush();
  sub_1002D80EC((uint64_t)v25, a2, (uint64_t)"SdpCache");
  objc_autoreleasePoolPop(v25);
  char v26 = objc_autoreleasePoolPush();
  sub_1002D80EC((uint64_t)v26, a2, (uint64_t)"SdpCacheVersion");
  objc_autoreleasePoolPop(v26);
  uint64_t v27 = qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    int v28 = "Exiting Write SDP due to numOfServices being zero, wiping cache";
    int v29 = (os_log_s *)v27;
    uint32_t v30 = 2;
LABEL_44:
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)&__p, v30);
  }

void sub_1002D9198( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
}

uint64_t sub_1002D91BC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0LL;
  sub_1002D6960(a1, a2, (uint64_t)"SdpCacheVersion", (_DWORD *)&v6 + 1);
  sub_1002D6960(a1, a2, (uint64_t)"SdpCacheSize", &v6);
  int v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    int v8 = HIDWORD(v6);
    __int16 v9 = 1024;
    int v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SDP cache [version 0x%x, size 0x%x]", buf, 0xEu);
  }

  return 0LL;
}

uint64_t sub_1002D92A0(uint64_t a1, _WORD *a2)
{
  __int16 v15 = &off_10087FAA8;
  BOOL v16 = 0LL;
  int v12 = 0;
  int v13 = 0;
  if (sub_1003D5538(a2, (uint64_t)&v15, (_WORD *)&v13 + 1, &v13, (_WORD *)&v12 + 1, &v12))
  {
    int v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)a2, __p);
      CFArrayRef v5 = v18 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)std::string buf = 136446210;
      __int16 v20 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Writing HID Data to disk for %{public}s",  buf,  0xCu);
      if (v18 < 0) {
        operator delete(*(void **)__p);
      }
    }

    unint64_t v6 = sub_10056AAD8((uint64_t)&v15);
    unint64_t v14 = v6;
    if (v6 <= 0x1000)
    {
      sub_1002D5EB0(a1, (uint64_t)a2, "HIDDescriptorSize", (uint64_t)&v14, 8LL);
      uint64_t v7 = sub_10056AAF0((uint64_t)&v15);
      sub_1002D5EB0(a1, (uint64_t)a2, "HIDDescriptor", v7, v14);
      sub_1002D5EB0(a1, (uint64_t)a2, "HIDVendorID", (uint64_t)&v13 + 2, 2LL);
      sub_1002D5EB0(a1, (uint64_t)a2, "HIDVendorIDSource", (uint64_t)&v13, 2LL);
      sub_1002D5EB0(a1, (uint64_t)a2, "HIDProductID", (uint64_t)&v12 + 2, 2LL);
      sub_1002D5EB0(a1, (uint64_t)a2, "HIDVersion", (uint64_t)&v12, 2LL);
      uint64_t v8 = 0LL;
      goto LABEL_15;
    }

    __int16 v9 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 __p = 134217984;
      *(void *)&__p[4] = v6;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "Writing HID descriptor size %zu which is too large!",  __p,  0xCu);
      __int16 v9 = (os_log_s *)qword_1008F7578;
    }

    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100669D48(v6, v9, v10);
    }
  }

  uint64_t v8 = 1LL;
LABEL_15:
  __int16 v15 = &off_10087FAA8;
  if (v16) {
    sub_1002CD254(v16);
  }
  return v8;
}

void sub_1002D9508( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t sub_1002D9530(uint64_t a1, _WORD *a2)
{
  size_t v15 = 0LL;
  CFArrayRef v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)a2, __p);
    unint64_t v6 = v18 >= 0 ? __p : *(_BYTE **)__p;
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Reading HID Data from disk for %{public}s",  (uint8_t *)&buf,  0xCu);
    if (v18 < 0) {
      operator delete(*(void **)__p);
    }
  }

  uint64_t v7 = (void *)v15;
  if (v15 > 0x1000)
  {
    uint64_t v10 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 __p = 134217984;
      *(void *)&__p[4] = v7;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "Reading HID descriptor size %zu which is too large!",  __p,  0xCu);
      uint64_t v7 = (void *)v15;
      if (v15 <= 0x1000) {
        goto LABEL_11;
      }
      uint64_t v10 = (os_log_s *)qword_1008F7578;
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100669E1C((uint64_t)v7, v10, v11);
    }
    return 1LL;
  }

void sub_1002D97EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12)
{
  if (a12) {
    sub_1002CD254(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1002D9818(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v5 = 0;
  BOOL result = sub_1002D6960(a1, a2, (uint64_t)"LastSeenTime", &v5);
  if (result) {
    return 1LL;
  }
  *a3 = v5;
  return result;
}

uint64_t sub_1002D9864(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return 0LL;
}

uint64_t sub_1002D9888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"MicMode", a3, (id)4);
}

uint64_t sub_1002D989C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "MicMode", (uint64_t)&v4, 4LL);
  return 0LL;
}

uint64_t sub_1002D98D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"DoubleTapAction", a3, (id)4);
}

uint64_t sub_1002D98E4(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "DoubleTapAction", (uint64_t)&v4, 4LL);
  return 0LL;
}

BOOL sub_1002D9918(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_1002D6D48(a1, a2, (uint64_t)"InEarDetection", a3);
}

uint64_t sub_1002D9928(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6 = objc_autoreleasePoolPush();
  if (a3) {
    uint64_t v7 = &__kCFBooleanTrue;
  }
  else {
    uint64_t v7 = &__kCFBooleanFalse;
  }
  sub_1002D78C4(a1, a2, "InEarDetection", v7);
  objc_autoreleasePoolPop(v6);
  return 0LL;
}

uint64_t sub_1002D9994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"SmartRouteMode", a3, (id)4);
}

uint64_t sub_1002D99A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"SpatialAudio", a3, (id)4);
}

uint64_t sub_1002D99BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"SpatialAudioAllowed", a3, (id)4);
}

uint64_t sub_1002D99D0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "SpatialAudioAllowed", (uint64_t)&v4, 4LL);
  return 0LL;
}

uint64_t sub_1002D9A04(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "SmartRouteMode", (uint64_t)&v4, 4LL);
  return 0LL;
}

uint64_t sub_1002D9A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"ListeningMode", a3, (id)4);
}

uint64_t sub_1002D9A4C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "ListeningMode", (uint64_t)&v4, 4LL);
  return 0LL;
}

uint64_t sub_1002D9A80(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  *(void *)int v36 = 0LL;
  uint64_t v37 = 0LL;
  __int16 v38 = 0;
  sub_100024344(a3);
  sub_10002418C(__p, "");
  unint64_t v6 = a3[2];
  unint64_t v7 = a3[1];
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a3) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a3) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555LL) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    __int16 v35 = a3 + 2;
    if (v12) {
      __int16 v13 = (char *)sub_10023F114((uint64_t)(a3 + 2), v12);
    }
    else {
      __int16 v13 = 0LL;
    }
    __int16 v14 = &v13[24 * v9];
    __int128 v15 = *(_OWORD *)__p;
    *((void *)v14 + 2) = v32;
    *(_OWORD *)__int16 v14 = v15;
    __p[1] = 0LL;
    uint64_t v32 = 0LL;
    __p[0] = 0LL;
    uint64_t v17 = *a3;
    unint64_t v16 = a3[1];
    if (v16 == *a3)
    {
      int64x2_t v20 = vdupq_n_s64(v16);
      char v18 = &v13[24 * v9];
    }

    else
    {
      char v18 = &v13[24 * v9];
      do
      {
        __int128 v19 = *(_OWORD *)(v16 - 24);
        *((void *)v18 - 1) = *(void *)(v16 - 8);
        *(_OWORD *)(v18 - 24) = v19;
        v18 -= 24;
        *(void *)(v16 - 16) = 0LL;
        *(void *)(v16 - std::istream::~istream(v2, v3 + 8) = 0LL;
        *(void *)(v16 - 24) = 0LL;
        v16 -= 24LL;
      }

      while (v16 != v17);
      int64x2_t v20 = *(int64x2_t *)a3;
    }

    uint64_t v21 = (uint64_t)(v14 + 24);
    *a3 = (uint64_t)v18;
    a3[1] = (uint64_t)(v14 + 24);
    *(int64x2_t *)&v33.__r_.__value_.__r.__words[1] = v20;
    uint64_t v22 = a3[2];
    a3[2] = (uint64_t)&v13[24 * v12];
    uint64_t v34 = v22;
    v33.__r_.__value_.__r.__words[0] = v20.i64[0];
    sub_10023F158((uint64_t)&v33);
    int v23 = SHIBYTE(v32);
    a3[1] = v21;
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    __int128 v8 = *(_OWORD *)__p;
    *(void *)(v7 + 16) = v32;
    *(_OWORD *)unint64_t v7 = v8;
    a3[1] = v7 + 24;
  }

  for (int i = 1; ; ++i)
  {
    memset(&v33, 0, sizeof(v33));
    sprintf(v36, "AACPVersionInfo%d", i);
    unint64_t v25 = a3[1];
    if (v25 >= a3[2])
    {
      uint64_t v27 = sub_10023EFAC((char **)a3, (__int128 *)&v33);
    }

    else
    {
      if ((char)v33.__r_.__value_.__s.__size_ < 0)
      {
        sub_100024238((_BYTE *)a3[1], v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
      }

      else
      {
        __int128 v26 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
        *(void *)(v25 + 16) = v33.__r_.__value_.__l.__cap_;
        *(_OWORD *)unint64_t v25 = v26;
      }

      uint64_t v27 = (char *)(v25 + 24);
      a3[1] = v25 + 24;
    }

    a3[1] = (uint64_t)v27;
  }

  uint64_t v29 = *a3;
  uint64_t v28 = a3[1];
  if (*(char *)(*a3 + 71) < 0)
  {
    if (!*(void *)(*a3 + 56)) {
      return 1LL;
    }
  }

  else if (!*(_BYTE *)(*a3 + 71))
  {
    return 1LL;
  }

  return 0LL;
}

void sub_1002D9D5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D9DA0(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)unint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  __int16 v14 = 0;
  sub_1003D930C(a2, 2u, v10);
  if (v11 < 0)
  {
    unint64_t v9 = v10[1];
    operator delete(v10[0]);
    if (v9) {
      goto LABEL_3;
    }
  }

  else if (v11)
  {
LABEL_3:
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) >= 2)
    {
      unint64_t v6 = 1LL;
      uint64_t v7 = 24LL;
      do
      {
        sprintf(v12, "AACPVersionInfo%d", v6);
        sub_1002D5D20(a1, a2, v12, (uint64_t *)(*a3 + v7));
        ++v6;
        v7 += 24LL;
      }

      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) > v6);
    }

    return 0LL;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_100669E84();
  }
  return 1LL;
}

uint64_t sub_1002D9EEC(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_1002D5BF0(a1, a2, "ANCAssetVersion", a3);
}

uint64_t sub_1002D9EFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0LL;
}

uint64_t sub_1002D9F20(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (sub_1002D5DCC(a1, (uint64_t)a2, (uint64_t)"CaseInfoMessageVersion", (uint64_t)a3, (id)1))
  {
    unint64_t v6 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100669F34((uint64_t)a2, v6);
    }
    return 1LL;
  }

  if (*a3 >= 2u) {
    uint64_t v7 = 8LL;
  }
  else {
    uint64_t v7 = 2LL;
  }
  if (sub_1002D5DCC(a1, (uint64_t)a2, (uint64_t)"CaseInfoVersion", (uint64_t)(a3 + 16), (id)v7))
  {
    __int128 v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100669EB0((uint64_t)a2, v8);
    }
    return 1LL;
  }

  sub_1002D5DCC(a1, (uint64_t)a2, (uint64_t)"CaseInfoVID", (uint64_t)(a3 + 2), (id)2);
  sub_1002D5DCC(a1, (uint64_t)a2, (uint64_t)"CaseInfoPID", (uint64_t)(a3 + 4), (id)4);
  sub_1002D5DCC(a1, (uint64_t)a2, (uint64_t)"CaseInfoVIDSource", (uint64_t)(a3 + 8), (id)2);
  sub_1002D5DCC(a1, (uint64_t)a2, (uint64_t)"CaseInfoColor", (uint64_t)(a3 + 10), (id)1);
  sub_1002D5BF0(a1, a2, "CaseInfoName", (std::string *)(a3 + 32));
  return 0LL;
}

uint64_t sub_1002DA080(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v6 = (uint64_t *)(a3 + 32);
  if (*a3 >= 2u) {
    uint64_t v7 = 8LL;
  }
  else {
    uint64_t v7 = 2LL;
  }
  sub_1002D5EB0(a1, a2, "CaseInfoVersion", (uint64_t)(a3 + 16), v7);
  sub_1002D5EB0(a1, a2, "CaseInfoMessageVersion", (uint64_t)a3, 1LL);
  sub_1002D5EB0(a1, a2, "CaseInfoVID", (uint64_t)(a3 + 2), 2LL);
  sub_1002D5EB0(a1, a2, "CaseInfoPID", (uint64_t)(a3 + 4), 4LL);
  sub_1002D5EB0(a1, a2, "CaseInfoVIDSource", (uint64_t)(a3 + 8), 2LL);
  sub_1002D5EB0(a1, a2, "CaseInfoColor", (uint64_t)(a3 + 10), 1LL);
  sub_1002D5D20(a1, a2, "CaseInfoName", v6);
  return 0LL;
}

uint64_t sub_1002DA17C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"ListeningModeConfigs", a3, (id)4);
}

uint64_t sub_1002DA190(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "ListeningModeConfigs", (uint64_t)&v4, 4LL);
  return 0LL;
}

uint64_t sub_1002DA1C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"SingleClickMode", a3, (id)4);
}

uint64_t sub_1002DA1D8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "SingleClickMode", (uint64_t)&v4, 4LL);
  return 0LL;
}

uint64_t sub_1002DA20C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"DoubleClickMode", a3, (id)4);
}

uint64_t sub_1002DA220(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "DoubleClickMode", (uint64_t)&v4, 4LL);
  return 0LL;
}

uint64_t sub_1002DA254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"ClickHoldMode", a3, (id)4);
}

uint64_t sub_1002DA268(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "ClickHoldMode", (uint64_t)&v4, 4LL);
  return 0LL;
}

uint64_t sub_1002DA29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"SingleClickInterval", a3, (id)4);
}

uint64_t sub_1002DA2B0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "SingleClickInterval", (uint64_t)&v4, 4LL);
  return 0LL;
}

uint64_t sub_1002DA2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"ClickHoldInterval", a3, (id)4);
}

uint64_t sub_1002DA2F8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "ClickHoldInterval", (uint64_t)&v4, 4LL);
  return 0LL;
}

uint64_t sub_1002DA32C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"OneBudANCMode", a3, (id)1);
}

uint64_t sub_1002DA340(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3;
  sub_1002D5EB0(a1, a2, "OneBudANCMode", (uint64_t)&v4, 1LL);
  return 0LL;
}

uint64_t sub_1002DA374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"VolumeSwipeMode", a3, (id)1);
}

uint64_t sub_1002DA388(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3;
  sub_1002D5EB0(a1, a2, "VolumeSwipeMode", (uint64_t)&v4, 1LL);
  return 0LL;
}

uint64_t sub_1002DA3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"VolumeSwipeInterval", a3, (id)4);
}

uint64_t sub_1002DA3D0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "VolumeSwipeInterval", (uint64_t)&v4, 4LL);
  return 0LL;
}

uint64_t sub_1002DA404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"AdaptiveVolumeMode", a3, (id)1);
}

uint64_t sub_1002DA418(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3;
  sub_1002D5EB0(a1, a2, "AdaptiveVolumeMode", (uint64_t)&v4, 1LL);
  return 0LL;
}

uint64_t sub_1002DA44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"CallManagementConfig", a3, (id)4);
}

uint64_t sub_1002DA460(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "CallManagementConfig", (uint64_t)&v4, 4LL);
  return 0LL;
}

uint64_t sub_1002DA494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"AdaptiveControlsProxStatusKey", a3, (id)8);
}

uint64_t sub_1002DA4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  sub_1002D5EB0(a1, a2, "AdaptiveControlsProxStatusKey", (uint64_t)&v4, 8LL);
  return 0LL;
}

uint64_t sub_1002DA4DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v11 = 0;
  uint64_t v7 = (void *)v11;
  uint64_t v8 = *a3;
  unint64_t v9 = a3[1] - *a3;
  if (v11 != v9)
  {
    char v10 = 0;
    if (v11 <= v9)
    {
      if (v11 < v9) {
        a3[1] = v8 + v11;
      }
    }

    else
    {
      sub_1002DC28C(a3, v11 - v9, &v10);
      uint64_t v8 = *a3;
    }
  }

  return sub_1002D5DCC(a1, a2, (uint64_t)"AACPCapabilitiesBits", v8, v7);
}

uint64_t sub_1002DA598(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (v7 == *a3)
  {
    uint64_t v8 = (os_log_s *)qword_1008F7578;
    BOOL v9 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
    LODWORD(v6) = v7;
    if (v9)
    {
      *(_WORD *)unsigned int v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "writeAACPCapabilityBits delete key", v11, 2u);
      uint64_t v6 = *a3;
      uint64_t v7 = a3[1];
    }
  }

  sub_1002D6A1C(a1, a2, "AACPCapabilitiesLength", (v7 - v6));
  sub_1002D5EB0(a1, a2, "AACPCapabilitiesBits", *a3, a3[1] - *a3);
  return 0LL;
}

uint64_t sub_1002DA664(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v18 = 0;
  BOOL v6 = sub_1002D6960(a1, a2, (uint64_t)"AACPCapabilitiesIntegersLength", &v18);
  if (v6) {
    return 1LL;
  }
  uint64_t v9 = v18;
  if (v18 - 256 < 0xFFFFFF01) {
    return 12LL;
  }
  if (v18 != (uint64_t)(a3[1] - *a3) >> 2)
  {
    *(_DWORD *)__int128 buf = 0;
    sub_1002DA83C((uint64_t)a3, v18, buf);
  }

  __chkstk_darwin(v6, v7);
  char v10 = (char *)v16 - ((4 * v9 + 15) & 0x7FFFFFFF0LL);
  bzero(v10, 4 * v9);
  v16[1] = v16;
  uint64_t v12 = 0LL;
  uint64_t v13 = (os_log_s *)qword_1008F7578;
  __int16 v14 = v10 + 3;
  *(void *)&__int128 v11 = 67109376LL;
  __int128 v17 = v11;
  do
  {
    int v15 = *(_DWORD *)(v14 - 3);
    *(_DWORD *)(*a3 + 4 * v12) = v15;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = v17;
      int v20 = v12;
      __int16 v21 = 1024;
      int v22 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "readAACPCapabilityIntegers: index %d, value %d",  buf,  0xEu);
      uint64_t v13 = (os_log_s *)qword_1008F7578;
    }

    v14 += 4;
    ++v12;
  }

  while (v9 != v12);
  return 0LL;
}

void sub_1002DA83C(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = *(void *)a1 + 4 * a2;
    }
  }

  else
  {
    sub_1002DC3A0((void **)a1, a2 - v3, a3);
  }

uint64_t sub_1002DA86C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3 = a3[1] - *a3;
  if (v3 > 0x3FC) {
    return 3LL;
  }
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = sub_1002D6A1C(a1, a2, "AACPCapabilitiesIntegersLength", v3 >> 2);
  uint64_t v9 = a3[1];
  uint64_t v10 = v9 - *a3;
  if (v9 == *a3)
  {
    int v23 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, (os_log_type_t)v10))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "writeAACPCapabilityIntegers delete key",  buf,  2u);
    }

    sub_1002D5EB0(v7, v6, "AACPCapabulitiesIntegers", 0LL, 0LL);
  }

  else
  {
    __chkstk_darwin(v8, v10);
    uint64_t v12 = (char *)v24 - v11;
    bzero((char *)v24 - v11, v13);
    uint64_t v15 = *a3;
    uint64_t v16 = a3[1];
    if (v16 == *a3)
    {
      uint64_t v22 = 0LL;
    }

    else
    {
      v24[1] = v24;
      uint64_t v25 = v7;
      uint64_t v26 = v6;
      unint64_t v17 = 0LL;
      unsigned int v18 = (os_log_s *)qword_1008F7578;
      *(void *)&__int128 v14 = 67109376LL;
      __int128 v27 = v14;
      do
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          int v19 = *(_DWORD *)(v15 + 4 * v17);
          *(_DWORD *)__int128 buf = v27;
          int v29 = v17;
          __int16 v30 = 1024;
          int v31 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "writeAACPCapabilityIntegers: index %d, value %d",  buf,  0xEu);
          unsigned int v18 = (os_log_s *)qword_1008F7578;
          uint64_t v15 = *a3;
          uint64_t v16 = a3[1];
        }

        uint64_t v20 = v15 + 4 * v17;
        __int16 v21 = &v12[(4 * v17)];
        *(_WORD *)__int16 v21 = *(_DWORD *)v20;
        void v21[2] = *(_WORD *)(v20 + 2);
        v21[3] = *(_BYTE *)(v20 + 3);
        ++v17;
        uint64_t v22 = v16 - v15;
      }

      while (v17 < (v16 - v15) >> 2);
      uint64_t v7 = v25;
      uint64_t v6 = v26;
    }

    sub_1002D5EB0(v7, v6, "AACPCapabulitiesIntegers", (uint64_t)v12, v22);
  }

  return 0LL;
}

BOOL sub_1002DAAA8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_1002D6D48(a1, a2, (uint64_t)"SpatialAudioPrefInitialized", a3);
}

uint64_t sub_1002DAAB8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  if (a3) {
    uint64_t v7 = &__kCFBooleanTrue;
  }
  else {
    uint64_t v7 = &__kCFBooleanFalse;
  }
  sub_1002D78C4(a1, a2, "SpatialAudioPrefInitialized", v7);
  objc_autoreleasePoolPop(v6);
  return 0LL;
}

uint64_t sub_1002DAB24(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  if (a3) {
    uint64_t v7 = &__kCFBooleanTrue;
  }
  else {
    uint64_t v7 = &__kCFBooleanFalse;
  }
  sub_1002D78C4(a1, a2, "GuestMode", v7);
  objc_autoreleasePoolPop(v6);
  return 0LL;
}

BOOL sub_1002DAB90(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_1002D6D48(a1, a2, (uint64_t)"GuestMode", a3);
}

uint64_t sub_1002DABA0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  if (a3) {
    uint64_t v7 = &__kCFBooleanTrue;
  }
  else {
    uint64_t v7 = &__kCFBooleanFalse;
  }
  sub_1002D78C4(a1, a2, "GuestModeNotInContacts", v7);
  objc_autoreleasePoolPop(v6);
  return 0LL;
}

BOOL sub_1002DAC0C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_1002D6D48(a1, a2, (uint64_t)"GuestModeNotInContacts", a3);
}

uint64_t sub_1002DAC1C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return 0LL;
}

BOOL sub_1002DAC40(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v5 = 0;
  BOOL result = sub_1002D6960(a1, a2, (uint64_t)"GuestLastSeenTime", &v5);
  if (result) {
    return 1LL;
  }
  *a3 = v5;
  return result;
}

uint64_t sub_1002DAC8C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  if (a3) {
    uint64_t v7 = &__kCFBooleanTrue;
  }
  else {
    uint64_t v7 = &__kCFBooleanFalse;
  }
  sub_1002D78C4(a1, a2, "OwnerAutoAggregation", v7);
  objc_autoreleasePoolPop(v6);
  return 0LL;
}

BOOL sub_1002DACF8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_1002D6D48(a1, a2, (uint64_t)"OwnerAutoAggregation", a3);
}

uint64_t sub_1002DAD08(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  if (a3) {
    uint64_t v7 = &__kCFBooleanTrue;
  }
  else {
    uint64_t v7 = &__kCFBooleanFalse;
  }
  sub_1002D78C4(a1, a2, "OwnerNoMagicPairing", v7);
  objc_autoreleasePoolPop(v6);
  return 0LL;
}

BOOL sub_1002DAD74(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_1002D6D48(a1, a2, (uint64_t)"OwnerNoMagicPairing", a3);
}

uint64_t sub_1002DAD84(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  if (a3) {
    uint64_t v7 = &__kCFBooleanTrue;
  }
  else {
    uint64_t v7 = &__kCFBooleanFalse;
  }
  sub_1002D78C4(a1, a2, "GuestPairingMode", v7);
  objc_autoreleasePoolPop(v6);
  return 0LL;
}

BOOL sub_1002DADF0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_1002D6D48(a1, a2, (uint64_t)"GuestPairingMode", a3);
}

uint64_t sub_1002DAE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"ColorInfo", a3, (id)4);
}

uint64_t sub_1002DAE14(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "ColorInfo", (uint64_t)&v4, 4LL);
  return 0LL;
}

uint64_t sub_1002DAE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"MIDFeatureBits", a3, (id)4);
}

uint64_t sub_1002DAE5C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "MIDFeatureBits", (uint64_t)&v4, 4LL);
  return 0LL;
}

uint64_t sub_1002DAE90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"DosimetrySensitivity", a3, (id)4);
}

uint64_t sub_1002DAEA4(uint64_t a1, uint64_t a2, float a3)
{
  float v4 = a3;
  sub_1002D5EB0(a1, a2, "DosimetrySensitivity", (uint64_t)&v4, 4LL);
  return 0LL;
}

uint64_t sub_1002DAED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v18 = 0;
  memset(v17, 0, sizeof(v17));
  uint64_t v5 = 0LL;
  uint64_t v6 = (void *)(a3 + 16);
  uint64_t v7 = *(_DWORD **)(a3 + 8);
  do
  {
    if ((unint64_t)v7 >= *v6)
    {
      uint64_t v9 = *(_DWORD **)a3;
      uint64_t v10 = ((uint64_t)v7 - *(void *)a3) >> 2;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = *v6 - (void)v9;
      if (v12 >> 1 > v11) {
        unint64_t v11 = v12 >> 1;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        __int128 v14 = (char *)sub_10024E33C(a3 + 16, v13);
        uint64_t v9 = *(_DWORD **)a3;
        uint64_t v7 = *(_DWORD **)(a3 + 8);
      }

      else
      {
        __int128 v14 = 0LL;
      }

      uint64_t v15 = &v14[4 * v10];
      *(_DWORD *)uint64_t v15 = *((_DWORD *)v17 + v5);
      uint64_t v8 = v15 + 4;
      while (v7 != v9)
      {
        int v16 = *--v7;
        *((_DWORD *)v15 - 1) = v16;
        v15 -= 4;
      }

      *(void *)a3 = v15;
      *(void *)(a3 + std::istream::~istream(v2, v3 + 8) = v8;
      *(void *)(a3 + 16) = &v14[4 * v13];
      if (v9) {
        operator delete(v9);
      }
    }

    else
    {
      *uint64_t v7 = *((_DWORD *)v17 + v5);
      uint64_t v8 = v7 + 1;
    }

    *(void *)(a3 + std::istream::~istream(v2, v3 + 8) = v8;
    ++v5;
    uint64_t v7 = v8;
  }

  while (v5 != 17);
  return 0LL;
}

uint64_t sub_1002DB04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(const void **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  __chkstk_darwin(a1, v6 - *(void *)a3);
  uint64_t v8 = (char *)&v12 - v7;
  bzero((char *)&v12 - v7, v9);
  size_t v10 = v6 - (void)v5;
  if (v10) {
    memmove(v8, v5, v10);
  }
  sub_1002D5EB0(a1, a2, "DosimetryVolumeCurve", (uint64_t)v8, v10);
  return 0LL;
}

uint64_t sub_1002DB11C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"EncryptionKeySize", a3, (id)1);
}

uint64_t sub_1002DB130(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3;
  sub_1002D5EB0(a1, a2, "EncryptionKeySize", (uint64_t)&v4, 1LL);
  return 0LL;
}

uint64_t sub_1002DB164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"EncryptionMode", a3, (id)1);
}

uint64_t sub_1002DB178(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3;
  sub_1002D5EB0(a1, a2, "EncryptionMode", (uint64_t)&v4, 1LL);
  return 0LL;
}

uint64_t sub_1002DB1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"LowSecurityStatus", a3, (id)4);
}

uint64_t sub_1002DB1C0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "LowSecurityStatus", (uint64_t)&v4, 4LL);
  return 0LL;
}

uint64_t sub_1002DB1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"HIDDeviceBehavior", a3, (id)4);
}

uint64_t sub_1002DB208(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "HIDDeviceBehavior", (uint64_t)&v4, 4LL);
  return 0LL;
}

uint64_t sub_1002DB23C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"UserSelectedDeviceType", a3, (id)1);
}

uint64_t sub_1002DB250(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3;
  sub_1002D5EB0(a1, a2, "UserSelectedDeviceType", (uint64_t)&v4, 1LL);
  return 0LL;
}

uint64_t sub_1002DB284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"CarPlayType", a3, (id)4);
}

uint64_t sub_1002DB298(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "CarPlayType", (uint64_t)&v4, 4LL);
  return 0LL;
}

void sub_1002DB2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = 0LL;
  uint64_t v29 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  if (sub_1002D6960(a1, a2, (uint64_t)"DeviceIdVendorSource", (_DWORD *)&v29 + 1))
  {
    uint64_t v4 = qword_1008F7578;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    sub_1003CF00C(a2, __p);
    if (v36 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = *(_BYTE **)__p;
    }
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = v5;
    uint64_t v6 = "Did not read property DID_VID_SOURCE_KEY on device %{public}s";
LABEL_19:
    size_t v9 = (os_log_s *)v4;
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v6, buf, 0xCu);
    if (SHIBYTE(v36) < 0) {
      operator delete(*(void **)__p);
    }
    return;
  }

  if (sub_1002D6960(a1, a2, (uint64_t)"DeviceIdVendor", &v29))
  {
    uint64_t v4 = qword_1008F7578;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    sub_1003CF00C(a2, __p);
    if (v36 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = *(_BYTE **)__p;
    }
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = v7;
    uint64_t v6 = "Did not read property DID_VID_KEY on device %{public}s";
    goto LABEL_19;
  }

  if (sub_1002D6960(a1, a2, (uint64_t)"DeviceIdProduct", (_DWORD *)&v28 + 1))
  {
    uint64_t v4 = qword_1008F7578;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    sub_1003CF00C(a2, __p);
    if (v36 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = *(_BYTE **)__p;
    }
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = v8;
    uint64_t v6 = "Did not read property DID_PID_KEY on device %{public}s";
    goto LABEL_19;
  }

  BOOL v10 = sub_1002D6960(a1, a2, (uint64_t)"DeviceIdVersion", &v28);
  unint64_t v11 = (os_log_s *)qword_1008F7578;
  BOOL v12 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (!v12) {
      return;
    }
    sub_1003CF00C(a2, __p);
    if (v36 >= 0) {
      unint64_t v13 = __p;
    }
    else {
      unint64_t v13 = *(_BYTE **)__p;
    }
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = v13;
    uint64_t v6 = "Did not read property DID_VERSION_KEY on device %{public}s";
    size_t v9 = v11;
    goto LABEL_20;
  }

  if (v12)
  {
    sub_1003CF00C(a2, buf);
    if (v31 >= 0) {
      __int128 v14 = buf;
    }
    else {
      __int128 v14 = *(_BYTE **)buf;
    }
    int v16 = v29;
    int v15 = HIDWORD(v29);
    int v18 = v28;
    int v17 = HIDWORD(v28);
    *(_DWORD *)__int128 __p = 136447234;
    *(void *)&__p[4] = v14;
    __int16 v33 = 1024;
    int v34 = HIDWORD(v29);
    __int16 v35 = 1024;
    int v36 = v29;
    __int16 v37 = 1024;
    int v38 = HIDWORD(v28);
    __int16 v39 = 1024;
    int v40 = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "readDID %{public}s deviceId information: vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x",  __p,  0x24u);
    if (v31 < 0) {
      operator delete(*(void **)buf);
    }
  }

  else
  {
    int v16 = v29;
    int v15 = HIDWORD(v29);
    int v18 = v28;
    int v17 = HIDWORD(v28);
  }

  sub_1003D6538(a2, v15, v16, v17, v18);
  if (!sub_1002D6960(a1, a2, (uint64_t)"AppleDevFeatures", (_DWORD *)&v27 + 1))
  {
    int v19 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, __p);
      uint64_t v20 = v36 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Did read property APPLE_DEV_FEATURES_KEY on device %{public}s",  buf,  0xCu);
      if (SHIBYTE(v36) < 0) {
        operator delete(*(void **)__p);
      }
    }

    sub_1003D6758(a2, SHIDWORD(v27), 1);
  }

  BOOL v21 = sub_1002D6960(a1, a2, (uint64_t)"AppleDevFeaturesVersion", &v27);
  if (!v21)
  {
    uint64_t v22 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, __p);
      int v23 = v36 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Did read property APPLE_DEV_FEATURES_VERSION_KEY on device %{public}s",  buf,  0xCu);
      if (SHIBYTE(v36) < 0) {
        operator delete(*(void **)__p);
      }
    }

    sub_1003D6BC4(a2, (unsigned __int16)v27);
  }

  if (!sub_1002D8050(v21, a2, (uint64_t)"AppleDevExtendedFeatures", &v26))
  {
    char v24 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, __p);
      uint64_t v25 = v36 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Did read property APPLE_DEV_EXTENDED_FEATURES_KEY on device %{public}s",  buf,  0xCu);
      if (SHIBYTE(v36) < 0) {
        operator delete(*(void **)__p);
      }
    }

    sub_1003D6A34(a2, __ROR8__(v26, 32), 1);
  }

void sub_1002DB7F8(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  if (sub_1003D55EC(a2, (_DWORD *)&v16 + 1, &v16, (_DWORD *)&v15 + 1, &v15))
  {
    sub_1002D6A1C(a1, a2, "DeviceIdVendorSource", HIDWORD(v16));
    sub_1002D6A1C(a1, a2, "DeviceIdVendor", v16);
    sub_1002D6A1C(a1, a2, "DeviceIdProduct", HIDWORD(v15));
    sub_1002D6A1C(a1, a2, "DeviceIdVersion", v15);
    if (sub_1003D6ED8(a2, (_DWORD *)&v14 + 1))
    {
      sub_1002D6A1C(a1, a2, "AppleDevFeatures", HIDWORD(v14));
      uint64_t v4 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a2, __p);
        uint64_t v5 = v12 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)__int128 buf = 136446210;
        int v18 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Did write APPLE_DEV_FEATURES_KEY info for %{public}s to disk",  buf,  0xCu);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    if (sub_1003D6F74(a2, &v14))
    {
      sub_1002D6A1C(a1, a2, "AppleDevFeaturesVersion", v14);
      uint64_t v6 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a2, __p);
        uint64_t v7 = v12 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)__int128 buf = 136446210;
        int v18 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Did write APPLE_DEV_FEATURES_VERSION_KEY info for %{public}s to disk",  buf,  0xCu);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    if (sub_1003D6F90(a2, &v13))
    {
      sub_1002D8330(a1, a2, "AppleDevExtendedFeatures", HIDWORD(v13) | ((unint64_t)v13 << 32));
      uint64_t v8 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a2, __p);
        if (v12 >= 0) {
          size_t v9 = __p;
        }
        else {
          size_t v9 = (void **)__p[0];
        }
        *(_DWORD *)__int128 buf = 136446210;
        int v18 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Did write APPLE_DEV_EXTENDED_FEATURES_KEY info for %{public}s to disk",  buf,  0xCu);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  else
  {
    BOOL v10 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100669FB8(a2, v10);
    }
  }

uint64_t sub_1002DBB04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D5DCC(a1, a2, (uint64_t)"GAPAFlags", a3, (id)4);
}

uint64_t sub_1002DBB18(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_1002D5EB0(a1, a2, "GAPAFlags", (uint64_t)&v4, 4LL);
  return 0LL;
}

void sub_1002DBB4C(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_1002DBB7C(_Unwind_Exception *a1)
{
}

uint64_t *sub_1002DBB90(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        size_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    size_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 2std::istream::~istream(v2, v3 + 8) = **a4;
    sub_100029630(a1, (uint64_t)v9, v7, v11);
    return v11;
  }

  return (uint64_t *)v9;
}

uint64_t **sub_1002DBC4C(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        size_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    size_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0LL;
    *((void *)v11 + 6) = 0LL;
    sub_100029630(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

uint64_t **sub_1002DBD0C(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *BOOL result = (uint64_t *)(result + 1);
    _DWORD v7[2] = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    if (v6[1]) {
      unsigned int v8 = (uint64_t *)v6[1];
    }
    else {
      unsigned int v8 = v6;
    }
    uint64_t v14 = result;
    uint64_t v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      uint64_t v15 = sub_10026145C((uint64_t)v8);
      if (a2 != a3)
      {
        size_t v9 = a2;
        do
        {
          *((_DWORD *)v8 + std::istream::~istream(v2, v3 + 8) = *((_DWORD *)v9 + 8);
          *(_OWORD *)(v8 + 5) = *(_OWORD *)(v9 + 5);
          sub_1002DBE74(v5, (uint64_t)v8);
          unsigned int v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            uint64_t v15 = sub_10026145C((uint64_t)v15);
          }
          unsigned int v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              unsigned int v10 = (void *)*v10;
            }

            while (v10);
          }

          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              size_t v9 = a2;
            }

            while (!v11);
          }

          if (!v8) {
            break;
          }
          size_t v9 = a2;
        }

        while (a2 != a3);
      }
    }

    BOOL result = (uint64_t **)sub_1002614B0((uint64_t)&v14);
  }

  if (a2 != a3)
  {
    do
    {
      BOOL result = (uint64_t **)sub_1002DBEE0(v5, (uint64_t)(a2 + 4));
      char v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          char v12 = (void *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }

        while (!v11);
      }

      a2 = v13;
    }

    while (v13 != a3);
  }

  return result;
}

void sub_1002DBE60(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1002DBE74(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = a1 + 1;
  int v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        int v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }

      int v4 = (uint64_t *)v4[1];
    }

    while (v4);
    uint64_t v5 = v3 + 1;
  }

  else
  {
    uint64_t v5 = a1 + 1;
  }

_OWORD *sub_1002DBEE0(uint64_t **a1, uint64_t a2)
{
  int v4 = operator new(0x38uLL);
  uint64_t v5 = v4;
  void v4[2] = *(_OWORD *)a2;
  *((void *)v4 + 6) = *(void *)(a2 + 16);
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        if (*((_DWORD *)v4 + 8) >= *((_DWORD *)v7 + 8)) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        unsigned int v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }

      uint64_t v7 = (uint64_t *)v7[1];
    }

    while (v7);
    unsigned int v8 = v6 + 1;
  }

  else
  {
    unsigned int v8 = a1 + 1;
  }

uint64_t sub_1002DBF7C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = 0LL;
  *(void *)a1 = a1 + 8;
  sub_1002DBFD0((_OWORD *)a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1002DBFB8(_Unwind_Exception *a1)
{
}

_OWORD *sub_1002DBFD0(_OWORD *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    int v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t *)result + 1;
    do
    {
      BOOL result = sub_1002DC054(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      uint64_t v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unsigned int v8 = v7;
          uint64_t v7 = *(unsigned int **)v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          unsigned int v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          int v4 = v8;
        }

        while (!v9);
      }

      int v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

_OWORD *sub_1002DC054(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v10 = 0LL;
  BOOL v11 = 0LL;
  uint64_t v6 = sub_1002DC0E4(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x38uLL);
    _DWORD v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    sub_100029630(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }

  return v7;
}

uint64_t *sub_1002DC0E4(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unsigned int v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    unsigned int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }

      while (v9);
    }

    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }

      while (v14);
    }

    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }

        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }

      while (v16);
    }

    else
    {
      int v17 = a1 + 1;
    }

void sub_1002DC28C(void *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4 = a2;
  unsigned int v7 = (_BYTE *)a1[1];
  uint64_t v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }

      while (v4);
      unsigned int v7 = v13;
    }

    a1[1] = v7;
  }

  else
  {
    unsigned int v8 = &v7[-*a1];
    unint64_t v9 = (unint64_t)&v8[a2];
    unint64_t v10 = v6 - *a1;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      char v12 = operator new(v11);
    }
    else {
      char v12 = 0LL;
    }
    BOOL v14 = &v8[(void)v12];
    unsigned int v15 = &v8[(void)v12 + v4];
    uint64_t v16 = &v8[(void)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }

    while (v4);
    int v17 = (_BYTE *)*a1;
    if (v7 != (_BYTE *)*a1)
    {
      do
      {
        char v18 = *--v7;
        *--BOOL v14 = v18;
      }

      while (v7 != v17);
      unsigned int v7 = (_BYTE *)*a1;
    }

    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7) {
      operator delete(v7);
    }
  }

void sub_1002DC3A0(void **a1, unint64_t a2, _DWORD *a3)
{
  unsigned int v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unsigned int v7 = v8;
  unint64_t v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      int v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4LL;
      }

      while (v16);
      unint64_t v9 = v17;
    }

    a1[1] = v9;
  }

  else
  {
    uint64_t v10 = (char *)v9 - (_BYTE *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      abort();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      unsigned int v15 = (char *)sub_10024E33C(v6, v14);
    }
    else {
      unsigned int v15 = 0LL;
    }
    char v18 = &v15[4 * v12];
    int v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    BOOL v21 = v18;
    do
    {
      *(_DWORD *)BOOL v21 = *a3;
      v21 += 4;
      v20 -= 4LL;
    }

    while (v20);
    unsigned int v22 = &v15[4 * v14];
    int v23 = (char *)*a1;
    for (int i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }

    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23) {
      operator delete(v23);
    }
  }

void *sub_1002DC4AC(void *a1)
{
  *a1 = &off_10088FE50;
  CFStringRef v2 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  a1[1] = dispatch_queue_create("com.apple.MobileBluetooth.LeDeviceCache", v2);
  return a1;
}

uint64_t sub_1002DC4F8(uint64_t a1)
{
  *(void *)a1 = &off_10088FE50;
  dispatch_release(*(dispatch_object_t *)(a1 + 8));
  return a1;
}

void sub_1002DC52C(dispatch_object_t *a1)
{
  *a1 = (dispatch_object_t)&off_10088FE50;
  dispatch_release(a1[1]);
  operator delete(a1);
}

uint64_t sub_1002DC560(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0LL;
  unsigned int v7 = &v6;
  uint64_t v8 = 0x2020000000LL;
  char v9 = 0;
  CFStringRef v2 = *(dispatch_queue_s **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002DC5F4;
  block[3] = &unk_10087FEE0;
  void block[4] = &v6;
  void block[5] = a1;
  block[6] = a2;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1002DC5F4(void *a1)
{
  uint64_t v2 = a1[5];
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](&OBJC_CLASS___LeDeviceCache, "sharedInstance"));
  *(_BYTE *)(*(void *)(a1[4] + 8) + 24) = [v3 initializeDatabases:a1[6] queue:*(void *)(v2 + 8)];
}

void sub_1002DC64C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1002DC660(uint64_t a1)
{
}

void sub_1002DC670(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](&OBJC_CLASS___LeDeviceCache, "sharedInstance"));
  [v1 tryLoadProtectedCache];
}

void sub_1002DC6AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1002DC6C0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = a2;
  uint64_t v12 = 0LL;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x4812000000LL;
  unsigned int v15 = sub_1002DC7FC;
  uint64_t v16 = sub_1002DC820;
  int v17 = &unk_1007C41D6;
  memset(v18, 0, sizeof(v18));
  uint64_t v6 = *(dispatch_queue_s **)(a1 + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  _DWORD v9[2] = sub_1002DC848;
  v9[3] = &unk_10088FE88;
  unint64_t v11 = &v12;
  id v7 = v5;
  id v10 = v7;
  dispatch_sync(v6, v9);
  uint64_t v8 = v13;
  *(void *)(a3 + std::istream::~istream(v2, v3 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  *(void *)a3 = 0LL;
  sub_10024062C((char *)a3, (__int128 *)v8[6], (__int128 *)v8[7], 0xAAAAAAAAAAAAAAABLL * ((v8[7] - v8[6]) >> 3));

  _Block_object_dispose(&v12, 8);
  int v19 = (void **)v18;
  sub_100024304(&v19);
}

void sub_1002DC7CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  _Block_object_dispose(va, 8);
  *(void *)(v9 - 40) = v8;
  sub_100024304((void ***)(v9 - 40));

  _Unwind_Resume(a1);
}

__n128 sub_1002DC7FC(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void sub_1002DC820(uint64_t a1)
{
  id v1 = (void **)(a1 + 48);
  sub_100024304(&v1);
}

void sub_1002DC848(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](&OBJC_CLASS___LeDeviceCache, "sharedInstance"));
  unint64_t v4 = v3;
  if (v3)
  {
    [v3 findUUIDsWithCustomProperties:*(void *)(a1 + 32)];
  }

  else
  {
    __int128 v6 = 0uLL;
    uint64_t v7 = 0LL;
  }

  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  sub_1002E5588((uint64_t *)(v5 + 48));
  *(_OWORD *)(v5 + 4std::istream::~istream(v2, v3 + 8) = v6;
  *(void *)(v5 + 64) = v7;
  uint64_t v7 = 0LL;
  __int128 v6 = 0uLL;
  uint64_t v8 = (void **)&v6;
  sub_100024304(&v8);

  objc_autoreleasePoolPop(v2);
}

void sub_1002DC8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002DC904(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  id v7 = a2;
  uint64_t v17 = 0LL;
  char v18 = &v17;
  uint64_t v19 = 0x2020000000LL;
  uint64_t v20 = 0LL;
  uint64_t v8 = *(dispatch_queue_s **)(a1 + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_1002DC9C8;
  v12[3] = &unk_10088FEB0;
  id v13 = v7;
  uint64_t v14 = &v17;
  uint64_t v15 = a3;
  char v16 = a4;
  id v9 = v7;
  dispatch_sync(v8, v12);
  uint64_t v10 = v18[3];

  _Block_object_dispose(&v17, 8);
  return v10;
}

void sub_1002DC9C8(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](&OBJC_CLASS___LeDeviceCache, "sharedInstance"));
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v3 loadPairedDevice:*(void *)(a1 + 32) address:*(void *)(a1 + 48) ifMissing:*(unsigned __int8 *)(a1 + 56)];

  objc_autoreleasePoolPop(v2);
}

void sub_1002DCA2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002DCA3C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  __int128 v6 = *(dispatch_queue_s **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002DCABC;
  block[3] = &unk_1008800B8;
  id v9 = v5;
  uint64_t v10 = a2;
  id v7 = v5;
  dispatch_sync(v6, block);
}

void sub_1002DCABC(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](&OBJC_CLASS___LeDeviceCache, "sharedInstance"));
  [v3 removeDevicesDuplicatesOf:*(void *)(a1 + 40) originalUuid:*(void *)(a1 + 32)];

  objc_autoreleasePoolPop(v2);
}

void sub_1002DCB0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002DCB1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v11 = 0LL;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000LL;
  uint64_t v14 = 0LL;
  unint64_t v4 = *(dispatch_queue_s **)(a1 + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_1002DCBC8;
  v8[3] = &unk_10088FE88;
  id v9 = v3;
  uint64_t v10 = &v11;
  id v5 = v3;
  dispatch_sync(v4, v8);
  uint64_t v6 = v12[3];

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1002DCBC8(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](&OBJC_CLASS___LeDeviceCache, "sharedInstance"));
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v3 readDevice:*(void *)(a1 + 32)];

  objc_autoreleasePoolPop(v2);
}

void sub_1002DCC24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002DCC34(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0LL;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000LL;
  uint64_t v9 = 0LL;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002DCCC0;
  v5[3] = &unk_100880D70;
  v5[4] = &v6;
  void v5[5] = a2;
  dispatch_sync(v2, v5);
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1002DCCC0(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](&OBJC_CLASS___LeDeviceCache, "sharedInstance"));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 readDeviceByAddress:*(void *)(a1 + 40)];

  objc_autoreleasePoolPop(v2);
}

void sub_1002DCD1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002DCD2C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v14 = 0LL;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000LL;
  int v17 = 0;
  uint64_t v6 = *(dispatch_queue_s **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002DCDE0;
  block[3] = &unk_10088FED8;
  uint64_t v12 = &v14;
  uint64_t v13 = a3;
  id v11 = v5;
  id v7 = v5;
  dispatch_sync(v6, block);
  uint64_t v8 = *((unsigned int *)v15 + 6);

  _Block_object_dispose(&v14, 8);
  return v8;
}

void sub_1002DCDE0(void *a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](&OBJC_CLASS___LeDeviceCache, "sharedInstance"));
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = [v2 duplicatePairedDevicesForAddress:a1[6] originalUuid:a1[4]];
}

void sub_1002DCE34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1002DCE48(uint64_t a1, void *a2)
{
  if (!*a2 && os_log_type_enabled((os_log_t)qword_1008F75A0, OS_LOG_TYPE_FAULT)) {
    sub_10066A03C();
  }
  unint64_t v4 = *(dispatch_queue_s **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002DCEE4;
  block[3] = &unk_10087EB20;
  void block[4] = a2;
  dispatch_sync(v4, block);
}

void sub_1002DCEE4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](&OBJC_CLASS___LeDeviceCache, "sharedInstance"));
  [v2 writeDevice:*(void *)(a1 + 32)];
}

void sub_1002DCF28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1002DCF3C(uint64_t a1, uint64_t a2)
{
  id v2 = *(dispatch_queue_s **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002DCF90;
  block[3] = &unk_10087EB20;
  void block[4] = a2;
  dispatch_sync(v2, block);
}

void sub_1002DCF90(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](&OBJC_CLASS___LeDeviceCache, "sharedInstance"));
  [v2 removeDevice:*(void *)(a1 + 32) internal:0];
}

void sub_1002DCFD8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1002DCFEC(uint64_t a1)
{
}

void sub_1002DCFFC(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](&OBJC_CLASS___LeDeviceCache, "sharedInstance"));
  [v1 clearAllDatabases];
}

void sub_1002DD038( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1002DD04C(uint64_t a1)
{
}

void sub_1002DD05C(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](&OBJC_CLASS___LeDeviceCache, "sharedInstance"));
  [v1 printDebug];
}

void sub_1002DD098( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1002DD0EC(id a1)
{
  if (!qword_1008EFCE0)
  {
    id v1 = objc_alloc_init(&OBJC_CLASS___LeDeviceCache);
    id v2 = (void *)qword_1008EFCE0;
    qword_1008EFCE0 = (uint64_t)v1;
  }

void sub_1002DD3A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }

  _Unwind_Resume(a1);
}

void sub_1002DD5E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002DD8A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002DDD48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
}

void sub_1002DDE10(uint64_t a1)
{
  id v2 = (os_log_s *)qword_1008F75A0;
  if (os_log_type_enabled((os_log_t)qword_1008F75A0, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = MKBDeviceUnlockedSinceBoot();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Received MKB first unlock notification. MKBDeviceUnlockedSinceBoot returns : %d",  (uint8_t *)v8,  8u);
  }

  if (MKBDeviceUnlockedSinceBoot() != 1
    && os_log_type_enabled((os_log_t)qword_1008F75A0, OS_LOG_TYPE_FAULT))
  {
    sub_10066A240();
  }

  id v5 = *(void **)(a1 + 32);
  uint64_t v3 = (id *)(a1 + 32);
  id v4 = v5;
  if (!v5[3])
  {
    uint64_t v6 = (os_log_s *)qword_1008F75A0;
    if (os_log_type_enabled((os_log_t)qword_1008F75A0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Received first unlock notification - loading protected cache",  (uint8_t *)v8,  2u);
      id v4 = *v3;
    }

    if ([v4 loadDatabase:1])
    {
      [*v3 updateProtectedCacheMetrics];
    }

    else
    {
      id v7 = (os_log_s *)qword_1008F75A0;
      if (os_log_type_enabled((os_log_t)qword_1008F75A0, OS_LOG_TYPE_ERROR)) {
        sub_10066A1C0(v3, v7);
      }
    }
  }

void sub_1002DE038( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002DE404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002DE954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002DECBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002DEFB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002DF104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002DF770( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void sub_1002DFCD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E0DA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20, uint64_t a21, void *a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
  _Unwind_Resume(a1);
}

void sub_1002E119C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E1B54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1002E1E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E20C8(uint64_t a1)
{
  return (***(uint64_t (****)(void, void, void))(*(void *)(a1 + 32) + 8LL))( *(void *)(*(void *)(a1 + 32) + 8LL),  *(unsigned int *)(a1 + 40),  *(unsigned int *)(a1 + 44));
}

void sub_1002E21B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E2664( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  sub_100024304((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1002E2BBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  sub_100024304((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1002E2EB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E3144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E333C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E35A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1002E38DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E3B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E3DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E3EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E4494( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *a30, void *a31, void *a32, void *a33, void *a34, void *a35, void *a36, void *a37, void *a38, void *a39, uint64_t a40, void *__p, uint64_t a42, int a43, __int16 a44, char a45, char a46)
{
  _Unwind_Resume(a1);
}

void sub_1002E4674(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1002E4B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E5388( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, void *a22, void *a23, void *a24, void *a25, void *a26, void *a27, void *a28, void *a29, void *a30)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E545C(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 16std::istream::~istream(v2, v3 + 8) = 0;
  *(_WORD *)(a1 + 172) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 83) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 1sub_100242FAC(v1 - 32) = 0u;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 15std::istream::~istream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 176) = a1 + 184;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 234) = 0;
  *(_BYTE *)(a1 + 23std::istream::~istream(v2, v3 + 8) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 256) = &_mh_execute_header;
  *(_WORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 28std::istream::~istream(v2, v3 + 8) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 356) = 3;
  *(_DWORD *)(a1 + 364) = 0;
  *(void *)(a1 + 357) = 0LL;
  *(_BYTE *)(a1 + 36std::istream::~istream(v2, v3 + 8) = 1;
  *(void *)(a1 + 372) = 0LL;
  *(void *)(a1 + 379) = 0LL;
  *(_BYTE *)(a1 + 396) = 0;
  *(void *)(a1 + 38std::istream::~istream(v2, v3 + 8) = 0LL;
  *(_OWORD *)(a1 + 460) = 0u;
  *(_OWORD *)(a1 + 4sub_100242FAC(v1 - 32) = 0u;
  *(_OWORD *)(a1 + 44std::istream::~istream(v2, v3 + 8) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_BYTE *)(a1 + 476) = 127;
  *(void *)(a1 + 480) = 0LL;
  *(_BYTE *)(a1 + 48std::istream::~istream(v2, v3 + 8) = 0;
  *(_DWORD *)(a1 + 5sub_100242FAC(v1 - 32) = 0;
  *(void *)(a1 + 536) = 0LL;
  *(_BYTE *)(a1 + 544) = 0;
  *(void *)(a1 + 552) = 0LL;
  *(_BYTE *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 527) = 0;
  *(void *)(a1 + 569) = 0LL;
  *(void *)(a1 + 562) = 0LL;
  *(_DWORD *)(a1 + 607) = 0;
  *(void *)(a1 + 600) = 0LL;
  *(_OWORD *)(a1 + 584) = 0u;
  return a1;
}

void sub_1002E5588(uint64_t *a1)
{
  if (*a1)
  {
    sub_100024344(a1);
    operator delete((void *)*a1);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

void sub_1002E55C0(id a1)
{
  id v1 = (char *)operator new(0x200uLL);
  *(void *)id v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 1std::istream::~istream(v2, v3 + 8) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 10std::istream::~istream(v2, v3 + 8) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 2std::istream::~istream(v2, v3 + 8) = v1 + 232;
  *((void *)v1 + sub_100242FAC(v1 - 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 32std::istream::~istream(v2, v3 + 8) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 5std::istream::~istream(v2, v3 + 8) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_1002E56C8(_Unwind_Exception *a1)
{
}

  ;
}

  ;
}

void sub_1002E5700(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, os_log_s *a4@<X8>)
{
}

uint64_t sub_1002E5710(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2080;
  *(void *)(a3 + 14) = a2;
  return result;
}

  ;
}

void sub_1002E5734()
{
  int v0 = objc_autoreleasePoolPush();
  qword_1008F71B0 = objc_opt_class(&OBJC_CLASS___NSString);
  qword_1008F71B8 = objc_opt_class(&OBJC_CLASS___NSString);
  qword_1008F71C0 = objc_opt_class(&OBJC_CLASS___NSNumber);
  qword_1008F71C8 = objc_opt_class(&OBJC_CLASS___NSString);
  qword_1008F71D0 = objc_opt_class(&OBJC_CLASS___NSString);
  qword_1008F71D8 = objc_opt_class(&OBJC_CLASS___NSNumber);
  qword_1008F71E0 = objc_opt_class(&OBJC_CLASS___NSNumber);
  qword_1008F71E8 = objc_opt_class(&OBJC_CLASS___NSNumber);
  qword_1008F71F0 = objc_opt_class(&OBJC_CLASS___NSString);
  qword_1008F71F8 = objc_opt_class(&OBJC_CLASS___NSString);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1002E57E8(uint64_t a1, void *a2, void *a3, char a4)
{
  id v8 = a2;
  id v9 = a3;
  *(void *)(a1 + std::istream::~istream(v2, v3 + 8) = 0LL;
  *(void *)a1 = off_10088FF88;
  *(_BYTE *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + sub_100242FAC(v1 - 32) = 0LL;
  objc_storeStrong((id *)(a1 + 8), a2);
  uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v11 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v10;

  uint64_t v12 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  uint64_t v13 = *(void **)(a1 + 32);
  *(void *)(a1 + sub_100242FAC(v1 - 32) = v12;

  sub_1002E58D0(a1, v9);
  return a1;
}

void sub_1002E58A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E58D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = 138412546;
    id v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding %@ to %@ session", (uint8_t *)&v6, 0x16u);
  }

  [*(id *)(a1 + 24) addObject:v3];
  sub_1002E5B9C(a1, v3);
}

void sub_1002E59AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E59C8(uint64_t a1)
{
  *(void *)a1 = off_10088FF88;
  id v2 = *(void **)(a1 + 32);
  *(void *)(a1 + sub_100242FAC(v1 - 32) = 0LL;

  id v3 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Tearing down CattPendingConnection for %@",  (uint8_t *)&v6,  0xCu);
  }

  return a1;
}

void sub_1002E5AA4(uint64_t a1)
{
  id v1 = (void *)sub_1002E59C8(a1);
  operator delete(v1);
}

id sub_1002E5AB8(uint64_t a1, int a2)
{
  *(_BYTE *)(a1 + 16) = a2;
  if (!a2) {
    return [*(id *)(a1 + 32) removeAllObjects];
  }
  id v2 = *(void **)(a1 + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1002E5B28;
  v4[3] = &unk_10088FF98;
  void v4[4] = a1;
  return [v2 enumerateObjectsUsingBlock:v4];
}

void sub_1002E5B28(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = a2;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = v6;
  else {
    sub_1002E5B9C(v7, v8);
  }
}

void sub_1002E5B88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1002E5B9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_10088FFB8);
  }
  uint64_t v4 = sub_1005CC198((uint64_t)off_1008D5F28, v3, 0);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_10088FFD8);
  }
  uint64_t v5 = sub_10040007C(off_1008D5F48, v4, 1);
  if (v5)
  {
    if (qword_1008D6198 != -1) {
      dispatch_once(&qword_1008D6198, &stru_10088FFF8);
    }
    BOOL v6 = *((_BYTE *)off_1008D6190 + 197)
      || *((_BYTE *)off_1008D6190 + 198)
      || *((_BYTE *)off_1008D6190 + 199)
      || *((unsigned __int8 *)off_1008D6190 + 204) != 0;
    BOOL v7 = sub_1003E3B0C((uint64_t)v5, 10);
    unsigned int v8 = [*(id *)(a1 + 32) containsObject:v3];
    if (sub_1003D07C8((uint64_t)v5) && (!*(_BYTE *)(a1 + 16) ? (int v9 = 1) : (int v9 = v6), (v9 | v8 | v7) == 1))
    {
      uint64_t v10 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C((uint64_t)v5, __p);
        if (v22 >= 0) {
          id v11 = __p;
        }
        else {
          id v11 = (void **)__p[0];
        }
        int v12 = *(unsigned __int8 *)(a1 + 16);
        *(_DWORD *)__int128 buf = 136447234;
        char v24 = v11;
        __int16 v25 = 1024;
        int v26 = v12;
        __int16 v27 = 1024;
        BOOL v28 = v6;
        __int16 v29 = 1024;
        BOOL v30 = v7;
        __int16 v31 = 1024;
        unsigned int v32 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Not making outgoing page to device %{public}s isForegroundActive %d, streaming %d, tooRecentConnection %d, alreadyPaged %d",  buf,  0x24u);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    else
    {
      if (qword_1008D60D0 != -1) {
        dispatch_once(&qword_1008D60D0, &stru_100890018);
      }
      uint64_t v13 = off_1008D60C8;
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      void v17[2] = sub_1002E5F1C;
      v17[3] = &unk_10087FBF0;
      uint64_t v19 = a1;
      uint64_t v20 = v5;
      id v18 = v3;
      sub_100424EB4((uint64_t)v13, v17);
    }
  }

  else
  {
    uint64_t v14 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = sub_1005BFB9C(v4);
      uint64_t v16 = (void **)objc_claimAutoreleasedReturnValue(v15);
      *(_DWORD *)__int128 buf = 138412290;
      char v24 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "No device found for device %@", buf, 0xCu);
    }
  }
}

void sub_1002E5ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1002E5F14(uint64_t a1)
{
  return [*(id *)(a1 + 24) count];
}

void sub_1002E5F1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_100890018);
  }
  id v3 = (uint64_t *)(a1 + 48);
  uint64_t v4 = sub_100425684((uint64_t)off_1008D60C8, *(void *)(a1 + 48));
  uint64_t v5 = (os_log_s *)qword_1008F7628;
  if ((v4 & 0x100000) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
      sub_10066AC58((uint64_t *)(a1 + 48), (uint64_t)v5);
    }
    goto LABEL_20;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(*v3, &__p);
    BOOL v6 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)__int128 buf = 136446210;
    int v17 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Making outgoing connection to device %{public}s for CATT",  buf,  0xCu);
  }

  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_100890018);
  }
  uint64_t v7 = *v3;
  memset(&__p, 0, sizeof(__p));
  int v8 = sub_100424360((int64x2_t *)off_1008D60C8, v7, 0x100000, &__p, 0LL);
  int v9 = v8;
  if ((char)__p.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v9)
    {
LABEL_20:
      uint64_t v11 = sub_100404FE8();
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      _DWORD v12[2] = sub_1002E617C;
      v12[3] = &unk_1008800B8;
      uint64_t v14 = v2;
      id v13 = *(id *)(a1 + 32);
      sub_100405384(v11, v12);

      return;
    }
  }

  else if (!v8)
  {
    goto LABEL_20;
  }

  uint64_t v10 = qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
    sub_10066ABCC(v3, v10);
  }
}

void sub_1002E6148( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1002E617C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 40) + 32) addObject:*(void *)(a1 + 32)];
}

void sub_1002E6188(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = 138412546;
    id v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Removing %@ from %@ session",  (uint8_t *)&v6,  0x16u);
  }

  [*(id *)(a1 + 24) removeObject:v3];
}

void sub_1002E6258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1002E6270(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) description]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) description]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ isForegroundActive: %d Devices: %@, Devices already paged: %@",  v2,  v3,  v4,  v5));

  return v6;
}

void sub_1002E6300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002E631C(id a1)
{
  id v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_1002E634C(_Unwind_Exception *a1)
{
}

void sub_1002E6360(id a1)
{
  id v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_1002E6390(_Unwind_Exception *a1)
{
}

void sub_1002E63A4(id a1)
{
  id v1 = (char *)operator new(0x200uLL);
  *(void *)id v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 1std::istream::~istream(v2, v3 + 8) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 10std::istream::~istream(v2, v3 + 8) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 2std::istream::~istream(v2, v3 + 8) = v1 + 232;
  *((void *)v1 + sub_100242FAC(v1 - 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 32std::istream::~istream(v2, v3 + 8) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 5std::istream::~istream(v2, v3 + 8) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_1002E64AC(_Unwind_Exception *a1)
{
}

void sub_1002E64C0(id a1)
{
  id v1 = operator new(0x2C0uLL);
  sub_1004219F0();
  off_1008D60C8 = v1;
}

void sub_1002E64F0(_Unwind_Exception *a1)
{
}

void sub_1002E6504( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
}

id *sub_1002E6518(id *a1)
{
  return a1;
}

void sub_1002E6558(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7710;
  if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 136315138;
    uint64_t v14 = "HciTransportOpen";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v13, 0xCu);
  }

  *(_DWORD *)(a1 + std::istream::~istream(v2, v3 + 8) = *(_DWORD *)a2;
  id v5 = objc_retainBlock(*(id *)(a2 + 16));
  int v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v5;

  id v7 = objc_retainBlock(*(id *)(a2 + 48));
  __int16 v8 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v7;

  id v9 = objc_retainBlock(*(id *)(a2 + 56));
  uint64_t v10 = *(void **)(a1 + 32);
  *(void *)(a1 + sub_100242FAC(v1 - 32) = v9;

  id v11 = objc_retainBlock(*(id *)(a2 + 64));
  int v12 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v11;
}

void sub_1002E6664(void *a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7710;
  if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315138;
    __int16 v8 = "HciTransportClose";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v7, 0xCu);
  }

  uint64_t v3 = (void *)a1[2];
  a1[2] = 0LL;

  uint64_t v4 = (void *)a1[3];
  a1[3] = 0LL;

  id v5 = (void *)a1[4];
  a1[4] = 0LL;

  int v6 = (void *)a1[5];
  a1[5] = 0LL;
}

void sub_1002E673C(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    __int16 v3 = *((_WORD *)a2 + 5);
    uint64_t v4 = *a2;
    dispatch_time_t v5 = dispatch_time(0LL, 5000000LL);
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    int v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002E681C;
    block[3] = &unk_10087FF20;
    __int16 v17 = v3;
    void block[4] = a1;
    void block[5] = v4;
    dispatch_after(v5, v7, block);
  }

  else
  {
    __int16 v8 = (os_log_s *)qword_1008F7710;
    if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_ERROR)) {
      sub_10066ACE4(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }

_BYTE *sub_1002E681C(_BYTE *result)
{
  uint64_t v1 = *((void *)result + 4);
  if (*(void *)(v1 + 24))
  {
    uint64_t v2 = result;
    char v5 = 0;
    sub_100242CA4(&v5);
    __int16 v3 = (os_log_s *)qword_1008F7710;
    if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((unsigned __int16 *)v2 + 24);
      *(_DWORD *)__int128 buf = 136315394;
      int v7 = "sendTransport_block_invoke";
      __int16 v8 = 1024;
      int v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s: send HCI event to virtual transport size %d",  buf,  0x12u);
    }

    (*(void (**)(void))(*(void *)(v1 + 24) + 16LL))();
    sub_100242CD0(&v5);
    return sub_100242CD8(&v5);
  }

  return result;
}

void sub_1002E691C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1002E6938(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  if (*(void *)(a1 + 24))
  {
    __int16 v4 = *((_WORD *)a2 + 5);
    uint64_t v5 = *a2;
    dispatch_time_t v6 = dispatch_time(0LL, 1000000LL * a3);
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    __int16 v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002E6A1C;
    block[3] = &unk_10087FF20;
    __int16 v18 = v4;
    void block[4] = a1;
    void block[5] = v5;
    dispatch_after(v6, v8, block);
  }

  else
  {
    int v9 = (os_log_s *)qword_1008F7710;
    if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_ERROR)) {
      sub_10066AD58(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }

_BYTE *sub_1002E6A1C(_BYTE *result)
{
  uint64_t v1 = *((void *)result + 4);
  if (*(void *)(v1 + 24))
  {
    uint64_t v2 = result;
    char v5 = 0;
    sub_100242CA4(&v5);
    __int16 v3 = (os_log_s *)qword_1008F7710;
    if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((unsigned __int16 *)v2 + 24);
      *(_DWORD *)__int128 buf = 136315394;
      int v7 = "sendTransportDelay_block_invoke";
      __int16 v8 = 1024;
      int v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s send HCI event to virtual transport size %d",  buf,  0x12u);
    }

    (*(void (**)(void))(*(void *)(v1 + 24) + 16LL))();
    sub_100242CD0(&v5);
    return sub_100242CD8(&v5);
  }

  return result;
}

void sub_1002E6B1C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1002E6B38()
{
  if (qword_1008EFCF8 != -1) {
    dispatch_once(&qword_1008EFCF8, &stru_100890038);
  }
  return qword_1008EFCF0;
}

void sub_1002E6B78(id a1)
{
  uint64_t v1 = operator new(0x88uLL);
  void *v1 = off_10088DD98;
  v1[1] = off_10088DE58;
  sub_100242DC4(v1 + 2);
  *((_WORD *)v1 + 42) = 0;
  *((_DWORD *)v1 + 20) = 0;
  *((_DWORD *)v1 + 22) = 0;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_DWORD *)v1 + sub_100242FAC(v1 - 32) = 12;
  *((_BYTE *)v1 + 1sub_100242FAC(v1 - 32) = 0;
  qword_1008EFCF0 = (uint64_t)v1;
}

void sub_1002E6BDC(_Unwind_Exception *a1)
{
}

uint64_t sub_1002E6BF0()
{
  if (qword_1008EFD08 != -1) {
    dispatch_once(&qword_1008EFD08, &stru_100890058);
  }
  return qword_1008EFD00;
}

void sub_1002E6C30(id a1)
{
  uint64_t v1 = operator new(0x10uLL);
  sub_10033B71C((uint64_t)v1);
  qword_1008EFD00 = (uint64_t)v1;
}

void sub_1002E6C60(_Unwind_Exception *a1)
{
}

uint64_t sub_1002E6C74()
{
  if (qword_1008EFD18 != -1) {
    dispatch_once(&qword_1008EFD18, &stru_100890078);
  }
  return qword_1008EFD10;
}

void sub_1002E6CB4(id a1)
{
  uint64_t v1 = operator new(0x28uLL);
  sub_10032A274();
  qword_1008EFD10 = (uint64_t)v1;
}

void sub_1002E6CE4(_Unwind_Exception *a1)
{
}

uint64_t sub_1002E6CF8()
{
  if (qword_1008EFD28 != -1) {
    dispatch_once(&qword_1008EFD28, &stru_100890098);
  }
  return qword_1008EFD20;
}

void sub_1002E6D38(id a1)
{
  uint64_t v1 = operator new(0x50uLL);
  sub_1002D20E0(v1);
  qword_1008EFD20 = (uint64_t)v1;
}

void sub_1002E6D68(_Unwind_Exception *a1)
{
}

uint64_t sub_1002E6D7C()
{
  if (qword_1008EFD38 != -1) {
    dispatch_once(&qword_1008EFD38, &stru_1008900B8);
  }
  return qword_1008EFD30;
}

void sub_1002E6DBC(id a1)
{
  uint64_t v1 = operator new(0x48uLL);
  sub_1002D53C4(v1);
  qword_1008EFD30 = (uint64_t)v1;
}

void sub_1002E6DEC(_Unwind_Exception *a1)
{
}

uint64_t sub_1002E6E00()
{
  if (qword_1008EFD48 != -1) {
    dispatch_once(&qword_1008EFD48, &stru_1008900D8);
  }
  (*(void (**)(uint64_t))(*(void *)qword_1008EFD40 + 40LL))(qword_1008EFD40);
  return qword_1008EFD40;
}

void sub_1002E6E58(id a1)
{
  uint64_t v1 = operator new(0x170uLL);
  sub_1002BEE6C((uint64_t)v1);
  qword_1008EFD40 = (uint64_t)v1;
}

void sub_1002E6E88(_Unwind_Exception *a1)
{
}

uint64_t sub_1002E6E9C()
{
  if (qword_1008EFD58 != -1) {
    dispatch_once(&qword_1008EFD58, &stru_1008900F8);
  }
  return qword_1008EFD50;
}

void sub_1002E6EDC(id a1)
{
  uint64_t v1 = getenv("BT_CHIP");
  if (v1 && !strcmp(v1, "ACI BT"))
  {
    uint64_t v2 = operator new(0x5B0uLL);
    sub_10029BFA0((uint64_t)v2, 2000);
    qword_1008EFD50 = (uint64_t)v2;
  }

  if (qword_1008EFD78 != -1) {
    dispatch_once(&qword_1008EFD78, &stru_100890138);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)qword_1008EFD70 + 264LL))(qword_1008EFD70))
  {
    __int16 v3 = operator new(0x5B0uLL);
    sub_10029BFA0((uint64_t)v3, 6000);
    qword_1008EFD50 = (uint64_t)v3;
    return;
  }

  if (!qword_1008EFD50)
  {
    int v9 = 1046806126;
    *(_OWORD *)__int128 buf = xmmword_1006C0670;
    if (MGIsDeviceOneOfType(buf))
    {
      int v4 = operator new(0x5B0uLL);
      sub_10029BFA0((uint64_t)v4, 10);
LABEL_134:
      qword_1008EFD50 = (uint64_t)v4;
      return;
    }

    int v9 = -1639077591;
    *(_OWORD *)__int128 buf = xmmword_1006C06AC;
    if (MGIsDeviceOneOfType(buf))
    {
      int v4 = operator new(0x5B0uLL);
      sub_10029BFA0((uint64_t)v4, 1);
      goto LABEL_134;
    }

    int v9 = 1032708406;
    *(_OWORD *)__int128 buf = xmmword_1006C06D4;
    if (MGIsDeviceOneOfType(buf))
    {
      int v4 = operator new(0x5B0uLL);
      sub_10029BFA0((uint64_t)v4, 6);
      goto LABEL_134;
    }

    int v9 = -1527788847;
    *(_OWORD *)__int128 buf = xmmword_1006C0788;
    if (MGIsDeviceOneOfType(buf))
    {
      int v4 = operator new(0x5B0uLL);
      sub_10029BFA0((uint64_t)v4, 11);
      goto LABEL_134;
    }

    int v9 = -350584140;
    *(_OWORD *)__int128 buf = xmmword_1006C07B0;
    if (MGIsDeviceOneOfType(buf))
    {
      int v4 = operator new(0x5B0uLL);
      sub_10029BFA0((uint64_t)v4, 12);
      goto LABEL_134;
    }

    int v9 = 317289457;
    *(_OWORD *)__int128 buf = xmmword_1006C08A0;
    if (MGIsDeviceOneOfType(buf))
    {
      int v4 = operator new(0x5B0uLL);
      sub_10029BFA0((uint64_t)v4, 13);
      goto LABEL_134;
    }

    int v9 = 289690957;
    *(_OWORD *)__int128 buf = xmmword_1006C0940;
    if (MGIsDeviceOneOfType(buf))
    {
      int v4 = operator new(0x5B0uLL);
      sub_10029BFA0((uint64_t)v4, 9);
      goto LABEL_134;
    }

    int v9 = 414393924;
    *(_OWORD *)__int128 buf = xmmword_1006C0990;
    if (MGIsDeviceOneOfType(buf))
    {
LABEL_121:
      int v4 = operator new(0x5B0uLL);
      sub_10029BFA0((uint64_t)v4, 15);
      goto LABEL_134;
    }

    int v9 = -232427879;
    *(_OWORD *)__int128 buf = xmmword_1006C0A1C;
    int v9 = 2030516999;
    *(_OWORD *)__int128 buf = xmmword_1006C0A58;
    int v9 = -1276010597;
    *(_OWORD *)__int128 buf = xmmword_1006C0A80;
    int v9 = -1902732724;
    *(_OWORD *)__int128 buf = xmmword_1006C0AA8;
    int v9 = -342357580;
    *(_OWORD *)__int128 buf = xmmword_1006C0AD0;
    int v9 = -820493242;
    *(_OWORD *)__int128 buf = xmmword_1006C0AF8;
    int v9 = -61007701;
    *(_OWORD *)__int128 buf = xmmword_1006C0B0C;
    int v9 = -235416490;
    *(_OWORD *)__int128 buf = xmmword_1006C0B20;
    int v9 = -121925081;
    *(_OWORD *)__int128 buf = xmmword_1006C0B34;
    int v9 = 1126727276;
    *(_OWORD *)__int128 buf = xmmword_1006C0B48;
    int v9 = 300130091;
    *(_OWORD *)__int128 buf = xmmword_1006C0B5C;
    int v9 = 343814884;
    *(_OWORD *)__int128 buf = xmmword_1006C0B70;
    int v9 = -1675932945;
    *(_OWORD *)__int128 buf = xmmword_1006C0B84;
    int v9 = 1278131292;
    *(_OWORD *)__int128 buf = xmmword_1006C0B98;
    if (MGIsDeviceOneOfType(buf)
      || (int v9 = 659506830, *(_OWORD *)buf = xmmword_1006C0BC0, MGIsDeviceOneOfType(buf)))
    {
LABEL_47:
      int v4 = operator new(0x5B0uLL);
      sub_10029BFA0((uint64_t)v4, 19);
      goto LABEL_134;
    }

    int v9 = 1071957977;
    *(_OWORD *)__int128 buf = xmmword_1006C0BE8;
    int v9 = 438437663;
    *(_OWORD *)__int128 buf = xmmword_1006C0BFC;
    int v9 = -382792827;
    *(_OWORD *)__int128 buf = xmmword_1006C0C10;
    int v9 = 1575123478;
    *(_OWORD *)__int128 buf = xmmword_1006C0C24;
    int v9 = 123138233;
    *(_OWORD *)__int128 buf = xmmword_1006C0C38;
    int v9 = 681511593;
    *(_OWORD *)__int128 buf = xmmword_1006C0C4C;
    int v9 = 713503427;
    *(_OWORD *)__int128 buf = xmmword_1006C0C60;
    int v9 = -1632750650;
    *(_OWORD *)__int128 buf = xmmword_1006C0C74;
    int v9 = -1431778695;
    *(_OWORD *)__int128 buf = xmmword_1006C0C88;
    int v9 = 533419158;
    *(_OWORD *)__int128 buf = xmmword_1006C0C9C;
    int v9 = 1106979518;
    *(_OWORD *)__int128 buf = xmmword_1006C0CB0;
    int v9 = -1820426635;
    *(_OWORD *)__int128 buf = xmmword_1006C0CC4;
    int v9 = -937652876;
    *(_OWORD *)__int128 buf = xmmword_1006C0CD8;
    int v9 = -609570151;
    *(_OWORD *)__int128 buf = xmmword_1006C0CEC;
    int v9 = -874769875;
    *(_OWORD *)__int128 buf = xmmword_1006C0D00;
    int v9 = 1874287171;
    *(_OWORD *)__int128 buf = xmmword_1006C0D14;
    int v9 = -781324731;
    *(_OWORD *)__int128 buf = xmmword_1006C0D28;
    int v9 = 1223847566;
    *(_OWORD *)__int128 buf = xmmword_1006C0D3C;
    if (MGIsDeviceOneOfType(buf)
      || (int v9 = 185580364, *(_OWORD *)buf = xmmword_1006C0D50, MGIsDeviceOneOfType(buf))
      || (int v9 = 1214880059, *(_OWORD *)buf = xmmword_1006C0D64, MGIsDeviceOneOfType(buf))
      || (int v9 = 426359977, *(_OWORD *)buf = xmmword_1006C0D78, MGIsDeviceOneOfType(buf)))
    {
      int v4 = operator new(0x5B0uLL);
      sub_10029BFA0((uint64_t)v4, 25);
      goto LABEL_134;
    }

    int v9 = 345196535;
    *(_OWORD *)__int128 buf = xmmword_1006C0D8C;
    int v9 = 440949464;
    *(_OWORD *)__int128 buf = xmmword_1006C0DA0;
    int v9 = -695298128;
    *(_OWORD *)__int128 buf = xmmword_1006C0DB4;
    int v9 = 804488105;
    *(_OWORD *)__int128 buf = xmmword_1006C0DDC;
    int v9 = 460218192;
    *(_OWORD *)__int128 buf = xmmword_1006C0E04;
    int v9 = 2144905009;
    *(_OWORD *)__int128 buf = xmmword_1006C0E2C;
    int v9 = 688565114;
    *(_OWORD *)__int128 buf = xmmword_1006C0E54;
    int v9 = -493418906;
    *(_OWORD *)__int128 buf = xmmword_1006C0E68;
    int v9 = -545612308;
    *(_OWORD *)__int128 buf = xmmword_1006C0E7C;
    int v9 = 1178062702;
    *(_OWORD *)__int128 buf = xmmword_1006C0E90;
    int v9 = -773054213;
    *(_OWORD *)__int128 buf = xmmword_1006C0EA4;
    int v9 = -1204420428;
    *(_OWORD *)__int128 buf = xmmword_1006C0EB8;
    int v9 = 958549802;
    *(_OWORD *)__int128 buf = xmmword_1006C0ECC;
    int v9 = -12497897;
    *(_OWORD *)__int128 buf = xmmword_1006C0EE0;
    int v9 = 1377540371;
    *(_OWORD *)__int128 buf = xmmword_1006C0EF4;
    int v9 = -518121279;
    *(_OWORD *)__int128 buf = xmmword_1006C0F08;
    int v9 = 1878025452;
    *(_OWORD *)__int128 buf = xmmword_1006C0F1C;
    int v9 = 1725957070;
    *(_OWORD *)__int128 buf = xmmword_1006C0F30;
    int v9 = 538967431;
    *(_OWORD *)__int128 buf = xmmword_1006C0F44;
    int v9 = 2060712151;
    *(_OWORD *)__int128 buf = xmmword_1006C0F58;
    int v9 = 802516499;
    *(_OWORD *)__int128 buf = xmmword_1006C0F6C;
    if (MGIsDeviceOneOfType(buf)
      || (int v9 = -1919324456, *(_OWORD *)buf = xmmword_1006C0F80, MGIsDeviceOneOfType(buf))
      || (int v9 = 1127969586, *(_OWORD *)buf = xmmword_1006C0F94, MGIsDeviceOneOfType(buf))
      || (int v9 = 1292009573, *(_OWORD *)buf = xmmword_1006C0FA8, MGIsDeviceOneOfType(buf)))
    {
LABEL_114:
      int v4 = operator new(0x5B0uLL);
      sub_10029BFA0((uint64_t)v4, 23);
      goto LABEL_134;
    }

    int v9 = 1737149739;
    *(_OWORD *)__int128 buf = xmmword_1006C0FBC;
    if (MGIsDeviceOneOfType(buf))
    {
      int v4 = operator new(0x5B0uLL);
      sub_10029BFA0((uint64_t)v4, 2001);
      goto LABEL_134;
    }

    int v9 = -1918230744;
    *(_OWORD *)__int128 buf = xmmword_1006C0FD0;
    if (MGIsDeviceOneOfType(buf))
    {
LABEL_133:
      int v4 = operator new(0x5B0uLL);
      sub_10029BFA0((uint64_t)v4, 2002);
      goto LABEL_134;
    }

    int v9 = 1899561076;
    *(_OWORD *)__int128 buf = xmmword_1006C0FE4;
    int v9 = -435113336;
    *(_OWORD *)__int128 buf = xmmword_1006C100C;
    int v9 = -1997581659;
    *(_OWORD *)__int128 buf = xmmword_1006C1020;
    if (MGIsDeviceOneOfType(buf))
    {
LABEL_123:
      int v4 = operator new(0x5B0uLL);
      sub_10029BFA0((uint64_t)v4, 20);
      goto LABEL_134;
    }

    int v9 = -1441055153;
    *(_OWORD *)__int128 buf = xmmword_1006C1034;
    if (MGIsDeviceOneOfType(buf))
    {
      int v4 = operator new(0x5B0uLL);
      sub_10029BFA0((uint64_t)v4, 21);
      goto LABEL_134;
    }

    int v9 = -2098731532;
    *(_OWORD *)__int128 buf = xmmword_1006C1048;
    if (MGIsDeviceOneOfType(buf)
      || (int v9 = -340360463, *(_OWORD *)buf = xmmword_1006C105C, MGIsDeviceOneOfType(buf))
      || (int v9 = 1605231531, *(_OWORD *)buf = xmmword_1006C1070, MGIsDeviceOneOfType(buf)))
    {
LABEL_130:
      int v4 = operator new(0x5B0uLL);
      sub_10029BFA0((uint64_t)v4, 22);
      goto LABEL_134;
    }

    int v9 = -584398440;
    *(_OWORD *)__int128 buf = xmmword_1006C1084;
    int v9 = -879476163;
    *(_OWORD *)__int128 buf = xmmword_1006C1098;
    char v5 = (os_log_s *)(id)qword_1008F7578;
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_FAULT);
    if (v6)
    {
      int v7 = MGGetProductType(v6);
      sub_10066ADCC(v7, buf, v5);
    }
  }

void sub_1002E8BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E8D54()
{
  if (qword_1008EFD78 != -1) {
    dispatch_once(&qword_1008EFD78, &stru_100890138);
  }
  return qword_1008EFD70;
}

uint64_t sub_1002E8D94()
{
  if (qword_1008EFD68 != -1) {
    dispatch_once(&qword_1008EFD68, &stru_100890118);
  }
  return qword_1008EFD60;
}

void sub_1002E8DD4(id a1)
{
  uint64_t v1 = operator new(0x328uLL);
  sub_1002EE630((uint64_t)v1);
  qword_1008EFD60 = (uint64_t)v1;
}

void sub_1002E8E04(_Unwind_Exception *a1)
{
}

void sub_1002E8E18(id a1)
{
  uint64_t v1 = operator new(0x620uLL);
  sub_100346C0C();
  qword_1008EFD70 = (uint64_t)v1;
}

void sub_1002E8E48(_Unwind_Exception *a1)
{
}

uint64_t sub_1002E8E5C()
{
  return 0LL;
}

uint64_t sub_1002E8E64()
{
  if (qword_1008EFD88 != -1) {
    dispatch_once(&qword_1008EFD88, &stru_100890158);
  }
  return qword_1008EFD80;
}

void sub_1002E8EA4(id a1)
{
  uint64_t v1 = operator new(0x78uLL);
  sub_10026CF5C(v1);
  qword_1008EFD80 = (uint64_t)v1;
}

void sub_1002E8ED4(_Unwind_Exception *a1)
{
}

uint64_t sub_1002E8EE8()
{
  if (qword_1008EFD98 != -1) {
    dispatch_once(&qword_1008EFD98, &stru_100890178);
  }
  return qword_1008EFD90;
}

void sub_1002E8F28(id a1)
{
  uint64_t v1 = operator new(0x200uLL);
  sub_10064EB00();
  qword_1008EFD90 = (uint64_t)v1;
}

void sub_1002E8F58(_Unwind_Exception *a1)
{
}

uint64_t sub_1002E8F6C()
{
  if (qword_1008EFDA8 != -1) {
    dispatch_once(&qword_1008EFDA8, &stru_100890198);
  }
  return qword_1008EFDA0;
}

void sub_1002E8FAC(id a1)
{
  uint64_t v1 = operator new(0x40uLL);
  sub_1006425D8();
  qword_1008EFDA0 = (uint64_t)v1;
}

void sub_1002E8FDC(_Unwind_Exception *a1)
{
}

uint64_t sub_1002E8FF0()
{
  if (qword_1008EFDB8 != -1) {
    dispatch_once(&qword_1008EFDB8, &stru_1008901B8);
  }
  return qword_1008EFDB0;
}

void sub_1002E9030(id a1)
{
  uint64_t v1 = operator new(8uLL);
  sub_1004785A4(v1);
  qword_1008EFDB0 = (uint64_t)v1;
}

void sub_1002E9060(_Unwind_Exception *a1)
{
}

uint64_t sub_1002E9074()
{
  if (qword_1008EFDC8 != -1) {
    dispatch_once(&qword_1008EFDC8, &stru_1008901D8);
  }
  return qword_1008EFDC0;
}

void sub_1002E90B4(id a1)
{
  uint64_t v1 = operator new(8uLL);
  void *v1 = off_1008A46C0;
  qword_1008EFDC0 = (uint64_t)v1;
}

uint64_t sub_1002E90E4()
{
  if (qword_1008EFDD8 != -1) {
    dispatch_once(&qword_1008EFDD8, &stru_1008901F8);
  }
  return qword_1008EFDD0;
}

void sub_1002E9124(id a1)
{
  uint64_t v1 = operator new(0x68uLL);
  sub_100634888();
  qword_1008EFDD0 = (uint64_t)v1;
}

void sub_1002E9154(_Unwind_Exception *a1)
{
}

void *sub_1002E9168(uint64_t a1)
{
  uint64_t v2 = operator new(0x40uLL);
  sub_1002E96F0(v2, a1);
  return v2;
}

void sub_1002E919C(_Unwind_Exception *a1)
{
}

void *sub_1002E91B0(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  sub_100242040(v2, a1);
  return v2;
}

void sub_1002E91E4(_Unwind_Exception *a1)
{
}

void *sub_1002E91F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = operator new(0x20uLL);
  sub_1005C5DA8(v6, a1, a2, a3);
  return v6;
}

void sub_1002E9244(_Unwind_Exception *a1)
{
}

uint64_t sub_1002E9258()
{
  if (qword_1008D93D0 != -1) {
    dispatch_once(&qword_1008D93D0, &stru_100890238);
  }
  return qword_1008D93C8;
}

id sub_1002E9298()
{
  if (_os_feature_enabled_impl("BluetoothFeatures", "FindMyBTDeviceManagement"))
  {
    if (qword_1008EFDE8 != -1) {
      dispatch_once(&qword_1008EFDE8, &stru_100890218);
    }
    id v0 = (id)qword_1008EFDE0;
  }

  else
  {
    id v0 = 0LL;
  }

  return v0;
}

void sub_1002E92FC(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[SPOwnerInterface cbPeripheralManagementSession]( &OBJC_CLASS___SPOwnerInterface,  "cbPeripheralManagementSession"));
  uint64_t v2 = (void *)qword_1008EFDE0;
  qword_1008EFDE0 = v1;
}

void *sub_1002E9328()
{
  if (qword_1008D93E0 != -1) {
    dispatch_once(&qword_1008D93E0, &stru_100890258);
  }
  return off_1008D93D8;
}

void sub_1002E9368(id a1)
{
  uint64_t v1 = operator new(0x80uLL);
  sub_100263CA0((uint64_t)v1);
  qword_1008D93C8 = (uint64_t)v1;
}

void sub_1002E9398(_Unwind_Exception *a1)
{
}

void sub_1002E93AC(id a1)
{
  uint64_t v1 = operator new(0xF0uLL);
  sub_1004F66A8((uint64_t)v1);
  off_1008D93D8 = v1;
}

void sub_1002E93DC(_Unwind_Exception *a1)
{
}

id sub_1002E93F0(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (qword_1008EFDF8 != -1) {
    dispatch_once(&qword_1008EFDF8, &stru_100890278);
  }
  id v8 = (id)qword_1008EFDF0;
  int v9 = v8;
  if (v8)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 localizations]);
    uint64_t v11 = objc_claimAutoreleasedReturnValue(+[NSLocale preferredLanguages](&OBJC_CLASS___NSLocale, "preferredLanguages"));
    uint64_t v12 = (void *)v11;
    if (!v10
      || !v11
      || ((uint64_t v13 = objc_autoreleasePoolPush(),
           uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSBundle preferredLocalizationsFromArray:forPreferences:]( NSBundle,  "preferredLocalizationsFromArray:forPreferences:",  v10,  v12)),  v15 = (void *)objc_claimAutoreleasedReturnValue([v14 firstObject]),  v14,  !v15)
        ? (id v16 = 0LL)
        : (id v16 = (id)objc_claimAutoreleasedReturnValue([v9 localizedStringForKey:v5 value:v6 table:v7 localization:v15])),
          v15,
          objc_autoreleasePoolPop(v13),
          !v16))
    {
      id v16 = (id)objc_claimAutoreleasedReturnValue([v9 localizedStringForKey:v5 value:v6 table:v7]);
    }
  }

  else
  {
    id v16 = v6;
  }

  return v16;
}

void sub_1002E9568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1002E95B8(void *a1, void *a2)
{
  id v2 = sub_1002E93F0(a1, a2, @"Localizable");
  return (id)objc_claimAutoreleasedReturnValue(v2);
}

id sub_1002E95D8(void *a1, void *a2)
{
  id v2 = sub_1002E93F0(a1, a2, @"Localizable-Internal");
  return (id)objc_claimAutoreleasedReturnValue(v2);
}

void sub_1002E95F8(id a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSURL fileURLWithPath:]( &OBJC_CLASS___NSURL,  "fileURLWithPath:",  @"/System/Library/PrivateFrameworks/MobileBluetooth.framework"));
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithURL:](&OBJC_CLASS___NSBundle, "bundleWithURL:"));
  id v2 = (void *)qword_1008EFDF0;
  qword_1008EFDF0 = v1;
}

void sub_1002E9660( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void *sub_1002E9674(void *a1, uint64_t a2)
{
  *a1 = off_1008902A8;
  a1[1] = off_100890398;
  int v3 = (_DWORD)a1 + 8;
  a1[2] = a2;
  int v4 = (_DWORD)a1 + 24;
  uint64_t v5 = sub_1004050C8();
  uint64_t v6 = sub_100207EC0(v4, v3, "com.apple.BTServer.avrcp", *(dispatch_queue_t *)(v5 + 8));
  sub_100207EFC(v6);
  return a1;
}

void sub_1002E96DC(_Unwind_Exception *a1)
{
}

void sub_1002E96F4(uint64_t a1)
{
  *(void *)(a1 + 16) = 0LL;
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472LL;
  v1[2] = sub_1002E9750;
  v1[3] = &unk_10087EB20;
  v1[4] = a1;
  sub_100207FA8(a1 + 24, v1);
}

uint64_t sub_1002E9750(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 200LL))(result);
  }
  return result;
}

void sub_1002E9768(uint64_t a1, uint64_t a2, int a3)
{
  if ((a3 - 501) <= 0xB && ((0xF1Fu >> (a3 + 11)) & 1) != 0)
  {
    int64_t v5 = qword_1006C10D0[a3 - 501];
    xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v6, "kCommand", v5);
    sub_1003FE1B4((unsigned __int8 *)(a2 + 128), __p);
    if (v9 >= 0) {
      id v7 = __p;
    }
    else {
      id v7 = (void **)__p[0];
    }
    xpc_dictionary_set_string(v6, "kSource", (const char *)v7);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    sub_1002E9854(a1, "SendCommand", v6, 0LL);
  }

void sub_1002E9838( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002E9854(uint64_t a1, char *a2, void *a3, void *a4)
{
  uint64_t v6 = a1 + 24;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_1002EC658;
  v8[3] = &unk_1008904A0;
  id v9 = a4;
  uint64_t v10 = a2;
  id v7 = v9;
  sub_100208104(v6, a2, a3, v8);
}

void sub_1002E98E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1002E9900(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1002E999C;
  v4[3] = &unk_1008903B8;
  id v5 = a2;
  uint64_t v6 = a1;
  id v3 = v5;
  sub_1002E9854(a1, "GetSettings", 0LL, v4);
}

void sub_1002E9984( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E999C(uint64_t a1, int a2, xpc_object_t xdict)
{
  int v5 = 1;
  int v6 = 1;
  if (a2 == 4) {
    sub_1002E9A00(a1, xdict, &v6, &v5);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

unint64_t sub_1002E9A00(int a1, xpc_object_t xdict, _DWORD *a3, _DWORD *a4)
{
  unint64_t int64 = xpc_dictionary_get_int64(xdict, "kRepeatMode");
  unint64_t result = xpc_dictionary_get_int64(xdict, "kShuffleMode");
  if (result <= 3) {
    *a4 = dword_1006C1140[result];
  }
  return result;
}

void sub_1002E9A7C(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1002E9B18;
  v4[3] = &unk_1008903E0;
  id v5 = a2;
  id v3 = v5;
  sub_1002E9854(a1, "GetPlayStatus", 0LL, v4);
}

void sub_1002E9B00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002E9B18(uint64_t a1, int a2, xpc_object_t xdict)
{
  if (a2 == 4)
  {
    xpc_dictionary_get_double(xdict, "kTrackDuration");
    xpc_dictionary_get_double(xdict, "kTrackPosition");
    xpc_dictionary_get_int64(xdict, "kPlaybackState");
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002E9BB8(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1002E9C54;
  v4[3] = &unk_1008903E0;
  id v5 = a2;
  id v3 = v5;
  sub_1002E9854(a1, "GetElementAttributes", 0LL, v4);
}

void sub_1002E9C3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1002E9C54(uint64_t a1, int a2, void *a3)
{
  __int128 v19 = 0u;
  memset(&__p, 0, sizeof(__p));
  *(_OWORD *)__int16 v17 = 0u;
  *(_OWORD *)__int16 v18 = 0u;
  *(_OWORD *)uint64_t v15 = 0u;
  __int128 v16 = 0u;
  *(_OWORD *)uint64_t v14 = 0u;
  sub_10002418C(v14, "");
  sub_10002418C(&v15[1], "");
  sub_10002418C(v17, "");
  sub_10002418C(&v18[1], "");
  sub_10002418C(&__p, "");
  if (a2 == 4)
  {
    string = xpc_dictionary_get_string(a3, "kTitle");
    if (string) {
      std::string::assign((std::string *)v14, string);
    }
    id v7 = xpc_dictionary_get_string(a3, "kAlbum");
    if (v7) {
      std::string::assign((std::string *)v17, v7);
    }
    id v8 = xpc_dictionary_get_string(a3, "kArtist");
    if (v8) {
      std::string::assign((std::string *)&v15[1], v8);
    }
    id v9 = xpc_dictionary_get_string(a3, "kGenre");
    if (v9) {
      std::string::assign((std::string *)&v18[1], v9);
    }
    xpc_object_t value = xpc_dictionary_get_value(a3, "kQueueIndex");
    if (value) {
      xpc_int64_get_value(value);
    }
    xpc_object_t v11 = xpc_dictionary_get_value(a3, "kQueueCount");
    if (v11) {
      xpc_int64_get_value(v11);
    }
    xpc_object_t v12 = xpc_dictionary_get_value(a3, "kDuration");
    if (v12) {
      xpc_double_get_value(v12);
    }
    uint64_t v13 = xpc_dictionary_get_string(a3, "kImageHandle");
    if (v13) {
      std::string::assign(&__p, v13);
    }
  }

  (*(void (**)(void, BOOL))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32), a2 == 4);
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[1]);
  }
  if (SHIBYTE(v18[0]) < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[1]);
  }
  if (SHIBYTE(v15[0]) < 0) {
    operator delete(v14[0]);
  }
}

void sub_1002E9E84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, void *__p, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
}

uint64_t sub_1002E9F18(uint64_t a1)
{
  return a1;
}

void sub_1002E9F88(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = 3LL;
  uint64_t v5 = -1LL;
  if (a2 == 2) {
    uint64_t v5 = 2LL;
  }
  BOOL v6 = a2 == 3 || a2 == 2;
  if (a2 != 3) {
    uint64_t v4 = v5;
  }
  int v7 = a2 == 1 || v6;
  if (a2 == 1) {
    int64_t v8 = 1LL;
  }
  else {
    int64_t v8 = v4;
  }
  if (a3 == 1)
  {
    int64_t v9 = 1LL;
  }

  else if (a3 == 2)
  {
    int64_t v9 = 3LL;
  }

  else
  {
    if (!v7) {
      return;
    }
    int64_t v9 = -1LL;
  }

  xpc_object_t v10 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_int64(v10, "kRepeatMode", v8);
  xpc_dictionary_set_int64(v10, "kShuffleMode", v9);
  sub_1002E9854(a1, "SetSettings", v10, 0LL);
}

void sub_1002EA070(uint64_t a1, void *a2, uint64_t a3)
{
  xpc_object_t v5 = xpc_array_create(0LL, 0LL);
  for (uint64_t i = *(void *)(a3 + 8); i != a3; uint64_t i = *(void *)(i + 8))
    xpc_array_set_int64(v5, 0xFFFFFFFFFFFFFFFFLL, *(unsigned int *)(i + 16));
  xpc_dictionary_set_value(a2, "kAttributeIDs", v5);
  xpc_release(v5);
}

void sub_1002EA0E4(xpc_object_t xdict@<X1>, uint64_t *a2@<X8>)
{
  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0LL;
  string = (char *)xpc_dictionary_get_string(xdict, "kTitle");
  if (string)
  {
    xpc_object_t v5 = (char *)operator new(0x20uLL);
    sub_10002418C(&v58, string);
    *(_WORD *)xpc_object_t v5 = 106;
    *((_DWORD *)v5 + 1) = 1;
    BOOL v6 = v5 + 8;
    if (SHIBYTE(v59) < 0)
    {
      sub_100024238(v6, (void *)v58, *((unint64_t *)&v58 + 1));
    }

    else
    {
      *(_OWORD *)BOOL v6 = v58;
      *((void *)v5 + 3) = v59;
    }

    int v7 = operator new(0x18uLL);
    v7[1] = a2;
    _DWORD v7[2] = v5;
    uint64_t v8 = *a2;
    *int v7 = *a2;
    *(void *)(v8 + std::istream::~istream(v2, v3 + 8) = v7;
    *a2 = (uint64_t)v7;
    ++a2[2];
    if (SHIBYTE(v59) < 0) {
      operator delete((void *)v58);
    }
  }

  int64_t v9 = (char *)xpc_dictionary_get_string(xdict, "kArtist");
  if (v9)
  {
    xpc_object_t v10 = (char *)operator new(0x20uLL);
    sub_10002418C(&v56, v9);
    *(_WORD *)xpc_object_t v10 = 106;
    *((_DWORD *)v10 + 1) = 2;
    xpc_object_t v11 = v10 + 8;
    if (SHIBYTE(v57) < 0)
    {
      sub_100024238(v11, (void *)v56, *((unint64_t *)&v56 + 1));
    }

    else
    {
      *(_OWORD *)xpc_object_t v11 = v56;
      *((void *)v10 + 3) = v57;
    }

    xpc_object_t v12 = operator new(0x18uLL);
    v12[1] = a2;
    _DWORD v12[2] = v10;
    uint64_t v13 = *a2;
    void *v12 = *a2;
    *(void *)(v13 + std::istream::~istream(v2, v3 + 8) = v12;
    *a2 = (uint64_t)v12;
    ++a2[2];
    if (SHIBYTE(v57) < 0) {
      operator delete((void *)v56);
    }
  }

  uint64_t v14 = (char *)xpc_dictionary_get_string(xdict, "kAlbum");
  if (v14)
  {
    uint64_t v15 = (char *)operator new(0x20uLL);
    sub_10002418C(&v54, v14);
    *(_WORD *)uint64_t v15 = 106;
    *((_DWORD *)v15 + 1) = 3;
    __int128 v16 = v15 + 8;
    if (SHIBYTE(v55) < 0)
    {
      sub_100024238(v16, (void *)v54, *((unint64_t *)&v54 + 1));
    }

    else
    {
      *(_OWORD *)__int128 v16 = v54;
      *((void *)v15 + 3) = v55;
    }

    __int16 v17 = operator new(0x18uLL);
    v17[1] = a2;
    void v17[2] = v15;
    uint64_t v18 = *a2;
    void *v17 = *a2;
    *(void *)(v18 + std::istream::~istream(v2, v3 + 8) = v17;
    *a2 = (uint64_t)v17;
    ++a2[2];
    if (SHIBYTE(v55) < 0) {
      operator delete((void *)v54);
    }
  }

  __int128 v19 = (char *)xpc_dictionary_get_string(xdict, "kTrackNumber");
  if (v19)
  {
    uint64_t v20 = (char *)operator new(0x20uLL);
    sub_10002418C(__p, v19);
    *(_WORD *)uint64_t v20 = 106;
    *((_DWORD *)v20 + 1) = 4;
    BOOL v21 = v20 + 8;
    if (SHIBYTE(v53) < 0)
    {
      sub_100024238(v21, __p[0], (unint64_t)__p[1]);
    }

    else
    {
      *(_OWORD *)BOOL v21 = *(_OWORD *)__p;
      *((void *)v20 + 3) = v53;
    }

    char v22 = operator new(0x18uLL);
    v22[1] = a2;
    v22[2] = v20;
    uint64_t v23 = *a2;
    *char v22 = *a2;
    *(void *)(v23 + std::istream::~istream(v2, v3 + 8) = v22;
    *a2 = (uint64_t)v22;
    ++a2[2];
    if (SHIBYTE(v53) < 0) {
      operator delete(__p[0]);
    }
  }

  char v24 = (char *)xpc_dictionary_get_string(xdict, "kTrackCount");
  if (v24)
  {
    __int16 v25 = (char *)operator new(0x20uLL);
    sub_10002418C(v50, v24);
    *(_WORD *)__int16 v25 = 106;
    *((_DWORD *)v25 + 1) = 5;
    int v26 = v25 + 8;
    if (SHIBYTE(v51) < 0)
    {
      sub_100024238(v26, v50[0], (unint64_t)v50[1]);
    }

    else
    {
      *(_OWORD *)int v26 = *(_OWORD *)v50;
      *((void *)v25 + 3) = v51;
    }

    __int16 v27 = operator new(0x18uLL);
    v27[1] = a2;
    void v27[2] = v25;
    uint64_t v28 = *a2;
    *__int16 v27 = *a2;
    *(void *)(v28 + std::istream::~istream(v2, v3 + 8) = v27;
    *a2 = (uint64_t)v27;
    ++a2[2];
    if (SHIBYTE(v51) < 0) {
      operator delete(v50[0]);
    }
  }

  __int16 v29 = (char *)xpc_dictionary_get_string(xdict, "kGenre");
  if (v29)
  {
    BOOL v30 = (char *)operator new(0x20uLL);
    sub_10002418C(v48, v29);
    *(_WORD *)BOOL v30 = 106;
    *((_DWORD *)v30 + 1) = 6;
    __int16 v31 = v30 + 8;
    if (SHIBYTE(v49) < 0)
    {
      sub_100024238(v31, v48[0], (unint64_t)v48[1]);
    }

    else
    {
      *(_OWORD *)__int16 v31 = *(_OWORD *)v48;
      *((void *)v30 + 3) = v49;
    }

    unsigned int v32 = operator new(0x18uLL);
    v32[1] = a2;
    v32[2] = v30;
    uint64_t v33 = *a2;
    *unsigned int v32 = *a2;
    *(void *)(v33 + std::istream::~istream(v2, v3 + 8) = v32;
    *a2 = (uint64_t)v32;
    ++a2[2];
    if (SHIBYTE(v49) < 0) {
      operator delete(v48[0]);
    }
  }

  int v34 = (char *)xpc_dictionary_get_string(xdict, "kPlayingTime");
  if (v34)
  {
    __int16 v35 = (char *)operator new(0x20uLL);
    sub_10002418C(v46, v34);
    *(_WORD *)__int16 v35 = 106;
    *((_DWORD *)v35 + 1) = 7;
    int v36 = v35 + 8;
    if (SHIBYTE(v47) < 0)
    {
      sub_100024238(v36, v46[0], (unint64_t)v46[1]);
    }

    else
    {
      *(_OWORD *)int v36 = *(_OWORD *)v46;
      *((void *)v35 + 3) = v47;
    }

    __int16 v37 = operator new(0x18uLL);
    v37[1] = a2;
    void v37[2] = v35;
    uint64_t v38 = *a2;
    *__int16 v37 = *a2;
    *(void *)(v38 + std::istream::~istream(v2, v3 + 8) = v37;
    *a2 = (uint64_t)v37;
    ++a2[2];
    if (SHIBYTE(v47) < 0) {
      operator delete(v46[0]);
    }
  }

  __int16 v39 = (char *)xpc_dictionary_get_string(xdict, "kImageHandle");
  if (v39)
  {
    int v40 = (char *)operator new(0x20uLL);
    sub_10002418C(v44, v39);
    *(_WORD *)int v40 = 106;
    *((_DWORD *)v40 + 1) = 8;
    __int128 v41 = v40 + 8;
    if (SHIBYTE(v45) < 0)
    {
      sub_100024238(v41, v44[0], (unint64_t)v44[1]);
    }

    else
    {
      *(_OWORD *)__int128 v41 = *(_OWORD *)v44;
      *((void *)v40 + 3) = v45;
    }

    uint64_t v42 = operator new(0x18uLL);
    v42[1] = a2;
    v42[2] = v40;
    uint64_t v43 = *a2;
    *uint64_t v42 = *a2;
    *(void *)(v43 + std::istream::~istream(v2, v3 + 8) = v42;
    *a2 = (uint64_t)v42;
    ++a2[2];
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
  }

void sub_1002EA65C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
}

void sub_1002EA788(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_int64(v6, "kPlayerId", a2);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_1002EA860;
  v8[3] = &unk_1008903E0;
  id v7 = v5;
  id v9 = v7;
  sub_1002E9854(a1, "SetAddressedPlayer", v6, v8);
}

void sub_1002EA840( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002EA860(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002EA86C(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_int64(v6, "kPlayerId", a2);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_1002EA944;
  v8[3] = &unk_1008903E0;
  id v7 = v5;
  id v9 = v7;
  sub_1002E9854(a1, "SetBrowsedPlayer", v6, v8);
}

void sub_1002EA924( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1002EA944(uint64_t a1, int a2, xpc_object_t xdict)
{
  v7[0] = 0LL;
  v7[1] = v7;
  _DWORD v7[2] = 0x4812000000LL;
  v7[3] = sub_1002EAA88;
  v7[4] = sub_1002EAAD0;
  void v7[5] = 0LL;
  v8[0] = v8;
  v8[1] = v8;
  _DWORD v8[2] = 0LL;
  if (a2 == 4)
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kFolders");
    xpc_dictionary_get_int64(xdict, "kNumItems");
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_1002EAAD8;
    v6[3] = &unk_100890408;
    void v6[4] = v7;
    xpc_array_apply(value, v6);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  _Block_object_dispose(v7, 8);
  sub_1002ECA14(v8);
}

void sub_1002EAA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_1002EAA88(uint64_t *a1, uint64_t a2)
{
  a1[6] = (uint64_t)(a1 + 6);
  a1[7] = (uint64_t)(a1 + 6);
  a1[8] = 0LL;
  return sub_1002ED13C((uint64_t)(a1 + 6), a1 + 6, (void *)(a2 + 48));
}

void sub_1002EAABC(_Unwind_Exception *a1)
{
}

void sub_1002EAAD0(uint64_t a1)
{
}

uint64_t sub_1002EAAD8(uint64_t a1, int a2, xpc_object_t xstring)
{
  string_ptr = (char *)xpc_string_get_string_ptr(xstring);
  id v5 = *(void **)(*(void *)(a1 + 32) + 8LL);
  sub_10002418C(&v9, string_ptr);
  xpc_object_t v6 = operator new(0x28uLL);
  void v6[4] = v10;
  *((_OWORD *)v6 + 1) = v9;
  uint64_t v7 = v5[6];
  v5 += 6;
  void *v6 = v7;
  v6[1] = v5;
  *(void *)(v7 + _Block_object_dispose(va, 8) = v6;
  *id v5 = v6;
  ++v5[2];
  return 1LL;
}

void sub_1002EAB50( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002EAB6C(uint64_t a1, unsigned int a2, BOOL a3, int64_t a4, void *a5)
{
  id v9 = a5;
  xpc_object_t v10 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_int64(v10, "kUidCounter", a2);
  xpc_dictionary_set_BOOL(v10, "kDotDot", a3);
  xpc_dictionary_set_int64(v10, "kUid", a4);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_1002EAC7C;
  v12[3] = &unk_1008903E0;
  id v11 = v9;
  id v13 = v11;
  sub_1002E9854(a1, "ChangePath", v10, v12);
}

void sub_1002EAC5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002EAC7C(uint64_t a1, int a2, xpc_object_t xdict)
{
  if (a2 == 4) {
    xpc_dictionary_get_int64(xdict, "kNumItems");
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002EACCC(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, void *a6)
{
  id v11 = a6;
  xpc_object_t v12 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_int64(v12, "kScope", a2);
  xpc_dictionary_set_int64(v12, "kStartItem", a3);
  xpc_dictionary_set_int64(v12, "kEndItem", a4);
  if (*(void *)(a5 + 16)) {
    sub_1002EA070(v13, v12, a5);
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1002EAE04;
  v15[3] = &unk_100890458;
  uint64_t v17 = a1;
  char v18 = a2;
  id v14 = v11;
  id v16 = v14;
  sub_1002E9854(a1, "GetFolderItems", v12, v15);
}

void sub_1002EADE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void *sub_1002EAE04(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v13 = 0LL;
  id v14 = &v13;
  uint64_t v15 = 0x4812000000LL;
  id v16 = sub_1002EAF58;
  uint64_t v17 = sub_1002EAFA0;
  uint64_t v18 = 0LL;
  v19[0] = v19;
  v19[1] = v19;
  _DWORD v19[2] = 0LL;
  if (a2 == 4)
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kItems");
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_1002EAFA8;
    v11[3] = &unk_100890430;
    char v12 = *(_BYTE *)(a1 + 48);
    v11[4] = &v13;
    v11[5] = v4;
    xpc_array_apply(value, v11);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  xpc_object_t v6 = v14;
  uint64_t v7 = v14 + 6;
  uint64_t v8 = (void *)v14[7];
  while (v8 != v7)
  {
    uint64_t v9 = v8[2];
    if (v9)
    {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
      xpc_object_t v6 = v14;
    }

    uint64_t v8 = (void *)v8[1];
    uint64_t v7 = v6 + 6;
  }

  _Block_object_dispose(&v13, 8);
  return sub_10023DF50(v19);
}

void sub_1002EAF34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_1002EAF58(uint64_t *a1, uint64_t a2)
{
  a1[6] = (uint64_t)(a1 + 6);
  a1[7] = (uint64_t)(a1 + 6);
  a1[8] = 0LL;
  return sub_1002ED13C((uint64_t)(a1 + 6), a1 + 6, (void *)(a2 + 48));
}

void sub_1002EAF8C(_Unwind_Exception *a1)
{
}

void *sub_1002EAFA0(uint64_t a1)
{
  return sub_10023DF50((void *)(a1 + 48));
}

uint64_t sub_1002EAFA8(uint64_t a1, int a2, xpc_object_t xdict)
{
  string = (char *)xpc_dictionary_get_string(xdict, "kName");
  if (*(_BYTE *)(a1 + 48))
  {
    BOOL v6 = xpc_dictionary_get_BOOL(xdict, "kIsFolder");
    int64_t int64 = xpc_dictionary_get_int64(xdict, "kUid");
    if (v6)
    {
      char v8 = xpc_dictionary_get_int64(xdict, "kFolderType");
      uint64_t v9 = (char *)operator new(0x38uLL);
      *((_WORD *)v9 + 4) = 106;
      v9[10] = 2;
      *((void *)v9 + 4) = 0LL;
      *((void *)v9 + 5) = 0LL;
      *((void *)v9 + 3) = 0LL;
      *(void *)uint64_t v9 = &off_100890540;
      v9[48] = v8;
      v9[49] = 0;
    }

    else
    {
      v27[0] = v27;
      v27[1] = v27;
      uint64_t v28 = 0LL;
      xpc_object_t value = xpc_dictionary_get_value(xdict, "kAttributes");
      if (value)
      {
        sub_1002EA0E4(value, &v24);
        sub_10023DF50(v27);
        uint64_t v14 = v26;
        if (v26)
        {
          uint64_t v16 = v24;
          uint64_t v15 = v25;
          uint64_t v17 = *v25;
          *(void *)(v17 + _Block_object_dispose(va, 8) = *(void *)(v24 + 8);
          **(void **)(v16 + _Block_object_dispose(va, 8) = v17;
          uint64_t v18 = v27[0];
          *(void *)(v27[0] + 8LL) = v15;
          *uint64_t v15 = v18;
          *(void *)(v16 + _Block_object_dispose(va, 8) = v27;
          uint64_t v26 = 0LL;
          v27[0] = v16;
          v28 += v14;
        }

        sub_10023DF50(&v24);
      }

      uint64_t v9 = (char *)operator new(0x50uLL);
      sub_1002ECD70((uint64_t)v9, (uint64_t)v27);
      sub_10023DF50(v27);
    }

    *((void *)v9 + 2) = int64;
  }

  else
  {
    unsigned __int8 v10 = xpc_dictionary_get_int64(xdict, "kPlayerId");
    char v11 = xpc_dictionary_get_int64(xdict, "kPlaybackState");
    uint64_t v9 = (char *)operator new(0x50uLL);
    *((_WORD *)v9 + 4) = 106;
    v9[10] = 1;
    *((void *)v9 + 4) = 0LL;
    *((void *)v9 + 5) = 0LL;
    *((void *)v9 + 3) = 0LL;
    *(void *)uint64_t v9 = &off_1008904D0;
    *((_WORD *)v9 + 24) = v10;
    v9[50] = 1;
    *((_DWORD *)v9 + 13) = 0;
    v9[56] = v11;
    if (xpc_dictionary_get_BOOL(xdict, "kIsBrowsable")) {
      char v12 = &xmmword_1006C10B0;
    }
    else {
      char v12 = &xmmword_1006C10C0;
    }
    *(_OWORD *)(v9 + 57) = *v12;
  }

  sub_10002418C(&__str, string);
  std::string::operator=((std::string *)v9 + 1, &__str);
  __int128 v19 = *(void **)(*(void *)(a1 + 32) + 8LL);
  uint64_t v20 = operator new(0x18uLL);
  v20[2] = v9;
  uint64_t v21 = v19[6];
  v19 += 6;
  *uint64_t v20 = v21;
  v20[1] = v19;
  *(void *)(v21 + _Block_object_dispose(va, 8) = v20;
  *__int128 v19 = v20;
  ++v19[2];
  return 1LL;
}

void sub_1002EB218( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
}

void sub_1002EB25C(uint64_t a1, unsigned int a2, int64_t a3, unsigned int a4, uint64_t a5, void *a6)
{
  id v11 = a6;
  xpc_object_t v12 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_int64(v12, "kScope", a2);
  xpc_dictionary_set_int64(v12, "kUid", a3);
  xpc_dictionary_set_int64(v12, "kUidCounter", a4);
  sub_1002EA070(v13, v12, a5);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1002EB388;
  v15[3] = &unk_1008903B8;
  uint64_t v17 = a1;
  id v14 = v11;
  id v16 = v14;
  sub_1002E9854(a1, "GetItemAttributes", v12, v15);
}

void sub_1002EB368( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void *sub_1002EB388(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t v15 = (uint64_t)&v15;
  id v16 = &v15;
  uint64_t v17 = 0LL;
  if (a2 == 4)
  {
    sub_1002EA0E4(xdict, &v12);
    sub_10023DF50(&v15);
    uint64_t v4 = v14;
    if (v14)
    {
      uint64_t v6 = v12;
      id v5 = v13;
      uint64_t v7 = *v13;
      *(void *)(v7 + _Block_object_dispose(va, 8) = *(void *)(v12 + 8);
      **(void **)(v6 + _Block_object_dispose(va, 8) = v7;
      uint64_t v8 = v15;
      *(void *)(v15 + _Block_object_dispose(va, 8) = v5;
      *id v5 = v8;
      *(void *)(v6 + _Block_object_dispose(va, 8) = &v15;
      uint64_t v14 = 0LL;
      uint64_t v15 = v6;
      v17 += v4;
    }

    sub_10023DF50(&v12);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  for (uint64_t i = v16; i != &v15; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v10 = i[2];
    if (v10)
    {
      operator delete((void *)v10);
    }
  }

  return sub_10023DF50(&v15);
}

void sub_1002EB488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_1002EB4A0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  uint64_t v7 = v6;
  else {
    uint64_t v8 = *(const char **)a2;
  }
  xpc_dictionary_set_string(v6, "kSearchString", v8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1002EB584;
  v10[3] = &unk_1008903E0;
  id v9 = v5;
  id v11 = v9;
  sub_1002E9854(a1, "Search", v7, v10);
}

void sub_1002EB564( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002EB584(uint64_t a1, int a2, xpc_object_t xdict)
{
  if (a2 == 4) {
    xpc_dictionary_get_int64(xdict, "kNumItems");
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002EB5D8(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_int64(v6, "kScope", a2);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_1002EB6B0;
  v8[3] = &unk_1008903E0;
  id v7 = v5;
  id v9 = v7;
  sub_1002E9854(a1, "GetTotalNumberOfItems", v6, v8);
}

void sub_1002EB690( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002EB6B0(uint64_t a1, int a2, xpc_object_t xdict)
{
  if (a2 == 4) {
    xpc_dictionary_get_int64(xdict, "kNumItems");
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002EB704(uint64_t a1, unsigned int a2, int64_t a3, unsigned int a4, void *a5)
{
  id v9 = a5;
  xpc_object_t v10 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_int64(v10, "kScope", a2);
  xpc_dictionary_set_int64(v10, "kUid", a3);
  xpc_dictionary_set_int64(v10, "kUidCounter", a4);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_1002EB814;
  v12[3] = &unk_1008903E0;
  id v11 = v9;
  id v13 = v11;
  sub_1002E9854(a1, "PlayItem", v10, v12);
}

void sub_1002EB7F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002EB814(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002EB820(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  id v7 = v6;
  else {
    uint64_t v8 = *(const char **)a2;
  }
  xpc_dictionary_set_string(v6, "kImageHandle", v8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1002EB904;
  v10[3] = &unk_1008903E0;
  id v9 = v5;
  id v11 = v9;
  sub_1002E9854(a1, "GetImageProperties", v7, v10);
}

void sub_1002EB8E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1002EB904(uint64_t a1, int a2, xpc_object_t xdict)
{
  v19[0] = 0LL;
  v19[1] = v19;
  _DWORD v19[2] = 0x4812000000LL;
  void v19[3] = sub_1002EBB74;
  v19[4] = sub_1002EBB98;
  v19[5] = &unk_1007C41D6;
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  v15[0] = 0LL;
  v15[1] = v15;
  v15[2] = 0x4812000000LL;
  v15[3] = sub_1002EBBB0;
  void v15[4] = sub_1002EBBD4;
  v15[5] = &unk_1007C41D6;
  id v16 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  v11[0] = 0LL;
  v11[1] = v11;
  void v11[2] = 0x4812000000LL;
  v11[3] = sub_1002EBBB0;
  v11[4] = sub_1002EBBD4;
  v11[5] = &unk_1007C41D6;
  std::string __p = 0LL;
  id v13 = 0LL;
  uint64_t v14 = 0LL;
  if (!a2)
  {
    xpc_object_t array = xpc_dictionary_get_array(xdict, "kEncodings");
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472LL;
    applier[2] = sub_1002EBBEC;
    applier[3] = &unk_100890408;
    applier[4] = v19;
    xpc_array_apply(array, applier);
    xpc_object_t v6 = xpc_dictionary_get_array(xdict, "kWidths");
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    _DWORD v9[2] = sub_1002EBCE4;
    v9[3] = &unk_100890408;
    void v9[4] = v15;
    xpc_array_apply(v6, v9);
    xpc_object_t v7 = xpc_dictionary_get_array(xdict, "kHeights");
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _DWORD v8[2] = sub_1002EBDC8;
    v8[3] = &unk_100890408;
    void v8[4] = v11;
    xpc_array_apply(v7, v8);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  _Block_object_dispose(v11, 8);
  if (__p)
  {
    id v13 = __p;
    operator delete(__p);
  }

  _Block_object_dispose(v15, 8);
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }

  _Block_object_dispose(v19, 8);
  if (v20)
  {
    uint64_t v21 = v20;
    operator delete(v20);
  }

void sub_1002EBB14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *__p, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40)
{
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }

  _Block_object_dispose(&a33, 8);
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }

  _Block_object_dispose((const void *)(v40 - 136), 8);
  uint64_t v42 = *(void **)(v40 - 88);
  if (v42)
  {
    *(void *)(v40 - 80) = v42;
    operator delete(v42);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1002EBB74(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void sub_1002EBB98(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

__n128 sub_1002EBBB0(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void sub_1002EBBD4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

uint64_t sub_1002EBBEC(uint64_t a1, int a2, xpc_object_t xint)
{
  id v3 = *(void **)(*(void *)(a1 + 32) + 8LL);
  char value = xpc_int64_get_value(xint);
  char v5 = value;
  xpc_object_t v7 = (_BYTE *)v3[7];
  unint64_t v6 = v3[8];
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = v3[6];
    xpc_object_t v10 = &v7[-v9];
    uint64_t v11 = (uint64_t)&v7[-v9 + 1];
    if (v11 < 0) {
      abort();
    }
    unint64_t v12 = v6 - v9;
    if (2 * v12 > v11) {
      uint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v11;
    }
    if (v13) {
      uint64_t v14 = operator new(v13);
    }
    else {
      uint64_t v14 = 0LL;
    }
    uint64_t v15 = &v14[v13];
    v10[(void)v14] = v5;
    uint64_t v8 = (uint64_t)&v10[(void)v14 + 1];
    if (v7 == (_BYTE *)v9)
    {
      uint64_t v14 = &v10[(void)v14];
    }

    else
    {
      id v16 = &v7[~v9];
      do
      {
        char v17 = *--v7;
        (v16--)[(void)v14] = v17;
      }

      while (v7 != (_BYTE *)v9);
      xpc_object_t v7 = (_BYTE *)v3[6];
    }

    void v3[6] = v14;
    v3[7] = v8;
    v3[8] = v15;
    if (v7) {
      operator delete(v7);
    }
  }

  else
  {
    *xpc_object_t v7 = value;
    uint64_t v8 = (uint64_t)(v7 + 1);
  }

  v3[7] = v8;
  return 1LL;
}

uint64_t sub_1002EBCE4(uint64_t a1, int a2, xpc_object_t xint)
{
  id v3 = *(void **)(*(void *)(a1 + 32) + 8LL);
  __int16 value = xpc_int64_get_value(xint);
  __int16 v5 = value;
  unint64_t v6 = (char *)v3[7];
  unint64_t v7 = v3[8];
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v9 = (char *)v3[6];
    uint64_t v10 = v6 - v9;
    if (v6 - v9 <= -3) {
      abort();
    }
    uint64_t v11 = v10 >> 1;
    unint64_t v12 = v7 - (void)v9;
    if (v12 <= (v10 >> 1) + 1) {
      unint64_t v13 = v11 + 1;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v14 = v13;
    }
    if (v14)
    {
      uint64_t v15 = (char *)sub_10024EF1C((uint64_t)(v3 + 8), v14);
      unint64_t v9 = (char *)v3[6];
      unint64_t v6 = (char *)v3[7];
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    id v16 = &v15[2 * v11];
    char v17 = &v15[2 * v14];
    *(_WORD *)id v16 = v5;
    uint64_t v8 = v16 + 2;
    while (v6 != v9)
    {
      __int16 v18 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v16 - 1) = v18;
      v16 -= 2;
    }

    void v3[6] = v16;
    v3[7] = v8;
    v3[8] = v17;
    if (v9) {
      operator delete(v9);
    }
  }

  else
  {
    *(_WORD *)unint64_t v6 = value;
    uint64_t v8 = v6 + 2;
  }

  v3[7] = v8;
  return 1LL;
}

uint64_t sub_1002EBDC8(uint64_t a1, int a2, xpc_object_t xint)
{
  id v3 = *(void **)(*(void *)(a1 + 32) + 8LL);
  __int16 value = xpc_int64_get_value(xint);
  __int16 v5 = value;
  unint64_t v6 = (char *)v3[7];
  unint64_t v7 = v3[8];
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v9 = (char *)v3[6];
    uint64_t v10 = v6 - v9;
    if (v6 - v9 <= -3) {
      abort();
    }
    uint64_t v11 = v10 >> 1;
    unint64_t v12 = v7 - (void)v9;
    if (v12 <= (v10 >> 1) + 1) {
      unint64_t v13 = v11 + 1;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v14 = v13;
    }
    if (v14)
    {
      uint64_t v15 = (char *)sub_10024EF1C((uint64_t)(v3 + 8), v14);
      unint64_t v9 = (char *)v3[6];
      unint64_t v6 = (char *)v3[7];
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    id v16 = &v15[2 * v11];
    char v17 = &v15[2 * v14];
    *(_WORD *)id v16 = v5;
    uint64_t v8 = v16 + 2;
    while (v6 != v9)
    {
      __int16 v18 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v16 - 1) = v18;
      v16 -= 2;
    }

    void v3[6] = v16;
    v3[7] = v8;
    v3[8] = v17;
    if (v9) {
      operator delete(v9);
    }
  }

  else
  {
    *(_WORD *)unint64_t v6 = value;
    uint64_t v8 = v6 + 2;
  }

  v3[7] = v8;
  return 1LL;
}

void sub_1002EBEAC(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, void *a5)
{
  id v9 = a5;
  xpc_object_t v10 = xpc_dictionary_create(0LL, 0LL, 0LL);
  uint64_t v11 = v10;
  else {
    unint64_t v12 = *(const char **)a2;
  }
  xpc_dictionary_set_string(v10, "kImageHandle", v12);
  xpc_dictionary_set_int64(v11, "kWidth", a3);
  xpc_dictionary_set_int64(v11, "kHeight", a4);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_1002EBFC8;
  v14[3] = &unk_1008903E0;
  id v13 = v9;
  id v15 = v13;
  sub_1002E9854(a1, "GetImage", v11, v14);
}

void sub_1002EBFA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002EBFC8(uint64_t a1, int a2, xpc_object_t xdict)
{
  size_t length = 0LL;
  if (!a2) {
    xpc_dictionary_get_data(xdict, "kImageData", &length);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002EC034(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  unint64_t v7 = v6;
  else {
    uint64_t v8 = *(const char **)a2;
  }
  xpc_dictionary_set_string(v6, "kImageHandle", v8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1002EC118;
  v10[3] = &unk_1008903E0;
  id v9 = v5;
  id v11 = v9;
  sub_1002E9854(a1, "GetImage", v7, v10);
}

void sub_1002EC0F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002EC118(uint64_t a1, int a2, xpc_object_t xdict)
{
  size_t length = 0LL;
  if (!a2) {
    xpc_dictionary_get_data(xdict, "kImageData", &length);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002EC184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1002EC1E4;
  v3[3] = &unk_100890478;
  v3[4] = a1;
  void v3[5] = a2;
  void v3[6] = a3;
  sub_1002E9854(a1, "RegisterForPlaybackStateChanges", 0LL, v3);
}

uint64_t (***sub_1002EC1E4( void *a1, int a2, xpc_object_t xdict))(void, int64_t, void, void, void)
{
  uint64_t v4 = a1[4];
  if (a2 == 4) {

  }
    int64_t int64 = xpc_dictionary_get_int64(xdict, "kPlaybackState");
  else {
    int64_t int64 = 0LL;
  }
  __n128 result = *(uint64_t (****)(void, int64_t, void, void, void))(v4 + 16);
  if (result) {
    return (uint64_t (***)(void, int64_t, void, void, void))(**result)( result,  int64,  0LL,  a1[5],  a1[6]);
  }
  return result;
}

void sub_1002EC24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1002EC2AC;
  v3[3] = &unk_100890478;
  v3[4] = a1;
  void v3[5] = a2;
  void v3[6] = a3;
  sub_1002E9854(a1, "RegisterForTrackChanges", 0LL, v3);
}

uint64_t sub_1002EC2AC(void *a1, int a2, xpc_object_t xdict)
{
  uint64_t v4 = a1[4];
  if (a2 == 4) {

  }
    int64_t int64 = xpc_dictionary_get_int64(xdict, "kUid");
  else {
    int64_t int64 = -1LL;
  }
  uint64_t result = *(void *)(v4 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t, int64_t, void, void, void))(*(void *)result + 8LL))( result,  int64,  0LL,  a1[5],  a1[6]);
  }
  return result;
}

void sub_1002EC314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1002EC374;
  v3[3] = &unk_100890478;
  v3[4] = a1;
  void v3[5] = a2;
  void v3[6] = a3;
  sub_1002E9854(a1, "RegisterForSettingsChanges", 0LL, v3);
}

uint64_t sub_1002EC374(void *a1, int a2, xpc_object_t xdict)
{
  uint64_t v4 = a1[4];
  unsigned int v6 = 1;
  unsigned int v7 = 1;
  if (a2 == 4) {
    sub_1002E9A00((int)a1, xdict, &v7, &v6);
  }
  uint64_t result = *(void *)(v4 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)result + 16LL))( result,  v7,  v6,  0LL,  a1[5],  a1[6]);
  }
  return result;
}

void sub_1002EC3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1002EC44C;
  v3[3] = &unk_100890478;
  v3[4] = a1;
  void v3[5] = a2;
  void v3[6] = a3;
  sub_1002E9854(a1, "RegisterForChanges", 0LL, v3);
}

uint64_t sub_1002EC44C(void *a1)
{
  uint64_t result = *(void *)(a1[4] + 16LL);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)result + 24LL))( result,  0LL,  a1[5],  a1[6]);
  }
  return result;
}

void sub_1002EC474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1002EC4D4;
  v3[3] = &unk_100890478;
  v3[4] = a1;
  void v3[5] = a2;
  void v3[6] = a3;
  sub_1002E9854(a1, "RegisterForChanges", 0LL, v3);
}

uint64_t sub_1002EC4D4(void *a1)
{
  uint64_t result = *(void *)(a1[4] + 16LL);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)result + 32LL))( result,  0LL,  a1[5],  a1[6]);
  }
  return result;
}

void sub_1002EC4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1002EC55C;
  v3[3] = &unk_100890478;
  v3[4] = a1;
  void v3[5] = a2;
  void v3[6] = a3;
  sub_1002E9854(a1, "RegisterForPlayerChanges", 0LL, v3);
}

int64_t sub_1002EC55C(void *a1, int a2, xpc_object_t xdict)
{
  uint64_t v4 = a1[4];
  if (a2 == 4) {
    int64_t result = xpc_dictionary_get_int64(xdict, "kPlayerId");
  }
  else {
    int64_t result = 1LL;
  }
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6) {
    return (*(uint64_t (**)(void, void, void, void, void, void))(*(void *)v6 + 40LL))( *(void *)(v4 + 16),  (unsigned __int16)result,  0LL,  0LL,  a1[5],  a1[6]);
  }
  return result;
}

void sub_1002EC5CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1002EC62C;
  v3[3] = &unk_100890478;
  v3[4] = a1;
  void v3[5] = a2;
  void v3[6] = a3;
  sub_1002E9854(a1, "RegisterForChanges", 0LL, v3);
}

uint64_t sub_1002EC62C(void *a1)
{
  uint64_t result = *(void *)(a1[4] + 16LL);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)result + 48LL))( result,  0LL,  0LL,  a1[5],  a1[6]);
  }
  return result;
}

uint64_t sub_1002EC658(uint64_t a1, xpc_object_t object)
{
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    unsigned __int8 int64 = xpc_dictionary_get_int64(object, "kMsgStatus");
    xpc_object_t value = xpc_dictionary_get_value(object, "kMsgArgs");
  }

  else
  {
    uint64_t v4 = (os_log_s *)qword_1008F75D0;
    if (os_log_type_enabled((os_log_t)qword_1008F75D0, OS_LOG_TYPE_ERROR)) {
      sub_10066AE18(a1, object, v4);
    }
    xpc_object_t value = 0LL;
    unsigned __int8 int64 = 3;
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, xpc_object_t))(result + 16))(result, int64, value);
  }
  return result;
}

uint64_t sub_1002EC710(uint64_t a1, char *__s1, void *a3)
{
  if (!strcmp(__s1, "PlayerDidChange"))
  {
    xpc_dictionary_get_int64(a3, "kPlayerId");
    (*(void (**)(void, uint64_t, void, void))(**(void **)(a1 + 16) + 32LL))( *(void *)(a1 + 16),  1LL,  0LL,  0LL);
    unsigned int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 40LL);
    return v7();
  }

  if (!strcmp(__s1, "PlaybackStateDidChange"))
  {
    xpc_dictionary_get_int64(a3, "kPlaybackState");
    uint64_t v6 = ***(uint64_t (****)(void))(a1 + 16);
    return v6();
  }

  if (!strcmp(__s1, "TrackDidChange"))
  {
    int64_t int64 = xpc_dictionary_get_int64(a3, "kUid");
    return (*(uint64_t (**)(void, int64_t, uint64_t, void, void))(**(void **)(a1 + 16) + 8LL))( *(void *)(a1 + 16),  int64,  1LL,  0LL,  0LL);
  }

  if (!strcmp(__s1, "SettingsDidChange"))
  {
    int v11 = 1;
    int v12 = 1;
    sub_1002E9A00(0, a3, &v12, &v11);
    unsigned int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 16LL);
    return v7();
  }

  if (strcmp(__s1, "PlaybackQueueDidChange"))
  {
    if (strcmp(__s1, "LibraryDidChange"))
    {
      uint64_t v10 = sub_1002E6E00();
      sub_1004FC118(v10, 0);
    }

    uint64_t v6 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 48LL);
    return v6();
  }

  return (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 16) + 24LL))( *(void *)(a1 + 16),  1LL,  0LL,  0LL);
}

uint64_t sub_1002EC904(uint64_t a1, char *a2, void *a3)
{
  return sub_1002EC710(a1 - 8, a2, a3);
}

void sub_1002EC90C(uint64_t a1)
{
}

void sub_1002EC95C(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  (*(void (**)(void, void, uint64_t, void, void))(**(void **)(a1 + 8) + 48LL))( *(void *)(a1 + 8),  0LL,  1LL,  0LL,  0LL);
  sub_1002E9854(v1, "RegisterForChanges", 0LL, 0LL);
}

void *sub_1002EC9AC(void *a1)
{
  *a1 = off_1008902A8;
  a1[1] = off_100890398;
  sub_100207EF8((uint64_t)(a1 + 3));
  return a1;
}

void sub_1002EC9E0(void *a1)
{
  *a1 = off_1008902A8;
  a1[1] = off_100890398;
  sub_100207EF8((uint64_t)(a1 + 3));
  operator delete(a1);
}

void sub_1002ECA14(void **a1)
{
  if (a1[2])
  {
    id v3 = (void **)*a1;
    id v2 = (void **)a1[1];
    uint64_t v4 = *v2;
    v4[1] = *((void *)*a1 + 1);
    *v3[1] = v4;
    a1[2] = 0LL;
    if (v2 != a1)
    {
      do
      {
        id v5 = (void **)v2[1];
        sub_1002ECA74((int)a1, v2);
        id v2 = v5;
      }

      while (v5 != a1);
    }
  }

void sub_1002ECA74(int a1, void **__p)
{
}

uint64_t sub_1002ECAA4(uint64_t a1)
{
  *(void *)a1 = off_100890508;
  return a1;
}

void sub_1002ECAE0(void **__p)
{
  *std::string __p = off_100890508;
  operator delete(__p);
}

uint64_t sub_1002ECB1C(uint64_t a1)
{
  else {
    LOWORD(v1) = *(unsigned __int8 *)(a1 + 47);
  }
  return (unsigned __int16)(v1 + 31);
}

uint64_t sub_1002ECB3C()
{
  return 27LL;
}

uint64_t sub_1002ECB44(uint64_t a1, uint64_t a2, __int16 a3)
{
  *(_BYTE *)a2 = *(_BYTE *)(a1 + 10);
  *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a2 + 3) = *(_BYTE *)(a1 + 49);
  *(_BYTE *)(a2 + 5) = *(_BYTE *)(a1 + 50);
  *(_BYTE *)(a2 + 9) = *(_DWORD *)(a1 + 52);
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = BYTE1(*(_DWORD *)(a1 + 52));
  *(_BYTE *)(a2 + 7) = *(_WORD *)(a1 + 54);
  *(_BYTE *)(a2 + 6) = *(_BYTE *)(a1 + 55);
  *(_BYTE *)(a2 + 10) = *(_BYTE *)(a1 + 56);
  *(_OWORD *)(a2 + 11) = *(_OWORD *)(a1 + 57);
  *(_BYTE *)(a2 + 2_Block_object_dispose(va, 8) = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a2 + 27) = *(_BYTE *)(a1 + 9);
  int v4 = sub_1002ECBF0((const std::string *)a1, a2 + 29, (unsigned __int16)(a3 - 29));
  *(_WORD *)(a2 + 1) = bswap32(v4 + 26) >> 16;
  return (unsigned __int16)(v4 + 29);
}

uint64_t sub_1002ECBF0(const std::string *a1, uint64_t a2, unsigned int a3)
{
  else {
    LODWORD(size) = a1[1].__r_.__value_.__s.__size_;
  }
  int v4 = a1 + 1;
  else {
    unsigned int v5 = a3 - 2;
  }
  *(_WORD *)a2 = bswap32(v5) >> 16;
  std::string::copy(v4, (std::string::value_type *)(a2 + 2), (unsigned __int16)v5, 0LL);
  return (unsigned __int16)(v5 + 2);
}

uint64_t sub_1002ECC58(uint64_t a1)
{
  *(void *)a1 = off_100890508;
  return a1;
}

void sub_1002ECC94(void **__p)
{
  *std::string __p = off_100890508;
  operator delete(__p);
}

uint64_t sub_1002ECCD0(uint64_t a1)
{
  else {
    LOWORD(v1) = *(unsigned __int8 *)(a1 + 47);
  }
  return (unsigned __int16)(v1 + 17);
}

uint64_t sub_1002ECCF0()
{
  return 15LL;
}

uint64_t sub_1002ECCF8(const std::string *a1, uint64_t a2, __int16 a3)
{
  *(_BYTE *)a2 = a1->__r_.__value_.__s.__data_[10];
  *(void *)(a2 + 3) = a1->__r_.__value_.__l.__cap_;
  *(_BYTE *)(a2 + 11) = a1[2].__r_.__value_.__s.__data_[0];
  *(_BYTE *)(a2 + 12) = a1[2].__r_.__value_.__s.__data_[1];
  *(_BYTE *)(a2 + 14) = a1->__r_.__value_.__s.__data_[8];
  *(_BYTE *)(a2 + 13) = a1->__r_.__value_.__s.__data_[9];
  int v4 = sub_1002ECBF0(a1, a2 + 15, (unsigned __int16)(a3 - 15));
  *(_WORD *)(a2 + 1) = bswap32(v4 + 12) >> 16;
  return (unsigned __int16)(v4 + 15);
}

uint64_t sub_1002ECD70(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + _Block_object_dispose(va, 8) = 106;
  *(_BYTE *)(a1 + 10) = 3;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + sub_100242FAC(v1 - 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)a1 = &off_100890578;
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 0;
  sub_1002ECF60((void *)(a1 + 56), a2);
  return a1;
}

void sub_1002ECDC8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = off_100890508;
  _Unwind_Resume(exception_object);
}

void sub_1002ECDF4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1002ECFF8(a1);
  operator delete(v1);
}

uint64_t sub_1002ECE08(uint64_t a1)
{
  else {
    LOWORD(v1) = *(unsigned __int8 *)(a1 + 47);
  }
  unsigned __int16 v2 = v1 + 17;
  for (uint64_t i = *(void *)(a1 + 64); i != a1 + 56; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = *(void *)(i + 16);
    else {
      LOWORD(v4) = *(unsigned __int8 *)(v4 + 31);
    }
    v2 += v4 + 8;
  }

  return v2;
}

uint64_t sub_1002ECE60()
{
  return 15LL;
}

uint64_t sub_1002ECE68(const std::string *a1, uint64_t a2, unsigned int a3)
{
  *(_BYTE *)a2 = a1->__r_.__value_.__s.__data_[10];
  *(void *)(a2 + 3) = a1->__r_.__value_.__l.__cap_;
  *(_BYTE *)(a2 + 11) = a1[2].__r_.__value_.__s.__data_[0];
  *(_BYTE *)(a2 + 13) = a1->__r_.__value_.__s.__data_[8];
  *(_BYTE *)(a2 + 12) = a1->__r_.__value_.__s.__data_[9];
  int v6 = sub_1002ECBF0(a1, a2 + 14, (unsigned __int16)(a3 - 15));
  int v7 = v6 + 15;
  uint64_t v8 = (unsigned __int16)(v6 + 14);
  *(_BYTE *)(a2 + v_Block_object_dispose(va, 8) = 0;
  id v9 = &a1[2].__r_.__value_.__s.__data_[8];
  for (std::string::size_type i = a1[2].__r_.__value_.__l.__cap_; (char *)i != v9; std::string::size_type i = *(void *)(i + 8))
  {
    uint64_t v11 = *(void *)(i + 16);
    else {
      LOWORD(v12) = *(unsigned __int8 *)(v11 + 31);
    }
    unsigned __int16 v13 = v12 + 8;
    int v14 = a3 - (unsigned __int16)v7;
    if (v14 < v13) {
      break;
    }
    int v15 = sub_1002ED088(v11, a2 + (unsigned __int16)v7, (unsigned __int16)v14);
    if (!v15) {
      break;
    }
    v7 += v15;
    ++*(_BYTE *)(a2 + v8);
  }

  uint64_t result = (unsigned __int16)v7;
  *(_WORD *)(a2 + 1) = bswap32(v7 - 3) >> 16;
  return result;
}

void *sub_1002ECF60(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1LL;
    int v6 = a1;
    do
    {
      int v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[1] = a1;
      _DWORD v7[2] = v8;
      *int v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      int v6 = v7;
    }

    while (v3 != a2);
  }

  return a1;
}

void sub_1002ECFE4(_Unwind_Exception *a1)
{
}

uint64_t sub_1002ECFF8(uint64_t a1)
{
  *(void *)a1 = &off_100890578;
  unsigned __int16 v2 = (void *)(a1 + 56);
  for (std::string::size_type i = *(void **)(a1 + 64); i != v2; std::string::size_type i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4)
    {
      operator delete((void *)v4);
    }
  }

  sub_10023DF50(v2);
  *(void *)a1 = off_100890508;
  return a1;
}

uint64_t sub_1002ED088(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 >= 8)
  {
    uint64_t v4 = a1;
    *(_BYTE *)(a2 + 3) = *(_DWORD *)(a1 + 4);
    *(_BYTE *)(a2 + 2) = BYTE1(*(_DWORD *)(a1 + 4));
    *(_BYTE *)(a2 + 1) = *(_WORD *)(a1 + 6);
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 7);
    *(_BYTE *)(a2 + 5) = *(_BYTE *)a1;
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 1);
    uint64_t v5 = (const std::string *)(a1 + 8);
    else {
      LODWORD(v4) = *(unsigned __int8 *)(v4 + 31);
    }
    else {
      unsigned int v6 = a3 - 8;
    }
    *(_WORD *)(a2 + 6) = bswap32(v6) >> 16;
    std::string::copy(v5, (std::string::value_type *)(a2 + 8), (unsigned __int16)v6, 0LL);
    return (unsigned __int16)(v6 + 8);
  }

  else
  {
    return 0;
  }

uint64_t sub_1002ED13C(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v5 = *a3;
    uint64_t v4 = (uint64_t *)a3[1];
    uint64_t v6 = *v4;
    *(void *)(v6 + _Block_object_dispose(va, 8) = *(void *)(*a3 + 8LL);
    **(void **)(v5 + _Block_object_dispose(va, 8) = v6;
    uint64_t v7 = *a2;
    *(void *)(v7 + _Block_object_dispose(va, 8) = v4;
    uint64_t *v4 = v7;
    *a2 = v5;
    *(void *)(v5 + _Block_object_dispose(va, 8) = a2;
    *(void *)(result + 16) += v3;
    a3[2] = 0LL;
  }

  return result;
}

void sub_1002ED1C4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___AudioDeviceManager);
  unsigned __int16 v2 = (void *)qword_1008EFE00;
  qword_1008EFE00 = (uint64_t)v1;
}

void sub_1002ED270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1002ED340(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) handleListenerEvent:a2];
}

void sub_1002ED568(_Unwind_Exception *a1)
{
}

void sub_1002ED790( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1002EDABC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002EDAE8(uint64_t a1)
{
  return sub_1002952F4(*(void *)(a1 + 32));
}

void sub_1002EDD6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002EDE54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002EDE6C(uint64_t a1, const void **a2)
{
  uint64_t v4 = 0LL;
  uint64_t v2 = *sub_10023E6A4(a1, &v4, a2);
  if (!v2) {
    abort();
  }
  return v2 + 56;
}

void sub_1002EDF20(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  sub_100457208();
  *(void *)(*(void *)(a1 + 32) + 136LL) = v2;
  uint64_t v3 = (os_log_s *)qword_1008F7570;
  if (os_log_type_enabled((os_log_t)qword_1008F7570, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Created skywalk nexus provider", v4, 2u);
  }

void sub_1002EDFA0(_Unwind_Exception *a1)
{
}

void sub_1002EE084( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002EE1D4(void *result, void *a2, void *a3)
{
  if (result == a2)
  {
LABEL_4:
    uint64_t result = a2;
  }

  else
  {
    while (*result != *a3)
    {
      if (++result == a2) {
        goto LABEL_4;
      }
    }
  }

  if (result != a2)
  {
    for (std::string::size_type i = result + 1; i != a2; ++i)
    {
      if (*i != *a3) {
        *result++ = *i;
      }
    }
  }

  return result;
}

uint64_t *sub_1002EE2BC(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v9 = 0LL;
  uint64_t v6 = (uint64_t **)sub_10023E6A4((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1002EE35C((uint64_t)a1, a4, v8);
    sub_100029630(a1, v9, v6, v8[0]);
    return v8[0];
  }

  return result;
}

_BYTE *sub_1002EE35C@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[2] = 0LL;
  a3[1] = 0LL;
  uint64_t v6 = a3 + 1;
  uint64_t v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  void *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  uint64_t result = v7 + 32;
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_100024238(result, *(void **)v9, *((void *)v9 + 1));
  }

  else
  {
    __int128 v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)uint64_t result = v10;
  }

  *((void *)v7 + 7) = 0LL;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1002EE3F0(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_10023E740(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1002EE40C(uint64_t **a1, const void **a2)
{
  uint64_t v3 = sub_100024098((uint64_t)a1, a2);
  sub_1002EE450(a1, v3);
  return 1LL;
}

uint64_t *sub_1002EE450(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = sub_1001FDBCC(a1, (uint64_t *)a2);
  operator delete((void *)a2);
  return v3;
}

uint64_t sub_1002EE490(uint64_t a1)
{
  *(void *)a1 = off_100890610;
  *(void *)(a1 + _Block_object_dispose(va, 8) = &off_100890990;
  *(void *)(a1 + 16) = off_1008909A8;
  *(void *)(a1 + 24) = &off_1008909E8;
  *(void *)(a1 + sub_100242FAC(v1 - 32) = off_100890A00;
  *(void *)(a1 + 40) = off_100890A30;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = off_100890A80;
  *(void *)(a1 + 56) = &off_100890AB0;
  *(void *)(a1 + 64) = off_100890AC8;
  *(void *)(a1 + 72) = &off_100890B78;
  *(void *)(a1 + 80) = off_100890B90;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 1sub_100242FAC(v1 - 32) = 0;
  *(_WORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0LL;
  *(_BYTE *)(a1 + 160) = 0;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0LL;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_WORD *)(a1 + 12_Block_object_dispose(va, 8) = 0;
  sub_100242DC4(a1 + 176);
  sub_100242DC4(a1 + 240);
  *(void *)(a1 + 392) = 0LL;
  *(void *)(a1 + 400) = 0LL;
  *(void *)(a1 + 304) = 0LL;
  *(void *)(a1 + 312) = 0LL;
  *(_OWORD *)(a1 + 32_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(void *)(a1 + 376) = 0LL;
  *(void *)(a1 + 384) = a1 + 392;
  *(void *)(a1 + 40_Block_object_dispose(va, 8) = a1 + 416;
  *(void *)(a1 + 416) = 0LL;
  *(void *)(a1 + 440) = 0LL;
  *(void *)(a1 + 44_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 424) = 0LL;
  *(void *)(a1 + 4sub_100242FAC(v1 - 32) = a1 + 440;
  *(_BYTE *)(a1 + 456) = 0;
  *(void *)(a1 + 480) = 0LL;
  *(void *)(a1 + 48_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 464) = 0LL;
  *(void *)(a1 + 472) = a1 + 480;
  *(void *)(a1 + 504) = 0LL;
  *(void *)(a1 + 512) = 0LL;
  *(void *)(a1 + 496) = a1 + 504;
  *(_DWORD *)(a1 + 54_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 52_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 531) = 0;
  *(void *)(a1 + 536) = 0LL;
  *(_BYTE *)(a1 + 544) = 0;
  *(void *)(a1 + 570) = 0LL;
  *(void *)(a1 + 556) = 0LL;
  *(void *)(a1 + 564) = 0LL;
  *(_BYTE *)(a1 + 57_Block_object_dispose(va, 8) = 1;
  *(_DWORD *)(a1 + 580) = -1;
  *(void *)(a1 + 584) = 0LL;
  *(_WORD *)(a1 + 592) = 0;
  *(void *)(a1 + 596) = 0LL;
  *(_DWORD *)(a1 + 60_Block_object_dispose(va, 8) = 0;
  *(_WORD *)(a1 + 612) = 0;
  *(_OWORD *)(a1 + 6sub_100242FAC(v1 - 32) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_DWORD *)(a1 + 64_Block_object_dispose(va, 8) = 1065353216;
  *(void *)(a1 + 672) = 0LL;
  *(void *)(a1 + 664) = 0LL;
  *(void *)(a1 + 656) = a1 + 664;
  *(void *)(a1 + 800) = 0LL;
  return a1;
}

void sub_1002EE60C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002EE634(uint64_t a1)
{
  if ((sub_100487D9C() & 1) != 0)
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100890E18);
    }
    sub_10000876C((uint64_t)off_1008D5F48 + 240, a1 + 32);
    if (qword_1008D67A8 != -1) {
      dispatch_once(&qword_1008D67A8, &stru_100890E38);
    }
    sub_10052AB64(off_1008D67A0, a1 + 16);
    if (qword_1008D60D0 != -1) {
      dispatch_once(&qword_1008D60D0, &stru_100890E58);
    }
    sub_1004229CC(off_1008D60C8, a1 + 24);
    if (qword_1008D6198 != -1) {
      dispatch_once(&qword_1008D6198, &stru_100890E78);
    }
    sub_100447B0C((uint64_t)off_1008D6190, a1 + 40);
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_100890E98);
    }
    sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1 + 48);
    if (qword_1008D5F20 != -1) {
      dispatch_once(&qword_1008D5F20, &stru_100890EB8);
    }
    sub_1006225C0((void *)qword_1008D5F18, a1 + 80);
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100890ED8);
    }
    sub_100594810((uint64_t)off_1008D5F08, a1 + 64, 0);
    if (qword_1008D93F8 != -1) {
      dispatch_once(&qword_1008D93F8, &stru_100890EF8);
    }
    sub_10048B8E4(qword_1008D93F0, a1 + 8);
    uint64_t v2 = sub_1002E8D54();
    sub_100328570(v2 + 1208, a1 + 56);
    uint64_t v3 = sub_1002E8D54();
    sub_1001FCB98(v3 + 288, a1 + 72);
    uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v5 = *(void **)(a1 + 304);
    *(void *)(a1 + 304) = v4;

    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v7 = *(void **)(a1 + 312);
    *(void *)(a1 + 312) = v6;

    uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v9 = *(void **)(a1 + 328);
    *(void *)(a1 + 32_Block_object_dispose(va, 8) = v8;

    __int128 v10 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v11 = *(void **)(a1 + 336);
    *(void *)(a1 + 336) = v10;

    uint64_t v12 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    unsigned __int16 v13 = *(void **)(a1 + 344);
    *(void *)(a1 + 344) = v12;

    int v14 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    int v15 = *(void **)(a1 + 800);
    *(void *)(a1 + 800) = v14;

    id v16 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    char v17 = *(void **)(a1 + 352);
    *(void *)(a1 + 352) = v16;

    __int16 v18 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v19 = *(void **)(a1 + 360);
    *(void *)(a1 + 360) = v18;

    uint64_t v20 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v21 = *(void **)(a1 + 368);
    *(void *)(a1 + 36_Block_object_dispose(va, 8) = v20;

    uint64_t v22 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v23 = *(void **)(a1 + 376);
    *(void *)(a1 + 376) = v22;

    sub_100328EA0(a1 + 384, *(void **)(a1 + 392));
    *(void *)(a1 + 392) = 0LL;
    *(void *)(a1 + 400) = 0LL;
    *(void *)(a1 + 384) = a1 + 392;
    xpc_object_t v24 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_BOOL(v24, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_int64(v24, XPC_ACTIVITY_DELAY, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_int64(v24, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_MIN);
    xpc_dictionary_set_string(v24, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_1002EEA78;
    handler[3] = &unk_100890BA8;
    handler[4] = a1;
    xpc_activity_register(off_1008D93E8, v24, handler);
    sub_1002EED08(a1);
    *(_BYTE *)(a1 + 681) = 0;
    *(_BYTE *)(a1 + 684) = 0;
    *(_BYTE *)(a1 + 682) = sub_1002EEF8C();
    *(_BYTE *)(a1 + 683) = 0;
    *(_OWORD *)(a1 + 736) = 0u;
    *(_OWORD *)(a1 + 752) = 0u;
    *(_OWORD *)(a1 + 76_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 780) = 0u;
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
  {
    sub_10066B0A8();
  }

void sub_1002EEA68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002EEA78(uint64_t a1)
{
}

void sub_1002EEA80(void *a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Sending all day metrics to CoreAnalytics",  (uint8_t *)&v14,  2u);
  }

  sub_10031F804((uint64_t)a1);
  uint64_t v3 = sub_100405218();
  int v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472LL;
  id v16 = sub_100320668;
  char v17 = &unk_10087EB20;
  __int16 v18 = a1;
  sub_100405384(v3, &v14);
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_100890F58);
  }
  sub_10060D784((uint64_t)off_1008D6600);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_100890F78);
  }
  sub_10028DC54(off_1008D67C0);
  uint64_t v4 = a1[12];
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
  uint64_t v5 = sub_100405218();
  int v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472LL;
  id v16 = sub_100321F64;
  char v17 = &unk_10087EB20;
  __int16 v18 = a1;
  sub_100405384(v5, &v14);
  uint64_t v6 = sub_100405218();
  int v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472LL;
  id v16 = sub_10032220C;
  char v17 = &unk_10087EB20;
  __int16 v18 = a1;
  sub_100405384(v6, &v14);
  uint64_t v7 = sub_100405218();
  int v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472LL;
  id v16 = sub_100322340;
  char v17 = &unk_10087EB20;
  __int16 v18 = a1;
  sub_100405384(v7, &v14);
  uint64_t v8 = sub_100405218();
  int v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472LL;
  id v16 = sub_100322588;
  char v17 = &unk_10087EB20;
  __int16 v18 = a1;
  sub_100405384(v8, &v14);
  uint64_t v9 = sub_100405218();
  int v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472LL;
  id v16 = sub_1003226D0;
  char v17 = &unk_10087EB20;
  __int16 v18 = a1;
  sub_100405384(v9, &v14);
  uint64_t v10 = sub_100405218();
  int v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472LL;
  id v16 = sub_100322804;
  char v17 = &unk_10087EB20;
  __int16 v18 = a1;
  sub_100405384(v10, &v14);
  uint64_t v11 = sub_100405218();
  int v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472LL;
  id v16 = sub_100327674;
  char v17 = &unk_10087EB20;
  __int16 v18 = a1;
  sub_100405384(v11, &v14);
  uint64_t v12 = sub_100405218();
  int v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472LL;
  id v16 = sub_10032792C;
  char v17 = &unk_10087EB20;
  __int16 v18 = a1;
  sub_100405384(v12, &v14);
  (*(void (**)(void *))(*a1 + 656LL))(a1);
  uint64_t v13 = sub_100405218();
  int v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472LL;
  id v16 = sub_100322BE0;
  char v17 = &unk_10087EB20;
  __int16 v18 = a1;
  sub_100405384(v13, &v14);
}

void sub_1002EED08(uint64_t a1)
{
  unsigned int v10 = 90;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(v8, "HID");
  sub_10002418C(&__p, "HIDLatencyAnomalyThreshold");
  char v3 = (*(uint64_t (**)(uint64_t, void **, void **, unsigned int *))(*(void *)v2 + 128LL))( v2,  v8,  &__p,  &v10);
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v9 < 0)
  {
    operator delete(v8[0]);
    if ((v3 & 1) != 0) {
      goto LABEL_5;
    }
LABEL_8:
    unsigned int v10 = 90;
    goto LABEL_9;
  }

  if ((v3 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_5:
  if (v10 <= 7)
  {
    *(_BYTE *)(a1 + 680) = 0;
    goto LABEL_11;
  }

  if (v10 <= 0xB)
  {
    char v4 = 1;
    goto LABEL_10;
  }

  if (v10 <= 0xF)
  {
    char v4 = 2;
    goto LABEL_10;
  }

  if (v10 <= 0x16)
  {
    char v4 = 3;
    goto LABEL_10;
  }

  if (v10 <= 0x1E)
  {
    char v4 = 4;
    goto LABEL_10;
  }

  if (v10 <= 0x2D)
  {
    char v4 = 5;
    goto LABEL_10;
  }

  if (v10 <= 0x3C)
  {
    char v4 = 6;
    goto LABEL_10;
  }

  if (v10 > 0x5A)
  {
    if (v10 > 0x78)
    {
      if (v10 > 0x96)
      {
        if (v10 > 0x1F4)
        {
          if (v10 > 0x2EE) {
            char v4 = 12;
          }
          else {
            char v4 = 11;
          }
        }

        else
        {
          char v4 = 10;
        }
      }

      else
      {
        char v4 = 9;
      }
    }

    else
    {
      char v4 = 8;
    }

    goto LABEL_10;
  }

void sub_1002EEF44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002EEF8C()
{
  unsigned __int8 valuePtr = 0;
  id v0 = (const __CFNumber *)CFPreferencesCopyAppValue(@"BTPowerStateMonitorNumOfDays", @"com.apple.BTServer");
  if (v0)
  {
    uint64_t v1 = v0;
    CFNumberGetValue(v0, kCFNumberCharType, &valuePtr);
    CFRelease(v1);
  }

  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v6 = valuePtr;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "readBTPowerStateMonitorNumOfDays : numOfDays = %d",  buf,  8u);
  }

  return valuePtr;
}

uint64_t sub_1002EF068(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Registering for Core Time Change Notification",  buf,  2u);
  }

  char v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 578);
    *(_DWORD *)__int128 buf = 67109120;
    int v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Core Time Initial AutoDateTimeEnabled: %d",  buf,  8u);
  }

  uint64_t v5 = *(dispatch_queue_s **)(sub_100405218() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_1002EF1A0;
  handler[3] = &unk_10088E280;
  handler[4] = a1;
  return notify_register_dispatch("SignificantTimeChangeNotification", (int *)(a1 + 580), v5, handler);
}

void sub_1002EF1A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(_BYTE *)(v1 + 57_Block_object_dispose(va, 8) = TMIsAutomaticTimeEnabled() != 0;
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(v1 + 578);
    v4[0] = 67109120;
    v4[1] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Core Time Changed: AutoDateTimeEnabled: %d",  (uint8_t *)v4,  8u);
  }

uint64_t sub_1002EF258(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100405218();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768LL;
  _DWORD v5[2] = sub_1002EF37C;
  v5[3] = &unk_100890BC8;
  v5[4] = a1;
  sub_100328860((uint64_t)v6, (uint64_t)v7);
  sub_100405384(v3, v5);
  sub_100328B0C((uint64_t)v6);
  return sub_100328B0C((uint64_t)v7);
}

void sub_1002EF350( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

void sub_1002EF37C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  memset(&v60, 0, sizeof(v60));
  sub_10026C9EC((unsigned __int8 *)(a1 + 40), 3, &v60);
  memset(&v59, 0, sizeof(v59));
  sub_10026C9EC((unsigned __int8 *)(a1 + 104), 8, &v59);
  memset(&v58, 0, sizeof(v58));
  sub_10026C9EC((unsigned __int8 *)(a1 + 112), 8, &v58);
  memset(&v57, 0, sizeof(v57));
  sub_10026C9EC((unsigned __int8 *)(a1 + 288), 20, &v57);
  memset(&__p, 0, sizeof(__p));
  sub_10026C9EC((unsigned __int8 *)(a1 + 308), 20, &__p);
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v4 = &v60;
  }
  else {
    int v4 = (std::stringbuf::string_type *)v60.__r_.__value_.__r.__words[0];
  }
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v4));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v5, @"oui");

  int v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *(unsigned __int8 *)(a1 + 43)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v6, @"isHIDServicePresent");

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 44)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v7, @"chipsetManufacturerName");

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 46)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v8, @"lmpSubVersion");

  int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *(unsigned __int8 *)(a1 + 48)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v9, @"lmpVersion");

  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 50)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v10, @"gATTVersion");

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 52)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v11, @"wIAPVersion");

  __int16 v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 54)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v12, @"mapProfileVersion");

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 56)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v13, @"handsfreeVersion");

  char v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 58)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v14, @"handsfreeFeatures");

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 60)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v15, @"a2DPVersion");

  id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 62)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v16, @"a2DPFeatures");

  char v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 64)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v17, @"aVRCPVersion");

  __int16 v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 66)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v18, @"aVRCPFeatures");

  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 68)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v19, @"pNPVersion");

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 70)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v20, @"obexObjectPushVersion");

  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 72)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v21, @"serialPortVersion");

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 74)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v22, @"hIDVersion");

  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 76)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v23, @"aVDTPVersion");

  xpc_object_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 78)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v24, @"aVCTPVersion");

  __int16 v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 80)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v25, @"vendorIDSource");

  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 84)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v26, @"vendorID");

  __int16 v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 88)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v27, @"productID");

  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 92)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v28, @"version");

  __int16 v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 96)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v29, @"fwVersion");

  BOOL v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 100)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v30, @"classOfDevice");

  if ((v59.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int16 v31 = &v59;
  }
  else {
    __int16 v31 = (std::stringbuf::string_type *)v59.__r_.__value_.__r.__words[0];
  }
  unsigned int v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v31));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v32, @"linkLayerRemoteSupportedFeatures");

  if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v33 = &v58;
  }
  else {
    uint64_t v33 = (std::stringbuf::string_type *)v58.__r_.__value_.__r.__words[0];
  }
  int v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v33));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v34, @"classicExtendedFeaturesPage1");

  __int16 v35 = (void *)(a1 + 120);
  int v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v35));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v36, @"bundleID");

  __int16 v37 = (void *)(a1 + 144);
  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v37));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v38, @"disManufacturerNameString");

  __int16 v39 = (void *)(a1 + 168);
  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v39));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v40, @"disModelNumberString");

  __int128 v41 = (void *)(a1 + 192);
  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v41));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v42, @"carVendorName");

  uint64_t v43 = (void *)(a1 + 216);
  int v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v43));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v44, @"disHardwareRevisionString");

  uint64_t v45 = (void *)(a1 + 240);
  int64_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v45));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v46, @"disFirmwareRevisionString");

  uint64_t v47 = (void *)(a1 + 264);
  BOOL v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v47));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v48, @"disSoftwareRevisionString");

  if ((v57.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v49 = &v57;
  }
  else {
    uint64_t v49 = (std::stringbuf::string_type *)v57.__r_.__value_.__r.__words[0];
  }
  uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v49));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v50, @"primaryHash");

  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  __int128 v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_p));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v52, @"secondaryHash");

  uint64_t v53 = (void *)(a1 + 328);
  if (*(char *)(a1 + 351) < 0)
  {
    if (!*(void *)(a1 + 336)) {
      goto LABEL_36;
    }
    uint64_t v53 = (void *)*v53;
    goto LABEL_35;
  }

  if (*(_BYTE *)(a1 + 351))
  {
LABEL_35:
    __int128 v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v53));
    -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v54, @"friendlyName");
  }

void sub_1002EFC34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(a1);
}

void sub_1002EFD68(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  id v6 = sub_10031F4E4(a1, v5);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = sub_10031F77C((uint64_t)v7, a2);
  int v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  _DWORD v19[2] = sub_10031F7FC;
  void v19[3] = &unk_100890D40;
  id v10 = v7;
  id v20 = v10;
  int v11 = AnalyticsSendEventLazy(v9, v19);
  __int16 v12 = (os_log_s *)qword_1008F7578;
  if (v11)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEBUG)) {
      sub_10066B0D4((uint64_t)v9, v12, v13, v14, v15, v16, v17, v18);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v22 = v9;
    __int16 v23 = 1024;
    int v24 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "BT Stats for metric '%@' sent to CoreAnalytics with result %u",  buf,  0x12u);
  }
}

void sub_1002EFEC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002EFF00(uint64_t a1, uint64_t a2)
{
  return sub_100328860(a1 + 40, a2 + 40);
}

uint64_t sub_1002EFF0C(uint64_t a1)
{
  return sub_100328B0C(a1 + 40);
}

void sub_1002EFF14(uint64_t a1, _OWORD *a2)
{
  v5[0] = 0LL;
  v5[1] = v5;
  v5[3] = sub_1002EFFE0;
  v5[4] = nullsub_203;
  _DWORD v5[2] = 0x5012000000LL;
  void v5[5] = &unk_1007C41D6;
  v6[0] = *a2;
  *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)((char *)a2 + 12);
  uint64_t v3 = *(dispatch_queue_s **)(sub_100405218() + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1002EFFF8;
  v4[3] = &unk_100880D70;
  void v4[4] = v5;
  void v4[5] = a1;
  dispatch_async(v3, v4);
  _Block_object_dispose(v5, 8);
}

void sub_1002EFFC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

__n128 sub_1002EFFE0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(__n128 *)(a1 + 4_Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_1002EFFF8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  unsigned __int16 v2 = *(_WORD *)(v1 + 116) + *(_WORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 60LL);
  *(_WORD *)(v1 + 116) = v2;
  int v3 = *(_DWORD *)(v1 + 108);
  *(_DWORD *)(v1 + 104) = (*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 48LL) + *(_DWORD *)(v1 + 104)) / v2;
  *(_DWORD *)(v1 + 10_Block_object_dispose(va, 8) = (*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 52LL) + v3) / v2;
  *(_DWORD *)(v1 + 112) = (*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 56LL) + *(_DWORD *)(v1 + 112)) / v2;
  *(_WORD *)(v1 + 118) += *(_WORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 62LL);
  *(_WORD *)(v1 + 120) += *(_WORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 64LL);
  *(_WORD *)(v1 + 122) += *(_WORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 66LL);
  *(_WORD *)(v1 + 124) += *(_WORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 68LL);
  *(_WORD *)(v1 + 126) += *(_WORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 70LL);
  *(_WORD *)(v1 + 128) += *(_WORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 72LL);
  return result;
}

void sub_1002F00F8(uint64_t a1, void *a2)
{
}

void sub_1002F0104(uint64_t a1, void *a2)
{
  id v6 = a2;
  int v3 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"CBWHBMetricsKeyEventType"]);
  int v4 = v3;
  if (v3)
  {
    if ([v3 isEqualToString:@"RSSILevelEvent"])
    {
      unsigned int v5 = 120;
LABEL_8:
      sub_1002EFD68(a1, v5, v6);
      goto LABEL_9;
    }

    if ([v4 isEqualToString:@"CoexUpdateEvent"])
    {
      unsigned int v5 = 119;
      goto LABEL_8;
    }

    if ([v4 isEqualToString:@"WhbStateEvent"])
    {
      unsigned int v5 = 121;
      goto LABEL_8;
    }
  }

void sub_1002F01AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1002F01CC(uint64_t a1, void *a2)
{
}

void sub_1002F01D8(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v26 = a1;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  int v3 = @"No Sync";
  if (a2[4] == 1) {
    int v3 = @"NACK or CRC";
  }
  if (a2[4]) {
    int v4 = v3;
  }
  else {
    int v4 = @"No ReTx";
  }
  if (*((_BYTE *)a2 + 44))
  {
    unsigned int v5 = sub_10012D6D8(*a2);
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100890ED8);
    }
    id v6 = sub_10059A5A8((uint64_t)off_1008D5F08, (uint64_t)v5);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    if (v7)
    {
      if (qword_1008D5F10 != -1) {
        dispatch_once(&qword_1008D5F10, &stru_100890ED8);
      }
      id v8 = off_1008D5F08;
      sub_100241F90(v33, v7);
      uint64_t v9 = sub_10059A9DC((uint64_t)v8, v33);
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_100890F18);
      }
      id v10 = sub_1005D6684((uint64_t)off_1008D5F28, v7);
      int v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      __int16 v12 = v11;
      if (v11 && (unint64_t)objc_msgSend(v11, "length", v26) >= 5)
      {
        uint64_t v13 = (unsigned __int8 *)[v12 bytes];
        HIDWORD(v30) = *v13;
        LODWORD(v30) = *(unsigned __int16 *)(v13 + 1);
        LODWORD(v29) = *(unsigned __int16 *)(v13 + 3);
      }

      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_100890F18);
      }
      if (sub_1005D37CC((uint64_t)off_1008D5F28, v7, 11LL)) {
        uint64_t v28 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  "Magnet",  +[NSString defaultCStringEncoding](&OBJC_CLASS___NSString, "defaultCStringEncoding")));
      }
      else {
        uint64_t v28 = @"Unspecified";
      }
    }

    else
    {
      uint64_t v9 = 0LL;
      uint64_t v28 = @"Unspecified";
    }
  }

  else
  {
    uint64_t v14 = *((void *)a2 + 6);
    if (v14) {
      sub_1003D55EC(v14, (_DWORD *)&v30 + 1, &v30, &v29, (_DWORD *)&v29 + 1);
    }
    uint64_t v9 = 0LL;
    uint64_t v28 = @"Unspecified";
  }

  v31[0] = @"AvgRSSI";
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithShort:]( &OBJC_CLASS___NSNumber,  "numberWithShort:",  (__int16)a2[2],  v26));
  v32[0] = v15;
  v31[1] = @"AvgSNR";
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](&OBJC_CLASS___NSNumber, "numberWithShort:", (__int16)a2[3]));
  v32[1] = v16;
  void v31[2] = @"AvgPacketType";
  else {
    uint64_t v17 = (unsigned __int16 *)*((void *)a2 + 2);
  }
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v17));
  v32[2] = v18;
  v32[3] = v4;
  v31[3] = @"ReTxReason";
  v31[4] = @"IsLEDevice";
  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *((unsigned __int8 *)a2 + 44)));
  v32[4] = v19;
  v31[5] = @"PeripheralLatency";
  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v9));
  v32[5] = v20;
  void v31[6] = @"PID";
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  v29));
  v32[6] = v21;
  v31[7] = @"VID";
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  v30));
  v32[7] = v22;
  v31[8] = @"Version";
  __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", HIDWORD(v29)));
  v32[8] = v23;
  v31[9] = @"VIDSource";
  int v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", HIDWORD(v30)));
  v31[10] = @"LEDeviceUseCase";
  v32[9] = v24;
  _BYTE v32[10] = v28;
  __int16 v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v32,  v31,  11LL));

  sub_1002EFD68(v27, 0x46u, v25);
}

void sub_1002F0620( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void sub_1002F06F0(uint64_t a1, int *a2)
{
  if ((sub_100487D9C() & 1) != 0)
  {
    int v3 = *a2;
    v214 = a2;
    switch(*a2)
    {
      case 13:
        v242[0] = @"AvgRSSI";
        int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a2[1]));
        v243[0] = v4;
        v242[1] = @"AvgPER";
        unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  a2[2]));
        v243[1] = v5;
        v242[2] = @"RecentRSSI";
        id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a2[3]));
        v243[2] = v6;
        v242[3] = @"RecentPER";
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  a2[4]));
        v243[3] = v7;
        v242[4] = @"PID";
        id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  a2[5]));
        v243[4] = v8;
        v242[5] = @"VID";
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  a2[6]));
        v243[5] = v9;
        id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v243,  v242,  6LL));

        sub_1002EFD68(a1, 0x5Fu, v10);
        goto LABEL_44;
      case 14:
        v254[0] = @"LastDisconnectedTime";
        __int16 v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a2 + 1)));
        v254[1] = @"Version";
        v255[0] = v23;
        int v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *((unsigned __int8 *)a2 + 4)));
        v255[1] = v24;
        __int16 v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v255,  v254,  2LL));

        sub_1002EFD68(a1, 0x69u, v25);
        goto LABEL_44;
      case 15:
        v250[0] = @"Version";
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *((unsigned __int8 *)a2 + 4)));
        v251[0] = v26;
        v250[1] = @"Reason";
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  a2[2]));
        v251[1] = v27;
        v250[2] = @"StartTime";
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a2 + 2)));
        v251[2] = v28;
        v250[3] = @"StopTime";
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a2 + 3)));
        v251[3] = v29;
        v250[4] = @"Duration";
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a2 + 4)));
        v251[4] = v30;
        v250[5] = @"UpgradeCount";
        __int16 v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  a2[10]));
        v251[5] = v31;
        v250[6] = @"UpgradeDuration";
        unsigned int v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a2 + 6)));
        v251[6] = v32;
        v250[7] = @"TimeBetweenUpgrades";
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a2 + 7)));
        v251[7] = v33;
        int v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v251,  v250,  8LL));

        sub_1002EFD68(a1, 0x6Au, v34);
        goto LABEL_44;
      case 16:
        v248[0] = @"Reason";
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a2 + 1)));
        v249[0] = v35;
        v248[1] = @"Tech";
        int v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *((unsigned __int8 *)a2 + 16)));
        v249[1] = v36;
        v248[2] = @"StartTime";
        __int16 v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a2 + 3)));
        v249[2] = v37;
        v248[3] = @"StopTime";
        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a2 + 4)));
        v249[3] = v38;
        v248[4] = @"Duration";
        __int16 v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a2 + 5)));
        v249[4] = v39;
        v248[5] = @"AverageThroughput";
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  a2[12]));
        v249[5] = v40;
        v248[6] = @"PayloadSize";
        __int128 v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a2 + 7)));
        v249[6] = v41;
        v248[7] = @"UpgradeTime";
        uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a2 + 8)));
        v249[7] = v42;
        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v249,  v248,  8LL));

        sub_1002EFD68(a1, 0x6Bu, v43);
        goto LABEL_44;
      case 17:
        v246[0] = @"Module";
        int v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  a2[1]));
        v247[0] = v44;
        v246[1] = @"Line";
        uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  a2[2]));
        v247[1] = v45;
        v246[2] = @"Error";
        int64_t v46 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  a2[3]));
        v247[2] = v46;
        uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v247,  v246,  3LL));

        sub_1002EFD68(a1, 0x6Cu, v47);
        goto LABEL_44;
      case 18:
        v244[0] = @"Connected";
        BOOL v48 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *((unsigned __int8 *)a2 + 4)));
        v245[0] = v48;
        v244[1] = @"StartTime";
        uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a2 + 1)));
        v245[1] = v49;
        v244[2] = @"StopTime";
        uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a2 + 2)));
        v245[2] = v50;
        v244[3] = @"Duration";
        uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a2 + 3)));
        v245[3] = v51;
        v244[4] = @"UpgradeCount";
        __int128 v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  a2[8]));
        v245[4] = v52;
        v244[5] = @"UpgradeDuration";
        uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a2 + 5)));
        v245[5] = v53;
        v244[6] = @"TimeBetweenUpgrades";
        __int128 v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a2 + 6)));
        v245[6] = v54;
        v244[7] = @"RSSI";
        uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  *((void *)a2 + 7)));
        v245[7] = v55;
        __int128 v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v245,  v244,  8LL));

        sub_1002EFD68(a1, 0x6Du, v56);
        goto LABEL_44;
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
        goto LABEL_45;
      case 24:
        std::stringbuf::string_type v57 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        std::stringbuf::string_type v58 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  a2[1]));
        -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v58, @"LEPhyType");

        std::stringbuf::string_type v59 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  a2[5]));
        -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v59, @"LeCoexDenials");

        std::stringbuf::string_type v60 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  a2[4]));
        -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v60, @"LeDurationInMs");

        int v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  a2[2]));
        -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v61, @"CumulativeLeTxBytes");

        __int16 v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  a2[3]));
        -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v62, @"CumulativeLeRxBytes");

        uint64_t v63 = *((void *)a2 + 3);
        uint64_t v216 = *((void *)a2 + 4);
        if (v63 != v216)
        {
          uint64_t v64 = 0LL;
          uint64_t v65 = 0LL;
          do
          {
            v66 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LETxPerVsRssi_PER_%02lu",  v65));
            char v67 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LETxPerVsRssi_PER_%02lu",  v65));
            uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LETxPerVsRssi_PER_%02lu",  v65));
            int v69 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  **(unsigned int **)(v63 + 8 * v65)));
            -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v66, v69);

            std::string::size_type v70 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(v63 + 8 * v65) + 4LL)));
            -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v67, v70);

            __int16 v71 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(v63 + 8 * v65) + 8LL)));
            -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v68, v71);

            ++v65;
            v64 += 8LL;
          }

          while (v63 + v64 != v216);
        }

        uint64_t v72 = *((void *)v214 + 6);
        uint64_t v217 = *((void *)v214 + 7);
        if (v72 != v217)
        {
          uint64_t v73 = 0LL;
          uint64_t v74 = 0LL;
          do
          {
            int v75 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LERxPerVsRssi_PER_%02lu",  v74));
            std::string v76 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LERxPerVsRssi_PER_%02lu",  v74));
            v77 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LERxPerVsRssi_PER_%02lu",  v74));
            v78 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  **(unsigned int **)(v72 + 8 * v74)));
            -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v75, v78);

            char v79 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(v72 + 8 * v74) + 4LL)));
            -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v76, v79);

            std::string::size_type v80 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(v72 + 8 * v74) + 8LL)));
            -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v77, v80);

            ++v74;
            v73 += 8LL;
          }

          while (v72 + v73 != v217);
        }

        uint64_t v81 = *((void *)v214 + 18);
        uint64_t v218 = *((void *)v214 + 19);
        if (v81 != v218)
        {
          uint64_t v82 = 0LL;
          uint64_t v83 = 0LL;
          do
          {
            __int128 v84 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"ClTxPerVsRssi_PER_%02lu",  v83));
            v85 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"ClTxPerVsRssi_PER_%02lu",  v83));
            __int128 v86 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"ClTxPerVsRssi_PER_%02lu",  v83));
            v87 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  **(unsigned int **)(v81 + 8 * v83)));
            -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v84, v87);

            v88 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(v81 + 8 * v83) + 4LL)));
            -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v85, v88);

            __int128 v89 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(v81 + 8 * v83) + 8LL)));
            -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v86, v89);

            ++v83;
            v82 += 8LL;
          }

          while (v81 + v82 != v218);
        }

        uint64_t v90 = *((void *)v214 + 21);
        uint64_t v219 = *((void *)v214 + 22);
        if (v90 != v219)
        {
          uint64_t v91 = 0LL;
          uint64_t v92 = 0LL;
          do
          {
            v93 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"ClRxPerVsRssi_PER_%02lu",  v92));
            int v94 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"ClRxPerVsRssi_PER_%02lu",  v92));
            v95 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"ClRxPerVsRssi_PER_%02lu",  v92));
            v96 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  **(unsigned int **)(v90 + 8 * v92)));
            -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v93, v96);

            int v97 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(v90 + 8 * v92) + 4LL)));
            -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v94, v97);

            v98 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(v90 + 8 * v92) + 8LL)));
            -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v95, v98);

            ++v92;
            v91 += 8LL;
          }

          while (v90 + v91 != v219);
        }

        uint64_t v99 = *((void *)v214 + 9);
        uint64_t v100 = *((void *)v214 + 10);
        if (v99 != v100)
        {
          uint64_t v101 = 0LL;
          uint64_t v102 = 0LL;
          do
          {
            char v103 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"DisconnectDetailsLeCoexDenials_%02lu",  v102));
            v104 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v99 + 4 * v102)));
            -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v103, v104);

            ++v102;
            v101 += 4LL;
          }

          while (v99 + v101 != v100);
        }

        uint64_t v105 = *((void *)v214 + 12);
        uint64_t v106 = *((void *)v214 + 13);
        if (v105 != v106)
        {
          uint64_t v107 = 0LL;
          uint64_t v108 = 0LL;
          do
          {
            __int16 v109 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"DisconnectDetailsLeRSSI_%02lu",  v108));
            __int16 v110 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v105 + 4 * v108)));
            -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v109, v110);

            ++v108;
            v107 += 4LL;
          }

          while (v105 + v107 != v106);
        }

        int v111 = (unsigned int *)*((void *)v214 + 24);
        int v112 = (unsigned int *)*((void *)v214 + 25);
        if (v111 != v112)
        {
          uint64_t v113 = 0LL;
          do
          {
            __int16 v114 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"DisconnectDetailsClCoexDenials_%02d",  v113));
            int v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *v111));
            -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v114, v115);

            uint64_t v113 = (v113 + 1);
            ++v111;
          }

          while (v111 != v112);
        }

        int v116 = (unsigned int *)*((void *)v214 + 27);
        int v117 = (unsigned int *)*((void *)v214 + 28);
        if (v116 != v117)
        {
          uint64_t v118 = 0LL;
          do
          {
            v119 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"DisconnectDetailsClRssi_%02d",  v118));
            v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *v116));
            -[NSMutableDictionary setObject:forKey:](v57, "setObject:forKey:", v119, v120);

            uint64_t v118 = (v118 + 1);
            ++v116;
          }

          while (v116 != v117);
        }

        sub_1002EFD68(a1, 0x6Eu, v57);

        goto LABEL_44;
      default:
        if (v3 != 4) {
          goto LABEL_45;
        }
        v252[0] = @"ActivityType";
        int v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *((unsigned __int8 *)a2 + 36)));
        v253[0] = v11;
        v252[1] = @"AllowDups";
        __int16 v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *((unsigned __int8 *)a2 + 34)));
        v253[1] = v12;
        v252[2] = @"AppExecutionState";
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *((unsigned __int8 *)a2 + 32)));
        v253[2] = v13;
        v252[3] = @"BundleIdentifier";
        uint64_t v14 = a2 + 2;
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v14));
        v253[3] = v15;
        v252[4] = @"ExtensionPointTarget";
        uint64_t v16 = a2 + 10;
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v16));
        v253[4] = v17;
        v252[5] = @"IsGeneralDiscoveryScan";
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *((unsigned __int8 *)a2 + 33)));
        v253[5] = v18;
        v252[6] = @"ParentBundleIdentifier";
        __int128 v19 = a2 + 16;
        id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v19));
        v253[6] = v20;
        v252[7] = @"SupportBackground";
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *((unsigned __int8 *)a2 + 35)));
        v253[7] = v21;
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v253,  v252,  8LL));

        sub_1002EFD68(a1, 0x66u, v22);
LABEL_44:
        a2 = v214;
        int v3 = *v214;
LABEL_45:
        BOOL v121 = v3 == 8 || v3 == 6;
        if (!v121) {
          return;
        }
        id v220 = *((id *)a2 + 5);
        if (qword_1008D5F10 != -1) {
          dispatch_once(&qword_1008D5F10, &stru_100890ED8);
        }
        uint64_t v122 = off_1008D5F08;
        sub_100241F90(__p, v220);
        uint64_t v123 = sub_10059A848((uint64_t)v122, __p);
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_100890F18);
        }
        unsigned int v210 = sub_1005D8E2C((uint64_t)off_1008D5F28, v220);
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_100890F18);
        }
        id v124 = sub_1005D6684((uint64_t)off_1008D5F28, v220);
        v125 = (void *)objc_claimAutoreleasedReturnValue(v124);
        id v208 = v125;
        if (v125 && (unint64_t)[v125 length] >= 5)
        {
          __int16 v126 = (unsigned __int8 *)[v208 bytes];
          uint64_t v127 = *v126;
          unsigned __int16 v128 = *(_WORD *)(v126 + 1);
          unsigned int v205 = *(unsigned __int16 *)(v126 + 3);
        }

        else
        {
          unsigned int v205 = 0;
          unsigned __int16 v128 = 0;
          uint64_t v127 = 0LL;
        }

        v221 = 0LL;
        v222[0] = 0LL;
        v222[1] = 0LL;
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_100890F18);
        }
        sub_1005CE910((uint64_t)off_1008D5F28, v220, (uint64_t *)&v221);
        unsigned __int16 v204 = v128;
        v129 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
        __int16 v130 = v221;
        if (v221 != v222)
        {
          do
          {
            if (-[NSMutableString length](v129, "length")) {
              -[NSMutableString appendString:](v129, "appendString:", @",");
            }
            v131 = objc_alloc(&OBJC_CLASS___NSString);
            __int16 v132 = v130 + 4;
            v133 = -[NSString initWithUTF8String:](v131, "initWithUTF8String:", v132);
            -[NSMutableString appendString:](v129, "appendString:", v133);

            v134 = v130[1];
            if (v134)
            {
              do
              {
                v135 = (char **)v134;
                v134 = *(char **)v134;
              }

              while (v134);
            }

            else
            {
              do
              {
                v135 = (char **)v130[2];
                BOOL v121 = *v135 == (char *)v130;
                __int16 v130 = v135;
              }

              while (!v121);
            }

            __int16 v130 = v135;
          }

          while (v135 != v222);
        }

        uint64_t v136 = sub_1002E6E00();
        v137 = v214;
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v136 + 8LL))(v136))
        {
          v209 = @"NA";
          goto LABEL_91;
        }

        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_100890F18);
        }
        sub_1005CC0D4((uint64_t)off_1008D5F28, v220, (uint64_t)__p);
        if (v224 >= 0) {
          uint64_t v138 = HIBYTE(v224);
        }
        else {
          uint64_t v138 = *(void *)&__p[8];
        }
        if (SHIBYTE(v224) < 0)
        {
          operator delete(*(void **)__p);
          if (v138)
          {
LABEL_81:
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_100890F18);
            }
            sub_1005CC0D4((uint64_t)off_1008D5F28, v220, (uint64_t)__p);
            if (v224 >= 0) {
              v139 = __p;
            }
            else {
              v139 = *(_BYTE **)__p;
            }
            v209 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  v139));
            v137 = v214;
            if (SHIBYTE(v224) < 0) {
              operator delete(*(void **)__p);
            }
LABEL_91:
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_100890F18);
            }
            int v140 = sub_1005CE2FC((uint64_t)off_1008D5F28, v220);
            int v202 = v140;
            if (v140 >= 0x20000)
            {
              if (v140 >= 327680)
              {
                if (v140 > 589824)
                {
                  if (v140 <= 2147418111)
                  {
                    switch(v140)
                    {
                      case 589825:
                        v141 = "FindNearbyPencil";
                        break;
                      case 655360:
                        v141 = "AccessDigitalHomeKey";
                        break;
                      case 786432:
                        v141 = "ProxControlDeviceClose";
                        break;
                      default:
LABEL_206:
                        v141 = "?";
                        break;
                    }
                  }

                  else
                  {
                    switch(v140)
                    {
                      case 2147418112:
                        v141 = "InternalTestNoLockScan";
                        break;
                      case 2147418113:
                        v141 = "InternalTestNoScreenOffScan";
                        break;
                      case 2147418114:
                        v141 = "InternalTestScanWithNoDups";
                        break;
                      case 2147418115:
                        v141 = "InternalTestScanWithDups";
                        break;
                      case 2147418116:
                        v141 = "InternalTestScanFor20Seconds";
                        break;
                      case 2147418117:
                        v141 = "InternalTestActiveScan";
                        break;
                      case 2147418118:
                        v141 = "InternalTestUUIDScan";
                        break;
                      case 2147418119:
                        v141 = "InternalTestScanFor10ClockSeconds";
                        break;
                      case 2147418120:
                        v141 = "InternalTestScanBoost";
                        break;
                      default:
                        goto LABEL_206;
                    }
                  }
                }

                else if (v140 > 458752)
                {
                  switch(v140)
                  {
                    case 524288:
                      v141 = "ADPD";
                      break;
                    case 524289:
                      v141 = "ADPDBuffer";
                      break;
                    case 524290:
                      v141 = "MicroLocation";
                      break;
                    case 524291:
                      v141 = "MicroLocationLeech";
                      break;
                    default:
                      if (v140 == 458753)
                      {
                        v141 = "PrecisionFindingFindee";
                      }

                      else
                      {
                        if (v140 != 589824) {
                          goto LABEL_206;
                        }
                        v141 = "FindNearbyRemote";
                      }

                      break;
                  }
                }

                else
                {
                  switch(v140)
                  {
                    case 393216:
                      v141 = "CaptiveNetworkJoin";
                      break;
                    case 393217:
                      v141 = "UseCaseSIMTransfer";
                      break;
                    case 393218:
                      v141 = "MacSetup";
                      break;
                    case 393219:
                      v141 = "AppleIDSignIn";
                      break;
                    case 393220:
                      v141 = "AppleIDSignInSettings";
                      break;
                    default:
                      if (v140 == 327680)
                      {
                        v141 = "RapportThirdParty";
                      }

                      else
                      {
                        if (v140 != 458752) {
                          goto LABEL_206;
                        }
                        v141 = "PrecisionFindingFinder";
                      }

                      break;
                  }
                }
              }

              else
              {
                switch(v140)
                {
                  case 131072:
                    v141 = "SharingDefault";
                    break;
                  case 131073:
                    v141 = "SharingPhoneAutoUnlock";
                    break;
                  case 131074:
                    v141 = "SharingSiriWatchAuth";
                    break;
                  case 131075:
                    v141 = "SharingMacAutoUnlock";
                    break;
                  case 131076:
                    v141 = "SharingEDTScreenOn";
                    break;
                  case 131077:
                    v141 = "SharingEDTWiFiDisabled";
                    break;
                  case 131078:
                    v141 = "SharingEDTWombatEligibleAsDefaultCamera";
                    break;
                  case 131079:
                    v141 = "SharingEDTWombatCameraPicker";
                    break;
                  case 131080:
                    v141 = "SharingWombatBackground";
                    break;
                  case 131081:
                    v141 = "SharingUniversalControl";
                    break;
                  case 131082:
                    v141 = "SharingPeopleProximity";
                    break;
                  case 131083:
                    v141 = "SharingEDTEnsembleOpenDisplayPrefs";
                    break;
                  case 131084:
                    v141 = "SharingEDTNearbydMotionStopped";
                    break;
                  case 131085:
                    v141 = "SharingDoubleBoostGenericScan";
                    break;
                  case 131086:
                    v141 = "SharingEDTIncomingAdvertisement ";
                    break;
                  case 131087:
                    v141 = "SharingEDTWombatStreamStart";
                    break;
                  case 131088:
                    v141 = "SharingOYAutoUnlock";
                    break;
                  case 131089:
                    goto LABEL_206;
                  case 131090:
                    v141 = "SharingAirDrop";
                    break;
                  case 131091:
                    v141 = "SharingNearbyInvitationHost";
                    break;
                  case 131092:
                    v141 = "SharingNearbyInvitationParticipant";
                    break;
                  case 131093:
                    v141 = "SharingAirDropAskToAirDrop";
                    break;
                  case 131094:
                    v141 = "SharingAirDropTempIdentity";
                    break;
                  case 131095:
                    v141 = "SharingAirDropNeedsCLink";
                    break;
                  case 131096:
                    v141 = "SharingRemoteWidgetUpdate";
                    break;
                  case 131097:
                    v141 = "SharingCountryCodeUpdate";
                    break;
                  case 131098:
                    v141 = "SharingMacPhoneAutoUnlock";
                    break;
                  case 131099:
                    v141 = "SharingVisionProDiscovery";
                    break;
                  case 131100:
                    v141 = "SharingVisionProStateChange";
                    break;
                  case 131101:
                    v141 = "SharingContinuityScreen";
                    break;
                  case 131102:
                    v141 = "SharingEDTRemoteDisplay";
                    break;
                  default:
                    if (v140 == 196608)
                    {
                      v141 = "DigitalIDTSA";
                    }

                    else
                    {
                      if (v140 != 0x40000) {
                        goto LABEL_206;
                      }
                      v141 = "DigitalCarKeyThirdParty";
                    }

                    break;
                }
              }
            }

            else
            {
              v141 = "Unspecified";
              switch(v140)
              {
                case 0:
                  break;
                case 1:
                  v141 = "HealthKit";
                  break;
                case 2:
                  v141 = "HomeKit";
                  break;
                case 3:
                  v141 = "FindMyObjectConnection";
                  break;
                case 4:
                  v141 = "FindMyObjectConnectionTransient";
                  break;
                case 5:
                  v141 = "MIDI";
                  break;
                case 6:
                  v141 = "Continuity";
                  break;
                case 7:
                  v141 = "InstantHotSpot";
                  break;
                case 8:
                  v141 = "NearBy";
                  break;
                case 9:
                  v141 = "Sharing";
                  break;
                case 10:
                  v141 = "HearingSupport";
                  break;
                case 11:
                  v141 = "Magnet";
                  break;
                case 12:
                  v141 = "HID";
                  break;
                case 13:
                  v141 = "LEA";
                  break;
                case 14:
                  v141 = "External";
                  break;
                case 15:
                  v141 = "ExternalMedical";
                  break;
                case 16:
                  v141 = "ExternalLock";
                  break;
                case 17:
                  v141 = "ExternalWatch";
                  break;
                case 18:
                  v141 = "SmartRouting";
                  break;
                case 19:
                  v141 = "DigitalID";
                  break;
                case 20:
                  v141 = "DigitalKey";
                  break;
                case 21:
                  v141 = "DigitalCarKey";
                  break;
                case 22:
                  v141 = "HeySiri";
                  break;
                case 23:
                  v141 = "ThirdPartyApp";
                  break;
                case 24:
                  v141 = "CNJ";
                  break;
                default:
                  switch(v140)
                  {
                    case 256:
                      v141 = "DevicePresenceDetection";
                      break;
                    case 257:
                      v141 = "AudioBox";
                      break;
                    case 258:
                      v141 = "SIMTransfer";
                      break;
                    case 259:
                      v141 = "ProximityScreenOnLeechScan";
                      break;
                    case 260:
                      v141 = "MacMigrate";
                      break;
                    case 263:
                      v141 = "HIDUARTService";
                      break;
                    case 264:
                      v141 = "AccessibilitySwitchControlPairing";
                      break;
                    case 265:
                      v141 = "BaseBandFastConnect";
                      break;
                    case 266:
                      v141 = "SafetyAlerts";
                      break;
                    case 267:
                      v141 = "LECarPlay";
                      break;
                    case 268:
                      v141 = "TCCBluetooth";
                      break;
                    case 269:
                      v141 = "AOPBufferLeech";
                      break;
                    default:
                      goto LABEL_206;
                  }

                  break;
              }
            }

            v212 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  v141));
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_100890F18);
            }
            double v142 = sub_1005CC610((uint64_t)off_1008D5F28, v220);
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_100890F18);
            }
            double v143 = sub_1005CC728((uint64_t)off_1008D5F28, v220);
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_100890F18);
            }
            double v144 = sub_1005CC7B8((uint64_t)off_1008D5F28, v220);
            if (v143 <= v142) {
              double v145 = 0.0;
            }
            else {
              double v145 = v143 - v142;
            }
            if (v144 <= v142) {
              double v146 = 0.0;
            }
            else {
              double v146 = v144 - v142;
            }
            double Current = CFAbsoluteTimeGetCurrent();
            if (Current <= v144) {
              double v148 = 0.0;
            }
            else {
              double v148 = Current - v144;
            }
            if (qword_1008D5F10 != -1) {
              dispatch_once(&qword_1008D5F10, &stru_100890ED8);
            }
            v149 = off_1008D5F08;
            sub_100241F90(__p, v220);
            uint64_t v150 = sub_10059A9DC((uint64_t)v149, __p);
            if (qword_1008D5F10 != -1) {
              dispatch_once(&qword_1008D5F10, &stru_100890ED8);
            }
            v151 = off_1008D5F08;
            sub_100241F90(__p, v220);
            uint64_t v152 = sub_10059AA88((uint64_t)v151, __p);
            if (qword_1008D5F10 != -1) {
              dispatch_once(&qword_1008D5F10, &stru_100890ED8);
            }
            v153 = off_1008D5F08;
            sub_100241F90(__p, v220);
            uint64_t v154 = sub_10059A8FC((uint64_t)v153, __p);
            if (qword_1008D5F10 != -1) {
              dispatch_once(&qword_1008D5F10, &stru_100890ED8);
            }
            v155 = off_1008D5F08;
            sub_100241F90(__p, v220);
            int v156 = sub_10059A15C((uint64_t)v155, __p);
            if (*v137 == 8)
            {
              v240[0] = @"AppState";
              v203 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *((unsigned __int8 *)v137 + 32)));
              v241[0] = v203;
              v240[1] = @"ConnectionIntervalInSlots";
              v200 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  v123));
              v241[1] = v200;
              v240[2] = @"ConnectionSetupDurationInSec";
              v198 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v146));
              v241[2] = v198;
              v240[3] = @"ConnectionDurationInSec";
              uint64_t v157 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v148));
              v158 = &stru_1008A57D8;
              if (v209) {
                v158 = v209;
              }
              v196 = (void *)v157;
              v241[3] = v157;
              v241[4] = v158;
              v240[4] = @"DeviceName";
              v240[5] = @"IsAppleDevice";
              v194 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v210));
              v241[5] = v194;
              v240[6] = @"IsCentral";
              v192 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v156 == 0));
              v241[6] = v192;
              v240[7] = @"MaxCE";
              v191 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  v154));
              v241[7] = v191;
              v240[8] = @"PeripheralLatency";
              v190 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  v150));
              v241[8] = v190;
              v240[9] = @"PID";
              v159 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  v205));
              v241[9] = v159;
              v240[10] = @"Result";
              v160 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  v137[12]));
              v241[10] = v160;
              v240[11] = @"SessionID";
              v161 = v137 + 2;
              v162 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v161));
              v241[11] = v162;
              v240[12] = @"SupervisionTimeout";
              v163 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  v152));
              v241[12] = v163;
              v241[13] = v129;
              v240[13] = @"Tags";
              v240[14] = @"UseCase";
              v241[14] = v212;
              v240[15] = @"VID";
              v164 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  v204));
              v241[15] = v164;
              v240[16] = @"VendorIDSource";
              v165 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  v127));
              v241[16] = v165;
              v240[17] = @"ConnectionScanCompleteDurationInSec";
              v166 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v145));
              v241[17] = v166;
              v206 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v241,  v240,  18LL));

              double v167 = CFAbsoluteTimeGetCurrent();
              if (qword_1008D5F30 != -1) {
                dispatch_once(&qword_1008D5F30, &stru_100890F18);
              }
              uint64_t v168 = sub_1005CC198((uint64_t)off_1008D5F28, *((void **)v214 + 5), 0);
              id v169 = sub_1005BF848(v168);
              v170 = (void *)objc_claimAutoreleasedReturnValue(v169);
              v171 = @"isAppleDevice";
              if (!v210) {
                v171 = v212;
              }
              v172 = v171;
              *(void *)std::stringbuf::string_type __p = 0LL;
              *(void *)&__p[8] = 0LL;
              sub_100242F28((uint64_t)__p, a1 + 176);
              v173 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v167 - v142));
              uint64_t v174 = objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithObjects:]( &OBJC_CLASS___NSMutableArray,  "arrayWithObjects:",  v172,  v173,  0LL));
              v175 = *(void **)(a1 + 328);
              *(void *)(a1 + 32_Block_object_dispose(va, 8) = v174;

              v176 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 312) objectForKey:v170]);
              BOOL v177 = v176 == 0LL;

              if (v177) {
                [*(id *)(a1 + 312) setObject:*(void *)(a1 + 328) forKeyedSubscript:v170];
              }
              if (v210)
              {
                if ((*(unsigned int (**)(uint64_t, void))(*(void *)a1 + 512LL))( a1,  *((void *)v214 + 5)))
                {
                  ++*(_WORD *)(a1 + 132);
                }
              }

              sub_100242F54((uint64_t)__p);
              sub_1002EFD68(a1, 0x62u, v206);
              sub_100242FAC((uint64_t)__p);

              v178 = v206;
            }

            else
            {
              v226[0] = @"AppState";
              v215 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *((unsigned __int8 *)v137 + 32)));
              v227[0] = v215;
              v226[1] = @"ConnectionIntervalInSlots";
              v201 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  v123));
              v227[1] = v201;
              v226[2] = @"ConnectionSetupDurationInSec";
              uint64_t v179 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v146));
              v180 = &stru_1008A57D8;
              if (v209) {
                v180 = v209;
              }
              v199 = (void *)v179;
              v227[2] = v179;
              v227[3] = v180;
              v226[3] = @"DeviceName";
              v226[4] = @"IsAppleDevice";
              v211 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v210));
              v227[4] = v211;
              v226[5] = @"IsCentral";
              v197 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v156 == 0));
              v227[5] = v197;
              v226[6] = @"MaxCE";
              uint64_t v228 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v154));
              v226[7] = @"PeripheralLatency";
              v195 = (void *)v228;
              v193 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  v150));
              v229 = v193;
              v226[8] = @"PID";
              v207 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  v205));
              v230 = v207;
              v226[9] = @"Result";
              v181 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  v137[13]));
              v231 = v181;
              v226[10] = @"SessionID";
              v182 = v137 + 2;
              v183 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v182));
              v232 = v183;
              v226[11] = @"SupervisionTimeout";
              v184 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  v152));
              v233 = v184;
              v234 = v129;
              v226[12] = @"Tags";
              v226[13] = @"UseCase";
              v235 = v212;
              v226[14] = @"VID";
              v185 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  v204));
              v236 = v185;
              v226[15] = @"VendorIDSource";
              v186 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  v127));
              v237 = v186;
              v226[16] = @"NumberOfPendingLEConnectionsForBundleID";
              v187 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  v137[12]));
              v238 = v187;
              v226[17] = @"ConnectionScanCompleteDurationInSec";
              v188 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v145));
              v239 = v188;
              v178 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v227,  v226,  18LL));

              if ((v202 & 0xFFFF0000) == 0x10000)
              {
                v189 = (os_log_s *)(id)qword_1008F7578;
                if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)std::stringbuf::string_type __p = 138412802;
                  *(void *)&__p[4] = v212;
                  *(_WORD *)&_BYTE __p[12] = 2048;
                  *(double *)&__p[14] = v145;
                  __int16 v224 = 2048;
                  double v225 = v146;
                  _os_log_impl( (void *)&_mh_execute_header,  v189,  OS_LOG_TYPE_DEFAULT,  "LE Connection Perf for %@ connection scan complete: %.3f (sec) connection set-up: %.3f (sec)",  __p,  0x20u);
                }
              }

              sub_1002EFD68(a1, 0x60u, v178);
            }

            sub_10023E78C((uint64_t)&v221, v222[0]);
            return;
          }
        }

        else if (v138)
        {
          goto LABEL_81;
        }

        v209 = @"NA";
        v137 = v214;
        goto LABEL_91;
    }
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_10066B0A8();
  }
}

void sub_1002F2CDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, _Unwind_Exception *exception_object, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  _Unwind_Resume(a1);
}

void sub_1002F32C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29)
{
  sub_10023E78C(&a28, a29);
  JUMPOUT(0x1002F32C0LL);
}

void sub_1002F34F8(uint64_t a1, void *a2, int a3, unsigned int a4, uint64_t a5, void *a6, int a7)
{
  id v12 = a2;
  id v13 = a6;
  uint64_t v14 = v13;
  if (a4 - 9 > 0xFFFFFFF7)
  {
    if (v12 && a5 && v13)
    {
      unsigned int v15 = a4 * a3;
      if (a4 * a3)
      {
        unsigned int v16 = 0;
        do
        {
          switch(a4)
          {
            case 1u:
              uint64_t v17 = *(unsigned __int8 *)(a5 + v16);
              if (a7) {
                uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](&OBJC_CLASS___NSNumber, "numberWithChar:", v17));
              }
              else {
                uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  v17));
              }
              goto LABEL_27;
            case 2u:
              if (a7) {
                uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithShort:]( &OBJC_CLASS___NSNumber,  "numberWithShort:",  *(__int16 *)(a5 + v16)));
              }
              else {
                uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a5 + v16)));
              }
              goto LABEL_27;
            case 3u:
              uint64_t v19 = *(unsigned __int16 *)(a5 + v16) | (*(unsigned __int8 *)(a5 + v16 + 2) << 16);
              if (a7) {
                goto LABEL_16;
              }
              goto LABEL_30;
            case 4u:
              uint64_t v19 = *(unsigned int *)(a5 + v16);
              if (a7) {
LABEL_16:
              }
                uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v19));
              else {
LABEL_30:
              }
                uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  v19));
              goto LABEL_27;
            case 5u:
              unint64_t v20 = *(unsigned int *)(a5 + v16) | ((unint64_t)*(unsigned __int8 *)(a5 + v16 + 4) << 32);
              if (a7) {
                goto LABEL_26;
              }
              goto LABEL_32;
            case 6u:
              unint64_t v20 = *(unsigned int *)(a5 + v16) | ((unint64_t)*(unsigned __int8 *)(a5 + v16 + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(a5 + v16 + 5) << 40);
              if (a7) {
                goto LABEL_26;
              }
              goto LABEL_32;
            case 7u:
              unint64_t v20 = *(unsigned int *)(a5 + v16) | ((unint64_t)*(unsigned __int8 *)(a5 + v16 + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(a5 + v16 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(a5 + v16 + 6) << 48);
              if (a7) {
                goto LABEL_26;
              }
              goto LABEL_32;
            case 8u:
              unint64_t v20 = *(void *)(a5 + v16);
              if (a7) {
LABEL_26:
              }
                uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v20));
              else {
LABEL_32:
              }
                uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v20));
LABEL_27:
              uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@_%u",  v12,  v16 / a4));
              [v14 setObject:v18 forKey:v21];

              break;
            default:
              uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@_%u",  v12,  v16 / a4));
              [v14 setObject:&off_1008C2A50 forKey:v18];
              break;
          }

          v16 += a4;
        }

        while (v16 < v15);
      }
    }

    else
    {
      uint64_t v22 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412802;
        id v24 = v12;
        __int16 v25 = 2048;
        uint64_t v26 = a5;
        __int16 v27 = 2112;
        uint64_t v28 = v14;
        _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "addExpandedArrayToDictionary: Invalid parameters. arrayName: %@, array: %p, dict: %@",  buf,  0x20u);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
  {
    sub_10066B148();
  }
}

void sub_1002F3BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002F3CB8()
{
}

void sub_1002F3CC0(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 4);
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  __int128 v34 = *(_OWORD *)(a2 + 28);
  __int128 v35 = *(_OWORD *)(a2 + 44);
  v36[0] = *(_OWORD *)(a2 + 60);
  *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)(a2 + 72);
  __int128 v33 = *(_OWORD *)(a2 + 12);
  double v4 = *(double *)(a2 + 88);
  __int128 v31 = *(_OWORD *)(a2 + 96);
  int v32 = *(_DWORD *)(a2 + 112);
  unsigned int v5 = v3 - v2;
  if (v2 - 1 >= 0x3B)
  {
    if (v2) {
      unsigned int v6 = vcvtad_u64_f64((double)v2 / 60.0);
    }
    else {
      unsigned int v6 = 0;
    }
  }

  else
  {
    unsigned int v6 = 1;
  }

  if (v5 - 1 >= 0x3B)
  {
    if (v3 == v2) {
      unsigned int v7 = 0;
    }
    else {
      unsigned int v7 = vcvtad_u64_f64((double)v5 / 60.0);
    }
  }

  else
  {
    unsigned int v7 = 1;
  }

  unsigned int v8 = *(_DWORD *)(a2 + 116);
  if (v3 - 1 < 0x3B)
  {
    unsigned int v9 = 1;
LABEL_15:
    int v10 = v8 / v9;
    goto LABEL_18;
  }

  if (v3)
  {
    unsigned int v9 = vcvtad_u64_f64((double)v3 / 60.0);
    if (v9) {
      goto LABEL_15;
    }
  }

  else
  {
    unsigned int v9 = 0;
  }

  int v10 = 0;
LABEL_18:
  uint64_t v11 = *(void *)(a2 + 120);
  if (v6) {
    double v4 = (double)v7 / (double)v6;
  }
  uint64_t v12 = sub_100405218();
  v14[1] = 3221225472LL;
  __int128 v19 = v34;
  __int128 v20 = v35;
  *(_OWORD *)uint64_t v21 = v36[0];
  *(_OWORD *)&v21[12] = *(_OWORD *)((char *)v36 + 12);
  v14[0] = _NSConcreteStackBlock;
  void v14[2] = sub_1002F3ED4;
  v14[3] = &unk_100890BF8;
  void v14[4] = a1;
  unsigned int v15 = v3 - v2;
  unsigned int v16 = v2;
  unsigned int v17 = v3;
  __int128 v18 = v33;
  double v22 = v4;
  __int128 v23 = v31;
  int v24 = v32;
  unsigned int v25 = v8;
  uint64_t v26 = v11;
  int v27 = v10;
  unsigned int v28 = v9;
  unsigned int v29 = v6;
  unsigned int v30 = v7;
  sub_100405384(v12, v14);
}

void sub_1002F3ED4(uint64_t a1)
{
  uint64_t v12 = *(void *)(a1 + 32);
  v17[0] = @"AccessoryPID";
  unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 152)));
  v18[0] = v16;
  v17[1] = @"AoSCategory";
  unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 164)));
  v18[1] = v15;
  void v17[2] = @"EndReason";
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 160)));
  void v18[2] = v14;
  v17[3] = @"EndRetx";
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", *(void *)(a1 + 112)));
  void v18[3] = v13;
  void v17[4] = @"EndRSSI";
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", *(void *)(a1 + 120)));
  v18[4] = v2;
  v17[5] = @"GlitchesPerMin";
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 168)));
  void v18[5] = v3;
  v17[6] = @"ISMvsUBORatio";
  double v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 128)));
  void v18[6] = v4;
  v17[7] = @"StartDelay";
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 144)));
  v18[7] = v5;
  v17[8] = @"StartRetx";
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", *(void *)(a1 + 96)));
  v18[8] = v6;
  v17[9] = @"StartRSSI";
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", *(void *)(a1 + 104)));
  v18[9] = v7;
  v17[10] = @"TotalDuration";
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 172)));
  v18[10] = v8;
  v17[11] = @"5GDuration";
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 176)));
  v18[11] = v9;
  v17[12] = @"2GDuration";
  int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 180)));
  v18[12] = v10;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v17,  13LL));

  sub_1002EFD68(v12, 6u, v11);
}

void sub_1002F41A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(a1);
}

void sub_1002F4264(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 64);
  uint64_t v202 = 0LL;
  uint64_t v201 = 0LL;
  if (v3) {
    sub_1003D55EC(v3, (_DWORD *)&v202 + 1, &v202, &v201, (_DWORD *)&v201 + 1);
  }
  memset(&v200, 0, sizeof(v200));
  sub_10002418C(&v200, "");
  unsigned int v5 = *(_DWORD *)(a2 + 108);
  int v6 = *(_DWORD *)(a2 + 24);
  v197 = 0LL;
  v198 = 0LL;
  v199 = 0LL;
  v194 = 0LL;
  v195 = 0LL;
  v196 = 0LL;
  double v8 = *(double *)(a2 + 128);
  double v7 = *(double *)(a2 + 136);
  if (!v3)
  {
    BOOL v10 = 0;
    v189 = @"Unknown";
    goto LABEL_17;
  }

  sub_1003D01A0(v3, (uint64_t)__p);
  sub_1002F5CB4((uint64_t)__p, &__str);
  std::string::operator=(&v200, &__str);
  if (v193 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v200.__r_.__value_.__s.__size_ < 0)
  {
    if (v200.__r_.__value_.__l.__size_)
    {
      unsigned int v9 = (std::string *)v200.__r_.__value_.__r.__words[0];
      goto LABEL_14;
    }

LABEL_137:
  unsigned int v177 = 0;
LABEL_138:
  unsigned int v76 = *(_DWORD *)(a2 + 412);
  if (v76)
  {
    unsigned int v147 = (v76 >> 1) & 1;
    unsigned int v149 = *(_DWORD *)(a2 + 412) & 1;
    unsigned int v145 = (v76 >> 2) & 1;
    unsigned int v143 = (v76 >> 3) & 1;
    if (v44) {
      goto LABEL_140;
    }
LABEL_143:
    unsigned int v179 = 0;
    if (v37) {
      goto LABEL_141;
    }
    goto LABEL_144;
  }

  unsigned int v149 = 0;
  unsigned int v147 = 0;
  unsigned int v145 = 0;
  unsigned int v143 = 0;
  if (!v44) {
    goto LABEL_143;
  }
LABEL_140:
  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  unsigned int v179 = ((double)*(unint64_t *)&v4 / (double)v44 * 100.0);
  if (v37)
  {
LABEL_141:
    unsigned int v169 = *(_DWORD *)a2 / v37;
    unsigned int v167 = *(_DWORD *)(a2 + 8) / v37;
    unsigned int v165 = *(_DWORD *)(a2 + 16) / v37;
    unsigned int v171 = *(_DWORD *)(a2 + 28) / v37;
    goto LABEL_145;
  }

  uint64_t v141 = 0;
  unsigned int v91 = sub_1002E6E00();
  sub_10002418C(buf, "MediumR1ScanInterval");
  sub_10002418C(v158, "interval");
  unsigned int v92 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, int *))(*(void *)v91 + 88LL))(v91, buf, v158, &v141);
  if (v161 < 0) {
    operator delete(*(void **)v158);
  }
  if ((v154[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v92) {
      goto LABEL_144;
    }
    goto LABEL_143;
  }

  if (v92)
  {
LABEL_143:
    buf[0] = 0;
    sub_100242CA4(buf);
    sub_1001141BC((unsigned __int16)v141);
    sub_100242CD8(buf);
  }

  uint64_t v168 = 0;
  *(_BYTE *)(a1 + 1075) = 0;
  *(_DWORD *)(a1 + 1076) = 0;
  BOOL v67 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "IsConnectionScanOverriden");
  uint64_t v68 = (_BYTE *)(a1 + 1075);
  if ((*(unsigned int (**)(uint64_t, _BYTE *, void **, uint64_t))(*(void *)v67 + 72LL))( v67,  buf,  __p,  a1 + 1075))
  {
    uint64_t v69 = *v68;
    if (v171 < 0) {
      operator delete(__p[0]);
    }
    if (v175 < 0)
    {
      operator delete(*(void **)buf);
      if (!v69) {
        goto LABEL_174;
      }
    }

    else if (!v69)
    {
      goto LABEL_174;
    }

    unsigned int v70 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "Overriding Connection Scan Parameters on MainCore.",  buf,  2u);
    }

    unsigned int v71 = sub_1002E6E00();
    sub_10002418C(buf, "LE");
    sub_10002418C(__p, "ConnectionScanInterval");
    unsigned int v72 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v71 + 88LL))(v71, buf, __p, &v168);
    if (v168) {
      unsigned int v73 = v72;
    }
    else {
      unsigned int v73 = 0;
    }
    if (v171 < 0) {
      operator delete(__p[0]);
    }
    if (v175 < 0) {
      operator delete(*(void **)buf);
    }
    if (v73)
    {
      unsigned int v74 = v168;
      *(_WORD *)(a1 + 107_Block_object_dispose(va, 8) = v168;
      unsigned int v75 = (os_log_s *)qword_1008F7620;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v74;
        _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "Overriding MainCore Connection Scan Interval %d.",  buf,  8u);
      }
    }

    unsigned int v76 = sub_1002E6E00();
    sub_10002418C(buf, "LE");
    sub_10002418C(__p, "ConnectionScanWindow");
    uint64_t v77 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v76 + 88LL))(v76, buf, __p, &v168);
    if (v168) {
      int32x2_t v78 = v77;
    }
    else {
      int32x2_t v78 = 0;
    }
    if (v171 < 0) {
      operator delete(__p[0]);
    }
    if (v175 < 0) {
      operator delete(*(void **)buf);
    }
    if (v78)
    {
      unsigned int v79 = v168;
      *(_WORD *)(a1 + 1076) = v168;
      unsigned int v80 = (os_log_s *)qword_1008F7620;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v79;
        _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "Overriding MainCore Connection Scan Window %d.",  buf,  8u);
      }
    }

    if (*(unsigned __int16 *)(a1 + 1076) > *(unsigned __int16 *)(a1 + 1078))
    {
      *uint64_t v68 = 0;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_ERROR)) {
        sub_100696C9C();
      }
      *(_DWORD *)(a1 + 1076) = 0;
    }
  }

  else
  {
    if (v171 < 0) {
      operator delete(__p[0]);
    }
    if (v175 < 0) {
      operator delete(*(void **)buf);
    }
  }

  uint64_t v69 = v77;
  LODWORD(__p[0]) = 23;
  *(void *)__int128 buf = __p;
  *((_WORD *)sub_1005BC550((uint64_t **)(a1 + 1224), (unsigned int *)__p, (uint64_t)&unk_1006C2518, (_DWORD **)buf) + 16) = v69;
  unsigned int v70 = v76;
  LODWORD(__p[0]) = 23;
  *(void *)__int128 buf = __p;
  LOWORD(v70) = v75;
  LODWORD(__p[0]) = 23;
  *(void *)__int128 buf = __p;
  *((_WORD *)sub_1005BC550((uint64_t **)(a1 + 1272), (unsigned int *)__p, (uint64_t)&unk_1006C2518, (_DWORD **)buf) + 16) = v70;
  unsigned int v71 = v74;
  LODWORD(__p[0]) = 23;
  *(void *)__int128 buf = __p;
  __p[0] = (void *)23;
  *(void *)__int128 buf = __p;
  sub_1005BC610((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[36] = 0;
  LOBYTE(v71) = *(_BYTE *)(a1 + 1349);
  __p[0] = &dword_100000014 + 3;
  *(void *)__int128 buf = __p;
  sub_1005BC610((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[36] = v71;
  __p[0] = (void *)0x200000017LL;
  *(void *)__int128 buf = __p;
  sub_1005BC610((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[36] = 0;
  LODWORD(__p[0]) = 267;
  *(void *)__int128 buf = __p;
  *((_WORD *)sub_1005BC550((uint64_t **)(a1 + 1224), (unsigned int *)__p, (uint64_t)&unk_1006C2518, (_DWORD **)buf) + 16) = 12;
  LODWORD(__p[0]) = 267;
  *(void *)__int128 buf = __p;
  LODWORD(__p[0]) = 267;
  *(void *)__int128 buf = __p;
  *((_WORD *)sub_1005BC550((uint64_t **)(a1 + 1272), (unsigned int *)__p, (uint64_t)&unk_1006C2518, (_DWORD **)buf) + 16) = 2;
  LODWORD(__p[0]) = 267;
  *(void *)__int128 buf = __p;
  __p[0] = (void *)267;
  *(void *)__int128 buf = __p;
  sub_1005BC610((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[36] = 0;
  unsigned int v72 = *(_BYTE *)(a1 + 1350);
  __p[0] = &stru_100000100 + 11;
  *(void *)__int128 buf = __p;
  sub_1005BC610(v33, (unsigned int *)__p, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[36] = v72;
  __p[0] = (void *)0x20000010BLL;
  *(void *)__int128 buf = __p;
  __n128 result = sub_1005BC610(v33, (unsigned int *)__p, (uint64_t)&unk_1006C2518, (uint64_t **)buf);
  result[36] = 0;
  return result;
}

        sub_100594C3C(a1, uu);
        uint64_t v100 = 0;
LABEL_227:
        unsigned int v155 = (os_log_s *)qword_1008F7620;
        if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
        {
          int v156 = sub_100241F94(uu);
          unsigned int v157 = (void *)objc_claimAutoreleasedReturnValue(v156);
          v158 = sub_100595B00(v100);
          unsigned int v159 = v157;
          *(_DWORD *)__int128 buf = 136446466;
          *(void *)&uint8_t buf[4] = v158;
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&_BYTE buf[14] = v159;
          _os_log_impl( (void *)&_mh_execute_header,  v155,  OS_LOG_TYPE_DEFAULT,  "BLE Connection Completed %{public}s %{public}@",  buf,  0x16u);

          unsigned int v155 = (os_log_s *)qword_1008F7620;
        }

        if (os_signpost_enabled(v155))
        {
          v160 = sub_100241F94(uu);
          unsigned int v161 = (void *)objc_claimAutoreleasedReturnValue(v160);
          v162 = sub_100595B00(v100);
          unsigned int v163 = v161;
          *(_DWORD *)__int128 buf = 136446466;
          *(void *)&uint8_t buf[4] = v162;
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&_BYTE buf[14] = v163;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v155,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "BTSignPost",  "BLE Connection Completed %{public}s %{public}@",  buf,  0x16u);
        }

        uint64_t v56 = [*(id *)(a1 + 752) count];
        unsigned int v49 = a3 ^ 1;
        if (v56)
        {
          v164 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 752) anyObject]);
          [*(id *)(a1 + 752) removeObject:v164];
          unsigned int v165 = (os_log_s *)qword_1008F7620;
          if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138543362;
            *(void *)&uint8_t buf[4] = v164;
            _os_log_impl( (void *)&_mh_execute_header,  v165,  OS_LOG_TYPE_DEFAULT,  "Moving device %{public}@ off of the overflow list now that there's room",  buf,  0xCu);
          }

          v166 = *(_DWORD *)(a1 + 864);
          if (v166 == 4 || v166 == 2)
          {
            unsigned int v167 = (os_log_s *)qword_1008F7620;
            if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
            {
              sub_100366664(uu, buf);
              uint64_t v168 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
              *(_DWORD *)v331 = 136446210;
              *(void *)&v331[4] = v168;
              _os_log_impl( (void *)&_mh_execute_header,  v167,  OS_LOG_TYPE_DEFAULT,  "Adding %{public}s to AddToFilterAcceptList list",  v331,  0xCu);
            }

            sub_100594AE4(a1, uu);
          }

          else
          {
            sub_1005963D8(a1, v164);
          }
        }

        goto LABEL_245;
      }

      if (!v59)
      {
        unsigned int v60 = (os_log_s *)qword_1008F7620;
        if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          unsigned int v61 = "Canceled pending connection successfuly, waiting for event";
LABEL_136:
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, v61, buf, 2u);
          goto LABEL_137;
        }

        goto LABEL_137;
      }

      uint64_t v101 = (os_log_s *)qword_1008F7620;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "No pending event.", buf, 2u);
      }

      uint64_t v102 = sub_100241F94(uu);
      char v103 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(v102);
      sub_10059F800(a1, v103);
      uint64_t v100 = 0;
    }

    else
    {
      unsigned int v86 = sub_100241F94(uu);
      uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue(v86);
      sub_10059F800(a1, v87);

      unsigned int v88 = *(_DWORD *)(a1 + 864);
      __int128 v89 = (os_log_s *)qword_1008F7620;
      uint64_t v90 = os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT);
      if (v88 == 1)
      {
        if (v90)
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "Successful outgoing connection", buf, 2u);
        }

        sub_1005911F0(a1, 0);
      }

      else if (v90)
      {
        if (v88 > 4) {
          uint64_t v99 = "UNKNOWN";
        }
        else {
          uint64_t v99 = off_1008A2C90[v88];
        }
        *(_DWORD *)__int128 buf = 136446466;
        *(void *)&uint8_t buf[4] = v99;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v88;
        _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEFAULT,  "Current state when connection completed is %{public}s(%d), lets wait for the controller.",  buf,  0x12u);
      }

      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
      }
      uint64_t v112 = off_1008D5F28;
      id v113 = sub_100241F94(uu);
      __int16 v114 = (void *)objc_claimAutoreleasedReturnValue(v113);
      uint64_t v100 = sub_1005CE2FC((uint64_t)v112, v114);

      if (qword_1008D92A8 != -1) {
        dispatch_once(&qword_1008D92A8, &stru_1008A2BB0);
      }
      int v115 = sub_10064B7CC(qword_1008D92A0, v100);
      int v116 = *(const unsigned __int8 **)(a1 + 384);
      if (v116 == (const unsigned __int8 *)(a1 + 392))
      {
        int v117 = v292;
      }

      else
      {
        int v117 = v292;
        do
        {
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
          }
          uint64_t v118 = off_1008D5F28;
          v119 = sub_100241F94(v116 + 32);
          v120 = (void *)objc_claimAutoreleasedReturnValue(v119);
          BOOL v121 = sub_1005CE2FC((uint64_t)v118, v120) == v100;

          uint64_t v122 = (unsigned __int8 *)*((void *)v116 + 1);
          if (v122)
          {
            do
            {
              uint64_t v123 = (const unsigned __int8 **)v122;
              uint64_t v122 = *(unsigned __int8 **)v122;
            }

            while (v122);
          }

          else
          {
            do
            {
              uint64_t v123 = (const unsigned __int8 **)*((void *)v116 + 2);
              uint64_t v28 = *v123 == v116;
              int v116 = (const unsigned __int8 *)v123;
            }

            while (!v28);
          }

          v117 += v121;
          int v116 = (const unsigned __int8 *)v123;
        }

        while (v123 != (const unsigned __int8 **)(a1 + 392));
      }

      id v124 = (os_log_s *)qword_1008F7620;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v100;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v115;
        *(_WORD *)&_BYTE buf[14] = 1024;
        *(_DWORD *)&uint8_t buf[16] = v117;
        _os_log_impl( (void *)&_mh_execute_header,  v124,  OS_LOG_TYPE_DEFAULT,  "deviceUseCase:%d maxUseCaseConnections:%d currentlyConnectedForUseCase:%d",  buf,  0x14u);
      }

      if (v115 > v117) {
        goto LABEL_227;
      }
      v287 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      v125 = *(const unsigned __int8 **)(a1 + 336);
      if (v125 != (const unsigned __int8 *)(a1 + 344))
      {
        do
        {
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
          }
          __int16 v126 = off_1008D5F28;
          uint64_t v127 = sub_100241F94(v125 + 25);
          unsigned __int16 v128 = (void *)objc_claimAutoreleasedReturnValue(v127);
          LODWORD(v126) = sub_1005CE2FC((uint64_t)v126, v128) == v100;

          if ((_DWORD)v126)
          {
            v129 = sub_100241F94(v125 + 25);
            __int16 v130 = (void *)objc_claimAutoreleasedReturnValue(v129);
            -[NSMutableArray addObject:](v287, "addObject:", v130);
          }

          v131 = (unsigned __int8 *)*((void *)v125 + 1);
          if (v131)
          {
            do
            {
              __int16 v132 = (const unsigned __int8 **)v131;
              v131 = *(unsigned __int8 **)v131;
            }

            while (v131);
          }

          else
          {
            do
            {
              __int16 v132 = (const unsigned __int8 **)*((void *)v125 + 2);
              uint64_t v28 = *v132 == v125;
              v125 = (const unsigned __int8 *)v132;
            }

            while (!v28);
          }

          v125 = (const unsigned __int8 *)v132;
        }

        while (v132 != (const unsigned __int8 **)(a1 + 344));
      }

      v133 = (os_log_s *)qword_1008F7620;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138543362;
        *(void *)&uint8_t buf[4] = v287;
        _os_log_impl( (void *)&_mh_execute_header,  v133,  OS_LOG_TYPE_DEFAULT,  "devicesToDisconnect from fConnectingDevices: %{public}@",  buf,  0xCu);
      }

      v286 = v11;
      v319 = 0u;
      v320 = 0u;
      v317 = 0u;
      v318 = 0u;
      v134 = v287;
      v135 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v134,  "countByEnumeratingWithState:objects:count:",  &v317,  v338,  16LL);
      if (v135)
      {
        uint64_t v136 = *(void *)v318;
        do
        {
          for (std::string::size_type i = 0LL; i != v135; std::string::size_type i = (char *)i + 1)
          {
            if (*(void *)v318 != v136) {
              objc_enumerationMutation(v134);
            }
            uint64_t v138 = *(void *)(*((void *)&v317 + 1) + 8LL * (void)i);
            if (*(_DWORD *)(a1 + 864)) {
              sub_100594C3C(a1, uu);
            }
            else {
              sub_10059F800(a1, *(void **)(*((void *)&v317 + 1) + 8LL * (void)i));
            }
            v316[0] = _NSConcreteStackBlock;
            v316[1] = 3221225472LL;
            v316[2] = sub_1005A61F4;
            v316[3] = &unk_1008A2590;
            v316[4] = v138;
            sub_10058C72C((os_unfair_lock_s *)a1, v316);
          }

          v135 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v134,  "countByEnumeratingWithState:objects:count:",  &v317,  v338,  16LL);
        }

        while (v135);
      }

      -[NSMutableArray removeAllObjects](v134, "removeAllObjects");
      v314 = 0u;
      v315 = 0u;
      v312 = 0u;
      v313 = 0u;
      v139 = *(id *)(a1 + 752);
      int v140 = [v139 countByEnumeratingWithState:&v312 objects:v337 count:16];
      if (v140)
      {
        uint64_t v141 = *(void *)v313;
        do
        {
          uint64_t v142 = 0LL;
          do
          {
            if (*(void *)v313 != v141) {
              objc_enumerationMutation(v139);
            }
            unsigned int v143 = *(void **)(*((void *)&v312 + 1) + 8LL * (void)v142);
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
            }
            uint64_t v142 = (char *)v142 + 1;
          }

          while (v140 != v142);
          int v140 = [v139 countByEnumeratingWithState:&v312 objects:v337 count:16];
        }

        while (v140);
      }

      double v144 = (os_log_s *)qword_1008F7620;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138543362;
        *(void *)&uint8_t buf[4] = v134;
        _os_log_impl( (void *)&_mh_execute_header,  v144,  OS_LOG_TYPE_DEFAULT,  "devicesToDisconnect from fConnectingOverflowDevices: %{public}@",  buf,  0xCu);
      }

      v310 = 0u;
      v311 = 0u;
      v308 = 0u;
      v309 = 0u;
      unsigned int v145 = *(id *)(a1 + 760);
      double v146 = [v145 countByEnumeratingWithState:&v308 objects:v336 count:16];
      if (v146)
      {
        unsigned int v147 = *(void *)v309;
        do
        {
          double v148 = 0LL;
          do
          {
            if (*(void *)v309 != v147) {
              objc_enumerationMutation(v145);
            }
            unsigned int v149 = *(void **)(*((void *)&v308 + 1) + 8LL * (void)v148);
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_1008A2B30);
            }
            double v148 = (char *)v148 + 1;
          }

          while (v146 != v148);
          double v146 = [v145 countByEnumeratingWithState:&v308 objects:v336 count:16];
        }

        while (v146);
      }

      uint64_t v150 = (os_log_s *)qword_1008F7620;
      if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138543362;
        *(void *)&uint8_t buf[4] = v134;
        _os_log_impl( (void *)&_mh_execute_header,  v150,  OS_LOG_TYPE_DEFAULT,  "LeConnectionDenyList: devicesToDisconnect from fDevicesBlockedFromOutgoingConnections: %{public}@",  buf,  0xCu);
      }

      v306 = 0u;
      v307 = 0u;
      v304 = 0u;
      v305 = 0u;
      char v103 = v134;
      unsigned int v151 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v103,  "countByEnumeratingWithState:objects:count:",  &v304,  v335,  16LL);
      if (v151)
      {
        uint64_t v152 = *(void *)v305;
        do
        {
          for (j = 0LL; j != v151; j = (char *)j + 1)
          {
            if (*(void *)v305 != v152) {
              objc_enumerationMutation(v103);
            }
            uint64_t v154 = *(void *)(*((void *)&v304 + 1) + 8LL * (void)j);
            [*(id *)(a1 + 752) removeObject:v154];
            [*(id *)(a1 + 760) removeObject:v154];
            v303[0] = _NSConcreteStackBlock;
            v303[1] = 3221225472LL;
            v303[2] = sub_1005A6210;
            v303[3] = &unk_1008A2590;
            v303[4] = v154;
            sub_10058C72C((os_unfair_lock_s *)a1, v303);
          }

          unsigned int v151 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v103,  "countByEnumeratingWithState:objects:count:",  &v304,  v335,  16LL);
        }

        while (v151);
      }

      uint64_t v11 = v286;
    }

    goto LABEL_227;
  }

  unsigned int v15 = (os_log_s *)qword_1008F7620;
  if (a5 != 702 && os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a5;
    _os_log_fault_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "Unexpected connection complete result (%{bluetooth:OI_STATUS}u) after cancellation!",  buf,  8u);
    unsigned int v15 = (os_log_s *)qword_1008F7620;
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Received connection complete event after successful cancellation. Parsing pending operations and processing pending connections",  buf,  2u);
  }

  if (byte_1008F1D10)
  {
    unsigned int v16 = qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      uint64_t v17 = "Warning: Ignoring connection complete after succesful cancellation for debug only";
LABEL_21:
      unint64_t v18 = buf;
      uint64_t v19 = (os_log_s *)v16;
      unint64_t v20 = 2;
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v17, v18, v20);
      goto LABEL_423;
    }

    goto LABEL_423;
  }

  if (*(_DWORD *)(a1 + 928) == 1)
  {
    uint64_t v21 = *(const unsigned __int8 **)(a1 + 336);
    double v22 = (const unsigned __int8 **)(a1 + 344);
    if (v21 != (const unsigned __int8 *)(a1 + 344))
    {
      do
      {
        int v23 = (os_log_s *)qword_1008F7620;
        if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
        {
          int v24 = sub_100241F94(v21 + 25);
          unsigned int v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
          *(_DWORD *)__int128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Moving %{public}@ out of the filter accept list and into the pending list",  buf,  0xCu);
        }

        sub_100594AE4(a1, v21 + 25);
        uint64_t v26 = (unsigned __int8 *)*((void *)v21 + 1);
        if (v26)
        {
          do
          {
            int v27 = (const unsigned __int8 **)v26;
            uint64_t v26 = *(unsigned __int8 **)v26;
          }

          while (v26);
        }

        else
        {
          do
          {
            int v27 = (const unsigned __int8 **)*((void *)v21 + 2);
            uint64_t v28 = *v27 == v21;
            uint64_t v21 = (const unsigned __int8 *)v27;
          }

          while (!v28);
        }

        uint64_t v21 = (const unsigned __int8 *)v27;
      }

      while (v27 != v22);
    }

    sub_10023BF24(a1 + 336, *(void **)(a1 + 344));
    *(void *)(a1 + 344) = 0LL;
    *(void *)(a1 + 352) = 0LL;
    *(void *)(a1 + 336) = v22;
    unint64_t v29 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "calling LE_ClearFilterAcceptList", buf, 2u);
    }

    sub_10023BF24(a1 + 608, *(void **)(a1 + 616));
    *(void *)(a1 + 60_Block_object_dispose(va, 8) = a1 + 616;
    *(void *)(a1 + 624) = 0LL;
    *(void *)(a1 + 616) = 0LL;
    v331[0] = 0;
    uint64_t v30 = sub_100242CA4(v331);
    unsigned int v38 = sub_1001D5AEC((uint64_t)v30, v31, v32, v33, v34, v35, v36, v37);
    unsigned int v39 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "LE_ClearFilterAcceptList returned %d",  buf,  8u);
    }

    sub_10023BF24(a1 + 360, *(void **)(a1 + 368));
    *(void *)(a1 + 36_Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 376) = 0LL;
    *(void *)(a1 + 360) = a1 + 368;
    sub_100242CD8(v331);
  }

  int v40 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Connection complete after successful connection cancelation",  buf,  2u);
  }

  sub_1005911F0(a1, 0);
  if (*(_BYTE *)(a1 + 1067))
  {
    __int128 v41 = (os_log_s *)qword_1008F7620;
    if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Stack is shutting down, we're done here.",  buf,  2u);
    }

    *(_BYTE *)(a1 + 1064) = 0;
    sub_1002431AC((pthread_cond_t *)(a1 + 1016));
    goto LABEL_423;
  }

  uint64_t v43 = *(_DWORD *)(a1 + 928);
  if (!v43)
  {
    sub_1005A0338((id *)a1);
    sub_10059EB5C(a1);
    goto LABEL_423;
  }

  unsigned int v44 = qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    if (v43 > 3) {
      unsigned int v45 = "UNKNOWN";
    }
    else {
      unsigned int v45 = off_1008A2CB8[v43 - 1];
    }
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = v45;
    uint64_t v17 = "Not updating connection list, current LE Connection Manager State is %{public}s";
    unint64_t v18 = buf;
LABEL_426:
    uint64_t v19 = (os_log_s *)v44;
    unint64_t v20 = 12;
    goto LABEL_22;
  }

  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_1008A4638);
  }
  sub_1005596EC(qword_1008D5F58, 0LL, uu);
  uint64_t v100 = sub_100241F94(uu);
  uint64_t v101 = (void *)objc_claimAutoreleasedReturnValue(v100);
  uint64_t v102 = *(uint64_t **)(a1 + 568);
  char v103 = *(uint64_t **)(a1 + 576);
  if (v102 != v103)
  {
    v104 = v19[12];
    do
    {
      uint64_t v105 = *v102;
      uint64_t v106 = sub_100404FE8();
      v112[0] = _NSConcreteStackBlock;
      v112[1] = v104;
      v112[2] = sub_10062C820;
      v112[3] = &unk_100881060;
      __int16 v114 = v105;
      id v113 = v101;
      int v115 = v62;
      sub_100405384(v106, v112);

      ++v102;
    }

    while (v102 != v103);
  }

  uint64_t v107 = sub_100404FE8();
  v110[0] = _NSConcreteStackBlock;
  v110[1] = v19[12];
  v110[2] = sub_10062C838;
  v110[3] = &unk_10087F980;
  int v111 = v62;
  sub_100405384(v107, v110);

  sub_100242FAC((uint64_t)v130);
}

LABEL_191:
  v203[0] = @"AccessoryPID";
  uint64_t v122 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  v201));
  v204[0] = v122;
  v204[1] = v191;
  v203[1] = @"AudioCategory";
  v203[2] = @"AvgMaxGoodPcktsPerSwitch";
  v139 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v187.u32[0]));
  v204[2] = v139;
  v203[3] = @"AvgMinGoodPcktsPerSwitch";
  v188 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v187.u32[1]));
  v204[3] = v188;
  v203[4] = @"AvgPacketsPerSwitch";
  uint64_t v138 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v82));
  v204[4] = v138;
  v203[5] = @"AvgSwitchesPerSecond";
  v137 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v81));
  v204[5] = v137;
  v203[6] = @"BitRateLowAvg";
  BOOL v121 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 376)));
  v204[6] = v121;
  v203[7] = @"BitRateMediumAvg";
  uint64_t v136 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 380)));
  v204[7] = v136;
  v203[8] = @"BtRole";
  v135 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *(unsigned __int8 *)(a2 + 320)));
  v204[8] = v135;
  v203[9] = @"DurationInMinutes";
  v182 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v181));
  v204[9] = v182;
  v203[10] = @"EpaCallTimeRatio";
  v180 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v179));
  v204[10] = v180;
  v204[11] = v90;
  v203[11] = @"FWVersion";
  v203[12] = @"HighLatencyDurationMins";
  v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v177));
  v204[12] = v120;
  v203[13] = @"HDRSession";
  v184 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v183));
  v204[13] = v184;
  v203[14] = @"IsAppleAudioDevice";
  v178 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v43));
  v204[14] = v178;
  v203[15] = @"LowLatencyDurationMins";
  v176 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v175));
  v204[15] = v176;
  v203[16] = @"MidLatencyDurationMins";
  uint64_t v174 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v173));
  v204[16] = v174;
  v203[17] = @"MaxOverwaitDurationMs";
  v119 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a2 + 504)));
  v204[17] = v119;
  v203[18] = @"NoiseFloorAvgOnGoodChannels";
  v172 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v171));
  v204[18] = v172;
  v203[19] = @"NoiseFloorMinOnGoodChannels";
  v134 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 32)));
  v204[19] = v134;
  v203[20] = @"NoiseFloor50Percentile";
  v170 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v169));
  v204[20] = v170;
  v203[21] = @"NoiseFloor50Max";
  v133 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 4)));
  v204[21] = v133;
  v203[22] = @"NoiseFloor75Percentile";
  uint64_t v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v167));
  v204[22] = v118;
  v203[23] = @"NoiseFloor75Max";
  uint64_t v168 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 12)));
  v204[23] = v168;
  v203[24] = @"NoiseFloor90Percentile";
  v166 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v165));
  v204[24] = v166;
  v203[25] = @"NoiseFloor90Max";
  __int16 v132 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 20)));
  v204[25] = v132;
  v203[26] = @"OverwaitCountMoreThan50ms";
  v131 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a2 + 496)));
  v204[26] = v131;
  v203[27] = @"PacketLoss";
  int v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v163));
  v204[27] = v117;
  v203[28] = @"PercentPacketsAnt0";
  v164 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v161));
  v204[28] = v164;
  v203[29] = @"PercentPacketsAnt1";
  v162 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v157));
  v204[29] = v162;
  v203[30] = @"PercentPacketsTxBF";
  v158 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v155));
  v204[30] = v158;
  v203[31] = @"ReTransmissionRate";
  v160 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v159));
  v204[31] = v160;
  v203[32] = @"ReTransmissionRateMax";
  int v116 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v62));
  v204[32] = v116;
  v203[33] = @"RssiAverage";
  uint64_t v98 = *(int *)(a2 + 424);
  if ((_DWORD)v98) {
    uint64_t v99 = *(void *)(a2 + 416) / v98;
  }
  else {
    uint64_t v99 = 0LL;
  }
  int v156 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v99));
  v204[33] = v156;
  v203[34] = @"RssiMax";
  __int16 v130 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 432)));
  v204[34] = v130;
  v203[35] = @"RssiMin";
  v129 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 428)));
  v204[35] = v129;
  v203[36] = @"RssiAtSkip";
  unsigned __int16 v128 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v35));
  v204[36] = v128;
  v204[37] = v189;
  v203[37] = @"SanitizedDeviceName";
  v203[38] = @"SpatialProfileSessionDuration";
  int v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v151));
  v204[38] = v115;
  v203[39] = @"SkipperMin";
  uint64_t v154 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v153));
  v204[39] = v154;
  v203[40] = @"TxCountIncludingReTx";
  uint64_t v152 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a2 + 512)));
  v204[40] = v152;
  v203[41] = @"VendorID";
  uint64_t v127 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  v202));
  v204[41] = v127;
  v203[42] = @"Version";
  __int16 v126 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", HIDWORD(v201)));
  v204[42] = v126;
  v203[43] = @"VersionIDSource";
  __int16 v114 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", HIDWORD(v202)));
  v204[43] = v114;
  v203[44] = @"WirelessSplitterOff";
  v125 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v76 == 0));
  v204[44] = v125;
  v203[45] = @"WirelessSplitterGuestRole";
  uint64_t v150 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v149));
  v204[45] = v150;
  v203[46] = @"WirelessSplitterOwnerRole";
  double v148 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v147));
  v204[46] = v148;
  v203[47] = @"WirelessSplitterUser1Type";
  double v146 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v145));
  v204[47] = v146;
  v203[48] = @"WirelessSplitterUser2Type";
  uint64_t v112 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v143));
  v204[48] = v112;
  v203[49] = @"BTBand";
  else {
    uint64_t v100 = *(void *)(a2 + 168);
  }
  double v144 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v100, v112));
  v204[49] = v144;
  v203[50] = @"TipiConnected";
  id v124 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(a2 + 192)));
  v204[50] = v124;
  v203[51] = @"AoSDuration";
  uint64_t v123 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 232)));
  v204[51] = v123;
  v203[52] = @"ISMvsUBORatio";
  uint64_t v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a2 + 240)));
  v204[52] = v101;
  v203[53] = @"2GDuration";
  uint64_t v102 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 252)));
  v204[53] = v102;
  v203[54] = @"5GDuration";
  char v103 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 248)));
  v204[54] = v103;
  v203[55] = @"FlushSessionRatio";
  v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v57));
  v204[55] = v104;
  v203[56] = @"AvgAoSRSSI5G";
  uint64_t v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v142));
  v204[56] = v105;
  v203[57] = @"AvgAoSRSSI2G";
  uint64_t v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", *(void *)(a2 + 296)));
  v204[57] = v106;
  v203[58] = @"AvgRetx5G";
  uint64_t v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v141));
  v204[58] = v107;
  v203[59] = @"AvgRetx2G";
  uint64_t v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", *(void *)(a2 + 304)));
  v204[59] = v108;
  v203[60] = @"JitterBuffer";
  __int16 v109 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 312)));
  v204[60] = v109;
  __int16 v110 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v204,  v203,  61LL));

  int v111 = (os_log_s *)(id)qword_1008F7578;
  if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__str.__r_.__value_.__l.__data_) = 138412290;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v110;
    _os_log_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_DEFAULT,  "A2dpLinkQuality stats %@",  (uint8_t *)&__str,  0xCu);
  }

  sub_1002EFD68(a1, 7u, v110);
  if (v194)
  {
    v195 = (char *)v194;
    operator delete(v194);
  }

  if (v197)
  {
    v198 = (char *)v197;
    operator delete(v197);
  }
}

            sub_1001FD17C(&buf[16], (uint64_t)v85, v86);
LABEL_192:
            sub_1001FD17C(&buf[16], (uint64_t)"an interval of ", 15LL);
            LOWORD(v12_Block_object_dispose(va, 8) = *(_WORD *)(v67 | 2);
            v129 = (void *)std::ostream::operator<<((double)v128 * 0.625);
            sub_1001FD17C(v129, (uint64_t)"ms", 2LL);
            __int16 v130 = &__src[1668 * v66];
            if (*((_BYTE *)v130 + 3321))
            {
              v131 = sub_1001FD17C(&buf[16], (uint64_t)"primaryPHY ", 11LL);
              std::ostream::operator<<(v131, *((unsigned __int8 *)v130 + 3321));
            }

            __int16 v132 = &__src[1668 * v66];
            if (*((_BYTE *)v132 + 3322))
            {
              v133 = sub_1001FD17C(&buf[16], (uint64_t)"secondaryPHY ", 13LL);
              std::ostream::operator<<(v133, *((unsigned __int8 *)v132 + 3322));
            }

            v134 = &__src[1668 * v66];
            if (*((_BYTE *)v134 + 3323))
            {
              v135 = sub_1001FD17C(&buf[16], (uint64_t)"primaryPhyOptions ", 18LL);
              std::ostream::operator<<(v135, *((unsigned __int8 *)v134 + 3323));
            }

            uint64_t v136 = &__src[1668 * v66];
            if (*((_BYTE *)v136 + 3324))
            {
              v137 = sub_1001FD17C(&buf[16], (uint64_t)"secondaryPhyOptions ", 20LL);
              std::ostream::operator<<(v137, *((unsigned __int8 *)v136 + 3324));
            }

            sub_1002E6E9C();
            if (sub_1000B6578())
            {
              if (_os_feature_enabled_impl("BluetoothFeatures", "LeDecisionBasedAdvFiltering"))
              {
                uint64_t v138 = &__src[1668 * v66];
                if (*((_BYTE *)v138 + 3325))
                {
                  v139 = sub_1001FD17C(&buf[16], (uint64_t)" useDecisionBasedAdvPayload ", 28LL);
                  std::ostream::operator<<(v139, *((unsigned __int8 *)v138 + 3325));
                  int v140 = sub_1001FD17C(&buf[16], (uint64_t)" DBAFDecisionTypeFlags ", 23LL);
                  std::ostream::operator<<(v140, LOBYTE(__src[1668 * v66 + 1663]));
                  uint64_t v141 = sub_1001FD17C(&buf[16], (uint64_t)" DBAFDecisionDataLength ", 24LL);
                  uint64_t v142 = &__src[1668 * v66];
                  std::ostream::operator<<(v141, *((unsigned __int8 *)v142 + 3327));
                  unsigned int v143 = (char *)v142 + 3327;
                  if (*v143)
                  {
                    double v144 = sub_1001FD17C(&buf[16], (uint64_t)" DBAFDecisionData ", 18LL);
                    unsigned int v145 = *v144;
                    *(_DWORD *)((char *)v144 + *(void *)(*v144 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)v144
                                                                                        + *(void *)(*v144 - 24)
                                                                                        + 8) & 0xFFFFFFB5 | 8;
                    *(_DWORD *)((char *)v144 + *(void *)(v145 - 24) + 8) |= 0x4000u;
                    __p.__r_.__value_.__s.__data_[0] = 48;
                    sub_100361614(v144, (unsigned __int8 *)&__p);
                    if (*v143)
                    {
                      double v146 = 0LL;
                      do
                      {
                        *(void *)&buf[*(void *)(*(void *)&buf[16] - 24LL) + 40] = 2LL;
                        __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(*(void *)&__src[1668 * v66 + 1664] + v146);
                        unsigned int v147 = sub_1001FD17C(&buf[16], (uint64_t)&__p, 1LL);
                        sub_1001FD17C(v147, (uint64_t)" ", 1LL);
                        ++v146;
                      }

                      while (v146 < *v143);
                    }
                  }
                }
              }
            }

            double v148 = (os_log_s *)qword_1008F7648;
            if (os_log_type_enabled((os_log_t)qword_1008F7648, OS_LOG_TYPE_INFO))
            {
              std::stringbuf::str(&__p, (const std::stringbuf *)&buf[24]);
              unsigned int v149 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
                   ? &__p
                   : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
              LODWORD(v191.__r_.__value_.__l.__data_) = 136446210;
              *(std::string::size_type *)((char *)v191.__r_.__value_.__r.__words + 4) = (std::string::size_type)v149;
              _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_INFO, "%{public}s", (uint8_t *)&v191, 0xCu);
            }

            *(void *)__int128 buf = v167;
            *(void *)&buf[*(void *)(v167 - 24)] = v165;
            *(void *)&uint8_t buf[16] = v163;
            if (SHIBYTE(v194) < 0) {
              operator delete(*((void **)&v193 + 1));
            }
            std::streambuf::~streambuf(&buf[24]);
            std::ios::~ios(v196);
            if (++v66 == v159) {
              goto LABEL_216;
            }
          }

          uint64_t v87 = HIBYTE(v199);
          if (v199 < 0) {
            uint64_t v87 = *((void *)&v198 + 1);
          }
          if (v87)
          {
            unsigned int v88 = sub_1001FD17C(&buf[16], (uint64_t)"name ", 6LL);
            if (v199 >= 0) {
              __int128 v89 = &v198;
            }
            else {
              __int128 v89 = (__int128 *)v198;
            }
            if (v199 >= 0) {
              uint64_t v90 = HIBYTE(v199);
            }
            else {
              uint64_t v90 = *((void *)&v198 + 1);
            }
            unsigned int v91 = (uint8_t *)sub_1001FD17C(v88, (uint64_t)v89, v90);
            unsigned int v92 = ", ";
            uint64_t v93 = 3LL;
          }

          else
          {
            unsigned int v91 = &buf[16];
            unsigned int v92 = "no name, ";
            uint64_t v93 = 9LL;
          }

          sub_1001FD17C(v91, (uint64_t)v92, v93);
          if (v185 == v184)
          {
            uint64_t v112 = "no advertised UUIDs, ";
            id v113 = 21LL;
          }

          else
          {
            sub_1001FD17C(&buf[16], (uint64_t)"advertised UUID(s) [ ", 21LL);
            uint64_t v106 = v184;
            if (v185 != v184)
            {
              uint64_t v107 = 0LL;
              uint64_t v108 = 1;
              do
              {
                sub_1006344B4((uint64_t)v106 + 20 * v107, &__p);
                if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  __int16 v109 = &__p;
                }
                else {
                  __int16 v109 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
                }
                if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  __int16 v110 = __p.__r_.__value_.__s.__size_;
                }
                else {
                  __int16 v110 = __p.__r_.__value_.__l.__size_;
                }
                int v111 = sub_1001FD17C(&buf[16], (uint64_t)v109, v110);
                sub_1001FD17C(v111, (uint64_t)" ", 1LL);
                uint64_t v107 = v108;
                uint64_t v106 = v184;
                unsigned int v84 = 0xCCCCCCCCCCCCCCCDLL * ((v185 - (_BYTE *)v184) >> 2) > v108++;
              }

              while (v84);
            }

            uint64_t v112 = "], ";
            id v113 = 3LL;
          }

          sub_1001FD17C(&buf[16], (uint64_t)v112, v113);
          if (v182 == v181)
          {
            v120 = "no hashed UUIDs, ";
            BOOL v121 = 17LL;
          }

          else
          {
            sub_1001FD17C(&buf[16], (uint64_t)"hashed UUID(s) [ ", 17LL);
            __int16 v114 = v181;
            if (v182 != v181)
            {
              int v115 = 0LL;
              int v116 = 1;
              do
              {
                sub_1006344B4((uint64_t)v114 + 20 * v115, &__p);
                if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  int v117 = &__p;
                }
                else {
                  int v117 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
                }
                if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  uint64_t v118 = __p.__r_.__value_.__s.__size_;
                }
                else {
                  uint64_t v118 = __p.__r_.__value_.__l.__size_;
                }
                v119 = sub_1001FD17C(&buf[16], (uint64_t)v117, v118);
                sub_1001FD17C(v119, (uint64_t)" ", 1LL);
                int v115 = v116;
                __int16 v114 = v181;
                unsigned int v84 = 0xCCCCCCCCCCCCCCCDLL * ((v182 - (_BYTE *)v181) >> 2) > v116++;
              }

              while (v84);
            }

            v120 = "], ";
            BOOL v121 = 3LL;
          }

          sub_1001FD17C(&buf[16], (uint64_t)v120, v121);
          if (v179 == v178)
          {
            unsigned int v85 = "and no solicited UUIDs, ";
            unsigned int v86 = 24LL;
            goto LABEL_191;
          }

          sub_1001FD17C(&buf[16], (uint64_t)"and solicited UUID(s) [ ", 24LL);
          uint64_t v122 = v178;
          if (v179 != v178)
          {
            uint64_t v123 = 0LL;
            id v124 = 1;
            do
            {
              sub_1006344B4((uint64_t)v122 + 20 * v123, &__p);
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                v125 = &__p;
              }
              else {
                v125 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
              }
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                __int16 v126 = __p.__r_.__value_.__s.__size_;
              }
              else {
                __int16 v126 = __p.__r_.__value_.__l.__size_;
              }
              uint64_t v127 = sub_1001FD17C(&buf[16], (uint64_t)v125, v126);
              sub_1001FD17C(v127, (uint64_t)" ", 1LL);
              uint64_t v123 = v124;
              uint64_t v122 = v178;
              unsigned int v84 = 0xCCCCCCCCCCCCCCCDLL * ((v179 - (_BYTE *)v178) >> 2) > v124++;
            }

            while (v84);
          }

          goto LABEL_187;
        }

  unsigned int v86 = 0;
  uint64_t v77 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "LeConnectionMinIntervalFindMy");
  int32x2_t v78 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v77 + 88LL))(v77, buf, __p, &v86);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v78) {
      goto LABEL_199;
    }
  }

  else if (!v78)
  {
    goto LABEL_199;
  }

  unsigned int v79 = v86;
  *(_WORD *)(a1 + 1112) = v86;
  unsigned int v80 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v79;
    _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "Override LeConnectionMinIntervalFindMy:%d",  buf,  8u);
  }

void sub_1002F583C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a71) {
    operator delete(a71);
  }

  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  _Unwind_Resume(a1);
}

void sub_1002F5CB4(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 8LL))(v4))
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    a2[2] = *(void *)(a1 + 16);
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(void *)a1 = 0LL;
  }

  else
  {
    uint64_t v10 = 0LL;
    v11[0] = 0LL;
    v11[1] = 0LL;
    sub_10002418C(v12, "accent");
    sub_10002418C(v13, "audi");
    sub_10002418C(v14, "azera");
    sub_10002418C(v15, "blue&me");
    sub_10002418C(v16, "bmw");
    sub_10002418C(v17, "buick");
    sub_10002418C(v18, "cadillac");
    sub_10002418C(v19, "car m_media");
    sub_10002418C(v20, "car multimedia");
    sub_10002418C(v21, "chevrolet");
    sub_10002418C(v22, "elantra");
    sub_10002418C(v23, "ferrari");
    sub_10002418C(v24, "genesis");
    sub_10002418C(v25, "gmc");
    sub_10002418C(v26, "handsfreelink");
    sub_10002418C(v27, "hands free system");
    sub_10002418C(v28, "jaguar");
    sub_10002418C(v29, "kia motors");
    sub_10002418C(v30, "lexus");
    sub_10002418C(v31, "mazda");
    sub_10002418C(v32, "mb bluetooth");
    sub_10002418C(v33, "my-car");
    sub_10002418C(v34, "my altima");
    sub_10002418C(v35, "my armada");
    sub_10002418C(v36, "my car");
    sub_10002418C(v37, "my maxima");
    sub_10002418C(v38, "my murano");
    sub_10002418C(v39, "my pathfinder");
    sub_10002418C(v40, "my rogue");
    sub_10002418C(v41, "my sentra");
    sub_10002418C(v42, "my titan");
    sub_10002418C(v43, "my versa");
    sub_10002418C(v44, "my quest");
    sub_10002418C(v45, "pcm");
    sub_10002418C(v46, "range rover");
    sub_10002418C(v47, "santa fe");
    sub_10002418C(v48, "sonata");
    sub_10002418C(v49, "subaru");
    sub_10002418C(v50, "sync");
    sub_10002418C(v51, "tesla");
    sub_10002418C(v52, "toyota");
    sub_10002418C(v53, "tucson");
    sub_10002418C(v54, "uconnect");
    sub_10002418C(v55, "veloster");
    sub_10002418C(v56, "vw");
    sub_10002418C(v57, "aukey ep-b4");
    sub_10002418C(v58, "bluebuds x");
    sub_10002418C(v59, "dr-bt50");
    sub_10002418C(v60, "freedom sprint");
    sub_10002418C(v61, "hesh 2 wireless");
    sub_10002418C(v62, "jabra rox wireless");
    sub_10002418C(v63, "jaybird bluebud x");
    sub_10002418C(v64, "jbl micro wireless");
    sub_10002418C(v65, "koss bt540i");
    sub_10002418C(v66, "lg hbs760");
    sub_10002418C(v67, "marsee one x");
    sub_10002418C(v68, "mdr-1rbt");
    sub_10002418C(v69, "motorola s9-hd");
    sub_10002418C(v70, "parrot zik 3");
    sub_10002418C(v71, "pdx-b11 yamaha");
    sub_10002418C(v72, "plt_m70");
    sub_10002418C(v73, "presence");
    sub_10002418C(v74, "s11-flex hd");
    sub_10002418C(v75, "sb2 wireless");
    sub_10002418C(v76, "sync by 50");
    sub_100329294((uint64_t)&v10, v12, 65LL);
    uint64_t v5 = 195LL;
    do
    {
      if (SHIBYTE(v12[v5 - 1]) < 0) {
        operator delete(v11[v5 - 1]);
      }
      v5 -= 3LL;
    }

    while (v5 * 8);
    if (*(char *)(a1 + 23) < 0)
    {
      double v7 = *(_BYTE **)a1;
      int v6 = (_BYTE *)(*(void *)a1 + *(void *)(a1 + 8));
    }

    else
    {
      int v6 = (_BYTE *)(a1 + *(unsigned __int8 *)(a1 + 23));
      double v7 = (_BYTE *)a1;
    }

    while (v7 != v6)
    {
      *double v7 = __tolower(*v7);
      ++v7;
    }

    uint64_t v8 = sub_100024098((uint64_t)&v10, (const void **)a1);
    if (v11 == (char **)v8)
    {
      sub_10002418C(a2, "");
    }

    else if (*(char *)(v8 + 55) < 0)
    {
      sub_100024238(a2, *(void **)(v8 + 32), *(void *)(v8 + 40));
    }

    else
    {
      __int128 v9 = *(_OWORD *)(v8 + 32);
      a2[2] = *(void *)(v8 + 48);
      *(_OWORD *)a2 = v9;
    }

    sub_10023E78C((uint64_t)&v10, v11[0]);
  }

void sub_1002F63BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v15 = 1560LL;
  while (1)
  {
    v15 -= 24LL;
    if (!v15) {
      _Unwind_Resume(exception_object);
    }
  }

uint64_t sub_1002F6430(uint64_t a1, __int128 *a2)
{
  uint64_t v3 = sub_100405218();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768LL;
  _DWORD v5[2] = sub_1002F6510;
  v5[3] = &unk_100890C18;
  v5[4] = a1;
  sub_100328BAC((uint64_t)v6, v7);
  sub_100405384(v3, v5);
  sub_100328D20((uint64_t)v6);
  return sub_100328D20((uint64_t)v7);
}

void sub_1002F64EC(_Unwind_Exception *a1)
{
}

void sub_1002F6510(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 32);
  v28[0] = @"AccessoryPID";
  unsigned int v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 76)));
  v29[0] = v25;
  v28[1] = @"AoSEnabled";
  uint64_t v3 = (void *)(a1 + 80);
  int v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3));
  v29[1] = v24;
  v28[2] = @"AudioCategory";
  uint64_t v4 = (void *)(a1 + 104);
  int v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v4));
  v29[2] = v23;
  void v28[3] = @"BTBand";
  uint64_t v5 = (void *)(a1 + 128);
  double v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5));
  void v29[3] = v22;
  v28[4] = @"FWVersion";
  int v6 = (void *)(a1 + 152);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v6));
  v29[4] = v21;
  void v28[5] = @"JitterBuffer";
  unint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 176)));
  v29[5] = v20;
  v28[6] = @"NoiseFloor50Percentile";
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 180)));
  v29[6] = v19;
  v28[7] = @"NoiseFloor50Max";
  unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44)));
  v29[7] = v18;
  v28[8] = @"NumberOfClassicDevicesConnected";
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v2[528]));
  v29[8] = v17;
  v28[9] = @"NumberOfClassicHIDDevicesConnected";
  double v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v2[531]));
  v29[9] = v7;
  v28[10] = @"NumberOfLEDevicesConnected";
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v2[529]));
  v29[10] = v8;
  v28[11] = @"NumberOfLEHIDDevicesConnected";
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v2[530]));
  v29[11] = v9;
  v28[12] = @"ReTransmissionRate";
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 184)));
  v29[12] = v10;
  v28[13] = @"RssiAverage";
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 192)));
  v29[13] = v11;
  v28[14] = @"RssiMax";
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 196)));
  v29[14] = v12;
  v28[15] = @"RssiMin";
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 200)));
  v29[15] = v13;
  v28[16] = @"TipiConnected";
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 204)));
  v29[16] = v14;
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v29,  v28,  17LL));

  unsigned int v16 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    int v27 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "A2dpPacketFlush sendA2DPPacketFlushMetric stats %@",  buf,  0xCu);
  }

  sub_1002EFD68((uint64_t)v2, 8u, v15);
}

void sub_1002F6910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002F6A18(uint64_t a1, uint64_t a2)
{
  return sub_100328BAC(a1 + 40, (__int128 *)(a2 + 40));
}

uint64_t sub_1002F6A24(uint64_t a1)
{
  return sub_100328D20(a1 + 40);
}

float sub_1002F6A2C(unsigned __int8 *a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = a1[530];
    int v5 = a1[529];
    int v6 = a1[531];
    int v7 = a1[528];
    v8[0] = 67109888;
    v8[1] = v7;
    __int16 v9 = 1024;
    int v10 = v6;
    __int16 v11 = 1024;
    int v12 = v5;
    __int16 v13 = 1024;
    int v14 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "NumberOfClassicDevicesConnected = %d, NumberOfClassicHIDDevicesConnected = %u, NumberOfLEDevicesConnected = %u, Nu mberOfLEHIDDevicesConnected = %u",  (uint8_t *)v8,  0x1Au);
  }

  return result;
}

void sub_1002F6AF4(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 64);
  uint64_t v142 = 0LL;
  uint64_t v143 = 0LL;
  if (v4) {
    sub_1003D55EC(v4, (_DWORD *)&v143 + 1, &v143, &v142, (_DWORD *)&v142 + 1);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 180);
  memset(&v141, 0, sizeof(v141));
  sub_10002418C(&v141, "");
  int v7 = *(_DWORD *)(a2 + 172);
  BOOL v8 = 1;
  if (v7 == 256 || v7 == 127)
  {
    LODWORD(v6) = *(_DWORD *)(a2 + 164);
    double v6 = (double)*(unint64_t *)&v6 / 0.0075;
    unsigned int v124 = v6;
    uint64_t v106 = @"Mono";
    __int16 v9 = @"Cellular Voice Call";
LABEL_10:
    uint64_t v122 = v9;
    goto LABEL_11;
  }

  if (v8)
  {
    LODWORD(v6) = *(_DWORD *)(a2 + 164);
    double v6 = (double)*(unint64_t *)&v6 / 0.015;
    unsigned int v124 = v6;
    uint64_t v106 = @"Stereo";
    __int16 v9 = @"FaceTime";
    goto LABEL_10;
  }

  unsigned int v124 = 0;
  uint64_t v122 = @"Unknown";
  uint64_t v106 = @"Unknown";
LABEL_11:
  if (v5)
  {
    LODWORD(v6) = *(_DWORD *)(a2 + 176);
    double v10 = (double)*(unint64_t *)&v6;
    if (*(_BYTE *)(a2 + 237))
    {
      double v6 = v10 / (double)*(unint64_t *)(a2 + 296) * 100.0;
      unsigned int v130 = v6;
    }

    else
    {
      unsigned int v130 = (v10 / (double)v5 * 100.0);
      __int16 v11 = (os_log_s *)(id)qword_1008F7578;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v12 = *(_DWORD *)(a2 + 176);
        *(_DWORD *)__int128 buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = v12;
        __int16 v147 = 1024;
        unsigned int v148 = v5;
        __int16 v149 = 2048;
        *(double *)uint64_t v150 = (double)v12 / (double)v5;
        *(_WORD *)&v150[8] = 1024;
        *(_DWORD *)unsigned int v151 = v130;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Calculated PLCUsage: %u / %u  i.e %lf * 100 = %u",  buf,  0x1Eu);
      }
    }

    unsigned int v13 = *(_DWORD *)(a2 + 180);
    BOOL v14 = v124 >= v13;
    unsigned int v15 = v124 - v13;
    if (v15 != 0 && v14)
    {
      unsigned int v94 = v15;
      double v6 = (double)v15 / (double)v5 * 100.0;
      unsigned int v126 = v6;
      goto LABEL_22;
    }
  }

  else
  {
    unsigned int v130 = 0;
  }

  unsigned int v126 = 0;
  unsigned int v94 = 0;
LABEL_22:
  unsigned int v16 = *(_DWORD *)(a2 + 164);
  if (v16 - 1 < 0x3B)
  {
    unsigned int v17 = 1;
    goto LABEL_26;
  }

  if (v16)
  {
    double v6 = (double)v16 / 60.0;
    unsigned int v17 = vcvtad_u64_f64(v6);
LABEL_26:
    unsigned int v128 = v17;
    if (!v4) {
      goto LABEL_38;
    }
    goto LABEL_27;
  }

  unsigned int v128 = 0;
  if (!v4) {
    goto LABEL_38;
  }
LABEL_27:
  sub_1003D01A0(v4, (uint64_t)__p);
  sub_1002F5CB4((uint64_t)__p, buf);
  std::string::operator=(&v141, (const std::string *)buf);
  if ((v150[7] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v141.__r_.__value_.__s.__size_ < 0)
  {
    if (v141.__r_.__value_.__l.__size_)
    {
      unint64_t v18 = (std::string *)v141.__r_.__value_.__r.__words[0];
      goto LABEL_36;
    }
  }

  else if (v141.__r_.__value_.__s.__size_)
  {
    unint64_t v18 = &v141;
LABEL_36:
    uint64_t v136 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  v18,  +[NSString defaultCStringEncoding](&OBJC_CLASS___NSString, "defaultCStringEncoding")));
    goto LABEL_39;
  }

void sub_1002F7D44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (a71 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002F813C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEBUG)) {
    sub_10066B1A8((uint64_t)a2, v4, v5, v6, v7, v8, v9, v10);
  }
  v15[0] = @"HeadTrackingTransition";
  else {
    __int16 v11 = (unsigned int *)*((void *)a2 + 1);
  }
  unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v11));
  v15[1] = @"WxProductID";
  v16[0] = v12;
  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *a2));
  v16[1] = v13;
  BOOL v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v16,  v15,  2LL));

  sub_1002EFD68(a1, 0x55u, v14);
}

void sub_1002F8258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002F8288(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    else {
      uint64_t v5 = (uint64_t *)*a2;
    }
    else {
      uint64_t v6 = (uint64_t *)a2[3];
    }
    int v7 = *((_DWORD *)a2 + 12);
    else {
      uint64_t v8 = (uint64_t *)a2[7];
    }
    *(_DWORD *)__int128 buf = 136315906;
    uint64_t v23 = v5;
    __int16 v24 = 2080;
    unint64_t v25 = v6;
    __int16 v26 = 1024;
    int v27 = v7;
    __int16 v28 = 2080;
    uint64_t v29 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Spatial Setting submitting following CA metric: AudioCategory:%s SpatialTransition:%s WxProductID:%u BundleID:%s",  buf,  0x26u);
  }

  v20[0] = @"AudioCategory";
  else {
    uint64_t v9 = (uint64_t *)*a2;
  }
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v9, v20[0]));
  v21[0] = v10;
  v20[1] = @"SpatialTransition";
  else {
    uint64_t v11 = a2[3];
  }
  unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v11));
  v21[1] = v12;
  v20[2] = @"WxProductID";
  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)a2 + 12)));
  void v21[2] = v13;
  void v20[3] = @"BundleID";
  uint64_t v16 = a2[7];
  unsigned int v15 = a2 + 7;
  uint64_t v14 = v16;
  else {
    uint64_t v17 = v14;
  }
  unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v17));
  void v21[3] = v18;
  unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v21,  v20,  4LL));

  sub_1002EFD68(a1, 0x74u, v19);
}

void sub_1002F849C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002F84E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    else {
      uint64_t v4 = (uint64_t *)*a2;
    }
    else {
      uint64_t v5 = (uint64_t *)a2[3];
    }
    else {
      uint64_t v6 = (uint64_t *)a2[6];
    }
    int v7 = *((_DWORD *)a2 + 18);
    int v8 = *((_DWORD *)a2 + 19);
    int v9 = *((_DWORD *)a2 + 20);
    else {
      uint64_t v10 = (uint64_t *)a2[11];
    }
    int v11 = *((_DWORD *)a2 + 28);
    int v12 = *((_DWORD *)a2 + 29);
    int v13 = *((_DWORD *)a2 + 30);
    else {
      uint64_t v14 = (uint64_t *)a2[16];
    }
    int v15 = *((_DWORD *)a2 + 38);
    *(_DWORD *)__int128 buf = 136317954;
    uint64_t v39 = v4;
    __int16 v40 = 2080;
    __int128 v41 = v5;
    __int16 v42 = 2080;
    uint64_t v43 = v6;
    __int16 v44 = 1024;
    int v45 = v7;
    __int16 v46 = 1024;
    int v47 = v8;
    __int16 v48 = 1024;
    int v49 = v9;
    __int16 v50 = 2080;
    unsigned int v51 = v10;
    __int16 v52 = 1024;
    int v53 = v11;
    __int16 v54 = 1024;
    int v55 = v12;
    __int16 v56 = 1024;
    int v57 = v13;
    __int16 v58 = 2080;
    uint64_t v59 = v14;
    __int16 v60 = 1024;
    int v61 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "HeadtrackedSpatial Setting submitting following CA metric: fAccessHTTransition: %s fAudioCategory: %s fBundleID: % s fCurrAccessHTSetting: %d fCurrHeadTrackingSetting: %d fCurrSpatialSetting: %d fHeadTrackingTransition: %s fPrevA ccessHTSetting: %d fPrevHeadTrackingSetting: %d fPrevSpatialSetting: %d fSpatialTransition: %s fWxProductID: %u",  buf,  0x5Eu);
  }

  v36[0] = @"AccessHTTransition";
  else {
    uint64_t v16 = (uint64_t *)*a2;
  }
  uint32x2_t v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v16, a1));
  v37[0] = v35;
  v36[1] = @"AudioCategory";
  else {
    uint64_t v17 = a2[3];
  }
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v17));
  v37[1] = v34;
  _OWORD v36[2] = @"BundleID";
  else {
    uint64_t v18 = a2[6];
  }
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v18));
  void v37[2] = v33;
  void v36[3] = @"CurrAccessHTSetting";
  unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *((unsigned int *)a2 + 18)));
  void v37[3] = v19;
  v36[4] = @"CurrHeadTrackingSetting";
  unsigned int v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *((unsigned int *)a2 + 19)));
  v37[4] = v20;
  v36[5] = @"CurrSpatialSetting";
  double v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *((unsigned int *)a2 + 20)));
  v37[5] = v21;
  v36[6] = @"HeadTrackingTransition";
  else {
    uint64_t v22 = a2[11];
  }
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v22));
  v37[6] = v23;
  v36[7] = @"PrevAccessHTSetting";
  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *((unsigned int *)a2 + 28)));
  v37[7] = v24;
  char v36[8] = @"PrevHeadTrackingSetting";
  unint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *((unsigned int *)a2 + 29)));
  v37[8] = v25;
  v36[9] = @"PrevSpatialSetting";
  __int16 v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *((unsigned int *)a2 + 30)));
  v37[9] = v26;
  v36[10] = @"SpatialTransition";
  else {
    uint64_t v27 = a2[16];
  }
  __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v27));
  v37[10] = v28;
  v36[11] = @"WxProductID";
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)a2 + 38)));
  v37[11] = v29;
  int32x2_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v37,  v36,  12LL));

  sub_1002EFD68(v32, 0x54u, v30);
}

void sub_1002F88F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _Unwind_Resume(a1);
}

void sub_1002F89AC(uint64_t a1, uint64_t a2)
{
  else {
    uint64_t v3 = *(_DWORD *)(a2 + 32) / 0x3Cu;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 48);
  unsigned int v5 = *(_DWORD *)(a2 + 52);
  unsigned int v6 = v4 - 1;
  unsigned int v7 = v4 / 0x3C;
  if (v6 < 0x3B) {
    uint64_t v8 = 1LL;
  }
  else {
    uint64_t v8 = v7;
  }
  unsigned int v9 = v5 - 1;
  unsigned int v10 = v5 / 0x3C;
  if (v9 < 0x3B) {
    uint64_t v11 = 1LL;
  }
  else {
    uint64_t v11 = v10;
  }
  int v12 = *(_DWORD *)(a2 + 68) - 1;
  else {
    int v13 = (const __CFString *)*((void *)&off_100890FB8 + v12);
  }
  int v14 = *(_DWORD *)(a2 + 72) - 1;
  else {
    int v15 = (const __CFString *)*((void *)&off_100890FD0 + v14);
  }
  uint64_t v16 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = *(_DWORD *)(a2 + 36);
    int v18 = *(_DWORD *)(a2 + 40);
    int v19 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)__int128 buf = 67110914;
    int v38 = v3;
    __int16 v39 = 1024;
    int v40 = v17;
    __int16 v41 = 1024;
    int v42 = v18;
    __int16 v43 = 1024;
    int v44 = v19;
    __int16 v45 = 1024;
    int v46 = v8;
    __int16 v47 = 1024;
    int v48 = v11;
    __int16 v49 = 2112;
    __int16 v50 = v13;
    __int16 v51 = 2112;
    __int16 v52 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter submitting following CA metric: totalDurationSharingSessionMinuite:%um totalSiriActivationDuring Session:%u Sessions fTotalIncomingCallsDuringSessio:%u Calls fTotalOutgoingCallsDuringSession:%u Calls totalMusicP laybackDurationMinuite:%um totalVideoPlaybackDurationMinuite:%um sharingSessionStart:%@, sharingSessionStop:%@",  buf,  0x3Au);
  }

  v35[0] = @"totalDurationSessionMinuite";
  unsigned int v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v3));
  v36[0] = v20;
  v35[1] = @"totalSiriActivaton";
  double v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 36)));
  v36[1] = v21;
  v35[2] = @"totalIncomingCalls";
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 40)));
  _OWORD v36[2] = v22;
  void v35[3] = @"totalOutgoingCalls";
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a2 + 44)));
  void v36[3] = v23;
  v35[4] = @"musicPlaybackDurationMinuite";
  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v8));
  v36[4] = v24;
  v35[5] = @"videoPlaybackDurationMinuite";
  unint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v11));
  v36[5] = v25;
  v36[6] = &off_1008C2A68;
  v35[6] = @"failureToAggregateAudio";
  v35[7] = @"failureToConnectToGuest";
  v36[7] = &off_1008C2A68;
  char v36[8] = &off_1008C2A68;
  v35[8] = @"authFailureToGuest";
  v35[9] = @"sharingSessionStart";
  v36[9] = v13;
  v36[10] = v15;
  v35[10] = @"sharingSessionStop";
  v35[11] = @"ownerGuestWxProductID";
  else {
    uint64_t v26 = *(void *)(a2 + 128);
  }
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v26));
  v36[11] = v27;
  v35[12] = @"errorCode";
  uint64_t v30 = *(void *)(a2 + 152);
  uint64_t v29 = a2 + 152;
  uint64_t v28 = v30;
  else {
    uint64_t v31 = v28;
  }
  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v31));
  void v36[12] = v32;
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v36,  v35,  13LL));

  sub_1002EFD68(a1, 0x76u, v33);
}

void sub_1002F8D30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002F8DA8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  v14[0] = @"MFGModel";
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2));
  v15[0] = v9;
  v14[1] = @"Result";
  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a3));
  v15[1] = v10;
  void v14[2] = @"Script";
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a4));
  void v15[2] = v11;
  void v14[3] = @"DurationInMs";
  int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a5));
  void v15[3] = v12;
  int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v15,  v14,  4LL));

  sub_1002EFD68(a1, 0x5Au, v13);
}

void sub_1002F8EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002F8F40(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v8 = sub_1002F91AC(a1, a2);
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v18 = 0LL;
  else {
    unsigned int v10 = (uint64_t *)*a4;
  }
  uint64_t v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v10));
  if (!-[__CFString length](v11, "length"))
  {

    uint64_t v11 = @"Unknown";
  }

  int v12 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v22 = v9;
    __int16 v23 = 1024;
    unsigned int v24 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Sending FWError to CoreAnalytics Type : %@ , ErrorCode: %d",  buf,  0x12u);
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  __p,  +[NSString defaultCStringEncoding](&OBJC_CLASS___NSString, "defaultCStringEncoding")));
  v20[0] = v9;
  v19[0] = @"FWErrorType";
  v19[1] = @"ErrorCode";
  int v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a3));
  v20[1] = v14;
  v20[2] = v11;
  _DWORD v19[2] = @"ErrorReason";
  void v19[3] = @"FirmwareVersion";
  void v20[3] = v13;
  int v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v20,  v19,  4LL));

  sub_1002EFD68(a1, 0x50u, v15);
  if (a2 <= 0xD && ((1 << a2) & 0x2D9B) != 0) {
    sub_1002F91D0(v16, v15);
  }

  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1002F9144( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

CFStringRef sub_1002F91AC(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xD) {
    return @"Unknown";
  }
  else {
    return (const __CFString *)*((void *)&off_100890FE8 + (int)a2);
  }
}

void sub_1002F91D0(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = sub_1002E6E00();
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 648LL))(v3);
  unsigned int v5 = (os_log_s *)qword_1008F7578;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Notifying BT Firmware Crashed", buf, 2u);
    }

    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v2));
    [v7 setObject:@"FWCrashed" forKeyedSubscript:@"_input"];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    _DWORD v9[2] = sub_10031F4DC;
    v9[3] = &unk_100890D18;
    id v10 = objc_alloc_init(&OBJC_CLASS___BTServicesClient);
    id v8 = v10;
    [v8 diagnosticControl:v7 completion:v9];
  }

  else if (v6)
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Not Notifying BT Firmware Crashed", buf, 2u);
  }
}

void sub_1002F931C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  int v17 = v16;

  _Unwind_Resume(a1);
}

uint64_t sub_1002F935C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  if ((sub_1003D2B2C(a2, 12) & 1) != 0 || (uint64_t result = sub_1003D2AF4(a2), (_DWORD)result))
  {
    sub_1003D55EC(a2, (_DWORD *)&v5 + 1, &v5, &v4, (_DWORD *)&v4 + 1);
    return v4;
  }

  return result;
}

void sub_1002F93BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v19 = 0LL;
  unsigned int v20 = 0LL;
  uint64_t v21 = 0LL;
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_100890E38);
  }
  sub_10052AFEC((uint64_t)off_1008D67A0, (void ***)&v19);
  uint64_t v3 = v19;
  id v2 = v20;
  uint64_t v16 = 0LL;
  int v17 = 0LL;
  uint64_t v18 = 0LL;
  if (qword_1008D60C0 != -1) {
    dispatch_once(&qword_1008D60C0, &stru_100890F38);
  }
  sub_1003EE428((uint64_t)off_1008D60B8, (char *)&v16);
  uint64_t v5 = v16;
  uint64_t v4 = v17;
  uint64_t v6 = sub_100405218();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768LL;
  void v10[2] = sub_1002F95A4;
  v10[3] = &unk_100890C48;
  void v10[4] = v1;
  std::stringbuf::string_type __p = 0LL;
  __dst = 0LL;
  uint64_t v13 = 0LL;
  unsigned int v7 = v19;
  int64_t v8 = v20 - (_BYTE *)v19;
  if (v20 != v19)
  {
    sub_10023DBC8(&__p, v8 >> 3);
    unsigned int v9 = (char *)__dst;
    memmove(__dst, v7, v8);
    __dst = &v9[8 * (v8 >> 3)];
  }

  __int16 v14 = (unint64_t)(v2 - v3) >> 3;
  __int16 v15 = (unint64_t)(v4 - v5) >> 3;
  sub_100405384(v6, v10);
  if (__p)
  {
    __dst = __p;
    operator delete(__p);
  }

  if (v16)
  {
    int v17 = v16;
    operator delete(v16);
  }

  if (v19)
  {
    unsigned int v20 = v19;
    operator delete(v19);
  }

void sub_1002F9554( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F95A4(uint64_t a1)
{
  id v2 = *(_WORD **)(a1 + 32);
  v2[285] = 0;
  uint64_t v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *(uint64_t **)(a1 + 48);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v5 = *v3;
      char v12 = 0;
      uint64_t v6 = sub_1002E6D7C();
      sub_10002418C(__p, "_CTKD_");
      BOOL v7 = !(*(unsigned int (**)(uint64_t, uint64_t, void **, char *))(*(void *)v6 + 784LL))( v6,  v5,  __p,  &v12)
        || v12 == 0;
      BOOL v8 = !v7;
      if (v11 < 0) {
        break;
      }
      if (v8) {
        goto LABEL_10;
      }
LABEL_11:
      if (++v3 == v4) {
        goto LABEL_15;
      }
    }

    operator delete(__p[0]);
    if (!v8) {
      goto LABEL_11;
    }
LABEL_10:
    ++v2[285];
    goto LABEL_11;
  }

void sub_1002F9698( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002F96B4(uint64_t a1, uint64_t a2)
{
  return sub_100240540((void *)(a1 + 40), a2 + 40);
}

void sub_1002F96C0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

void sub_1002F96D8(uint64_t a1)
{
  uint64_t v2 = sub_100404EB8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1002F93BC;
  v3[3] = &unk_10087EB20;
  v3[4] = a1;
  sub_100405384(v2, v3);
}

void sub_1002F9738(uint64_t a1)
{
  uint64_t v1 = a1 - 16;
  uint64_t v2 = sub_100404EB8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1002F93BC;
  v3[3] = &unk_10087EB20;
  v3[4] = v1;
  sub_100405384(v2, v3);
}

void sub_1002F9798(uint64_t a1)
{
  uint64_t v2 = sub_100404EB8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1002F93BC;
  v3[3] = &unk_10087EB20;
  v3[4] = a1;
  sub_100405384(v2, v3);
}

void sub_1002F97F8(uint64_t a1)
{
  uint64_t v1 = a1 - 16;
  uint64_t v2 = sub_100404EB8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1002F93BC;
  v3[3] = &unk_10087EB20;
  v3[4] = v1;
  sub_100405384(v2, v3);
}

void sub_1002F9858(uint64_t a1)
{
  uint64_t v2 = sub_100404EB8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1002F93BC;
  v3[3] = &unk_10087EB20;
  v3[4] = a1;
  sub_100405384(v2, v3);
}

void sub_1002F98B8(uint64_t a1)
{
  uint64_t v1 = a1 - 16;
  uint64_t v2 = sub_100404EB8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1002F93BC;
  v3[3] = &unk_10087EB20;
  v3[4] = v1;
  sub_100405384(v2, v3);
}

void sub_1002F9918(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_100890EB8);
  }
  id v2 = sub_100626468(qword_1008D5F18);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  unsigned __int16 v4 = (unsigned __int16)[v3 count];
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_100890EB8);
  }
  id v5 = sub_1006265A0(qword_1008D5F18);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100890F18);
  }
  BOOL v7 = off_1008D5F28;
  sub_10002418C(v34, "A1603");
  id v8 = sub_1005CE714((uint64_t)v7, (uint64_t)v34);
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = [v9 mutableCopy];

  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100890F18);
  }
  char v11 = off_1008D5F28;
  sub_10002418C(__p, "A2051");
  id v12 = sub_1005CE714((uint64_t)v11, (uint64_t)__p);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  [v10 addObjectsFromArray:v13];

  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100890F18);
  }
  __int16 v14 = off_1008D5F28;
  sub_10002418C(v30, "A3085");
  id v15 = sub_1005CE714((uint64_t)v14, (uint64_t)v30);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  [v10 addObjectsFromArray:v16];

  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100890F18);
  }
  int v17 = off_1008D5F28;
  sub_10002418C(v28, "A2538");
  id v18 = sub_1005CE714((uint64_t)v17, (uint64_t)v28);
  int v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  [v10 addObjectsFromArray:v19];

  if (v29 < 0) {
    operator delete(v28[0]);
  }
  uint64_t v20 = sub_100405218();
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_1002F9CD4;
  void v23[3] = &unk_100890C80;
  uint64_t v26 = v1;
  v23[4] = v3;
  unsigned __int16 v27 = v4;
  id v21 = v6;
  id v24 = v21;
  id v22 = v10;
  id v25 = v22;
  sub_100405384(v20, v23);
}

void sub_1002F9C08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  _Unwind_Resume(a1);
}

id sub_1002F9CD4(uint64_t a1)
{
  uint64_t v1 = *(_WORD **)(a1 + 56);
  v1[285] = 0;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v16;
    do
    {
      id v5 = 0LL;
      do
      {
        if (*(void *)v16 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)v5);
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_100890F18);
        }
        BOOL v7 = off_1008D5F28;
        sub_10002418C(__p, "_CTKD_");
        int v8 = sub_1005CE5A8((uint64_t)v7, v6, (uint64_t)__p);
        int v9 = v8;
        if ((v14 & 0x80000000) == 0)
        {
          if (!v8) {
            goto LABEL_11;
          }
LABEL_10:
          ++v1[285];
          goto LABEL_11;
        }

        operator delete(__p[0]);
        if (v9) {
          goto LABEL_10;
        }
LABEL_11:
        id v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v10 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
      id v3 = v10;
    }

    while (v10);
  }

  v1[281] = *(_WORD *)(a1 + 64);
  v1[283] = (unsigned __int16)[*(id *)(a1 + 40) count];
  id result = [*(id *)(a1 + 48) count];
  v1[284] = (_WORD)result;
  return result;
}

void sub_1002F9E7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1002F9EB4(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1002F9918;
  v3[3] = &unk_10087EB20;
  v3[4] = a1;
  sub_100405384(v2, v3);
}

void sub_1002F9F14(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1002F9918;
  v3[3] = &unk_10087EB20;
  v3[4] = a1 - 80;
  sub_100405384(v2, v3);
}

void sub_1002F9F78(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1002F9918;
  v3[3] = &unk_10087EB20;
  v3[4] = a1;
  sub_100405384(v2, v3);
}

void sub_1002F9FD8(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1002F9918;
  v3[3] = &unk_10087EB20;
  v3[4] = a1 - 80;
  sub_100405384(v2, v3);
}

void sub_1002FA03C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  int v115 = a3;
  int v113 = *(_DWORD *)(a2 + 128);
  __int16 v114 = *(_WORD *)(a2 + 132);
  int v112 = 0;
  uint64_t v111 = 0LL;
  unsigned int v110 = 0;
  sub_1003D55EC(a2, &v112, (_DWORD *)&v111 + 1, &v110, &v111);
  if (a4 == 11)
  {
    int v9 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sub_100426610(&v115));
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v118[0] = 0uLL;
    sub_100242F28((uint64_t)v118, a1 + 176);
    char v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 336) objectForKey:v10]);
    BOOL v12 = v11 == 0LL;

    if (v12)
    {
      if ((_DWORD)a5) {
        uint64_t v23 = objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithObjects:]( &OBJC_CLASS___NSMutableArray,  "arrayWithObjects:",  &off_1008C2A50,  &off_1008C2A80,  0LL));
      }
      else {
        uint64_t v23 = objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithObjects:]( &OBJC_CLASS___NSMutableArray,  "arrayWithObjects:",  &off_1008C2A80,  0LL));
      }
      id v24 = *(void **)(a1 + 344);
      *(void *)(a1 + 344) = v23;

      [*(id *)(a1 + 336) setObject:*(void *)(a1 + 344) forKeyedSubscript:v10];
    }

    else
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 336) objectForKeyedSubscript:v10]);
      char v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectAtIndexedSubscript:1]);
      unsigned int v15 = [v14 unsignedIntValue];

      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v15 + 1));
      __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 336) objectForKeyedSubscript:v10]);
      [v17 setObject:v16 atIndexedSubscript:1];

      if (!(_DWORD)a5)
      {
        __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 336) objectForKeyedSubscript:v10]);
        int v19 = (void *)objc_claimAutoreleasedReturnValue([v18 objectAtIndexedSubscript:0]);
        unsigned int v20 = [v19 unsignedIntValue];

        id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v20 + 1));
        id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 336) objectForKeyedSubscript:v10]);
        [v22 setObject:v21 atIndexedSubscript:0];
      }
    }

    sub_100242F54((uint64_t)v118);
    sub_100242FAC((uint64_t)v118);
  }

  else if ((a4 - 11) > 1)
  {
    goto LABEL_24;
  }

  id v25 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v122 = 0LL;
  __int128 v120 = 0u;
  __int128 v121 = 0u;
  __int128 v119 = 0u;
  memset(v118, 0, sizeof(v118));
  uint64_t v26 = sub_10026CDA4(a1 + 320, a4);
  unsigned __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v27, @"Event");

  uint64_t v28 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sub_100426610(&v115));
  char v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v29, @"ServiceID");

  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a5));
  -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v30, @"Result");

  if (sub_1003D9F10(a2, v115, a4, a5, (uint64_t)v118))
  {
    memset(&v109, 0, sizeof(v109));
    sub_10026C9EC((unsigned __int8 *)v118 + 4, 20, &v109);
    memset(&__p, 0, sizeof(__p));
    sub_10026C9EC((unsigned __int8 *)&v118[1] + 8, 20, &__p);
    if ((v109.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v31 = &v109;
    }
    else {
      char v31 = (std::stringbuf::string_type *)v109.__r_.__value_.__r.__words[0];
    }
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v31));
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v32, @"PrimaryHash");

    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_p));
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v34, @"SecondaryHash");

    int v107 = v120;
    char v35 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", sub_100401AB4(&v107));
    unsigned int v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v36, @"TypesOfDevicesConnected");

    unsigned int v37 = sub_10026CB18(a1 + 320, SDWORD2(v119));
    int v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v38, @"ActiveSessions");

    __int16 v39 = sub_10026CB18(a1 + 320, SDWORD2(v120));
    int v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v40, @"ConnectedServices");

    __int16 v41 = sub_10026CB18(a1 + 320, SHIDWORD(v120));
    int v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v42, @"PendingServices");

    __int16 v43 = sub_10026CC30(a1 + 320, *((uint64_t *)&v121 + 1));
    int v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v44, @"UserSettingsEnabled");

    __int16 v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  v121));
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v45, @"PbapObexTransportProtocol");

    int v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", BYTE1(v121)));
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v46, @"DidSendPbapObexUnauthorizedError");

    __int16 v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", BYTE2(v122)));
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v47, @"HidServicePresent");
  }

  sub_1002EFD68(a1, 0x72u, v25);

LABEL_24:
  if (a4 != 201 && a4 != 101)
  {
    if (a4 != 11) {
      return;
    }
    if (!(_DWORD)a5)
    {
      sub_1003FE1B4((unsigned __int8 *)&v113, v118);
      if ((SBYTE7(v118[1]) & 0x80u) == 0) {
        __int16 v56 = v118;
      }
      else {
        __int16 v56 = *(_OWORD **)&v118[0];
      }
      int v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v56));
      if (SBYTE7(v118[1]) < 0) {
        operator delete(*(void **)&v118[0]);
      }
      v118[0] = 0uLL;
      sub_100242F28((uint64_t)v118, a1 + 176);
      __int16 v58 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 304) objectForKey:v57]);
      BOOL v59 = v58 == 0LL;

      if (v59)
      {
        __int16 v60 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", sub_1003D2B2C(a2, 12));
        int v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
        [*(id *)(a1 + 304) setObject:v61 forKeyedSubscript:v57];
      }

      sub_100242F54((uint64_t)v118);
      sub_100242FAC((uint64_t)v118);
    }

    *(_OWORD *)&v109.__r_.__value_.__l.__data_ = 0uLL;
    sub_100242F28((uint64_t)&v109, a1 + 240);
    sub_1003CF00C(a2, v118);
    uint64_t v62 = sub_100329358(a1 + 384, (const void **)v118);
    if (SBYTE7(v118[1]) < 0) {
      operator delete(*(void **)&v118[0]);
    }
    if (v62 != 1) {
      goto LABEL_65;
    }
    memset(v118, 0, 24);
    sub_1003CF00C(a2, v118);
    switch(v115)
    {
      case 1:
        if ((_DWORD)a5)
        {
          uint64_t v70 = sub_1002EDE6C(a1 + 384, (const void **)v118);
          uint64_t v71 = *(void **)(v70 + 24);
          *(void *)(v70 + 24) = @"HFP Connect Failed";

          uint64_t v72 = sub_1002EDE6C(a1 + 384, (const void **)v118);
          unsigned int v73 = *(void **)(v72 + 32);
          *(void *)(v72 + sub_100242FAC(v1 - 32) = @"HFP Failed";

          uint64_t v74 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a5));
          uint64_t v75 = sub_1002EDE6C(a1 + 384, (const void **)v118);
          unsigned int v76 = *(void **)(v75 + 48);
          *(void *)(v75 + 4_Block_object_dispose(va, 8) = v74;

          uint64_t v77 = (int *)sub_1002EDE6C(a1 + 384, (const void **)v118);
          int32x2_t v78 = v94;
          unsigned int v79 = v94;
LABEL_56:
          sub_1002FB608((uint64_t)v79, v77);
LABEL_59:
          sub_1002FAE10(a1, v78);
          sub_1003293D4((uint64_t **)(a1 + 384), (const void **)v118);
          goto LABEL_63;
        }

        *(_BYTE *)(sub_1002EDE6C(a1 + 384, (const void **)v118) + 4) = 1;
        break;
      case 0x10:
        if ((_DWORD)a5)
        {
          unsigned int v80 = (os_log_s *)qword_1008F7578;
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "Analytics - A2DP Failed",  (uint8_t *)&__p,  2u);
          }

          uint64_t v81 = sub_1002EDE6C(a1 + 384, (const void **)v118);
          uint64_t v82 = *(void **)(v81 + 24);
          *(void *)(v81 + 24) = @"A2DP Connect Failed";

          uint64_t v83 = sub_1002EDE6C(a1 + 384, (const void **)v118);
          unsigned int v84 = *(void **)(v83 + 32);
          *(void *)(v83 + sub_100242FAC(v1 - 32) = @"A2DP Failed";

          uint64_t v85 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a5));
          uint64_t v86 = sub_1002EDE6C(a1 + 384, (const void **)v118);
          uint64_t v87 = *(void **)(v86 + 48);
          *(void *)(v86 + 4_Block_object_dispose(va, 8) = v85;

          uint64_t v77 = (int *)sub_1002EDE6C(a1 + 384, (const void **)v118);
          int32x2_t v78 = v95;
          unsigned int v79 = v95;
          goto LABEL_56;
        }

        *(_BYTE *)(sub_1002EDE6C(a1 + 384, (const void **)v118) + 1) = 1;
        break;
      case 0x80000:
        if ((_DWORD)a5)
        {
          unsigned int v63 = (os_log_s *)qword_1008F7578;
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "Analytics - AACP Failed",  (uint8_t *)&__p,  2u);
          }

          uint64_t v64 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a5));
          uint64_t v65 = sub_1002EDE6C(a1 + 384, (const void **)v118);
          unsigned int v66 = *(void **)(v65 + 48);
          *(void *)(v65 + 4_Block_object_dispose(va, 8) = v64;

          uint64_t v67 = sub_1002EDE6C(a1 + 384, (const void **)v118);
          uint64_t v68 = *(void **)(v67 + 32);
          uint64_t v69 = @"AACP Failed";
        }

        else
        {
          *(_BYTE *)sub_1002EDE6C(a1 + 384, (const void **)v11_Block_object_dispose(va, 8) = 1;
          uint64_t v67 = sub_1002EDE6C(a1 + 384, (const void **)v118);
          uint64_t v68 = *(void **)(v67 + 32);
          uint64_t v69 = @"Success";
        }

        *(void *)(v67 + sub_100242FAC(v1 - 32) = v69;

        char v88 = sub_1003E461C(a2);
        *(_BYTE *)(sub_1002EDE6C(a1 + 384, (const void **)v118) + 3) = v88;
        uint64_t v89 = sub_1002EDE6C(a1 + 384, (const void **)v118);
        int v90 = *(_DWORD *)v89;
        __int16 v97 = *(_WORD *)(v89 + 4);
        int v96 = v90;
        id v98 = *(id *)(v89 + 8);
        id v99 = *(id *)(v89 + 16);
        id v100 = *(id *)(v89 + 24);
        id v101 = *(id *)(v89 + 32);
        id v102 = *(id *)(v89 + 40);
        id v103 = *(id *)(v89 + 48);
        id v104 = *(id *)(v89 + 56);
        __int128 v91 = *(_OWORD *)(v89 + 79);
        v105[0] = *(_OWORD *)(v89 + 64);
        *(_OWORD *)((char *)v105 + 15) = v91;
        id v106 = *(id *)(v89 + 96);
        int32x2_t v78 = (unsigned __int8 *)&v96;
        goto LABEL_59;
      default:
        goto LABEL_63;
    }

    uint64_t v92 = sub_1002EDE6C(a1 + 384, (const void **)v118);
    uint64_t v93 = *(void **)(v92 + 32);
    *(void *)(v92 + sub_100242FAC(v1 - 32) = @"Success";

LABEL_63:
    if (SBYTE7(v118[1]) < 0) {
      operator delete(*(void **)&v118[0]);
    }
LABEL_65:
    sub_100242FAC((uint64_t)&v109);
    return;
  }

  v116[0] = @"PID";
  int v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v110));
  v117[0] = v48;
  v116[1] = @"VID";
  __int16 v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", HIDWORD(v111)));
  v117[1] = v49;
  v116[2] = @"Version";
  __int16 v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  v111));
  v117[2] = v50;
  v116[3] = @"IsAppleDevice";
  __int16 v51 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", sub_1003D2B2C(a2, 12));
  __int16 v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
  v117[3] = v52;
  v116[4] = @"Result";
  int v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a5));
  v117[4] = v53;
  __int16 v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v117,  v116,  5LL));

  if (a4 == 201)
  {
    ++*(_WORD *)(a1 + 134);
    unsigned int v55 = 9;
  }

  else
  {
    ++*(_WORD *)(a1 + 136);
    unsigned int v55 = 83;
  }

  sub_1002EFD68(a1, v55, v54);
}

void sub_1002FABE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  sub_100242FAC(v64 - 192);
  _Unwind_Resume(a1);
}

void sub_1002FAE10(uint64_t a1, unsigned __int8 *a2)
{
  id v3 = (void *)*((void *)a2 + 6);
  if (v3) {
    __int16 v43 = v3;
  }
  else {
    __int16 v43 = &off_1008C2A50;
  }
  id v4 = [*((id *)a2 + 1) length];
  id v5 = (void *)*((void *)a2 + 1);
  if (v4)
  {
    int v44 = v5;
  }

  else
  {
    int v44 = @"Unknown";
    *((void *)a2 + 1) = @"Unknown";
  }

  v61[0] = @"ACLConnected";
  v62[0] = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2[2]));
  v61[1] = @"AACPConnected";
  __int16 v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *a2));
  v62[1] = v41;
  v61[2] = @"A2DPConnected";
  int v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2[1]));
  v62[2] = v42;
  void v62[3] = v44;
  void v61[3] = @"BundleID";
  v61[4] = @"ConnectionType";
  v62[4] = *((void *)a2 + 2);
  v61[5] = @"DurationInMSec";
  uint64_t v6 = mach_absolute_time();
  BOOL v7 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  UpTicksToMilliseconds(v6 - *((void *)a2 + 9)));
  int v40 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v62[5] = v40;
  v62[6] = v43;
  v61[6] = @"ErrorCode";
  v61[7] = @"ErrorReason";
  v62[7] = *((void *)a2 + 3);
  v61[8] = @"FastConnectUsed";
  uint64_t v8 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2[3]));
  uint64_t v9 = *((void *)a2 + 5);
  __int16 v39 = (void *)v8;
  v62[8] = v8;
  v62[9] = v9;
  v61[9] = @"FWVersion";
  v61[10] = @"HFPConnected";
  int v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2[4]));
  v62[10] = v38;
  v61[11] = @"MagicPairingSuccessfull";
  uint64_t v36 = a1;
  unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2[5]));
  v62[11] = v37;
  v61[12] = @"PID";
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)a2 + 17)));
  v62[12] = v10;
  v61[13] = @"VID";
  char v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)a2 + 16)));
  uint64_t v12 = *((void *)a2 + 7);
  v62[13] = v11;
  v62[14] = v12;
  v61[14] = @"LastSeenTimeInSec";
  v61[15] = @"Status";
  v62[15] = *((void *)a2 + 4);
  v61[16] = @"RetryCurrent";
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a2[88]));
  v62[16] = v13;
  v61[17] = @"RetryMax";
  char v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a2[89]));
  v62[17] = v14;
  v61[18] = @"BasebandDuration";
  unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *((unsigned __int16 *)a2 + 45)));
  v62[18] = v15;
  v61[19] = @"BasebandDurationTotal";
  __int128 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *((unsigned __int16 *)a2 + 46)));
  v62[19] = v16;
  v61[20] = @"BBFCStatusSource";
  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2[94]));
  v62[20] = v17;
  __int128 v18 = (void *)v62[0];
  int v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v62,  v61,  21LL));
  id v20 = [v19 mutableCopy];

  __int128 v55 = 0u;
  __int128 v56 = 0u;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  id v21 = *((id *)a2 + 12);
  id v22 = [v21 countByEnumeratingWithState:&v53 objects:v60 count:16];
  if (v22)
  {
    uint64_t v23 = *(void *)v54;
    do
    {
      for (std::string::size_type i = 0LL; i != v22; std::string::size_type i = (char *)i + 1)
      {
        if (*(void *)v54 != v23) {
          objc_enumerationMutation(v21);
        }
        uint64_t v25 = *(void *)(*((void *)&v53 + 1) + 8LL * (void)i);
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*((id *)a2 + 12) objectForKeyedSubscript:v25]);
        [v20 setObject:v26 forKeyedSubscript:v25];
      }

      id v22 = [v21 countByEnumeratingWithState:&v53 objects:v60 count:16];
    }

    while (v22);
  }

  id v52 = 0LL;
  NSAppendPrintF_safe(&v52, "Airpods Connection Stats: ");
  id v27 = v52;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  id v28 = v20;
  id v29 = [v28 countByEnumeratingWithState:&v48 objects:v59 count:16];
  if (v29)
  {
    uint64_t v30 = *(void *)v49;
    do
    {
      for (j = 0LL; j != v29; j = (char *)j + 1)
      {
        if (*(void *)v49 != v30) {
          objc_enumerationMutation(v28);
        }
        uint64_t v32 = *(void *)(*((void *)&v48 + 1) + 8LL * (void)j);
        id v47 = v27;
        NSAppendPrintF_safe(&v47, "%@:", v32);
        id v33 = v47;

        id v46 = v33;
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v28 objectForKeyedSubscript:v32]);
        NSAppendPrintF_safe(&v46, "%@  ", v34);
        id v27 = v46;
      }

      id v29 = [v28 countByEnumeratingWithState:&v48 objects:v59 count:16];
    }

    while (v29);
  }

  char v35 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v58 = v27;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  sub_1002EFD68(v36, 0x3Du, v28);
}

void sub_1002FB4AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, id *a20)
{
  sub_1002FBFEC(a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FB608(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + _Block_object_dispose(va, 8) = *((id *)a2 + 1);
  *(void *)(a1 + 16) = *((id *)a2 + 2);
  *(void *)(a1 + 24) = *((id *)a2 + 3);
  *(void *)(a1 + sub_100242FAC(v1 - 32) = *((id *)a2 + 4);
  *(void *)(a1 + 40) = *((id *)a2 + 5);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *((id *)a2 + 6);
  *(void *)(a1 + 56) = *((id *)a2 + 7);
  __int128 v5 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 79) = *(_OWORD *)((char *)a2 + 79);
  *(_OWORD *)(a1 + 64) = v5;
  *(void *)(a1 + 96) = *((id *)a2 + 12);
  return a1;
}

void sub_1002FB6AC(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
}

void sub_1002FB6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!(_DWORD)a3)
  {
    *(void *)__int128 buf = 0LL;
    sub_1000B0400((uint64_t)buf);
    uint64_t v6 = *(int *)buf;
    uint64_t v7 = *(__int16 *)&buf[4];
    *(void *)__int128 buf = a2 + 128;
    uint64_t v8 = sub_10032942C((uint64_t **)(a1 + 408), a2 + 128, (uint64_t)&unk_1006C2518, (_DWORD **)buf);
    *((void *)v8 + 5) = v6;
    *((void *)v8 + 6) = v7;
  }

  int v9 = *(unsigned __int8 *)(a2 + 1333);
  id v10 = (os_log_s *)(id)qword_1008F7578;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D0100(a2, (uint64_t)&v88);
    char v11 = v89 >= 0 ? &v88 : (__int128 *)v88;
    *(_DWORD *)__int128 buf = 136315650;
    *(void *)&uint8_t buf[4] = v11;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = a3;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "ACL connected aclConnectCfm for device %s status %d incoming %d",  buf,  0x18u);
    if (SHIBYTE(v89) < 0) {
      operator delete((void *)v88);
    }
  }

  if (v9 && sub_1003D2B2C(a2, 12))
  {
    uint64_t v12 = (os_log_s *)(id)qword_1008F7578;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, buf);
      uint64_t v13 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      LODWORD(v8_Block_object_dispose(va, 8) = 136315138;
      *(void *)((char *)&v88 + 4) = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Start monitoring for connection %s",  (uint8_t *)&v88,  0xCu);
    }

    __p[0] = 0LL;
    __p[1] = 0LL;
    sub_100242F28((uint64_t)__p, a1 + 240);
    sub_1003CF00C(a2, buf);
    uint64_t v14 = sub_100329358(a1 + 384, (const void **)buf);
    uint64_t v15 = v14;
    if ((char)buf[23] < 0)
    {
      operator delete(*(void **)buf);
      if (!v15)
      {
LABEL_21:
        memset(v86, 0, sizeof(v86));
        __int128 v84 = 0u;
        __int128 v85 = 0u;
        *(void *)__int128 buf = 0LL;
        *(_OWORD *)&uint8_t buf[16] = 0u;
        id v87 = 0LL;
        *(void *)&uint8_t buf[8] = @"Unknown";

        __int128 v16 = *(void **)&buf[16];
        *(void *)&uint8_t buf[16] = @"Incoming";

        __int128 v17 = (void *)v84;
        *(void *)&__int128 v84 = @"Pending";

        __int128 v18 = *(void **)&buf[24];
        *(void *)&buf[24] = @"NA";

        int v19 = (void *)*((void *)&v84 + 1);
        *((void *)&v84 + 1) = @"NA";

        id v20 = (void *)v85;
        *(void *)&__int128 v85 = 0LL;

        id v21 = (void *)*((void *)&v85 + 1);
        *((void *)&v85 + 1) = &off_1008C2A68;
        *(void *)&v86[0] = 0LL;

        *((void *)&v86[0] + 1) = mach_absolute_time();
        DWORD2(v86[1]) = -1;
        WORD6(v86[1]) = -1;
        BYTE14(v86[1]) = 0;
        id v22 = [&off_1008C2F80 mutableCopy];
        id v23 = v87;
        id v87 = v22;

        sub_1003CF00C(a2, &v88);
        v82[0] = &v88;
        id v24 = sub_100329598((uint64_t **)(a1 + 384), (const void **)&v88, (uint64_t)&unk_1006C2518, v82);
        sub_1002FBF4C((uint64_t)v24 + 56, (int *)buf);
        if (SHIBYTE(v89) < 0) {
          operator delete((void *)v88);
        }
      }
    }

    else if (!v14)
    {
      goto LABEL_21;
    }

    sub_100242FAC((uint64_t)__p);
  }

  __int128 v88 = 0uLL;
  uint64_t v89 = 0LL;
  sub_1003CF00C(a2, &v88);
  v82[0] = 0LL;
  v82[1] = 0LL;
  sub_100242F28((uint64_t)v82, a1 + 240);
  uint64_t v25 = (uint64_t **)(a1 + 384);
  uint64_t v80 = 0LL;
  uint64_t v81 = 0LL;
  sub_1003D55EC(a2, (_DWORD *)&v81 + 1, &v81, &v80, (_DWORD *)&v80 + 1);
  int v26 = v81;
  *(_DWORD *)(sub_1002EDE6C(a1 + 384, (const void **)&v88) + 64) = v26;
  int v27 = v80;
  *(_DWORD *)(sub_1002EDE6C(a1 + 384, (const void **)&v88) + 6_Block_object_dispose(va, 8) = v27;
  sub_1003D930C(a2, 0xAu, buf);
  if ((buf[23] & 0x80u) == 0) {
    id v28 = buf;
  }
  else {
    id v28 = *(uint8_t **)buf;
  }
  uint64_t v29 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v28));
  uint64_t v30 = sub_1002EDE6C(a1 + 384, (const void **)&v88);
  char v31 = *(void **)(v30 + 40);
  *(void *)(v30 + 40) = v29;

  if ((char)buf[23] < 0)
  {
    operator delete(*(void **)buf);
    if ((_DWORD)a3) {
      goto LABEL_31;
    }
  }

  else if ((_DWORD)a3)
  {
LABEL_31:
    int v32 = *(unsigned __int8 *)(sub_1002EDE6C(a1 + 384, (const void **)&v88) + 88);
    int v33 = *(unsigned __int8 *)(sub_1002EDE6C(a1 + 384, (const void **)&v88) + 89);
    uint64_t v34 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v32;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Analytics - ACL Connection Failed retryCurrent=%d retryMax=%d",  buf,  0xEu);
    }

    if (v32 == v33)
    {
      uint64_t v35 = sub_1002EDE6C(a1 + 384, (const void **)&v88);
      uint64_t v36 = *(void **)(v35 + 24);
      *(void *)(v35 + 24) = @"ACL Connect Failed";

      uint64_t v37 = sub_1002EDE6C(a1 + 384, (const void **)&v88);
      int v38 = *(void **)(v37 + 32);
      *(void *)(v37 + sub_100242FAC(v1 - 32) = @"Failed";

      uint64_t v39 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
      uint64_t v40 = sub_1002EDE6C(a1 + 384, (const void **)&v88);
      __int16 v41 = *(void **)(v40 + 48);
      *(void *)(v40 + 4_Block_object_dispose(va, 8) = v39;

      memset(v86, 0, sizeof(v86));
      __int128 v84 = 0u;
      __int128 v85 = 0u;
      memset(buf, 0, sizeof(buf));
      sub_1003CF00C(a2, __p);
      uint64_t v63 = a1;
      uint64_t v42 = sub_1002EDE6C(a1 + 384, (const void **)__p);
      int v43 = *(_DWORD *)v42;
      *(_WORD *)&uint8_t buf[4] = *(_WORD *)(v42 + 4);
      *(_DWORD *)__int128 buf = v43;
      id v44 = *(id *)(v42 + 8);
      *(void *)&uint8_t buf[8] = v44;
      id v45 = *(id *)(v42 + 16);
      *(void *)&uint8_t buf[16] = v45;
      id v46 = *(id *)(v42 + 24);
      *(void *)&buf[24] = v46;
      id v47 = *(id *)(v42 + 32);
      *(void *)&__int128 v84 = v47;
      id v48 = *(id *)(v42 + 40);
      *((void *)&v84 + 1) = v48;
      id v49 = *(id *)(v42 + 48);
      *(void *)&__int128 v85 = v49;
      id v50 = *(id *)(v42 + 56);
      *((void *)&v85 + 1) = v50;
      __int128 v51 = *(_OWORD *)(v42 + 79);
      v86[0] = *(_OWORD *)(v42 + 64);
      *(_OWORD *)((char *)v86 + 15) = v51;
      id v52 = *(id *)(v42 + 96);
      id v87 = v52;
      if (v76 < 0) {
        operator delete(__p[0]);
      }
      int v64 = *(_DWORD *)buf;
      __int16 v65 = *(_WORD *)&buf[4];
      id v53 = v44;
      id v66 = v53;
      id v54 = v45;
      id v67 = v54;
      id v55 = v46;
      id v68 = v55;
      id v56 = v47;
      id v69 = v56;
      id v57 = v48;
      id v70 = v57;
      id v58 = v49;
      id v71 = v58;
      id v59 = v50;
      id v72 = v59;
      v73[0] = v86[0];
      *(_OWORD *)((char *)v73 + 15) = *(_OWORD *)((char *)v86 + 15);
      id v60 = v52;
      id v74 = v60;
      sub_1002FAE10(v63, (unsigned __int8 *)&v64);
    }

    sub_1003293D4(v25, (const void **)&v88);
    goto LABEL_41;
  }

  *(_BYTE *)(sub_1002EDE6C(a1 + 384, (const void **)&v88) + 2) = 1;
  __p[0] = 0LL;
  uint64_t v78 = 0LL;
  uint64_t v79 = 0LL;
  char v77 = 0;
  memset(buf, 0, 24);
  int v61 = sub_1002E9328();
  (*(void (**)(void *, void **, uint64_t *, uint64_t *, char *, uint8_t *))(*(void *)v61 + 32LL))( v61,  __p,  &v79,  &v78,  &v77,  buf);
  __int16 v62 = v78;
  *(_WORD *)(sub_1002EDE6C(a1 + 384, (const void **)&v88) + 92) = v62;
LABEL_41:
  sub_100242F54((uint64_t)v82);
  sub_100242FAC((uint64_t)v82);
  if (SHIBYTE(v89) < 0) {
    operator delete((void *)v88);
  }
}

void sub_1002FBE58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34, uint64_t a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41)
{
}

uint64_t sub_1002FBF4C(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)a1 = v4;
  objc_storeStrong((id *)(a1 + 8), *((id *)a2 + 1));
  objc_storeStrong((id *)(a1 + 16), *((id *)a2 + 2));
  objc_storeStrong((id *)(a1 + 24), *((id *)a2 + 3));
  objc_storeStrong((id *)(a1 + 32), *((id *)a2 + 4));
  objc_storeStrong((id *)(a1 + 40), *((id *)a2 + 5));
  objc_storeStrong((id *)(a1 + 48), *((id *)a2 + 6));
  objc_storeStrong((id *)(a1 + 56), *((id *)a2 + 7));
  __int128 v5 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 79) = *(_OWORD *)((char *)a2 + 79);
  *(_OWORD *)(a1 + 64) = v5;
  objc_storeStrong((id *)(a1 + 96), *((id *)a2 + 12));
  return a1;
}

id *sub_1002FBFEC(id *a1)
{
  return a1;
}

void sub_1002FC04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1002FC054(uint64_t result, uint64_t a2, int a3)
{
  if (!a3)
  {
    uint64_t v8 = v3;
    uint64_t v9 = v4;
    uint64_t v5 = result;
    int v6 = *(_DWORD *)(a2 + 128);
    __int16 v7 = *(_WORD *)(a2 + 132);
    sub_1003296C0((uint64_t **)(result + 408), (uint64_t)&v6);
    return sub_1003297E8((uint64_t **)(v5 + 432), (uint64_t)&v6);
  }

  return result;
}

uint64_t sub_1002FC0A8(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1002FC054(a1 - 32, a2, a3);
}

void sub_1002FC0B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  int v6 = (os_log_s *)(id)qword_1008F7578;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D0100(a2, (uint64_t)__p);
    __int16 v7 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "updateAirpodsConnectionMetricDevice FastConnect for device %s",  buf,  0xCu);
    if (SHIBYTE(v20) < 0) {
      operator delete(__p[0]);
    }
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v20 = 0LL;
  sub_1003CF00C(a2, __p);
  *(_OWORD *)__int128 buf = 0uLL;
  sub_100242F28((uint64_t)buf, a1 + 240);
  uint64_t v8 = a1 + 384;
  if (sub_100329358(a1 + 384, (const void **)__p) == 1)
  {
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id v9 = v5;
    id v10 = [v9 countByEnumeratingWithState:&v15 objects:v21 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v16;
      do
      {
        for (std::string::size_type i = 0LL; i != v10; std::string::size_type i = (char *)i + 1)
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(v9);
          }
          uint64_t v13 = *(void *)(*((void *)&v15 + 1) + 8LL * (void)i);
          uint64_t v14 = (void *)[v9 objectForKeyedSubscript:v13];
          [*(id *)(sub_1002EDE6C(v8, (const void **)__p) + 96) setObject:v14 forKeyedSubscript:v13];
        }

        id v10 = [v9 countByEnumeratingWithState:&v15 objects:v21 count:16];
      }

      while (v10);
    }
  }

  sub_100242F54((uint64_t)buf);
  sub_100242FAC((uint64_t)buf);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1002FC2CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  sub_100242FAC(v25 - 112);
  if (a23 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1002FC338(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ((sub_100487D9C() & 1) != 0)
  {
    if (*(_DWORD *)a2 == 7)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      id v5 = (uint64_t *)(a2 + 16);
      uint64_t v6 = v7;
      int v8 = *(unsigned __int16 *)(v7 + 16);
      uint64_t v9 = *(unsigned __int8 *)(v7 + 1);
      else {
        unsigned int v10 = word_1006C177A[32 * v9 + 2];
      }
      switch(v8)
      {
        case 0:
        case 1:
        case 2:
        case 4:
        case 5:
        case 11:
          break;
        case 3:
          if (v10 >= 0xA1)
          {
            std::string v141 = (os_log_s *)qword_1008F7578;
            if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
              sub_10066B28C(v141, v142, v143, v144, v145, v146, v147, v148);
            }
            uint64_t v6 = *v5;
          }

          __int128 v391 = 0u;
          __int128 v389 = 0u;
          memset(v390, 0, sizeof(v390));
          __int128 v388 = 0u;
          __int128 v386 = 0u;
          memset(v387, 0, sizeof(v387));
          memcpy(&v386, (const void *)v6, v10);
          __int16 v149 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD5(v387[0])));
          [v4 setObject:v149 forKeyedSubscript:@"time_to_r1scanstart_utp"];

          uint64_t v150 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD6(v387[0])));
          [v4 setObject:v150 forKeyedSubscript:@"time_to_rxsecpage_utp"];

          unsigned int v151 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  HIWORD(v387[0])));
          [v4 setObject:v151 forKeyedSubscript:@"time_to_conncompl_utp"];

          __int16 v152 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  LOWORD(v387[1])));
          [v4 setObject:v152 forKeyedSubscript:@"time_to_txpage_src"];

          unsigned int v153 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD1(v387[1])));
          [v4 setObject:v153 forKeyedSubscript:@"time_to_extraconnect_src"];

          __int16 v154 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD2(v387[1])));
          [v4 setObject:v154 forKeyedSubscript:@"time_to_earlyconnect_src"];

          unsigned int v155 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD3(v387[1])));
          [v4 setObject:v155 forKeyedSubscript:@"time_to_magicpairing_src"];

          __int16 v156 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD4(v387[1])));
          [v4 setObject:v156 forKeyedSubscript:@"time_to_conncompl_src"];

          unsigned int v157 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD5(v387[1])));
          [v4 setObject:v157 forKeyedSubscript:@"time_to_buds_in_ear"];

          __int16 v158 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD6(v387[1])));
          [v4 setObject:v158 forKeyedSubscript:@"connection_direction"];

          if (v9 >= 9)
          {
            sub_1002F34F8(v159, @"boot_time_event_durations", 20, 2u, (uint64_t)&v387[1] + 14, v4, 0);
            sub_1002F34F8(v160, @"boot_time_event_ids", 20, 1u, (uint64_t)&v388 + 6, v4, 0);
            int v161 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)&v389 + 10)));
            [v4 setObject:v161 forKeyedSubscript:@"nvram_generation_count"];

            __int16 v162 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  BYTE14(v389)));
            [v4 setObject:v162 forKeyedSubscript:@"flash_vendor"];

            int v163 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  HIBYTE(v389)));
            [v4 setObject:v163 forKeyedSubscript:@"boot_type"];

            __int16 v164 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  LOBYTE(v390[0])));
            [v4 setObject:v164 forKeyedSubscript:@"case_findmy_paired_st"];

            int v165 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  BYTE1(v390[0])));
            [v4 setObject:v165 forKeyedSubscript:@"other_findmy_paired_st"];

            __int16 v166 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  BYTE2(v390[0])));
            [v4 setObject:v166 forKeyedSubscript:@"self_findmy_paired_st"];

            sub_1002F34F8(v167, @"unused_bytes_2", 11, 1u, (uint64_t)v390 + 3, v4, 0);
          }

          break;
        case 6:
          if (v10 >= 0xA1)
          {
            uint64_t v168 = (os_log_s *)qword_1008F7578;
            if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
              sub_10066B2FC(v168, v169, v170, v171, v172, v173, v174, v175);
            }
            uint64_t v6 = *v5;
          }

          __int128 v391 = 0u;
          __int128 v389 = 0u;
          memset(v390, 0, sizeof(v390));
          __int128 v388 = 0u;
          __int128 v386 = 0u;
          memset(v387, 0, sizeof(v387));
          v176 = memcpy(&v386, (const void *)v6, v10);
          sub_1002F34F8((uint64_t)v176, @"unused_bytes_1", 10, 2u, (uint64_t)v387 + 10, v4, 0);
          unsigned int v177 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  HIWORD(v387[1])));
          [v4 setObject:v177 forKeyedSubscript:@"count_in_state_disabled"];

          v178 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  LOWORD(v387[2])));
          [v4 setObject:v178 forKeyedSubscript:@"seconds_in_state_disabled"];

          unsigned int v179 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD1(v387[2])));
          [v4 setObject:v179 forKeyedSubscript:@"count_in_state_inEar"];

          v180 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD2(v387[2])));
          [v4 setObject:v180 forKeyedSubscript:@"seconds_in_state_inEar"];

          unsigned int v181 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD3(v387[2])));
          [v4 setObject:v181 forKeyedSubscript:@"count_in_state_inEarDetect"];

          v182 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD4(v387[2])));
          [v4 setObject:v182 forKeyedSubscript:@"seconds_in_state_inEarDetect"];

          BOOL v183 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD5(v387[2])));
          [v4 setObject:v183 forKeyedSubscript:@"count_in_state_tableTop"];

          v184 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD6(v387[2])));
          [v4 setObject:v184 forKeyedSubscript:@"seconds_in_state_tableTop"];

          v185 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  HIWORD(v387[2])));
          [v4 setObject:v185 forKeyedSubscript:@"count_in_state_inCaseLidClosed"];

          unsigned int v186 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  LOWORD(v387[3])));
          [v4 setObject:v186 forKeyedSubscript:@"seconds_in_state_inCaseLidClosed"];

          uint32x2_t v187 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD1(v387[3])));
          [v4 setObject:v187 forKeyedSubscript:@"count_in_state_inCaseLidOpen"];

          v188 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD2(v387[3])));
          [v4 setObject:v188 forKeyedSubscript:@"seconds_in_state_inCaseLidOpen"];

          v189 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD3(v387[3])));
          [v4 setObject:v189 forKeyedSubscript:@"count_in_state_offEar"];

          uint64_t v190 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD4(v387[3])));
          [v4 setObject:v190 forKeyedSubscript:@"seconds_in_state_offEar"];

          v191 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD5(v387[3])));
          [v4 setObject:v191 forKeyedSubscript:@"count_in_state_pocket"];

          v192 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD6(v387[3])));
          [v4 setObject:v192 forKeyedSubscript:@"seconds_in_state_pocket"];

          char v193 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  HIWORD(v387[3])));
          [v4 setObject:v193 forKeyedSubscript:@"count_in_state_outOfPocketDetect"];

          v194 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  (unsigned __int16)v388));
          [v4 setObject:v194 forKeyedSubscript:@"seconds_in_state_outOfPocketDetect"];

          sub_1002F34F8(v195, @"unused_bytes_2", 10, 4u, (uint64_t)&v388 + 6, v4, 0);
          sub_1002F34F8(v196, @"ied_reserved_unused_bytes", 2, 2u, (uint64_t)&v388 + 2, v4, 0);
          sub_1002F34F8(v197, @"unused_bytes_3", 4, 4u, (uint64_t)&v391, v4, 0);
          break;
        case 7:
          if (v10 >= 0xA1)
          {
            uint64_t v11 = (os_log_s *)qword_1008F7578;
            if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
              sub_10066B36C(v11, v12, v13, v14, v15, v16, v17, v18);
            }
            uint64_t v6 = *v5;
          }

          __int128 v391 = 0u;
          __int128 v389 = 0u;
          memset(v390, 0, sizeof(v390));
          __int128 v388 = 0u;
          __int128 v386 = 0u;
          memset(v387, 0, sizeof(v387));
          memcpy(&v386, (const void *)v6, v10);
          int v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD5(v387[0])));
          [v4 setObject:v19 forKeyedSubscript:@"adc_status_err_cnt"];

          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD6(v387[0])));
          [v4 setObject:v20 forKeyedSubscript:@"bus_err_cnt"];

          id v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  HIWORD(v387[0])));
          [v4 setObject:v21 forKeyedSubscript:@"service_not_found_err_cnt"];

          id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  LOWORD(v387[1])));
          [v4 setObject:v22 forKeyedSubscript:@"adc_conversion_cnt"];

          id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithShort:]( &OBJC_CLASS___NSNumber,  "numberWithShort:",  SWORD1(v387[1])));
          [v4 setObject:v23 forKeyedSubscript:@"delta_baseline_cap"];

          id v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithShort:]( &OBJC_CLASS___NSNumber,  "numberWithShort:",  SWORD2(v387[1])));
          [v4 setObject:v24 forKeyedSubscript:@"abs_baseline_cap"];

          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD3(v387[1])));
          [v4 setObject:v25 forKeyedSubscript:@"gsr_cnt"];

          int v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD4(v387[1])));
          [v4 setObject:v26 forKeyedSubscript:@"chip_id_read_err_cnt"];

          int v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD5(v387[1])));
          [v4 setObject:v27 forKeyedSubscript:@"sensor_wdg_cnt"];

          id v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD6(v387[1])));
          [v4 setObject:v28 forKeyedSubscript:@"max_noise_low_freq"];

          uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)((char *)&v387[1] + 14)));
          [v4 setObject:v29 forKeyedSubscript:@"max_noise_high_freq"];

          sub_1002F34F8(v30, @"unused_bytes_1", 19, 4u, (uint64_t)&v387[2] + 2, v4, 0);
          sub_1002F34F8(v31, @"unused_bytes_2", 4, 4u, (uint64_t)&v391, v4, 0);
          break;
        case 8:
          if (v10 >= 0xA1)
          {
            v198 = (os_log_s *)qword_1008F7578;
            if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
              sub_10066B3DC(v198, v199, v200, v201, v202, v203, v204, v205);
            }
            uint64_t v6 = *v5;
          }

          __int128 v391 = 0u;
          __int128 v389 = 0u;
          memset(v390, 0, sizeof(v390));
          __int128 v388 = 0u;
          __int128 v386 = 0u;
          memset(v387, 0, sizeof(v387));
          memcpy(&v386, (const void *)v6, v10);
          v206 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD5(v387[0])));
          [v4 setObject:v206 forKeyedSubscript:@"gest_duration"];

          v207 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD6(v387[0])));
          [v4 setObject:v207 forKeyedSubscript:@"intent_gest_duration"];

          id v208 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithShort:]( &OBJC_CLASS___NSNumber,  "numberWithShort:",  SHIWORD(v387[0])));
          [v4 setObject:v208 forKeyedSubscript:@"force_slope"];

          v209 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  LOWORD(v387[1])));
          [v4 setObject:v209 forKeyedSubscript:@"slope_def"];

          unsigned int v210 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithShort:]( &OBJC_CLASS___NSNumber,  "numberWithShort:",  SWORD1(v387[1])));
          [v4 setObject:v210 forKeyedSubscript:@"dbl_clk_valley"];

          v211 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  WORD2(v387[1])));
          [v4 setObject:v211 forKeyedSubscript:@"dbl_clk_interval"];

          v212 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithShort:]( &OBJC_CLASS___NSNumber,  "numberWithShort:",  SWORD3(v387[1])));
          [v4 setObject:v212 forKeyedSubscript:@"force_peak_1"];

          v213 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithShort:]( &OBJC_CLASS___NSNumber,  "numberWithShort:",  SWORD4(v387[1])));
          [v4 setObject:v213 forKeyedSubscript:@"force_peak_2"];

          v214 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithShort:]( &OBJC_CLASS___NSNumber,  "numberWithShort:",  SWORD5(v387[1])));
          [v4 setObject:v214 forKeyedSubscript:@"decision_thres_force"];

          v215 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithShort:]( &OBJC_CLASS___NSNumber,  "numberWithShort:",  SWORD6(v387[1])));
          [v4 setObject:v215 forKeyedSubscript:@"decision_thres_slope"];

          uint64_t v216 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)((char *)&v387[1] + 14)));
          [v4 setObject:v216 forKeyedSubscript:@"gest_force_peak"];

          uint64_t v217 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)((char *)&v387[2] + 2)));
          [v4 setObject:v217 forKeyedSubscript:@"force_peak_3"];

          uint64_t v218 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)((char *)&v387[2] + 6)));
          [v4 setObject:v218 forKeyedSubscript:@"baseline_cap_delta"];

          uint64_t v219 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)((char *)&v387[2] + 10)));
          [v4 setObject:v219 forKeyedSubscript:@"baseline_cap"];

          sub_1002F34F8(v220, @"unused_bytes_1", 16, 4u, (uint64_t)&v387[2] + 14, v4, 0);
          sub_1002F34F8(v221, @"unused_bytes_2", 4, 4u, (uint64_t)&v391, v4, 0);
          break;
        case 9:
          if (v10 >= 0xA1)
          {
            int v32 = (os_log_s *)qword_1008F7578;
            if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
              sub_10066B44C(v32, v33, v34, v35, v36, v37, v38, v39);
            }
            uint64_t v6 = *v5;
          }

          goto LABEL_23;
        case 10:
          if (v10 >= 0xA1)
          {
            v222 = (os_log_s *)qword_1008F7578;
            if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
              sub_10066B44C(v222, v223, v224, v225, v226, v227, v228, v229);
            }
            uint64_t v6 = *v5;
          }

void sub_1002FF9A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

#error "100300558: too big function (funcsize=0)"
void sub_100315E00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_10031BA8C(uint64_t a1, int a2, int *a3)
{
  switch(a2)
  {
    case 0:
      int v3 = 42;
      goto LABEL_24;
    case 1:
      int v3 = 39;
      goto LABEL_24;
    case 2:
      int v3 = 38;
      goto LABEL_24;
    case 3:
      int v3 = 29;
      goto LABEL_24;
    case 4:
      int v3 = 37;
      goto LABEL_24;
    case 5:
      int v3 = 34;
      goto LABEL_24;
    case 6:
      int v3 = 35;
      goto LABEL_24;
    case 7:
      int v3 = 40;
      goto LABEL_24;
    case 8:
      int v3 = 41;
      goto LABEL_24;
    case 9:
      int v3 = 28;
      goto LABEL_24;
    case 10:
      int v3 = 26;
      goto LABEL_24;
    case 11:
      int v3 = 31;
      goto LABEL_24;
    case 12:
      int v3 = 33;
      goto LABEL_24;
    case 13:
      int v3 = 44;
      goto LABEL_24;
    case 14:
      int v3 = 45;
      goto LABEL_24;
    case 15:
      int v3 = 36;
      goto LABEL_24;
    case 16:
      int v3 = 32;
      goto LABEL_24;
    case 17:
      int v3 = 27;
      goto LABEL_24;
    case 18:
      int v3 = 43;
      goto LABEL_24;
    case 19:
      int v3 = 30;
LABEL_24:
      *a3 = v3;
      BOOL result = 1LL;
      break;
    default:
      BOOL result = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_10066BA00();
        BOOL result = 0LL;
      }

      break;
  }

  return result;
}

CFStringRef sub_10031BBA0(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x7B) {
    return @"Unknown";
  }
  else {
    return (const __CFString *)*((void *)&off_100891058 + (int)a2);
  }
}

void sub_10031BBD4(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100405218();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10031BC3C;
  v5[3] = &unk_10087EB68;
  v5[4] = a1;
  int v6 = a2;
  sub_100405384(v4, v5);
}

void sub_10031BC3C(uint64_t a1)
{
  uint64_t v2 = *(_BYTE **)(a1 + 32);
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "updateBTPowerStateMonitorEvent: eventType = %d",  buf,  8u);
  }

  switch(*(_DWORD *)(a1 + 40))
  {
    case 1:
      if (!v2[681])
      {
        id v5 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "BT power state pre-SU is ON, report metrics",  buf,  2u);
        }

        char v6 = -1;
        goto LABEL_29;
      }

      break;
    case 2:
      if (!v2[681])
      {
        uint64_t v7 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "BT power state pre-SU is OFF, start monitor timer",  buf,  2u);
        }

        sub_10031C038((uint64_t)v2, 0x1Cu);
        goto LABEL_24;
      }

      break;
    case 3:
      if (v2[681] == 1 && v2[684])
      {
        unsigned int v8 = v2[682] - 1;
        uint64_t v9 = (os_log_s *)qword_1008F7578;
        if (v8 > 0x1B)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
            sub_10066BAC4();
          }
          char v6 = 0;
        }

        else
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "BT power state metrics monitor timer is active and BT power off request is invoked from BT Setting, report metrics",  buf,  2u);
          }

          char v6 = 29 - v2[682];
        }

        sub_10031C038((uint64_t)v2, 0);
        xpc_activity_unregister("com.apple.Bluetooth.PowerStateMonitor");
        v2[684] = 0;
        v2[681] = 0;
        if (v8 < 0x1C)
        {
LABEL_29:
          uint64_t v13 = sub_100405218();
          *(void *)__int128 buf = _NSConcreteStackBlock;
          uint64_t v16 = 3221225472LL;
          uint64_t v17 = sub_10031C234;
          uint64_t v18 = &unk_1008800D8;
          int v19 = v2;
          char v20 = v6;
          sub_100405384(v13, buf);
        }
      }

      break;
    case 4:
      if (!v2[681] && v2[682] - 1 <= 0x1B)
      {
        unsigned int v10 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = v2[682];
          *(_DWORD *)__int128 buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Recover monitor timer for BT power state metrics, numOfDays = %d",  buf,  8u);
        }

void sub_10031C020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031C038(uint64_t a1, unsigned int a2)
{
  char valuePtr = a2;
  if (*(unsigned __int8 *)(a1 + 682) != a2)
  {
    int v3 = (os_log_s *)qword_1008F7578;
    if (a2 < 0x1D)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 67109120;
        unsigned int v8 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "writeBTPowerStateMonitorNumOfDays : numOfDays %d",  buf,  8u);
      }

      *(_BYTE *)(a1 + 682) = a2;
      CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &valuePtr);
      CFPreferencesSetAppValue(@"BTPowerStateMonitorNumOfDays", v5, @"com.apple.BTServer");
      CFPreferencesAppSynchronize(@"com.apple.BTServer");
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
    {
      sub_10066BB28();
    }
  }

void sub_10031C15C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_100405218();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_10031C368;
  v3[3] = &unk_10087EB20;
  v3[4] = v1;
  sub_100405384(v2, v3);
}

void sub_10031C1BC(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100405218();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10031C224;
  v5[3] = &unk_1008800D8;
  v5[4] = a1;
  char v6 = a2;
  sub_100405384(v4, v5);
}

uint64_t sub_10031C224(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 683LL) = *(_BYTE *)(result + 40);
  return result;
}

void sub_10031C234(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)__int128 buf = 67109120;
    int v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "sendBTPowerStatePostSUMetrics: numOfDaysForBTReTurnedOff = %d",  buf,  8u);
  }

  CFNumberRef v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *(unsigned __int8 *)(a1 + 40),  @"NumOfDaysForBTReTurnedOff"));
  unsigned int v8 = v5;
  char v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL));

  sub_1002EFD68(v2, 0x41u, v6);
}

void sub_10031C344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031C368(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 32);
  if (!v1[683])
  {
    int v3 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "BT is turned off by non-BT settings clients, stop metrics monitoring",  (uint8_t *)v8,  2u);
    }

    goto LABEL_14;
  }

  unsigned int v2 = v1[682];
  if (v2 >= 0x1D)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066BAC4();
    }
LABEL_14:
    sub_10031C038((uint64_t)v1, 0);
    if (v1[684])
    {
      xpc_activity_unregister("com.apple.Bluetooth.PowerStateMonitor");
      v1[684] = 0;
    }

    return;
  }

  int v4 = (os_log_s *)qword_1008F7578;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
  if (!v2)
  {
    if (v5)
    {
      v8[0] = 0x1C04000100LL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "btPowerStateMonitorTimerHandler : BT is not re-turned off manually within %d days, report metrics",  (uint8_t *)v8,  8u);
    }

    uint64_t v7 = sub_100405218();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _DWORD v8[2] = sub_10031C234;
    v8[3] = &unk_1008800D8;
    void v8[4] = v1;
    char v9 = 0;
    sub_100405384(v7, v8);
    goto LABEL_14;
  }

  if (v5)
  {
    int v6 = v1[682];
    LODWORD(v8[0]) = 67109120;
    HIDWORD(v8[0]) = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "btPowerStateMonitorTimerHandler : Keep timer alive, numOfDays = %d",  (uint8_t *)v8,  8u);
  }

  sub_10031C038((uint64_t)v1, (v1[682] - 1));
}

void sub_10031C554(uint64_t a1, unsigned int *a2)
{
  unsigned int v3 = *a2;
  v21[0] = @"DisconnectReason";
  char v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2[4]));
  v22[0] = v20;
  v21[1] = @"DURATION";
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2[3]));
  v22[1] = v17;
  void v21[2] = @"IsA2DPStreaming";
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_100890E78);
  }
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *((unsigned __int8 *)off_1008D6190 + 197)));
  v22[2] = v18;
  void v21[3] = @"IsHFPActive";
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_100890E78);
  }
  int v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *((unsigned __int8 *)off_1008D6190 + 198)));
  void v22[3] = v19;
  void v21[4] = @"IsLEAStreaming";
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_100890E78);
  }
  int v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *((unsigned __int8 *)off_1008D6190 + 199)));
  v22[4] = v4;
  v21[5] = @"IsApplePencilConnected";
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100890F18);
  }
  BOOL v5 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", sub_1005D908C((uint64_t)off_1008D5F28));
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v22[5] = v6;
  v21[6] = @"NumberOfAppleMouseOrTrackpadConnected";
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100890E18);
  }
  uint64_t v7 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_100402264((uint64_t)off_1008D5F48));
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  void v22[6] = v8;
  v21[7] = @"NumberOfAppleKeyboardConnected";
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100890E18);
  }
  char v9 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_100402368((uint64_t)off_1008D5F48));
  int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v22[7] = v10;
  v21[8] = @"PER";
  int v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a2[2]));
  v22[8] = v11;
  v21[9] = @"PID";
  xpc_object_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", HIWORD(v3)));
  v22[9] = v12;
  v21[10] = @"RSSI";
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a2[1]));
  v22[10] = v13;
  v21[11] = @"VID";
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  (unsigned __int16)v3));
  v22[11] = v14;
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v22,  v21,  12LL));

  sub_1002EFD68(a1, 0x59u, v15);
}

void sub_10031C924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031C9E4(uint64_t a1, void *a2)
{
}

void sub_10031C9FC(uint64_t a1, id a2)
{
  id v3 = objc_retainBlock(a2);
  int v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

uint64_t sub_10031CA28(int a1)
{
  int v1 = a1 - 1;
  uint64_t result = 0LL;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 1LL;
      break;
    case 3:
      uint64_t result = 2LL;
      break;
    case 7:
      uint64_t result = 3LL;
      break;
    default:
      uint64_t result = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        sub_10066BB8C();
        uint64_t result = 0LL;
      }

      break;
  }

  return result;
}

_BYTE *sub_10031CAC8(_BYTE *result, uint64_t a2, char a3, int a4)
{
  switch(a4)
  {
    case 1:
      result[574] = a3;
      break;
    case 2:
      result[573] = a3;
      break;
    case 3:
      result[576] = a3;
      break;
    case 4:
      result[575] = a3;
      break;
    default:
      return result;
  }

  return result;
}

_BYTE *sub_10031CB0C(_BYTE *result, uint64_t a2, char a3, int a4)
{
  switch(a4)
  {
    case 1:
      result[534] = a3;
      break;
    case 2:
      result[533] = a3;
      break;
    case 3:
      result[536] = a3;
      break;
    case 4:
      result[535] = a3;
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_10031CB50(uint64_t result, char a2)
{
  *(_BYTE *)(result + 577) = a2;
  return result;
}

uint64_t sub_10031CB58(uint64_t result, char a2)
{
  *(_BYTE *)(result + 572) = a2;
  return result;
}

void sub_10031CB60(unsigned __int8 *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  uint64_t v29 = v5;
  if (v5 && v6)
  {
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    id v8 = v5;
    id v9 = [v8 countByEnumeratingWithState:&v30 objects:v36 count:16];
    if (v9)
    {
      uint64_t v11 = *(void *)v31;
      *(void *)&__int128 v10 = 138412290LL;
      __int128 v28 = v10;
      do
      {
        for (std::string::size_type i = 0LL; i != v9; std::string::size_type i = (char *)i + 1)
        {
          if (*(void *)v31 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)i);
          switch(objc_msgSend(v13, "intValue", v28))
          {
            case 0u:
              uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a1[573]));
              [v7 setObject:v14 forKeyedSubscript:v13];

              break;
            case 1u:
              uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a1[574]));
              [v7 setObject:v18 forKeyedSubscript:v13];

              break;
            case 2u:
              uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a1[575]));
              [v7 setObject:v15 forKeyedSubscript:v13];

              break;
            case 3u:
              int v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a1[576]));
              [v7 setObject:v19 forKeyedSubscript:v13];

              break;
            case 4u:
              uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a1[577]));
              [v7 setObject:v16 forKeyedSubscript:v13];

              break;
            case 5u:
              char v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a1[528]));
              [v7 setObject:v20 forKeyedSubscript:v13];

              break;
            case 6u:
              id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a1[529]));
              [v7 setObject:v21 forKeyedSubscript:v13];

              break;
            case 7u:
              id v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a1[531]));
              [v7 setObject:v22 forKeyedSubscript:v13];

              break;
            case 8u:
              id v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a1[530]));
              [v7 setObject:v23 forKeyedSubscript:v13];

              break;
            case 9u:
              uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a1[572]));
              [v7 setObject:v17 forKeyedSubscript:v13];

              break;
            case 0xAu:
              if (a1[576]) {
                BOOL v24 = a1[572] != 0;
              }
              else {
                BOOL v24 = 0LL;
              }
              int v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v24));
              [v7 setObject:v26 forKeyedSubscript:v13];

              break;
            default:
              uint64_t v25 = (os_log_s *)qword_1008F7578;
              if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__int128 buf = v28;
                uint64_t v35 = v13;
                _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "Invalid target for readStoredMetricValue: %@",  buf,  0xCu);
              }

              break;
          }
        }

        id v9 = [v8 countByEnumeratingWithState:&v30 objects:v36 count:16];
      }

      while (v9);
    }
  }

  else
  {
    int v27 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066BBB8((uint64_t)v7, (uint64_t)v29, v27);
    }
  }
}

void sub_10031CF38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031CFE4(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ((sub_100487E08() & 1) != 0)
  {
    uint64_t v3 = sub_100405218();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    _DWORD v4[2] = sub_10031D088;
    v4[3] = &unk_10087EA48;
    id v5 = v2;
    sub_100405384(v3, v4);
  }
}

void sub_10031D068( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10031D088(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"ServiceUUID"]);
  uint64_t v18 = v2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v18, 1LL));

  int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"SessionState"]);
  unsigned __int8 v5 = [v4 intValue];
  uint64_t v6 = BiomeLibrary();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 Device]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 Wireless]);
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 BluetoothGATTSession]);

  id v11 = objc_alloc(&OBJC_CLASS___BMDeviceBluetoothGATTSession);
  xpc_object_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"BundleID"]);
  uint64_t v13 = sub_10031CA28(v5);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"SupportsBackgrounding"]);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"SupportsStateRestoration"]);
  id v16 = [v11 initWithBundleID:v12 serviceUUID:v3 sessionType:@"Peripheral" sessionState:v13 supportsBackgrounding:v14 supportsStateRestoration:v15];

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v10 source]);
  [v17 sendEvent:v16];
}

void sub_10031D24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031D2F0(uint64_t a1, void *a2)
{
}

void sub_10031D2FC(uint64_t a1, void *a2)
{
}

void sub_10031D308(uint64_t a1, void *a2)
{
}

void sub_10031D314(uint64_t a1, void *a2)
{
}

void sub_10031D320(uint64_t a1, void *a2)
{
}

void sub_10031D32C(uint64_t a1, void *a2)
{
}

void sub_10031D338(uint64_t a1, void *a2)
{
}

void sub_10031D344(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  sub_1002EFD68(a1, 0x68u, v5);
  v33[0] = 0LL;
  v33[1] = 0LL;
  uint64_t v34 = 0LL;
  sub_1003CF00C(a3, v33);
  v32[0] = 0LL;
  v32[1] = 0LL;
  sub_100242F28((uint64_t)v32, a1 + 240);
  if (sub_100329358(a1 + 384, v33) == 1)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"Reason"]);
    unsigned int v7 = [v6 isEqualToString:@"Success"];

    if (v7)
    {
      *(_BYTE *)(sub_1002EDE6C(a1 + 384, v33) + 5) = 1;
    }

    else
    {
      id v8 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Analytics - MagicPairing Complete - Failed",  buf,  2u);
      }

      *(_BYTE *)(sub_1002EDE6C(a1 + 384, v33) + 5) = 0;
      uint64_t v9 = objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"Reason"]);
      uint64_t v10 = sub_1002EDE6C(a1 + 384, v33);
      id v11 = *(void **)(v10 + 24);
      *(void *)(v10 + 24) = v9;

      uint64_t v12 = sub_1002EDE6C(a1 + 384, v33);
      uint64_t v13 = *(void **)(v12 + 32);
      *(void *)(v12 + sub_100242FAC(v1 - 32) = @"Failed";

      uint64_t v14 = objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"Status"]);
      uint64_t v15 = sub_1002EDE6C(a1 + 384, v33);
      id v16 = *(void **)(v15 + 48);
      *(void *)(v15 + 4_Block_object_dispose(va, 8) = v14;

      uint64_t v17 = sub_1002EDE6C(a1 + 384, v33);
      int v18 = *(_DWORD *)v17;
      __int16 v21 = *(_WORD *)(v17 + 4);
      int v20 = v18;
      id v22 = *(id *)(v17 + 8);
      id v23 = *(id *)(v17 + 16);
      id v24 = *(id *)(v17 + 24);
      id v25 = *(id *)(v17 + 32);
      id v26 = *(id *)(v17 + 40);
      id v27 = *(id *)(v17 + 48);
      id v28 = *(id *)(v17 + 56);
      __int128 v19 = *(_OWORD *)(v17 + 79);
      v29[0] = *(_OWORD *)(v17 + 64);
      *(_OWORD *)((char *)v29 + 15) = v19;
      id v30 = *(id *)(v17 + 96);
      sub_1002FAE10(a1, (unsigned __int8 *)&v20);
      sub_1003293D4((uint64_t **)(a1 + 384), v33);
    }
  }

  sub_100242FAC((uint64_t)v32);
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)v33[0]);
  }
}

void sub_10031D5B0(_Unwind_Exception *a1)
{
  sub_100242FAC(v3 - 88);
  _Unwind_Resume(a1);
}

void sub_10031D5F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v28 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v25 = 0LL;
  int v4 = sub_1002E9328();
  (*(void (**)(void *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v4 + 24LL))( v4,  &v28,  &v27,  &v26,  &v25);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v28));
  [v3 setObject:v5 forKey:@"BasebandScanPrepTimeMs"];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v27));
  [v3 setObject:v6 forKey:@"BasebandScanTimeMs"];

  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v26));
  [v3 setObject:v7 forKey:@"BasebandTimeMs"];

  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v22 = 0LL;
  unsigned __int8 v21 = 0;
  std::stringbuf::string_type __p = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v20 = 0LL;
  id v8 = sub_1002E9328();
  (*(void (**)(void *, uint64_t *, uint64_t *, uint64_t *, unsigned __int8 *, void **))(*(void *)v8 + 32LL))( v8,  &v24,  &v23,  &v22,  &v21,  &__p);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v24));
  [v3 setObject:v9 forKey:@"BasebandScanPrepTimeMs"];

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v23));
  [v3 setObject:v10 forKey:@"BasebandScanTimeMS"];

  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v22));
  [v3 setObject:v11 forKey:@"BasebandTimeMs"];

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v21));
  [v3 setObject:v12 forKey:@"Status"];

  uint64_t v13 = HIBYTE(v20);
  if (v20 < 0) {
    uint64_t v13 = v19;
  }
  if (v13)
  {
    uint64_t v14 = objc_alloc(&OBJC_CLASS___NSString);
    if (v20 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    id v16 = -[NSString initWithUTF8String:](v14, "initWithUTF8String:", p_p);
    if (v16) {
      [v3 setObject:v16 forKey:@"Reason"];
    }
  }

  uint64_t v17 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v30 = v3;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Fast Connect Metrics: %@", buf, 0xCu);
  }

  sub_1002EFD68(a1, 0x4Fu, v3);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
}

void sub_10031D8C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10031D958(uint64_t a1, void *a2)
{
}

void sub_10031D964(uint64_t a1, void *a2, int a3)
{
  uint64_t v25 = @"GAPAPairingMetricUniqueIdSalt";
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v25, 1LL));
  id v22 = 0LL;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[CBUserController readPrefKeys:source:error:]( &OBJC_CLASS___CBUserController,  "readPrefKeys:source:error:",  v5,  8LL,  &v22));
  id v7 = v22;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"GAPAPairingMetricUniqueIdSalt"]);

  uint64_t v9 = (os_log_s *)(id)qword_1008F7578;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = CUPrintNSError(v7);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    *(_DWORD *)__int128 buf = 138412546;
    *(void *)uint64_t v24 = v11;
    *(_WORD *)&v24[8] = 2112;
    *(void *)&v24[10] = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "GAPAPairingMetricUniqueIdSalt from readPrefKeys %@ %@",  buf,  0x16u);
  }

  if (!v7
    && (uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSData), (objc_opt_isKindOfClass(v8, v12) & 1) != 0)
    && [v8 length] == (id)a3)
  {
    id v13 = v8;
    memcpy(a2, [v13 bytes], (size_t)[v13 length]);
    id v14 = 0LL;
  }

  else
  {
    arc4random_buf(a2, a3);
    uint64_t v15 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 68157954;
      *(_DWORD *)uint64_t v24 = 16;
      *(_WORD *)&void v24[4] = 2096;
      *(void *)&void v24[6] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Make fresh GAPAPairingMetricUniqueIdSalt %.16P",  buf,  0x12u);
    }

    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a2, a3));
    id v21 = v7;
    unsigned __int8 v17 = +[CBUserController writePrefKey:value:source:error:]( &OBJC_CLASS___CBUserController,  "writePrefKey:value:source:error:",  @"GAPAPairingMetricUniqueIdSalt",  v16,  8LL,  &v21);
    id v14 = v21;

    if ((v17 & 1) == 0)
    {
      int v18 = (os_log_s *)(id)qword_1008F7578;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = CUPrintNSError(v14);
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        sub_10066BC50(v20, (uint64_t)buf, v18);
      }
    }
  }
}

void sub_10031DC20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10031DC84(uint64_t a1, int *a2, int a3, int a4, int a5, __int128 *a6, void *a7, void *a8, void *a9)
{
  id v16 = a7;
  id v17 = a8;
  id v18 = a9;
  uint64_t v19 = sub_100405218();
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3321888768LL;
  void v24[2] = sub_10031DE2C;
  void v24[3] = &unk_100890CA8;
  uint64_t v28 = a1;
  int v20 = *a2;
  int v31 = a3;
  int v34 = v20;
  __int16 v35 = *((_WORD *)a2 + 2);
  id v21 = v16;
  id v25 = v21;
  if (*((char *)a6 + 23) < 0)
  {
    sub_100024238(&__p, *(void **)a6, *((void *)a6 + 1));
  }

  else
  {
    __int128 __p = *a6;
    uint64_t v30 = *((void *)a6 + 2);
  }

  int v32 = a5;
  int v33 = a4;
  id v22 = v17;
  id v26 = v22;
  id v23 = v18;
  id v27 = v23;
  sub_100405384(v19, v24);

  if (SHIBYTE(v30) < 0) {
    operator delete((void *)__p);
  }
}

void sub_10031DDDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  _Unwind_Resume(a1);
}

void sub_10031DE2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v3)
  {
    id v61 = 0LL;
    uint64_t v4 = CUPrintFlags32(v3, &unk_1006C16B0);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    NSAppendPrintF_safe(&v61, "%@", v5);
    id v6 = v61;

    int v7 = *(_DWORD *)(a1 + 88);
  }

  else
  {
    LOBYTE(v7) = 0;
    id v6 = 0LL;
  }

  id v46 = v6;
  uint64_t v9 = a1 + 100;
  int v8 = *(_DWORD *)(a1 + 100);
  v71[1] = 0LL;
  v71[0] = 0LL;
  int data = v8;
  __int16 v70 = *(_WORD *)(a1 + 104);
  sub_10031D964(v3, v71, 16);
  *(void *)md = 0LL;
  uint64_t v67 = 0LL;
  int v68 = 0;
  CC_SHA1(&data, 0x16u, md);
  id v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", md, 20LL));
  int v59 = *(_DWORD *)(a1 + 100);
  __int16 v60 = *(_WORD *)(a1 + 104);
  unsigned int v10 = sub_10031E4D4(v2, (unsigned __int8 *)&v59, 0);
  int v57 = *(_DWORD *)(a1 + 100);
  __int16 v58 = *(_WORD *)(a1 + 104);
  uint64_t v11 = sub_10031E4D4(v2, (unsigned __int8 *)&v57, 1u);
  int v55 = *(_DWORD *)(a1 + 100);
  __int16 v56 = *(_WORD *)(a1 + 104);
  int v12 = sub_10031E4D4(v2, (unsigned __int8 *)&v55, 2u);
  int v53 = *(_DWORD *)(a1 + 100);
  __int16 v54 = *(_WORD *)(a1 + 104);
  int v13 = sub_10031E4D4(v2, (unsigned __int8 *)&v53, 3u);
  int v51 = *(_DWORD *)(a1 + 100);
  __int16 v52 = *(_WORD *)(a1 + 104);
  int v14 = sub_10031E4D4(v2, (unsigned __int8 *)&v51, 4u);
  unsigned int v43 = v10;
  int v49 = *(_DWORD *)(a1 + 100);
  __int16 v50 = *(_WORD *)(a1 + 104);
  int v15 = sub_10031E4D4(v2, (unsigned __int8 *)&v49, 5u);
  int v47 = *(_DWORD *)(a1 + 100);
  __int16 v48 = *(_WORD *)(a1 + 104);
  uint64_t v16 = sub_10031E4D4(v2, (unsigned __int8 *)&v47, 6u);
  uint64_t v17 = v16;
  uint64_t v18 = v7 & 3;
  if ((_DWORD)v16)
  {
    LODWORD(v42) = v16 - v11;
    HIDWORD(v42) = v16 - v15;
    uint64_t v19 = (v15 - v14);
    uint64_t v20 = (v14 - v13);
    uint64_t v21 = (v13 - v12);
    uint64_t v22 = (v12 - v11);
  }

  else
  {
    uint64_t v11 = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v21 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v42 = 0LL;
  }

  v64[0] = @"Flags";
  v64[1] = @"StartSession";
  uint64_t v23 = *(void *)(a1 + 32);
  v65[0] = v46;
  v65[1] = v23;
  v64[2] = @"State";
  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v18));
  v65[2] = v41;
  void v64[3] = @"FWVersion";
  uint64_t v24 = (void *)(a1 + 64);
  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v24));
  void v65[3] = v40;
  v64[4] = @"PID";
  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 92)));
  v65[4] = v39;
  v64[5] = @"VID";
  uint64_t v25 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 96)));
  uint64_t v26 = *(void *)(a1 + 40);
  uint64_t v27 = *(void *)(a1 + 48);
  uint64_t v38 = (void *)v25;
  v65[5] = v25;
  v65[6] = v26;
  v64[6] = @"PrimaryIdentificationHash";
  v64[7] = @"SecondaryIdentificationHash";
  v65[7] = v27;
  v65[8] = v45;
  v64[8] = @"UniqueIdentificationHash";
  v64[9] = @"TimingNonAuthTotalMS";
  id v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v43));
  v65[9] = v44;
  v64[10] = @"Timing_A_AuthSupportedTotalMS";
  uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v11));
  v65[10] = v37;
  v64[11] = @"Timing_B_AuthGetACRTOTADurationMS";
  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v22));
  v65[11] = v36;
  v64[12] = @"Timing_C_AuthACRTReceivedDurationMS";
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v21));
  v65[12] = v28;
  v64[13] = @"Timing_D_AuthChallengeOTADurationMS";
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v20));
  v65[13] = v29;
  v64[14] = @"Timing_E_AuthResponseReceivedDurationMS";
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v19));
  v65[14] = v30;
  v64[15] = @"Timing_F_AuthResultDurationMS";
  int v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", HIDWORD(v42)));
  v65[15] = v31;
  v64[16] = @"Timing_G_AuthDurationMS";
  int v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  v42));
  v65[16] = v32;
  v64[17] = @"Timing_H_AuthTotalMS";
  int v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v17));
  v65[17] = v33;
  int v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v65,  v64,  18LL));

  __int16 v35 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v63 = v34;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "GAPA result metric %@", buf, 0xCu);
  }

  sub_1002EFD68(v2, 0x51u, v34);
  sub_1003297E8((uint64_t **)(v2 + 432), v9);
}

void sub_10031E3B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10031E4D4(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  id v5 = (uint64_t **)(a1 + 432);
  if (sub_100329868(a1 + 432, (uint64_t)a2))
  {
    *(void *)uint64_t v16 = a2;
    id v6 = sub_100329928(v5, (uint64_t)a2, (uint64_t)&unk_1006C2518, (_DWORD **)v16);
    uint64_t v9 = *((void *)v6 + 6);
    int v7 = v6 + 12;
    uint64_t v8 = v9;
    if (v9)
    {
      unsigned int v10 = v7;
      do
      {
        unsigned int v11 = *(unsigned __int8 *)(v8 + 28);
        BOOL v12 = v11 >= a3;
        if (v11 >= a3) {
          int v13 = (uint64_t *)v8;
        }
        else {
          int v13 = (uint64_t *)(v8 + 8);
        }
        if (v12) {
          unsigned int v10 = (_DWORD *)v8;
        }
        uint64_t v8 = *v13;
      }

      while (*v13);
    }
  }

  else
  {
    int v15 = (os_log_s *)(id)qword_1008F7578;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      sub_1003FE1B4(a2, v16);
      sub_10066BC9C(v16, (uint64_t)v17, v15);
    }
  }

  return 0LL;
}

void sub_10031E5E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10031E600(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    uint64_t result = sub_100024238(result, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 64);
    result[2] = *(void *)(a2 + 80);
    *(_OWORD *)uint64_t result = v5;
  }

  int v6 = *(_DWORD *)(a2 + 100);
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(_DWORD *)(a1 + 100) = v6;
  return result;
}

void sub_10031E65C(uint64_t a1)
{
}

void *sub_10031E670(uint64_t a1, unsigned __int8 *a2, unsigned int a3, int a4)
{
  unsigned __int8 v16 = a3;
  uint64_t v8 = (uint64_t **)(a1 + 408);
  if (sub_100329868(a1 + 408, (uint64_t)a2))
  {
    uint64_t v17 = 0LL;
    sub_1000B0400((uint64_t)&v17);
    int v9 = (int)v17;
    int v10 = SWORD2(v17);
    uint64_t v17 = a2;
    unsigned int v11 = sub_10032942C(v8, (uint64_t)a2, (uint64_t)&unk_1006C2518, (_DWORD **)&v17);
    int v12 = v10 - v11[12] + 1000 * (v9 - v11[10]);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066BD04();
    }
    int v12 = 0;
  }

  uint64_t v17 = a2;
  uint64_t result = sub_100329928((uint64_t **)(a1 + 432), (uint64_t)a2, (uint64_t)&unk_1006C2518, (_DWORD **)&v17);
  int v14 = (uint64_t **)*((void *)result + 6);
  if (!v14)
  {
LABEL_13:
    uint64_t v17 = &v16;
    uint64_t result = sub_1003299C8((uint64_t **)result + 5, &v16, (uint64_t)&unk_1006C2518, &v17);
    *((_DWORD *)result + _Block_object_dispose(va, 8) = v12;
    return result;
  }

  while (1)
  {
    unsigned int v15 = *((unsigned __int8 *)v14 + 28);
    if (v15 <= a3) {
      break;
    }
LABEL_10:
    int v14 = (uint64_t **)*v14;
    if (!v14) {
      goto LABEL_13;
    }
  }

  if (v15 < a3)
  {
    ++v14;
    goto LABEL_10;
  }

  if (a4) {
    goto LABEL_13;
  }
  return result;
}

void sub_10031E7C0(uint64_t a1, void *a2)
{
}

void sub_10031E7CC(uint64_t a1, void *a2)
{
}

void sub_10031E7D8(uint64_t a1, __int128 *a2, void *a3, uint64_t a4, char a5, char a6)
{
  id v11 = a3;
  uint64_t v12 = sub_100405218();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3321888768LL;
  void v14[2] = sub_10031E900;
  void v14[3] = &unk_100890CE0;
  uint64_t v16 = a1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100024238(&__p, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 __p = *a2;
    uint64_t v18 = *((void *)a2 + 2);
  }

  id v13 = v11;
  id v15 = v13;
  uint64_t v19 = a4;
  char v20 = a5;
  char v21 = a6;
  sub_100405384(v12, v14);

  if (SHIBYTE(v18) < 0) {
    operator delete((void *)__p);
  }
}

void sub_10031E8D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10031E900(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)(a1 + 48);
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Start monitoring for connection %s", buf, 0xCu);
  }

  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, v2 + 240);
  if (!sub_100329358(v2 + 384, (const void **)(a1 + 48)))
  {
    id v19 = 0LL;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    *(_OWORD *)__int128 buf = 0u;
    __int128 v14 = 0u;
    *(void *)&uint8_t buf[8] = *(id *)(a1 + 32);
    *(void *)&__int128 v14 = @"Outgoing";
    *((void *)&v14 + 1) = @"NA";
    *(void *)&__int128 v15 = @"Pending";
    *((void *)&v15 + 1) = @"NA";
    *(void *)&__int128 v16 = 0LL;
    *(void *)&__int128 v17 = 0LL;
    uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 72)));
    int v6 = (void *)*((void *)&v16 + 1);
    *((void *)&v16 + 1) = v5;

    *((void *)&v17 + 1) = mach_absolute_time();
    WORD4(v1_Block_object_dispose(va, 8) = *(_WORD *)(a1 + 80);
    *(_DWORD *)((char *)&v18 + 10) = -1;
    BYTE14(v1_Block_object_dispose(va, 8) = 0;
    id v7 = [&off_1008C2FA8 mutableCopy];
    id v8 = v19;
    id v19 = v7;

    uint64_t v12 = (__int128 *)(a1 + 48);
    int v9 = sub_100329A88((uint64_t **)(v2 + 384), (const void **)(a1 + 48), (uint64_t)&unk_1006C2518, &v12);
    sub_1002FBF4C((uint64_t)(v9 + 7), (int *)buf);
  }

  sub_100242F54((uint64_t)v11);
  return sub_100242FAC((uint64_t)v11);
}

void sub_10031EAF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
}

void *sub_10031EB24(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)(a1 + 48);
  __int128 v3 = *(_OWORD *)(a2 + 48);
  result[2] = *(void *)(a2 + 64);
  *(_OWORD *)uint64_t result = v3;
  return result;
}

void sub_10031EB54(uint64_t a1)
{
}

void sub_10031EB68(uint64_t a1, char a2, char a3, char a4, char a5)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v11 = sub_100405218();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_10031EC0C;
  v12[3] = &unk_10087F900;
  void v12[4] = a1;
  char v13 = a5;
  char v14 = a2;
  char v15 = a3;
  char v16 = a4;
  *(CFAbsoluteTime *)&void v12[5] = Current;
  sub_100405384(v11, v12);
}

double sub_10031EC0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  __int128 v3 = (unsigned __int8 *)(v2 + 456);
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(_BYTE *)(v2 + 456)) {
      (*(void (**)(void, void, void, void, void))(*(void *)v2 + 400LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 49),  *(unsigned __int8 *)(a1 + 50),  *(unsigned __int8 *)(a1 + 51),  0LL);
    }
    *(_BYTE *)(v2 + 456) = *(_BYTE *)(a1 + 49);
    *(void *)(v2 + 464) = *(void *)(a1 + 40);
    uint64_t v4 = (uint64_t **)(v2 + 472);
    *(void *)&v14[0] = v3;
    uint64_t v5 = sub_100329BF0(v4, v3, (uint64_t)&unk_1006C2518, (_BYTE **)v14);
    LODWORD(v15) = *(_DWORD *)((char *)v5 + 42);
    WORD2(v15) = *((_WORD *)v5 + 23);
    int v6 = v5[7];
    uint64_t v7 = (uint64_t)v5[6] + 1;
    __int16 v8 = *(_WORD *)(a1 + 50);
    *(void *)&v14[0] = v3;
    int v9 = sub_100329BF0(v4, v3, (uint64_t)&unk_1006C2518, (_BYTE **)v14);
    *((_WORD *)v9 + 20) = v8;
    *(_DWORD *)((char *)v9 + 42) = (_DWORD)v15;
    *((_WORD *)v9 + 23) = WORD2(v15);
    v9[6] = (uint64_t *)v7;
    v9[7] = v6;
  }

  else if (*(_BYTE *)(v2 + 456))
  {
    *(void *)&v14[0] = v2 + 456;
    uint64_t v11 = sub_100329BF0((uint64_t **)(v2 + 472), (unsigned __int8 *)(v2 + 456), (uint64_t)&unk_1006C2518, (_BYTE **)v14);
    *(_OWORD *)char v14 = *(_OWORD *)(v11 + 5);
    unint64_t v12 = (unint64_t)((double)(unint64_t)v11[7] + (*(double *)(a1 + 40) - *(double *)(v2 + 464)) * 1000.0);
    char v15 = (_BYTE *)(v2 + 456);
    char v13 = sub_100329BF0((uint64_t **)(v2 + 472), (unsigned __int8 *)(v2 + 456), (uint64_t)&unk_1006C2518, &v15);
    double result = v14[0];
    *(_OWORD *)(v13 + 5) = *(_OWORD *)v14;
    v13[7] = (uint64_t *)v12;
  }

  return result;
}

void sub_10031ED84(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100405218();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10031EDEC;
  v5[3] = &unk_1008800D8;
  v5[4] = a1;
  char v6 = a2;
  sub_100405384(v4, v5);
}

void sub_10031EDEC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40) == 1)
  {
    uint64_t v1 = *(void *)(a1 + 32);
    ++*(void *)(v1 + 584);
    uint64_t v2 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(v1 + 584);
      int v4 = 138478083;
      uint64_t v5 = @"fNearbyActionNoWakePrecisionFindingDailyUsage";
      __int16 v6 = 2048;
      uint64_t v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Set %{private}@ to: %tu", (uint8_t *)&v4, 0x16u);
    }
  }

void sub_10031EEBC(uint64_t a1, double a2, float a3, float a4)
{
  uint64_t v8 = sub_100405218();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  _DWORD v9[2] = sub_10031EF40;
  v9[3] = &unk_100888050;
  void v9[4] = a1;
  *(double *)&void v9[5] = a2;
  float v10 = a3;
  float v11 = a4;
  sub_100405384(v8, v9);
}

void sub_10031EF40(uint64_t a1)
{
  uint64_t v17 = *(void *)(a1 + 32);
  id v16 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v16 timeIntervalSinceReferenceDate];
  LODWORD(v3) = 86400;
  if ((int)(uint64_t)rint(v2 - *(double *)(a1 + 40)) < 86400)
  {
    [v16 timeIntervalSinceReferenceDate];
    uint64_t v3 = (uint64_t)rint(v4 - *(double *)(a1 + 40));
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"));
  __int16 v6 = (void *)objc_claimAutoreleasedReturnValue([v5 components:224 fromDate:v16]);

  char v15 = v6;
  unsigned int v7 = [v6 hour];
  unsigned int v8 = [v6 minute];
  unsigned int v9 = [v6 second];
  if ((int)v3 >= 1)
  {
    unsigned int v10 = 0;
    int v11 = (int)(3600 * v7 + 60 * v8 + v9 - v3 + 86400) % 86400;
    int v12 = v11 / 3600;
    do
    {
      else {
        int v13 = v3;
      }
      sub_10031F130( v17,  ((char)(v12 + v10) % 24),  (unsigned __int16)v13,  *(float *)(a1 + 48),  *(float *)(a1 + 52));
      if (v10 > 0x16) {
        break;
      }
      int v11 = (v13 + v11) % 86400;
      ++v10;
      BOOL v14 = __OFSUB__((_DWORD)v3, v13);
      LODWORD(v3) = v3 - v13;
    }

    while (!(((int)v3 < 0) ^ v14 | ((_DWORD)v3 == 0)));
  }
}

void sub_10031F0F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  _Unwind_Resume(a1);
}

void sub_10031F130(uint64_t a1, unsigned int a2, unsigned int a3, float a4, float a5)
{
  unsigned __int8 v17 = a2;
  BOOL v6 = a4 > -1.0 || a2 > 0x17;
  if (!v6 && (unsigned __int16)(a3 - 3600) >= 0xF1F1u)
  {
    unsigned int v9 = (uint64_t **)(a1 + 496);
    *(void *)__int128 buf = &v17;
    unsigned int v10 = (float *)sub_100329CB4((uint64_t **)(a1 + 496), &v17, (uint64_t)&unk_1006C2518, (_BYTE **)buf);
    float v11 = v10[8];
    float v12 = v11 + (float)a3;
    float v13 = (float)((float)((float)a3 * a4) + (float)(v10[9] * v11)) / v12;
    float v14 = (float)((float)((float)a3 * a5) + (float)(v10[10] * v11)) / v12;
    *(void *)__int128 buf = &v17;
    char v15 = (float *)sub_100329CB4(v9, &v17, (uint64_t)&unk_1006C2518, (_BYTE **)buf);
    v15[8] = v12;
    v15[9] = v13;
    v15[10] = v14;
    id v16 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v17;
      __int16 v19 = 2048;
      double v20 = v12;
      __int16 v21 = 2048;
      double v22 = v13;
      __int16 v23 = 2048;
      double v24 = v14;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "reportNearbyInfoV2DensityBubbleHourly: hour %u cum seconds %.1f avg rssi %.1f avg mps %.1f",  buf,  0x26u);
    }
  }

void sub_10031F2B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100405218();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10031F31C;
  v5[3] = &unk_10087F8E0;
  v5[4] = a1;
  void v5[5] = a2;
  sub_100405384(v4, v5);
}

void sub_10031F31C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v1 = *(void *)(a1 + 40);
  if (v1 > *(void *)(v2 + 520))
  {
    *(void *)(v2 + 520) = v1;
    uint64_t v3 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(v2 + 520);
      int v5 = 134217984;
      uint64_t v6 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Set fNumberOfAOPBTPrecisionFindingKeys to: %02lu",  (uint8_t *)&v5,  0xCu);
    }
  }

void sub_10031F3D0(uint64_t a1)
{
  uint64_t v2 = sub_100405218();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_10031F430;
  v3[3] = &unk_10087EB20;
  v3[4] = a1;
  sub_100405384(v2, v3);
}

uint64_t sub_10031F430(uint64_t result)
{
  return result;
}

void sub_10031F444(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100405218();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10031F4AC;
  v5[3] = &unk_1008800D8;
  v5[4] = a1;
  char v6 = a2;
  sub_100405384(v4, v5);
}

uint64_t sub_10031F4AC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_BYTE *)(result + 40)) {
    ++*(_DWORD *)(v1 + 600);
  }
  else {
    ++*(_DWORD *)(v1 + 596);
  }
  return result;
}

id sub_10031F4DC(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

id sub_10031F4E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(_DWORD *)(a1 + 548);
  unsigned int v21 = *(_DWORD *)(a1 + 556);
  if (*(_BYTE *)(a1 + 544)) {
    int v5 = @"On";
  }
  else {
    int v5 = @"Off";
  }
  if (v4 == 3) {
    int v5 = @"WiFiAssociatedBand6GHz";
  }
  if (v4 == 2) {
    int v5 = @"WiFiAssociatedBand5GHz";
  }
  if (v4 == 1) {
    char v6 = @"WiFiAssociatedBand2GHz";
  }
  else {
    char v6 = v5;
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 528);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 531);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 529);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 530);
  float v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v3));
  float v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v4 == 1));
  [v11 setObject:v12 forKeyedSubscript:@"WiFiAssociated2GHz"];

  float v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v7));
  [v11 setObject:v13 forKeyedSubscript:@"NumberOfClassicDevicesConnected"];

  float v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v9));
  [v11 setObject:v14 forKeyedSubscript:@"NumberOfLEDevicesConnected"];

  char v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v8));
  [v11 setObject:v15 forKeyedSubscript:@"NumberOfClassicHIDDevicesConnected"];

  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v10));
  [v11 setObject:v16 forKeyedSubscript:@"NumberOfLEHIDDevicesConnected"];

  [v11 setObject:v6 forKeyedSubscript:@"WiFiState"];
  int v17 = *(_DWORD *)(a1 + 540) - 1;
  else {
    __int128 v18 = (const __CFString *)*((void *)&off_100891438 + v17);
  }
  [v11 setObject:v18 forKeyedSubscript:@"SmartCoverState"];
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v21));
  [v11 setObject:v19 forKeyedSubscript:@"WiFiM1M4HandshakeCount"];

  return v11;
}

void sub_10031F714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10031F77C(uint64_t a1, unsigned int a2)
{
  id v3 = sub_10031BBA0(a1, a2);
  int v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  int v5 = @"com.apple.Bluetooth.";
  if (a2 == 64) {
    int v5 = @"com.apple.";
  }
  char v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@%@", v5, v4));

  return v6;
}

void sub_10031F7EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10031F7FC(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10031F804(uint64_t a1)
{
  uint64_t v76 = 0LL;
  __int128 v74 = 0u;
  __int128 v75 = 0u;
  __int128 v72 = 0u;
  __int128 v73 = 0u;
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  __int128 v68 = 0u;
  __int128 v69 = 0u;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_100890F58);
  }
  *(void *)&double v1 = sub_10060DCF0((uint64_t)off_1008D6600, (uint64_t)&v62).n128_u64[0];
  v77[0] = @"fTimewindowMsec";
  id v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v62,  v1));
  v78[0] = v61;
  v77[1] = @"fNumAdvsMaincoreElnaOn";
  __int16 v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD1(v62)));
  v78[1] = v60;
  v77[2] = @"fNumAdvsBeforeFilteringMaincoreElnaOn";
  int v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD2(v62)));
  v78[2] = v59;
  v77[3] = @"fTotalScanningTimeMaincoreElnaOn";
  __int16 v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", HIDWORD(v62)));
  v78[3] = v58;
  v77[4] = @"fNumAdvsMaincoreElnaBypass";
  int v57 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v63));
  v78[4] = v57;
  v77[5] = @"fNumAdvsBeforeFilteringMaincoreElnaBypass";
  __int16 v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD1(v63)));
  v78[5] = v56;
  v77[6] = @"fTotalScanningTimeMaincoreElnaBypass";
  int v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD2(v63)));
  v78[6] = v55;
  v77[7] = @"fNumAdvsScancoreElnaOn";
  __int16 v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", HIDWORD(v63)));
  v78[7] = v54;
  v77[8] = @"fNumAdvsBeforeFilteringScancoreElnaOn";
  int v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v64));
  v78[8] = v53;
  v77[9] = @"fTotalScanningTimeScancoreElnaOn";
  __int16 v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD1(v64)));
  v78[9] = v52;
  v77[10] = @"fNumAdvsScancoreElnaBypass";
  int v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD2(v64)));
  v78[10] = v51;
  v77[11] = @"fNumAdvsBeforeFilteringScancoreElnaBypass";
  __int16 v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", HIDWORD(v64)));
  v78[11] = v50;
  v77[12] = @"fTotalScanningTimeScancoreElnaBypass";
  int v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v65));
  v78[12] = v49;
  v77[13] = @"fNumRangeScanRequests";
  __int16 v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD1(v65)));
  v78[13] = v48;
  v77[14] = @"fNumPriorityCriticalScanRequests";
  int v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD2(v65)));
  v78[14] = v47;
  v77[15] = @"fNumScanRequests";
  id v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", HIDWORD(v65)));
  v78[15] = v46;
  _BYTE v77[16] = @"fTotalTimeVeryHighPassiveInternal";
  id v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v66));
  v78[16] = v45;
  v77[17] = @"fTotalTimeVeryHighPassiveExternal";
  id v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD1(v66)));
  v78[17] = v44;
  v77[18] = @"fTotalTimeVeryHighPassiveCombined";
  unsigned int v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD2(v66)));
  v78[18] = v43;
  v77[19] = @"fTotalTimeVeryHighActiveInternal";
  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", HIDWORD(v66)));
  v78[19] = v42;
  v77[20] = @"fTotalTimeVeryHighActiveExternal";
  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v67));
  v78[20] = v41;
  v77[21] = @"fTotalTimeVeryHighActiveCombined";
  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD1(v67)));
  v78[21] = v40;
  v77[22] = @"fTotalTimeHighPassiveInternal";
  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD2(v67)));
  v78[22] = v39;
  v77[23] = @"fTotalTimeHighPassiveExternal";
  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", HIDWORD(v67)));
  v78[23] = v38;
  v77[24] = @"fTotalTimeHighPassiveCombined";
  uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v68));
  v78[24] = v37;
  v77[25] = @"fTotalTimeHighActiveInternal";
  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD1(v68)));
  v78[25] = v36;
  v77[26] = @"fTotalTimeHighActiveExternal";
  __int16 v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD2(v68)));
  v78[26] = v35;
  v77[27] = @"fTotalTimeHighActiveCombined";
  int v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", HIDWORD(v68)));
  v78[27] = v34;
  v77[28] = @"fTotalTimeMediumHighPassiveInternal";
  int v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v69));
  v78[28] = v33;
  v77[29] = @"fTotalTimeMediumHighPassiveExternal";
  int v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD1(v69)));
  v78[29] = v32;
  v77[30] = @"fTotalTimeMediumHighPassiveCombined";
  int v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD2(v69)));
  v78[30] = v31;
  v77[31] = @"fTotalTimeMediumHighActiveInternal";
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", HIDWORD(v69)));
  v78[31] = v30;
  v77[32] = @"fTotalTimeMediumHighActiveExternal";
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v70));
  v78[32] = v29;
  v77[33] = @"fTotalTimeMediumHighActiveCombined";
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD1(v70)));
  v78[33] = v28;
  v77[34] = @"fTotalTimeMediumPassiveInternal";
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD2(v70)));
  v78[34] = v27;
  v77[35] = @"fTotalTimeMediumPassiveExternal";
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", HIDWORD(v70)));
  v78[35] = v26;
  v77[36] = @"fTotalTimeMediumPassiveCombined";
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v71));
  v78[36] = v25;
  v77[37] = @"fTotalTimeMediumActiveInternal";
  double v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD1(v71)));
  v78[37] = v24;
  v77[38] = @"fTotalTimeMediumActiveExternal";
  __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD2(v71)));
  v78[38] = v23;
  v77[39] = @"fTotalTimeMediumActiveCombined";
  double v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", HIDWORD(v71)));
  v78[39] = v22;
  v77[40] = @"fTotalTimeMediumLowPassiveInternal";
  unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v72));
  v78[40] = v21;
  v77[41] = @"fTotalTimeMediumLowPassiveExternal";
  double v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD1(v72)));
  v78[41] = v20;
  v77[42] = @"fTotalTimeMediumLowPassiveCombined";
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD2(v72)));
  v78[42] = v19;
  v77[43] = @"fTotalTimeMediumLowActiveInternal";
  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", HIDWORD(v72)));
  v78[43] = v18;
  v77[44] = @"fTotalTimeMediumLowActiveExternal";
  int v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v73));
  v78[44] = v17;
  v77[45] = @"fTotalTimeMediumLowActiveCombined";
  id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v73));
  v78[45] = v16;
  v77[46] = @"fTotalTimeLowPassiveInternal";
  char v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD2(v73)));
  v78[46] = v15;
  v77[47] = @"fTotalTimeLowPassiveExternal";
  float v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", HIDWORD(v73)));
  v78[47] = v14;
  v77[48] = @"fTotalTimeLowPassiveCombined";
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v74));
  v78[48] = v2;
  v77[49] = @"fTotalTimeLowActiveInternal";
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD1(v74)));
  v78[49] = v3;
  v77[50] = @"fTotalTimeLowActiveExternal";
  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD2(v74)));
  v78[50] = v4;
  v77[51] = @"fTotalTimeLowActiveCombined";
  int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", HIDWORD(v74)));
  v78[51] = v5;
  v77[52] = @"fTotalTimeVeryLowPassiveInternal";
  char v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v75));
  v78[52] = v6;
  v77[53] = @"fTotalTimeVeryLowPassiveExternal";
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD1(v75)));
  v78[53] = v7;
  v77[54] = @"fTotalTimeVeryLowPassiveCombined";
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", DWORD2(v75)));
  v78[54] = v8;
  v77[55] = @"fTotalTimeVeryLowActiveInternal";
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", HIDWORD(v75)));
  v78[55] = v9;
  v77[56] = @"fTotalTimeVeryLowActiveExternal";
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v76));
  v78[56] = v10;
  v77[57] = @"fTotalTimeVeryLowActiveCombined";
  float v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  v76));
  v78[57] = v11;
  float v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v78,  v77,  58LL));

  sub_1002EFD68(a1, 0x5Eu, v12);
}

void sub_1003202DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100320668(uint64_t a1)
{
  return sub_100320670(*(void *)(a1 + 32));
}

uint64_t sub_100320670(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Sending all day BT metrics to CoreAnalytics",  buf,  2u);
  }

  uint64_t v159 = 0LL;
  *(void *)__int128 buf = 0LL;
  uint64_t v138 = a1;
  sub_100242F28((uint64_t)buf, a1 + 176);
  __int128 v156 = 0u;
  __int128 v157 = 0u;
  __int128 v154 = 0u;
  __int128 v155 = 0u;
  id v3 = *(id *)(a1 + 304);
  unsigned __int16 v4 = 0;
  id v5 = [v3 countByEnumeratingWithState:&v154 objects:v183 count:16];
  if (v5)
  {
    unsigned __int16 v118 = 0;
    uint64_t v6 = *(void *)v155;
    do
    {
      uint64_t v7 = 0LL;
      v118 += (unsigned __int16)v5;
      do
      {
        if (*(void *)v155 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v138 + 304) objectForKeyedSubscript:*(void *)(*((void *)&v154 + 1) + 8 * (void)v7)]);
        unsigned __int16 v9 = (unsigned __int16)[v8 isEqual:&__kCFBooleanTrue];

        v4 += v9;
        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v154 objects:v183 count:16];
    }

    while (v5);
  }

  else
  {
    unsigned __int16 v118 = 0;
  }

  __int128 v152 = 0u;
  __int128 v153 = 0u;
  __int128 v150 = 0u;
  __int128 v151 = 0u;
  id v10 = *(id *)(v138 + 312);
  id v11 = [v10 countByEnumeratingWithState:&v150 objects:v182 count:16];
  if (!v11)
  {
    unsigned __int16 v134 = 0;
    unsigned __int16 v130 = 0;
    unsigned __int16 v126 = 0;
    unsigned __int16 v121 = 0;
    double v13 = 0.0;
    double v14 = 0.0;
    double v15 = 0.0;
    double v16 = 0.0;
    goto LABEL_32;
  }

  unsigned __int16 v134 = 0;
  unsigned __int16 v130 = 0;
  unsigned __int16 v126 = 0;
  unsigned __int16 v121 = 0;
  uint64_t v12 = *(void *)v151;
  double v13 = 0.0;
  double v14 = 0.0;
  double v15 = 0.0;
  double v16 = 0.0;
  do
  {
    for (std::string::size_type i = 0LL; i != v11; std::string::size_type i = (char *)i + 1)
    {
      if (*(void *)v151 != v12) {
        objc_enumerationMutation(v10);
      }
      uint64_t v18 = *(void *)(*((void *)&v150 + 1) + 8LL * (void)i);
      __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v138 + 312) objectForKeyedSubscript:v18]);
      BOOL v20 = (unint64_t)[v19 count] > 1;

      if (v20)
      {
        unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v138 + 312) objectForKeyedSubscript:v18]);
        double v22 = (void *)objc_claimAutoreleasedReturnValue([v21 objectAtIndexedSubscript:0]);
        unsigned int v23 = [v22 isEqualToString:@"isAppleDevice"];

        if (v23)
        {
          double v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v138 + 312) objectForKeyedSubscript:v18]);
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 objectAtIndexedSubscript:1]);
          [v25 doubleValue];
          ++v130;
          double v13 = v13 + v26;
          goto LABEL_26;
        }

        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v138 + 312) objectForKeyedSubscript:v18]);
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 objectAtIndexedSubscript:0]);
        unsigned int v30 = [v29 isEqualToString:@"BTResourceManagerconnectionUseCaseDigitalCarKey"];

        if (v30)
        {
          double v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v138 + 312) objectForKeyedSubscript:v18]);
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 objectAtIndexedSubscript:1]);
          [v25 doubleValue];
          ++v126;
          double v14 = v14 + v31;
          goto LABEL_26;
        }

        int v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v138 + 312) objectForKeyedSubscript:v18]);
        int v33 = (void *)objc_claimAutoreleasedReturnValue([v32 objectAtIndexedSubscript:0]);
        unsigned int v34 = [v33 isEqualToString:@"BTResourceManagerconnectionUseCaseThirdPartyApp"];

        if (v34)
        {
          double v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v138 + 312) objectForKeyedSubscript:v18]);
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 objectAtIndexedSubscript:1]);
          [v25 doubleValue];
          ++v121;
          double v15 = v15 + v35;
LABEL_26:
        }

        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v138 + 312) objectForKeyedSubscript:v18]);
        uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 objectAtIndexedSubscript:1]);
        [v37 doubleValue];
        double v39 = v38;

        ++v134;
        double v16 = v16 + v39;
        continue;
      }

      uint64_t v27 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_10066BD68(&v148, v149, v27);
      }
    }

    id v11 = [v10 countByEnumeratingWithState:&v150 objects:v182 count:16];
  }

  while (v11);
LABEL_32:

  sub_100242F54((uint64_t)buf);
  if (qword_1008D6788 != -1) {
    dispatch_once(&qword_1008D6788, &stru_100890F98);
  }
  int v40 = sub_1002075B4((uint64_t)off_1008D6780);
  __int128 v146 = 0u;
  __int128 v147 = 0u;
  __int128 v144 = 0u;
  __int128 v145 = 0u;
  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v138 + 368) allKeys]);
  id v42 = [v41 countByEnumeratingWithState:&v144 objects:v181 count:16];
  int v113 = v40;
  id v43 = 0LL;
  id v44 = 0LL;
  if (!v42)
  {
    unsigned int obj = 0;
    unsigned int v116 = 0;
    goto LABEL_52;
  }

  unsigned int obj = 0;
  unsigned int v116 = 0;
  uint64_t v45 = *(void *)v145;
  while (2)
  {
    uint64_t v46 = 0LL;
    while (2)
    {
      if (*(void *)v145 != v45) {
        objc_enumerationMutation(v41);
      }
      int v47 = *(void **)(*((void *)&v144 + 1) + 8 * v46);
      if ([v47 isEqualToString:@"A1603"])
      {
        __int16 v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v138 + 368) objectForKeyedSubscript:v47]);
        int v49 = (void *)objc_claimAutoreleasedReturnValue([v48 objectAtIndexedSubscript:0]);
        id v43 = [v49 unsignedIntValue];
        goto LABEL_47;
      }

      if ([v47 isEqualToString:@"A2051"])
      {
        __int16 v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v138 + 368) objectForKeyedSubscript:v47]);
        int v49 = (void *)objc_claimAutoreleasedReturnValue([v48 objectAtIndexedSubscript:0]);
        id v44 = [v49 unsignedIntValue];
        goto LABEL_47;
      }

      if ([v47 isEqualToString:@"A3085"])
      {
        __int16 v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v138 + 368) objectForKeyedSubscript:v47]);
        int v49 = (void *)objc_claimAutoreleasedReturnValue([v48 objectAtIndexedSubscript:0]);
        unsigned int obj = [v49 unsignedIntValue];
        goto LABEL_47;
      }

      if ([v47 isEqualToString:@"A2538"])
      {
        __int16 v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v138 + 368) objectForKeyedSubscript:v47]);
        int v49 = (void *)objc_claimAutoreleasedReturnValue([v48 objectAtIndexedSubscript:0]);
        unsigned int v116 = [v49 unsignedIntValue];
LABEL_47:
      }

      if (v42 != (id)++v46) {
        continue;
      }
      break;
    }

    id v42 = [v41 countByEnumeratingWithState:&v144 objects:v181 count:16];
    if (v42) {
      continue;
    }
    break;
  }

void sub_100321A28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31)
{
  sub_100242FAC((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

uint64_t sub_100321F34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(_BYTE *)(v1 + 57_Block_object_dispose(va, 8) = TMIsAutomaticTimeEnabled() != 0;
  return sub_1002EF068(v1);
}

void sub_100321F64(uint64_t a1, __n128 a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 472);
  unsigned __int16 v4 = (void *)(v2 + 480);
  if (v3 != (void *)(v2 + 480))
  {
    a2.n128_u64[0] = 138412290LL;
    __n128 v21 = a2;
    do
    {
      uint64_t v5 = *((unsigned __int8 *)v3 + 40);
      int v6 = *((unsigned __int8 *)v3 + 41);
      v24[0] = @"NearbyActionType";
      unint64_t v7 = *((char *)v3 + 32);
      uint64_t v8 = "?";
      if (v7 <= 0x58) {
        uint64_t v8 = off_100891450[v7];
      }
      unsigned __int16 v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  v8,  *(_OWORD *)&v21));
      v25[0] = v9;
      v24[1] = @"NearbyActionTypeFlags";
      uint64_t v10 = CUPrintFlags32(v5, &unk_1006C16FB);
      id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v25[1] = v11;
      void v24[2] = @"NearbyActionTypeFlags2";
      uint64_t v12 = CUPrintFlags32((v6 << 8), &unk_1006C16FB);
      double v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v25[2] = v13;
      void v24[3] = @"NearbyActionTypeCounter";
      double v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v3[6]));
      void v25[3] = v14;
      void v24[4] = @"NearbyActionTypeDuration";
      double v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v3[7]));
      v25[4] = v15;
      double v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v25,  v24,  5LL));

      int v17 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = v21.n128_u32[0];
        unsigned int v23 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "sending NearbyActionDailyStats : %@",  buf,  0xCu);
      }

      sub_1002EFD68(v2, 0x6Fu, v16);

      uint64_t v18 = (void *)v3[1];
      if (v18)
      {
        do
        {
          __int16 v19 = v18;
          uint64_t v18 = (void *)*v18;
        }

        while (v18);
      }

      else
      {
        do
        {
          __int16 v19 = (void *)v3[2];
          BOOL v20 = *v19 == (void)v3;
          id v3 = v19;
        }

        while (!v20);
      }

      id v3 = v19;
    }

    while (v19 != v4);
  }

  sub_10023BF24(v2 + 472, *(void **)(v2 + 480));
  *(void *)(v2 + 480) = 0LL;
  *(void *)(v2 + 48_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v2 + 472) = v4;
}

void sub_1003221B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10032220C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 584))
  {
    unint64_t v7 = @"T26FindingSessionDailyCount";
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:"));
    uint64_t v8 = v2;
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL));

    unsigned __int16 v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
      int v5 = 138412290;
      int v6 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "sending T26FindingSessionDailyCount: %@",  (uint8_t *)&v5,  0xCu);
    }

    sub_1002EFD68(v1, 0x75u, v3);
    *(void *)(v1 + 584) = 0LL;
  }

void sub_10032231C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100322340(uint64_t a1, __n128 a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 496);
  unsigned __int16 v4 = (void *)(v2 + 504);
  if (v3 != (void *)(v2 + 504))
  {
    a2.n128_u64[0] = 138412290LL;
    __n128 v17 = a2;
    do
    {
      v20[0] = @"RefHour";
      int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *((unsigned __int8 *)v3 + 28),  *(_OWORD *)&v17));
      v21[0] = v5;
      v20[1] = @"Duration";
      LODWORD(v6) = *((_DWORD *)v3 + 8);
      unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v6));
      v21[1] = v7;
      v20[2] = @"RSSI";
      LODWORD(v_Block_object_dispose(va, 8) = *((_DWORD *)v3 + 9);
      unsigned __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v8));
      void v21[2] = v9;
      void v20[3] = @"MPS";
      LODWORD(v10) = *((_DWORD *)v3 + 10);
      id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v10));
      void v21[3] = v11;
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v21,  v20,  4LL));

      double v13 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = v17.n128_u32[0];
        __int16 v19 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "sending NearbyActionInfoV2DensityDailyStats : %@",  buf,  0xCu);
      }

      sub_1002EFD68(v2, 0x70u, v12);

      double v14 = (void *)v3[1];
      if (v14)
      {
        do
        {
          double v15 = v14;
          double v14 = (void *)*v14;
        }

        while (v14);
      }

      else
      {
        do
        {
          double v15 = (void *)v3[2];
          BOOL v16 = *v15 == (void)v3;
          id v3 = v15;
        }

        while (!v16);
      }

      id v3 = v15;
    }

    while (v15 != v4);
  }

  sub_10023BF24(v2 + 496, *(void **)(v2 + 504));
  *(void *)(v2 + 504) = 0LL;
  *(void *)(v2 + 512) = 0LL;
  *(void *)(v2 + 496) = v4;
}

void sub_100322540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100322588(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 2360LL))(v2) && *(void *)(v1 + 520))
  {
    double v8 = @"AOPBTPrecisionFindingKeysCount";
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:"));
    unsigned __int16 v9 = v3;
    unsigned __int16 v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL));

    int v5 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
      int v6 = 138412290;
      unint64_t v7 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "sending AOPBTPrecisionFindingKeysUsage : %@",  (uint8_t *)&v6,  0xCu);
    }

    sub_1002EFD68(v1, 0x3Cu, v4);
    *(void *)(v1 + 520) = 0LL;
  }

void sub_1003226AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003226D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_WORD *)(v1 + 592))
  {
    unint64_t v7 = @"GATTDiscoverServiceWithUUIDCacheMissDailyCount";
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:"));
    double v8 = v2;
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL));

    unsigned __int16 v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      int v6 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "sending GattDailyStats : %@",  (uint8_t *)&v5,  0xCu);
    }

    sub_1002EFD68(v1, 0x52u, v3);
    *(_WORD *)(v1 + 592) = 0;
  }

void sub_1003227E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100322804(uint64_t a1)
{
  uint64_t v1 = *(unsigned int **)(a1 + 32);
  memset(__s1, 0, sizeof(__s1));
  if (memcmp(__s1, v1 + 172, 0x30uLL))
  {
    v19[0] = @"TotalWildReports";
    double v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v1[172]));
    v20[0] = v15;
    v19[1] = @"TotalNearOwnerReports";
    double v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v1[173]));
    v20[1] = v14;
    _DWORD v19[2] = @"TotalType18NearOwner";
    double v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v1[174]));
    v20[2] = v13;
    void v19[3] = @"TotalPoshNearOwnerApple";
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v1[175]));
    void v20[3] = v12;
    void v19[4] = @"TotalPoshNearOwnerNonApple";
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v1[176]));
    void v20[4] = v11;
    v19[5] = @"TotalType18Wild";
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v1[177]));
    v20[5] = v2;
    void v19[6] = @"TotalPoshWildApple";
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v1[178]));
    v20[6] = v3;
    v19[7] = @"TotalPoshWildNonApple";
    unsigned __int16 v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v1[179]));
    v20[7] = v4;
    void v19[8] = @"TotalWildBufferReads";
    int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v1[180]));
    v20[8] = v5;
    v19[9] = @"TotalNearOwnerBufferReads";
    int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v1[181]));
    v20[9] = v6;
    v19[10] = @"MaxWildBufferReports";
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v1[182]));
    v20[10] = v7;
    v19[11] = @"MaxNearOwnerBufferReports";
    double v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v1[183]));
    v20[11] = v8;
    unsigned __int16 v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v20,  v19,  12LL));

    double v10 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v18 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "sending AdvBufferFindMyDailyMetric : %@",  buf,  0xCu);
    }

    sub_1002EFD68((uint64_t)v1, 0x7Au, v9);
    *((_OWORD *)v1 + 44) = 0u;
    *((_OWORD *)v1 + 45) = 0u;
    *((_OWORD *)v1 + 43) = 0u;
  }

void sub_100322B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100322BE0(uint64_t a1)
{
  uint64_t v1 = 0LL;
  unint64_t v2 = 0LL;
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned __int16 v4 = (unsigned int *)(v3 + 736);
  unsigned int v5 = *(_DWORD *)(v3 + 736);
  v36[0] = v5 >> 1;
  v36[1] = (3 * v5) >> 2;
  _OWORD v36[2] = 9 * v5 / 0xA;
  void v36[3] = 19 * v5 / 0x14;
  v36[4] = 99 * v5 / 0x64;
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
  unsigned int v35 = 0;
  unsigned int v6 = *(_DWORD *)(v3 + 752);
  do
  {
    unsigned int v7 = v36[v1];
    if (v7 > v6 && v2 <= 4)
    {
      uint64_t v9 = 0LL;
      do
      {
        unint64_t v10 = v2 + v9;
        v6 += *(_DWORD *)(v3 + 756 + 4 * v2 + 4 * v9++);
      }

      while (v7 > v6 && v10 < 4);
      unint64_t v2 = (v2 + v9);
    }

    *((_DWORD *)&v33 + v1++) = byte_1006C1775[v2];
  }

  while (v1 != 5);
  v31[0] = @"AdvPayload_Average";
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v3 + 748)));
  v32[0] = v28;
  v31[1] = @"ADVPayload_Max";
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v3 + 740)));
  v32[1] = v27;
  void v31[2] = @"ADVPayload_Min";
  double v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v3 + 744)));
  void v32[2] = v26;
  void v31[3] = @"AverageAdvertismentsReceived";
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *v4));
  void v32[3] = v25;
  v31[4] = @"NumberOfAdvMode00";
  double v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v3 + 772)));
  v32[4] = v24;
  v31[5] = @"NumberOfAdvMode01";
  unsigned int v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v3 + 776)));
  v32[5] = v23;
  void v31[6] = @"NumberOfAdvMode10";
  double v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v3 + 780)));
  v32[6] = v22;
  v31[7] = @"NumberOfDirectedAdv";
  __n128 v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v3 + 784)));
  v32[7] = v21;
  v31[8] = @"NumberOfLE1MAdv";
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v3 + 788)));
  v32[8] = v12;
  v31[9] = @"NumberOfLE2MAdv";
  double v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v3 + 792)));
  v32[9] = v13;
  v31[10] = @"AdvPayload_Median";
  double v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  v33));
  _BYTE v32[10] = v14;
  void v31[11] = @"AdvPayload_P75";
  double v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", HIDWORD(v33)));
  void v32[11] = v15;
  v31[12] = @"AdvPayload_P90";
  BOOL v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  v34));
  v32[12] = v16;
  v31[13] = @"AdvPayload_P95";
  __n128 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", HIDWORD(v34)));
  v32[13] = v17;
  v31[14] = @"AdvPayload_P99";
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v35));
  v32[14] = v18;
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v32,  v31,  15LL));

  BOOL v20 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    unsigned int v30 = v19;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "sending ExtAdvDailyMetric : %@", buf, 0xCu);
  }

  sub_1002EFD68(v3, 0x7Bu, v19);
  *(_OWORD *)(v3 + 780) = 0u;
  *(_OWORD *)(v3 + 752) = 0u;
  *(_OWORD *)(v3 + 76_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)unsigned __int16 v4 = 0u;
}

void sub_100323034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100323120( uint64_t a1, unsigned int *a2, int a3, uint64_t a4, unsigned int a5, uint8x8_t a6, uint8x8_t a7)
{
  if (a3 == 2) {
    uint64_t v9 = @"Anomaly";
  }
  else {
    uint64_t v9 = @"Normal";
  }
  unint64_t v10 = *((char *)a2 + 70);
  if (v10 > 0xC) {
    id v11 = @"NA";
  }
  else {
    id v11 = (const __CFString *)*((void *)&off_100891718 + v10);
  }
  uint64_t v12 = *(void *)(a1 + 664);
  if (!v12) {
    goto LABEL_18;
  }
  uint64_t v13 = a1 + 664;
  do
  {
    unsigned int v14 = *(unsigned __int16 *)(v12 + 32);
    BOOL v15 = v14 >= a5;
    if (v14 >= a5) {
      BOOL v16 = (uint64_t *)v12;
    }
    else {
      BOOL v16 = (uint64_t *)(v12 + 8);
    }
    if (v15) {
      uint64_t v13 = v12;
    }
    uint64_t v12 = *v16;
  }

  while (*v16);
  if (v13 == a1 + 664 || *(unsigned __int16 *)(v13 + 32) > a5)
  {
LABEL_18:
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    unsigned int v122 = 0;
    uint64_t v19 = 0LL;
    unsigned int v120 = 0;
    int8x8_t v126 = 0LL;
    goto LABEL_19;
  }

  unsigned __int8 v34 = *(_BYTE *)(v13 + 184);
  unsigned __int8 v35 = *(_BYTE *)(v13 + 185);
  char v36 = *(_BYTE *)(v13 + 264);
  a6.i32[0] = *(_DWORD *)(v13 + 191);
  int16x4_t v37 = (int16x4_t)vmovl_u8(a6).u64[0];
  a7.i32[0] = *(_DWORD *)(v13 + 271);
  int16x4_t v38 = (int16x4_t)vmovl_u8(a7).u64[0];
  int16x4_t v39 = (int16x4_t)vcgt_u16((uint16x4_t)v37, (uint16x4_t)v38);
  if ((v36 & 1) != 0 && (v34 & 1) != 0)
  {
    uint64_t v17 = 2LL;
  }

  else if ((*(_BYTE *)(v13 + 264) & 1) == 0 || (v34 & 1) != 0)
  {
    int v40 = v36 & 1;
    unsigned int v41 = (v40 == 0) & v34;
    int v42 = v41 | v40;
    if ((*(_BYTE *)(v13 + 184) & 1) != 0) {
      unsigned int v43 = 0;
    }
    else {
      unsigned int v43 = 3;
    }
    if (v42) {
      uint64_t v17 = v41;
    }
    else {
      uint64_t v17 = v43;
    }
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  int16x4_t v44 = (int16x4_t)vbic_s8((int8x8_t)0x2000200020002LL, (int8x8_t)v39);
  char v45 = *(_BYTE *)(v13 + 187);
  unsigned __int8 v46 = *(_BYTE *)(v13 + 186);
  if ((*(_BYTE *)(v13 + 265) & 1) != 0 && (v35 & 1) != 0)
  {
    uint64_t v18 = 2LL;
  }

  else if ((*(_BYTE *)(v13 + 265) & 1) == 0 || (v35 & 1) != 0)
  {
    int v47 = *(_BYTE *)(v13 + 265) & 1;
    unsigned int v48 = (v47 == 0) & v35;
    int v49 = v48 | v47;
    if ((*(_BYTE *)(v13 + 185) & 1) != 0) {
      unsigned int v50 = 0;
    }
    else {
      unsigned int v50 = 3;
    }
    if (v49) {
      uint64_t v18 = v48;
    }
    else {
      uint64_t v18 = v50;
    }
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  unsigned __int8 v51 = *(_BYTE *)(v13 + 189);
  char v52 = *(_BYTE *)(v13 + 267);
  int8x8_t v53 = (int8x8_t)vceq_s16(v37, v38);
  int8x8_t v54 = (int8x8_t)vsub_s16(v44, v39);
  if ((*(_BYTE *)(v13 + 266) & 1) != 0 && (v46 & 1) != 0)
  {
    int v55 = 2;
  }

  else if ((*(_BYTE *)(v13 + 266) & 1) == 0 || (v46 & 1) != 0)
  {
    int v56 = *(_BYTE *)(v13 + 266) & 1;
    int v57 = (v56 == 0) & v46;
    int v58 = v57 | v56;
    if ((*(_BYTE *)(v13 + 186) & 1) != 0) {
      int v59 = 0;
    }
    else {
      int v59 = 3;
    }
    if (v58) {
      int v55 = v57;
    }
    else {
      int v55 = v59;
    }
  }

  else
  {
    int v55 = 0;
  }

  int v60 = *(unsigned __int8 *)(v13 + 190);
  char v61 = *(_BYTE *)(v13 + 188);
  char v62 = *(_BYTE *)(v13 + 268);
  char v63 = *(_BYTE *)(v13 + 269);
  char v64 = *(_BYTE *)(v13 + 270);
  unsigned int v122 = v55;
  int8x8_t v126 = vbic_s8(v54, v53);
  if ((v45 & 1) != 0 && (v52 & 1) != 0)
  {
    uint64_t v19 = 2LL;
LABEL_71:
    if ((v61 & 1) != 0 && (v62 & 1) != 0)
    {
      int v65 = 4;
    }

    else if ((v51 & 1) != 0 && (v63 & 1) != 0)
    {
      int v65 = 5;
    }

    else if ((v60 & 1) != 0 && (v64 & 1) != 0)
    {
      int v65 = 6;
    }

    else if ((v61 & 1) == 0 || (v62 & 1) != 0)
    {
      if ((v64 & 1) != 0) {
        int v67 = 0;
      }
      else {
        int v67 = 9;
      }
      int v65 = (v60 << 31 >> 31) & v67;
      if ((v51 & ((v63 & 1) == 0)) != 0) {
        int v65 = 8;
      }
    }

    else
    {
      int v65 = 7;
    }

    goto LABEL_107;
  }

  if ((v45 & 1) == 0 || (v52 & 1) != 0)
  {
    char v66 = v45 & 1;
    if ((v52 & 1) == 0) {
      char v66 = 1;
    }
    if ((v45 & 1) != 0) {
      char v66 = 0;
    }
    else {
      uint64_t v19 = 0LL;
    }
    if ((v45 & 1) == 0)
    {
      unsigned int v120 = 0;
      goto LABEL_19;
    }

    if ((v52 & 1) != 0) {
      goto LABEL_71;
    }
  }

  else
  {
    uint64_t v19 = 1LL;
  }

  if ((v61 & 1) != 0)
  {
    int v65 = 1;
  }

  else if ((v51 & 1) != 0)
  {
    int v65 = 2;
  }

  else
  {
    int v65 = (v60 << 31 >> 31) & 3;
  }

void sub_100324148( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Unwind_Resume(a1);
}

id sub_100324554(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_10032455C(uint64_t a1, double *a2)
{
  v12[0] = @"HIDIntervalUpdated";
  v11[0] = @"_input";
  v11[1] = @"DeviceName";
  uint64_t v3 = (uint64_t *)a2;
  unsigned __int16 v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3));
  v12[1] = v4;
  void v11[2] = @"DeviceType";
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *((unsigned __int8 *)a2 + 24)));
  _DWORD v12[2] = v5;
  v11[3] = @"Intervalms";
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a2[4]));
  v12[3] = v6;
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v12,  v11,  4LL));

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  _DWORD v9[2] = sub_100324728;
  v9[3] = &unk_100890D18;
  id v10 = objc_alloc_init(&OBJC_CLASS___BTServicesClient);
  id v8 = v10;
  [v8 diagnosticControl:v7 completion:v9];
}

void sub_1003246D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_100324728(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

unint64_t sub_100324730(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100890F18);
  }
  uint64_t v3 = off_1008D5F28;
  sub_10002418C(v15, "A1603");
  if ((sub_1005CE5A8((uint64_t)v3, v2, (uint64_t)v15) & 1) != 0)
  {
    unint64_t v4 = 1LL;
  }

  else
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100890F18);
    }
    unsigned int v5 = off_1008D5F28;
    sub_10002418C(v13, "A2051");
    if ((sub_1005CE5A8((uint64_t)v5, v2, (uint64_t)v13) & 1) != 0)
    {
      unint64_t v4 = 1LL;
    }

    else
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_100890F18);
      }
      unsigned int v6 = off_1008D5F28;
      sub_10002418C(v11, "A3085");
      if ((sub_1005CE5A8((uint64_t)v6, v2, (uint64_t)v11) & 1) != 0)
      {
        unint64_t v4 = 1LL;
      }

      else
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_100890F18);
        }
        unsigned int v7 = off_1008D5F28;
        sub_10002418C(__p, "A2538");
        unint64_t v4 = sub_1005CE5A8((uint64_t)v7, v2, (uint64_t)__p);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }

      if (v12 < 0) {
        operator delete(v11[0]);
      }
    }

    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }

  if (v16 < 0) {
    operator delete(v15[0]);
  }

  return v4;
}

void sub_1003248F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }

  _Unwind_Resume(a1);
}

void sub_100324968(uint64_t a1, void *a2)
{
}

void sub_100324974(uint64_t a1, __int16 a2)
{
  uint64_t v4 = sub_100405218();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1003249DC;
  v5[3] = &unk_1008878D8;
  v5[4] = a1;
  __int16 v6 = a2;
  sub_100405384(v4, v5);
}

uint64_t sub_1003249DC(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 528LL) = *(_BYTE *)(result + 40);
  return result;
}

void sub_1003249EC(uint64_t a1, __int16 a2)
{
  uint64_t v3 = a1 - 40;
  uint64_t v4 = sub_100405218();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1003249DC;
  v5[3] = &unk_1008878D8;
  v5[4] = v3;
  __int16 v6 = a2;
  sub_100405384(v4, v5);
}

void sub_100324A54(uint64_t a1, char a2, char a3, uint64_t a4, char a5, char a6, char a7)
{
  uint64_t v13 = sub_100405218();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  double v14[2] = sub_100324AEC;
  void v14[3] = &unk_10088DA08;
  void v14[4] = a1;
  char v15 = a3;
  char v16 = a2;
  char v17 = a5;
  char v18 = a6;
  char v19 = a7;
  sub_100405384(v13, v14);
}

uint64_t sub_100324AEC(uint64_t result)
{
  uint64_t v1 = *(_BYTE **)(result + 32);
  v1[530] = *(_BYTE *)(result + 40);
  v1[531] = *(_BYTE *)(result + 41);
  v1[532] = *(_BYTE *)(result + 42);
  v1[533] = *(_BYTE *)(result + 43);
  v1[534] = *(_BYTE *)(result + 44);
  return result;
}

void sub_100324B1C(uint64_t a1, char a2, char a3, uint64_t a4, char a5, char a6, char a7)
{
  uint64_t v12 = a1 - 8;
  uint64_t v13 = sub_100405218();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  double v14[2] = sub_100324AEC;
  void v14[3] = &unk_10088DA08;
  void v14[4] = v12;
  char v15 = a3;
  char v16 = a2;
  char v17 = a5;
  char v18 = a6;
  char v19 = a7;
  sub_100405384(v13, v14);
}

void sub_100324BB4(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100324C20;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EFE20 != -1) {
    dispatch_once(&qword_1008EFE20, block);
  }
}

void sub_100324C20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1002F9918;
  v3[3] = &unk_10087EB20;
  v3[4] = v1;
  sub_100405384(v2, v3);
}

void sub_100324C80(uint64_t a1)
{
}

void sub_100324C88(uint64_t a1)
{
  uint64_t v2 = sub_100405218();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_100324CE8;
  v3[3] = &unk_10087EB20;
  v3[4] = a1;
  sub_100405384(v2, v3);
}

double sub_100324CE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  double result = 0.0;
  *(void *)(v1 + 536) = 0LL;
  *(_DWORD *)(v1 + 52_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_100324CFC(uint64_t a1)
{
  uint64_t v1 = a1 - 48;
  uint64_t v2 = sub_100405218();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_100324CE8;
  v3[3] = &unk_10087EB20;
  v3[4] = v1;
  sub_100405384(v2, v3);
}

void sub_100324D5C(uint64_t a1)
{
  uint64_t v2 = sub_100405218();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_100324DBC;
  v3[3] = &unk_10087EB20;
  v3[4] = a1;
  sub_100405384(v2, v3);
}

double sub_100324DBC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  double result = 0.0;
  *(void *)(v1 + 536) = 0LL;
  *(_DWORD *)(v1 + 52_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_100324DD0(uint64_t a1)
{
  uint64_t v1 = a1 - 48;
  uint64_t v2 = sub_100405218();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_100324DBC;
  v3[3] = &unk_10087EB20;
  v3[4] = v1;
  sub_100405384(v2, v3);
}

void sub_100324E30(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100405218();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100324E98;
  v5[3] = &unk_10087EB68;
  v5[4] = a1;
  int v6 = a2;
  sub_100405384(v4, v5);
}

uint64_t sub_100324E98(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 536LL) = *(_DWORD *)(result + 40);
  return result;
}

void sub_100324EA8(uint64_t a1, int a2)
{
  uint64_t v3 = a1 - 32;
  uint64_t v4 = sub_100405218();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100324E98;
  v5[3] = &unk_10087EB68;
  v5[4] = v3;
  int v6 = a2;
  sub_100405384(v4, v5);
}

void sub_100324F10(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100405218();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100324F78;
  v5[3] = &unk_10087EB68;
  v5[4] = a1;
  int v6 = a2;
  sub_100405384(v4, v5);
}

uint64_t sub_100324F78(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 540LL) = *(_DWORD *)(result + 40);
  return result;
}

void sub_100324F88(uint64_t a1, int a2)
{
  uint64_t v3 = a1 - 56;
  uint64_t v4 = sub_100405218();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100324F78;
  v5[3] = &unk_10087EB68;
  v5[4] = v3;
  int v6 = a2;
  sub_100405384(v4, v5);
}

void sub_100324FF0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = sub_100405218();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _OWORD v6[2] = sub_100325058;
  v6[3] = &unk_10087EB68;
  void v6[4] = a1;
  int v7 = a3;
  sub_100405384(v5, v6);
}

uint64_t sub_100325058(uint64_t result)
{
  if (!*(_DWORD *)(result + 40)) {
    ++*(_BYTE *)(*(void *)(result + 32) + 529LL);
  }
  return result;
}

void sub_100325078(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = sub_100405218();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _OWORD v6[2] = sub_100325058;
  v6[3] = &unk_10087EB68;
  void v6[4] = a1 - 64;
  int v7 = a3;
  sub_100405384(v5, v6);
}

void sub_1003250E4(uint64_t a1)
{
  uint64_t v2 = sub_100405218();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_100325144;
  v3[3] = &unk_10087EB20;
  v3[4] = a1;
  sub_100405384(v2, v3);
}

uint64_t sub_100325144(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_BYTE *)(v1 + 529)) {
    --*(_BYTE *)(v1 + 529);
  }
  return result;
}

void sub_10032515C(uint64_t a1)
{
  uint64_t v2 = sub_100405218();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_100325144;
  v3[3] = &unk_10087EB20;
  v3[4] = a1 - 64;
  sub_100405384(v2, v3);
}

void sub_1003251C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100405218();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100325234;
  v7[3] = &unk_100888050;
  v7[4] = a1;
  void v7[5] = a2;
  void v7[6] = a3;
  sub_100405384(v6, v7);
}

__n128 sub_100325234(uint64_t a1)
{
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(*(void *)(a1 + 32) + 544LL) = result;
  return result;
}

void sub_100325244(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void *sub_10032524C@<X0>(unsigned int a1@<W1>, void *a2@<X8>)
{
  if (a1 > 0xC) {
    uint64_t v2 = "NA";
  }
  else {
    uint64_t v2 = off_100891780[(char)a1];
  }
  return sub_10002418C(a2, v2);
}

double sub_100325278(uint64_t a1, unsigned int a2)
{
  double result = 0.0;
  if (a2 <= 0xC) {
    return dbl_1006C1A80[(char)a2];
  }
  return result;
}

void sub_100325298(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v6 = sub_100405218();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_10032530C;
  v7[3] = &unk_10087FF20;
  v7[4] = a1;
  void v7[5] = a2;
  __int16 v8 = a3;
  sub_100405384(v6, v7);
}

uint64_t sub_10032530C(uint64_t a1, uint64_t a2)
{
  return sub_10032531C(*(void *)(a1 + 32), a2, *(unsigned __int16 *)(a1 + 48));
}

uint64_t sub_10032531C(uint64_t result, uint64_t a2, unsigned int a3)
{
  unsigned __int16 v10 = a3;
  uint64_t v3 = *(void *)(result + 664);
  if (v3)
  {
    uint64_t v4 = result;
    result += 656LL;
    uint64_t v5 = v4 + 664;
    uint64_t v6 = v4 + 664;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v3 + 32);
      BOOL v8 = v7 >= a3;
      if (v7 >= a3) {
        uint64_t v9 = (uint64_t *)v3;
      }
      else {
        uint64_t v9 = (uint64_t *)(v3 + 8);
      }
      if (v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = *v9;
    }

    while (*v9);
  }

  return result;
}

void sub_100325388(uint64_t a1, __int16 a2, uint64_t a3, char a4, __int16 a5)
{
  uint64_t v10 = sub_100405218();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100325414;
  v11[3] = &unk_100889658;
  __int16 v12 = a2;
  void v11[4] = a1;
  v11[5] = a3;
  char v14 = a4;
  __int16 v13 = a5;
  sub_100405384(v10, v11);
}

double sub_100325414(uint64_t a1, uint8x8_t a2)
{
  return sub_10032542C( *(void *)(a1 + 32),  *(unsigned __int16 *)(a1 + 48),  *(uint64_t **)(a1 + 40),  *(_BYTE *)(a1 + 52),  *(_WORD *)(a1 + 50),  a2);
}

double sub_10032542C(uint64_t a1, unsigned int a2, uint64_t *a3, char a4, __int16 a5, uint8x8_t a6)
{
  __int16 v9 = a2;
  unsigned __int16 v41 = a2;
  id v11 = (uint64_t **)(a1 + 656);
  uint64_t v12 = *(void *)(a1 + 664);
  if (!v12) {
    goto LABEL_12;
  }
  uint64_t v13 = a1 + 664;
  do
  {
    unsigned int v14 = *(unsigned __int16 *)(v12 + 32);
    BOOL v15 = v14 >= a2;
    if (v14 >= a2) {
      char v16 = (uint64_t *)v12;
    }
    else {
      char v16 = (uint64_t *)(v12 + 8);
    }
    if (v15) {
      uint64_t v13 = v12;
    }
    uint64_t v12 = *v16;
  }

  while (*v16);
  if (v13 != a1 + 664 && *(unsigned __int16 *)(v13 + 32) <= a2)
  {
    int16x8_t v27 = *(int16x8_t *)(v13 + 80);
    __int128 v44 = *(_OWORD *)(v13 + 64);
    v45[0] = v27;
    *(int16x8_t *)((char *)v45 + 9) = *(int16x8_t *)(v13 + 89);
    char v40 = *(_BYTE *)(v13 + 195);
    __int128 v43 = *(_OWORD *)(v13 + 264);
    v28.i32[1] = DWORD1(v43);
    __int16 v29 = *(_WORD *)(a1 + 573);
    char v30 = *(_BYTE *)(a1 + 576);
    char v31 = *(_BYTE *)(a1 + 544);
    int v32 = *(_DWORD *)(a1 + 548);
    BOOL v33 = v32 == 1;
    BOOL v34 = v32 == 2;
    BOOL v35 = v32 == 3;
    int v42 = &v41;
    v28.i32[0] = *(_DWORD *)(a1 + 528);
    int16x4_t v38 = (int16x4_t)vmovl_u8(v28).u64[0];
    char v36 = sub_100329EBC(v11, &v41, (uint64_t)&unk_1006C2518, &v42);
    v36[6] = 0LL;
    v36[7] = 0LL;
    _DWORD v36[5] = a3;
    int16x8_t v37 = v45[0];
    *((_OWORD *)v36 + 4) = v44;
    *((int16x8_t *)v36 + 5) = v37;
    *(int16x8_t *)((char *)v36 + 89) = *(int16x8_t *)((char *)v45 + 9);
    *((_BYTE *)v36 + 105) = a4;
    *((_WORD *)v36 + 53) = a5;
    *((_WORD *)v36 + 54) = v9;
    *(_OWORD *)((char *)v36 + 110) = 0u;
    *(_OWORD *)((char *)v36 + 126) = 0u;
    *(_OWORD *)((char *)v36 + 142) = 0u;
    *(_OWORD *)((char *)v36 + 15_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v36 + 21) = 0u;
    *((_WORD *)v36 + 92) = v29;
    *((_BYTE *)v36 + 186) = v30;
    *((_BYTE *)v36 + 187) = v31;
    *((_BYTE *)v36 + 18_Block_object_dispose(va, 8) = v33;
    *((_BYTE *)v36 + 189) = v34;
    *((_BYTE *)v36 + 190) = v35;
    *(int16x4_t *)v37.i8 = vzip1_s16(v38, (int16x4_t)vext_s8((int8x8_t)v38, (int8x8_t)vdup_lane_s16(v38, 2), 6uLL));
    *(_DWORD *)((char *)v36 + 191) = vmovn_s16(v37).u32[0];
    *((_BYTE *)v36 + 195) = v40;
    *((_OWORD *)v36 + 15) = 0u;
    *(_OWORD *)((char *)v36 + 22_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)((char *)v36 + 212) = 0u;
    *(_OWORD *)((char *)v36 + 196) = 0u;
    v36[32] = (uint64_t *)0x3E8FFFFFC18LL;
    double result = *(double *)&v43;
    *(_OWORD *)(v36 + 33) = v43;
  }

  else
  {
LABEL_12:
    __int16 v17 = *(_WORD *)(a1 + 573);
    char v18 = *(_BYTE *)(a1 + 576);
    char v19 = *(_BYTE *)(a1 + 544);
    int v20 = *(_DWORD *)(a1 + 548);
    BOOL v21 = v20 == 1;
    BOOL v22 = v20 == 2;
    BOOL v23 = v20 == 3;
    *(void *)&__int128 v44 = &v41;
    a6.i32[0] = *(_DWORD *)(a1 + 528);
    int16x4_t v39 = (int16x4_t)vmovl_u8(a6).u64[0];
    double v24 = sub_100329EBC(v11, &v41, (uint64_t)&unk_1006C2518, (_WORD **)&v44);
    void v24[5] = a3;
    *((_OWORD *)v24 + 3) = 0u;
    *((_OWORD *)v24 + 4) = 0u;
    *((_OWORD *)v24 + 5) = 0u;
    *(_OWORD *)((char *)v24 + 89) = 0u;
    *((_BYTE *)v24 + 105) = a4;
    *((_WORD *)v24 + 53) = a5;
    *((_WORD *)v24 + 54) = v9;
    *(_OWORD *)((char *)v24 + 110) = 0u;
    *(_OWORD *)((char *)v24 + 126) = 0u;
    *(_OWORD *)((char *)v24 + 142) = 0u;
    *(_OWORD *)((char *)v24 + 15_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v24 + 21) = 0u;
    *((_WORD *)v24 + 92) = v17;
    *((_BYTE *)v24 + 186) = v18;
    *((_BYTE *)v24 + 187) = v19;
    *((_BYTE *)v24 + 18_Block_object_dispose(va, 8) = v21;
    *((_BYTE *)v24 + 189) = v22;
    *((_BYTE *)v24 + 190) = v23;
    *(int16x4_t *)v25.i8 = vzip1_s16(v39, (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)vdup_lane_s16(v39, 2), 6uLL));
    *(_DWORD *)((char *)v24 + 191) = vmovn_s16(v25).u32[0];
    *((_OWORD *)v24 + 15) = 0u;
    *(_OWORD *)((char *)v24 + 227) = 0u;
    *(_OWORD *)((char *)v24 + 211) = 0u;
    *(_OWORD *)((char *)v24 + 195) = 0u;
    *(void *)&double result = 0x3E8FFFFFC18LL;
    v24[32] = (uint64_t *)0x3E8FFFFFC18LL;
    v24[33] = 0LL;
    v24[34] = 0LL;
  }

  return result;
}

void sub_1003256EC(uint64_t a1, __int16 a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12 = sub_100405218();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10032577C;
  void v13[3] = &unk_100890D60;
  v13[4] = a1;
  __int16 v18 = a2;
  int v14 = a3;
  int v15 = a4;
  int v16 = a5;
  int v17 = a6;
  sub_100405384(v12, v13);
}

double sub_10032577C(uint64_t a1)
{
  return sub_100325794( *(void *)(a1 + 32),  *(unsigned __int16 *)(a1 + 56),  *(_DWORD *)(a1 + 40),  *(_DWORD *)(a1 + 44),  *(_DWORD *)(a1 + 48),  *(_DWORD *)(a1 + 52));
}

double sub_100325794(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6)
{
  unsigned __int16 v34 = a2;
  id v11 = (uint64_t **)(a1 + 656);
  uint64_t v12 = *(void *)(a1 + 664);
  if (!v12) {
    goto LABEL_12;
  }
  uint64_t v13 = a1 + 664;
  uint64_t v14 = a1 + 664;
  do
  {
    unsigned int v15 = *(unsigned __int16 *)(v12 + 32);
    BOOL v16 = v15 >= a2;
    if (v15 >= a2) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (v16) {
      uint64_t v14 = v12;
    }
    uint64_t v12 = *v17;
  }

  while (*v17);
  if (v14 != v13 && *(unsigned __int16 *)(v14 + 32) <= a2)
  {
    __int128 v31 = *(_OWORD *)(v14 + 40);
    __int128 v32 = *(_OWORD *)(v14 + 56);
    BOOL v33 = *(uint64_t **)(v14 + 72);
    __int128 v20 = *(_OWORD *)(v14 + 240);
    __int128 v44 = *(_OWORD *)(v14 + 224);
    __int128 v45 = v20;
    __int128 v46 = *(_OWORD *)(v14 + 256);
    int v47 = *(uint64_t **)(v14 + 272);
    __int128 v21 = *(_OWORD *)(v14 + 176);
    __int128 v40 = *(_OWORD *)(v14 + 160);
    __int128 v41 = v21;
    __int128 v22 = *(_OWORD *)(v14 + 208);
    __int128 v42 = *(_OWORD *)(v14 + 192);
    __int128 v43 = v22;
    __int128 v23 = *(_OWORD *)(v14 + 112);
    __int128 v36 = *(_OWORD *)(v14 + 96);
    __int128 v37 = v23;
    __int128 v24 = *(_OWORD *)(v14 + 144);
    __int128 v38 = *(_OWORD *)(v14 + 128);
    __int128 v39 = v24;
    BOOL v35 = &v34;
    int16x8_t v25 = sub_100329EBC(v11, &v34, (uint64_t)&unk_1006C2518, &v35);
    *(_OWORD *)(v25 + 5) = v31;
    *(_OWORD *)(v25 + 7) = v32;
    v25[9] = v33;
    *((_DWORD *)v25 + 20) = a3;
    *((_DWORD *)v25 + 21) = a4;
    *((_DWORD *)v25 + 22) = a5;
    *((_DWORD *)v25 + 23) = a6;
    __int128 v26 = v45;
    *((_OWORD *)v25 + 14) = v44;
    *((_OWORD *)v25 + 15) = v26;
    *((_OWORD *)v25 + 16) = v46;
    v25[34] = v47;
    __int128 v27 = v41;
    *((_OWORD *)v25 + 10) = v40;
    *((_OWORD *)v25 + 11) = v27;
    __int128 v28 = v43;
    *((_OWORD *)v25 + 12) = v42;
    *((_OWORD *)v25 + 13) = v28;
    __int128 v29 = v37;
    *((_OWORD *)v25 + 6) = v36;
    *((_OWORD *)v25 + 7) = v29;
    double result = *(double *)&v38;
    __int128 v30 = v39;
    *((_OWORD *)v25 + _Block_object_dispose(va, 8) = v38;
    *((_OWORD *)v25 + 9) = v30;
  }

  else
  {
LABEL_12:
    *(void *)&__int128 v36 = &v34;
    __int16 v18 = sub_100329EBC(v11, &v34, (uint64_t)&unk_1006C2518, (_WORD **)&v36);
    v18[9] = 0LL;
    double result = 0.0;
    *(_OWORD *)(v18 + 7) = 0u;
    *(_OWORD *)(v18 + 5) = 0u;
    *((_DWORD *)v18 + 20) = a3;
    *((_DWORD *)v18 + 21) = a4;
    *((_DWORD *)v18 + 22) = a5;
    *((_DWORD *)v18 + 23) = a6;
    *((_OWORD *)v18 + 6) = 0u;
    *((_OWORD *)v18 + 7) = 0u;
    *((_OWORD *)v18 + _Block_object_dispose(va, 8) = 0u;
    *((_OWORD *)v18 + 9) = 0u;
    *((_OWORD *)v18 + 10) = 0u;
    *((_OWORD *)v18 + 11) = 0u;
    *((_OWORD *)v18 + 12) = 0u;
    *((_OWORD *)v18 + 13) = 0u;
    *((_OWORD *)v18 + 14) = 0u;
    *((_OWORD *)v18 + 15) = 0u;
    *((_OWORD *)v18 + 16) = 0u;
    v18[34] = 0LL;
  }

  return result;
}

void sub_100325964(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v6 = sub_100405218();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1003259D8;
  v7[3] = &unk_10087FF20;
  v7[4] = a1;
  void v7[5] = a2;
  __int16 v8 = a3;
  sub_100405384(v6, v7);
}

double sub_1003259D8(uint64_t a1)
{
  return sub_1003259EC(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 48), 0);
}

double sub_1003259EC(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  unsigned int v5 = a3;
  unsigned __int16 v58 = a3;
  if (a3)
  {
LABEL_2:
    uint64_t v6 = (uint64_t **)(a1 + 656);
    unsigned int v7 = (uint64_t *)(a1 + 664);
    uint64_t v8 = *(void *)(a1 + 664);
    if (!v8) {
      goto LABEL_13;
    }
    uint64_t v9 = a1 + 664;
    do
    {
      unsigned int v10 = *(unsigned __int16 *)(v8 + 32);
      BOOL v11 = v10 >= v5;
      if (v10 >= v5) {
        uint64_t v12 = (uint64_t *)v8;
      }
      else {
        uint64_t v12 = (uint64_t *)(v8 + 8);
      }
      if (v11) {
        uint64_t v9 = v8;
      }
      uint64_t v8 = *v12;
    }

    while (*v12);
    if ((uint64_t *)v9 != v7 && v5 >= *(unsigned __int16 *)(v9 + 32))
    {
      __int128 v33 = *(_OWORD *)(v9 + 232);
      *(_OWORD *)&v64[32] = *(_OWORD *)(v9 + 216);
      *(_OWORD *)&v64[48] = v33;
      *(_OWORD *)&v64[64] = *(_OWORD *)(v9 + 248);
      *(_OWORD *)&v63[48] = *(_OWORD *)(v9 + 152);
      __int128 v34 = *(_OWORD *)(v9 + 184);
      *(_OWORD *)&v63[64] = *(_OWORD *)(v9 + 168);
      *(_OWORD *)char v64 = v34;
      *(_OWORD *)&v64[16] = *(_OWORD *)(v9 + 200);
      __int128 v35 = *(_OWORD *)(v9 + 104);
      __int128 v62 = *(_OWORD *)(v9 + 88);
      *(_OWORD *)char v63 = v35;
      __int128 v36 = *(_OWORD *)(v9 + 136);
      *(_OWORD *)&v63[16] = *(_OWORD *)(v9 + 120);
      *(_OWORD *)&v63[32] = v36;
      __int128 v37 = *(_OWORD *)(v9 + 56);
      *(_OWORD *)__int128 buf = *(_OWORD *)(v9 + 40);
      *(_OWORD *)&uint8_t buf[16] = v37;
      __int128 v61 = *(_OWORD *)(v9 + 72);
      __int128 v65 = *(_OWORD *)(v9 + 264);
      *(void *)&uint8_t buf[8] = 0LL;
      *(void *)&uint8_t buf[16] = 0LL;
      memset(&v63[6], 0, 74);
      if ((a4 & 1) != 0)
      {
        *(void *)&__int128 v65 = *(void *)v64;
        BYTE8(v65) = v64[8];
        *(_WORD *)((char *)&v65 + 9) = *(_WORD *)&v64[9];
      }

      else
      {
        memset(&v64[12], 0, 60);
        *(void *)&v64[72] = 0x3E8FFFFFC18LL;
      }

      int v59 = &v58;
      __int128 v46 = sub_100329EBC(v6, &v58, (uint64_t)&unk_1006C2518, &v59);
      __int128 v48 = *(_OWORD *)&v63[16];
      __int128 v47 = *(_OWORD *)&v63[32];
      __int128 v49 = *(_OWORD *)v63;
      __int128 v50 = v61;
      *(_OWORD *)(v46 + 11) = v62;
      __int128 v52 = *(_OWORD *)v64;
      __int128 v51 = *(_OWORD *)&v64[16];
      __int128 v53 = *(_OWORD *)&v63[64];
      *(_OWORD *)(v46 + 19) = *(_OWORD *)&v63[48];
      __int128 v55 = *(_OWORD *)&v64[64];
      __int128 v54 = v65;
      __int128 v56 = *(_OWORD *)&v64[48];
      *(_OWORD *)(v46 + 27) = *(_OWORD *)&v64[32];
      *(_OWORD *)(v46 + 29) = v56;
      *(_OWORD *)(v46 + 31) = v55;
      *(_OWORD *)(v46 + 33) = v54;
      *(_OWORD *)(v46 + 21) = v53;
      *(_OWORD *)(v46 + 23) = v52;
      *(_OWORD *)(v46 + 25) = v51;
      *(_OWORD *)(v46 + 13) = v49;
      *(_OWORD *)(v46 + 15) = v48;
      *(_OWORD *)(v46 + 17) = v47;
      double result = *(double *)buf;
      __int128 v57 = *(_OWORD *)&buf[16];
      *(_OWORD *)(v46 + 5) = *(_OWORD *)buf;
      *(_OWORD *)(v46 + 7) = v57;
      *(_OWORD *)(v46 + 9) = v50;
    }

    else
    {
LABEL_13:
      uint64_t v13 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 136315650;
        *(void *)&uint8_t buf[4] = "sendAccumulatedHIDLatencyStatsData";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v5;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s -- Did not find stored HID Latency Statistics data for LM Handle %d (0x%04x)",  buf,  0x18u);
      }

      uint64_t v14 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 136315138;
        *(void *)&uint8_t buf[4] = "sendAccumulatedHIDLatencyStatsData";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s -- LM handle in the list: ", buf, 0xCu);
      }

      BOOL v16 = *v6;
      if (*v6 != v7)
      {
        do
        {
          int v17 = (os_log_s *)qword_1008F7578;
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
          {
            int v18 = *((unsigned __int16 *)v16 + 16);
            *(_DWORD *)__int128 buf = 136315394;
            *(void *)&uint8_t buf[4] = "sendAccumulatedHIDLatencyStatsData";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%s -- LM Handle 0x%02x", buf, 0x12u);
          }

          char v19 = (uint64_t *)v16[1];
          if (v19)
          {
            do
            {
              __int128 v20 = v19;
              char v19 = (uint64_t *)*v19;
            }

            while (v19);
          }

          else
          {
            do
            {
              __int128 v20 = (uint64_t *)v16[2];
              BOOL v21 = *v20 == (void)v16;
              BOOL v16 = v20;
            }

            while (!v21);
          }

          BOOL v16 = v20;
        }

        while (v20 != v7);
      }
    }

    return result;
  }

  if (a2)
  {
    __int128 v22 = *(void **)(a1 + 656);
    if (v22 != (void *)(a1 + 664))
    {
      while (v22[5] != a2)
      {
        __int128 v23 = (void *)v22[1];
        if (v23)
        {
          do
          {
            __int128 v24 = v23;
            __int128 v23 = (void *)*v23;
          }

          while (v23);
        }

        else
        {
          do
          {
            __int128 v24 = (void *)v22[2];
            BOOL v21 = *v24 == (void)v22;
            __int128 v22 = v24;
          }

          while (!v21);
        }

        __int128 v22 = v24;
        if (v24 == (void *)(a1 + 664)) {
          goto LABEL_44;
        }
      }

      unsigned __int16 v58 = *((_WORD *)v22 + 16);
      unsigned int v5 = v58;
      if (v58) {
        goto LABEL_2;
      }
    }
  }

  else
  {
    int16x8_t v25 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066BE28(v25, v26, v27, v28, v29, v30, v31, v32);
    }
  }

void sub_100325E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 65);
  if ((v6 - 1) > 1u)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066BE98();
    }
  }

  else
  {
    if ((_DWORD)a3 == 2)
    {
      memset(v26, 0, 250);
      bzero(v26, 0xFAuLL);
      sub_10032524C(*(unsigned __int8 *)(a2 + 29), &__p);
      if ((v23 & 0x8000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      sub_1001EE0BC( (uint64_t)v26,  250,  (uint64_t)"HID Latency Statistics events indicated HID lag issue is detected with %s latency for connection handle 0x%04x, vid = %d (0x%04x), pid = %d (0x%04x)",  v7,  v8,  v9,  v10,  v11,  (uint64_t)p_p);
      if (SBYTE1(v23) < 0) {
        operator delete(__p);
      }
      sub_1000B9914((const char *)v26);
      uint64_t v13 = (os_log_s *)qword_1008F7578;
      BOOL v5 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
      if (v5)
      {
        int v14 = *(unsigned __int16 *)(a2 + 68);
        int v15 = *(_DWORD *)(a2 + 44);
        int v16 = *(_DWORD *)(a2 + 48);
        LODWORD(__p) = 67110144;
        HIDWORD(__p) = v14;
        __int16 v18 = 1024;
        int v19 = v15;
        __int16 v20 = 1024;
        int v21 = v15;
        __int16 v22 = 1024;
        int v23 = v16;
        __int16 v24 = 1024;
        int v25 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "HID Latency Statistics events indicated HID lag issue is detected on connection handle 0x%04x, vid = %d (0x%04 x), pid = %d (0x%04x)",  (uint8_t *)&__p,  0x20u);
      }

      uint64_t v6 = *(unsigned __int8 *)(a2 + 65);
      if ((_DWORD)v6 == 1) {
        *(_BYTE *)(a2 + 2_Block_object_dispose(va, 8) = llround(sub_100325278(v5, *(unsigned __int8 *)(a2 + 29)));
      }
    }

    sub_100326934(v5, a3, 0, v6, a2);
  }

void sub_100326044( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100326068(uint64_t a1, unsigned __int16 *a2)
{
  if (a2)
  {
    unsigned int v2 = *a2;
    uint64_t v3 = *(void *)(a1 + 664);
    if (!v3) {
      goto LABEL_22;
    }
    uint64_t v4 = a1 + 664;
    do
    {
      unsigned int v5 = *(unsigned __int16 *)(v3 + 32);
      BOOL v6 = v5 >= v2;
      if (v5 >= v2) {
        uint64_t v7 = (uint64_t *)v3;
      }
      else {
        uint64_t v7 = (uint64_t *)(v3 + 8);
      }
      if (v6) {
        uint64_t v4 = v3;
      }
      uint64_t v3 = *v7;
    }

    while (*v7);
    if (v4 != a1 + 664 && v2 >= *(unsigned __int16 *)(v4 + 32))
    {
      uint64_t v16 = 0LL;
      __int128 v17 = *(_OWORD *)(v4 + 104);
      __int128 v18 = *(_OWORD *)(v4 + 88);
      __int128 v19 = *(_OWORD *)(v4 + 120);
      __int128 v20 = *(_OWORD *)(v4 + 232);
      __int128 v32 = *(_OWORD *)(v4 + 216);
      __int128 v33 = v20;
      __int128 v34 = *(_OWORD *)(v4 + 248);
      __int128 v21 = *(_OWORD *)(v4 + 168);
      __int128 v28 = *(_OWORD *)(v4 + 152);
      __int128 v29 = v21;
      __int128 v22 = *(_OWORD *)(v4 + 200);
      __int128 v30 = *(_OWORD *)(v4 + 184);
      __int128 v31 = v22;
      void v25[3] = v18;
      *(_OWORD *)uint64_t v26 = v17;
      __int128 v23 = *(_OWORD *)(v4 + 136);
      *(_OWORD *)&_OWORD v26[16] = v19;
      __int128 v27 = v23;
      __int128 v24 = *(_OWORD *)(v4 + 56);
      v25[0] = *(_OWORD *)(v4 + 40);
      v25[1] = v24;
      v25[2] = *(_OWORD *)(v4 + 72);
      __int128 v35 = *(_OWORD *)(v4 + 264);
      *(_WORD *)&void v26[6] = a2[1];
      *(_DWORD *)&v26[8] = *((unsigned __int8 *)a2 + 4);
      *(uint32x4_t *)&v26[12] = vmovl_u16(*(uint16x4_t *)((char *)a2 + 5));
      do
      {
        *(_DWORD *)&v26[4 * v16 + 28] = *(unsigned __int16 *)((char *)&a2[v16 + 6] + 1);
        ++v16;
      }

      while (v16 != 13);
      sub_100325E48(a1, (uint64_t)v25, 2LL);
    }

    else
    {
LABEL_22:
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_10066BF8C();
      }
    }
  }

  else
  {
    uint64_t v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066BF1C(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }

void sub_1003261DC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = malloc(0x30uLL);
    if (v4)
    {
      unsigned int v5 = v4;
      v4[1] = 0u;
      _DWORD v4[2] = 0u;
      _OWORD *v4 = 0u;
      if ((*(_DWORD *)(sub_1002E6E9C() + 708) - 1) >= 0x7CF)
      {
        __int128 v23 = *(_OWORD *)(a2 + 16);
        *unsigned int v5 = *(_OWORD *)a2;
        v5[1] = v23;
        _DWORD v5[2] = *(_OWORD *)(a2 + 32);
      }

      else
      {
        __int128 v6 = *(_OWORD *)(a2 + 16);
        *unsigned int v5 = *(_OWORD *)a2;
        v5[1] = v6;
        *(void *)((char *)v5 + 31) = *(void *)(a2 + 31);
      }

      uint64_t v24 = sub_100405218();
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472LL;
      v25[2] = sub_1003262F0;
      void v25[3] = &unk_10087F8E0;
      _OWORD v25[4] = a1;
      void v25[5] = v5;
      sub_100405384(v24, v25);
    }

    else
    {
      uint64_t v15 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_10066C06C(v15, v16, v17, v18, v19, v20, v21, v22);
      }
    }
  }

  else
  {
    uint64_t v7 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066BFFC(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }

void sub_1003262F0(uint64_t a1)
{
}

void sub_1003262FC(uint64_t a1, unsigned __int16 *a2)
{
  if (a2)
  {
    uint64_t v4 = 0LL;
    unsigned __int8 v5 = 0;
    unsigned int v6 = *a2;
    do
    {
      else {
        BOOL v7 = 1;
      }
      if (!v7) {
        unsigned __int8 v5 = v4;
      }
      ++v4;
    }

    while (v4 != 13);
    unsigned int v8 = *(unsigned __int8 *)(a1 + 680);
    BOOL v9 = sub_1003263F8(a1, a2);
    BOOL v10 = v8 > v5 && !v9;
    if (v10 || (sub_1003259EC(a1, 0LL, v6, v5 >= v8), v5 < v8)) {
      sub_10032649C(a1, a2);
    }
    else {
      sub_100326068(a1, a2);
    }
    free(a2);
  }

  else
  {
    uint64_t v11 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066C0DC(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }

BOOL sub_1003263F8(uint64_t a1, unsigned __int16 *a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a1 + 664);
    if (!v2) {
      return 0LL;
    }
    unsigned int v3 = *a2;
    uint64_t v4 = a1 + 664;
    do
    {
      unsigned int v5 = *(unsigned __int16 *)(v2 + 32);
      BOOL v6 = v5 >= v3;
      if (v5 >= v3) {
        BOOL v7 = (uint64_t *)v2;
      }
      else {
        BOOL v7 = (uint64_t *)(v2 + 8);
      }
      if (v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }

    while (*v7);
    return *(_DWORD *)(v4 + 112) + *((unsigned __int8 *)a2 + 4) > 0x708;
  }

  else
  {
    BOOL v9 = (os_log_s *)qword_1008F7578;
    BOOL result = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_10066C14C(v9, v10, v11, v12, v13, v14, v15, v16);
      return 0LL;
    }
  }

  return result;
}

double sub_10032649C(uint64_t a1, unsigned __int16 *a2)
{
  if (a2)
  {
    unsigned int v4 = *a2;
    unsigned __int16 v58 = *a2;
    uint64_t v5 = *(void *)(a1 + 664);
    if (!v5) {
      goto LABEL_24;
    }
    uint64_t v6 = a1 + 664;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v5 + 32);
      BOOL v8 = v7 >= v4;
      if (v7 >= v4) {
        BOOL v9 = (uint64_t *)v5;
      }
      else {
        BOOL v9 = (uint64_t *)(v5 + 8);
      }
      if (v8) {
        uint64_t v6 = v5;
      }
      uint64_t v5 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 664 && v4 >= *(unsigned __int16 *)(v6 + 32))
    {
      uint64_t v19 = 0LL;
      __int128 v20 = *(_OWORD *)(v6 + 104);
      __int128 v21 = *(_OWORD *)(v6 + 232);
      __int128 v54 = *(_OWORD *)(v6 + 216);
      __int128 v55 = v21;
      __int128 v56 = *(_OWORD *)(v6 + 248);
      __int128 v22 = *(_OWORD *)(v6 + 168);
      __int128 v50 = *(_OWORD *)(v6 + 152);
      __int128 v51 = v22;
      __int128 v23 = *(_OWORD *)(v6 + 200);
      __int128 v52 = *(_OWORD *)(v6 + 184);
      __int128 v53 = v23;
      __int128 v47 = *(_OWORD *)(v6 + 88);
      *(_OWORD *)__int128 v48 = v20;
      __int128 v24 = *(_OWORD *)(v6 + 136);
      *(_OWORD *)&v48[16] = *(_OWORD *)(v6 + 120);
      __int128 v49 = v24;
      __int128 v25 = *(_OWORD *)(v6 + 56);
      __int128 v44 = *(_OWORD *)(v6 + 40);
      __int128 v45 = v25;
      __int128 v46 = *(_OWORD *)(v6 + 72);
      __int128 v57 = *(_OWORD *)(v6 + 264);
      *(_WORD *)&v48[4] = v4;
      *(_WORD *)&v48[6] = a2[1];
      *(_DWORD *)&v48[8] = DWORD2(v20) + *((unsigned __int8 *)a2 + 4);
      *(uint32x4_t *)&v48[12] = vaddw_u16(*(uint32x4_t *)&v48[12], *(uint16x4_t *)((char *)a2 + 5));
      do
      {
        *(_DWORD *)&v48[4 * v19 + 28] += *(unsigned __int16 *)((char *)&a2[v19 + 6] + 1);
        ++v19;
      }

      while (v19 != 13);
      uint64_t v26 = sub_1002E6E9C();
      if ((*(_DWORD *)(v26 + 708) - 1) >= 0x7CF)
      {
        int v28 = *((char *)a2 + 39);
        LODWORD(v45) = v45 + 1;
        DWORD1(v45) += v28;
        sub_100326768(v26, &v44, v28);
        HIDWORD(v52) = v28;
        int v29 = HIDWORD(v44) + a2[23];
        DWORD2(v44) += a2[22];
        HIDWORD(v44) = v29;
      }

      LOWORD(v52) = *(_WORD *)(a1 + 573);
      BYTE2(v52) = *(_BYTE *)(a1 + 576);
      BYTE3(v52) = *(_BYTE *)(a1 + 544);
      int v30 = *(_DWORD *)(a1 + 548);
      BYTE4(v52) = v30 == 1;
      BYTE5(v52) = v30 == 2;
      BYTE6(v52) = v30 == 3;
      v27.i32[0] = *(_DWORD *)(a1 + 528);
      int16x8_t v31 = (int16x8_t)vmovl_u8(v27);
      *(int16x4_t *)v31.i8 = vzip1_s16( *(int16x4_t *)v31.i8,  (int16x4_t)vext_s8( *(int8x8_t *)v31.i8,  (int8x8_t)vdup_lane_s16(*(int16x4_t *)v31.i8, 2),  6uLL));
      *(_DWORD *)((char *)&v52 + 7) = vmovn_s16(v31).u32[0];
      int v59 = &v58;
      __int128 v32 = sub_100329EBC((uint64_t **)(a1 + 656), &v58, (uint64_t)&unk_1006C2518, &v59);
      __int128 v34 = *(_OWORD *)&v48[16];
      __int128 v33 = v49;
      __int128 v35 = *(_OWORD *)v48;
      __int128 v36 = v46;
      *(_OWORD *)(v32 + 11) = v47;
      __int128 v38 = v52;
      __int128 v37 = v53;
      __int128 v39 = v51;
      *(_OWORD *)(v32 + 19) = v50;
      __int128 v41 = v56;
      __int128 v40 = v57;
      __int128 v42 = v55;
      *(_OWORD *)(v32 + 27) = v54;
      *(_OWORD *)(v32 + 29) = v42;
      *(_OWORD *)(v32 + 31) = v41;
      *(_OWORD *)(v32 + 33) = v40;
      *(_OWORD *)(v32 + 21) = v39;
      *(_OWORD *)(v32 + 23) = v38;
      *(_OWORD *)(v32 + 25) = v37;
      *(_OWORD *)(v32 + 13) = v35;
      *(_OWORD *)(v32 + 15) = v34;
      *(_OWORD *)(v32 + 17) = v33;
      double result = *(double *)&v44;
      __int128 v43 = v45;
      *(_OWORD *)(v32 + 5) = v44;
      *(_OWORD *)(v32 + 7) = v43;
      *(_OWORD *)(v32 + 9) = v36;
    }

    else
    {
LABEL_24:
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_10066C22C();
      }
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066C1BC(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }

  return result;
}

void sub_100326768(uint64_t a1, _DWORD *a2, int a3)
{
  if (a2)
  {
    if (a2[54] < a3) {
      a2[54] = a3;
    }
    if (a2[55] > a3) {
      a2[55] = a3;
    }
    int v3 = a2[39];
    if (v3)
    {
      if (v3 >= a3)
      {
        __int16 v5 = v3 - a3;
        if ((unsigned __int16)(v5 - 3) > 2u)
        {
          if ((v5 - 6) > 4)
          {
            if ((v5 - 11) > 4)
            {
              if ((v5 - 16) > 4)
              {
                if ((v5 - 21) > 4)
                {
                  if ((v5 - 26) > 4)
                  {
                    if (v5 >= 31) {
                      ++a2[53];
                    }
                  }

                  else
                  {
                    ++a2[52];
                  }
                }

                else
                {
                  ++a2[51];
                }
              }

              else
              {
                ++a2[50];
              }
            }

            else
            {
              ++a2[49];
            }
          }

          else
          {
            ++a2[48];
          }
        }

        else
        {
          ++a2[47];
        }
      }

      else
      {
        __int16 v4 = a3 - v3;
        if ((unsigned __int16)(v4 - 3) > 2u)
        {
          if ((v4 - 6) > 4)
          {
            if ((v4 - 11) > 4)
            {
              if ((v4 - 16) > 4)
              {
                if ((v4 - 21) > 4)
                {
                  if ((v4 - 26) > 4)
                  {
                    if (v4 >= 31) {
                      ++a2[46];
                    }
                  }

                  else
                  {
                    ++a2[45];
                  }
                }

                else
                {
                  ++a2[44];
                }
              }

              else
              {
                ++a2[43];
              }
            }

            else
            {
              ++a2[42];
            }
          }

          else
          {
            ++a2[41];
          }
        }

        else
        {
          ++a2[40];
        }
      }
    }
  }

void sub_100326934(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    *(_OWORD *)&void v38[3] = 0u;
    *(_OWORD *)__int128 v38 = 0u;
    __int128 v37 = 0u;
    __int128 v36 = 0u;
    int32x2_t v34 = vrev64_s32(*(int32x2_t *)(a5 + 44));
    *((void *)&v37 + 1) = *(void *)(a5 + 72);
    *(_OWORD *)&v38[7] = *(_OWORD *)(a5 + 92);
    *(_OWORD *)&v38[11] = *(_OWORD *)(a5 + 108);
    *(_OWORD *)&v38[15] = *(_OWORD *)(a5 + 124);
    __int128 v8 = *(_OWORD *)(a5 + 176);
    __int128 v39 = *(_OWORD *)(a5 + 160);
    __int128 v40 = v8;
    __int128 v9 = *(_OWORD *)(a5 + 208);
    __int128 v41 = *(_OWORD *)(a5 + 192);
    int v10 = *(_DWORD *)(a5 + 52);
    char v11 = *(_BYTE *)(a5 + 56);
    unsigned int v12 = *(_DWORD *)(a5 + 32);
    unsigned int v13 = *(_DWORD *)(a5 + 60);
    int v14 = *(char *)(a5 + 64);
    __int16 v15 = *(_WORD *)(a5 + 70);
    char v16 = *(_BYTE *)(a5 + 24);
    char v17 = *(_BYTE *)(a5 + 25);
    int v19 = *(_DWORD *)(a5 + 80);
    int v18 = *(_DWORD *)(a5 + 84);
    char v20 = *(_BYTE *)(a5 + 26);
    int v21 = *(_DWORD *)(a5 + 88);
    __int16 v22 = *(_WORD *)(a5 + 27);
    char v23 = *(_BYTE *)(a5 + 29);
    int v24 = *(_DWORD *)(a5 + 140);
    int v35 = v10;
    LOBYTE(v36) = v11;
    *(void *)((char *)&v36 + 4) = __PAIR64__(v13, v12);
    HIDWORD(v36) = v14;
    LODWORD(v37) = a3;
    WORD2(v37) = v15;
    LOBYTE(v38[0]) = v16;
    v38[1] = v19;
    LOBYTE(v38[2]) = v17;
    void v38[3] = v18;
    LOBYTE(v38[4]) = v20;
    void v38[5] = v21;
    LOWORD(v38[6]) = v22;
    BYTE2(v38[6]) = v23;
    v38[19] = v24;
    __int128 v42 = v9;
    if (sub_1002E8D94())
    {
      uint64_t v25 = sub_1002E8D94();
      (*(void (**)(uint64_t, int32x2_t *, uint64_t, uint64_t, void))(*(void *)v25 + 488LL))( v25,  &v34,  a2,  a4,  *(unsigned __int16 *)(a5 + 68));
    }
  }

  else
  {
    uint64_t v26 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066C29C(v26, v27, v28, v29, v30, v31, v32, v33);
    }
  }

void sub_100326A8C(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6 = 0LL;
  int v7 = 0;
  unsigned int v8 = 0;
  uint64_t v9 = a2 + 92;
  double v10 = 0.0;
  do
  {
    unsigned int v11 = *(_DWORD *)(v9 + 4 * v6);
    if (v11)
    {
      if (a3 == 2 && v6 == 10)
      {
        unsigned __int8 v12 = 10;
      }

      else
      {
        *(_BYTE *)(a2 + 29) = v6;
        unsigned __int8 v12 = v6;
      }

      double v10 = v10 + (double)v11 * sub_100325278(a1, v12);
      v8 += v11;
      else {
        unsigned int v13 = 0;
      }
      v7 += v13;
    }

    ++v6;
  }

  while (v6 != 13);
  double v14 = v10 / (double)v8;
  *(_BYTE *)(a2 + 2_Block_object_dispose(va, 8) = llround(v14);
  *(_DWORD *)(a2 + sub_100242FAC(v1 - 32) = v7;
  *(_DWORD *)(a2 + 36) = v8;
  LOWORD(v14) = *(_WORD *)(a2 + 66);
  HIDWORD(v15) = 1083129856;
  LODWORD(v15) = *(_DWORD *)(a2 + 72);
  double v16 = 1000.0 / ((double)*(unint64_t *)&v14 * 0.625) * (double)v15;
  unsigned int v17 = *(_DWORD *)(a2 + 76);
  if (v17) {
    char v18 = llround((double)v17 / v16 * 100.0);
  }
  else {
    char v18 = 0;
  }
  *(_BYTE *)(a2 + 24) = v18;
  unsigned int v19 = *(_DWORD *)(a2 + 80);
  if (v19) {
    LOBYTE(v19) = llround((double)v19 / v16 * 100.0);
  }
  *(_BYTE *)(a2 + 25) = v19;
  unsigned int v20 = *(_DWORD *)(a2 + 88);
  if (v20) {
    LOBYTE(v20) = llround((double)v20 / v16 * 100.0);
  }
  *(_BYTE *)(a2 + 27) = v20;
  unsigned int v21 = *(_DWORD *)(a2 + 84);
  if (v21)
  {
    if (v21 <= v17) {
      char v22 = llround((double)(v21 / v17) * 100.0);
    }
    else {
      char v22 = -1;
    }
  }

  else
  {
    char v22 = 0;
  }

  *(_BYTE *)(a2 + 26) = v22;
  int v23 = *(_DWORD *)(a2 + 16);
  if (v23)
  {
    int v24 = *(_DWORD *)(a2 + 20) / v23;
    *(_DWORD *)(a2 + 60) = v24;
    if (v24) {
      *(_BYTE *)(a2 + 56) = 1;
    }
  }

  else
  {
    *(_DWORD *)(a2 + 60) = 0;
  }

  char v25 = 0;
  unsigned int v26 = *(_DWORD *)(a2 + 12);
  if (v26)
  {
    int v27 = v26 + *(_DWORD *)(a2 + 8);
    if (v27) {
      char v25 = llround((double)v26 * 100.0 / (double)v27);
    }
  }

  *(_BYTE *)(a2 + 64) = v25;
}

void sub_100326C88(uint64_t a1, _OWORD *a2)
{
  if ((*(_DWORD *)(sub_1002E6E9C() + 708) - 1) <= 0x7CE)
  {
    if (a2)
    {
      __int16 v4 = malloc(0xCEuLL);
      if (v4)
      {
        __int16 v5 = v4;
        __int128 v6 = a2[11];
        v4[10] = a2[10];
        v4[11] = v6;
        *(_OWORD *)((char *)v4 + 190) = *(_OWORD *)((char *)a2 + 190);
        __int128 v7 = a2[7];
        void v4[6] = a2[6];
        v4[7] = v7;
        __int128 v8 = a2[9];
        v4[8] = a2[8];
        v4[9] = v8;
        __int128 v9 = a2[3];
        _DWORD v4[2] = a2[2];
        v4[3] = v9;
        __int128 v10 = a2[5];
        void v4[4] = a2[4];
        void v4[5] = v10;
        __int128 v11 = a2[1];
        _OWORD *v4 = *a2;
        v4[1] = v11;
        uint64_t v12 = sub_100405218();
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472LL;
        _OWORD v29[2] = sub_100326DA8;
        void v29[3] = &unk_10087F8E0;
        v29[4] = a1;
        v29[5] = v5;
        sub_100405384(v12, v29);
      }

      else
      {
        unsigned int v21 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
          sub_10066C37C(v21, v22, v23, v24, v25, v26, v27, v28);
        }
      }
    }

    else
    {
      unsigned int v13 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_10066C30C(v13, v14, v15, v16, v17, v18, v19, v20);
      }
    }
  }

void sub_100326DA8(uint64_t a1)
{
}

void sub_100326DB4(uint64_t a1, unsigned __int16 *a2)
{
  if (a2)
  {
    unsigned int v4 = a2[102];
    unsigned int v5 = a2[101];
    if (v4)
    {
      signed __int16 v6 = a2[9];
      sub_100326E80(a1, v4, v6, *(unsigned __int16 *)((char *)a2 + 25), *(unsigned __int16 *)((char *)a2 + 27));
    }

    if (v5)
    {
      signed __int16 v7 = a2[8];
      sub_100326E80(a1, v5, v7, a2[17], a2[18]);
    }

    free(a2);
  }

  else
  {
    __int128 v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066C3EC(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }

double sub_100326E80(uint64_t a1, unsigned int a2, int a3, int a4, int a5)
{
  unsigned __int16 v47 = a2;
  uint64_t v5 = *(void *)(a1 + 664);
  if (!v5) {
    goto LABEL_19;
  }
  signed __int16 v7 = (uint64_t **)(a1 + 656);
  uint64_t v8 = a1 + 664;
  do
  {
    unsigned int v9 = *(unsigned __int16 *)(v5 + 32);
    BOOL v10 = v9 >= a2;
    if (v9 >= a2) {
      uint64_t v11 = (uint64_t *)v5;
    }
    else {
      uint64_t v11 = (uint64_t *)(v5 + 8);
    }
    if (v10) {
      uint64_t v8 = v5;
    }
    uint64_t v5 = *v11;
  }

  while (*v11);
  if (v8 != a1 + 664 && *(unsigned __int16 *)(v8 + 32) <= a2)
  {
    __int128 v13 = *(_OWORD *)(v8 + 232);
    __int128 v43 = *(_OWORD *)(v8 + 216);
    __int128 v44 = v13;
    __int128 v45 = *(_OWORD *)(v8 + 248);
    __int128 v14 = *(_OWORD *)(v8 + 168);
    __int128 v39 = *(_OWORD *)(v8 + 152);
    __int128 v40 = v14;
    __int128 v15 = *(_OWORD *)(v8 + 200);
    __int128 v41 = *(_OWORD *)(v8 + 184);
    __int128 v42 = v15;
    __int128 v16 = *(_OWORD *)(v8 + 104);
    __int128 v35 = *(_OWORD *)(v8 + 88);
    __int128 v36 = v16;
    __int128 v17 = *(_OWORD *)(v8 + 136);
    __int128 v37 = *(_OWORD *)(v8 + 120);
    __int128 v38 = v17;
    __int128 v18 = *(_OWORD *)(v8 + 56);
    __int128 v32 = *(_OWORD *)(v8 + 40);
    __int128 v33 = v18;
    __int128 v19 = *(_OWORD *)(v8 + 264);
    __int128 v34 = *(_OWORD *)(v8 + 72);
    __int128 v46 = v19;
    DWORD2(v32) += a4;
    HIDWORD(v32) += a5;
    if (a3)
    {
      LODWORD(v33) = v33 + 1;
      DWORD1(v33) += a3;
      sub_100326768(a1, &v32, a3);
      HIDWORD(v41) = a3;
    }

    __int128 v48 = &v47;
    uint64_t v20 = sub_100329EBC(v7, &v47, (uint64_t)&unk_1006C2518, &v48);
    __int128 v22 = v37;
    __int128 v21 = v38;
    __int128 v23 = v36;
    __int128 v24 = v34;
    *(_OWORD *)(v20 + 11) = v35;
    __int128 v26 = v41;
    __int128 v25 = v42;
    __int128 v27 = v40;
    *(_OWORD *)(v20 + 19) = v39;
    __int128 v29 = v45;
    __int128 v28 = v46;
    __int128 v30 = v44;
    *(_OWORD *)(v20 + 27) = v43;
    *(_OWORD *)(v20 + 29) = v30;
    *(_OWORD *)(v20 + 31) = v29;
    *(_OWORD *)(v20 + 33) = v28;
    *(_OWORD *)(v20 + 21) = v27;
    *(_OWORD *)(v20 + 23) = v26;
    *(_OWORD *)(v20 + 25) = v25;
    *(_OWORD *)(v20 + 13) = v23;
    *(_OWORD *)(v20 + 15) = v22;
    *(_OWORD *)(v20 + 17) = v21;
    double result = *(double *)&v32;
    __int128 v31 = v33;
    *(_OWORD *)(v20 + 5) = v32;
    *(_OWORD *)(v20 + 7) = v31;
    *(_OWORD *)(v20 + 9) = v24;
  }

  else
  {
LABEL_19:
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066C45C();
    }
  }

  return result;
}

void sub_100327040(uint64_t a1, __int16 a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = sub_100405218();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_1003270F8;
  v8[3] = &unk_100890D88;
  uint64_t v10 = a1;
  __int16 v11 = a2;
  id v7 = v5;
  id v9 = v7;
  sub_100405384(v6, v8);
}

void sub_1003270D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1003270F8(uint64_t a1)
{
}

void sub_100327108(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    *(_DWORD *)((char *)__dst + 3) = 0;
    __dst[0] = 0;
    id v7 = v5;
    id v6 = v5;
    memcpy(__dst, [v6 bytes], (size_t)[v6 length]);
    sub_100325794(a1, a2, 0, *(unsigned __int16 *)((char *)__dst + 1), *(unsigned __int16 *)((char *)__dst + 3), 0);
    id v5 = v7;
  }
}

void sub_100327194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003271A4(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100405218();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10032720C;
  v5[3] = &unk_10087EB68;
  v5[4] = a1;
  int v6 = a2;
  sub_100405384(v4, v5);
}

uint64_t sub_10032720C(uint64_t result)
{
  uint64_t v1 = *(unsigned int **)(result + 32);
  uint64_t v2 = v1[184];
  if ((_DWORD)v2 != -1)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = *(unsigned __int8 *)(result + 40);
    unsigned int v5 = v1[185];
    v1[185] = v5;
    unsigned int v6 = v1[186];
    v1[186] = v6;
    uint64_t v7 = v1[187] * v2;
    unint64_t v8 = v2 + 1;
    v1[184] = v8;
    v1[187] = (v4 + v7) / v8;
    while (byte_1006C1775[v3] <= v4)
    {
      if (++v3 == 5) {
        goto LABEL_11;
      }
    }

    ++v1[v3 + 188];
LABEL_11:
    int v9 = *(unsigned __int8 *)(result + 41);
    if (v9 == 2)
    {
      ++v1[195];
    }

    else if (v9 == 1)
    {
      ++v1[194];
    }

    else if (!*(_BYTE *)(result + 41))
    {
      ++v1[193];
    }

    if (*(_BYTE *)(result + 42)) {
      ++v1[196];
    }
    if (*(_BYTE *)(result + 43) == 1) {
      ++v1[197];
    }
    else {
      ++v1[198];
    }
  }

  return result;
}

void sub_100327318(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = sub_100405218();
  v6[1] = 3221225472LL;
  __int128 v5 = a2[1];
  __int128 v7 = *a2;
  v6[0] = _NSConcreteStackBlock;
  _OWORD v6[2] = sub_100327388;
  v6[3] = &unk_100890DA8;
  void v6[4] = a1;
  __int128 v8 = v5;
  sub_100405384(v4, v6);
}

uint64_t sub_100327388(uint64_t result)
{
  uint64_t v1 = *(int32x4_t **)(result + 32);
  int32x4_t v2 = v1[44];
  v1[43] = vaddq_s32(v1[43], *(int32x4_t *)(result + 40));
  v1[44] = vaddq_s32(v2, *(int32x4_t *)(result + 56));
  unsigned __int32 v3 = *(_DWORD *)(result + 40);
  if (v3 <= v1[45].i32[2]) {
    unsigned __int32 v3 = v1[45].u32[2];
  }
  v1[45].i32[2] = v3;
  unsigned __int32 v4 = *(_DWORD *)(result + 44);
  if (v4 <= v1[45].i32[3]) {
    unsigned __int32 v4 = v1[45].u32[3];
  }
  v1[45].i32[3] = v4;
  return result;
}

void sub_1003273D4(uint64_t a1)
{
  uint64_t v2 = sub_100405218();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_100327434;
  v3[3] = &unk_10087EB20;
  v3[4] = a1;
  sub_100405384(v2, v3);
}

uint64_t sub_100327434(uint64_t result)
{
  return result;
}

void sub_100327448(uint64_t a1)
{
  uint64_t v2 = sub_100405218();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1003274A8;
  v3[3] = &unk_10087EB20;
  v3[4] = a1;
  sub_100405384(v2, v3);
}

uint64_t sub_1003274A8(uint64_t result)
{
  return result;
}

void sub_1003274BC(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = sub_100405218();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_100327574;
  v8[3] = &unk_100881060;
  uint64_t v10 = a1;
  id v7 = v5;
  id v9 = v7;
  int v11 = a3;
  sub_100405384(v6, v8);
}

void sub_100327554( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100327574(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unsigned __int32 v3 = *(void **)(v2 + 800);
  if (!v3)
  {
    unsigned __int32 v4 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    id v5 = *(void **)(v2 + 800);
    *(void *)(v2 + 800) = v4;

    unsigned __int32 v3 = *(void **)(v2 + 800);
  }

  id v10 = (id)objc_claimAutoreleasedReturnValue([v3 objectForKey:*(void *)(a1 + 32)]);
  uint64_t v6 = (NSMutableDictionary *)[v10 mutableCopy];

  id v7 = v6;
  if (!v6) {
    id v7 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  }
  unsigned int v8 = *(_DWORD *)(a1 + 48) - 1;
  if (v8 > 9) {
    id v9 = @"CBCentralManager_scan";
  }
  else {
    id v9 = off_1008917E8[v8];
  }
  int v11 = v7;
  -[NSMutableDictionary setObject:forKey:](v7, "setObject:forKey:", &__kCFBooleanTrue, v9);
  -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", *(void *)(a1 + 32), @"BundleID");
  [*(id *)(v2 + 800) setObject:v11 forKeyedSubscript:*(void *)(a1 + 32)];
}

void sub_10032765C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

id sub_100327674(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(v1 + 800);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v9;
    do
    {
      id v5 = 0LL;
      do
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = (void *)[*(id *)(v1 + 800) objectForKey: *(void *)(*((void *)&v8 + 1) + 8 * (void)v5)  (void)v8];
        sub_1002EFD68(v1, 0x42u, v6);

        id v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v3);
  }

  return [*(id *)(v1 + 800) removeAllObjects];
}

void sub_100327790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003277BC(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_100405218();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100327830;
  v7[3] = &unk_10087F8E0;
  v7[4] = a1;
  int v8 = a3;
  int v9 = a2;
  sub_100405384(v6, v7);
}

void sub_100327830(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = @"Unknown";
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 1) {
    id v2 = @"Classic";
  }
  if (v3 == 2) {
    id v2 = @"Le";
  }
  uint64_t v4 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@_%d",  v2,  *(unsigned int *)(a1 + 44)));
  id v5 = *(void **)(v1 + 352);
  id v8 = (id)v4;
  uint64_t v6 = (void *)[v5 objectForKey:];
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v6 intValue] + 1));
  [v5 setObject:v7 forKey:v8];
}

void sub_100327900( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10032792C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id obj = *(id *)(v1 + 352);
  id v3 = [obj countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v11;
    do
    {
      for (std::string::size_type i = 0LL; i != v3; std::string::size_type i = (char *)i + 1)
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void *)(*((void *)&v10 + 1) + 8LL * (void)i);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v6, @"Result");
        id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 352) objectForKeyedSubscript:v6]);
        id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v7 unsignedIntValue]));
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v8,  @"NumberOfDailyReports");

        sub_1002EFD68(v1, 0x4Au, v2);
      }

      id v3 = [obj countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v3);
  }

  [*(id *)(v1 + 352) removeAllObjects];
}

void sub_100327AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100327B08(uint64_t a1, uint64_t a2, char a3, char a4)
{
  id v8 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "reportEncryptionKeySizeStats", buf, 2u);
  }

  uint64_t v9 = sub_100405218();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100327BD0;
  v10[3] = &unk_10087FF20;
  char v11 = a3;
  char v12 = a4;
  void v10[4] = a1;
  void v10[5] = a2;
  sub_100405384(v9, v10);
}

void sub_100327BD0(uint64_t a1)
{
  id v2 = *(_WORD **)(a1 + 32);
  __int128 __p = 0LL;
  __int128 v10 = 0LL;
  uint64_t v11 = 0LL;
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_100890E38);
  }
  sub_10052AFEC((uint64_t)off_1008D67A0, (void ***)&__p);
  id v3 = __p;
  v2[304] = ((_DWORD)v10 - (_DWORD)__p) >> 3;
  if (*(_BYTE *)(a1 + 48))
  {
    ++v2[305];
    if (*(_BYTE *)(a1 + 49)) {
      ++v2[306];
    }
    uint64_t v4 = *(unsigned __int8 **)(a1 + 40);
    unint64_t v8 = ((unint64_t)v4[128] << 40) | ((unint64_t)v4[129] << 32) | ((unint64_t)v4[130] << 24) | ((unint64_t)v4[131] << 16) | ((unint64_t)v4[132] << 8) | v4[133];
    uint64_t v5 = (uint64_t)(v2 + 308);
    char v12 = &v8;
    if (!*((_DWORD *)sub_100329FBC(v5, &v8, (uint64_t)&unk_1006C2518, &v12) + 6))
    {
      int v7 = 0;
      sub_1003D0454(*(void *)(a1 + 40), &v7);
      int v6 = v7;
      char v12 = &v8;
      *((_DWORD *)sub_100329FBC(v5, &v8, (uint64_t)&unk_1006C2518, &v12) + 6) = v6;
    }

    id v3 = __p;
  }

  if (v3)
  {
    __int128 v10 = v3;
    operator delete(v3);
  }

void sub_100327D28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100327D4C(uint64_t a1)
{
  uint64_t v2 = sub_100405218();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_100327DAC;
  v3[3] = &unk_10087EB20;
  v3[4] = a1;
  sub_100405384(v2, v3);
}

void sub_100327DAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(v1 + 608)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v3, @"NumberOfDevices");

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(v1 + 610)));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v4,  @"NumberOfLowSecurityDevices");

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(v1 + 612)));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v5,  @"NumberOfEncryptionDowngrade");

  for (std::string::size_type i = *(uint64_t ***)(v1 + 632); i; std::string::size_type i = (uint64_t **)*i)
  {
    uint64_t v7 = *((unsigned int *)i + 6);
    id v8 = sub_1005BF848((uint64_t)i[2]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LowSecurityDevice_%@",  v9));

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v7));
    -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v10, v11);
  }

  char v12 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    __int128 v14 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "sendEncryptionKeySizeDailyMetric : %@",  buf,  0xCu);
  }

  sub_1002EFD68(v1, 0x4Bu, v2);
}

void sub_100327F94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100327FE8(uint64_t a1, __int128 *a2)
{
  __int128 v5 = *a2;
  int v6 = *((_DWORD *)a2 + 4);
  uint64_t v3 = sub_100405218();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_100328058;
  v4[3] = &unk_100890DC8;
  void v4[4] = a1;
  sub_100405384(v3, v4);
}

void sub_100328058(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 40)));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v3, @"Result");

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 44)));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v4,  @"NumberOfBTConnections");

  __int128 v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 48)));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v5,  @"BtConnectionDuration");

  int v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 52)));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v6,  @"NumberOfBTEntryCounter");

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 56)));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v7,  @"NumberOfBTExitCounter");

  sub_1002EFD68(v2, 0x67u, v8);
}

void sub_10032818C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003281C4(uint64_t a1, uint64_t a2, const void ***a3)
{
  uint64_t v5 = sub_100405218();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768LL;
  _OWORD v6[2] = sub_100328270;
  v6[3] = &unk_100890DE8;
  void v6[4] = a1;
  sub_100291924(v7, a3);
  sub_100405384(v5, v6);
  sub_10023E78C((uint64_t)v7, (char *)v7[1]);
}

void sub_100328258( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
}

uint64_t sub_100328270(void *a1)
{
  uint64_t v1 = (void *)a1[5];
  uint64_t v17 = a1[4];
  uint64_t v2 = a1 + 6;
  uint64_t v3 = @"Unknown";
  if (v1 != a1 + 6)
  {
    do
    {
      uint64_t v4 = (const char *)(v1 + 4);
      if (!strcmp(v4, "A1603"))
      {
        uint64_t v3 = @"A1603";
      }

      else if (!strcmp(v4, "A2051"))
      {
        uint64_t v3 = @"A2051";
      }

      else if (!strcmp(v4, "A3085"))
      {
        uint64_t v3 = @"A3085";
      }

      else if (!strcmp(v4, "A2538"))
      {
        uint64_t v3 = @"A2538";
      }

      uint64_t v5 = (void *)v1[1];
      if (v5)
      {
        do
        {
          int v6 = v5;
          uint64_t v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          int v6 = (void *)v1[2];
          BOOL v7 = *v6 == (void)v1;
          uint64_t v1 = v6;
        }

        while (!v7);
      }

      uint64_t v1 = v6;
    }

    while (v6 != v2);
  }

  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_100242F28((uint64_t)v18, v17 + 176);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v17 + 368) objectForKey:v3]);

  if (v8)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v17 + 368) objectForKeyedSubscript:v3]);
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectAtIndexedSubscript:0]);
    uint64_t v11 = [v10 unsignedIntValue] + 1;

    char v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v11));
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v17 + 368) objectForKeyedSubscript:v3]);
    [v13 setObject:v12 atIndexedSubscript:0];
  }

  else if ((-[__CFString isEqualToString:](v3, "isEqualToString:", @"Unknown") & 1) == 0)
  {
    uint64_t v14 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObjects:](&OBJC_CLASS___NSMutableArray, "arrayWithObjects:", &off_1008C2A80, 0LL));
    uint64_t v15 = *(void **)(v17 + 376);
    *(void *)(v17 + 376) = v14;

    [*(id *)(v17 + 368) setObject:*(void *)(v17 + 376) forKeyedSubscript:v3];
  }

  sub_100242F54((uint64_t)v18);
  return sub_100242FAC((uint64_t)v18);
}

void sub_1003284A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1003284E0(uint64_t a1, uint64_t a2)
{
  return sub_100291924((uint64_t *)(a1 + 40), (const void ***)(a2 + 40));
}

void sub_1003284EC(uint64_t a1)
{
}

void sub_100328504(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100328D80(a1);
  operator delete(v1);
}

uint64_t sub_100328528(uint64_t a1)
{
  return sub_100328D80(a1 - 16);
}

void sub_100328530(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100328D80(a1 - 16);
  operator delete(v1);
}

void sub_100328570(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    int v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }

  int v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      int v6 = *(char **)(a1 + 16);
      break;
    }
  }

  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_100328624(a1 + 8, v6, (char *)&v7);
      sub_100008A30(a1 + 8);
      goto LABEL_12;
    }

char *sub_100328624(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  int v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    __int128 v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      __int128 v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      __int128 v19 = 0LL;
    }
    uint64_t v20 = &v19[8 * v16];
    __int128 __p = v19;
    __int128 v27 = v20;
    __int128 v28 = v20;
    __int128 v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        __int128 v23 = (char *)sub_100008BA0(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        __int128 __p = v23;
        __int128 v27 = v20;
        __int128 v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        __int128 v27 = v20;
      }
    }

    *(void *)uint64_t v20 = *(void *)v3;
    __int128 v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + _Block_object_dispose(va, 8) = __src + 8;
  }

  else
  {
    uint64_t v9 = __src + 8;
    __int128 v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_100328828( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100328860(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 16);
  __int128 v5 = *(_OWORD *)(a2 + 32);
  __int128 v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + sub_100242FAC(v1 - 32) = v5;
  if (*(char *)(a2 + 103) < 0)
  {
    sub_100024238((_BYTE *)(a1 + 80), *(void **)(a2 + 80), *(void *)(a2 + 88));
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v7;
  }

  if (*(char *)(a2 + 127) < 0)
  {
    sub_100024238((_BYTE *)(a1 + 104), *(void **)(a2 + 104), *(void *)(a2 + 112));
  }

  else
  {
    __int128 v8 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v8;
  }

  if (*(char *)(a2 + 151) < 0)
  {
    sub_100024238((_BYTE *)(a1 + 128), *(void **)(a2 + 128), *(void *)(a2 + 136));
  }

  else
  {
    __int128 v9 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v9;
  }

  if (*(char *)(a2 + 175) < 0)
  {
    sub_100024238((_BYTE *)(a1 + 152), *(void **)(a2 + 152), *(void *)(a2 + 160));
  }

  else
  {
    __int128 v10 = *(_OWORD *)(a2 + 152);
    *(void *)(a1 + 16_Block_object_dispose(va, 8) = *(void *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = v10;
  }

  if (*(char *)(a2 + 199) < 0)
  {
    sub_100024238((_BYTE *)(a1 + 176), *(void **)(a2 + 176), *(void *)(a2 + 184));
  }

  else
  {
    __int128 v11 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = v11;
  }

  if (*(char *)(a2 + 223) < 0)
  {
    sub_100024238((_BYTE *)(a1 + 200), *(void **)(a2 + 200), *(void *)(a2 + 208));
  }

  else
  {
    __int128 v12 = *(_OWORD *)(a2 + 200);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = v12;
  }

  if (*(char *)(a2 + 247) < 0)
  {
    sub_100024238((_BYTE *)(a1 + 224), *(void **)(a2 + 224), *(void *)(a2 + 232));
  }

  else
  {
    __int128 v13 = *(_OWORD *)(a2 + 224);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(_OWORD *)(a1 + sub_100328D20(v2 - 224) = v13;
  }

  __int128 v14 = *(_OWORD *)(a2 + 248);
  __int128 v15 = *(_OWORD *)(a2 + 264);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = v15;
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = v14;
  uint64_t v16 = (_BYTE *)(a1 + 288);
  if (*(char *)(a2 + 311) < 0)
  {
    sub_100024238(v16, *(void **)(a2 + 288), *(void *)(a2 + 296));
  }

  else
  {
    __int128 v17 = *(_OWORD *)(a2 + 288);
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    *(_OWORD *)uint64_t v16 = v17;
  }

  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  return a1;
}

void sub_100328A60(_Unwind_Exception *exception_object)
{
  if (v1[247] < 0) {
    operator delete(*v8);
  }
  if (v1[223] < 0) {
    operator delete(*v7);
  }
  if (v1[199] < 0) {
    operator delete(*v6);
  }
  if (v1[175] < 0) {
    operator delete(*v5);
  }
  if (v1[151] < 0) {
    operator delete(*v4);
  }
  if (v1[127] < 0) {
    operator delete(*v3);
  }
  if (v1[103] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100328B0C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100328BAC(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  __int128 v5 = a2[1];
  *(_DWORD *)(a1 + sub_100242FAC(v1 - 32) = *((_DWORD *)a2 + 8);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  if (*((char *)a2 + 63) < 0)
  {
    sub_100024238((_BYTE *)(a1 + 40), *((void **)a2 + 5), *((void *)a2 + 6));
  }

  else
  {
    __int128 v6 = *(__int128 *)((char *)a2 + 40);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *(_OWORD *)(a1 + 40) = v6;
  }

  if (*((char *)a2 + 87) < 0)
  {
    sub_100024238((_BYTE *)(a1 + 64), *((void **)a2 + 8), *((void *)a2 + 9));
  }

  else
  {
    __int128 v7 = a2[4];
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(_OWORD *)(a1 + 64) = v7;
  }

  if (*((char *)a2 + 111) < 0)
  {
    sub_100024238((_BYTE *)(a1 + 88), *((void **)a2 + 11), *((void *)a2 + 12));
  }

  else
  {
    __int128 v8 = *(__int128 *)((char *)a2 + 88);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = v8;
  }

  __int128 v9 = (_BYTE *)(a1 + 112);
  if (*((char *)a2 + 135) < 0)
  {
    sub_100024238(v9, *((void **)a2 + 14), *((void *)a2 + 15));
  }

  else
  {
    __int128 v10 = a2[7];
    *(void *)(a1 + 12_Block_object_dispose(va, 8) = *((void *)a2 + 16);
    *(_OWORD *)__int128 v9 = v10;
  }

  __int128 v11 = *(__int128 *)((char *)a2 + 136);
  __int128 v12 = *(__int128 *)((char *)a2 + 152);
  __int128 v13 = *(__int128 *)((char *)a2 + 168);
  *(_DWORD *)(a1 + 184) = *((_DWORD *)a2 + 46);
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = v13;
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 136) = v11;
  return a1;
}

void sub_100328CD4(_Unwind_Exception *exception_object)
{
  if (v1[111] < 0) {
    operator delete(*v4);
  }
  if (v1[87] < 0) {
    operator delete(*v3);
  }
  if (v1[63] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100328D20(uint64_t a1)
{
  return a1;
}

uint64_t sub_100328D80(uint64_t a1)
{
  *(void *)a1 = off_100890610;
  *(void *)(a1 + _Block_object_dispose(va, 8) = &off_100890990;
  *(void *)(a1 + 16) = off_1008909A8;
  *(void *)(a1 + 24) = &off_1008909E8;
  *(void *)(a1 + sub_100242FAC(v1 - 32) = off_100890A00;
  *(void *)(a1 + 40) = off_100890A30;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = off_100890A80;
  *(void *)(a1 + 56) = &off_100890AB0;
  *(void *)(a1 + 64) = off_100890AC8;
  *(void *)(a1 + 72) = &off_100890B78;
  *(void *)(a1 + 80) = off_100890B90;

  sub_10023BF24(a1 + 656, *(void **)(a1 + 664));
  sub_100051650(a1 + 616);
  sub_10023BF24(a1 + 496, *(void **)(a1 + 504));
  sub_10023BF24(a1 + 472, *(void **)(a1 + 480));
  sub_10025506C(a1 + 432, *(void **)(a1 + 440));
  sub_10023BF24(a1 + 408, *(void **)(a1 + 416));
  sub_100328EA0(a1 + 384, *(void **)(a1 + 392));

  sub_100242E28(a1 + 240);
  sub_100242E28(a1 + 176);

  return a1;
}

void sub_100328EA0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100328EA0(a1, *a2);
    sub_100328EA0(a1, a2[1]);
    sub_100328EE8((uint64_t)(a2 + 4));
    operator delete(a2);
  }

uint64_t sub_100328EE8(uint64_t a1)
{
  return a1;
}

void sub_100328F58(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_100328F88(_Unwind_Exception *a1)
{
}

void sub_100328F9C(id a1)
{
  uint64_t v1 = operator new(0x260uLL);
  sub_1005285C8((uint64_t)v1);
  off_1008D67A0 = v1;
}

void sub_100328FCC(_Unwind_Exception *a1)
{
}

void sub_100328FE0(id a1)
{
  uint64_t v1 = operator new(0x2C0uLL);
  sub_1004219F0();
  off_1008D60C8 = v1;
}

void sub_100329010(_Unwind_Exception *a1)
{
}

void sub_100329024(id a1)
{
  uint64_t v1 = (char *)operator new(0x200uLL);
  *(void *)uint64_t v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 1_Block_object_dispose(va, 8) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 10_Block_object_dispose(va, 8) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 2_Block_object_dispose(va, 8) = v1 + 232;
  *((void *)v1 + sub_100242FAC(v1 - 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 32_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 5_Block_object_dispose(va, 8) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_10032912C(_Unwind_Exception *a1)
{
}

void sub_100329140(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_100329170(_Unwind_Exception *a1)
{
}

void sub_100329184(id a1)
{
  uint64_t v1 = operator new(0xEB0uLL);
  sub_10061991C();
  qword_1008D5F18 = (uint64_t)v1;
}

void sub_1003291B4(_Unwind_Exception *a1)
{
}

void sub_1003291C8(id a1)
{
  uint64_t v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_1003291F8(_Unwind_Exception *a1)
{
}

void sub_10032920C(id a1)
{
  uint64_t v1 = operator new(0x258uLL);
  sub_10048AA64();
  qword_1008D93F0 = (uint64_t)v1;
}

void sub_10032923C(_Unwind_Exception *a1)
{
}

void sub_100329250(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_100329280(_Unwind_Exception *a1)
{
}

uint64_t sub_100329294(uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  __int128 v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    do
    {
      sub_1002919FC((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24LL;
    }

    while (v6);
  }

  return a1;
}

void sub_1003292FC(_Unwind_Exception *a1)
{
}

void sub_100329314(id a1)
{
  uint64_t v1 = operator new(0xF8uLL);
  sub_1003EC784((uint64_t)v1);
  off_1008D60B8 = v1;
}

void sub_100329344(_Unwind_Exception *a1)
{
}

uint64_t sub_100329358(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1LL;
    do
    {
      if (!sub_100024124(v4, a2, v2 + 4))
      {
        if (!sub_100024124(v4, v2 + 4, a2)) {
          return v5;
        }
        ++v2;
      }

      uint64_t v2 = (const void **)*v2;
    }

    while (v2);
  }

  return 0LL;
}

uint64_t sub_1003293D4(uint64_t **a1, const void **a2)
{
  uint64_t v3 = (uint64_t *)sub_100024098((uint64_t)a1, a2);
  uint64_t v4 = v3;
  sub_1001FDBCC(a1, v3);
  sub_100328EE8((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1LL;
}

_DWORD *sub_10032942C(uint64_t **a1, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v11 = 0LL;
  uint64_t v6 = sub_1003294C0((uint64_t)a1, &v11, a2);
  __int128 v7 = (_DWORD *)*v6;
  if (!*v6)
  {
    __int128 v8 = (uint64_t **)v6;
    __int128 v7 = operator new(0x38uLL);
    __int16 v9 = *((_WORD *)*a4 + 2);
    v7[8] = **a4;
    *((_WORD *)v7 + 1_Block_object_dispose(va, 8) = v9;
    *((void *)v7 + 5) = 0LL;
    *((void *)v7 + 6) = 0LL;
    sub_100029630(a1, v11, v8, (uint64_t *)v7);
  }

  return v7;
}

uint64_t *sub_1003294C0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  double result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    while (1)
    {
      uint64_t v6 = v4;
      unsigned int v7 = bswap32(*(_DWORD *)a3);
      unsigned int v8 = bswap32(*((_DWORD *)v6 + 8));
      if (v7 != v8) {
        goto LABEL_8;
      }
      unsigned int v7 = bswap32(*(unsigned __int16 *)(a3 + 4)) >> 16;
      unsigned int v9 = bswap32(*((unsigned __int16 *)v6 + 18));
      if (v7 == HIWORD(v9))
      {
LABEL_12:
        unsigned int v11 = bswap32(*((_DWORD *)v6 + 8));
        unsigned int v12 = bswap32(*(_DWORD *)a3);
        if (v11 == v12)
        {
          unsigned int v11 = bswap32(*((unsigned __int16 *)v6 + 18)) >> 16;
          unsigned int v13 = bswap32(*(unsigned __int16 *)(a3 + 4));
          if (v11 == HIWORD(v13)) {
            goto LABEL_22;
          }
          unsigned int v12 = HIWORD(v13);
        }

        if (v11 < v12) {
          int v14 = -1;
        }
        else {
          int v14 = 1;
        }
        if ((v14 & 0x80000000) == 0) {
          goto LABEL_22;
        }
        double result = v6 + 1;
        uint64_t v4 = (uint64_t *)v6[1];
        if (!v4) {
          goto LABEL_22;
        }
      }

      else
      {
        unsigned int v8 = HIWORD(v9);
LABEL_8:
        if (v7 < v8) {
          int v10 = -1;
        }
        else {
          int v10 = 1;
        }
        if ((v10 & 0x80000000) == 0) {
          goto LABEL_12;
        }
        uint64_t v4 = (uint64_t *)*v6;
        double result = v6;
        if (!*v6) {
          goto LABEL_22;
        }
      }
    }
  }

  uint64_t v6 = result;
LABEL_22:
  *a2 = v6;
  return result;
}

_OWORD *sub_100329598(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v14 = 0LL;
  uint64_t v6 = (void **)sub_10023E6A4((uint64_t)a1, &v14, a2);
  unsigned int v7 = *v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    uint64_t v13 = 0LL;
    unsigned int v7 = operator new(0xA0uLL);
    v12[1] = a1 + 1;
    unsigned int v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    _DWORD v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0LL;
    _DWORD v9[2] = 0LL;
    *unsigned int v9 = 0LL;
    *(_OWORD *)((char *)v7 + 56) = 0u;
    *(_OWORD *)((char *)v7 + 72) = 0u;
    *(_OWORD *)((char *)v7 + 8_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)((char *)v7 + 104) = 0u;
    *(_OWORD *)((char *)v7 + 120) = 0u;
    *(_OWORD *)((char *)v7 + 136) = 0u;
    *((void *)v7 + 19) = 0LL;
    LOBYTE(v13) = 1;
    sub_100029630(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0LL;
    sub_10032967C((uint64_t)v12, 0LL);
  }

  return v7;
}

void sub_10032967C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100328EE8((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

uint64_t sub_1003296C0(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)sub_100329710((uint64_t)a1, a2);
  uint64_t v4 = v3;
  sub_1001FDBCC(a1, v3);
  operator delete(v4);
  return 1LL;
}

uint64_t sub_100329710(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  uint64_t v5 = v2;
  do
  {
    unsigned int v6 = bswap32(*(_DWORD *)(v3 + 32));
    unsigned int v7 = bswap32(*(_DWORD *)a2);
    if (v6 != v7) {
      goto LABEL_7;
    }
    unsigned int v6 = bswap32(*(unsigned __int16 *)(v3 + 36)) >> 16;
    unsigned int v8 = bswap32(*(unsigned __int16 *)(a2 + 4));
    if (v6 != HIWORD(v8))
    {
      unsigned int v7 = HIWORD(v8);
LABEL_7:
      if (v6 < v7) {
        int v9 = -1;
      }
      else {
        int v9 = 1;
      }
      goto LABEL_10;
    }

    int v9 = 0;
LABEL_10:
    BOOL v10 = v9 < 0;
    if (v9 >= 0) {
      unsigned int v11 = (uint64_t *)v3;
    }
    else {
      unsigned int v11 = (uint64_t *)(v3 + 8);
    }
    if (!v10) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v11;
  }

  while (*v11);
  if (v5 == v2) {
    return v2;
  }
  unsigned int v12 = bswap32(*(_DWORD *)a2);
  unsigned int v13 = bswap32(*(_DWORD *)(v5 + 32));
  if (v12 != v13) {
    goto LABEL_20;
  }
  unsigned int v12 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16;
  unsigned int v14 = bswap32(*(unsigned __int16 *)(v5 + 36));
  if (v12 != HIWORD(v14))
  {
    unsigned int v13 = HIWORD(v14);
LABEL_20:
    int v15 = v12 < v13 ? -1 : 1;
    if (v15 < 0) {
      return v2;
    }
  }

  return v5;
}

uint64_t sub_1003297E8(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = sub_100329710((uint64_t)a1, a2);
  sub_10032982C(a1, v3);
  return 1LL;
}

uint64_t *sub_10032982C(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = sub_1001FDBCC(a1, (uint64_t *)a2);
  sub_10023BF24(a2 + 40, *(void **)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

uint64_t sub_100329868(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t result = 1LL;
    while (1)
    {
      unsigned int v4 = bswap32(*(_DWORD *)a2);
      unsigned int v5 = bswap32(*((_DWORD *)v2 + 8));
      if (v4 == v5)
      {
        unsigned int v4 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16;
        unsigned int v6 = bswap32(*((unsigned __int16 *)v2 + 18));
        if (v4 == HIWORD(v6)) {
          break;
        }
        unsigned int v5 = HIWORD(v6);
      }

      int v7 = v4 < v5 ? -1 : 1;
      if ((v7 & 0x80000000) == 0) {
        break;
      }
LABEL_19:
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        return 0LL;
      }
    }

    unsigned int v8 = bswap32(*((_DWORD *)v2 + 8));
    unsigned int v9 = bswap32(*(_DWORD *)a2);
    if (v8 == v9)
    {
      unsigned int v8 = bswap32(*((unsigned __int16 *)v2 + 18)) >> 16;
      unsigned int v10 = bswap32(*(unsigned __int16 *)(a2 + 4));
      if (v8 == HIWORD(v10))
      {
        int v11 = 0;
LABEL_17:
        if ((v11 & 0x80000000) == 0) {
          return result;
        }
        ++v2;
        goto LABEL_19;
      }

      unsigned int v9 = HIWORD(v10);
    }

    if (v8 < v9) {
      int v11 = -1;
    }
    else {
      int v11 = 1;
    }
    goto LABEL_17;
  }

  return 0LL;
}

_DWORD *sub_100329928(uint64_t **a1, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v11 = 0LL;
  unsigned int v6 = sub_1003294C0((uint64_t)a1, &v11, a2);
  int v7 = (_DWORD *)*v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    int v7 = operator new(0x40uLL);
    __int16 v9 = *((_WORD *)*a4 + 2);
    v7[8] = **a4;
    *((_WORD *)v7 + 1_Block_object_dispose(va, 8) = v9;
    *((void *)v7 + 7) = 0LL;
    *((void *)v7 + 6) = 0LL;
    *((void *)v7 + 5) = v7 + 12;
    sub_100029630(a1, v11, v8, (uint64_t *)v7);
  }

  return v7;
}

uint64_t **sub_1003299C8(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  int v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        __int16 v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 28);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    __int16 v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x28uLL);
    v11[28] = **a4;
    *((_DWORD *)v11 + _Block_object_dispose(va, 8) = 0;
    sub_100029630(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

uint64_t *sub_100329A88(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v11 = 0LL;
  unsigned int v6 = (uint64_t **)sub_10023E6A4((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    unsigned int v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_100329B3C((uint64_t)a1, a4, v10);
    sub_100029630(a1, v11, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0LL;
    sub_10032967C((uint64_t)v10, 0LL);
  }

  return v7;
}

double sub_100329B3C@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  unsigned int v6 = (char *)operator new(0xA0uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  int v7 = v6 + 32;
  unsigned int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_100024238(v7, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)int v7 = v9;
  }

  *((void *)v6 + 19) = 0LL;
  double result = 0.0;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100329BD8(_Unwind_Exception *a1)
{
}

uint64_t **sub_100329BF0(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  int v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        __int128 v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    __int128 v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    v11[32] = **a4;
    *((void *)v11 + 6) = 0LL;
    *((void *)v11 + 7) = 0LL;
    *((void *)v11 + 5) = 0LL;
    sub_100029630(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

uint64_t **sub_100329CB4(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  int v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        __int128 v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 28);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    __int128 v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[28] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    *((void *)v11 + 4) = 0LL;
    sub_100029630(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

void sub_100329D78(id a1)
{
  uint64_t v1 = operator new(0x1128uLL);
  sub_1005DDADC();
  off_1008D6600 = v1;
}

void sub_100329DA8(_Unwind_Exception *a1)
{
}

void sub_100329DBC(id a1)
{
  uint64_t v1 = operator new(0x1A0uLL);
  sub_1002769A4();
  off_1008D67C0 = v1;
}

void sub_100329DEC(_Unwind_Exception *a1)
{
}

void sub_100329E00(id a1)
{
  uint64_t v1 = operator new(0xA8uLL);
  sub_10040D0A0((uint64_t)v1);
  off_1008D6780 = v1;
}

void sub_100329E30(_Unwind_Exception *a1)
{
}

uint64_t sub_100329E44(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0LL;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(unsigned __int16 *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      int v7 = (uint64_t *)v2;
    }
    else {
      int v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }

  while (*v7);
  sub_1001FDBCC((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1LL;
}

uint64_t **sub_100329EBC(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  int v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        __int128 v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    __int128 v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (char *)operator new(0x118uLL);
    *((_WORD *)v11 + 16) = **a4;
    *(_OWORD *)(v11 + 24_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v11 + 2sub_100242FAC(v1 - 32) = 0u;
    *(_OWORD *)(v11 + 216) = 0u;
    *(_OWORD *)(v11 + 200) = 0u;
    *(_OWORD *)(v11 + 184) = 0u;
    *(_OWORD *)(v11 + 16_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v11 + 152) = 0u;
    *(_OWORD *)(v11 + 136) = 0u;
    *(_OWORD *)(v11 + 120) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 8_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 264) = 0u;
    sub_100029630(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

void *sub_100329FBC(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = *a2;
      if (v6 >= v7) {
        unint64_t v9 = v6 % v7;
      }
    }

    else
    {
      unint64_t v9 = (v7 - 1) & v6;
    }

    unsigned int v10 = *(void ***)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v6)
          {
            if (v11[2] == v6) {
              return v11;
            }
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= v7) {
                v12 %= v7;
              }
            }

            else
            {
              v12 &= v7 - 1;
            }

            if (v12 != v9) {
              break;
            }
          }

          uint64_t v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  else
  {
    unint64_t v9 = 0LL;
  }

  uint64_t v11 = operator new(0x20uLL);
  void *v11 = 0LL;
  v11[1] = v6;
  void v11[2] = **a4;
  *((_DWORD *)v11 + 6) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1LL;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_10005141C(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v9 = v6 % v7;
      }
      else {
        unint64_t v9 = v6;
      }
    }

    else
    {
      unint64_t v9 = (v7 - 1) & v6;
    }
  }

  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v9);
  if (v20)
  {
    void *v11 = *v20;
LABEL_38:
    *uint64_t v20 = v11;
    goto LABEL_39;
  }

  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v9) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }

    else
    {
      v21 &= v7 - 1;
    }

    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }

void sub_10032A1CC(_Unwind_Exception *a1)
{
}

  ;
}

void sub_10032A1FC( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t sub_10032A20C(uint64_t a1)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_100891848;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a1 + 16;
  *(void *)(a1 + 24) = 0LL;
  *(_BYTE *)(a1 + sub_100242FAC(v1 - 32) = 0;
  sub_1000B6578();
  return a1;
}

void sub_10032A25C(_Unwind_Exception *a1)
{
}

uint64_t sub_10032A278(uint64_t a1)
{
  *(void *)a1 = off_100891848;
  sub_1000B6578();
  sub_10032E47C(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_10032A2B4(_Unwind_Exception *a1)
{
}

void sub_10032A2D0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10032A278(a1);
  operator delete(v1);
}

uint64_t sub_10032A2E4(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  unsigned int v5 = (os_log_s *)qword_1008F75E0;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      int v32 = 134217984;
      uint64_t v33 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "getStoredDevices reading from local cache (%zu devices)",  (uint8_t *)&v32,  0xCu);
    }

    uint8x8_t v8 = *(void **)(a1 + 8);
    if (v8 != (void *)(a1 + 16))
    {
      do
      {
        unint64_t v9 = (unsigned __int8 *)(v8 + 4);
        LOWORD(v33) = 0;
        int v32 = 0;
        if (sub_1003FE1A4((uint64_t)&v32, v9))
        {
          if ((_BYTE)v32)
          {
LABEL_9:
            if (qword_1008D5F50 != -1) {
              dispatch_once(&qword_1008D5F50, &stru_100891938);
            }
            unsigned int v10 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v32, 1);
            if (!sub_1003FE254(a2, (uint64_t)v10))
            {
              unint64_t v12 = *(void **)(a2 + 8);
              unint64_t v11 = *(void *)(a2 + 16);
              if ((unint64_t)v12 >= v11)
              {
                uint64_t v16 = ((uint64_t)v12 - *(void *)a2) >> 3;
                uint64_t v17 = v11 - *(void *)a2;
                uint64_t v18 = v17 >> 2;
                else {
                  unint64_t v19 = v18;
                }
                if (v19) {
                  uint64_t v20 = (char *)sub_100008BA0(a2 + 16, v19);
                }
                else {
                  uint64_t v20 = 0LL;
                }
                unint64_t v21 = &v20[8 * v16];
                *(void *)unint64_t v21 = v10;
                float v13 = v21 + 8;
                __int128 v23 = *(uint64_t **)a2;
                unint64_t v22 = *(uint64_t **)(a2 + 8);
                if (v22 != *(uint64_t **)a2)
                {
                  do
                  {
                    uint64_t v24 = *--v22;
                    *((void *)v21 - 1) = v24;
                    v21 -= 8;
                  }

                  while (v22 != v23);
                  unint64_t v22 = *(uint64_t **)a2;
                }

                *(void *)a2 = v21;
                *(void *)(a2 + _Block_object_dispose(va, 8) = v13;
                *(void *)(a2 + 16) = &v20[8 * v19];
                if (v22) {
                  operator delete(v22);
                }
              }

              else
              {
                void *v12 = v10;
                float v13 = v12 + 1;
              }

              *(void *)(a2 + _Block_object_dispose(va, 8) = v13;
            }
          }

          else
          {
            uint64_t v14 = 1LL;
            while (v14 != 6)
            {
              if (*((unsigned __int8 *)&v32 + v14++))
              {
                break;
              }
            }
          }
        }

        __int128 v25 = (void *)v8[1];
        if (v25)
        {
          do
          {
            __int128 v26 = v25;
            __int128 v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            __int128 v26 = (void *)v8[2];
            BOOL v27 = *v26 == (void)v8;
            uint8x8_t v8 = v26;
          }

          while (!v27);
        }

        uint8x8_t v8 = v26;
      }

      while (v26 != (void *)(a1 + 16));
    }

    return 0LL;
  }

  else
  {
    if (v6)
    {
      LOWORD(vsub_100242FAC(v1 - 32) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "getStoredDevices reading from keychain",  (uint8_t *)&v32,  2u);
    }

    uint64_t v28 = sub_100296EDC((void **)a2);
    uint64_t v30 = *(uint64_t **)a2;
    __int128 v29 = *(uint64_t **)(a2 + 8);
    while (v30 != v29)
      sub_10032A5CC(a1, *v30++);
    *(_BYTE *)(a1 + sub_100242FAC(v1 - 32) = 1;
  }

  return v28;
}

void sub_10032A5CC(uint64_t a1, uint64_t a2)
{
  int v110 = *(_DWORD *)(a2 + 128);
  __int16 v111 = *(_WORD *)(a2 + 132);
  uint64_t v108 = 0LL;
  uint64_t v109 = 0LL;
  sub_1003FE1B4((unsigned __int8 *)&v110, __p);
  sub_10032B250(a1, (const void **)__p, &v108);
  if (v107 < 0) {
    operator delete(__p[0]);
  }
  int v4 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003FE1B4((unsigned __int8 *)&v110, &v103);
    unsigned int v5 = SHIBYTE(v105) >= 0 ? &v103 : (void **)v103;
    *(_DWORD *)__int128 buf = 136446210;
    int v113 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Loading keys from keychain for device address %{public}s",  buf,  0xCu);
    if (SHIBYTE(v105) < 0) {
      operator delete(v103);
    }
  }

  uint64_t v103 = 0LL;
  uint64_t v104 = 0LL;
  uint64_t v105 = 0LL;
  uint64_t v7 = (char *)sub_10024E33C((uint64_t)&v105, 1uLL);
  uint8x8_t v8 = (char *)v103;
  unint64_t v9 = v104;
  unsigned int v10 = &v7[4 * v6];
  *(_DWORD *)uint64_t v7 = 1;
  unint64_t v11 = v7 + 4;
  unint64_t v12 = v7;
  while (v9 != v8)
  {
    int v13 = *((_DWORD *)v9 - 1);
    v9 -= 4;
    *((_DWORD *)v12 - 1) = v13;
    v12 -= 4;
  }

  uint64_t v103 = v12;
  uint64_t v104 = v7 + 4;
  uint64_t v105 = &v7[4 * v6];
  if (v8)
  {
    operator delete(v8);
    unsigned int v10 = v105;
  }

  uint64_t v104 = v7 + 4;
  if (v11 >= v10)
  {
    uint8x8_t v8 = (char *)v103;
    uint64_t v15 = (v11 - (_BYTE *)v103) >> 2;
    unint64_t v16 = v15 + 1;
    uint64_t v17 = v10 - (_BYTE *)v103;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      unint64_t v19 = (char *)sub_10024E33C((uint64_t)&v105, v18);
      uint8x8_t v8 = (char *)v103;
      unint64_t v11 = v104;
    }

    else
    {
      unint64_t v19 = 0LL;
    }

    uint64_t v20 = &v19[4 * v15];
    unsigned int v10 = &v19[4 * v18];
    *(_DWORD *)uint64_t v20 = 2;
    uint64_t v14 = v20 + 4;
    while (v11 != v8)
    {
      int v21 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *((_DWORD *)v20 - 1) = v21;
      v20 -= 4;
    }

    uint64_t v103 = v20;
    uint64_t v104 = v14;
    uint64_t v105 = v10;
    if (v8)
    {
      operator delete(v8);
      unsigned int v10 = v105;
    }
  }

  else
  {
    *((_DWORD *)v7 + 1) = 2;
    uint64_t v14 = v7 + 8;
  }

  uint64_t v104 = v14;
  if (v14 >= v10)
  {
    uint8x8_t v8 = (char *)v103;
    uint64_t v23 = (v14 - (_BYTE *)v103) >> 2;
    unint64_t v24 = v23 + 1;
    uint64_t v25 = v10 - (_BYTE *)v103;
    if (v25 >> 1 > v24) {
      unint64_t v24 = v25 >> 1;
    }
    else {
      unint64_t v26 = v24;
    }
    if (v26)
    {
      BOOL v27 = (char *)sub_10024E33C((uint64_t)&v105, v26);
      uint8x8_t v8 = (char *)v103;
      uint64_t v14 = v104;
    }

    else
    {
      BOOL v27 = 0LL;
    }

    uint64_t v28 = &v27[4 * v23];
    unsigned int v10 = &v27[4 * v26];
    *(_DWORD *)uint64_t v28 = 4;
    unint64_t v22 = v28 + 4;
    while (v14 != v8)
    {
      int v29 = *((_DWORD *)v14 - 1);
      v14 -= 4;
      *((_DWORD *)v28 - 1) = v29;
      v28 -= 4;
    }

    uint64_t v103 = v28;
    uint64_t v104 = v22;
    uint64_t v105 = v10;
    if (v8)
    {
      operator delete(v8);
      unsigned int v10 = v105;
    }
  }

  else
  {
    *(_DWORD *)uint64_t v14 = 4;
    unint64_t v22 = v14 + 4;
  }

  uint64_t v104 = v22;
  if (v22 >= v10)
  {
    uint8x8_t v8 = (char *)v103;
    uint64_t v31 = (v22 - (_BYTE *)v103) >> 2;
    unint64_t v32 = v31 + 1;
    uint64_t v33 = v10 - (_BYTE *)v103;
    if (v33 >> 1 > v32) {
      unint64_t v32 = v33 >> 1;
    }
    else {
      unint64_t v34 = v32;
    }
    if (v34)
    {
      __int128 v35 = (char *)sub_10024E33C((uint64_t)&v105, v34);
      uint8x8_t v8 = (char *)v103;
      unint64_t v22 = v104;
    }

    else
    {
      __int128 v35 = 0LL;
    }

    __int128 v36 = &v35[4 * v31];
    unsigned int v10 = &v35[4 * v34];
    *(_DWORD *)__int128 v36 = 8;
    uint64_t v30 = v36 + 4;
    while (v22 != v8)
    {
      int v37 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *((_DWORD *)v36 - 1) = v37;
      v36 -= 4;
    }

    uint64_t v103 = v36;
    uint64_t v104 = v30;
    uint64_t v105 = v10;
    if (v8)
    {
      operator delete(v8);
      unsigned int v10 = v105;
    }
  }

  else
  {
    *(_DWORD *)unint64_t v22 = 8;
    uint64_t v30 = v22 + 4;
  }

  uint64_t v104 = v30;
  if (v30 >= v10)
  {
    uint8x8_t v8 = (char *)v103;
    uint64_t v39 = (v30 - (_BYTE *)v103) >> 2;
    unint64_t v40 = v39 + 1;
    uint64_t v41 = v10 - (_BYTE *)v103;
    if (v41 >> 1 > v40) {
      unint64_t v40 = v41 >> 1;
    }
    else {
      unint64_t v42 = v40;
    }
    if (v42)
    {
      __int128 v43 = (char *)sub_10024E33C((uint64_t)&v105, v42);
      uint8x8_t v8 = (char *)v103;
      uint64_t v30 = v104;
    }

    else
    {
      __int128 v43 = 0LL;
    }

    __int128 v44 = &v43[4 * v39];
    unsigned int v10 = &v43[4 * v42];
    *(_DWORD *)__int128 v44 = 16;
    __int128 v38 = v44 + 4;
    while (v30 != v8)
    {
      int v45 = *((_DWORD *)v30 - 1);
      v30 -= 4;
      *((_DWORD *)v44 - 1) = v45;
      v44 -= 4;
    }

    uint64_t v103 = v44;
    uint64_t v104 = v38;
    uint64_t v105 = v10;
    if (v8)
    {
      operator delete(v8);
      unsigned int v10 = v105;
    }
  }

  else
  {
    *(_DWORD *)uint64_t v30 = 16;
    __int128 v38 = v30 + 4;
  }

  uint64_t v104 = v38;
  if (v38 >= v10)
  {
    uint8x8_t v8 = (char *)v103;
    uint64_t v47 = (v38 - (_BYTE *)v103) >> 2;
    unint64_t v48 = v47 + 1;
    uint64_t v49 = v10 - (_BYTE *)v103;
    if (v49 >> 1 > v48) {
      unint64_t v48 = v49 >> 1;
    }
    else {
      unint64_t v50 = v48;
    }
    if (v50)
    {
      __int128 v51 = (char *)sub_10024E33C((uint64_t)&v105, v50);
      uint8x8_t v8 = (char *)v103;
      __int128 v38 = v104;
    }

    else
    {
      __int128 v51 = 0LL;
    }

    __int128 v52 = &v51[4 * v47];
    unsigned int v10 = &v51[4 * v50];
    *(_DWORD *)__int128 v52 = 32;
    __int128 v46 = v52 + 4;
    while (v38 != v8)
    {
      int v53 = *((_DWORD *)v38 - 1);
      v38 -= 4;
      *((_DWORD *)v52 - 1) = v53;
      v52 -= 4;
    }

    uint64_t v103 = v52;
    uint64_t v104 = v46;
    uint64_t v105 = v10;
    if (v8)
    {
      operator delete(v8);
      unsigned int v10 = v105;
    }
  }

  else
  {
    *(_DWORD *)__int128 v38 = 32;
    __int128 v46 = v38 + 4;
  }

  uint64_t v104 = v46;
  if (v46 >= v10)
  {
    uint8x8_t v8 = (char *)v103;
    uint64_t v55 = (v46 - (_BYTE *)v103) >> 2;
    unint64_t v56 = v55 + 1;
    uint64_t v57 = v10 - (_BYTE *)v103;
    if (v57 >> 1 > v56) {
      unint64_t v56 = v57 >> 1;
    }
    else {
      unint64_t v58 = v56;
    }
    if (v58)
    {
      int v59 = (char *)sub_10024E33C((uint64_t)&v105, v58);
      uint8x8_t v8 = (char *)v103;
      __int128 v46 = v104;
    }

    else
    {
      int v59 = 0LL;
    }

    int v60 = &v59[4 * v55];
    unsigned int v10 = &v59[4 * v58];
    *(_DWORD *)int v60 = 64;
    __int128 v54 = v60 + 4;
    while (v46 != v8)
    {
      int v61 = *((_DWORD *)v46 - 1);
      v46 -= 4;
      *((_DWORD *)v60 - 1) = v61;
      v60 -= 4;
    }

    uint64_t v103 = v60;
    uint64_t v104 = v54;
    uint64_t v105 = v10;
    if (v8)
    {
      operator delete(v8);
      unsigned int v10 = v105;
    }
  }

  else
  {
    *(_DWORD *)__int128 v46 = 64;
    __int128 v54 = v46 + 4;
  }

  uint64_t v104 = v54;
  if (v54 >= v10)
  {
    uint8x8_t v8 = (char *)v103;
    uint64_t v63 = (v54 - (_BYTE *)v103) >> 2;
    unint64_t v64 = v63 + 1;
    uint64_t v65 = v10 - (_BYTE *)v103;
    if (v65 >> 1 > v64) {
      unint64_t v64 = v65 >> 1;
    }
    else {
      unint64_t v66 = v64;
    }
    if (v66)
    {
      int v67 = (char *)sub_10024E33C((uint64_t)&v105, v66);
      uint8x8_t v8 = (char *)v103;
      __int128 v54 = v104;
    }

    else
    {
      int v67 = 0LL;
    }

    unsigned int v68 = &v67[4 * v63];
    unsigned int v10 = &v67[4 * v66];
    *(_DWORD *)unsigned int v68 = 128;
    __int128 v62 = v68 + 4;
    while (v54 != v8)
    {
      int v69 = *((_DWORD *)v54 - 1);
      v54 -= 4;
      *((_DWORD *)v68 - 1) = v69;
      v68 -= 4;
    }

    uint64_t v103 = v68;
    uint64_t v104 = v62;
    uint64_t v105 = v10;
    if (v8)
    {
      operator delete(v8);
      unsigned int v10 = v105;
    }
  }

  else
  {
    *(_DWORD *)__int128 v54 = 128;
    __int128 v62 = v54 + 4;
  }

  uint64_t v104 = v62;
  if (v62 >= v10)
  {
    uint8x8_t v8 = (char *)v103;
    uint64_t v71 = (v62 - (_BYTE *)v103) >> 2;
    unint64_t v72 = v71 + 1;
    uint64_t v73 = v10 - (_BYTE *)v103;
    if (v73 >> 1 > v72) {
      unint64_t v72 = v73 >> 1;
    }
    else {
      unint64_t v74 = v72;
    }
    if (v74)
    {
      int v75 = (char *)sub_10024E33C((uint64_t)&v105, v74);
      uint8x8_t v8 = (char *)v103;
      __int128 v62 = v104;
    }

    else
    {
      int v75 = 0LL;
    }

    uint64_t v76 = &v75[4 * v71];
    unsigned int v10 = &v75[4 * v74];
    *(_DWORD *)uint64_t v76 = 256;
    unsigned int v70 = v76 + 4;
    while (v62 != v8)
    {
      int v77 = *((_DWORD *)v62 - 1);
      v62 -= 4;
      *((_DWORD *)v76 - 1) = v77;
      v76 -= 4;
    }

    uint64_t v103 = v76;
    uint64_t v104 = v70;
    uint64_t v105 = v10;
    if (v8)
    {
      operator delete(v8);
      unsigned int v10 = v105;
    }
  }

  else
  {
    *(_DWORD *)__int128 v62 = 256;
    unsigned int v70 = v62 + 4;
  }

  uint64_t v104 = v70;
  if (v70 >= v10)
  {
    uint8x8_t v8 = (char *)v103;
    uint64_t v79 = (v70 - (_BYTE *)v103) >> 2;
    unint64_t v80 = v79 + 1;
    uint64_t v81 = v10 - (_BYTE *)v103;
    if (v81 >> 1 > v80) {
      unint64_t v80 = v81 >> 1;
    }
    else {
      unint64_t v82 = v80;
    }
    if (v82)
    {
      uint64_t v83 = (char *)sub_10024E33C((uint64_t)&v105, v82);
      uint8x8_t v8 = (char *)v103;
      unsigned int v70 = v104;
    }

    else
    {
      uint64_t v83 = 0LL;
    }

    uint64_t v84 = &v83[4 * v79];
    unsigned int v10 = &v83[4 * v82];
    *(_DWORD *)uint64_t v84 = 512;
    uint64_t v78 = v84 + 4;
    while (v70 != v8)
    {
      int v85 = *((_DWORD *)v70 - 1);
      v70 -= 4;
      *((_DWORD *)v84 - 1) = v85;
      v84 -= 4;
    }

    uint64_t v103 = v84;
    uint64_t v104 = v78;
    uint64_t v105 = v10;
    if (v8)
    {
      operator delete(v8);
      unsigned int v10 = v105;
    }
  }

  else
  {
    *(_DWORD *)unsigned int v70 = 512;
    uint64_t v78 = v70 + 4;
  }

  uint64_t v104 = v78;
  if (v78 >= v10)
  {
    uint8x8_t v8 = (char *)v103;
    uint64_t v87 = (v78 - (_BYTE *)v103) >> 2;
    unint64_t v88 = v87 + 1;
    uint64_t v89 = v10 - (_BYTE *)v103;
    if (v89 >> 1 > v88) {
      unint64_t v88 = v89 >> 1;
    }
    else {
      unint64_t v90 = v88;
    }
    if (v90)
    {
      uint64_t v91 = (char *)sub_10024E33C((uint64_t)&v105, v90);
      uint8x8_t v8 = (char *)v103;
      uint64_t v78 = v104;
    }

    else
    {
      uint64_t v91 = 0LL;
    }

    uint64_t v92 = &v91[4 * v87];
    uint64_t v93 = &v91[4 * v90];
    *(_DWORD *)uint64_t v92 = 1024;
    uint64_t v86 = v92 + 4;
    while (v78 != v8)
    {
      int v94 = *((_DWORD *)v78 - 1);
      v78 -= 4;
      *((_DWORD *)v92 - 1) = v94;
      v92 -= 4;
    }

    uint64_t v103 = v92;
    uint64_t v104 = v86;
    uint64_t v105 = v93;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    *(_DWORD *)uint64_t v78 = 1024;
    uint64_t v86 = v78 + 4;
  }

  uint64_t v104 = v86;
  v95 = v109;
  v102[0] = &off_100891968;
  v102[1] = v109;
  if (v109)
  {
    sub_1002CD1E0((uint64_t)v109);
    uint64_t v86 = v104;
  }

  id v99 = 0LL;
  __dst = 0LL;
  uint64_t v101 = 0LL;
  int v96 = v103;
  int64_t v97 = v86 - (_BYTE *)v103;
  if (v97)
  {
    sub_100271A98(&v99, v97 >> 2);
    id v98 = (char *)__dst;
    uint8x8_t v8 = (char *)memmove(__dst, v96, v97);
    __dst = &v98[4 * (v97 >> 2)];
  }

  sub_10032AFA8((uint64_t)v8, a2, (uint64_t)v102, (int **)&v99);
  if (v99)
  {
    __dst = v99;
    operator delete(v99);
  }

  if (v95) {
    sub_1002CD254(v95);
  }
  if (v103)
  {
    uint64_t v104 = (char *)v103;
    operator delete(v103);
  }

  if (v95) {
    sub_1002CD254(v95);
  }
}

void sub_10032AF00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, unsigned int *a21)
{
  if (a21) {
    sub_1002CD254(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032AF88( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x10032AF80LL);
}

void sub_10032AFA0()
{
}

void sub_10032AFA8(uint64_t a1, uint64_t a2, uint64_t a3, int **a4)
{
  int v20 = *(_DWORD *)(a2 + 128);
  __int16 v21 = *(_WORD *)(a2 + 132);
  CFTypeRef cf = 0LL;
  int v4 = *a4;
  unsigned int v5 = a4[1];
  if (*a4 != v5)
  {
    do
    {
      int v7 = *v4;
      int v19 = 64;
      memset(v27, 0, sizeof(v27));
      sub_1003FE1B4((unsigned __int8 *)&v20, __p);
      if (SBYTE3(v24) >= 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = *(const char **)__p;
      }
      int v10 = sub_1002967A0(v7, v9, (char *)v27, &v19, (const __CFDictionary **)&cf, v8);
      if (SBYTE3(v24) < 0) {
        operator delete(*(void **)__p);
      }
      int v11 = v19;
      if (v10) {
        BOOL v12 = 1;
      }
      else {
        BOOL v12 = v19 == 0;
      }
      if (!v12)
      {
        int v13 = (os_log_s *)qword_1008F75E0;
        if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEBUG))
        {
          sub_1003FE1B4((unsigned __int8 *)&v20, v16);
          uint64_t v15 = v16;
          if (v17 < 0) {
            uint64_t v15 = (void **)v16[0];
          }
          *(_DWORD *)__int128 __p = 136446978;
          *(void *)&__p[4] = v15;
          *(_WORD *)&_BYTE __p[12] = 1024;
          *(_DWORD *)&__p[14] = v7;
          __int16 v23 = 2080;
          unint64_t v24 = v27;
          __int16 v25 = 1024;
          int v26 = v19;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "readKeyForDevice(%{public}s) aType:%d data:%s len:%d",  __p,  0x22u);
          if (v17 < 0) {
            operator delete(v16[0]);
          }
          int v11 = v19;
        }

        uint64_t v14 = *(void *)(a3 + 8);
        sub_10056AB04(__p, v27, v11 + 1);
        sub_10032B1F8(v14, v7, (uint64_t)__p);
        *(void *)__int128 __p = &off_10087FAA8;
        if (*(void *)&__p[8]) {
          sub_1002CD254(*(unsigned int **)&__p[8]);
        }
      }

      ++v4;
    }

    while (v4 != v5);
    if (cf) {
      CFRelease(cf);
    }
  }

void sub_10032B1BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, unsigned int *a18, int a19, __int16 a20, char a21, char a22)
{
  if (a18) {
    sub_1002CD254(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032B1F8(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = a2;
  int v7 = &v6;
  int v4 = sub_10032E554((uint64_t **)(a1 + 16), &v6, (uint64_t)&unk_1006C2518, &v7);
  return sub_10002EAC8((uint64_t)(v4 + 5), a3);
}

void sub_10032B250(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  int v6 = (uint64_t **)(a1 + 8);
  uint64_t v7 = sub_100024098(a1 + 8, a2);
  if (a1 + 16 == v7)
  {
    unint64_t v9 = operator new(0x28uLL);
    _DWORD v9[2] = 1;
    *(void *)unint64_t v9 = &off_100891928;
    *((void *)v9 + 4) = 0LL;
    *((void *)v9 + 3) = 0LL;
    *((void *)v9 + 2) = v9 + 6;
    BOOL v12 = &off_100891968;
    int v13 = v9;
    uint64_t v14 = a2;
    int v10 = sub_10032E654(v6, a2, (uint64_t)&unk_1006C2518, (__int128 **)&v14);
    sub_10002EAC8((uint64_t)(v10 + 7), (uint64_t)&v12);
    uint64_t v14 = a2;
    uint64_t v11 = sub_10032E654(v6, a2, (uint64_t)&unk_1006C2518, (__int128 **)&v14)[8];
    *a3 = &off_100891968;
    a3[1] = v11;
    if (v11) {
      sub_1002CD1E0(v11);
    }
    BOOL v12 = &off_100891968;
    if (v13) {
      sub_1002CD254(v13);
    }
  }

  else
  {
    uint64_t v8 = *(void *)(v7 + 64);
    *a3 = &off_100891968;
    a3[1] = v8;
    if (v8) {
      sub_1002CD1E0(v8);
    }
  }

void sub_10032B368( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  if (a10) {
    sub_1002CD254(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10032B384(void *a1)
{
  *a1 = &off_100891968;
  uint64_t v2 = (unsigned int *)a1[1];
  if (v2) {
    sub_1002CD254(v2);
  }
  return a1;
}

void sub_10032B3BC(uint64_t a1, uint64_t a2)
{
  if (IsAppleInternalBuild(a1, a2))
  {
    unsigned int v3 = *(void **)(a1 + 8);
    int v4 = (void *)(a1 + 16);
    if (v3 != (void *)(a1 + 16))
    {
      do
      {
        unsigned int v5 = (unsigned int *)v3[8];
        if (v5) {
          sub_1002CD1E0(v3[8]);
        }
        int v6 = (os_log_s *)qword_1008F75E0;
        if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = v3 + 4;
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "statedump:    %s", (uint8_t *)&buf, 0xCu);
          int v6 = (os_log_s *)qword_1008F75E0;
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          sub_10032BA60((uint64_t)v5, 1, &buf);
          uint64_t v8 = sub_10056AAF0((uint64_t)&buf);
          *(_DWORD *)unint64_t v24 = 136315138;
          uint64_t v25 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "statedump:       Pincode:\t       %s",  v24,  0xCu);
          *(void *)&__int128 buf = &off_10087FAA8;
          if (*((void *)&buf + 1)) {
            sub_1002CD254(*((unsigned int **)&buf + 1));
          }
          int v6 = (os_log_s *)qword_1008F75E0;
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          sub_10032BA60((uint64_t)v5, 2, &buf);
          uint64_t v9 = sub_10056AAF0((uint64_t)&buf);
          *(_DWORD *)unint64_t v24 = 136315138;
          uint64_t v25 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "statedump:       Link key:       %s",  v24,  0xCu);
          *(void *)&__int128 buf = &off_10087FAA8;
          if (*((void *)&buf + 1)) {
            sub_1002CD254(*((unsigned int **)&buf + 1));
          }
          int v6 = (os_log_s *)qword_1008F75E0;
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          sub_10032BA60((uint64_t)v5, 4, &buf);
          uint64_t v10 = sub_10056AAF0((uint64_t)&buf);
          *(_DWORD *)unint64_t v24 = 136315138;
          uint64_t v25 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "statedump:       Link key type:  %s",  v24,  0xCu);
          *(void *)&__int128 buf = &off_10087FAA8;
          if (*((void *)&buf + 1)) {
            sub_1002CD254(*((unsigned int **)&buf + 1));
          }
          int v6 = (os_log_s *)qword_1008F75E0;
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          sub_10032BA60((uint64_t)v5, 8, &buf);
          uint64_t v11 = sub_10056AAF0((uint64_t)&buf);
          *(_DWORD *)unint64_t v24 = 136315138;
          uint64_t v25 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "statedump:       Local address:  %s",  v24,  0xCu);
          *(void *)&__int128 buf = &off_10087FAA8;
          if (*((void *)&buf + 1)) {
            sub_1002CD254(*((unsigned int **)&buf + 1));
          }
          int v6 = (os_log_s *)qword_1008F75E0;
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          sub_10032BA60((uint64_t)v5, 16, &buf);
          uint64_t v12 = sub_10056AAF0((uint64_t)&buf);
          *(_DWORD *)unint64_t v24 = 136315138;
          uint64_t v25 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "statedump:       Magic IRK:      %s",  v24,  0xCu);
          *(void *)&__int128 buf = &off_10087FAA8;
          if (*((void *)&buf + 1)) {
            sub_1002CD254(*((unsigned int **)&buf + 1));
          }
          int v6 = (os_log_s *)qword_1008F75E0;
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          sub_10032BA60((uint64_t)v5, 32, &buf);
          uint64_t v13 = sub_10056AAF0((uint64_t)&buf);
          *(_DWORD *)unint64_t v24 = 136315138;
          uint64_t v25 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "statedump:       Magic Enc:      %s",  v24,  0xCu);
          *(void *)&__int128 buf = &off_10087FAA8;
          if (*((void *)&buf + 1)) {
            sub_1002CD254(*((unsigned int **)&buf + 1));
          }
          int v6 = (os_log_s *)qword_1008F75E0;
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          sub_10032BA60((uint64_t)v5, 64, &buf);
          uint64_t v14 = sub_10056AAF0((uint64_t)&buf);
          *(_DWORD *)unint64_t v24 = 136315138;
          uint64_t v25 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "statedump:       Magic Acc:      %s",  v24,  0xCu);
          *(void *)&__int128 buf = &off_10087FAA8;
          if (*((void *)&buf + 1)) {
            sub_1002CD254(*((unsigned int **)&buf + 1));
          }
          int v6 = (os_log_s *)qword_1008F75E0;
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          sub_10032BA60((uint64_t)v5, 128, &buf);
          uint64_t v15 = sub_10056AAF0((uint64_t)&buf);
          *(_DWORD *)unint64_t v24 = 136315138;
          uint64_t v25 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "statedump:       Magic Hint:     %s",  v24,  0xCu);
          *(void *)&__int128 buf = &off_10087FAA8;
          if (*((void *)&buf + 1)) {
            sub_1002CD254(*((unsigned int **)&buf + 1));
          }
          int v6 = (os_log_s *)qword_1008F75E0;
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          sub_10032BA60((uint64_t)v5, 256, &buf);
          uint64_t v16 = sub_10056AAF0((uint64_t)&buf);
          *(_DWORD *)unint64_t v24 = 136315138;
          uint64_t v25 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "statedump:       Magic Ratchet:   %s",  v24,  0xCu);
          *(void *)&__int128 buf = &off_10087FAA8;
          if (*((void *)&buf + 1)) {
            sub_1002CD254(*((unsigned int **)&buf + 1));
          }
          int v6 = (os_log_s *)qword_1008F75E0;
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          sub_10032BA60((uint64_t)v5, 512, &buf);
          uint64_t v17 = sub_10056AAF0((uint64_t)&buf);
          *(_DWORD *)unint64_t v24 = 136315138;
          uint64_t v25 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "statedump:       Guest IRK:      %s",  v24,  0xCu);
          *(void *)&__int128 buf = &off_10087FAA8;
          if (*((void *)&buf + 1)) {
            sub_1002CD254(*((unsigned int **)&buf + 1));
          }
          int v6 = (os_log_s *)qword_1008F75E0;
        }

        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          sub_10032BA60((uint64_t)v5, 1024, &buf);
          uint64_t v18 = sub_10056AAF0((uint64_t)&buf);
          *(_DWORD *)unint64_t v24 = 136315138;
          uint64_t v25 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "statedump:       Guest Enc:      %s",  v24,  0xCu);
          *(void *)&__int128 buf = &off_10087FAA8;
          if (*((void *)&buf + 1)) {
            sub_1002CD254(*((unsigned int **)&buf + 1));
          }
        }

        if (v5) {
          sub_1002CD254(v5);
        }
        int v19 = (void *)v3[1];
        if (v19)
        {
          do
          {
            int v20 = v19;
            int v19 = (void *)*v19;
          }

          while (v19);
        }

        else
        {
          do
          {
            int v20 = (void *)v3[2];
            BOOL v21 = *v20 == (void)v3;
            unsigned int v3 = v20;
          }

          while (!v21);
        }

        unsigned int v3 = v20;
      }

      while (v20 != v4);
    }
  }

  else
  {
    unint64_t v22 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "statedump:    Not authorized to view security keys.",  (uint8_t *)&buf,  2u);
    }
  }

void sub_10032B9D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12)
{
  if (a12) {
    sub_1002CD254(a12);
  }
  if (v12) {
    sub_1002CD254(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032BA58()
{
}

void sub_10032BA60(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v3 = a1 + 24;
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }

  while (*v9);
  if (v6 != v3 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v10 = *(void *)(v6 + 48);
    *a3 = &off_10087FAA8;
    a3[1] = v10;
    if (v10) {
      sub_1002CD1E0(v10);
    }
  }

  else
  {
LABEL_11:
    *a3 = &off_10087FAA8;
    a3[1] = 0LL;
  }

uint64_t sub_10032BAC4(uint64_t a1, uint64_t a2, char *a3)
{
  int v12 = *(_DWORD *)(a2 + 128);
  __int16 v13 = *(_WORD *)(a2 + 132);
  uint64_t v5 = a1 + 8;
  sub_1003FE1B4((unsigned __int8 *)&v12, &__p);
  uint64_t v6 = sub_100024098(v5, (const void **)&__p);
  if (v11 < 0) {
    operator delete(__p);
  }
  if (a1 + 16 == v6) {
    return 155LL;
  }
  __int128 __p = 0LL;
  uint64_t v10 = 0LL;
  sub_10032BA60(*(void *)(v6 + 64), 1, &__p);
  if (sub_10056AAC8((uint64_t)&__p))
  {
    __int128 __p = &off_10087FAA8;
    if (v10) {
      sub_1002CD254(v10);
    }
    return 155LL;
  }

  BOOL v8 = (char *)sub_10056AAF0((uint64_t)&__p);
  sub_100532E6C(a3, v8);
  __int128 __p = &off_10087FAA8;
  if (v10) {
    sub_1002CD254(v10);
  }
  return 0LL;
}

void sub_10032BBB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, unsigned int *a10, int a11, __int16 a12, char a13, char a14)
{
  if (a10) {
    sub_1002CD254(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032BBF0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v24 = *(_DWORD *)(a2 + 128);
  __int16 v25 = *(_WORD *)(a2 + 132);
  uint64_t v22 = 0LL;
  __int16 v23 = 0LL;
  sub_1003FE1B4((unsigned __int8 *)&v24, __p);
  sub_10032B250(a1, (const void **)__p, &v22);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  sub_1003FE1B4((unsigned __int8 *)&v24, __dst);
  int v5 = SBYTE7(v27);
  uint64_t v6 = (char *)__dst[0];
  sub_100532EFC(a3, buf);
  if (v5 >= 0) {
    int v7 = (char *)__dst;
  }
  else {
    int v7 = v6;
  }
  if ((v32 & 0x80u) == 0) {
    BOOL v8 = buf;
  }
  else {
    BOOL v8 = *(uint8_t **)buf;
  }
  int v9 = sub_1002957A0(1, v7, (const char *)v8, 0);
  if (SBYTE7(v27) < 0)
  {
    operator delete(__dst[0]);
    if (v9) {
      goto LABEL_25;
    }
  }

  else if (v9)
  {
    goto LABEL_25;
  }

  sub_100532EFC(a3, __dst);
  if ((SBYTE7(v27) & 0x80u) == 0) {
    unint64_t v10 = BYTE7(v27);
  }
  else {
    unint64_t v10 = (unint64_t)__dst[1];
  }
  if (SBYTE7(v27) < 0) {
    operator delete(__dst[0]);
  }
  if (v10 <= 0x40)
  {
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    *(_OWORD *)__dst = 0u;
    __int128 v27 = 0u;
    char v11 = buf;
    sub_100532EFC(a3, buf);
    if ((v32 & 0x80u) != 0) {
      char v11 = *(uint8_t **)buf;
    }
    sub_100532EFC(a3, &v17);
    if ((char)v19 < 0)
    {
      memcpy(__dst, v11, __n);
      operator delete(v17);
    }

    else
    {
      memcpy(__dst, v11, v19);
    }

    uint64_t v15 = v23;
    sub_100532EFC(a3, buf);
    uint64_t v16 = v32;
    if ((v32 & 0x80u) != 0) {
      uint64_t v16 = v31;
    }
    sub_10056AB04(&v17, __dst, v16 + 1);
    sub_10032B1F8((uint64_t)v15, 1, (uint64_t)&v17);
    uint64_t v17 = &off_10087FAA8;
    if (__n) {
      sub_1002CD254((unsigned int *)__n);
    }
    uint64_t v13 = 0LL;
    goto LABEL_28;
  }

void sub_10032BE78( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, unsigned int *a20, uint64_t a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a11) {
    sub_1002CD254(a11);
  }
  if (a20) {
    sub_1002CD254(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032BF28()
{
  return 2LL;
}

uint64_t sub_10032BF30()
{
  return 2LL;
}

uint64_t sub_10032BF38(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  int v48 = *(_DWORD *)(a3 + 128);
  __int16 v49 = *(_WORD *)(a3 + 132);
  __int128 v56 = 0uLL;
  sub_1003FE1B4((unsigned __int8 *)&v48, __p);
  uint64_t v8 = sub_100024098(a1 + 8, (const void **)__p);
  if (SHIBYTE(v47) < 0) {
    operator delete(__p[0]);
  }
  if (a1 + 16 == v8) {
    return 150LL;
  }
  __int128 v44 = 0LL;
  int v45 = 0LL;
  sub_10032BA60(*(void *)(v8 + 64), 2, &v44);
  if (sub_10056AAC8((uint64_t)&v44))
  {
    int v9 = 2;
    goto LABEL_48;
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v47 = 0LL;
  unint64_t v10 = (char *)sub_10056AAF0((uint64_t)&v44);
  sub_10002418C(__p, v10);
  if (v47 >= 0) {
    char v11 = __p;
  }
  else {
    char v11 = (void **)__p[0];
  }
  if (!sub_10032C538((uint64_t)v11, (uint64_t)&v56, 16))
  {
    char v21 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(a3, &v50);
      int v28 = v51;
      unint64_t v29 = v50.n128_u64[0];
      uint64_t v30 = sub_10056AAF0((uint64_t)&v44);
      uint64_t v31 = &v50;
      if (v28 < 0) {
        uint64_t v31 = (__n128 *)v29;
      }
      *(_DWORD *)__int128 buf = 136446466;
      int v53 = v31;
      __int16 v54 = 2080;
      uint64_t v55 = v30;
      int v26 = "Failed to parse malformed link key for device %{public}s - data was %s";
      goto LABEL_34;
    }

void sub_10032C45C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a11) {
    sub_1002CD254(a11);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10032C538(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v3 = 0;
  if (a1 && a2)
  {
    uint64_t v4 = (unsigned __int8 *)(a1 - 1);
    do
      int v5 = *++v4;
    while (v5 == 32);
    if (a3 < 1)
    {
      return 1;
    }

    else
    {
      uint64_t v6 = 0LL;
      BOOL v3 = 0;
      do
      {
        int v7 = *v4;
        char v8 = v7 - 48;
        if ((v7 - 48) >= 0xA)
        {
          if ((v7 - 97) > 5)
          {
            char v8 = v7 - 55;
          }

          else
          {
            char v8 = v7 - 87;
          }
        }

        int v9 = v4[1];
        char v10 = v9 - 48;
        if ((v9 - 48) >= 0xA)
        {
          if ((v9 - 97) > 5)
          {
            char v10 = v9 - 55;
          }

          else
          {
            char v10 = v9 - 87;
          }
        }

        *(_BYTE *)(a2 + v6) = v10 + 16 * v8;
        int v11 = v4[2];
        v4 += 2;
        if (v11 == 45) {
          ++v4;
        }
        BOOL v3 = ++v6 >= (unint64_t)a3;
      }

      while (a3 != v6);
    }
  }

  return v3;
}

uint64_t sub_10032C608(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE *a4, int a5)
{
  if (sub_1005252A0(a4)) {
    return (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(void *)a1 + 64LL))(a1, a2, a3);
  }
  int v49 = *(_DWORD *)(a3 + 128);
  __int16 v50 = *(_WORD *)(a3 + 132);
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  *(_OWORD *)std::string __str = 0u;
  __int128 v52 = 0u;
  int v12 = (unsigned __int8 *)nullsub_63(a4, v10);
  unsigned int v13 = sub_10052528C((uint64_t)a4);
  if (v13 >= 9)
  {
    uint64_t v15 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
      sub_10066C624((uint64_t)a4, v15);
    }
    uint64_t v14 = "Unknown";
  }

  else
  {
    uint64_t v14 = (&off_100891978)[v13];
  }

  uint64_t v47 = 0LL;
  int v48 = 0LL;
  sub_1003FE1B4((unsigned __int8 *)&v49, __p);
  sub_10032B250(a1, (const void **)__p, &v47);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  sub_1003FE1B4((unsigned __int8 *)&v49, &v42);
  if (v44 >= 0) {
    uint64_t v16 = (char *)&v42;
  }
  else {
    uint64_t v16 = (char *)v42;
  }
  int v17 = sub_1002957A0(4, v16, v14, a5);
  int v18 = v17;
  if (v44 < 0)
  {
    operator delete(v42);
    if (v18)
    {
LABEL_15:
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(a3, &v42);
        sub_10066C5E0();
      }

      goto LABEL_20;
    }
  }

  else if (v17)
  {
    goto LABEL_15;
  }

  unsigned __int8 v19 = v48;
  size_t v20 = strlen(v14);
  sub_10056AB04(&v42, v14, v20 + 1);
  sub_10032B1F8((uint64_t)v19, 4, (uint64_t)&v42);
  uint64_t v42 = &off_10087FAA8;
  if (v43) {
    sub_1002CD254(v43);
  }
LABEL_20:
  snprintf( __str,  0x3FuLL,  "%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",  *v12,  v12[1],  v12[2],  v12[3],  v12[4],  v12[5],  v12[6],  v12[7],  v12[8],  v12[9],  v12[10],  v12[11],  v12[12],  v12[13],  v12[14],  v12[15]);
  HIBYTE(v54) = 0;
  sub_1003FE1B4((unsigned __int8 *)&v49, &v39);
  if (v41 >= 0) {
    char v21 = (char *)&v39;
  }
  else {
    char v21 = (char *)v39;
  }
  int v22 = sub_1002957A0(2, v21, __str, a5);
  int v23 = v22;
  if (v41 < 0)
  {
    operator delete(v39);
    if (v23)
    {
LABEL_25:
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(a3, &v39);
        sub_10066C59C();
      }

      goto LABEL_30;
    }
  }

  else if (v22)
  {
    goto LABEL_25;
  }

  uint64_t v24 = v48;
  size_t v25 = strlen(__str);
  sub_10056AB04(&v39, __str, v25 + 1);
  sub_10032B1F8((uint64_t)v24, 2, (uint64_t)&v39);
  uint64_t v39 = &off_10087FAA8;
  if (v40) {
    sub_1002CD254(v40);
  }
LABEL_30:
  sub_1003FE1B4((unsigned __int8 *)&v49, v37);
  int v26 = (char)v38;
  unsigned int v27 = (char *)v37[0];
  sub_1003FE1B4(a2, &v34);
  if (v26 >= 0) {
    int v28 = (char *)v37;
  }
  else {
    int v28 = v27;
  }
  if (v36 >= 0) {
    unint64_t v29 = (const char *)&v34;
  }
  else {
    unint64_t v29 = (const char *)v34;
  }
  uint64_t v30 = sub_1002957A0(8, v28, v29, a5);
  if (v36 < 0) {
    operator delete(v34);
  }
  if (((char)v38 & 0x80000000) == 0)
  {
    if ((_DWORD)v30) {
      goto LABEL_40;
    }
LABEL_43:
    __int128 v53 = 0u;
    __int128 v54 = 0u;
    *(_OWORD *)std::string __str = 0u;
    __int128 v52 = 0u;
    sub_1003FE1B4(a2, v37);
    if ((v38 & 0x80u) == 0) {
      uint64_t v31 = v37;
    }
    else {
      uint64_t v31 = (void **)v37[0];
    }
    strlcpy(__str, (const char *)v31, 0x40uLL);
    unsigned __int8 v32 = v48;
    sub_1003FE1B4(a2, v37);
    unint64_t v33 = v38;
    if ((v38 & 0x80u) != 0) {
      unint64_t v33 = (unint64_t)v37[1];
    }
    sub_10056AB04(&v34, __str, v33 + 1);
    sub_10032B1F8((uint64_t)v32, 8, (uint64_t)&v34);
    unint64_t v34 = &off_10087FAA8;
    if (v35) {
      sub_1002CD254(v35);
    }
    goto LABEL_54;
  }

  operator delete(v37[0]);
  if (!(_DWORD)v30) {
    goto LABEL_43;
  }
LABEL_40:
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR)) {
    sub_10066C538();
  }
LABEL_54:
  if (v48) {
    sub_1002CD254(v48);
  }
  return v30;
}

void sub_10032CAF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36, uint64_t a37, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, uint64_t a44, int a45, __int16 a46, char a47, char a48, void *a49, uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,unsigned int *a56)
{
  if (a56) {
    sub_1002CD254(a56);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032CC04(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v21 = *(_DWORD *)(a2 + 128);
  __int16 v22 = *(_WORD *)(a2 + 132);
  int v7 = (uint64_t **)(a1 + 8);
  sub_1003FE1B4((unsigned __int8 *)&v21, __p);
  char v8 = (uint64_t *)sub_100024098((uint64_t)v7, (const void **)__p);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if ((uint64_t *)(a1 + 16) != v8)
  {
    for (; a3; --a3)
    {
      uint64_t v9 = v8[8];
      int v10 = *a4++;
      LODWORD(__p[0]) = v10;
      sub_10032E7EC(v9 + 16, (int *)__p);
    }

    int v11 = (void *)v8[8];
    uint64_t v12 = v11[4];
    if (v12 != 1)
    {
      if (v12) {
        return;
      }
      unsigned int v13 = (void *)v11[3];
      goto LABEL_9;
    }

    unsigned int v13 = (void *)v11[3];
    if (v13)
    {
      uint64_t v14 = (int *)(v11 + 3);
      uint64_t v15 = v11[3];
      do
      {
        int v16 = *(_DWORD *)(v15 + 32);
        BOOL v17 = v16 < 8;
        if (v16 >= 8) {
          int v18 = (uint64_t *)v15;
        }
        else {
          int v18 = (uint64_t *)(v15 + 8);
        }
        if (!v17) {
          uint64_t v14 = (int *)v15;
        }
        uint64_t v15 = *v18;
      }

      while (*v18);
      if (v14 != (int *)(v11 + 3) && v14[8] <= 8)
      {
LABEL_9:
        sub_10032E424((uint64_t)(v11 + 2), v13);
        v11[3] = 0LL;
        void v11[2] = v11 + 3;
        void v11[4] = 0LL;
        sub_1001FDBCC(v7, v8);
        sub_10032E4C4((uint64_t)(v8 + 4));
        operator delete(v8);
      }
    }
  }

void sub_10032CD48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032CD64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v8 = *(_DWORD *)(a3 + 128);
  __int16 v9 = *(_WORD *)(a3 + 132);
  uint64_t v10 = 0x400000002LL;
  sub_10032CC04(a1, a3, 2LL, (int *)&v10);
  sub_1003FE1B4((unsigned __int8 *)&v8, __p);
  if (v7 >= 0) {
    BOOL v3 = (char *)__p;
  }
  else {
    BOOL v3 = (char *)__p[0];
  }
  uint64_t v4 = sub_1002969F4(v3, 6u);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_10032CE1C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032CE40(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 128);
  __int16 v10 = *(_WORD *)(a2 + 132);
  int v8 = 1;
  int v9 = v2;
  sub_10032CC04(a1, a2, 1LL, &v8);
  sub_1003FE1B4((unsigned __int8 *)&v9, __p);
  if (v7 >= 0) {
    BOOL v3 = (char *)__p;
  }
  else {
    BOOL v3 = (char *)__p[0];
  }
  uint64_t v4 = sub_1002969F4(v3, 1u);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_10032CEC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032CEDC(uint64_t a1, uint64_t a2)
{
  return sandbox_extension_consume(a2);
}

uint64_t sub_10032CEE4(uint64_t a1, uint64_t a2)
{
  return sandbox_extension_release(a2);
}

uint64_t sub_10032CEEC(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4)
{
  int v23 = *(_DWORD *)(a2 + 128);
  __int16 v24 = *(_WORD *)(a2 + 132);
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  *(_OWORD *)std::string __str = 0u;
  __int128 v26 = 0u;
  uint64_t v21 = 0LL;
  __int16 v22 = 0LL;
  sub_1003FE1B4((unsigned __int8 *)&v23, __p);
  sub_10032B250(a1, (const void **)__p, &v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  snprintf( __str,  0x3FuLL,  "%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",  *a4,  a4[1],  a4[2],  a4[3],  a4[4],  a4[5],  a4[6],  a4[7],  a4[8],  a4[9],  a4[10],  a4[11],  a4[12],  a4[13],  a4[14],  a4[15]);
  HIBYTE(v2_Block_object_dispose(va, 8) = 0;
  if (a3)
  {
    uint64_t v7 = 0LL;
    if (a3 != 1) {
      goto LABEL_23;
    }
    sub_1003FE1B4((unsigned __int8 *)&v23, &v16);
    if (v18 >= 0) {
      int v8 = (char *)&v16;
    }
    else {
      int v8 = (char *)v16;
    }
    uint64_t v9 = sub_1002957A0(1024, v8, __str, 1);
  }

  else
  {
    sub_1003FE1B4((unsigned __int8 *)&v23, &v16);
    if (v18 >= 0) {
      __int16 v10 = (char *)&v16;
    }
    else {
      __int16 v10 = (char *)v16;
    }
    uint64_t v9 = sub_1002957A0(512, v10, __str, 1);
  }

  uint64_t v7 = v9;
  if (v18 < 0)
  {
    operator delete(v16);
    if ((_DWORD)v7) {
      goto LABEL_23;
    }
  }

  else if ((_DWORD)v9)
  {
    goto LABEL_23;
  }

  if (a3 == 1)
  {
    unsigned int v13 = v22;
    size_t v14 = strlen(__str);
    sub_10056AB04(&v16, __str, v14 + 1);
    sub_10032B1F8((uint64_t)v13, 1024, (uint64_t)&v16);
  }

  else
  {
    int v11 = v22;
    size_t v12 = strlen(__str);
    sub_10056AB04(&v16, __str, v12 + 1);
    sub_10032B1F8((uint64_t)v11, 512, (uint64_t)&v16);
  }

  int v16 = &off_10087FAA8;
  if (v17) {
    sub_1002CD254(v17);
  }
  uint64_t v7 = 0LL;
LABEL_23:
  if (v22) {
    sub_1002CD254(v22);
  }
  return v7;
}

void sub_10032D144( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *__p, unsigned int *a27, int a28, __int16 a29, char a30, char a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, unsigned int *a39)
{
  if (a27) {
    sub_1002CD254(a27);
  }
  if (a39) {
    sub_1002CD254(a39);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032D1C8(uint64_t a1, uint64_t a2, int a3)
{
  int v16 = *(_DWORD *)(a2 + 128);
  __int16 v17 = *(_WORD *)(a2 + 132);
  sub_1003FE1B4((unsigned __int8 *)&v16, &__p);
  uint64_t v6 = sub_100024098(a1 + 8, (const void **)&__p);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  if (a1 + 16 == v6) {
    return 150LL;
  }
  size_t v14 = 0LL;
  uint64_t v15 = 0LL;
  sub_10032BA60(*(void *)(v6 + 64), dword_1006C1AE8[a3], &v14);
  if (sub_10056AAC8((uint64_t)&v14))
  {
    uint64_t v7 = (os_log_s *)qword_1008F75E0;
    if (!os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_INFO)) {
      goto LABEL_21;
    }
    sub_1003CF00C(a2, buf);
    int v8 = v19 >= 0 ? buf : *(uint8_t **)buf;
    LODWORD(__p) = 67109634;
    HIDWORD(__p) = a3;
    __int16 v21 = 2080;
    __int16 v22 = v8;
    __int16 v23 = 1024;
    int v24 = 150;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Wireless Splitter call to retrieve key chain key data of type %d for device %s failed with result %d",  (uint8_t *)&__p,  0x18u);
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    uint64_t v9 = *(void **)buf;
    goto LABEL_20;
  }

  sub_10056AAF0((uint64_t)&v14);
  if (sub_10056AAD8((uint64_t)&v14))
  {
    uint64_t v10 = 0LL;
    goto LABEL_22;
  }

  int v11 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, &__p);
    size_t v12 = v24 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter key was empty for device %s",  buf,  0xCu);
    if (SHIBYTE(v24) < 0)
    {
      uint64_t v9 = __p;
LABEL_20:
      operator delete(v9);
    }
  }

void sub_10032D3F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a11) {
    sub_1002CD254(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032D444(uint64_t a1, uint64_t a2)
{
  int v7 = *(_DWORD *)(a2 + 128);
  __int16 v8 = *(_WORD *)(a2 + 132);
  uint64_t v9 = 0x40000000200LL;
  sub_10032CC04(a1, a2, 2LL, (int *)&v9);
  sub_1003FE1B4((unsigned __int8 *)&v7, __p);
  if (v6 >= 0) {
    int v2 = (char *)__p;
  }
  else {
    int v2 = (char *)__p[0];
  }
  uint64_t v3 = sub_1002969F4(v2, 0x600u);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_10032D4F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032D51C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  int v38 = *(_DWORD *)(a2 + 128);
  __int16 v39 = *(_WORD *)(a2 + 132);
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  *(_OWORD *)std::string __str = 0u;
  __int128 v44 = 0u;
  if (a3 > 4) {
    return 3LL;
  }
  uint64_t v36 = 0LL;
  int v37 = 0LL;
  sub_1003FE1B4((unsigned __int8 *)&v38, __p);
  sub_10032B250(a1, (const void **)__p, &v36);
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  int v9 = *a4;
  int v10 = a4[1];
  int v11 = a4[2];
  int v12 = a4[4];
  if (a3 != 4)
  {
    snprintf( __str,  0x3FuLL,  "%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",  v9,  v10,  v11,  a4[3],  v12,  a4[5],  a4[6],  a4[7],  a4[8],  a4[9],  a4[10],  a4[11],  a4[12],  a4[13],  a4[14],  a4[15]);
    HIBYTE(v46) = 0;
    switch(a3)
    {
      case 0u:
        sub_1003FE1B4((unsigned __int8 *)&v38, buf);
        if (v42 >= 0) {
          __int16 v17 = buf;
        }
        else {
          __int16 v17 = *(char **)buf;
        }
        uint64_t v14 = sub_1002957A0(64, v17, __str, 0);
        goto LABEL_10;
      case 1u:
        sub_1003FE1B4((unsigned __int8 *)&v38, buf);
        if (v42 >= 0) {
          char v20 = buf;
        }
        else {
          char v20 = *(char **)buf;
        }
        uint64_t v14 = sub_1002957A0(128, v20, __str, 0);
        goto LABEL_10;
      case 2u:
        sub_1003FE1B4((unsigned __int8 *)&v38, buf);
        if (v42 >= 0) {
          __int16 v21 = buf;
        }
        else {
          __int16 v21 = *(char **)buf;
        }
        uint64_t v14 = sub_1002957A0(16, v21, __str, 0);
        goto LABEL_10;
      case 3u:
        sub_1003FE1B4((unsigned __int8 *)&v38, buf);
        if (v42 >= 0) {
          __int16 v22 = buf;
        }
        else {
          __int16 v22 = *(char **)buf;
        }
        uint64_t v14 = sub_1002957A0(32, v22, __str, 0);
        goto LABEL_10;
      default:
        goto LABEL_44;
    }
  }

  snprintf(__str, 0x14uLL, "%02X-%02X-%02X-%02X-%02x", v9, v10, v11, a4[3], v12);
  BYTE4(v44) = 0;
  sub_1003FE1B4((unsigned __int8 *)&v38, buf);
  if (v42 >= 0) {
    unsigned int v13 = buf;
  }
  else {
    unsigned int v13 = *(char **)buf;
  }
  uint64_t v14 = sub_1002957A0(256, v13, __str, 0);
LABEL_10:
  uint64_t v4 = v14;
  if (SHIBYTE(v42) < 0)
  {
    operator delete(*(void **)buf);
    if ((_DWORD)v4) {
      goto LABEL_12;
    }
LABEL_24:
    switch(a3)
    {
      case 0u:
        char v18 = v37;
        size_t v19 = strlen(__str);
        sub_10056AB04(buf, __str, v19 + 1);
        sub_10032B1F8((uint64_t)v18, 64, (uint64_t)buf);
        goto LABEL_42;
      case 1u:
        __int128 v29 = v37;
        size_t v30 = strlen(__str);
        sub_10056AB04(buf, __str, v30 + 1);
        sub_10032B1F8((uint64_t)v29, 128, (uint64_t)buf);
        goto LABEL_42;
      case 2u:
        __int16 v23 = v37;
        size_t v24 = strlen(__str);
        sub_10056AB04(buf, __str, v24 + 1);
        sub_10032B1F8((uint64_t)v23, 16, (uint64_t)buf);
        goto LABEL_42;
      case 3u:
        size_t v25 = v37;
        size_t v26 = strlen(__str);
        sub_10056AB04(buf, __str, v26 + 1);
        sub_10032B1F8((uint64_t)v25, 32, (uint64_t)buf);
        goto LABEL_42;
      case 4u:
        __int128 v27 = v37;
        size_t v28 = strlen(__str);
        sub_10056AB04(buf, __str, v28 + 1);
        sub_10032B1F8((uint64_t)v27, 256, (uint64_t)buf);
LABEL_42:
        *(void *)__int128 buf = &off_10087FAA8;
        if (*(void *)&buf[8]) {
          sub_1002CD254(*(unsigned int **)&buf[8]);
        }
        break;
      default:
        break;
    }

void sub_10032D9A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, uint64_t a35, unsigned int *a36, uint64_t a37, void *__p, unsigned int *a39, int a40, __int16 a41, char a42, char a43)
{
  if (a39) {
    sub_1002CD254(a39);
  }
  if (a36) {
    sub_1002CD254(a36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032DA60(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  int v21 = *(_DWORD *)(a2 + 128);
  __int16 v22 = *(_WORD *)(a2 + 132);
  __src[0] = 0LL;
  __src[1] = 0LL;
  if (a3 > 4) {
    return 3LL;
  }
  sub_1003FE1B4((unsigned __int8 *)&v21, &__p);
  uint64_t v9 = sub_100024098(a1 + 8, (const void **)&__p);
  if (SHIBYTE(v29) < 0) {
    operator delete(__p);
  }
  if (a1 + 16 == v9) {
    return 150LL;
  }
  size_t v19 = 0LL;
  char v20 = 0LL;
  sub_10032BA60(*(void *)(v9 + 64), dword_1006C1AFC[a3], &v19);
  if (sub_10056AAC8((uint64_t)&v19))
  {
    int v10 = (os_log_s *)qword_1008F75E0;
    if (!os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_INFO)) {
      goto LABEL_27;
    }
    sub_1003CF00C(a2, buf);
    int v11 = v24 >= 0 ? buf : *(uint8_t **)buf;
    LODWORD(__p) = 67109634;
    HIDWORD(__p) = a3;
    __int16 v26 = 2082;
    __int128 v27 = v11;
    __int16 v28 = 1024;
    int v29 = 150;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Call to retrieve key chain magic key data of type %d for device %{public}s failed with result %d",  (uint8_t *)&__p,  0x18u);
    if ((v24 & 0x80000000) == 0) {
      goto LABEL_27;
    }
    int v12 = *(void **)buf;
    goto LABEL_26;
  }

  uint64_t v13 = sub_10056AAF0((uint64_t)&v19);
  if (sub_10056AAD8((uint64_t)&v19))
  {
    if (a3 == 4) {
      size_t v14 = 5LL;
    }
    else {
      size_t v14 = 16LL;
    }
    if (sub_10032C538(v13, (uint64_t)__src, v14))
    {
      memcpy(a4, __src, v14);
      uint64_t v4 = 0LL;
    }

    else
    {
      char v18 = (os_log_s *)qword_1008F75E0;
      if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(a2, &__p);
        sub_10066C698((uint64_t *)&__p, v13, buf, v18);
      }

      uint64_t v4 = 151LL;
    }

    goto LABEL_28;
  }

  uint64_t v15 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, &__p);
    int v16 = v29 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "magic key was empty for device %{public}s",  buf,  0xCu);
    if (SHIBYTE(v29) < 0)
    {
      int v12 = __p;
LABEL_26:
      operator delete(v12);
    }
  }

void sub_10032DD2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a11) {
    sub_1002CD254(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032DD7C(uint64_t a1, uint64_t a2)
{
  int v7 = *(_DWORD *)(a2 + 128);
  __int16 v8 = *(_WORD *)(a2 + 132);
  sub_10032CC04(a1, a2, 5LL, dword_1006C1AFC);
  sub_1003FE1B4((unsigned __int8 *)&v7, __p);
  if (v6 >= 0) {
    int v2 = (char *)__p;
  }
  else {
    int v2 = (char *)__p[0];
  }
  uint64_t v3 = sub_1002969F4(v2, 0x1F0u);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_10032DDFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_10032DE18(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  unsigned int v9 = 0;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  int v5 = sub_100298544(4, (UInt8 *)&v14, 32LL, &v9);
  char v6 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109376;
    int v11 = v5;
    __int16 v12 = 1024;
    unsigned int v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "readCloudMasterKeys res = %d, %d", buf, 0xEu);
  }

  if (!v5 && v9 >= 0x20)
  {
    double result = *(double *)&v14;
    __int128 v8 = v15;
    *a2 = v14;
    *a3 = v8;
  }

  return result;
}

uint64_t sub_10032DF1C(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  unsigned int v10 = 0;
  __int128 v15 = 0uLL;
  __int16 v9 = 0;
  int v8 = 0;
  uint64_t v5 = 1LL;
  if (!sub_100298544(8, (UInt8 *)&v15, 16LL, &v10) && v10 >= 0x10)
  {
    uint64_t v5 = sub_100298544(9, (UInt8 *)&v8, 6LL, &v10);
    char v6 = (os_log_s *)qword_1008F75E0;
    if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109376;
      int v12 = v5;
      __int16 v13 = 1024;
      unsigned int v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "readCloudMasterKeys res = %d, %d", buf, 0xEu);
    }

    *a2 = v15;
    *(_WORD *)(a3 + 4) = v9;
    *(_DWORD *)a3 = v8;
  }

  return v5;
}

BOOL sub_10032E044(uint64_t a1, _OWORD *a2, __int128 *a3)
{
  unsigned int v7 = 32;
  memset(v8, 0, sizeof(v8));
  __int128 v4 = *a3;
  v9[0] = *a2;
  v9[1] = v4;
  int v5 = sub_10029871C(4u, (const UInt8 *)v9, v7);
  if (v5 && os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_FAULT)) {
    sub_10066C710();
  }
  return v5 != 0;
}

BOOL sub_10032E124(uint64_t a1, UInt8 *a2, const UInt8 *a3)
{
  unsigned int v8 = 16;
  int v6 = sub_10029871C(9u, a3, 6u);
  if (v6 && os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_FAULT)) {
    sub_10066C770();
  }
  return v6 != 0;
}

uint64_t sub_10032E20C()
{
  uint64_t v0 = sub_100298924(4);
  uint64_t v1 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = v0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "deleteCloudMasterKeys result %d",  (uint8_t *)v3,  8u);
  }

  return v0;
}

uint64_t sub_10032E2B8()
{
  int v0 = sub_100298924(9);
  uint64_t v1 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 67109120;
    int v6 = v0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "deleteCloudFCIRKAddress address result %d",  (uint8_t *)&v5,  8u);
  }

  uint64_t v2 = sub_100298924(8);
  uint64_t v3 = (os_log_s *)qword_1008F75E0;
  if (os_log_type_enabled((os_log_t)qword_1008F75E0, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 67109120;
    int v6 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "deleteCloudFCIRKAddress IRK result %d",  (uint8_t *)&v5,  8u);
  }

  return v2;
}

uint64_t sub_10032E3BC(uint64_t a1)
{
  *(void *)a1 = &off_100891928;
  sub_10032E424(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_10032E3F0(void **a1)
{
  *a1 = &off_100891928;
  sub_10032E424((uint64_t)(a1 + 2), a1[3]);
  operator delete(a1);
}

void sub_10032E424(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10032E424(a1, *a2);
    sub_10032E424(a1, a2[1]);
    a2[5] = &off_10087FAA8;
    __int128 v4 = (unsigned int *)a2[6];
    if (v4) {
      sub_1002CD254(v4);
    }
    operator delete(a2);
  }

void sub_10032E47C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10032E47C(a1, *a2);
    sub_10032E47C(a1, a2[1]);
    sub_10032E4C4((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void sub_10032E4C4(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_100891968;
  uint64_t v2 = *(unsigned int **)(a1 + 32);
  if (v2) {
    sub_1002CD254(v2);
  }
}

void sub_10032E510(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_10032E540(_Unwind_Exception *a1)
{
}

uint64_t **sub_10032E554(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unsigned int v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        __int16 v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        unsigned int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        unsigned int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    __int16 v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = &off_10087FAA8;
    *((void *)v11 + 6) = 0LL;
    sub_100029630(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

void sub_10032E61C(void *__p)
{
  *__int128 __p = &off_100891968;
  uint64_t v2 = (unsigned int *)__p[1];
  if (v2) {
    sub_1002CD254(v2);
  }
  operator delete(__p);
}

uint64_t *sub_10032E654(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v11 = 0LL;
  int v6 = (uint64_t **)sub_10023E6A4((uint64_t)a1, &v11, a2);
  unsigned int v7 = *v6;
  if (!*v6)
  {
    int v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_10032E708((uint64_t)a1, a4, v10);
    sub_100029630(a1, v11, v8, v10[0]);
    unsigned int v7 = v10[0];
    v10[0] = 0LL;
    sub_10032E7A8((uint64_t)v10, 0LL);
  }

  return v7;
}

_BYTE *sub_10032E708@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  int v6 = operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  double result = v6 + 4;
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    double result = sub_100024238(result, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)double result = v9;
  }

  v6[7] = &off_100891968;
  v6[8] = 0LL;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_10032E790(_Unwind_Exception *a1)
{
}

void sub_10032E7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_10032E4C4((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

uint64_t sub_10032E7EC(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0LL;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      unsigned int v7 = (uint64_t *)v2;
    }
    else {
      unsigned int v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }

  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0LL;
  }
  sub_10032E850((uint64_t **)a1, (uint64_t *)v4);
  return 1LL;
}

uint64_t *sub_10032E850(uint64_t **a1, uint64_t *a2)
{
  int v3 = sub_1001FDBCC(a1, a2);
  a2[5] = (uint64_t)&off_10087FAA8;
  uint64_t v4 = (unsigned int *)a2[6];
  if (v4) {
    sub_1002CD254(v4);
  }
  operator delete(a2);
  return v3;
}

void *sub_10032E898(void *result, uint64_t a2, int a3, float a4)
{
  if (v4 >= 0) {
    int v5 = result;
  }
  else {
    int v5 = (void *)*result;
  }
  *(float *)a2 = a4;
  *(void *)(a2 + 4) = v5;
  *(_WORD *)(a2 + 12) = 1024;
  *(_DWORD *)(a2 + 14) = a3;
  return result;
}

uint64_t sub_10032E8BC(uint64_t a1, __int128 *a2, dispatch_object_t object)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  uint64_t v5 = a1 + 32;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100024238((_BYTE *)v5, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v6 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }

  *(void *)(a1 + 56) = 0LL;
  if (object)
  {
    dispatch_retain(object);
    *(void *)(a1 + 56) = object;
  }

  return a1;
}

uint64_t sub_10032E934(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 56);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 56) = 0LL;
  }

  return a1;
}

void sub_10032E974(uint64_t a1)
{
  uint64_t v2 = *(dispatch_object_s **)(a1 + 16);
  if (v2)
  {
    dispatch_set_finalizer_f(v2, (dispatch_function_t)sub_10032E9D0);
    sub_10032EA10(a1);
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
  }

  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
    int v3 = (void *)sub_10032E934(a1);
    operator delete(v3);
  }

void sub_10032E9D0(os_unfair_lock_s *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)sub_10032E934((uint64_t)a1);
    operator delete(v2);
  }

void sub_10032EA10(uint64_t a1)
{
  uint64_t v2 = *(dispatch_source_s **)(a1 + 16);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
  }

void sub_10032EA44(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 4) = 1;
  ++*(_DWORD *)(a1 + 8);
  if (!*(void *)(a1 + 16)) {
    sub_10032EA90((dispatch_source_t *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_10032EA90(dispatch_source_t *a1)
{
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(17LL, 0LL);
  dispatch_source_t v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, global_queue);
  a1[2] = v3;
  dispatch_set_context(v3, a1);
  dispatch_source_set_event_handler_f(a1[2], (dispatch_function_t)sub_10032EB54);
  int v4 = a1[2];
  dispatch_time_t v5 = dispatch_time(0LL, 10000000000LL);
  dispatch_source_set_timer(v4, v5, 0x2540BE400uLL, 0x3B9ACA00uLL);
  dispatch_resume(a1[2]);
}

void sub_10032EB28(uint64_t a1)
{
  *(_BYTE *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_10032EB58(uint64_t a1)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 12) != v4)
  {
    *(_DWORD *)(a1 + 12) = v4;
LABEL_17:
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
    return;
  }

  if (!*(_BYTE *)(a1 + 4))
  {
    if (*(void *)(a1 + 16)) {
      sub_10032EA10(a1);
    }
    goto LABEL_17;
  }

  if (*(void *)(a1 + 56) && !*(_DWORD *)(a1 + 24))
  {
    dispatch_time_t v5 = (void *)(a1 + 32);
    __int128 v6 = (void *)(a1 + 32);
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v6));
    int v8 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&_BYTE buf[14] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Watchdog dispatch scheduled: %@ (%{public}s)",  buf,  0x16u);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10032F020;
    block[3] = &unk_1008800B8;
    id v31 = v7;
    uint64_t v32 = a1;
    id v9 = v7;
    dispatch_block_t v10 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INITIATED, 0, block);
    dispatch_async(*(dispatch_queue_t *)(a1 + 56), v10);
  }

  ++*(_DWORD *)(a1 + 24);
  uint64_t v11 = sub_1002E6E00();
  if (*(_DWORD *)(a1 + 24) == 3)
  {
    uint64_t v12 = sub_1002E6E00();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v12 + 672LL))(v12) & 1) == 0)
    {
      uint64_t v13 = sub_1002E6E00();
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v13 + 8LL))(v13))
      {
        while (1)
        {
          sub_10032F0E0(a1);
          __break(1u);
LABEL_27:
          int v14 = *(char *)(a1 + 55);
          if (v14 >= 0) {
            __int128 v15 = (unsigned __int8 *)(a1 + 32);
          }
          else {
            __int128 v15 = *(unsigned __int8 **)(a1 + 32);
          }
          if (v14 >= 0) {
            int64_t v16 = *(unsigned __int8 *)(a1 + 55);
          }
          else {
            int64_t v16 = *(void *)(a1 + 40);
          }
          while (1)
          {
            if ((char)v2[55] < 0)
            {
              char v18 = (char *)*((void *)v2 + 4);
              uint64_t v17 = *((void *)v2 + 5);
            }

            else
            {
              uint64_t v17 = v2[55];
              char v18 = (char *)(v2 + 32);
            }

            if (!v16) {
              break;
            }
            if (v17 >= v16)
            {
              __int16 v22 = &v18[v17];
              int v23 = *v15;
              char v24 = v18;
              while (1)
              {
                uint64_t v25 = v17 - v16;
                if (v25 == -1) {
                  goto LABEL_38;
                }
                __int16 v26 = (char *)memchr(v24, v23, v25 + 1);
                if (!v26) {
                  goto LABEL_38;
                }
                __int128 v27 = v26;
                if (!memcmp(v26, v15, v16)) {
                  break;
                }
                char v24 = v27 + 1;
                uint64_t v17 = v22 - (v27 + 1);
                if (v17 < v16) {
                  goto LABEL_38;
                }
              }

              if (v27 != v22 && v27 - v18 != -1) {
                break;
              }
            }

void sub_10032EFCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, char a24, char *a25)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_10023E78C((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

void sub_10032F020(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    dispatch_time_t v5 = (void *)(v4 + 32);
    int v6 = 138412546;
    uint64_t v7 = v3;
    __int16 v8 = 2082;
    id v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Watchdog dispatch performed: %@ (%{public}s)",  (uint8_t *)&v6,  0x16u);
  }

void sub_10032F0E0(uint64_t a1)
{
  uint64_t v2 = (const char **)(a1 + 32);
  uint64_t v3 = (const char *)(a1 + 32);
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  *(_OWORD *)std::string __str = 0u;
  __int128 v13 = 0u;
  snprintf(__str, 0x80uLL, "XPC watchdog timeout on thread: %s", v3);
  qword_1008D9DB8 = (uint64_t)__str;
  uint64_t v4 = _os_log_pack_size(12LL);
  int v6 = &__str[-((__chkstk_darwin(v4, v5) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = __error();
  uint64_t v8 = _os_log_pack_fill(v6, v4, *v7, &_mh_execute_header, "XPC watchdog timeout on thread: %{public}s");
  *(_DWORD *)uint64_t v8 = 136446210;
  *(void *)(v8 + 4) = v2;
  os_log_t v9 = os_log_create("com.apple.bluetooth", "CBCrash");
  if (v9) {
    os_log_t v10 = v9;
  }
  else {
    os_log_t v10 = (os_log_t)&_os_log_default;
  }
  qword_1008D9DB8 = os_log_pack_send_and_compose(v6, v10, 16LL, 0LL, 0LL);
  uint64_t v11 = (void *)abort_with_payload(18LL, 2LL, v6, v4, qword_1008D9DB8, 0LL);
  sub_10032F23C(v11);
}

void sub_10032F23C(id a1)
{
  uint64_t v1 = operator new(0x18uLL);
  *(void *)uint64_t v1 = 0LL;
  v1[2] = 0;
  *((_BYTE *)v1 + 12) = 0;
  v1[4] = 0;
  qword_1008D9058 = (uint64_t)v1;
}

xpc_object_t sub_10032F26C(uint64_t **a1)
{
  xpc_object_t v14 = xpc_array_create(0LL, 0LL);
  for (std::string::size_type i = *a1; i != a1[1]; ++i)
  {
    uint64_t v2 = *i;
    xpc_object_t xdict = sub_10032F548(*i);
    xpc_dictionary_set_int64(xdict, "kCBMsgArgAttributeID", *(unsigned __int16 *)(v2 + 16));
    xpc_object_t v3 = xpc_array_create(0LL, 0LL);
    xpc_object_t v4 = xpc_array_create(0LL, 0LL);
    __int16 v22 = 0LL;
    int v23 = 0LL;
    uint64_t v24 = 0LL;
    sub_100240540(&v22, v2 + 104);
    for (j = (uint64_t *)v22; j != v23; ++j)
    {
      xpc_object_t v6 = sub_10032F654(*j);
      xpc_dictionary_set_int64(v6, "kCBMsgArgAttributeID", *(unsigned __int16 *)(*j + 104));
      xpc_array_append_value(v3, v6);
      xpc_release(v6);
    }

    __int128 v19 = 0LL;
    char v20 = 0LL;
    uint64_t v21 = 0LL;
    sub_100240540(&v19, v2 + 136);
    for (k = (uint64_t *)v19; k != v20; ++k)
    {
      xpc_object_t v8 = xpc_array_create(0LL, 0LL);
      xpc_object_t v9 = sub_10032F748(*k);
      xpc_dictionary_set_int64(v9, "kCBMsgArgAttributeID", *(unsigned __int16 *)(*k + 16));
      __int128 __p = 0LL;
      __int128 v17 = 0LL;
      uint64_t v18 = 0LL;
      sub_100240540(&__p, *k + 104);
      for (m = (uint64_t *)__p; m != v17; ++m)
      {
        xpc_object_t v11 = sub_10032F8A4(*m);
        xpc_dictionary_set_int64(v11, "kCBMsgArgAttributeID", *(unsigned __int16 *)(*m + 16));
        xpc_array_append_value(v8, v11);
        xpc_release(v11);
      }

      xpc_dictionary_set_value(v9, "kCBMsgArgDescriptors", v8);
      xpc_array_append_value(v4, v9);
      xpc_release(v9);
      xpc_release(v8);
      if (__p)
      {
        __int128 v17 = (uint64_t *)__p;
        operator delete(__p);
      }
    }

    xpc_dictionary_set_value(xdict, "kCBMsgArgCharacteristics", v4);
    xpc_dictionary_set_value(xdict, "kCBMsgArgIncludedServices", v3);
    xpc_array_append_value(v14, xdict);
    xpc_release(v3);
    xpc_release(v4);
    xpc_release(xdict);
    if (v19)
    {
      char v20 = (uint64_t *)v19;
      operator delete(v19);
    }

    if (v22)
    {
      int v23 = (uint64_t *)v22;
      operator delete(v22);
    }
  }

  return v14;
}

void sub_10032F4E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

xpc_object_t sub_10032F548(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  bytes[0] = 0LL;
  bytes[1] = 0LL;
  __n128 v7 = *(__n128 *)(a1 + 72);
  int v8 = *(_DWORD *)(a1 + 88);
  sub_100634334(&v5, &v7);
  size_t v3 = sub_10063443C((unsigned __int8 *)&v5, bytes);
  xpc_dictionary_set_int64(v2, "kCBMsgArgAttributeID", *(unsigned int *)(a1 + 16));
  xpc_dictionary_set_data(v2, "kCBMsgArgUUID", bytes, v3);
  xpc_dictionary_set_BOOL(v2, "kCBMsgArgType", *(_BYTE *)(a1 + 96));
  xpc_dictionary_set_int64(v2, "kCBMsgArgServiceStartHandle", **(unsigned __int16 **)(a1 + 8));
  xpc_dictionary_set_int64(v2, "kCBMsgArgServiceEndHandle", *(unsigned __int16 *)(a1 + 48));
  return v2;
}

xpc_object_t sub_10032F654(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  bytes[0] = 0LL;
  bytes[1] = 0LL;
  __n128 v7 = *(__n128 *)(a1 + 76);
  int v8 = *(_DWORD *)(a1 + 92);
  sub_100634334(&v5, &v7);
  size_t v3 = sub_10063443C((unsigned __int8 *)&v5, bytes);
  xpc_dictionary_set_int64(v2, "kCBMsgArgAttributeID", *(unsigned int *)(a1 + 104));
  xpc_dictionary_set_data(v2, "kCBMsgArgUUID", bytes, v3);
  xpc_dictionary_set_int64(v2, "kCBMsgArgServiceStartHandle", *(unsigned __int16 *)(a1 + 72));
  xpc_dictionary_set_int64(v2, "kCBMsgArgServiceEndHandle", *(unsigned __int16 *)(a1 + 74));
  return v2;
}

xpc_object_t sub_10032F748(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  bytes[0] = 0LL;
  bytes[1] = 0LL;
  __n128 v10 = *(__n128 *)(a1 + 76);
  int v11 = *(_DWORD *)(a1 + 92);
  sub_100634334(&v8, &v10);
  size_t v3 = sub_10063443C((unsigned __int8 *)&v8, bytes);
  xpc_dictionary_set_int64(v2, "kCBMsgArgAttributeID", *(unsigned int *)(a1 + 16));
  xpc_dictionary_set_data(v2, "kCBMsgArgUUID", bytes, v3);
  xpc_dictionary_set_int64(v2, "kCBMsgArgCharacteristicHandle", **(unsigned __int16 **)(a1 + 8));
  xpc_dictionary_set_int64(v2, "kCBMsgArgCharacteristicValueHandle", *(unsigned __int16 *)(a1 + 74));
  xpc_dictionary_set_int64(v2, "kCBMsgArgCharacteristicProperties", *(unsigned __int8 *)(a1 + 72));
  uint64_t v4 = *(void *)(a1 + 96);
  if (v4)
  {
    __n128 v5 = (const void *)sub_10056AAF0(v4 + 72);
    size_t v6 = sub_10056AAD8(v4 + 72);
    xpc_dictionary_set_data(v2, "kCBMsgArgData", v5, v6);
    xpc_dictionary_set_int64(v2, "kCBMsgArgAttributePermissions", *(unsigned __int8 *)(*(void *)(v4 + 8) + 26LL));
  }

  return v2;
}

xpc_object_t sub_10032F8A4(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  bytes[0] = 0LL;
  bytes[1] = 0LL;
  __n128 v12 = 0uLL;
  int v13 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(v3 + 20);
  *(_OWORD *)__int128 __p = *(_OWORD *)(v3 + 4);
  int v10 = v4;
  sub_100634334(&v12, (__n128 *)__p);
  unsigned int v5 = sub_10063443C((unsigned __int8 *)&v12, bytes);
  xpc_dictionary_set_int64(v2, "kCBMsgArgAttributeID", *(unsigned int *)(a1 + 16));
  xpc_dictionary_set_data(v2, "kCBMsgArgUUID", bytes, v5);
  xpc_dictionary_set_int64(v2, "kCBMsgArgDescriptorHandle", **(unsigned __int16 **)(a1 + 8));
  if (*(_BYTE *)(a1 + 20))
  {
    sub_100634348((uint64_t)__p, 10496);
    if (sub_1001BEC7C((unsigned __int8 *)&v12, (unsigned __int8 *)__p))
    {
      xpc_dictionary_set_int64(v2, "kCBMsgArgData", *(unsigned __int16 *)(a1 + 72));
    }

    else
    {
      sub_100634348((uint64_t)__p, 10497);
      if (sub_1001BEC7C((unsigned __int8 *)&v12, (unsigned __int8 *)__p))
      {
        sub_10032FB10(a1, __p);
        if (v11 >= 0) {
          size_t v6 = __p;
        }
        else {
          size_t v6 = (void **)__p[0];
        }
        xpc_dictionary_set_string(v2, "kCBMsgArgData", (const char *)v6);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        sub_100634348((uint64_t)__p, 10498);
        if (sub_1001BEC7C((unsigned __int8 *)&v12, (unsigned __int8 *)__p)
          || (sub_100634348((uint64_t)v8, 10499), sub_1001BEC7C((unsigned __int8 *)&v12, v8)))
        {
          xpc_dictionary_set_int64(v2, "kCBMsgArgData", *(unsigned __int16 *)(a1 + 72));
        }

        else
        {
          sub_100634348((uint64_t)__p, 10500);
          if (sub_1001BEC7C((unsigned __int8 *)&v12, (unsigned __int8 *)__p))
          {
            LODWORD(__p[0]) = *(_DWORD *)(a1 + 72);
            BYTE4(__p[0]) = *(_BYTE *)(a1 + 76);
            *(_WORD *)((char *)__p + 5) = *(_WORD *)(a1 + 78);
            xpc_dictionary_set_data(v2, "kCBMsgArgData", __p, 7uLL);
          }

          else
          {
            xpc_dictionary_set_data(v2, "kCBMsgArgData", *(const void **)(a1 + 72), *(unsigned __int16 *)(a1 + 80));
          }
        }
      }
    }
  }

  return v2;
}

void sub_10032FAEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10032FB10@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(_WORD *)(a1 + 80)) {
    return sub_100330694(a2, *(void **)(a1 + 72), *(unsigned __int16 *)(a1 + 80));
  }
  else {
    return sub_10002418C(a2, "");
  }
}

uint64_t sub_10032FB34(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  *(void *)a1 = off_1008919F0;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_10032FB70(uint64_t a1)
{
  return a1;
}

xpc_object_t sub_10032FBA0(id *a1, int a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  (*((void (**)(id *, xpc_object_t, uint64_t))*a1 + 2))(a1, v6, a3);
  *(void *)uuid = 0LL;
  uint64_t v9 = 0LL;
  [a1[2] getUUIDBytes:uuid];
  xpc_dictionary_set_uuid(v6, "kCBMsgArgDeviceUUID", uuid);
  xpc_dictionary_set_int64(v6, "kCBMsgArgResult", a2);
  return v6;
}

void sub_10032FC68(uint64_t a1, void *a2, uint64_t **a3)
{
  if (a3[1] != *a3)
  {
    xpc_object_t v5 = xpc_array_create(0LL, 0LL);
    for (std::string::size_type i = *a3; i != a3[1]; ++i)
    {
      uint64_t v7 = *i;
      uint64_t v9 = *(unsigned __int8 **)(a1 + 24);
      __n128 v8 = *(unsigned __int8 **)(a1 + 32);
      if (v8 != v9)
      {
        __n128 v17 = *(__n128 *)(v7 + 72);
        int v18 = *(_DWORD *)(v7 + 88);
        sub_100634334(&v16, &v17);
        while (!sub_1001BEC7C(v9, (unsigned __int8 *)&v16))
        {
          v9 += 20;
          if (v9 == v8)
          {
            uint64_t v9 = v8;
            break;
          }
        }
      }

      if (qword_1008D5F60 != -1) {
        dispatch_once(&qword_1008D5F60, &stru_100891B20);
      }
      uint64_t v10 = qword_1008D5F58;
      __n128 v17 = *(__n128 *)(v7 + 72);
      int v18 = *(_DWORD *)(v7 + 88);
      sub_100634334(&v16, &v17);
      unsigned int v11 = *(unsigned __int8 *)(a1 + 48);
      uint64_t v12 = *(unsigned int *)(a1 + 52);
      id v13 = *(id *)(a1 + 16);
      LOBYTE(v10) = sub_100556588(v10, (unsigned __int8 *)&v16, v11, v12, v13);

      if ((v10 & 1) != 0)
      {
        xpc_object_t v14 = sub_10032F548(v7);
        xpc_array_set_value(v5, 0xFFFFFFFFFFFFFFFFLL, v14);
        xpc_release(v14);
      }
    }

    xpc_dictionary_set_value(a2, "kCBMsgArgServices", v5);
    xpc_release(v5);
  }

void sub_10032FE38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10032FE50(uint64_t a1, xpc_object_t xdict, uint64_t **a3)
{
  xpc_object_t v3 = xdict;
  if (a3[1] != *a3)
  {
    xpc_object_t v6 = xpc_array_create(0LL, 0LL);
    for (std::string::size_type i = *a3; i != a3[1]; ++i)
    {
      uint64_t v8 = *i;
      uint64_t v10 = *(unsigned __int8 **)(a1 + 32);
      uint64_t v9 = *(unsigned __int8 **)(a1 + 40);
      if (v9 != v10)
      {
        __n128 v18 = *(__n128 *)(v8 + 76);
        int v19 = *(_DWORD *)(v8 + 92);
        sub_100634334(&v17, &v18);
        while (!sub_1001BEC7C(v10, (unsigned __int8 *)&v17))
        {
          v10 += 20;
          if (v10 == v9)
          {
            uint64_t v10 = v9;
            break;
          }
        }
      }

      if (qword_1008D5F60 != -1) {
        dispatch_once(&qword_1008D5F60, &stru_100891B20);
      }
      uint64_t v11 = qword_1008D5F58;
      __n128 v18 = *(__n128 *)(v8 + 76);
      int v19 = *(_DWORD *)(v8 + 92);
      sub_100634334(&v17, &v18);
      unsigned int v12 = *(unsigned __int8 *)(a1 + 56);
      uint64_t v13 = *(unsigned int *)(a1 + 60);
      id v14 = *(id *)(a1 + 16);
      LOBYTE(v11) = sub_100556588(v11, (unsigned __int8 *)&v17, v12, v13, v14);

      if ((v11 & 1) != 0)
      {
        xpc_object_t v15 = sub_10032F654(v8);
        xpc_array_set_value(v6, 0xFFFFFFFFFFFFFFFFLL, v15);
        xpc_release(v15);
      }
    }

    xpc_dictionary_set_value(xdict, "kCBMsgArgServices", v6);
    xpc_release(v6);
    xpc_object_t v3 = xdict;
  }

  xpc_dictionary_set_int64(v3, "kCBMsgArgServiceStartHandle", *(void *)(a1 + 24));
}

void sub_10033003C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100330054(int64_t *a1, xpc_object_t xdict, uint64_t **a3)
{
  if (a3[1] != *a3)
  {
    xpc_object_t v6 = xpc_array_create(0LL, 0LL);
    for (std::string::size_type i = *a3; i != a3[1]; ++i)
    {
      uint64_t v8 = *i;
      uint64_t v9 = (unsigned __int8 *)a1[4];
      uint64_t v10 = (unsigned __int8 *)a1[5];
      if (v10 == v9) {
        goto LABEL_10;
      }
      __n128 v13 = *(__n128 *)(v8 + 76);
      int v14 = *(_DWORD *)(v8 + 92);
      sub_100634334(&v12, &v13);
      while (!sub_1001BEC7C(v9, (unsigned __int8 *)&v12))
      {
        v9 += 20;
        if (v9 == v10)
        {
          uint64_t v9 = v10;
          break;
        }
      }

      if (v9 != (unsigned __int8 *)a1[5])
      {
LABEL_10:
        xpc_object_t v11 = sub_10032F748(v8);
        xpc_array_set_value(v6, 0xFFFFFFFFFFFFFFFFLL, v11);
        xpc_release(v11);
      }
    }

    xpc_dictionary_set_value(xdict, "kCBMsgArgCharacteristics", v6);
    xpc_release(v6);
  }

  xpc_dictionary_set_int64(xdict, "kCBMsgArgServiceStartHandle", a1[3]);
}

void sub_1003301A4(uint64_t a1, xpc_object_t xdict)
{
}

void sub_1003301BC(uint64_t a1, xpc_object_t xdict, uint64_t a3)
{
  if (*(void *)(a3 + 8) != *(void *)a3)
  {
    uint64_t v5 = **(void **)a3 + 72LL;
    xpc_object_t v6 = (const void *)sub_10056AAF0(v5);
    size_t v7 = sub_10056AAD8(v5);
    xpc_dictionary_set_data(xdict, "kCBMsgArgData", v6, v7);
  }

  xpc_dictionary_set_int64(xdict, "kCBMsgArgCharacteristicHandle", *(void *)(a1 + 24));
}

void sub_100330234(uint64_t a1, xpc_object_t xdict)
{
}

void sub_100330278(uint64_t a1, xpc_object_t xdict, uint64_t **a3)
{
  if (a3[1] != *a3)
  {
    xpc_object_t v6 = xpc_array_create(0LL, 0LL);
    size_t v7 = *a3;
    while (v7 != a3[1])
    {
      uint64_t v8 = *v7++;
      xpc_object_t v9 = sub_10032F8A4(v8);
      xpc_array_set_value(v6, 0xFFFFFFFFFFFFFFFFLL, v9);
      xpc_release(v9);
    }

    xpc_dictionary_set_value(xdict, "kCBMsgArgDescriptors", v6);
    xpc_release(v6);
  }

  xpc_dictionary_set_int64(xdict, "kCBMsgArgCharacteristicHandle", *(void *)(a1 + 24));
}

void sub_10033032C(uint64_t a1, xpc_object_t xdict)
{
}

void sub_100330344(uint64_t a1, xpc_object_t xdict, uint64_t a3)
{
  if (*(void *)(a3 + 8) != *(void *)a3)
  {
    xpc_object_t v5 = sub_10032F8A4(**(void **)a3);
    xpc_object_t value = xpc_dictionary_get_value(v5, "kCBMsgArgData");
    xpc_dictionary_set_value(xdict, "kCBMsgArgData", value);
    xpc_release(v5);
  }

  xpc_dictionary_set_int64(xdict, "kCBMsgArgDescriptorHandle", *(void *)(a1 + 24));
}

uint64_t sub_1003303BC(uint64_t a1)
{
  *(void *)a1 = off_100891A18;
  xpc_object_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + sub_100242FAC(v1 - 32) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_100330400(void *a1)
{
  *(void *)a1 = off_100891A18;
  xpc_object_t v2 = (void *)*((void *)a1 + 3);
  if (v2)
  {
    *((void *)a1 + 4) = v2;
    operator delete(v2);
  }

  operator delete(a1);
}

uint64_t sub_100330444(uint64_t a1)
{
  *(void *)a1 = off_100891A40;
  xpc_object_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_100330488(void *a1)
{
  *(void *)a1 = off_100891A40;
  xpc_object_t v2 = (void *)*((void *)a1 + 4);
  if (v2)
  {
    *((void *)a1 + 5) = v2;
    operator delete(v2);
  }

  operator delete(a1);
}

uint64_t sub_1003304CC(uint64_t a1)
{
  *(void *)a1 = off_100891A68;
  xpc_object_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_100330510(void *a1)
{
  *(void *)a1 = off_100891A68;
  xpc_object_t v2 = (void *)*((void *)a1 + 4);
  if (v2)
  {
    *((void *)a1 + 5) = v2;
    operator delete(v2);
  }

  operator delete(a1);
}

uint64_t sub_100330554(uint64_t a1)
{
  return a1;
}

void sub_10033057C(id *a1)
{
}

uint64_t sub_1003305A4(uint64_t a1)
{
  return a1;
}

void sub_1003305CC(id *a1)
{
}

uint64_t sub_1003305F4(uint64_t a1)
{
  return a1;
}

void sub_10033061C(id *a1)
{
}

uint64_t sub_100330644(uint64_t a1)
{
  return a1;
}

void sub_10033066C(id *a1)
{
}

void *sub_100330694(void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8LL) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    xpc_object_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    _DWORD __dst[2] = v8 | 0x8000000000000000LL;
    void *__dst = v6;
  }

  else
  {
    *((_BYTE *)__dst + 23) = __len;
    xpc_object_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }

  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void sub_100330738(id a1)
{
  uint64_t v1 = operator new(0x110uLL);
  sub_100551DD0();
  qword_1008D5F58 = (uint64_t)v1;
}

void sub_100330768(_Unwind_Exception *a1)
{
}

void *sub_100330780(void *a1, uint64_t a2)
{
  *sub_10043C910(a1, a2) = &off_100891B50;
  if (qword_1008EFE28 != -1) {
    dispatch_once(&qword_1008EFE28, &stru_100891B70);
  }
  return a1;
}

void sub_1003307D8(id a1)
{
  xpc_object_t v3 = "kCBMsgIdSessionAttach";
  uint64_t v4 = 21LL;
  xpc_object_t v5 = &v3;
  uint64_t v1 = sub_10033113C((uint64_t)&xmmword_1008F7200, (uint64_t)&v3, (uint64_t)&unk_1006C2518, (_OWORD **)&v5);
  v1[4] = sub_100330880;
  void v1[5] = 0LL;
  xpc_object_t v3 = "kCBMsgIdSessionDetach";
  uint64_t v4 = 21LL;
  xpc_object_t v5 = &v3;
  xpc_object_t v2 = sub_10033113C((uint64_t)&xmmword_1008F7200, (uint64_t)&v3, (uint64_t)&unk_1006C2518, (_OWORD **)&v5);
  v2[4] = sub_100330D04;
  void v2[5] = 0LL;
}

void sub_100330880(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v5 = sub_10025E1C8(value, "kCBMsgArgName");
  xpc_object_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  memset(&v54, 0, sizeof(v54));
  size_t v7 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    int v60 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "BTSessionMsgHandler::handleAttachMsg name:%@",  buf,  0xCu);
  }

  xpc_connection_get_audit_token(*(void *)(*(void *)(a1 + 72) + 16LL), &v54);
  audit_token_t token = v54;
  size_t v8 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &token);
  xpc_object_t v9 = v8;
  if (v8)
  {
    CFStringRef v10 = SecTaskCopySigningIdentifier(v8, 0LL);
    CFStringRef v11 = v10;
    if (v10)
    {
      int v12 = CFEqual(v10, @"com.apple.dmd");
      BOOL v13 = v12 != 0;
      if (!v12)
      {
        int v14 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
          sub_10066C898(v14, v15, v16, v17, v18, v19, v20, v21);
        }
      }

      CFRelease(v11);
    }

    else
    {
      __int16 v22 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10066C868(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      BOOL v13 = 0;
    }

    CFRelease(v9);
  }

  else
  {
    BOOL v13 = 0;
  }

  bzero(buf, 0x400uLL);
  uint64_t v30 = *(void *)(a1 + 72);
  id v31 = (const char *)(v30 + 56);
  id v32 = v6;
  snprintf((char *)buf, 0x400uLL, "%s-unique-id-%s", v31, (const char *)[v32 UTF8String]);
  uint64_t v52 = 0LL;
  int v33 = sub_100494178((char *)buf, &v52);
  if (v33)
  {
    char v34 = (os_log_s *)qword_1008F75F0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
      sub_10066C838(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    uint64_t v42 = 0LL;
  }

  else
  {
    uint64_t v42 = v52;
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_100891BC0);
    }
    uint64_t v43 = sub_100496954((void *)qword_1008D61A0, v52);
    if (v43)
    {
      *(_BYTE *)(v43 + 136) = 1;
      sub_100494DE8(v43, (unint64_t)off_1008D9400, *(void *)(a1 + 72));
      uint64_t v44 = *(void *)(a1 + 72);
      int v45 = *(_DWORD *)(v44 + 40);
      au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v44 + 16));
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_100891BC0);
      }
      sub_100497A10(qword_1008D61A0, v52, v45, asid);
      *(void *)(*(void *)(a1 + 72) + 152LL) = v42;
      if (v13)
      {
        __int128 v47 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v55 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Session has Managed Config Bundle ID",  v55,  2u);
        }

        if (qword_1008D61A8 != -1) {
          dispatch_once(&qword_1008D61A8, &stru_100891BC0);
        }
        sub_100497EE8(qword_1008D61A0, v52);
      }

      int v33 = 0;
    }

    else
    {
      sub_10049422C(&v52);
      int v33 = 100;
    }
  }

  __int128 v48 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v55 = 134218240;
    uint64_t v56 = v42;
    __int16 v57 = 1024;
    int v58 = v33;
    _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "Sending the reply now sessionID:%llx result:%d",  v55,  0x12u);
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  __int128 v50 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgSessionID", v42);
    xpc_dictionary_set_uint64(v50, "kCBMsgArgResult", v33);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v50);
    xpc_release(v50);
  }

  char v51 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Done sending the reply now", v55, 2u);
  }
}

void sub_100330CCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100330D04(uint64_t a1, void *a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 72);
    xpc_object_t v6 = (void *)(v5 + 56);
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BTSessionMsgHandler::handleDetachMsg name:%s",  buf,  0xCu);
  }

  *(void *)__int128 buf = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  if (!sub_10025D848(value, 1, v8, v9, v10, v11, v12, v13, (uint64_t)"kCBMsgArgSessionID"))
  {
    if (*(void *)(*(void *)(a1 + 72) + 152LL)) {
      sub_100330E18(a1);
    }
  }

void sub_100330E18(uint64_t a1)
{
  xpc_object_t v2 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 72);
    uint64_t v4 = (void *)(v3 + 56);
    *(_DWORD *)xpc_object_t v6 = 136315138;
    *(void *)&void v6[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "BTSessionMsgHandler::cleanupBTSession name:%s",  v6,  0xCu);
  }

  unint64_t v5 = *(void *)(*(void *)(a1 + 72) + 152LL);
  *(void *)xpc_object_t v6 = v5;
  if (v5)
  {
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_100891BC0);
    }
    sub_10049804C(qword_1008D61A0, v5);
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_100891BC0);
    }
    sub_100497D78(qword_1008D61A0, v5);
    sub_10049422C((unint64_t *)v6);
  }

void sub_100330F54(uint64_t a1)
{
  xpc_object_t v2 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 72);
    uint64_t v4 = (void *)(v3 + 56);
    int v5 = 136315138;
    xpc_object_t v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "BTSessionMsgHandler::handleDisconnection name:%s",  (uint8_t *)&v5,  0xCu);
  }

  sub_100330E18(a1);
}

BOOL sub_100331010(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  uint64_t v11 = string;
  size_t v12 = strlen(string);
  int v5 = sub_100331854(&xmmword_1008F7200, (uint64_t)&v11);
  if (v5)
  {
    uint64_t v11 = string;
    size_t v12 = strlen(string);
    uint64_t v13 = &v11;
    xpc_object_t v6 = sub_10033113C((uint64_t)&xmmword_1008F7200, (uint64_t)&v11, (uint64_t)&unk_1006C2518, (_OWORD **)&v13);
    size_t v7 = (void (*)(void *, xpc_object_t))v6[4];
    uint64_t v8 = v6[5];
    uint64_t v9 = (void *)(a1 + (v8 >> 1));
    if ((v8 & 1) != 0) {
      size_t v7 = *(void (**)(void *, xpc_object_t))(*v9 + v7);
    }
    v7(v9, xdict);
  }

  return v5 != 0LL;
}

void *sub_1003310DC(void *a1)
{
  *a1 = &off_100891BA0;
  sub_100242E28(a1 + 1);
  return a1;
}

void sub_10033110C(void *a1)
{
  *a1 = &off_100891BA0;
  sub_100242E28(a1 + 1);
  operator delete(a1);
}

void *sub_10033113C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = sub_1003313A4((uint64_t)&v29, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }

    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }

    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      int v14 = *v13;
      if (*v13)
      {
        uint64_t v17 = a2;
        uint64_t v15 = *(uint64_t **)a2;
        size_t v16 = *(void *)(v17 + 8);
        do
        {
          unint64_t v18 = *((void *)v14 + 1);
          if (v18 == v8)
          {
          }

          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9) {
                v18 %= v9;
              }
            }

            else
            {
              v18 &= v9 - 1;
            }

            if (v18 != v12) {
              break;
            }
          }

          int v14 = *(void **)v14;
        }

        while (v14);
      }
    }
  }

  else
  {
    unint64_t v12 = 0LL;
  }

  int v14 = operator new(0x30uLL);
  *(void *)int v14 = 0LL;
  *((void *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((void *)v14 + 4) = 0LL;
  *((void *)v14 + 5) = 0LL;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1LL;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_10005141C(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }

    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }

  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v12);
  if (v26)
  {
    *(void *)int v14 = *v26;
LABEL_40:
    *uint64_t v26 = v14;
    goto LABEL_41;
  }

  *(void *)int v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v25 + 8 * v12) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v27 = *(void *)(*(void *)v14 + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }

    else
    {
      v27 &= v9 - 1;
    }

    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_40;
  }

void sub_100331390(_Unwind_Exception *a1)
{
}

unint64_t sub_1003313A4(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69LL
          * (v6 ^ ((0x9DDFEA08EB382D69LL * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69LL * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69LL * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297LL * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      unint64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0LL);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273LL * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273LL * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64LL;
      }

      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297LL
          * ((0x9DDFEA08EB382D69LL
            * (v21 ^ ((0x9DDFEA08EB382D69LL * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69LL * (v21 ^ ((0x9DDFEA08EB382D69LL * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69LL
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297LL
                  * ((0x9DDFEA08EB382D69LL
                    * (v20 ^ ((0x9DDFEA08EB382D69LL * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69LL * (v20 ^ ((0x9DDFEA08EB382D69LL * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69LL
           * ((0x9DDFEA08EB382D69LL * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69LL * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }

    else
    {
      return sub_100331750(a2, a3);
    }
  }

  else if (a3 > 0x10)
  {
    return sub_1003316A4(a2, a3);
  }

  else
  {
    return sub_1003315AC(a2, a3);
  }

unint64_t sub_1003315AC(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557LL * (a2 + 4LL * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }

    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69LL * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69LL
           * ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }

  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69LL
          * ((0x9DDFEA08EB382D69LL
            * (v4 ^ ((0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69LL * (v4 ^ ((0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }

  return result;
}

unint64_t sub_1003316A4(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273LL * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557LL, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69LL * (v5 ^ (v4 - 0x3C5A37A36834CED9LL * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69LL
       * ((0x9DDFEA08EB382D69LL * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69LL * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_100331750(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9LL * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9LL * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127LL * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1LL
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9LL * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9LL * (v13 ^ (v13 >> 47))) >> 47));
}

void sub_100331810(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_100331840(_Unwind_Exception *a1)
{
}

uint64_t **sub_100331854(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_1003313A4((uint64_t)&v17, *(uint64_t **)a2, *(void *)(a2 + 8));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0LL;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }

  else
  {
    unint64_t v9 = (*(void *)&v5 - 1LL) & v4;
  }

  uint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0LL;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v14 = a2;
    uint64_t v12 = *(uint64_t **)a2;
    size_t v13 = *(void *)(v14 + 8);
    do
    {
      unint64_t v15 = (unint64_t)v11[1];
      if (v15 == v6)
      {
      }

      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(void *)&v5) {
            v15 %= *(void *)&v5;
          }
        }

        else
        {
          v15 &= *(void *)&v5 - 1LL;
        }

        if (v15 != v9) {
          return 0LL;
        }
      }

      uint64_t v11 = (uint64_t **)*v11;
    }

    while (v11);
  }

  return v11;
}

void sub_100331970()
{
  int v0 = objc_autoreleasePoolPush();
  xmmword_1008F7200 = 0u;
  *(_OWORD *)algn_1008F7210 = 0u;
  dword_1008F7220 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_10033077C, &xmmword_1008F7200, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1003319C0(unint64_t *a1, __int16 a2)
{
  int8x8_t v5 = (_BYTE *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *a1;
    unint64_t v8 = &v5[-*a1];
    unint64_t v9 = (unint64_t)(v8 + 1);
    unint64_t v10 = v4 - v7;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (unint64_t)operator new(v11);
    }
    else {
      unint64_t v12 = 0LL;
    }
    size_t v13 = (char *)(v12 + v11);
    v8[v12] = a2;
    unint64_t v6 = &v8[v12 + 1];
    if (v5 == (_BYTE *)v7)
    {
      v12 += (unint64_t)v8;
    }

    else
    {
      uint64_t v14 = &v5[~v7];
      do
      {
        char v15 = *--v5;
        (v14--)[v12] = v15;
      }

      while (v5 != (_BYTE *)v7);
      int8x8_t v5 = (_BYTE *)*a1;
    }

    *a1 = v12;
    a1[1] = (unint64_t)v6;
    a1[2] = (unint64_t)v13;
    if (v5) {
      operator delete(v5);
    }
  }

  else
  {
    *int8x8_t v5 = a2;
    unint64_t v6 = v5 + 1;
  }

  a1[1] = (unint64_t)v6;
  unint64_t v16 = a1[2];
  if ((unint64_t)v6 < v16)
  {
    _BYTE *v6 = HIBYTE(a2);
    uint64_t v17 = (uint64_t)(v6 + 1);
    goto LABEL_37;
  }

  unint64_t v18 = *a1;
  uint64_t v19 = &v6[-*a1];
  unint64_t v20 = (unint64_t)(v19 + 1);
  if ((uint64_t)(v19 + 1) < 0) {
LABEL_38:
  }
    abort();
  unint64_t v21 = v16 - v18;
  if (2 * v21 > v20) {
    unint64_t v20 = 2 * v21;
  }
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v22 = v20;
  }
  if (v22) {
    unint64_t v23 = (unint64_t)operator new(v22);
  }
  else {
    unint64_t v23 = 0LL;
  }
  unint64_t v24 = (char *)(v23 + v22);
  v19[v23] = HIBYTE(a2);
  uint64_t v17 = (uint64_t)&v19[v23 + 1];
  if (v6 == (_BYTE *)v18)
  {
    *a1 = (unint64_t)&v19[v23];
    a1[1] = v17;
    a1[2] = (unint64_t)v24;
LABEL_36:
    operator delete(v6);
    goto LABEL_37;
  }

  uint64_t v25 = &v6[~v18];
  do
  {
    char v26 = *--v6;
    (v25--)[v23] = v26;
  }

  while (v6 != (_BYTE *)v18);
  unint64_t v6 = (_BYTE *)*a1;
  *a1 = v23;
  a1[1] = v17;
  a1[2] = (unint64_t)v24;
  if (v6) {
    goto LABEL_36;
  }
LABEL_37:
  a1[1] = v17;
}

void sub_100331B68(unint64_t *a1, __int16 a2, unsigned int a3, uint64_t *a4)
{
  if (a3)
  {
    uint64_t v7 = 0LL;
    unint64_t v8 = (_BYTE *)a1[1];
    uint64_t v9 = a3;
    do
    {
      uint64_t v10 = *a4;
      unint64_t v11 = a1[2];
      if ((unint64_t)v8 >= v11)
      {
        unint64_t v13 = *a1;
        uint64_t v14 = &v8[-*a1];
        unint64_t v15 = (unint64_t)(v14 + 1);
        unint64_t v16 = v11 - v13;
        if (2 * v16 > v15) {
          unint64_t v15 = 2 * v16;
        }
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v17 = v15;
        }
        if (v17) {
          unint64_t v18 = (char *)operator new(v17);
        }
        else {
          unint64_t v18 = 0LL;
        }
        uint64_t v19 = &v14[(void)v18];
        v14[(void)v18] = *(_BYTE *)(v10 + v7);
        uint64_t v12 = (uint64_t)&v14[(void)v18 + 1];
        if (v8 != (_BYTE *)v13)
        {
          unint64_t v20 = &v8[~v13];
          do
          {
            char v21 = *--v8;
            (v20--)[(void)v18] = v21;
          }

          while (v8 != (_BYTE *)v13);
          unint64_t v8 = (_BYTE *)*a1;
          uint64_t v19 = v18;
        }

        *a1 = (unint64_t)v19;
        a1[1] = v12;
        a1[2] = (unint64_t)&v18[v17];
        if (v8) {
          operator delete(v8);
        }
      }

      else
      {
        *unint64_t v8 = *(_BYTE *)(v10 + v7);
        uint64_t v12 = (uint64_t)(v8 + 1);
      }

      a1[1] = v12;
      ++v7;
      unint64_t v8 = (_BYTE *)v12;
    }

    while (v7 != v9);
  }

void sub_100331C9C(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v3 = a2;
  os_unfair_lock_lock(a1);
  int8x8_t v5 = 0LL;
  unint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  unint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    unint64_t v4 = v5;
  }

  if (v4)
  {
    unint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_100331D30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_100331D5C(uint64_t a1, uint64_t a2)
{
  int8x8_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        int8x8_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }

  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_100334BD8(a1 + 8, v4, (char *)&v6);
    sub_100008A30(a1 + 8);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

uint64_t sub_100331DE4(uint64_t a1, uint64_t a2, CFAbsoluteTime *a3)
{
  if (*(void *)(a1 + 64))
  {
    int v19 = 0;
    __int128 v18 = 0u;
    __int128 v17 = 0u;
    memset(&v16[1], 0, 32);
    v16[0] = 1;
    id v14 = 0LL;
    uint64_t v15 = 69LL;
    unsigned __int8 v5 = [*(id *)(a1 + 112) getReport:v16 reportLength:&v15 withIdentifier:1 forType:1 error:&v14];
    id v6 = v14;
    if ((v5 & 1) != 0)
    {
      *(void *)(a2 + 7) = *(void *)&v16[16];
      *(void *)a2 = *(void *)&v16[9];
      if (*(_BYTE *)(a2 + 12))
      {
        uint64_t v7 = 0LL;
        *a3 = CFAbsoluteTimeGetCurrent() + (double)*(unint64_t *)&v16[1] / -1000000.0;
LABEL_14:

        return v7;
      }

      uint64_t v12 = qword_1008F7708;
      if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        uint64_t v9 = "readAopCaches: bt-services not running";
        uint64_t v10 = (os_log_s *)v12;
        uint32_t v11 = 2;
        goto LABEL_12;
      }
    }

    else
    {
      uint64_t v8 = qword_1008F7708;
      if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v21 = v6;
        uint64_t v9 = "readAopCaches: getReport::ServiceState failed %@";
        uint64_t v10 = (os_log_s *)v8;
        uint32_t v11 = 12;
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
      }
    }

    uint64_t v7 = 1LL;
    goto LABEL_14;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_ERROR)) {
    sub_10066C8C8();
  }
  return 1LL;
}

void sub_100331FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100331FC8(uint64_t a1, unsigned int a2, int **a3)
{
  a3[1] = *a3;
  if (!a2) {
    return;
  }
  uint64_t v5 = 0LL;
  uint64_t v31 = (uint64_t)(a3 + 2);
  uint64_t v6 = a2;
  while (1)
  {
    int v39 = 0;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    char v34 = v5 + 5;
    id v32 = 0LL;
    uint64_t v33 = 69LL;
    unsigned __int8 v7 = [*(id *)(a1 + 112) getReport:&v34 reportLength:&v33 withIdentifier:(v5 + 5) forType:1 error:&v32];
    id v8 = v32;
    if ((v7 & 1) == 0)
    {
      uint64_t v26 = qword_1008F7708;
      if (!os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_33;
      }
      *(_DWORD *)__int128 buf = 67109378;
      int v41 = v5;
      __int16 v42 = 2112;
      v43[0] = v8;
      uint64_t v27 = "readAopCaches: getReport::MatchTableConf%u failed %@";
      uint64_t v28 = (os_log_s *)v26;
      uint32_t v29 = 18;
LABEL_30:
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, buf, v29);
      goto LABEL_33;
    }

    if (!BYTE9(v35))
    {
      uint64_t v30 = qword_1008F7708;
      if (!os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_33;
      }
      *(_DWORD *)__int128 buf = 67109120;
      int v41 = BYTE8(v35);
      uint64_t v27 = "readAopCaches: handleIndex %d empty";
      uint64_t v28 = (os_log_s *)v30;
      uint32_t v29 = 8;
      goto LABEL_30;
    }

    int v9 = BYTE8(v35);
    uint64_t v10 = (os_log_s *)qword_1008F7708;
    if (v5 != BYTE8(v35)) {
      break;
    }
    int v11 = (unsigned __int16)v36;
    int v12 = (unsigned __int16)(HIWORD(v35) + 14);
    if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109632;
      int v41 = v9;
      __int16 v42 = 1024;
      LODWORD(v43[0]) = v11;
      WORD2(v43[0]) = 1024;
      *(_DWORD *)((char *)v43 + 6) = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "readAopCaches: handleIndex %d num %d size %d",  buf,  0x14u);
    }

    int v13 = v11 | (v12 << 16);
    uint64_t v15 = a3[1];
    unint64_t v14 = (unint64_t)a3[2];
    if ((unint64_t)v15 >= v14)
    {
      uint64_t v17 = v15 - *a3;
      uint64_t v18 = v14 - (void)*a3;
      uint64_t v19 = v18 >> 1;
      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        id v21 = (char *)sub_10024E33C(v31, v20);
      }
      else {
        id v21 = 0LL;
      }
      size_t v22 = (int *)&v21[4 * v17];
      *size_t v22 = v13;
      unint64_t v16 = v22 + 1;
      unint64_t v24 = *a3;
      unint64_t v23 = (char *)a3[1];
      if (v23 != (char *)*a3)
      {
        do
        {
          int v25 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *--size_t v22 = v25;
        }

        while (v23 != (char *)v24);
        unint64_t v23 = (char *)*a3;
      }

      *a3 = v22;
      a3[1] = v16;
      a3[2] = (int *)&v21[4 * v20];
      if (v23) {
        operator delete(v23);
      }
    }

    else
    {
      *uint64_t v15 = v13;
      unint64_t v16 = v15 + 1;
    }

    a3[1] = v16;

    if (++v5 == v6) {
      return;
    }
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_ERROR)) {
    sub_10066C8F4(v5, v9, v10);
  }
LABEL_33:
}

void sub_1003322E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100332300(uint64_t a1, uint64_t a2)
{
  unint64_t v27 = 1041LL;
  unint64_t v4 = operator new(0x411uLL);
  bzero(v4 + 1, 0x410uLL);
  _BYTE *v4 = 9;
  uint64_t v5 = *(void **)(a1 + 112);
  id v26 = 0LL;
  unsigned __int8 v6 = [v5 getReport:v4 reportLength:&v27 withIdentifier:9 forType:1 error:&v26];
  id v24 = v26;
  if ((v6 & 1) != 0)
  {
    if (v27 >= 0x45)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      if (v27 - 69 >= 0x30)
      {
        unsigned __int16 v8 = 0;
        double v9 = Current + (double)*(unint64_t *)(v4 + 1) / -1000000.0;
        unint64_t v10 = (v27 - 69) / 0x30;
        int v11 = v4 + 31;
        do
        {
          unint64_t v12 = *(void *)(v11 - 14);
          if (v12)
          {
            int v13 = (os_log_s *)qword_1008F7708;
            if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v14 = CUPrintAddress(v11 - 6, 6LL, 1LL);
              id v15 = (id)objc_claimAutoreleasedReturnValue(v14);
              uint64_t v16 = CUPrintHex(v11, 31LL, 31LL, 0LL);
              uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
              int v18 = (char)v11[31];
              int v19 = v11[32];
              *(_DWORD *)__int128 buf = 67110402;
              *(_DWORD *)&uint8_t buf[4] = v8;
              __int16 v29 = 2048;
              unint64_t v30 = v12;
              __int16 v31 = 2112;
              id v32 = v15;
              __int16 v33 = 2112;
              char v34 = v17;
              __int16 v35 = 1024;
              int v36 = v18;
              __int16 v37 = 1024;
              int v38 = v19;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "_fetchBtProxCtxCache %2d, TS %llu, ADDR %@, PAYLOAD %@, RSSI %3d, CH %2d",  buf,  0x32u);

              unint64_t v12 = *(void *)(v11 - 14);
            }

            *(double *)__int128 buf = v9 + (double)v12 / 1000000.0;
            int v25 = 31;
            sub_100332620((void **)a2, buf, &v25, v11 + 31, v11 + 32, (uint64_t *)(v11 - 14));
            uint64_t v20 = *(void *)(a2 + 8);
            int v21 = *(_DWORD *)(v11 - 6);
            *(_WORD *)(v20 - 12) = *((_WORD *)v11 - 1);
            *(_DWORD *)(v20 - 16) = v21;
            uint64_t v22 = *(void *)(a2 + 8);
            __int128 v23 = *(_OWORD *)v11;
            *(_OWORD *)(v22 - 33) = *(_OWORD *)(v11 + 15);
            *(_OWORD *)(v22 - 4_Block_object_dispose(va, 8) = v23;
          }

          ++v8;
          v11 += 48;
        }

        while (v10 > v8);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_ERROR))
  {
    sub_10066C97C();
  }

  operator delete(v4);
}

void sub_1003325C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  operator delete(v11);
  _Unwind_Resume(a1);
}

char *sub_100332620(void **a1, void *a2, int *a3, char *a4, char *a5, uint64_t *a6)
{
  uint64_t v14 = a1[2];
  uint64_t v12 = (uint64_t)(a1 + 2);
  int v13 = v14;
  unint64_t v15 = *(void *)(v12 - 8);
  if (v15 >= (unint64_t)v14)
  {
    uint64_t v21 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v15 - (void)*a1) >> 3);
    unint64_t v22 = v21 + 1;
    unint64_t v23 = 0x6DB6DB6DB6DB6DB7LL * ((v13 - (_BYTE *)*a1) >> 3);
    if (2 * v23 > v22) {
      unint64_t v22 = 2 * v23;
    }
    if (v23 >= 0x249249249249249LL) {
      unint64_t v24 = 0x492492492492492LL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24) {
      int v25 = (char *)sub_100334E14(v12, v24);
    }
    else {
      int v25 = 0LL;
    }
    char v26 = *a3;
    unint64_t v27 = &v25[56 * v21];
    char v28 = *a4;
    char v29 = *a5;
    unint64_t v30 = &v25[56 * v24];
    uint64_t v31 = *a6;
    *(void *)unint64_t v27 = *a2;
    v27[39] = v26;
    v27[46] = v28;
    v27[47] = v29;
    *((void *)v27 + 6) = v31;
    *((void *)v27 + 2) = 0LL;
    *((void *)v27 + 3) = 0LL;
    *((void *)v27 + 1) = 0LL;
    *(void *)(v27 + 31) = 0LL;
    *((_DWORD *)v27 + 10) = 0;
    *((_WORD *)v27 + 22) = 0;
    uint64_t v20 = v27 + 56;
    __int16 v33 = (char *)*a1;
    id v32 = (char *)a1[1];
    if (v32 != *a1)
    {
      do
      {
        __int128 v34 = *(_OWORD *)(v32 - 56);
        __int128 v35 = *(_OWORD *)(v32 - 40);
        __int128 v36 = *(_OWORD *)(v32 - 24);
        *((void *)v27 - 1) = *((void *)v32 - 1);
        *(_OWORD *)(v27 - 24) = v36;
        *(_OWORD *)(v27 - 40) = v35;
        *(_OWORD *)(v27 - 56) = v34;
        v27 -= 56;
        v32 -= 56;
      }

      while (v32 != v33);
      id v32 = (char *)*a1;
    }

    *a1 = v27;
    a1[1] = v20;
    a1[2] = v30;
    if (v32) {
      operator delete(v32);
    }
  }

  else
  {
    int v16 = *a3;
    char v17 = *a4;
    char v18 = *a5;
    uint64_t v19 = *a6;
    *(void *)unint64_t v15 = *a2;
    *(_BYTE *)(v15 + 39) = v16;
    *(_BYTE *)(v15 + 46) = v17;
    *(_BYTE *)(v15 + 47) = v18;
    *(void *)(v15 + 4_Block_object_dispose(va, 8) = v19;
    *(void *)(v15 + 16) = 0LL;
    *(void *)(v15 + 24) = 0LL;
    *(void *)(v15 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(v15 + 31) = 0LL;
    *(_DWORD *)(v15 + 40) = 0;
    uint64_t v20 = (char *)(v15 + 56);
    *(_WORD *)(v15 + 44) = 0;
  }

  a1[1] = v20;
  return v20 - 56;
}

void sub_1003327E4(uint64_t a1)
{
  uint64_t v2 = sub_1004051A8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_100332844;
  v3[3] = &unk_10087EB20;
  v3[4] = a1;
  sub_100405384(v2, v3);
}

void sub_100332844(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  double v9 = 0LL;
  unint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  sub_100332300((uint64_t)v1, (uint64_t)&v9);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768LL;
  _DWORD v5[2] = sub_100332974;
  v5[3] = &unk_100891BE0;
  __dst = 0LL;
  uint64_t v8 = 0LL;
  __int128 __p = 0LL;
  uint64_t v2 = v9;
  int64_t v3 = v10 - (_BYTE *)v9;
  if (v10 != v9)
  {
    sub_100334ED4(&__p, 0x6DB6DB6DB6DB6DB7LL * (v3 >> 3));
    unint64_t v4 = (char *)__dst;
    memmove(__dst, v2, v3);
    __dst = &v4[8 * (v3 >> 3)];
  }

  sub_100331C9C(v1, v5);
  if (__p)
  {
    __dst = __p;
    operator delete(__p);
  }

  if (v9)
  {
    unint64_t v10 = v9;
    operator delete(v9);
  }

void sub_100332940( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100332974(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8LL))(a2, a1 + 32);
}

void *sub_10033298C(uint64_t a1, uint64_t a2)
{
  return sub_100334E5C((void *)(a1 + 32), a2 + 32);
}

void sub_100332998(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }

void sub_1003329B0(uint64_t a1)
{
  uint64_t v2 = sub_1004051A8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_100332A10;
  v3[3] = &unk_10087EB20;
  v3[4] = a1;
  sub_100405384(v2, v3);
}

void sub_100332A10(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  double v54 = 0.0;
  memset(v55, 0, 15);
  int v2 = sub_100331DE4((uint64_t)v1, (uint64_t)v55, &v54);
  unsigned int v3 = LOBYTE(v55[1]);
  unsigned int v4 = BYTE1(v55[1]);
  if (v2) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = LOBYTE(v55[1]) == 0;
  }
  if (v5 || BYTE1(v55[1]) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_ERROR)) {
      sub_10066C9DC();
    }
    sub_100331C9C(v1, &stru_100891C30);
  }

  else
  {
    char v51 = 0LL;
    uint64_t v52 = 0LL;
    uint64_t v53 = 0LL;
    sub_100331FC8((uint64_t)v1, BYTE3(v55[1]), (int **)&v51);
    if (v51 == v52)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_ERROR)) {
        sub_10066CA08();
      }
      sub_100331C9C(v1, &stru_100891C50);
    }

    else
    {
      uint64_t v50 = 0LL;
      uint64_t v7 = mach_continuous_time();
      uint64_t v8 = sub_1002E6E00();
      sub_10002418C(buf, "AOPInterfaceManager");
      sub_10002418C(__p, "LastDramFetchInterval");
      int v9 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, uint64_t *))(*(void *)v8 + 144LL))( v8,  buf,  __p,  &v50);
      if (v49 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v58) < 0) {
        operator delete(*(void **)buf);
      }
      if (v50) {
        int v10 = v9;
      }
      else {
        int v10 = 0;
      }
      unsigned int v11 = v3;
      if (v10 == 1)
      {
        unsigned int v12 = UpTicksToSeconds(v7 - v50) / v4;
        if (v12 + 1 < v3) {
          unsigned int v11 = v12 + 1;
        }
        else {
          unsigned int v11 = v3;
        }
      }

      BOOL v14 = v3 > 1 && v11 == v3;
      uint64_t v15 = v11 - v14;
      size_t v16 = v15 * WORD2(v55[0]);
      if ((_DWORD)v16)
      {
        char v17 = operator new(v15 * WORD2(v55[0]));
        bzero(v17, v16);
      }

      else
      {
        char v17 = 0LL;
      }

      unsigned int v38 = sub_10050D900((uint64_t)&v1[12], (char *)v17, v15);
      char v18 = (os_log_s *)qword_1008F7708;
      if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v15;
        LOWORD(v57) = 1024;
        *(_DWORD *)((char *)&v57 + 2) = v38;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "readAopCaches: asked %u, read %u caches",  buf,  0xEu);
      }

      uint64_t v19 = sub_1002E6E00();
      sub_10002418C(buf, "AOPInterfaceManager");
      sub_10002418C(__p, "LastDramFetchInterval");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v19 + 152LL))(v19, buf, __p, v7);
      if (v49 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v58) < 0) {
        operator delete(*(void **)buf);
      }
      __int128 v36 = v51;
      __int16 v37 = v52;
      *(void *)__int128 buf = 0LL;
      __int16 v57 = 0LL;
      uint64_t v58 = 0LL;
      if (v38)
      {
        unsigned __int16 v20 = 0;
        unint64_t v41 = (v52 - (_BYTE *)v51) >> 2;
        do
        {
          int v39 = v20;
          if (v37 != v36)
          {
            uint64_t v21 = 0LL;
            int v22 = 0;
            uint64_t v40 = (uint64_t)v17 + WORD2(v55[0]) * v39 + 11;
            do
            {
              uint64_t v23 = *((unsigned __int16 *)v51 + 2 * v21);
              if (*((_WORD *)v51 + 2 * v21))
              {
                uint64_t v24 = *((unsigned __int16 *)v51 + 2 * v21 + 1);
                int v25 = (char *)v40;
                do
                {
                  unsigned int v26 = *(_DWORD *)(v25 - 11);
                  if (!v26) {
                    break;
                  }
                  size_t v27 = v25[2] >= 0x16u ? 22LL : v25[2];
                  char v28 = v25[1];
                  *(double *)__int128 __p = v54 + (double)v26;
                  char v47 = 40;
                  int v46 = v27 + 9;
                  sub_100333134((void **)buf, __p, &v46, v25, &v47);
                  char v29 = v57;
                  int v30 = *(_DWORD *)(v25 - 7);
                  *(v57 - 6) = *(_WORD *)(v25 - 3);
                  *((_DWORD *)v29 - 4) = v30;
                  uint64_t v31 = v57;
                  *((_BYTE *)v57 - 46) = 26;
                  *(v31 - 24) = 258;
                  *((_BYTE *)v31 - 45) = v27 + 5;
                  *((_BYTE *)v31 - 42) = 0;
                  *(v31 - 22) = 19711;
                  *((_BYTE *)v31 - 41) = v28;
                  *((_BYTE *)v31 - 40) = v27;
                  memcpy((char *)v31 - 39, v25 + 3, v27);
                  v25 += v24;
                  --v23;
                }

                while (v23);
              }

              uint64_t v21 = (unsigned __int16)++v22;
            }

            while (v41 > (unsigned __int16)v22);
          }

          unsigned __int16 v20 = v39 + 1;
        }

        while (v38 > (unsigned __int16)(v39 + 1));
      }

      id v32 = (os_log_s *)qword_1008F7708;
      if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "readAopCaches: calling _listeners.notify(^(AOPEventListener* listener)...",  (uint8_t *)__p,  2u);
      }

      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3321888768LL;
      v42[2] = sub_1003332E4;
      void v42[3] = &unk_100891BE0;
      __dst = 0LL;
      uint64_t v45 = 0LL;
      uint64_t v43 = 0LL;
      __int16 v33 = *(const void **)buf;
      int64_t v34 = (int64_t)v57 - *(void *)buf;
      if (v57 != *(_WORD **)buf)
      {
        sub_100334ED4(&v43, 0x6DB6DB6DB6DB6DB7LL * (v34 >> 3));
        __int128 v35 = (char *)__dst;
        memmove(__dst, v33, v34);
        __dst = &v35[8 * (v34 >> 3)];
      }

      sub_100331C9C(v1, v42);
      if (v43)
      {
        __dst = v43;
        operator delete(v43);
      }

      if (*(void *)buf)
      {
        __int16 v57 = *(_WORD **)buf;
        operator delete(*(void **)buf);
      }

      if (v17) {
        operator delete(v17);
      }
    }

    if (v51)
    {
      uint64_t v52 = v51;
      operator delete(v51);
    }
  }

void sub_100332F80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, void *__p, uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100333064(id a1, AOPEventListener *a2)
{
  unsigned int v3 = 0LL;
  uint64_t v4 = 0LL;
  __int128 __p = 0LL;
  (*((void (**)(AOPEventListener *, void **))a2->var0 + 1))(a2, &__p);
  if (__p)
  {
    unsigned int v3 = __p;
    operator delete(__p);
  }

void sub_1003330B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003330CC(id a1, AOPEventListener *a2)
{
  unsigned int v3 = 0LL;
  uint64_t v4 = 0LL;
  __int128 __p = 0LL;
  (*((void (**)(AOPEventListener *, void **))a2->var0 + 1))(a2, &__p);
  if (__p)
  {
    unsigned int v3 = __p;
    operator delete(__p);
  }

void sub_100333118( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100333134(void **a1, void *a2, int *a3, char *a4, char *a5)
{
  unsigned int v12 = a1[2];
  uint64_t v10 = (uint64_t)(a1 + 2);
  unsigned int v11 = v12;
  unint64_t v13 = *(void *)(v10 - 8);
  if (v13 >= (unint64_t)v12)
  {
    uint64_t v18 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v13 - (void)*a1) >> 3);
    unint64_t v19 = v18 + 1;
    unint64_t v20 = 0x6DB6DB6DB6DB6DB7LL * ((v11 - (_BYTE *)*a1) >> 3);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x249249249249249LL) {
      unint64_t v21 = 0x492492492492492LL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21) {
      int v22 = (char *)sub_100334E14(v10, v21);
    }
    else {
      int v22 = 0LL;
    }
    char v23 = *a3;
    uint64_t v24 = &v22[56 * v18];
    char v25 = *a4;
    char v26 = *a5;
    size_t v27 = &v22[56 * v21];
    *(void *)uint64_t v24 = *a2;
    v24[39] = v23;
    v24[46] = v25;
    v24[47] = v26;
    *((void *)v24 + 6) = 0LL;
    *((void *)v24 + 2) = 0LL;
    *((void *)v24 + 3) = 0LL;
    *((void *)v24 + 1) = 0LL;
    *(void *)(v24 + 31) = 0LL;
    *((_DWORD *)v24 + 10) = 0;
    *((_WORD *)v24 + 22) = 0;
    char v17 = v24 + 56;
    char v29 = (char *)*a1;
    char v28 = (char *)a1[1];
    if (v28 != *a1)
    {
      do
      {
        __int128 v30 = *(_OWORD *)(v28 - 56);
        __int128 v31 = *(_OWORD *)(v28 - 40);
        __int128 v32 = *(_OWORD *)(v28 - 24);
        *((void *)v24 - 1) = *((void *)v28 - 1);
        *(_OWORD *)(v24 - 24) = v32;
        *(_OWORD *)(v24 - 40) = v31;
        *(_OWORD *)(v24 - 56) = v30;
        v24 -= 56;
        v28 -= 56;
      }

      while (v28 != v29);
      char v28 = (char *)*a1;
    }

    *a1 = v24;
    a1[1] = v17;
    a1[2] = v27;
    if (v28) {
      operator delete(v28);
    }
  }

  else
  {
    int v14 = *a3;
    char v15 = *a4;
    char v16 = *a5;
    *(void *)unint64_t v13 = *a2;
    *(_BYTE *)(v13 + 39) = v14;
    *(_BYTE *)(v13 + 46) = v15;
    *(_BYTE *)(v13 + 47) = v16;
    *(void *)(v13 + 4_Block_object_dispose(va, 8) = 0LL;
    *(void *)(v13 + 16) = 0LL;
    *(void *)(v13 + 24) = 0LL;
    *(void *)(v13 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(v13 + 31) = 0LL;
    *(_DWORD *)(v13 + 40) = 0;
    char v17 = (char *)(v13 + 56);
    *(_WORD *)(v13 + 44) = 0;
  }

  a1[1] = v17;
  return v17 - 56;
}

uint64_t sub_1003332E4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8LL))(a2, a1 + 32);
}

uint64_t sub_1003332FC(uint64_t a1, uint64_t a2)
{
  char v13 = 4;
  uint64_t v4 = *(const void **)a2;
  size_t v14 = *(void *)(a2 + 8) - *(void *)a2;
  memcpy(v15, v4, v14);
  BOOL v5 = *(void **)(a1 + 112);
  id v12 = 0LL;
  unsigned int v6 = [v5 setReport:&v13 reportLength:v14 + 9 withIdentifier:0 forType:1 error:&v12];
  id v7 = v12;
  uint64_t v8 = (os_log_s *)qword_1008F7708;
  if (v6)
  {
    uint64_t v9 = 0LL;
    if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Successfully sent report to AOP", v11, 2u);
      uint64_t v9 = 0LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_ERROR)) {
      sub_10066CA34();
    }
    uint64_t v9 = 1LL;
  }

  return v9;
}

void sub_100333450(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (os_log_s *)qword_1008F7708;
  if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    LODWORD(v39) = [v3 count];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "sendProxyOOBKeys: %d keys", buf, 8u);
  }

  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v32 objects:v40 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v33;
    do
    {
      for (std::string::size_type i = 0LL; i != v6; std::string::size_type i = (char *)i + 1)
      {
        if (*(void *)v33 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = (os_log_s *)qword_1008F7708;
        if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *(void *)(*((void *)&v32 + 1) + 8LL * (void)i);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v39 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "keyType: %@", buf, 0xCu);
        }
      }

      id v6 = [v5 countByEnumeratingWithState:&v32 objects:v40 count:16];
    }

    while (v6);
  }

  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  id v11 = v5;
  id v12 = [v11 countByEnumeratingWithState:&v28 objects:v37 count:16];
  if (v12)
  {
    uint64_t v23 = *(void *)v29;
    do
    {
      for (j = 0LL; j != v12; j = (char *)j + 1)
      {
        if (*(void *)v29 != v23) {
          objc_enumerationMutation(v11);
        }
        uint64_t v14 = *(void *)(*((void *)&v28 + 1) + 8LL * (void)j);
        sub_1003319C0((unint64_t *)a2, 2);
        char v15 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:v14]);
        sub_1003319C0((unint64_t *)a2, 16 * ((unsigned __int16)[v15 count] & 0xFFF));

        __int128 v26 = 0u;
        __int128 v27 = 0u;
        __int128 v24 = 0u;
        __int128 v25 = 0u;
        char v16 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:v14]);
        id v17 = [v16 countByEnumeratingWithState:&v24 objects:v36 count:16];
        if (v17)
        {
          uint64_t v18 = *(void *)v25;
          do
          {
            for (k = 0LL; k != v17; k = (char *)k + 1)
            {
              if (*(void *)v25 != v18) {
                objc_enumerationMutation(v16);
              }
              id v20 = objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v24 + 1) + 8 * (void)k) irkData]);
              unint64_t v21 = [v20 bytes];

              int v22 = (char *)operator new(0x10uLL);
              *(_OWORD *)int v22 = *v21;
              sub_100334F24(a2, *(char **)(a2 + 8), v22, v22 + 16, 16LL);
              operator delete(v22);
            }

            id v17 = [v16 countByEnumeratingWithState:&v24 objects:v36 count:16];
          }

          while (v17);
        }
      }

      id v12 = [v11 countByEnumeratingWithState:&v28 objects:v37 count:16];
    }

    while (v12);
  }
}

void sub_1003337A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_100333834(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 96));
  if ((v4 & 1) == 0)
  {
    id v5 = (os_log_s *)qword_1008F7708;
    if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_ERROR)) {
      sub_10066CA94(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }

  __int128 __p = 0LL;
  unint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  char v13 = operator new(1uLL);
  *char v13 = 0;
  v19[1] = (uint64_t)(v13 + 1);
  _DWORD v19[2] = (uint64_t)(v13 + 1);
  v19[0] = (uint64_t)v13;
  sub_100331B68((unint64_t *)&__p, 3, 1u, v19);
  operator delete(v13);
  sub_100333450(v3, (uint64_t)&__p);
  sub_1003319C0((unint64_t *)&__p, 4);
  sub_1003319C0((unint64_t *)&__p, 0);
  sub_1003332FC(a1, (uint64_t)&__p);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 1LL));
  char v15 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v14]);

  if (v15)
  {
    uint64_t v16 = sub_1002E8D94();
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 1LL));
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v17]);
    (*(void (**)(uint64_t, id))(*(void *)v16 + 416))(v16, [v18 count]);
  }

  if (__p)
  {
    unint64_t v21 = __p;
    operator delete(__p);
  }
}

void sub_1003339A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1003339FC(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5, char a6, char a7, char a8)
{
  char v23 = 6;
  __int16 v24 = a3;
  char v25 = a4;
  char v26 = a5;
  char v27 = a6;
  char v28 = a8;
  char v29 = a7;
  char v15 = *(void **)(a1 + 112);
  id v22 = 0LL;
  unsigned int v16 = [v15 setReport:&v23 reportLength:8 withIdentifier:0 forType:1 error:&v22];
  id v17 = v22;
  uint64_t v18 = (os_log_s *)qword_1008F7708;
  if (v16)
  {
    uint64_t v19 = 0LL;
    if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Successfully sent report to AOP", v21, 2u);
      uint64_t v19 = 0LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_ERROR)) {
      sub_10066CA34();
    }
    uint64_t v19 = 1LL;
  }

  return v19;
}

uint64_t sub_100333B70(uint64_t a1, __int16 a2)
{
  char v12 = 9;
  __int16 v13 = a2;
  unsigned __int8 v4 = *(void **)(a1 + 112);
  id v11 = 0LL;
  unsigned int v5 = [v4 setReport:&v12 reportLength:3 withIdentifier:0 forType:1 error:&v11];
  id v6 = v11;
  uint64_t v7 = (os_log_s *)qword_1008F7708;
  if (v5)
  {
    uint64_t v8 = 0LL;
    if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Successfully sent report to AOP", v10, 2u);
      uint64_t v8 = 0LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_ERROR)) {
      sub_10066CA34();
    }
    uint64_t v8 = 1LL;
  }

  return v8;
}

_DWORD *sub_100333CAC(uint64_t a1, unsigned __int8 a2, _DWORD *a3, _DWORD *a4)
{
  unsigned __int8 v9 = a2;
  uint64_t v6 = a1 + 128;
  unint64_t result = sub_1001FEC98((void *)(a1 + 128), &v9);
  if (result)
  {
    uint64_t v10 = &v9;
    *a3 = *((_DWORD *)sub_1003349A8(v6, &v9, (uint64_t)&unk_1006C2518, &v10) + 5);
    uint64_t v10 = &v9;
    unint64_t result = sub_1003349A8(v6, &v9, (uint64_t)&unk_1006C2518, &v10);
    int v8 = result[6];
  }

  else
  {
    *a3 = 0;
    int v8 = 0;
  }

  *a4 = v8;
  return result;
}

uint64_t sub_100333D5C(uint64_t a1, unsigned __int8 a2)
{
  unsigned __int8 v7 = a2;
  float v6 = 0.0;
  sub_100333CAC(a1, a2, &v6, &v5);
  id v3 = (void *)(a1 + 128);
  if (sub_1001FEC98(v3, &v7))
  {
    int v8 = &v7;
    *((_BYTE *)sub_1003349A8((uint64_t)v3, &v7, (uint64_t)&unk_1006C2518, &v8) + 2_Block_object_dispose(va, 8) = 0;
  }

  return (char)(uint64_t)rintf(v6);
}

void sub_100333DE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = (os_log_s *)qword_1008F7708;
  if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Send report to AOP %@", buf, 0xCu);
  }

  int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"type"]);
  unsigned int v6 = [v5 unsignedCharValue];

  uint64_t v7 = objc_claimAutoreleasedReturnValue([v3 objectForKey:@"descriptor"]);
  int v8 = (void *)v7;
  if (!v6 || !v7)
  {
    uint64_t v10 = (os_log_s *)qword_1008F7708;
    if (!os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    *(_DWORD *)__int128 buf = 67109120;
    LODWORD(v17) = v6;
    id v11 = "Send report to AOP (type %d) invalid argument";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 8u);
    goto LABEL_12;
  }

  if (!*(void *)(a1 + 112))
  {
    uint64_t v10 = (os_log_s *)qword_1008F7708;
    if (!os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    *(_DWORD *)__int128 buf = 67109120;
    LODWORD(v17) = v6;
    id v11 = "Send report to AOP (type %d) _device is null";
    goto LABEL_11;
  }

  uint64_t v9 = sub_1004051A8();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_10033400C;
  v12[3] = &unk_100891C78;
  uint64_t v14 = a1;
  char v15 = v6;
  id v13 = v8;
  sub_100405384(v9, v12);

LABEL_12:
}

void sub_100333FC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10033400C(uint64_t a1)
{
  id v1 = 0LL;
  id v3 = (unsigned __int8 *)(a1 + 48);
  int v2 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 40);
  v16[0] = 0LL;
  v16[1] = 0LL;
  char v17 = 0;
  switch(v2)
  {
    case 1:
      uint64_t v5 = sub_1003341C0(a1, *(void **)(a1 + 32), v16);
      goto LABEL_6;
    case 2:
      LOBYTE(v16[0]) = 2;
      goto LABEL_9;
    case 3:
      uint64_t v5 = sub_100334400(a1, *(void **)(a1 + 32), (uint64_t)v16);
      goto LABEL_6;
    case 5:
      uint64_t v5 = sub_1003342E0(a1, *(void **)(a1 + 32), (uint64_t)v16);
LABEL_6:
      uint64_t v6 = v5;
      goto LABEL_10;
    case 8:
      sub_100334714(a1, *(void **)(a1 + 32), v16);
      goto LABEL_9;
    case 10:
      sub_100334944(a1, *(void **)(a1 + 32), v16);
LABEL_9:
      uint64_t v6 = 1LL;
LABEL_10:
      uint64_t v7 = *(void **)(v4 + 112);
      id v11 = 0LL;
      unsigned __int8 v8 = [v7 setReport:v16 reportLength:17 withIdentifier:0 forType:1 error:&v11];
      id v1 = v11;
      uint64_t v9 = (os_log_s *)qword_1008F7708;
      if ((v8 & 1) != 0)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = *v3;
          *(_DWORD *)__int128 buf = 67109376;
          int v13 = v10;
          __int16 v14 = 2048;
          uint64_t v15 = v6;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Send report to AOP (type %d) success. Return 0x%016llx",  buf,  0x12u);
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F7708, OS_LOG_TYPE_ERROR))
      {
        sub_10066CB04(v3, (uint64_t)v1, v9);
      }

      break;
    default:
      break;
  }
}

uint64_t sub_1003341C0(uint64_t a1, void *a2, _BYTE *a3)
{
  id v4 = a2;
  *a3 = 1;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"baseDramWakePeriodSeconds"]);
  if (v5 && (uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber), (objc_opt_isKindOfClass(v5, v6) & 1) != 0))
  {
    unsigned int v7 = [v5 unsignedCharValue];
    if (v7) {
      char v8 = v7;
    }
    else {
      char v8 = 60;
    }
    a3[2] = v8;
    uint64_t v9 = 3LL;
  }

  else
  {
    uint64_t v9 = 1LL;
  }

  int v10 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"running"]);

  if (v10)
  {
    uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSNumber);
    if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0) {
      a3[1] = [v10 unsignedCharValue] != 0;
    }
  }

  return v9;
}

void sub_1003342B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003342E0(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  *(_BYTE *)a3 = 5;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"bufferSize"]);
  if (v5)
  {
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
    {
      unsigned int v7 = [v5 unsignedShortValue];
      if (v7 >= 0x800) {
        __int16 v8 = 2048;
      }
      else {
        __int16 v8 = v7;
      }
      *(_WORD *)(a3 + 1) = v8;
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"multiType"]);

  if (v9 && (uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSNumber), (objc_opt_isKindOfClass(v9, v10) & 1) != 0))
  {
    *(_BYTE *)(a3 + 3) = [v9 unsignedCharValue] != 0;
    uint64_t v11 = 5LL;
  }

  else
  {
    uint64_t v11 = 1LL;
  }

  return v11;
}

void sub_1003343D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100334400(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  *(_BYTE *)a3 = 3;
  *(void *)(a3 + 1) = 0x28000AFFB01F0816LL;
  *(_BYTE *)(a3 + 9) = 0;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"conf"]);
  if (v5 && (uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSDictionary), (objc_opt_isKindOfClass(v5, v6) & 1) != 0))
  {
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"appleType"]);
    if (v7)
    {
      uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSNumber);
      if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0) {
        *(_BYTE *)(a3 + 1) = [v7 unsignedCharValue];
      }
    }

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"payloadLengthLimits"]);

    if (v9 && (uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSArray), (objc_opt_isKindOfClass(v9, v10) & 1) != 0))
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 objectAtIndex:0]);
      *(_BYTE *)(a3 + 2) = [v11 unsignedCharValue];

      char v12 = (void *)objc_claimAutoreleasedReturnValue([v9 objectAtIndex:1]);
      *(_BYTE *)(a3 + 3) = [v12 unsignedCharValue];

      uint64_t v13 = 3LL;
    }

    else
    {
      uint64_t v13 = 1LL;
    }

    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"rssiLimits"]);

    if (v14)
    {
      uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSArray);
      if ((objc_opt_isKindOfClass(v14, v15) & 1) != 0)
      {
        unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([v14 objectAtIndex:0]);
        *(_BYTE *)(a3 + 4) = [v16 charValue];

        char v17 = (void *)objc_claimAutoreleasedReturnValue([v14 objectAtIndex:1]);
        *(_BYTE *)(a3 + 5) = [v17 charValue];

        v13 |= 8uLL;
      }
    }

    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"pktSize"]);

    if (v18)
    {
      uint64_t v19 = objc_opt_class(&OBJC_CLASS___NSNumber);
      if ((objc_opt_isKindOfClass(v18, v19) & 1) != 0)
      {
        *(_WORD *)(a3 + 6) = (unsigned __int16)[v18 unsignedShortValue];
        v13 |= 0x20uLL;
      }
    }

    id v20 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"numLines"]);

    if (v20)
    {
      uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSNumber);
      if ((objc_opt_isKindOfClass(v20, v21) & 1) != 0)
      {
        unsigned int v22 = [v20 unsignedShortValue];
        if (v22 <= 1) {
          __int16 v23 = 1;
        }
        else {
          __int16 v23 = v22;
        }
        *(_WORD *)(a3 + _Block_object_dispose(va, 8) = v23;
        v13 |= 0x80uLL;
      }
    }
  }

  else
  {
    uint64_t v13 = 1LL;
  }

  return v13;
}

void sub_1003346B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100334714(uint64_t a1, void *a2, _BYTE *a3)
{
  id v4 = a2;
  *a3 = 8;
  id v16 = v4;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"TypeToRssiThresholdMapping"]);
  if (!v5) {
    goto LABEL_16;
  }
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) == 0) {
    goto LABEL_16;
  }
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 allKeys]);
  id v8 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (!v8)
  {

    unsigned __int8 v9 = 0;
LABEL_15:
    bzero(&a3[(2 * v9) | 1], 2LL * (2 - v9) + 2);
    goto LABEL_16;
  }

  unsigned __int8 v9 = 0;
  uint64_t v10 = *(void *)v18;
  uint64_t v11 = a3 + 1;
  while (2)
  {
    for (std::string::size_type i = 0LL; i != v8; std::string::size_type i = (char *)i + 1)
    {
      if (*(void *)v18 != v10) {
        objc_enumerationMutation(v7);
      }
      uint64_t v13 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
      v11[2 * v9] = [v13 unsignedIntValue];
      __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:v13]);
      v11[2 * v9 + 1] = [v14 intValue];

      if (++v9 == 3)
      {

        goto LABEL_16;
      }
    }

    id v8 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v8) {
      continue;
    }
    break;
  }

  if (v9 <= 2u) {
    goto LABEL_15;
  }
LABEL_16:

  return 1LL;
}

void sub_1003348F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100334944(uint64_t a1, void *a2, _BYTE *a3)
{
  *a3 = 10;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a2 valueForKey:@"log_verbose"]);
  uint64_t v5 = v4;
  if (v4) {
    a3[1] = [v4 unsignedIntValue];
  }

  return 1LL;
}

void sub_100334998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1003349A8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = *a2;
      if (v7 <= v6) {
        unint64_t v9 = v6 % v7;
      }
    }

    else
    {
      unint64_t v9 = ((_DWORD)v7 - 1) & v6;
    }

    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v6)
          {
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= v7) {
                v12 %= v7;
              }
            }

            else
            {
              v12 &= v7 - 1;
            }

            if (v12 != v9) {
              break;
            }
          }

          uint64_t v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  else
  {
    unint64_t v9 = 0LL;
  }

  uint64_t v11 = operator new(0x28uLL);
  void *v11 = 0LL;
  v11[1] = v6;
  *((_BYTE *)v11 + 16) = **a4;
  *((_DWORD *)v11 + 9) = 0;
  *(void *)((char *)v11 + 20) = 0LL;
  *(void *)((char *)v11 + 2_Block_object_dispose(va, 8) = 0LL;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1LL;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_10005141C(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v9 = v6 % v7;
      }
      else {
        unint64_t v9 = v6;
      }
    }

    else
    {
      unint64_t v9 = ((_DWORD)v7 - 1) & v6;
    }
  }

  uint64_t v19 = *(void *)a1;
  __int128 v20 = *(void **)(*(void *)a1 + 8 * v9);
  if (v20)
  {
    void *v11 = *v20;
LABEL_38:
    *__int128 v20 = v11;
    goto LABEL_39;
  }

  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v9) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }

    else
    {
      v21 &= v7 - 1;
    }

    __int128 v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }

void sub_100334BC4(_Unwind_Exception *a1)
{
}

char *sub_100334BD8(uint64_t a1, char *__src, char *a3)
{
  id v3 = a3;
  id v4 = __src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    float v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0LL;
    }
    __int128 v20 = &v19[8 * v16];
    __int128 __p = v19;
    char v27 = v20;
    char v28 = v20;
    char v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        __int16 v23 = (char *)sub_100008BA0(v8, v22);
        __int128 v20 = &v23[8 * (v22 >> 2)];
        __int128 __p = v23;
        char v27 = v20;
        char v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        char v27 = v20;
      }
    }

    *(void *)__int128 v20 = *(void *)v3;
    char v28 = v20 + 8;
    id v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + _Block_object_dispose(va, 8) = __src + 8;
  }

  else
  {
    unint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)id v4 = *(void *)v3;
  }

  return v4;
}

void sub_100334DDC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100334E14(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493LL) {
    sub_100008BD4();
  }
  return operator new(56 * a2);
}

void *sub_100334E5C(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  id v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    sub_100334ED4(a1, 0x6DB6DB6DB6DB6DB7LL * (v5 >> 3));
    unint64_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }

  return a1;
}

char *sub_100334ED4(void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493LL) {
    abort();
  }
  unint64_t result = (char *)sub_100334E14((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

char *sub_100334F24(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  int64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v6 = a5;
  unint64_t v7 = __src;
  uint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      abort();
    }
    float v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      uint64_t v16 = operator new(v15);
    }
    else {
      uint64_t v16 = 0LL;
    }
    char v26 = &v13[(void)v16];
    char v27 = &v13[(void)v16 + v6];
    char v28 = v26;
    do
    {
      char v29 = *v7++;
      *v28++ = v29;
      --v6;
    }

    while (v6);
    uint64_t v30 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      __int128 v32 = v26;
    }

    else
    {
      __int128 v31 = v5;
      __int128 v32 = v26;
      do
      {
        char v33 = *--v31;
        *--__int128 v32 = v33;
      }

      while (v31 != v30);
      uint64_t v10 = *(char **)(a1 + 8);
    }

    __int128 v34 = (char *)v16 + v15;
    if (v10 != v5) {
      memmove(v27, v5, v10 - v5);
    }
    __int128 v35 = *(char **)a1;
    *(void *)a1 = v32;
    *(void *)(a1 + _Block_object_dispose(va, 8) = &v27[v10 - v5];
    *(void *)(a1 + 16) = v34;
    if (v35) {
      operator delete(v35);
    }
    return v26;
  }

  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    unint64_t v18 = &__src[a5];
    __int128 v20 = *(char **)(a1 + 8);
LABEL_17:
    unint64_t v21 = &v5[v6];
    unint64_t v22 = &v20[-v6];
    __int16 v23 = v20;
    if (&v20[-v6] < v10)
    {
      int64_t v24 = &v10[v6] - v20;
      __int16 v23 = v20;
      do
      {
        char v25 = *v22++;
        *v23++ = v25;
        --v24;
      }

      while (v24);
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v23;
    if (v20 != v21) {
      memmove(&v5[v6], v5, v20 - v21);
    }
    if (v18 != v7) {
      memmove(v5, v7, v18 - v7);
    }
    return v5;
  }

  unint64_t v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  __int128 v20 = &v10[v19];
  *(void *)(a1 + _Block_object_dispose(va, 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

uint64_t sub_100335100(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10066CB88();
  }
  v19[0] = 0LL;
  v19[1] = 0LL;
  sub_100242F28((uint64_t)v19, a1 + 8);
  uint64_t v6 = *(void **)(a1 + 80);
  unint64_t v7 = (void *)(a1 + 88);
  if (v6 != (void *)(a1 + 88))
  {
    do
    {
      uint64_t v8 = v6[4];
      if (v8 && *(_BYTE *)(*(void *)(v8 + 48) + 160LL))
      {
        uint64_t v9 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v15 = *(void *)(v8 + 32);
          *(_DWORD *)__int128 buf = 134218752;
          uint64_t v21 = a2;
          __int16 v22 = 1024;
          unsigned int v23 = a3;
          __int16 v24 = 1024;
          int v25 = a4;
          __int16 v26 = 2048;
          uint64_t v27 = v15;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "BTLocalDeviceMsgHandler::BTLocalDeviceStatusEventCallback localDevice:%llx event:%d result:%d cbid:%llx",  buf,  0x22u);
        }

        xpc_object_t v10 = xpc_dictionary_create(0LL, 0LL, 0LL);
        uint64_t v11 = v10;
        if (v10)
        {
          xpc_dictionary_set_uint64(v10, "kCBMsgArgID", *(void *)(v8 + 32));
          xpc_dictionary_set_uint64(v11, "kCBMsgArgLocalDeviceID", a2);
          xpc_dictionary_set_uint64(v11, "kCBMsgArgResult", a4);
          xpc_dictionary_set_uint64(v11, "kCBMsgArgEvent", a3);
          sub_100260FEC(*(void *)(v8 + 48), "kCBMsgIdLocalDeviceStatusEvent", v11, 1);
        }
      }

      uint64_t v12 = (void *)v6[1];
      if (v12)
      {
        do
        {
          float v13 = v12;
          uint64_t v12 = (void *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          float v13 = (void *)v6[2];
          BOOL v14 = *v13 == (void)v6;
          uint64_t v6 = v13;
        }

        while (!v14);
      }

      uint64_t v6 = v13;
    }

    while (v13 != v7);
  }

  return sub_100242FAC((uint64_t)v19);
}

void sub_100335334( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_100335350(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_100242F28((uint64_t)v18, a1 + 8);
  unint64_t v7 = *(void **)(a1 + 80);
  if (v7 != (void *)(a1 + 88))
  {
    do
    {
      uint64_t v8 = v7[4];
      if (v8 && *(_BYTE *)(*(void *)(v8 + 48) + 160LL))
      {
        uint64_t v9 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v15 = *(void *)(v8 + 32);
          *(_DWORD *)__int128 buf = 134218752;
          uint64_t v20 = a2;
          __int16 v21 = 1024;
          int v22 = a3;
          __int16 v23 = 2048;
          uint64_t v24 = a4;
          __int16 v25 = 2048;
          uint64_t v26 = v15;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "BTLocalDeviceMsgHandler::BTLocalDeviceLeTestStoppedCallback localDevice:%llx result:%d nbPackets:%lld cbid:%llx",  buf,  0x26u);
        }

        xpc_object_t v10 = xpc_dictionary_create(0LL, 0LL, 0LL);
        uint64_t v11 = v10;
        if (v10)
        {
          xpc_dictionary_set_uint64(v10, "kCBMsgArgID", *(void *)(v8 + 32));
          xpc_dictionary_set_uint64(v11, "kCBMsgArgLocalDeviceID", a2);
          xpc_dictionary_set_uint64(v11, "kCBMsgArgResult", a3);
          xpc_dictionary_set_uint64(v11, "kCBMsgArgNumberOfPackets", a4);
          sub_100260FEC(*(void *)(v8 + 48), "kCBMsgIdLocalDeviceLETestStoppedEvent", v11, 1);
        }
      }

      uint64_t v12 = (void *)v7[1];
      if (v12)
      {
        do
        {
          float v13 = v12;
          uint64_t v12 = (void *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          float v13 = (void *)v7[2];
          BOOL v14 = *v13 == (void)v7;
          unint64_t v7 = v13;
        }

        while (!v14);
      }

      unint64_t v7 = v13;
    }

    while (v13 != (void *)(a1 + 88));
  }

  return sub_100242FAC((uint64_t)v18);
}

void sub_10033555C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_100335578(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const void *a5)
{
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, a1 + 8);
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88))
  {
    do
    {
      uint64_t v10 = v9[4];
      if (v10 && *(_BYTE *)(*(void *)(v10 + 48) + 160LL))
      {
        uint64_t v11 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v17 = *(void *)(v10 + 32);
          *(_DWORD *)__int128 buf = 134218752;
          uint64_t v22 = a2;
          __int16 v23 = 1024;
          int v24 = a3;
          __int16 v25 = 2048;
          uint64_t v26 = a4;
          __int16 v27 = 2048;
          uint64_t v28 = v17;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "BTLocalDeviceMsgHandler::BTLocalDeviceAFHMapChangedCallback localDevice:%llx result:%d remoteDevice:%llx cbid:%llx",  buf,  0x26u);
        }

        xpc_object_t v12 = xpc_dictionary_create(0LL, 0LL, 0LL);
        float v13 = v12;
        if (v12)
        {
          xpc_dictionary_set_uint64(v12, "kCBMsgArgID", *(void *)(v10 + 32));
          xpc_dictionary_set_uint64(v13, "kCBMsgArgLocalDeviceID", a2);
          xpc_dictionary_set_uint64(v13, "kCBMsgArgResult", a3);
          xpc_dictionary_set_uint64(v13, "kCBMsgArgBTDevice", a4);
          xpc_dictionary_set_data(v13, "kCBMsgArgAFHMap", a5, 0xAuLL);
          sub_100260FEC(*(void *)(v10 + 48), "kCBMsgIdLocalDeviceAFHMapChangedEvent", v13, 1);
        }
      }

      BOOL v14 = (void *)v9[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          BOOL v14 = (void *)*v14;
        }

        while (v14);
      }

      else
      {
        do
        {
          uint64_t v15 = (void *)v9[2];
          BOOL v16 = *v15 == (void)v9;
          uint64_t v9 = v15;
        }

        while (!v16);
      }

      uint64_t v9 = v15;
    }

    while (v15 != (void *)(a1 + 88));
  }

  return sub_100242FAC((uint64_t)v20);
}

void sub_100335798( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_1003357B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v16[0] = 0LL;
  v16[1] = 0LL;
  sub_100242F28((uint64_t)v16, a1 + 8);
  uint64_t v6 = *(void **)(a1 + 80);
  if (v6 != (void *)(a1 + 88))
  {
    do
    {
      uint64_t v7 = v6[4];
      if (v7 && *(_BYTE *)(*(void *)(v7 + 48) + 160LL))
      {
        uint64_t v8 = (os_log_s *)qword_1008F75F0;
        if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v14 = *(void *)(v7 + 32);
          *(_DWORD *)__int128 buf = 134218496;
          uint64_t v18 = a2;
          __int16 v19 = 2048;
          uint64_t v20 = a3;
          __int16 v21 = 2048;
          uint64_t v22 = v14;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "BTLocalDeviceMsgHandler::BTLocalDeviceLinkModeChangedCallback localDevice:%llx device:%llx cbid:%llx",  buf,  0x20u);
        }

        xpc_object_t v9 = xpc_dictionary_create(0LL, 0LL, 0LL);
        uint64_t v10 = v9;
        if (v9)
        {
          xpc_dictionary_set_uint64(v9, "kCBMsgArgID", *(void *)(v7 + 32));
          xpc_dictionary_set_uint64(v10, "kCBMsgArgLocalDeviceID", a2);
          xpc_dictionary_set_uint64(v10, "kCBMsgArgBTDevice", a3);
          sub_100260FEC(*(void *)(v7 + 48), "kCBMsgIdLocalDeviceLinkModeChangedEvent", v10, 1);
        }
      }

      uint64_t v11 = (void *)v6[1];
      if (v11)
      {
        do
        {
          xpc_object_t v12 = v11;
          uint64_t v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          xpc_object_t v12 = (void *)v6[2];
          BOOL v13 = *v12 == (void)v6;
          uint64_t v6 = v12;
        }

        while (!v13);
      }

      uint64_t v6 = v12;
    }

    while (v12 != (void *)(a1 + 88));
  }

  return sub_100242FAC((uint64_t)v16);
}

void sub_100335990( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_1003359AC(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  if (a4) {
    return sub_100335100(a4, result, a2, a3);
  }
  return result;
}

uint64_t sub_1003359CC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return sub_1003357B4(a3, result, a2);
  }
  return result;
}

uint64_t sub_1003359E8(uint64_t result, int a2, unsigned int a3, uint64_t a4)
{
  if (a4) {
    return sub_100335350(a4, result, a2, a3);
  }
  return result;
}

uint64_t sub_100335A08(uint64_t result, int a2, uint64_t a3, const void *a4, uint64_t a5)
{
  if (a5) {
    return sub_100335578(a5, result, a2, a3, a4);
  }
  return result;
}

void *sub_100335A2C(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_10043C910(a1, a2);
  *uint64_t v3 = &off_100891CA8;
  v3[12] = 0LL;
  v3[11] = 0LL;
  v3[10] = v3 + 11;
  *((_BYTE *)v3 + 104) = 0;
  *((_BYTE *)v3 + 106) = 0;
  if (qword_1008EFE30 != -1) {
    dispatch_once(&qword_1008EFE30, &stru_100891CC8);
  }
  return a1;
}

void sub_100335A9C(id a1)
{
  double v54 = "kCBMsgIdLocalDeviceGetDefaultMsg";
  uint64_t v55 = 32LL;
  uint64_t v56 = &v54;
  id v1 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v1[4] = sub_100336628;
  void v1[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceAddCallbacksMsg";
  uint64_t v55 = 34LL;
  uint64_t v56 = &v54;
  int v2 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v2[4] = sub_10033681C;
  void v2[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceRemoveCallbacksMsg";
  uint64_t v55 = 37LL;
  uint64_t v56 = &v54;
  uint64_t v3 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v3[4] = sub_100336B14;
  void v3[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceMaskCallbacks";
  uint64_t v55 = 32LL;
  uint64_t v56 = &v54;
  uint64_t v4 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  void v4[4] = sub_100336DE8;
  void v4[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceSetModulePowerMsg";
  uint64_t v55 = 36LL;
  uint64_t v56 = &v54;
  int64_t v5 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  void v5[4] = sub_100336F00;
  void v5[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceGetModulePowerMsg";
  uint64_t v55 = 36LL;
  uint64_t v56 = &v54;
  uint64_t v6 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  void v6[4] = sub_100337070;
  void v6[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceGetSpatialPlatformSupportMsg";
  uint64_t v55 = 47LL;
  uint64_t v56 = &v54;
  uint64_t v7 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v7[4] = sub_1003371A4;
  void v7[5] = 0LL;
  double v54 = "kCBMsgIdLocalDevicePowerResetMsg";
  uint64_t v55 = 32LL;
  uint64_t v56 = &v54;
  uint64_t v8 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  void v8[4] = sub_10033728C;
  void v8[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceGetAirplaneModeStatusMsg";
  uint64_t v55 = 43LL;
  uint64_t v56 = &v54;
  xpc_object_t v9 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  void v9[4] = sub_100337350;
  void v9[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceGetAddressStringMsg";
  uint64_t v55 = 38LL;
  uint64_t v56 = &v54;
  uint64_t v10 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  void v10[4] = sub_100337438;
  void v10[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceGetNameMsg";
  uint64_t v55 = 29LL;
  uint64_t v56 = &v54;
  uint64_t v11 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  void v11[4] = sub_1003375B4;
  v11[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceSetDiscoverableMsg";
  uint64_t v55 = 37LL;
  uint64_t v56 = &v54;
  xpc_object_t v12 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  void v12[4] = sub_10033777C;
  void v12[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceGetDiscoverableMsg";
  uint64_t v55 = 37LL;
  uint64_t v56 = &v54;
  BOOL v13 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v13[4] = sub_100337868;
  void v13[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceSetConnectableMsg";
  uint64_t v55 = 36LL;
  uint64_t v56 = &v54;
  uint64_t v14 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  void v14[4] = sub_100337950;
  _BYTE v14[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceGetConnectableMsg";
  uint64_t v55 = 36LL;
  uint64_t v56 = &v54;
  uint64_t v15 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  void v15[4] = sub_100337A3C;
  v15[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceGetPairingStatusMsg";
  uint64_t v55 = 38LL;
  uint64_t v56 = &v54;
  BOOL v16 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v16[4] = sub_100337B24;
  v16[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceGetPairedDevicesMsg";
  uint64_t v55 = 38LL;
  uint64_t v56 = &v54;
  uint64_t v17 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  void v17[4] = sub_100337C0C;
  v17[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceGetConnectionStatusMsg";
  uint64_t v55 = 41LL;
  uint64_t v56 = &v54;
  uint64_t v18 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v18[4] = sub_100337DD4;
  void v18[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceGetConnectedDevicesMsg";
  uint64_t v55 = 41LL;
  uint64_t v56 = &v54;
  __int16 v19 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  void v19[4] = sub_100337EBC;
  v19[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceGetConnectingDevicesMsg";
  uint64_t v55 = 42LL;
  uint64_t v56 = &v54;
  uint64_t v20 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  void v20[4] = sub_100338070;
  v20[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceGetAdvertisingStatusMsg";
  uint64_t v55 = 42LL;
  uint64_t v56 = &v54;
  __int16 v21 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  void v21[4] = sub_100338224;
  v21[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceGetScanningMsg";
  uint64_t v55 = 33LL;
  uint64_t v56 = &v54;
  uint64_t v22 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v22[4] = sub_10033830C;
  v22[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceEnableDUTModeMsg";
  uint64_t v55 = 35LL;
  uint64_t v56 = &v54;
  __int16 v23 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v23[4] = sub_1003383F4;
  void v23[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceGetDUTModeEnabledMsg";
  uint64_t v55 = 39LL;
  uint64_t v56 = &v54;
  int v24 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  uint8_t v24[4] = sub_100338490;
  void v24[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceEnableLeTxTestModeMsg";
  uint64_t v55 = 40LL;
  uint64_t v56 = &v54;
  __int16 v25 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  _OWORD v25[4] = sub_100338578;
  void v25[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceEnableLeRxTestModeMsg";
  uint64_t v55 = 40LL;
  uint64_t v56 = &v54;
  uint64_t v26 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v26[4] = sub_100338710;
  void v26[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceDisableLeTestModeMsg";
  uint64_t v55 = 39LL;
  uint64_t v56 = &v54;
  __int16 v27 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  _OWORD v27[4] = sub_1003387FC;
  v27[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceSupportsServiceMsg";
  uint64_t v55 = 37LL;
  uint64_t v56 = &v54;
  uint64_t v28 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v28[4] = sub_1003388C0;
  void v28[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceAdvertiseDataMsg";
  uint64_t v55 = 35LL;
  uint64_t v56 = &v54;
  char v29 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v29[4] = sub_1003389D0;
  v29[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceRemoveDataMsg";
  uint64_t v55 = 32LL;
  uint64_t v56 = &v54;
  uint64_t v30 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  uint8_t v30[4] = sub_100338AF4;
  void v30[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceRegisterForPowerUpdatesMsg";
  uint64_t v55 = 45LL;
  uint64_t v56 = &v54;
  __int128 v31 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v31[4] = sub_100338C18;
  v31[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceUnregisterForPowerUpdatesMsg";
  uint64_t v55 = 47LL;
  uint64_t v56 = &v54;
  __int128 v32 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v32[4] = sub_100338F00;
  v32[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceReadPowerConsumptionMsg";
  uint64_t v55 = 42LL;
  uint64_t v56 = &v54;
  char v33 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v33[4] = sub_1003391B8;
  void v33[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceRegisterForPowerProfileStatisticsMsg";
  uint64_t v55 = 55LL;
  uint64_t v56 = &v54;
  __int128 v34 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v34[4] = sub_1003392A0;
  v34[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceUnregisterForPowerProfileStatisticsMsg";
  uint64_t v55 = 57LL;
  uint64_t v56 = &v54;
  __int128 v35 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v35[4] = sub_100339588;
  v35[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceReadPowerProfileStatisticsMsg";
  uint64_t v55 = 48LL;
  uint64_t v56 = &v54;
  __int128 v36 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v36[4] = sub_100339840;
  _DWORD v36[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceReadEnhancedPowerProfileStatisticsMsg";
  uint64_t v55 = 56LL;
  uint64_t v56 = &v54;
  __int16 v37 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v37[4] = sub_100339994;
  v37[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceReadTransportSwitchStatisticsMsg";
  uint64_t v55 = 51LL;
  uint64_t v56 = &v54;
  unsigned int v38 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v38[4] = sub_100339AC8;
  void v38[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceReadDetailedPowerProfileStatisticsMsg";
  uint64_t v55 = 56LL;
  uint64_t v56 = &v54;
  uint64_t v39 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v39[4] = sub_100339C1C;
  v39[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceStartHCITracesMsg";
  uint64_t v55 = 36LL;
  uint64_t v56 = &v54;
  uint64_t v40 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v40[4] = sub_100339E80;
  v40[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceStopHCITracesMsg";
  uint64_t v55 = 35LL;
  uint64_t v56 = &v54;
  unint64_t v41 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v41[4] = sub_100339F44;
  v41[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceShowPowerPromptMsg";
  uint64_t v55 = 37LL;
  uint64_t v56 = &v54;
  __int16 v42 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  void v42[4] = sub_10033A104;
  v42[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceSetAFHMapMsg";
  uint64_t v55 = 31LL;
  uint64_t v56 = &v54;
  uint64_t v43 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v43[4] = sub_10033A1EC;
  v43[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceReadAFHMapMsg";
  uint64_t v55 = 32LL;
  uint64_t v56 = &v54;
  uint64_t v44 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v44[4] = sub_10033A32C;
  v44[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceSetDelayedWakeMsg";
  uint64_t v55 = 36LL;
  uint64_t v56 = &v54;
  uint64_t v45 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v45[4] = sub_10033A414;
  v45[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceSetDenylistEnabledMsg";
  uint64_t v55 = 40LL;
  uint64_t v56 = &v54;
  int v46 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v46[4] = sub_10033A4C8;
  v46[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceGetDenylistEnabledMsg";
  uint64_t v55 = 40LL;
  uint64_t v56 = &v54;
  char v47 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v47[4] = sub_10033A5B0;
  v47[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceGetDeviceNamesThatMayBeDenylistedMsg";
  uint64_t v55 = 55LL;
  uint64_t v56 = &v54;
  __int128 v48 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v48[4] = sub_10033A698;
  v48[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceGetSharingAddressesMsg";
  uint64_t v55 = 41LL;
  uint64_t v56 = &v54;
  char v49 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v49[4] = sub_10033A858;
  v49[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceIsSharingEnabledMsg";
  uint64_t v55 = 38LL;
  uint64_t v56 = &v54;
  uint64_t v50 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v50[4] = sub_10033AA1C;
  v50[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceDumpExposureNotificationDatabaseMsg";
  uint64_t v55 = 54LL;
  uint64_t v56 = &v54;
  char v51 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v51[4] = sub_10033AB04;
  v51[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceLinkQualityGetDataMsg";
  uint64_t v55 = 40LL;
  uint64_t v56 = &v54;
  uint64_t v52 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v52[4] = sub_10033AC80;
  v52[5] = 0LL;
  double v54 = "kCBMsgIdLocalDeviceSetCallScreeningMsg";
  uint64_t v55 = 38LL;
  uint64_t v56 = &v54;
  uint64_t v53 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v54, (uint64_t)&unk_1006C2518, (_OWORD **)&v56);
  v53[4] = sub_10033AF10;
  v53[5] = 0LL;
}

void sub_100336628(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSessionID");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066CC04();
LABEL_11:
    uint64_t v6 = 1LL;
    goto LABEL_12;
  }

uint64_t sub_10033681C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10066CC64();
  }
  v21[0] = 0LL;
  v21[1] = 0LL;
  sub_100242F28((uint64_t)v21, a1 + 8);
  if (!uint64)
  {
LABEL_20:
    int v17 = 1;
    goto LABEL_23;
  }

  uint64_t v7 = *(void *)(a1 + 72);
  int v8 = *(_DWORD *)(v7 + 40);
  au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
  uint64_t v10 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134218496;
    *(void *)&uint8_t buf[4] = uint64;
    __int16 v23 = 1024;
    int v24 = v8;
    __int16 v25 = 2048;
    uint64_t v26 = asid;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "identifier mapping localDevice:%llx pid:%d asid:%llx",  buf,  0x1Cu);
  }

  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100891CE8);
  }
  if (sub_1004976BC(qword_1008D61A0, uint64, v8, asid))
  {
    uint64_t v11 = *(void **)(a1 + 80);
    if (v11 != (void *)(a1 + 88))
    {
      do
      {
        uint64_t v12 = v11[4];
        uint64_t v13 = (void *)v11[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            uint64_t v13 = (void *)*v13;
          }

          while (v13);
        }

        else
        {
          do
          {
            uint64_t v14 = (void *)v11[2];
            BOOL v15 = *v14 == (void)v11;
            uint64_t v11 = v14;
          }

          while (!v15);
        }

        uint64_t v11 = v14;
      }

      while (v14 != (void *)(a1 + 88));
    }

    __int16 v16 = calloc(1uLL, 0x38uLL);
    *(void *)__int128 buf = v16;
    v16[4] = v6;
    v16[5] = uint64;
    v16[1] = sub_1003359E8;
    void v16[2] = sub_100335A08;
    *__int16 v16 = sub_1003359AC;
    v16[6] = *(void *)(a1 + 72);
    sub_1002555B0((uint64_t **)(a1 + 80), (unint64_t *)buf, (uint64_t *)buf);
    if (*(_BYTE *)(a1 + 104))
    {
      int v17 = 0;
    }

    else
    {
      int v17 = sub_1003C66A4(uint64, *(__int128 **)buf, a1);
      *(_BYTE *)(a1 + 104) = 1;
    }
  }

  else
  {
    int v17 = 7;
  }

void sub_100336AF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100336B14(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10066CCF0();
  }
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, a1 + 8);
  uint64_t v7 = *(void *)(a1 + 72);
  int v8 = *(_DWORD *)(v7 + 40);
  au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
  uint64_t v10 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134218496;
    *(void *)&uint8_t buf[4] = uint64;
    __int16 v22 = 1024;
    int v23 = v8;
    __int16 v24 = 2048;
    uint64_t v25 = asid;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "identifier mapping localDevice:%llx pid:%d asid:%llx",  buf,  0x1Cu);
  }

  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100891CE8);
  }
  if (sub_1004976BC(qword_1008D61A0, uint64, v8, asid))
  {
    uint64_t v11 = *(void **)(a1 + 80);
    if (v11 == (void *)(a1 + 88))
    {
LABEL_18:
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10066CCC4();
      }
      int v16 = 3;
    }

    else
    {
      while (1)
      {
        uint64_t v12 = v11[4];
        uint64_t v13 = (void *)v11[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            uint64_t v13 = (void *)*v13;
          }

          while (v13);
        }

        else
        {
          do
          {
            uint64_t v14 = (void *)v11[2];
            BOOL v15 = *v14 == (void)v11;
            uint64_t v11 = v14;
          }

          while (!v15);
        }

        uint64_t v11 = v14;
        if (v14 == (void *)(a1 + 88)) {
          goto LABEL_18;
        }
      }

      *(void *)__int128 buf = v11[4];
      if (*(_BYTE *)(a1 + 104))
      {
        int v16 = sub_1003C672C(uint64, (__int128 *)v12);
        *(_BYTE *)(a1 + 104) = 0;
      }

      else
      {
        int v16 = 0;
      }

      sub_10020166C(a1 + 80, (unint64_t *)buf);
      free(*(void **)buf);
    }
  }

  else
  {
LABEL_21:
    int v16 = 1;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  __int16 v18 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v16);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v18);
    xpc_release(v18);
  }

  return sub_100242FAC((uint64_t)v20);
}

void sub_100336DC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100336DE8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceEventMask");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066CD50();
LABEL_7:
    uint64_t v7 = 1LL;
    goto LABEL_8;
  }

void sub_100336F00(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTPowerModule");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTPowerMode");
  int v8 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 134218496;
    uint64_t v13 = uint64;
    __int16 v14 = 2048;
    uint64_t v15 = v6;
    __int16 v16 = 2048;
    uint64_t v17 = v7;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "BTLocalDeviceMsgHandler::handleBTLocalDeviceSetModulePowerMsg localDeviceId:%llx module:%llx powerOn:%llx",  (uint8_t *)&v12,  0x20u);
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v9 = (int)sub_1003C67A0(uint64, v6, v7);
    goto LABEL_6;
  }

  uint64_t v9 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v11);
    xpc_release(v11);
  }

void sub_100337070(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTPowerModule");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066CE24();
LABEL_7:
    uint64_t int64 = 1LL;
    goto LABEL_8;
  }

void sub_1003371A4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066CE84();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C6AC8(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgSpatialPlatformSupport", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10033728C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066CEE4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C6DB8(uint64);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_100337350(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066CF44();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C6F30(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgAirplaneMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_100337438(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v13 - v8;
  bzero((char *)&v13 - v8, v6);
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066CFA4();
    if (uint64)
    {
LABEL_3:
      else {
        uint64_t v10 = (int)sub_1003C6FC0(uint64, v9, v6);
      }
      goto LABEL_8;
    }
  }

  else if (uint64)
  {
    goto LABEL_3;
  }

  uint64_t v10 = 1LL;
LABEL_8:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_dictionary_set_string(v12, "kCBMsgArgAddressString", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v12);
    xpc_release(v12);
  }

void sub_1003375B4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  memset(&__p, 0, sizeof(__p));
  sub_10002418C(&__p, "");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D004();
LABEL_14:
    int v8 = 1;
    goto LABEL_15;
  }

void sub_10033775C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10033777C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoverable");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D064();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C70E4(uint64, v6);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100337868(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D0C4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C7288(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgDiscoverable", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_100337950(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnectable");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D124();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C7310(uint64, v6);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100337A3C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D184();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C7388(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgConnectable", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_100337B24(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D184();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C7410(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgPaired", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_100337C0C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  __chkstk_darwin(v6, 8 * v6);
  int v8 = (uint64_t *)((char *)&v15 - v7);
  bzero((char *)&v15 - v7, v9);
  uint64_t v15 = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D1E4();
  }

  else if (uint64)
  {
LABEL_3:
    int v10 = sub_1003C7498(uint64, v8, &v15, v6);
    goto LABEL_6;
  }

  int v10 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_dictionary_set_uint64(v12, "kCbMsgArgDeviceArrayMaxSize", v15);
    xpc_object_t v13 = xpc_array_create(0LL, 0LL);
    if (!v10 && v15)
    {
      for (uint64_t i = 0LL; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, v8[i]);
    }

    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v12);
    xpc_release(v13);
    xpc_release(v12);
  }

void sub_100337DD4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D244();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C761C(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgConnected", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_100337EBC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  __chkstk_darwin(v6, 8 * v6);
  int v8 = (unint64_t *)((char *)&v15 - v7);
  bzero((char *)&v15 - v7, v9);
  unint64_t v15 = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D2A4();
  }

  else if (uint64)
  {
LABEL_3:
    int v10 = sub_1003C76A4(uint64, v8, &v15, v6);
    goto LABEL_6;
  }

  int v10 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_object_t v13 = xpc_array_create(0LL, 0LL);
    if (!v10 && v15)
    {
      for (unint64_t i = 0LL; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, v8[i]);
    }

    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v12);
    xpc_release(v13);
    xpc_release(v12);
  }

void sub_100338070(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  __chkstk_darwin(v6, 8 * v6);
  int v8 = (unint64_t *)((char *)&v15 - v7);
  bzero((char *)&v15 - v7, v9);
  unint64_t v15 = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D304();
  }

  else if (uint64)
  {
LABEL_3:
    int v10 = sub_1003C7850(uint64, v8, &v15, v6);
    goto LABEL_6;
  }

  int v10 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_object_t v13 = xpc_array_create(0LL, 0LL);
    if (!v10 && v15)
    {
      for (unint64_t i = 0LL; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, v8[i]);
    }

    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v12);
    xpc_release(v13);
    xpc_release(v12);
  }

void sub_100338224(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D364();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C79FC(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgAdvertising", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10033830C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D3C4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C7A84(uint64, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgScanning", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_1003383F4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  if (uint64)
  {
    sub_1003C7AFC(uint64);
    uint64_t v7 = v6;
  }

  else
  {
    uint64_t v7 = 1LL;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100338490(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D424();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C7B64(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgDutModeEnabled", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_100338578(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgTestFrequency");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgPayloadSize");
  uint64_t v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgPayload");
  size_t v9 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    int v13 = 134218752;
    uint64_t v14 = uint64;
    __int16 v15 = 2048;
    uint64_t v16 = v6;
    __int16 v17 = 2048;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = v8;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "BTLocalDeviceMsgHandler::handleBTLocalDeviceEnableLeTxTestModeMsg localDeviceId:%llx testFrequency:%llx payloadSiz e:%llx payload:%llx",  (uint8_t *)&v13,  0x2Au);
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v10 = (int)sub_1003C7BEC(uint64, (unsigned __int16)v6, v7, v8);
    goto LABEL_6;
  }

  uint64_t v10 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v12);
    xpc_release(v12);
  }

void sub_100338710(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  unsigned __int16 v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgTestFrequency");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D484();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C7C78(uint64, v6);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_1003387FC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D4E4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C7CE8(uint64);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_1003388C0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgServices");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D544();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C7D50(uint64, v6, &value);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgServiceSuppored", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_1003389D0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  size_t length = 0LL;
  int data = xpc_dictionary_get_data(value, "kCBMsgArgKey", &length);
  size_t v11 = 0LL;
  uint64_t v7 = xpc_dictionary_get_data(value, "kCBMsgArgValue", &v11);
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10066D5A4();
  }
  uint64_t v8 = 1LL;
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_100338AF4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  size_t length = 0LL;
  int data = xpc_dictionary_get_data(value, "kCBMsgArgKey", &length);
  size_t v11 = 0LL;
  uint64_t v7 = xpc_dictionary_get_data(value, "kCBMsgArgValue", &v11);
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10066D604();
  }
  uint64_t v8 = 1LL;
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

uint64_t sub_100338C18(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10066D664();
  }
  v21[0] = 0LL;
  v21[1] = 0LL;
  sub_100242F28((uint64_t)v21, a1 + 8);
  if (!uint64)
  {
LABEL_20:
    int v17 = 1;
    goto LABEL_23;
  }

  uint64_t v7 = *(void *)(a1 + 72);
  int v8 = *(_DWORD *)(v7 + 40);
  au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
  uint64_t v10 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134218496;
    *(void *)&uint8_t buf[4] = uint64;
    __int16 v23 = 1024;
    int v24 = v8;
    __int16 v25 = 2048;
    uint64_t v26 = asid;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "identifier mapping localDevice:%llx pid:%d asid:%llx",  buf,  0x1Cu);
  }

  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100891CE8);
  }
  if (sub_1004976BC(qword_1008D61A0, uint64, v8, asid))
  {
    size_t v11 = *(void **)(a1 + 80);
    if (v11 != (void *)(a1 + 88))
    {
      do
      {
        uint64_t v12 = v11[4];
        int v13 = (void *)v11[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            int v13 = (void *)*v13;
          }

          while (v13);
        }

        else
        {
          do
          {
            uint64_t v14 = (void *)v11[2];
            BOOL v15 = *v14 == (void)v11;
            size_t v11 = v14;
          }

          while (!v15);
        }

        size_t v11 = v14;
      }

      while (v14 != (void *)(a1 + 88));
    }

    uint64_t v16 = calloc(1uLL, 0x38uLL);
    *(void *)__int128 buf = v16;
    v16[4] = v6;
    v16[5] = uint64;
    void v16[3] = sub_1003359CC;
    v16[6] = *(void *)(a1 + 72);
    sub_1002555B0((uint64_t **)(a1 + 80), (unint64_t *)buf, (uint64_t *)buf);
    if (*(_BYTE *)(a1 + 105))
    {
      int v17 = 0;
    }

    else
    {
      int v17 = sub_1003C7F2C(uint64, (uint64_t *)(*(void *)buf + 24LL), a1);
      *(_BYTE *)(a1 + 105) = 1;
    }
  }

  else
  {
    int v17 = 7;
  }

void sub_100338EDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100338F00(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10066D6C4();
  }
  v19[0] = 0LL;
  v19[1] = 0LL;
  sub_100242F28((uint64_t)v19, a1 + 8);
  uint64_t v6 = *(void *)(a1 + 72);
  int v7 = *(_DWORD *)(v6 + 40);
  au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v6 + 16));
  size_t v9 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134218496;
    *(void *)&uint8_t buf[4] = uint64;
    __int16 v21 = 1024;
    int v22 = v7;
    __int16 v23 = 2048;
    uint64_t v24 = asid;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "identifier mapping localDevice:%llx pid:%d asid:%llx",  buf,  0x1Cu);
  }

  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100891CE8);
  }
  if (sub_1004976BC(qword_1008D61A0, uint64, v7, asid))
  {
    uint64_t v10 = *(void **)(a1 + 80);
    if (v10 == (void *)(a1 + 88))
    {
LABEL_18:
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10066CCC4();
      }
      int v15 = 3;
    }

    else
    {
      while (1)
      {
        uint64_t v11 = v10[4];
        if (*(void *)(v11 + 24))
        {
        }

        uint64_t v12 = (void *)v10[1];
        if (v12)
        {
          do
          {
            int v13 = v12;
            uint64_t v12 = (void *)*v12;
          }

          while (v12);
        }

        else
        {
          do
          {
            int v13 = (void *)v10[2];
            BOOL v14 = *v13 == (void)v10;
            uint64_t v10 = v13;
          }

          while (!v14);
        }

        uint64_t v10 = v13;
        if (v13 == (void *)(a1 + 88)) {
          goto LABEL_18;
        }
      }

      *(void *)__int128 buf = v10[4];
      if (*(_BYTE *)(a1 + 105))
      {
        int v15 = sub_1003C7FDC(uint64);
        *(_BYTE *)(a1 + 105) = 0;
      }

      else
      {
        int v15 = 0;
      }

      sub_10020166C(a1 + 80, (unint64_t *)buf);
      free(*(void **)buf);
    }
  }

  else
  {
LABEL_21:
    int v15 = 1;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  int v17 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v15);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v17);
    xpc_release(v17);
  }

  return sub_100242FAC((uint64_t)v19);
}

void sub_100339194( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1003391B8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D724();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C8070(uint64, (uint64_t)&value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgPowerConsumed", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

uint64_t sub_1003392A0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10066D784();
  }
  v21[0] = 0LL;
  v21[1] = 0LL;
  sub_100242F28((uint64_t)v21, a1 + 8);
  if (!uint64)
  {
LABEL_20:
    int v17 = 1;
    goto LABEL_23;
  }

  uint64_t v7 = *(void *)(a1 + 72);
  int v8 = *(_DWORD *)(v7 + 40);
  au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
  uint64_t v10 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134218496;
    *(void *)&uint8_t buf[4] = uint64;
    __int16 v23 = 1024;
    int v24 = v8;
    __int16 v25 = 2048;
    uint64_t v26 = asid;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "identifier mapping localDevice:%llx pid:%d asid:%llx",  buf,  0x1Cu);
  }

  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100891CE8);
  }
  if (sub_1004976BC(qword_1008D61A0, uint64, v8, asid))
  {
    uint64_t v11 = *(void **)(a1 + 80);
    if (v11 != (void *)(a1 + 88))
    {
      do
      {
        uint64_t v12 = v11[4];
        int v13 = (void *)v11[1];
        if (v13)
        {
          do
          {
            BOOL v14 = v13;
            int v13 = (void *)*v13;
          }

          while (v13);
        }

        else
        {
          do
          {
            BOOL v14 = (void *)v11[2];
            BOOL v15 = *v14 == (void)v11;
            uint64_t v11 = v14;
          }

          while (!v15);
        }

        uint64_t v11 = v14;
      }

      while (v14 != (void *)(a1 + 88));
    }

    uint64_t v16 = calloc(1uLL, 0x38uLL);
    *(void *)__int128 buf = v16;
    v16[4] = v6;
    v16[5] = uint64;
    void v16[3] = sub_1003359CC;
    v16[6] = *(void *)(a1 + 72);
    sub_1002555B0((uint64_t **)(a1 + 80), (unint64_t *)buf, (uint64_t *)buf);
    if (*(_BYTE *)(a1 + 106))
    {
      int v17 = 0;
    }

    else
    {
      int v17 = sub_1003C810C(uint64, (uint64_t *)(*(void *)buf + 24LL), a1);
      *(_BYTE *)(a1 + 106) = 1;
    }
  }

  else
  {
    int v17 = 7;
  }

void sub_100339564( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100339588(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10066D7E4();
  }
  v19[0] = 0LL;
  v19[1] = 0LL;
  sub_100242F28((uint64_t)v19, a1 + 8);
  uint64_t v6 = *(void *)(a1 + 72);
  int v7 = *(_DWORD *)(v6 + 40);
  au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v6 + 16));
  size_t v9 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134218496;
    *(void *)&uint8_t buf[4] = uint64;
    __int16 v21 = 1024;
    int v22 = v7;
    __int16 v23 = 2048;
    uint64_t v24 = asid;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "identifier mapping localDevice:%llx pid:%d asid:%llx",  buf,  0x1Cu);
  }

  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100891CE8);
  }
  if (sub_1004976BC(qword_1008D61A0, uint64, v7, asid))
  {
    uint64_t v10 = *(void **)(a1 + 80);
    if (v10 == (void *)(a1 + 88))
    {
LABEL_18:
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10066CCC4();
      }
      int v15 = 3;
    }

    else
    {
      while (1)
      {
        uint64_t v11 = v10[4];
        if (*(void *)(v11 + 24))
        {
        }

        uint64_t v12 = (void *)v10[1];
        if (v12)
        {
          do
          {
            int v13 = v12;
            uint64_t v12 = (void *)*v12;
          }

          while (v12);
        }

        else
        {
          do
          {
            int v13 = (void *)v10[2];
            BOOL v14 = *v13 == (void)v10;
            uint64_t v10 = v13;
          }

          while (!v14);
        }

        uint64_t v10 = v13;
        if (v13 == (void *)(a1 + 88)) {
          goto LABEL_18;
        }
      }

      *(void *)__int128 buf = v10[4];
      if (*(_BYTE *)(a1 + 106))
      {
        int v15 = sub_1003C81BC(uint64);
        *(_BYTE *)(a1 + 106) = 0;
      }

      else
      {
        int v15 = 0;
      }

      sub_10020166C(a1 + 80, (unint64_t *)buf);
      free(*(void **)buf);
    }
  }

  else
  {
LABEL_21:
    int v15 = 1;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  int v17 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v15);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v17);
    xpc_release(v17);
  }

  return sub_100242FAC((uint64_t)v19);
}

void sub_10033981C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100339840(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  unsigned __int16 v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgReset");
  value[0] = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D844();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C8250(uint64, v6, (uint64_t)value + 6, (uint64_t)value + 4, (uint64_t)value + 2, (uint64_t)value);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsTransmitting", HIWORD(value[0]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsReceiving", WORD2(value[0]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsSleep", WORD1(value[0]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsOthers", LOWORD(value[0]));
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100339994(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  unsigned __int16 v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgReset");
  uint64_t v11 = 0LL;
  memset(v10, 0, sizeof(v10));
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D8A4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C8328(uint64, v6, (uint64_t)v10);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_data(v9, "kCBMsgArgData", v10, 0xF8uLL);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100339AC8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  unsigned __int16 v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgReset");
  uint64_t v10 = 0LL;
  uint64_t value = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D904();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C83DC(uint64, v6, (uint64_t)&value + 4, (uint64_t)&value, (uint64_t)&v10 + 4, (uint64_t)&v10);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsTotal", HIDWORD(value));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsSuccesful", value);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsDowngraded", HIDWORD(v10));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsInvolundaryDowngraded", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100339C1C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  unsigned __int16 v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgReset");
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  uint64_t value = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D964();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C84B0( uint64,  v6,  (uint64_t)&v16 + 4,  (uint64_t)&v16,  (uint64_t)&v15 + 4,  (uint64_t)&v15,  (uint64_t)&v14 + 4,  (uint64_t)&v14,  (uint64_t)&v13 + 4,  (uint64_t)&v13,  (uint64_t)&value + 4,  (uint64_t)&value,  (uint64_t)&v11 + 4,  (uint64_t)&v11,  (uint64_t)&v10 + 4,  (uint64_t)&v10);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsDurationTotal", HIDWORD(v16));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsDurationActive", v16);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsDurationIdle", HIDWORD(v15));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsDurationSleep", v15);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsDisableCounter", HIDWORD(v14));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsiPATxBT", v14);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsePATxBT", HIDWORD(v13));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsiPATxLE", v13);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsePATxLE", HIDWORD(value));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsConnectedRxBT", value);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsConnectedRxLE", HIDWORD(v11));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsScanRxBT", v11);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsScanRxLE", HIDWORD(v10));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsTotalPHYCal", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100339E80(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066D9C4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C85BC(uint64);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_100339F44(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  string = (char *)xpc_dictionary_get_string(value, "kCBMsgArgExtensionToken");
  uint64_t v7 = xpc_dictionary_get_string(value, "kCBMsgArgPath");
  uint64_t v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v15 - v10;
  bzero((char *)&v15 - v10, v8);
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066DA24();
    if (string) {
      goto LABEL_3;
    }
LABEL_5:
    else {
      uint64_t v12 = 1LL;
    }
    goto LABEL_9;
  }

  if (!string) {
    goto LABEL_5;
  }
LABEL_3:
  if (!*string || *(_BYTE *)(*(void *)(a1 + 72) + 89LL)) {
    goto LABEL_5;
  }
  uint64_t v12 = 3LL;
LABEL_9:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v14 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v12);
    xpc_dictionary_set_string(v14, "kCBMsgArgName", v11);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v14);
    xpc_release(v14);
  }

void sub_10033A104(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  string = (char *)xpc_dictionary_get_string(value, "kCBMsgArgBundleIdString");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066DA84();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C871C(uint64, string);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_10033A1EC(uint64_t a1, xpc_object_t xdict)
{
  size_t length = 0LL;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  int data = xpc_dictionary_get_data(value, "kCBMsgArgData", &length);
  if (length == 10)
  {
    uint64_t v7 = (uint64_t)data;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
    {
      sub_10066DAE4();
    }

    else if (uint64)
    {
LABEL_4:
      uint64_t v8 = (int)sub_1003C8808(uint64, v7);
LABEL_11:
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (!reply) {
        return;
      }
      uint64_t v10 = reply;
      uint64_t v11 = v8;
      goto LABEL_13;
    }

    uint64_t v8 = 1LL;
    goto LABEL_11;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_FAULT)) {
    sub_10066DB44();
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    uint64_t v11 = 3LL;
LABEL_13:
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_10033A32C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066DB7C();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C88F4(uint64, v6);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_10033A414(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgDelay");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10066DBDC();
  }
  int v6 = sub_1003C8A20(uint64);
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10033A4C8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066DC14();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C8A88(uint64, v6);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_10033A5B0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066DC74();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C8B00(uint64, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10033A698(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  unint64_t v16 = 0LL;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG);
  if (v7) {
    sub_10066DCD4();
  }
  __chkstk_darwin(v7, 248 * v6);
  uint64_t v9 = (char *)&v16 - v8;
  bzero((char *)&v16 - v8, v10);
  else {
    uint64_t v11 = 1LL;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v13 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
    xpc_object_t v14 = xpc_array_create(0LL, 0LL);
    if (v16)
    {
      for (unint64_t i = 0LL; i < v16; ++i)
      {
        xpc_array_set_string(v14, 0xFFFFFFFFFFFFFFFFLL, v9);
        v9 += 248;
      }
    }

    xpc_dictionary_set_value(v13, "kCBMsgArgDeviceArray", v14);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v13);
    xpc_release(v14);
    xpc_release(v13);
  }

void sub_10033A858(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  unint64_t v15 = 0LL;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG);
  if (v7) {
    sub_10066DD34();
  }
  __chkstk_darwin(v7, 6 * v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  bzero(v9, v8);
  else {
    uint64_t v10 = 1LL;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_object_t v13 = xpc_array_create(0LL, 0LL);
    if (v15)
    {
      for (unint64_t i = 0LL; i < v15; ++i)
      {
        xpc_array_set_data(v13, 0xFFFFFFFFFFFFFFFFLL, v9, 6uLL);
        v9 += 6;
      }
    }

    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v12);
    xpc_release(v13);
    xpc_release(v12);
  }

void sub_10033AA1C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066DD94();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C8CB4(uint64, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10033AB04(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v13 - v8;
  bzero((char *)&v13 - v8, v6);
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066DDF4();
    if (uint64)
    {
LABEL_3:
      else {
        uint64_t v10 = (int)sub_1003C8D5C(uint64);
      }
      goto LABEL_8;
    }
  }

  else if (uint64)
  {
    goto LABEL_3;
  }

  uint64_t v10 = 1LL;
LABEL_8:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_dictionary_set_string(v12, "kCBMsgArgBufferName", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v12);
    xpc_release(v12);
  }

void sub_10033AC80(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  bzero(v19, 0x21AuLL);
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10066DE54();
  }
  else {
    uint64_t v6 = 1LL;
  }
  xpc_object_t v7 = xpc_array_create(0LL, 0LL);
  v21[0] = 0LL;
  v21[1] = 0LL;
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    if (v19[0])
    {
      xpc_object_t xdicta = v9;
      uint64_t v18 = a1;
      unint64_t v10 = 0LL;
      uint64_t v11 = (const char *)&v20;
      do
      {
        xpc_object_t v12 = xpc_dictionary_create(0LL, 0LL, 0LL);
        v21[v10] = v12;
        xpc_dictionary_set_uint64(v12, "kCBMsgArgRetX", *((unsigned __int8 *)v11 - 10));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgRssi", *(v11 - 9));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgNoise", *(v11 - 8));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgSnr", *((unsigned __int8 *)v11 - 7));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgDataRate", *((unsigned __int16 *)v11 - 3));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgJitterBuffer", *((unsigned __int16 *)v11 - 2));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgCodecType", *((unsigned __int16 *)v11 - 1));
        xpc_dictionary_set_string(v12, "kCBMsgArgName", v11);
        xpc_array_set_value(v7, 0xFFFFFFFFFFFFFFFFLL, v12);
        ++v10;
        v11 += 268;
      }

      while (v10 < v19[0]);
      uint64_t v9 = xdicta;
      xpc_dictionary_set_value(xdicta, "kCBMsgArgBTLinkQualityData", v7);
      a1 = v18;
    }

    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    uint64_t v13 = 0LL;
    char v14 = 1;
    do
    {
      char v15 = v14;
      unint64_t v16 = (void *)v21[v13];
      if (v16) {
        xpc_release(v16);
      }
      char v14 = 0;
      uint64_t v13 = 1LL;
    }

    while ((v15 & 1) != 0);
    xpc_release(v7);
    xpc_release(v9);
  }

void sub_10033AF10(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  xpc_dictionary_get_uuid(value, "kCBMsgArgUUID");
  xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066DEB4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C8EC0();
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

uint64_t sub_10033B014(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10066DF14();
  }
  sub_10023BF24(a1 + 80, *(void **)(a1 + 88));
  *(void *)a1 = &off_100891BA0;
  sub_100242E28(a1 + 8);
  return a1;
}

void sub_10033B084(uint64_t a1)
{
  id v1 = (void *)sub_10033B014(a1);
  operator delete(v1);
}

BOOL sub_10033B098(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  uint64_t v11 = string;
  size_t v12 = strlen(string);
  int64_t v5 = sub_100331854(&xmmword_1008F7228, (uint64_t)&v11);
  if (v5)
  {
    uint64_t v11 = string;
    size_t v12 = strlen(string);
    uint64_t v13 = &v11;
    uint64_t v6 = sub_10033B2CC((uint64_t)&xmmword_1008F7228, (uint64_t)&v11, (uint64_t)&unk_1006C2518, (_OWORD **)&v13);
    xpc_object_t v7 = (void (*)(void *, xpc_object_t))v6[4];
    uint64_t v8 = v6[5];
    uint64_t v9 = (void *)(a1 + (v8 >> 1));
    if ((v8 & 1) != 0) {
      xpc_object_t v7 = *(void (**)(void *, xpc_object_t))(*v9 + v7);
    }
    v7(v9, xdict);
  }

  return v5 != 0LL;
}

uint64_t sub_10033B164(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10066DF74();
  }
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, a1 + 8);
  int v2 = *(void **)(a1 + 80);
  uint64_t v3 = (void *)(a1 + 88);
  if (v2 != (void *)(a1 + 88))
  {
    do
    {
      xpc_object_t v4 = (void *)v2[4];
      __int128 v13 = 0uLL;
      uint64_t v14 = 0LL;
      uint64_t v6 = v4[2];
      uint64_t v5 = v4[3];
      __int128 v13 = *(_OWORD *)v4;
      uint64_t v14 = v6;
      uint64_t v7 = v4[5];
      if (v6) {
        BOOL v8 = 0;
      }
      else {
        BOOL v8 = *((void *)&v13 + 1) == 0LL;
      }
      BOOL v9 = v8 && (void)v13 == 0LL;
      if (v9 || !*(_BYTE *)(a1 + 104))
      {
        if (v5)
        {
          if (*(_BYTE *)(a1 + 105))
          {
            sub_1003C7FDC(v7);
            *(_BYTE *)(a1 + 105) = 0;
          }

          else if (*(_BYTE *)(a1 + 106))
          {
            sub_1003C81BC(v7);
            *(_BYTE *)(a1 + 106) = 0;
          }
        }
      }

      else
      {
        sub_1003C672C(v7, &v13);
        *(_BYTE *)(a1 + 104) = 0;
      }

      free(v4);
      unint64_t v10 = (void *)v2[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          unint64_t v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          uint64_t v11 = (void *)v2[2];
          BOOL v8 = *v11 == (void)v2;
          int v2 = v11;
        }

        while (!v8);
      }

      int v2 = v11;
    }

    while (v11 != v3);
  }

  sub_10023BF24(a1 + 80, *(void **)(a1 + 88));
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 80) = v3;
  return sub_100242FAC((uint64_t)v15);
}

void sub_10033B2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *sub_10033B2CC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = sub_1003313A4((uint64_t)&v29, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }

    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }

    __int128 v13 = *(void ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        uint64_t v17 = a2;
        char v15 = *(uint64_t **)a2;
        size_t v16 = *(void *)(v17 + 8);
        do
        {
          unint64_t v18 = *((void *)v14 + 1);
          if (v18 == v8)
          {
          }

          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9) {
                v18 %= v9;
              }
            }

            else
            {
              v18 &= v9 - 1;
            }

            if (v18 != v12) {
              break;
            }
          }

          uint64_t v14 = *(void **)v14;
        }

        while (v14);
      }
    }
  }

  else
  {
    unint64_t v12 = 0LL;
  }

  uint64_t v14 = operator new(0x30uLL);
  *(void *)uint64_t v14 = 0LL;
  *((void *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((void *)v14 + 4) = 0LL;
  *((void *)v14 + 5) = 0LL;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1LL;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_10005141C(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }

    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }

  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v12);
  if (v26)
  {
    *(void *)uint64_t v14 = *v26;
LABEL_40:
    *uint64_t v26 = v14;
    goto LABEL_41;
  }

  *(void *)uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v25 + 8 * v12) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v27 = *(void *)(*(void *)v14 + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }

    else
    {
      v27 &= v9 - 1;
    }

    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_40;
  }

void sub_10033B520(_Unwind_Exception *a1)
{
}

void sub_10033B534(id a1)
{
  id v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_10033B564(_Unwind_Exception *a1)
{
}

void sub_10033B578(id a1)
{
  id v1 = operator new(0x2B0uLL);
  sub_10040749C((uint64_t)v1);
  off_1008D5EF8 = v1;
}

void sub_10033B5A8(_Unwind_Exception *a1)
{
}

void sub_10033B5BC(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void sub_10033B5D0()
{
  int v0 = objc_autoreleasePoolPush();
  xmmword_1008F7228 = 0u;
  unk_1008F7238 = 0u;
  dword_1008F7248 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_1003350FC, &xmmword_1008F7228, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_10033B620(uint64_t a1)
{
  *(void *)a1 = &off_100891D38;
  *(_BYTE *)(a1 + 13) = 0;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = -1;
  int v2 = (int *)(a1 + 8);
  uint64_t v3 = (const __CFNumber *)MGCopyAnswer(@"DeviceClassNumber", 0LL);
  if (v3)
  {
    xpc_object_t v4 = v3;
    CFNumberGetValue(v3, kCFNumberIntType, v2);
    CFRelease(v4);
  }

  *(_BYTE *)(a1 + 12) = 0;
  uint64_t v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    int v6 = *v2;
    v8[0] = 67109120;
    v8[1] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "deviceClass=%d", (uint8_t *)v8, 8u);
  }

  return a1;
}

uint64_t sub_10033B728(int a1, std::string *this)
{
  return 0LL;
}

uint64_t sub_10033B74C(uint64_t a1, std::string *a2)
{
  if (!v4.machine[0]) {
    return 1LL;
  }
  std::string::assign(a2, v4.machine);
  return 0LL;
}

uint64_t sub_10033B7DC(uint64_t a1, std::string *a2)
{
  uint64_t v3 = objc_autoreleasePoolPush();
  utsname v4 = (void *)MGCopyAnswer(@"MarketingDeviceFamilyName", 0LL);
  uint64_t v5 = v4;
  if (v4)
  {
    id v6 = v4;
    std::string::assign(a2, (const std::string::value_type *)[v6 UTF8String]);
    unint64_t v7 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
      int v10 = 138412290;
      id v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "modelName=%@", (uint8_t *)&v10, 0xCu);
    }

    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  objc_autoreleasePoolPop(v3);
  return v8;
}

void sub_10033B8DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10033B8F4(uint64_t a1, std::string *a2)
{
  uint64_t v3 = objc_autoreleasePoolPush();
  utsname v4 = (void *)MGCopyAnswer(@"ProductType", 0LL);
  uint64_t v5 = v4;
  if (v4)
  {
    id v6 = v4;
    std::string::assign(a2, (const std::string::value_type *)[v6 UTF8String]);
    unint64_t v7 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
      int v10 = 138412290;
      id v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "productType=%@", (uint8_t *)&v10, 0xCu);
    }

    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  objc_autoreleasePoolPop(v3);
  return v8;
}

void sub_10033B9F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10033BA0C(uint64_t a1, std::string *a2)
{
  uint64_t v3 = objc_autoreleasePoolPush();
  utsname v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  id v5 = objc_claimAutoreleasedReturnValue([v4 operatingSystemVersionString]);
  std::string::assign(a2, (const std::string::value_type *)[v5 UTF8String]);

  objc_autoreleasePoolPop(v3);
  return 0LL;
}

void sub_10033BA80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10033BA9C(uint64_t a1, std::string *a2, char a3)
{
  id v5 = objc_autoreleasePoolPush();
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  unint64_t v7 = CFLocaleCopyCurrent();
  uint64_t v8 = CFDateFormatterCreate(0LL, v7, kCFDateFormatterNoStyle, kCFDateFormatterShortStyle);
  CFRelease(v7);
  Format = CFDateFormatterGetFormat(v8);
  if (Format)
  {
    int v10 = Format;
    if (CFStringFind(Format, @"H", 0LL).location == -1)
    {
      CFIndex location = CFStringFind(v10, @"k", 0LL).location;
      unint64_t v12 = @"yy'/'MM'/'dd', 'HH':'mm':'ss";
      if (location != -1 || (a3 & 1) != 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }

uint64_t sub_10033BBD4(uint64_t a1, int a2)
{
  unsigned __int8 v26 = 1;
  memset(&v25, 0, sizeof(v25));
  sub_10002418C(&v25, "");
  if (a2 <= 31)
  {
    if (a2 > 7)
    {
      if (a2 == 8)
      {
        utsname v4 = "avrcp";
      }

      else
      {
        if (a2 != 16) {
          goto LABEL_23;
        }
        utsname v4 = "a2dp";
      }
    }

    else if (a2 == 1)
    {
      utsname v4 = "handsfree";
    }

    else
    {
      if (a2 != 2) {
        goto LABEL_23;
      }
      utsname v4 = "phonebook";
    }
  }

  else if (a2 < 0x2000)
  {
    if (a2 == 32)
    {
      utsname v4 = "hid";
    }

    else
    {
      if (a2 != 128) {
        goto LABEL_23;
      }
      utsname v4 = "wiap";
    }
  }

  else
  {
    switch(a2)
    {
      case 0x2000:
        utsname v4 = "braille";
        break;
      case 0x80000:
        utsname v4 = "aacp";
        break;
      case 0x100000:
        utsname v4 = "GATT";
        break;
      default:
        goto LABEL_23;
    }
  }

  std::string::assign(&v25, v4);
LABEL_23:
  uint64_t v5 = sub_1002E6E00();
  sub_10002418C(buf, "ServiceSettings");
  int v6 = (*(uint64_t (**)(uint64_t, std::string *, uint8_t *, unsigned __int8 *))(*(void *)v5 + 72LL))( v5,  &v25,  buf,  &v26);
  int v7 = v6;
  if (v30 < 0)
  {
    operator delete(*(void **)buf);
    if (v7) {
      goto LABEL_25;
    }
  }

  else if (v6)
  {
LABEL_25:
    uint64_t v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v9 = &v25;
      if ((v25.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        unint64_t v9 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)__int128 buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v26;
      __int16 v28 = 2082;
      char v29 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Warning: Using override value %d for service %{public}s",  buf,  0x12u);
    }

    BOOL v10 = v26 == 0;
    goto LABEL_62;
  }

  int v11 = *(_DWORD *)(a1 + 8);
  int v12 = 2046907;
  switch(v11)
  {
    case 1:
      break;
    case 2:
      int v12 = 1653433;
      break;
    case 3:
      else {
        int v12 = 2046649;
      }
      break;
    case 4:
      uint64_t v13 = sub_1002E6BF0();
      else {
        int v14 = 127;
      }
      int v12 = v14 + 1581113;
      break;
    case 6:
      char v24 = 0;
      uint64_t v16 = sub_1002E6E00();
      sub_10002418C(buf, "StackSettings");
      sub_10002418C(__p, "HFServiceEnable");
      (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v16 + 72LL))(v16, buf, __p, &v24);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(*(void **)buf);
      }
      int v12 = 1581113;
      if (v24)
      {
        uint64_t v17 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = 1581113;
          unint64_t v18 = "Warning: Enabling HF Service using override, serviceMask is now 0x%x";
          goto LABEL_57;
        }
      }

      else
      {
        int v12 = 1581112;
      }

      break;
    case 7:
      int v12 = 0x20000;
      break;
    case 9:
      char v24 = 0;
      uint64_t v19 = sub_1002E6E00();
      sub_10002418C(buf, "IAP");
      sub_10002418C(__p, "enableIAP");
      (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v19 + 72LL))(v19, buf, __p, &v24);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(*(void **)buf);
      }
      int v12 = 1782201;
      if (v24)
      {
        uint64_t v17 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = 1782201;
          unint64_t v18 = "Warning: Enabling IAP using override, serviceMask is now 0x%x";
LABEL_57:
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v18, buf, 8u);
        }
      }

      else
      {
        int v12 = 1782073;
      }

      break;
    case 11:
      int v12 = 1784505;
      break;
    default:
      int v12 = 789176;
      uint64_t v15 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_10066DFD4(v11, v15);
      }
      break;
  }

  BOOL v10 = (v12 & a2) == 0;
LABEL_62:
  uint64_t v20 = !v10;
  return v20;
}

void sub_10033C06C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033C0E4()
{
  unsigned int v0 = sub_100361020() - 137;
  return (v0 > 0x1B) | (0xDE07FCu >> v0) & 1;
}

uint64_t sub_10033C118()
{
  unsigned int v0 = sub_100361020() - 137;
  return (v0 > 0x1B) | (0xDE07FCu >> v0) & 1;
}

uint64_t sub_10033C14C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) - 1;
  else {
    uint64_t v2 = dword_1006C1DC8[v1];
  }
  unsigned int v9 = 0;
  uint64_t v3 = sub_1002E6E00();
  sub_10002418C(buf, "Device");
  sub_10002418C(__p, "ClassOfDevice");
  int v4 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned int *))(*(void *)v3 + 88LL))( v3,  buf,  __p,  &v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0)
  {
    operator delete(*(void **)buf);
    if (!v4) {
      return v2;
    }
  }

  else if (!v4)
  {
    return v2;
  }

  uint64_t v2 = v9;
  uint64_t v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Class of device set to %d", buf, 8u);
  }

  return v2;
}

void sub_10033C28C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033C2C8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 8);
    int v14 = 67109120;
    int v15 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "getPairingInputs deviceClass=%d",  (uint8_t *)&v14,  8u);
  }

  int v4 = *(_DWORD *)(a1 + 8);
  if ((v4 - 1) < 3)
  {
    char v8 = (os_log_s *)qword_1008F7578;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
LABEL_10:
      uint64_t v6 = 3LL;
      goto LABEL_25;
    }

    LOWORD(v14) = 0;
    unsigned int v9 = "iphone/ipod/ipad";
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v9, (uint8_t *)&v14, 2u);
    goto LABEL_10;
  }

  if ((v4 - 6) < 2)
  {
    uint64_t v5 = (os_log_s *)qword_1008F7578;
    uint64_t v6 = 1LL;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO)) {
      goto LABEL_25;
    }
    LOWORD(v14) = 0;
    int v7 = "watch/homepod";
    goto LABEL_20;
  }

  if (v4 == 4)
  {
    uint64_t v5 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
      LOWORD(v14) = 0;
      int v7 = "appleTV";
LABEL_14:
      uint64_t v6 = 2LL;
LABEL_20:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v14, 2u);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  BOOL v10 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    LOWORD(v14) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "dunno", (uint8_t *)&v14, 2u);
  }

  int v11 = sub_100361020();
  if ((v11 - 173) < 5)
  {
    uint64_t v5 = (os_log_s *)qword_1008F7578;
    uint64_t v6 = 1LL;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO)) {
      goto LABEL_25;
    }
    LOWORD(v14) = 0;
    int v7 = "531/541/8006";
    goto LABEL_20;
  }

  if (v11 != 270)
  {
    char v8 = (os_log_s *)qword_1008F7578;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    LOWORD(v14) = 0;
    unsigned int v9 = "default";
    goto LABEL_9;
  }

  uint64_t v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    LOWORD(v14) = 0;
    int v7 = "unknown";
    goto LABEL_14;
  }

BOOL sub_10033C578(uint64_t a1)
{
  char v8 = 0;
  uint64_t v1 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "SupportsScalablePipes");
  int v2 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v1 + 72LL))(v1, buf, __p, &v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0)
  {
    operator delete(*(void **)buf);
    if (v2) {
      goto LABEL_6;
    }
    return 1LL;
  }

  if (!v2) {
    return 1LL;
  }
LABEL_6:
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (v8) {
      int v4 = "enabled";
    }
    else {
      int v4 = "disabled";
    }
    *(_DWORD *)__int128 buf = 136446210;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Warning: Overriding scalable pipe support - pipes are %{public}s",  buf,  0xCu);
  }

  return v8 != 0;
}

void sub_10033C6C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10033C704(uint64_t a1)
{
  int v2 = sub_100361020();
  return (v2 - 4) < 2 || v2 == 136;
}

uint64_t sub_10033C750()
{
  return 0LL;
}

uint64_t sub_10033C758()
{
  int v0 = sub_100361020();
  uint64_t result = 1LL;
  switch(v0)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 54:
    case 56:
    case 58:
    case 62:
    case 64:
    case 66:
    case 76:
    case 78:
    case 80:
    case 84:
    case 86:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 105:
    case 106:
    case 107:
    case 108:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 154:
    case 171:
    case 172:
    case 173:
    case 174:
    case 177:
    case 180:
    case 181:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 204:
    case 205:
    case 206:
    case 209:
    case 210:
    case 211:
    case 214:
    case 215:
    case 216:
    case 217:
      return result;
    default:
      uint64_t result = 0LL;
      break;
  }

  return result;
}

BOOL sub_10033C7A0()
{
  return sub_100361020() < 4;
}

BOOL sub_10033C7BC()
{
  return (*(_DWORD *)(sub_1002E6E9C() + 708) - 15) < 0xF91;
}

BOOL sub_10033C7E0(uint64_t a1)
{
  int v2 = sub_100361020() - 10;
  BOOL result = 1LL;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 95:
    case 96:
    case 97:
    case 98:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 140:
    case 142:
    case 144:
    case 148:
      return result;
    default:
      BOOL result = 0LL;
      break;
  }

  return result;
}

BOOL sub_10033C84C()
{
  return ((sub_100361020() - 126) & 0xFFFFFFFD) == 0;
}

uint64_t sub_10033C86C()
{
  unsigned int v0 = sub_100361020() - 67;
  return (v0 < 0x12) & (0x200FFu >> v0);
}

BOOL sub_10033C89C(uint64_t a1)
{
  int v2 = sub_100361020() - 20;
  BOOL result = 1LL;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 85:
    case 86:
    case 87:
    case 88:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 125:
    case 126:
    case 130:
    case 132:
    case 134:
    case 138:
      return result;
    default:
      BOOL result = 0LL;
      break;
  }

  return result;
}

BOOL sub_10033C908(uint64_t a1)
{
  int v2 = sub_100361020() - 20;
  BOOL result = 1LL;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 73:
    case 74:
    case 85:
    case 86:
    case 87:
    case 88:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 111:
    case 112:
    case 113:
    case 114:
    case 125:
    case 130:
    case 134:
    case 138:
      return result;
    default:
      BOOL result = 0LL;
      break;
  }

  return result;
}

BOOL sub_10033C974()
{
  return (*(_DWORD *)(sub_1002E6E9C() + 708) - 22) < 0x7BA;
}

BOOL sub_10033C998()
{
  char v11 = 1;
  uint64_t v0 = sub_1002E6E00();
  sub_10002418C(v9, "Device");
  sub_10002418C(__p, "EnableHDR");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v0 + 72LL))(v0, v9, __p, &v11);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (!v11) {
    return 0LL;
  }
  int v1 = *(_DWORD *)(sub_1002E6E9C() + 708);
  uint64_t v2 = sub_1002E6BF0();
  uint64_t v3 = sub_1002E6BF0();
  uint64_t v5 = sub_1002E6BF0();
  else {
    BOOL v6 = (v1 - 20) >= 0x7BC;
  }
  return !v6;
}

void sub_10033CA90( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033CAC4()
{
  unsigned int v0 = sub_100361020() - 53;
  return (v0 < 0x1A) & (0x3C003FFu >> v0);
}

uint64_t sub_10033CAF4()
{
  return 0LL;
}

uint64_t sub_10033CAFC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 384LL))(a1);
  if ((_DWORD)result) {
    return _os_feature_enabled_impl("BluetoothFeatures", "UserSpaceMacOSHIDDrivers");
  }
  return result;
}

uint64_t sub_10033CB34(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 384LL))(a1);
  if ((_DWORD)result) {
    return _os_feature_enabled_impl("BluetoothFeatures", "ThirdPartyHIDsOffHIDShimKernelDriver");
  }
  return result;
}

uint64_t sub_10033CB6C()
{
  if (qword_1008EFE40 != -1) {
    dispatch_once(&qword_1008EFE40, &stru_100892130);
  }
  return byte_1008EFE38;
}

void sub_10033CBAC(id a1)
{
  byte_1008EFE38 = MGGetBoolAnswer(@"HasBaseband");
}

uint64_t sub_10033CBD0()
{
  return 0LL;
}

BOOL sub_10033CBD8()
{
  return sub_100361020() - 67 < 8;
}

BOOL sub_10033CBF8()
{
  uint64_t v0 = 1LL;
  int v1 = sub_100361020();
  BOOL v2 = (v1 - 233) > 0x15 || v1 == 234;
  return v0;
}

uint64_t sub_10033CC60()
{
  return 0LL;
}

uint64_t sub_10033CC68()
{
  return 1LL;
}

uint64_t sub_10033CC70()
{
  return 0LL;
}

uint64_t sub_10033CC78()
{
  if (qword_1008EFE50 != -1) {
    dispatch_once(&qword_1008EFE50, &stru_100892150);
  }
  return byte_1008EFE48;
}

void sub_10033CCB8(id a1)
{
  byte_1008EFE48 = sub_10033CCDC((uint64_t)@"iPhone");
}

id sub_10033CCDC(uint64_t a1)
{
  id result = (id)MGGetStringAnswer(@"DeviceClass");
  if (result)
  {
    uint64_t v3 = result;
    id v4 = [result isEqualToString:a1];
    CFRelease(v3);
    return v4;
  }

  return result;
}

uint64_t sub_10033CD24()
{
  if (qword_1008EFE60 != -1) {
    dispatch_once(&qword_1008EFE60, &stru_100892170);
  }
  return byte_1008EFE58;
}

void sub_10033CD64(id a1)
{
  byte_1008EFE58 = sub_10033CCDC((uint64_t)@"iPad");
}

uint64_t sub_10033CD88()
{
  if (qword_1008EFE70 != -1) {
    dispatch_once(&qword_1008EFE70, &stru_100892190);
  }
  return byte_1008EFE68;
}

void sub_10033CDC8(id a1)
{
  byte_1008EFE68 = sub_10033CCDC((uint64_t)@"iPod");
}

uint64_t sub_10033CDEC()
{
  if (qword_1008EFE80 != -1) {
    dispatch_once(&qword_1008EFE80, &stru_1008921B0);
  }
  return byte_1008EFE78;
}

void sub_10033CE2C(id a1)
{
  byte_1008EFE78 = sub_10033CCDC((uint64_t)@"Watch");
}

uint64_t sub_10033CE50()
{
  if (qword_1008EFE90 != -1) {
    dispatch_once(&qword_1008EFE90, &stru_1008921D0);
  }
  return byte_1008EFE88;
}

void sub_10033CE90(id a1)
{
  byte_1008EFE88 = sub_10033CCDC((uint64_t)@"Mac");
}

uint64_t sub_10033CEB4()
{
  if (qword_1008EFEA0 != -1) {
    dispatch_once(&qword_1008EFEA0, &stru_1008921F0);
  }
  return byte_1008EFE98;
}

void sub_10033CEF4(id a1)
{
  byte_1008EFE98 = sub_10033CCDC((uint64_t)@"RealityDevice");
}

uint64_t sub_10033CF18()
{
  return MGGetBoolAnswer(@"pX2TxZTxWKS7QSXZDC/Z6A");
}

uint64_t sub_10033CF24()
{
  if (qword_1008EFEB0 != -1) {
    dispatch_once(&qword_1008EFEB0, &stru_100892210);
  }
  return byte_1008EFEA8;
}

void sub_10033CF64(id a1)
{
  byte_1008EFEA8 = sub_10033CCDC((uint64_t)@"AudioAccessory");
}

uint64_t sub_10033CF88()
{
  if (qword_1008EFEC0 != -1) {
    dispatch_once(&qword_1008EFEC0, &stru_100892230);
  }
  return byte_1008EFEB8;
}

void sub_10033CFC8(id a1)
{
  byte_1008EFEB8 = sub_10033CCDC((uint64_t)@"AppleTV");
}

BOOL sub_10033CFEC()
{
  if (qword_1008EFED0 != -1) {
    dispatch_once(&qword_1008EFED0, &stru_100892250);
  }
  return (byte_1008EFEC8 & 1) == 0;
}

void sub_10033D034(id a1)
{
  uint64_t v1 = MGGetProductType(a1);
  if (v1 <= 1110205731)
  {
    if (v1 != 33245053)
    {
      uint64_t v2 = 741626682LL;
LABEL_7:
      if (v1 != v2) {
        return;
      }
    }
  }

  else if (v1 != 1110205732 && v1 != 2692844695LL)
  {
    uint64_t v2 = 2271819421LL;
    goto LABEL_7;
  }

  byte_1008EFEC8 = 1;
}

uint64_t sub_10033D0B0()
{
  return 60LL;
}

uint64_t sub_10033D0B8(uint64_t a1)
{
  else {
    return 180LL;
  }
}

uint64_t sub_10033D0E4()
{
  unsigned __int8 v8 = 0;
  uint64_t v0 = sub_1002E6E00();
  sub_10002418C(buf, "SMP");
  sub_10002418C(__p, "DisableCTKD");
  int v1 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v0 + 72LL))( v0,  buf,  __p,  &v8);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0)
  {
    operator delete(*(void **)buf);
    if (!v1) {
      return v8;
    }
  }

  else if (!v1)
  {
    return v8;
  }

  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Warning: DisableCTKD", buf, 2u);
  }

  return v8;
}

void sub_10033D1C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033D1FC()
{
  if (qword_1008EFEE0 != -1) {
    dispatch_once(&qword_1008EFEE0, &stru_100892270);
  }
  return byte_1008EFED8;
}

void sub_10033D23C(id a1)
{
  int v1 = (char *)malloc(0x16uLL);
  snprintf(v1, 0x16uLL, "%s%s", "IODeviceTree", ":/product");
  io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMainPortDefault, v1);
  if (v2)
  {
    io_object_t v3 = v2;
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, @"boot-ios-diagnostics", kCFAllocatorDefault, 0);
    if (CFProperty)
    {
      CFRelease(CFProperty);
      int v5 = 1;
    }

    else
    {
      int v5 = 0;
    }

    IOObjectRelease(v3);
    if (v1) {
      goto LABEL_8;
    }
  }

  else
  {
    int v5 = 0;
    if (v1) {
LABEL_8:
    }
      free(v1);
  }

  byte_1008EFED8 = v5;
  BOOL v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting diagnositcs mode to %d", buf, 8u);
  }

uint64_t sub_10033D384(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10033D3F8;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EFEF0 != -1) {
    dispatch_once(&qword_1008EFEF0, block);
  }
  return byte_1008EFEE8;
}

void sub_10033D3F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 336LL))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 384LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 344LL))(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2112LL))(v2);
    byte_1008EFEE8 = v3;
    id v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = "disabled";
      if (v3) {
        int v5 = "enabled";
      }
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for extended scans : %s",  buf,  0xCu);
    }

    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_1002E6E00();
    sub_10002418C(buf, "AE");
    sub_10002418C(__p, "DisableExtScans");
    int v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v6 + 72LL))( v6,  buf,  __p,  &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_24;
      }
    }

    else if (!v7)
    {
      goto LABEL_24;
    }

    int v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding DisableExtScans=%d", buf, 8u);
    }

    if (byte_1008EFEE8) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_1008EFEE8 = v10;
  }

void sub_10033D664( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033D6A0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10033D714;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EFF00 != -1) {
    dispatch_once(&qword_1008EFF00, block);
  }
  return byte_1008EFEF8;
}

void sub_10033D714(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 336LL))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 384LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 344LL))(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 1976LL))(v2);
    byte_1008EFEF8 = v3;
    id v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = "disabled";
      if (v3) {
        int v5 = "enabled";
      }
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for extended advertisingsets : %s",  buf,  0xCu);
    }

    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_1002E6E00();
    sub_10002418C(buf, "AE");
    sub_10002418C(__p, "DisableExtAdvertising");
    int v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v6 + 72LL))( v6,  buf,  __p,  &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_24;
      }
    }

    else if (!v7)
    {
      goto LABEL_24;
    }

    int v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding DisableAdvertising=%d", buf, 8u);
    }

    if (byte_1008EFEF8) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_1008EFEF8 = v10;
  }

void sub_10033D980( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033D9BC()
{
  if (qword_1008EFF10 != -1) {
    dispatch_once(&qword_1008EFF10, &stru_100892290);
  }
  return byte_1008EFF08;
}

void sub_10033D9FC(id a1)
{
  uint64_t v1 = sub_1002E6E9C();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 1984LL))(v1);
  byte_1008EFF08 = v2;
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = "disabled";
    if (v2) {
      id v4 = "enabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "BT chip support for periodic advertising advertiser : %s",  buf,  0xCu);
    int v2 = byte_1008EFF08;
  }

  if (v2)
  {
    unsigned __int8 v14 = 0;
    uint64_t v5 = sub_1002E6E00();
    sub_10002418C(buf, "AE");
    sub_10002418C(__p, "DisablePeriodicAdvertisingAdv");
    int v6 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v5 + 72LL))( v5,  buf,  __p,  &v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0)
    {
      operator delete(*(void **)buf);
      if (!v6) {
        goto LABEL_21;
      }
    }

    else if (!v6)
    {
      goto LABEL_21;
    }

    int v7 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Overriding DisablePeriodicAdvertisingAdv=%d",  buf,  8u);
    }

    if (byte_1008EFF08) {
      BOOL v8 = v14 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    char v9 = v8;
    byte_1008EFF08 = v9;
  }

void sub_10033DC1C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033DC58()
{
  if (qword_1008EFF20 != -1) {
    dispatch_once(&qword_1008EFF20, &stru_1008922B0);
  }
  return byte_1008EFF18;
}

void sub_10033DC98(id a1)
{
  uint64_t v1 = sub_1002E6E9C();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 1992LL))(v1);
  byte_1008EFF18 = v2;
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = "disabled";
    if (v2) {
      id v4 = "enabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "BT chip support for periodic advertising synchronizer : %s",  buf,  0xCu);
    int v2 = byte_1008EFF18;
  }

  if (v2)
  {
    unsigned __int8 v14 = 0;
    uint64_t v5 = sub_1002E6E00();
    sub_10002418C(buf, "AE");
    sub_10002418C(__p, "DisablePeriodicAdvertisingSync");
    int v6 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v5 + 72LL))( v5,  buf,  __p,  &v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0)
    {
      operator delete(*(void **)buf);
      if (!v6) {
        goto LABEL_21;
      }
    }

    else if (!v6)
    {
      goto LABEL_21;
    }

    int v7 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Overriding DisablePeriodicAdvertisingSync=%d",  buf,  8u);
    }

    if (byte_1008EFF18) {
      BOOL v8 = v14 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    char v9 = v8;
    byte_1008EFF18 = v9;
  }

void sub_10033DEB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033DEF4()
{
  if (qword_1008EFF30 != -1) {
    dispatch_once(&qword_1008EFF30, &stru_1008922D0);
  }
  return byte_1008EFF28;
}

void sub_10033DF34(id a1)
{
  uint64_t v1 = sub_1002E6E9C();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2000LL))(v1);
  byte_1008EFF28 = v2;
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = "disabled";
    if (v2) {
      id v4 = "enabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "BT chip support for periodic advertising sync transfer sender : %s",  buf,  0xCu);
    int v2 = byte_1008EFF28;
  }

  if (v2)
  {
    unsigned __int8 v14 = 0;
    uint64_t v5 = sub_1002E6E00();
    sub_10002418C(buf, "AE");
    sub_10002418C(__p, "DisablePeriodicAdvSyncTranSender");
    int v6 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v5 + 72LL))( v5,  buf,  __p,  &v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0)
    {
      operator delete(*(void **)buf);
      if (!v6) {
        goto LABEL_21;
      }
    }

    else if (!v6)
    {
      goto LABEL_21;
    }

    int v7 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Overriding DisablePeriodicAdvSyncTranSender=%d",  buf,  8u);
    }

    if (byte_1008EFF28) {
      BOOL v8 = v14 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    char v9 = v8;
    byte_1008EFF28 = v9;
  }

void sub_10033E154( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033E190()
{
  if (qword_1008EFF40 != -1) {
    dispatch_once(&qword_1008EFF40, &stru_1008922F0);
  }
  return byte_1008EFF38;
}

void sub_10033E1D0(id a1)
{
  uint64_t v1 = sub_1002E6E9C();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2008LL))(v1);
  byte_1008EFF38 = v2;
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = "disabled";
    if (v2) {
      id v4 = "enabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "BT chip support for periodic advertising sync transfer recipient: %s",  buf,  0xCu);
    int v2 = byte_1008EFF38;
  }

  if (v2)
  {
    unsigned __int8 v14 = 0;
    uint64_t v5 = sub_1002E6E00();
    sub_10002418C(buf, "AE");
    sub_10002418C(__p, "DisablePeriodicAdvSyncTranRecipient");
    int v6 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v5 + 72LL))( v5,  buf,  __p,  &v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0)
    {
      operator delete(*(void **)buf);
      if (!v6) {
        goto LABEL_21;
      }
    }

    else if (!v6)
    {
      goto LABEL_21;
    }

    int v7 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Overriding DisablePeriodicAdvSyncTranRecipient=%d",  buf,  8u);
    }

    if (byte_1008EFF38) {
      BOOL v8 = v14 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    char v9 = v8;
    byte_1008EFF38 = v9;
  }

void sub_10033E3F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033E42C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10033E4A0;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EFF50 != -1) {
    dispatch_once(&qword_1008EFF50, block);
  }
  return byte_1008EFF48;
}

void sub_10033E4A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 336LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 384LL))(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2016LL))(v2);
    byte_1008EFF48 = v3;
    id v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      int v8 = 136315138;
      char v9 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for extended advertising report with scan source core : %s",  (uint8_t *)&v8,  0xCu);
    }
  }

  int v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008EFF48) {
      int v7 = "enabled";
    }
    else {
      int v7 = "disabled";
    }
    int v8 = 136315138;
    char v9 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "support for extended advertising report with scan source core is %s",  (uint8_t *)&v8,  0xCu);
  }

uint64_t sub_10033E61C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10033E690;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EFF60 != -1) {
    dispatch_once(&qword_1008EFF60, block);
  }
  return byte_1008EFF58;
}

void sub_10033E690(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 336LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 384LL))(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2024LL))(v2);
    byte_1008EFF58 = v3;
    id v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      int v8 = 136315138;
      char v9 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for extended advertising report with pass up : %s",  (uint8_t *)&v8,  0xCu);
    }
  }

  int v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008EFF58) {
      int v7 = "enabled";
    }
    else {
      int v7 = "disabled";
    }
    int v8 = 136315138;
    char v9 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "support for extended advertising report with pass up is %s",  (uint8_t *)&v8,  0xCu);
  }

uint64_t sub_10033E80C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10033E880;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EFF70 != -1) {
    dispatch_once(&qword_1008EFF70, block);
  }
  return byte_1008EFF68;
}

void sub_10033E880(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 336LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 384LL))(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2032LL))(v2);
    byte_1008EFF68 = v3;
    id v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      int v8 = 136315138;
      char v9 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for extended advertising report with ELNA mode : %s",  (uint8_t *)&v8,  0xCu);
    }
  }

  int v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008EFF68) {
      int v7 = "enabled";
    }
    else {
      int v7 = "disabled";
    }
    int v8 = 136315138;
    char v9 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "support for extended advertising report with ELNA mode is %s",  (uint8_t *)&v8,  0xCu);
  }

uint64_t sub_10033E9FC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10033EA70;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EFF80 != -1) {
    dispatch_once(&qword_1008EFF80, block);
  }
  return byte_1008EFF78;
}

void sub_10033EA70(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) == 0
    && ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 400LL))(v1) & 1) == 0
    && ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 376LL))(v1) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(void *)v1 + 384LL))(v1))
  {
    goto LABEL_35;
  }

  uint64_t v2 = sub_1002E6E9C();
  byte_1008EFF78 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2184LL))(v2);
  if (sub_100361020() == 93 || sub_100361020() == 94)
  {
    uint64_t v3 = sub_1002E6E9C();
    (*(void (**)(__int128 *__return_ptr))(*(void *)v3 + 16LL))(&buf);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_13:
      byte_1008EFF78 = 0;
      goto LABEL_15;
    }

    if (*((void *)&buf + 1) != 2LL)
    {
      operator delete((void *)buf);
      goto LABEL_15;
    }

    int v4 = *(unsigned __int16 *)buf;
    operator delete((void *)buf);
    if (v4 == 12355) {
      goto LABEL_13;
    }
  }

void sub_10033ED58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033ED94(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10033EE08;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EFF90 != -1) {
    dispatch_once(&qword_1008EFF90, block);
  }
  return byte_1008EFF88;
}

void sub_10033EE08(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 328LL))(*(void *)(a1 + 32)))
  {
    uint64_t v1 = sub_1002E6E9C();
    int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2040LL))(v1);
    byte_1008EFF88 = v2;
    uint64_t v3 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = "disabled";
      if (v2) {
        int v4 = "enabled";
      }
      int v7 = 136315138;
      int v8 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "BT chip support for extended advertising report with SC Compensation : %s",  (uint8_t *)&v7,  0xCu);
    }
  }

  uint64_t v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008EFF88) {
      int v6 = "enabled";
    }
    else {
      int v6 = "disabled";
    }
    int v7 = 136315138;
    int v8 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "support for extended advertising report with SC Compensation is %s",  (uint8_t *)&v7,  0xCu);
  }

uint64_t sub_10033EF58(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10033EFCC;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EFFA0 != -1) {
    dispatch_once(&qword_1008EFFA0, block);
  }
  return dword_1008EFF98;
}

void sub_10033EFCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_1002E6E9C();
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2056LL))(v2);
  if (v3)
  {
    int v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for extended advertising report with antenna enabled",  buf,  2u);
    }
  }

  uint64_t v5 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 2048LL))(v5))
  {
    int v6 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "BT chip support for extended advertising report with Coex Denial enabled",  buf,  2u);
    }
  }

  if ((*(_DWORD *)(sub_1002E6E9C() + 708) - 1) <= 0x7CE)
  {
    if (v3)
    {
      if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
        || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 384LL))(v1) & 1) != 0
        || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 424LL))(v1))
      {
        int v7 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "getEstimateScanRequestTxDeniedByCoexType : Yes",  buf,  2u);
        }

        dword_1008EFF98 = 1;
      }

      int v14 = 0;
      uint64_t v8 = sub_1002E6E00();
      sub_10002418C(buf, "BBFC");
      sub_10002418C(__p, "EnableEstimateScanRequestTxDeniedByCoex");
      int v9 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v8 + 88LL))(v8, buf, __p, &v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(*(void **)buf);
      }
      if (v9)
      {
        BOOL v10 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = dword_1008EFF98;
          __int16 v16 = 1024;
          int v17 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "getEstimateScanRequestTxDeniedByCoexType (overriden): original %d overriden %d",  buf,  0xEu);
        }

        dword_1008EFF98 = v14;
      }
    }

    else
    {
      char v11 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "getEstimateScanRequestTxDeniedByCoexType : No",  buf,  2u);
      }
    }
  }

void sub_10033F2A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033F2DC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10033F350;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EFFB0 != -1) {
    dispatch_once(&qword_1008EFFB0, block);
  }
  return byte_1008EFFA8;
}

void sub_10033F350(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) == 0
    && ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 400LL))(v1) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(void *)v1 + 384LL))(v1))
  {
    goto LABEL_46;
  }

  uint64_t v2 = sub_1002E6E9C();
  byte_1008EFFA8 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2176LL))(v2);
  if (sub_100361020() == 93 || sub_100361020() == 94)
  {
    uint64_t v3 = sub_1002E6E9C();
    (*(void (**)(__int128 *__return_ptr))(*(void *)v3 + 16LL))(&buf);
    if (v20 < 0)
    {
      if (*((void *)&buf + 1) != 2LL)
      {
        operator delete((void *)buf);
        goto LABEL_14;
      }

      int v4 = *(unsigned __int16 *)buf;
      operator delete((void *)buf);
      if (v4 == 12355) {
        goto LABEL_12;
      }
    }

    else if (v20 == 2 && (unsigned __int16)buf == 12355)
    {
LABEL_12:
      byte_1008EFFA8 = 0;
    }
  }

void sub_10033F6C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033F700(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10033F774;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EFFC0 != -1) {
    dispatch_once(&qword_1008EFFC0, block);
  }
  return byte_1008EFFB8;
}

void sub_10033F774(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 400LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 384LL))(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2192LL))(v2);
    byte_1008EFFB8 = v3;
    int v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for Low Power Scan with Limited RSSI Reading: %s",  buf,  0xCu);
    }

    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_1002E6E00();
    sub_10002418C(buf, "LowPowerCoreScan");
    sub_10002418C(__p, "DisableLowPowerCoreScanWithLimitedRSSIReading");
    int v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v6 + 72LL))( v6,  buf,  __p,  &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_23;
      }
    }

    else if (!v7)
    {
      goto LABEL_23;
    }

    uint64_t v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Overriding Disabling LowPowerCore with limited RSSI Reading %d",  buf,  8u);
    }

    if (byte_1008EFFB8) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_1008EFFB8 = v10;
  }

void sub_10033F9CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033FA08()
{
  if (qword_1008EFFD0 != -1) {
    dispatch_once(&qword_1008EFFD0, &stru_100892310);
  }
  return byte_1008EFFC8;
}

void sub_10033FA48(id a1)
{
  uint64_t v1 = sub_1002E6E9C();
  byte_1008EFFC8 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2200LL))(v1);
  unsigned __int8 v10 = 0;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "VSCScanParams");
  sub_10002418C(__p, "DisableVSCScanParams");
  int v3 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v2 + 72LL))( v2,  buf,  __p,  &v10);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(*(void **)buf);
  }
  int v4 = (os_log_s *)qword_1008F7578;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Overriding Disabling VSScanParams Scan=%d",  buf,  8u);
      int v4 = (os_log_s *)qword_1008F7578;
    }

    if (byte_1008EFFC8) {
      BOOL v5 = v10 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    char v6 = v5;
    byte_1008EFFC8 = v6;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008EFFC8) {
      int v7 = "enabled";
    }
    else {
      int v7 = "disabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "support for new VSScanParams scan is %s",  buf,  0xCu);
  }

void sub_10033FBF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033FC30(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10033FCA4;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EFFE0 != -1) {
    dispatch_once(&qword_1008EFFE0, block);
  }
  return byte_1008EFFD8;
}

void sub_10033FCA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) == 0
    && ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 400LL))(v1) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(void *)v1 + 384LL))(v1))
  {
    goto LABEL_42;
  }

  uint64_t v2 = sub_1002E6E9C();
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2208LL))(v2);
  byte_1008EFFD8 = v3;
  if (sub_100361020() == 93 || sub_100361020() == 94)
  {
    uint64_t v4 = sub_1002E6E9C();
    (*(void (**)(__int128 *__return_ptr))(*(void *)v4 + 16LL))(&buf);
    if (v21 < 0)
    {
      if (*((void *)&buf + 1) == 2LL)
      {
        int v5 = *(unsigned __int16 *)buf;
        operator delete((void *)buf);
        if (v5 != 12355) {
          goto LABEL_14;
        }
        goto LABEL_12;
      }

      operator delete((void *)buf);
    }

    else if (v21 == 2 && (unsigned __int16)buf == 12355)
    {
LABEL_12:
      byte_1008EFFD8 = 0;
    }
  }

void sub_100340008( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100340044(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003400B8;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008EFFF0 != -1) {
    dispatch_once(&qword_1008EFFF0, block);
  }
  return byte_1008EFFE8;
}

void sub_1003400B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 400LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 384LL))(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2208LL))(v2);
    byte_1008EFFE8 = v3;
    uint64_t v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = "disabled";
      if (v3) {
        int v5 = "enabled";
      }
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for LE non-Connection Stats : %s",  buf,  0xCu);
    }

    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_1002E6E00();
    sub_10002418C(buf, "LowPowerCoreScan");
    sub_10002418C(__p, "DisableLEConnectionStatsV1");
    int v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v6 + 72LL))( v6,  buf,  __p,  &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_23;
      }
    }

    else if (!v7)
    {
      goto LABEL_23;
    }

    uint64_t v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Overriding Disabling LE non-Connection stats V1 (going back to V0)=%d",  buf,  8u);
    }

    if (byte_1008EFFE8) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_1008EFFE8 = v10;
  }

void sub_100340310( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10034034C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003403C0;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008F0000 != -1) {
    dispatch_once(&qword_1008F0000, block);
  }
  return byte_1008EFFF8;
}

void sub_1003403C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 384LL))(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2224LL))(v2);
    byte_1008EFFF8 = v3;
    uint64_t v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = "disabled";
      if (v3) {
        int v5 = "enabled";
      }
      int v8 = 136315138;
      BOOL v9 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for Get Scan Stats : %s",  (uint8_t *)&v8,  0xCu);
    }
  }

  uint64_t v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008EFFF8) {
      int v7 = "enabled";
    }
    else {
      int v7 = "disabled";
    }
    int v8 = 136315138;
    BOOL v9 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "support for Get Scan Stats is %s",  (uint8_t *)&v8,  0xCu);
  }

uint64_t sub_100340528()
{
  if (qword_1008F0010 != -1) {
    dispatch_once(&qword_1008F0010, &stru_100892330);
  }
  return byte_1008F0008;
}

void sub_100340568(id a1)
{
  uint64_t v1 = sub_1002E6E9C();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2240LL))(v1);
  byte_1008F0008 = v2;
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = "disabled";
    if (v2) {
      uint64_t v4 = "enabled";
    }
    int v5 = 136315138;
    uint64_t v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "BT chip support for scan core compensation : %s",  (uint8_t *)&v5,  0xCu);
  }

uint64_t sub_100340638(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003406AC;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008F0020 != -1) {
    dispatch_once(&qword_1008F0020, block);
  }
  return byte_1008F0018;
}

void sub_1003406AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) == 0
    && ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 344LL))(v1) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(void *)v1 + 400LL))(v1))
  {
    goto LABEL_23;
  }

  uint64_t v2 = sub_1002E6E9C();
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2280LL))(v2);
  byte_1008F0018 = v3;
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = "disabled";
    if (v3) {
      int v5 = "enabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for Low Energy Long Range : %s",  buf,  0xCu);
  }

  unsigned __int8 v15 = 0;
  uint64_t v6 = sub_1002E6E00();
  sub_10002418C(buf, "LowEnergyLongRange");
  sub_10002418C(__p, "LowEnergyLongRangeDisable");
  int v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v6 + 72LL))( v6,  buf,  __p,  &v15);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if ((v17 & 0x80000000) == 0)
  {
    if (!v7) {
      goto LABEL_16;
    }
LABEL_14:
    int v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Overriding Disabling Low Energy Long Range=%d",  buf,  8u);
    }

    goto LABEL_16;
  }

  operator delete(*(void **)buf);
  if (v7) {
    goto LABEL_14;
  }
LABEL_16:
  if (byte_1008F0018) {
    BOOL v9 = v15 == 0;
  }
  else {
    BOOL v9 = 0;
  }
  char v10 = v9;
  byte_1008F0018 = v10;
LABEL_23:
  int v11 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008F0018) {
      char v12 = "enabled";
    }
    else {
      char v12 = "disabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "support for new Low Energy Long Range is %s",  buf,  0xCu);
  }

void sub_100340904( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100340940(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003409B4;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008F0028 != -1) {
    dispatch_once(&qword_1008F0028, block);
  }
  return byte_1008D9408;
}

void sub_1003409B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(void *)v1 + 344LL))(v1))
  {
    goto LABEL_22;
  }

  uint64_t v2 = sub_1002E6E9C();
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2296LL))(v2);
  byte_1008D9408 = v3;
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = "disabled";
    if (v3) {
      int v5 = "enabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for LE 2M PHy  : %s", buf, 0xCu);
  }

  unsigned __int8 v15 = 0;
  uint64_t v6 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "LE2MPhyDisabled");
  int v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v6 + 72LL))( v6,  buf,  __p,  &v15);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if ((v17 & 0x80000000) == 0)
  {
    if (!v7) {
      goto LABEL_15;
    }
LABEL_13:
    int v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding Force LE PHY 2M =%d", buf, 8u);
    }

    goto LABEL_15;
  }

  operator delete(*(void **)buf);
  if (v7) {
    goto LABEL_13;
  }
LABEL_15:
  if (byte_1008D9408) {
    BOOL v9 = v15 == 0;
  }
  else {
    BOOL v9 = 0;
  }
  char v10 = v9;
  byte_1008D9408 = v10;
LABEL_22:
  int v11 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008D9408) {
      char v12 = "enabled";
    }
    else {
      char v12 = "disabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Support for LE2MPhy  is %s", buf, 0xCu);
  }

void sub_100340BF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100340C34()
{
  if (qword_1008F0038 != -1) {
    dispatch_once(&qword_1008F0038, &stru_100892350);
  }
  return byte_1008F0030;
}

void sub_100340C74(id a1)
{
  uint64_t v1 = sub_1002E6E9C();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2152LL))(v1);
  byte_1008F0030 = v2;
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = "disabled";
    if (v2) {
      uint64_t v4 = "enabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "BT chip support for Scan With New Vsc : %s",  buf,  0xCu);
  }

  unsigned __int8 v13 = 0;
  uint64_t v5 = sub_1002E6E00();
  sub_10002418C(buf, "ScanEnhancements");
  sub_10002418C(__p, "DisableScanEnhancements");
  int v6 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v5 + 72LL))( v5,  buf,  __p,  &v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(*(void **)buf);
  }
  int v7 = (os_log_s *)qword_1008F7578;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Overriding Disabling ScanEnhancements=%d",  buf,  8u);
      int v7 = (os_log_s *)qword_1008F7578;
    }

    if (byte_1008F0030) {
      BOOL v8 = v13 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    char v9 = v8;
    byte_1008F0030 = v9;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008F0030) {
      char v10 = "enabled";
    }
    else {
      char v10 = "disabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "support for new Scan Enhancement VSC is %s",  buf,  0xCu);
  }

void sub_100340E84( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100340EC0()
{
  if (qword_1008F0048 != -1) {
    dispatch_once(&qword_1008F0048, &stru_100892370);
  }
  return byte_1008F0040;
}

void sub_100340F00(id a1)
{
  uint64_t v1 = sub_1002E6E9C();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2160LL))(v1);
  byte_1008F0040 = v2;
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = "disabled";
    if (v2) {
      uint64_t v4 = "enabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "BT chip support for removeMultipleDuplicateEntries VSC is %s",  buf,  0xCu);
  }

  unsigned __int8 v13 = 0;
  uint64_t v5 = sub_1002E6E00();
  sub_10002418C(buf, "ScanEnhancements");
  sub_10002418C(__p, "DisableRemoveMultipleDupliateEntries");
  int v6 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v5 + 72LL))( v5,  buf,  __p,  &v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(*(void **)buf);
  }
  int v7 = (os_log_s *)qword_1008F7578;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Overriding Disabling removeMultipleDuplicateEntries=%d",  buf,  8u);
      int v7 = (os_log_s *)qword_1008F7578;
    }

    if (byte_1008F0040) {
      BOOL v8 = v13 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    char v9 = v8;
    byte_1008F0040 = v9;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008F0040) {
      char v10 = "enabled";
    }
    else {
      char v10 = "disabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "support for removeMultipleDuplicateEntries VSC is %s",  buf,  0xCu);
  }

void sub_100341110( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10034114C()
{
  if (qword_1008F0058 != -1) {
    dispatch_once(&qword_1008F0058, &stru_100892390);
  }
  return byte_1008F0050;
}

void sub_10034118C(id a1)
{
  uint64_t v1 = sub_1002E6E9C();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2168LL))(v1);
  byte_1008F0050 = v2;
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = "disabled";
    if (v2) {
      uint64_t v4 = "enabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "support keeping Duplicate filter when Scan Enable VSC is: %s",  buf,  0xCu);
  }

  unsigned __int8 v13 = 0;
  uint64_t v5 = sub_1002E6E00();
  sub_10002418C(buf, "ScanEnhancements");
  sub_10002418C(__p, "KeepDupFilterWhenScanEnable");
  int v6 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v5 + 72LL))( v5,  buf,  __p,  &v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(*(void **)buf);
  }
  int v7 = (os_log_s *)qword_1008F7578;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Overriding Disabling KeepDupFilterWhenScanEnable=%d",  buf,  8u);
      int v7 = (os_log_s *)qword_1008F7578;
    }

    if (byte_1008F0050) {
      BOOL v8 = v13 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    char v9 = v8;
    byte_1008F0050 = v9;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008F0050) {
      char v10 = "enabled";
    }
    else {
      char v10 = "disabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "support for KeepDupFilterWhenScanEnable VSC is %s",  buf,  0xCu);
  }

void sub_10034139C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003413D8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10034144C;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008F0068 != -1) {
    dispatch_once(&qword_1008F0068, block);
  }
  return byte_1008F0060;
}

void sub_10034144C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 336LL))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 384LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 344LL))(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2136LL))(v2);
    byte_1008F0060 = v3;
    uint64_t v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for BT Spec advertisingsets : %s",  buf,  0xCu);
    }

    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_1002E6E00();
    sub_10002418C(buf, "AE");
    sub_10002418C(__p, "DisableSpecSets");
    int v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v6 + 72LL))( v6,  buf,  __p,  &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_24;
      }
    }

    else if (!v7)
    {
      goto LABEL_24;
    }

    BOOL v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding DisableSpecSets=%d", buf, 8u);
    }

    if (byte_1008F0060) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_1008F0060 = v10;
  }

void sub_1003416B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003416F4(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100341768;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008F0078 != -1) {
    dispatch_once(&qword_1008F0078, block);
  }
  return byte_1008F0070;
}

void sub_100341768(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 336LL))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 384LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 376LL))(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2120LL))(v2);
    byte_1008F0070 = v3;
    uint64_t v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for Enhanced Connections : %s",  buf,  0xCu);
    }

    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_1002E6E00();
    sub_10002418C(buf, "AE");
    sub_10002418C(__p, "DisableEnhancedConnections");
    int v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v6 + 72LL))( v6,  buf,  __p,  &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_24;
      }
    }

    else if (!v7)
    {
      goto LABEL_24;
    }

    BOOL v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Overriding DisableEnhancedConnections=%d",  buf,  8u);
    }

    if (byte_1008F0070) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_1008F0070 = v10;
  }

void sub_1003419D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100341A10(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100341A84;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008F0088 != -1) {
    dispatch_once(&qword_1008F0088, block);
  }
  return byte_1008F0080;
}

void sub_100341A84(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 328LL))(*(void *)(a1 + 32)))
  {
    uint64_t v1 = sub_1002E6E9C();
    int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2128LL))(v1);
    byte_1008F0080 = v2;
    int v3 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = "disabled";
      if (v2) {
        uint64_t v4 = "enabled";
      }
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "BT chip support for Enhanced Connections V2 : %s",  buf,  0xCu);
    }

    unsigned __int8 v14 = 0;
    uint64_t v5 = sub_1002E6E00();
    sub_10002418C(buf, "AE");
    sub_10002418C(__p, "DisableEnhancedConnectionsV2");
    int v6 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v5 + 72LL))( v5,  buf,  __p,  &v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0)
    {
      operator delete(*(void **)buf);
      if (!v6) {
        goto LABEL_21;
      }
    }

    else if (!v6)
    {
      goto LABEL_21;
    }

    int v7 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Overriding DisableEnhancedConnectionsV2=%d",  buf,  8u);
    }

    if (byte_1008F0080) {
      BOOL v8 = v14 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    char v9 = v8;
    byte_1008F0080 = v9;
  }

void sub_100341CB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100341CF0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100341D64;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008F0098 != -1) {
    dispatch_once(&qword_1008F0098, block);
  }
  return byte_1008F0090;
}

void sub_100341D64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 344LL))(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2248LL))(v2);
    byte_1008F0090 = v3;
    uint64_t v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for Controller BT clock capture : %s",  buf,  0xCu);
    }

    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_1002E6E00();
    sub_10002418C(buf, "LE");
    sub_10002418C(__p, "DisallowControllerBTClockConfigure");
    int v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v6 + 72LL))( v6,  buf,  __p,  &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_22;
      }
    }

    else if (!v7)
    {
      goto LABEL_22;
    }

    BOOL v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Overriding Controller BT clock capture =%d",  buf,  8u);
    }

    if (byte_1008F0090) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_1008F0090 = v10;
  }

void sub_100341FA8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100341FE4(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100342058;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008F00A8 != -1) {
    dispatch_once(&qword_1008F00A8, block);
  }
  return byte_1008F00A0;
}

void sub_100342058(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 344LL))(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2256LL))(v2);
    byte_1008F00A0 = v3;
    uint64_t v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for RSSI Connection statistics and detection : %s",  buf,  0xCu);
    }

    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_1002E6E00();
    sub_10002418C(buf, "LE");
    sub_10002418C(__p, "DisallowRSSIConnectionStatisticAndInterval");
    int v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v6 + 72LL))( v6,  buf,  __p,  &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_22;
      }
    }

    else if (!v7)
    {
      goto LABEL_22;
    }

    BOOL v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Overriding RSSI Connection statistics and detection =%d",  buf,  8u);
    }

    if (byte_1008F00A0) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_1008F00A0 = v10;
  }

void sub_10034229C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003422D8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10034234C;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008F00B8 != -1) {
    dispatch_once(&qword_1008F00B8, block);
  }
  return byte_1008F00B0;
}

void sub_10034234C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 344LL))(v1))
  {
    byte_1008F00B0 = 1;
    unsigned __int8 v9 = 0;
    uint64_t v2 = sub_1002E6E00();
    sub_10002418C(buf, "LE");
    sub_10002418C(__p, "MagnetTimeoutABCLog");
    int v3 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v2 + 72LL))( v2,  buf,  __p,  &v9);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v11 < 0)
    {
      operator delete(*(void **)buf);
      if (!v3) {
        goto LABEL_12;
      }
    }

    else if (!v3)
    {
      goto LABEL_12;
    }

    uint64_t v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Overriding MagnetTimeoutABCLog =%d", buf, 8u);
    }

    byte_1008F00B0 = v9;
  }

void sub_100342510( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10034254C()
{
  if (qword_1008F00C8 != -1) {
    dispatch_once(&qword_1008F00C8, &stru_1008923B0);
  }
  return byte_1008F00C0;
}

void sub_10034258C(id a1)
{
  uint64_t v1 = sub_1002E6E9C();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2448LL))(v1);
  byte_1008F00C0 = v2;
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (v2) {
      uint64_t v4 = "enabled";
    }
    else {
      uint64_t v4 = "disabled";
    }
    int v7 = 136315138;
    char v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "BT chip support for LE Manufacturer Scan Filter : %s",  (uint8_t *)&v7,  0xCu);
    int v2 = byte_1008F00C0;
  }

  if (v2) {
    int v2 = _os_feature_enabled_impl("BluetoothFeatures", "LEManufacturerScanFilter");
  }
  byte_1008F00C0 = v2;
  uint64_t v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (v2) {
      uint64_t v6 = "enabled";
    }
    else {
      uint64_t v6 = "disabled";
    }
    int v7 = 136315138;
    char v8 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "support for LE Manufacturer Scan Filter %s",  (uint8_t *)&v7,  0xCu);
  }

uint64_t sub_1003426E4(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100342758;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008F00D8 != -1) {
    dispatch_once(&qword_1008F00D8, block);
  }
  return byte_1008F00D0;
}

void sub_100342758(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 344LL))(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2264LL))(v2);
    byte_1008F00D0 = v3;
    uint64_t v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for Bluetooth Usage  : %s",  buf,  0xCu);
    }

    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_1002E6E00();
    sub_10002418C(buf, "LE");
    sub_10002418C(__p, "DisallowBluetoothUsageNotification");
    int v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v6 + 72LL))( v6,  buf,  __p,  &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_22;
      }
    }

    else if (!v7)
    {
      goto LABEL_22;
    }

    char v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Overriding Bluetooth usage notification =%d",  buf,  8u);
    }

    if (byte_1008F00D0) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_1008F00D0 = v10;
  }

void sub_10034299C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003429D8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100342A4C;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008F00E8 != -1) {
    dispatch_once(&qword_1008F00E8, block);
  }
  return byte_1008F00E0;
}

void sub_100342A4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 344LL))(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2272LL))(v2);
    byte_1008F00E0 = v3;
    uint64_t v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for Phy Statistics Usage : %s",  buf,  0xCu);
    }

    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_1002E6E00();
    sub_10002418C(buf, "LE");
    sub_10002418C(__p, "DisallowPhyStatisticsUsageNotification");
    int v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v6 + 72LL))( v6,  buf,  __p,  &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_22;
      }
    }

    else if (!v7)
    {
      goto LABEL_22;
    }

    char v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Overriding Phy Statistics Bluetooth usage notification =%d",  buf,  8u);
    }

    if (byte_1008F00E0) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_1008F00E0 = v10;
  }

void sub_100342C90( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100342CCC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100342D40;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008F00F8 != -1) {
    dispatch_once(&qword_1008F00F8, block);
  }
  return byte_1008F00F0;
}

void sub_100342D40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 376LL))(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2304LL))(v2);
    byte_1008F00F0 = v3;
    uint64_t v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "YES";
      if (!v3) {
        uint64_t v5 = "NO";
      }
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = v5;
      __int16 v15 = 1024;
      int v16 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for ADV Buffers is : %s (%d buffers)",  buf,  0x12u);
    }

    unsigned __int8 v13 = 0;
    uint64_t v6 = sub_1002E6E00();
    sub_10002418C(buf, "LE");
    sub_10002418C(__p, "DisableADVBuffers");
    int v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v6 + 72LL))( v6,  buf,  __p,  &v13);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_16;
      }
    }

    else if (!v7)
    {
      goto LABEL_16;
    }

    char v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding DisableADVBuffers=%d", buf, 8u);
    }

    byte_1008F00F0 = 0;
  }

void sub_100342F88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100342FC4(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100343038;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008F0108 != -1) {
    dispatch_once(&qword_1008F0108, block);
  }
  return byte_1008F0100;
}

void sub_100343038(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 376LL))(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2472LL))(v2);
    byte_1008F0100 = v3;
    uint64_t v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for Match Buffers is  : %s",  buf,  0xCu);
    }

    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_1002E6E00();
    sub_10002418C(buf, "LE");
    sub_10002418C(__p, "DisableMatchBuffers");
    int v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v6 + 72LL))( v6,  buf,  __p,  &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_22;
      }
    }

    else if (!v7)
    {
      goto LABEL_22;
    }

    char v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding DisableMatchBuffers=%d", buf, 8u);
    }

    if (byte_1008F0100) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_1008F0100 = v10;
  }

void sub_10034327C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003432B8()
{
  if (qword_1008F0118 != -1) {
    dispatch_once(&qword_1008F0118, &stru_1008923D0);
  }
  unsigned __int8 v7 = 0;
  uint64_t v0 = sub_1002E6E00();
  sub_10002418C(buf, "A2DP");
  sub_10002418C(__p, "WirelessSplitter");
  (*(void (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v0 + 72LL))(v0, buf, __p, &v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(*(void **)buf);
  }
  BOOL v1 = (byte_1008F0110 | v7) != 0;
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = "not supported";
    if (v1) {
      int v3 = "supported";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter is %s on this hardware platform",  buf,  0xCu);
  }

  return v1;
}

void sub_100343418( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100343454(id a1)
{
  byte_1008F0110 = MGGetBoolAnswer(@"2zyzecwSf2ZYRpB3tuQhOQ");
}

uint64_t sub_100343478()
{
  unsigned int v0 = sub_100361020() - 57;
  return (v0 < 0x16) & (0x3C0033u >> v0);
}

uint64_t sub_1003434A8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 384LL))(a1);
}

BOOL sub_1003434C4()
{
  return sub_100361020() == 136;
}

uint64_t sub_1003434E0()
{
  if (qword_1008F0120 != -1) {
    dispatch_once(&qword_1008F0120, &stru_1008923F0);
  }
  return (unsigned __int16)word_1008D940A;
}

void sub_100343520(id a1)
{
  uint64_t v1 = sub_1002E6E9C();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2608LL))(v1);
  word_1008D940A = v2;
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Minimum advertising interval supported by HW : %d",  buf,  8u);
  }

  int v9 = 32;
  uint64_t v4 = sub_1002E6E00();
  sub_10002418C(buf, "AE");
  sub_10002418C(__p, "MinAdvertisingInterval");
  int v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v4 + 88LL))(v4, buf, __p, &v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(*(void **)buf);
  }
  char v6 = (os_log_s *)qword_1008F7578;
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Overriding MinAdvertisingInterval=%d",  buf,  8u);
      char v6 = (os_log_s *)qword_1008F7578;
    }

    word_1008D940A = v9;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)word_1008D940A;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Minimum advertising interval is %d", buf, 8u);
  }

void sub_1003436F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100343730()
{
  return sub_100361020() == 148;
}

uint64_t sub_10034374C()
{
  if (qword_1008F0130 != -1) {
    dispatch_once(&qword_1008F0130, &stru_100892410);
  }
  return byte_1008F0128;
}

void sub_10034378C(id a1)
{
  char v8 = 0;
  uint64_t v1 = sub_1002E6E00();
  sub_10002418C(buf, "Scan");
  sub_10002418C(__p, "DisableMatchTableConfigV2");
  (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v1 + 72LL))(v1, buf, __p, &v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v2 = sub_1002E6E9C();
  if (!v8)
  {
    unsigned int v3 = *(_DWORD *)(v2 + 708);
    if (v3 >= 0x7D0 && v3 <= 0xF9F && v3 >= 0x7D1) {
      byte_1008F0128 = 1;
    }
  }

  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008F0128) {
      int v5 = "enabled";
    }
    else {
      int v5 = "disabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "support for MatchTableV2 usage notification is %s",  buf,  0xCu);
  }

void sub_1003438E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100343920()
{
  if (qword_1008F0140 != -1) {
    dispatch_once(&qword_1008F0140, &stru_100892430);
  }
  return byte_1008F0138;
}

void sub_100343960(id a1)
{
  char v8 = 0;
  uint64_t v1 = sub_1002E6E00();
  sub_10002418C(buf, "Scan");
  sub_10002418C(__p, "DisableMatchTableConfigV3");
  (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v1 + 72LL))(v1, buf, __p, &v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v2 = sub_1002E6E9C();
  if (!v8)
  {
    unsigned int v3 = *(_DWORD *)(v2 + 708);
    if (v3 >= 0x7D0 && v3 <= 0xF9F && v3 >= 0x7D1) {
      byte_1008F0138 = 1;
    }
  }

  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008F0138) {
      int v5 = "enabled";
    }
    else {
      int v5 = "disabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "support for MatchTableV3 usage notification is %s",  buf,  0xCu);
  }

void sub_100343AB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100343AF4()
{
  if (qword_1008F0150 != -1) {
    dispatch_once(&qword_1008F0150, &stru_100892450);
  }
  return byte_1008F0148;
}

void sub_100343B34(id a1)
{
  char v7 = 0;
  uint64_t v1 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "IncludeHiddenLEFeatureVendors");
  (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v1 + 72LL))(v1, buf, __p, &v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v2 = sub_1002E6E9C();
  byte_1008F0148 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2600LL))(v2);
  unsigned int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008F0148) {
      uint64_t v4 = "include";
    }
    else {
      uint64_t v4 = "not include";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "support for Inclue Hidden LE Feature Vendor List Vendors is %s",  buf,  0xCu);
  }

void sub_100343C8C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100343CC8()
{
  uint64_t v0 = sub_1002E6E00();
  char v8 = 0;
  uint64_t v1 = sub_1002E6E00();
  sub_10002418C(buf, "HFP");
  sub_10002418C(__p, "DisableUWBS");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v1 + 72LL))(v1, buf, __p, &v8);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(*(void **)buf);
  }
  if (v8)
  {
    uint64_t v2 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "UWBS for HFP disabled by defaults write",  buf,  2u);
    }

    return 0LL;
  }

  else
  {
LABEL_10:
    sub_1002E6E9C();
    return sub_1002CD330();
  }

void sub_100343DC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100343DF4()
{
  uint64_t v0 = sub_1002E6BF0();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v0 + 328LL))(v0)
    || (uint64_t result = _os_feature_enabled_impl("BluetoothFeatures", "SuperWideBandAudio"), (_DWORD)result))
  {
    uint64_t v2 = sub_1002E6E9C();
    return sub_1002CD58C(v2);
  }

  return result;
}

uint64_t sub_100343E3C()
{
  uint64_t v0 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v0 + 384LL))(v0))
  {
    uint64_t v1 = sub_1002E6E00();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 8LL))(v1))
    {
      char v12 = 0;
      uint64_t v2 = sub_1002E6E00();
      sub_10002418C(v10, "HFP");
      sub_10002418C(__p, "DisableUWBSStereo");
      (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v2 + 72LL))(v2, v10, __p, &v12);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      if (v11 < 0) {
        operator delete(v10[0]);
      }
      if (v12) {
        return 0LL;
      }
    }
  }

  uint64_t v3 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 328LL))(v3))
  {
    uint64_t v4 = sub_1002E6E00();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 8LL))(v4))
    {
      char v12 = 0;
      uint64_t v5 = sub_1002E6E00();
      sub_10002418C(v10, "HFP");
      sub_10002418C(__p, "DisableUWBSStereo");
      (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v5 + 72LL))(v5, v10, __p, &v12);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      if (v11 < 0) {
        operator delete(v10[0]);
      }
      if (v12) {
        return 0LL;
      }
    }
  }

  uint64_t v7 = sub_1002E6BF0();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v7 + 336LL))(v7)
    || (uint64_t result = _os_feature_enabled_impl("BluetoothFeatures", "AACELDStereotvOS"), (_DWORD)result))
  {
    sub_1002E6E9C();
    return sub_1002CD458();
  }

  return result;
}

void sub_100343FC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100344004()
{
  uint64_t v0 = sub_1002E6BF0();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v0 + 328LL))(v0)
    || (uint64_t result = _os_feature_enabled_impl("BluetoothFeatures", "AACELDStereo48K"), (_DWORD)result))
  {
    uint64_t v2 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 384LL))(v2))
    {
      uint64_t result = _os_feature_enabled_impl("BluetoothFeatures", "AACELDStereo48K");
      if (!(_DWORD)result) {
        return result;
      }
      char v11 = 0;
      uint64_t v3 = sub_1002E6E00();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 8LL))(v3))
      {
        uint64_t v4 = sub_1002E6E00();
        sub_10002418C(v9, "HFP");
        sub_10002418C(__p, "DisableUWBSStereo");
        (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v4 + 72LL))(v4, v9, __p, &v11);
        if (v8 < 0) {
          operator delete(__p[0]);
        }
        if (v10 < 0) {
          operator delete(v9[0]);
        }
        if (v11) {
          return 0LL;
        }
      }
    }

    else
    {
      uint64_t v5 = sub_1002E6BF0();
    }

    uint64_t v6 = sub_1002E6E9C();
    return sub_1002CD5D0(v6);
  }

  return result;
}

void sub_100344124( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100344158()
{
  uint64_t result = _os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming");
  if ((_DWORD)result)
  {
    uint64_t v1 = sub_1002E6E9C();
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2488LL))(v1);
  }

  return result;
}

uint64_t sub_100344194()
{
  uint64_t v0 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v0 + 384LL))(v0) & 1) != 0
    || (v1 = sub_1002E6BF0(), uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1), (_DWORD)result))
  {
    sub_1002E6E9C();
    return sub_1002CD458();
  }

  return result;
}

uint64_t sub_1003441D8()
{
  uint64_t v0 = sub_1002E6E00();
  char v8 = 0;
  uint64_t v1 = sub_1002E6E00();
  sub_10002418C(buf, "HFP");
  sub_10002418C(__p, "DisableWBS");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v1 + 72LL))(v1, buf, __p, &v8);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(*(void **)buf);
  }
  if (v8)
  {
    uint64_t v2 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "WBS for HFP disabled by defaults write",  buf,  2u);
    }

    return 0LL;
  }

  else
  {
LABEL_10:
    sub_1002E6E9C();
    return sub_1002CD2E8();
  }

void sub_1003442D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100344304(uint64_t a1, unsigned int a2)
{
  switch(a2)
  {
    case 3u:
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 792LL))(a1, 1LL);
    case 6u:
      char v7 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 192LL);
      return v7(a1);
    case 7u:
      char v7 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 200LL);
      return v7(a1);
    case 8u:
      char v7 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 208LL);
      return v7(a1);
    case 9u:
      char v7 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 216LL);
      return v7(a1);
    case 0xAu:
      char v7 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 224LL);
      return v7(a1);
    case 0xBu:
      char v7 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 232LL);
      return v7(a1);
    case 0xCu:
      char v7 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 240LL);
      return v7(a1);
    default:
      int v5 = *(_DWORD *)(sub_1002E6E9C() + 708);
      if (sub_100361020() == 149
        || sub_100361020() == 158
        || sub_100361020() == 150
        || sub_100361020() == 151)
      {
        if (a2 > 2) {
          return 0LL;
        }
        goto LABEL_9;
      }

      int v8 = sub_100361020();
      uint64_t result = 0LL;
      BOOL v10 = v8 == 152 || (v5 - 20) < 0x7BC;
      if (a2 <= 2 && v10)
      {
LABEL_9:
        uint64_t v6 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          v11[0] = 67109120;
          v11[1] = a2;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "AppleAudioFeature %d is enabled in StackSettings",  (uint8_t *)v11,  8u);
        }

        return 1LL;
      }

      return result;
  }

uint64_t sub_100344510()
{
  unsigned int v0 = sub_100361020();
  if (v0 > 0x16) {
    return 0LL;
  }
  else {
    return byte_1006C1DF4[v0];
  }
}

BOOL sub_100344540(uint64_t a1)
{
  return *(_DWORD *)(sub_1002E6E9C() + 708)
      && *(_DWORD *)(sub_1002E6E9C() + 708) <= 0x7CFu
      && *(_DWORD *)(sub_1002E6E9C() + 708) >= 0x16u
      && !(*(unsigned int (**)(uint64_t))(*(void *)a1 + 384LL))(a1);
}

uint64_t sub_1003445A8()
{
  if (qword_1008F0160 != -1) {
    dispatch_once(&qword_1008F0160, &stru_100892470);
  }
  return byte_1008F0158;
}

void sub_1003445E8(id a1)
{
  uint64_t v1 = sub_1002E6E9C();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2064LL))(v1);
  byte_1008F0158 = v2;
  uint64_t v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Support power Tag feature =%d",  (uint8_t *)v4,  8u);
  }

uint64_t sub_1003446A0()
{
  if (qword_1008F0170 != -1) {
    dispatch_once(&qword_1008F0170, &stru_100892490);
  }
  return byte_1008F0168;
}

void sub_1003446E0(id a1)
{
  uint64_t v1 = sub_1002E6E9C();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2072LL))(v1);
  byte_1008F0168 = v2;
  uint64_t v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Support power Tag feature =%d",  (uint8_t *)v4,  8u);
  }

uint64_t sub_100344798(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 13);
}

uint64_t sub_1003447A0(uint64_t a1, char a2)
{
  uint64_t result = _os_feature_enabled_impl("BluetoothFeatures", "TimestampedACLDataFromController");
  *(_BYTE *)(a1 + 13) = result & a2;
  return result;
}

uint64_t sub_1003447DC()
{
  if (qword_1008F0180 != -1) {
    dispatch_once(&qword_1008F0180, &stru_1008924B0);
  }
  return byte_1008F0178;
}

void sub_10034481C(id a1)
{
  uint64_t v1 = sub_1002E6E9C();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2088LL))(v1);
  char v13 = 0;
  uint64_t v3 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "EnableAdjustLEInstantFactor");
  int v4 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v3 + 72LL))(v3, buf, __p, &v13);
  if (v13) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(*(void **)buf);
  }
  int v6 = v5 | v2;
  byte_1008F0178 = v5 | v2;
  char v7 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = "No";
    if (v6) {
      char v9 = "Yes";
    }
    else {
      char v9 = "No";
    }
    if (v2) {
      BOOL v10 = "Yes";
    }
    else {
      BOOL v10 = "No";
    }
    *(_DWORD *)__int128 buf = 136315650;
    *(void *)&uint8_t buf[4] = v9;
    __int16 v15 = 2080;
    int v16 = v10;
    if (v13) {
      int v8 = "Yes";
    }
    __int16 v17 = 2080;
    char v18 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Support for Adjusting LE Instant Factor is enabled: %s (hw %s override %s)",  buf,  0x20u);
  }

void sub_100344994( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003449D0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100344A44;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008F0190 != -1) {
    dispatch_once(&qword_1008F0190, block);
  }
  return byte_1008F0188;
}

void sub_100344A44(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 384LL))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 336LL))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 344LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 424LL))(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2640LL))(v2);
    byte_1008F0188 = v3;
  }

  else
  {
    int v3 = byte_1008F0188;
  }

  if (!v3) {
    goto LABEL_29;
  }
  unsigned int v4 = *(_DWORD *)(sub_1002E6E9C() + 708);
  BOOL v5 = !(*(unsigned int (**)(uint64_t))(*(void *)v1 + 384LL))(v1) || v4 == 0;
  if (v5 || v4 != 20)
  {
    BOOL v6 = !(*(unsigned int (**)(uint64_t))(*(void *)v1 + 336LL))(v1) || v4 == 0;
    if (v6 || v4 > 0x7CF) {
      goto LABEL_29;
    }
  }

  char v18 = 0;
  uint64_t v7 = sub_1002E6E00();
  sub_10002418C(buf, "BLESCAN");
  sub_10002418C(__p, "EnforcePrioritization");
  int v8 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v7 + 72LL))(v7, buf, __p, &v18);
  if (v18) {
    int v9 = v8;
  }
  else {
    int v9 = 0;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if ((v22 & 0x80000000) == 0)
  {
    if (v9) {
      goto LABEL_25;
    }
LABEL_28:
    byte_1008F0188 = 0;
    goto LABEL_29;
  }

  operator delete(*(void **)buf);
  if (!v9) {
    goto LABEL_28;
  }
LABEL_25:
  BOOL v10 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Support for Discovery Scan Prioritization is enforced.",  buf,  2u);
  }

void sub_100344CE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100344D24()
{
  if (qword_1008F01A0 != -1) {
    dispatch_once(&qword_1008F01A0, &stru_1008924D0);
  }
  return byte_1008F0198;
}

void sub_100344D64(id a1)
{
  uint64_t v1 = sub_1002E6E9C();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2672LL))(v1);
  byte_1008F0198 = v2;
  if (v2)
  {
    char v13 = 0;
    uint64_t v3 = sub_1002E6E00();
    sub_10002418C(buf, "LE");
    sub_10002418C(__p, "DisableLEConnectionPrioritization");
    int v4 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v3 + 72LL))(v3, buf, __p, &v13);
    if (v13) {
      int v5 = v4;
    }
    else {
      int v5 = 0;
    }
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v5) {
        goto LABEL_13;
      }
    }

    else if (!v5)
    {
      goto LABEL_13;
    }

    byte_1008F0198 = 0;
    BOOL v6 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Disable LE Connection Prioritization.",  buf,  2u);
    }
  }

void sub_100344F1C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100344F58(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100344FCC;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008F01B0 != -1) {
    dispatch_once(&qword_1008F01B0, block);
  }
  return byte_1008F01A8;
}

void sub_100344FCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 344LL))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328LL))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 384LL))(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 3536LL))(v2);
    byte_1008F01A8 = v3;
    int v4 = (os_log_s *)qword_1008F7578;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
    int v5 = "disabled";
    if (v3) {
      int v5 = "enabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "BT chip support for Controller Scan Rx Stats : %s",  buf,  0xCu);
  }

  int v3 = byte_1008F01A8;
LABEL_9:
  if (!v3) {
    goto LABEL_22;
  }
  int v6 = _os_feature_enabled_impl("BluetoothFeatures", "SentinelFWStatsScan");
  byte_1008F01A8 = v6;
  char v15 = 0;
  uint64_t v7 = sub_1002E6E00();
  sub_10002418C(buf, "BLESCAN");
  sub_10002418C(__p, "FWStatsScan");
  int v8 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v7 + 72LL))(v7, buf, __p, &v15);
  if (v15) {
    int v9 = v8;
  }
  else {
    int v9 = 0;
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if ((v17 & 0x80000000) == 0)
  {
    if (v9) {
      goto LABEL_19;
    }
LABEL_22:
    byte_1008F01A8 = 0;
    goto LABEL_23;
  }

  operator delete(*(void **)buf);
  if (!v9) {
    goto LABEL_22;
  }
LABEL_19:
  byte_1008F01A8 = 1;
  int v10 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Controller Scan Rx Stats is enabled with override.",  buf,  2u);
  }

void sub_100345250( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10034528C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100345300;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008F01C0 != -1) {
    dispatch_once(&qword_1008F01C0, block);
  }
  return dword_1008F01B8;
}

void sub_100345300(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (sub_10033FC30(v1))
  {
    uint64_t v2 = sub_1002E6E9C();
    else {
      int v3 = 3;
    }
  }

  else
  {
    int v3 = 1;
  }

  dword_1008F01B8 = v3;
LABEL_8:
  int v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    else {
      int v5 = off_1008925B0[dword_1008F01B8];
    }
    int v6 = 136315138;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ScanCore HW Type : %s", (uint8_t *)&v6, 0xCu);
  }

uint64_t sub_100345408()
{
  if (qword_1008F01D0 != -1) {
    dispatch_once(&qword_1008F01D0, &stru_1008924F0);
  }
  return byte_1008F01C8;
}

void sub_100345448(id a1)
{
  uint64_t v1 = sub_1002E6E9C();
  int v2 = sub_1002D1240(v1, 5);
  byte_1008F01C8 = v2;
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (v2) {
      int v4 = "enabled";
    }
    else {
      int v4 = "disabled";
    }
    int v7 = 136315138;
    int v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "BT chip support for LE Connection Scan Prioritization : %s",  (uint8_t *)&v7,  0xCu);
    int v2 = byte_1008F01C8;
  }

  if (v2) {
    int v2 = _os_feature_enabled_impl("BluetoothFeatures", "SentinelConnScanProtection");
  }
  byte_1008F01C8 = v2;
  int v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (v2) {
      int v6 = "enabled";
    }
    else {
      int v6 = "disabled";
    }
    int v7 = 136315138;
    int v8 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "support for LE Connection Scan Prioritization is %s",  (uint8_t *)&v7,  0xCu);
  }

uint64_t sub_10034559C()
{
  if (qword_1008F01E0 != -1) {
    dispatch_once(&qword_1008F01E0, &stru_100892510);
  }
  return byte_1008F01D8;
}

void sub_1003455DC(id a1)
{
  uint64_t v1 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "AllowFindMyActionConnScanPrioritization");
  int v2 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v1 + 72LL))( v1,  buf,  __p,  &byte_1008F01D9);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2) {
      return;
    }
  }

  else if (!v2)
  {
    return;
  }

  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008F01D9) {
      int v4 = "Yes";
    }
    else {
      int v4 = "No";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Warning: FindMyConnScanPrioritization: %s",  buf,  0xCu);
  }

  byte_1008F01D8 = byte_1008F01D9;
}

void sub_10034571C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100345758()
{
  if (qword_1008F01F0 != -1) {
    dispatch_once(&qword_1008F01F0, &stru_100892530);
  }
  return byte_1008F01E8;
}

void sub_100345798(id a1)
{
  uint64_t v1 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "AllowFindMyActionTxPowerIncreaseLEConnecting");
  int v2 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v1 + 72LL))( v1,  buf,  __p,  &byte_1008F01E9);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2) {
      return;
    }
  }

  else if (!v2)
  {
    return;
  }

  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008F01E9) {
      int v4 = "Yes";
    }
    else {
      int v4 = "No";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Warning: AllowFindMyActionTxPowerIncreaseLEConnecting: %s",  buf,  0xCu);
  }

  byte_1008F01E8 = byte_1008F01E9;
}

void sub_1003458D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100345914()
{
  if (qword_1008F0200 != -1) {
    dispatch_once(&qword_1008F0200, &stru_100892550);
  }
  return byte_1008F01F8;
}

void sub_100345954(id a1)
{
  uint64_t v1 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "AllowFindMyActionTxPowerIncrease");
  int v2 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v1 + 72LL))( v1,  buf,  __p,  &byte_1008F01F9);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2) {
      return;
    }
  }

  else if (!v2)
  {
    return;
  }

  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008F01F9) {
      int v4 = "Yes";
    }
    else {
      int v4 = "No";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Warning: allowFindMyActionTxPowerIncrease: %s",  buf,  0xCu);
  }

  byte_1008F01F8 = byte_1008F01F9;
}

void sub_100345A94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100345AD0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100345B44;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008F0210 != -1) {
    dispatch_once(&qword_1008F0210, block);
  }
  return byte_1008F0208;
}

void sub_100345B44(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 328LL))(*(void *)(a1 + 32)))
  {
    uint64_t v1 = sub_1002E6E9C();
    int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2568LL))(v1);
    byte_1008F0208 = v2;
    int v3 = (os_log_s *)qword_1008F7578;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    int v4 = "disabled";
    if (v2) {
      int v4 = "enabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "BT chip support for Controller LE Connection Tx Power Increase HPLink : %s",  buf,  0xCu);
  }

  int v2 = byte_1008F0208;
LABEL_7:
  if (v2) {
    char v5 = _os_feature_enabled_impl("BluetoothFeatures", "EnableLEConnectionTxPowerBoost");
  }
  else {
    char v5 = 0;
  }
  byte_1008F0208 = v5;
  char v13 = 0;
  uint64_t v6 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "forceLEConnectionTxPowerEPA");
  int v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v6 + 72LL))(v6, buf, __p, &v13);
  if (v13) {
    int v8 = v7;
  }
  else {
    int v8 = 0;
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(*(void **)buf);
  }
  int v9 = (os_log_s *)qword_1008F7578;
  if (v8)
  {
    byte_1008F0208 = v13;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "forceLEConnectionTxPowerEPA is enabled with override.",  buf,  2u);
      int v9 = (os_log_s *)qword_1008F7578;
    }
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1008F0208) {
      int v10 = "enabled";
    }
    else {
      int v10 = "disabled";
    }
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "support for Get Scan Stats is %s", buf, 0xCu);
  }

void sub_100345D78( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100345DB4()
{
  if (qword_1008F0220 != -1) {
    dispatch_once(&qword_1008F0220, &stru_100892570);
  }
  return byte_1008F0218;
}

void sub_100345DF4(id a1)
{
  uint64_t DeviceClass = GestaltGetDeviceClass(a1);
  byte_1008F0218 = (_DWORD)DeviceClass == 13;
  if (IsAppleInternalBuild(DeviceClass, v2))
  {
    uint64_t v3 = sub_1002E6E00();
    sub_10002418C(v6, "LE");
    sub_10002418C(__p, "supportsNCSecondaryAdvInstance");
    (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v3 + 72LL))(v3, v6, __p, &byte_1008F0218);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    if (v7 < 0) {
      operator delete(v6[0]);
    }
  }

void sub_100345E98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100345ECC()
{
  if (qword_1008F0230 != -1) {
    dispatch_once(&qword_1008F0230, &stru_100892590);
  }
  return byte_1008F0228;
}

void sub_100345F0C(id a1)
{
  uint64_t v1 = sub_1002E6E00();
  sub_10002418C(buf, "BBFC");
  sub_10002418C(__p, "EnforceBBFCScanPrioritization");
  int v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v1 + 72LL))( v1,  buf,  __p,  &byte_1008F0228);
  if (byte_1008F0228) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      return;
    }
  }

  else if (!v3)
  {
    return;
  }

  int v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Warning: BBFC: enforceBBFCScanPrioritization=true",  buf,  2u);
  }

void sub_100345FF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100346028(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 328LL))(a1);
  if ((_DWORD)result) {
    return _os_feature_enabled_impl("BluetoothFeatures", "LowPowerModeForMagnet");
  }
  return result;
}

uint64_t sub_100346084(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 328LL))(a1);
  if ((_DWORD)result) {
    return (*(_DWORD *)(sub_1002E6E9C() + 708) - 1) >= 0x16 && (sub_100361020() & 0xFFFFFFFC) != 112;
  }
  return result;
}

BOOL sub_1003460D0(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 888LL))(a1) == 3;
}

uint64_t sub_1003460F4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 12) = a2;
  return result;
}

uint64_t sub_1003460FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

void sub_100346188( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  int v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)&OBJC_CLASS___SystemScreenObserver;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10034624C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100346260(uint64_t a1)
{
  return [*(id *)(a1 + 32) screenStateChanged:*(unsigned __int8 *)(a1 + 40)];
}

uint64_t sub_100346350(uint64_t a1)
{
  uint64_t v2 = sub_100268240(a1);
  *(void *)uint64_t v2 = off_1008925E0;
  *(void *)(v2 + _Block_object_dispose(va, 8) = off_100892958;
  *(void *)(v2 + 16) = off_100892978;
  *(void *)(v2 + 24) = off_100892998;
  *(void *)(v2 + sub_100242FAC(v1 - 32) = off_1008929B8;
  *(void *)(v2 + 40) = off_1008929D8;
  *(void *)(v2 + 4_Block_object_dispose(va, 8) = off_1008929F8;
  *(void *)(v2 + 56) = off_100892A18;
  *(void *)(v2 + 64) = off_100892A38;
  *(void *)(v2 + 72) = off_100892A58;
  *(void *)(v2 + 80) = off_100892A78;
  *(void *)(v2 + 8_Block_object_dispose(va, 8) = off_100892A98;
  *(void *)(v2 + 96) = off_100892AB8;
  *(void *)(v2 + 104) = off_100892AD8;
  *(void *)(v2 + 112) = off_100892AF8;
  *(void *)(v2 + 120) = off_100892B18;
  *(void *)(v2 + 12_Block_object_dispose(va, 8) = off_100892B38;
  *(void *)(v2 + 136) = off_100892B58;
  *(void *)(v2 + 144) = off_100892B78;
  *(void *)(v2 + 152) = off_100892B98;
  *(void *)(v2 + 160) = off_100892BB8;
  *(void *)(v2 + 16_Block_object_dispose(va, 8) = off_100892BD8;
  *(void *)(v2 + 176) = off_100892BF8;
  *(void *)(v2 + 184) = off_100892C18;
  *(void *)(v2 + 192) = off_100892C38;
  *(void *)(v2 + 200) = off_100892C58;
  *(void *)(v2 + 1256) = &off_100892C78;
  *(void *)(v2 + 132_Block_object_dispose(va, 8) = 0LL;
  *(_OWORD *)(v2 + 1289) = 0u;
  *(_OWORD *)(v2 + 1280) = 0u;
  *(_OWORD *)(v2 + 1264) = 0u;
  *(_OWORD *)(v2 + 130_Block_object_dispose(va, 8) = 0u;
  *(_BYTE *)(v2 + 1324) = 0;
  *(_DWORD *)(v2 + 134_Block_object_dispose(va, 8) = -1;
  *(void *)(v2 + 1352) = -1LL;
  *(void *)(v2 + 1360) = 0LL;
  *(_DWORD *)(v2 + 136_Block_object_dispose(va, 8) = -1;
  *(_BYTE *)(v2 + 1372) = 0;
  *(void *)(v2 + 1380) = -1LL;
  *(_OWORD *)(v2 + 1392) = 0u;
  *(_OWORD *)(v2 + 14sub_100242FAC(v1 - 32) = 0u;
  sub_100242DC4(v2 + 1448);
  *(_WORD *)(a1 + 1512) = 256;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_BYTE *)(a1 + 1552) = 0;
  *(void *)(a1 + 1560) = @"XZ";
  int v3 = *(void **)(a1 + 1432);
  *(void *)(a1 + 14sub_100242FAC(v1 - 32) = 0LL;

  *(_DWORD *)(a1 + 140_Block_object_dispose(va, 8) = -1;
  *(_BYTE *)(a1 + 1412) = 0;
  int v4 = operator new(0x68uLL);
  sub_10056D554();
  *(void *)(a1 + 1400) = v4;
  if (objc_opt_class(&OBJC_CLASS___CUSystemMonitor)
    && (uint64_t v5 = sub_1002E6BF0(), ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 384LL))(v5) & 1) == 0))
  {
    char v6 = objc_alloc_init(&OBJC_CLASS___CUSystemMonitor);
    char v7 = *(void **)(a1 + 1440);
    *(void *)(a1 + 1440) = v6;

    [*(id *)(a1 + 1440) setDispatchQueue:*(void *)(sub_100404EB8() + 8)];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_100346634;
    void v13[3] = &unk_10087EB20;
    v13[4] = a1;
    [*(id *)(a1 + 1440) setFirstUnlockHandler:v13];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_100346734;
    v12[3] = &unk_10087EB20;
    void v12[4] = a1;
    [*(id *)(a1 + 1440) setScreenOnChangedHandler:v12];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    _DWORD v11[2] = sub_100346764;
    v11[3] = &unk_10087EB20;
    void v11[4] = a1;
    [*(id *)(a1 + 1440) setSystemLockStateChangedHandler:v11];
    char v8 = *(void **)(a1 + 1440);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_10034688C;
    v10[3] = &unk_10087EB20;
    void v10[4] = a1;
    [v8 activateWithCompletion:v10];
  }

  else
  {
    *(_WORD *)(a1 + 1512) = 1;
  }

  return a1;
}

void sub_1003465E0(_Unwind_Exception *a1)
{
  sub_100242E28(v2);
  sub_1003469AC((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100346634(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, v1 + 1448);
  *(_BYTE *)(v1 + 1512) = 1;
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(v1 + 1512);
    int v4 = *(unsigned __int8 *)(v1 + 1513);
    *(_DWORD *)__int128 buf = 67109376;
    int v8 = v3;
    __int16 v9 = 1024;
    int v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "SystemSettingsModel::systemMonitor fDeviceFirstUnlocked:%d fDeviceLocked:%d",  buf,  0xEu);
  }

  sub_100242F54((uint64_t)v6);
  sub_10026AA60((os_unfair_lock_s *)v1);
  return sub_100242FAC((uint64_t)v6);
}

void sub_100346718(_Unwind_Exception *exception_object)
{
}

id sub_100346734(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1528) screenStateChanged:[*(id *)(*(void *)(a1 + 32) + 1440) screenOn]];
}

uint64_t sub_100346764(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, v1 + 1448);
  BOOL v2 = [*(id *)(v1 + 1440) systemLockStateSync] == 3
    || [*(id *)(v1 + 1440) systemLockStateSync] == 2;
  *(_BYTE *)(v1 + 1513) = v2;
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(v1 + 1512);
    int v5 = *(unsigned __int8 *)(v1 + 1513);
    *(_DWORD *)__int128 buf = 67109376;
    int v9 = v4;
    __int16 v10 = 1024;
    int v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "SystemSettingsModel::systemMonitor fDeviceFirstUnlocked:%d fDeviceLocked:%d",  buf,  0xEu);
  }

  sub_100242F54((uint64_t)v7);
  sub_10026A8A4((os_unfair_lock_s *)v1, *(unsigned __int8 *)(v1 + 1513));
  return sub_100242FAC((uint64_t)v7);
}

void sub_100346870(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10034688C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, v1 + 1448);
  BOOL v2 = [*(id *)(v1 + 1440) systemLockStateSync] == 3
    || [*(id *)(v1 + 1440) systemLockStateSync] == 2;
  *(_BYTE *)(v1 + 1513) = v2;
  *(_BYTE *)(v1 + 1512) = [*(id *)(v1 + 1440) firstUnlockedSync];
  int v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(v1 + 1512);
    int v5 = *(unsigned __int8 *)(v1 + 1513);
    *(_DWORD *)__int128 buf = 67109376;
    int v9 = v4;
    __int16 v10 = 1024;
    int v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "SystemSettings::SystemMonitor activated fDeviceFirstUnlocked:%d fDeviceLocked:%d",  buf,  0xEu);
  }

  return sub_100242FAC((uint64_t)v7);
}

void sub_100346990(_Unwind_Exception *exception_object)
{
}

void *sub_1003469AC(void *a1)
{
  *a1 = &off_10088A408;
  a1[1] = &off_10088A5E0;
  a1[2] = &off_10088A600;
  a1[3] = &off_10088A620;
  a1[4] = &off_10088A640;
  a1[5] = &off_10088A660;
  a1[6] = &off_10088A680;
  a1[7] = &off_10088A6A0;
  a1[8] = &off_10088A6C0;
  a1[9] = &off_10088A6E0;
  a1[10] = &off_10088A700;
  a1[11] = &off_10088A720;
  a1[12] = &off_10088A740;
  a1[13] = &off_10088A760;
  a1[14] = &off_10088A780;
  a1[15] = &off_10088A7A0;
  a1[16] = &off_10088A7C0;
  a1[17] = &off_10088A7E0;
  a1[18] = &off_10088A800;
  a1[19] = &off_10088A820;
  a1[20] = &off_10088A840;
  a1[21] = &off_10088A860;
  a1[22] = &off_10088A880;
  a1[23] = &off_10088A8A0;
  a1[24] = &off_10088A8C0;
  a1[25] = &off_10088A8E0;
  BOOL v2 = (void *)a1[152];
  if (v2)
  {
    a1[153] = v2;
    operator delete(v2);
  }

  int v3 = (void *)a1[147];
  if (v3)
  {
    a1[148] = v3;
    operator delete(v3);
  }

  int v4 = (void *)a1[142];
  if (v4)
  {
    a1[143] = v4;
    operator delete(v4);
  }

  int v5 = (void *)a1[137];
  if (v5)
  {
    a1[138] = v5;
    operator delete(v5);
  }

  char v6 = (void *)a1[132];
  if (v6)
  {
    a1[133] = v6;
    operator delete(v6);
  }

  char v7 = (void *)a1[127];
  if (v7)
  {
    a1[128] = v7;
    operator delete(v7);
  }

  int v8 = (void *)a1[122];
  if (v8)
  {
    a1[123] = v8;
    operator delete(v8);
  }

  int v9 = (void *)a1[117];
  if (v9)
  {
    a1[118] = v9;
    operator delete(v9);
  }

  __int16 v10 = (void *)a1[112];
  if (v10)
  {
    a1[113] = v10;
    operator delete(v10);
  }

  int v11 = (void *)a1[107];
  if (v11)
  {
    a1[108] = v11;
    operator delete(v11);
  }

  char v12 = (void *)a1[102];
  if (v12)
  {
    a1[103] = v12;
    operator delete(v12);
  }

  char v13 = (void *)a1[97];
  if (v13)
  {
    a1[98] = v13;
    operator delete(v13);
  }

  char v14 = (void *)a1[92];
  if (v14)
  {
    a1[93] = v14;
    operator delete(v14);
  }

  char v15 = (void *)a1[87];
  if (v15)
  {
    a1[88] = v15;
    operator delete(v15);
  }

  int v16 = (void *)a1[82];
  if (v16)
  {
    a1[83] = v16;
    operator delete(v16);
  }

  char v17 = (void *)a1[77];
  if (v17)
  {
    a1[78] = v17;
    operator delete(v17);
  }

  char v18 = (void *)a1[72];
  if (v18)
  {
    a1[73] = v18;
    operator delete(v18);
  }

  char v19 = (void *)a1[67];
  if (v19)
  {
    a1[68] = v19;
    operator delete(v19);
  }

  __int16 v20 = (void *)a1[62];
  if (v20)
  {
    a1[63] = v20;
    operator delete(v20);
  }

  char v21 = (void *)a1[57];
  if (v21)
  {
    a1[58] = v21;
    operator delete(v21);
  }

  char v22 = (void *)a1[52];
  if (v22)
  {
    a1[53] = v22;
    operator delete(v22);
  }

  char v23 = (void *)a1[47];
  if (v23)
  {
    a1[48] = v23;
    operator delete(v23);
  }

  char v24 = (void *)a1[42];
  if (v24)
  {
    a1[43] = v24;
    operator delete(v24);
  }

  std::string v25 = (void *)a1[37];
  if (v25)
  {
    a1[38] = v25;
    operator delete(v25);
  }

  unsigned __int8 v26 = (void *)a1[32];
  if (v26)
  {
    a1[33] = v26;
    operator delete(v26);
  }

  unint64_t v27 = (void *)a1[27];
  if (v27)
  {
    a1[28] = v27;
    operator delete(v27);
  }

  return a1;
}

uint64_t sub_100346C10(int a1, std::string *this)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_1008F0250);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1008F0250))
  {
    sub_10002418C(&stru_1008F0238, "");
    __cxa_atexit((void (*)(void *))&std::string::~string, &stru_1008F0238, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1008F0250);
  }

  if (qword_1008F0258 != -1) {
    dispatch_once(&qword_1008F0258, &stru_100892CB8);
  }
  std::string::operator=(this, &stru_1008F0238);
  return 0LL;
}

void sub_100346CC8(_Unwind_Exception *a1)
{
}

void sub_100346CE0(id a1)
{
  unint64_t __val = 1LL;
  BOOL v2 = (std::string::value_type *)container_system_group_path_for_identifier( 0LL,  "systemgroup.com.apple.bluetooth",  &__val);
  if (v2)
  {
    unsigned __int8 v3 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Using containerized path %s", buf, 0xCu);
    }

    std::string::assign(&stru_1008F0238, v2);
    free(v2);
  }

  else if (IsAppleInternalBuild(0LL, v1))
  {
    uint64_t v18 = 0LL;
    __int128 v16 = 0u;
    memset(v17, 0, sizeof(v17));
    *(_OWORD *)char v14 = 0u;
    __int128 v15 = 0u;
    memset(v13, 0, sizeof(v13));
    *(_OWORD *)__int128 buf = 0u;
    sub_1001FCFC8((uint64_t)buf);
    int v4 = sub_1001FD17C(v13, (uint64_t)"Failed to find the system container: ", 37LL);
    std::to_string(&__p, __val);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    sub_1001FD17C(v4, (uint64_t)p_p, size);
    std::stringbuf::str(&__p, (const std::stringbuf *)((char *)v13 + 8));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v7 = &__p;
    }
    else {
      char v7 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1000BAAF0((const char *)v7);
    *(void *)&v13[0] = v8;
    if (SHIBYTE(v15) < 0) {
      operator delete(v14[1]);
    }
    std::streambuf::~streambuf((char *)v13 + 8);
    std::ios::~ios(v17);
  }

  else
  {
    int v9 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT)) {
      sub_10066E048((uint64_t *)&__val, v9);
    }
  }

void sub_100346F20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1001FD0F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_100346F60(uint64_t a1)
{
  *(void *)(a1 + 1272) = SCDynamicStoreKeyCreateComputerName(kCFAllocatorDefault);
  sub_100346F94(a1);
}

void sub_100346F94(uint64_t a1)
{
  if (*(void *)(a1 + 1272) || *(void *)(a1 + 1280))
  {
    if (*(void *)(a1 + 1264)) {
      goto LABEL_6;
    }
    v10.version = 0LL;
    memset(&v10.retain, 0, 24);
    v10.info = (void *)a1;
    SCDynamicStoreRef v2 = SCDynamicStoreCreate( kCFAllocatorDefault,  @"com.apple.MobileBluetooth.SystemSettings",  (SCDynamicStoreCallBack)sub_100347180,  &v10);
    *(void *)(a1 + 1264) = v2;
    if (v2)
    {
      unsigned __int8 v3 = v2;
      uint64_t v4 = sub_100404EB8();
      SCDynamicStoreSetDispatchQueue(v3, *(dispatch_queue_t *)(v4 + 8));
LABEL_6:
      Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
      if (Mutable)
      {
        char v6 = Mutable;
        char v7 = *(const void **)(a1 + 1272);
        if (v7) {
          CFArrayAppendValue(Mutable, v7);
        }
        uint64_t v8 = *(const void **)(a1 + 1280);
        if (v8) {
          CFArrayAppendValue(v6, v8);
        }
        SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 1264), v6, 0LL);
        CFRelease(v6);
      }

      return;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066E0BC();
    }
  }

  else
  {
    int v9 = *(const __SCDynamicStore **)(a1 + 1264);
    if (v9)
    {
      SCDynamicStoreSetDispatchQueue(v9, 0LL);
      CFRelease(*(CFTypeRef *)(a1 + 1264));
      *(void *)(a1 + 1264) = 0LL;
    }
  }

void sub_1003470C8(uint64_t a1)
{
  SCDynamicStoreRef v2 = *(const void **)(a1 + 1272);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 1272) = 0LL;
  }

  sub_100346F94(a1);
}

void sub_1003470F8(uint64_t a1)
{
  if (sub_100487CE0())
  {
    *(void *)(a1 + 1280) = @"com.apple.MobileInternetSharing";
    sub_100346F94(a1);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
  {
    sub_10066E0E8();
  }

void sub_100347160(uint64_t a1)
{
}

void sub_100347168(uint64_t a1)
{
  *(void *)(a1 + 1280) = 0LL;
  sub_100346F94(a1);
}

void sub_100347170(uint64_t a1)
{
  *(void *)(a1 + 1272) = 0LL;
  sub_100346F94(a1 - 8);
}

void sub_100347180(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
}

uint64_t sub_100347188(uint64_t a1, std::string *a2)
{
  HostName = (__CFString *)SCDynamicStoreCopyComputerName(*(SCDynamicStoreRef *)(a1 + 1264), 0LL);
  uint64_t v4 = HostName;
  if (HostName) {
    goto LABEL_2;
  }
  SCPreferencesRef v7 = SCPreferencesCreate(kCFAllocatorDefault, @"com.apple.MobileBluetooth.SystemSettings", 0LL);
  if (!v7) {
    return 1LL;
  }
  uint64_t v4 = v7;
  HostName = (__CFString *)SCPreferencesGetHostName();
  if (HostName)
  {
LABEL_2:
    std::string::assign( a2, (const std::string::value_type *)-[__CFString UTF8String](HostName, "UTF8String"));
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  CFRelease(v4);
  return v5;
}

uint64_t sub_100347218(uint64_t a1, BOOL *a2, _BYTE *a3, _BYTE *a4)
{
  *a2 = 0;
  *a4 = 0;
  *a3 = 0;
  if (!sub_100487CE0())
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066E0E8();
    }
    return 1LL;
  }

  uint64_t v8 = *(const __SCDynamicStore **)(a1 + 1264);
  if (!v8) {
    return 1LL;
  }
  int v9 = *(const __CFString **)(a1 + 1280);
  if (!v9) {
    return 1LL;
  }
  SCDynamicStoreContext v10 = (const __CFDictionary *)SCDynamicStoreCopyValue(v8, v9);
  if (!v10) {
    return 1LL;
  }
  int v11 = v10;
  CFTypeID v12 = CFGetTypeID(v10);
  if (v12 == CFDictionaryGetTypeID())
  {
    int valuePtr = 0;
    int Value = (const __CFNumber *)CFDictionaryGetValue(v11, @"State");
    if (Value
      && (char v14 = Value, v15 = CFGetTypeID(Value), v15 == CFNumberGetTypeID())
      && CFNumberGetValue(v14, kCFNumberIntType, &valuePtr))
    {
      uint64_t v16 = 0LL;
      *a2 = valuePtr == 1023;
    }

    else
    {
      uint64_t v16 = 1LL;
    }

    uint64_t v18 = (const __CFDictionary *)CFDictionaryGetValue(v11, @"Hosts");
    if (v18)
    {
      char v19 = v18;
      CFTypeID v20 = CFGetTypeID(v18);
      if (v20 == CFDictionaryGetTypeID())
      {
        char v21 = (const __CFNumber *)CFDictionaryGetValue(v19, @"Current");
        if (v21)
        {
          char v22 = v21;
          CFTypeID v23 = CFGetTypeID(v21);
          if (v23 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v22, kCFNumberIntType, &valuePtr);
            *a3 = valuePtr;
          }
        }

        char v24 = (const __CFNumber *)CFDictionaryGetValue(v19, @"Max");
        if (v24)
        {
          std::string v25 = v24;
          CFTypeID v26 = CFGetTypeID(v24);
          if (v26 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v25, kCFNumberIntType, &valuePtr);
            *a4 = valuePtr;
          }
        }
      }
    }
  }

  else
  {
    uint64_t v16 = 1LL;
  }

  CFRelease(v11);
  return v16;
}

void sub_1003473FC(uint64_t a1, const __CFArray *a2)
{
  if (sub_100487CE0())
  {
    if (CFArrayGetCount(a2) >= 1)
    {
      CFIndex v4 = 0LL;
      do
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v4);
        char v6 = ValueAtIndex;
        SCPreferencesRef v7 = *(const __CFString **)(a1 + 1272);
        if (v7 && CFStringCompare(ValueAtIndex, v7, 0LL) == kCFCompareEqualTo)
        {
          v12[1] = 0LL;
          uint64_t v13 = 0LL;
          v12[0] = 0LL;
          if (!(*(unsigned int (**)(uint64_t, void **))(*(void *)a1 + 16LL))(a1, v12))
          {
            if (SHIBYTE(v13) < 0)
            {
              sub_100024238(__p, v12[0], (unint64_t)v12[1]);
            }

            else
            {
              *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)v12;
              uint64_t v11 = v13;
            }

            sub_10026856C((os_unfair_lock_s *)a1, __p);
            if (SHIBYTE(v11) < 0) {
              operator delete(__p[0]);
            }
          }

          if (SHIBYTE(v13) < 0) {
            operator delete(v12[0]);
          }
        }

        else
        {
          uint64_t v8 = *(const __CFString **)(a1 + 1280);
          if (v8 && CFStringCompare(v6, v8, 0LL) == kCFCompareEqualTo)
          {
            LOBYTE(v12[0]) = 0;
            __int16 v9 = 0;
            if (!(*(unsigned int (**)(uint64_t, void **, char *, __int16 *))(*(void *)a1 + 24LL))( a1,  v12,  (char *)&v9 + 1,  &v9)) {
              sub_100268850((os_unfair_lock_s *)a1, LOBYTE(v12[0]), HIBYTE(v9), v9);
            }
          }
        }

        ++v4;
      }

      while (v4 < CFArrayGetCount(a2));
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
  {
    sub_10066E0E8();
  }

void sub_10034757C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003475B0()
{
  if (!sub_100487CCC() && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_10066E114();
  }
}

uint64_t sub_1003475FC(uint64_t a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, _BYTE *a6, _DWORD *a7)
{
  if (sub_100487CCC())
  {
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
    int v14 = sub_10056DD04(*(void *)(a1 + 1400));
    *a5 = v14;
    if (v14 && sub_10056DD24(*(void *)(a1 + 1400)))
    {
    }

    *a6 = sub_10056DD34(*(void *)(a1 + 1400));
    int v15 = sub_10056DCF8(*(void *)(a1 + 1400));
    uint64_t result = 0LL;
    *a7 = v15;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066E114();
    }
    return 1LL;
  }

  return result;
}

void sub_100347710(uint64_t a1)
{
  __int16 v14 = 0;
  __int16 v13 = 0;
  char v12 = 0;
  int v11 = 0;
  if (!(*(unsigned int (**)(uint64_t, char *, __int16 *, char *, __int16 *, char *, int *))(*(void *)a1 + 48LL))( a1,  (char *)&v14 + 1,  &v14,  (char *)&v13 + 1,  &v13,  &v12,  &v11))
  {
    if ((_BYTE)v13) {
      uint64_t v1 = "On";
    }
    else {
      uint64_t v1 = "Off";
    }
    sub_10002418C(&v8, v1);
    SCDynamicStoreRef v2 = std::string::insert(&v8, 0LL, "WiFi State: ");
    __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v3;
    v2->__r_.__value_.__l.__size_ = 0LL;
    v2->__r_.__value_.__l.__cap_ = 0LL;
    v2->__r_.__value_.__r.__words[0] = 0LL;
    CFIndex v4 = std::string::append(&v9, ", Band: ");
    __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    if ((_BYTE)v14)
    {
      char v6 = "5 GHz";
    }

    else if (HIBYTE(v14))
    {
      char v6 = "2.4 GHz";
    }

    else if (HIBYTE(v13))
    {
      char v6 = "6 GHz";
    }

    else
    {
      char v6 = "Unknown";
    }

    std::string::append(&v10, v6);
    if (v12) {
      std::string::append(&v10, ". [WARNING] 2.4 GHz critical state!");
    }
    if ((v10.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      SCPreferencesRef v7 = &v10;
    }
    else {
      SCPreferencesRef v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
    }
    sub_1000B9914((const char *)v7);
  }

void sub_10034788C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003478D4(uint64_t a1, _BYTE *a2)
{
  if (sub_100487CCC())
  {
    char v4 = sub_10056DD24(*(void *)(a1 + 1400));
    uint64_t result = 0LL;
    *a2 = v4;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066E114();
    }
    return 1LL;
  }

  return result;
}

void sub_100347940(uint64_t a1)
{
}

void sub_100347948(uint64_t a1)
{
  if (sub_100487CCC())
  {
    uint64_t v2 = sub_100404EB8();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    _DWORD v3[2] = sub_1003479DC;
    v3[3] = &unk_10087EB20;
    v3[4] = a1;
    sub_100405384(v2, v3);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
  {
    sub_10066E114();
  }

void sub_1003479DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int v2 = sub_10056DD04(*(void *)(v1 + 1400));
  unsigned int v3 = sub_10056DD14(*(void *)(v1 + 1400)) - 1;
  if (v3 >= 3)
  {
    sub_10056DD24(*(void *)(v1 + 1400));
    unint64_t v4 = 0LL;
  }

  else
  {
    unint64_t v4 = (unint64_t)&_mh_execute_header + ((unint64_t)v3 << 32);
  }

  uint64_t v5 = sub_10056DD34(*(void *)(v1 + 1400));
  uint64_t v6 = v5 | (sub_10056DCF8(*(void *)(v1 + 1400)) << 32);
  sub_100347710(v1);
  sub_100268A58((os_unfair_lock_s *)v1, v4 | v2, v6);
}

void sub_100347A6C(uint64_t a1)
{
  unsigned int v2 = SCPreferencesCreate( kCFAllocatorDefault,  @"com.apple.MobileBluetooth.SystemSettings",  @"com.apple.radios.plist");
  *(void *)(a1 + 1sub_100242E28(v1 + 296) = v2;
  if (v2)
  {
    v6.version = 0LL;
    memset(&v6.retain, 0, 24);
    v6.info = (void *)a1;
    SCPreferencesSetCallback(v2, (SCPreferencesCallBack)sub_100347B24, &v6);
    unsigned int v3 = *(const __SCPreferences **)(a1 + 1296);
    uint64_t v4 = sub_100404EB8();
    SCPreferencesSetDispatchQueue(v3, *(dispatch_queue_t *)(v4 + 8));
  }

  if (!*(_BYTE *)(a1 + 1304))
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver( LocalCenter,  (const void *)a1,  (CFNotificationCallback)sub_100347B2C,  (CFStringRef)NSProcessInfoPowerStateDidChangeNotification,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
    *(_BYTE *)(a1 + 1304) = 1;
  }

void sub_100347B24(uint64_t a1, char a2, uint64_t a3)
{
}

void sub_100347B2C(uint64_t a1, os_unfair_lock_s *a2)
{
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  int v4 = [v3 isLowPowerModeEnabled];

  uint64_t v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Low Power Mode Enabled: %d", (uint8_t *)v6, 8u);
  }

  sub_100268E24(a2, v4);
}

void sub_100347C00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100347C18(uint64_t a1)
{
}

void sub_100347C20(uint64_t a1)
{
  unsigned int v2 = *(const __SCPreferences **)(a1 + 1296);
  if (v2)
  {
    SCPreferencesSetDispatchQueue(v2, 0LL);
    CFRelease(*(CFTypeRef *)(a1 + 1296));
    *(void *)(a1 + 1sub_100242E28(v1 + 296) = 0LL;
  }

  if (*(_BYTE *)(a1 + 1304))
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterRemoveObserver( LocalCenter,  (const void *)a1,  (CFNotificationName)NSProcessInfoPowerStateDidChangeNotification,  0LL);
    *(_BYTE *)(a1 + 1304) = 0;
  }

void sub_100347C80(uint64_t a1)
{
}

BOOL sub_100347C88(uint64_t a1, BOOL *a2)
{
  return !sub_100347CAC(a1, @"AirplaneMode", a2);
}

BOOL sub_100347CAC(uint64_t a1, const __CFString *a2, BOOL *a3)
{
  int Value = (const __CFBoolean *)SCPreferencesGetValue(*(SCPreferencesRef *)(a1 + 1296), a2);
  BOOL v5 = Value != 0LL;
  if (Value)
  {
    SCPreferencesContext v6 = Value;
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 != CFBooleanGetTypeID()) {
      return 0LL;
    }
    BOOL v8 = CFBooleanGetValue(v6) != 0;
  }

  else
  {
    BOOL v8 = 0;
  }

  *a3 = v8;
  return v5;
}

uint64_t sub_100347D24(uint64_t a1, _BYTE *a2)
{
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  *a2 = [v3 isLowPowerModeEnabled];

  return 0LL;
}

void sub_100347D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100347D74(uint64_t a1, char a2)
{
  if ((a2 & 2) != 0)
  {
    unsigned __int8 v3 = 0;
    SCPreferencesSynchronize(*(SCPreferencesRef *)(a1 + 1296));
  }

void sub_100347DCC(uint64_t a1)
{
  io_connect_t v2 = IORegisterForSystemPower( (void *)a1,  (IONotificationPortRef *)(a1 + 1312),  (IOServiceInterestCallback)sub_100347E24,  (io_object_t *)(a1 + 1320));
  *(_DWORD *)(a1 + 130_Block_object_dispose(va, 8) = v2;
  if (v2)
  {
    *(_BYTE *)(a1 + 1324) = 0;
    unsigned __int8 v3 = *(IONotificationPort **)(a1 + 1312);
    int v4 = *(dispatch_queue_s **)(sub_100404EB8() + 8);
    IONotificationPortSetDispatchQueue(v3, v4);
  }

void sub_100347E24(uint64_t a1, uint64_t a2, int a3, intptr_t a4)
{
}

void sub_100347E30(uint64_t a1)
{
}

uint64_t sub_100347E38(uint64_t result)
{
  if (*(_DWORD *)(result + 1308))
  {
    uint64_t v1 = result;
    IODeregisterForSystemPower((io_object_t *)(result + 1320));
    IONotificationPortDestroy(*(IONotificationPortRef *)(v1 + 1312));
    uint64_t result = IOServiceClose(*(_DWORD *)(v1 + 1308));
    *(_DWORD *)(v1 + 130_Block_object_dispose(va, 8) = 0;
  }

  return result;
}

uint64_t sub_100347E78(uint64_t a1)
{
  return sub_100347E38(a1 - 32);
}

void sub_100347E80(uint64_t a1, int a2, intptr_t a3)
{
  SCPreferencesContext v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "powerManagementMessage %x", buf, 8u);
  }

  if (a2 == -536870144)
  {
    sub_100268F24((os_unfair_lock_s *)a1, 2u, 0);
    if (*(double *)(a1 + 1392) == 0.0)
    {
      double v7 = 0.0;
    }

    else
    {
      +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
      double v7 = v9 - *(double *)(a1 + 1392);
    }

    *(void *)(a1 + 1392) = 0LL;
    goto LABEL_15;
  }

  double v7 = 0.0;
  if (a2 == -536870272)
  {
    int v10 = sub_100268F24((os_unfair_lock_s *)a1, 1u, 0);
    *(_BYTE *)(a1 + 1324) = 0;
    +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
    *(void *)(a1 + 1392) = v11;
    if (!v10)
    {
LABEL_8:
      IOCancelPowerChange(*(_DWORD *)(a1 + 1308), a3);
      goto LABEL_15;
    }

void sub_100348670( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003486A8(uint64_t a1, int a2)
{
  *(CFAbsoluteTime *)(a1 + 1336) = CFAbsoluteTimeGetCurrent();
  int v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 1336);
    int v25 = 134217984;
    uint64_t v26 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "(BTPowerLog): current timestamp: %f",  (uint8_t *)&v25,  0xCu);
  }

  SCPreferencesContext v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 1328);
    int v25 = 134217984;
    uint64_t v26 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "(BTPowerLog): previous timestamp: %f",  (uint8_t *)&v25,  0xCu);
  }

  double v8 = *(double *)(a1 + 1336) - *(double *)(a1 + 1328);
  uint64_t v9 = sub_1002E6BF0();
  double v10 = (double)(*(unsigned int (**)(uint64_t))(*(void *)v9 + 456LL))(v9);
  if (v8 <= v10)
  {
    char v17 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v25) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "(BTPowerLog): can't read power stats right now",  (uint8_t *)&v25,  2u);
    }

    if (*(double *)(a1 + 1336) < *(double *)(a1 + 1328))
    {
      uint64_t v18 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = *(void *)(a1 + 1336);
        uint64_t v20 = *(void *)(a1 + 1328);
        int v25 = 134218240;
        uint64_t v26 = v19;
        __int16 v27 = 2048;
        uint64_t v28 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "(BTPowerLog): current timestamp: %f is less than previous time stamp: %f",  (uint8_t *)&v25,  0x16u);
      }

      *(void *)(a1 + 132_Block_object_dispose(va, 8) = *(void *)(a1 + 1336);
    }

    int v21 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *(void *)(a1 + 1336);
      int v25 = 134217984;
      uint64_t v26 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "(BTPowerLog): end current timestamp: %f",  (uint8_t *)&v25,  0xCu);
    }

    int v15 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(void *)(a1 + 1328);
      int v25 = 134217984;
      uint64_t v26 = v23;
      goto LABEL_23;
    }
  }

  else
  {
    if (a2)
    {
      *(void *)(a1 + 132_Block_object_dispose(va, 8) = *(void *)(a1 + 1336);
      uint64_t v11 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 1328);
        int v25 = 134217984;
        uint64_t v26 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "(BTPowerLog): (reset) previous timestamp: %f",  (uint8_t *)&v25,  0xCu);
      }
    }

    uint64_t v13 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 1336);
      int v25 = 134217984;
      uint64_t v26 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "(BTPowerLog): end current timestamp: %f",  (uint8_t *)&v25,  0xCu);
    }

    int v15 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 1328);
      int v25 = 134217984;
      uint64_t v26 = v16;
LABEL_23:
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "(BTPowerLog): end previous timestamp: %f",  (uint8_t *)&v25,  0xCu);
    }
  }

  return v8 > v10;
}

uint64_t sub_1003489FC(os_unfair_lock_s *a1, int a2)
{
  int v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Notifying system is shutting down with reason %d",  (uint8_t *)v6,  8u);
  }

  return sub_100268F24(a1, 4u, a2);
}

void sub_100348AB8(uint64_t a1)
{
  io_connect_t v2 = (int *)(a1 + 1344);
  unsigned __int8 v3 = *(dispatch_queue_s **)(sub_100404EB8() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_100348B98;
  handler[3] = &unk_10088E280;
  handler[4] = a1;
  uint64_t v4 = notify_register_dispatch("com.apple.mobile.keybagd.first_unlock", v2, v3, handler);
  uint64_t v5 = (os_log_s *)qword_1008F7578;
  if ((_DWORD)v4)
  {
    uint64_t v6 = v4;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066E1E4(v6, v5, v7, v8, v9, v10, v11, v12);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Successfully registered for MKB first unlock notification",  v13,  2u);
  }

void sub_100348B98(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  io_connect_t v2 = (os_log_s *)(id)qword_1008F7578;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = MKBDeviceUnlockedSinceBoot();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Received MKB first unlock notification. MKBDeviceUnlockedSinceBoot returns : %d",  (uint8_t *)v4,  8u);
  }

  if (MKBDeviceUnlockedSinceBoot() != 1
    && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT))
  {
    sub_10065FDD0();
  }

  BOOL v3 = MKBDeviceUnlockedSinceBoot() == 1;
  sub_100269208(v1, v3);
}

void sub_100348C88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100348CA0(uint64_t a1)
{
}

uint64_t sub_100348CA8(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1344));
  *(_DWORD *)(a1 + 1344) = -1;
  return result;
}

uint64_t sub_100348CD4(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1296));
  *(_DWORD *)(a1 + 1sub_100242E28(v1 + 296) = -1;
  return result;
}

uint64_t sub_100348D00(uint64_t a1, BOOL *a2)
{
  *a2 = MKBDeviceUnlockedSinceBoot() == 1;
  return 0LL;
}

void sub_100348D30(const void *a1)
{
  BOOL v2 = sub_100487D08();
  if (v2)
  {
    if (BYSetupAssistantNeedsToRun(v2))
    {
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver( DarwinNotifyCenter,  a1,  (CFNotificationCallback)sub_100348D8C,  BYSetupAssistantFinishedDarwinNotification,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
    }
  }

void sub_100348D8C(uint64_t a1, uint64_t a2)
{
}

void sub_100348D94(uint64_t a1)
{
}

void sub_100348D9C(const void *a1)
{
  if (sub_100487D08())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, BYSetupAssistantFinishedDarwinNotification, 0LL);
  }

void sub_100348DE4(uint64_t a1)
{
}

uint64_t sub_100348DEC(uint64_t a1, _BYTE *a2)
{
  uint64_t v3 = sub_100487D08();
  if ((_DWORD)v3) {
    LOBYTE(v3) = BYSetupAssistantNeedsToRun(v3);
  }
  *a2 = v3;
  return 0LL;
}

void sub_100348E1C(uint64_t a1)
{
  if (sub_100487D08())
  {
    BOOL v2 = *(dispatch_queue_s **)(sub_100404EB8() + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100348E88;
    block[3] = &unk_10087EB20;
    void block[4] = a1;
    dispatch_async(v2, block);
  }

void sub_100348E88(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  char v2 = BYSetupAssistantNeedsToRun(a1);
  sub_1002693C4(v1, v2);
}

uint64_t sub_100348EB0(uint64_t a1)
{
  char v2 = (int *)(a1 + 1348);
  uint64_t v3 = *(dispatch_queue_s **)(sub_100404EB8() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_100348F24;
  handler[3] = &unk_10088E280;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.system.powersources.percent", v2, v3, handler);
}

void sub_100348F24(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  __int16 v2 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, char *, __int16 *))(*(void *)&v1->_os_unfair_lock_opaque
                                                                              + 96LL))( v1,  (char *)&v2 + 1,  &v2))
    sub_1002694EC(v1, HIBYTE(v2), v2);
}

uint64_t sub_100348F78(uint64_t a1)
{
  return sub_100348EB0(a1 - 40);
}

uint64_t sub_100348F80(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1348));
  *(_DWORD *)(a1 + 134_Block_object_dispose(va, 8) = -1;
  return result;
}

uint64_t sub_100348FAC(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1308));
  *(_DWORD *)(a1 + 130_Block_object_dispose(va, 8) = -1;
  return result;
}

uint64_t sub_100348FD8(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t v5 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 392LL))(v5) & 1) != 0)
  {
    int v8 = 0;
    char v7 = 0;
    uint64_t result = IOPSGetPercentRemaining(&v8, &v7, 0LL);
    if ((_DWORD)result)
    {
      return 1LL;
    }

    else
    {
      *a3 = v8;
      *a2 = v7;
    }
  }

  else
  {
    uint64_t result = 0LL;
    *a2 = 1;
    *a3 = 100;
  }

  return result;
}

uint64_t sub_100349060(uint64_t a1)
{
  __int16 v2 = (int *)(a1 + 1352);
  uint64_t v3 = *(dispatch_queue_s **)(sub_100404EB8() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_1003490D4;
  handler[3] = &unk_10088E280;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.system.powersources.source", v2, v3, handler);
}

void sub_1003490D4(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  unsigned int v2 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, unsigned int *))(*(void *)&v1->_os_unfair_lock_opaque
                                                                           + 120LL))( v1,  &v2))
    sub_1002696D8(v1, v2);
}

uint64_t sub_100349120(uint64_t a1)
{
  return sub_100349060(a1 - 64);
}

uint64_t sub_100349128(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1352));
  *(_DWORD *)(a1 + 1352) = -1;
  return result;
}

uint64_t sub_100349154(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1288));
  *(_DWORD *)(a1 + 128_Block_object_dispose(va, 8) = -1;
  return result;
}

uint64_t sub_100349180(uint64_t a1, int *a2)
{
  uint64_t v3 = IOPSCopyExternalPowerAdapterDetails();
  if (!v3)
  {
    uint64_t v10 = (const __CFDictionary *)IOPSCopyPowerSourcesInfo();
    if (!v10)
    {
      LODWORD(v6) = 0;
      return v6 ^ 1;
    }

    uint64_t v4 = v10;
    CFStringRef v11 = IOPSGetProvidingPowerSourceType(v10);
    if (v11 && CFEqual(v11, @"Battery Power"))
    {
      *a2 = 0;
      LODWORD(v6) = 1;
      goto LABEL_15;
    }

void sub_100349280(uint64_t a1)
{
  if ((sub_1000A86F0() & 1) != 0)
  {
    unsigned int v2 = *(dispatch_queue_s **)(sub_100404EB8() + 8);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_100349328;
    handler[3] = &unk_10088E280;
    handler[4] = a1;
    notify_register_dispatch("com.apple.coreaudio.ActivePorts", (int *)(a1 + 1356), v2, handler);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
  {
    sub_10066E248();
  }

void sub_100349328(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  unsigned __int8 v2 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, unsigned __int8 *))(*(void *)&v1->_os_unfair_lock_opaque
                                                                              + 128LL))( v1,  &v2))
    sub_1002698B4(v1, v2);
}

void sub_100349374(uint64_t a1)
{
}

uint64_t sub_10034937C(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1356));
  *(_DWORD *)(a1 + 1356) = -1;
  return result;
}

uint64_t sub_1003493A8(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1284));
  *(_DWORD *)(a1 + 1284) = -1;
  return result;
}

uint64_t sub_1003493D4(uint64_t a1, _BYTE *a2)
{
  uint64_t state64 = 0LL;
  uint64_t result = notify_get_state(*(_DWORD *)(a1 + 1356), &state64);
  if ((_DWORD)result) {
    return 1LL;
  }
  *a2 = state64 & 1;
  return result;
}

void sub_100349420(CFBundleRef *a1)
{
  unsigned __int8 v2 = CFURLCreateWithFileSystemPath( kCFAllocatorDefault,  @"/System/Library/PrivateFrameworks/AssistantServices.framework",  kCFURLPOSIXPathStyle,  1u);
  a1[170] = CFBundleCreate(kCFAllocatorDefault, v2);
  CFRelease(v2);
  if (a1[170])
  {
    if (MGGetBoolAnswer(@"assistant"))
    {
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      uint64_t v4 = *(const __CFString **)CFBundleGetDataPointerForName( a1[170],  @"kAFPreferencesDidChangeDarwinNotification");
      CFNotificationCenterAddObserver( DarwinNotifyCenter,  a1,  (CFNotificationCallback)sub_1003494E0,  v4,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
    }
  }

void sub_1003494E0(uint64_t a1, uint64_t a2)
{
}

void sub_1003494E8(uint64_t a1)
{
}

void sub_1003494F0(CFBundleRef *a1)
{
  if (MGGetBoolAnswer(@"assistant"))
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    DataPointerForName = (CFNotificationName *)CFBundleGetDataPointerForName( a1[170],  @"kAFPreferencesDidChangeDarwinNotification");
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, *DataPointerForName, 0LL);
  }

  CFRelease(a1[170]);
  a1[170] = 0LL;
}

void sub_100349554(uint64_t a1)
{
}

uint64_t sub_10034955C(uint64_t a1, BOOL *a2)
{
  uint64_t v4 = sub_1002E6BF0();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v4 + 56LL))(v4)
    || !*(void *)(a1 + 1360)
    || !MGGetBoolAnswer(@"assistant"))
  {
    return 1LL;
  }

  FunctionPointerForName = (void (*)(void))CFBundleGetFunctionPointerForName( *(CFBundleRef *)(a1 + 1360),  @"AFSupportPreferencesSynchronize");
  FunctionPointerForName();
  uint64_t v6 = (uint64_t (*)(void))CFBundleGetFunctionPointerForName( *(CFBundleRef *)(a1 + 1360),  @"AFPreferencesAssistantEnabled");
  int v7 = v6();
  uint64_t result = 0LL;
  *a2 = v7 != 0;
  return result;
}

void sub_1003495EC(uint64_t a1)
{
  unsigned __int8 v2 = *(dispatch_queue_s **)(sub_100404EB8() + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100349650;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  dispatch_async(v2, block);
}

void sub_100349650(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  unsigned __int8 v2 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, unsigned __int8 *))(*(void *)&v1->_os_unfair_lock_opaque
                                                                              + 136LL))( v1,  &v2))
    sub_100269A88(v1, v2);
}

uint64_t sub_10034969C(uint64_t a1)
{
  unsigned __int8 v2 = (int *)(a1 + 1368);
  uint64_t v3 = *(dispatch_queue_s **)(sub_100404EB8() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_100349710;
  handler[3] = &unk_10088E280;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.coreaudio.BorealisToggled", v2, v3, handler);
}

void sub_100349710(uint64_t a1)
{
}

uint64_t sub_100349718(uint64_t a1)
{
  return sub_10034969C(a1 - 88);
}

uint64_t sub_100349720(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1368));
  *(_DWORD *)(a1 + 136_Block_object_dispose(va, 8) = -1;
  return result;
}

uint64_t sub_10034974C(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1280));
  *(_DWORD *)(a1 + 1280) = -1;
  return result;
}

uint64_t sub_100349788(uint64_t a1, _BYTE *a2)
{
  *a2 = *(_BYTE *)(a1 + 1372);
  return 0LL;
}

void *sub_100349798(void *result)
{
  if (!result[191])
  {
    uint64_t v1 = result;
    unsigned __int8 v2 = objc_alloc_init(&OBJC_CLASS___SystemScreenObserver);
    uint64_t result = -[SystemScreenObserver activateWithSystemMonitor:](v2, "activateWithSystemMonitor:", v1[180]);
    v1[191] = v2;
  }

  return result;
}

void sub_1003497D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1003497E8(uint64_t a1)
{
  return sub_100349798((void *)(a1 - 104));
}

uint64_t sub_1003497F0(uint64_t result)
{
  *(void *)(result + 152_Block_object_dispose(va, 8) = 0LL;
  return result;
}

uint64_t sub_1003497F8(uint64_t result)
{
  *(void *)(result + 1424) = 0LL;
  return result;
}

uint64_t sub_100349800(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 408LL))(v4) & 1) != 0
    || (uint64_t v5 = sub_1002E6BF0(), ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 384LL))(v5) & 1) != 0))
  {
    unsigned __int8 v6 = 1;
  }

  else
  {
    unsigned __int8 v6 = [*(id *)(a1 + 1528) screenOn];
  }

  *a2 = v6;
  return 0LL;
}

uint64_t sub_100349870()
{
  return 11LL;
}

uint64_t sub_100349878(uint64_t a1)
{
  unsigned __int8 v2 = (int *)(a1 + 1380);
  uint64_t v3 = *(dispatch_queue_s **)(sub_100404EB8() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_1003498EC;
  handler[3] = &unk_10088E280;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.keyboard.isOnScreen", v2, v3, handler);
}

void sub_1003498EC(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  unsigned __int8 v2 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, unsigned __int8 *, void))(*(void *)&v1->_os_unfair_lock_opaque
                                                                                      + 208LL))( v1,  &v2,  0LL))
    sub_10026A4F0(v1, v2);
}

uint64_t sub_10034993C(uint64_t a1)
{
  return sub_100349878(a1 - 120);
}

uint64_t sub_100349944(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1380));
  *(_DWORD *)(a1 + 1380) = -1;
  return result;
}

uint64_t sub_100349970(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1260));
  *(_DWORD *)(a1 + 1260) = -1;
  return result;
}

uint64_t sub_10034999C(uint64_t a1, BOOL *a2, int a3)
{
  uint64_t state64 = 0LL;
  if (a3) {
    notify_register_check("com.apple.keyboard.isOnScreen", (int *)(a1 + 1380));
  }
  uint64_t result = notify_get_state(*(_DWORD *)(a1 + 1380), &state64);
  if ((_DWORD)result) {
    return 1LL;
  }
  *a2 = state64 == 1;
  return result;
}

uint64_t sub_100349A04(uint64_t a1)
{
  unsigned __int8 v2 = (int *)(a1 + 1384);
  uint64_t v3 = *(dispatch_queue_s **)(sub_100404EB8() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_100349A78;
  handler[3] = &unk_10088E280;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.mobilegarageband.appAndSessionState", v2, v3, handler);
}

void sub_100349A78(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  unsigned __int8 v2 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, unsigned __int8 *))(*(void *)&v1->_os_unfair_lock_opaque
                                                                              + 216LL))( v1,  &v2))
    sub_100269F74(v1, v2);
}

uint64_t sub_100349AC4(uint64_t a1)
{
  return sub_100349A04(a1 - 136);
}

uint64_t sub_100349ACC(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1384));
  *(_DWORD *)(a1 + 1384) = -1;
  return result;
}

uint64_t sub_100349AF8(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1248));
  *(_DWORD *)(a1 + 124_Block_object_dispose(va, 8) = -1;
  return result;
}

uint64_t sub_100349B24(uint64_t a1, BOOL *a2)
{
  uint64_t state64 = 0LL;
  uint64_t result = notify_get_state(*(_DWORD *)(a1 + 1384), &state64);
  if ((_DWORD)result) {
    return 1LL;
  }
  *a2 = state64 != 0;
  return result;
}

uint64_t sub_100349B88(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
  return 0LL;
}

void sub_100349BA8(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = (id *)(a1 + 1560);
  objc_storeStrong(v5, a2);
  unsigned __int8 v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    id v7 = *v5;
    int v8 = 138412290;
    id v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Country code changed %@", (uint8_t *)&v8, 0xCu);
  }
}

void sub_100349C74(uint64_t a1, void *a2)
{
}

uint64_t sub_100349C7C(uint64_t a1)
{
  uint64_t result = sub_100487F48();
  if ((_DWORD)result)
  {
    *(_BYTE *)(a1 + 1412) = 0;
    uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1408));
    *(_DWORD *)(a1 + 140_Block_object_dispose(va, 8) = -1;
  }

  return result;
}

uint64_t sub_100349CB4(uint64_t a1)
{
  uint64_t result = sub_100487F48();
  if ((_DWORD)result)
  {
    *(_BYTE *)(a1 + 1252) = 0;
    uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1248));
    *(_DWORD *)(a1 + 124_Block_object_dispose(va, 8) = -1;
  }

  return result;
}

uint64_t sub_100349CEC(uint64_t a1)
{
  uint64_t result = sub_100487F48();
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 1408) == -1)
    {
      uint64_t v3 = *(dispatch_queue_s **)(sub_100404EB8() + 8);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472LL;
      handler[2] = sub_100349D74;
      handler[3] = &unk_10088E280;
      handler[4] = a1;
      return notify_register_dispatch("com.apple.bluetooth.prefsChanged", (int *)(a1 + 1408), v3, handler);
    }
  }

  return result;
}

void sub_100349D74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v4 = (id)CFPreferencesCopyValue( @"SpatialSoundProfileAllowed",  @"com.apple.bluetooth",  kCFPreferencesAnyUser,  kCFPreferencesCurrentHost);
  if (v4 && (uint64_t v2 = objc_opt_class(&OBJC_CLASS___NSNumber), (objc_opt_isKindOfClass(v4, v2) & 1) != 0)) {
    int v3 = [v4 BOOLValue];
  }
  else {
    int v3 = 1;
  }
  if (*(unsigned __int8 *)(v1 + 1412) != v3)
  {
    *(_BYTE *)(v1 + 1412) = v3;
    sub_10026A148((os_unfair_lock_s *)v1, v3);
  }
}

void sub_100349E18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t sub_100349E2C(uint64_t a1)
{
  return sub_100349CEC(a1 - 160);
}

uint64_t sub_100349E34(uint64_t a1, _BYTE *a2)
{
  if (sub_100487F48())
  {
    id v4 = (void *)CFPreferencesCopyValue( @"SpatialSoundProfileAllowed",  @"com.apple.bluetooth",  kCFPreferencesAnyUser,  kCFPreferencesCurrentHost);
    if (v4 && (uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSNumber), (objc_opt_isKindOfClass(v4, v5) & 1) != 0)) {
      unsigned int v6 = [v4 BOOLValue];
    }
    else {
      unsigned int v6 = 1;
    }
    *a2 = v6;
  }

  return 0LL;
}

void sub_100349EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100349EF0(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 1416);
  int v3 = *(dispatch_queue_s **)(sub_100404EB8() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_100349F64;
  handler[3] = &unk_10088E280;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.bluetooth.prefsChanged", v2, v3, handler);
}

void sub_100349F64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (void *)CFPreferencesCopyValue( @"move3PPLEMSToLegacyMode",  @"com.apple.bluetooth",  kCFPreferencesAnyUser,  kCFPreferencesCurrentHost);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSNumber);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
  {
    int v4 = [v2 BOOLValue];
    uint64_t v5 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315394;
      id v9 = "virtual void BT::SystemSettings::listenersWillBecomeNonEmpty(const ObservedListeners<HID3ppLELegacyModeListen"
           "er> &)_block_invoke";
      __int16 v10 = 1024;
      int v11 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s: Using Pref Setting for LE Mouse at 7.5ms: %d",  (uint8_t *)&v8,  0x12u);
    }
  }

  else
  {
    int v4 = 0;
  }

  if (*(unsigned __int8 *)(v1 + 1420) != v4)
  {
    *(_BYTE *)(v1 + 1420) = v4;
    sub_10026A31C((os_unfair_lock_s *)v1, v4);
  }

  unsigned int v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v1 + 1420);
    int v8 = 136315394;
    id v9 = "virtual void BT::SystemSettings::listenersWillBecomeNonEmpty(const ObservedListeners<HID3ppLELegacyModeListener"
         "> &)_block_invoke";
    __int16 v10 = 1024;
    int v11 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s: LE Mouse at 7.5ms is currently set to %d",  (uint8_t *)&v8,  0x12u);
  }
}

void sub_10034A108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10034A120(uint64_t a1)
{
  return sub_100349EF0(a1 - 168);
}

uint64_t sub_10034A128(uint64_t a1)
{
  *(_BYTE *)(a1 + 1420) = 0;
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1416));
  *(_DWORD *)(a1 + 1416) = -1;
  return result;
}

uint64_t sub_10034A158(uint64_t a1)
{
  *(_BYTE *)(a1 + 1252) = 0;
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1248));
  *(_DWORD *)(a1 + 124_Block_object_dispose(va, 8) = -1;
  return result;
}

uint64_t sub_10034A188(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 1424);
  uint64_t v3 = *(dispatch_queue_s **)(sub_100404EB8() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_10034A1FC;
  handler[3] = &unk_10088E280;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.system.console_mode_changed", v2, v3, handler);
}

void sub_10034A1FC(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  uint64_t state64 = 0LL;
  uint32_t state = notify_get_state(v1[356]._os_unfair_lock_opaque, &state64);
  uint64_t v3 = (os_log_s *)qword_1008F7578;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
  if (state)
  {
    if (v4)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "fGameConsoleModeNotifyToken is invalid",  buf,  2u);
    }
  }

  else
  {
    if (v4)
    {
      *(_DWORD *)__int128 buf = 134217984;
      uint64_t v7 = state64;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "com.apple.system.console_mode_changed: %llu",  buf,  0xCu);
    }

    sub_10026ABA4(v1, state64 == 1);
  }

uint64_t sub_10034A310(uint64_t a1)
{
  return sub_10034A188(a1 - 192);
}

uint64_t sub_10034A318(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1424));
  *(_DWORD *)(a1 + 1424) = -1;
  return result;
}

uint64_t sub_10034A344(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1232));
  *(_DWORD *)(a1 + 12sub_100242FAC(v1 - 32) = -1;
  return result;
}

uint64_t sub_10034A370(uint64_t a1, BOOL *a2)
{
  uint64_t v3 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v3 + 384LL))(v3) & 1) == 0)
  {
    uint64_t v4 = sub_1002E6BF0();
  }

  size_t v6 = 8LL;
  uint64_t v7 = 0LL;
  if (sysctlbyname("kern.console_mode", &v7, &v6, 0LL, 0LL) == -1) {
    return 1LL;
  }
  uint64_t result = 0LL;
  *a2 = v7 == 1;
  return result;
}

void sub_10034A404(uint64_t a1)
{
  if ((sub_100487BCC() & 1) != 0)
  {
    uint64_t v2 = *(void **)(a1 + 1432);
    if (!v2)
    {
      id v3 = objc_alloc_init(&OBJC_CLASS___CMDeviceOrientationManager);
      uint64_t v4 = *(void **)(a1 + 1432);
      *(void *)(a1 + 14sub_100242FAC(v1 - 32) = v3;

      uint64_t v2 = *(void **)(a1 + 1432);
    }

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSOperationQueue mainQueue](&OBJC_CLASS___NSOperationQueue, "mainQueue"));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _DWORD v6[2] = sub_10034A4F0;
    v6[3] = &unk_100892CD8;
    void v6[4] = a1;
    [v2 startDeviceOrientationUpdatesToQueue:v5 withHandler:v6];
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
  {
    sub_10066E274();
  }

void sub_10034A4E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10034A4F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(os_unfair_lock_s **)(a1 + 32);
  int v8 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Receiving device orientation update", buf, 2u);
  }

  int v10 = 0;
  id v9 = [v5 orientation];
}

void sub_10034A5A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10034A5BC(uint64_t a1, int a2, int *a3)
{
  if ((sub_100487BCC() & 1) != 0)
  {
    switch(a2)
    {
      case 0:
      case 7:
        uint64_t result = 0LL;
        int v6 = 1;
        break;
      case 1:
        uint64_t result = 0LL;
        int v6 = 2;
        break;
      case 2:
        uint64_t result = 0LL;
        int v6 = 6;
        break;
      case 3:
        uint64_t result = 0LL;
        int v6 = 7;
        break;
      case 4:
        uint64_t result = 0LL;
        int v6 = 3;
        break;
      case 5:
        uint64_t result = 0LL;
        int v6 = 4;
        break;
      case 6:
        uint64_t result = 0LL;
        int v6 = 5;
        break;
      default:
        *a3 = 0;
        return 1LL;
    }

    *a3 = v6;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066E274();
    }
    return 1LL;
  }

  return result;
}

void sub_10034A694(uint64_t a1)
{
}

id sub_10034A69C(uint64_t a1)
{
  return [*(id *)(a1 + 1432) stopDeviceOrientationUpdates];
}

id sub_10034A6A4(uint64_t a1)
{
  return [*(id *)(a1 + 1304) stopDeviceOrientationUpdates];
}

uint64_t sub_10034A6AC(uint64_t a1)
{
  if ((sub_100487BCC() & 1) != 0)
  {
    unsigned int v11 = 0;
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 1432) deviceOrientationBlocking]);
    id v3 = v2;
    if (!v2)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_10066E2A0();
      }
      uint64_t v9 = 0LL;
      goto LABEL_16;
    }

    id v4 = [v2 orientation];
    int v5 = sub_10034A5BC((uint64_t)v4, (int)v4, (int *)&v11);
    int v6 = (os_log_s *)qword_1008F7578;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v7)
      {
        *(_DWORD *)__int128 buf = 67109120;
        unsigned int v13 = v11;
        int v8 = "Unexpected device orientation received - %u";
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 8u);
      }
    }

    else if (v7)
    {
      *(_DWORD *)__int128 buf = 67109120;
      unsigned int v13 = v11;
      int v8 = "Successfully queried device orientation - %u";
      goto LABEL_14;
    }

    uint64_t v9 = v11;
LABEL_16:

    return v9;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_10066E274();
  }
  return 0LL;
}

void sub_10034A824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10034A83C(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1 + 1448);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 1513);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_10034A880(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1 + 1448);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 1512);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

BOOL sub_10034A8C4()
{
  size_t v3 = 8LL;
  uint64_t v4 = 0LL;
  if (sysctlbyname("security.mac.amfi.developer_mode_status", &v4, &v3, 0LL, 0LL)) {
    return 0LL;
  }
  uint64_t v1 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Developer Mode enabled", v2, 2u);
  }

  return v4 == 1;
}

uint64_t sub_10034A964()
{
  if (qword_1008F0268 != -1) {
    dispatch_once(&qword_1008F0268, &stru_100892CF8);
  }
  return byte_1008F0260;
}

void sub_10034A9A4(id a1)
{
  int v2 = 0;
  size_t v1 = 4LL;
  if (!sysctlbyname("kern.hv_vmm_present", &v2, &v1, 0LL, 0LL)) {
    byte_1008F0260 = v2 != 0;
  }
}

uint64_t sub_10034A9FC()
{
  return 0LL;
}

uint64_t sub_10034AA04(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10034AAB8;
  block[3] = &unk_10087EB20;
  void block[4] = a1;
  if (qword_1008F0270 != -1) {
    dispatch_once(&qword_1008F0270, block);
  }
  if (*(void *)(a1 + 1544)) {
    return 0LL;
  }
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_10066E2CC();
  }
  return 1LL;
}

void sub_10034AAB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", 10.0));
  useconds_t v3 = 10000;
  *(void *)&__int128 v4 = 138412290LL;
  __int128 v28 = v4;
  while (1)
  {
    [v2 timeIntervalSinceNow:v28];
    if (v5 <= 0.0) {
      break;
    }
    int v6 = IOServiceNameMatching("AppleOLYHAL");
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v6);
    io_registry_entry_t v8 = MatchingService;
    if (MatchingService)
    {
      CFTypeRef v9 = IORegistryEntrySearchCFProperty( MatchingService,  "IODeviceTree",  @"HWIdentifiers",  kCFAllocatorDefault,  1u);
      int v10 = v9;
      if (v9)
      {
        CFTypeID v11 = CFGetTypeID(v9);
        if (v11 == CFDictionaryGetTypeID())
        {
          uint64_t v12 = *(const void **)(v1 + 1544);
          if (v12)
          {
            CFRelease(v12);
            *(void *)(v1 + 1544) = 0LL;
          }

          CFRetain(v10);
          *(void *)(v1 + 1544) = v10;
        }

        CFRelease(v10);
      }

      unsigned int v13 = (const __CFBoolean *)IORegistryEntrySearchCFProperty( v8,  "IODeviceTree",  @"WiFiBootState",  kCFAllocatorDefault,  1u);
      uint64_t v14 = v13;
      if (v13)
      {
        CFTypeID v15 = CFGetTypeID(v13);
        if (v15 == CFBooleanGetTypeID()) {
          *(_BYTE *)(v1 + 1552) = CFBooleanGetValue(v14) != 0;
        }
        CFRelease(v14);
      }

      IOObjectRelease(v8);
      uint64_t v16 = *(const __CFDictionary **)(v1 + 1544);
      if (v16)
      {
        uint64_t valuePtr = 0LL;
        int Value = (const __CFNumber *)CFDictionaryGetValue(v16, @"C");
        uint64_t v18 = Value;
        if (!Value || (CFTypeID v19 = CFGetTypeID(Value), v19 != CFNumberGetTypeID()))
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
            sub_10066E2F8();
          }
          break;
        }

        CFNumberGetValue(v18, kCFNumberLongType, &valuePtr);
        if (valuePtr != 4399) {
          break;
        }
        int v20 = *(unsigned __int8 *)(v1 + 1552);
        int v21 = (os_log_s *)qword_1008F7578;
        BOOL v22 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
        if (v20)
        {
          if (v22)
          {
            uint64_t v26 = *(void *)(v1 + 1544);
            int v27 = *(unsigned __int8 *)(v1 + 1552);
            *(_DWORD *)__int128 buf = 138412546;
            uint64_t v31 = v26;
            __int16 v32 = 1024;
            int v33 = v27;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "HWIdentifiers property is set: %@ and WiFi has booted %d",  buf,  0x12u);
          }

          break;
        }

        if (v22)
        {
          uint64_t v23 = *(void *)(v1 + 1544);
          *(_DWORD *)__int128 buf = v28;
          uint64_t v31 = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "HWIdentifiers property is set: %@ but WiFi has not booted",  buf,  0xCu);
        }
      }

      else
      {
        int v25 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "No HWIdentifiers property. Retrying...\n",  buf,  2u);
        }
      }
    }

    else
    {
      int v24 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "No AppleOLYHAL service. Retrying...\n",  buf,  2u);
      }
    }

    usleep(v3);
    v3 *= 2;
  }
}

void sub_10034AE3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10034AE60(void *a1)
{
  uint64_t result = a1[193];
  if (!result)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066E350();
    }
    if ((*(unsigned int (**)(void *))(*a1 + 288LL))(a1))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_10066E324();
      }
      return 0LL;
    }

    else
    {
      return a1[193];
    }
  }

  return result;
}

uint64_t sub_10034AEF4(CFDictionaryRef *a1)
{
  if (!(*((uint64_t (**)(CFDictionaryRef *))*a1 + 37))(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066E37C();
    }
    return 0LL;
  }

  uint64_t valuePtr = 0LL;
  int Value = (const __CFNumber *)CFDictionaryGetValue(a1[193], @"C");
  if (!Value)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066E2F8();
    }
    return 0LL;
  }

  CFNumberGetValue(Value, kCFNumberLongType, &valuePtr);
  if (valuePtr == 276347) {
    return 4377LL;
  }
  else {
    return valuePtr;
  }
}

void *sub_10034AFB8@<X0>(CFDictionaryRef *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if ((*((uint64_t (**)(CFDictionaryRef *))*a1 + 37))(a1))
  {
    *(_OWORD *)buffer = 0u;
    __int128 v29 = 0u;
    cStr[0] = a2;
    cStr[1] = 0;
    CFStringRef v6 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
    CFTypeRef v7 = CFAutorelease(v6);
    int Value = (const __CFString *)CFDictionaryGetValue(a1[193], v7);
    if (Value)
    {
      CFTypeRef v9 = buffer;
      CFStringGetCString(Value, buffer, 32LL, 0x8000100u);
    }

    else
    {
      CFTypeID v19 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_10066E410(a2, v19, v20, v21, v22, v23, v24, v25);
      }
      CFTypeRef v9 = "";
    }

    uint64_t v18 = a3;
    char v17 = v9;
  }

  else
  {
    int v10 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066E3A8(a2, v10, v11, v12, v13, v14, v15, v16);
    }
    char v17 = "";
    uint64_t v18 = a3;
  }

  return sub_10002418C(v18, v17);
}

uint64_t sub_10034B100(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 312LL))(a1, 86LL);
}

uint64_t sub_10034B110(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 312LL))(a1, 77LL);
}

uint64_t sub_10034B120(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 312LL))(a1, 115LL);
}

uint64_t sub_10034B130(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 312LL))(a1, 80LL);
}

uint64_t sub_10034B140(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 312LL))(a1, 109LL);
}

void sub_10034B150(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  useconds_t v3 = (void **)a2;
  sub_10034B408(a2, 0, buf);
  *(_OWORD *)useconds_t v3 = *(_OWORD *)buf;
  _DWORD v3[2] = *(void **)&buf[16];
  CFStringRef v6 = v3;
  CFTypeRef v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v6));
  io_registry_entry_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @".*(%@)", v7));
  uint64_t v9 = (*(uint64_t (**)(uint64_t, const __CFString *, void *))(*(void *)a1 + 384LL))( a1,  @"/etc/bluetool/",  v8);
  int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = MGCopyAnswer(@"ReleaseType", 0LL);
  uint64_t v12 = (os_log_s *)qword_1008F7578;
  if (v11 && v10)
  {
    uint64_t v13 = (os_log_s *)(id)qword_1008F7578;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v15 = objc_claimAutoreleasedReturnValue([@"/etc/bluetool/" stringByAppendingString:v10]);
      id v16 = [v15 UTF8String];
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = v16;
      *(_WORD *)&_BYTE buf[12] = 2080;
      *(void *)&_BYTE buf[14] = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "Found file from override directory: %s with extension: %s",  buf,  0x16u);
    }

    id v14 = objc_claimAutoreleasedReturnValue([@"/etc/bluetool/" stringByAppendingString:v10]);
    sub_10002418C(a3, (char *)[v14 UTF8String]);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&_BYTE buf[12] = 2112;
      *(void *)&_BYTE buf[14] = @"/etc/bluetool/";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "No override %s file in %@", buf, 0x16u);
    }

    sub_10002418C(a3, "");
  }
}

void sub_10034B3B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10034B408@<X0>(const void **a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  size_t v6 = *((unsigned __int8 *)a1 + 23);
  size_t v7 = (size_t)a1[1];
  a3[1] = 0LL;
  a3[2] = 0LL;
  if ((v6 & 0x80u) == 0LL) {
    size_t v8 = v6;
  }
  else {
    size_t v8 = v7;
  }
  *a3 = 0LL;
  uint64_t result = sub_100271C18((uint64_t)a3, v8 + 1);
  else {
    int v10 = *(char **)result;
  }
  if (v8)
  {
    else {
      uint64_t v11 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v8);
  }

  uint64_t v12 = &v10[v8];
  char *v12 = a2;
  v12[1] = 0;
  return result;
}

void sub_10034B4A0(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  useconds_t v3 = a2;
  __int128 v28 = a3;
  sub_10034B408(a2, 0, __p);
  *(_OWORD *)useconds_t v3 = *(_OWORD *)__p;
  _DWORD v3[2] = *(const void **)&__p[16];
  double v5 = v3;
  __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5));
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a1 + 336LL))(__p, a1);
  if (__p[23] >= 0) {
    size_t v6 = __p;
  }
  else {
    size_t v6 = *(_BYTE **)__p;
  }
  size_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v6));
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a1 + 344LL))(__p, a1);
  if (__p[23] >= 0) {
    size_t v8 = __p;
  }
  else {
    size_t v8 = *(_BYTE **)__p;
  }
  int v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a1 + 320LL))(__p, a1);
  if (__p[23] >= 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = *(_BYTE **)__p;
  }
  int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v9));
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a1 + 424LL))(__p, a1);
  if (__p[23] >= 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = *(_BYTE **)__p;
  }
  uint64_t v12 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v11));
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if ([v7 length] && objc_msgSend(v30, "length") && objc_msgSend(v10, "length"))
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 uppercaseString]);
    if ([v13 characterAtIndex:0] == 71)
    {
      uint64_t v14 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "S"));

      int v10 = (void *)v14;
    }

    if ([v29 containsString:@"ptb"])
    {
      if (-[__CFString length](v12, "length"))
      {
        uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"K_%@", v12));

        uint64_t v12 = (__CFString *)v15;
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
      {
        sub_10066E568();
      }
    }

    else
    {

      uint64_t v12 = &stru_1008A57D8;
    }

    if (-[__CFString length](v12, "length")
      || ([v29 containsString:@"ptb"] & 1) == 0)
    {
      uint64_t v18 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @".*(%@).*(%@).*._(%@).*(%@)_.*(%@)",  v7,  v30,  v10,  v12,  v29,  v28));
      uint64_t v19 = (*(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(void *)a1 + 384LL))( a1,  @"/usr/share/firmware/bluetooth/",  v18);
      uint64_t v20 = objc_claimAutoreleasedReturnValue(v19);
      char v17 = (void *)v18;
      if (v20)
      {
        uint64_t v21 = (void *)v20;
        goto LABEL_44;
      }
    }

    else
    {
      char v17 = 0LL;
    }

    if (![v29 containsString:@"ptb"]
      || (v12,
          uint64_t v12 = @"K_R",
          v18 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @".*(%@).*(%@).*._(%@).*(%@)_.*(%@)",  v7,  v30,  v10,  @"K_R",  v29)),  v17,  v22 = (*(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(void *)a1 + 384LL))( a1,  @"/usr/share/firmware/bluetooth/",  v18),  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v22),  v17 = (void *)v18,  !v21))
    {
      int v27 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_10066E4F0((char *)v3 + 23, v3, v27);
      }
      sub_10002418C(v28, "");
      goto LABEL_52;
    }

void sub_10034BA28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  _Unwind_Resume(a1);
}

void sub_10034BB1C(const void **a1@<X1>, void *a2@<X8>)
{
  int v2 = (void **)a1;
  sub_10034B408(a1, 0, buffer);
  *(_OWORD *)int v2 = *(_OWORD *)buffer;
  _DWORD v2[2] = (void *)v22;
  __int128 v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v2));
  double v5 = IOServiceNameMatching("bluetooth-pcie");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v5);
  io_object_t v7 = MatchingService;
  if (MatchingService)
  {
    size_t v8 = (const __CFString *)IORegistryEntrySearchCFProperty( MatchingService,  "IODeviceTree",  @"IOName",  kCFAllocatorDefault,  1u);
    uint64_t v9 = v8;
    if (v8)
    {
      *(_OWORD *)buffer = 0u;
      __int128 v22 = 0u;
      if (CFStringGetCString(v8, buffer, 32LL, 0x8000100u))
      {
        CFRelease(v9);
        IOObjectRelease(v7);
        int v10 = strtok(buffer, ",");
        uint64_t v11 = strtok(0LL, ",");
        uint64_t v12 = v11;
        uint64_t v13 = (os_log_s *)qword_1008F7578;
        if (v10 && v11)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
          {
            int v15 = 136315394;
            id v16 = v10;
            __int16 v17 = 2080;
            uint64_t v18 = v12;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Got IOName with vendorId %s, deviceId %s",  (uint8_t *)&v15,  0x16u);
          }

          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v10));
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
            sub_10066E618();
          }
          sub_10002418C(a2, "");
        }

        else
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
          {
            int v15 = 136315650;
            id v16 = v10;
            __int16 v17 = 2080;
            uint64_t v18 = v12;
            __int16 v19 = 2080;
            uint64_t v20 = buffer;
            _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "Missing vendorId (%s) or deviceId (%s) from IOName %s",  (uint8_t *)&v15,  0x20u);
          }

          sub_10002418C(a2, "");
        }
      }

      else
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
          sub_10066E5EC();
        }
        CFRelease(v9);
        IOObjectRelease(v7);
        sub_10002418C(a2, "");
      }
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_10066E5C0();
      }
      IOObjectRelease(v7);
      sub_10002418C(a2, "");
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066E594();
    }
    sub_10002418C(a2, "");
  }
}

void sub_10034BE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

os_log_s *sub_10034BEA8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v25 = a3;
  size_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  io_object_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v5));
  size_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", NSURLNameKey));
  id v30 = 0LL;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( [v6 contentsOfDirectoryAtURL:v7 includingPropertiesForKeys:v8 options:4 error:&v30]);
  id v10 = v30;

  if (v10)
  {
    uint64_t v11 = (os_log_s *)(id)qword_1008F7578;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 debugDescription]);
      sub_10066E678((uint64_t)v5, v12, (uint64_t)v32);
    }

    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    id v15 = v9;
    id v16 = [v15 countByEnumeratingWithState:&v26 objects:v31 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v27;
      do
      {
        uint64_t v18 = 0LL;
        do
        {
          if (*(void *)v27 != v17) {
            objc_enumerationMutation(v15);
          }
          __int16 v19 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)v18);
          if (v19)
          {
            uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 lastPathComponent]);
            [v14 addObject:v20];
          }

          uint64_t v18 = (char *)v18 + 1;
        }

        while (v16 != v18);
        id v16 = [v15 countByEnumeratingWithState:&v26 objects:v31 count:16];
      }

      while (v16);
    }

    id v21 = [v14 count];
    __int128 v22 = 0LL;
    if (v25 && v21)
    {
      uint64_t v23 = (*(uint64_t (**)(uint64_t, void *, id))(*(void *)a1 + 416LL))(a1, v14, v25);
      __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(v23);
    }

    uint64_t v11 = v22;

    uint64_t v13 = v11;
  }

  return v13;
}

void sub_10034C11C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_10034C1A8(uint64_t a1, void *a2, void *a3)
{
  id v32 = a2;
  id v5 = a3;
  if ([v5 containsString:@"aladdink"])
  {
    size_t v6 = @"aladdin";
    io_object_t v7 = @"aladdink";
  }

  else
  {
    size_t v6 = @"genie";
    io_object_t v7 = @"geniek";
  }

  uint64_t v8 = objc_claimAutoreleasedReturnValue([v5 stringByReplacingOccurrencesOfString:v7 withString:v6]);

  id v5 = (id)v8;
LABEL_6:
  uint64_t v31 = a1;
  int v33 = v5;
  uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  id v10 = v32;
  id v11 = [v10 countByEnumeratingWithState:&v38 objects:v44 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v39;
    do
    {
      uint64_t v13 = 0LL;
      do
      {
        if (*(void *)v39 != v12) {
          objc_enumerationMutation(v10);
        }
        uint64_t v14 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)v13);
        __int128 v34 = 0u;
        __int128 v35 = 0u;
        __int128 v36 = 0u;
        __int128 v37 = 0u;
        id v15 = [&off_1008C3168 countByEnumeratingWithState:&v34 objects:v43 count:16];
        if (v15)
        {
          uint64_t v16 = *(void *)v35;
          do
          {
            uint64_t v17 = 0LL;
            do
            {
              if (*(void *)v35 != v16) {
                objc_enumerationMutation(&off_1008C3168);
              }
              if (([v14 containsString:*(void *)(*((void *)&v34 + 1) + 8 * (void)v17)] & 1) == 0) {
                -[NSMutableArray addObject:](v9, "addObject:", v14);
              }
              uint64_t v17 = (char *)v17 + 1;
            }

            while (v15 != v17);
            id v15 = [&off_1008C3168 countByEnumeratingWithState:&v34 objects:v43 count:16];
          }

          while (v15);
        }

        uint64_t v13 = (char *)v13 + 1;
      }

      while (v13 != v11);
      id v11 = [v10 countByEnumeratingWithState:&v38 objects:v44 count:16];
    }

    while (v11);
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"SELF MATCHES[c] %@",  v33));
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray filteredArrayUsingPredicate:](v9, "filteredArrayUsingPredicate:", v18));
  id v20 = [v19 mutableCopy];

  if (![v20 count]) {
    goto LABEL_27;
  }
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 sortedArrayUsingSelector:"localizedCaseInsensitiveCompare:"]);
  id v22 = [v21 mutableCopy];

  id v20 = v22;
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 lastObject]);
  BOOL v24 = (unint64_t)[v23 length] > 0xFF;

  if (v24)
  {
    id v25 = (os_log_s *)(id)qword_1008F7578;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v22 lastObject]);
      sub_10066E6C0(v26, (uint64_t)v33, (uint64_t)v42);
    }

LABEL_27:
    __int128 v27 = 0LL;
    goto LABEL_34;
  }

  if ((unint64_t)[v22 count] < 2)
  {
    uint64_t v29 = objc_claimAutoreleasedReturnValue([v22 lastObject]);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066E720();
    }
    uint64_t v28 = (*(uint64_t (**)(uint64_t, id))(*(void *)v31 + 392LL))(v31, v22);
    uint64_t v29 = objc_claimAutoreleasedReturnValue(v28);
  }

  __int128 v27 = (void *)v29;
LABEL_34:

  return v27;
}

void sub_10034C534( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

id sub_10034C5D4(uint64_t a1, void *a2)
{
  id v27 = a2;
  id v47 = 0LL;
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSRegularExpression regularExpressionWithPattern:options:error:]( &OBJC_CLASS___NSRegularExpression,  "regularExpressionWithPattern:options:error:",  @".*_([0-9]*)[.]([0-9]*)[.]([0-9]*)[.].*",  1LL,  &v47));
  id v26 = v47;
  if (v26)
  {
    int v2 = (os_log_s *)(id)qword_1008F7578;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      useconds_t v3 = (void *)objc_claimAutoreleasedReturnValue([v27 lastObject]);
      __int128 v4 = (void *)objc_claimAutoreleasedReturnValue([v26 debugDescription]);
      sub_10066E780(v3, v4, (uint64_t)v50);
    }

    id v5 = (id)objc_claimAutoreleasedReturnValue([v27 lastObject]);
  }

  else
  {
    __int128 v37 = objc_alloc_init(&OBJC_CLASS___NSNumberFormatter);
    __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v27 lastObject]);
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    id obj = v27;
    id v6 = [obj countByEnumeratingWithState:&v43 objects:v49 count:16];
    if (v6)
    {
      id v33 = 0LL;
      id v34 = 0LL;
      id v36 = 0LL;
      uint64_t v29 = *(void *)v44;
      id v30 = v6;
      io_object_t v7 = &stru_1008A57D8;
      uint64_t v8 = &stru_1008A57D8;
      do
      {
        for (unint64_t i = 0LL; i != v30; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v44 != v29) {
            objc_enumerationMutation(obj);
          }
          uint64_t v9 = *(void **)(*((void *)&v43 + 1) + 8LL * (void)i);
          id v10 = [v31 matchesInString:v9 options:0 range:[v9 length]];

          __int128 v41 = 0u;
          __int128 v42 = 0u;
          __int128 v39 = 0u;
          __int128 v40 = 0u;
          id v33 = v10;
          id v11 = [v33 countByEnumeratingWithState:&v39 objects:v48 count:16];
          if (v11)
          {
            uint64_t v38 = *(void *)v40;
            io_object_t v7 = &stru_1008A57D8;
            uint64_t v8 = &stru_1008A57D8;
            do
            {
              for (j = 0LL; j != v11; j = (char *)j + 1)
              {
                if (*(void *)v40 != v38) {
                  objc_enumerationMutation(v33);
                }
                uint64_t v13 = *(void **)(*((void *)&v39 + 1) + 8LL * (void)j);
                if ((unint64_t)[v13 numberOfRanges] >= 4)
                {
                  id v14 = [v13 rangeAtIndex:1];
                  uint64_t v16 = [v9 substringWithRange:v14, v15];

                  id v17 = [v13 rangeAtIndex:3];
                  uint64_t v19 = [v9 substringWithRange:v17, v18];

                  id v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSNumberFormatter numberFromString:](v37, "numberFromString:", v16));
                  id v21 = [v20 longValue];

                  id v22 = (void *)objc_claimAutoreleasedReturnValue(-[NSNumberFormatter numberFromString:](v37, "numberFromString:", v19));
                  id v23 = [v22 longValue];

                  if ((uint64_t)v36 < (uint64_t)v21 || v36 == v21 && (uint64_t)v34 < (uint64_t)v23)
                  {
                    id v24 = v9;

                    __int128 v35 = v24;
                    id v36 = v21;
                    uint64_t v8 = (__CFString *)v16;
                    io_object_t v7 = (__CFString *)v19;
                    id v34 = v23;
                  }

                  else
                  {
                    uint64_t v8 = (__CFString *)v16;
                    io_object_t v7 = (__CFString *)v19;
                  }
                }
              }

              id v11 = [v33 countByEnumeratingWithState:&v39 objects:v48 count:16];
            }

            while (v11);
          }

          else
          {
            io_object_t v7 = &stru_1008A57D8;
            uint64_t v8 = &stru_1008A57D8;
          }
        }

        id v30 = [obj countByEnumeratingWithState:&v43 objects:v49 count:16];
      }

      while (v30);
    }

    else
    {
      id v33 = 0LL;
      uint64_t v8 = &stru_1008A57D8;
      io_object_t v7 = &stru_1008A57D8;
    }

    id v5 = v35;
  }

  return v5;
}

void sub_10034C9F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10034CAE4(uint64_t a1, uint64_t *a2, void *a3, _DWORD *a4)
{
  if ((v14[(unint64_t)*(v13[0] - 3) + 16] & 5) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066E938();
    }
    uint64_t v7 = 2402LL;
  }

  else
  {
    *a4 = 0;
    std::istream::seekg(v13, 0LL, 2LL);
    std::istream::tellg(v11, v13);
    *a4 = v12;
    std::istream::seekg(v13, 0LL, 0LL);
    uint64_t v9 = *a4;
    if ((int)v9 <= 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_10066E7D0();
      }
      if (v15 && !std::filebuf::close(v14)) {
        std::ios_base::clear( (std::ios_base *)((char *)v13 + (unint64_t)*(v13[0] - 3)),  *(_DWORD *)&v14[(unint64_t)*(v13[0] - 3) + 16] | 4);
      }
      uint64_t v7 = 2403LL;
    }

    else
    {
      id v10 = malloc(*a4);
      *a3 = v10;
      if (v10)
      {
        std::istream::read(v13, v10, v9);
        if ((v14[(unint64_t)*(v13[0] - 3) + 16] & 5) != 0)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
            sub_10066E8B8();
          }
          if (v15 && !std::filebuf::close(v14)) {
            std::ios_base::clear( (std::ios_base *)((char *)v13 + (unint64_t)*(v13[0] - 3)),  *(_DWORD *)&v14[(unint64_t)*(v13[0] - 3) + 16] | 4);
          }
          uint64_t v7 = 2405LL;
        }

        else
        {
          if (v15 && !std::filebuf::close(v14)) {
            std::ios_base::clear( (std::ios_base *)((char *)v13 + (unint64_t)*(v13[0] - 3)),  *(_DWORD *)&v14[(unint64_t)*(v13[0] - 3) + 16] | 4);
          }
          uint64_t v7 = 0LL;
        }
      }

      else
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
          sub_10066E850();
        }
        if (v15 && !std::filebuf::close(v14)) {
          std::ios_base::clear( (std::ios_base *)((char *)v13 + (unint64_t)*(v13[0] - 3)),  *(_DWORD *)&v14[(unint64_t)*(v13[0] - 3) + 16] | 4);
        }
        uint64_t v7 = 2404LL;
      }
    }
  }

  std::filebuf::~filebuf(v14);
  std::ios::~ios(&v16);
  return v7;
}

void sub_10034CDE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
}

void (__cdecl ***sub_10034CE08( void (__cdecl ***a1)(std::ifstream *__hidden this), uint64_t *a2, int a3))(std::ifstream *__hidden this)
{
  id v6 = a1 + 2;
  *a1 = v7;
  *(void *)((char *)*(v7 - 3) + (void)a1) = v8;
  a1[1] = 0LL;
  uint64_t v9 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0LL;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v6);
  else {
    id v10 = (uint64_t *)*a2;
  }
  if (!std::filebuf::open(v6, v10, a3 | 8u)) {
    std::ios_base::clear( (std::ios_base *)((char *)*(*a1 - 3) + (void)a1),  *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_10034CEE8(_Unwind_Exception *a1)
{
}

void *sub_10034CF20(void *a1)
{
  return a1;
}

uint64_t sub_10034CF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  id v10 = (char *)(a2 + 23);
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a2 + 23)) {
      goto LABEL_3;
    }
LABEL_7:
    id v11 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066E9A0(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    return 2400LL;
  }

  if (!*(void *)(a2 + 8)) {
    goto LABEL_7;
  }
LABEL_3:
  if (!a4)
  {
    id v20 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10066EA10(v10, (void *)a2, v20);
    }
    return 2401LL;
  }

  if ((*(_BYTE *)(a2 + 23) & 0x80) != 0)
  {
    sub_100024238(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)__int128 __p = *(_OWORD *)a2;
    uint64_t v31 = *(void *)(a2 + 16);
  }

  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(void *)a1 + 360LL))(&v32, a1, __p);
  *a5 = v32;
  *((void *)a5 + 2) = v33;
  HIBYTE(v33) = 0;
  LOBYTE(vsub_100242FAC(v1 - 32) = 0;
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  if (*((char *)a5 + 23) < 0)
  {
    unint64_t v21 = *((void *)a5 + 1);
    if (v21)
    {
      sub_100024238(&__dst, *(void **)a5, v21);
LABEL_23:
      uint64_t v19 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(void *)a1 + 400LL))( a1,  &__dst,  a3,  a4);
      if (SHIBYTE(v29) < 0)
      {
        id v22 = (void *)__dst;
LABEL_37:
        operator delete(v22);
        return v19;
      }

      return v19;
    }
  }

  else if (*((_BYTE *)a5 + 23))
  {
    __int128 __dst = *a5;
    uint64_t v29 = *((void *)a5 + 2);
    goto LABEL_23;
  }

  if (*v10 < 0)
  {
    sub_100024238(v26, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)id v26 = *(_OWORD *)a2;
    uint64_t v27 = *(void *)(a2 + 16);
  }

  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(void *)a1 + 368LL))(&v32, a1, v26);
  *a5 = v32;
  *((void *)a5 + 2) = v33;
  HIBYTE(v33) = 0;
  LOBYTE(vsub_100242FAC(v1 - 32) = 0;
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_100024238(v24, *(void **)a5, *((void *)a5 + 1));
  }

  else
  {
    *(_OWORD *)id v24 = *a5;
    uint64_t v25 = *((void *)a5 + 2);
  }

  uint64_t v19 = (*(uint64_t (**)(uint64_t, void **, uint64_t, uint64_t))(*(void *)a1 + 400LL))(a1, v24, a3, a4);
  if (SHIBYTE(v25) < 0)
  {
    id v22 = v24[0];
    goto LABEL_37;
  }

  return v19;
}

void sub_10034D1F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10034D24C(std::string *a1@<X8>)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  sub_10002418C(a1, "");
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "System Settings MGCopyAnswer WSKU",  (uint8_t *)&v10,  2u);
  }

  useconds_t v3 = (const __CFData *)MGCopyAnswer(@"WSKU", 0LL);
  __int128 v4 = v3;
  if (v3)
  {
    if (CFDataGetLength(v3) == 16)
    {
      uint64_t v5 = 0LL;
      id v6 = CFDataGetBytePtr(v4) + 8;
      do
      {
        unsigned int v7 = v6[v5];
        if (v7 >= 0x21) {
          std::string::push_back(a1, v7);
        }
        ++v5;
      }

      while (v5 != 4);
      uint64_t v8 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        if ((a1->__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v9 = a1;
        }
        else {
          uint64_t v9 = (std::string *)a1->__r_.__value_.__r.__words[0];
        }
        int v10 = 136315138;
        id v11 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Obtained sku from system is: %s",  (uint8_t *)&v10,  0xCu);
      }
    }

    CFRelease(v4);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
  {
    sub_10066EAB8();
  }

void sub_10034D3E0(_Unwind_Exception *exception_object)
{
}

void *sub_10034D40C(uint64_t a1)
{
  *(void *)a1 = off_1008925E0;
  *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = off_100892958;
  *(void *)(a1 + 16) = off_100892978;
  *(void *)(a1 + 24) = off_100892998;
  *(void *)(a1 + sub_100242FAC(v1 - 32) = off_1008929B8;
  *(void *)(a1 + 40) = off_1008929D8;
  *(void *)(a1 + 4std::istream::~istream(v1, v2 + 8) = off_1008929F8;
  *(void *)(a1 + 56) = off_100892A18;
  *(void *)(a1 + 64) = off_100892A38;
  *(void *)(a1 + 72) = off_100892A58;
  *(void *)(a1 + 80) = off_100892A78;
  *(void *)(a1 + 8std::istream::~istream(v1, v2 + 8) = off_100892A98;
  *(void *)(a1 + 96) = off_100892AB8;
  *(void *)(a1 + 104) = off_100892AD8;
  *(void *)(a1 + 112) = off_100892AF8;
  *(void *)(a1 + 120) = off_100892B18;
  *(void *)(a1 + 12std::istream::~istream(v1, v2 + 8) = off_100892B38;
  *(void *)(a1 + 136) = off_100892B58;
  *(void *)(a1 + 144) = off_100892B78;
  *(void *)(a1 + 152) = off_100892B98;
  *(void *)(a1 + 160) = off_100892BB8;
  *(void *)(a1 + 16std::istream::~istream(v1, v2 + 8) = off_100892BD8;
  *(void *)(a1 + 176) = off_100892BF8;
  *(void *)(a1 + 184) = off_100892C18;
  *(void *)(a1 + 192) = off_100892C38;
  *(void *)(a1 + 200) = off_100892C58;
  *(void *)(a1 + 1256) = &off_100892C78;

  sub_100242E28(a1 + 1448);
  return sub_1003469AC((void *)a1);
}

void sub_10034D4F4(uint64_t a1)
{
  *(void *)a1 = off_1008925E0;
  *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = off_100892958;
  *(void *)(a1 + 16) = off_100892978;
  *(void *)(a1 + 24) = off_100892998;
  *(void *)(a1 + sub_100242FAC(v1 - 32) = off_1008929B8;
  *(void *)(a1 + 40) = off_1008929D8;
  *(void *)(a1 + 4std::istream::~istream(v1, v2 + 8) = off_1008929F8;
  *(void *)(a1 + 56) = off_100892A18;
  *(void *)(a1 + 64) = off_100892A38;
  *(void *)(a1 + 72) = off_100892A58;
  *(void *)(a1 + 80) = off_100892A78;
  *(void *)(a1 + 8std::istream::~istream(v1, v2 + 8) = off_100892A98;
  *(void *)(a1 + 96) = off_100892AB8;
  *(void *)(a1 + 104) = off_100892AD8;
  *(void *)(a1 + 112) = off_100892AF8;
  *(void *)(a1 + 120) = off_100892B18;
  *(void *)(a1 + 12std::istream::~istream(v1, v2 + 8) = off_100892B38;
  *(void *)(a1 + 136) = off_100892B58;
  *(void *)(a1 + 144) = off_100892B78;
  *(void *)(a1 + 152) = off_100892B98;
  *(void *)(a1 + 160) = off_100892BB8;
  *(void *)(a1 + 16std::istream::~istream(v1, v2 + 8) = off_100892BD8;
  *(void *)(a1 + 176) = off_100892BF8;
  *(void *)(a1 + 184) = off_100892C18;
  *(void *)(a1 + 192) = off_100892C38;
  *(void *)(a1 + 200) = off_100892C58;
  *(void *)(a1 + 1256) = &off_100892C78;

  sub_100242E28(a1 + 1448);
  uint64_t v2 = sub_1003469AC((void *)a1);
  operator delete(v2);
}

void sub_10034D624(id a1)
{
  uint64_t v1 = (char *)operator new(0x200uLL);
  *(void *)uint64_t v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 1std::istream::~istream(v1, v2 + 8) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 10std::istream::~istream(v1, v2 + 8) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 2std::istream::~istream(v1, v2 + 8) = v1 + 232;
  *((void *)v1 + sub_100242FAC(v1 - 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 32std::istream::~istream(v1, v2 + 8) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 5std::istream::~istream(v1, v2 + 8) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_10034D72C(_Unwind_Exception *a1)
{
}

void sub_10034D740(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_10034D770(_Unwind_Exception *a1)
{
}

uint64_t sub_10034D784(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2112;
  *(void *)(a3 + 14) = a2;
  return result;
}

void sub_10034D79C(uint64_t a1@<X8>)
{
  *(void *)(v1 - std::istream::~istream(v1, v2 + 8) = a1;
}

uint64_t sub_10034D7AC(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  v22[0] = 0LL;
  v22[1] = 0LL;
  sub_100242F28((uint64_t)v22, a1 + 8);
  uint64_t v8 = *(void **)(a1 + 80);
  if (v8 != (void *)(a1 + 88))
  {
    while (1)
    {
      uint64_t v9 = v8[4];
      int v10 = (os_log_s *)qword_1008F75F0;
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
        break;
      }
      if (v9) {
        goto LABEL_4;
      }
LABEL_7:
      uint64_t v13 = (void *)v8[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          uint64_t v14 = (void *)v8[2];
          BOOL v15 = *v14 == (void)v8;
          uint64_t v8 = v14;
        }

        while (!v15);
      }

      uint64_t v8 = v14;
      if (v14 == (void *)(a1 + 88)) {
        return sub_100242FAC((uint64_t)v22);
      }
    }

    uint64_t v16 = *(void *)(v9 + 8);
    *(_DWORD *)__int128 buf = 134219264;
    uint64_t v24 = a2;
    __int16 v25 = 1024;
    unsigned int v26 = a3;
    __int16 v27 = 1024;
    unsigned int v28 = a4;
    __int16 v29 = 1024;
    unsigned int v30 = a5;
    __int16 v31 = 1024;
    int v32 = a6;
    __int16 v33 = 2048;
    uint64_t v34 = v16;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "BTDeviceMsgHandler::BTServiceEventCallback device:%llx services:%x eventType:%x ServiceSpecificEvent:%x result:%d cbid:%llx",  buf,  0x2Eu);
LABEL_4:
    if (*(_BYTE *)(*(void *)(v9 + 24) + 160LL))
    {
      xpc_object_t v11 = xpc_dictionary_create(0LL, 0LL, 0LL);
      uint64_t v12 = v11;
      if (v11)
      {
        xpc_dictionary_set_uint64(v11, "kCBMsgArgID", *(void *)(v9 + 8));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgSessionID", *(void *)(v9 + 16));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgBTDevice", a2);
        xpc_dictionary_set_uint64(v12, "kCBMsgArgServiceMask", a3);
        xpc_dictionary_set_uint64(v12, "kCBMsgArgEventType", a4);
        xpc_dictionary_set_uint64(v12, "kCBMsgArgEvent", a5);
        xpc_dictionary_set_uint64(v12, "kCBMsgArgResult", a6);
        sub_100260FEC(*(void *)(v9 + 24), "kCBMsgIdServiceEvent", v12, 1);
      }
    }

    goto LABEL_7;
  }

  return sub_100242FAC((uint64_t)v22);
}

void sub_10034DA20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t sub_10034DA3C( uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6)
{
  if (a6) {
    return sub_10034D7AC(a6, result, a2, a3, a4, a5);
  }
  return result;
}

void *sub_10034DA64(void *a1, uint64_t a2)
{
  useconds_t v3 = sub_10043C910(a1, a2);
  *useconds_t v3 = &off_100892D68;
  v3[11] = 0LL;
  v3[12] = 0LL;
  v3[10] = v3 + 11;
  *((_BYTE *)v3 + 104) = 0;
  if (qword_1008F0278 != -1) {
    dispatch_once(&qword_1008F0278, &stru_100892D88);
  }
  return a1;
}

void sub_10034DAD0(id a1)
{
  __int128 v55 = "kCBMsgIdDeviceAddressToStringMsg";
  uint64_t v56 = 32LL;
  __int128 v57 = &v55;
  uint64_t v1 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v1[4] = sub_10034E68C;
  void v1[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceAddressFromStringMsg";
  uint64_t v56 = 34LL;
  __int128 v57 = &v55;
  uint64_t v2 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v2[4] = sub_10034E878;
  void v2[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceFromAddressMsg";
  uint64_t v56 = 28LL;
  __int128 v57 = &v55;
  useconds_t v3 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v3[4] = sub_10034E95C;
  void v3[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceFromIdentifierMsg";
  uint64_t v56 = 31LL;
  __int128 v57 = &v55;
  __int128 v4 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  void v4[4] = sub_10034EAC4;
  void v4[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetAddressStringMsg";
  uint64_t v56 = 33LL;
  __int128 v57 = &v55;
  uint64_t v5 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  void v5[4] = sub_10034EBD0;
  void v5[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetDeviceTypeMsg";
  uint64_t v56 = 30LL;
  __int128 v57 = &v55;
  id v6 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  void v6[4] = sub_10034ED30;
  void v6[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetDeviceClassMsg";
  uint64_t v56 = 31LL;
  __int128 v57 = &v55;
  unsigned int v7 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v7[4] = sub_10034EE18;
  void v7[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetDefaultNameMsg";
  uint64_t v56 = 31LL;
  __int128 v57 = &v55;
  uint64_t v8 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  void v8[4] = sub_10034EF00;
  void v8[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetNameMsg";
  uint64_t v56 = 24LL;
  __int128 v57 = &v55;
  uint64_t v9 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  void v9[4] = sub_10034F060;
  void v9[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetProductNameMsg";
  uint64_t v56 = 31LL;
  __int128 v57 = &v55;
  int v10 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  void v10[4] = sub_10034F1C0;
  void v10[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceSetUserNameMsg";
  uint64_t v56 = 28LL;
  __int128 v57 = &v55;
  xpc_object_t v11 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  void v11[4] = sub_10034F320;
  void v11[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetSyncSettingsMsg";
  uint64_t v56 = 32LL;
  __int128 v57 = &v55;
  uint64_t v12 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  void v12[4] = sub_10034F408;
  void v12[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceSetSyncSettingsMsg";
  uint64_t v56 = 32LL;
  __int128 v57 = &v55;
  uint64_t v13 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  _OWORD v13[4] = sub_10034F4F0;
  void v13[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetGroupsMsg";
  uint64_t v56 = 26LL;
  __int128 v57 = &v55;
  uint64_t v14 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  void v14[4] = sub_10034F5D8;
  _BYTE v14[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceSetGroupMsg";
  uint64_t v56 = 25LL;
  __int128 v57 = &v55;
  BOOL v15 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  void v15[4] = sub_10034F78C;
  v15[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetPairingStatusMsg";
  uint64_t v56 = 33LL;
  __int128 v57 = &v55;
  uint64_t v16 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v16[4] = sub_10034F88C;
  v16[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetCloudPairingStatusMsg";
  uint64_t v56 = 38LL;
  __int128 v57 = &v55;
  uint64_t v17 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  void v17[4] = sub_10034F974;
  v17[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetMagicPairingStatusMsg";
  uint64_t v56 = 38LL;
  __int128 v57 = &v55;
  uint64_t v18 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v18[4] = sub_10034FA5C;
  void v18[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetConnectionStatusMsg";
  uint64_t v56 = 36LL;
  __int128 v57 = &v55;
  uint64_t v19 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  void v19[4] = sub_10034FB44;
  v19[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceIsAppleAudioDeviceMsg";
  uint64_t v56 = 35LL;
  __int128 v57 = &v55;
  id v20 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  void v20[4] = sub_10034FC2C;
  v20[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceSupportsHSMsg";
  uint64_t v56 = 27LL;
  __int128 v57 = &v55;
  unint64_t v21 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  void v21[4] = sub_10034FD14;
  v21[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceIsProControllerMsg";
  uint64_t v56 = 32LL;
  __int128 v57 = &v55;
  id v22 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v22[4] = sub_10034FDFC;
  v22[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceServiceAddCallbacksMsg";
  uint64_t v56 = 36LL;
  __int128 v57 = &v55;
  id v23 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v23[4] = sub_10034FEE4;
  void v23[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceServiceRemoveCallbacksMsg";
  uint64_t v56 = 39LL;
  __int128 v57 = &v55;
  uint64_t v24 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  uint8_t v24[4] = sub_1003500F4;
  void v24[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceConnectMsg";
  uint64_t v56 = 24LL;
  __int128 v57 = &v55;
  __int16 v25 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  _OWORD v25[4] = sub_1003502D4;
  void v25[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceConnectServicesMsg";
  uint64_t v56 = 32LL;
  __int128 v57 = &v55;
  unsigned int v26 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v26[4] = sub_10035039C;
  void v26[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceConnectServicesWithParametersMsg";
  uint64_t v56 = 46LL;
  __int128 v57 = &v55;
  __int16 v27 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  _OWORD v27[4] = sub_100350484;
  v27[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceDisconnectMsg";
  uint64_t v56 = 27LL;
  __int128 v57 = &v55;
  unsigned int v28 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v28[4] = sub_1003505E4;
  void v28[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceDisconnectServicesMsg";
  uint64_t v56 = 35LL;
  __int128 v57 = &v55;
  __int16 v29 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v29[4] = sub_1003506AC;
  v29[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetConnectedServicesMsg";
  uint64_t v56 = 37LL;
  __int128 v57 = &v55;
  unsigned int v30 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  uint8_t v30[4] = sub_100350794;
  void v30[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetSupportedServicesMsg";
  uint64_t v56 = 37LL;
  __int128 v57 = &v55;
  __int16 v31 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v31[4] = sub_10035087C;
  v31[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceSetServiceSettingsMsg";
  uint64_t v56 = 35LL;
  __int128 v57 = &v55;
  int v32 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v32[4] = sub_100350964;
  v32[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetServiceSettingsMsg";
  uint64_t v56 = 35LL;
  __int128 v57 = &v55;
  __int16 v33 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v33[4] = sub_100350A84;
  void v33[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceSetVirtualTypeMsg";
  uint64_t v56 = 31LL;
  __int128 v57 = &v55;
  uint64_t v34 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v34[4] = sub_100350BFC;
  v34[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetVirtualTypeMsg";
  uint64_t v56 = 31LL;
  __int128 v57 = &v55;
  __int128 v35 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v35[4] = sub_100350CE4;
  v35[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetComPortForServiceMsg";
  uint64_t v56 = 37LL;
  __int128 v57 = &v55;
  id v36 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v36[4] = sub_100350DCC;
  _DWORD v36[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetComPortForServiceWithSandboxExtensionMsg";
  uint64_t v56 = 57LL;
  __int128 v57 = &v55;
  __int128 v37 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v37[4] = sub_100350F60;
  v37[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceMatchesAdvertisedKeyMsg";
  uint64_t v56 = 37LL;
  __int128 v57 = &v55;
  uint64_t v38 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v38[4] = sub_1003511A4;
  void v38[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetAdvertisedValueForKeyMsg";
  uint64_t v56 = 41LL;
  __int128 v57 = &v55;
  __int128 v39 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v39[4] = sub_1003512BC;
  v39[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetDeviceIdMsg";
  uint64_t v56 = 28LL;
  __int128 v57 = &v55;
  __int128 v40 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v40[4] = sub_10035146C;
  v40[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceSetHIDPropertiesMsg";
  uint64_t v56 = 33LL;
  __int128 v57 = &v55;
  __int128 v41 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v41[4] = sub_10035159C;
  v41[5] = 0LL;
  __int128 v55 = "kCBMsgIdDevicePhysicalLinkDisconnectMsg";
  uint64_t v56 = 39LL;
  __int128 v57 = &v55;
  __int128 v42 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  void v42[4] = sub_10035169C;
  v42[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceConfigureLinkKeyMsg";
  uint64_t v56 = 33LL;
  __int128 v57 = &v55;
  __int128 v43 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v43[4] = sub_100351760;
  v43[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceIsTemporaryPairedMsg";
  uint64_t v56 = 34LL;
  __int128 v57 = &v55;
  __int128 v44 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v44[4] = sub_1003518E8;
  v44[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceIsWirelessSplitterSupportedMsg";
  uint64_t v56 = 44LL;
  __int128 v57 = &v55;
  __int128 v45 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v45[4] = sub_1003519D0;
  v45[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceIsTemporaryPairedNotInContactsMsg";
  uint64_t v56 = 47LL;
  __int128 v57 = &v55;
  __int128 v46 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v46[4] = sub_100351AB8;
  v46[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetLowSecurityStatusMsg";
  uint64_t v56 = 37LL;
  __int128 v57 = &v55;
  id v47 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v47[4] = sub_100351BA0;
  v47[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetHIDDeviceBehaviorMsg";
  uint64_t v56 = 37LL;
  __int128 v57 = &v55;
  uint64_t v48 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v48[4] = sub_100351C88;
  v48[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceSetHijackAudioRouteMsg";
  uint64_t v56 = 36LL;
  __int128 v57 = &v55;
  char v49 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v49[4] = sub_100351D74;
  v49[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceSetACLHighPriorityMsg";
  uint64_t v56 = 35LL;
  __int128 v57 = &v55;
  __int128 v50 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v50[4] = sub_100351E5C;
  v50[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceIsCentralMsg";
  uint64_t v56 = 26LL;
  __int128 v57 = &v55;
  __int128 v51 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v51[4] = sub_100351F5C;
  v51[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceGetUserSelectedDeviceTypeMsg";
  uint64_t v56 = 42LL;
  __int128 v57 = &v55;
  __int128 v52 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v52[4] = sub_100352044;
  v52[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceSetUserSelectedDeviceTypeMsg";
  uint64_t v56 = 42LL;
  __int128 v57 = &v55;
  __int128 v53 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v53[4] = sub_10035212C;
  v53[5] = 0LL;
  __int128 v55 = "kCBMsgIdDeviceIsGenuineAirPodsMsg";
  uint64_t v56 = 33LL;
  __int128 v57 = &v55;
  __int128 v54 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v55, (uint64_t)&unk_1006C2518, (_OWORD **)&v57);
  v54[4] = sub_100352214;
  v54[5] = 0LL;
}

void sub_10034E68C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  size_t length = 0LL;
  int data = (int *)xpc_dictionary_get_data(value, "kCBMsgArgAddressBytes", &length);
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAddressStringBuffSize");
  if (length != 6 || uint64 == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_FAULT)) {
      sub_10066EAE4();
    }
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      int v10 = reply;
      xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", 3uLL);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
      xpc_release(v10);
    }
  }

  else
  {
    else {
      size_t v11 = uint64;
    }
    __chkstk_darwin(uint64, v7);
    uint64_t v13 = (char *)&length - v12;
    bzero((char *)&length - v12, v11);
    *uint64_t v13 = 0;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
      sub_10066EB10();
    }
    int v14 = sub_1003C1E78(data, v13, v11);
    xpc_object_t v15 = xpc_dictionary_create_reply(xdict);
    if (v15)
    {
      uint64_t v16 = v15;
      xpc_dictionary_set_uint64(v15, "kCBMsgArgResult", v14);
      xpc_dictionary_set_string(v16, "kCBMsgArgAddressString", v13);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v16);
      xpc_release(v16);
    }
  }

void sub_10034E878(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  string = (unsigned __int8 *)xpc_dictionary_get_string(value, "kCBMsgArgAddressString");
  __int16 v10 = 0;
  int bytes = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10066EB48();
  }
  int v6 = sub_1003C1F48(string, (uint64_t)&bytes);
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_data(v8, "kCBMsgArgAddressBytes", &bytes, 6uLL);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10034E95C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  size_t length = 0LL;
  int data = (int *)xpc_dictionary_get_data(v4, "kCBMsgArgAddressBytes", &length);
  if (length == 6)
  {
    int v6 = data;
    uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgSessionID");
    uint64_t value = 0LL;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
    {
      sub_10066EBA8();
    }

    else if (uint64)
    {
LABEL_4:
      uint64_t v8 = (int)sub_1003C1FA0(uint64, v6, &value);
LABEL_11:
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (!reply) {
        return;
      }
      __int16 v10 = reply;
      xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
      uint64_t v12 = value;
      size_t v11 = "kCBMsgArgBTDevice";
      xpc_object_t v9 = v10;
      goto LABEL_13;
    }

    uint64_t v8 = 1LL;
    goto LABEL_11;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_FAULT)) {
    sub_10066EC08();
  }
  xpc_object_t v9 = xpc_dictionary_create_reply(xdict);
  if (v9)
  {
    __int16 v10 = v9;
    size_t v11 = "kCBMsgArgResult";
    uint64_t v12 = 8LL;
LABEL_13:
    xpc_dictionary_set_uint64(v9, v11, v12);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_10034EAC4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgSessionID");
  uuid = xpc_dictionary_get_uuid(v4, "kCBMsgArgUUID");
  uint64_t value = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066EC34();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C20B0(uint64, (uint64_t)uuid, &value);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBTDevice", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_10034EBD0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  memset(v11, 0, sizeof(v11));
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066EC94();
LABEL_8:
    uint64_t v8 = 1LL;
    goto LABEL_9;
  }

void sub_10034ED30(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066ECF4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C2438(uint64, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgDeviceType", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10034EE18(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066ED54();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C25E0(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgDeviceClass", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10034EF00(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  memset(v11, 0, sizeof(v11));
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066EDB4();
LABEL_8:
    uint64_t v8 = 1LL;
    goto LABEL_9;
  }

void sub_10034F060(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  memset(v11, 0, sizeof(v11));
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066EE14();
LABEL_8:
    uint64_t v8 = 1LL;
    goto LABEL_9;
  }

void sub_10034F1C0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  memset(v11, 0, sizeof(v11));
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066EE74();
LABEL_8:
    uint64_t v8 = 1LL;
    goto LABEL_9;
  }

void sub_10034F320(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  string = (char *)xpc_dictionary_get_string(value, "kCBMsgArgName");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066EED4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C2E10(uint64, string);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_10034F408(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066EF34();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C2F94(uint64, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgSyncSettings", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10034F4F0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  unsigned int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgSyncSettings");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066EF94();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C3068(uint64, v6);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_10034F5D8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgGrouIdArraySize");
  __chkstk_darwin(v6, 4 * v6);
  uint64_t v8 = (char *)&v15 - v7;
  bzero((char *)&v15 - v7, v9);
  uint64_t v15 = v6;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066EFF4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v10 = (int)sub_1003C3124(uint64, (uint64_t)v8, &v15);
    goto LABEL_6;
  }

  uint64_t v15 = 0LL;
  uint64_t v10 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_object_t v13 = xpc_array_create(0LL, 0LL);
    if (v15)
    {
      for (uint64_t i = 0LL; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, *(int *)&v8[4 * i]);
    }

    xpc_dictionary_set_value(v12, "kCBMsgArgGrouIdArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v12);
    xpc_release(v13);
    xpc_release(v12);
  }

void sub_10034F78C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgGrouId");
  int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F054();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_1003C31F0(uint64, v6, v7);
    goto LABEL_6;
  }

  uint64_t v8 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_10034F88C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F0B4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C33B8(uint64, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgPaired", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10034F974(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F114();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C3538(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgPaired", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10034FA5C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F174();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C35A4(uint64, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgPaired", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10034FB44(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F1D4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C3658(uint64, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgConnected", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10034FC2C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F234();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C36D0(uint64, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10034FD14(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F294();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C37BC(uint64, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10034FDFC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F2F4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C38A8(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

uint64_t sub_10034FEE4(uint64_t a1, void *a2)
{
  v19[0] = 0LL;
  v19[1] = 0LL;
  sub_100242F28((uint64_t)v19, a1 + 8);
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSessionID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgServiceMask");
  if (!os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
LABEL_16:
    int v14 = 1;
    goto LABEL_17;
  }

  sub_10066F354();
LABEL_3:
  uint64_t v8 = *(void **)(a1 + 80);
  if (v8 != (void *)(a1 + 88))
  {
    do
    {
      uint64_t v9 = v8[4];
      uint64_t v10 = (void *)v8[1];
      if (v10)
      {
        do
        {
          size_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          size_t v11 = (void *)v8[2];
          BOOL v12 = *v11 == (void)v8;
          uint64_t v8 = v11;
        }

        while (!v12);
      }

      uint64_t v8 = v11;
    }

    while (v11 != (void *)(a1 + 88));
  }

  xpc_object_t v13 = (uint64_t *)calloc(1uLL, 0x20uLL);
  uint64_t v18 = v13;
  v13[1] = v6;
  v13[2] = uint64;
  *xpc_object_t v13 = (uint64_t)sub_10034DA3C;
  void v13[3] = *(void *)(a1 + 72);
  sub_1002555B0((uint64_t **)(a1 + 80), (unint64_t *)&v18, (uint64_t *)&v18);
  if (*(_BYTE *)(a1 + 104))
  {
    int v14 = 0;
  }

  else
  {
    int v14 = sub_1003C391C(uint64, *v18, v7, a1);
    *(_BYTE *)(a1 + 104) = 1;
  }

void sub_1003500CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1003500F4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSessionID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10066F408();
  }
  v17[0] = 0LL;
  v17[1] = 0LL;
  sub_100242F28((uint64_t)v17, a1 + 8);
  if (uint64)
  {
    int v7 = *(void **)(a1 + 80);
    if (v7 == (void *)(a1 + 88))
    {
LABEL_13:
      if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
        sub_10066F3D0();
      }
      int v12 = 3;
    }

    else
    {
      while (1)
      {
        uint64_t v8 = (uint64_t *)v7[4];
        uint64_t v9 = (void *)v7[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = (void *)*v9;
          }

          while (v9);
        }

        else
        {
          do
          {
            uint64_t v10 = (void *)v7[2];
            BOOL v11 = *v10 == (void)v7;
            int v7 = v10;
          }

          while (!v11);
        }

        int v7 = v10;
        if (v10 == (void *)(a1 + 88)) {
          goto LABEL_13;
        }
      }

      uint64_t v16 = (void *)v7[4];
      if (*(_BYTE *)(a1 + 104))
      {
        int v12 = sub_1003C398C(uint64, *v8);
        *(_BYTE *)(a1 + 104) = 0;
      }

      else
      {
        int v12 = 0;
      }

      sub_10020166C(a1 + 80, (unint64_t *)&v16);
      free(v16);
    }
  }

  else
  {
    int v12 = 1;
  }

  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  int v14 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v12);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v14);
    xpc_release(v14);
  }

  return sub_100242FAC((uint64_t)v17);
}

void sub_1003502BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1003502D4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F468();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C39E4(uint64, -1);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10035039C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgServices");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F4C8();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C39E4(uint64, v6);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100350484(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgServices");
  int data = (__int128 *)xpc_dictionary_get_data(value, "kCBMsgArgKey", 0LL);
  int v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnectionMode");
  __int128 v12 = 0uLL;
  if (data) {
    __int128 v12 = *data;
  }
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F528();
  }

  else if (uint64)
  {
LABEL_5:
    uint64_t v9 = (int)sub_1003C3E30(uint64, v6, v8, &v12);
    goto LABEL_8;
  }

  uint64_t v9 = 1LL;
LABEL_8:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    BOOL v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v11);
    xpc_release(v11);
  }

void sub_1003505E4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F588();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C4B50(uint64, -1);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_1003506AC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgServiceMask");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F5E8();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C4B50(uint64, v6);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100350794(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F648();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C4E34(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgServiceMask", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10035087C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F6A8();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C4F98(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgServiceMask", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_100350964(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  string = xpc_dictionary_get_string(value, "kCBMsgArgKey");
  uint64_t v7 = xpc_dictionary_get_string(value, "kCBMsgArgValue");
  int v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgServiceMask");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F708();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v9 = (int)sub_1003C50F8(uint64, v8, (uint64_t)string, (uint64_t)v7);
    goto LABEL_6;
  }

  uint64_t v9 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    BOOL v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v11);
    xpc_release(v11);
  }

void sub_100350A84(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  string = xpc_dictionary_get_string(value, "kCBMsgArgKey");
  memset(v11, 0, sizeof(v11));
  int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgServiceMask");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F768();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_1003C51D8(uint64, v7, (uint64_t)string, (uint64_t)v11);
    goto LABEL_6;
  }

  uint64_t v8 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_string(v10, "kCBMsgArgValue", (const char *)v11);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_100350BFC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  xpc_dictionary_get_uint64(value, "kCBMsgArgType");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F7C8();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C52B8(uint64);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_100350CE4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F828();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C3538(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgType", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_100350DCC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  if (v6 >= 0x200) {
    size_t v7 = 512LL;
  }
  else {
    size_t v7 = v6;
  }
  uint64_t v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgServiceID");
  int v9 = v8;
  __chkstk_darwin(v8, v10);
  __int128 v12 = (char *)&v16 - v11;
  bzero((char *)&v16 - v11, v7);
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F888();
  }

  else if (uint64)
  {
LABEL_6:
    int v13 = sub_1003C5324(uint64, v9, v12, v7);
    goto LABEL_9;
  }

  int v13 = 1;
LABEL_9:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v15 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v13);
    if (!v13) {
      xpc_dictionary_set_data(v15, "kCBMsgArgData", v12, v7);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v15);
    xpc_release(v15);
  }

void sub_100350F60(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = (char *)xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  if (v6 >= 0x200) {
    size_t v7 = 512LL;
  }
  else {
    size_t v7 = v6;
  }
  uint64_t v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgServiceID");
  int v9 = v8;
  __int128 v16 = 0u;
  memset(v15, 0, sizeof(v15));
  __chkstk_darwin(v8, v10);
  __int128 v12 = (char *)v15 - v11;
  bzero((char *)v15 - v11, v7);
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F8E8();
LABEL_10:
    LODWORD(uint64) = 1;
    goto LABEL_11;
  }

void sub_1003511A4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  *(void *)&value[1] = 0LL;
  int data = (void *)xpc_dictionary_get_data(v4, "kCBMsgArgKey", (size_t *)&value[1]);
  value[0] = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F948();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C5404(uint64, data, *(size_t *)&value[1], value);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBool", value[0]);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_1003512BC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  if (v6 >= 0x200) {
    size_t v7 = 512LL;
  }
  else {
    size_t v7 = v6;
  }
  size_t length = 0LL;
  int data = (void *)xpc_dictionary_get_data(value, "kCBMsgArgKey", &length);
  __chkstk_darwin(data, v9);
  uint64_t v11 = (char *)&v15 - v10;
  bzero((char *)&v15 - v10, v7);
  size_t v16 = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066F9A8();
  }

  else if (uint64)
  {
LABEL_6:
    int v12 = sub_1003C5494(uint64, data, length, (uint64_t)v11, &v16, v7);
    goto LABEL_9;
  }

  int v12 = 1;
LABEL_9:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v14 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v12);
    if (!v12) {
      xpc_dictionary_set_data(v14, "kCBMsgArgData", v11, v16);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v14);
    xpc_release(v14);
  }

void sub_10035146C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  uint64_t v9 = 0LL;
  uint64_t value = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066FA08();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C5548(uint64, (_DWORD *)&value + 1, &value, (_DWORD *)&v9 + 1, &v9);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgVendorIdSource", HIDWORD(value));
    xpc_dictionary_set_uint64(v8, "kCBMsgArgVendorId", value);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgProductId", HIDWORD(v9));
    xpc_dictionary_set_uint64(v8, "kCBMsgArgVersionId", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10035159C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgAuthStatus");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgHIDType");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066FA68();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_1003C5664(uint64, v6, v7);
    goto LABEL_6;
  }

  uint64_t v8 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_10035169C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066FAC8();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C47A4(uint64);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_100351760(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (v6) {
    int data = xpc_dictionary_get_data(value, "kCBMsgArgKey", 0LL);
  }
  else {
    int data = 0LL;
  }
  size_t length = 0LL;
  uint64_t v8 = (int *)xpc_dictionary_get_data(value, "kCBMsgArgAddressBytes", &length);
  if (length == 6)
  {
    uint64_t v9 = v8;
    if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
    {
      sub_10066FB28();
    }

    else if (uint64)
    {
LABEL_7:
      uint64_t v10 = (int)sub_1003C5718(uint64, v9, (uint64_t)data, v6);
LABEL_14:
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (!reply) {
        return;
      }
      int v12 = reply;
      uint64_t v13 = v10;
      goto LABEL_16;
    }

    uint64_t v10 = 1LL;
    goto LABEL_14;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_FAULT)) {
    sub_10066EC08();
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v12 = reply;
    uint64_t v13 = 8LL;
LABEL_16:
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v12);
    xpc_release(v12);
  }

void sub_1003518E8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066FB88();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C58B4(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgPaired", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_1003519D0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066FBE8();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C5954(uint64, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_100351AB8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066FC48();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C5A40(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_100351BA0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066FCA8();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C5AE0(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgLowSecurityStatus", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_100351C88(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 2;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066FD08();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C5B54(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMSgArgHIDDeviceBehavior", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_100351D74(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066FD68();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C5BC8(uint64, v6);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100351E5C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgRequesterID");
  int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066FDC8();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_1003C5C9C(uint64, v6, v7);
    goto LABEL_6;
  }

  uint64_t v8 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v10);
    xpc_release(v10);
  }

void sub_100351F5C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066FE28();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C5DB8(uint64, (int *)&value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_100352044(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066FE88();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C5E30(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBTDeviceType", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v8);
    xpc_release(v8);
  }

void sub_10035212C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDeviceType");
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066FEE8();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1003C5F0C(uint64, v6);
    goto LABEL_6;
  }

  uint64_t v7 = 1LL;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void sub_100352214(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = -1;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG))
  {
    sub_10066FFF4();
  }

  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1003C6108(uint64, &value);
    goto LABEL_6;
  }

  uint64_t v6 = 1LL;
LABEL_6:
  uint64_t v7 = (os_log_s *)qword_1008F75F0;
  if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_DEBUG)) {
    sub_10066FF48((int *)&value, uint64, v7);
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgGenuine", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16LL), v9);
    xpc_release(v9);
  }

void *sub_100352334(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 10);
  useconds_t v3 = (void *)a1[10];
  xpc_object_t v4 = a1 + 11;
  if (v3 != a1 + 11)
  {
    do
    {
      free((void *)v3[4]);
      uint64_t v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          uint64_t v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          useconds_t v3 = v6;
        }

        while (!v7);
      }

      useconds_t v3 = v6;
    }

    while (v6 != v4);
  }

  sub_10023BF24(v2, (void *)a1[11]);
  a1[11] = 0LL;
  a1[12] = 0LL;
  a1[10] = v4;
  sub_10023BF24(v2, 0LL);
  *a1 = &off_100891BA0;
  sub_100242E28(a1 + 1);
  return a1;
}

void sub_1003523E8(void *a1)
{
  uint64_t v1 = sub_100352334(a1);
  operator delete(v1);
}

BOOL sub_1003523FC(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  uint64_t v11 = string;
  size_t v12 = strlen(string);
  uint64_t v5 = sub_100331854(&xmmword_1008F7250, (uint64_t)&v11);
  if (v5)
  {
    uint64_t v11 = string;
    size_t v12 = strlen(string);
    uint64_t v13 = &v11;
    uint64_t v6 = sub_1003525AC((uint64_t)&xmmword_1008F7250, (uint64_t)&v11, (uint64_t)&unk_1006C2518, (_OWORD **)&v13);
    BOOL v7 = (void (*)(void *, xpc_object_t))v6[4];
    uint64_t v8 = v6[5];
    uint64_t v9 = (void *)(a1 + (v8 >> 1));
    if ((v8 & 1) != 0) {
      BOOL v7 = *(void (**)(void *, xpc_object_t))(*v9 + v7);
    }
    v7(v9, xdict);
  }

  return v5 != 0LL;
}

uint64_t sub_1003524C8(uint64_t a1)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, a1 + 8);
  uint64_t v2 = *(void **)(a1 + 80);
  useconds_t v3 = (void *)(a1 + 88);
  if (v2 != (void *)(a1 + 88))
  {
    do
    {
      xpc_object_t v4 = (uint64_t *)v2[4];
      if (*(_BYTE *)(a1 + 104))
      {
        sub_1003C398C(v4[2], *v4);
        *(_BYTE *)(a1 + 104) = 0;
      }

      free(v4);
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          uint64_t v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }

        while (!v7);
      }

      uint64_t v2 = v6;
    }

    while (v6 != v3);
  }

  sub_10023BF24(a1 + 80, *(void **)(a1 + 88));
  *(void *)(a1 + 8std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 80) = v3;
  return sub_100242FAC((uint64_t)v9);
}

void sub_100352598( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1003525AC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = sub_1003313A4((uint64_t)&v29, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }

    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }

    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      int v14 = *v13;
      if (*v13)
      {
        uint64_t v17 = a2;
        uint64_t v15 = *(uint64_t **)a2;
        size_t v16 = *(void *)(v17 + 8);
        do
        {
          unint64_t v18 = *((void *)v14 + 1);
          if (v18 == v8)
          {
          }

          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9) {
                v18 %= v9;
              }
            }

            else
            {
              v18 &= v9 - 1;
            }

            if (v18 != v12) {
              break;
            }
          }

          int v14 = *(void **)v14;
        }

        while (v14);
      }
    }
  }

  else
  {
    unint64_t v12 = 0LL;
  }

  int v14 = operator new(0x30uLL);
  *(void *)int v14 = 0LL;
  *((void *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((void *)v14 + 4) = 0LL;
  *((void *)v14 + 5) = 0LL;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1LL;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_10005141C(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }

    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }

  uint64_t v25 = *(void *)a1;
  unsigned int v26 = *(void **)(*(void *)a1 + 8 * v12);
  if (v26)
  {
    *(void *)int v14 = *v26;
LABEL_40:
    *unsigned int v26 = v14;
    goto LABEL_41;
  }

  *(void *)int v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v25 + 8 * v12) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v27 = *(void *)(*(void *)v14 + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }

    else
    {
      v27 &= v9 - 1;
    }

    unsigned int v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_40;
  }

void sub_100352800(_Unwind_Exception *a1)
{
}

void sub_100352814()
{
  unsigned int v0 = objc_autoreleasePoolPush();
  xmmword_1008F7250 = 0u;
  unk_1008F7260 = 0u;
  dword_1008F7270 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_10034D7A8, &xmmword_1008F7250, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_100352864(uint64_t a1)
{
  *(void *)a1 = off_100892DB8;
  *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  sub_100242DC4(a1 + 64);
  *(void *)(a1 + 12std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + std::ios::~ios(v1 + 424) = 0LL;
  *(_BYTE *)(a1 + 44std::istream::~istream(v1, v2 + 8) = 0;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100892E70);
  }
  sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1);
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___NSISO8601DateFormatter);
  useconds_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = v2;

  [*(id *)(a1 + 8) setFormatOptions:1907];
  uint64_t v4 = sub_100404EB8();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_100352A08;
  v8[3] = &unk_10087EB20;
  void v8[4] = a1;
  sub_100405384(v4, v8);
  uint64_t v5 = objc_opt_new(&OBJC_CLASS___NSMutableOrderedSet);
  uint64_t v6 = *(void **)(a1 + 424);
  *(void *)(a1 + std::ios::~ios(v1 + 424) = v5;

  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 142) = 0LL;
  *(_WORD *)(a1 + 139) = 1023;
  *(_BYTE *)(a1 + 141) = 8;
  *(_DWORD *)(a1 + 142) = 100000;
  *(_DWORD *)(a1 + 433) = 33619967;
  *(_BYTE *)(a1 + 437) = 2;
  *(double *)(a1 + 440) = sub_100352E20();
  sub_100352F5C(a1);
  return a1;
}

void sub_1003529C4(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 4std::istream::~istream(v1, v2 + 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

void sub_100352A0C()
{
  unsigned int v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v27 = 0LL;
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( [v0 contentsOfDirectoryAtPath:@"/private/var/mobile/Library/Logs/Bluetooth/" error:&v27]);
  id v2 = v27;
  unint64_t v18 = v1;
  float v19 = v2;
  if (v1) {
    BOOL v3 = v2 == 0LL;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id obj = v1;
    id v4 = [obj countByEnumeratingWithState:&v23 objects:v36 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v24;
      do
      {
        uint64_t v6 = 0LL;
        do
        {
          if (*(void *)v24 != v5) {
            objc_enumerationMutation(obj);
          }
          unint64_t v7 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)v6);
          if (([v7 hasPrefix:@"Accessory"] & 1) != 0
            || ([v7 hasPrefix:@"bluetoothd-Accessory"] & 1) != 0)
          {
            unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@",  @"/private/var/mobile/Library/Logs/Bluetooth/",  v7,  v18));
            id v22 = 0LL;
            unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v0 attributesOfItemAtPath:v8 error:&v22]);
            id v10 = v22;
            unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:NSFileCreationDate]);
            [v11 timeIntervalSinceNow];
            double v13 = v12;

            if (v10)
            {
              int v14 = (os_log_s *)qword_1008F7568;
              if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__int128 buf = 141558531;
                uint64_t v29 = 1752392040LL;
                __int16 v30 = 2113;
                __int16 v31 = v8;
                __int16 v32 = 2114;
                double v33 = *(double *)&v10;
                _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "deleteOldLogFiles: Can't get path attributes for %{private, mask.hash}@, error %{public}@",  buf,  0x20u);
              }
            }

            else if (v13 >= -15552000.0 {
                   && (v13 >= -604800.0
            }
                    || (uint64_t v16 = sub_1002E6E00(),
                        ((*(uint64_t (**)(uint64_t))(*(void *)v16 + 8LL))(v16) & 1) != 0)))
            {
              id v10 = 0LL;
            }

            else
            {
              id v21 = 0LL;
              [v0 removeItemAtPath:v8 error:&v21];
              id v10 = v21;
              uint64_t v15 = (os_log_s *)qword_1008F7568;
              if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 141558787;
                uint64_t v29 = 1752392040LL;
                __int16 v30 = 2113;
                __int16 v31 = v8;
                __int16 v32 = 2048;
                double v33 = v13;
                __int16 v34 = 2114;
                id v35 = v10;
                _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "deleteOldLogFiles: Deleting old log file: %{private, mask.hash}@, fileAge %f, error %{public}@",  buf,  0x2Au);
              }
            }
          }

          uint64_t v6 = (char *)v6 + 1;
        }

        while (v4 != v6);
        id v17 = [obj countByEnumeratingWithState:&v23 objects:v36 count:16];
        id v4 = v17;
      }

      while (v17);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
  {
    sub_100670054();
  }
}

void sub_100352DB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

double sub_100352E20()
{
  uint64_t v0 = sub_1002E6E00();
  else {
    double v1 = 0.1;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  AppIntegerint Value = CFPreferencesGetAppIntegerValue( @"com.apple.bluetooth.accessory.CrashAnalyticsSamplingRate",  @"com.apple.da",  &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    uint64_t v3 = AppIntegerValue;
    if ((unint64_t)AppIntegerValue > 0x64)
    {
      id v4 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_1006700B8(v3, v4, v5, v6, v7, v8, v9, v10);
      }
    }

    else
    {
      double v1 = (double)AppIntegerValue / 100.0;
    }
  }

  unint64_t v11 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134217984;
    double v15 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "getCrashAnalyticsSamplingRate: Returning %f",  buf,  0xCu);
  }

  return v1;
}

double sub_100352F5C(uint64_t a1)
{
  uint64_t v1 = a1;
  *(_BYTE *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 31) = 0;
  [*(id *)(a1 + 128) invalidate];
  id v2 = *(void **)(v1 + 128);
  *(void *)(v1 + 12std::istream::~istream(v1, v2 + 8) = 0LL;

  [*(id *)(v1 + 424) removeAllObjects];
  double result = 0.0;
  *(_OWORD *)(v1 + 150) = 0u;
  v1 += 150LL;
  *(_BYTE *)(v1 + 282) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + sub_100242FAC(v1 - 32) = 0u;
  *(_OWORD *)(v1 + 4std::istream::~istream(v1, v2 + 8) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 12std::istream::~istream(v1, v2 + 8) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 20std::istream::~istream(v1, v2 + 8) = 0u;
  *(_OWORD *)(v1 + sub_100328D20(v2 - 224) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_BYTE *)(v1 + 256) = 0;
  *(_WORD *)(v1 + 257) = 1;
  *(_WORD *)(v1 + 265) = 768;
  *(_DWORD *)(v1 + 26std::istream::~istream(v1, v2 + 8) = 0;
  *(_BYTE *)(v1 + 272) = 1;
  return result;
}

uint64_t sub_100352FF4(uint64_t a1)
{
  *(void *)a1 = off_100892DB8;
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100892E70);
  }
  sub_100009168((uint64_t)off_1008D60A8 + 80, a1);

  sub_100242E28(a1 + 64);
  id v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 4std::istream::~istream(v1, v2 + 8) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_10035308C(_Unwind_Exception *a1)
{
  sub_100242E28(v1 + 64);
  uint64_t v3 = *(void **)(v1 + 40);
  if (v3)
  {
    *(void *)(v1 + 4std::istream::~istream(v1, v2 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(a1);
}

void sub_1003530CC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100352FF4(a1);
  operator delete(v1);
}

uint64_t sub_1003530E0(uint64_t result)
{
  *(_BYTE *)(result + 44std::istream::~istream(v1, v2 + 8) = 1;
  return result;
}

uint64_t sub_1003530EC(uint64_t result)
{
  *(_BYTE *)(result + 44std::istream::~istream(v1, v2 + 8) = 0;
  return result;
}

void sub_1003530F4(uint64_t a1, uint64_t a2, int a3)
{
  if (*(_BYTE *)(a1 + 448))
  {
    if (a2)
    {
      v75[0] = 0LL;
      v75[1] = 0LL;
      sub_100242F28((uint64_t)v75, a1 + 64);
      uint64_t v6 = a2 + 128;
      uint64_t v7 = sub_100353AEC(a1, a2 + 128);
      if (v7)
      {
        uint64_t v8 = (id *)v7;
        uint64_t v9 = (os_log_s *)qword_1008F7568;
        if (*(_BYTE *)(v7 + 40) == 3)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
          {
            id v10 = v8[1];
            *(_DWORD *)__int128 buf = 138543362;
            *(void *)&uint8_t buf[4] = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "initializeAccessoryLoggingSession: Disconnected device %{public}@ reconnected",  buf,  0xCu);
          }
        }

        else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
        {
          sub_100670394((uint64_t)v8);
        }
      }

      else
      {
        uint64_t v8 = (id *)operator new(0x70uLL);
        sub_1003609D4((uint64_t)v8, a2, a3);
        unint64_t v11 = *(void *)(a1 + 56);
        double v12 = *(id ***)(a1 + 48);
        if ((unint64_t)v12 >= v11)
        {
          uint64_t v14 = *(void *)(a1 + 40);
          uint64_t v15 = ((uint64_t)v12 - v14) >> 3;
          uint64_t v16 = v11 - v14;
          uint64_t v17 = v16 >> 2;
          else {
            unint64_t v18 = v17;
          }
          if (v18) {
            float v19 = (char *)sub_100008BA0(a1 + 56, v18);
          }
          else {
            float v19 = 0LL;
          }
          float v20 = (id **)&v19[8 * v15];
          id v21 = &v19[8 * v18];
          *float v20 = v8;
          double v13 = v20 + 1;
          __int128 v23 = *(char **)(a1 + 40);
          id v22 = *(char **)(a1 + 48);
          if (v22 != v23)
          {
            do
            {
              __int128 v24 = (id *)*((void *)v22 - 1);
              v22 -= 8;
              *--float v20 = v24;
            }

            while (v22 != v23);
            id v22 = *(char **)(a1 + 40);
          }

          *(void *)(a1 + 40) = v20;
          *(void *)(a1 + 4std::istream::~istream(v1, v2 + 8) = v13;
          *(void *)(a1 + 56) = v21;
          if (v22) {
            operator delete(v22);
          }
        }

        else
        {
          void *v12 = v8;
          double v13 = v12 + 1;
        }

        *(void *)(a1 + 4std::istream::~istream(v1, v2 + 8) = v13;
        __int128 v25 = (os_log_s *)qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
        {
          id v26 = v8[1];
          int v27 = *((_DWORD *)v8 + 6);
          *(_DWORD *)__int128 buf = 138543618;
          *(void *)&uint8_t buf[4] = v26;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)uint64_t v78 = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "initializeAccessoryLoggingSession: New session for %{public}@ pId = %d",  buf,  0x12u);
        }
      }

      sub_100353B2C(a1, a2 + 128);
      uint64_t v28 = sub_100404EB8();
      v74[0] = _NSConcreteStackBlock;
      v74[1] = 3221225472LL;
      v74[2] = sub_100353DF4;
      void v74[3] = &unk_10087EB20;
      v74[4] = a1;
      sub_100405384(v28, v74);
      if (((a3 - 8194) > 0xE || ((1 << (a3 - 2)) & 0x409B) == 0)
        && !sub_1003D94C4(a2)
        && !*(_BYTE *)(a2 + 960))
      {
        uint64_t v61 = sub_1002E6BF0();
        if (((*(uint64_t (**)(uint64_t))(*(void *)v61 + 328LL))(v61) & 1) != 0
          || (uint64_t v62 = sub_1002E6BF0(), ((*(uint64_t (**)(uint64_t))(*(void *)v62 + 384LL))(v62) & 1) != 0)
          || (uint64_t v63 = sub_1002E6BF0(), (*(unsigned int (**)(uint64_t))(*(void *)v63 + 424LL))(v63)))
        {
          else {
            int v64 = 9;
          }
          sub_100353ED0(a1, a2 + 128, v64, 2u);
        }
      }

      uint64_t v29 = sub_1002E6BF0();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v29 + 328LL))(v29))
      {
        if ((a3 - 8194) <= 0xE && ((1 << (a3 - 2)) & 0x409B) != 0)
        {
          uint64_t v30 = sub_1002E6E00();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v30 + 8LL))(v30))
          {
            __int16 v31 = (os_log_s *)qword_1008F7568;
            if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "initializeAccessoryLoggingSession: Invoking W1 iOS-internal initialization steps",  buf,  2u);
              __int16 v31 = (os_log_s *)qword_1008F7568;
            }

            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
            {
              int v32 = *(unsigned __int8 *)(a1 + 136);
              int v33 = *(unsigned __int8 *)(a1 + 137);
              int v34 = *(unsigned __int16 *)(a1 + 139);
              int v35 = *(unsigned __int8 *)(a1 + 141);
              int v36 = *(_DWORD *)(a1 + 142);
              int v37 = *(_DWORD *)(a1 + 146);
              int v38 = *(unsigned __int8 *)(a1 + 138);
              *(_DWORD *)__int128 buf = 67110656;
              *(_DWORD *)&uint8_t buf[4] = v32;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v33;
              *(_WORD *)uint64_t v78 = 1024;
              *(_DWORD *)&v78[2] = v34;
              *(_WORD *)uint64_t v79 = 1024;
              *(_DWORD *)&v79[2] = v35;
              __int16 v80 = 1024;
              int v81 = v36;
              __int16 v82 = 1024;
              int v83 = v37;
              __int16 v84 = 1024;
              int v85 = v38;
              _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "initializeAccessoryLoggingSession: isTimeStampPeriodicallyEnabled = %d, isDisableDiagnosticsPeriodically Enabled = %d, module = %d, level = %d, log_interval = %d, power_logging_interval = %d, isCrashLoggingDisabled = %d",  buf,  0x2Cu);
            }

            if (*(_BYTE *)(a1 + 137))
            {
              __int128 v39 = (os_log_s *)qword_1008F7568;
              if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
              {
                id v40 = v8[1];
                *(_DWORD *)__int128 buf = 138543874;
                *(void *)&uint8_t buf[4] = v40;
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)uint64_t v78 = 1;
                *(_WORD *)&v78[4] = 1024;
                *(_DWORD *)uint64_t v79 = 3000;
                _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Send Diagnostics Request Periodically to %{public}@, type = %d, interval = %d",  buf,  0x18u);
              }

              buf[0] = 0;
              sub_100242CA4(buf);
              int v41 = sub_10007ED70(a2 + 128, 1, 3000);
              sub_100242CD0(buf);
              if (v41 && os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
                sub_10067031C();
              }
              sub_100242CD8(buf);
            }

            if (*(_BYTE *)(a1 + 136))
            {
              __int128 v42 = (os_log_s *)qword_1008F7568;
              if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
              {
                id v43 = v8[1];
                *(_DWORD *)__int128 buf = 138543874;
                *(void *)&uint8_t buf[4] = v43;
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)uint64_t v78 = 0;
                *(_WORD *)&v78[4] = 1024;
                *(_DWORD *)uint64_t v79 = 100;
                _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Send TimeStamp Request Periodically to %{public}@, type = %d, interval = %d",  buf,  0x18u);
              }

              buf[0] = 0;
              sub_100242CA4(buf);
              int v44 = sub_10007ED70(a2 + 128, 0, 100);
              sub_100242CD0(buf);
              if (v44 && os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
                sub_1006702A4();
              }
              sub_100242CD8(buf);
            }

            if (*(_DWORD *)(a1 + 146))
            {
              __int128 v45 = (os_log_s *)qword_1008F7568;
              if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
              {
                id v46 = v8[1];
                int v47 = *(_DWORD *)(a1 + 146);
                *(_DWORD *)__int128 buf = 138543874;
                *(void *)&uint8_t buf[4] = v46;
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)uint64_t v78 = 2;
                *(_WORD *)&v78[4] = 1024;
                *(_DWORD *)uint64_t v79 = v47;
                _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "Send Power Logging Request Periodically to %{public}@, type = %d, interval = %d",  buf,  0x18u);
              }

              *((_BYTE *)v8 + 40) = 6;
              LOBYTE(dword_1008D94E0) = 1;
              char v73 = 0;
              sub_100242CA4(&v73);
              int v48 = sub_10007F92C((unsigned __int8 *)(a2 + 128), 4u, 5u, (unsigned __int8 *)&dword_1008D94E0);
              sub_100242CD0(&v73);
              if (v48 && os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
                sub_10067022C();
              }
              char v49 = fopen(aPrivateVarMobi_13, "a");
              if (v49)
              {
                sub_1003D0100(a2, (uint64_t)buf);
                int v50 = v79[3];
                __int128 v51 = *(const char **)buf;
                __int128 v59 = (const char *)sub_1001EDE10(v6, v52, v53, v54, v55, v56, v57, v58);
                __int128 v60 = buf;
                if (v50 < 0) {
                  __int128 v60 = v51;
                }
                fprintf(v49, "Power Logging - Device Name -> %s, Bluetooth Addr -> %s \n", v60, v59);
                if ((v79[3] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
                fclose(v49);
              }

              else
              {
                uint64_t v65 = (os_log_s *)qword_1008F7568;
                if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                {
                  unint64_t v66 = __error();
                  sub_1006701EC(v66, (uint64_t)v76, v65);
                }
              }

              sub_100242CD8(&v73);
            }

            if (!*(_BYTE *)(a1 + 138) && *((_BYTE *)v8 + 40) != 6)
            {
              sub_100354764(a1);
              int v67 = (os_log_s *)qword_1008F7568;
              if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
              {
                id v68 = v8[1];
                *(_DWORD *)__int128 buf = 138543362;
                *(void *)&uint8_t buf[4] = v68;
                _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEFAULT,  "initializeAccessoryLoggingSession: Send request to %{public}@ for check crash log existence, Left Bud",  buf,  0xCu);
              }

              *(_DWORD *)(a1 + 41std::istream::~istream(v1, v2 + 8) = 0x10000;
              *((_BYTE *)v8 + 40) = 7;
              LOBYTE(dword_1008D94E0) = 2;
              *(_BYTE *)(a1 + 416) = 2;
              buf[0] = 0;
              sub_100242CA4(buf);
              int v69 = sub_10007F92C((unsigned __int8 *)v6, 4u, 5u, (unsigned __int8 *)&dword_1008D94E0);
              sub_100242CD0(buf);
              dword_1008F0490 = dword_1008D94E0;
              byte_1008F0494 = byte_1008D94E4;
              byte_1008F0499 = 5;
              __int16 v70 = *(_WORD *)(v6 + 4);
              *(_DWORD *)(a1 + 409) = *(_DWORD *)v6;
              *(_WORD *)(a1 + 413) = v70;
              *(_BYTE *)(a1 + 415) = 0;
              if (v69)
              {
                if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
                  sub_100670174();
                }
              }

              sub_100242CD8(buf);
            }

            uint64_t v71 = sub_100404EB8();
            v72[0] = _NSConcreteStackBlock;
            v72[1] = 3221225472LL;
            v72[2] = sub_1003547E4;
            void v72[3] = &unk_10087EB20;
            v72[4] = a1;
            sub_100405460(v71, 30000LL, v72);
          }
        }
      }

      sub_100242FAC((uint64_t)v75);
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
    {
      sub_100670148();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
  {
    sub_10067011C();
  }

void sub_100353A64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, void *__p, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
}

uint64_t sub_100353AEC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v2 = *(uint64_t **)(a1 + 40);
    uint64_t v3 = *(uint64_t **)(a1 + 48);
    while (v2 != v3)
    {
      uint64_t result = *v2;
      ++v2;
    }
  }

  return 0LL;
}

uint64_t sub_100353B2C(uint64_t a1, uint64_t a2)
{
  unint64_t v32 = 0LL;
  uint64_t v33 = 0LL;
  int v34 = 0LL;
  uint64_t v4 = sub_100353AEC(a1, a2);
  if (*(_BYTE *)(a1 + 448))
  {
    uint64_t v5 = v4;
    if (v4)
    {
      v35.__darwin_time_t tv_sec = 0LL;
      *(void *)&v35.__darwin_suseconds_t tv_usec = 0LL;
      gettimeofday(&v35, 0LL);
      uint64_t v6 = (os_log_s *)qword_1008F7568;
      BOOL v7 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
      __darwin_time_t tv_sec = v35.tv_sec;
      __darwin_suseconds_t tv_usec = v35.tv_usec;
      if (v7)
      {
        id v10 = *(id *)(v5 + 8);
        *(_DWORD *)__int128 buf = 134218498;
        __darwin_time_t v37 = tv_sec;
        __int16 v38 = 1024;
        __darwin_suseconds_t v39 = tv_usec;
        __int16 v40 = 2114;
        id v41 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "sendTimestamp: Sending UNIX Epoch Time (seconds %ld, useconds %u) to %{public}@",  buf,  0x1Cu);
      }

      unint64_t v32 = __PAIR64__(tv_usec, tv_sec);
      float v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone localTimeZone](&OBJC_CLASS___NSTimeZone, "localTimeZone"));
      [*(id *)(a1 + 8) setTimeZone:v19];

      float v20 = *(void **)(a1 + 8);
      id v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSince1970:",  (double)tv_sec));
      id v22 = objc_claimAutoreleasedReturnValue([v20 stringFromDate:v21]);
      __int128 v23 = (const char *)[v22 UTF8String];

      int v34 = v23;
      LOWORD(v33) = strlen(v23);
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_100892ED0);
      }
      *(_DWORD *)__int128 buf = *(_DWORD *)a2;
      LOWORD(v37) = *(_WORD *)(a2 + 4);
      __int128 v24 = sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
      if (v24)
      {
        if (qword_1008D60E0 != -1) {
          dispatch_once(&qword_1008D60E0, &stru_100892EF0);
        }
        return sub_10021752C((uint64_t)off_1008D60D8, (uint64_t)v24, (uint64_t)&v32);
      }

      else
      {
        __int128 v25 = (os_log_s *)qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
          sub_1006704A8(a2, v25, v26, v27, v28, v29, v30, v31);
        }
        return 1LL;
      }
    }

    else
    {
      uint64_t v12 = qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_100670440(a2, v12, v13, v14, v15, v16, v17, v18);
      }
      return 312LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100670414();
    }
    return 111LL;
  }

void sub_100353DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100353DF8()
{
  char v7 = 0;
  uint64_t v0 = sub_1002E6E00();
  sub_10002418C(v5, "AccessoryLogging");
  sub_10002418C(__p, "APLogCollectionEnabled");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v0 + 72LL))(v0, v5, __p, &v7);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  uint64_t v1 = sub_1002E6E00();
  LODWORD(result) = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 264LL))(v1);
  if (v7) {
    return 1LL;
  }
  else {
    return result;
  }
}

void sub_100353E9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100353ED0(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  __int128 __p = 0LL;
  int v96 = 0LL;
  int64_t v97 = 0LL;
  uint64_t v8 = sub_1002E6E00();
  char v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 160LL))(v8);
  if (a4 == 1) {
    char v10 = 1;
  }
  else {
    char v10 = v9;
  }
  if ((v10 & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 448))
    {
      if (*(_BYTE *)(a1 + 32))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
          sub_100670588();
        }
        uint64_t v11 = 10LL;
      }

      else
      {
        v94[0] = 0LL;
        v94[1] = 0LL;
        sub_100242F28((uint64_t)v94, a1 + 64);
        int v88 = a3;
        if (a2)
        {
          uint64_t v12 = (os_log_s *)qword_1008F7568;
          if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v20 = sub_1001EDE10(a2, v13, v14, v15, v16, v17, v18, v19);
            *(_DWORD *)__int128 buf = 141558275;
            *(void *)&uint8_t buf[4] = 1752392040LL;
            __int16 v99 = 2081;
            uint64_t v100 = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "sendLogCommand: BdAddr %{private, mask.hash}s specified",  buf,  0x16u);
          }

          uint64_t v21 = sub_100353AEC(a1, a2);
          if (v21)
          {
            uint64_t v22 = v21;
            unsigned int v23 = *(_DWORD *)(v21 + 24) - 8194;
            if (v23 > 0xE || ((1 << v23) & 0x409B) == 0)
            {
              __int128 v24 = v96;
              if (v96 >= v97)
              {
                uint64_t v45 = ((char *)v96 - (_BYTE *)__p) >> 3;
                unint64_t v46 = ((char *)v97 - (_BYTE *)__p) >> 2;
                if (v46 <= v45 + 1) {
                  unint64_t v46 = v45 + 1;
                }
                else {
                  unint64_t v47 = v46;
                }
                if (v47) {
                  int v48 = (char *)sub_100008BA0((uint64_t)&v97, v47);
                }
                else {
                  int v48 = 0LL;
                }
                char v49 = (uint64_t *)&v48[8 * v45];
                int v50 = &v48[8 * v47];
                *char v49 = v22;
                __int128 v25 = v49 + 1;
                uint64_t v52 = (char *)__p;
                __int128 v51 = (char *)v96;
                if (v96 != __p)
                {
                  do
                  {
                    uint64_t v53 = *((void *)v51 - 1);
                    v51 -= 8;
                    *--char v49 = v53;
                  }

                  while (v51 != v52);
                  __int128 v51 = (char *)__p;
                }

                __int128 __p = v49;
                int v96 = v25;
                int64_t v97 = (uint64_t *)v50;
                if (v51) {
                  operator delete(v51);
                }
              }

              else
              {
                uint64_t *v96 = v21;
                __int128 v25 = v24 + 1;
              }

              int v96 = v25;
            }
          }
        }

        else
        {
          for (uint64_t i = *(uint64_t **)(a1 + 40); i != *(uint64_t **)(a1 + 48); ++i)
          {
            uint64_t v27 = *i;
            unsigned int v28 = *(_DWORD *)(*i + 24) - 8194;
            BOOL v29 = v28 > 0xE;
            int v30 = (1 << v28) & 0x409B;
            if (v29 || v30 == 0)
            {
              if (*(_BYTE *)(v27 + 40))
              {
                unint64_t v32 = (os_log_s *)qword_1008F7568;
                if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
                {
                  id v33 = *(id *)(v27 + 8);
                  int v34 = *(unsigned __int8 *)(v27 + 40);
                  *(_DWORD *)__int128 buf = 138543618;
                  *(void *)&uint8_t buf[4] = v33;
                  __int16 v99 = 1024;
                  LODWORD(v100) = v34;
                  _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "sendLogCommand: %{public}@ not idle (status %d), skipping",  buf,  0x12u);
                }
              }

              else
              {
                timeval v35 = v96;
                if (v96 >= v97)
                {
                  uint64_t v37 = ((char *)v96 - (_BYTE *)__p) >> 3;
                  unint64_t v38 = ((char *)v97 - (_BYTE *)__p) >> 2;
                  if (v38 <= v37 + 1) {
                    unint64_t v38 = v37 + 1;
                  }
                  else {
                    unint64_t v39 = v38;
                  }
                  if (v39) {
                    __int16 v40 = (char *)sub_100008BA0((uint64_t)&v97, v39);
                  }
                  else {
                    __int16 v40 = 0LL;
                  }
                  id v41 = &v40[8 * v37];
                  *(void *)id v41 = v27;
                  int v36 = (uint64_t *)(v41 + 8);
                  id v43 = (char *)__p;
                  __int128 v42 = (char *)v96;
                  if (v96 != __p)
                  {
                    do
                    {
                      uint64_t v44 = *((void *)v42 - 1);
                      v42 -= 8;
                      *((void *)v41 - 1) = v44;
                      v41 -= 8;
                    }

                    while (v42 != v43);
                    __int128 v42 = (char *)__p;
                  }

                  __int128 __p = v41;
                  int v96 = v36;
                  int64_t v97 = (uint64_t *)&v40[8 * v39];
                  if (v42) {
                    operator delete(v42);
                  }
                }

                else
                {
                  uint64_t *v96 = v27;
                  int v36 = v35 + 1;
                }

                int v96 = v36;
              }
            }
          }
        }

        uint64_t v54 = (uint64_t *)__p;
        if (v96 == __p)
        {
          char v73 = (os_log_s *)qword_1008F7568;
          if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "sendLogCommand: No appropriate accessory to command",  buf,  2u);
          }

          uint64_t v11 = 312LL;
        }

        else
        {
          unsigned __int8 v92 = v88;
          *(_DWORD *)uint64_t v93 = *(_DWORD *)(a1 + 433);
          v93[4] = *(_BYTE *)(a1 + 437);
          if (a4 <= 0xA && ((1 << a4) & 0x63E) != 0) {
            v93[3] = a4;
          }
          unsigned int v85 = a4;
          if (v88 == 7) {
            *(_DWORD *)&v93[1] = 1;
          }
          uint64_t v86 = a1;
          unsigned int v89 = 0;
          char v87 = 0;
          uint64_t v55 = (os_log_t *)&qword_1008F7568;
          p_cache = &OBJC_CLASS___CBMetricsAggressiveScanEvent.cache;
          uint64_t v57 = &OBJC_CLASS___CBMetricsAggressiveScanEvent.cache;
          uint64_t v58 = &unk_1008D6000;
          while (1)
          {
            uint64_t v59 = *v54;
            __int128 v60 = *v55;
            if (os_log_type_enabled(*v55, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v61 = v55;
              uint64_t v62 = v58;
              uint64_t v63 = v57;
              int v64 = p_cache;
              unsigned int v65 = v92 - 1;
              unint64_t v66 = "Unknown";
              if (v65 <= 8) {
                unint64_t v66 = off_100892F10[(char)v65];
              }
              id v67 = *(id *)(v59 + 8);
              *(_DWORD *)__int128 buf = 136316674;
              *(void *)&uint8_t buf[4] = v66;
              __int16 v99 = 2114;
              uint64_t v100 = (uint64_t)v67;
              __int16 v101 = 1024;
              int v102 = v93[0];
              __int16 v103 = 1024;
              int v104 = v93[1];
              __int16 v105 = 1024;
              int v106 = v93[2];
              __int16 v107 = 1024;
              int v108 = v93[3];
              __int16 v109 = 1024;
              int v110 = v93[4];
              _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "sendLogCommand: Sending command %s to %{public}@: device %d module %d submodule %d type %d level %d",  buf,  0x34u);

              p_cache = v64;
              uint64_t v57 = v63;
              uint64_t v58 = v62;
              uint64_t v55 = v61;
            }

            id v68 = v57[489];
            *(_DWORD *)__int128 buf = *(_DWORD *)(v59 + 16);
            *(_WORD *)&uint8_t buf[4] = *(_WORD *)(v59 + 20);
            int v69 = sub_1003FFEB0(v68, (uint64_t)buf, 1);
            if (!v69) {
              break;
            }
            if (v58[28] != -1LL) {
              dispatch_once(&qword_1008D60E0, &stru_100892EF0);
            }
            unsigned int v70 = sub_100214E98((uint64_t)off_1008D60D8, (uint64_t)v69, 512LL, 6LL, (uint64_t)&v92);
            if (v70)
            {
              uint64_t v71 = *v55;
              if (os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
              {
                id v72 = *(id *)(v59 + 8);
                *(_DWORD *)__int128 buf = 138543618;
                *(void *)&uint8_t buf[4] = v72;
                __int16 v99 = 1024;
                LODWORD(v100) = v70;
                _os_log_error_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_ERROR,  "sendLogCommand: Failed to send command to %{public}@ (error = %d)",  buf,  0x12u);
              }

              unsigned int v89 = v70;
            }

            else
            {
              if (v88 == 5) {
                sub_1003549DC(v86, v59);
              }
              char v87 = 1;
            }

            if (++v54 == v96)
            {
              if (!((v85 != 2) | v87 & 1))
              {
                uint64_t v83 = sub_1002E6E00();
                sub_10002418C(buf, "AccessoryLogging");
                sub_10002418C(v90, "StoredLogsRetrieved");
                (*(void (**)(uint64_t, _BYTE *, void **, void))(*(void *)v83 + 80LL))(v83, buf, v90, 0LL);
                if (v91 < 0) {
                  operator delete(v90[0]);
                }
                if (SHIBYTE(v101) < 0) {
                  operator delete(*(void **)buf);
                }
              }

              if ((v87 & 1) != 0) {
                uint64_t v11 = 0LL;
              }
              else {
                uint64_t v11 = v89;
              }
              goto LABEL_105;
            }
          }

          unint64_t v74 = *v55;
          if (os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
          {
            uint64_t v82 = sub_1001EDE10(v59 + 16, v75, v76, v77, v78, v79, v80, v81);
            sub_10067054C(v82, (uint64_t)buf, v74);
          }

          uint64_t v11 = 1LL;
        }

void sub_1003546DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, char a27, uint64_t a28, void *__p, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_100354764(uint64_t a1)
{
  id result = [*(id *)(a1 + 424) count];
  *(_BYTE *)(a1 + 4sub_100242FAC(v1 - 32) = (_BYTE)result;
  return result;
}

uint64_t sub_1003547E4(uint64_t a1)
{
  return sub_1003547EC(*(void *)(a1 + 32));
}

uint64_t sub_1003547EC(uint64_t a1)
{
  v22[0] = 0LL;
  v22[1] = 0LL;
  sub_100242F28((uint64_t)v22, a1 + 64);
  uint64_t v2 = *(void *)(a1 + 48);
  while (v2 != *(void *)(a1 + 40))
  {
    uint64_t v4 = *(void *)(v2 - 8);
    v2 -= 8LL;
    uint64_t v3 = v4;
    unsigned int v5 = *(_DWORD *)(v4 + 24) - 8194;
    BOOL v6 = v5 > 0xE;
    int v7 = (1 << v5) & 0x409B;
    if (!v6 && v7 != 0)
    {
      if (*(_BYTE *)(a1 + 448))
      {
        if (qword_1008D5F50 != -1) {
          dispatch_once(&qword_1008D5F50, &stru_100892ED0);
        }
        int v10 = *(_DWORD *)(v3 + 16);
        uint64_t v9 = v3 + 16;
        int v23 = v10;
        __int16 v24 = *(_WORD *)(v9 + 4);
        uint64_t v11 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v23, 1);
        if (v11)
        {
          if (qword_1008D60E0 != -1) {
            dispatch_once(&qword_1008D60E0, &stru_100892EF0);
          }
          sub_100215778((uint64_t)off_1008D60D8, (uint64_t)v11, 9LL, 0LL, 2u);
        }

        else
        {
          uint64_t v12 = (os_log_s *)qword_1008F7568;
          if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
          {
            uint64_t v20 = sub_1001EDE10(v9, v13, v14, v15, v16, v17, v18, v19);
            sub_100670638(v20, (uint64_t)&v23, v12);
          }
        }

        return sub_100242FAC((uint64_t)v22);
      }

      goto LABEL_19;
    }
  }

  if (!*(_BYTE *)(a1 + 448))
  {
LABEL_19:
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_1006705E0();
    }
    return sub_100242FAC((uint64_t)v22);
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_10067060C();
  }
  return sub_100242FAC((uint64_t)v22);
}

void sub_1003549B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1003549DC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a1 + sub_100242FAC(v1 - 32) = 1;
  uint64_t v4 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = *(id *)(a2 + 8);
    int v6 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)__int128 buf = 138543618;
    id v16 = v5;
    __int16 v17 = 1024;
    int v18 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "startInactivityTimer: Timeout period for %{public}@ begun, pId = 0x%x",  buf,  0x12u);
  }

  int v7 = *(_DWORD *)(a2 + 24);
  BOOL v8 = v7 == 8223 || v7 == 8202;
  double v9 = 45.0;
  if (!v8) {
    double v9 = 12.0;
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  double v14[2] = sub_100354B70;
  void v14[3] = &unk_100892DE8;
  void v14[4] = a1;
  _BYTE v14[5] = a2;
  uint64_t v10 = objc_claimAutoreleasedReturnValue( +[NSTimer timerWithTimeInterval:repeats:block:]( &OBJC_CLASS___NSTimer,  "timerWithTimeInterval:repeats:block:",  0LL,  v14,  v9));
  uint64_t v12 = *(void **)(a2 + 32);
  uint64_t v11 = (uint64_t *)(a2 + 32);
  uint64_t *v11 = v10;

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](&OBJC_CLASS___NSRunLoop, "mainRunLoop"));
  [v13 addTimer:*v11 forMode:NSDefaultRunLoopMode];
}

void sub_100354B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100354B70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, v2 + 64);
  uint64_t v3 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_100670674(a1, v3);
  }
  [*(id *)(*(void *)(a1 + 40) + 80) removeAllObjects];
  uint64_t v4 = *(void *)(a1 + 40);
  *(_BYTE *)(v4 + 40) = 2;
  sub_100354C18(v2, v4);
  return sub_100242FAC((uint64_t)v6);
}

void sub_100354C04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100354C18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_opt_new(&OBJC_CLASS___NSMutableOrderedSet);
  __int128 __p = 0LL;
  unsigned int v120 = 0LL;
  unsigned __int16 v121 = 0LL;
  if (a2)
  {
    if (*(unsigned __int8 *)(a2 + 40) - 3 <= 1 && *(void *)(a2 + 64))
    {
      id v5 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a2 + 48);
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Warning: finishSession: File %@ still open, closing and marking as corrupt",  buf,  0xCu);
      }

      *(_BYTE *)(a2 + 56) = 1;
      sub_10035C04C(a2);
    }

    int v7 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = *(id *)(a2 + 8);
      uint64_t v10 = v9;
      int v11 = *(unsigned __int8 *)(a2 + 40);
      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v13 = *(void *)(a1 + 48);
      if (v12 == v13)
      {
        int v14 = 0;
      }

      else
      {
        int v14 = 0;
        do
        {
          unsigned int v15 = *(unsigned __int8 *)(*(void *)v12 + 40LL);
          BOOL v16 = v15 > 8;
          int v17 = (1 << v15) & 0x182;
          if (!v16 && v17 != 0) {
            ++v14;
          }
          v12 += 8LL;
        }

        while (v12 != v13);
      }

      *(_DWORD *)__int128 buf = 138543874;
      *(void *)&uint8_t buf[4] = v9;
      __int16 v125 = 1024;
      int v126 = v11;
      __int16 v127 = 1024;
      int v128 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "finishSession: %{public}@ logging session finished (state now %d); remaining sessions: %d",
        buf,
        0x18u);
    }

    uint64_t v21 = *(uint64_t **)(a1 + 40);
    uint64_t v20 = *(uint64_t **)(a1 + 48);
    if (v21 == v20) {
      goto LABEL_103;
    }
    int v22 = 0;
    int v23 = *(uint64_t **)(a1 + 40);
    do
    {
      unsigned int v24 = *(unsigned __int8 *)(*v23 + 40);
      BOOL v16 = v24 > 8;
      int v25 = (1 << v24) & 0x182;
      if (!v16 && v25 != 0) {
        ++v22;
      }
      ++v23;
    }

    while (v23 != v20);
    if (v22 > 0)
    {
      uint64_t v19 = 0LL;
      goto LABEL_132;
    }

    if (v21 == v20)
    {
LABEL_103:
      uint64_t v27 = 0LL;
      char v108 = 0;
      int v104 = 0;
      goto LABEL_104;
    }

    int v104 = 0;
    char v108 = 0;
    uint64_t v27 = 0LL;
    *(void *)&__int128 v8 = 67109120LL;
    __int128 v103 = v8;
    uint64_t v107 = a1;
    while (1)
    {
      uint64_t v28 = *v21;
      int v29 = *(unsigned __int8 *)(*v21 + 40);
      switch(*(_BYTE *)(*v21 + 40))
      {
        case 0:
        case 6:
          goto LABEL_84;
        case 1:
        case 8:
          id v43 = (os_log_s *)qword_1008F7568;
          if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
          {
            uint64_t v44 = v21;
            uint64_t v45 = *(void **)(v28 + 8);
            int v46 = *(unsigned __int8 *)(v28 + 40);
            *(_DWORD *)__int128 buf = 138543618;
            *(void *)&uint8_t buf[4] = v45;
            __int16 v125 = 1024;
            int v126 = v46;
            id v47 = v45;
            _os_log_error_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "finishSession: %{public}@ should not be in state %d",  buf,  0x12u);

            uint64_t v21 = v44;
          }

          goto LABEL_66;
        case 2:
        case 4:
        case 5:
          goto LABEL_35;
        case 3:
          uint64_t v48 = v28 + 16;
          char v49 = v120;
          if (v120 >= v121)
          {
            uint64_t v67 = (v120 - (_BYTE *)__p) >> 3;
            unint64_t v68 = (v121 - (_BYTE *)__p) >> 2;
            if (v68 <= v67 + 1) {
              unint64_t v68 = v67 + 1;
            }
            else {
              unint64_t v69 = v68;
            }
            if (v69) {
              unsigned int v70 = (char *)sub_100008BA0((uint64_t)&v121, v69);
            }
            else {
              unsigned int v70 = 0LL;
            }
            uint64_t v71 = (uint64_t *)&v70[8 * v67];
            *uint64_t v71 = v48;
            int v50 = (char *)(v71 + 1);
            char v73 = (char *)__p;
            id v72 = v120;
            if (v120 != __p)
            {
              do
              {
                uint64_t v74 = *((void *)v72 - 1);
                v72 -= 8;
                *--uint64_t v71 = v74;
              }

              while (v72 != v73);
              id v72 = (char *)__p;
            }

            __int128 __p = v71;
            unsigned int v120 = v50;
            unsigned __int16 v121 = &v70[8 * v69];
            if (v72) {
              operator delete(v72);
            }
          }

          else
          {
            *(void *)unsigned int v120 = v48;
            int v50 = v49 + 8;
          }

          unsigned int v120 = v50;
          uint64_t v75 = (os_log_s *)qword_1008F7568;
          if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v76 = v21;
            id v77 = *(id *)(v28 + 8);
            *(_DWORD *)__int128 buf = 138543362;
            *(void *)&uint8_t buf[4] = v77;
            _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "finishSession: Session for %{public}@ marked for deletion",  buf,  0xCu);

            uint64_t v21 = v76;
          }

void sub_100355800( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, void *__p, uint64_t a46)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *sub_1003558E8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return memcpy(a2, (const void *)(a1 + 150), 0x101uLL);
}

void sub_1003558F8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(void *)int v7 = a2;
  *(_DWORD *)&v7[8] = a3;
  *(_WORD *)&__int128 v7[12] = WORD2(a3);
  uint64_t v6 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67110656;
    int v9 = a2 & 1;
    __int16 v10 = 1024;
    unsigned int v11 = (a2 >> 8) & 1;
    __int16 v12 = 1024;
    int v13 = (unsigned __int16)(a2 >> 24);
    __int16 v14 = 1024;
    int v15 = BYTE5(a2);
    __int16 v16 = 1024;
    int v17 = *(_DWORD *)&v7[6];
    __int16 v18 = 1024;
    int v19 = a3 >> 16;
    __int16 v20 = 1024;
    unsigned int v21 = WORD1(a2) & 1;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "setW1Logging: isTimeStampPeriodicallyEnabled = %d, isDisableDiagnosticsPeriodicallyEnabled = %d, module = %d, leve l = %d, log_interval = %d, power_logging_interval = %d, isCrashLoggingDisabled = %d",  buf,  0x2Cu);
  }

  *(void *)(a1 + 136) = *(void *)v7;
  *(void *)(a1 + 142) = *(void *)&v7[6];
}

void sub_100355A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109888;
    v5[1] = BYTE1(a2);
    __int16 v6 = 1024;
    int v7 = BYTE4(a2);
    __int16 v8 = 1024;
    int v9 = BYTE2(a2);
    __int16 v10 = 1024;
    int v11 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "setAccessoryLogging: module = %d, level = %d, submodule = %d, device = %d",  (uint8_t *)v5,  0x1Au);
  }

  *(_WORD *)(a1 + 433) = a2;
  *(_BYTE *)(a1 + 435) = BYTE2(a2);
  *(_BYTE *)(a1 + 436) = BYTE3(a2);
  *(_BYTE *)(a1 + 437) = BYTE4(a2);
}

uint64_t sub_100355B10()
{
  return 0LL;
}

void sub_100355B28()
{
  uint64_t v0 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Post an event to trigger AWD Diagnostics ", v1, 2u);
  }

  if (qword_1008D9118 != -1) {
    dispatch_once(&qword_1008D9118, &stru_100892E90);
  }
  if ((*(unsigned int (**)(void *))(*(void *)off_1008D9110 + 32LL))(off_1008D9110))
  {
    if (qword_1008D9118 != -1) {
      dispatch_once(&qword_1008D9118, &stru_100892E90);
    }
    sub_10041C1EC((uint64_t)off_1008D9110, &stru_100892E50);
  }

uint64_t sub_100355C00(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (!*(_BYTE *)(a1 + 448)) {
    return 111LL;
  }
  uint64_t v7 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 8LL))(v7)
    && (uint64_t v8 = sub_1002E6BF0(), (*(unsigned int (**)(uint64_t))(*(void *)v8 + 328LL))(v8)))
  {
    int v9 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003D0100(a2, (uint64_t)__p);
      __int16 v10 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__int128 buf = 136315650;
      __int16 v16 = v10;
      __int16 v17 = 1024;
      int v18 = a3;
      __int16 v19 = 1024;
      int v20 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Send RequestPeriodically to device %s, type = %d, interval = %d",  buf,  0x18u);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }

    buf[0] = 0;
    sub_100242CA4(buf);
    uint64_t v11 = sub_10007ED70(a2 + 128, a3, a4);
    sub_100242CD0(buf);
    if ((_DWORD)v11 && os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100670754();
    }
    sub_100242CD8(buf);
  }

  else
  {
    uint64_t v11 = 102LL;
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100892E70);
  }
  return sub_1004317E0((uint64_t)off_1008D60A8, v11, 10000);
}

void sub_100355DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100355DE8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!*(_BYTE *)(a1 + 448)) {
    return 111LL;
  }
  uint64_t v5 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 8LL))(v5)
    && (uint64_t v6 = sub_1002E6BF0(), (*(unsigned int (**)(uint64_t))(*(void *)v6 + 328LL))(v6)))
  {
    uint64_t v7 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003D0100(a2, (uint64_t)__p);
      uint64_t v8 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__int128 buf = 136315394;
      char v14 = v8;
      __int16 v15 = 1024;
      unsigned int v16 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Send CancelRequestPeriodically to device %s, type = %d",  buf,  0x12u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    LOBYTE(__p[0]) = 0;
    sub_100242CA4(__p);
    uint64_t v9 = sub_10007F07C((unsigned __int8 *)(a2 + 128), a3);
    sub_100242CD0(__p);
    if ((_DWORD)v9 && os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_1006707B4();
    }
    sub_100242CD8(__p);
  }

  else
  {
    uint64_t v9 = 102LL;
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100892E70);
  }
  return sub_1004317E0((uint64_t)off_1008D60A8, v9, 10000);
}

void sub_100355FA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100355FC0(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(a1 + 24) = a2;
  *(_BYTE *)(a1 + 16) = a3;
  sub_100355FE0();
  return 0LL;
}

void sub_100355FE0()
{
  uint64_t v0 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "TraceLogCollection - syncLogOnDemand", v1, 2u);
  }

  if (qword_1008D9118 != -1) {
    dispatch_once(&qword_1008D9118, &stru_100892E90);
  }
  if ((*(unsigned int (**)(void *))(*(void *)off_1008D9110 + 32LL))(off_1008D9110))
  {
    if (qword_1008D9118 != -1) {
      dispatch_once(&qword_1008D9118, &stru_100892E90);
    }
    sub_10041C1EC((uint64_t)off_1008D9110, &stru_100892E08);
  }

void sub_1003560B8(id a1)
{
  if (qword_1008D67D8 != -1) {
    dispatch_once(&qword_1008D67D8, &stru_100892EB0);
  }
  sub_1003560F8(qword_1008D67D0);
}

uint64_t sub_1003560F8(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E00();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 160LL))(v2) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 448))
    {
      if (*(void *)(a1 + 48) == *(void *)(a1 + 40))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
          sub_100670840();
        }
        return 312LL;
      }

      else if (*(_BYTE *)(a1 + 32))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
          sub_10067086C();
        }
        return 10LL;
      }

      else
      {
        uint64_t v3 = sub_100353ED0(a1, 0LL, 5, 2u);
        uint64_t v4 = (os_log_s *)qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109120;
          LODWORD(v30) = v3;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "syncLogOnDemandEvent: sendLogCommand returned %d",  buf,  8u);
        }

        uint64_t v5 = sub_1002E6E00();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 8LL))(v5))
        {
          sub_100354764(a1);
          v28[0] = 0LL;
          v28[1] = 0LL;
          sub_100242F28((uint64_t)v28, a1 + 64);
          uint64_t v7 = *(void *)(a1 + 40);
          uint64_t v6 = *(void *)(a1 + 48);
          do
          {
            uint64_t v8 = v6;
            if (v6 == v7)
            {
              uint64_t v16 = 0LL;
              goto LABEL_37;
            }

            v6 -= 8LL;
            uint64_t v9 = *(void *)(v8 - 8);
            unsigned int v10 = *(_DWORD *)(v9 + 24) - 8194;
            BOOL v11 = v10 > 0xE;
            int v12 = (1 << v10) & 0x409B;
          }

          while (v11 || v12 == 0);
          if (qword_1008D5F50 != -1) {
            dispatch_once(&qword_1008D5F50, &stru_100892ED0);
          }
          *(_DWORD *)__int128 buf = *(_DWORD *)(v9 + 16);
          LOWORD(v30) = *(_WORD *)(v9 + 20);
          char v14 = sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
          int v27 = 3;
          if (qword_1008D60E0 != -1) {
            dispatch_once(&qword_1008D60E0, &stru_100892EF0);
          }
          sub_10021F3F4((uint64_t)off_1008D60D8, (uint64_t)v14, &v27);
          char v15 = v27;
          if ((v27 - 3) <= 0xFFFFFFFD)
          {
            char v15 = 2;
            int v27 = 2;
          }

          *(_BYTE *)(a1 + 416) = v15;
          *(_WORD *)(a1 + 407) = 1;
          *(_DWORD *)(a1 + 41std::istream::~istream(v1, v2 + 8) = 0x10000;
          LOBYTE(dword_1008D94E0) = v15;
          char v26 = 0;
          sub_100242CA4(&v26);
          uint64_t v16 = sub_10007F92C((unsigned __int8 *)(v9 + 16), 4u, 5u, (unsigned __int8 *)&dword_1008D94E0);
          __int16 v17 = (os_log_s *)qword_1008F7568;
          if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
          {
            id v18 = *(id *)(v9 + 8);
            *(_DWORD *)__int128 buf = 138543618;
            id v30 = v18;
            __int16 v31 = 1024;
            int v32 = v16;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "syncLogOnDemandEvent: Requested trace log from W1 device %{public}@, Left Bud (id result = %d)",  buf,  0x12u);
          }

          dword_1008F0490 = dword_1008D94E0;
          byte_1008F0494 = byte_1008D94E4;
          byte_1008F0499 = 5;
          __int16 v19 = *(_WORD *)(v9 + 20);
          *(_DWORD *)(a1 + 409) = *(_DWORD *)(v9 + 16);
          *(_WORD *)(a1 + 413) = v19;
          *(_BYTE *)(a1 + 415) = 0;
          sub_100242CD0(&v26);
          if (!(_DWORD)v16)
          {
            *(_BYTE *)(v9 + 40) = 8;
            *(_BYTE *)(a1 + sub_100242FAC(v1 - 32) = 1;
          }

          sub_100242CD8(&v26);
LABEL_37:
          if (*(_BYTE *)(a1 + 32) && *(void *)(a1 + 24))
          {
            int v20 = (os_log_s *)qword_1008F7568;
            if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "syncLogOnDemandEvent: Starting overall timer",  buf,  2u);
            }

            v25[0] = _NSConcreteStackBlock;
            v25[1] = 3221225472LL;
            v25[2] = sub_100356668;
            void v25[3] = &unk_100888180;
            _OWORD v25[4] = a1;
            uint64_t v21 = objc_claimAutoreleasedReturnValue( +[NSTimer timerWithTimeInterval:repeats:block:]( &OBJC_CLASS___NSTimer,  "timerWithTimeInterval:repeats:block:",  0LL,  v25,  415.0));
            int v22 = *(void **)(a1 + 128);
            *(void *)(a1 + 12std::istream::~istream(v1, v2 + 8) = v21;

            int v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](&OBJC_CLASS___NSRunLoop, "mainRunLoop"));
            [v23 addTimer:*(void *)(a1 + 128) forMode:NSDefaultRunLoopMode];
          }

          if ((_DWORD)v3 && v8 != v7)
          {
            if (qword_1008D60B0 != -1) {
              dispatch_once(&qword_1008D60B0, &stru_100892E70);
            }
            uint64_t v3 = sub_1004317E0((uint64_t)off_1008D60A8, v16, 10000);
          }

          sub_100242FAC((uint64_t)v28);
        }
      }
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_100670814();
      }
      return 111LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100670898();
    }
    return 2LL;
  }

  return v3;
}

void sub_10035661C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100356660(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

void sub_100356668(uint64_t a1, void *a2)
{
  id v24 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  v28[0] = 0LL;
  v28[1] = 0LL;
  sub_100242F28((uint64_t)v28, v3 + 64);
  int v25 = 0LL;
  char v26 = 0LL;
  int v27 = 0LL;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_1006708C4(v3);
  }
  uint64_t v5 = *(uint64_t **)(v3 + 40);
  uint64_t v4 = *(uint64_t **)(v3 + 48);
  if (v5 != v4)
  {
    while (1)
    {
      uint64_t v6 = *v5;
      unsigned int v7 = *(_DWORD *)(*v5 + 24) - 8194;
      BOOL v8 = v7 > 0xE;
      int v9 = (1 << v7) & 0x409B;
      if (v8 || v9 == 0) {
        break;
      }
      unsigned int v11 = *(unsigned __int8 *)(v6 + 40);
      if (v11 != 7) {
        goto LABEL_11;
      }
LABEL_32:
      if (++v5 == v4) {
        goto LABEL_33;
      }
    }

    unsigned int v11 = *(unsigned __int8 *)(v6 + 40);
LABEL_11:
    BOOL v8 = v11 > 8;
    int v12 = (1 << v11) & 0x182;
    if (!v8 && v12 != 0)
    {
      if (v26 >= v27)
      {
        uint64_t v15 = ((char *)v26 - v25) >> 3;
        unint64_t v16 = ((char *)v27 - v25) >> 2;
        if (v16 <= v15 + 1) {
          unint64_t v16 = v15 + 1;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          id v18 = (char *)sub_100008BA0((uint64_t)&v27, v17);
        }
        else {
          id v18 = 0LL;
        }
        __int16 v19 = &v18[8 * v15];
        *(void *)__int16 v19 = v6;
        char v14 = (uint64_t *)(v19 + 8);
        int v20 = v26;
        if (v26 != (uint64_t *)v25)
        {
          do
          {
            uint64_t v21 = *--v20;
            *((void *)v19 - 1) = v21;
            v19 -= 8;
          }

          while (v20 != (uint64_t *)v25);
          int v20 = (uint64_t *)v25;
        }

        int v25 = v19;
        int v27 = (uint64_t *)&v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }

      else
      {
        *char v26 = v6;
        char v14 = v26 + 1;
      }

      char v26 = v14;
      uint64_t v4 = *(uint64_t **)(v3 + 48);
    }

    goto LABEL_32;
  }

void sub_10035687C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_1003568B8(uint64_t a1, uint64_t a2)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100892EF0);
  }
  uint64_t v4 = sub_100221798((uint64_t)off_1008D60D8);
  if (*(void *)(a1 + 24) && !*(_BYTE *)(a1 + 16))
  {
    uint64_t v6 = v4;
    *(_BYTE *)(a1 + 16) = 1;
    unsigned int v7 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "purgeCallback: Returning zero files to sysdiagnose",  v8,  2u);
    }

    return sub_10022A2E4(v6, a2, 64, "", 0LL);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100670970();
    }
    return 12LL;
  }

BOOL sub_1003569C8(uint64_t a1)
{
  return *(void *)(a1 + 24) && *(_BYTE *)(a1 + 16) == 0;
}

uint64_t sub_1003569E8(uint64_t a1, uint64_t a2)
{
  v19[0] = 0LL;
  v19[1] = 0LL;
  sub_100242F28((uint64_t)v19, a1 + 64);
  uint64_t v4 = sub_100353AEC(a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = *(char **)(a1 + 48);
  unsigned int v7 = *(char **)(a1 + 40);
  if (v7 != v6)
  {
    while (*(void *)v7 != v4)
    {
      v7 += 8;
      if (v7 == v6)
      {
        unsigned int v7 = *(char **)(a1 + 48);
        break;
      }
    }
  }

  if (v7 == v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_10067099C();
    }
    uint64_t v14 = 312LL;
  }

  else
  {
    unsigned int v8 = *(unsigned __int8 *)(v4 + 40);
    BOOL v9 = v8 > 8;
    int v10 = (1 << v8) & 0x182;
    if (v9 || v10 == 0)
    {
      uint64_t v15 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = *(id *)(v5 + 8);
        *(_DWORD *)__int128 buf = 138543362;
        id v21 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "removeAccessoryLoggingSession: Removing %{public}@",  buf,  0xCu);

        uint64_t v6 = *(char **)(a1 + 48);
      }

      if (v6 != v7 + 8) {
        memmove(v7, v7 + 8, v6 - (v7 + 8));
      }
      *(void *)(a1 + 4std::istream::~istream(v1, v2 + 8) = v6 - 8;
      unint64_t v17 = (void *)sub_100360B78(v5);
      operator delete(v17);
      uint64_t v14 = 0LL;
    }

    else
    {
      *(_BYTE *)(v4 + 40) = 3;
      int v12 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = *(id *)(v5 + 8);
        *(_DWORD *)__int128 buf = 138543362;
        id v21 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Warning: removeAccessoryLoggingSession: Disconnected from %{public}@ while actively logging",  buf,  0xCu);
      }

      uint64_t v14 = sub_100354C18(a1, v5);
    }
  }

  sub_100242FAC((uint64_t)v19);
  return v14;
}

void sub_100356C10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100356C2C(uint64_t a1, uint64_t a2)
{
  if (sub_1003D94C4(a2)) {
    return 1LL;
  }
  else {
    return sub_100353DF8();
  }
}

uint64_t sub_100356C54(uint64_t a1, unsigned int *a2, int a3, unsigned int a4, int *a5)
{
  v33[0] = 0LL;
  v33[1] = 0LL;
  sub_100242F28((uint64_t)v33, a1 + 64);
  uint64_t v10 = sub_100353AEC(a1, (uint64_t)a2);
  unsigned int v11 = (os_log_s *)qword_1008F7568;
  if (v10)
  {
    uint64_t v12 = v10;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = *(id *)(v12 + 8);
      int v14 = *(unsigned __int8 *)(v12 + 40);
      *(_DWORD *)__int128 buf = 138544130;
      id v35 = v13;
      __int16 v36 = 1024;
      int v37 = a3;
      __int16 v38 = 1024;
      unsigned int v39 = a4;
      __int16 v40 = 1024;
      int v41 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "recvLoggingHandler: %{public}@, type: %u, len: %u, status: %d",  buf,  0x1Eu);
    }

    if (a3 > 31)
    {
      if (a3 == 32)
      {
        uint64_t v15 = sub_100357544(a1, (uint64_t)a2, a4, a5);
        goto LABEL_22;
      }

      if (a3 != 128)
      {
        if (a3 == 1024)
        {
          uint64_t v15 = sub_100358A48(a1, a2, a4, (unsigned __int8 *)a5);
LABEL_22:
          uint64_t v24 = v15;
          goto LABEL_27;
        }

        goto LABEL_24;
      }

      uint64_t v27 = sub_1002E6E00();
      uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
      if ((_DWORD)v28)
      {
        uint64_t v15 = sub_1003570F4(v28, v29, 0LL, (uint64_t)a5);
        goto LABEL_22;
      }

      goto LABEL_23;
    }

    if (a3 == 2)
    {
      uint64_t v30 = sub_1002E6E00();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v30 + 8LL))(v30))
      {
        uint64_t v15 = sub_100356F38(a1, (uint64_t)a2, a4, a5);
        goto LABEL_22;
      }

      goto LABEL_23;
    }

    if (a3 != 4)
    {
LABEL_24:
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_100670A00();
      }
      uint64_t v24 = 3LL;
      goto LABEL_27;
    }

    uint64_t v25 = sub_1002E6E00();
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v25 + 8LL))(v25))
    {
LABEL_23:
      uint64_t v24 = 2LL;
      goto LABEL_27;
    }

    int v26 = *(unsigned __int8 *)(v12 + 40);
    if ((v26 - 7) < 2)
    {
      uint64_t v15 = sub_1003580B4(a1, (uint64_t)a2, a4, (unsigned __int8 *)a5);
      goto LABEL_22;
    }

    if (v26 == 6)
    {
      uint64_t v15 = sub_100357DDC(a1, (unsigned __int8 *)a2, 0LL, (unsigned __int8 *)a5);
      goto LABEL_22;
    }

    int v32 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100670A78(v12, v32);
    }
    uint64_t v24 = 1LL;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = sub_1001EDE10((uint64_t)a2, v16, v17, v18, v19, v20, v21, v22);
      sub_1006709C8(v23, (uint64_t)buf);
    }

    uint64_t v24 = 8LL;
  }

void sub_100356F18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100356F38(uint64_t a1, uint64_t a2, __int16 a3, const void *a4)
{
  LOWORD(__nitems) = a3;
  v24.__darwin_time_t tv_sec = 0LL;
  *(void *)&v24.__darwin_suseconds_t tv_usec = 0LL;
  gettimeofday(&v24, 0LL);
  __darwin_suseconds_t tv_usec = v24.tv_usec;
  int __ptr = v24.tv_sec;
  uint64_t v7 = sub_100353AEC(a1, a2);
  if (v7)
  {
    uint64_t v8 = v7;
    int v9 = *(_DWORD *)(v7 + 24);
    if (v9 == 8194)
    {
      uint64_t v10 = (const char *)&unk_1008F0280;
LABEL_9:
      uint64_t v19 = fopen(v10, "ab");
      if (v19)
      {
        uint64_t v20 = v19;
        fwrite((const void *)(a1 + 422), 1uLL, 1uLL, v19);
        fwrite(&__ptr, 1uLL, 4uLL, v20);
        fwrite(&tv_usec, 1uLL, 4uLL, v20);
        fwrite(&__nitems, 1uLL, 2uLL, v20);
        fwrite(a4, 1uLL, (unsigned __int16)__nitems, v20);
        fclose(v20);
        return 0LL;
      }

      else
      {
        uint64_t v21 = (os_log_s *)qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
          sub_100670BD8(v21);
        }
        return 1LL;
      }
    }

    if (v9 == 8201)
    {
      uint64_t v10 = (const char *)&unk_1008F0380;
      goto LABEL_9;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100670B5C(v8);
    }
    return 2LL;
  }

  else
  {
    uint64_t v11 = qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100670AF4(a2, v11, v12, v13, v14, v15, v16, v17);
    }
    return 8LL;
  }

uint64_t sub_1003570F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = fopen(aPrivateVarMobi_15, "w");
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = 0LL;
    uint64_t v8 = a4 + 20;
    uint64_t v9 = a4 + 28;
    uint64_t v34 = a4;
    uint64_t v10 = a4 + 21;
    uint64_t v11 = v8;
    do
    {
      if (*(_BYTE *)(v8 + 40 * v7))
      {
LABEL_4:
        fwrite("Source Device : Addr -> ", 0x18uLL, 1uLL, v6);
        for (uint64_t i = 0LL; i != 6; ++i)
          fprintf(v6, "%02x", *(unsigned __int8 *)(v11 + i));
        fwrite(", Link Key -> ", 0xEuLL, 1uLL, v6);
        for (uint64_t j = 0LL; j != 16; ++j)
          fprintf(v6, "%02x", *(unsigned __int8 *)(v9 + j));
        fputc(10, v6);
      }

      else
      {
        uint64_t v14 = 0LL;
        while (v14 != 5)
        {
          if (*(unsigned __int8 *)(v10 + v14++))
          {
            break;
          }
        }
      }

      ++v7;
      v10 += 40LL;
      v11 += 40LL;
      v9 += 40LL;
    }

    while (v7 != 15);
    uint64_t v16 = 0LL;
    uint64_t v17 = v34 + 636;
    uint64_t v18 = v34 + 621;
    uint64_t v19 = v34 + 620;
    do
    {
      if (*(_BYTE *)(v34 + 620 + 36 * v16))
      {
LABEL_17:
        fwrite("Magic Device : Hint -> ", 0x17uLL, 1uLL, v6);
        for (uint64_t k = 0LL; k != 16; ++k)
          fprintf(v6, "%02x", *(unsigned __int8 *)(v19 + k));
        fwrite(", Key -> ", 9uLL, 1uLL, v6);
        for (uint64_t m = 0LL; m != 16; ++m)
          fprintf(v6, "%02x", *(unsigned __int8 *)(v17 + m));
        fprintf(v6, ", Ratchet -> %d", *(_DWORD *)(v34 + 652 + 36 * v16));
        fputc(10, v6);
      }

      else
      {
        uint64_t v22 = 0LL;
        while (v22 != 15)
        {
          if (*(unsigned __int8 *)(v18 + v22++))
          {
            break;
          }
        }
      }

      ++v16;
      v18 += 36LL;
      v19 += 36LL;
      v17 += 36LL;
    }

    while (v16 != 5);
    if (*(_BYTE *)(v34 + 800))
    {
LABEL_30:
      fwrite("Magic IRK -> ", 0xDuLL, 1uLL, v6);
      for (uint64_t n = 0LL; n != 16; ++n)
        fprintf(v6, "%02x", *(unsigned __int8 *)(v34 + 800 + n));
      fwrite(", Magic Key -> ", 0xFuLL, 1uLL, v6);
      for (iuint64_t i = 0LL; ii != 16; ++ii)
        fprintf(v6, "%02x", *(unsigned __int8 *)(v34 + 816 + ii));
      fputc(10, v6);
    }

    else
    {
      uint64_t v30 = 0LL;
      while (v30 != 15)
      {
        if (*(unsigned __int8 *)(v34 + 801 + v30++))
        {
          break;
        }
      }
    }

    if (*(_BYTE *)(v34 + 832))
    {
LABEL_36:
      fwrite("Couple Addr -> ", 0xFuLL, 1uLL, v6);
      for (juint64_t j = 0LL; jj != 6; ++jj)
        fprintf(v6, "%02x", *(unsigned __int8 *)(v34 + 832 + jj));
      fwrite(", Link Key -> ", 0xEuLL, 1uLL, v6);
      for (kuint64_t k = 0LL; kk != 16; ++kk)
        fprintf(v6, "%02x", *(unsigned __int8 *)(v34 + 840 + kk));
      fputc(10, v6);
    }

    else
    {
      uint64_t v32 = 0LL;
      while (v32 != 5)
      {
        if (*(unsigned __int8 *)(v34 + 833 + v32++))
        {
          break;
        }
      }
    }

    fclose(v6);
    return 0LL;
  }

  else
  {
    uint64_t v29 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100670C50(v29);
    }
    return 1LL;
  }

uint64_t sub_100357544(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v93 = 0LL;
  int v94 = 0;
  __int16 v91 = 0;
  char v92 = 0;
  uint64_t v105 = 0LL;
  char v106 = 0;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100892ED0);
  }
  *(_DWORD *)__int128 buf = *(_DWORD *)a2;
  *(_WORD *)&uint8_t buf[4] = *(_WORD *)(a2 + 4);
  unsigned int v70 = (unsigned __int16 *)sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
  uint64_t v8 = sub_100353AEC(a1, a2);
  if (!v8)
  {
    uint64_t v13 = qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100670CC8(a2, v13, v14, v15, v16, v17, v18, v19);
    }
    return 8LL;
  }

  uint64_t v9 = v8;
  if (!a4)
  {
LABEL_22:
    uint64_t v23 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
    {
      id v67 = *(id *)(v9 + 8);
      *(_DWORD *)__int128 buf = 138543874;
      *(void *)&uint8_t buf[4] = v67;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&_BYTE buf[14] = a4;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&_BYTE buf[24] = a3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "recvW1AppDiagnosticsHandler: %{public}@ sent invalid APP Diag data : data->%p, len->%d",  buf,  0x1Cu);
    }

    return 3LL;
  }

  if (a3 > 453)
  {
    if (a3 != 454)
    {
      if (a3 == 904)
      {
        int v11 = 0;
        unsigned int v12 = 2;
        int v10 = 1;
        uint64_t v69 = 1LL;
        goto LABEL_19;
      }

      goto LABEL_18;
    }

    uint64_t v69 = 0LL;
    int v11 = 0;
    int v10 = 1;
LABEL_17:
    unsigned int v12 = 1;
    goto LABEL_19;
  }

  if (a3 == 64)
  {
    int v10 = 0;
    int v11 = 0;
    uint64_t v69 = 0x100000000LL;
    goto LABEL_17;
  }

  if (a3 == 128)
  {
    int v10 = 0;
    int v11 = 0;
    unsigned int v12 = 2;
    uint64_t v69 = 0x100000001LL;
    goto LABEL_19;
  }

uint64_t sub_100357DDC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4)
{
  if (!*(_BYTE *)(a1 + 448)) {
    return 111LL;
  }
  int v7 = a4[4];
  int v8 = a4[1];
  int v9 = *a4;
  if (v9 == 1 && v8 == 121 && v7 == 1)
  {
    LOBYTE(dword_1008D94E0) = 2;
    LOBYTE(v19.tm_sec) = 0;
    sub_100242CA4(&v19);
    uint64_t v11 = sub_10007F92C(a2, 4u, 5u, (unsigned __int8 *)&dword_1008D94E0);
    if ((_DWORD)v11 && os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100670DB8();
    }
    goto LABEL_21;
  }

  if (v9 == 2 && v8 == 121 && v7 == 1)
  {
    LOBYTE(v19.tm_sec) = 0;
    sub_100242CA4(&v19);
    uint64_t v11 = sub_10007ED70((uint64_t)a2, 2, 2 * ((5 * *(_WORD *)(a1 + 146)) & 0x7FFFu));
    if ((_DWORD)v11 && os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100670E18();
    }
    goto LABEL_21;
  }

  if (v8 != 85) {
    return 0LL;
  }
  uint64_t v14 = fopen(aPrivateVarMobi_13, "a");
  if (v14)
  {
    uint64_t v15 = v14;
    memset(&v19, 0, sizeof(v19));
    time_t v20 = time(0LL);
    localtime_r(&v20, &v19);
    fprintf( v15,  "%02d/%02d/%02d %02d:%02d:%02d : side = ",  v19.tm_mon + 1,  v19.tm_mday,  v19.tm_year + 1900,  v19.tm_hour,  v19.tm_min,  v19.tm_sec);
    if (v9 == 1)
    {
      uint64_t v16 = "Left, ";
      size_t v17 = 6LL;
    }

    else
    {
      uint64_t v16 = "Right, ";
      size_t v17 = 7LL;
    }

    fwrite(v16, v17, 1uLL, v15);
    fprintf( v15,  "voltage = %dmV, current = %dmA, temperature = %dºC, level = %d%%\n",  __rev16(*((unsigned __int16 *)a4 + 3)),  __rev16(*((unsigned __int16 *)a4 + 4)),  a4[10],  a4[5]);
    fclose(v15);
    if (v9 == 1)
    {
      LOBYTE(v19.tm_sec) = 0;
      sub_100242CA4(&v19);
      uint64_t v11 = sub_10007F92C(a2, 4u, 7u, byte_1008D95AD);
      if ((_DWORD)v11 && os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_100670EF0();
      }
LABEL_21:
      sub_100242CD8(&v19);
      return v11;
    }

    return 0LL;
  }

  uint64_t v18 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_100670E78(v18);
  }
  return 1LL;
}

void sub_100358098( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1003580B4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  int v8 = *a4;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100892ED0);
  }
  *(_DWORD *)__int128 buf = *(_DWORD *)a2;
  LOWORD(v77) = *(_WORD *)(a2 + 4);
  int v9 = (unsigned __int8 *)sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
  uint64_t v10 = sub_100353AEC(a1, a2);
  uint64_t v75 = 0LL;
  if (!*(_BYTE *)(a1 + 448)) {
    return 111LL;
  }
  uint64_t v11 = v10;
  if (v10)
  {
    unsigned int v12 = *(_DWORD *)(v10 + 24) - 8194;
    if (v12 <= 0xE && ((1 << v12) & 0x409B) != 0)
    {
      uint64_t v74 = v10;
      if (qword_1008D60E0 != -1) {
        dispatch_once(&qword_1008D60E0, &stru_100892EF0);
      }
      sub_10021F164((uint64_t)off_1008D60D8, (uint64_t)v9, (int *)&v75 + 1, (int *)&v75);
      int v73 = v75;
      uint64_t v13 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = *(id *)(v74 + 8);
        int v15 = *(_DWORD *)(v74 + 24);
        *(_DWORD *)__int128 buf = 138544386;
        uint64_t v77 = (uint64_t)v14;
        __int16 v78 = 1024;
        *(_DWORD *)char v79 = a3;
        *(_WORD *)&v79[4] = 1024;
        *(_DWORD *)&_BYTE v79[6] = v73 != 3;
        __int16 v80 = 1024;
        int v81 = v15;
        __int16 v82 = 1024;
        int v83 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "recvW1CrashTraceHandler: %{public}@ leuint64_t n = %d, isUTPUp = %d, productId = %d, buddyRspSide = %d",  buf,  0x24u);
      }

      uint64_t v16 = v74;
      if (a3 == 1 && v73 != 3 || a3 == 1 && *(_DWORD *)(v74 + 24) != 8194)
      {
        size_t v17 = (os_log_s *)qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
        {
          id v18 = *(id *)(v74 + 8);
          *(_DWORD *)__int128 buf = 138543362;
          uint64_t v77 = (uint64_t)v18;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Warning: recvW1CrashTraceHandler: Flash in %{public}@ is busy. Retransmit Buddy command",  buf,  0xCu);
        }

        sub_1003597C8(a1, a2);
        return 10LL;
      }

      if (a3 < 2)
      {
        int v31 = 0;
        int v32 = 0;
      }

      else
      {
        uint64_t v30 = a4 + 1;
        int v31 = sub_1003598E0(a1, a2, v8, v30, (unsigned __int16)(a3 - 1));
        int v32 = *v30;
        uint64_t v16 = v74;
      }

      int v36 = *(unsigned __int8 *)(a1 + 416);
      if (v8 == v36)
      {
        if ((a3 == 1 || v32 == 131 || v31 == 1) && *(_DWORD *)(v16 + 24) == 8194)
        {
          int v36 = v8;
          if (v73 != 3)
          {
            *(_DWORD *)(a1 + 41std::istream::~istream(v1, v2 + 8) = 0x10000;
            if (v8 == 1) {
              char v37 = 2;
            }
            else {
              char v37 = 1;
            }
            LOBYTE(dword_1008D94E0) = v37;
            int v38 = *(unsigned __int8 *)(v16 + 40);
            if (v38 == 8)
            {
              uint64_t v41 = (os_log_s *)qword_1008F7568;
              if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
              {
                id v42 = *(id *)(v16 + 8);
                *(_DWORD *)__int128 buf = 138543362;
                uint64_t v77 = (uint64_t)v42;
                _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "recvW1CrashTraceHandler: Send request to %{public}@ for trace log",  buf,  0xCu);
              }

              *(_BYTE *)(a1 + 407) = 0;
            }

            else if (v38 == 7)
            {
              unsigned int v39 = (os_log_s *)qword_1008F7568;
              if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
              {
                id v40 = *(id *)(v16 + 8);
                *(_DWORD *)__int128 buf = 138543362;
                uint64_t v77 = (uint64_t)v40;
                _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "recvW1CrashTraceHandler: Send request to %{public}@ to check crash log existence",  buf,  0xCu);
              }
            }

            id v43 = (os_log_s *)qword_1008F7568;
            if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
            {
              id v44 = *(id *)(v74 + 8);
              *(_DWORD *)__int128 buf = 138543618;
              uint64_t v77 = (uint64_t)v44;
              __int16 v78 = 1024;
              *(_DWORD *)char v79 = dword_1008D94E0;
              _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "recvW1CrashTraceHandler: Send TestEnable command to %{public}@ for the other side, side = %d",  buf,  0x12u);
            }

            buf[0] = 0;
            sub_100242CA4(buf);
            id v45 = (char *)(v9 + 128);
            int v46 = sub_10007F92C(v9 + 128, 4u, 5u, (unsigned __int8 *)&dword_1008D94E0);
            sub_100242CD0(buf);
            dword_1008F0490 = dword_1008D94E0;
            byte_1008F0494 = byte_1008D94E4;
            byte_1008F0499 = 5;
            __int16 v47 = *((_WORD *)v45 + 2);
            *(_DWORD *)(a1 + 409) = *(_DWORD *)v45;
            *(_WORD *)(a1 + 413) = v47;
            *(_BYTE *)(a1 + 415) = 0;
            uint64_t v16 = v74;
            if (v46 && os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
            {
              sub_100670F50();
              uint64_t v16 = v74;
            }

            sub_100242CD8(buf);
            int v36 = *(unsigned __int8 *)(a1 + 416);
          }
        }

        else
        {
          int v36 = v8;
        }
      }

      if (v36 == 1) {
        int v48 = 2;
      }
      else {
        int v48 = 1;
      }
      if (v48 == v8 || *(_DWORD *)(v16 + 24) != 8194 || v73 == 3)
      {
        if (a3 != 1 && v32 != 131 && v31 != 1)
        {
          if (*(_DWORD *)(v16 + 24) != 8194 || *(_BYTE *)(v16 + 40) != 8) {
            return 0LL;
          }
          uint64_t v19 = 0LL;
          if (*(_BYTE *)(a1 + 408) || v32 != 121) {
            return v19;
          }
        }

        id v49 = [*(id *)(a1 + 424) count];
        int v50 = *(unsigned __int8 *)(v74 + 40);
        if ((unint64_t)v49 > *(unsigned __int8 *)(a1 + 432))
        {
          if (v50 == 8)
          {
            uint64_t v51 = *(void *)(a1 + 24);
            unsigned int v52 = (os_log_s *)qword_1008F7568;
            BOOL v53 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
            if (v51)
            {
              if (v53)
              {
                *(_WORD *)__int128 buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "recvW1CrashTraceHandler: TTR or Sysdiagnose - Trace Log Collection Completed",  buf,  2u);
              }

              *(_BYTE *)(v74 + 40) = 5;
              return sub_100354C18(a1, v74);
            }

            if (!v53) {
              goto LABEL_80;
            }
            *(_WORD *)__int128 buf = 0;
            id v54 = "recvW1CrashTraceHandler: Internal Settings - Trace Log Collection Completed";
          }

          else
          {
            unsigned int v52 = (os_log_s *)qword_1008F7568;
            if (!os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_80;
            }
            *(_WORD *)__int128 buf = 0;
            id v54 = "recvW1CrashTraceHandler: Found crash in Audio Accessory device";
          }

          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, v54, buf, 2u);
LABEL_80:
          uint64_t v55 = sub_1002E6BF0();
          if (((*(uint64_t (**)(uint64_t))(*(void *)v55 + 328LL))(v55) & 1) != 0
            || (uint64_t v56 = sub_1002E6BF0(), (*(unsigned int (**)(uint64_t))(*(void *)v56 + 384LL))(v56)))
          {
            uint8_t v57 = (os_log_s *)qword_1008F7568;
            if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "recvW1CrashTraceHandler: Triggering Tap-to-Radar popup",  buf,  2u);
            }

            uint64_t v58 = sub_1002E8E64();
            int v59 = (void *)objc_claimAutoreleasedReturnValue( +[NSOrderedSet orderedSetWithOrderedSet:]( &OBJC_CLASS___NSOrderedSet,  "orderedSetWithOrderedSet:",  *(void *)(a1 + 424)));
            int v60 = *(unsigned __int8 *)(v74 + 40);
            uint64_t v61 = *(unsigned int *)(v74 + 24);
            id v62 = *(id *)v74;
            uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", v62));
            (*(void (**)(uint64_t, void *, BOOL, uint64_t, void *))(*(void *)v58 + 152LL))( v58,  v59,  v60 == 7,  v61,  v63);

            uint64_t v19 = 0LL;
          }

          else
          {
            id v64 = (os_log_s *)qword_1008F7568;
            if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
            {
              id v65 = [*(id *)(a1 + 424) count];
              *(_DWORD *)__int128 buf = 134217984;
              uint64_t v77 = (uint64_t)v65;
              _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "recvW1CrashTraceHandler: Have %ld logs, but cannot trigger non-iOS pop-up",  buf,  0xCu);
            }

            uint64_t v19 = 2LL;
          }

          sub_10035A15C(v74);
          uint64_t v66 = *(void *)(a1 + 40);
          uint64_t v67 = *(void *)(a1 + 48);
          if (v66 == v67) {
            goto LABEL_97;
          }
          int v68 = 0;
          do
          {
            unsigned int v69 = *(unsigned __int8 *)(*(void *)v66 + 40LL);
            BOOL v70 = v69 > 8;
            int v71 = (1 << v69) & 0x182;
            if (!v70 && v71 != 0) {
              ++v68;
            }
            v66 += 8LL;
          }

          while (v66 != v67);
          if (!v68) {
LABEL_97:
          }
            sub_100352F5C(a1);
          sub_100354764(a1);
          return v19;
        }

        if (v50 != 8)
        {
          uint64_t v19 = 0LL;
          *(_BYTE *)(v74 + 40) = 0;
          return v19;
        }
      }

      return 0LL;
    }

    uint64_t v33 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      id v34 = *(id *)(v11 + 8);
      int v35 = *(_DWORD *)(v11 + 24);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v77 = (uint64_t)v34;
      __int16 v78 = 1024;
      *(_DWORD *)char v79 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "recvW1CrashTraceHandler: %{public}@ productId = %d unsupported for legacy crash trace handling",  buf,  0x12u);
    }

    return 2LL;
  }

  else
  {
    time_t v20 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = sub_1001EDE10(a2, v21, v22, v23, v24, v25, v26, v27);
      *(_DWORD *)__int128 buf = 141558275;
      uint64_t v77 = 1752392040LL;
      __int16 v78 = 2081;
      *(void *)char v79 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "recvW1CrashTraceHandler: Invalid address %{private, mask.hash}s",  buf,  0x16u);
    }

    return 8LL;
  }

void sub_100358A10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100358A48(uint64_t a1, unsigned int *a2, unsigned int a3, unsigned __int8 *a4)
{
  uint64_t v8 = sub_100353AEC(a1, (uint64_t)a2);
  if (!a3 || !a4)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_10067123C();
    }
    return 3LL;
  }

  uint64_t v9 = v8;
  if (v8)
  {
    uint64_t v10 = *(void **)(v8 + 32);
    if (!v10)
    {
LABEL_9:
      int v11 = *a4;
      switch(*a4)
      {
        case 0xFCu:
          if (a3 < 2)
          {
            if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
              sub_100671210();
            }
            return 3LL;
          }

          if (a4[1] != 1)
          {
            if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
              sub_1006711AC();
            }
            return 3LL;
          }

          char v66 = 0;
          uint64_t v15 = sub_1002E6E00();
          sub_10002418C(&buf, "AccessoryLogging");
          sub_10002418C(v68, "AccessoryLogDWRPopupKey");
          (*(void (**)(uint64_t, tm *, _BYTE *, char *))(*(void *)v15 + 72LL))(v15, &buf, v68, &v66);
          if (v69 < 0) {
            operator delete(*(void **)v68);
          }
          if (SHIBYTE(buf.tm_year) < 0) {
            operator delete(*(void **)&buf.tm_sec);
          }
          if (v66)
          {
            uint64_t v16 = (os_log_s *)qword_1008F7568;
            if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(buf.tm_sec) = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "recvLogHandler: Skipping DWR popup",  (uint8_t *)&buf,  2u);
            }

            uint64_t result = 17LL;
          }

          else
          {
            uint64_t result = sub_10035B0D8(a1, a2, 5LL);
          }

          break;
        case 0xFDu:
          uint64_t result = sub_10035AE44(a1, (uint64_t)a2);
          break;
        case 0xFEu:
          uint64_t result = sub_10035AC58(a1, (uint64_t)a2, a3, (uint64_t)a4);
          break;
        case 0xFFu:
          uint64_t result = sub_10035A988(a1, (uint64_t)a2);
          break;
        default:
          if (v11 != 6) {
            goto LABEL_29;
          }
          uint64_t result = sub_10035A284(a1, (uint64_t)a2, a3, (uint64_t)a4);
          break;
      }

      return result;
    }

    int v11 = *a4;
    if (v11 != 4)
    {
      unsigned int v12 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = *(id *)(v9 + 8);
        buf.tm_sec = 138543362;
        *(void *)&buf.tm_miuint64_t n = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "recvLogHandler: Stopping inactivity timer for %{public}@",  (uint8_t *)&buf,  0xCu);

        uint64_t v10 = *(void **)(v9 + 32);
      }

      [v10 invalidate];
      id v14 = *(void **)(v9 + 32);
      *(void *)(v9 + sub_100242FAC(v1 - 32) = 0LL;

      goto LABEL_9;
    }

void sub_100359368( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003593C0(int a1, FILE *a2, uint64_t a3)
{
  return fprintf( a2,  "  SCP Ver.......... %d.%d.%d.%d.%d.%d\n",  *(unsigned __int8 *)(a3 + 57),  *(unsigned __int8 *)(a3 + 58),  *(unsigned __int8 *)(a3 + 59),  *(unsigned __int8 *)(a3 + 60),  *(unsigned __int8 *)(a3 + 61),  *(unsigned __int8 *)(a3 + 62));
}

__n128 sub_1003595F0(int a1, char *a2, uint64_t a3)
{
  uint64_t v5 = a2 + 307;
  bzero(a2, 0x29AuLL);
  *(_WORD *)(a2 + 5) = *(_WORD *)a3;
  *(_WORD *)(a2 + 7) = *(_WORD *)(a3 + 2);
  *(_WORD *)(a2 + 9) = *(_WORD *)(a3 + 4);
  *(_DWORD *)(a2 + 11) = *(_DWORD *)(a3 + 6);
  *(_DWORD *)(a2 + 15) = *(_DWORD *)(a3 + 10);
  *(_DWORD *)(a2 + 19) = *(_DWORD *)(a3 + 14);
  *(_DWORD *)(a2 + 23) = *(_DWORD *)(a3 + 18);
  *(_DWORD *)(a2 + 27) = *(_DWORD *)(a3 + 22);
  *(_DWORD *)(a2 + memset(v107, 0, 31) = *(_DWORD *)(a3 + 26);
  *(_DWORD *)(a2 + 35) = *(_DWORD *)(a3 + 30);
  *(_DWORD *)(a2 + 39) = *(_DWORD *)(a3 + 34);
  *(_DWORD *)(a2 + 43) = *(_DWORD *)(a3 + 38);
  *(_DWORD *)(a2 + 47) = *(_DWORD *)(a3 + 42);
  __int128 v6 = *(_OWORD *)(a3 + 46);
  __int128 v7 = *(_OWORD *)(a3 + 62);
  __int128 v8 = *(_OWORD *)(a3 + 78);
  *(_OWORD *)(a2 + 99) = *(_OWORD *)(a3 + 94);
  *(_OWORD *)(a2 + 83) = v8;
  *(_OWORD *)(a2 + 67) = v7;
  *(_OWORD *)(a2 + 51) = v6;
  __int128 v9 = *(_OWORD *)(a3 + 110);
  __int128 v10 = *(_OWORD *)(a3 + 126);
  __int128 v11 = *(_OWORD *)(a3 + 142);
  *(_OWORD *)(a2 + 163) = *(_OWORD *)(a3 + 158);
  *(_OWORD *)(a2 + 147) = v11;
  *(_OWORD *)(a2 + 1memset(v107, 0, 31) = v10;
  *(_OWORD *)(a2 + 115) = v9;
  __int128 v12 = *(_OWORD *)(a3 + 174);
  __int128 v13 = *(_OWORD *)(a3 + 190);
  __int128 v14 = *(_OWORD *)(a3 + 206);
  *(_OWORD *)(a2 + 227) = *(_OWORD *)(a3 + 222);
  *(_OWORD *)(a2 + 211) = v14;
  *(_OWORD *)(a2 + 195) = v13;
  *(_OWORD *)(a2 + 179) = v12;
  __int128 v15 = *(_OWORD *)(a3 + 238);
  __int128 v16 = *(_OWORD *)(a3 + 254);
  __int128 v17 = *(_OWORD *)(a3 + 286);
  *(_OWORD *)(a2 + 275) = *(_OWORD *)(a3 + 270);
  *(_OWORD *)(a2 + 291) = v17;
  *(_OWORD *)(a2 + 259) = v16;
  *(_OWORD *)(a2 + 243) = v15;
  *(void *)uint64_t v5 = *(void *)(a3 + 302);
  uint64_t v18 = *(void *)(a3 + 310);
  *(_DWORD *)(a2 + 323) = *(_DWORD *)(a3 + 318);
  *(void *)(a2 + 315) = v18;
  uint64_t v19 = *(void *)(a3 + 322);
  *(_DWORD *)(a2 + 335) = *(_DWORD *)(a3 + 330);
  *(void *)(a2 + 327) = v19;
  __int128 v20 = *(_OWORD *)(a3 + 334);
  *(_DWORD *)(a2 + 357) = *(_DWORD *)(a3 + 350);
  *(_OWORD *)(a2 + 341) = v20;
  __n128 result = *(__n128 *)(a3 + 354);
  *(_OWORD *)(a2 + 373) = *(_OWORD *)(a3 + 366);
  *(__n128 *)(a2 + 361) = result;
  *((_WORD *)v5 + 16) = *(_WORD *)(a3 + 382);
  *((_WORD *)v5 + 41) = *(_WORD *)(a3 + 384);
  return result;
}

tm *sub_10035978C(uint64_t a1, tm *a2)
{
  time_t v4 = time(0LL);
  return localtime_r(&v4, a2);
}

void sub_1003597C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100353AEC(a1, a2);
  if (*(_BYTE *)(a1 + 448))
  {
    uint64_t v5 = v4;
    if (v4)
    {
      if (*(unsigned __int8 *)(a1 + 415) < 5u)
      {
        uint64_t v20 = sub_100404EB8();
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472LL;
        void v21[2] = sub_10035FE00;
        void v21[3] = &unk_10087EB20;
        void v21[4] = a1;
        sub_100405460(v20, 10000LL, v21);
      }

      else
      {
        uint64_t v6 = qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
          sub_1006712FC(a1, v6, v7, v8, v9, v10, v11, v12);
        }
        *(_BYTE *)(v5 + 40) = 0;
      }
    }

    else
    {
      uint64_t v13 = qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_100671294(a2, v13, v14, v15, v16, v17, v18, v19);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
  {
    sub_100671268();
  }

uint64_t sub_1003598E0(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4, unsigned int a5)
{
  int v10 = *a4;
  int v11 = a4[3];
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100892ED0);
  }
  memset(&v48, 0, sizeof(v48));
  LODWORD(v43[0]) = *(_DWORD *)a2;
  WORD2(v43[0]) = *(_WORD *)(a2 + 4);
  uint64_t v12 = sub_1003FFEB0(off_1008D5F48, (uint64_t)v43, 1);
  uint64_t v13 = sub_100353AEC(a1, a2);
  if (v12) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    uint64_t v23 = v13;
    if (v10 == 133)
    {
      if (*(_BYTE *)(a1 + 407) && *(_BYTE *)(v13 + 40) == 8 && *(unsigned __int8 *)(a1 + 416) != a3)
      {
        uint64_t result = 0LL;
        *(_BYTE *)(a1 + 40std::istream::~istream(v1, v2 + 8) = 1;
        return result;
      }

      goto LABEL_15;
    }

    if (v10 == 129)
    {
      int v24 = 1;
LABEL_18:
      v43[0] = time(0LL);
      localtime_r(v43, &v48);
      tm v47 = v48;
      sub_1003603CC(a1, (uint64_t)&unk_1008F049A, a2, 1);
      tm v46 = v48;
      sub_1003603CC(a1, (uint64_t)&unk_1008F059A, a2, 2);
      if (*(_BYTE *)(v23 + 40) == 7)
      {
        tm v45 = v48;
        sub_1003603CC(a1, (uint64_t)&unk_1008F069A, a2, 3);
      }

      if (*(_DWORD *)(v23 + 24) == 8201)
      {
        tm v44 = v48;
        sub_1003603CC(a1, (uint64_t)&unk_1008F079A, a2, 8);
      }

      if (v11 == 1) {
        char v25 = v24;
      }
      else {
        char v25 = 0;
      }
      if (v10 == 133 || (v25 & 1) != 0)
      {
        if (v10 == 133)
        {
          sleep(5u);
          goto LABEL_42;
        }
      }

      else
      {
        uint64_t result = 1LL;
        if (v10 != 121 || v11 != 1 || *(_BYTE *)(a1 + 407) || *(_BYTE *)(v23 + 40) != 8) {
          return result;
        }
      }

      if (v24)
      {
        v43[0] = 0LL;
        v43[1] = 0LL;
        sub_10040CB88((uint64_t)v43, 0, (uint64_t)v12);
        uint64_t v26 = sub_1002E8D94();
        (*(void (**)(uint64_t, time_t *))(*(void *)v26 + 56LL))(v26, v43);
      }

LABEL_118:
            int v28 = v39;
            goto LABEL_43;
          }
        }

        else
        {
          unsigned int v39 = 9;
        }

id sub_10035A15C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + sub_100242FAC(v1 - 32) = 0LL;

  *(_BYTE *)(a1 + 40) = 0;
  uint64_t v3 = *(void **)(a1 + 48);
  *(void *)(a1 + 4std::istream::~istream(v1, v2 + 8) = 0LL;

  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  uint64_t v4 = *(FILE **)(a1 + 64);
  if (v4) {
    fclose(v4);
  }
  *(void *)(a1 + 64) = 0LL;
  *(_WORD *)(a1 + 72) = -256;
  *(_BYTE *)(a1 + 74) = -1;
  [*(id *)(a1 + 80) removeAllObjects];
  uint64_t v5 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = 0LL;

  [*(id *)(a1 + 104) removeAllObjects];
  unsigned int v6 = *(_DWORD *)(a1 + 24) - 8194;
  if (v6 > 0xE || ((1 << v6) & 0x409B) == 0)
  {
    uint64_t v8 = *(void **)(a1 + 80);
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100892EF0);
    }
    id v9 = sub_100222170((uint64_t)off_1008D60D8, a1 + 16);
    int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    [v8 addObject:v10];
  }

  id result = [*(id *)(a1 + 80) count];
  *(_BYTE *)(a1 + 8std::istream::~istream(v1, v2 + 8) = (_BYTE)result;
  return result;
}

void sub_10035A274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10035A284(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)&qword_1008F0488);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1008F0488))
  {
    qword_1008F0480 = objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSince1970:",  315572400.0));
    __cxa_guard_release(&qword_1008F0488);
  }

  uint64_t v8 = sub_100353AEC(a1, a2);
  int v62 = *(_DWORD *)a2;
  __int16 v63 = *(_WORD *)(a2 + 4);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100892ED0);
  }
  id v9 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v62, 0);
  char v61 = 0;
  uint64_t v10 = sub_1002E6E00();
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(__p, "AccessoryLogCrashPopupKey");
  (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v10 + 72LL))(v10, buf, __p, &v61);
  if (v60 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v67) < 0) {
    operator delete(*(void **)buf);
  }
  sub_1003D0100((uint64_t)v9, (uint64_t)buf);
  if (v67 >= 0) {
    int v11 = buf;
  }
  else {
    int v11 = *(_BYTE **)buf;
  }
  int v57 = *(_DWORD *)a2;
  __int16 v58 = *(_WORD *)(a2 + 4);
  sub_1003FE1B4((unsigned __int8 *)&v57, __p);
  if (v60 >= 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v12));
  BOOL v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Accessory %s %@ crashed before this connection, it might appear as a timeout or remote terminated connection",  v11,  v13));

  if (v60 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v67) < 0) {
    operator delete(*(void **)buf);
  }
  id v15 = v14;
  sub_1000BAAF0((const char *)[v15 UTF8String]);
  if (v8)
  {
    if (*(_BYTE *)(a1 + 32) || (unsigned int v16 = *(unsigned __int8 *)(v8 + 40), v16 <= 8) && ((1 << v16) & 0x182) != 0)
    {
      uint64_t v17 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
      {
        id v18 = *(id *)(v8 + 8);
        int v19 = *(unsigned __int8 *)(a1 + 32);
        int v20 = *(unsigned __int8 *)(v8 + 40);
        *(_DWORD *)tm buf = 138543874;
        *(void *)&uint8_t buf[4] = v18;
        *(_WORD *)&_BYTE buf[12] = 1024;
        int v65 = v19;
        __int16 v66 = 1024;
        int v67 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Warning: recvCrashAvailableHandler: Refusing crash log available from %{public}@ (busy %d) (status %d)",  buf,  0x18u);
      }

      uint64_t v21 = 10LL;
      goto LABEL_28;
    }

    uint64_t v31 = sub_1002E6E00();
    int v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
    if (v61) {
      int v33 = 0;
    }
    else {
      int v33 = v32;
    }
    if (v33 != 1 || !sub_1003D94C4((uint64_t)v9) && (sub_100353DF8() & 1) == 0)
    {
      id v40 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v41 = sub_1002E6E00();
        int v42 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 8LL))(v41);
        else {
          int v43 = sub_100353DF8();
        }
        *(_DWORD *)tm buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v42;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v43;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "recvCrashAvailableHandler: Dismissing; internal build %d, AACP stored logging possible %d",
          buf,
          0xEu);
      }

      goto LABEL_56;
    }

    uint64_t v34 = sub_1002E6BF0();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v34 + 328LL))(v34) & 1) == 0)
    {
      uint64_t v35 = sub_1002E6BF0();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v35 + 384LL))(v35) & 1) == 0)
      {
        uint64_t v36 = sub_1002E6BF0();
        if (((*(uint64_t (**)(uint64_t))(*(void *)v36 + 424LL))(v36) & 1) == 0)
        {
          uint64_t v55 = (os_log_s *)qword_1008F7568;
          if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)tm buf = 0;
            uint64_t v21 = 2LL;
            _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "recvCrashAvailableHandler: Ignoring available crash (unsupported platform)",  buf,  2u);
          }

          else
          {
            uint64_t v21 = 2LL;
          }

          goto LABEL_28;
        }
      }
    }

    [(id)qword_1008F0480 timeIntervalSinceNow];
    double v38 = v37;
    if (v37 < 0.0 && v37 > -60.0)
    {
      unsigned int v39 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)tm buf = 134217984;
        *(double *)&uint8_t buf[4] = -v38;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "recvCrashAvailableHandler: Suppressing crash notification (%f seconds elapsed)",  buf,  0xCu);
      }

void sub_10035A8E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
}

uint64_t sub_10035A988(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100353AEC(a1, a2);
  if (v4)
  {
    uint64_t v5 = v4;
    unsigned int v6 = *(unsigned __int8 *)(v4 + 40);
    BOOL v7 = v6 > 8;
    int v8 = (1 << v6) & 0x182;
    if (v7 || v8 == 0)
    {
      uint64_t v24 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = *(void **)(v5 + 8);
        int v26 = *(unsigned __int8 *)(v5 + 40);
        int v32 = 138543618;
        id v33 = v25;
        __int16 v34 = 1024;
        LODWORD(v35) = v26;
        id v27 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Warning: recvLogCompleteHandler: Refusing log complete from %{public}@ (status %d)",  (uint8_t *)&v32,  0x12u);
      }

      return 6LL;
    }

    else
    {
      if (*(void *)(v4 + 64))
      {
        uint64_t v10 = (os_log_s *)qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = *(void **)(v5 + 48);
          int v32 = 138412290;
          id v33 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Warning: recvLogCompleteHandler: Received log complete while %@ still open; still sending possibly corrupted file",
            (uint8_t *)&v32,
            0xCu);
        }

        *(_BYTE *)(v5 + 56) = 1;
        sub_10035C04C(v5);
        uint64_t v12 = 1LL;
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      id v20 = [*(id *)(v5 + 80) count];
      uint64_t v21 = (os_log_s *)qword_1008F7568;
      if ((unint64_t)v20 <= *(unsigned __int8 *)(v5 + 88))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
        {
          uint64_t v29 = *(void **)(v5 + 8);
          int v30 = *(unsigned __int8 *)(v5 + 40);
          int v32 = 138543618;
          id v33 = v29;
          __int16 v34 = 1024;
          LODWORD(v35) = v30;
          id v31 = v29;
          _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "recvLogCompleteHandler: %{public}@ reports no log file to send (status %d)",  (uint8_t *)&v32,  0x12u);

          uint64_t v21 = (os_log_s *)qword_1008F7568;
        }

        uint64_t v12 = 12LL;
      }

      *(_BYTE *)(v5 + 40) = 5;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        id v22 = *(id *)(v5 + 8);
        id v23 = [*(id *)(v5 + 80) count];
        int v32 = 138543618;
        id v33 = v22;
        __int16 v34 = 2048;
        id v35 = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "recvLogCompleteHandler: %{public}@ session complete, file count %lu",  (uint8_t *)&v32,  0x16u);
      }

      sub_100354C18(a1, v5);
    }
  }

  else
  {
    uint64_t v13 = qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_1006714C8(a2, v13, v14, v15, v16, v17, v18, v19);
    }
    return 8LL;
  }

  return v12;
}

void sub_10035AC40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10035AC58(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = sub_100353AEC(a1, a2);
  if (v8)
  {
    uint64_t v9 = v8;
    if (!*(_BYTE *)(a1 + 32)
      && ((unsigned int v10 = *(unsigned __int8 *)(v8 + 40), v11 = v10 >= 8, v13 = v10 == 8, v12 = (1 << v10) & 0x182, v13 || !v11)
        ? (BOOL v13 = v12 == 0)
        : (BOOL v13 = 1),
          v13))
    {
      id v26 = sub_10035C258(v8, a3, a4);
      uint64_t v27 = objc_claimAutoreleasedReturnValue(v26);
      uint64_t v28 = *(void **)(v9 + 96);
      *(void *)(v9 + 96) = v27;

      uint64_t v29 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
      {
        id v30 = *(id *)(v9 + 8);
        int v31 = 138543362;
        id v32 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "recvLogForceSendHandler: Device %{public}@ initiating forced logging session",  (uint8_t *)&v31,  0xCu);
      }

      *(_BYTE *)(a1 + 33) = 1;
      sub_1003549DC(a1, v9);
      return 0LL;
    }

    else
    {
      uint64_t v14 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = *(id *)(v9 + 8);
        int v16 = *(unsigned __int8 *)(a1 + 32);
        int v17 = *(unsigned __int8 *)(v9 + 40);
        int v31 = 138543874;
        id v32 = v15;
        __int16 v33 = 1024;
        int v34 = v16;
        __int16 v35 = 1024;
        int v36 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Warning: recvLogForceSendHandler: Refusing log force send from %{public}@ (busy %d) (status %d)",  (uint8_t *)&v31,  0x18u);
      }

      return 2LL;
    }
  }

  else
  {
    uint64_t v19 = qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100671530(a2, v19, v20, v21, v22, v23, v24, v25);
    }
    return 8LL;
  }

uint64_t sub_10035AE44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100353AEC(a1, a2);
  uint64_t v4 = sub_1002E6E00();
  uint64_t v5 = sub_1002E6BF0();
  uint64_t v6 = sub_1002E6BF0();
  if (*(_BYTE *)(a1 + 32) || (unsigned int v7 = *(unsigned __int8 *)(v3 + 40), v7 <= 8) && ((1 << v7) & 0x182) != 0)
  {
    uint64_t v8 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = *(id *)(v3 + 8);
      int v10 = *(unsigned __int8 *)(a1 + 32);
      int v11 = *(unsigned __int8 *)(v3 + 40);
      *(_DWORD *)tm buf = 138543874;
      *(void *)&uint8_t buf[4] = v9;
      __int16 v22 = 1024;
      int v23 = v10;
      __int16 v24 = 1024;
      int v25 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Warning: recvStoredLogAvailableHandler: Refusing stored log available from %{public}@ (busy %d) (status %d)",  buf,  0x18u);
    }

    return 10LL;
  }

  else
  {
    char v20 = 0;
    uint64_t v13 = sub_1002E6E00();
    sub_10002418C(buf, "AccessoryLogging");
    sub_10002418C(__p, "SuppressAllPopups");
    int v14 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v13 + 72LL))(v13, buf, __p, &v20);
    if (v20) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v25) < 0) {
      operator delete(*(void **)buf);
    }
    if (v15)
    {
      uint64_t v16 = sub_1002E6E00();
      sub_10002418C(buf, "AccessoryLogging");
      sub_10002418C(__p, "StoredLogAvailable");
      (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(void *)v16 + 80LL))(v16, buf, __p, 1LL);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(*(void **)buf);
      }
    }

    else
    {
      uint64_t v17 = sub_1002E8E64();
      (*(void (**)(uint64_t, void, uint64_t, void))(*(void *)v17 + 168LL))( v17,  0LL,  3LL,  *(unsigned int *)(v3 + 24));
    }

    return 0LL;
  }

void sub_10035B094( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10035B0D8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5 = sub_100353AEC(a1, (uint64_t)a2);
  int v20 = *a2;
  __int16 v21 = *((_WORD *)a2 + 2);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100892ED0);
  }
  uint64_t v6 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v20, 0);
  uint64_t v7 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 328LL))(v7) & 1) != 0)
  {
    if (sub_1003D94C4((uint64_t)v6) || (sub_100353DF8() & 1) != 0)
    {
      if (v5)
      {
        uint64_t v8 = sub_1002E8E64();
        (*(void (**)(uint64_t, unint64_t, uint64_t, void))(*(void *)v8 + 160LL))( v8,  *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32),  a3,  *(unsigned int *)(v5 + 24));
        return 0LL;
      }

      else
      {
        uint64_t v11 = qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
          sub_100671598((uint64_t)a2, v11, v12, v13, v14, v15, v16, v17);
        }
        return 8LL;
      }
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_100671600();
      }
      return 11LL;
    }
  }

  else
  {
    int v10 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v19 = 0;
      uint64_t v9 = 2LL;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Warning: recvFileRadarRequestHandler: Only supported on iOS",  v19,  2u);
    }

    else
    {
      return 2LL;
    }
  }

  return v9;
}

uint64_t sub_10035B270(uint64_t a1, uint64_t a2, unsigned int a3, _BYTE *a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100892ED0);
  }
  *(_DWORD *)tm buf = *(_DWORD *)a2;
  LOWORD(v59) = *(_WORD *)(a2 + 4);
  uint64_t v7 = (unsigned __int16 *)sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
  unsigned __int16 v8 = a3 - 4;
  if (a3 <= 4)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_10067162C();
    }
    return 3LL;
  }

  uint64_t v9 = a4[3] & 0x3F;
  if (v9 >= 0x20)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_10067168C();
    }
    return 2LL;
  }

  uint64_t v11 = a4[5];
  if ((v11 - 1) > 0xA)
  {
    int v12 = 0;
LABEL_21:
    int v20 = (os_log_s *)qword_1008F7568;
    BOOL v21 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR);
    if (v21)
    {
      __int16 v22 = sub_10035C464(v21, v9);
      *(_DWORD *)tm buf = 67110146;
      int v59 = v9;
      __int16 v60 = 2080;
      char v61 = v22;
      __int16 v62 = 1024;
      *(_DWORD *)__int16 v63 = v11;
      *(_WORD *)&v63[4] = 1024;
      *(_DWORD *)&v63[6] = v12;
      __int16 v64 = 1024;
      int v65 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "recvAwdHandler: Unexpected AWD data length for awdDataType: %u (%s), awdVersion %u: expected len %u actual %u",  buf,  0x24u);
    }

    return 3LL;
  }

  int v12 = *(unsigned __int16 *)&algn_1006C1E75[64 * v11 + 1 + 2 * v9];
  if (v12 != v8) {
    goto LABEL_21;
  }
  uint64_t v13 = (uint64_t)v7;
  int v14 = v7[493];
  uint64_t v15 = (os_log_s *)qword_1008F7568;
  BOOL v16 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
  if (v16)
  {
    uint64_t v17 = sub_10035C464(v16, v9);
    *(_DWORD *)tm buf = 67109634;
    int v59 = v9;
    __int16 v60 = 2080;
    char v61 = v17;
    __int16 v62 = 1024;
    *(_DWORD *)__int16 v63 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "recvAwdHandler: awdDataType = %u (%s), awdVersiouint64_t n = %u",  buf,  0x18u);
  }

  uint64_t result = 0LL;
  uint64_t v18 = a4 + 4;
  switch((int)v9)
  {
    case 0:
      if (v8 <= 0x299u) {
        size_t v19 = 666LL - v8;
      }
      else {
        size_t v19 = 0LL;
      }
      bzero(&buf[v8], v19);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      sub_10040CB88((uint64_t)&v55, 5, v13);
      int v57 = buf;
      if (v14) {
        v68 |= v14;
      }
      goto LABEL_61;
    case 1:
      if (v8 <= 0x312u) {
        size_t v23 = 787LL - v8;
      }
      else {
        size_t v23 = 0LL;
      }
      bzero(&buf[v8], v23);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v24 = 6;
      goto LABEL_60;
    case 2:
      if (v8 <= 0x9Fu) {
        size_t v25 = 160LL - v8;
      }
      else {
        size_t v25 = 0LL;
      }
      bzero(&buf[v8], v25);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      sub_10040CB88((uint64_t)&v55, 7, v13);
      int v57 = buf;
      if (v14) {
        v67 |= v14;
      }
      goto LABEL_61;
    case 3:
      if (v8 <= 0x3Eu) {
        size_t v26 = 63LL - v8;
      }
      else {
        size_t v26 = 0LL;
      }
      bzero(&buf[v8], v26);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      sub_10040CB88((uint64_t)&v55, 8, v13);
      int v57 = buf;
      if (v14) {
        v66 |= v14;
      }
      goto LABEL_61;
    case 4:
      if (v8 <= 0x36u) {
        size_t v27 = 55LL - v8;
      }
      else {
        size_t v27 = 0LL;
      }
      bzero(&buf[v8], v27);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v24 = 9;
      goto LABEL_60;
    case 5:
      if (v8 <= 0x161u) {
        size_t v28 = 354LL - v8;
      }
      else {
        size_t v28 = 0LL;
      }
      bzero(&buf[v8], v28);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      sub_10040CB88((uint64_t)&v55, 10, v13);
      int v57 = buf;
      if (v14) {
        *(_DWORD *)&v63[3] |= v14;
      }
      goto LABEL_61;
    case 6:
      if (v8 <= 0xB8u) {
        size_t v29 = 185LL - v8;
      }
      else {
        size_t v29 = 0LL;
      }
      bzero(&buf[v8], v29);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      sub_10040CB88((uint64_t)&v55, 11, v13);
      int v57 = buf;
      if (v14) {
        *(_DWORD *)v63 |= v14;
      }
      goto LABEL_61;
    case 7:
      if (v8 <= 0xB0u) {
        size_t v30 = 177LL - v8;
      }
      else {
        size_t v30 = 0LL;
      }
      bzero(&buf[v8], v30);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v24 = 12;
      goto LABEL_60;
    case 8:
      if (v8 <= 0xF9u) {
        size_t v31 = 250LL - v8;
      }
      else {
        size_t v31 = 0LL;
      }
      bzero(&buf[v8], v31);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v24 = 13;
LABEL_60:
      sub_10040CB88((uint64_t)&v55, v24, v13);
      int v57 = buf;
LABEL_61:
      uint64_t v32 = sub_1002E8D94();
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v32 + 56LL))(v32, &v55);
      goto LABEL_144;
    case 9:
      if (v8 <= 0x3ADu) {
        size_t v33 = 942LL - v8;
      }
      else {
        size_t v33 = 0LL;
      }
      bzero(&buf[v8], v33);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 14;
      goto LABEL_143;
    case 10:
      if (v8 <= 0x224u) {
        size_t v35 = 549LL - v8;
      }
      else {
        size_t v35 = 0LL;
      }
      bzero(&buf[v8], v35);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 15;
      goto LABEL_143;
    case 11:
      if (v8 <= 0x5Du) {
        size_t v36 = 94LL - v8;
      }
      else {
        size_t v36 = 0LL;
      }
      bzero(&buf[v8], v36);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 16;
      goto LABEL_143;
    case 13:
      if (v8 <= 0x6Fu) {
        size_t v37 = 112LL - v8;
      }
      else {
        size_t v37 = 0LL;
      }
      bzero(&buf[v8], v37);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 18;
      goto LABEL_143;
    case 14:
      if (v8 <= 0x8Au) {
        size_t v38 = 139LL - v8;
      }
      else {
        size_t v38 = 0LL;
      }
      bzero(&buf[v8], v38);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 19;
      goto LABEL_143;
    case 15:
      if (v8 <= 0x3Bu) {
        size_t v39 = 60LL - v8;
      }
      else {
        size_t v39 = 0LL;
      }
      bzero(&buf[v8], v39);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 20;
      goto LABEL_143;
    case 16:
      if (v8 <= 0x2Du) {
        size_t v40 = 46LL - v8;
      }
      else {
        size_t v40 = 0LL;
      }
      bzero(&buf[v8], v40);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 21;
      goto LABEL_143;
    case 17:
      if (v8 <= 0x21Eu) {
        size_t v41 = 543LL - v8;
      }
      else {
        size_t v41 = 0LL;
      }
      bzero(&buf[v8], v41);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      sub_10040CB88((uint64_t)&v55, 22, v13);
      int v57 = buf;
      if (v14) {
        *(_DWORD *)&v63[3] |= v14;
      }
      goto LABEL_144;
    case 18:
      if (v8 <= 0x2A8u) {
        size_t v42 = 681LL - v8;
      }
      else {
        size_t v42 = 0LL;
      }
      bzero(&buf[v8], v42);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 23;
      goto LABEL_143;
    case 19:
      if (v8 <= 0x2Du) {
        size_t v43 = 46LL - v8;
      }
      else {
        size_t v43 = 0LL;
      }
      bzero(&buf[v8], v43);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 24;
      goto LABEL_143;
    case 20:
      if (v8 <= 0x3Au) {
        size_t v44 = 59LL - v8;
      }
      else {
        size_t v44 = 0LL;
      }
      bzero(&buf[v8], v44);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 25;
      goto LABEL_143;
    case 23:
      if (v8 <= 0x351u) {
        size_t v45 = 850LL - v8;
      }
      else {
        size_t v45 = 0LL;
      }
      bzero(&buf[v8], v45);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 28;
      goto LABEL_143;
    case 24:
      if (v8 <= 0x31u) {
        size_t v46 = 50LL - v8;
      }
      else {
        size_t v46 = 0LL;
      }
      bzero(&buf[v8], v46);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 29;
      goto LABEL_143;
    case 25:
      if (v8 <= 0x28u) {
        size_t v47 = 41LL - v8;
      }
      else {
        size_t v47 = 0LL;
      }
      bzero(&buf[v8], v47);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 30;
      goto LABEL_143;
    case 26:
      if (v8 <= 0x2DCu) {
        size_t v48 = 733LL - v8;
      }
      else {
        size_t v48 = 0LL;
      }
      bzero(&buf[v8], v48);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 31;
      goto LABEL_143;
    case 27:
      if (v8 <= 0x79u) {
        size_t v49 = 122LL - v8;
      }
      else {
        size_t v49 = 0LL;
      }
      bzero(&buf[v8], v49);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 32;
      goto LABEL_143;
    case 28:
      if (v8 <= 0x68u) {
        size_t v50 = 105LL - v8;
      }
      else {
        size_t v50 = 0LL;
      }
      bzero(&buf[v8], v50);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 33;
      goto LABEL_143;
    case 29:
      if (v8 <= 0x65u) {
        size_t v51 = 102LL - v8;
      }
      else {
        size_t v51 = 0LL;
      }
      bzero(&buf[v8], v51);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 34;
      goto LABEL_143;
    case 30:
      if (v8 <= 0x68u) {
        size_t v52 = 105LL - v8;
      }
      else {
        size_t v52 = 0LL;
      }
      bzero(&buf[v8], v52);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 35;
      goto LABEL_143;
    case 31:
      if (v8 <= 0x3Eu) {
        size_t v53 = 63LL - v8;
      }
      else {
        size_t v53 = 0LL;
      }
      bzero(&buf[v8], v53);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      int v57 = 0LL;
      int v34 = 36;
LABEL_143:
      sub_10040CB88((uint64_t)&v55, v34, v13);
      int v57 = buf;
LABEL_144:
      uint64_t v54 = sub_1002E8D94();
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v54 + 48LL))(v54, &v55);
      uint64_t result = 0LL;
      break;
    default:
      return result;
  }

  return result;
}

const char *sub_10035BE80(uint64_t a1, int a2)
{
  char v2 = a2 - 1;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_1006716EC();
  }
  return "UnknownType";
}

const char *sub_10035BEFC(uint64_t a1, int a2)
{
  if (a2 == 255) {
    return "All";
  }
  uint64_t result = "Single";
  switch(a2 & 0x7F)
  {
    case 0:
      return result;
    case 1:
      int v3 = (char)a2;
      uint64_t v4 = "LeftPrimary";
      uint64_t v5 = "LeftSecondary";
      goto LABEL_6;
    case 2:
      int v3 = (char)a2;
      uint64_t v4 = "RightPrimary";
      uint64_t v5 = "RightSecondary";
LABEL_6:
      if (v3 < 0) {
        uint64_t result = v4;
      }
      else {
        uint64_t result = v5;
      }
      break;
    case 4:
      uint64_t result = "Case";
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_10067174C();
      }
      uint64_t result = "UnknownDevice";
      break;
  }

  return result;
}

const char *sub_10035BFD0(uint64_t a1, int a2)
{
  char v2 = a2 - 1;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_1006716EC();
  }
  return "UnknownExt";
}

void sub_10035C04C(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_1008F09B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1008F09B8))
  {
    qword_1008F09B0 = (uint64_t)[@"/private/var/mobile/Library/Logs/Bluetooth/Accessory" length];
    __cxa_guard_release(&qword_1008F09B8);
  }

  int v3 = *(FILE **)(a1 + 64);
  if (v3)
  {
    fclose(v3);
    *(void *)(a1 + 64) = 0LL;
    if (*(_BYTE *)(a1 + 56))
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithString:]( &OBJC_CLASS___NSMutableString,  "stringWithString:",  *(void *)(a1 + 48)));
      [v4 insertString:@"Corrupt" atIndex:qword_1008F09B0];
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      uint64_t v6 = *(void *)(a1 + 48);
      id v11 = 0LL;
      unsigned int v7 = [v5 moveItemAtPath:v6 toPath:v4 error:&v11];
      id v8 = v11;

      uint64_t v9 = (os_log_s *)qword_1008F7568;
      if (v7)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)tm buf = 138412290;
          uint64_t v13 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "closeCurrentLogFile: Renaming potentially corrupt file to %@",  buf,  0xCu);
        }

        objc_storeStrong((id *)(a1 + 48), v4);
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
      {
        sub_1006717AC((uint64_t *)(a1 + 48), (uint64_t)v8, v9);
      }
    }

    [*(id *)(a1 + 80) addObject:*(void *)(a1 + 48)];
    int v10 = *(void **)(a1 + 48);
    *(void *)(a1 + 4std::istream::~istream(v1, v2 + 8) = 0LL;

    *(_BYTE *)(a1 + 56) = 0;
  }

void sub_10035C21C(_Unwind_Exception *a1)
{
}

id sub_10035C258(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 <= 3)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100671828();
    }
LABEL_19:
    id v11 = 0LL;
    return v11;
  }

  if (((8LL * *(unsigned __int8 *)(a3 + 3)) | 4) != a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100671970();
    }
    goto LABEL_19;
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( &OBJC_CLASS___NSMutableArray,  "arrayWithCapacity:",  *(unsigned __int8 *)(a3 + 3)));
  if (*(_BYTE *)(a3 + 3))
  {
    unint64_t v5 = 0LL;
    uint64_t v6 = a3 + 4;
LABEL_7:
    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = *(unsigned __int8 *)(v6 + v7);
      if (*(_BYTE *)(v6 + v7))
      {
        if (!((v8 & 0x80) != 0 ? __maskrune(v8, 0x40000uLL) : _DefaultRuneLocale.__runetype[v8] & 0x40000)) {
          break;
        }
      }

      if (++v7 == 4)
      {
        if (*(_DWORD *)(a3 + 8 * v5 + 8))
        {
          int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  a3 + 8 * v5 + 4,  8LL));
          [v4 setObject:v10 atIndexedSubscript:v5];

          ++v5;
          v6 += 8LL;
          goto LABEL_16;
        }

        uint64_t v13 = (os_log_s *)qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
          sub_10067188C(v5, v13, v14);
        }
LABEL_22:
        id v11 = 0LL;
        goto LABEL_23;
      }
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100671900();
    }
    goto LABEL_22;
  }

void sub_10035C444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *sub_10035C464(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x1F) {
    return "Unknown";
  }
  else {
    return (&off_100893040)[(char)a2];
  }
}

NSMutableOrderedSet *sub_10035C48C(uint64_t a1, uint64_t a2)
{
  size_t v47 = objc_opt_new(&OBJC_CLASS___NSMutableOrderedSet);
  unsigned __int8 v65 = 0;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "AccessoryLogging");
  sub_10002418C(__p, "CrashAnalyticsTestMode");
  int v3 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v2 + 72LL))( v2,  buf,  __p,  &v65);
  if (v65) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v64 < 0) {
    operator delete(__p[0]);
  }
  if ((v73 & 0x80000000) == 0)
  {
    if (!v4) {
      goto LABEL_16;
    }
LABEL_10:
    unint64_t v5 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)tm buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "dispatchCrashLogsToAnalytics: Test mode flag is set",  buf,  2u);
    }

    uint64_t v6 = sub_1002E6E00();
    sub_10002418C(buf, "AccessoryLogging");
    sub_10002418C(__p, "CrashAnalyticsTestMode");
    (*(void (**)(uint64_t, _BYTE *, void **, void))(*(void *)v6 + 80LL))(v6, buf, __p, 0LL);
    if (v64 < 0) {
      operator delete(__p[0]);
    }
    if (v73 < 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_16;
  }

  operator delete(*(void **)buf);
  if (v4) {
    goto LABEL_10;
  }
LABEL_16:
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  __int128 v59 = 0u;
  __int128 v60 = 0u;
  id obj = *(id *)(a2 + 80);
  id v7 = [obj countByEnumeratingWithState:&v59 objects:v71 count:16];
  if (!v7)
  {
    int v52 = 0;
    goto LABEL_84;
  }

  int v52 = 0;
  uint64_t v8 = *(void *)v60;
  uint64_t v48 = kOSALogOptionOverrideFilePrefix;
  do
  {
    uint64_t v9 = 0LL;
    do
    {
      if (*(void *)v60 != v8) {
        objc_enumerationMutation(obj);
      }
      int v10 = *(void **)(*((void *)&v59 + 1) + 8LL * (void)v9);
      if ([v10 hasPrefix:@"/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash"])
      {
        if ([v10 hasSuffix:@".bin"])
        {
          id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a2 + 104) objectForKey:v10]);
          if (!v11)
          {
            uint64_t v18 = (os_log_s *)qword_1008F7568;
            if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)tm buf = 138412290;
              *(void *)&uint8_t buf[4] = v10;
              _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "dispatchCrashLogsToAnalytics: No metadata for %@",  buf,  0xCu);
            }

            goto LABEL_69;
          }

          int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:](&OBJC_CLASS___NSData, "dataWithContentsOfFile:", v10));
          uint64_t v13 = v12;
          if (!v12 || ![v12 length])
          {
            uint64_t v17 = (os_log_s *)qword_1008F7568;
            if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)tm buf = 138412290;
              *(void *)&uint8_t buf[4] = v10;
              _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "dispatchCrashLogsToAnalytics: Could not read %@",  buf,  0xCu);
            }

            goto LABEL_68;
          }

          if ([v10 hasPrefix:@"/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash_RightPrimary"])
          {
            uint64_t v14 = @"primary";
LABEL_28:
            uint64_t v15 = @"right";
LABEL_38:
            int v19 = 0;
            int v20 = 0;
            v70[0] = v14;
            int v68 = @"role";
            char v69 = @"side";
LABEL_39:
            v70[1] = v15;
            size_t v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v70,  &v68,  2LL));
            if (v20) {

            }
            if (v19) {
            id v21 = sub_10035CF64(a1, v13, v10, v11, v53, *(unsigned int *)(a2 + 24), v65);
            }
            __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
            if (v22)
            {
              uint64_t v23 = sub_1002E6BF0();
              if (((*(uint64_t (**)(uint64_t))(*(void *)v23 + 328LL))(v23) & 1) != 0
                || (uint64_t v24 = sub_1002E6BF0(), ((*(uint64_t (**)(uint64_t))(*(void *)v24 + 384LL))(v24) & 1) != 0)
                || (uint64_t v25 = sub_1002E6BF0(), (*(unsigned int (**)(uint64_t))(*(void *)v25 + 424LL))(v25)))
              {
                uint64_t v26 = sub_1002E6E00();
                if ((*(unsigned int (**)(uint64_t))(*(void *)v26 + 8LL))(v26))
                {
                  size_t v27 = (void *)objc_claimAutoreleasedReturnValue([v10 stringByDeletingPathExtension]);
                  size_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 stringByAppendingPathExtension:@"json"]);

                  if ([v22 writeToFile:v28 atomically:0])
                  {
                    -[NSMutableOrderedSet addObject:](v47, "addObject:", v28);
                  }

                  else
                  {
                    size_t v29 = (os_log_s *)qword_1008F7568;
                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v28;
                      _os_log_error_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "dispatchCrashLogsToAnalytics: Failed to write analytics file: %@",  buf,  0xCu);
                    }
                  }
                }
              }

              uint32_t v30 = arc4random_uniform(0xF4241u);
              double v31 = *(double *)(a1 + 440);
              if ((double)v30 / 1000000.0 <= v31)
              {
                uint64_t v66 = v48;
                int v67 = @"AccessoryCrash";
                size_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v67,  &v66,  1LL));
                id v58 = 0LL;
                v56[0] = _NSConcreteStackBlock;
                v56[1] = 3221225472LL;
                v56[2] = sub_10035D738;
                void v56[3] = &unk_100892E30;
                id v57 = v22;
                int v34 = (void *)objc_claimAutoreleasedReturnValue( +[OSALog createForSubmission:metadata:options:error:writing:]( &OBJC_CLASS___OSALog,  "createForSubmission:metadata:options:error:writing:",  @"305",  0LL,  v33,  &v58,  v56));
                id v35 = v58;

                size_t v36 = (os_log_s *)qword_1008F7568;
                if (!v34 || v35)
                {
                  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)tm buf = 138412290;
                    *(void *)&uint8_t buf[4] = v35;
                    _os_log_error_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "dispatchCrashLogsToAnalytics: Could not submit processed crash log to analytics, error %@",  buf,  0xCu);
                  }
                }

                else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v37 = objc_claimAutoreleasedReturnValue([v34 filepath]);
                  *(_DWORD *)tm buf = 138412290;
                  *(void *)&uint8_t buf[4] = v37;
                  size_t v46 = (void *)v37;
                  _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "dispatchCrashLogsToAnalytics: Submitted to analytics: %@",  buf,  0xCu);
                }
              }

              else
              {
                uint64_t v32 = (os_log_s *)qword_1008F7568;
                if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)tm buf = 134217984;
                  *(double *)&uint8_t buf[4] = v31;
                  _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "dispatchCrashLogsToAnalytics: Skipping analytics submission due to %f sampling rate",  buf,  0xCu);
                }
              }
            }

            size_t v38 = (os_log_s *)qword_1008F7568;
            if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)tm buf = 138412290;
              *(void *)&uint8_t buf[4] = v10;
              _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "dispatchCrashLogsToAnalytics: Processed %@",  buf,  0xCu);
            }

            ++v52;
LABEL_68:

LABEL_69:
            goto LABEL_70;
          }

          if ([v10 hasPrefix:@"/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash_LeftPrimary"])
          {
            uint64_t v14 = @"primary";
          }

          else
          {
            if ([v10 hasPrefix:@"/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash_RightSecondary"])
            {
              uint64_t v14 = @"secondary";
              goto LABEL_28;
            }

            if (([v10 hasPrefix:@"/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash_LeftSecondary"] & 1) == 0)
            {
              unsigned __int8 v39 = [v10 hasPrefix:@"/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash_Single"];
              size_t v40 = @"single";
              if ((v39 & 1) != 0
                || (v41 = [v10 hasPrefix:@"/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash_Case"],  size_t v40 = @"case",  (v41 & 1) != 0))
              {
                int v19 = 0;
                int v68 = @"role";
              }

              else
              {
                size_t v42 = (os_log_s *)qword_1008F7568;
                if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)tm buf = 138412290;
                  *(void *)&uint8_t buf[4] = v10;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "dispatchCrashLogsToAnalytics: Could not determine role for %@",  buf,  0xCu);
                }

                int v68 = @"role";
                size_t v40 = (const __CFString *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
                int v19 = 1;
                size_t v49 = (__CFString *)v40;
              }

              char v69 = @"side";
              v70[0] = v40;
              int v20 = 1;
              size_t v50 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
              uint64_t v15 = v50;
              goto LABEL_39;
            }

            uint64_t v14 = @"secondary";
          }

          uint64_t v15 = @"left";
          goto LABEL_38;
        }

        BOOL v16 = (os_log_s *)qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)tm buf = 138412290;
          *(void *)&uint8_t buf[4] = v10;
          _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "dispatchCrashLogsToAnalytics: File %@ lacks .bin extension",  buf,  0xCu);
        }
      }

void sub_10035CE34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, void *__p, uint64_t a40, int a41, __int16 a42, char a43, char a44)
{
  if (a44 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_10035CF64(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  id v52 = a2;
  id v50 = a3;
  id v12 = a4;
  id v45 = a5;
  size_t v51 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  v66[0] = @"bug_type";
  v66[1] = @"UI_country_code";
  v67[0] = @"305";
  v67[1] = @"US";
  int v66[2] = @"log-version";
  void v66[3] = @"accessory_type";
  int v67[2] = @"1.0";
  void v67[3] = @"audio";
  v67[4] = v45;
  v66[4] = @"application-info";
  v66[5] = @"accessory_pid";
  uint64_t v68 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a6));
  v66[6] = @"analytics_test_mode";
  size_t v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a7));
  char v69 = v49;
  v66[7] = @"crashlogs";
  uint64_t v48 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  BOOL v70 = v48;
  v66[8] = @"accessory_crashreporter_key";
  size_t v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  int v71 = v47;
  v66[9] = @"accessory_os_version";
  size_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  id v72 = v46;
  v66[10] = @"accessory_os_train";
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  char v73 = v13;
  v66[11] = @"accessory_machine_config";
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  uint64_t v74 = v14;
  v66[12] = @"accessory_release_type";
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  uint64_t v75 = v15;
  v66[13] = @"usage_since_last_crash";
  BOOL v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  int v76 = v16;
  v66[14] = @"usage_since_last_crash_user_facing";
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  uint64_t v77 = v17;
  v66[15] = @"usage_since_last_crash_in_ear";
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  __int16 v78 = v18;
  v66[16] = @"accessory_fusing";
  int v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  char v79 = v19;
  int v20 = (void *)v68;
  id v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v67,  v66,  17LL));
  -[NSMutableDictionary setDictionary:](v51, "setDictionary:", v21);

  unint64_t v22 = 0LL;
  int v23 = 0;
  do
  {
    if ((unint64_t)[v12 count] <= v22)
    {
      unsigned __int8 v41 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_100671B00(v22, (uint64_t)v50, v41);
      }
      goto LABEL_21;
    }

    id v24 = objc_claimAutoreleasedReturnValue([v12 objectAtIndexedSubscript:v22]);
    uint64_t v25 = [v24 bytes];

    unint64_t v26 = v25[1];
    if ((char *)[v52 length] - v23 < (char *)v26)
    {
      size_t v42 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
      {
        int v44 = v25[1];
        *(_DWORD *)tm buf = 67109890;
        int v59 = v22;
        __int16 v60 = 1024;
        int v61 = v44;
        __int16 v62 = 1024;
        int v63 = v23;
        __int16 v64 = 2112;
        id v65 = v50;
        _os_log_error_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "processCrashInstanceForAnalytics: Chunk %d of size %d at offset %d of %@ extends past the end of the file",  buf,  0x1Eu);
      }

void sub_10035D5E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20, void *a21)
{
  _Unwind_Resume(a1);
}

id sub_10035D738(uint64_t a1, void *a2)
{
  return [a2 writeData:*(void *)(a1 + 32)];
}

NSMutableDictionary *sub_10035D744(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v219 = a3;
  id v217 = v6;
  id v218 = a4;
  id v7 = (const __CFDictionary *)RTBuddyCrashlogDecode(v6);
  if (v7)
  {
    theDict = v7;
    if (!CFDictionaryGetCount(v7))
    {
      uint64_t v8 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)tm buf = 138412290;
        *(void *)&uint8_t buf[4] = v219;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Warning: processCrashLogForAnalytics: Empty dictionary returned for %@",  buf,  0xCu);
      }
    }

    uint64_t v220 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    v231[0] = @"mailboxes";
    uint64_t v9 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    v232[0] = v9;
    v231[1] = @"panic";
    int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v232[1] = v10;
    v231[2] = @"crashlog-version";
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v232[2] = v11;
    v231[3] = @"exception";
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v232[3] = v12;
    v231[4] = @"uuid";
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v232[4] = v13;
    v231[5] = @"call-stack";
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v232[5] = v14;
    v231[6] = @"tasks";
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v232[6] = v15;
    v231[7] = @"registers";
    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v232[7] = v16;
    v231[8] = @"scenario";
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v232[8] = v17;
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v232,  v231,  9LL));
    -[NSMutableDictionary setDictionary:](v220, "setDictionary:", v18);

    int Value = CFDictionaryGetValue(theDict, @"panic");
    int v20 = Value;
    if (Value)
    {
      CFTypeID v21 = CFGetTypeID(Value);
      if (v21 == CFStringGetTypeID()) {
        -[NSMutableDictionary setObject:forKey:](v220, "setObject:forKey:", v20, @"panic");
      }
    }

    unint64_t v22 = CFDictionaryGetValue(theDict, @"crashlog-version");
    int v23 = v22;
    if (v22)
    {
      CFTypeID v24 = CFGetTypeID(v22);
      if (v24 == CFStringGetTypeID()) {
        -[NSMutableDictionary setObject:forKey:](v220, "setObject:forKey:", v23, @"crashlog-version");
      }
    }

    uint64_t v25 = CFDictionaryGetValue(theDict, @"exception");
    unint64_t v26 = v25;
    if (v25)
    {
      CFTypeID v27 = CFGetTypeID(v25);
      if (v27 == CFStringGetTypeID()) {
        -[NSMutableDictionary setObject:forKey:](v220, "setObject:forKey:", v26, @"exception");
      }
    }

    size_t v28 = (const __CFArray *)CFDictionaryGetValue(theDict, @"sections");
    size_t v29 = v28;
    if (v28)
    {
      CFTypeID v30 = CFGetTypeID(v28);
      if (v30 == CFArrayGetTypeID())
      {
        for (CFIndex i = 0LL; ; ++i)
        {
          if (i >= CFArrayGetCount(v29)) {
            goto LABEL_251;
          }
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v29, i);
          size_t v33 = ValueAtIndex;
          if (!ValueAtIndex || (CFTypeID v34 = CFGetTypeID(ValueAtIndex), v34 != CFDictionaryGetTypeID()))
          {
            uint64_t v60 = qword_1008F7568;
            if (!os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
              continue;
            }
            *(_DWORD *)tm buf = 138412290;
            *(void *)&uint8_t buf[4] = v219;
            int v61 = (os_log_s *)v60;
            __int16 v62 = "processCrashLogForAnalytics: Invalid crash log section in %@";
            goto LABEL_63;
          }

          id v35 = (const __CFString *)CFDictionaryGetValue(v33, @"section-name");
          int v36 = v35;
          if (!v35 || (CFTypeID v37 = CFGetTypeID(v35), v37 != CFStringGetTypeID()))
          {
            uint64_t v63 = qword_1008F7568;
            if (!os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
              continue;
            }
            *(_DWORD *)tm buf = 138412290;
            *(void *)&uint8_t buf[4] = v219;
            int v61 = (os_log_s *)v63;
            __int16 v62 = "processCrashLogForAnalytics: Invalid crash log section name in %@";
LABEL_63:
            uint32_t v64 = 12;
            goto LABEL_64;
          }

          CStringPtr = CFStringGetCStringPtr(v36, 0x8000100u);
          if (CStringPtr)
          {
            unsigned __int8 v39 = (const __CFString *)CFDictionaryGetValue(v33, @"section-signature");
            id v40 = v39;
            if (v39 && (CFTypeID v41 = CFGetTypeID(v39), v41 == CFStringGetTypeID()))
            {
              size_t v42 = CFStringGetCStringPtr(v40, 0x8000100u);
              if (v42)
              {
                if (!strcmp(CStringPtr, "Version Section") && !strcmp(v42, "Cver"))
                {
                  uint64_t v68 = CFDictionaryGetValue(v33, @"uuid");
                  char v69 = v68;
                  if (v68 && (CFTypeID v70 = CFGetTypeID(v68), v70 == CFStringGetTypeID()))
                  {
                    -[NSMutableDictionary setObject:forKey:](v220, "setObject:forKey:", v69, @"uuid");
                  }

                  else
                  {
                    uint64_t v97 = qword_1008F7568;
                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      int v61 = (os_log_s *)v97;
                      __int16 v62 = "processCrashLogForAnalytics: Invalid UUID in %@";
                      goto LABEL_63;
                    }
                  }
                }

                else if (!strcmp(CStringPtr, "Callstack Section") && !strcmp(v42, "Ccst"))
                {
                  __int16 v82 = (void *)CFDictionaryGetValue(v33, @"stack");
                  int v83 = v214;
                  uint64_t v84 = v82;
                  if (!v82 || (CFTypeID v85 = CFGetTypeID(v82), v85 != CFArrayGetTypeID()))
                  {
                    __int16 v86 = (os_log_s *)qword_1008F7568;
                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      _os_log_error_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_ERROR,  "processCrashLogForAnalytics: Invalid stack in %@",  buf,  0xCu);
                    }

                    uint64_t v84 = 0LL;
                  }

                  char v87 = (void *)CFDictionaryGetValue(v33, @"stack-description");
                  char v88 = v87;
                  if (!v87 || (CFTypeID v89 = CFGetTypeID(v87), v89 != CFStringGetTypeID()))
                  {
                    char v90 = (os_log_s *)qword_1008F7568;
                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      _os_log_error_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_ERROR,  "processCrashLogForAnalytics: Invalid stack description in %@",  buf,  0xCu);
                    }

                    char v88 = 0LL;
                  }

                  v229[0] = @"stack";
                  __int16 v91 = v84;
                  if (!v84)
                  {
                    v212 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
                    __int16 v91 = v212;
                  }

                  v230[0] = v91;
                  v229[1] = @"stack-description";
                  char v92 = v88;
                  if (!v88)
                  {
                    int v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
                    char v92 = v83;
                  }

                  v230[1] = v92;
                  v214 = v83;
                  uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v230,  v229,  2LL));
                  -[NSMutableDictionary setObject:forKey:](v220, "setObject:forKey:", v93, @"call-stack");

                  if (!v88) {
                  if (!v84)
                  }
                }

                else if (!strcmp(CStringPtr, "Task List Section") && !strcmp(v42, "Crtk"))
                {
                  int v94 = CFDictionaryGetValue(v33, @"tasks");
                  int v95 = v94;
                  if (v94 && (CFTypeID v96 = CFGetTypeID(v94), v96 == CFArrayGetTypeID()))
                  {
                    -[NSMutableDictionary setObject:forKey:](v220, "setObject:forKey:", v95, @"tasks");
                  }

                  else
                  {
                    uint64_t v123 = qword_1008F7568;
                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      int v61 = (os_log_s *)v123;
                      __int16 v62 = "processCrashLogForAnalytics: Invalid tasks in %@";
                      goto LABEL_63;
                    }
                  }
                }

                else if (!strcmp(CStringPtr, "Mailbox Section") && !strcmp(v42, "Cmbx"))
                {
                  CFTypeRef cfa = CFDictionaryGetValue(v33, @"registers");
                  uint64_t v98 = v213;
                  if (!cfa || (CFTypeID v99 = CFGetTypeID(cfa), v99 != CFDictionaryGetTypeID()))
                  {
                    uint64_t v100 = (os_log_s *)qword_1008F7568;
                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      _os_log_error_impl( (void *)&_mh_execute_header,  v100,  OS_LOG_TYPE_ERROR,  "processCrashLogForAnalytics: Invalid mailbox registers in %@",  buf,  0xCu);
                    }

                    CFTypeRef cfa = 0LL;
                  }

                  __int16 v101 = (void *)CFDictionaryGetValue(v33, @"mailbox-error");
                  int v102 = v101;
                  if (!v101 || (CFTypeID v103 = CFGetTypeID(v101), v103 != CFStringGetTypeID()))
                  {
                    int v104 = (os_log_s *)qword_1008F7568;
                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      _os_log_error_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_ERROR,  "processCrashLogForAnalytics: Invalid mailbox error in %@",  buf,  0xCu);
                    }

                    int v102 = 0LL;
                  }

                  uint64_t v105 = (void *)CFDictionaryGetValue(v33, @"route-number");
                  char v106 = v105;
                  if (!v105 || (CFTypeID v107 = CFGetTypeID(v105), v107 != CFStringGetTypeID()))
                  {
                    char v108 = (os_log_s *)qword_1008F7568;
                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      _os_log_error_impl( (void *)&_mh_execute_header,  v108,  OS_LOG_TYPE_ERROR,  "processCrashLogForAnalytics: Invalid route number in %@",  buf,  0xCu);
                    }

                    char v106 = 0LL;
                  }

                  __int16 v109 = (void *)CFDictionaryGetValue(v33, @"log");
                  char v110 = v109;
                  if (!v109 || (CFTypeID v111 = CFGetTypeID(v109), v111 != CFStringGetTypeID()))
                  {
                    __int128 v112 = (os_log_s *)qword_1008F7568;
                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      _os_log_error_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_ERROR,  "processCrashLogForAnalytics: Invalid log in %@",  buf,  0xCu);
                    }

                    char v110 = 0LL;
                  }

                  __int128 v113 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v220, "objectForKey:", @"mailboxes"));
                  v227[0] = @"registers";
                  CFTypeRef v114 = cfa;
                  if (!cfa)
                  {
                    uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
                    CFTypeRef v114 = v98;
                  }

                  v228[0] = v114;
                  v227[1] = @"mailbox-error";
                  __int128 v115 = v102;
                  v213 = v98;
                  if (!v102)
                  {
                    v211 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
                    __int128 v115 = v211;
                  }

                  v228[1] = v115;
                  v227[2] = @"route-number";
                  __int128 v116 = v106;
                  if (!v106)
                  {
                    unsigned int v210 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
                    __int128 v116 = v210;
                  }

                  v228[2] = v116;
                  v227[3] = @"log";
                  __int128 v117 = v110;
                  if (!v110)
                  {
                    v209 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
                    __int128 v117 = v209;
                  }

                  v228[3] = v117;
                  __int128 v118 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v228,  v227,  4LL));
                  [v113 addObject:v118];

                  if (!v110) {
                  if (!v106)
                  }

                  if (!v102) {
                  if (!cfa)
                  }
                }

                else if (!strcmp(CStringPtr, "Register Frame Section") && !strcmp(v42, "CrgM"))
                {
                  unsigned int v120 = CFDictionaryGetValue(v33, @"registers");
                  unsigned __int16 v121 = v120;
                  if (v120 && (CFTypeID v122 = CFGetTypeID(v120), v122 == CFStringGetTypeID()))
                  {
                    -[NSMutableDictionary setObject:forKey:](v220, "setObject:forKey:", v121, @"registers");
                  }

                  else
                  {
                    uint64_t v133 = qword_1008F7568;
                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      int v61 = (os_log_s *)v133;
                      __int16 v62 = "processCrashLogForAnalytics: Invalid registers in %@";
                      goto LABEL_63;
                    }
                  }
                }

                else if (!strcmp(CStringPtr, "Product Version Section") && !strcmp(v42, "CPvr"))
                {
                  uint64_t v124 = CFDictionaryGetValue(v33, @"Machine");
                  __int16 v125 = v124;
                  if (v124 && (CFTypeID v126 = CFGetTypeID(v124), v126 == CFStringGetTypeID()))
                  {
                    [v218 setObject:v125 forKey:@"accessory_machine_config"];
                  }

                  else
                  {
                    unsigned __int16 v134 = (os_log_s *)qword_1008F7568;
                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      _os_log_error_impl( (void *)&_mh_execute_header,  v134,  OS_LOG_TYPE_ERROR,  "processCrashLogForAnalytics: Invalid Machine in %@",  buf,  0xCu);
                    }
                  }

                  v135 = CFDictionaryGetValue(v33, @"Build");
                  uint64_t v136 = v135;
                  if (v135 && (CFTypeID v137 = CFGetTypeID(v135), v137 == CFStringGetTypeID()))
                  {
                    [v218 setObject:v136 forKey:@"accessory_release_type"];
                  }

                  else
                  {
                    uint64_t v138 = (os_log_s *)qword_1008F7568;
                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      _os_log_error_impl( (void *)&_mh_execute_header,  v138,  OS_LOG_TYPE_ERROR,  "processCrashLogForAnalytics: Invalid Build in %@",  buf,  0xCu);
                    }
                  }

                  __int128 v139 = (void *)CFDictionaryGetValue(v33, @"OS version");
                  __int128 v140 = v139;
                  if (v139 && (CFTypeID v141 = CFGetTypeID(v139), v141 == CFStringGetTypeID()))
                  {
                    id v142 = v140;
                    [v218 setObject:v142 forKey:@"accessory_os_version"];
                    uint64_t v143 = (void *)objc_claimAutoreleasedReturnValue([v142 componentsSeparatedByString:@"."]);
                    __int128 v144 = v143;
                    if (v143 && [v143 count])
                    {
                      __int128 v145 = (void *)objc_claimAutoreleasedReturnValue([v144 objectAtIndexedSubscript:0]);
                      __int128 v146 = (void *)objc_claimAutoreleasedReturnValue([@"RTKitOS " stringByAppendingString:v145]);
                      [v218 setObject:v146 forKey:@"accessory_os_train"];
                    }

                    else
                    {
                      __int128 v151 = (os_log_s *)qword_1008F7568;
                      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)tm buf = 138412546;
                        *(void *)&uint8_t buf[4] = v142;
                        *(_WORD *)&_BYTE buf[12] = 2112;
                        *(void *)&_BYTE buf[14] = v219;
                        _os_log_error_impl( (void *)&_mh_execute_header,  v151,  OS_LOG_TYPE_ERROR,  "processCrashLogForAnalytics: Could not determine OS train for version '%@' for %@",  buf,  0x16u);
                      }
                    }
                  }

                  else
                  {
                    uint64_t v147 = qword_1008F7568;
                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      int v61 = (os_log_s *)v147;
                      __int16 v62 = "processCrashLogForAnalytics: Invalid OS version in %@";
                      goto LABEL_63;
                    }
                  }
                }

                else if (!strcmp(CStringPtr, "String Section") && !strcmp(v42, "Cstr"))
                {
                  __int16 v127 = (void *)CFDictionaryGetValue(v33, @"contents");
                  int v128 = v127;
                  if (v127 && (CFTypeID v129 = CFGetTypeID(v127), v129 == CFStringGetTypeID()))
                  {
                    id v130 = v128;
                    if ([v130 hasPrefix:@"CrashReporterKey:"])
                    {
                      uint64_t v131 = (void *)objc_claimAutoreleasedReturnValue( [v130 substringFromIndex:[@"CrashReporterKey:" length]]);
                      [v218 setObject:v131 forKey:@"accessory_crashreporter_key"];
                    }
                  }

                  else
                  {
                    uint64_t v148 = qword_1008F7568;
                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      int v61 = (os_log_s *)v148;
                      __int16 v62 = "processCrashLogForAnalytics: Invalid string section contents in %@";
                      goto LABEL_63;
                    }
                  }
                }

                else if (!strcmp(v42, "MTBF"))
                {
                  LODWORD(v222) = 0;
                  *(_DWORD *)uint64_t v225 = 0;
                  int v71 = (const __CFNumber *)CFDictionaryGetValue(v33, @"section-offset");
                  id v72 = v71;
                  if (v71 && (CFTypeID v73 = CFGetTypeID(v71), v73 == CFNumberGetTypeID()))
                  {
                    if (CFNumberGetValue(v72, kCFNumberIntType, &v222))
                    {
                      uint64_t v74 = (const __CFNumber *)CFDictionaryGetValue(v33, @"section-size");
                      uint64_t v75 = v74;
                      if (v74 && (CFTypeID v76 = CFGetTypeID(v74), v76 == CFNumberGetTypeID()))
                      {
                        if (CFNumberGetValue(v75, kCFNumberIntType, v225))
                        {
                          int v77 = *(_DWORD *)v225;
                          if (*(int *)v225 < 1
                            || (int v78 = v222, (v222 & 0x80000000) != 0)
                            || (unint64_t)[v217 length] <= (v78 + v77))
                          {
                            uint64_t v154 = qword_1008F7568;
                            if (!os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
                              continue;
                            }
                            *(_DWORD *)tm buf = 67109634;
                            *(_DWORD *)&uint8_t buf[4] = v222;
                            *(_WORD *)&uint8_t buf[8] = 1024;
                            *(_DWORD *)&buf[10] = *(_DWORD *)v225;
                            *(_WORD *)&_BYTE buf[14] = 2112;
                            *(void *)&uint8_t buf[16] = v219;
                            int v61 = (os_log_s *)v154;
                            __int16 v62 = "processCrashLogForAnalytics: Invalid mtbf section offset (%d) and size (%d) in %@";
LABEL_199:
                            uint32_t v64 = 24;
LABEL_64:
                            _os_log_error_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, v62, buf, v64);
                            continue;
                          }

                          char v79 = (char *)[v217 bytes];
                          int v80 = *(_DWORD *)v225;
                          if (*(_DWORD *)v225 <= 0x1Bu)
                          {
                            uint64_t v81 = qword_1008F7568;
                            if (!os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
                              continue;
                            }
                            *(_DWORD *)tm buf = 67109634;
                            *(_DWORD *)&uint8_t buf[4] = v80;
                            *(_WORD *)&uint8_t buf[8] = 2048;
                            *(void *)&buf[10] = 28LL;
                            *(_WORD *)&_BYTE buf[18] = 2112;
                            *(void *)&buf[20] = v219;
                            int v61 = (os_log_s *)v81;
                            __int16 v62 = "processCrashLogForAnalytics: mtbf section size too small (%d < %zu) in %@";
                            uint32_t v64 = 28;
                            goto LABEL_64;
                          }

                          __int16 v158 = &v79[(int)v222];
                          uint64_t v159 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *((unsigned int *)v158 + 6)));
                          [v218 setObject:v159 forKey:@"usage_since_last_crash"];

                          if (*(_DWORD *)v225 >= 0x25u)
                          {
                            unsigned int v160 = v158[36] - 1;
                            int v161 = "unknown";
                            if (v160 <= 2) {
                              int v161 = (&off_100893140)[(char)v160];
                            }
                            uint64_t v162 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  v161,  4LL));
                            [v218 setObject:v162 forKey:@"accessory_fusing"];

                            if (*((_DWORD *)v158 + 7) != -1)
                            {
                              uint64_t v163 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:"));
                              [v218 setObject:v163 forKey:@"usage_since_last_crash_user_facing"];
                            }

                            if (*((_DWORD *)v158 + 8) != -1)
                            {
                              uint64_t v164 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:"));
                              [v218 setObject:v164 forKey:@"usage_since_last_crash_in_ear"];
                            }
                          }
                        }

                        else
                        {
                          uint64_t v155 = qword_1008F7568;
                          if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)tm buf = 138412290;
                            *(void *)&uint8_t buf[4] = v219;
                            int v61 = (os_log_s *)v155;
                            __int16 v62 = "processCrashLogForAnalytics: Unable to convert mtbf section size in %@";
                            goto LABEL_63;
                          }
                        }
                      }

                      else
                      {
                        uint64_t v149 = qword_1008F7568;
                        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)tm buf = 138412290;
                          *(void *)&uint8_t buf[4] = v219;
                          int v61 = (os_log_s *)v149;
                          __int16 v62 = "processCrashLogForAnalytics: Invalid mtbf section size in %@";
                          goto LABEL_63;
                        }
                      }
                    }

                    else
                    {
                      uint64_t v150 = qword_1008F7568;
                      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)tm buf = 138412290;
                        *(void *)&uint8_t buf[4] = v219;
                        int v61 = (os_log_s *)v150;
                        __int16 v62 = "processCrashLogForAnalytics: Unable to convert mtbf section offset in %@";
                        goto LABEL_63;
                      }
                    }
                  }

                  else
                  {
                    uint64_t v119 = qword_1008F7568;
                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      int v61 = (os_log_s *)v119;
                      __int16 v62 = "processCrashLogForAnalytics: Invalid mtbf section offset in %@";
                      goto LABEL_63;
                    }
                  }
                }

                else
                {
                  if (strcmp(v42, "Csif")) {
                    continue;
                  }
                  uint64_t valuePtr = 0LL;
                  id v43 = (const __CFNumber *)CFDictionaryGetValue(v33, @"section-offset");
                  int v44 = v43;
                  if (v43 && (CFTypeID v45 = CFGetTypeID(v43), v45 == CFNumberGetTypeID()))
                  {
                    if (CFNumberGetValue(v44, kCFNumberIntType, (char *)&valuePtr + 4))
                    {
                      size_t v46 = (const __CFNumber *)CFDictionaryGetValue(v33, @"section-size");
                      size_t v47 = v46;
                      if (v46 && (CFTypeID v48 = CFGetTypeID(v46), v48 == CFNumberGetTypeID()))
                      {
                        if (CFNumberGetValue(v47, kCFNumberIntType, &valuePtr))
                        {
                          int v49 = valuePtr;
                          if (valuePtr >= 0x1C)
                          {
                            int v50 = HIDWORD(valuePtr);
                            if ((valuePtr & 0x8000000000000000LL) == 0
                              && (unint64_t)[v217 length] > v50 + v49)
                            {
                              uint64_t v204 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
                              size_t v51 = (char *)[v217 bytes];
                              CFTypeRef cf = &v51[SHIDWORD(valuePtr)];
                              uint64_t v52 = *((void *)cf + 2);
                              id v208 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
                              uint64_t v53 = 0LL;
                              uint8_t v54 = cf;
                              do
                              {
                                if ((*(void *)v54 & (1 << v53)) != 0LL)
                                {
                                  uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  off_1008D9410[v53]));
                                  -[NSMutableArray addObject:](v208, "addObject:", v55);

                                  uint8_t v54 = cf;
                                }

                                ++v53;
                              }

                              while (v53 != 25);
                              -[NSMutableDictionary setValue:forKey:]( v204,  "setValue:forKey:",  v208,  @"active_scenarios");
                              uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v52));
                              -[NSMutableDictionary setValue:forKey:]( v204,  "setValue:forKey:",  v56,  @"time_since_last_transition");

                              int v57 = valuePtr;
                              int v58 = *((_DWORD *)cf + 6);
                              if (valuePtr < 4 * (v58 & 0x3FFu) + 28)
                              {
                                int v59 = (os_log_s *)qword_1008F7568;
                                if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                                {
                                  *(_DWORD *)tm buf = 67109634;
                                  *(_DWORD *)&uint8_t buf[4] = v58 & 0x3FF;
                                  *(_WORD *)&uint8_t buf[8] = 1024;
                                  *(_DWORD *)&buf[10] = v57;
                                  *(_WORD *)&_BYTE buf[14] = 2112;
                                  *(void *)&uint8_t buf[16] = v219;
                                  _os_log_error_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_ERROR,  "processCrashLogForAnalytics: Scenario information range (%u) too large for section size (%d) in %@",  buf,  0x18u);
                                }

                                uint64_t v205 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
                                -[NSMutableDictionary setValue:forKey:]( v204,  "setValue:forKey:",  v205,  @"event_history");
                                goto LABEL_248;
                              }

                              uint64_t v205 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
                              uint64_t v165 = cf + 28;
                              unint64_t v166 = *((unsigned int *)cf + 6);
                              uint64_t v167 = (v166 >> 20) & 0x3FF;
                              uint64_t v168 = (v166 >> 10) & 0x3FF;
                              if ((_DWORD)v167 == (_DWORD)v168)
                              {
LABEL_210:
                                -[NSMutableDictionary setValue:forKey:]( v204,  "setValue:forKey:",  v205,  @"event_history");
                                int v169 = *((_DWORD *)cf + 6);
                                if (v169 < 0)
                                {
                                  uint64_t v170 = v169 & 0x3FF;
                                  int v171 = valuePtr;
                                  uint64_t v172 = 4 * (*((_DWORD *)cf + 6) & 0x3FFu) + 28;
                                  if ((v172 | 2uLL) > (int)valuePtr)
                                  {
                                    uint64_t v173 = (os_log_s *)qword_1008F7568;
                                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                                    {
                                      *(_DWORD *)tm buf = 67109634;
                                      *(_DWORD *)&uint8_t buf[4] = v170;
                                      *(_WORD *)&uint8_t buf[8] = 1024;
                                      *(_DWORD *)&buf[10] = v171;
                                      *(_WORD *)&_BYTE buf[14] = 2112;
                                      *(void *)&uint8_t buf[16] = v219;
                                      _os_log_error_impl( (void *)&_mh_execute_header,  v173,  OS_LOG_TYPE_ERROR,  "processCrashLogForAnalytics: Scenario information with range (%u) indicates trai ler present but not enough space in section size (%d) in %@",  buf,  0x18u);
                                    }

                                    goto LABEL_243;
                                  }

                                  v194 = &v165[4 * v170];
                                  uint64_t v195 = *(unsigned __int16 *)v194;
                                  if (v195 + v172 > (unint64_t)(int)valuePtr)
                                  {
                                    uint64_t v196 = (os_log_s *)qword_1008F7568;
                                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                                    {
                                      *(_DWORD *)tm buf = 67109890;
                                      *(_DWORD *)&uint8_t buf[4] = v170;
                                      *(_WORD *)&uint8_t buf[8] = 1024;
                                      *(_DWORD *)&buf[10] = v195;
                                      *(_WORD *)&_BYTE buf[14] = 1024;
                                      *(_DWORD *)&uint8_t buf[16] = v171;
                                      *(_WORD *)&buf[20] = 2112;
                                      *(void *)&buf[22] = v219;
                                      _os_log_error_impl( (void *)&_mh_execute_header,  v196,  OS_LOG_TYPE_ERROR,  "processCrashLogForAnalytics: Scenario information range (%u) and trailer length (%u) too large for section size (%d) in %@",  buf,  0x1Eu);
                                    }

                                    goto LABEL_243;
                                  }

                                  if (v195 > 9)
                                  {
                                    v198 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
                                    uint64_t v199 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *((_WORD *)v194 + 1) & 1));
                                    -[NSMutableDictionary setObject:forKey:]( v198,  "setObject:forKey:",  v199,  @"connected");

                                    if ((*((_WORD *)v194 + 1) & 1) != 0)
                                    {
                                      uint64_t v200 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *((unsigned __int16 *)v194 + 2)));
                                      -[NSMutableDictionary setObject:forKey:]( v198,  "setObject:forKey:",  v200,  @"vid");

                                      uint64_t v201 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *((unsigned __int16 *)v194 + 3)));
                                      -[NSMutableDictionary setObject:forKey:]( v198,  "setObject:forKey:",  v201,  @"pid");

                                      uint64_t v202 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *((unsigned __int16 *)v194 + 4)));
                                      -[NSMutableDictionary setObject:forKey:]( v198,  "setObject:forKey:",  v202,  @"sw_ver");
                                    }

                                    -[NSMutableDictionary setObject:forKey:]( v204,  "setObject:forKey:",  v198,  @"routed_to_source");
                                  }

                                  else
                                  {
                                    uint64_t v197 = (os_log_s *)qword_1008F7568;
                                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                                    {
                                      *(_DWORD *)tm buf = 67109634;
                                      *(_DWORD *)&uint8_t buf[4] = v195;
                                      *(_WORD *)&uint8_t buf[8] = 2048;
                                      *(void *)&buf[10] = 10LL;
                                      *(_WORD *)&_BYTE buf[18] = 2112;
                                      *(void *)&buf[20] = v219;
                                      _os_log_error_impl( (void *)&_mh_execute_header,  v197,  OS_LOG_TYPE_ERROR,  "processCrashLogForAnalytics: Scenario information trailer length too small (%u < %zu) in %@",  buf,  0x1Cu);
                                    }

LABEL_243:
                                    v198 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
                                    -[NSMutableDictionary setObject:forKey:]( v204,  "setObject:forKey:",  v198,  @"routed_to_source");
                                  }
                                }

        DWORD2(v137[2]) = 1;
        BYTE8(v137[0]) = 1;
        unsigned __int16 v134 = v137[1];
        *(_OWORD *)a3 = v137[0];
        *(_OWORD *)(a3 + 16) = v134;
        *(_OWORD *)(a3 + 2std::istream::~istream(v1, v2 + 8) = *(_OWORD *)((char *)&v137[1] + 12);
        *(_OWORD *)(a3 + 4std::istream::~istream(v1, v2 + 8) = v138[0];
        *(void *)(a3 + 64) = *(void *)&v138[1];
        memset(v138, 0, 24);
        *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)&v138[1] + 8);
        *(void *)(a3 + 8std::istream::~istream(v1, v2 + 8) = *((void *)&v138[2] + 1);
        memset((char *)&v138[1] + 8, 0, 24);
        *(_BYTE *)(a3 + 96) = v139;

        goto LABEL_108;
      case 65555:
      case 65556:
      case 65557:
      case 65558:
        goto LABEL_54;
      default:
        switch(a2)
        {
          case 2147418112:
            LODWORD(v137[2]) = 1966110;
            HIWORD(v137[0]) = 0;
            LOWORD(v137[0]) = 0;
            goto LABEL_101;
          case 2147418113:
            LODWORD(v137[2]) = 1966110;
            HIWORD(v137[0]) = 0;
            LOWORD(v137[0]) = 256;
            *(void *)&v137[1] = 0LL;
            BYTE4(v137[0]) = *(_BYTE *)(a1 + 144) ^ 1;
            uint64_t v25 = 1;
            BYTE8(v137[0]) = 1;
            uint32_t v64 = *(_OWORD *)((char *)&v137[1] + 12);
            uint64_t v65 = v137[1];
            *(_OWORD *)a3 = v137[0];
            *(_OWORD *)(a3 + 16) = v65;
            goto LABEL_104;
          case 2147418114:
            LODWORD(v137[2]) = 1966110;
            HIWORD(v137[0]) = 0;
            __int16 v62 = 256;
            goto LABEL_100;
          case 2147418115:
            LODWORD(v137[2]) = 1966110;
            HIWORD(v137[0]) = 0;
            __int16 v62 = 257;
LABEL_100:
            LOWORD(v137[0]) = v62;
LABEL_101:
            *(void *)&v137[1] = 0LL;
            goto LABEL_103;
          case 2147418116:
            LODWORD(v137[2]) = 1966110;
            HIWORD(v137[0]) = 0;
            LOWORD(v137[0]) = 256;
            *(void *)&v137[1] = 20000LL;
            uint64_t v25 = 1;
            BYTE8(v137[0]) = 1;
            *(_OWORD *)(a3 + 2std::istream::~istream(v1, v2 + 8) = *(_OWORD *)((char *)&v137[1] + 12);
            int v61 = v137[1];
            *(_OWORD *)a3 = v137[0];
            *(_OWORD *)(a3 + 16) = v61;
            goto LABEL_105;
          case 2147418117:
            LODWORD(v137[2]) = 1966110;
            HIWORD(v137[0]) = 0;
            LOWORD(v137[0]) = 256;
            *(void *)&v137[1] = 0LL;
            uint64_t v25 = 1;
            BYTE3(v137[0]) = 1;
            BYTE8(v137[0]) = 1;
            uint64_t v66 = v137[1];
            *(_OWORD *)a3 = v137[0];
            *(_OWORD *)(a3 + 16) = v66;
            *(_OWORD *)(a3 + 2std::istream::~istream(v1, v2 + 8) = *(_OWORD *)((char *)&v137[1] + 12);
            *(void *)(a3 + 4std::istream::~istream(v1, v2 + 8) = 0LL;
            *(void *)(a3 + 56) = 0LL;
            memset(v138, 0, 24);
            goto LABEL_106;
          case 2147418118:
            LODWORD(v137[2]) = 1966110;
            HIWORD(v137[0]) = 0;
            LOWORD(v137[0]) = 257;
            *(void *)&v137[1] = 0LL;
            v212 = (__n128)0xFF0000000002uLL;
            v213 = 0;
            sub_100634334(&v207, &v212);
            uint64_t v67 = *(__n128 **)&v138[2];
            if (*(void *)&v138[2] >= *((void *)&v138[2] + 1))
            {
              char v87 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v138[2] - *((void *)&v138[1] + 1)) >> 2);
              char v88 = v87 + 1;
              if (v87 + 1 > 0xCCCCCCCCCCCCCCCLL) {
                abort();
              }
              else {
                CFTypeID v89 = v88;
              }
              if (v89) {
                char v90 = (char *)sub_100050420((uint64_t)&v138[2] + 8, v89);
              }
              else {
                char v90 = 0LL;
              }
              CFTypeID v99 = (__n128 *)&v90[20 * v87];
              uint64_t v100 = &v90[20 * v89];
              __int16 v101 = v207;
              v99[1].n128_u32[0] = *(_DWORD *)v208;
              *CFTypeID v99 = v101;
              char v69 = &v99[1].n128_i8[4];
              CFTypeID v103 = (char *)*((void *)&v138[1] + 1);
              int v102 = *(char **)&v138[2];
              if (*(void *)&v138[2] != *((void *)&v138[1] + 1))
              {
                do
                {
                  int v104 = *(__n128 *)(v102 - 20);
                  v99[-1].n128_u32[3] = *((_DWORD *)v102 - 1);
                  *(__n128 *)((char *)v99 - 20) = v104;
                  CFTypeID v99 = (__n128 *)((char *)v99 - 20);
                  v102 -= 20;
                }

                while (v102 != v103);
                int v102 = (char *)*((void *)&v138[1] + 1);
              }

              *((void *)&v138[1] + 1) = v99;
              *(void *)&v138[2] = v69;
              *((void *)&v138[2] + 1) = v100;
              if (v102) {
                operator delete(v102);
              }
            }

            else
            {
              uint64_t v68 = v207;
              *(_DWORD *)(*(void *)&v138[2] + 16LL) = *(_DWORD *)v208;
              *uint64_t v67 = v68;
              char v69 = &v67[1].n128_i8[4];
            }

            *(void *)&v138[2] = v69;
            unsigned int v210 = (__n128)0xFF0100000002uLL;
            v211 = 0;
            sub_100634334(&v207, &v210);
            uint64_t v105 = *(__n128 **)&v138[2];
            if (*(void *)&v138[2] >= *((void *)&v138[2] + 1))
            {
              char v108 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v138[2] - *((void *)&v138[1] + 1)) >> 2);
              __int16 v109 = v108 + 1;
              if (v108 + 1 > 0xCCCCCCCCCCCCCCCLL) {
                abort();
              }
              else {
                char v110 = v109;
              }
              if (v110) {
                CFTypeID v111 = (char *)sub_100050420((uint64_t)&v138[2] + 8, v110);
              }
              else {
                CFTypeID v111 = 0LL;
              }
              __int128 v112 = (__n128 *)&v111[20 * v108];
              __int128 v113 = &v111[20 * v110];
              CFTypeRef v114 = v207;
              v112[1].n128_u32[0] = *(_DWORD *)v208;
              *__int128 v112 = v114;
              CFTypeID v107 = &v112[1].n128_i8[4];
              __int128 v116 = (char *)*((void *)&v138[1] + 1);
              __int128 v115 = *(char **)&v138[2];
              if (*(void *)&v138[2] != *((void *)&v138[1] + 1))
              {
                do
                {
                  __int128 v117 = *(__n128 *)(v115 - 20);
                  v112[-1].n128_u32[3] = *((_DWORD *)v115 - 1);
                  *(__n128 *)((char *)v112 - 20) = v117;
                  __int128 v112 = (__n128 *)((char *)v112 - 20);
                  v115 -= 20;
                }

                while (v115 != v116);
                __int128 v115 = (char *)*((void *)&v138[1] + 1);
              }

              *((void *)&v138[1] + 1) = v112;
              *(void *)&v138[2] = v107;
              *((void *)&v138[2] + 1) = v113;
              if (v115) {
                operator delete(v115);
              }
            }

            else
            {
              char v106 = v207;
              *(_DWORD *)(*(void *)&v138[2] + 16LL) = *(_DWORD *)v208;
              *uint64_t v105 = v106;
              CFTypeID v107 = &v105[1].n128_i8[4];
            }

            BYTE8(v137[0]) = 1;
            __int128 v118 = v137[1];
            *(_OWORD *)a3 = v137[0];
            *(_OWORD *)(a3 + 16) = v118;
            *(_OWORD *)(a3 + 2std::istream::~istream(v1, v2 + 8) = *(_OWORD *)((char *)&v137[1] + 12);
            *(_OWORD *)(a3 + 4std::istream::~istream(v1, v2 + 8) = v138[0];
            uint64_t v119 = v138[1];
            memset(v138, 0, 24);
            *(_OWORD *)(a3 + 64) = v119;
            unsigned int v120 = *((void *)&v138[2] + 1);
            *(void *)(a3 + 80) = v107;
            *(void *)(a3 + 8std::istream::~istream(v1, v2 + 8) = v120;
            memset((char *)&v138[1] + 8, 0, 24);
            goto LABEL_39;
          case 2147418119:
            LODWORD(v137[2]) = 1966110;
            HIWORD(v137[0]) = 0;
            LOWORD(v137[0]) = 256;
            *((void *)&v137[1] + 1) = 10000LL;
LABEL_103:
            uint64_t v25 = 1;
            BYTE8(v137[0]) = 1;
            uint64_t v63 = v137[1];
            *(_OWORD *)a3 = v137[0];
            *(_OWORD *)(a3 + 16) = v63;
            uint32_t v64 = *(_OWORD *)((char *)&v137[1] + 12);
LABEL_104:
            *(_OWORD *)(a3 + 2std::istream::~istream(v1, v2 + 8) = v64;
LABEL_105:
            *(void *)(a3 + 4std::istream::~istream(v1, v2 + 8) = 0LL;
            *(void *)(a3 + 56) = 0LL;
            memset(v138, 0, 24);
LABEL_106:
            *(void *)(a3 + 64) = 0LL;
            *(void *)(a3 + 72) = 0LL;
            *(void *)(a3 + 80) = 0LL;
            *(void *)(a3 + 8std::istream::~istream(v1, v2 + 8) = 0LL;
            memset((char *)&v138[1] + 8, 0, 24);
            break;
          default:
            if (a2 == 269)
            {
              BYTE4(v137[0]) = 1;
              BYTE8(v137[0]) = 1;
              DWORD2(v137[2]) = 1;
            }

            goto LABEL_54;
        }

        goto LABEL_107;
    }
  }

  if (a2 != 259)
  {
    if (a2 != 265)
    {
      if (a2 == 268)
      {
        if (*(_BYTE *)(a1 + 144))
        {
          uint64_t v8 = sub_1002E6BF0();
          if (((*(uint64_t (**)(uint64_t))(*(void *)v8 + 328LL))(v8) & 1) != 0)
          {
            if (qword_1008D6198 != -1) {
              dispatch_once(&qword_1008D6198, &stru_1008A4058);
            }
            uint64_t v9 = sub_10044C108((uint64_t)off_1008D6190, -1LL, 1u);
            LODWORD(v137[2]) = 2621470;
            *(_WORD *)((char *)v137 + 9) = 257;
            BYTE11(v137[0]) = 1;
            *((void *)&v137[1] + 1) = 5000LL;
            LODWORD(v137[0]) = 0x1000000;
            if ((~v9 & 6) == 0 || (v9 & 1) != 0)
            {
              strcpy((char *)&v137[2] + 2, "Z");
              BYTE7(v137[0]) = 1;
              BYTE4(v137[2]) = 1;
            }

            BYTE8(v137[0]) = 1;
            int v10 = *(_OWORD *)((char *)&v137[1] + 12);
            id v11 = v137[1];
            *(_OWORD *)a3 = v137[0];
            *(_OWORD *)(a3 + 16) = v11;
            *(_OWORD *)(a3 + 2std::istream::~istream(v1, v2 + 8) = v10;
            *(_OWORD *)(a3 + 4std::istream::~istream(v1, v2 + 8) = v138[0];
            *(void *)(a3 + 64) = *(void *)&v138[1];
            memset(v138, 0, 24);
            *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)&v138[1] + 8);
            *(void *)(a3 + 8std::istream::~istream(v1, v2 + 8) = *((void *)&v138[2] + 1);
            memset((char *)&v138[1] + 8, 0, 24);
            goto LABEL_39;
          }

          id v7 = v141[0];
          unint64_t v26 = v141[1];
          CFTypeID v27 = v141[2];
          uint64_t v25 = v142;
        }

        else
        {
          uint64_t v25 = 1;
          unint64_t v26 = 0uLL;
          CFTypeID v27 = 0uLL;
        }

        size_t v28 = v140[1];
        *(_OWORD *)a3 = v140[0];
        *(_OWORD *)(a3 + 16) = v28;
        *(_OWORD *)(a3 + 2std::istream::~istream(v1, v2 + 8) = *(_OWORD *)((char *)&v140[1] + 12);
        memset(v141, 0, 24);
        *(_OWORD *)(a3 + 4std::istream::~istream(v1, v2 + 8) = v7;
        *(_OWORD *)(a3 + 64) = v26;
        *(_OWORD *)(a3 + 80) = v27;
        memset((char *)&v141[1] + 8, 0, 24);
        goto LABEL_107;
      }

LABEL_248:
                                -[NSMutableDictionary setObject:forKey:]( v220,  "setObject:forKey:",  v204,  @"scenario");
                                continue;
                              }

                              uint64_t v174 = &v165[4 * v167];
                              uint64_t v175 = v166 & 0x3FF;
                              v176 = v174;
                              do
                              {
                                unint64_t v177 = *(unsigned int *)v174;
                                uint64_t v178 = ((&v174[4 * ((v177 >> 24) & 7)] - v165 + 8) >> 2) % v175;
                                uint64_t v174 = &v165[4 * v178];
                                v52 += v177 & 0xFFFFFF;
                              }

                              while (v178 != v168);
                              uint64_t v207 = v52;
                              uint64_t v179 = (uint64_t)cf;
                              while (2)
                              {
                                uint64_t v180 = v207 - (*(_DWORD *)v176 & 0xFFFFFF);
                                uint64_t v222 = 0LL;
                                memset(buf, 0, 28);
                                sub_10035FB10(v179, (uint64_t)v176, (uint64_t)&v222, (uint64_t)buf);
                                uint64_t v181 = v222 >> 27;
                                v206 = v176;
                                uint64_t v207 = v180;
                                if ((_DWORD)v181)
                                {
                                  uint64_t v185 = sub_1002E6E00();
                                  if ((*(unsigned int (**)(uint64_t))(*(void *)v185 + 8LL))(v185))
                                  {
                                    unsigned int v186 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"%04x ",  HIWORD(v222)));
                                    for (uint64_t j = 0LL; j != 28; j += 4LL)
                                      [v186 appendFormat:@"%02x%02x%02x%02x", *(_DWORD *)&buf[j], BYTE1(*(_DWORD *)&buf[j]), BYTE2(*(_DWORD *)&buf[j]), HIBYTE(*(_DWORD *)&buf[j])];
                                    v188 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v180));
                                    v189 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  v181));
                                    uint64_t v190 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  BYTE4(v222)));
                                    v184 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v188,  @"timestamp",  v189,  @"source",  v190,  @"event_number",  v186,  @"data",  0LL));

                                    goto LABEL_231;
                                  }

                                  v184 = 0LL;
                                }

                                else
                                {
                                  int v182 = BYTE4(v222);
                                  if (BYTE4(v222) >= 0x19u)
                                  {
                                    BOOL v183 = (os_log_s *)qword_1008F7568;
                                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                                    {
                                      *(_DWORD *)uint64_t v225 = 67109120;
                                      int v226 = v182;
                                      _os_log_error_impl( (void *)&_mh_execute_header,  v183,  OS_LOG_TYPE_ERROR,  "processCrashLogForAnalytics: Invalid scenarioType %d",  v225,  8u);
                                    }

                                    v184 = 0LL;
LABEL_234:

                                    uint64_t v179 = (uint64_t)cf;
                                    unint64_t v192 = *((unsigned int *)cf + 6);
                                    uint64_t v193 = ((&v206[4 * (v206[3] & 7)] - v165 + 8) >> 2) % (int64_t)(v192 & 0x3FF);
                                    v176 = &v165[4 * v193];
                                    if (v193 == ((v192 >> 10) & 0x3FF)) {
                                      goto LABEL_210;
                                    }
                                    continue;
                                  }

                                  unsigned int v186 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v180));
                                  v188 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  off_1008D9410[v182]));
                                  if ((v222 & 0x1000000000000LL) != 0) {
                                    v191 = "ON";
                                  }
                                  else {
                                    v191 = "OFF";
                                  }
                                  v189 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  v191));
                                  v184 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v186,  @"timestamp",  v188,  @"scenario",  v189,  @"state",  0LL));
LABEL_231:
                                }

                                break;
                              }

                              -[NSMutableArray addObject:](v205, "addObject:", v184);
                              goto LABEL_234;
                            }
                          }

                          uint64_t v156 = qword_1008F7568;
                          if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)tm buf = 67109634;
                            *(_DWORD *)&uint8_t buf[4] = HIDWORD(valuePtr);
                            *(_WORD *)&uint8_t buf[8] = 1024;
                            *(_DWORD *)&buf[10] = valuePtr;
                            *(_WORD *)&_BYTE buf[14] = 2112;
                            *(void *)&uint8_t buf[16] = v219;
                            int v61 = (os_log_s *)v156;
                            __int16 v62 = "processCrashLogForAnalytics: Invalid scenario information section offset (%d) and size (%d) in %@";
                            goto LABEL_199;
                          }
                        }

                        else
                        {
                          uint64_t v157 = qword_1008F7568;
                          if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)tm buf = 138412290;
                            *(void *)&uint8_t buf[4] = v219;
                            int v61 = (os_log_s *)v157;
                            __int16 v62 = "processCrashLogForAnalytics: Unable to convert scenario information section size in %@";
                            goto LABEL_63;
                          }
                        }
                      }

                      else
                      {
                        uint64_t v152 = qword_1008F7568;
                        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)tm buf = 138412290;
                          *(void *)&uint8_t buf[4] = v219;
                          int v61 = (os_log_s *)v152;
                          __int16 v62 = "processCrashLogForAnalytics: Invalid scenario information section size in %@";
                          goto LABEL_63;
                        }
                      }
                    }

                    else
                    {
                      uint64_t v153 = qword_1008F7568;
                      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)tm buf = 138412290;
                        *(void *)&uint8_t buf[4] = v219;
                        int v61 = (os_log_s *)v153;
                        __int16 v62 = "processCrashLogForAnalytics: Unable to convert scenario information section offset in %@";
                        goto LABEL_63;
                      }
                    }
                  }

                  else
                  {
                    uint64_t v132 = qword_1008F7568;
                    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      int v61 = (os_log_s *)v132;
                      __int16 v62 = "processCrashLogForAnalytics: Invalid scenario information section offset in %@";
                      goto LABEL_63;
                    }
                  }
                }
              }

              else
              {
                uint64_t v67 = qword_1008F7568;
                if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)tm buf = 138412290;
                  *(void *)&uint8_t buf[4] = v219;
                  int v61 = (os_log_s *)v67;
                  __int16 v62 = "processCrashLogForAnalytics: Could not convert crash log section signature in %@";
                  goto LABEL_63;
                }
              }
            }

            else
            {
              uint64_t v65 = qword_1008F7568;
              if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)tm buf = 138412290;
                *(void *)&uint8_t buf[4] = v219;
                int v61 = (os_log_s *)v65;
                __int16 v62 = "processCrashLogForAnalytics: Invalid crash log section signature in %@";
                goto LABEL_63;
              }
            }
          }

          else
          {
            uint64_t v66 = qword_1008F7568;
            if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)tm buf = 138412290;
              *(void *)&uint8_t buf[4] = v219;
              int v61 = (os_log_s *)v66;
              __int16 v62 = "processCrashLogForAnalytics: Could not convert crash log section name in %@";
              goto LABEL_63;
            }
          }
        }
      }
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100671BDC();
    }
LABEL_251:
    CFRelease(theDict);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100671B78();
    }
    uint64_t v220 = 0LL;
  }

  return v220;
}

void sub_10035F798( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *a40, void *a41, void *a42, void *a43, _Unwind_Exception *exception_object)
{
}

uint64_t sub_10035FB10(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = *(_DWORD *)(result + 24) & 0x3FF;
  uint64_t v6 = result + 28;
  uint64_t v7 = (a2 - (result + 28)) >> 2;
  char v8 = 1;
  do
  {
    *(_DWORD *)(a3 + 4 * v4) = *(_DWORD *)(v6 + 4 * v7);
    char v9 = v8;
    uint64_t v7 = (v7 + 1) % v5;
    uint64_t v4 = 1LL;
    char v8 = 0;
  }

  while ((v9 & 1) != 0);
  if ((*(_BYTE *)(a2 + 3) & 7) != 0)
  {
    unint64_t v10 = 0LL;
    do
    {
      *(_DWORD *)(a4 + 4 * v10) = *(_DWORD *)(v6 + 4 * v7);
      uint64_t v7 = (v7 + 1) % v5;
      ++v10;
    }

    while (v10 < (*(_BYTE *)(a2 + 3) & 7u));
  }

  return result;
}

void sub_10035FB8C(id a1)
{
  if (qword_1008D67D8 != -1) {
    dispatch_once(&qword_1008D67D8, &stru_100892EB0);
  }
  sub_10035FBCC(qword_1008D67D0);
}

uint64_t sub_10035FBCC(uint64_t a1)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 64);
  uint64_t v2 = *(void *)(a1 + 48);
  while (v2 != *(void *)(a1 + 40))
  {
    uint64_t v4 = *(void *)(v2 - 8);
    v2 -= 8LL;
    uint64_t v3 = v4;
    unsigned int v5 = *(_DWORD *)(v4 + 24) - 8194;
    BOOL v6 = v5 > 0xE;
    int v7 = (1 << v5) & 0x409B;
    if (!v6 && v7 != 0) {
      goto LABEL_7;
    }
  }

  uint64_t v3 = 0LL;
LABEL_7:
  uint64_t v9 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 8LL))(v9)
    && (uint64_t v10 = sub_1002E6BF0(), ((*(uint64_t (**)(uint64_t))(*(void *)v10 + 328LL))(v10) & 1) != 0))
  {
    if (*(_BYTE *)(a1 + 448))
    {
      id v11 = (os_log_s *)qword_1008F7568;
      if (v3)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
        {
          id v12 = *(id *)(v3 + 8);
          *(_DWORD *)tm buf = 138543362;
          id v16 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "triggerW1AWDDiagnosticsEvent: Requesting AWD metrics from device %{public}@",  buf,  0xCu);
        }

        buf[0] = 0;
        sub_100242CA4(buf);
        if (sub_10007F92C((unsigned __int8 *)(v3 + 16), 0x20u, 0, 0LL)
          && os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
        {
          sub_100671C98();
        }

        sub_100242CD0(buf);
        sub_100242CD8(buf);
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
      {
        sub_100671C6C();
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
    {
      sub_100671C40();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
  {
    sub_100671CF8();
  }

  return sub_100242FAC((uint64_t)v14);
}

void sub_10035FDD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10035FE00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v21[0] = 0LL;
  v21[1] = 0LL;
  sub_100242F28((uint64_t)v21, v1 + 64);
  uint64_t v2 = *(void *)(v1 + 48);
  while (v2 != *(void *)(v1 + 40))
  {
    uint64_t v3 = *(void *)(v2 - 8);
    v2 -= 8LL;
    unsigned int v4 = *(_DWORD *)(v3 + 24) - 8194;
    BOOL v5 = v4 > 0xE;
    int v6 = (1 << v4) & 0x409B;
    if (!v5 && v6 != 0)
    {
      char v8 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = BYTE1(dword_1008F0490);
        int v17 = *(unsigned __int8 *)(v1 + 415);
        uint64_t v18 = sub_1001EDE10(v1 + 409, v9, v10, v11, v12, v13, v14, v15);
        *(_DWORD *)tm buf = 67109634;
        int v23 = v16;
        __int16 v24 = 1024;
        int v25 = v17;
        __int16 v26 = 2080;
        uint64_t v27 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "retransBuddyCMD: Buddy CMD type -> %d, numOfBuddyRetrans -> %d, Remote addr -> addr %s ",  buf,  0x18u);
      }

      buf[0] = 0;
      sub_100242CA4(buf);
      int v19 = sub_10007F92C( (unsigned __int8 *)(v1 + 409),  4u,  byte_1008F0499,  (unsigned __int8 *)&dword_1008F0490);
      sub_100242CD0(buf);
      if (v19 && os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_100671D50();
      }
      ++*(_BYTE *)(v1 + 415);
      sub_100242CD8(buf);
      return sub_100242FAC((uint64_t)v21);
    }
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_100671D24();
  }
  return sub_100242FAC((uint64_t)v21);
}

void sub_10035FFC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10035FFF0(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7)
{
  char v31 = 0;
  uint64_t __src = 0LL;
  if (*(_BYTE *)(a1 + 448))
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100892ED0);
    }
    int v20 = *(_DWORD *)a2;
    LOWORD(v21) = *(_WORD *)(a2 + 4);
    uint64_t v14 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v20, 1);
    uint64_t v15 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 67110144;
      int v21 = a3;
      __int16 v22 = 1024;
      int v23 = a4;
      __int16 v24 = 1024;
      int v25 = a5;
      __int16 v26 = 1024;
      int v27 = a6;
      __int16 v28 = 1024;
      int v29 = a7;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "syncCrashLogWithBuddyComamnd, Command Type %d, side %d , offset %d , len %d, logType %d",  (uint8_t *)&v20,  0x20u);
    }

    if (sub_1003D0670((uint64_t)v14))
    {
      unsigned int v16 = sub_100360250(a1, (uint64_t)&__src, a3, a4, a5, a6, a7);
      if (!v16) {
        goto LABEL_16;
      }
      unsigned int v17 = v16;
      LOBYTE(v20) = 0;
      sub_100242CA4(&v20);
      int v18 = sub_10007F92C((unsigned __int8 *)a2, 4u, v17, (unsigned __int8 *)&__src);
      memcpy(&dword_1008F0490, &__src, v17);
      byte_1008F0499 = v17;
      __int16 v19 = *(_WORD *)(a2 + 4);
      *(_DWORD *)(a1 + 409) = *(_DWORD *)a2;
      *(_WORD *)(a1 + 413) = v19;
      *(_BYTE *)(a1 + 415) = 0;
      sub_100242CD0(&v20);
      sub_100242CD8(&v20);
      if (v18)
      {
LABEL_16:
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
          sub_100670DB8();
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
    {
      sub_100671DB0();
    }
  }

void sub_100360234( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_100360250(uint64_t a1, uint64_t a2, int a3, char a4, __int16 a5, __int16 a6, char a7)
{
  switch(a3)
  {
    case 0:
      int v9 = dword_1008D94E0;
      *(_BYTE *)(a2 + 4) = byte_1008D94E4;
      *(_DWORD *)a2 = v9;
      goto LABEL_6;
    case 1:
      *(_BYTE *)(a2 + 4) = 0;
      *(_DWORD *)a2 = 67139584;
LABEL_6:
      uint64_t result = 5LL;
      break;
    case 2:
      int v11 = 50364416;
      goto LABEL_11;
    case 3:
      byte_1008D95B8 = a7;
      byte_1008D95B9 = HIBYTE(a5);
      byte_1008D95BA = a5;
      byte_1008D95BB = HIBYTE(a6);
      byte_1008D95BC = a6;
      uint64_t v12 = unk_1008D95B4;
      *(_BYTE *)(a2 + std::istream::~istream(v1, v2 + 8) = a6;
      *(void *)a2 = v12;
      uint64_t result = 9LL;
      break;
    case 4:
      int v11 = 50364928;
      goto LABEL_11;
    case 5:
      int v11 = 50365440;
LABEL_11:
      *(_DWORD *)a2 = v11;
      uint64_t result = 4LL;
      break;
    case 6:
      word_1008D95C1 = bswap32(*(unsigned __int16 *)(a1 + 139)) >> 16;
      byte_1008D95C3 = *(_BYTE *)(a1 + 141);
      int v13 = dword_1008D95BD;
      *(_DWORD *)(a2 + 3) = *(int *)((char *)&dword_1008D95BD + 3);
      *(_DWORD *)a2 = v13;
      uint64_t result = 7LL;
      break;
    case 7:
      dword_1008D95CC = bswap32(*(_DWORD *)(a1 + 142));
      *(void *)a2 = unk_1008D95C8;
      uint64_t result = 8LL;
      break;
    default:
      uint64_t result = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        sub_100671DDC();
        uint64_t result = 0LL;
      }

      break;
  }

  *(_BYTE *)a2 = a4;
  return result;
}

void sub_1003603CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = sub_100353AEC(a1, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    unsigned __int8 v8 = atomic_load((unsigned __int8 *)&qword_1008F09A8);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1008F09A8))
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet alphanumericCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "alphanumericCharacterSet"));
      qword_1008F09A0 = objc_claimAutoreleasedReturnValue([v15 invertedSet]);

      __cxa_guard_release(&qword_1008F09A8);
    }

    int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)v7 componentsSeparatedByCharactersInSet:qword_1008F09A0]);
    id v16 = (id)objc_claimAutoreleasedReturnValue([v9 componentsJoinedByString:&stru_1008A57D8]);

    id v10 = [v16 length];
    if ((unint64_t)v10 >= 0x101)
    {
      uint64_t v11 = objc_claimAutoreleasedReturnValue([v16 substringToIndex:256]);

      id v16 = (id)v11;
    }

    uint64_t v12 = sub_1003606A0((uint64_t)v10, a4);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + sub_100242FAC(v1 - 32) = 0u;
    *(_OWORD *)(a2 + 4std::istream::~istream(v1, v2 + 8) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 12std::istream::~istream(v1, v2 + 8) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 20std::istream::~istream(v1, v2 + 8) = 0u;
    *(_OWORD *)(a2 + sub_100328D20(v2 - 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    int v13 = *(unsigned __int8 *)(v7 + 40);
    if (v13 == 8)
    {
      sprintf( (char *)a2, "/private/var/mobile/Library/Logs/Bluetooth/Accessory_Trace_%s_%s_%c_%d_%d_%d_%d_%d_%d.bin", [v16 UTF8String], v12);
    }

    else
    {
      uint64_t v14 = v16;
      if (v13 != 7)
      {
LABEL_11:

        return;
      }

      sprintf( (char *)a2, "/private/var/mobile/Library/Logs/Bluetooth/Accessory_Crash_%s_%s_%c_%d_%d_%d_%d_%d_%d.bin", [v16 UTF8String], v12);
    }

    uint64_t v14 = v16;
    goto LABEL_11;
  }

void sub_1003605E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  __cxa_guard_abort(&qword_1008F09A8);
  _Unwind_Resume(a1);
}

void sub_100360628(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(a1 + 424);
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](&OBJC_CLASS___NSString, "stringWithCString:encoding:", a2, 4LL));
    [v2 addObject:];
  }

void sub_10036068C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

const char *sub_1003606A0(uint64_t a1, int a2)
{
  int v2 = a2 - 1;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_100671E3C();
  }
  return "Unknown";
}

void sub_100360718(uint64_t a1, void *a2)
{
  id v15 = a2;
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100892EF0);
  }
  uint64_t v2 = sub_100221798((uint64_t)off_1008D60D8);
  if (*(void *)(a1 + 24))
  {
    uint64_t v13 = v2;
    __int128 __p = 0LL;
    int v21 = 0LL;
    uint64_t v22 = 0LL;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v3 = v15;
    id v4 = [v3 countByEnumeratingWithState:&v16 objects:v24 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v17;
      do
      {
        for (CFIndex i = 0LL; i != v4; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v17 != v5) {
            objc_enumerationMutation(v3);
          }
          id v7 = *(id *)(*((void *)&v16 + 1) + 8LL * (void)i);
          unsigned __int8 v8 = (char *)[v7 UTF8String];
          int v9 = (os_log_s *)qword_1008F7568;
          if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)tm buf = 136315138;
            *(void *)&uint8_t buf[4] = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "sendLogCompleteCallback: Sending filename %s",  buf,  0xCu);
          }

          size_t v10 = strlen(v8);
          *(void *)tm buf = &__p;
          if (v8 != &v8[v10 + 1])
          {
            size_t v11 = v10 + 1;
            do
            {
              sub_100360D7C((unint64_t **)buf, v8++);
              --v11;
            }

            while (v11);
          }
        }

        id v4 = [v3 countByEnumeratingWithState:&v16 objects:v24 count:16];
      }

      while (v4);
    }

    if (v21 == __p) {
      uint64_t v12 = "";
    }
    else {
      uint64_t v12 = (const char *)__p;
    }
    sub_10022A2E4(v13, *(void *)(a1 + 24), 64, v12, v21 - (_BYTE *)__p);
    *(void *)(a1 + 24) = 0LL;
    if (__p)
    {
      int v21 = __p;
      operator delete(__p);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
  {
    sub_100671E9C();
  }
}

void sub_10036097C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1003609D4(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = 0LL;
  int v5 = *(_DWORD *)(a2 + 128);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 132);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = a3;
  *(void *)(a1 + sub_100242FAC(v1 - 32) = 0LL;
  *(void *)(a1 + 4std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  sub_1003D0100(a2, (uint64_t)__p);
  if (v18 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  uint64_t v7 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v6));
  unsigned __int8 v8 = *(void **)a1;
  *(void *)a1 = v7;

  if (v18 < 0) {
    operator delete(__p[0]);
  }
  sub_1003CF00C(a2, __p);
  if (v18 >= 0) {
    int v9 = __p;
  }
  else {
    int v9 = (void **)__p[0];
  }
  uint64_t v10 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v9));
  size_t v11 = *(void **)(a1 + 8);
  *(void *)(a1 + std::istream::~istream(v1, v2 + 8) = v10;

  if (v18 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = objc_opt_new(&OBJC_CLASS___NSMutableOrderedSet);
  uint64_t v13 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = v12;

  uint64_t v14 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  id v15 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = v14;

  sub_10035A15C(a1);
  return a1;
}

void sub_100360B10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100360B78(uint64_t a1)
{
  uint64_t v2 = *(FILE **)(a1 + 64);
  if (v2) {
    fclose(v2);
  }

  return a1;
}

void sub_100360BE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100360C28(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_100360C58(_Unwind_Exception *a1)
{
}

void sub_100360C6C(id a1)
{
  uint64_t v1 = operator new(0x1B0uLL);
  sub_100213528((uint64_t)v1);
  off_1008D9110 = v1;
}

void sub_100360C9C(_Unwind_Exception *a1)
{
}

void sub_100360CB0(id a1)
{
  uint64_t v1 = operator new(0x1C8uLL);
  sub_100352864((uint64_t)v1);
  qword_1008D67D0 = (uint64_t)v1;
}

void sub_100360CE0(_Unwind_Exception *a1)
{
}

void sub_100360CF4(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_100360D24(_Unwind_Exception *a1)
{
}

void sub_100360D38(id a1)
{
  uint64_t v1 = operator new(0x2C8uLL);
  sub_100213DA8();
  off_1008D60D8 = v1;
}

void sub_100360D68(_Unwind_Exception *a1)
{
}

unint64_t **sub_100360D7C(unint64_t **a1, _BYTE *a2)
{
  id v4 = *a1;
  uint64_t v6 = (_BYTE *)(*a1)[1];
  unint64_t v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    int v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0LL;
    }
    uint64_t v14 = (char *)(v13 + v12);
    v9[v13] = *a2;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (_BYTE *)v8)
    {
      v13 += (unint64_t)v9;
    }

    else
    {
      id v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }

      while (v6 != (_BYTE *)v8);
      uint64_t v6 = (_BYTE *)*v4;
    }

    unint64_t *v4 = v13;
    v4[1] = v7;
    void v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }

  else
  {
    _BYTE *v6 = *a2;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }

  v4[1] = v7;
  return a1;
}

  ;
}

  ;
}

id sub_100360EAC(uint64_t a1)
{
  return *(id *)(a1 + 8);
}

uint64_t sub_100360EB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1001EDE10(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_100360EC0(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(void *)(a2 + 4) = 1752392040LL;
  *(_WORD *)(a2 + 12) = 2081;
  *(void *)(a2 + 14) = result;
  return result;
}

  ;
}

int *sub_100360EEC()
{
  return __error();
}

  ;
}

uint64_t sub_100360F0C()
{
  uint64_t v0 = (const __CFDictionary *)_CFCopySystemVersionDictionary();
  if (!v0) {
    return 288LL;
  }
  uint64_t v1 = v0;
  int Value = (const __CFString *)CFDictionaryGetValue(v0, _kCFSystemVersionProductVersionKey);
  if (Value)
  {
    id v3 = Value;
    id v4 = (const __CFString *)CFDictionaryGetValue(v1, _kCFSystemVersionProductVersionExtraKey);
    if (v4) {
      unint64_t v5 = v4;
    }
    else {
      unint64_t v5 = @"0";
    }
    Intint Value = CFStringGetIntValue(v3);
    int v7 = (int)(CFStringGetDoubleValue(v3) * 10.0) % 10;
    uint64_t v8 = CFStringGetIntValue(v5) | (IntValue << 8) | (16 * v7);
  }

  else
  {
    uint64_t v8 = 288LL;
  }

  CFRelease(v1);
  return v8;
}

uint64_t sub_100360FE0()
{
  return 76LL;
}

uint64_t sub_100360FE8()
{
  uint64_t v0 = (int)sub_100361020() - 105LL;
  else {
    return dword_1006C222C[v0];
  }
}

uint64_t sub_100361020()
{
  __int128 v3 = xmmword_1006C2178;
  int v4 = 1839812531;
  if (MGIsDeviceOfType(&v3))
  {
    uint64_t v0 = &off_1008D9000;
    uint64_t result = 148LL;
  }

  else
  {
    int v4 = -435113336;
    __int128 v3 = xmmword_1006C218C;
    if (MGIsDeviceOfType(&v3))
    {
      uint64_t v0 = &off_1008D9000;
      uint64_t result = 149LL;
    }

    else
    {
      int v4 = 1899561076;
      __int128 v3 = xmmword_1006C21DC;
      if (MGIsDeviceOfType(&v3))
      {
        uint64_t v0 = &off_1008D9000;
        uint64_t result = 137LL;
      }

      else
      {
        int v4 = 1425254930;
        __int128 v3 = xmmword_1006C21F0;
        if (MGIsDeviceOfType(&v3))
        {
          uint64_t v0 = &off_1008D9000;
          uint64_t result = 138LL;
        }

        else
        {
          int v4 = -1997581659;
          __int128 v3 = xmmword_1006C21A0;
          if (MGIsDeviceOfType(&v3))
          {
            uint64_t v0 = &off_1008D9000;
            uint64_t result = 150LL;
          }

          else
          {
            int v4 = 688565114;
            __int128 v3 = xmmword_1006C21B4;
            if (MGIsDeviceOfType(&v3))
            {
              uint64_t v0 = &off_1008D9000;
              uint64_t result = 105LL;
            }

            else
            {
              int v4 = -584398440;
              __int128 v3 = xmmword_1006C2204;
              if (MGIsDeviceOfType(&v3))
              {
                uint64_t v0 = &off_1008D9000;
                uint64_t result = 156LL;
              }

              else
              {
                int v4 = -1441055153;
                __int128 v3 = xmmword_1006C21C8;
                if (MGIsDeviceOfType(&v3))
                {
                  uint64_t v0 = &off_1008D9000;
                  uint64_t result = 158LL;
                }

                else
                {
                  int v4 = -879476163;
                  __int128 v3 = xmmword_1006C2218;
                  char v2 = MGIsDeviceOfType(&v3);
                  uint64_t v0 = &off_1008D9000;
                  if ((v2 & 1) == 0) {
                    return dword_1008D95D0;
                  }
                  uint64_t result = 157LL;
                }
              }
            }
          }
        }
      }
    }
  }

  *((_DWORD *)v0 + 372) = result;
  return result;
}

void sub_100361240(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_1008F09D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1008F09D8))
  {
    xmmword_1008F09C0 = 0uLL;
    unk_1008F09D0 = 0LL;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1008F09C0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1008F09D8);
  }

  if (qword_1008F09E0 != -1) {
    dispatch_once(&qword_1008F09E0, &stru_1008931A0);
  }
  if (byte_1008F09D7 < 0)
  {
    sub_100024238((_BYTE *)a1, (void *)xmmword_1008F09C0, *((unint64_t *)&xmmword_1008F09C0 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_1008F09C0;
    *(void *)(a1 + 16) = unk_1008F09D0;
  }

void sub_100361318(id a1)
{
  __int128 v8 = 0uLL;
  int v9 = 0;
  __int128 v10 = xmmword_1006C21DC;
  LODWORD(v11[0]) = 1899561076;
  if (MGIsDeviceOfType(&v10))
  {
    int v9 = 1899561076;
    __int128 v8 = xmmword_1006C21DC;
  }

  LODWORD(v11[0]) = 1425254930;
  __int128 v10 = xmmword_1006C21F0;
  if (MGIsDeviceOfType(&v10))
  {
    int v9 = 1425254930;
    __int128 v8 = xmmword_1006C21F0;
  }

  LODWORD(v11[0]) = -584398440;
  __int128 v10 = xmmword_1006C2204;
  if (MGIsDeviceOfType(&v10))
  {
    int v9 = -584398440;
    __int128 v8 = xmmword_1006C2204;
  }

  LODWORD(v11[0]) = -879476163;
  __int128 v10 = xmmword_1006C2218;
  if (MGIsDeviceOfType(&v10))
  {
    int v9 = -879476163;
    __int128 v8 = xmmword_1006C2218;
  }

  uint64_t v16 = 0LL;
  __int128 v14 = 0u;
  memset(v15, 0, sizeof(v15));
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  memset(v11, 0, sizeof(v11));
  __int128 v10 = 0u;
  sub_1001FCFC8((uint64_t)&v10);
  uint64_t v1 = 0LL;
  char v2 = 1;
  do
  {
    uint64_t v3 = *(void *)&v11[0];
    *(_DWORD *)((char *)v11 + *(void *)(*(void *)&v11[0] - 24LL) + std::istream::~istream(v1, v2 + 8) = *(_DWORD *)((_BYTE *)v11
                                                                                      + *(void *)(*(void *)&v11[0]
                                                                                                  - 24LL)
                                                                                      + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v11 + *(void *)(v3 - 24) + 8) |= 0x4000u;
    v7.__r_.__value_.__s.__data_[0] = 48;
    int v4 = sub_100361614(v11, (unsigned __int8 *)&v7);
    *(void *)((char *)v4 + *(void *)(*v4 - 24LL) + 24) = 2LL;
    int v5 = *((unsigned __int8 *)&v8 + v1);
    std::ostream::operator<<(v4, *((unsigned __int8 *)&v8 + v1));
    v2 &= v5 == 0;
    ++v1;
  }

  while (v1 != 20);
  if ((v2 & 1) == 0)
  {
    std::stringbuf::str(&v7, (const std::stringbuf *)((char *)v11 + 8));
    if (byte_1008F09C0[23] < 0) {
      operator delete(*(void **)byte_1008F09C0);
    }
    *(std::stringbuf::string_type *)byte_1008F09C0 = v7;
  }

  *(void *)((char *)&v11[-1]
  *(void *)&v11[0] = v6;
  if (SHIBYTE(v13) < 0) {
    operator delete(*((void **)&v12 + 1));
  }
  std::streambuf::~streambuf((char *)v11 + 8);
  std::ios::~ios(v15);
}

void sub_1003615F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void *sub_100361614(void *a1, unsigned __int8 *a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24LL);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
    int v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32LL);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }

  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_1003616A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_100361730(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___BTVCLinkAgent);
  char v2 = (void *)qword_1008F7278;
  qword_1008F7278 = (uint64_t)v1;
}

void sub_1003617E0(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_DEFAULT, 0);
  int v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.bluetoothd.BTVCLinkAgent", v4);
  uint64_t v3 = (void *)qword_1008F09F0;
  qword_1008F09F0 = (uint64_t)v2;
}

void sub_1003618EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_BYTE *sub_100361954(uint64_t a1)
{
  uint64_t result = *(_BYTE **)(a1 + 32);
  if (!result[8]) {
    return [result _activate];
  }
  return result;
}

void sub_100361A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100361B00(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_100362018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10036213C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100362260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003624FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100362730(id a1, NSError *a2)
{
  dispatch_queue_t v2 = a2;
  if (v2)
  {
    uint64_t v3 = (os_log_s *)qword_1008F7710;
    if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138412290;
      int v5 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Warning: [BTVCLinkAgent] ### Start BTVCLink advertiser failed: %@\n",  (uint8_t *)&v4,  0xCu);
    }
  }
}

void sub_1003629B8(_Unwind_Exception *a1)
{
}

void sub_1003629E0(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  __int128 v12 = (os_log_s *)qword_1008F7710;
  if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 138412546;
    id v16 = v9;
    __int16 v17 = 2112;
    id v18 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[BTVCLinkAgent] Receive ADV data %@ from %@\n",  (uint8_t *)&v15,  0x16u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  __int128 v14 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _receivedAdvReport:a2 withData:v9 fromPeer:v10 peerInfo:v11];
  }
}

void sub_100362AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100362B1C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    uint64_t v3 = (os_log_s *)qword_1008F7710;
    if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138412290;
      int v5 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Warning: #[BTVCLinkAgent] ## Start BTVCLink scanner failed: %@\n",  (uint8_t *)&v4,  0xCu);
    }
  }
}

void sub_1003637C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22)
{
  _Unwind_Resume(a1);
}

id sub_100363908(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 64LL) = 1;
  return [*(id *)(a1 + 32) _update];
}

id sub_100363974(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 64LL) = 0;
  return [*(id *)(a1 + 32) _update];
}

double sub_1003639FC(uint64_t a1)
{
  *(void *)a1 = off_100893278;
  *(_WORD *)(a1 + std::istream::~istream(v1, v2 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 1;
  *(void *)(a1 + sub_100242FAC(v1 - 32) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 16) = a1 + 24;
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8std::istream::~istream(v1, v2 + 8) = 0u;
  *(void *)(a1 + 104) = 0LL;
  return result;
}

void sub_100363A40(uint64_t a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_1008932B8);
  }
  sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1);
}

void sub_100363A94(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)tm buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stack did start", buf, 2u);
  }

  uint64_t v3 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100363B7C;
  v5[3] = &unk_10087EB20;
  void v5[4] = a1;
  sub_1004054B4(v3, v5);
  int v4 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)tm buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Initialized L2CAPChannel.", buf, 2u);
  }

_BYTE *sub_100363B7C(_BYTE *result)
{
  uint64_t v1 = *((void *)result + 4);
  *(_BYTE *)(v1 + std::istream::~istream(v1, v2 + 8) = 1;
  uint64_t v2 = *(void **)(v1 + 16);
  uint64_t v3 = (void *)(v1 + 24);
  if (v2 != (void *)(v1 + 24))
  {
    do
    {
      uint64_t v4 = v2[5];
      int v5 = *(uint64_t **)(v4 + 8);
      while (v5 != *(uint64_t **)(v4 + 16))
      {
        uint64_t v6 = *v5;
        if (*(_BYTE *)(*v5 + 4))
        {
          ++v5;
        }

        else
        {
          char v21 = 0;
          sub_100242CA4(&v21);
          int v7 = *(unsigned __int8 *)(v6 + 56);
          if (v7 == 1)
          {
            if (!sub_1001BEB38()) {
              return sub_100242CD8(&v21);
            }
            int v7 = *(unsigned __int8 *)(v6 + 56);
          }

          int v8 = *(unsigned __int16 *)(v6 + 2);
          if (v7) {
            int v9 = sub_10017A84C(v8, (uint64_t)sub_100363ECC);
          }
          else {
            int v9 = sub_10017A6F0(v8, (uint64_t)sub_100363DCC);
          }
          int v10 = v9;
          if (v9)
          {
            id v11 = (os_log_s *)qword_1008F7610;
            if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR))
            {
              int v14 = *(unsigned __int16 *)(v6 + 2);
              sub_100494958(v2[4], (uint64_t)__p);
              int v15 = __p;
              if (v20 < 0) {
                int v15 = (void **)__p[0];
              }
              *(_DWORD *)tm buf = 67109634;
              int v23 = v14;
              __int16 v24 = 2082;
              int v25 = v15;
              __int16 v26 = 1024;
              int v27 = v10;
              _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Failed to re-register endpoint with psm 0x%04x after power cycle, for session %{public}s with result %{bluetooth:OI_STATUS}u",  buf,  0x18u);
              if (v20 < 0) {
                operator delete(__p[0]);
              }
            }

            __int128 v12 = *(uint64_t **)(v4 + 16);
            uint64_t v13 = (char *)v12 - (char *)(v5 + 1);
            if (v12 != v5 + 1) {
              memmove(v5, v5 + 1, (char *)v12 - (char *)(v5 + 1));
            }
            *(void *)(v4 + 16) = (char *)v5 + v13;
          }

          else
          {
            ++v5;
          }

          double result = sub_100242CD8(&v21);
        }
      }

      id v16 = (void *)v2[1];
      if (v16)
      {
        do
        {
          __int16 v17 = v16;
          id v16 = (void *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          __int16 v17 = (void *)v2[2];
          BOOL v18 = *v17 == (void)v2;
          uint64_t v2 = v17;
        }

        while (!v18);
      }

      uint64_t v2 = v17;
    }

    while (v17 != v3);
  }

  return result;
}

void sub_100363DA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_100363DCC(int a1, uint64_t a2, int a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109376;
    int v12 = a1;
    __int16 v13 = 1024;
    int v14 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "l2capConnectInd for PSM: 0x%0x, CID: 0x%x",  buf,  0xEu);
  }

  uint64_t v7 = sub_100404FE8();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_100368FFC;
  v8[3] = &unk_10087EB68;
  __int16 v9 = a1;
  void v8[4] = a2;
  __int16 v10 = a3;
  sub_100405384(v7, v8);
}

void sub_100363ECC(__int16 a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  __int16 v10 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = "";
    if (a4) {
      id v11 = ", wakeUpEvent";
    }
    *(_DWORD *)tm buf = 67109378;
    int v18 = a3;
    __int16 v19 = 2080;
    char v20 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Queueing initial data on channel 0x%04x as the L2CAP Channel hasn't finished registration%s",  buf,  0x12u);
  }

  uint64_t v12 = sub_100404FE8();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100367874;
  void v13[3] = &unk_100889658;
  __int16 v14 = a1;
  __int16 v15 = a3;
  char v16 = a4;
  _OWORD v13[4] = a2;
  void v13[5] = a5;
  sub_100405384(v12, v13);
}

void sub_100363FF8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)tm buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "L2CAPChannelManager::stackWillStop enter",  buf,  2u);
  }

  uint64_t v3 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1003640E0;
  v5[3] = &unk_10087EB20;
  void v5[4] = a1;
  sub_1004054B4(v3, v5);
  uint64_t v4 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)tm buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "L2CAPChannelManager::stackWillStop exit",  buf,  2u);
  }

_BYTE *sub_1003640E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  char v32 = 0;
  sub_100242CA4(&v32);
  uint64_t v3 = (uint64_t **)(v1 + 16);
  uint64_t v2 = *(uint64_t **)(v1 + 16);
  *(_BYTE *)(v1 + std::istream::~istream(v1, v2 + 8) = 0;
  uint64_t v4 = (uint64_t *)(v1 + 24);
  if (v2 != (uint64_t *)(v1 + 24))
  {
    uint64_t v28 = v1;
    int v29 = (uint64_t *)(v1 + 24);
    int v27 = (uint64_t **)(v1 + 16);
    do
    {
      uint64_t v5 = v2[5];
      uint64_t v6 = *(uint64_t **)(v5 + 8);
      while (v6 != *(uint64_t **)(v5 + 16))
      {
        uint64_t v7 = *v6;
        int v8 = *(__int16 **)(*v6 + 120);
        if (v8 != *(__int16 **)(*v6 + 128))
        {
          do
          {
            uint64_t v9 = sub_10024F00C();
            sub_100252278(v9, *v8);
            v8 += 13;
          }

          while (v8 != *(__int16 **)(v7 + 128));
          int v8 = *(__int16 **)(v7 + 120);
        }

        *(void *)(v7 + 12std::istream::~istream(v1, v2 + 8) = v8;
        if (*(_BYTE *)(v7 + 4))
        {
          __int16 v10 = (os_log_s *)qword_1008F7610;
          if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
          {
            int v11 = *(unsigned __int16 *)(v7 + 2);
            sub_100494958(v2[4], (uint64_t)__p);
            uint64_t v12 = __p;
            if (v31 < 0) {
              uint64_t v12 = (void **)__p[0];
            }
            *(_DWORD *)tm buf = 67109378;
            int v34 = v11;
            __int16 v35 = 2082;
            int v36 = v12;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Clearing out outgoing connections to PSM 0x%04x for session %{public}s",  buf,  0x12u);
            if (v31 < 0) {
              operator delete(__p[0]);
            }
          }

          __int16 v13 = *(uint64_t **)(v5 + 16);
          uint64_t v14 = (char *)v13 - (char *)(v6 + 1);
          if (v13 != v6 + 1) {
            memmove(v6, v6 + 1, (char *)v13 - (char *)(v6 + 1));
          }
          *(void *)(v5 + 16) = (char *)v6 + v14;
          __int16 v15 = *(void **)(v7 + 120);
          if (v15)
          {
            *(void *)(v7 + 12std::istream::~istream(v1, v2 + 8) = v15;
            operator delete(v15);
          }

          operator delete((void *)v7);
        }

        else
        {
          ++v6;
        }
      }

      char v16 = (uint64_t *)v2[1];
      if (v16)
      {
        do
        {
          __int16 v17 = v16;
          char v16 = (uint64_t *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          __int16 v17 = (uint64_t *)v2[2];
          BOOL v18 = *v17 == (void)v2;
          uint64_t v2 = v17;
        }

        while (!v18);
      }

      uint64_t v2 = v17;
    }

    while (v17 != v29);
    uint64_t v3 = v27;
    uint64_t v1 = v28;
    uint64_t v2 = *v27;
    uint64_t v4 = v29;
  }

  if (v2 != v4)
  {
    do
    {
      uint64_t v19 = v2[5];
      if (*(_BYTE *)(v19 + 32))
      {
        uint64_t v20 = v2[4];
        char v21 = (void *)sub_10036B2F4(v19);
        operator delete(v21);
        uint64_t v22 = sub_1001FDBCC(v3, v2);
        operator delete(v2);
        if (qword_1008D61A8 != -1) {
          dispatch_once(&qword_1008D61A8, &stru_1008932D8);
        }
        uint64_t v23 = qword_1008D61A0;
        unint64_t v24 = sub_100494CF8(v20);
        sub_1004966BC(v23, v24);
      }

      else
      {
        int v25 = (uint64_t *)v2[1];
        if (v25)
        {
          do
          {
            uint64_t v22 = v25;
            int v25 = (uint64_t *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            uint64_t v22 = (uint64_t *)v2[2];
            BOOL v18 = *v22 == (void)v2;
            uint64_t v2 = v22;
          }

          while (!v18);
        }
      }

      uint64_t v2 = v22;
    }

    while (v22 != v4);
  }

  *(void *)(v1 + 4std::istream::~istream(v1, v2 + 8) = *(void *)(v1 + 40);
  *(void *)(v1 + 72) = *(void *)(v1 + 64);
  return sub_100242CD8(&v32);
}

void sub_1003643D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

void sub_1003643FC( uint64_t a1, unint64_t a2, uint64_t a3, int a4, unsigned __int16 a5, int a6, int a7, int a8, unsigned __int16 a9, unsigned __int16 a10, unsigned __int8 a11, int a12)
{
  unint64_t v126 = a2;
  unsigned __int16 v125 = a5;
  if (!a2 && os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_FAULT)) {
    sub_1006720D0();
  }
  if (!a3 && os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_FAULT)) {
    sub_1006720A4();
  }
  if (!a4 && os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_FAULT)) {
    sub_100672078();
  }
  if (!*(_BYTE *)(a1 + 8))
  {
    uint64_t v55 = (os_log_s *)qword_1008F7610;
    if (!os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_87;
    }
    sub_100494958(v126, (uint64_t)&__p);
    uint64_t v56 = v139 >= 0 ? &__p : (void **)__p;
    int v57 = *(unsigned __int8 *)(a1 + 8);
    *(_DWORD *)tm buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v125;
    __int16 v128 = 2082;
    *(void *)CFTypeID v129 = v56;
    *(_WORD *)&v129[8] = 1024;
    *(_DWORD *)id v130 = v57;
    *(_WORD *)&v130[4] = 1024;
    *(_DWORD *)uint64_t v131 = a12;
    _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "Registering L2CAP Channel with PSM 0x%04x for session %{public}s failed , fStarted=%d priority:%d",  buf,  0x1Eu);
    if (v139 < 0)
    {
      operator delete(__p);
      if (!a3) {
        return;
      }
    }

    else
    {
LABEL_87:
      if (!a3) {
        return;
      }
    }

    (*(void (**)(uint64_t, void, uint64_t))(*(void *)a3 + 16LL))(a3, v125, 111LL);
    return;
  }

  if (v125)
  {
LABEL_12:
    int v18 = a10;
    __int16 v19 = a9;
    if (a7) {
      int v20 = a7;
    }
    else {
      int v20 = 1024;
    }
    if (a8) {
      int v21 = a8;
    }
    else {
      int v21 = 1024;
    }
    int v122 = v20;
    int v123 = v21;
    if (!(a10 | a9))
    {
      int v18 = 30000;
      __int16 v19 = -1;
    }

    if (!v18) {
      int v18 = 30000;
    }
    unsigned __int16 v120 = v19;
    int v121 = v18;
    uint64_t v22 = (os_log_s *)qword_1008F7610;
    if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = v125;
      sub_100494958(v126, (uint64_t)&__p);
      unint64_t v24 = v139 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)tm buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v23;
      __int16 v128 = 1024;
      *(_DWORD *)CFTypeID v129 = v122;
      *(_WORD *)&v129[4] = 1024;
      *(_DWORD *)&v129[6] = v123;
      *(_WORD *)id v130 = 1024;
      *(_DWORD *)&v130[2] = v120;
      *(_WORD *)uint64_t v131 = 1024;
      *(_DWORD *)&v131[2] = v121;
      __int16 v132 = 1024;
      int v133 = a12;
      __int16 v134 = 2082;
      v135 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "trying to publish psm:%d inMTU:%d inMPS:%d initialCredits:%d creditAckDelta:%d priority:%d for session session %{public}s",  buf,  0x30u);
      if (v139 < 0) {
        operator delete(__p);
      }
    }

    __int16 v26 = (uint64_t *)(a1 + 24);
    int v25 = *(void **)(a1 + 24);
    int v27 = (uint64_t **)(a1 + 16);
    if (!v25) {
      goto LABEL_39;
    }
    uint64_t v28 = (uint64_t *)(a1 + 24);
    int v29 = *(void **)(a1 + 24);
    do
    {
      unint64_t v30 = v29[4];
      BOOL v31 = v30 >= v126;
      if (v30 >= v126) {
        char v32 = v29;
      }
      else {
        char v32 = v29 + 1;
      }
      if (v31) {
        uint64_t v28 = v29;
      }
      int v29 = (void *)*v32;
    }

    while (*v32);
    if (v28 == v26 || v126 < v28[4]) {
LABEL_39:
    }
      uint64_t v28 = (uint64_t *)(a1 + 24);
    if (!v25) {
      goto LABEL_51;
    }
    size_t v33 = (uint64_t *)(a1 + 24);
    do
    {
      unint64_t v34 = v25[4];
      BOOL v35 = v34 >= v126;
      if (v34 >= v126) {
        int v36 = v25;
      }
      else {
        int v36 = v25 + 1;
      }
      if (v35) {
        size_t v33 = v25;
      }
      int v25 = (void *)*v36;
    }

    while (*v36);
    if (v33 == v26 || v126 < v33[4])
    {
LABEL_51:
      CFTypeID v37 = (os_log_s *)qword_1008F7610;
      if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
      {
        sub_100494958(v126, (uint64_t)buf);
        id v38 = v130[3] >= 0 ? buf : *(uint8_t **)buf;
        LODWORD(__p) = 67109378;
        HIDWORD(__p) = a11;
        __int16 v137 = 2082;
        uint64_t v138 = v38;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Creating a new session %d for %{public}s",  (uint8_t *)&__p,  0x12u);
        if ((v130[3] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      unsigned __int8 v39 = operator new(0x30uLL);
      *unsigned __int8 v39 = a3;
      v39[1] = 0LL;
      v39[2] = 0LL;
      void v39[3] = 0LL;
      *((_BYTE *)v39 + sub_100242FAC(v1 - 32) = 0;
      *((_DWORD *)v39 + 9) = a4;
      *((_BYTE *)v39 + 40) = a11;
      *(void *)tm buf = &v126;
      sub_100029574((uint64_t **)(a1 + 16), &v126, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] = (uint64_t)v39;
      id v40 = (void *)*v26;
      if (!*v26) {
        goto LABEL_68;
      }
      uint64_t v28 = (uint64_t *)(a1 + 24);
      do
      {
        unint64_t v41 = v40[4];
        BOOL v42 = v41 >= v126;
        if (v41 >= v126) {
          id v43 = v40;
        }
        else {
          id v43 = v40 + 1;
        }
        if (v42) {
          uint64_t v28 = v40;
        }
        id v40 = (void *)*v43;
      }

      while (*v43);
      if (v28 == v26 || v126 < v28[4]) {
LABEL_68:
      }
        uint64_t v28 = (uint64_t *)(a1 + 24);
    }

    int v44 = a6;
    uint64_t v45 = v28[5];
    uint64_t v46 = *(void *)(v45 + 8);
    uint64_t v47 = *(void *)(v45 + 16);
    if (v46 == v47)
    {
LABEL_74:
      int v50 = (os_log_s *)qword_1008F7610;
      int v51 = v44;
      if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
      {
        int v52 = v125;
        sub_100494958(v126, (uint64_t)buf);
        uint64_t v53 = v130[3] >= 0 ? buf : *(uint8_t **)buf;
        LODWORD(__p) = 67109378;
        HIDWORD(__p) = v52;
        __int16 v137 = 2082;
        uint64_t v138 = v53;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Registering L2CAP Channel with PSM 0x%04x for session %{public}s",  (uint8_t *)&__p,  0x12u);
        if ((v130[3] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      char v124 = 0;
      sub_100242CA4(&v124);
      if (a11) {
        int v54 = sub_10017A84C(v125, (uint64_t)sub_100363ECC);
      }
      else {
        int v54 = sub_10017A6F0(v125, (uint64_t)sub_100363DCC);
      }
      int v61 = v54;
      sub_100242CD0(&v124);
      if (v61)
      {
        __int16 v62 = (os_log_s *)qword_1008F7610;
        if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR))
        {
          int v107 = v125;
          sub_100494958(v126, (uint64_t)&__p);
          char v108 = v139 >= 0 ? &__p : (void **)__p;
          *(_DWORD *)tm buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v107;
          __int16 v128 = 2082;
          *(void *)CFTypeID v129 = v108;
          *(_WORD *)&v129[8] = 1024;
          *(_DWORD *)id v130 = v61;
          _os_log_error_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_ERROR,  "Failed to register L2CAP Channel with PSM 0x%04x for session %{public}s with result %{bluetooth:OI_STATUS}u",  buf,  0x18u);
          if (v139 < 0) {
            operator delete(__p);
          }
        }

        switch(v61)
        {
          case 104:
            uint64_t v63 = 1802LL;
            break;
          case 482:
            uint64_t v63 = 1800LL;
            break;
          case 402:
            uint64_t v63 = 1801LL;
            break;
          default:
            uint64_t v63 = 1LL;
            break;
        }

        uint64_t v83 = v28[5];
        if (v83)
        {
          uint64_t v84 = (void *)sub_10036B2F4(v83);
          operator delete(v84);
        }

        sub_1001FDBCC(v27, v28);
        operator delete(v28);
      }

      else
      {
        uint32_t v64 = (void *)*v26;
        if (!*v26) {
          goto LABEL_116;
        }
        uint64_t v65 = v26;
        do
        {
          unint64_t v66 = v64[4];
          BOOL v67 = v66 >= v126;
          if (v66 >= v126) {
            uint64_t v68 = v64;
          }
          else {
            uint64_t v68 = v64 + 1;
          }
          if (v67) {
            uint64_t v65 = v64;
          }
          uint32_t v64 = (void *)*v68;
        }

        while (*v68);
        if (v65 == v26 || v126 < v65[4]) {
LABEL_116:
        }
          uint64_t v65 = v26;
        char v69 = (void *)v65[5];
        CFTypeID v70 = operator new(0x90uLL);
        sub_10036B36C((uint64_t)v70, v125, 0, v51, v122, v123, v120, v121, a11, a12);
        unint64_t v71 = v69[3];
        id v72 = (void *)v69[2];
        if ((unint64_t)v72 >= v71)
        {
          uint64_t v77 = v69[1];
          uint64_t v78 = ((uint64_t)v72 - v77) >> 3;
          uint64_t v79 = v71 - v77;
          uint64_t v80 = v79 >> 2;
          else {
            unint64_t v81 = v80;
          }
          if (v81) {
            __int16 v82 = (char *)sub_100008BA0((uint64_t)(v69 + 3), v81);
          }
          else {
            __int16 v82 = 0LL;
          }
          CFTypeID v89 = &v82[8 * v78];
          char v90 = &v82[8 * v81];
          *(void *)CFTypeID v89 = v70;
          CFTypeID v73 = v89 + 8;
          char v92 = (char *)v69[1];
          __int16 v91 = (char *)v69[2];
          if (v91 != v92)
          {
            do
            {
              uint64_t v93 = *((void *)v91 - 1);
              v91 -= 8;
              *((void *)v89 - 1) = v93;
              v89 -= 8;
            }

            while (v91 != v92);
            __int16 v91 = (char *)v69[1];
          }

          v69[1] = v89;
          v69[2] = v73;
          void v69[3] = v90;
          if (v91) {
            operator delete(v91);
          }
        }

        else
        {
          void *v72 = v70;
          CFTypeID v73 = v72 + 1;
        }

        uint64_t v63 = 0LL;
        v69[2] = v73;
      }

      sub_100242CD8(&v124);
LABEL_162:
      if (a3) {
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)a3 + 16LL))(a3, v125, v63);
      }
      return;
    }

    int v48 = v125;
    while (1)
    {
      int v49 = *(_BYTE **)v46;
      v46 += 8LL;
      if (v46 == v47) {
        goto LABEL_74;
      }
    }

    if (*v49)
    {
      for (uint64_t i = *(void *)(a1 + 40); i != *(void *)(a1 + 48); i += 48LL)
      {
        if (v125 == *(unsigned __int16 *)(i + 8))
        {
          int v94 = (os_log_s *)qword_1008F7610;
          if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR))
          {
            sub_100494958(*(void *)i, (uint64_t)buf);
            if (v130[3] >= 0) {
              uint64_t v119 = buf;
            }
            else {
              uint64_t v119 = *(uint8_t **)buf;
            }
            LODWORD(__p) = 67109378;
            HIDWORD(__p) = v48;
            __int16 v137 = 2082;
            uint64_t v138 = v119;
            _os_log_error_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_ERROR,  "Failed to register L2CAP Channel PSM 0x%04x as it is already pending registration by session %{public}s",  (uint8_t *)&__p,  0x12u);
            if ((v130[3] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            int v48 = v125;
          }

          break;
        }
      }

      int v95 = (os_log_s *)qword_1008F7610;
      if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_INFO))
      {
        sub_100494958(v28[4], (uint64_t)buf);
        if (v130[3] >= 0) {
          CFTypeID v96 = buf;
        }
        else {
          CFTypeID v96 = *(uint8_t **)buf;
        }
        LODWORD(__p) = 67109378;
        HIDWORD(__p) = v48;
        __int16 v137 = 2082;
        uint64_t v138 = v96;
        _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_INFO,  "Delaying registration of L2CAP PSM 0x%04x as it is currently being unregistered by session %{public}s",  (uint8_t *)&__p,  0x12u);
        if ((v130[3] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        LOWORD(v4std::istream::~istream(v1, v2 + 8) = v125;
      }

      unint64_t v97 = v126;
      unint64_t v98 = *(void *)(a1 + 56);
      unint64_t v99 = *(void *)(a1 + 48);
      if (v99 >= v98)
      {
        uint64_t v101 = *(void *)(a1 + 40);
        unint64_t v102 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - v101) >> 4);
        unint64_t v103 = v102 + 1;
        if (v102 + 1 > 0x555555555555555LL) {
          abort();
        }
        unint64_t v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - v101) >> 4);
        if (2 * v104 > v103) {
          unint64_t v103 = 2 * v104;
        }
        if (v104 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v105 = 0x555555555555555LL;
        }
        else {
          unint64_t v105 = v103;
        }
        if (v105) {
          char v106 = (char *)sub_10024EC04(a1 + 56, v105);
        }
        else {
          char v106 = 0LL;
        }
        __int16 v109 = &v106[48 * v102];
        *(void *)__int16 v109 = v97;
        char v110 = &v106[48 * v105];
        *((_WORD *)v109 + 4) = v48;
        *((void *)v109 + 2) = a3;
        v109[24] = v44;
        *((_DWORD *)v109 + 7) = a4;
        *((_WORD *)v109 + 16) = v122;
        *((_WORD *)v109 + 17) = v123;
        *((_WORD *)v109 + 1std::istream::~istream(v1, v2 + 8) = v120;
        *((_WORD *)v109 + 19) = v121;
        v109[40] = a11;
        *((_DWORD *)v109 + 11) = a12;
        uint64_t v100 = v109 + 48;
        __int128 v112 = *(char **)(a1 + 40);
        CFTypeID v111 = *(char **)(a1 + 48);
        if (v111 != v112)
        {
          do
          {
            __int128 v113 = *((_OWORD *)v111 - 3);
            __int128 v114 = *((_OWORD *)v111 - 1);
            *((_OWORD *)v109 - 2) = *((_OWORD *)v111 - 2);
            *((_OWORD *)v109 - 1) = v114;
            *((_OWORD *)v109 - 3) = v113;
            v109 -= 48;
            v111 -= 48;
          }

          while (v111 != v112);
          CFTypeID v111 = *(char **)(a1 + 40);
        }

        *(void *)(a1 + 40) = v109;
        *(void *)(a1 + 4std::istream::~istream(v1, v2 + 8) = v100;
        *(void *)(a1 + 56) = v110;
        if (v111) {
          operator delete(v111);
        }
      }

      else
      {
        *(void *)unint64_t v99 = v126;
        *(_WORD *)(v99 + std::istream::~istream(v1, v2 + 8) = v48;
        *(void *)(v99 + 16) = a3;
        *(_BYTE *)(v99 + 24) = v44;
        *(_DWORD *)(v99 + 2std::istream::~istream(v1, v2 + 8) = a4;
        *(_WORD *)(v99 + sub_100242FAC(v1 - 32) = v122;
        *(_WORD *)(v99 + 34) = v123;
        *(_WORD *)(v99 + 36) = v120;
        *(_WORD *)(v99 + 3std::istream::~istream(v1, v2 + 8) = v121;
        *(_BYTE *)(v99 + 40) = a11;
        uint64_t v100 = (char *)(v99 + 48);
        *(_DWORD *)(v99 + 44) = a12;
      }

      *(void *)(a1 + 4std::istream::~istream(v1, v2 + 8) = v100;
      uint64_t v63 = 10LL;
      goto LABEL_199;
    }

    char v87 = (os_log_s *)qword_1008F7610;
    if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR))
    {
      sub_100494958(v28[4], (uint64_t)buf);
      if (v130[3] >= 0) {
        __int128 v118 = buf;
      }
      else {
        __int128 v118 = *(uint8_t **)buf;
      }
      LODWORD(__p) = 67109378;
      HIDWORD(__p) = v48;
      __int16 v137 = 2082;
      uint64_t v138 = v118;
      _os_log_error_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_ERROR,  "Failed to register L2CAP Channel with PSM 0x%04x as it is already registered by session %{public}s",  (uint8_t *)&__p,  0x12u);
      if ((v130[3] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v45 = v28[5];
      if (!v45) {
        goto LABEL_153;
      }
    }

    else if (!v45)
    {
LABEL_153:
      sub_1001FDBCC(v27, v28);
      operator delete(v28);
      uint64_t v63 = 103LL;
LABEL_199:
      __int128 v115 = (os_log_s *)qword_1008F7610;
      if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
      {
        int v116 = v125;
        sub_100494958(v126, (uint64_t)&__p);
        __int128 v117 = v139 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)tm buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v116;
        __int16 v128 = 2082;
        *(void *)CFTypeID v129 = v117;
        *(_WORD *)&v129[8] = 1024;
        *(_DWORD *)id v130 = v63;
        _os_log_impl( (void *)&_mh_execute_header,  v115,  OS_LOG_TYPE_DEFAULT,  "Registering L2CAP Channel with PSM 0x%04x for session %{public}s failed with error %d",  buf,  0x18u);
        if (v139 < 0) {
          operator delete(__p);
        }
      }

      goto LABEL_162;
    }

    char v88 = (void *)sub_10036B2F4(v45);
    operator delete(v88);
    goto LABEL_153;
  }

  if (a11)
  {
    int v58 = sub_10017A614(&v125);
    int v59 = (os_log_s *)qword_1008F7610;
    if (!v58)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
      {
        int v85 = v125;
        sub_100494958(v126, (uint64_t)buf);
        __int16 v86 = v130[3] >= 0 ? buf : *(uint8_t **)buf;
        LODWORD(__p) = 67109378;
        HIDWORD(__p) = v85;
        __int16 v137 = 2082;
        uint64_t v138 = v86;
        _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "Automatically selected psm:%d for session session %{public}s",  (uint8_t *)&__p,  0x12u);
        if ((v130[3] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      goto LABEL_12;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR)) {
      sub_100672018();
    }
    if (a3)
    {
      switch(v58)
      {
        case 104:
          uint64_t v60 = 1802LL;
          break;
        case 482:
          uint64_t v60 = 1800LL;
          break;
        case 402:
          uint64_t v60 = 1801LL;
          break;
        default:
          uint64_t v60 = 1LL;
          break;
      }

      (*(void (**)(uint64_t, void, uint64_t))(*(void *)a3 + 16LL))(a3, v125, v60);
    }
  }

  else if (a3)
  {
    uint64_t v75 = (os_log_s *)qword_1008F7610;
    if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)tm buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "Invalid Classic PSM: %d", buf, 8u);
      uint64_t v76 = v125;
    }

    else
    {
      uint64_t v76 = 0LL;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 16LL))(a3, v76, 1800LL);
  }

void sub_1003651A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14, char a15)
{
}

void sub_1003651CC(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F7610;
  if (!a2 && os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Session cannot be NULL", (uint8_t *)__p, 2u);
    uint64_t v6 = (os_log_s *)qword_1008F7610;
    if ((_DWORD)a3) {
      goto LABEL_6;
    }
  }

  else if ((_DWORD)a3)
  {
    goto LABEL_6;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "psm cannot be 0", (uint8_t *)__p, 2u);
    uint64_t v6 = (os_log_s *)qword_1008F7610;
  }

uint64_t sub_1003655CC(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a2 + 56);
  if (!*(_BYTE *)(a1 + 8))
  {
    if (*(void *)(a2 + 120) != *(void *)(a2 + 128))
    {
      uint64_t result = os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_FAULT);
      if (!(_DWORD)result) {
        return result;
      }
      sub_1006720FC();
    }

    return 0LL;
  }

  *(_BYTE *)a2 = 1;
  uint64_t v4 = *(unsigned __int16 **)(a2 + 120);
  do
  {
    char v17 = 0;
    sub_100242CA4(&v17);
    unsigned int v5 = *v4;
    if (v3) {
      int v6 = sub_100175D08(v5);
    }
    else {
      int v6 = sub_1001759FC(v5, 436LL);
    }
    int v7 = v6;
    sub_100242CD0(&v17);
    if (v7)
    {
      int v8 = (os_log_s *)qword_1008F7610;
      if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR))
      {
        int v9 = *v4;
        *(_DWORD *)tm buf = 67109632;
        int v19 = v9;
        __int16 v20 = 1024;
        int v21 = v3;
        __int16 v22 = 1024;
        int v23 = v7;
        _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to disconnect channel %x for session type %d status=%d",  buf,  0x14u);
      }
    }

    sub_100242CD8(&v17);
    v4 += 13;
  }

  while (v4 != *(unsigned __int16 **)(a2 + 128));
  if (v4 == *(unsigned __int16 **)(a2 + 120))
  {
LABEL_14:
    char v17 = 0;
    sub_100242CA4(&v17);
    int v12 = *(unsigned __int16 *)(a2 + 2);
    if (v3) {
      int v13 = sub_10017A9E0(v12);
    }
    else {
      int v13 = sub_10017A8B8(v12);
    }
    int v14 = v13;
    sub_100242CD0(&v17);
    if (v14)
    {
      __int16 v15 = (os_log_s *)qword_1008F7610;
      if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_FAULT))
      {
        int v16 = *(unsigned __int16 *)(a2 + 2);
        *(_DWORD *)tm buf = 67109632;
        int v19 = v3;
        __int16 v20 = 1024;
        int v21 = v16;
        __int16 v22 = 1024;
        int v23 = v14;
        _os_log_fault_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "Couldn't unregister valid L2CAP Channel 0x%04x for session type %d with result %{bluetooth:OI_STATUS}u",  buf,  0x14u);
      }
    }

    sub_100242CD8(&v17);
    return 0LL;
  }

  unint64_t v10 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)tm buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "We are still waiting for some channels to disconnect, we'll complete the unpublishing when disconnection complete.",  buf,  2u);
  }

  return 10LL;
}

void sub_100365864( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_100365884( uint64_t a1, unint64_t a2, void (***a3)(void, void *, uint64_t, uint64_t, void, void, void), int a4, uint64_t a5, int a6, int a7, int a8, unsigned __int16 a9, unsigned __int8 *uu, char a11, int a12)
{
  unint64_t v111 = a2;
  if (!a2 && os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_FAULT)) {
    sub_1006720D0();
  }
  if (!a3 && os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_FAULT)) {
    sub_1006720A4();
  }
  if (!(_DWORD)a5 && os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_FAULT)) {
    sub_1006722CC();
  }
  if (!a4 && os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_FAULT)) {
    sub_100672078();
  }
  int is_null = uuid_is_null(uu);
  __int16 v20 = (os_log_s *)qword_1008F7610;
  if (is_null && os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)tm buf = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "device cannot be empty", buf, 2u);
    __int16 v20 = (os_log_s *)qword_1008F7610;
  }

  if (a6) {
    int v21 = a6;
  }
  else {
    int v21 = 1024;
  }
  int v106 = v21;
  if (a7) {
    int v22 = a7;
  }
  else {
    int v22 = 1024;
  }
  int v105 = v22;
  if (a9 | a8) {
    int v23 = a9;
  }
  else {
    int v23 = 30000;
  }
  if (a9 | a8) {
    unsigned __int16 v24 = a8;
  }
  else {
    unsigned __int16 v24 = -1;
  }
  if (v23) {
    int v25 = v23;
  }
  else {
    int v25 = 30000;
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v26 = v112;
    sub_100494958(v111, (uint64_t)v112);
    if (SHIBYTE(v112[2]) < 0) {
      __int16 v26 = (void **)v112[0];
    }
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(uu, out);
    sub_10002418C(__p, out);
    if (v110 >= 0) {
      int64_t v27 = __p;
    }
    else {
      int64_t v27 = (void **)__p[0];
    }
    *(_DWORD *)tm buf = 136448002;
    *(void *)&uint8_t buf[4] = v26;
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&_BYTE buf[14] = v27;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&_BYTE buf[24] = a5;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v106;
    *(_WORD *)&buf[34] = 1024;
    *(_DWORD *)&buf[36] = v105;
    __int16 v114 = 1024;
    int v115 = v24;
    __int16 v116 = 1024;
    int v117 = v25;
    __int16 v118 = 1024;
    int v119 = a12;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s trying to connect to device %{public}s on PSM:0x%04x inMTU:%d inMPS:%d initialCredits:%d cr editAckDelta:%d priority:%d",  buf,  0x3Au);
    if (v110 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v112[2]) < 0) {
      operator delete(v112[0]);
    }
  }

  uint64_t v108 = 0LL;
  if (a11)
  {
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100893338);
    }
    if (!sub_100599890((uint64_t)off_1008D5F08, uu, &v108))
    {
      uint64_t v56 = (os_log_s *)qword_1008F7610;
      if (!os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_99;
      }
      memset(buf, 0, 37);
      uuid_unparse_upper(uu, buf);
      sub_10002418C(out, buf);
      int v57 = out[23] >= 0 ? out : *(char **)out;
      *(_DWORD *)tm buf = 136446466;
      *(void *)&uint8_t buf[4] = v57;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = a5;
      _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "could not connect to device %{public}s on PSM:0x%04x",  buf,  0x12u);
      if (out[23] < 0)
      {
        operator delete(*(void **)out);
        if (!a3) {
          return;
        }
      }

      else
      {
LABEL_99:
        if (!a3) {
          return;
        }
      }

      int v58 = sub_100241F94(uu);
      int v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
      (**a3)(a3, v59, 1804LL, a5, 0LL, 0LL, 0LL);

      return;
    }

    uint64_t v104 = 0LL;
    uint64_t v28 = 0LL;
LABEL_52:
    int v35 = *(void **)(a1 + 24);
    unint64_t v34 = (uint64_t **)(a1 + 24);
    char v33 = v35;
    if (!v35) {
      goto LABEL_63;
    }
    __int16 v36 = v34;
    CFTypeID v37 = v33;
    do
    {
      unint64_t v38 = v37[4];
      BOOL v39 = v38 >= v111;
      if (v38 >= v111) {
        id v40 = v37;
      }
      else {
        id v40 = v37 + 1;
      }
      if (v39) {
        __int16 v36 = (uint64_t **)v37;
      }
      CFTypeID v37 = (void *)*v40;
    }

    while (*v40);
    if (v36 == v34 || v111 < (unint64_t)v36[4]) {
LABEL_63:
    }
      __int16 v36 = v34;
    if (!v33) {
      goto LABEL_75;
    }
    unint64_t v41 = v34;
    do
    {
      unint64_t v42 = v33[4];
      BOOL v43 = v42 >= v111;
      if (v42 >= v111) {
        int v44 = v33;
      }
      else {
        int v44 = v33 + 1;
      }
      if (v43) {
        unint64_t v41 = (uint64_t **)v33;
      }
      char v33 = (void *)*v44;
    }

    while (*v44);
    if (v41 == v34 || v111 < (unint64_t)v41[4])
    {
LABEL_75:
      uint64_t v45 = operator new(0x30uLL);
      *uint64_t v45 = a3;
      v45[1] = 0LL;
      int16x8_t v45[2] = 0LL;
      void v45[3] = 0LL;
      *((_BYTE *)v45 + sub_100242FAC(v1 - 32) = 0;
      *((_DWORD *)v45 + 9) = a4;
      *((_BYTE *)v45 + 40) = a11;
      *(void *)tm buf = &v111;
      sub_100029574(v34 - 1, &v111, (uint64_t)&unk_1006C2518, (uint64_t **)buf)[5] = (uint64_t)v45;
      uint64_t v46 = *v34;
      if (!*v34) {
        goto LABEL_86;
      }
      __int16 v36 = v34;
      do
      {
        unint64_t v47 = v46[4];
        BOOL v48 = v47 >= v111;
        if (v47 >= v111) {
          int v49 = (uint64_t **)v46;
        }
        else {
          int v49 = (uint64_t **)(v46 + 1);
        }
        if (v48) {
          __int16 v36 = (uint64_t **)v46;
        }
        uint64_t v46 = *v49;
      }

      while (*v49);
      if (v36 == v34 || v111 < (unint64_t)v36[4]) {
LABEL_86:
      }
        __int16 v36 = v34;
    }

    int v50 = v36[5];
    for (uint64_t i = (unsigned __int16 **)v50[1]; ; ++i)
    {
      if (i == (unsigned __int16 **)v50[2])
      {
        int v52 = (unsigned __int16 *)operator new(0x90uLL);
        sub_10036B36C((uint64_t)v52, a5, 1, 0, v106, v105, v24, v25, a11, a12);
        unint64_t v53 = v50[3];
        int v54 = (void *)v50[2];
        if ((unint64_t)v54 >= v53)
        {
          uint64_t v64 = v50[1];
          uint64_t v65 = ((uint64_t)v54 - v64) >> 3;
          uint64_t v66 = v53 - v64;
          uint64_t v67 = v66 >> 2;
          else {
            unint64_t v68 = v67;
          }
          if (v68) {
            char v69 = (char *)sub_100008BA0((uint64_t)(v50 + 3), v68);
          }
          else {
            char v69 = 0LL;
          }
          unint64_t v71 = &v69[8 * v65];
          id v72 = &v69[8 * v68];
          *(void *)unint64_t v71 = v52;
          uint64_t v55 = v71 + 8;
          uint64_t v74 = (char *)v50[1];
          CFTypeID v73 = (char *)v50[2];
          if (v73 != v74)
          {
            do
            {
              uint64_t v75 = *((void *)v73 - 1);
              v73 -= 8;
              *((void *)v71 - 1) = v75;
              v71 -= 8;
            }

            while (v73 != v74);
            CFTypeID v73 = (char *)v50[1];
          }

          v50[1] = (uint64_t)v71;
          void v50[2] = (uint64_t)v55;
          void v50[3] = (uint64_t)v72;
          if (v73) {
            operator delete(v73);
          }
        }

        else
        {
          void *v54 = v52;
          uint64_t v55 = v54 + 1;
        }

        void v50[2] = (uint64_t)v55;
        goto LABEL_128;
      }

      int v52 = *i;
      if ((*i)[1] == (_DWORD)a5 && *((_BYTE *)v52 + 4) == 1) {
        break;
      }
    }

    for (uint64_t j = *((void *)v52 + 15); j != *((void *)v52 + 16); j += 26LL)
    {
      if (!uuid_compare((const unsigned __int8 *)(j + 2), uu))
      {
        CFTypeID v96 = (os_log_s *)qword_1008F7610;
        if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR)) {
          sub_100672220(uu, v96);
        }
        unint64_t v97 = (void (***)(void, void *, uint64_t, uint64_t, void, void, void))*v50;
        unint64_t v98 = sub_100241F94(uu);
        unint64_t v99 = (void *)objc_claimAutoreleasedReturnValue(v98);
        (**v97)(v97, v99, 1803LL, a5, 0LL, 0LL, 0LL);

        return;
      }
    }

void sub_1003665A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  sub_100242CD8(&a16);
  _Unwind_Resume(a1);
}

void *sub_100366664@<X0>(const unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  return sub_10002418C(a2, v4);
}

uint64_t sub_1003666D4(uint64_t a1)
{
  if (sub_10012D5EC(a1))
  {
    if (*(_WORD *)(a1 + 86)) {
      unsigned __int16 v2 = 625 * *(_WORD *)(a1 + 86);
    }
    else {
      unsigned __int16 v2 = 6250;
    }
    if (!*(_BYTE *)(a1 + 70))
    {
      __int16 v8 = sub_1001ACFFC( *(unsigned __int16 *)(a1 + 108),  *(unsigned __int16 *)(a1 + 104),  v2,  *(_DWORD *)(a1 + 144),  *(_DWORD *)(a1 + 148));
      if (v8)
      {
        unsigned __int16 v3 = v8 - 4;
        goto LABEL_11;
      }

      if (sub_1000A86F0())
      {
        sub_1001EE134( (uint64_t)"Calculated MTU is zero for rx %d, tx %d, and CE %d us, probe %d",  v19,  v20,  v21,  v22,  v23,  v24,  v25,  *(unsigned __int16 *)(a1 + 108));
        __int16 v26 = (os_log_s *)sub_100086554(0x5Cu);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          sub_1006722F8(v26);
        }
      }
    }

    unsigned __int16 v3 = 1024;
LABEL_11:
    if (sub_1000A86F0())
    {
      int v16 = "peripheral";
      if (!*(_BYTE *)(a1 + 70)) {
        int v16 = "central";
      }
      sub_1001EE134( (uint64_t)"L2CAP %s MTU %d: for rx %d bytes, tx %d bytes, ce %d us, probestate %d",  v9,  v10,  v11,  v12,  v13,  v14,  v15,  (uint64_t)v16);
      char v17 = (os_log_s *)sub_100086554(0x5Cu);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)tm buf = 136446210;
        uint64_t v28 = sub_1001EDDCC();
        unsigned int v5 = " %{public}s";
        int v6 = v17;
        uint32_t v7 = 12;
        goto LABEL_16;
      }
    }

    return v3;
  }

  uint64_t v4 = qword_1008F7610;
  unsigned __int16 v3 = 672;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109120;
    LODWORD(v2std::istream::~istream(v1, v2 + 8) = 672;
    unsigned int v5 = "Default MTU %d for classic Handle";
    int v6 = (os_log_s *)v4;
    uint32_t v7 = 8;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
  }

  return v3;
}

void sub_1003668D4(int a1, int a2, int a3, int a4)
{
  __int16 v8 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109888;
    int v16 = a1;
    __int16 v17 = 1024;
    int v18 = a2;
    __int16 v19 = 1024;
    int v20 = a3;
    __int16 v21 = 1024;
    int v22 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "l2capConnected for CID: 0x%0x, inMTU: 0x%x, outMTU: 0x%x, result: 0x%x",  buf,  0x1Au);
  }

  if (qword_1008D9050 != -1) {
    dispatch_once(&qword_1008D9050, &stru_100893358);
  }
  sub_100367E60((void *)qword_1008D9048, a1);
  uint64_t v9 = sub_100404FE8();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_10036958C;
  v10[3] = &unk_1008878D8;
  __int16 v12 = a1;
  __int16 v13 = a2;
  __int16 v14 = a3;
  int v11 = a4;
  sub_100405384(v9, v10);
}

void sub_100366A28(int a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109376;
    int v10 = a1;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "l2capDisconnected for CID: 0x%0x, reson: 0x%x",  buf,  0xEu);
  }

  uint64_t v5 = sub_100404FE8();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100369BBC;
  v6[3] = &unk_10087FF00;
  __int16 v8 = a1;
  int v7 = a2;
  sub_100405384(v5, v6);
}

void sub_100366B20(int a1, const void *a2, unsigned int a3, int a4)
{
  __int16 v8 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = "No";
    v10[0] = 67109634;
    v10[1] = a1;
    if (a4) {
      uint64_t v9 = "Yes";
    }
    __int16 v11 = 1024;
    unsigned int v12 = a3;
    __int16 v13 = 2082;
    __int16 v14 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "l2capDataInd for CID: 0x%0x, len: 0x%x wakeUpEvent: %{public}s",  (uint8_t *)v10,  0x18u);
  }

  if (qword_1008D9050 != -1) {
    dispatch_once(&qword_1008D9050, &stru_100893358);
  }
  sub_10036A0B8((void *)qword_1008D9048, a1, a2, a3, a4);
}

void sub_100366C50(unsigned int a1, __int16 a2, unsigned int a3, int a4)
{
  if (qword_1008D9050 != -1) {
    dispatch_once(&qword_1008D9050, &stru_100893358);
  }
  int v16 = 0LL;
  sub_100367E60((void *)qword_1008D9048, a1);
  if (!a4 && (!sub_100171EC4(a1, (uint64_t *)&v16) || !sub_10017AB4C(v16)))
  {
    uint64_t v9 = (uint64_t *)sub_10017AB4C(v16);
    unsigned int v10 = sub_1003666D4(*v9);
    if (v10 < a3) {
      a3 = a3 / v10 * v10;
    }
  }

  uint64_t v8 = sub_100404FE8();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_100367FC0;
  v11[3] = &unk_1008878D8;
  __int16 v13 = a1;
  __int16 v14 = a2;
  __int16 v15 = a3;
  int v12 = a4;
  sub_100405384(v8, v11);
}

void sub_100366D50(__int16 a1, int a2)
{
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1003685FC;
  v5[3] = &unk_10087FF00;
  __int16 v7 = a1;
  int v6 = a2;
  sub_100405384(v4, v5);
}

void sub_100366DB8(int a1, const void *a2, unsigned int a3, int a4)
{
  if (qword_1008D9050 != -1) {
    dispatch_once(&qword_1008D9050, &stru_100893358);
  }
  sub_100368AF8((void *)qword_1008D9048, a1, a2, a3, a4);
}

void sub_100366E28(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *uu)
{
  if (!a2 && os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_FAULT)) {
    sub_1006720D0();
  }
  if (!(_DWORD)a3 && os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_FAULT)) {
    sub_1006722CC();
  }
  int is_null = uuid_is_null(uu);
  uint64_t v9 = (os_log_s *)qword_1008F7610;
  if (is_null && os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uuid_string_t out = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "device cannot be empty", out, 2u);
    uint64_t v9 = (os_log_s *)qword_1008F7610;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = v32;
    sub_100494958(a2, (uint64_t)v32);
    if (v33 < 0) {
      unsigned int v10 = (void **)v32[0];
    }
    memset(out, 0, 37);
    uuid_unparse_upper(uu, (char *)out);
    sub_10002418C(__p, (char *)out);
    if (v31 >= 0) {
      __int16 v11 = __p;
    }
    else {
      __int16 v11 = (void **)__p[0];
    }
    *(_DWORD *)tm buf = 136446722;
    int v35 = v10;
    __int16 v36 = 2082;
    CFTypeID v37 = v11;
    __int16 v38 = 1024;
    int v39 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s trying to disconnect device %{public}s on PSM:0x%04x",  buf,  0x1Cu);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    if (v33 < 0) {
      operator delete(v32[0]);
    }
  }

  __int16 v14 = *(void **)(a1 + 24);
  __int16 v13 = (void *)(a1 + 24);
  int v12 = v14;
  if (v14)
  {
    __int16 v15 = v13;
    do
    {
      unint64_t v16 = v12[4];
      BOOL v17 = v16 >= a2;
      if (v16 >= a2) {
        int v18 = v12;
      }
      else {
        int v18 = v12 + 1;
      }
      if (v17) {
        __int16 v15 = v12;
      }
      int v12 = (void *)*v18;
    }

    while (*v18);
    if (v15 != v13 && v15[4] <= a2)
    {
      __int16 v19 = (uint64_t *)v15[5];
      __int16 v21 = (uint64_t *)v19[1];
      int v20 = (uint64_t *)v19[2];
      while (1)
      {
        if (v21 == v20)
        {
          uint64_t v27 = *v19;
          uint64_t v28 = sub_100241F94(uu);
          uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
          (*(void (**)(uint64_t, void *, uint64_t, uint64_t, void))(*(void *)v27 + 8LL))( v27,  v29,  1804LL,  a3,  0LL);

          return;
        }

        uint64_t v22 = *v21;
        uint64_t v23 = *(unsigned __int16 **)(*v21 + 120);
LABEL_42:
        ++v21;
      }

      while (1)
      {
        if (*((_BYTE *)v23 + 18) == 1 && !uuid_compare((const unsigned __int8 *)v23 + 2, uu))
        {
          out[0] = 0;
          sub_100242CA4(out);
          unsigned int v24 = *v23;
          int v25 = *(_BYTE *)(v22 + 56) ? sub_100175D08(v24) : sub_1001759FC(v24, 1818LL);
          int v26 = v25;
          sub_100242CD0(out);
          sub_100242CD8(out);
          if (!v26) {
            break;
          }
        }

        v23 += 13;
        if (v23 == *(unsigned __int16 **)(v22 + 128))
        {
          int v20 = (uint64_t *)v19[2];
          goto LABEL_42;
        }
      }
    }
  }

void sub_100367114( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
  _Unwind_Resume(a1);
}

void sub_100367154(uint64_t a1, unint64_t a2)
{
  if (!a2 && os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_FAULT)) {
    sub_1006720D0();
  }
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(a1 + 24);
    do
    {
      unint64_t v6 = v4[4];
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        uint64_t v8 = v4;
      }
      else {
        uint64_t v8 = v4 + 1;
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = (void *)*v8;
    }

    while (*v8);
    if (v5 != (uint64_t *)(a1 + 24) && v5[4] <= a2)
    {
      uint64_t v9 = v5[5];
      *(_BYTE *)(v9 + sub_100242FAC(v1 - 32) = 1;
      unsigned int v10 = *(uint64_t **)(v9 + 8);
      if (*(uint64_t **)(v9 + 16) != v10)
      {
        do
        {
          uint64_t v11 = *v10;
          if (*(_BYTE *)(*v10 + 4))
          {
            uint64_t v13 = *(void *)(v11 + 120);
            uint64_t v12 = *(void *)(v11 + 128);
            if (v13 == v12) {
              goto LABEL_34;
            }
            do
            {
              if (*(_BYTE *)(v13 + 18) == 1)
              {
                sub_100366E28(a1, a2, *(unsigned __int16 *)(v11 + 2), (unsigned __int8 *)(v13 + 2));
                uint64_t v12 = *(void *)(v11 + 128);
              }

              v13 += 26LL;
            }

            while (v13 != v12);
            if (v12 == *(void *)(v11 + 120))
            {
LABEL_34:
              unsigned int v24 = *(uint64_t **)(v9 + 16);
              uint64_t v25 = (char *)v24 - (char *)(v10 + 1);
              if (v24 != v10 + 1) {
                memmove(v10, v10 + 1, (char *)v24 - (char *)(v10 + 1));
              }
              *(void *)(v9 + 16) = (char *)v10 + v25;
              int v26 = *(void **)(v11 + 120);
              if (v26)
              {
                *(void *)(v11 + 12std::istream::~istream(v1, v2 + 8) = v26;
                operator delete(v26);
              }

              operator delete((void *)v11);
              uint64_t v27 = *(uint64_t **)(v9 + 16);
              continue;
            }

            __int16 v15 = *(void **)(a1 + 96);
            unint64_t v14 = *(void *)(a1 + 104);
            if ((unint64_t)v15 >= v14)
            {
              uint64_t v16 = *(void *)(a1 + 88);
              uint64_t v17 = ((uint64_t)v15 - v16) >> 3;
              uint64_t v18 = v14 - v16;
              uint64_t v19 = v18 >> 2;
              else {
                unint64_t v20 = v19;
              }
              if (v20) {
                __int16 v21 = (char *)sub_100008BA0(a1 + 104, v20);
              }
              else {
                __int16 v21 = 0LL;
              }
              char v32 = &v21[8 * v17];
              *(void *)char v32 = v11;
              uint64_t v23 = v32 + 8;
              unint64_t v34 = *(char **)(a1 + 88);
              char v33 = *(char **)(a1 + 96);
              if (v33 != v34)
              {
                do
                {
                  uint64_t v35 = *((void *)v33 - 1);
                  v33 -= 8;
                  *((void *)v32 - 1) = v35;
                  v32 -= 8;
                }

                while (v33 != v34);
                goto LABEL_54;
              }

              goto LABEL_55;
            }
          }

          else
          {
            __int16 v15 = *(void **)(a1 + 96);
            unint64_t v22 = *(void *)(a1 + 104);
            if ((unint64_t)v15 >= v22)
            {
              uint64_t v28 = *(void *)(a1 + 88);
              uint64_t v29 = ((uint64_t)v15 - v28) >> 3;
              if ((unint64_t)(v29 + 1) >> 61) {
LABEL_63:
              }
                abort();
              uint64_t v30 = v22 - v28;
              uint64_t v31 = v30 >> 2;
              else {
                unint64_t v20 = v31;
              }
              if (v20) {
                __int16 v21 = (char *)sub_100008BA0(a1 + 104, v20);
              }
              else {
                __int16 v21 = 0LL;
              }
              char v32 = &v21[8 * v29];
              *(void *)char v32 = v11;
              uint64_t v23 = v32 + 8;
              __int16 v36 = *(char **)(a1 + 88);
              char v33 = *(char **)(a1 + 96);
              if (v33 != v36)
              {
                do
                {
                  uint64_t v37 = *((void *)v33 - 1);
                  v33 -= 8;
                  *((void *)v32 - 1) = v37;
                  v32 -= 8;
                }

                while (v33 != v36);
LABEL_54:
                char v33 = *(char **)(a1 + 88);
              }

id sub_100367444(uint64_t a1)
{
  unsigned __int16 v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  unsigned __int16 v3 = *(void **)(a1 + 16);
  uint64_t v4 = (void *)(a1 + 24);
  if (v3 != (void *)(a1 + 24))
  {
    do
    {
      uint64_t v5 = v3[5];
      if (*(_BYTE *)(v5 + 40) == 1)
      {
        BOOL v7 = *(uint64_t **)(v5 + 8);
        unint64_t v6 = *(uint64_t **)(v5 + 16);
        while (v7 != v6)
        {
          uint64_t v8 = *v7;
          uint64_t v9 = *(void *)(*v7 + 120);
          if (v9 != *(void *)(*v7 + 128))
          {
            do
            {
              unsigned int v10 = sub_100241F94((const unsigned __int8 *)(v9 + 2));
              uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
              [v2 addObject:v11];

              v9 += 26LL;
            }

            while (v9 != *(void *)(v8 + 128));
            unint64_t v6 = *(uint64_t **)(v5 + 16);
          }

          ++v7;
        }
      }

      uint64_t v12 = (void *)v3[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          uint64_t v13 = (void *)v3[2];
          BOOL v14 = *v13 == (void)v3;
          unsigned __int16 v3 = v13;
        }

        while (!v14);
      }

      unsigned __int16 v3 = v13;
    }

    while (v13 != v4);
  }

  __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v2 allObjects]);

  return v15;
}

void sub_100367554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100367574(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v2 = *(void **)(a1 + 16);
  unsigned __int16 v3 = (void *)(a1 + 24);
  if (v2 != (void *)(a1 + 24))
  {
    char v5 = 0;
    unsigned __int16 v6 = 0;
    while (1)
    {
      sub_100494958(v2[4], (uint64_t)&__s1);
      sub_100494958(a2, (uint64_t)__p);
      unsigned __int8 v7 = v34;
      if ((v34 & 0x80u) == 0) {
        size_t v8 = v34;
      }
      else {
        size_t v8 = __n;
      }
      unint64_t v9 = v31;
      int v10 = (char)v31;
      if ((v31 & 0x80u) != 0) {
        unint64_t v9 = (unint64_t)__p[1];
      }
      if (v8 != v9)
      {
        BOOL v20 = 0;
        goto LABEL_29;
      }

      uint64_t v11 = (v31 & 0x80u) == 0 ? __p : (void **)__p[0];
      if (v34)
      {
        uint64_t v12 = v34 - 1LL;
        p_s1 = &__s1;
        do
        {
          int v15 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          int v14 = v15;
          int v17 = *(unsigned __int8 *)v11;
          uint64_t v11 = (void **)((char *)v11 + 1);
          int v16 = v17;
          BOOL v19 = v12-- != 0;
          BOOL v20 = v14 == v16;
        }

        while (v14 == v16 && v19);
LABEL_24:
        if ((v10 & 0x80000000) == 0) {
          goto LABEL_25;
        }
        goto LABEL_29;
      }

      BOOL v20 = 1;
      if (((char)v31 & 0x80000000) == 0)
      {
LABEL_25:
        if ((v7 & 0x80) == 0) {
          goto LABEL_26;
        }
        goto LABEL_30;
      }

void sub_100367744( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100367760(uint64_t a1, unint64_t a2, unsigned __int8 *uu2)
{
  unsigned __int16 v3 = *(void **)(a1 + 16);
  uint64_t v4 = (void *)(a1 + 24);
  if (v3 != (void *)(a1 + 24))
  {
    do
    {
      uint64_t v8 = v3[5];
      if (!*(_BYTE *)(v8 + 40))
      {
        uint64_t v13 = *(uint64_t **)(v8 + 8);
        uint64_t v12 = *(uint64_t **)(v8 + 16);
        while (v13 != v12)
        {
          uint64_t v14 = *v13;
          uint64_t v15 = *(void *)(*v13 + 120);
          if (v15 != *(void *)(*v13 + 128))
          {
            while (uuid_compare((const unsigned __int8 *)(v15 + 2), uu2))
            {
              v15 += 26LL;
              if (v15 == *(void *)(v14 + 128))
              {
                uint64_t v12 = *(uint64_t **)(v8 + 16);
                goto LABEL_16;
              }
            }

            sub_100366E28(a1, a2, *(unsigned __int16 *)(v14 + 2), (unsigned __int8 *)(v15 + 2));
            return;
          }

void sub_100367874(uint64_t a1)
{
  if (qword_1008D9050 != -1) {
    dispatch_once(&qword_1008D9050, &stru_100893358);
  }
  sub_1003678D0( qword_1008D9048,  *(unsigned __int16 *)(a1 + 48),  *(_DWORD **)(a1 + 32),  *(unsigned __int16 *)(a1 + 50),  *(unsigned __int8 *)(a1 + 52));
}

void sub_1003678D0(uint64_t a1, int a2, _DWORD *a3, unsigned int a4, int a5)
{
  unint64_t v9 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1040;
    *(_DWORD *)&buf[10] = 6;
    *(_WORD *)&_BYTE buf[14] = 2096;
    *(void *)&uint8_t buf[16] = (char *)a3 + 1;
    *(_WORD *)&_BYTE buf[24] = 1024;
    LODWORD(v52) = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Connection Indication PSM:0x%04x Address: %{bluetooth:BD_ADDR}.6P) cid:%d",  buf,  0x1Eu);
  }

  int v10 = *(void **)(a1 + 16);
  if (v10 == (void *)(a1 + 24))
  {
LABEL_15:
    if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR)) {
      sub_100672370();
    }
  }

  else
  {
    while (1)
    {
      uint64_t v11 = v10[5];
      int v12 = sub_100367574(a1, v10[4]);
      uint64_t v13 = *(uint64_t **)(v11 + 8);
      uint64_t v14 = *(uint64_t **)(v11 + 16);
      if (v13 != v14) {
        break;
      }
LABEL_9:
      int v17 = (void *)v10[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          int v17 = (void *)*v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          uint64_t v18 = (void *)v10[2];
          BOOL v19 = *v18 == (void)v10;
          int v10 = v18;
        }

        while (!v19);
      }

      int v10 = v18;
      if (v18 == (void *)(a1 + 24)) {
        goto LABEL_15;
      }
    }

    int v15 = v12;
    while (1)
    {
      uint64_t v16 = *v13;
      if (++v13 == v14) {
        goto LABEL_9;
      }
    }

    memset(uu, 0, sizeof(uu));
    uuid_clear(uu);
    uint64_t v20 = sub_10012D98C(a3);
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100893338);
    }
    if (sub_100593548((uint64_t)off_1008D5F08, v20, uu) && !uuid_is_null(uu))
    {
      char v44 = 0;
      sub_100242CA4(&v44);
      unsigned int v22 = sub_1003666D4(v20);
      unsigned __int16 v23 = v22 + v22 * (0x400 / v22);
      *(_WORD *)(v16 + std::istream::~istream(v1, v2 + 8) = v23;
      *(_WORD *)(v16 + 10) = v23;
      if (v15) {
        BOOL v24 = *(unsigned __int16 *)(v16 + 2) == v15;
      }
      else {
        BOOL v24 = 0;
      }
      uint64_t v25 = (os_log_s *)qword_1008F7610;
      if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = "Rejecting";
        int v27 = *(unsigned __int16 *)(v16 + 2);
        *(_DWORD *)tm buf = 136316674;
        if (v24) {
          int v26 = "Accepting";
        }
        *(void *)&uint8_t buf[4] = v26;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v27;
        *(_WORD *)&_BYTE buf[18] = 1040;
        *(_DWORD *)&buf[20] = 6;
        *(_WORD *)&_BYTE buf[24] = 2096;
        int v52 = (char *)a3 + 1;
        __int16 v53 = 1024;
        unsigned int v54 = a4;
        __int16 v55 = 1024;
        int v56 = v23;
        __int16 v57 = 1024;
        int v58 = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "%s connection for PSM:0x%04x Address: %{bluetooth:BD_ADDR}.6P) cid:%d inMTU=%d inMPS=%d",  buf,  0x34u);
      }

      if (v15) {
        BOOL v28 = *(unsigned __int16 *)(v16 + 2) == v15;
      }
      else {
        BOOL v28 = 1;
      }
      if (sub_100175458( (uint64_t)sub_100366C50,  (uint64_t)sub_100366D50,  (uint64_t)sub_100366DB8,  a4,  v16 + 8,  v28))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR)) {
          sub_1006723D8();
        }
      }

      else
      {
        memset(&buf[2], 0, 24);
        *(_WORD *)tm buf = a4;
        uuid_copy(&buf[2], uu);
        _BYTE buf[18] = 0;
        *(_DWORD *)&buf[20] = 0;
        _BYTE buf[24] = 0;
        unint64_t v29 = *(void *)(v16 + 128);
        if (v29 >= *(void *)(v16 + 136))
        {
          uint64_t v31 = sub_10036B63C((uint64_t *)(v16 + 120), (uint64_t)buf);
        }

        else
        {
          *(_WORD *)unint64_t v29 = *(_WORD *)buf;
          uuid_copy((unsigned __int8 *)(v29 + 2), &buf[2]);
          int v30 = *(_DWORD *)&buf[18];
          *(_DWORD *)(v29 + 21) = *(_DWORD *)&buf[21];
          *(_DWORD *)(v29 + 1std::istream::~istream(v1, v2 + 8) = v30;
          uint64_t v31 = v29 + 26;
          *(void *)(v16 + 12std::istream::~istream(v1, v2 + 8) = v29 + 26;
        }

        *(void *)(v16 + 12std::istream::~istream(v1, v2 + 8) = v31;
        if (!*(_WORD *)(v16 + 16))
        {
          int v32 = sub_10016F2BC(a4, *(unsigned __int16 *)(v16 + 14));
          if (v32)
          {
            char v33 = (os_log_s *)qword_1008F7610;
            if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR))
            {
              int v40 = *(unsigned __int16 *)(v16 + 14);
              *(_DWORD *)uint64_t v45 = 67109632;
              unsigned int v46 = a4;
              __int16 v47 = 1024;
              int v48 = v40;
              __int16 v49 = 1024;
              int v50 = v32;
              _os_log_error_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "LE_L2CAP_SendChannelCredits cid=%d credits=%d failed with status %d",  v45,  0x14u);
            }
          }
        }
      }

      if (a5)
      {
        memset(buf, 0, 24);
        sub_1004949D8(v10[4], (std::string *)buf);
        uint64_t v34 = sub_1002E9074();
        int v35 = buf[23];
        __int16 v36 = *(_BYTE **)buf;
        uint64_t v37 = sub_100241F94(uu);
        __int16 v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
        if (v35 >= 0) {
          uint64_t v39 = buf;
        }
        else {
          uint64_t v39 = v36;
        }
        unint64_t v42 = &off_10087FAA8;
        BOOL v43 = 0LL;
        (*(void (**)(uint64_t, uint64_t, _BYTE *, void *, uint64_t (***)()))(*(void *)v34 + 40LL))( v34,  3LL,  v39,  v38,  &v42);
        unint64_t v42 = &off_10087FAA8;
        if (v43) {
          sub_1002CD254(v43);
        }

        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      sub_100242CD8(&v44);
    }

    else
    {
      uint64_t v21 = (os_log_s *)qword_1008F7610;
      if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR)) {
        sub_100672438(a3, v21);
      }
    }
  }

void sub_100367DF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  *(void *)(v26 + 12std::istream::~istream(v1, v2 + 8) = v25;
  sub_100242CD8(&a15);
  _Unwind_Resume(a1);
}

void sub_100367E60(void *a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    v18[0] = 67109120;
    v18[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "cid:0x%04x", (uint8_t *)v18, 8u);
  }

  unint64_t v5 = a1[10];
  unsigned __int16 v6 = (char *)a1[9];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = (char *)a1[8];
    uint64_t v9 = v6 - v8;
    if (v6 - v8 <= -3) {
      abort();
    }
    uint64_t v10 = v9 >> 1;
    unint64_t v11 = v5 - (void)v8;
    if (v11 <= (v9 >> 1) + 1) {
      unint64_t v12 = v10 + 1;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_10024EF1C((uint64_t)(a1 + 10), v13);
      uint64_t v8 = (char *)a1[8];
      unsigned __int16 v6 = (char *)a1[9];
    }

    else
    {
      uint64_t v14 = 0LL;
    }

    int v15 = &v14[2 * v10];
    uint64_t v16 = &v14[2 * v13];
    *(_WORD *)int v15 = a2;
    unsigned __int8 v7 = v15 + 2;
    while (v6 != v8)
    {
      __int16 v17 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v15 - 1) = v17;
      v15 -= 2;
    }

    a1[8] = v15;
    a1[9] = v7;
    a1[10] = v16;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    *(_WORD *)unsigned __int16 v6 = a2;
    unsigned __int8 v7 = v6 + 2;
  }

  a1[9] = v7;
}

void sub_100367FC0(uint64_t a1)
{
  if (qword_1008D9050 != -1) {
    dispatch_once(&qword_1008D9050, &stru_100893358);
  }
  sub_10036801C( qword_1008D9048,  *(unsigned __int16 *)(a1 + 36),  *(unsigned __int16 *)(a1 + 38),  *(unsigned __int16 *)(a1 + 40),  *(unsigned int *)(a1 + 32));
}

void sub_10036801C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    *(_WORD *)&_BYTE buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = a4;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "connectedCB cid:0x%04x inMTU:%d outMTU:%d result:%d",  buf,  0x1Au);
  }

  unsigned int v39 = -1;
  uint64_t v38 = 0LL;
  unint64_t v11 = *(void **)(a1 + 16);
  if (v11 != (void *)(a1 + 24))
  {
    do
    {
      uint64_t v12 = v11[5];
      for (uint64_t i = *(uint64_t **)(v12 + 8); i != *(uint64_t **)(v12 + 16); ++i)
      {
        uint64_t v14 = *i;
        uint64_t v16 = *(void *)(*i + 120);
        int v15 = *(unsigned __int16 **)(*i + 128);
        if ((unsigned __int16 *)v16 != v15)
        {
          uint64_t v17 = -v16;
          while (*(unsigned __int16 *)v16 != (_DWORD)a2)
          {
            v16 += 26LL;
            v17 -= 26LL;
          }

          memset(dst, 0, sizeof(dst));
          uuid_copy(dst, (const unsigned __int8 *)(v16 + 2));
          if ((_DWORD)a5)
          {
            if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR)) {
              sub_100672514();
            }
            sub_10036A534(a1, a2);
            BOOL v21 = 1;
          }

          else
          {
            *(_WORD *)(v16 + 20) = a3;
            *(_WORD *)(v16 + 22) = a4;
            *(_BYTE *)(v16 + 1std::istream::~istream(v1, v2 + 8) = 1;
            if (qword_1008D5F10 != -1) {
              dispatch_once(&qword_1008D5F10, &stru_100893338);
            }
            BOOL v21 = sub_100599890((uint64_t)off_1008D5F08, (unsigned __int8 *)(v16 + 2), &v38);
            unsigned int v22 = (os_log_s *)qword_1008F7610;
            if (v21)
            {
              if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
              {
                int v23 = *(unsigned __int16 *)(v16 + 20);
                int v24 = *(unsigned __int16 *)(v16 + 22);
                *(_DWORD *)tm buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = a2;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v23;
                *(_WORD *)&_BYTE buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v24;
                _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Registering pipe cid:0x%04x inMTU:%d outMTU:%d",  buf,  0x14u);
              }

              uint64_t v25 = sub_10024F00C();
              if (!sub_1002501BC( v25,  v38,  a2,  *(_DWORD *)(v12 + 36),  a4,  (int *)&v39,  *(_DWORD *)(v14 + 112)))
              {
                buf[0] = 0;
                sub_100242CA4(buf);
                sub_10018A690(v38);
                sub_100242CD8(buf);
                sub_10036A534(a1, a2);
                if (!*(_WORD *)(v14 + 16))
                {
                  LOBYTE(__p[0]) = 0;
                  sub_100242CA4(__p);
                  int v27 = sub_10016F2BC(a2, *(unsigned __int16 *)(v14 + 14));
                  sub_100242CD0(__p);
                  if (v27)
                  {
                    BOOL v28 = (os_log_s *)qword_1008F7610;
                    if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR))
                    {
                      int v35 = *(unsigned __int16 *)(v14 + 14);
                      *(_DWORD *)tm buf = 67109632;
                      *(_DWORD *)&uint8_t buf[4] = a2;
                      *(_WORD *)&uint8_t buf[8] = 1024;
                      *(_DWORD *)&buf[10] = v35;
                      *(_WORD *)&_BYTE buf[14] = 1024;
                      *(_DWORD *)&uint8_t buf[16] = v27;
                      _os_log_error_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "LE_L2CAP_SendChannelCredits cid=%d credits=%d failed with status %d",  buf,  0x14u);
                    }
                  }

                  sub_100242CD8(__p);
                }

                a5 = 0LL;
                BOOL v21 = 0;
                goto LABEL_44;
              }

              uint64_t v26 = (os_log_s *)qword_1008F7610;
              if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR))
              {
                memset(buf, 0, 37);
                uuid_unparse_upper(dst, (char *)buf);
                sub_10002418C(__p, (char *)buf);
                uint64_t v34 = v37 >= 0 ? __p : (void **)__p[0];
                *(_DWORD *)tm buf = 67109378;
                *(_DWORD *)&uint8_t buf[4] = a2;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = v34;
                _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "Failed to register a socket for channel 0x%04x on device %{public}s",  buf,  0x12u);
                if (v37 < 0) {
                  operator delete(__p[0]);
                }
              }

              buf[0] = 0;
              sub_100242CA4(buf);
              if (*(_BYTE *)(v14 + 56)) {
                sub_100175D08(a2);
              }
              else {
                sub_1001759FC(a2, 436LL);
              }
              sub_100242CD8(buf);
              a5 = 1805LL;
            }

            else
            {
              if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR))
              {
                memset(buf, 0, 37);
                uuid_unparse_upper((const unsigned __int8 *)(v16 + 2), (char *)buf);
                sub_10002418C(__p, (char *)buf);
                char v33 = v37 >= 0 ? __p : (void **)__p[0];
                *(_DWORD *)tm buf = 136446210;
                *(void *)&uint8_t buf[4] = v33;
                _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "Connection manager wasn't tracking %{public}s !",  buf,  0xCu);
                if (v37 < 0) {
                  operator delete(__p[0]);
                }
              }

              a5 = 1804LL;
            }

            sub_10036A534(a1, a2);
          }

void sub_1003685C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1003685FC(uint64_t a1)
{
  if (qword_1008D9050 != -1) {
    dispatch_once(&qword_1008D9050, &stru_100893358);
  }
  sub_100368650(qword_1008D9048, *(unsigned __int16 *)(a1 + 36), *(_DWORD *)(a1 + 32));
}

void sub_100368650(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned __int16 v6 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "disconnectedCB cid:%d reason:%d", buf, 0xEu);
  }

  unsigned int v40 = a3;
  uint64_t v42 = a1;
  unsigned __int8 v7 = (uint64_t **)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 16);
  unsigned int v39 = v7;
  unint64_t v41 = v7 + 1;
  if ((uint64_t **)v8 != v7 + 1)
  {
    while (2)
    {
      BOOL v43 = *(void **)(v8 + 40);
      uint64_t v10 = v43[1];
      uint64_t v9 = v43[2];
      while (v10 != v9)
      {
        unint64_t v11 = *(_BYTE **)v10;
        uint64_t v12 = *(unsigned __int16 **)(*(void *)v10 + 120LL);
        if (v12 != *(unsigned __int16 **)(*(void *)v10 + 128LL))
        {
          uint64_t v13 = -(uint64_t)v12;
          while (1)
          {
            memset(dst, 0, sizeof(dst));
            uuid_copy(dst, (const unsigned __int8 *)v12 + 2);
            uint64_t v14 = (os_log_s *)qword_1008F7610;
            if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_INFO))
            {
              memset(buf, 0, 37);
              uuid_unparse_upper(dst, (char *)buf);
              sub_10002418C(__p, (char *)buf);
              int v15 = __p;
              if (v45 < 0) {
                int v15 = (void **)__p[0];
              }
              int v16 = *v12;
              *(_DWORD *)tm buf = 136446466;
              *(void *)&uint8_t buf[4] = v15;
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v16;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "device=%{public}s cid=%x", buf, 0x12u);
              if (v45 < 0) {
                operator delete(__p[0]);
              }
            }

            if (*v12 == (_DWORD)a2) {
              break;
            }
            v12 += 13;
            v13 -= 26LL;
            if (v12 == *((unsigned __int16 **)v11 + 16))
            {
              uint64_t v9 = v43[2];
              goto LABEL_16;
            }
          }

          uint64_t v24 = sub_10024F00C();
          sub_100252278(v24, *v12);
          if (!*((_BYTE *)v43 + 32))
          {
            uint64_t v25 = *v43;
            uint64_t v26 = sub_100241F94(dst);
            int v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
            (*(void (**)(uint64_t, void *, void, void, uint64_t))(*(void *)v25 + 8LL))( v25,  v27,  v40,  *((unsigned __int16 *)v11 + 1),  a2);
          }

          sub_10036B95C(26 - v13, *((void *)v11 + 16), -v13);
          *((void *)v11 + 16) = v28;
          if (*v11)
          {
            if (!v11[4] && v28 == *((void *)v11 + 15))
            {
              uint64_t v29 = sub_1003655CC(v42, (uint64_t)v11);
              if ((_DWORD)v29 != 10 && !*((_BYTE *)v43 + 32)) {
                (*(void (**)(void, void, uint64_t))(*(void *)*v43 + 24LL))( *v43,  *((unsigned __int16 *)v11 + 1),  v29);
              }
            }

            int v30 = (void *)*((void *)v11 + 16);
            if (v30 == *((void **)v11 + 15))
            {
              uint64_t v31 = v43[2];
              uint64_t v32 = v31 - (v10 + 8);
              if (v31 != v10 + 8)
              {
                memmove((void *)v10, (const void *)(v10 + 8), v31 - (v10 + 8));
                int v30 = (void *)*((void *)v11 + 15);
              }

              time_t v43[2] = v10 + v32;
              if (v30)
              {
                *((void *)v11 + 16) = v30;
                operator delete(v30);
              }

              operator delete(v11);
            }

            if (*((_BYTE *)v43 + 32) && v43[2] == v43[1])
            {
              char v33 = (void *)sub_10036B2F4((uint64_t)v43);
              operator delete(v33);
              sub_1001FDBCC(v39, (uint64_t *)v8);
LABEL_55:
              operator delete((void *)v8);
            }
          }

          return;
        }

void sub_100368AE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100368AF8(void *a1, int a2, const void *a3, unsigned int a4, int a5)
{
  unint64_t v11 = (unsigned __int16 *)a1[8];
  uint64_t v10 = (unsigned __int16 *)a1[9];
  if (v11 != v10)
  {
    while (*v11 != a2)
    {
      if (++v11 == v10)
      {
        unint64_t v11 = (unsigned __int16 *)a1[9];
        break;
      }
    }
  }

  if (v11 == v10)
  {
    uint64_t v15 = sub_10024F00C();
    sub_1002528C0(v15, a2, a3, a4, 1LL, a5);
    if (!a5) {
      return;
    }
  }

  else
  {
    uint64_t v12 = (os_log_s *)qword_1008F7610;
    if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)tm buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Queueing initial data on channel 0x%04x as the L2CAP Channel hasn't finished registration",  buf,  8u);
    }

    uint64_t v13 = operator new(0x10uLL);
    sub_10056AB04(v13, a3, a4);
    uint64_t v14 = sub_100404FE8();
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472LL;
    v39[2] = sub_100368F68;
    void v39[3] = &unk_100893298;
    __int16 v40 = a2;
    v39[4] = v13;
    char v41 = a5;
    sub_100405384(v14, v39);
    if (!a5) {
      return;
    }
  }

  uint64_t v48 = 0LL;
  __int128 v46 = 0u;
  memset(v47, 0, sizeof(v47));
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  *(_OWORD *)tm buf = 0u;
  memset(v43, 0, sizeof(v43));
  sub_1001FCFC8((uint64_t)buf);
  int v16 = (void *)a1[2];
  uint64_t v17 = a1 + 3;
  if (v16 == a1 + 3)
  {
    uint64_t v18 = 0LL;
  }

  else
  {
    uint64_t v18 = 0LL;
    do
    {
      uint64_t v19 = v16[5];
      uint64_t v20 = *(void *)(v19 + 8);
      uint64_t v21 = *(void *)(v19 + 16);
LABEL_14:
      if (v20 == v21)
      {
        char v27 = 0;
      }

      else
      {
        for (uint64_t i = *(const unsigned __int8 **)(*(void *)v20 + 120LL); ; i += 26)
        {
          if (i == *(const unsigned __int8 **)(*(void *)v20 + 128LL))
          {
            v20 += 8LL;
            goto LABEL_14;
          }
        }

        uint64_t v23 = sub_100241F94(i + 2);
        uint64_t v24 = objc_claimAutoreleasedReturnValue(v23);

        sub_1004949D8(v16[4], &__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t size = __p.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t size = __p.__r_.__value_.__l.__size_;
        }
        sub_1001FD17C(v43, (uint64_t)p_p, size);
        char v27 = 1;
        uint64_t v18 = (void *)v24;
      }

      uint64_t v28 = (void *)v16[1];
      if (v28)
      {
        do
        {
          uint64_t v29 = v28;
          uint64_t v28 = (void *)*v28;
        }

        while (v28);
      }

      else
      {
        do
        {
          uint64_t v29 = (void *)v16[2];
          BOOL v30 = *v29 == (void)v16;
          int v16 = v29;
        }

        while (!v30);
      }

      if (v29 == v17) {
        char v27 = 1;
      }
      int v16 = v29;
    }

    while ((v27 & 1) == 0);
  }

  __int16 v36 = 0LL;
  int64_t v37 = 0LL;
  sub_10056AB04(&v36, a3, a4);
  uint64_t v31 = sub_1002E9074();
  uint64_t v32 = &__p;
  std::stringbuf::str(&__p, (const std::stringbuf *)((char *)v43 + 8));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    uint64_t v32 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v34 = &off_10087FAA8;
  uint64_t v35 = v37;
  if (v37) {
    sub_1002CD1E0((uint64_t)v37);
  }
  (*(void (**)(uint64_t, uint64_t, std::stringbuf::string_type *, void *, uint64_t (***)()))(*(void *)v31 + 40LL))( v31,  4LL,  v32,  v18,  &v34);
  uint64_t v34 = &off_10087FAA8;
  if (v35) {
    sub_1002CD254(v35);
  }
  __int16 v36 = &off_10087FAA8;
  if (v37) {
    sub_1002CD254(v37);
  }

  *(void *)&v43[0] = v33;
  if (SHIBYTE(v45) < 0) {
    operator delete(*((void **)&v44 + 1));
  }
  std::streambuf::~streambuf((char *)v43 + 8);
  std::ios::~ios(v47);
}

void sub_100368EBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a13) {
    sub_1002CD254(a13);
  }

  sub_1001FD0F4((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_100368F68(uint64_t a1)
{
  uint64_t v2 = sub_10024F00C();
  int v3 = *(unsigned __int16 *)(a1 + 40);
  uint64_t v4 = (const void *)sub_10056AAF0(*(void *)(a1 + 32));
  size_t v5 = sub_10056AAD8(*(void *)(a1 + 32));
  sub_1002528C0(v2, v3, v4, v5, 1LL, *(_BYTE *)(a1 + 42));
  unsigned __int16 v6 = *(void **)(a1 + 32);
  if (v6)
  {
    void *v6 = &off_10087FAA8;
    unsigned __int8 v7 = (unsigned int *)v6[1];
    if (v7) {
      sub_1002CD254(v7);
    }
    operator delete(v6);
  }

void sub_100368FFC(uint64_t a1)
{
  if (qword_1008D9050 != -1) {
    dispatch_once(&qword_1008D9050, &stru_100893358);
  }
  sub_100369054(qword_1008D9048, *(unsigned __int16 *)(a1 + 40), *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 42));
}

void sub_100369054(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1040;
    LODWORD(v36) = 6;
    WORD2(v36) = 2096;
    *(void *)((char *)&v36 + 6) = a3;
    HIWORD(v36) = 1024;
    unsigned int v37 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "l2capConnectIndCb PSM:0x%04x Address: %{bluetooth:BD_ADDR}.6P) cid:%d",  buf,  0x1Eu);
  }

  uint64_t v9 = *(void **)(a1 + 16);
  if (v9 != (void *)(a1 + 24))
  {
    while (2)
    {
      uint64_t v10 = v9[5];
      unint64_t v11 = *(uint64_t **)(v10 + 8);
      uint64_t v12 = *(uint64_t **)(v10 + 16);
      while (v11 != v12)
      {
        uint64_t v13 = *v11;
        if (*(unsigned __int16 *)(*v11 + 2) == a2 && !*(_BYTE *)(v13 + 4))
        {
          if (qword_1008D5F50 != -1) {
            dispatch_once(&qword_1008D5F50, &stru_100893318);
          }
          *(_DWORD *)tm buf = *(_DWORD *)a3;
          *(_WORD *)&uint8_t buf[4] = *(_WORD *)(a3 + 4);
          uint64_t v17 = (unsigned __int8 *)sub_1003FFEB0(off_1008D5F48, (uint64_t)buf, 1);
          uint64_t v18 = v17;
          if (v17 && v17[1332])
          {
            uint64_t v19 = (os_log_s *)qword_1008F7610;
            if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
            {
              int v20 = *(unsigned __int16 *)(v13 + 24);
              *(_DWORD *)tm buf = 67110146;
              *(_DWORD *)&uint8_t buf[4] = a2;
              *(_WORD *)&uint8_t buf[8] = 1040;
              LODWORD(v36) = 6;
              WORD2(v36) = 2096;
              *(void *)((char *)&v36 + 6) = a3;
              HIWORD(v36) = 1024;
              unsigned int v37 = a4;
              __int16 v38 = 1024;
              int v39 = v20;
              _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Accepting connection for PSM:0x%04x Address: %{bluetooth:BD_ADDR}.6P) cid:%d inMTU=%d",  buf,  0x24u);
            }

            id v21 = sub_1003E36CC((uint64_t)v18, a2);
            unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
            uint64_t v23 = v22;
            if (v22)
            {
              if ([v22 length] == (id)2)
              {
                unsigned int v24 = *(unsigned __int16 *)[v23 bytes];
                *(_BYTE *)(v13 + 64) = 3;
                *(_WORD *)(v13 + 66) = 2;
                unsigned int v25 = bswap32(v24) >> 16;
                goto LABEL_32;
              }

              if ([v23 length] == (id)4)
              {
                unsigned int v27 = *(_DWORD *)[v23 bytes];
                *(_BYTE *)(v13 + 64) = 3;
                *(_WORD *)(v13 + 66) = 4;
                unsigned int v25 = bswap32(v27);
LABEL_32:
                *(_DWORD *)(v13 + 72) = v25;
              }

              else
              {
                *(_BYTE *)(v13 + 64) = 3;
                *(_WORD *)(v13 + 66) = 16;
                *(void *)(v13 + 72) = [v23 bytes];
              }

              char v32 = 0;
              sub_100242CA4(&v32);
              int v28 = sub_100174B2C( (uint64_t)sub_1003668D4,  (uint64_t)sub_100366A28,  (uint64_t)sub_100366B20,  a4,  v13 + 24,  1,  v13 + 64);
              sub_100242CD0(&v32);
              if (v28)
              {
                if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR)) {
                  sub_1006723D8();
                }
              }

              else
              {
                *(void *)src = 0LL;
                uint64_t v34 = 0LL;
                if (qword_1008D5F30 != -1) {
                  dispatch_once(&qword_1008D5F30, &stru_1008932F8);
                }
                sub_1005C8684( (uint64_t)off_1008D5F28,  ((unint64_t)v18[128] << 40) | ((unint64_t)v18[129] << 32) | ((unint64_t)v18[130] << 24) | ((unint64_t)v18[131] << 16) | ((unint64_t)v18[132] << 8) | v18[133],  1u,  0,  0LL,  0LL,  src);
                __int128 v36 = 0uLL;
                *(void *)&buf[2] = 0LL;
                *(_WORD *)tm buf = a4;
                uuid_copy(&buf[2], src);
                BYTE8(v36) = 0;
                *(_DWORD *)((char *)&v36 + 10) = 0;
                BYTE14(v36) = 1;
                unint64_t v29 = *(void *)(v13 + 128);
                if (v29 >= *(void *)(v13 + 136))
                {
                  uint64_t v31 = sub_10036B63C((uint64_t *)(v13 + 120), (uint64_t)buf);
                }

                else
                {
                  *(_WORD *)unint64_t v29 = *(_WORD *)buf;
                  uuid_copy((unsigned __int8 *)(v29 + 2), &buf[2]);
                  int v30 = DWORD2(v36);
                  *(_DWORD *)(v29 + 21) = *(_DWORD *)((char *)&v36 + 11);
                  *(_DWORD *)(v29 + 1std::istream::~istream(v1, v2 + 8) = v30;
                  uint64_t v31 = v29 + 26;
                  *(void *)(v13 + 12std::istream::~istream(v1, v2 + 8) = v29 + 26;
                }

                *(void *)(v13 + 12std::istream::~istream(v1, v2 + 8) = v31;
              }

              sub_100242CD8(&v32);
            }

            else if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR))
            {
              sub_100672574();
            }

            return;
          }

          uint64_t v26 = (os_log_s *)qword_1008F7610;
          if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)tm buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "l2capConnectIndCb - Device is not connected",  buf,  2u);
          }

          return;
        }

        ++v11;
      }

      uint64_t v14 = (void *)v9[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          uint64_t v14 = (void *)*v14;
        }

        while (v14);
      }

      else
      {
        do
        {
          uint64_t v15 = (void *)v9[2];
          BOOL v16 = *v15 == (void)v9;
          uint64_t v9 = v15;
        }

        while (!v16);
      }

      uint64_t v9 = v15;
      if (v15 != (void *)(a1 + 24)) {
        continue;
      }
      break;
    }
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR)) {
    sub_100672370();
  }
}

void sub_100369544( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  *(void *)(v15 + 12std::istream::~istream(v1, v2 + 8) = v14;
  sub_100242CD8(&a13);

  _Unwind_Resume(a1);
}

void sub_10036958C(uint64_t a1)
{
  if (qword_1008D9050 != -1) {
    dispatch_once(&qword_1008D9050, &stru_100893358);
  }
  sub_1003695E8( qword_1008D9048,  *(unsigned __int16 *)(a1 + 36),  *(unsigned __int16 *)(a1 + 38),  *(unsigned __int16 *)(a1 + 40),  *(unsigned int *)(a1 + 32));
}

void sub_1003695E8(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&_BYTE buf[10] = a3;
    *(_WORD *)&_BYTE buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = a4;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "connectedCB cid:0x%04x inMTU:%d outMTU:%d result:%d",  buf,  0x1Au);
  }

  unsigned int v45 = -1;
  unint64_t v11 = *(void **)(a1 + 16);
  if (v11 != (void *)(a1 + 24))
  {
    while (2)
    {
      uint64_t v12 = v11[5];
      for (uint64_t i = *(uint64_t **)(v12 + 8); i != *(uint64_t **)(v12 + 16); ++i)
      {
        uint64_t v14 = *i;
        uint64_t v16 = *(void *)(*i + 120);
        uint64_t v15 = *(unsigned __int16 **)(*i + 128);
        if ((unsigned __int16 *)v16 != v15)
        {
          uint64_t v17 = -v16;
          while (*(unsigned __int16 *)v16 != (_DWORD)a2)
          {
            v16 += 26LL;
            v17 -= 26LL;
          }

          memset(dst, 0, sizeof(dst));
          uuid_copy(dst, (const unsigned __int8 *)(v16 + 2));
          if ((_DWORD)a5)
          {
            if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR)) {
              sub_100672514();
            }
            BOOL v21 = 1;
          }

          else
          {
            *(_WORD *)(v16 + 20) = a3;
            *(_WORD *)(v16 + 22) = a4;
            *(_BYTE *)(v16 + 1std::istream::~istream(v1, v2 + 8) = 1;
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_1008932F8);
            }
            unsigned int v22 = off_1008D5F28;
            uint64_t v23 = sub_100241F94((const unsigned __int8 *)(v16 + 2));
            unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
            uint64_t v25 = sub_1005CC198((uint64_t)v22, v24, 0);

            if (qword_1008D5F50 != -1) {
              dispatch_once(&qword_1008D5F50, &stru_100893318);
            }
            uint64_t v26 = sub_10040007C(off_1008D5F48, v25, 0);
            if (v26 && v26[1332])
            {
              unsigned int v27 = (os_log_s *)qword_1008F7610;
              if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
              {
                int v28 = *(unsigned __int16 *)(v16 + 20);
                int v29 = *(unsigned __int16 *)(v16 + 22);
                int v30 = *(_DWORD *)(v14 + 112);
                *(_DWORD *)tm buf = 67109888;
                *(_DWORD *)&uint8_t buf[4] = a2;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&_BYTE buf[10] = v28;
                *(_WORD *)&_BYTE buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v29;
                *(_WORD *)&buf[20] = 1024;
                *(_DWORD *)&buf[22] = v30;
                _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Registering pipe cid:0x%04x inMTU:%d outMTU:%d priority:%d",  buf,  0x1Au);
              }

              v42[0] = BYTE5(v25);
              v42[1] = BYTE4(v25);
              v42[2] = BYTE3(v25);
              void v42[3] = BYTE2(v25);
              void v42[4] = BYTE1(v25);
              v42[5] = v25;
              uint64_t v31 = sub_10012D890((uint64_t)v42);
              uint64_t v32 = sub_10024F00C();
              int v33 = sub_1002501BC(v32, v31, a2, *(_DWORD *)(v12 + 36), a4, (int *)&v45, *(_DWORD *)(v14 + 112));
              BOOL v21 = v33 != 0;
              if (v33)
              {
                uint64_t v34 = (os_log_s *)qword_1008F7610;
                if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR))
                {
                  memset(buf, 0, 37);
                  uuid_unparse_upper(dst, (char *)buf);
                  sub_10002418C(__p, (char *)buf);
                  char v41 = v44 >= 0 ? __p : (void **)__p[0];
                  *(_DWORD *)tm buf = 67109378;
                  *(_DWORD *)&uint8_t buf[4] = a2;
                  *(_WORD *)&uint8_t buf[8] = 2082;
                  *(void *)&_BYTE buf[10] = v41;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "Failed to register a socket for channel 0x%04x on device %{public}s",  buf,  0x12u);
                  if (v44 < 0) {
                    operator delete(__p[0]);
                  }
                }

                buf[0] = 0;
                sub_100242CA4(buf);
                if (*(_BYTE *)(v14 + 56)) {
                  sub_100175D08(a2);
                }
                else {
                  sub_1001759FC(a2, 436LL);
                }
                sub_100242CD8(buf);
                a5 = 1805LL;
              }

              else
              {
                buf[0] = 0;
                sub_100242CA4(buf);
                sub_10018A690(v31);
                sub_100242CD8(buf);
                a5 = 0LL;
              }
            }

            else
            {
              uint64_t v35 = (os_log_s *)qword_1008F7610;
              if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_ERROR))
              {
                memset(buf, 0, 37);
                uuid_unparse_upper((const unsigned __int8 *)(v16 + 2), (char *)buf);
                sub_10002418C(__p, (char *)buf);
                __int16 v40 = v44 >= 0 ? __p : (void **)__p[0];
                *(_DWORD *)tm buf = 136446210;
                *(void *)&uint8_t buf[4] = v40;
                _os_log_error_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "Device is not connected %{public}s !",  buf,  0xCu);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              BOOL v21 = 0;
              a5 = 1804LL;
            }
          }

          sub_10036A534(a1, a2);
          __int128 v36 = *(void (****)(void, void *, uint64_t, void, uint64_t, void, void))v12;
          unsigned int v37 = sub_100241F94(dst);
          __int16 v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
          (**v36)(v36, v38, a5, *(unsigned __int16 *)(v14 + 2), a2, *(unsigned __int8 *)(v16 + 24), v45);

          if (v21)
          {
            sub_10036B95C(26 - v17, *(void *)(v14 + 128), -v17);
            *(void *)(v14 + 12std::istream::~istream(v1, v2 + 8) = v39;
          }

          return;
        }

void sub_100369B84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100369BBC(uint64_t a1)
{
  if (qword_1008D9050 != -1) {
    dispatch_once(&qword_1008D9050, &stru_100893358);
  }
  sub_100369C10(qword_1008D9048, *(unsigned __int16 *)(a1 + 36), *(_DWORD *)(a1 + 32));
}

void sub_100369C10(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned __int16 v6 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&_BYTE buf[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "disconnectedCB cid:%d reason:%d", buf, 0xEu);
  }

  unsigned int v40 = a3;
  uint64_t v42 = a1;
  unsigned __int8 v7 = (uint64_t **)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v39 = v7;
  char v41 = v7 + 1;
  if ((uint64_t **)v8 != v7 + 1)
  {
    while (2)
    {
      BOOL v43 = *(void **)(v8 + 40);
      uint64_t v10 = v43[1];
      uint64_t v9 = v43[2];
      while (v10 != v9)
      {
        unint64_t v11 = *(_BYTE **)v10;
        uint64_t v12 = *(unsigned __int16 **)(*(void *)v10 + 120LL);
        if (v12 != *(unsigned __int16 **)(*(void *)v10 + 128LL))
        {
          uint64_t v13 = -(uint64_t)v12;
          while (1)
          {
            memset(dst, 0, sizeof(dst));
            uuid_copy(dst, (const unsigned __int8 *)v12 + 2);
            uint64_t v14 = (os_log_s *)qword_1008F7610;
            if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_INFO))
            {
              memset(buf, 0, 37);
              uuid_unparse_upper(dst, (char *)buf);
              sub_10002418C(__p, (char *)buf);
              uint64_t v15 = __p;
              if (v45 < 0) {
                uint64_t v15 = (void **)__p[0];
              }
              int v16 = *v12;
              *(_DWORD *)tm buf = 136446466;
              *(void *)&uint8_t buf[4] = v15;
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v16;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "device=%{public}s cid=%x", buf, 0x12u);
              if (v45 < 0) {
                operator delete(__p[0]);
              }
            }

            if (*v12 == (_DWORD)a2) {
              break;
            }
            v12 += 13;
            v13 -= 26LL;
            if (v12 == *((unsigned __int16 **)v11 + 16))
            {
              uint64_t v9 = v43[2];
              goto LABEL_16;
            }
          }

          uint64_t v24 = sub_10024F00C();
          sub_100252278(v24, *v12);
          if (!*((_BYTE *)v43 + 32))
          {
            uint64_t v25 = *v43;
            uint64_t v26 = sub_100241F94(dst);
            unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
            (*(void (**)(uint64_t, void *, void, void, uint64_t))(*(void *)v25 + 8LL))( v25,  v27,  v40,  *((unsigned __int16 *)v11 + 1),  a2);
          }

          sub_10036B95C(26 - v13, *((void *)v11 + 16), -v13);
          *((void *)v11 + 16) = v28;
          if (*v11)
          {
            if (!v11[4] && v28 == *((void *)v11 + 15))
            {
              uint64_t v29 = sub_1003655CC(v42, (uint64_t)v11);
              if ((_DWORD)v29 != 10 && !*((_BYTE *)v43 + 32)) {
                (*(void (**)(void, void, uint64_t))(*(void *)*v43 + 24LL))( *v43,  *((unsigned __int16 *)v11 + 1),  v29);
              }
            }

            int v30 = (void *)*((void *)v11 + 16);
            if (v30 == *((void **)v11 + 15))
            {
              uint64_t v31 = v43[2];
              uint64_t v32 = v31 - (v10 + 8);
              if (v31 != v10 + 8)
              {
                memmove((void *)v10, (const void *)(v10 + 8), v31 - (v10 + 8));
                int v30 = (void *)*((void *)v11 + 15);
              }

              time_t v43[2] = v10 + v32;
              if (v30)
              {
                *((void *)v11 + 16) = v30;
                operator delete(v30);
              }

              operator delete(v11);
            }

            if (*((_BYTE *)v43 + 32) && v43[2] == v43[1])
            {
              int v33 = (void *)sub_10036B2F4((uint64_t)v43);
              operator delete(v33);
              sub_1001FDBCC(v39, (uint64_t *)v8);
LABEL_55:
              operator delete((void *)v8);
            }
          }

          return;
        }

void sub_10036A0A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10036A0B8(void *a1, int a2, const void *a3, unsigned int a4, int a5)
{
  unint64_t v11 = (unsigned __int16 *)a1[8];
  uint64_t v10 = (unsigned __int16 *)a1[9];
  if (v11 != v10)
  {
    while (*v11 != a2)
    {
      if (++v11 == v10)
      {
        unint64_t v11 = (unsigned __int16 *)a1[9];
        break;
      }
    }
  }

  if (v11 == v10)
  {
    uint64_t v15 = sub_10024F00C();
    sub_1002528C0(v15, a2, a3, a4, 1LL, a5);
    if (!a5) {
      return;
    }
  }

  else
  {
    uint64_t v12 = (os_log_s *)qword_1008F7610;
    if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)tm buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = a2;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&_BYTE buf[10] = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "l2capDataIndCb for CID: 0x%x, Len: 0x%x",  buf,  0xEu);
    }

    uint64_t v13 = operator new(0x10uLL);
    sub_10056AB04(v13, a3, a4);
    uint64_t v14 = sub_100404FE8();
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472LL;
    v39[2] = sub_10036A64C;
    void v39[3] = &unk_100893298;
    __int16 v40 = a2;
    v39[4] = v13;
    char v41 = a5;
    sub_100405384(v14, v39);
    if (!a5) {
      return;
    }
  }

  uint64_t v48 = 0LL;
  __int128 v46 = 0u;
  memset(v47, 0, sizeof(v47));
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  *(_OWORD *)tm buf = 0u;
  memset(v43, 0, sizeof(v43));
  sub_1001FCFC8((uint64_t)buf);
  int v16 = (void *)a1[2];
  uint64_t v17 = a1 + 3;
  if (v16 == a1 + 3)
  {
    uint64_t v18 = 0LL;
  }

  else
  {
    uint64_t v18 = 0LL;
    do
    {
      uint64_t v19 = v16[5];
      uint64_t v20 = *(void *)(v19 + 8);
      uint64_t v21 = *(void *)(v19 + 16);
LABEL_14:
      if (v20 == v21)
      {
        char v27 = 0;
      }

      else
      {
        for (uint64_t i = *(const unsigned __int8 **)(*(void *)v20 + 120LL); ; i += 26)
        {
          if (i == *(const unsigned __int8 **)(*(void *)v20 + 128LL))
          {
            v20 += 8LL;
            goto LABEL_14;
          }
        }

        uint64_t v23 = sub_100241F94(i + 2);
        uint64_t v24 = objc_claimAutoreleasedReturnValue(v23);

        sub_1004949D8(v16[4], &__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t size = __p.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t size = __p.__r_.__value_.__l.__size_;
        }
        sub_1001FD17C(v43, (uint64_t)p_p, size);
        char v27 = 1;
        uint64_t v18 = (void *)v24;
      }

      uint64_t v28 = (void *)v16[1];
      if (v28)
      {
        do
        {
          uint64_t v29 = v28;
          uint64_t v28 = (void *)*v28;
        }

        while (v28);
      }

      else
      {
        do
        {
          uint64_t v29 = (void *)v16[2];
          BOOL v30 = *v29 == (void)v16;
          int v16 = v29;
        }

        while (!v30);
      }

      if (v29 == v17) {
        char v27 = 1;
      }
      int v16 = v29;
    }

    while ((v27 & 1) == 0);
  }

  __int128 v36 = 0LL;
  int64_t v37 = 0LL;
  sub_10056AB04(&v36, a3, a4);
  uint64_t v31 = sub_1002E9074();
  uint64_t v32 = &__p;
  std::stringbuf::str(&__p, (const std::stringbuf *)((char *)v43 + 8));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    uint64_t v32 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v34 = &off_10087FAA8;
  uint64_t v35 = v37;
  if (v37) {
    sub_1002CD1E0((uint64_t)v37);
  }
  (*(void (**)(uint64_t, uint64_t, std::stringbuf::string_type *, void *, uint64_t (***)()))(*(void *)v31 + 40LL))( v31,  4LL,  v32,  v18,  &v34);
  uint64_t v34 = &off_10087FAA8;
  if (v35) {
    sub_1002CD254(v35);
  }
  __int128 v36 = &off_10087FAA8;
  if (v37) {
    sub_1002CD254(v37);
  }

  *(void *)&v43[0] = v33;
  if (SHIBYTE(v45) < 0) {
    operator delete(*((void **)&v44 + 1));
  }
  std::streambuf::~streambuf((char *)v43 + 8);
  std::ios::~ios(v47);
}

void sub_10036A488( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a13) {
    sub_1002CD254(a13);
  }

  sub_1001FD0F4((uint64_t)&a26);
  _Unwind_Resume(a1);
}

_BYTE *sub_10036A534(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109120;
    v12[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "cid:0x%04x", (uint8_t *)v12, 8u);
  }

  LOBYTE(v12[0]) = 0;
  sub_100242CA4(v12);
  unsigned __int16 v6 = *(char **)(a1 + 64);
  size_t v5 = *(char **)(a1 + 72);
  if (v6 != v5)
  {
    uint64_t v7 = 0LL;
    while (*(unsigned __int16 *)&v6[v7] != a2)
    {
      v7 += 2LL;
      if (&v6[v7] == v5) {
        return sub_100242CD8(v12);
      }
    }

    uint64_t v8 = &v6[v7];
    uint64_t v9 = &v6[v7 + 2];
    int64_t v10 = v5 - v9;
    if (v5 != v9) {
      memmove(&v6[v7], v9, v5 - v9);
    }
    *(void *)(a1 + 72) = &v8[v10];
  }

  return sub_100242CD8(v12);
}

void sub_10036A64C(uint64_t a1)
{
  uint64_t v2 = sub_10024F00C();
  int v3 = *(unsigned __int16 *)(a1 + 40);
  uint64_t v4 = (const void *)sub_10056AAF0(*(void *)(a1 + 32));
  size_t v5 = sub_10056AAD8(*(void *)(a1 + 32));
  sub_1002528C0(v2, v3, v4, v5, 1LL, *(_BYTE *)(a1 + 42));
  unsigned __int16 v6 = *(void **)(a1 + 32);
  if (v6)
  {
    void *v6 = &off_10087FAA8;
    uint64_t v7 = (unsigned int *)v6[1];
    if (v7) {
      sub_1002CD254(v7);
    }
    operator delete(v6);
  }

uint64_t sub_10036A6E0(void *a1)
{
  uint64_t v1 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)tm buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "statedump: ------------------ LE L2CAP Channels -------------------",  buf,  2u);
    uint64_t v1 = (os_log_s *)qword_1008F7610;
  }

  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)tm buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: Registered Sessions:", buf, 2u);
  }

  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 3)
  {
    do
    {
      uint64_t v66 = v2;
      uint64_t v3 = v2[5];
      uint64_t v4 = (os_log_s *)qword_1008F7610;
      if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
      {
        size_t v5 = "LE";
        if (!*(_BYTE *)(v3 + 40)) {
          size_t v5 = "Classic";
        }
        *(_DWORD *)tm buf = 136446210;
        *(void *)&uint8_t buf[4] = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "statedump: --------- Session: %{public}s ---------",  buf,  0xCu);
        uint64_t v4 = (os_log_s *)qword_1008F7610;
      }

      uint64_t v68 = v3;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        sub_100494958(v66[4], (uint64_t)buf);
        unsigned __int16 v6 = buf;
        if ((buf[23] & 0x80u) != 0) {
          unsigned __int16 v6 = *(uint8_t **)buf;
        }
        int v7 = *(_DWORD *)(v66[5] + 36LL);
        *(_DWORD *)char v69 = 136446466;
        *(void *)&uint8_t v69[4] = v6;
        __int16 v70 = 1024;
        int v71 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "statedump: %{public}s pid:%d",  v69,  0x12u);
        uint64_t v4 = (os_log_s *)qword_1008F7610;
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = "Yes";
        if (!*(_BYTE *)(v3 + 32)) {
          uint64_t v8 = "No";
        }
        *(_DWORD *)tm buf = 136446210;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "statedump:    Zombied: %{public}s",  buf,  0xCu);
        uint64_t v4 = (os_log_s *)qword_1008F7610;
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)tm buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:    Endpoints:", buf, 2u);
      }

      int64_t v10 = *(uint64_t **)(v3 + 8);
      for (uint64_t i = *(uint64_t **)(v3 + 16); v10 != i; uint64_t i = *(uint64_t **)(v68 + 16))
      {
        uint64_t v11 = *v10;
        uint64_t v12 = (os_log_s *)qword_1008F7610;
        if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v13 = "LE";
          if (!*(_BYTE *)(v11 + 56)) {
            uint64_t v13 = "Classic";
          }
          *(_DWORD *)tm buf = 136446210;
          *(void *)&uint8_t buf[4] = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "statedump: --------- Endpoint type: %{public}s ---------",  buf,  0xCu);
          uint64_t v12 = (os_log_s *)qword_1008F7610;
        }

        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = "Client for";
          if (!*(_BYTE *)(v11 + 4)) {
            uint64_t v14 = "Listener for";
          }
          int v15 = *(unsigned __int16 *)(v11 + 2);
          int v16 = "Yes";
          if (!*(_BYTE *)v11) {
            int v16 = "No";
          }
          *(_DWORD *)tm buf = 136446722;
          *(void *)&uint8_t buf[4] = v14;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = v15;
          *(_WORD *)&_BYTE buf[18] = 2082;
          *(void *)&buf[20] = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "statedump:          %{public}s PSM:0x%04x Zombied:%{public}s",  buf,  0x1Cu);
          uint64_t v12 = (os_log_s *)qword_1008F7610;
        }

        if (*(_BYTE *)(v11 + 56) == 1)
        {
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)tm buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:          Params:", buf, 2u);
            uint64_t v12 = (os_log_s *)qword_1008F7610;
          }

          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            int v17 = *(unsigned __int16 *)(v11 + 14);
            *(_DWORD *)tm buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "statedump:              creditSignalDelta:%d",  buf,  8u);
            uint64_t v12 = (os_log_s *)qword_1008F7610;
          }

          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            int v18 = *(unsigned __int16 *)(v11 + 16);
            *(_DWORD *)tm buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "statedump:              initialCredits:%d",  buf,  8u);
            uint64_t v12 = (os_log_s *)qword_1008F7610;
          }

          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            int v19 = *(unsigned __int16 *)(v11 + 10);
            *(_DWORD *)tm buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v19;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "statedump:              inMPS:%d",  buf,  8u);
            uint64_t v12 = (os_log_s *)qword_1008F7610;
          }

          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            int v20 = *(unsigned __int16 *)(v11 + 8);
            *(_DWORD *)tm buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "statedump:              inMTU:%d",  buf,  8u);
            uint64_t v12 = (os_log_s *)qword_1008F7610;
          }

          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            int v21 = *(unsigned __int8 *)(v11 + 12);
            *(_DWORD *)tm buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "statedump:              requiresAuth:%d",  buf,  8u);
            uint64_t v12 = (os_log_s *)qword_1008F7610;
          }
        }

        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)tm buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "statedump:          Connected devices:",  buf,  2u);
        }

        unsigned int v22 = *(const unsigned __int8 **)(v11 + 120);
        uint64_t v23 = *(unsigned __int16 **)(v11 + 128);
        while (v22 != (const unsigned __int8 *)v23)
        {
          uint64_t v24 = (os_log_s *)qword_1008F7610;
          if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
          {
            memset(buf, 0, 37);
            uuid_unparse_upper(v22 + 2, (char *)buf);
            sub_10002418C(v69, (char *)buf);
            if (v72 >= 0) {
              uint64_t v25 = v69;
            }
            else {
              uint64_t v25 = *(_BYTE **)v69;
            }
            int v26 = *(unsigned __int16 *)v22;
            int v27 = *((unsigned __int16 *)v22 + 10);
            int v28 = *((unsigned __int16 *)v22 + 11);
            int v29 = v22[18];
            *(_DWORD *)tm buf = 136447234;
            *(void *)&uint8_t buf[4] = v25;
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v26;
            *(_WORD *)&_BYTE buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&_BYTE buf[24] = 1024;
            *(_DWORD *)&_BYTE buf[26] = v28;
            *(_WORD *)&buf[30] = 1024;
            *(_DWORD *)&uint8_t buf[32] = v29;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "statedump:             %{public}s (0x%04x) intMTU:%d outMTU:%d state:%d",  buf,  0x24u);
            if (v72 < 0) {
              operator delete(*(void **)v69);
            }
            uint64_t v23 = *(unsigned __int16 **)(v11 + 128);
          }

          v22 += 26;
        }

        ++v10;
      }

      BOOL v30 = (os_log_s *)qword_1008F7610;
      if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)tm buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "statedump: Registered Sessions:", buf, 2u);
      }

      uint64_t v31 = a1[5];
      uint64_t v32 = a1[6];
      while (v31 != v32)
      {
        uint64_t v33 = (os_log_s *)qword_1008F7610;
        if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
        {
          sub_100494958(*(void *)v31, (uint64_t)v69);
          if (v72 >= 0) {
            uint64_t v34 = v69;
          }
          else {
            uint64_t v34 = *(_BYTE **)v69;
          }
          int v35 = *(unsigned __int16 *)(v31 + 8);
          __int128 v36 = "YES";
          if (!*(_BYTE *)(v31 + 24)) {
            __int128 v36 = "NO";
          }
          int v37 = *(_DWORD *)(v31 + 28);
          *(_DWORD *)tm buf = 136446978;
          *(void *)&uint8_t buf[4] = v34;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = v35;
          *(_WORD *)&_BYTE buf[18] = 2082;
          *(void *)&buf[20] = v36;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v37;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "statedump: %{public}s psm:0z%0x requiresEncryption:%{public}s pid:%d",  buf,  0x22u);
          if (v72 < 0) {
            operator delete(*(void **)v69);
          }
          uint64_t v32 = a1[6];
        }

        v31 += 48LL;
      }

      __int16 v38 = v66;
      uint64_t v39 = (void *)v66[1];
      if (v39)
      {
        do
        {
          __int16 v40 = v39;
          uint64_t v39 = (void *)*v39;
        }

        while (v39);
      }

      else
      {
        do
        {
          __int16 v40 = (void *)v38[2];
          BOOL v41 = *v40 == (void)v38;
          __int16 v38 = v40;
        }

        while (!v41);
      }

      uint64_t v2 = v40;
    }

    while (v40 != a1 + 3);
  }

  uint64_t v42 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)tm buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: Zombied listeners", buf, 2u);
  }

  for (uint64_t j = (uint64_t *)a1[11]; j != (uint64_t *)a1[12]; ++j)
  {
    uint64_t v44 = *j;
    __int128 v45 = (os_log_s *)qword_1008F7610;
    if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v46 = "LE";
      if (!*(_BYTE *)(v44 + 56)) {
        __int128 v46 = "Classic";
      }
      *(_DWORD *)tm buf = 136446210;
      *(void *)&uint8_t buf[4] = v46;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "statedump: --------- Endpoint type: %{public}s ---------",  buf,  0xCu);
      __int128 v45 = (os_log_s *)qword_1008F7610;
    }

    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v47 = "Client for";
      if (!*(_BYTE *)(v44 + 4)) {
        __int16 v47 = "Listener for";
      }
      int v48 = *(unsigned __int16 *)(v44 + 2);
      __int16 v49 = "Yes";
      if (!*(_BYTE *)v44) {
        __int16 v49 = "No";
      }
      *(_DWORD *)tm buf = 136446722;
      *(void *)&uint8_t buf[4] = v47;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = v48;
      *(_WORD *)&_BYTE buf[18] = 2082;
      *(void *)&buf[20] = v49;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "statedump:          %{public}s PSM:0x%04x Zombied:%{public}s",  buf,  0x1Cu);
      __int128 v45 = (os_log_s *)qword_1008F7610;
    }

    if (*(_BYTE *)(v44 + 56) == 1)
    {
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)tm buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:          Params:", buf, 2u);
        __int128 v45 = (os_log_s *)qword_1008F7610;
      }

      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        int v50 = *(unsigned __int16 *)(v44 + 14);
        *(_DWORD *)tm buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v50;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "statedump:              creditSignalDelta:%d",  buf,  8u);
        __int128 v45 = (os_log_s *)qword_1008F7610;
      }

      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        int v51 = *(unsigned __int16 *)(v44 + 16);
        *(_DWORD *)tm buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v51;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "statedump:              initialCredits:%d",  buf,  8u);
        __int128 v45 = (os_log_s *)qword_1008F7610;
      }

      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        int v52 = *(unsigned __int16 *)(v44 + 10);
        *(_DWORD *)tm buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v52;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:              inMPS:%d", buf, 8u);
        __int128 v45 = (os_log_s *)qword_1008F7610;
      }

      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        int v53 = *(unsigned __int16 *)(v44 + 8);
        *(_DWORD *)tm buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v53;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:              inMTU:%d", buf, 8u);
        __int128 v45 = (os_log_s *)qword_1008F7610;
      }

      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        int v54 = *(unsigned __int8 *)(v44 + 12);
        *(_DWORD *)tm buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v54;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "statedump:              requiresAuth:%d",  buf,  8u);
        __int128 v45 = (os_log_s *)qword_1008F7610;
      }
    }

    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)tm buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "statedump:          Connected devices:",  buf,  2u);
    }

    __int16 v55 = *(const unsigned __int8 **)(v44 + 120);
    int v56 = *(unsigned __int16 **)(v44 + 128);
    while (v55 != (const unsigned __int8 *)v56)
    {
      __int16 v57 = (os_log_s *)qword_1008F7610;
      if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v55 + 2, (char *)buf);
        sub_10002418C(v69, (char *)buf);
        if (v72 >= 0) {
          int v58 = v69;
        }
        else {
          int v58 = *(_BYTE **)v69;
        }
        int v59 = *(unsigned __int16 *)v55;
        int v60 = *((unsigned __int16 *)v55 + 10);
        int v61 = *((unsigned __int16 *)v55 + 11);
        int v62 = v55[18];
        *(_DWORD *)tm buf = 136447234;
        *(void *)&uint8_t buf[4] = v58;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v59;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v60;
        *(_WORD *)&_BYTE buf[24] = 1024;
        *(_DWORD *)&_BYTE buf[26] = v61;
        *(_WORD *)&buf[30] = 1024;
        *(_DWORD *)&uint8_t buf[32] = v62;
        _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "statedump:             %{public}s (0x%04x) intMTU:%d outMTU:%d state:%d",  buf,  0x24u);
        if (v72 < 0) {
          operator delete(*(void **)v69);
        }
        int v56 = *(unsigned __int16 **)(v44 + 128);
      }

      v55 += 26;
    }
  }

  uint64_t v63 = sub_10024F00C();
  return nullsub_63(v63, v64);
}

uint64_t sub_10036B2F4(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      if (*v3)
      {
        size_t v5 = (void *)v4[15];
        if (v5)
        {
          uint8_t v4[16] = v5;
          operator delete(v5);
        }

        operator delete(v4);
        uint64_t v2 = *(void **)(a1 + 16);
      }

      ++v3;
    }

    while (v3 != v2);
    uint64_t v3 = *(void **)(a1 + 8);
  }

  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }

  return a1;
}

uint64_t sub_10036B36C( uint64_t a1, __int16 a2, char a3, int a4, int a5, int a6, int a7, int a8, char a9, int a10)
{
  *(_BYTE *)a1 = 0;
  *(_WORD *)(a1 + 2) = a2;
  *(_BYTE *)(a1 + 4) = a3;
  *(_BYTE *)(a1 + 56) = a9;
  *(_DWORD *)(a1 + 112) = a10;
  *(void *)(a1 + 12std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(_WORD *)(a1 + std::istream::~istream(v1, v2 + 8) = a5;
  *(_WORD *)(a1 + 10) = a6;
  *(_BYTE *)(a1 + 12) = a4;
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = a8;
  *(_WORD *)(a1 + 16) = a7;
  *(_DWORD *)(a1 + 20) = -1;
  int v16 = (os_log_s *)qword_1008F7610;
  if (os_log_type_enabled((os_log_t)qword_1008F7610, OS_LOG_TYPE_DEFAULT))
  {
    v18[0] = 67110656;
    v18[1] = a5;
    __int16 v19 = 1024;
    int v20 = a6;
    __int16 v21 = 1024;
    int v22 = a4;
    __int16 v23 = 1024;
    int v24 = a8;
    __int16 v25 = 1024;
    int v26 = a7;
    __int16 v27 = 1024;
    int v28 = -1;
    __int16 v29 = 1024;
    int v30 = a10;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "New Endpoint created inMTU=%d inMPS=%d requiresAuth=%d creditSignalDelta=%d initialCredits=%d maxLatencyinMS=%d priority:%d",  (uint8_t *)v18,  0x2Cu);
  }

  *(_DWORD *)(a1 + 24) = -64512;
  *(_WORD *)(a1 + 2std::istream::~istream(v1, v2 + 8) = 5000;
  *(_WORD *)(a1 + 36) = 0;
  *(void *)(a1 + 40) = 0LL;
  if (!a9)
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(void *)(a1 + 8std::istream::~istream(v1, v2 + 8) = 0LL;
    *(_BYTE *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0LL;
  }

  return a1;
}

void sub_10036B4E8(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_10036B518(_Unwind_Exception *a1)
{
}

void sub_10036B52C(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_10036B55C(_Unwind_Exception *a1)
{
}

void sub_10036B570(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_10036B5A0(_Unwind_Exception *a1)
{
}

void sub_10036B5B4(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_10036B5E4(_Unwind_Exception *a1)
{
}

void sub_10036B5F8(id a1)
{
  uint64_t v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_10036B628(_Unwind_Exception *a1)
{
}

uint64_t sub_10036B63C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = 0x4EC4EC4EC4EC4EC5LL * ((a1[1] - *a1) >> 1);
  unint64_t v4 = v3 + 1;
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0x4EC4EC4EC4EC4EC5LL * ((v8 - v2) >> 1);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x4EC4EC4EC4EC4ECLL) {
    unint64_t v10 = 0x9D89D89D89D89D8LL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v21 = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_10036B8B4(v7, v10);
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = (unsigned __int8 *)&v11[26 * v3];
  std::stringbuf::string_type __p = v11;
  int v18 = v12;
  __int16 v19 = v12;
  int v20 = &v11[26 * v10];
  *(_WORD *)uint64_t v12 = *(_WORD *)a2;
  uuid_copy(v12 + 2, (const unsigned __int8 *)(a2 + 2));
  uint64_t v13 = &v11[26 * v3];
  int v14 = *(_DWORD *)(a2 + 18);
  *(_DWORD *)(v13 + 21) = *(_DWORD *)(a2 + 21);
  *(_DWORD *)(v13 + 1std::istream::~istream(v1, v2 + 8) = v14;
  v19 += 26;
  sub_10036B7F0(a1, &__p);
  uint64_t v15 = a1[1];
  if (v19 != v18) {
    __int16 v19 = &v18[(v19 - v18 - 26) % 0x1AuLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v15;
}

void sub_10036B79C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10036B7F0(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 != *a1)
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = v6 + v7;
      *(_WORD *)(v6 + v7 - 26) = *(_WORD *)(v4 + v7 - 26);
      uuid_copy((unsigned __int8 *)(v6 + v7 - 24), (const unsigned __int8 *)(v4 + v7 - 24));
      int v9 = *(_DWORD *)(v4 + v7 - 8);
      *(_DWORD *)(v8 - 5) = *(_DWORD *)(v4 + v7 - 5);
      *(_DWORD *)(v8 - std::istream::~istream(v1, v2 + 8) = v9;
      v7 -= 26LL;
    }

    while (v4 + v7 != v5);
    v6 += v7;
  }

  a2[1] = v6;
  uint64_t v10 = *a1;
  *a1 = v6;
  a2[1] = v10;
  uint64_t v11 = a1[1];
  a1[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = a1[2];
  a1[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
}

void *sub_10036B8B4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x9D89D89D89D89D9LL) {
    sub_100008BD4();
  }
  return operator new(26 * a2);
}

void sub_10036B8FC(id a1)
{
  uint64_t v1 = (char *)operator new(0x70uLL);
  *(void *)uint64_t v1 = off_100893278;
  *((_WORD *)v1 + 4) = 0;
  v1[10] = 1;
  *((void *)v1 + 4) = 0LL;
  *((void *)v1 + 3) = 0LL;
  *((void *)v1 + 2) = v1 + 24;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 8std::istream::~istream(v1, v2 + 8) = 0u;
  *((void *)v1 + 13) = 0LL;
  qword_1008D9048 = (uint64_t)v1;
}

uint64_t sub_10036B95C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    *(_WORD *)a3 = *(_WORD *)v4;
    uuid_copy((unsigned __int8 *)(a3 + 2), (const unsigned __int8 *)(v4 + 2));
    int v6 = *(_DWORD *)(v4 + 18);
    *(_DWORD *)(a3 + 21) = *(_DWORD *)(v4 + 21);
    *(_DWORD *)(a3 + 1std::istream::~istream(v1, v2 + 8) = v6;
    a3 += 26LL;
    v4 += 26LL;
  }

  while (v4 != v5);
  return v5;
}

  ;
}

  ;
}

uint64_t sub_10036B9FC(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100213C20(a1, 9);
  void *v2 = off_100893388;
  v2[32] = off_1008934B8;
  v2[33] = off_100893580;
  v2[34] = off_1008935A8;
  sub_1003A8098((uint64_t)(v2 + 35));
  *(_DWORD *)(a1 + 4sub_100242FAC(v1 - 32) = 0;
  *(void *)(a1 + 520) = 0LL;
  *(void *)(a1 + 44std::istream::~istream(v1, v2 + 8) = 0LL;
  *(void *)(a1 + 456) = 0LL;
  *(void *)(a1 + 440) = 0LL;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 48std::istream::~istream(v1, v2 + 8) = 0u;
  *(void *)(a1 + 504) = a1 + 512;
  *(void *)(a1 + 512) = 0LL;
  *(void *)(a1 + 544) = 0LL;
  *(void *)(a1 + 536) = 0LL;
  *(void *)(a1 + 52std::istream::~istream(v1, v2 + 8) = a1 + 536;
  sub_100242DC4(a1 + 552);
  sub_100242DC4(a1 + 632);
  sub_100243040((pthread_cond_t *)(a1 + 696));
  *(_BYTE *)(a1 + 616) = 0;
  mach_timebase_info((mach_timebase_info_t)(a1 + 620));
  atomic_store(0LL, (unint64_t *)(a1 + 744));
  atomic_store(0LL, (unint64_t *)(a1 + 752));
  atomic_store(0LL, (unint64_t *)(a1 + 760));
  *(void *)(a1 + 76std::istream::~istream(v1, v2 + 8) = mach_absolute_time();
  return a1;
}

void sub_10036BAF0(_Unwind_Exception *a1)
{
  int v6 = (void **)(v1 + 440);
  sub_10023BF24(v1 + 528, *(void **)(v1 + 536));
  sub_10023BF24(v1 + 504, *(void **)(v1 + 512));

  uint64_t v7 = *(void **)(v1 + 472);
  if (v7)
  {
    *(void *)(v1 + 480) = v7;
    operator delete(v7);
  }

  uint64_t v8 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 44std::istream::~istream(v1, v2 + 8) = v8;
    operator delete(v8);
  }

  sub_1003A8180(v2);
  sub_100213D34(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10036BB94(uint64_t a1)
{
  *(void *)a1 = off_100893388;
  *(void *)(a1 + 256) = off_1008934B8;
  *(void *)(a1 + 264) = off_100893580;
  *(void *)(a1 + 272) = off_1008935A8;
  sub_1002430A8(a1 + 696);
  sub_100242E28(a1 + 632);
  sub_100242E28(a1 + 552);
  sub_10023BF24(a1 + 528, *(void **)(a1 + 536));
  sub_10023BF24(a1 + 504, *(void **)(a1 + 512));

  uint64_t v2 = *(void **)(a1 + 472);
  if (v2)
  {
    *(void *)(a1 + 480) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 440);
  if (v3)
  {
    *(void *)(a1 + 44std::istream::~istream(v1, v2 + 8) = v3;
    operator delete(v3);
  }

  sub_1003A8180(a1 + 280);
  return sub_100213D34(a1);
}

uint64_t sub_10036BC38(uint64_t a1)
{
  return sub_10036BB94(a1 - 264);
}

void sub_10036BC40(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10036BB94(a1);
  operator delete(v1);
}

void sub_10036BC54(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10036BB94(a1 - 264);
  operator delete(v1);
}

uint64_t sub_10036BC6C(uint64_t a1)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100893D48);
  }
  sub_10000876C((uint64_t)off_1008D5F48 + 240, a1 + 272);
  *(_BYTE *)(a1 + 780) = 0;
  uint64_t v2 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 8LL))(v2))
  {
    uint64_t v3 = sub_1002E6E00();
    sub_10002418C(v7, "BTAudioHALPlugin");
    sub_10002418C(__p, "BTAudioHALEnableAudioLogging");
    (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v3 + 72LL))(v3, v7, __p, a1 + 780);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }

  return 0LL;
}

void sub_10036BD4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10036BD80(uint64_t a1)
{
  uint64_t v1 = a1 + 280;
  sub_1003A8184(a1 + 280);
  int v15 = 0;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "A2DP");
  sub_10002418C(__p, "mediaFlushTimeoutMs");
  int v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v2 + 88LL))(v2, buf, __p, &v15);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      goto LABEL_10;
    }
  }

  else if (!v3)
  {
    goto LABEL_10;
  }

  uint64_t v4 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Warning: Setting user defined media flush timeout to %d ms",  buf,  8u);
  }

  word_1008D95DA = v15;
LABEL_10:
  uint64_t v5 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 712LL))(v5))
  {
    char v6 = (os_log_s *)qword_1008F7558;
    char v7 = 10;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)tm buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 10;
      char v8 = "Warning: Legacy iPad overwritting SW Queue to %d";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 8u);
    }
  }

  else
  {
    uint64_t v9 = sub_1002E6BF0();
    char v6 = (os_log_s *)qword_1008F7558;
    char v7 = 20;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)tm buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 20;
      char v8 = "Warning: Legacy HW that does not support EPA/Stats overwritting SW Queue to %d";
      goto LABEL_16;
    }
  }

  byte_1008D95DE = v7;
LABEL_18:
  buf[0] = 0;
  sub_100242CA4(buf);
  int v10 = sub_1000D8E60(off_1008935C8, 0, xmmword_1006C24F8, (uint64_t)&unk_1008D95D8);
  sub_100242CD0(buf);
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_1006725D4();
    }
    uint64_t v11 = 1LL;
  }

  else
  {
    sub_1003A87E4(v1);
    uint64_t v11 = 0LL;
  }

  sub_100242CD8(buf);
  return v11;
}

void sub_10036C004( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10036C050(uint64_t a1)
{
  uint64_t v1 = a1 + 280;
  sub_1003A8900(a1 + 280);
  char v4 = 0;
  sub_100242CA4(&v4);
  if (sub_1000D9830())
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100672634();
    }
    uint64_t v2 = 1LL;
  }

  else
  {
    sub_1003A8114(v1);
    uint64_t v2 = 0LL;
  }

  sub_100242CD8(&v4);
  return v2;
}

void sub_10036C0E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10036C0F4(uint64_t a1)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100893D48);
  }
  sub_100009168((uint64_t)off_1008D5F48 + 240, a1 + 272);
  return 0LL;
}

void sub_10036C150(os_unfair_lock_s *a1, _BYTE *a2, int a3, __int16 a4)
{
  unsigned int v8 = sub_10054EC18((uint64_t)a2);
  __int16 v9 = v8;
  uint64_t v10 = sub_10036C234((uint64_t)a1, v8);
  if (a3) {
    int v11 = 2;
  }
  else {
    int v11 = 0;
  }
  sub_1002702DC((uint64_t)a2, v11);
  BOOL v12 = 0;
  if (a2[723]) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = a2[704] == 0;
  }
  if (!v13) {
    BOOL v12 = a2[706] == 0;
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_10036C3A0;
  void v14[3] = &unk_1008936B0;
  void v14[4] = a1;
  _BYTE v14[5] = v10;
  __int16 v15 = v9;
  char v17 = a3;
  BOOL v18 = v12;
  __int16 v16 = a4;
  void v14[6] = a2;
  sub_10036C2E4(a1 + 108, v14);
}

uint64_t sub_10036C234(uint64_t a1, unsigned int a2)
{
  unsigned __int16 v11 = a2;
  uint64_t v2 = *(void *)(a1 + 512);
  if (v2)
  {
    uint64_t v4 = a1 + 504;
    uint64_t v5 = a1 + 512;
    uint64_t v6 = a1 + 512;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v2 + 32);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        __int16 v9 = (uint64_t *)v2;
      }
      else {
        __int16 v9 = (uint64_t *)(v2 + 8);
      }
      if (v8) {
        uint64_t v6 = v2;
      }
      uint64_t v2 = *v9;
    }

    while (*v9);
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
    sub_100672694();
  }
  return 0LL;
}

void sub_10036C2E4(os_unfair_lock_s *a1, void *a2)
{
  int v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_10036C378( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_10036C3A0( uint64_t a1, void (***a2)(void, void, void, void, void, void, void))
{
  int v3 = *(os_unfair_lock_s **)(a1 + 32);
  (**a2)( a2,  *(void *)(a1 + 40),  *(unsigned __int16 *)(a1 + 56),  *(unsigned __int8 *)(a1 + 60),  *(unsigned __int8 *)(a1 + 61),  *(unsigned __int16 *)(a1 + 58),  *(unsigned __int16 *)(*(void *)(a1 + 48) + 708LL));
  if (*(_BYTE *)(a1 + 61))
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (*(_BYTE *)(a1 + 60))
    {
      sub_10054F434(*(void *)(a1 + 48), 1000 * *(unsigned __int16 *)(v4 + 708));
    }

    else
    {
      if (*(_BYTE *)(v4 + 705))
      {
        *(_BYTE *)(v4 + 705) = 0;
        sub_10036C49C(v3, v4, 0);
        uint64_t v4 = *(void *)(a1 + 48);
      }

      if (*(_BYTE *)(v4 + 710))
      {
        *(_BYTE *)(v4 + 710) = 0;
        __int16 v5 = *(_WORD *)(a1 + 56);
        v6[0] = _NSConcreteStackBlock;
        v6[1] = 3221225472LL;
        void v6[2] = sub_10036CA58;
        v6[3] = &unk_100893710;
        __int16 v7 = v5;
        char v8 = 1;
        sub_10036C2E4(v3 + 108, v6);
      }
    }
  }

void sub_10036C49C(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  if (a2)
  {
    if (*(_BYTE *)(a2 + 704)) {
      sub_10054F434(a2, 1000 * *(unsigned __int16 *)(a2 + 708));
    }
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_10036CA74;
    v6[3] = &unk_100893710;
    __int16 v7 = sub_10054EC18(a2);
    char v8 = a3;
    sub_10036C2E4(a1 + 108, v6);
  }

void sub_10036C53C(os_unfair_lock_s *a1, uint64_t a2, __int16 a3)
{
  if (*(_BYTE *)(a2 + 711))
  {
    int v6 = sub_1003A46D4(a2 + 400);
    unsigned int v7 = sub_10054EC18(a2);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _DWORD v8[2] = sub_10036C5E0;
    v8[3] = &unk_1008936D0;
    void v8[4] = sub_10036C234((uint64_t)a1, v7);
    __int16 v10 = a3;
    int v9 = v6;
    sub_10036C2E4(a1 + 108, v8);
  }

uint64_t sub_10036C5E0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a2 + 8LL))( a2,  *(void *)(a1 + 32),  *(unsigned __int16 *)(a1 + 44),  *(unsigned int *)(a1 + 40));
}

void sub_10036C600(os_unfair_lock_s *a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 711))
  {
    unsigned int v3 = sub_10054EC18(a2);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    void v4[2] = sub_10036C680;
    v4[3] = &unk_1008936F0;
    void v4[4] = sub_10036C234((uint64_t)a1, v3);
    sub_10036C2E4(a1 + 108, v4);
  }

uint64_t sub_10036C680(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16LL))(a2, *(void *)(a1 + 32));
}

void sub_10036C698(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  if (*(_BYTE *)(a2 + 704))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    _DWORD v5[2] = sub_10036C714;
    v5[3] = &unk_100893710;
    __int16 v6 = sub_10054EC18(a2);
    char v7 = a3;
    sub_10036C2E4(a1 + 108, v5);
  }

uint64_t sub_10036C714(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 32LL))( a2,  *(unsigned __int16 *)(a1 + 32),  *(unsigned __int8 *)(a1 + 34));
}

void sub_10036C730(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  if (*(_BYTE *)(a2 + 704))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    _DWORD v5[2] = sub_10036C7AC;
    v5[3] = &unk_100893710;
    __int16 v6 = sub_10054EC18(a2);
    char v7 = a3;
    sub_10036C2E4(a1 + 108, v5);
  }

uint64_t sub_10036C7AC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 24LL))( a2,  *(unsigned __int16 *)(a1 + 32),  *(unsigned __int8 *)(a1 + 34));
}

void sub_10036C7C8(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  __int16 v6 = sub_10054EC18(a2);
  *(_BYTE *)(a2 + 706) = a3;
  if (*(_BYTE *)(a2 + 704))
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_10036C854;
    uint64_t v7[3] = &unk_100893710;
    __int16 v8 = v6;
    char v9 = a3;
    sub_10036C2E4(a1 + 108, v7);
  }

uint64_t sub_10036C854(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 48LL))( a2,  *(unsigned __int16 *)(a1 + 32),  *(unsigned __int8 *)(a1 + 34));
}

void sub_10036C870(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  if (*(_BYTE *)(a2 + 704))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    _DWORD v5[2] = sub_10036C8EC;
    v5[3] = &unk_100893710;
    __int16 v6 = sub_10054EC18(a2);
    char v7 = a3;
    sub_10036C2E4(a1 + 108, v5);
  }

uint64_t sub_10036C8EC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 40LL))( a2,  *(unsigned __int16 *)(a1 + 32),  *(unsigned __int8 *)(a1 + 34));
}

void sub_10036C908(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  if (*(_BYTE *)(a2 + 704))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    _DWORD v5[2] = sub_10036C984;
    v5[3] = &unk_100893710;
    __int16 v6 = sub_10054EC18(a2);
    char v7 = a3;
    sub_10036C2E4(a1 + 108, v5);
  }

uint64_t sub_10036C984(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 56LL))( a2,  *(unsigned __int16 *)(a1 + 32),  *(unsigned __int8 *)(a1 + 34));
}

void sub_10036C9A0(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  if (*(_BYTE *)(a2 + 704))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    _DWORD v5[2] = sub_10036CA1C;
    v5[3] = &unk_100893710;
    __int16 v6 = sub_10054EC18(a2);
    char v7 = a3;
    sub_10036C2E4(a1 + 108, v5);
  }

uint64_t sub_10036CA1C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 64LL))( a2,  *(unsigned __int16 *)(a1 + 32),  *(unsigned __int8 *)(a1 + 34));
}

uint64_t sub_10036CA38(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a2 + 104LL))( a2,  *(void *)(a1 + 32),  *(unsigned __int16 *)(a1 + 40),  *(unsigned __int8 *)(a1 + 42));
}

uint64_t sub_10036CA58(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 96LL))( a2,  *(unsigned __int16 *)(a1 + 32),  *(unsigned __int8 *)(a1 + 34));
}

uint64_t sub_10036CA74(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 80LL))( a2,  *(unsigned __int16 *)(a1 + 32),  *(unsigned __int8 *)(a1 + 34));
}

uint64_t sub_10036CA90(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 88LL))( a2,  *(unsigned __int16 *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10036CAAC(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  __int16 v6 = sub_10054EC18(a2);
  uint64_t v7 = *(void *)(a2 + 608);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_10036CB34;
  v8[3] = &unk_100893730;
  void v8[4] = v7;
  __int16 v9 = v6;
  char v10 = a3;
  sub_10036C2E4(a1 + 108, v8);
}

uint64_t sub_10036CB34(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a2 + 112LL))( a2,  *(void *)(a1 + 32),  *(unsigned __int16 *)(a1 + 40),  *(unsigned __int8 *)(a1 + 42));
}

void sub_10036CB54(id a1, A2DPClientListener *a2)
{
}

void sub_10036CB64(os_unfair_lock_s *a1, void *a2)
{
  unsigned int v3 = a2;
  os_unfair_lock_lock(a1);
  __int16 v5 = 0LL;
  __int16 v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    __int16 v6 = v4;
    operator delete(v4);
  }
}

void sub_10036CBF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10036CC20(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(void *)(a1 + 32));
}

uint64_t sub_10036CC38(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 8LL))(a2, *(void *)(a1 + 32));
}

uint64_t sub_10036CC50(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16LL))(a2, *(void *)(a1 + 32));
}

uint64_t sub_10036CC68(uint64_t a1, uint64_t a2)
{
  __int128 v7 = xmmword_1006C2550;
  *(_BYTE *)(a1 + 616) = 1;
  if (sub_1003D2E50(a2, &v7, 4u))
  {
    char v6 = 0;
    sub_100242CA4(&v6);
    uint64_t v3 = sub_1000DA74C((int *)(a2 + 128));
    if ((_DWORD)v3)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
        sub_1006726F4();
      }
      uint64_t v3 = 1LL;
    }

    sub_100242CD8(&v6);
  }

  else
  {
    uint64_t v4 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100672754(a2, v4);
    }
    return 305LL;
  }

  return v3;
}

void sub_10036CD44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10036CD58(void *a1, uint64_t a2)
{
  __int16 v3 = sub_10036CE14(a1, a2);
  uint64_t v9 = 0LL;
  char v10 = &v9;
  uint64_t v11 = 0x2020000000LL;
  int v12 = 0;
  uint64_t v4 = sub_1004050C8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10036CF7C;
  uint64_t v7[3] = &unk_1008937D8;
  void v7[4] = &v9;
  void v7[5] = a1;
  __int16 v8 = v3;
  sub_1004054B4(v4, v7);
  uint64_t v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_10036CDFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10036CE14(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[63];
  if (v4 == a1 + 64) {
    goto LABEL_14;
  }
  while (1)
  {
    uint64_t v5 = v4[5];
    int v6 = *(_DWORD *)(v5 + 128);
    int v7 = *(unsigned __int16 *)(v5 + 132);
    BOOL v8 = v6 == *(_DWORD *)(a2 + 128) && v7 == *(unsigned __int16 *)(a2 + 132);
    if (v8) {
      break;
    }
    uint64_t v9 = (void *)v4[1];
    if (v9)
    {
      do
      {
        char v10 = v9;
        uint64_t v9 = (void *)*v9;
      }

      while (v9);
    }

    else
    {
      do
      {
        char v10 = (void *)v4[2];
        BOOL v8 = *v10 == (void)v4;
        uint64_t v4 = v10;
      }

      while (!v8);
    }

    uint64_t v4 = v10;
    if (v10 == a1 + 64) {
      goto LABEL_14;
    }
  }

  uint64_t result = *((unsigned __int16 *)v4 + 16);
  if (!*((_WORD *)v4 + 16))
  {
LABEL_14:
    int v12 = (os_log_s *)qword_1008F7558;
    uint64_t result = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      sub_1003CF00C(a2, __p);
      if (v16 >= 0) {
        BOOL v13 = __p;
      }
      else {
        BOOL v13 = (void **)__p[0];
      }
      uint64_t v14 = a1[65];
      *(_DWORD *)tm buf = 136446466;
      BOOL v18 = v13;
      __int16 v19 = 2048;
      uint64_t v20 = v14;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "No corresponding device for %{public}s found in fA2dpHandleToDeviceMap (%lu devices)",  buf,  0x16u);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      return 0LL;
    }
  }

  return result;
}