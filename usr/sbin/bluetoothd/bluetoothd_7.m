uint64_t sub_10036CF7C(uint64_t a1)
{
  uint64_t result;
  result = sub_10036CFB0(*(os_unfair_lock_s **)(a1 + 40), *(unsigned __int16 *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_10036CFB0(os_unfair_lock_s *a1, unsigned int a2)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, (uint64_t)&a1[138]);
  uint64_t v4 = sub_10036D544((uint64_t)a1, a2);
  uint64_t v5 = sub_10036C234((uint64_t)a1, a2);
  if (v5)
  {
    unsigned __int16 v6 = sub_1003A400C(v4 + 400);
    if (v6)
    {
      *(_DWORD *)(v4 + 728) = 7;
      v7 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Closing media channel for handle %d",  buf,  8u);
      }

      if (*(_BYTE *)(v4 + 723))
      {
        if (*(_BYTE *)(v5 + 960)) {
          *(_DWORD *)(v5 + 980) = 1;
        }
        sub_1003DEF78(v5, 0);
        sub_100371320(a1);
      }

      LOBYTE(v13[0]) = 0;
      sub_100242CA4(v13);
      int v8 = sub_1000DC154(v6, 0LL);
      sub_100242CD0(v13);
      if (v8 && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(v5, buf);
        sub_100672874();
      }

      sub_100242CD8(v13);
    }

    else
    {
      v10 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Disconnecting A2DP when no AVDTP stream has been established yet",  buf,  2u);
      }
    }

    char v14 = 0;
    sub_100242CA4(&v14);
    int v11 = sub_1000DACA8(a2);
    sub_100242CD0(&v14);
    uint64_t v9 = 0LL;
    if (v11 && v11 != 122)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(v5, v13);
        sub_10067282C();
      }

      uint64_t v9 = 1LL;
      sub_100411718((uint64_t)a1, v5, 1, 122);
    }

    sub_100242CD8(&v14);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100672800();
    }
    uint64_t v9 = 0LL;
  }

  sub_100242FAC((uint64_t)v15);
  return v9;
}

void sub_10036D278( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t sub_10036D2CC()
{
  return 3LL;
}

void sub_10036D2D4(void *a1, uint64_t a2)
{
  int v4 = sub_10036CE14(a1, a2);
  if (v4)
  {
    __int16 v5 = v4;
    uint64_t v6 = sub_1004050C8();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10036D350;
    v7[3] = &unk_10087FF20;
    __int16 v8 = v5;
    v7[4] = a1;
    v7[5] = a2;
    sub_100405384(v6, v7);
  }

void sub_10036D350(uint64_t a1)
{
  uint64_t v2 = sub_10036D544(*(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
  if (v2)
  {
    uint64_t v3 = v2;
    int v4 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003FE1B4((unsigned __int8 *)(*(void *)(a1 + 40) + 128LL), v13);
      int v5 = v14;
      uint64_t v6 = (void **)v13[0];
      sub_1003D0100(*(void *)(a1 + 40), (uint64_t)__p);
      v7 = v13;
      if (v5 < 0) {
        v7 = v6;
      }
      if (v12 >= 0) {
        __int16 v8 = __p;
      }
      else {
        __int16 v8 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446723;
      *(void *)&buf[4] = v7;
      __int16 v16 = 2160;
      uint64_t v17 = 1752392040LL;
      __int16 v18 = 2081;
      v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Device %{public}s name changed to %{private, mask.hash}s",  buf,  0x20u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      if (v14 < 0) {
        operator delete(v13[0]);
      }
    }

    sub_1003D0100(*(void *)(a1 + 40), (uint64_t)v13);
    if (v14 >= 0) {
      uint64_t v9 = (char *)v13;
    }
    else {
      uint64_t v9 = (char *)v13[0];
    }
    sub_10002418C(buf, v9);
    sub_10026F96C(v3, (uint64_t)buf);
    if (SHIBYTE(v18) < 0) {
      operator delete(*(void **)buf);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    int v10 = sub_1003A439C(v3 + 400);
    sub_1005020A4(v3, v10);
  }

void sub_10036D504( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10036D544(uint64_t a1, unsigned int a2)
{
  unsigned __int16 v11 = a2;
  uint64_t v2 = *(void *)(a1 + 536);
  if (v2)
  {
    uint64_t v4 = a1 + 528;
    uint64_t v5 = a1 + 536;
    uint64_t v6 = a1 + 536;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v2 + 32);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = (uint64_t *)v2;
      }
      else {
        uint64_t v9 = (uint64_t *)(v2 + 8);
      }
      if (v8) {
        uint64_t v6 = v2;
      }
      uint64_t v2 = *v9;
    }

    while (*v9);
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
    sub_1006728BC();
  }
  return 0LL;
}

void sub_10036D5F4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10036D5FC(uint64_t a1, uint64_t a2, _WORD *a3)
{
  __int128 v16 = xmmword_1006C2550;
  __p = 0LL;
  char v14 = 0LL;
  uint64_t v15 = 0LL;
  if ((sub_1003D4C9C(a2, (uint64_t)&v16, 4u, &__p) & 1) != 0)
  {
    uint64_t v5 = __p;
    uint64_t v4 = v14;
    if (__p == v14)
    {
      uint64_t v10 = 0LL;
      if (!__p) {
        return v10;
      }
      goto LABEL_19;
    }

    uint64_t v6 = __p;
    do
    {
      unint64_t v7 = *((unsigned __int16 *)v6 + 1);
      if ((v7 & 1) == 0 && *((_WORD *)v6 + 1))
      {
        unint64_t v8 = 0LL;
        uint64_t v9 = (_DWORD *)(v6[1] + 24LL);
        do
        {
          if (*(v9 - 4) == 25) {
            *a3 = *v9;
          }
          v9 += 8;
          v8 += 2LL;
        }

        while (v8 < v7);
      }

      v6 += 2;
    }

    while (v6 != v4);
    while (v5 != (_OWORD *)v4)
    {
      __int128 v12 = *v5;
      sub_10025EB84(&v12);
      ++v5;
      uint64_t v4 = v14;
    }

    uint64_t v10 = 0LL;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_10067291C();
    }
    uint64_t v10 = 305LL;
  }

  uint64_t v5 = __p;
  if (__p)
  {
LABEL_19:
    char v14 = v5;
    operator delete(v5);
  }

  return v10;
}

void sub_10036D724( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10036D744(uint64_t a1, int a2)
{
  uint64_t v3 = *(void **)(a1 + 528);
  uint64_t v4 = (void *)(a1 + 536);
  if (v3 == (void *)(a1 + 536)) {
    goto LABEL_11;
  }
  while (!sub_1003A4028(v3[5] + 400LL, a2))
  {
    uint64_t v5 = (void *)v3[1];
    if (v5)
    {
      do
      {
        uint64_t v6 = v5;
        uint64_t v5 = (void *)*v5;
      }

      while (v5);
    }

    else
    {
      do
      {
        uint64_t v6 = (void *)v3[2];
        BOOL v7 = *v6 == (void)v3;
        uint64_t v3 = v6;
      }

      while (!v7);
    }

    uint64_t v3 = v6;
    if (v6 == v4) {
      goto LABEL_11;
    }
  }

  uint64_t result = *((unsigned __int16 *)v3 + 16);
  if (!*((_WORD *)v3 + 16))
  {
LABEL_11:
    uint64_t result = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      sub_100672948();
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_10036D800(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    abort();
  unsigned int v3 = *a2;
  while (1)
  {
    while (1)
    {
      unsigned int v4 = *((unsigned __int16 *)v2 + 16);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t **)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }

    if (v4 >= v3) {
      return (uint64_t *)(v2 + 5);
    }
    uint64_t v2 = (uint64_t **)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }

uint64_t sub_10036D84C(void *a1, int a2)
{
  char v21 = 0;
  uint64_t v4 = sub_1002E6E00();
  sub_10002418C(buf, "A2DP");
  sub_10002418C(__p, "WirelessSplitter");
  (*(void (**)(uint64_t, uint8_t *, _BYTE *, char *))(*(void *)v4 + 72LL))(v4, buf, __p, &v21);
  if (v25 < 0) {
    operator delete(*(void **)__p);
  }
  if (v27 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v5 = (void *)a1[63];
  if (v5 == a1 + 64) {
    return 0LL;
  }
  unsigned __int8 v6 = 0;
  while (1)
  {
    uint64_t v7 = *((unsigned __int16 *)v5 + 16);
    uint64_t v8 = v5[5];
    int v9 = sub_1003D2B2C(v8, 27);
    ++v6;
    int v10 = (_DWORD)v7 == a2 ? 0 : v9;
    if (v10 != 1) {
      break;
    }
    unint64_t v11 = a1[65];
    BOOL v12 = v11 < 2 || v11 == v6;
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_100893D68);
    }
    if (!off_1008D5F38) {
      return v7;
    }
    int v19 = 0;
    int v20 = 0;
    sub_1003B3590((uint64_t)off_1008D5F38, v8, &v20, &v19);
    if (!v20 || !v19)
    {
      __int128 v16 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003D0100(v8, (uint64_t)buf);
        if (v27 >= 0) {
          uint64_t v17 = buf;
        }
        else {
          uint64_t v17 = *(uint8_t **)buf;
        }
        *(_DWORD *)__p = 141558275;
        *(void *)&__p[4] = 1752392040LL;
        __int16 v23 = 2081;
        v24 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter: Found another device which is in-ear %{private, mask.hash}s",  __p,  0x16u);
        if (v27 < 0) {
          operator delete(*(void **)buf);
        }
      }

      return v7;
    }

void sub_10036DB38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10036DB74(void *a1, uint64_t a2)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, (uint64_t)(a1 + 69));
  unsigned int v4 = sub_10036CE14(a1, a2);
  BOOL v5 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEBUG);
  if (!v4)
  {
    if (v5) {
      sub_1006729A8();
    }
    goto LABEL_9;
  }

  if (v5) {
    sub_100672A44();
  }
  uint64_t v6 = sub_10036D544((uint64_t)a1, v4);
  if (!v6)
  {
LABEL_9:
    uint64_t v7 = 0LL;
    goto LABEL_10;
  }

  uint64_t v7 = sub_10054F3CC(v6);
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEBUG)) {
    sub_1006729D4();
  }
LABEL_10:
  sub_100242FAC((uint64_t)v9);
  return v7;
}

void sub_10036DC4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10036DC64(os_unfair_lock_s *a1, unsigned int a2)
{
  uint64_t v4 = sub_10036D544((uint64_t)a1, a2);
  __int16 v5 = sub_1003A400C(v4 + 400);
  uint64_t v6 = sub_10036C234((uint64_t)a1, a2);
  *(_WORD *)(v4 + 720) = 0;
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100672A70();
    }
    return 1LL;
  }

  uint64_t v7 = v6;
  uint64_t v8 = (os_log_s *)qword_1008F7558;
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100672A9C();
    }
    return 1LL;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(v7, __p);
    int v9 = v29 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Starting A2DP audio streaming to device %{public}s",  buf,  0xCu);
    if (v29 < 0) {
      operator delete(__p[0]);
    }
  }

  *(_DWORD *)(v4 + 728) = 5;
  sub_100270008(v4);
  int v10 = sub_1003A46D4(v4 + 400);
  int v11 = v10;
  int v12 = *(_DWORD *)(v4 + 656);
  if (*(_BYTE *)(v4 + 723))
  {
    if (v10 == 2)
    {
      LOWORD(v12) = 244;
    }

    else if (v10 == 33023)
    {
      LOWORD(v12) = 174;
    }
  }

  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_100893D88);
  }
  sub_100448434( (os_unfair_lock_s *)off_1008D6190,  1,  ((unint64_t)*(unsigned __int8 *)(v7 + 128) << 40) | ((unint64_t)*(unsigned __int8 *)(v7 + 129) << 32) | ((unint64_t)*(unsigned __int8 *)(v7 + 130) << 24) | ((unint64_t)*(unsigned __int8 *)(v7 + 131) << 16) | ((unint64_t)*(unsigned __int8 *)(v7 + 132) << 8) | *(unsigned __int8 *)(v7 + 133));
  sub_10036C150(a1, (_BYTE *)v4, 1, v12);
  *(_DWORD *)(v7 + 1320) |= 0x10u;
  if (v11 == 33023 || v11 == 2)
  {
    sub_1002E6E9C();
    if (sub_1002CD6F0())
    {
      *(_BYTE *)(v4 + 711) = 1;
      sub_10036C53C(a1, v4, v12);
    }
  }

  if (*(_BYTE *)(v4 + 723) && sub_1003D2B2C(v7, 27))
  {
    char v14 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter sending BT_ACCESSORY_WS_SESSION_START",  (uint8_t *)__p,  2u);
    }

    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100893DA8);
    }
    sub_100217CC0((uint64_t)off_1008D60D8, v7, 1LL, 1LL);
    *(_BYTE *)(v4 + 724) = 1;
  }

  uint64_t v15 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO))
  {
    sub_1003CF00C(v7, __p);
    __int128 v16 = v29 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(void *)&buf[4] = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Reporting A2DP audio is connected and streaming for %{public}s",  buf,  0xCu);
    if (v29 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_100411948((uint64_t)a1, v7, 201, 0);
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  sub_1003D55EC(v7, (_DWORD *)&v27 + 1, &v27, (_DWORD *)&v26 + 1, &v26);
  if (sub_1003D0070(v7, 0x80000u) == 4)
  {
    uint64_t v17 = sub_1002E6E00();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 8LL))(v17))
    {
      if ((HIDWORD(v26) - 8212) <= 0x10 && ((1 << (BYTE4(v26) - 20)) & 0x116A1) != 0)
      {
        char v25 = 0;
        uint64_t v18 = sub_1002E6E00();
        sub_10002418C(__p, "A2DP");
        sub_10002418C(buf, "LoudnessCompensationEQEnable");
        (*(void (**)(uint64_t, void **, _BYTE *, char *))(*(void *)v18 + 72LL))(v18, __p, buf, &v25);
        if (v31 < 0) {
          operator delete(*(void **)buf);
        }
        if (v29 < 0) {
          operator delete(__p[0]);
        }
        if (qword_1008D60E0 != -1) {
          dispatch_once(&qword_1008D60E0, &stru_100893DA8);
        }
        int v19 = sub_1002178E4(*(double *)(v4 + 672));
        if (v19)
        {
          int v20 = v19 - 1;
          if (v25) {
            float v21 = 1.0;
          }
          else {
            float v21 = 0.0;
          }
          v22 = (float *)malloc(0x10uLL);
          *(_DWORD *)v22 = 258;
          *((_DWORD *)v22 + 1) = v20;
          v22[2] = 2.1991e12;
          v22[3] = v21;
          if (qword_1008D60E0 != -1) {
            dispatch_once(&qword_1008D60E0, &stru_100893DA8);
          }
          sub_100214E98((uint64_t)off_1008D60D8, v7, 1LL, 16LL, (uint64_t)v22);
          free(v22);
        }

        else
        {
          __int16 v23 = (os_log_s *)qword_1008F7558;
          if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
            sub_100672AC8((uint64_t *)(v4 + 672), v23, v24);
          }
        }
      }
    }
  }

  return 0LL;
}

void sub_10036E1B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10036E1F4(os_unfair_lock_s *a1, unsigned int a2)
{
  v21[0] = 0LL;
  v21[1] = 0LL;
  sub_100242F28((uint64_t)v21, (uint64_t)&a1[138]);
  uint64_t v4 = sub_10036D544((uint64_t)a1, a2);
  int v5 = (unsigned __int16)sub_1003A400C(v4 + 400);
  if (!v5)
  {
    uint64_t v16 = qword_1008F7558;
    uint64_t v11 = 0LL;
    if (!os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_44;
    }
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = a2;
    int v12 = "Stop streaming issued when there is no active stream handle for a2dp handle %d";
    v13 = (os_log_s *)v16;
    os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
LABEL_34:
    uint32_t v15 = 8;
    goto LABEL_35;
  }

  uint64_t v6 = sub_10036C234((uint64_t)a1, a2);
  if (!v6)
  {
    uint64_t v17 = qword_1008F7558;
    if (!os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO))
    {
LABEL_36:
      uint64_t v11 = 0LL;
      goto LABEL_44;
    }

    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v5;
    int v12 = "Unable to find device for handle %d";
    v13 = (os_log_s *)v17;
    os_log_type_t v14 = OS_LOG_TYPE_INFO;
    goto LABEL_34;
  }

  if ((*(_DWORD *)(v4 + 728) - 4) > 2)
  {
    uint64_t v18 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(v6, __p);
      int v19 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Device %{public}s was not streaming and there is no sendthread to stop",  buf,  0xCu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v11 = 1LL;
  }

  else
  {
    if (*(_DWORD *)(v4 + 732) == 1) {
      *(_DWORD *)(v4 + 732) = 0;
    }
    if (qword_1008D60F0 != -1) {
      dispatch_once(&qword_1008D60F0, &stru_100893DC8);
    }
    if ((sub_1004B3CD8() & 1) == 0)
    {
      LODWORD(__p[0]) = 0;
      *(_DWORD *)buf = 0;
      uint64_t v22 = 0LL;
      sub_1003D55EC(v6, __p, buf, (_DWORD *)&v22 + 1, &v22);
      *(_WORD *)(v4 + 708) = 150;
    }

    uint64_t v7 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(v6, __p);
      uint64_t v8 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Reporting media channel has closed for device %{public}s",  buf,  0xCu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_100411948((uint64_t)a1, v6, 202, 0);
    if (qword_1008D6198 != -1) {
      dispatch_once(&qword_1008D6198, &stru_100893D88);
    }
    sub_100448434( (os_unfair_lock_s *)off_1008D6190,  0,  ((unint64_t)*(unsigned __int8 *)(v6 + 128) << 40) | ((unint64_t)*(unsigned __int8 *)(v6 + 129) << 32) | ((unint64_t)*(unsigned __int8 *)(v6 + 130) << 24) | ((unint64_t)*(unsigned __int8 *)(v6 + 131) << 16) | ((unint64_t)*(unsigned __int8 *)(v6 + 132) << 8) | *(unsigned __int8 *)(v6 + 133));
    sub_10036C150(a1, (_BYTE *)v4, 0, 0);
    sub_10036C600(a1, v4);
    *(_DWORD *)(v6 + 1320) &= ~0x10u;
    if (*(_BYTE *)(v4 + 723) && sub_1003D2B2C(v6, 27) && *(_BYTE *)(v4 + 724))
    {
      int v9 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter sending BT_ACCESSORY_WS_SESSION_STOP",  (uint8_t *)__p,  2u);
      }

      if (qword_1008D60E0 != -1) {
        dispatch_once(&qword_1008D60E0, &stru_100893DA8);
      }
      sub_100217CC0((uint64_t)off_1008D60D8, v6, 1LL, 2LL);
      *(_BYTE *)(v4 + 724) = 0;
    }

    if (*(_BYTE *)(v4 + 704))
    {
      sub_10054F424(v4, 1);
      sub_10036E770((uint64_t)a1, a2, 0);
      sub_10036E8C4((uint64_t)a1, v4, 0, 0);
      LOBYTE(__p[0]) = 0;
      sub_100242CA4(__p);
      sub_10010F334(v6 + 128);
      sub_100242CD0(__p);
      sub_100242CD8(__p);
    }

    uint64_t v10 = qword_1008F7558;
    uint64_t v11 = 0LL;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      int v12 = "Stopping A2DP audio streaming";
      v13 = (os_log_s *)v10;
      os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
      uint32_t v15 = 2;
LABEL_35:
      _os_log_impl((void *)&_mh_execute_header, v13, v14, v12, (uint8_t *)__p, v15);
      goto LABEL_36;
    }
  }

void sub_10036E6CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10036E710(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  sub_1003D55EC(a2, (_DWORD *)&v6 + 1, &v6, (_DWORD *)&v5 + 1, &v5);
  else {
    return word_1006C251A[a3 - 1];
  }
}

uint64_t sub_10036E770(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t result = sub_10036C234(a1, a2);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = sub_1002E6BF0();
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96LL))(v6);
    if ((result & 1) == 0)
    {
      if (a3) {
        unsigned __int16 v7 = -4580;
      }
      else {
        unsigned __int16 v7 = -13288;
      }
      uint64_t v8 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = "Unlimited";
        if (a3) {
          int v9 = "Limited to 2Mbps";
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Dynamic Packet Type Supported EDR packet types: %{public}s",  buf,  0xCu);
      }

      *(void *)buf = 0LL;
      char v16 = 0;
      sub_100242CA4(&v16);
      if (!sub_10010EEE0(v5 + 128, (uint64_t *)buf)
        && *(void *)buf
        && !*(_BYTE *)(*(void *)buf + 278LL))
      {
        sub_10011E974(*(uint64_t *)buf, v7, v10, v11, v12, v13, v14, v15);
      }

      sub_100242CD0(&v16);
      return (uint64_t)sub_100242CD8(&v16);
    }
  }

  return result;
}

void sub_10036E8A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

float sub_10036E8C4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v12[0]) = 67109120;
    HIDWORD(v12[0]) = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Initiate Audio Delivery Speed Change Latency change target=%d",  (uint8_t *)v12,  8u);
  }

  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 552);
  float v9 = 1.1;
  if (a3 != 1) {
    float v9 = 1.0;
  }
  if (a3 == 2) {
    float v10 = *(float *)"fff?";
  }
  else {
    float v10 = v9;
  }
  if (a2)
  {
    sub_10054F4B4(a2, a4, v10);
    if (!a4) {
      *(float *)(a2 + 716) = v10;
    }
  }

  sub_100242FAC((uint64_t)v12);
  return v10;
}

void sub_10036E9E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10036EA00(os_unfair_lock_s *a1, unsigned int a2)
{
  uint64_t v4 = sub_10036D544((uint64_t)a1, a2);
  uint64_t v5 = sub_10036C234((uint64_t)a1, a2);
  if (!v5) {
    return 1LL;
  }
  uint64_t v6 = v5;
  unsigned __int16 v7 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(v6, &__p);
    uint64_t v8 = v21 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446210;
    __int16 v23 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Suspending A2DP audio stream to device %{public}s",  buf,  0xCu);
    if (v21 < 0) {
      operator delete(__p);
    }
  }

  sub_10036E1F4(a1, a2);
  *(_WORD *)buf = sub_1003A400C(v4 + 400);
  if (!*(_WORD *)buf) {
    return 1LL;
  }
  int v9 = *(_DWORD *)(v4 + 728);
  if (v9 == 5)
  {
    LOBYTE(__p) = 0;
    sub_100242CA4(&__p);
    int v10 = sub_1000DC9FC((__int16 *)buf, 1u, 0LL);
    sub_100242CD0(&__p);
    if (v10)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
        sub_100672B34();
      }
      uint64_t v11 = sub_1004050C8();
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472LL;
      v16[2] = sub_10036EC68;
      v16[3] = &unk_1008878D8;
      v16[4] = a1;
      __int16 v17 = a2;
      sub_100405460(v11, 2000LL, v16);
    }

    else
    {
      *(_DWORD *)(v4 + 728) = 6;
    }

    sub_100242CD8(&__p);
  }

  else
  {
    uint64_t v13 = (os_log_s *)qword_1008F7558;
    BOOL v14 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (!v14) {
      return result;
    }
    int v15 = *(_DWORD *)(v4 + 732);
    LODWORD(__p) = 67109376;
    HIDWORD(__p) = v9;
    __int16 v19 = 1024;
    int v20 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Could not suspend, stream state is %d and pending request is %d",  (uint8_t *)&__p,  0xEu);
  }

  return 0LL;
}

void sub_10036EC48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10036EC68(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(result + 536);
  if (v3)
  {
    unsigned int v4 = *(unsigned __int16 *)(a1 + 40);
    uint64_t v5 = result + 536;
    do
    {
      unsigned int v6 = *(unsigned __int16 *)(v3 + 32);
      BOOL v7 = v6 >= v4;
      if (v6 >= v4) {
        uint64_t v8 = (uint64_t *)v3;
      }
      else {
        uint64_t v8 = (uint64_t *)(v3 + 8);
      }
      if (v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }

    while (*v8);
  }

  return result;
}

uint64_t sub_10036ECBC(os_unfair_lock_s *a1, unsigned int a2)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, (uint64_t)&a1[138]);
  uint64_t v4 = sub_10036D544((uint64_t)a1, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    int v6 = *(_DWORD *)(v4 + 728);
    __int16 v12 = sub_1003A400C(v4 + 400);
    if (v6 == 5)
    {
      BOOL v7 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Device is in streaming state, checking if we should suspend the stream",  v11,  2u);
      }

      if ((sub_10054F3CC(v5) & 1) == 0)
      {
        uint64_t v8 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v11 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "There is no audio device or HAL is not streaming to us, suspend the stream!",  v11,  2u);
        }

        sub_10036E1F4(a1, a2);
        v11[0] = 0;
        sub_100242CA4(v11);
        int v9 = sub_1000DC9FC(&v12, 1u, 0LL);
        sub_100242CD0(v11);
        if (v9 && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
          sub_100672BA0();
        }
        *(_DWORD *)(v5 + 728) = 6;
        sub_100242CD8(v11);
      }
    }
  }

  return sub_100242FAC((uint64_t)v13);
}

void sub_10036EE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10036EE5C(os_unfair_lock_s *a1, unsigned int a2)
{
  uint64_t v4 = sub_10036D544((uint64_t)a1, a2);
  uint64_t v5 = sub_10036C234((uint64_t)a1, a2);
  int v6 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    if (!v5)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v14 = "NULL";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Resetting A2DP audio stream to device %{public}s",  buf,  0xCu);
      return 1LL;
    }

    sub_1003CF00C(v5, __p);
    if (v12 >= 0) {
      BOOL v7 = __p;
    }
    else {
      BOOL v7 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446210;
    BOOL v14 = (const char *)v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Resetting A2DP audio stream to device %{public}s",  buf,  0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }

  if (!v5) {
    return 1LL;
  }
  if (*(_BYTE *)(v4 + 704))
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_10036EFF0;
    v9[3] = &unk_1008937F8;
    __int16 v10 = a2;
    sub_10036C2E4(a1 + 108, v9);
  }

  return 0LL;
}

uint64_t sub_10036EFF0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 72LL))(a2, *(unsigned __int16 *)(a1 + 32));
}

BOOL sub_10036F008(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = sub_10036C234(a1, a2);
  uint64_t v5 = sub_10036D544(a1, a2);
  if (!v4) {
    return 1LL;
  }
  uint64_t v6 = v5;
  BOOL v7 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ConnectMediaStream for a2dpHandle %d", buf, 8u);
  }

  int v18 = sub_1003A400C(v6 + 400);
  int v8 = *(_DWORD *)(v6 + 728);
  int v9 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(v4, __p);
    __int16 v10 = v20 >= 0 ? __p : *(_BYTE **)__p;
    int v11 = *(_DWORD *)(v6 + 732);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v22 = 1024;
    int v23 = v8;
    __int16 v24 = 1024;
    int v25 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Starting Media connection to device %{public}s. Current stream state is %d and pending stream request is %d ",  buf,  0x18u);
    if (v20 < 0) {
      operator delete(*(void **)__p);
    }
  }

  BOOL result = 0LL;
  switch(v8)
  {
    case 0:
      sub_10036F384((os_unfair_lock_s *)a1, a2);
      goto LABEL_35;
    case 3:
      uint64_t v13 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(v4, buf);
        BOOL v14 = v25 >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)__p = 136446210;
        *(void *)&__p[4] = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Attempting to start streaming to device %{public}s",  __p,  0xCu);
        if (SHIBYTE(v25) < 0) {
          operator delete(*(void **)buf);
        }
      }

      if (!atomic_load((unint64_t *)(a1 + 752)))
      {
        buf[0] = 0;
        sub_100242CA4(buf);
        int v16 = sub_10011EAF0((uint64_t)sub_10036F780, v4 + 128);
        atomic_store(mach_absolute_time(), (unint64_t *)(a1 + 744));
        sub_100242CD0(buf);
        if (v16 && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
          sub_100672C60();
        }
        sub_100242CD8(buf);
      }

      buf[0] = 0;
      sub_100242CA4(buf);
      sub_100113CA0(v4 + 128);
      int v17 = sub_1000DBC54(&v18, 1u, 0LL);
      sub_100242CD0(buf);
      if (v17)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
          sub_100672C00();
        }
        if (v17 == 408) {
          *(_DWORD *)(v6 + 732) = 1;
        }
        sub_100242CD8(buf);
        return 1LL;
      }

      *(_DWORD *)(v6 + 728) = 4;
      sub_100242CD8(buf);
LABEL_35:
      BOOL result = 0LL;
      break;
    case 4:
      BOOL result = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_100672CC0();
      goto LABEL_35;
    case 5:
      sub_10036DC64((os_unfair_lock_s *)a1, a2);
      goto LABEL_35;
    case 6:
      BOOL result = 0LL;
      *(_DWORD *)(v6 + 732) = 1;
      return result;
    default:
      return result;
  }

  return result;
}

void sub_10036F364( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10036F384(os_unfair_lock_s *a1, unsigned int a2)
{
  v32[0] = 0LL;
  v32[1] = 0LL;
  sub_100242F28((uint64_t)v32, (uint64_t)&a1[138]);
  uint64_t v4 = sub_10036D544((uint64_t)a1, a2);
  uint64_t v5 = v4 + 400;
  int v6 = *(_DWORD *)(v4 + 728);
  BOOL v7 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SelectStreamConfig for a2dpHandle %d", buf, 8u);
  }

  unsigned __int8 v8 = sub_1003A576C(v5);
  uint64_t v9 = sub_1003A8A04((uint64_t)&a1[70], v8);
  uint64_t v10 = sub_1003A65A0(v5, v9);
  uint64_t v11 = sub_10036C234((uint64_t)a1, a2);
  if (v6 < 2)
  {
    uint64_t v14 = v11;
    if (v10)
    {
      int v31 = 0;
      int v15 = *(_DWORD *)(v4 + 556);
      int v16 = *(_DWORD *)(v4 + 552);
      uint64_t v17 = sub_1003A41D0(v5);
      uint64_t v29 = *(void *)(v17 + 32);
      int v18 = sub_1003A4278(v5);
      int v19 = *(unsigned __int8 *)(v4 + 592);
      char v20 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(v14, &__p);
        p_p = &__p;
        if (v36 < 0) {
          p_p = __p;
        }
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v16;
        __int16 v38 = 1024;
        int v39 = v15;
        __int16 v40 = 2082;
        v41 = p_p;
        __int16 v42 = 1024;
        int v43 = v18;
        __int16 v44 = 1024;
        int v45 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Setting stream configuration for local SEID %u and remote SEID %u on device %{public}s, remote delay reporting %d, local delay reporting %d",  buf,  0x24u);
        if (v36 < 0) {
          operator delete(__p);
        }
      }

      int v22 = *(_DWORD *)(v17 + 44);
      char v30 = 0;
      sub_100242CA4(&v30);
      char v23 = v18 ^ 1;
      if (!v19) {
        char v23 = 0;
      }
      int v24 = sub_1000DB314(a2, v15, v16, v29, (v22 - v23), 0LL, &v31);
      sub_100242CD0(&v30);
      int v25 = (os_log_s *)qword_1008F7558;
      if (v24)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
          sub_100672D38();
        }
      }

      else
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
        {
          int v26 = v31;
          sub_1003CF00C(v14, buf);
          uint64_t v27 = SHIBYTE(v41) >= 0 ? buf : *(uint8_t **)buf;
          LODWORD(__p) = 67109378;
          HIDWORD(__p) = v26;
          __int16 v34 = 2082;
          v35 = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "SelectStreamConfig setting a2dp stream handle to %d for device %{public}s",  (uint8_t *)&__p,  0x12u);
          if (SHIBYTE(v41) < 0) {
            operator delete(*(void **)buf);
          }
        }

        sub_1003A405C(v5, v31);
      }

      sub_100242CD8(&v30);
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(v14, buf);
        sub_100672CEC();
      }

      sub_10036CFB0(a1, a2);
    }

    uint64_t v13 = 0LL;
  }

  else
  {
    char v12 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Invalid stream state %d, cannot select stream config unless in CONNECTING or INVALID state",  buf,  8u);
    }

    uint64_t v13 = 1LL;
  }

  sub_100242FAC((uint64_t)v32);
  return v13;
}

void sub_10036F72C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12, int a13, char a14)
{
}

void sub_10036F778()
{
}

void sub_10036F780(int a1, uint64_t a2, int a3, __int16 a4)
{
  uint64_t v8 = mach_absolute_time();
  uint64_t v9 = sub_1004050C8();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10037FD00;
  v10[3] = &unk_100890D60;
  int v11 = a1;
  int v12 = a3;
  __int16 v13 = a4;
  v10[4] = a2;
  v10[5] = v8;
  sub_100405384(v9, v10);
}

uint64_t sub_10036F80C(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned __int8 *a5)
{
  v19[0] = 0LL;
  v19[1] = 0LL;
  sub_100242F28((uint64_t)v19, a1 + 552);
  uint64_t v9 = sub_10036D544(a1, a3);
  uint64_t v10 = v9 + 400;
  sub_1003A717C(v9 + 400, a4);
  int v11 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)a5, __p);
    int v12 = v18 >= 0 ? __p : (void **)__p[0];
    int v13 = *(_DWORD *)(v9 + 648);
    *(_DWORD *)buf = 136446722;
    char v21 = v12;
    __int16 v22 = 1024;
    int v23 = a4;
    __int16 v24 = 1024;
    int v25 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Configuring A2DP audio device %{public}s MTU=%u, RTP_len=%u",  buf,  0x18u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_1003A7D8C(v10);
  if (sub_10036FA60(a1, a3, a5) == 311)
  {
    uint64_t v14 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "A2DP audio device already exists, since mtu size changed, need to reconfigure the audio device",  buf,  2u);
    }

    sub_10054F624(v9, (int)*(double *)(v9 + 680));
    sub_10054F5F4(v9, *(_DWORD *)(v9 + 664));
    sub_10054F604(v9, *(_DWORD *)(v9 + 660));
    sub_10054F614(v9, *(_DWORD *)(v9 + 652));
    sub_10054F474(v9, 1);
    sub_10054F444(v9, *(unsigned __int8 *)(v9 + 712));
    sub_10054F4B4(v9, 0, 1.0);
    sub_10054F414(v9, *(unsigned __int8 *)(v9 + 704));
    if (*(_BYTE *)(v9 + 704))
    {
      int v15 = sub_1003A6D9C(v10);
      sub_10054F434(v9, v15);
      *(_BYTE *)(v9 + 706) = 0;
    }
  }

  sub_100242FAC((uint64_t)v19);
  return 0LL;
}

void sub_10036FA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_10036FA60(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  int v6 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)a3, &__p);
    BOOL v7 = (SBYTE7(v105) & 0x80u) == 0 ? &__p : (__int128 *)__p;
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Publishing audio device %{public}s on a2dpHandle %d",  buf,  0x12u);
    if (SBYTE7(v105) < 0) {
      operator delete((void *)__p);
    }
  }

  uint64_t v8 = sub_10036D544(a1, a2);
  uint64_t v9 = v8;
  if (*(_BYTE *)(v8 + 24))
  {
    uint64_t v10 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)a3, &__p);
      if ((SBYTE7(v105) & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (__int128 *)__p;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = p_p;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Audio device %{public}s on a2dpHandle %d is already published",  buf,  0x12u);
      if (SBYTE7(v105) < 0) {
        operator delete((void *)__p);
      }
    }

    return 311LL;
  }

  int v13 = sub_1003A46D4(v8 + 400);
  sub_1003FE1B4(a3 + 128, buf);
  if (v112 >= 0) {
    uint64_t v14 = buf;
  }
  else {
    uint64_t v14 = *(char **)buf;
  }
  sub_10002418C(&__p, v14);
  sub_10026F7E4(v9, (const void **)&__p);
  if (SBYTE7(v105) < 0) {
    operator delete((void *)__p);
  }
  if (v112 < 0) {
    operator delete(*(void **)buf);
  }
  sub_1003D0100((uint64_t)a3, (uint64_t)buf);
  if (v112 >= 0) {
    int v15 = buf;
  }
  else {
    int v15 = *(char **)buf;
  }
  sub_10002418C(&__p, v15);
  sub_10026F96C(v9, (uint64_t)&__p);
  if (SBYTE7(v105) < 0) {
    operator delete((void *)__p);
  }
  if (v112 < 0) {
    operator delete(*(void **)buf);
  }
  sub_1003FE1B4(a3 + 128, buf);
  if (v112 >= 0) {
    int v16 = buf;
  }
  else {
    int v16 = *(char **)buf;
  }
  sub_10002418C(&__p, v16);
  sub_10026F76C(v9, (uint64_t)&__p);
  if (SBYTE7(v105) < 0) {
    operator delete((void *)__p);
  }
  if (v112 < 0) {
    operator delete(*(void **)buf);
  }
  sub_10026F964(v9, (uint64_t)a3);
  sub_10054F5D8(v9, v13);
  float v101 = 0.0;
  if (qword_1008D9250 != -1) {
    dispatch_once(&qword_1008D9250, &stru_100893E68);
  }
  int v17 = sub_100518504((uint64_t)off_1008D9248, (unint64_t)a3, &v101);
  if (v17)
  {
    char v18 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p) = 134217984;
      *(double *)((char *)&__p + 4) = v101;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Setting audio device volume to %f",  (uint8_t *)&__p,  0xCu);
    }

    sub_10026F638(v9, v101);
  }

  sub_1003A70B4(v9 + 400, v17);
  sub_100270070(v9, v17);
  int v19 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = sub_1003D2B2C((uint64_t)a3, 32);
    LODWORD(__p) = 67109120;
    DWORD1(__p) = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "A2DPClient setSupportsTipi %d",  (uint8_t *)&__p,  8u);
  }

  int v21 = sub_1003D2B2C((uint64_t)a3, 32);
  sub_1002700B8(v9, v21);
  sub_10054F5F4(v9, *(_DWORD *)(v9 + 664));
  sub_10054F5E8(v9, *(double *)(v9 + 672));
  sub_10054F604(v9, *(_DWORD *)(v9 + 660));
  sub_10054F614(v9, *(_DWORD *)(v9 + 652));
  sub_10054F624(v9, (int)*(double *)(v9 + 680));
  int v22 = sub_1003A6D9C(v9 + 400);
  sub_1002701AC(v9, v22);
  int v23 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    int v24 = sub_1003A6D9C(v9 + 400);
    LODWORD(__p) = 67109120;
    DWORD1(__p) = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Setting audio device latency to %d",  (uint8_t *)&__p,  8u);
  }

  int v25 = sub_1003A439C(v9 + 400);
  sub_1005020A4(v9, v25);
  sub_10054F474(v9, 1);
  sub_10054F444(v9, *(unsigned __int8 *)(v9 + 712));
  sub_10054F4B4(v9, 0, 1.0);
  sub_10054F414(v9, *(unsigned __int8 *)(v9 + 704));
  int v26 = sub_1003D03AC((uint64_t)a3);
  sub_100270734(v9, v26);
  uint64_t v27 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v28 = sub_1002E6BF0();
    int v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 240LL))(v28);
    int v30 = sub_1003D2B2C((uint64_t)a3, 49);
    BOOL v31 = sub_1003DD998((uint64_t)a3);
    LODWORD(__p) = 67109632;
    DWORD1(__p) = v29;
    WORD4(__p) = 1024;
    *(_DWORD *)((char *)&__p + 10) = v30;
    HIWORD(__p) = 1024;
    LODWORD(v105) = v31;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Local and remote low latency game support, local: %d remote: %d Bandswitch Support %d",  (uint8_t *)&__p,  0x14u);
  }

  if (sub_1003D2B2C((uint64_t)a3, 49))
  {
    uint64_t v32 = sub_1002E6BF0();
    int v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 240LL))(v32);
  }

  else
  {
    int v33 = 0;
  }

  sub_10054F5B0(v9, v33);
  if ((sub_1003D2B2C((uint64_t)a3, 12) & 1) == 0)
  {
    BOOL v34 = sub_1003D2AF4((uint64_t)a3);
    if (!v34)
    {
      int v35 = sub_100378A94(v34, (uint64_t)a3);
      sub_1005022F4(v9, v35);
    }
  }

  if (*(_BYTE *)(v9 + 704))
  {
    int v36 = sub_1003A6D9C(v9 + 400);
    sub_10054F434(v9, v36);
    *(_BYTE *)(v9 + 706) = 0;
  }

  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100893DA8);
  }
  int v37 = sub_10021C224((uint64_t)off_1008D60D8, (uint64_t)a3);
  sub_10027024C(v9, v37);
  int v38 = sub_1003D2B2C((uint64_t)a3, 12);
  sub_100270224(v9, v38);
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100893DA8);
  }
  if (sub_10021C224((uint64_t)off_1008D60D8, (uint64_t)a3))
  {
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100893DA8);
    }
    int v39 = sub_10021F03C((uint64_t)off_1008D60D8, (uint64_t)a3);
    sub_100270274(v9, v39);
    LODWORD(__p) = 0;
    *(_DWORD *)buf = 0;
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100893DA8);
    }
    sub_10021F164((uint64_t)off_1008D60D8, (uint64_t)a3, (int *)&__p, (int *)buf);
    sub_10027029C(v9, __p, buf[0]);
    *(_DWORD *)v102 = 3;
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100893DA8);
    }
    sub_10021F3F4((uint64_t)off_1008D60D8, (uint64_t)a3, (int *)v102);
    sub_1002702AC(v9, v102[0]);
    unsigned __int8 v40 = sub_1003DF900((uint64_t)a3);
    sub_1002702BC(v9, v40);
  }

  int v41 = sub_1003D2B2C((uint64_t)a3, 36);
  sub_10054F4A4(v9, v41);
  if ((sub_1003D2B2C((uint64_t)a3, 12) & 1) != 0 || sub_1003D2AF4((uint64_t)a3))
  {
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100893DA8);
    }
    unsigned __int8 v42 = sub_10021B978((uint64_t)off_1008D60D8, (uint64_t)a3);
    sub_1002702CC(v9, v42);
  }

  int v100 = 0;
  else {
    int v43 = 0;
  }
  int v100 = v43;
  sub_100378548((void *)a1, (uint64_t)a3, &v100);
  if (sub_1003D8C10((uint64_t)a3))
  {
    unsigned __int8 v44 = sub_1003DFA38((uint64_t)a3);
    sub_1002702EC(v9, v44);
  }

  if (sub_1003DFAC0((uint64_t)a3))
  {
    int v45 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)a3, &__p);
      v46 = (SBYTE7(v105) & 0x80u) == 0 ? &__p : (__int128 *)__p;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v46;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "Applying DontAutoRoute: %{public}s",  buf,  0xCu);
      if (SBYTE7(v105) < 0) {
        operator delete((void *)__p);
      }
    }

    sub_1003DE174((uint64_t)a3, 0);
    sub_100270C44(v9, 0);
  }

  if (sub_1003DFB04((uint64_t)a3))
  {
    v47 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)a3, &__p);
      v48 = (SBYTE7(v105) & 0x80u) == 0 ? &__p : (__int128 *)__p;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v48;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Applying AudioRouteHidden: %{public}s",  buf,  0xCu);
      if (SBYTE7(v105) < 0) {
        operator delete((void *)__p);
      }
    }

    sub_1003DE1B8((uint64_t)a3, 0);
    sub_100270CA4(v9, 1);
  }

  uint64_t v98 = 0LL;
  uint64_t v99 = 0LL;
  sub_1003D55EC((uint64_t)a3, (_DWORD *)&v99 + 1, &v99, (_DWORD *)&v98 + 1, &v98);
  int v49 = sub_1003E0230((uint64_t)a3, 32);
  sub_100270BBC(v9, v49);
  if (sub_1003E0230((uint64_t)a3, 64))
  {
    uint64_t v50 = sub_1002E6BF0();
    int v51 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v50 + 792LL))(v50, 1LL);
  }

  else
  {
    int v51 = 0;
  }

  sub_100270948(v9, v51);
  uint64_t v52 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v52 + 792LL))(v52, 3LL)
    && (sub_1003E0230((uint64_t)a3, 64) & 1) != 0)
  {
    uint64_t v53 = sub_1002E6BF0();
    int v54 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v53 + 792LL))(v53, 1LL);
    sub_100270ABC(v9, v54);
    if (v54)
    {
      if (qword_1008D60F0 != -1) {
        dispatch_once(&qword_1008D60F0, &stru_100893DC8);
      }
      BOOL v55 = sub_1004B3EFC((uint64_t)off_1008D60E8, (uint64_t)a3);
      sub_10054F484(v9, v55);
      if (qword_1008D60F0 != -1) {
        dispatch_once(&qword_1008D60F0, &stru_100893DC8);
      }
      id v56 = sub_1004B3C8C((uint64_t)off_1008D60E8);
      v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
      sub_100270998(v9, v57);

      int v58 = 1;
      goto LABEL_107;
    }
  }

  else
  {
    sub_100270ABC(v9, 0);
  }

  int v58 = 0;
LABEL_107:
  *(void *)buf = 0LL;
  *(void *)&uint8_t buf[8] = 0LL;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100893E88);
  }
  sub_1005C8684( (uint64_t)off_1008D5F28,  ((unint64_t)a3[128] << 40) | ((unint64_t)a3[129] << 32) | ((unint64_t)a3[130] << 24) | ((unint64_t)a3[131] << 16) | ((unint64_t)a3[132] << 8) | a3[133],  1u,  1u,  0LL,  0LL,  (unsigned __int8 *)&__p);
  v59 = sub_100241F94((const unsigned __int8 *)&__p);
  v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
  [v60 getUUIDBytes:buf];

  sub_100270658(v9, (CFUUIDBytes *)buf);
  sub_100270668(v9, SHIDWORD(v98));
  sub_100270678(v9, v98);
  sub_100270688(v9, v99);
  float v61 = sub_1003E17A0((uint64_t)a3);
  sub_1002706C0(v9, v61);
  sub_100272534(&__p, (uint64_t)(a3 + 1128));
  sub_100270744(v9, (int **)&__p);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }

  int v62 = sub_1003E1830((uint64_t)a3);
  sub_100270898(v9, v62);
  int v63 = sub_1003DFC9C((uint64_t)a3);
  sub_1002705FC(v9, v63);
  if ((sub_1003E0230((uint64_t)a3, 64) & 1) != 0)
  {
    uint64_t v64 = sub_1002E6BF0();
    int v65 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v64 + 792LL))(v64, 1LL);
    int v66 = 0;
    int v97 = 0;
    if (v65)
    {
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_100893D48);
      }
      sub_100400F20((uint64_t)off_1008D5F48, (uint64_t)a3, &v97);
      LOBYTE(__p) = 1;
      uint64_t v67 = sub_1002E8D54();
      (*(void (**)(uint64_t, __int128 *))(*(void *)v67 + 240LL))(v67, &__p);
      v68 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEBUG)) {
        sub_100672D98(&__p, v68);
      }
      sub_100270348(v9, __p);
      if (qword_1008D60F0 != -1) {
        dispatch_once(&qword_1008D60F0, &stru_100893DC8);
      }
      id v69 = sub_1004B34A0((uint64_t)off_1008D60E8);
      (*(void (**)(uint64_t, id))(*(void *)v9 + 128LL))(v9, v69);
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_100893D48);
      }
      sub_100400F20((uint64_t)off_1008D5F48, (uint64_t)a3, &v97);
      int v70 = v97;
      if (!v97)
      {
        if (qword_1008D5F50 != -1) {
          dispatch_once(&qword_1008D5F50, &stru_100893D48);
        }
        int v70 = 1;
        sub_100401068((uint64_t)off_1008D5F48, (uint64_t)a3, 1LL);
        int v97 = 1;
      }

      sub_100270320(v9, v70 == 1);
      uint64_t v71 = sub_1002E6E00();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v71 + 8LL))(v71))
      {
        uint64_t v72 = sub_1002E6E00();
        int v73 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 584LL))(v72);
        sub_10054F494(v9, v73);
      }

      int v66 = 1;
    }
  }

  else
  {
    int v66 = 0;
    int v97 = 0;
  }

  v74 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100893DA8);
    }
    int v75 = sub_10021C224((uint64_t)off_1008D60D8, (uint64_t)a3);
    int v76 = sub_1003D2B2C((uint64_t)a3, 12);
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100893DA8);
    }
    int v77 = sub_10021F03C((uint64_t)off_1008D60D8, (uint64_t)a3);
    v78 = " NO ";
    if (v66) {
      v79 = "YES ";
    }
    else {
      v79 = " NO ";
    }
    LODWORD(__p) = 67110658;
    if (v97 == 1) {
      v78 = "YES ";
    }
    DWORD1(__p) = v75;
    WORD4(__p) = 1024;
    v80 = "NO";
    *(_DWORD *)((char *)&__p + 10) = v76;
    HIWORD(__p) = 1024;
    if (v58) {
      v80 = "YES";
    }
    LODWORD(v105) = v77;
    WORD2(v105) = 2082;
    *(void *)((char *)&v105 + 6) = v79;
    HIWORD(v105) = 2082;
    v106 = (void *)v78;
    __int16 v107 = 2082;
    v108 = v80;
    __int16 v109 = 1024;
    int v110 = v100;
    _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "AudioDevice. SupportsInEarDetection %d, isAppleAudioDevice %d, InEarDetectionEnabled %d SpatialSupport  %{public}s SpatialAllowed %{public}s Spatial Profile %{public}s supportedListeningModes %u",  (uint8_t *)&__p,  0x38u);
  }

  if (a3[976])
  {
    v81 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)a3, &__p);
      v82 = (SBYTE7(v105) & 0x80u) == 0 ? &__p : (__int128 *)__p;
      *(_DWORD *)v102 = 136446210;
      v103 = v82;
      _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter guest not in contacts %{public}s doAP is not supported",  v102,  0xCu);
      if (SBYTE7(v105) < 0) {
        operator delete((void *)__p);
      }
    }
  }

  else
  {
    int v83 = sub_1003D2B2C((uint64_t)a3, 22);
    sub_100270620(v9, v83);
  }

  sub_1002708A8(v9, *(unsigned __int8 *)(v9 + 722));
  sub_1002708D0(v9, *(unsigned __int8 *)(v9 + 723));
  sub_1002708F8(v9, a3[960]);
  sub_100270920(v9, a3[976]);
  v84 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    if (a3[960]) {
      v85 = "guest device";
    }
    else {
      v85 = "owner device";
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v85;
    _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter this is %s",  (uint8_t *)&__p,  0xCu);
  }

  if (sub_1003E0230((uint64_t)a3, 144))
  {
    uint64_t v86 = sub_1002E6E9C();
    int v87 = sub_1002CD53C(v86, 0);
  }

  else
  {
    int v87 = 0;
  }

  v88 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    v89 = "not supported";
    if (v87) {
      v89 = "supported";
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v89;
    _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEFAULT,  "Adaptive Volume: setAdaptiveVolumeSupport %s",  (uint8_t *)&__p,  0xCu);
  }

  sub_100270AE4(v9, v87);
  if (sub_1003E0230((uint64_t)a3, 80))
  {
    uint64_t v90 = sub_1002E6E9C();
    int v91 = sub_1002CD53C(v90, 1u);
  }

  else
  {
    int v91 = 0;
  }

  sub_100270B1C(v9, v91);
  if (sub_1003E0230((uint64_t)a3, 160))
  {
    uint64_t v92 = sub_1002E6E9C();
    int v93 = sub_1002CD53C(v92, 2u);
  }

  else
  {
    int v93 = 0;
  }

  sub_100270B44(v9, v93);
  BOOL v94 = (sub_1003D8484((uint64_t)a3) & 2) == 0;
  sub_100271A54(v9, v94);
  int v95 = sub_1003E0230((uint64_t)a3, 20);
  sub_100270B6C(v9, v95);
  if (sub_1003E0230((uint64_t)a3, 20))
  {
    sub_1002E6E9C();
    int v96 = sub_1002CD900() ^ 1;
  }

  else
  {
    int v96 = 1;
  }

  sub_100270B94(v9, v96);
  *(void *)&__int128 __p = _NSConcreteStackBlock;
  *((void *)&__p + 1) = 3221225472LL;
  *(void *)&__int128 v105 = sub_10036CA38;
  *((void *)&v105 + 1) = &unk_100893730;
  v106 = a3;
  __int16 v107 = a2;
  LOBYTE(v108) = 1;
  sub_10036C2E4((os_unfair_lock_s *)(a1 + 432), &__p);
  sub_10026EE48(v9);
  return 0LL;
}

void sub_100370C78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100370CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint8_t a4, unsigned int a5)
{
  if (!a3) {
    return 0LL;
  }
  uint64_t v10 = sub_10036D544(a1, a5);
  uint64_t v11 = sub_10036C234(a1, a5);
  uint64_t v12 = 120LL;
  if (v10 && v11)
  {
    uint64_t v39 = v11;
    __int16 v38 = sub_1003A400C(v10 + 400);
    unsigned __int16 v13 = *(_WORD *)(v10 + 720) + 1;
    *(_WORD *)(v10 + 720) = v13;
    if ((unsigned __int16)(12157 * v13) <= 0x8Bu)
    {
      buf[0] = 0;
      sub_100242CA4(buf);
      sub_10011EAF0((uint64_t)sub_10036F780, v39 + 128);
      sub_100242CD0(buf);
      atomic_store(mach_absolute_time(), (unint64_t *)(a1 + 744));
      sub_100242CD8(buf);
    }

    uint64_t v14 = (unint64_t *)(a1 + 760);
    unint64_t v15 = atomic_load((unint64_t *)(a1 + 760));
    BOOL v16 = v15 == 0;
    uint64_t v17 = mach_absolute_time();
    if (v16)
    {
      unint64_t v20 = atomic_load((unint64_t *)(a1 + 744));
      unint64_t v18 = (v17 - v20) * *(unsigned int *)(a1 + 620) / *(unsigned int *)(a1 + 624) / 0x3E8;
      *(void *)(a1 + 768) = mach_absolute_time();
      unint64_t v21 = atomic_load((unint64_t *)(a1 + 752));
      atomic_store(v21 + v18, (unint64_t *)(a1 + 760));
    }

    else
    {
      unint64_t v18 = (v17 - *(void *)(a1 + 768)) * *(unsigned int *)(a1 + 620) / *(unsigned int *)(a1 + 624) / 0x3E8;
      do
        unint64_t v19 = __ldaxr(v14);
      while (__stlxr(v19 + v18, v14));
      *(void *)(a1 + 768) = mach_absolute_time();
    }

    uint64_t v22 = v13;
    if (*(_BYTE *)(a1 + 780))
    {
      int v23 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = *(void *)(a1 + 768);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v22;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(void *)&buf[10] = v18;
        *(_WORD *)&_BYTE buf[18] = 2048;
        *(void *)&buf[20] = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "A2DP Send[%d]: delta time %llu us current time %llu",  buf,  0x1Cu);
      }
    }

    memset(buf, 0, 32);
    *(_WORD *)buf = 24704;
    buf[2] = BYTE1(v22);
    buf[3] = v22;
    unint64_t v25 = atomic_load(v14);
    buf[7] = v25 / 0x3E8;
    unint64_t v26 = atomic_load(v14);
    buf[6] = v26 / 0x3E800;
    unint64_t v27 = atomic_load(v14);
    buf[5] = v27 / 0x3E80000;
    unint64_t v28 = atomic_load(v14);
    uint8_t buf[4] = v28 / 0x3E8000000LL;
    *(_DWORD *)&uint8_t buf[8] = 0;
    _BYTE buf[12] = a4;
    *(void *)&buf[16] = a3;
    *(void *)&_BYTE buf[24] = a2;
    kdebug_trace(730021956LL, v22, 0LL, 0LL, 0LL);
    char v40 = 0;
    sub_100242CA4(&v40);
    __int16 v29 = v38;
    uint64_t v30 = sub_1000DDBC0(v38, (uint64_t)buf);
    uint64_t v31 = v39;
    int v32 = v30;
    uint64_t v12 = v30;
    if ((_DWORD)v30 != 410) {
      goto LABEL_28;
    }
    unint64_t v33 = atomic_load(v14);
    kdebug_trace(730021960LL, v22, v33 / 0x3E8, 0LL, 0LL);
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
    {
      sub_100672EE4();
      __int16 v29 = v38;
    }

    uint64_t v12 = sub_1000DDD14(v29);
    if ((_DWORD)v12)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
      {
        sub_100672E84();
        __int16 v29 = v38;
      }

      uint64_t v31 = v39;
      if ((_DWORD)v12 != 485) {
        goto LABEL_28;
      }
      sub_1000DDCDC(v29);
      uint64_t v12 = 485LL;
    }

    else
    {
      uint64_t v34 = sub_1000DDBC0(v29, (uint64_t)buf);
      uint64_t v12 = v34;
      uint64_t v31 = v39;
      if (!(_DWORD)v34 || (_DWORD)v34 == 412 || !os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
        goto LABEL_28;
      }
      sub_100672E24();
    }

    uint64_t v31 = v39;
LABEL_28:
    sub_100242CD0(&v40);
    if (v22 >= 0x33 && v32 == 410)
    {
      if (qword_1008D60F0 != -1) {
        dispatch_once(&qword_1008D60F0, &stru_100893DC8);
      }
      int v35 = off_1008D60E8;
      uint64_t v36 = atomic_load(v14);
      sub_1004A9AC4((uint64_t)v35, v31, v36);
      if (qword_1008D60F0 != -1) {
        dispatch_once(&qword_1008D60F0, &stru_100893DC8);
      }
      sub_1004AC094((uint64_t)off_1008D60E8, v31, 0, 0LL, 1);
    }

    else if (v22 >= 0x33 && v32 != 410)
    {
      if (qword_1008D60F0 != -1) {
        dispatch_once(&qword_1008D60F0, &stru_100893DC8);
      }
      atomic_load(v14);
      sub_1004AB574((uint64_t)off_1008D60E8);
    }

    sub_100242CD8(&v40);
  }

  return v12;
}

void sub_100371214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100371240(uint64_t a1, unsigned int a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 552);
  uint64_t v4 = sub_10036D544(a1, a2);
  if (v4 && *(_DWORD *)(v4 + 728) == 1)
  {
    char v7 = 0;
    sub_100242CA4(&v7);
    int v5 = sub_1000DAD94(a2, 0LL);
    sub_100242CD0(&v7);
    if (v5 && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100672F50();
    }
    sub_100242CD8(&v7);
  }

  return sub_100242FAC((uint64_t)v8);
}

void sub_1003712F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100371320(os_unfair_lock_s *a1)
{
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_100893DC8);
  }
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  sub_1004B1AD8((uint64_t)off_1008D60E8, &v9);
  sub_10036C2E4(a1 + 108, &stru_100893790);
  uint64_t v2 = v9;
  uint64_t v3 = v10;
  if (v9 != v10)
  {
    do
    {
      int v4 = *(unsigned __int16 *)v2;
      if (*(_WORD *)v2)
      {
        int v5 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter guest device is gone, destroy aggregate with handle %hu",  (uint8_t *)&buf,  8u);
        }

        memset(&buf, 0, sizeof(buf));
        int v6 = sub_10002418C(&buf, "WS_ERROR_DISCONNECTION_GUEST_GONE");
        else {
          std::string __p = buf;
        }
        sub_10037D620((uint64_t)v6, &__p);
        uint64_t v7 = sub_10036D544((uint64_t)a1, *(unsigned __int16 *)v2);
        if (v7)
        {
          (*(void (**)(os_unfair_lock_s *, uint64_t, void, void))(*(void *)&a1->_os_unfair_lock_opaque
                                                                              + 192LL))( a1,  v7,  0LL,  0LL);
          sub_1002708D0(v7, 0);
          *(_BYTE *)(v7 + 723) = 0;
        }
      }

      v2 += 2;
    }

    while (v2 != v3);
    uint64_t v2 = v9;
  }

  if (v2)
  {
    uint64_t v10 = v2;
    operator delete(v2);
  }

void sub_100371520( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10037157C(uint64_t a1, uint64_t a2, int a3)
{
  char v12 = 0;
  sub_100242CA4(&v12);
  unsigned __int16 v11 = 0;
  if ((sub_1000D8B24(a2 + 128, &v11) || !v11)
    && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
  {
    sub_1003CF00C(a2, v10);
    sub_100673058();
  }

  sub_100242CD0(&v12);
  if (a3)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(a2, v9);
      sub_100673010();
    }

    sub_100242C98(&v12);
    sub_1000DA8A0(v11, 0);
  }

  else
  {
    int v7 = sub_100411064(a1, a2);
    sub_100242C98(&v12);
    int v8 = sub_1000DA8A0(v11, v7);
    sub_100242CD0(&v12);
    if (v8)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
        sub_100672FB0();
      }
    }

    else if (v7)
    {
      sub_100410910(a1, a2, 1);
      *(_BYTE *)(a1 + 616) = 0;
    }
  }

  return sub_100242CD8(&v12);
}

void sub_10037171C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

_BYTE *sub_100371744(uint64_t a1, uint64_t a2, int a3)
{
  return sub_10037157C(a1 - 264, a2, a3);
}

uint64_t sub_10037174C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v19[0] = 0LL;
  v19[1] = 0LL;
  sub_100242F28((uint64_t)v19, a1 + 552);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100893D48);
  }
  int v6 = sub_10040007C(off_1008D5F48, a2, 1);
  int v7 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)v6, __p);
    int v8 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    unint64_t v21 = v8;
    __int16 v22 = 1024;
    LODWORD(v23) = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "ConnectInd from device %{public}s on a2dpHandle %d",  buf,  0x12u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }

  if (sub_1003D518C((uint64_t)v6))
  {
    int v9 = sub_100411064(a1, (uint64_t)v6);
    uint64_t v10 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)v6, __p);
      unsigned __int16 v11 = "Rejecting";
      if (v9) {
        unsigned __int16 v11 = "Accepting";
      }
      if (v18 >= 0) {
        char v12 = __p;
      }
      else {
        char v12 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      unint64_t v21 = (void *)v11;
      __int16 v22 = 2082;
      int v23 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%{public}s incoming connection attempt from device %{public}s",  buf,  0x16u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }

    LOBYTE(__p[0]) = 0;
    sub_100242CA4(__p);
    uint64_t v13 = sub_1000DA8A0(a3, v9);
    sub_100242CD0(__p);
    if ((_DWORD)v13)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
        sub_100672FB0();
      }
    }

    else if (v9)
    {
      sub_100410910(a1, (uint64_t)v6, 1);
      *(_BYTE *)(a1 + 616) = 0;
    }

    sub_100242CD8(__p);
  }

  else
  {
    uint64_t v14 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)v6, __p);
      unint64_t v15 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      unint64_t v21 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Delaying incoming connection attempt for device %{public}s as SDP is missing",  buf,  0xCu);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }

    if (qword_1008D9600 != -1) {
      dispatch_once(&qword_1008D9600, &stru_100893DE8);
    }
    sub_10041AA14(qword_1008D95F8, (uint64_t)v6, a1 + 264, 1, 2);
    uint64_t v13 = 0LL;
  }

  sub_100242FAC((uint64_t)v19);
  return v13;
}

void sub_100371A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100371AD0(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4)
{
  unsigned __int16 v63 = a3;
  v62[0] = 0LL;
  v62[1] = 0LL;
  sub_100242F28((uint64_t)v62, a1 + 552);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100893D48);
  }
  int v7 = (uint64_t *)sub_10040007C(off_1008D5F48, a2, 1);
  if (!(_DWORD)a4)
  {
    sub_100410A5C(a1, (uint64_t)v7, 0);
    uint64_t v10 = *(void *)(a1 + 512);
    if (v10)
    {
      uint64_t v11 = a1 + 512;
      do
      {
        unsigned int v12 = *(unsigned __int16 *)(v10 + 32);
        BOOL v13 = v12 >= v63;
        if (v12 >= v63) {
          uint64_t v14 = (uint64_t *)v10;
        }
        else {
          uint64_t v14 = (uint64_t *)(v10 + 8);
        }
        if (v13) {
          uint64_t v11 = v10;
        }
        uint64_t v10 = *v14;
      }

      while (*v14);
      if (v11 != a1 + 512 && v63 >= *(unsigned __int16 *)(v11 + 32))
      {
        unint64_t v15 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_FAULT)) {
          sub_100673170(v15, v16, v17, v18, v19, v20, v21, v22);
        }
      }
    }

    *(void *)std::string __p = &v63;
    sub_1002550B8((uint64_t **)(a1 + 504), &v63, (uint64_t)&unk_1006C2518, (_WORD **)__p)[5] = v7;
    int v23 = (uint64_t *)operator new(0x318uLL);
    sub_10054EBA8(v23, v63, v7, a1 + 256);
    uint64_t v24 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)v7, __p);
      unint64_t v25 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = v25;
      __int16 v65 = 1024;
      LODWORD(v66) = v63;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Creating A2DPAudioDevice for device %{public}s with handle %d",  buf,  0x12u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

    uint64_t v26 = *(void *)(a1 + 536);
    if (v26)
    {
      uint64_t v27 = a1 + 536;
      do
      {
        unsigned int v28 = *(unsigned __int16 *)(v26 + 32);
        BOOL v29 = v28 >= v63;
        if (v28 >= v63) {
          uint64_t v30 = (uint64_t *)v26;
        }
        else {
          uint64_t v30 = (uint64_t *)(v26 + 8);
        }
        if (v29) {
          uint64_t v27 = v26;
        }
        uint64_t v26 = *v30;
      }

      while (*v30);
      if (v27 != a1 + 536 && v63 >= *(unsigned __int16 *)(v27 + 32))
      {
        uint64_t v31 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_FAULT)) {
          sub_100673100(v31, v32, v33, v34, v35, v36, v37, v38);
        }
      }
    }

    *(void *)std::string __p = &v63;
    uint64_t v39 = sub_1002550B8((uint64_t **)(a1 + 528), &v63, (uint64_t)&unk_1006C2518, (_WORD **)__p);
    v39[5] = v23;
    int v40 = sub_100372284((uint64_t)v39, (uint64_t)v7);
    int v41 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)v7, buf);
      unsigned __int8 v42 = v67 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)std::string __p = 136446722;
      *(void *)&__p[4] = v42;
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = v63;
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = v40;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Disable48KHz bitmap for device %{public}s with handle %d is %x",  __p,  0x18u);
      if (v67 < 0) {
        operator delete(*(void **)buf);
      }
    }

    char v61 = 0;
    sub_100242CA4(&v61);
    sub_1000E2FA4(v63, v40);
    uint64_t v43 = sub_100242CD0(&v61);
    unsigned __int8 v44 = sub_10037275C(v43, (uint64_t)v7);
    *((_DWORD *)v23 + 182) = 1;
    __int16 v60 = 0;
    if (*(_BYTE *)(a1 + 616))
    {
      *(_BYTE *)(a1 + 616) = 1;
      int v45 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C((uint64_t)v7, __p);
        v46 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v46;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "Attempting to initiate discover stream endpoints for device %{public}s",  buf,  0xCu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }

      sub_100242C98(&v61);
      int v47 = sub_1000DAD94(v63, 0LL);
      uint64_t v48 = sub_100242CD0(&v61);
      if (v47)
      {
        uint64_t v48 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v48) {
          sub_1006730A0();
        }
        *(_BYTE *)(a1 + 616) = 0;
      }
    }

    else
    {
      int v49 = sub_1003D3900((uint64_t)v7);
      uint64_t v50 = (os_log_s *)qword_1008F7558;
      BOOL v51 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT);
      if (v49)
      {
        if (v51)
        {
          sub_1003CF00C((uint64_t)v7, __p);
          uint64_t v52 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = v52;
          _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Workaround for %{public}s, not scheduling stream endpoint discovery",  buf,  0xCu);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }

        goto LABEL_84;
      }

      if (v51)
      {
        sub_1003CF00C((uint64_t)v7, __p);
        uint64_t v53 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)std::string buf = 134218242;
        *(void *)&uint8_t buf[4] = 2000LL;
        __int16 v65 = 2082;
        int v66 = v53;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Delaying A2DP endpoint discovery %llu msec for incoming device %{public}s before initiating discover stream endpoints",  buf,  0x16u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }

      uint64_t v54 = sub_1004050C8();
      v58[0] = _NSConcreteStackBlock;
      v58[1] = 3221225472LL;
      v58[2] = sub_10037284C;
      v58[3] = &unk_1008878D8;
      v58[4] = a1;
      unsigned __int16 v59 = v63;
      sub_100405460(v54, 2000LL, v58);
    }

    if (sub_1003728A0(v48, (uint64_t)v7))
    {
      BOOL v55 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C((uint64_t)v7, __p);
        id v56 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v56;
        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "Device %{public}s that requires a workaround for AVDTP start connected",  buf,  0xCu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }

      *(void *)std::string __p = _NSConcreteStackBlock;
      *(void *)&__p[8] = 3221225472LL;
      *(void *)&__p[16] = sub_10036CC20;
      id v69 = &unk_1008937B0;
      int v70 = v7;
      sub_10036CB64((os_unfair_lock_s *)(a1 + 464), __p);
    }

void sub_100372214( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
}

uint64_t sub_100372284(uint64_t a1, uint64_t a2)
{
  int v20 = 0;
  uint64_t v3 = sub_1002E6E00();
  sub_10002418C(buf, "A2DP");
  sub_10002418C(__p, "SampleRate");
  int v4 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v3 + 128LL))(v3, buf, __p, &v20);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v22) < 0)
  {
    operator delete(*(void **)buf);
    if (!v4) {
      goto LABEL_16;
    }
  }

  else if (!v4)
  {
    goto LABEL_16;
  }

  if (v20 == 48000)
  {
    int v7 = (os_log_s *)qword_1008F7558;
    uint64_t v6 = 0LL;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 48000;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Warning: Bad48KHzCodecs: Setting user defined A2DP Sample Rate for our endpoints to %d Hz",  buf,  8u);
      return 0LL;
    }
  }

  else
  {
    if (v20 != 44100)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
        sub_100673228();
      }
LABEL_16:
      uint64_t v29 = 0LL;
      __int128 v28 = 0u;
      memset(v27, 0, sizeof(v27));
      __int128 v25 = 0u;
      *(_OWORD *)uint64_t v26 = 0u;
      __int128 v23 = 0u;
      *(_OWORD *)uint64_t v24 = 0u;
      *(_OWORD *)std::string buf = 0u;
      __int128 v22 = 0u;
      sub_100532DC0((uint64_t)&buf[1]);
      BYTE2(v22) = 0;
      BYTE4(v22) = 0;
      BYTE2(v24[0]) = 0;
      BYTE4(v24[0]) = 0;
      DWORD1(v27[1]) = 0;
      __int128 v23 = 0uLL;
      *((void *)&v22 + 1) = 0LL;
      LOBYTE(v24[0]) = 0;
      __int128 v25 = 0uLL;
      v24[1] = 0LL;
      LOBYTE(v26[0]) = 0;
      memset(v27, 0, 19);
      v26[1] = 0LL;
      BYTE8(v27[1]) = 1;
      BYTE2(v29) = 0;
      *(void *)((char *)&v27[1] + 14) = 0LL;
      *(void *)((char *)&v27[1] + 9) = 0LL;
      __int128 v28 = 0uLL;
      *((void *)&v27[2] + 1) = 0LL;
      LOBYTE(v29) = 0;
      sub_1003D2408(a2, (uint64_t)buf);
      char v17 = 0;
      uint64_t v8 = sub_1002E6E00();
      sub_10002418C(__p, "A2DP");
      sub_10002418C(v15, "Default48KHz");
      (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v8 + 72LL))(v8, __p, v15, &v17);
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (v17)
      {
        uint64_t v9 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Warning: Bad48KHzCodecs: Defaulting to 48 KHz based on defaults write - using denylist instead of allowlist",  (uint8_t *)__p,  2u);
        }

        if (BYTE8(v28))
        {
          uint64_t v11 = (os_log_s *)qword_1008F7558;
          if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            uint64_t v6 = 2LL;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Bad48KHzCodecs: Disabling 48 KHz - Device is in 48 KHz AAC denylist",  (uint8_t *)__p,  2u);
          }

          else
          {
            uint64_t v6 = 2LL;
          }

          goto LABEL_35;
        }
      }

      else
      {
        if (!BYTE9(v28) && !sub_1003D2AF4(a2))
        {
          BOOL v13 = (os_log_s *)qword_1008F7558;
          if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Bad48KHzCodecs: Disabling 48 KHz - Device is NOT in 48 KHz AAC allowlist",  (uint8_t *)__p,  2u);
          }

          uint64_t v6 = 0xFFFFFFFFLL;
          goto LABEL_35;
        }

        unsigned int v12 = (os_log_s *)qword_1008F7558;
        uint64_t v6 = 0LL;
        if (!os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
        {
LABEL_35:
          if (SHIBYTE(v27[0]) < 0) {
            operator delete(v26[1]);
          }
          if (SHIBYTE(v25) < 0) {
            operator delete(v24[1]);
          }
          if (SHIBYTE(v23) < 0) {
            operator delete(*((void **)&v22 + 1));
          }
          nullsub_63(&buf[1], v10);
          return v6;
        }

        LOWORD(__p[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Bad48KHzCodecs: Device is in 48 KHz AAC allowlist",  (uint8_t *)__p,  2u);
      }

      uint64_t v6 = 0LL;
      goto LABEL_35;
    }

    int v5 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 44100;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Warning: Bad48KHzCodecs: Setting user defined A2DP Sample Rate for our endpoints to %d Hz",  buf,  8u);
    }

    return 0xFFFFFFFFLL;
  }

  return v6;
}

void sub_1003726D8( _Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_1002071FC((uint64_t)&a23, a2);
  _Unwind_Resume(a1);
}

_BYTE *sub_10037275C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v3 + 96LL))(v3) & 1) != 0
    || (uint64_t v4 = sub_1002E6E00(),
        BOOL result = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 312LL))(v4),
        (_DWORD)result))
  {
    uint64_t v6 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "3EDR packet types are disabled on this platform",  buf,  2u);
    }

    uint64_t v14 = 0LL;
    char v13 = 0;
    sub_100242CA4(&v13);
    sub_100242CD0(&v13);
    return sub_100242CD8(&v13);
  }

  return result;
}

void sub_100372834( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_10037284C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(result + 536);
  if (v3)
  {
    unsigned int v4 = *(unsigned __int16 *)(a1 + 40);
    uint64_t v5 = result + 536;
    do
    {
      unsigned int v6 = *(unsigned __int16 *)(v3 + 32);
      BOOL v7 = v6 >= v4;
      if (v6 >= v4) {
        uint64_t v8 = (uint64_t *)v3;
      }
      else {
        uint64_t v8 = (uint64_t *)(v3 + 8);
      }
      if (v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }

    while (*v8);
  }

  return result;
}

uint64_t sub_1003728A0(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0LL;
  __int128 v13 = 0u;
  memset(v12, 0, sizeof(v12));
  __int128 v10 = 0u;
  *(_OWORD *)std::string __p = 0u;
  __int128 v8 = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  __int128 v6 = 0u;
  *(_OWORD *)BOOL v7 = 0u;
  sub_100532DC0((uint64_t)&v6 + 1);
  BYTE2(v7[0]) = 0;
  BYTE4(v7[0]) = 0;
  BYTE2(v9[0]) = 0;
  BYTE4(v9[0]) = 0;
  DWORD1(v12[1]) = 0;
  __int128 v8 = 0uLL;
  v7[1] = 0LL;
  LOBYTE(v9[0]) = 0;
  __int128 v10 = 0uLL;
  v9[1] = 0LL;
  LOBYTE(__p[0]) = 0;
  memset(v12, 0, 19);
  __p[1] = 0LL;
  BYTE8(v12[1]) = 1;
  BYTE2(v14) = 0;
  *(void *)((char *)&v12[1] + 14) = 0LL;
  *(void *)((char *)&v12[1] + 9) = 0LL;
  __int128 v13 = 0uLL;
  *((void *)&v12[2] + 1) = 0LL;
  LOBYTE(v14) = 0;
  LODWORD(a2) = sub_1003D2408(a2, (uint64_t)&v6);
  int v4 = BYTE14(v12[2]);
  if (SHIBYTE(v12[0]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[1]);
  }
  if (v4) {
    a2 = a2;
  }
  else {
    a2 = 0LL;
  }
  nullsub_63((char *)&v6 + 1, v2);
  return a2;
}

void sub_1003729D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003729F0(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned __int16 v27 = a3;
  v26[0] = 0LL;
  v26[1] = 0LL;
  sub_100242F28((uint64_t)v26, a1 + 552);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100893D48);
  }
  __int128 v8 = sub_10040007C(off_1008D5F48, a2, 1);
  uint64_t v9 = *(void *)(a1 + 536);
  if (!v9) {
    goto LABEL_14;
  }
  uint64_t v10 = a1 + 536;
  do
  {
    unsigned int v11 = *(unsigned __int16 *)(v9 + 32);
    BOOL v12 = v11 >= a3;
    if (v11 >= a3) {
      __int128 v13 = (uint64_t *)v9;
    }
    else {
      __int128 v13 = (uint64_t *)(v9 + 8);
    }
    if (v12) {
      uint64_t v10 = v9;
    }
    uint64_t v9 = *v13;
  }

  while (*v13);
  sub_10036E1F4((os_unfair_lock_s *)a1, a3);
  uint64_t v15 = *(void *)(v10 + 40);
  if (*(_BYTE *)(v15 + 723))
  {
    if (*((_BYTE *)v8 + 960)) {
      v8[245] = 1;
    }
    sub_1003DEF78((uint64_t)v8, 0);
    sub_100371320((os_unfair_lock_s *)a1);
  }

  sub_10026F644(v15);
  *(void *)&__int128 buf = _NSConcreteStackBlock;
  *((void *)&buf + 1) = 3221225472LL;
  uint64_t v31 = sub_10036CA38;
  uint64_t v32 = &unk_100893730;
  uint64_t v33 = v8;
  __int16 v34 = a3;
  char v35 = 0;
  sub_10036C2E4((os_unfair_lock_s *)(a1 + 432), &buf);
  sub_100329E44(a1 + 528, &v27);
  char v16 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 544);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Current number of A2DP devices: %lu",  (uint8_t *)&buf,  0xCu);
  }

  uint64_t v18 = *(void *)(a1 + 512);
  if (!v18) {
    goto LABEL_47;
  }
  uint64_t v19 = a1 + 512;
  do
  {
    unsigned int v20 = *(unsigned __int16 *)(v18 + 32);
    BOOL v21 = v20 >= v27;
    if (v20 >= v27) {
      __int128 v22 = (uint64_t *)v18;
    }
    else {
      __int128 v22 = (uint64_t *)(v18 + 8);
    }
    if (v21) {
      uint64_t v19 = v18;
    }
    uint64_t v18 = *v22;
  }

  while (*v22);
  if (v19 == a1 + 512 || v27 < *(unsigned __int16 *)(v19 + 32))
  {
LABEL_47:
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_FAULT)) {
      sub_100673288();
    }
  }

  uint64_t v23 = sub_100329E44(a1 + 504, &v27);
  if (sub_1003728A0(v23, (uint64_t)v8))
  {
    uint64_t v24 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)v8, &buf);
      if (SHIBYTE(v31) >= 0) {
        p___int128 buf = &buf;
      }
      else {
        p___int128 buf = (__int128 *)buf;
      }
      *(_DWORD *)__int128 v28 = 136446210;
      uint64_t v29 = p_buf;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Device %{public}s that requires a workaround for AVDTP start disconnected",  v28,  0xCu);
      if (SHIBYTE(v31) < 0) {
        operator delete((void *)buf);
      }
    }

    *(void *)&__int128 buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472LL;
    uint64_t v31 = sub_10036CC38;
    uint64_t v32 = &unk_1008937B0;
    uint64_t v33 = v8;
    sub_10036CB64((os_unfair_lock_s *)(a1 + 464), &buf);
  }

  if (v8) {
LABEL_14:
  }
    sub_100411718(a1, (uint64_t)v8, 0, a4);
  sub_100242FAC((uint64_t)v26);
  return 0LL;
}

void sub_100372D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100372D64( os_unfair_lock_s *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, int a6)
{
  v29[0] = 0LL;
  v29[1] = 0LL;
  sub_100242F28((uint64_t)v29, (uint64_t)&a1[138]);
  uint64_t v11 = sub_10036D544((uint64_t)a1, a3);
  uint64_t v12 = sub_10036C234((uint64_t)a1, a3);
  __int128 v13 = (os_log_s *)qword_1008F7558;
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT)
      && ((sub_1003CF00C(v12, v30), (v36 & 0x8000) == 0) ? (uint64_t v14 = v30) : (uint64_t v14 = *(uint8_t **)v30),
          *(_DWORD *)__int128 buf = 67109378,
          unsigned int v40 = a5,
          __int16 v41 = 2082,
          unsigned __int8 v42 = v14,
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Endpoint discovery succeeded - found %d stream endpoint(s) for device %{public}s",  buf,  0x12u),  SBYTE1(v36) < 0))
    {
      operator delete(*(void **)v30);
      if (!a5) {
        goto LABEL_38;
      }
    }

    else if (!a5)
    {
      goto LABEL_38;
    }

    uint64_t v27 = v12;
    uint64_t v28 = v11;
    uint64_t v15 = 0LL;
    char v16 = (os_log_s *)qword_1008F7558;
    uint64_t v17 = (unsigned __int8 *)(a4 + 3);
    do
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = *(v17 - 3);
        int v19 = *(v17 - 2);
        int v20 = *(v17 - 1);
        int v21 = *v17;
        *(_DWORD *)uint64_t v30 = 67110144;
        *(_DWORD *)&v30[4] = v15;
        __int16 v31 = 1024;
        int v32 = v18;
        __int16 v33 = 1024;
        int v34 = v19;
        __int16 v35 = 1024;
        int v36 = v20;
        __int16 v37 = 1024;
        int v38 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Endpoint[%d]: mediaType = %d, endpointType = %d, seid = %d, inUse = %d",  v30,  0x20u);
        char v16 = (os_log_s *)qword_1008F7558;
      }

      ++v15;
      v17 += 4;
    }

    while (a5 != v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v30 = 67109120;
      *(_DWORD *)&v30[4] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Saving discovered peer endpoints for a2dp handle %d",  v30,  8u);
    }

    sub_1003A62A8(v28 + 400, a4, a5);
    unsigned int v22 = sub_1003A6C80(v28 + 400);
    uint64_t v23 = (os_log_s *)qword_1008F7558;
    if (v22 == 255)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(v27, v30);
        sub_1006732C0();
      }

      goto LABEL_21;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(v27, v30);
      __int128 v25 = (v36 & 0x8000) == 0 ? v30 : *(uint8_t **)v30;
      *(_DWORD *)__int128 buf = 67109378;
      unsigned int v40 = v22;
      __int16 v41 = 2082;
      unsigned __int8 v42 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Querying stream capabilities of endpoint %u on device %{public}s",  buf,  0x12u);
      if (SBYTE1(v36) < 0) {
        operator delete(*(void **)v30);
      }
    }

    v30[0] = 0;
    sub_100242CA4(v30);
    if (sub_1003A4394(v28 + 400) < 0x103)
    {
      if (sub_1000DB020(a3, v22, 0LL)
        && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
      {
        sub_10067336C();
      }
    }

    else if (sub_1000DB15C(a3, v22, 0LL) {
           && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
    }
    {
      sub_10067330C();
    }

    sub_100242CD8(v30);
LABEL_38:
    uint64_t v24 = 0LL;
    goto LABEL_39;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
  {
    if (v12)
    {
      sub_1003CF00C(v12, v30);
      sub_100673410();
    }

    else
    {
      sub_1006733CC((uint64_t)buf, a6);
    }
  }

void sub_100373184( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1003731CC( os_unfair_lock_s *a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, unsigned int a6, int a7)
{
  v22[0] = 0LL;
  v22[1] = 0LL;
  sub_100242F28((uint64_t)v22, (uint64_t)&a1[138]);
  uint64_t v13 = sub_10036D544((uint64_t)a1, a3);
  uint64_t v14 = v13;
  if (a7)
  {
    uint64_t v15 = (os_log_s *)qword_1008F7558;
    if (*(int *)(v13 + 728) < 3)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 67109632;
        int v24 = a7;
        __int16 v25 = 1024;
        unsigned int v26 = a4;
        __int16 v27 = 1024;
        unsigned int v28 = a3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Received get capability failure with error %d for stream endpoint ID %u on a2dp handle %d - disconnecting",  buf,  0x14u);
      }

      sub_10036CFB0(a1, a3);
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109632;
      int v24 = a7;
      __int16 v25 = 1024;
      unsigned int v26 = a4;
      __int16 v27 = 1024;
      unsigned int v28 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "GetCaps rejected with error %d, but already in >= open state for stream endpoint ID %u on a2dp handle %d",  buf,  0x14u);
    }
  }

  else
  {
    char v16 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v17 = *(_DWORD *)(v14 + 728);
      *(_DWORD *)__int128 buf = 67109632;
      int v24 = a4;
      __int16 v25 = 1024;
      unsigned int v26 = a3;
      __int16 v27 = 1024;
      unsigned int v28 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "GetCapsCfm: Successfully retrieved capabilities for stream endpoint %u on a2dp handle %d, stream state 0x%d",  buf,  0x14u);
    }

    if (*(_DWORD *)(v14 + 728) == 1)
    {
      sub_1003A494C(v14 + 400, a6, a5, a4);
      int v18 = sub_1003A6C80(v14 + 400);
      if (v18 == 255)
      {
        sub_10036F384(a1, a3);
      }

      else
      {
        int v19 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 67109376;
          int v24 = v18;
          __int16 v25 = 1024;
          unsigned int v26 = a3;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Querying stream capabilities of endpoint %u on a2dpHandle %d",  buf,  0xEu);
        }

        buf[0] = 0;
        sub_100242CA4(buf);
        int v20 = sub_1000DB020(a3, v18, 0LL);
        sub_100242CD0(buf);
        if (v20 && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
          sub_10067336C();
        }
        sub_100242CD8(buf);
      }
    }
  }

  sub_100242FAC((uint64_t)v22);
  return 0LL;
}

void sub_1003734AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003734E0( uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8)
{
  v31[0] = 0LL;
  v31[1] = 0LL;
  sub_100242F28((uint64_t)v31, a1 + 552);
  uint64_t v27 = sub_10036D544(a1, a3);
  uint64_t v26 = sub_10036C234(a1, a3);
  char v16 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109888;
    int v33 = a4;
    __int16 v34 = 1024;
    int v35 = a5;
    __int16 v36 = 1024;
    *(_DWORD *)__int16 v37 = a3;
    *(_WORD *)&v37[4] = 1024;
    *(_DWORD *)&v37[6] = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Received set stream configuration request for local SEID %u and remote SEID %u from a2dpHandle %d, stream handle %d",  buf,  0x1Au);
  }

  uint64_t v17 = sub_1003A8A40(a1 + 280, a4);
  if (sub_1003A4D18(v27 + 400, a4, a5, a6, a7, a8, v17))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100673518();
    }
    buf[0] = 0;
    sub_100242CA4(buf);
    int v18 = sub_1000DD518(a6, a2, 0, 41);
    sub_100242CD0(buf);
    if (v18 && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_1006734B8();
    }
    int v19 = buf;
  }

  else
  {
    char v30 = 0;
    sub_100242CA4(&v30);
    int v20 = sub_1000DD518(a6, a2, 0, 0);
    sub_100242CD0(&v30);
    if (v20)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
        sub_100673458();
      }
    }

    else
    {
      int v21 = sub_1003A4278(v27 + 400);
      int v22 = *(unsigned __int8 *)(v27 + 592);
      uint64_t v23 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(v26, __p);
        int v24 = v29 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)__int128 buf = 67110146;
        int v33 = a4;
        __int16 v34 = 1024;
        int v35 = a5;
        __int16 v36 = 2082;
        *(void *)__int16 v37 = v24;
        *(_WORD *)&v37[8] = 1024;
        int v38 = v21;
        __int16 v39 = 1024;
        int v40 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Approved and configured incoming stream configuration for local SEID %d and remote SEID %d on device %{public} s, remote delay reporting %d, local delay reporting %d",  buf,  0x24u);
        if (v29 < 0) {
          operator delete(__p[0]);
        }
      }

      *(_DWORD *)(v27 + 728) = 2;
    }

    int v19 = (uint8_t *)&v30;
  }

  sub_100242CD8(v19);
  sub_100242FAC((uint64_t)v31);
  return 0LL;
}

void sub_1003737E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

void sub_10037382C()
{
}

uint64_t sub_100373834( uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8)
{
  v33[0] = 0LL;
  v33[1] = 0LL;
  sub_100242F28((uint64_t)v33, a1 + 552);
  uint64_t v15 = sub_10036D544(a1, a3);
  uint64_t v16 = sub_10036C234(a1, a3);
  if (!v16)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100673578();
    }
    goto LABEL_14;
  }

  uint64_t v17 = v15 + 400;
  uint64_t v29 = a7;
  unsigned int v18 = a2;
  int v19 = (unsigned __int16)sub_1003A400C(v15 + 400);
  if (v19)
  {
    unsigned int v20 = *(_DWORD *)(v15 + 728);
    if (v20 <= 6 && ((1 << v20) & 0x68) != 0) {
      goto LABEL_5;
    }
    log = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003FE1B4((unsigned __int8 *)(v16 + 128), __p);
      int v24 = __p;
      if (v32 < 0) {
        int v24 = (void **)__p[0];
      }
      *(_DWORD *)__int128 buf = 67109378;
      LODWORD(v35[0]) = v19;
      WORD2(v35[0]) = 2082;
      *(void *)((char *)v35 + 6) = v24;
      _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEFAULT,  "SetConfigInd, there already exists stream handle %d for device %{public}s, but accepting since we are not in streaming state",  buf,  0x12u);
      if (v32 < 0) {
        operator delete(__p[0]);
      }
    }

    if (v20 == 3)
    {
LABEL_5:
      int v21 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003FE1B4((unsigned __int8 *)(v16 + 128), __p);
        if (v32 >= 0) {
          int v22 = __p;
        }
        else {
          int v22 = (void **)__p[0];
        }
        *(_DWORD *)__int128 buf = 136446210;
        v35[0] = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Rejecting incoming set config from device %{public}s",  buf,  0xCu);
        if (v32 < 0) {
          operator delete(__p[0]);
        }
      }

      LOBYTE(__p[0]) = 0;
      sub_100242CA4(__p);
      sub_1000DD518(a6, v18, 0, 19);
      sub_100242CD0(__p);
      sub_100242CD8(__p);
LABEL_14:
      uint64_t v23 = 1LL;
      goto LABEL_28;
    }
  }

  __int16 v25 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003FE1B4((unsigned __int8 *)(v16 + 128), __p);
    uint64_t v26 = v32 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 67109378;
    LODWORD(v35[0]) = a6;
    WORD2(v35[0]) = 2082;
    *(void *)((char *)v35 + 6) = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "SetConfigInd setting a2dp stream handle to %d for device %{public}s",  buf,  0x12u);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_1003A405C(v17, a6);
  sub_1003734E0(a1, v18, a3, a4, a5, a6, v29, a8);
  uint64_t v23 = 0LL;
LABEL_28:
  sub_100242FAC((uint64_t)v33);
  return v23;
}

void sub_100373B64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100373BA8(os_unfair_lock_s *a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_100242F28((uint64_t)v18, (uint64_t)&a1[138]);
  unsigned int v8 = sub_10036D744((uint64_t)a1, a3);
  uint64_t v9 = sub_10036C234((uint64_t)a1, v8);
  uint64_t v10 = (os_log_s *)qword_1008F7558;
  if (a5)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
    {
      if (v9)
      {
        sub_1003CF00C(v9, __p);
        sub_100673648();
      }

      else
      {
        sub_100673604((uint64_t)buf, a5);
      }
    }

    sub_10036CFB0(a1, v8);
LABEL_14:
    uint64_t v12 = 1LL;
    goto LABEL_31;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    if (v9)
    {
      sub_1003CF00C(v9, __p);
      if (v20 >= 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      *(_DWORD *)__int128 buf = 136446210;
      int v22 = (const char *)v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Received set stream configuration success from device %{public}s",  buf,  0xCu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      *(_DWORD *)__int128 buf = 136446210;
      int v22 = "null";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Received set stream configuration success from device %{public}s",  buf,  0xCu);
    }
  }

  uint64_t v13 = (os_log_s *)qword_1008F7558;
  BOOL v14 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT);
  if (!v8)
  {
    if (v14)
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Set stream configuration returned an unknown stream handle %d, stream handle was likely reconfigured. Not moving to open AVDTP",  (uint8_t *)__p,  8u);
    }

    goto LABEL_14;
  }

  if (v14)
  {
    if (v9)
    {
      sub_1003CF00C(v9, __p);
      if (v20 >= 0) {
        uint64_t v15 = __p;
      }
      else {
        uint64_t v15 = (void **)__p[0];
      }
      *(_DWORD *)__int128 buf = 136446466;
      int v22 = (const char *)v15;
      __int16 v23 = 1024;
      unsigned int v24 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Attempting to open streaming channel to device %{public}s on handle %d",  buf,  0x12u);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      *(_DWORD *)__int128 buf = 136446466;
      int v22 = "null";
      __int16 v23 = 1024;
      unsigned int v24 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Attempting to open streaming channel to device %{public}s on handle %d",  buf,  0x12u);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  int v16 = sub_1000DB924(a3, 0LL);
  sub_100242CD0(__p);
  if (v16 && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
    sub_1006735A4();
  }
  sub_100242CD8(__p);
  uint64_t v12 = 0LL;
LABEL_31:
  sub_100242FAC((uint64_t)v18);
  return v12;
}

void sub_100373EDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100373F1C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, a1 + 552);
  unsigned int v9 = sub_10036D744(a1, a3);
  uint64_t v10 = sub_10036C234(a1, v9);
  uint64_t v11 = (os_log_s *)qword_1008F7558;
  if (a6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
    {
      if (v10)
      {
        sub_1003CF00C(v10, __p);
        sub_1006736D4();
      }

      else
      {
        sub_100673690((uint64_t)buf, a6);
      }
    }

    sub_10036CFB0((os_unfair_lock_s *)a1, v9);
    uint64_t v13 = 1LL;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      if (v10)
      {
        sub_1003CF00C(v10, __p);
        if (v19 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        *(_DWORD *)__int128 buf = 136446210;
        int v22 = (const char *)v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Received get stream configuration success from device %{public}s",  buf,  0xCu);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        *(_DWORD *)__int128 buf = 136446210;
        int v22 = "null";
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Received get stream configuration success from device %{public}s",  buf,  0xCu);
      }
    }

    if (*(_BYTE *)(a1 + 616))
    {
      BOOL v14 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        if (v10)
        {
          sub_1003CF00C(v10, __p);
          if (v19 >= 0) {
            uint64_t v15 = __p;
          }
          else {
            uint64_t v15 = (void **)__p[0];
          }
          *(_DWORD *)__int128 buf = 136446210;
          int v22 = (const char *)v15;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Attempting to open streaming channel to device %{public}s",  buf,  0xCu);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
        }

        else
        {
          *(_DWORD *)__int128 buf = 136446210;
          int v22 = "null";
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Attempting to open streaming channel to device %{public}s",  buf,  0xCu);
        }
      }

      LOBYTE(__p[0]) = 0;
      sub_100242CA4(__p);
      int v16 = sub_1000DB924(a3, 0LL);
      sub_100242CD0(__p);
      if (v16 && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
        sub_1006735A4();
      }
      sub_100242CD8(__p);
    }

    uint64_t v13 = 0LL;
  }

  sub_100242FAC((uint64_t)v20);
  return v13;
}

void sub_100374200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100374240(uint64_t a1, unsigned int a2, int a3)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, a1 + 552);
  unsigned int v6 = sub_10036D744(a1, a3);
  uint64_t v7 = sub_10036D544(a1, v6);
  uint64_t v8 = sub_10036C234(a1, v6);
  unsigned int v9 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    if (v8)
    {
      sub_1003CF00C(v8, __p);
      if (v14 >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      *(_DWORD *)__int128 buf = 136446466;
      uint64_t v17 = (const char *)v10;
      __int16 v18 = 1024;
      int v19 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Received open streaming channel request from device %{public}s on stream handle %d",  buf,  0x12u);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      *(_DWORD *)__int128 buf = 136446466;
      uint64_t v17 = "null";
      __int16 v18 = 1024;
      int v19 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Received open streaming channel request from device %{public}s on stream handle %d",  buf,  0x12u);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  int v11 = sub_1000DBAFC(a2, a3, 0);
  sub_100242CD0(__p);
  if (v11 && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
    sub_10067371C();
  }
  *(_DWORD *)(v7 + 728) = 3;
  sub_100242CD8(__p);
  sub_100242FAC((uint64_t)v15);
  return 0LL;
}

void sub_100374434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100374470(os_unfair_lock_s *a1, uint64_t a2, int a3, int a4, int a5)
{
  v22[0] = 0LL;
  v22[1] = 0LL;
  sub_100242F28((uint64_t)v22, (uint64_t)&a1[138]);
  unsigned int v9 = sub_10036D744((uint64_t)a1, a3);
  uint64_t v10 = (unsigned __int8 *)sub_10036C234((uint64_t)a1, v9);
  uint64_t v11 = sub_10036D544((uint64_t)a1, v9);
  uint64_t v12 = (os_log_s *)qword_1008F7558;
  if (a5 || !v10)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
    {
      if (v10)
      {
        sub_1003CF00C((uint64_t)v10, __p);
        sub_1006737C8();
      }

      else
      {
        sub_100673810((uint64_t)buf, a5);
      }
    }

    goto LABEL_32;
  }

  uint64_t v13 = v11;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)v10, __p);
    char v14 = v24 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v26 = v14;
    __int16 v27 = 1024;
    int v28 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Successfully opened streaming channel to device %{public}s on stream handle %d",  buf,  0x12u);
    if (v24 < 0) {
      operator delete(*(void **)__p);
    }
  }

  if (*(_DWORD *)(v13 + 728) == 7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C((uint64_t)v10, __p);
      sub_10067377C();
    }

void sub_100374784( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1003747BC(os_unfair_lock_s *a1, uint64_t a2)
{
  unsigned int v4 = sub_10036CE14(a1, a2);
  uint64_t v5 = sub_10036D544((uint64_t)a1, v4);
  if (a2 && (uint64_t v6 = v5) != 0)
  {
    char v33 = 0;
    uint64_t v7 = sub_1002E6E00();
    sub_10002418C(&buf, "A2DP");
    sub_10002418C(__p, "WirelessSplitter");
    (*(void (**)(uint64_t, std::string *, _BYTE *, char *))(*(void *)v7 + 72LL))(v7, &buf, __p, &v33);
    if (v41 < 0) {
      operator delete(*(void **)__p);
    }
    if (v33)
    {
      int v8 = sub_1003D2B2C(a2, 12);
      char v33 = v8;
      if (v8)
      {
        unsigned int v9 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter is enabled via defaults writes",  (uint8_t *)&buf,  2u);
        }
      }
    }

    int v10 = sub_1003D2B2C(a2, 27);
    if (v33) {
      int v11 = 1;
    }
    else {
      int v11 = v10;
    }
    if (v11 == 1)
    {
      uint64_t v12 = sub_1002E6BF0();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 472LL))(v12))
      {
        *(_BYTE *)(v6 + 722) = 1;
        int v13 = sub_10054EC18(v6);
        unsigned int v14 = sub_10036D84C(a1, v13);
        if (v14)
        {
          uint64_t v15 = sub_10036C234((uint64_t)a1, v14);
          uint64_t v16 = sub_10036D544((uint64_t)a1, v14);
          if (v16 && v15)
          {
            if (v33 || *(_BYTE *)(a2 + 960) || *(_BYTE *)(v15 + 960) || *(_BYTE *)(a2 + 985))
            {
              uint64_t v17 = (os_log_s *)qword_1008F7558;
              if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
              {
                sub_1003CF00C(a2, __p);
                int v18 = v41;
                int v19 = *(_BYTE **)__p;
                int v20 = *(unsigned __int8 *)(a2 + 960);
                sub_1003CF00C(v15, v31);
                int v21 = __p;
                if (v18 < 0) {
                  int v21 = v19;
                }
                int v22 = "guest";
                int v23 = *(unsigned __int8 *)(v15 + 960);
                if (v20) {
                  char v24 = "guest";
                }
                else {
                  char v24 = "owner";
                }
                LODWORD(buf.__r_.__value_.__l.__data_) = 136446978;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
                if (v32 >= 0) {
                  __int16 v25 = v31;
                }
                else {
                  __int16 v25 = (void **)v31[0];
                }
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
                if (!v23) {
                  int v22 = "owner";
                }
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v24;
                HIWORD(buf.__r_.__value_.__r.__words[2]) = 2082;
                int v35 = v25;
                __int16 v36 = 2082;
                __int16 v37 = v22;
                _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter is enabled on device %{public}s which is %{public}s and device %{public}s which is %{public}s",  (uint8_t *)&buf,  0x2Au);
                if (v32 < 0) {
                  operator delete(v31[0]);
                }
                if (v41 < 0) {
                  operator delete(*(void **)__p);
                }
              }

              sub_1002708D0(v16, 1);
              sub_1002708D0(v6, 1);
              (*(void (**)(os_unfair_lock_s *, uint64_t, uint64_t, void))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                   + 192LL))( a1,  v6,  1LL,  0LL);
              (*(void (**)(os_unfair_lock_s *, uint64_t, uint64_t, void))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                   + 192LL))( a1,  v16,  1LL,  0LL);
              sub_10036CAAC(a1, v6, 1);
              sub_10036CAAC(a1, v16, 1);
            }
          }

          else
          {
            memset(&buf, 0, sizeof(buf));
            uint64_t v26 = sub_10002418C(&buf, "WS_ERROR_START_FAILED_TO_FIND_LAST_CONNECTED");
            else {
              std::string v30 = buf;
            }
            sub_10037D620((uint64_t)v26, &v30);
            if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
              sub_100673854();
            }
          }
        }
      }
    }

    __int16 v27 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(v6 + 722)) {
        int v28 = "supported";
      }
      else {
        int v28 = "not supported";
      }
      sub_1003CF00C(a2, &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string __p = 136446466;
      *(void *)&__p[4] = v28;
      __int16 v39 = 2082;
      int v40 = p_buf;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter is %{public}s on device %{public}s",  __p,  0x16u);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
  {
    sub_100673880();
  }

void sub_100374C78( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100374CE0(uint64_t a1, unsigned int a2, __int16 a3, const void *a4, unsigned int a5)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 552);
  char v11 = 0;
  sub_100242CA4(&v11);
  int v9 = sub_1000DD970(a3, a2, a4, a5, 0);
  sub_100242CD0(&v11);
  if (v9 && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
    sub_1006738AC();
  }
  sub_100242CD8(&v11);
  sub_100242FAC((uint64_t)v12);
  return 0LL;
}

void sub_100374D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100374DC0(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v8 = a3;
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1 + 552);
  if (*(_BYTE *)(a1 + 616))
  {
    char v6 = 0;
    sub_100242CA4(&v6);
    int v4 = sub_1000DBC54(&v8, 1u, 0LL);
    sub_100242CD0(&v6);
    if (v4 && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_10067390C();
    }
    sub_100242CD8(&v6);
  }

  sub_100242FAC((uint64_t)v7);
  return 0LL;
}

void sub_100374E6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100374E90(uint64_t a1, unsigned int a2, __int16 *a3, unsigned int a4)
{
  v25[0] = 0LL;
  v25[1] = 0LL;
  sub_100242F28((uint64_t)v25, a1 + 552);
  if (a3)
  {
    int v8 = (unsigned __int16)*a3;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100673A2C();
    }
    int v8 = 0;
  }

  unsigned int v9 = sub_10036D744(a1, v8);
  uint64_t v10 = sub_10036D544(a1, v9);
  uint64_t v11 = sub_10036C234(a1, v9);
  if (v11)
  {
    uint64_t v12 = (os_log_s *)qword_1008F7558;
    BOOL v13 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT);
    if (v13)
    {
      sub_1003CF00C(v11, __p);
      unsigned int v14 = SHIBYTE(v27) >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      __int16 v31 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Received start streaming command from device %{public}s",  buf,  0xCu);
      if (SHIBYTE(v27) < 0) {
        operator delete(__p[0]);
      }
    }

    if (sub_1003728A0(v13, v11))
    {
      uint64_t v15 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(v11, __p);
        uint64_t v16 = SHIBYTE(v27) >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        __int16 v31 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "StartInd, forwarding play command to RemoteClient for device %{public}s",  buf,  0xCu);
        if (SHIBYTE(v27) < 0) {
          operator delete(__p[0]);
        }
      }

      __p[0] = _NSConcreteStackBlock;
      __p[1] = (void *)3221225472LL;
      __int16 v27 = sub_10036CC50;
      int v28 = &unk_1008937B0;
      uint64_t v29 = v11;
      sub_10036CB64((os_unfair_lock_s *)(a1 + 464), __p);
    }

    LOBYTE(__p[0]) = 0;
    sub_100242CA4(__p);
    if (!atomic_load((unint64_t *)(a1 + 752)))
    {
      int v20 = sub_10011EAF0((uint64_t)sub_10036F780, v11 + 128);
      atomic_store(mach_absolute_time(), (unint64_t *)(a1 + 744));
      if (v20)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
          sub_1006739CC();
        }
      }
    }

    sub_100113CA0(v11 + 128);
    int v18 = sub_1000DBED8(a2, a3, a4, 0, 0);
    sub_100242CD0(__p);
    if (v18)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
        sub_10067396C();
      }
    }

    else
    {
      *(_DWORD *)(v10 + 728) = 5;
      if ((sub_10054F3CC(v10) & 1) == 0)
      {
        uint64_t v21 = sub_1004050C8();
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472LL;
        v23[2] = sub_100375234;
        v23[3] = &unk_1008878D8;
        v23[4] = a1;
        __int16 v24 = v9;
        sub_100405460(v21, 12000LL, v23);
      }
    }

    sub_100242CD8(__p);
    uint64_t v19 = 0LL;
  }

  else
  {
    uint64_t v19 = 1LL;
  }

  sub_100242FAC((uint64_t)v25);
  return v19;
}

void sub_1003751F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100375234(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(result + 536);
  if (v3)
  {
    unsigned int v4 = *(unsigned __int16 *)(a1 + 40);
    uint64_t v5 = result + 536;
    do
    {
      unsigned int v6 = *(unsigned __int16 *)(v3 + 32);
      BOOL v7 = v6 >= v4;
      if (v6 >= v4) {
        int v8 = (uint64_t *)v3;
      }
      else {
        int v8 = (uint64_t *)(v3 + 8);
      }
      if (v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }

    while (*v8);
  }

  return result;
}

uint64_t sub_100375288(os_unfair_lock_s *a1, uint64_t a2, unsigned __int16 *a3, int a4, uint64_t a5, int a6)
{
  v28[0] = 0LL;
  v28[1] = 0LL;
  sub_100242F28((uint64_t)v28, (uint64_t)&a1[138]);
  if (a3 && a4)
  {
    unsigned int v10 = sub_10036D744((uint64_t)a1, *a3);
    uint64_t v11 = sub_10036D544((uint64_t)a1, v10);
    uint64_t v12 = sub_10036C234((uint64_t)a1, v10);
    if (v12)
    {
      BOOL v13 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT)
        && ((sub_1003CF00C(v12, __p), v27 >= 0) ? (unsigned int v14 = __p) : (unsigned int v14 = (void **)__p[0]),
            *(_DWORD *)std::string buf = 136446210,
            std::string v30 = v14,
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Received confirm from %{public}s to start streaming",  buf,  0xCu),  v27 < 0))
      {
        operator delete(__p[0]);
        if (a6) {
          goto LABEL_10;
        }
      }

      else if (a6)
      {
LABEL_10:
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
        {
          sub_1003CF00C(v12, __p);
          sub_100673A58();
        }

        int v15 = 1;
        if (a6 > 252)
        {
          if (a6 == 255)
          {
            int v15 = 338;
          }

          else if (a6 == 253)
          {
            int v15 = 337;
          }
        }

        else if (a6 == 17)
        {
          int v15 = 340;
        }

        else if (a6 == 24)
        {
          int v15 = 339;
        }

        sub_100411948((uint64_t)a1, v12, 201, v15);
        if (*(_DWORD *)(v11 + 728) != 5) {
          sub_10036CFB0(a1, v10);
        }
        uint64_t v24 = 0LL;
        uint64_t v25 = 0LL;
        sub_1003D55EC(v12, (_DWORD *)&v25 + 1, &v25, (_DWORD *)&v24 + 1, &v24);
        uint64_t v19 = sub_1002E6BF0();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v19 + 328LL))(v19)
          && ((HIDWORD(v24) - 8194) > 0xE || ((1 << (BYTE4(v24) - 2)) & 0x409B) == 0))
        {
          if (qword_1008D67D8 != -1) {
            dispatch_once(&qword_1008D67D8, &stru_100893E28);
          }
          if (sub_100356C2C(qword_1008D67D0, v12))
          {
            uint64_t v21 = *(unsigned __int16 *)(v12 + 132);
            uint64_t v22 = *(unsigned int *)(v12 + 128);
            uint64_t v23 = sub_1002E8E64();
            (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v23 + 160LL))( v23,  (v22 | (v21 << 32)) & 0xFFFFFFFFFFFFLL,  4LL,  HIDWORD(v24));
          }
        }

void sub_100375618( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100375654(os_unfair_lock_s *a1, unsigned int a2, __int16 *a3, unsigned int a4)
{
  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_100242F28((uint64_t)v18, (uint64_t)&a1[138]);
  if (a3 && a4)
  {
    unsigned int v8 = sub_10036D744((uint64_t)a1, (unsigned __int16)*a3);
    uint64_t v9 = sub_10036C234((uint64_t)a1, v8);
    uint64_t v10 = sub_10036D544((uint64_t)a1, v8);
    uint64_t v11 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      if (v9)
      {
        sub_1003CF00C(v9, __p);
        if (v17 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446210;
        int v20 = (const char *)v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Received suspend streaming request from device %{public}s",  buf,  0xCu);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        *(_DWORD *)std::string buf = 136446210;
        int v20 = "null";
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Received suspend streaming request from device %{public}s",  buf,  0xCu);
      }
    }

    if (!sub_10036E1F4(a1, v8) || *(_DWORD *)(v10 + 728) != 3)
    {
      *(_DWORD *)(v10 + 728) = 3;
      LOBYTE(__p[0]) = 0;
      sub_100242CA4(__p);
      sub_1000DCD10(a2, a3, a4, 0, 0);
      sub_100242CD0(__p);
      sub_100242CD8(__p);
      goto LABEL_19;
    }

    unsigned int v14 = (os_log_s *)qword_1008F7558;
    uint64_t v13 = 0LL;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "streaming already suspended, racing transaction",  (uint8_t *)__p,  2u);
LABEL_19:
      uint64_t v13 = 0LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100673A2C();
    }
    uint64_t v13 = 7LL;
  }

  sub_100242FAC((uint64_t)v18);
  return v13;
}

void sub_1003758B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003758F4(os_unfair_lock_s *a1, uint64_t a2, unsigned __int16 *a3, int a4, uint64_t a5, int a6)
{
  v30[0] = 0LL;
  v30[1] = 0LL;
  sub_100242F28((uint64_t)v30, (uint64_t)&a1[138]);
  if (a3 && a4)
  {
    unsigned int v10 = sub_10036D744((uint64_t)a1, *a3);
    uint64_t v11 = sub_10036D544((uint64_t)a1, v10);
    uint64_t v12 = sub_10036C234((uint64_t)a1, v10);
    uint64_t v13 = v12;
    if (!a6)
    {
      uint64_t v18 = *(unsigned __int16 *)(v12 + 132);
      uint64_t v19 = *(unsigned int *)(v12 + 128);
      int v20 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(v13, __p);
        uint64_t v21 = v29 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        v32[0] = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Successfully suspended stream to device %{public}s",  buf,  0xCu);
        if (v29 < 0) {
          operator delete(__p[0]);
        }
      }

      *(_DWORD *)(v11 + 728) = 3;
      if (*(_DWORD *)(v11 + 732) != 1) {
        goto LABEL_35;
      }
      *(_DWORD *)(v11 + 732) = 0;
      uint64_t v22 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "Checking if HAL still thinks we are streaming, if so, start up A2DP stream if not done so already",  (uint8_t *)__p,  2u);
      }

      if (!sub_10054F3CC(v11))
      {
LABEL_35:
        uint64_t v25 = sub_1002E6E9C();
        uint64_t v26 = sub_1003D0268(v13);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, void))(*(void *)v25 + 72LL))( v25,  (v19 | (v18 << 32)) & 0xFFFFFFFFFFFFLL,  v26,  2LL,  0LL,  1LL,  1LL,  0LL);
        uint64_t v16 = 0LL;
        goto LABEL_36;
      }

      uint64_t v23 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(v13, __p);
        uint64_t v24 = v29 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        v32[0] = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Pending start stream, connecting media stream for %{public}s",  buf,  0xCu);
        if (v29 < 0) {
          operator delete(__p[0]);
        }
      }

      sub_10036F008((uint64_t)a1, v10);
      goto LABEL_34;
    }

    int v14 = *(_DWORD *)(v11 + 728);
    int v15 = (os_log_s *)qword_1008F7558;
    if (v14 != 3)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(v13, __p);
        sub_100673B04();
      }

      sub_10036CFB0(a1, v10);
      goto LABEL_34;
    }

    uint64_t v16 = 0LL;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(v13, __p);
      if (v29 >= 0) {
        char v17 = __p;
      }
      else {
        char v17 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 67109378;
      LODWORD(v32[0]) = a6;
      WORD2(v32[0]) = 2082;
      *(void *)((char *)v32 + 6) = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Stream is already in open state, ignoring with suspend error %u on device %{public}s",  buf,  0x12u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
LABEL_34:
      uint64_t v16 = 0LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100673A2C();
    }
    uint64_t v16 = 7LL;
  }

void sub_100375C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100375CC4(os_unfair_lock_s *a1, uint64_t a2, unsigned __int16 *a3, int a4, uint64_t a5, int a6)
{
  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_100242F28((uint64_t)v18, (uint64_t)&a1[138]);
  if (a4)
  {
    unsigned int v10 = sub_10036D744((uint64_t)a1, *a3);
    uint64_t v11 = sub_10036C234((uint64_t)a1, v10);
    uint64_t v12 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      if (v11)
      {
        sub_1003CF00C(v11, __p);
        if (v17 >= 0) {
          uint64_t v13 = __p;
        }
        else {
          uint64_t v13 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446210;
        int v20 = (const char *)v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Received transition confirm from device %{public}s",  buf,  0xCu);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        *(_DWORD *)std::string buf = 136446210;
        int v20 = "null";
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Received transition confirm from device %{public}s",  buf,  0xCu);
      }
    }

    uint64_t v14 = sub_1003758F4(a1, 0LL, a3, a4, 0LL, a6);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100673B4C();
    }
    uint64_t v14 = 7LL;
  }

  sub_100242FAC((uint64_t)v18);
  return v14;
}

void sub_100375E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100375EA8(uint64_t a1, unsigned int a2, int a3)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 552);
  unsigned int v6 = sub_10036D744(a1, a3);
  uint64_t v7 = sub_10036C234(a1, v6);
  unsigned int v8 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    if (v7)
    {
      sub_1003CF00C(v7, __p);
      if (v13 >= 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v16 = (const char *)v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Received reconfigure stream request from device %{public}s",  buf,  0xCu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v16 = "null";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Received reconfigure stream request from device %{public}s",  buf,  0xCu);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  int v10 = sub_1000DD830(a3, a2, 1, 25);
  sub_100242CD0(__p);
  if (v10 && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
    sub_100673B78();
  }
  sub_100242CD8(__p);
  sub_100242FAC((uint64_t)v14);
  return 0LL;
}

void sub_100376064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_10037609C(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v8 = a3;
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1 + 552);
  if (*(_BYTE *)(a1 + 616))
  {
    char v6 = 0;
    sub_100242CA4(&v6);
    int v4 = sub_1000DBC54(&v8, 1u, 0LL);
    sub_100242CD0(&v6);
    if (v4 && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_10067390C();
    }
    sub_100242CD8(&v6);
  }

  sub_100242FAC((uint64_t)v7);
  return 0LL;
}

void sub_100376148(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10037616C(os_unfair_lock_s *a1, unsigned int a2, int a3)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, (uint64_t)&a1[138]);
  unsigned int v6 = sub_10036D744((uint64_t)a1, a3);
  uint64_t v7 = sub_10036D544((uint64_t)a1, v6);
  uint64_t v8 = sub_10036C234((uint64_t)a1, v6);
  uint64_t v9 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    if (v8)
    {
      sub_1003CF00C(v8, __p);
      if (v13 >= 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v16 = (const char *)v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Received close stream request from device %{public}s",  buf,  0xCu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v16 = "null";
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Received close stream request from device %{public}s",  buf,  0xCu);
    }
  }

  sub_10036E1F4(a1, v6);
  *(void *)(v7 + 728) = 0LL;
  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  sub_1000DC2E4(a2, a3, 0);
  sub_100242CD0(__p);
  sub_100242CD8(__p);
  sub_100242FAC((uint64_t)v14);
  return 0LL;
}

void sub_100376328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100376364(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1 + 552);
  v1 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Successfully closed stream", v3, 2u);
  }

  sub_100242FAC((uint64_t)v4);
  return 0LL;
}

uint64_t sub_1003763E4(os_unfair_lock_s *a1, unsigned int a2, int a3)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, (uint64_t)&a1[138]);
  unsigned int v6 = sub_10036D744((uint64_t)a1, a3);
  uint64_t v7 = sub_10036D544((uint64_t)a1, v6);
  uint64_t v8 = sub_10036C234((uint64_t)a1, v6);
  uint64_t v9 = (os_log_s *)qword_1008F7558;
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(v8, __p);
      if (v14 >= 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      char v17 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Received abort stream request from device %{public}s",  buf,  0xCu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }

    *(_DWORD *)(v7 + 728) = 7;
    LOBYTE(__p[0]) = 0;
    sub_100242CA4(__p);
    sub_1000DC434(a2, a3);
    sub_100242CD0(__p);
    sub_10036E1F4(a1, v6);
    sub_10036CFB0(a1, v6);
    sub_100242CD8(__p);
    uint64_t v11 = 0LL;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100673BD8();
    }
    uint64_t v11 = 1LL;
  }

  sub_100242FAC((uint64_t)v15);
  return v11;
}

void sub_10037658C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003765C8(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, (uint64_t)&a1[138]);
  uint64_t v5 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Stream aborted on handle %d.", buf, 8u);
  }

  unsigned int v6 = sub_10036D744((uint64_t)a1, a3);
  uint64_t v7 = sub_10036D544((uint64_t)a1, v6);
  if (v7)
  {
    sub_10036E1F4(a1, v6);
    *(_DWORD *)(v7 + 728) = 0;
  }

  sub_100242FAC((uint64_t)v9);
  return 0LL;
}

void sub_1003766C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003766E4( os_unfair_lock_s *a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, unsigned int a6, int a7)
{
  v24[0] = 0LL;
  v24[1] = 0LL;
  sub_100242F28((uint64_t)v24, (uint64_t)&a1[138]);
  uint64_t v13 = sub_10036D544((uint64_t)a1, a3);
  uint64_t v14 = v13;
  if (a7)
  {
    int v15 = (os_log_s *)qword_1008F7558;
    if (*(int *)(v13 + 728) < 3)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = a7;
        __int16 v26 = 1024;
        unsigned int v27 = a4;
        __int16 v28 = 1024;
        unsigned int v29 = a3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Received get all capability failure with error %d for stream endpoint ID %u on a2dp handle %d - disconnecting",  buf,  0x14u);
      }

      sub_10036CFB0(a1, a3);
      if (qword_1008D9060 != -1) {
        dispatch_once(&qword_1008D9060, &stru_100893E48);
      }
      uint64_t v18 = qword_1008D9058;
      sub_10002418C(buf, "A2DPClient::GetAllCapsCfm");
      sub_10002418C(__p, "A2DP Get All Capabilities Error");
      sub_10040C784(0.0, v18, (uint64_t *)buf, (uint64_t *)__p);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(*(void **)buf);
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = a7;
      __int16 v26 = 1024;
      unsigned int v27 = a4;
      __int16 v28 = 1024;
      unsigned int v29 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "GetAllCaps rejected with error %d, but already in >= open state for stream endpoint ID %u on a2dp handle %d",  buf,  0x14u);
    }
  }

  else
  {
    uint64_t v16 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = a4;
      __int16 v26 = 1024;
      unsigned int v27 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "GetAllCapsCfm: Successfully retrieved capabilities for stream endpoint %u on a2dp handle %d",  buf,  0xEu);
    }

    sub_1003A494C(v14 + 400, a6, a5, a4);
    int v17 = sub_1003A6C80(v14 + 400);
    if (v17 == 255)
    {
      sub_10036F384(a1, a3);
    }

    else
    {
      uint64_t v19 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v17;
        __int16 v26 = 1024;
        unsigned int v27 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Querying stream capabilities of endpoint %u on a2dp handle %d",  buf,  0xEu);
      }

      buf[0] = 0;
      sub_100242CA4(buf);
      int v20 = sub_1000DB15C(a3, v17, 0LL);
      sub_100242CD0(buf);
      if (v20 && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
        sub_10067336C();
      }
      sub_100242CD8(buf);
    }
  }

  sub_100242FAC((uint64_t)v24);
  return 0LL;
}

void sub_100376A30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
}

uint64_t sub_100376A98(uint64_t a1, int a2, unsigned int a3, int a4)
{
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, a1 + 552);
  unsigned int v8 = sub_10036D744(a1, a2);
  uint64_t v9 = sub_10036C234(a1, v8);
  uint64_t v10 = sub_10036D544(a1, v8);
  if (v10)
  {
    uint64_t v11 = sub_1002E6BF0();
    else {
      int v12 = a4;
    }
    uint64_t v13 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      if (v9)
      {
        sub_1003CF00C(v9, __p);
        if (v19 >= 0) {
          uint64_t v14 = __p;
        }
        else {
          uint64_t v14 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v22 = (const char *)v14;
        __int16 v23 = 1024;
        int v24 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Received delay report stream request from device %{public}s, delay in 1/10th of milliseconds %d",  buf,  0x12u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v22 = "null";
        __int16 v23 = 1024;
        int v24 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Received delay report stream request from device %{public}s, delay in 1/10th of milliseconds %d",  buf,  0x12u);
      }
    }

    if (*(_DWORD *)(v10 + 728) == 5 && *(_BYTE *)(v10 + 705))
    {
      dispatch_block_cancel(*(dispatch_block_t *)(a1 + 496));
      sub_10054F434(v10, 100 * v12);
      sub_100376D78((os_unfair_lock_s *)a1, v10, v9);
      sub_100377158(a1, v10, (52429 * v12) >> 19);
    }

    else
    {
      sub_1003A7004(v10 + 400, 100 * v12);
      int v16 = sub_1003A6D9C(v10 + 400);
      sub_1002701AC(v10, v16);
    }

    LOBYTE(__p[0]) = 0;
    sub_100242CA4(__p);
    sub_1000DDA04(a2, a3, 1, 0);
    sub_100242CD0(__p);
    sub_100242CD8(__p);
    uint64_t v15 = 0LL;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100673C04();
    }
    uint64_t v15 = 1LL;
  }

  sub_100242FAC((uint64_t)v20);
  return v15;
}

void sub_100376D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_100376D78(os_unfair_lock_s *a1, uint64_t a2, unint64_t a3)
{
  unsigned int v6 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v7 = *(unsigned __int16 *)(a2 + 708);
    int v22 = 67109120;
    unsigned int v23 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Current Dynamic latency JBL: %d",  (uint8_t *)&v22,  8u);
  }

  unsigned int v8 = *(unsigned __int16 *)(a2 + 708);
  if (v8 > 0x77)
  {
    if (*(unsigned __int16 *)(a2 + 708) > 0x95u)
    {
      if (v8 == 150)
      {
        if (qword_1008D60F0 != -1) {
          dispatch_once(&qword_1008D60F0, &stru_100893DC8);
        }
        if (sub_1004AC08C((uint64_t)off_1008D60E8, 1))
        {
          if (qword_1008D60F0 != -1) {
            dispatch_once(&qword_1008D60F0, &stru_100893DC8);
          }
          if (sub_1004A8AC4((uint64_t)off_1008D60E8, a3))
          {
            uint64_t v11 = (os_log_s *)qword_1008F7558;
            if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v22) = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Adaptive Latency prevent disable LLM, set flush to 200ms",  (uint8_t *)&v22,  2u);
            }

            LOBYTE(v22) = 0;
            sub_100242CA4(&v22);
            int v12 = sub_10010F334(a3 + 128);
            sub_100242CD0(&v22);
            if (v12 && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
              sub_100673CF0();
            }
            goto LABEL_44;
          }
        }

        uint64_t v9 = 0LL;
        unsigned int v8 = 200;
      }

      else
      {
        if (v8 != 300) {
          goto LABEL_30;
        }
        uint64_t v9 = 0LL;
      }

      int v10 = 1;
      goto LABEL_35;
    }

    if (v8 == 120 || v8 == 140) {
      goto LABEL_14;
    }
  }

  else
  {
    if (*(unsigned __int16 *)(a2 + 708) <= 0x4Fu)
    {
      if (v8 == 30)
      {
        unsigned int v8 = 60;
        uint64_t v9 = 1LL;
        int v10 = 3;
        goto LABEL_35;
      }

      if (v8 != 60) {
        goto LABEL_30;
      }
LABEL_14:
      uint64_t v9 = 1LL;
      int v10 = 2;
LABEL_35:
      sub_10054F424(a2, v10);
      sub_10036E770((uint64_t)a1, *(unsigned __int16 *)(a2 + 600), v9);
      char v13 = v9 ^ 1;
      if (*(_DWORD *)(a2 + 728) == 5) {
        char v13 = 1;
      }
      if ((v13 & 1) == 0)
      {
        uint64_t v14 = sub_1002E6E9C();
        uint64_t v15 = *(unsigned __int16 *)(a3 + 132);
        uint64_t v16 = *(unsigned int *)(a3 + 128);
        uint64_t v17 = sub_1003D0268(a3);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v14 + 72LL))( v14,  (v16 | (v15 << 32)) & 0xFFFFFFFFFFFFLL,  v17,  2LL,  1LL,  1LL,  1LL,  0LL);
        uint64_t v18 = sub_1002E6E9C();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 944LL))(v18, 1LL, 1LL);
      }

      uint64_t v19 = sub_1002E6E9C();
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)v19 + 96LL))(v19, a3, v9);
      int v20 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = 67109120;
        unsigned int v23 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Dynamic Latency settting flush timeout to %d ms",  (uint8_t *)&v22,  8u);
      }

      LOBYTE(v22) = 0;
      sub_100242CA4(&v22);
      int v21 = sub_10010F334(a3 + 128);
      sub_100242CD0(&v22);
      if (v21 && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
        sub_100673C90();
      }
LABEL_44:
      sub_100242CD8(&v22);
      return;
    }

    if (v8 == 80 || v8 == 100) {
      goto LABEL_14;
    }
  }

void sub_100377138( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_100377158(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6 = *(unsigned __int16 *)(a2 + 708);
  unsigned int v7 = (int)fabs((double)(int)(a3 - v6));
  if (a3 >= v6) {
    int v8 = 1;
  }
  else {
    int v8 = 2;
  }
  if (v7 <= 0xA || v6 == 150) {
    unsigned __int16 v10 = v7;
  }
  else {
    unsigned __int16 v10 = v7 - 10;
  }
  uint64_t v11 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = "Down";
    if (v6 > a3) {
      int v12 = "Up";
    }
    int v13 = 136315394;
    uint64_t v14 = v12;
    __int16 v15 = 1024;
    int v16 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Dynamic Latency: Request JBL  %s by %dMsec",  (uint8_t *)&v13,  0x12u);
  }

  if (v10) {
    sub_10036E8C4(a1, a2, v8, v10);
  }
  else {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216LL))(a1, a2, 1LL);
  }
}

uint64_t sub_1003772A4(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, unint64_t a6)
{
  v16[0] = 0LL;
  v16[1] = 0LL;
  sub_100242F28((uint64_t)v16, a1 + 552);
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100673D50();
    }
  }

  else
  {
    atomic_store(0LL, (unint64_t *)(a1 + 760));
    float v12 = (float)a4 * 312.5;
    unint64_t v13 = atomic_load((unint64_t *)(a1 + 744));
    atomic_store( (unint64_t)v12 + (a6 - v13) * *(unsigned int *)(a1 + 620) / *(unsigned int *)(a1 + 624) / 0x3E8,  (unint64_t *)(a1 + 752));
    atomic_store(a6, (unint64_t *)(a1 + 744));
    *(_DWORD *)(a1 + 776) = a4;
    if (*(_BYTE *)(a1 + 780))
    {
      uint64_t v14 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO))
      {
        int v15 = atomic_load((unint64_t *)(a1 + 752));
        *(_DWORD *)std::string buf = 67109888;
        int v18 = 0;
        __int16 v19 = 1024;
        unsigned int v20 = v12;
        __int16 v21 = 1024;
        int v22 = a5;
        __int16 v23 = 1024;
        int v24 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "status %d, clock %uus, accuracy %u, adjusted clock %uus",  buf,  0x1Au);
      }
    }
  }

  return sub_100242FAC((uint64_t)v16);
}

void sub_100377448(uint64_t a1, unsigned int a2)
{
  unint64_t v3 = atomic_load((unint64_t *)(a1 + 760));
  int v4 = (unsigned __int16 *)(sub_10036D544(a1, a2) + 720);
  kdebug_trace(730021964LL, *v4, v3 / 0x3E8, 0LL, 0LL);
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
    sub_100673DB0();
  }
  unsigned int v5 = *v4;
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_100893DC8);
  }
  sub_1004B485C((uint64_t)off_1008D60E8, a2, v5, v3);
}

uint64_t sub_100377530(void *a1, uint64_t a2, int a3)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, (uint64_t)(a1 + 69));
  unsigned int v6 = sub_10036CE14(a1, a2);
  uint64_t v7 = sub_10036D544((uint64_t)a1, v6);
  uint64_t v8 = v7;
  if (v7)
  {
    sub_1003A70B4(v7 + 400, a3);
    sub_100270070(v8, a3);
  }

  sub_100242FAC((uint64_t)v10);
  return 0LL;
}

void sub_1003775B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1003775D0(float a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL v9 = (sub_1003D2B2C(a3, 12) & 1) == 0
    && (uint64_t v7 = sub_1002E6BF0(), ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 384LL))(v7) & 1) == 0)
  unsigned __int16 v10 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = "No";
    if (v9) {
      uint64_t v11 = "Yes";
    }
    int v13 = 134218242;
    double v14 = (float)(a1 * 100.0);
    __int16 v15 = 2082;
    int v16 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "REMOTE DEVICE Volume : Should send volume %f to driver = %{public}s",  (uint8_t *)&v13,  0x16u);
  }

  return v9;
}

uint64_t sub_100377700(void *a1, uint64_t a2, int a3, float a4)
{
  uint64_t v8 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 134217984;
    double v14 = (float)(a4 * 100.0);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "AVRCP REMOTE DEVICE: Volume changed to %f",  (uint8_t *)&v13,  0xCu);
  }

  unsigned int v9 = sub_10036CE14(a1, a2);
  uint64_t v10 = sub_10036D544((uint64_t)a1, v9);
  if (v10)
  {
    uint64_t v11 = v10;
    if (sub_1003775D0(a4, v10, a2, a3)) {
      sub_10026F638(v11, a4);
    }
  }

  return 0LL;
}

uint64_t sub_100377810(void *a1, uint64_t a2)
{
  unsigned int v4 = sub_10036CE14(a1, a2);
  uint64_t v5 = sub_10036D544((uint64_t)a1, v4);
  if (!v5) {
    return 312LL;
  }
  uint64_t v6 = v5;
  uint64_t v11 = 0LL;
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100893DA8);
  }
  uint64_t v7 = sub_10021F164((uint64_t)off_1008D60D8, a2, (int *)&v11 + 1, (int *)&v11);
  sub_10027029C(v6, BYTE4(v11), v11);
  int v10 = 3;
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100893DA8);
  }
  sub_10021F3F4((uint64_t)off_1008D60D8, a2, &v10);
  sub_1002702AC(v6, v10);
  unsigned __int8 v8 = sub_1003DF900(a2);
  sub_1002702BC(v6, v8);
  return v7;
}

uint64_t sub_100377920(void *a1, uint64_t a2)
{
  unsigned int v4 = sub_10036CE14(a1, a2);
  uint64_t v5 = sub_10036D544((uint64_t)a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100893DA8);
    }
    int v7 = sub_10021F03C((uint64_t)off_1008D60D8, a2);
    sub_100270274(v6, v7);
  }

  return 0LL;
}

uint64_t sub_1003779A0(void *a1, uint64_t a2, int a3)
{
  unsigned int v5 = sub_10036CE14(a1, a2);
  uint64_t v6 = sub_10036D544((uint64_t)a1, v5);
  if (v6) {
    sub_1002702CC(v6, a3);
  }
  return 0LL;
}

uint64_t sub_1003779E0(void *a1, uint64_t a2)
{
  unsigned int v4 = sub_10036CE14(a1, a2);
  uint64_t v5 = sub_10036D544((uint64_t)a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    unsigned __int8 v7 = sub_1003DFA38(a2);
    sub_1002702EC(v6, v7);
  }

  return 0LL;
}

uint64_t sub_100377A30(void *a1, uint64_t a2)
{
  unsigned int v4 = sub_10036CE14(a1, a2);
  uint64_t v5 = sub_10036D544((uint64_t)a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    int v7 = sub_1003E1830(a2);
    sub_100270898(v6, v7);
  }

  return 0LL;
}

uint64_t sub_100377A80(void *a1, uint64_t a2)
{
  unsigned int v4 = sub_10036CE14(a1, a2);
  uint64_t v5 = sub_10036D544((uint64_t)a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    int v7 = sub_1003DFC9C(a2);
    sub_1002705FC(v6, v7);
  }

  return 0LL;
}

uint64_t sub_100377AD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 528);
  if (v4 != (void *)(a1 + 536))
  {
    do
    {
      unsigned int v5 = *((unsigned __int16 *)v4 + 16);
      uint64_t v6 = sub_10036D544(a1, v5);
      if (v6)
      {
        uint64_t v7 = sub_10036C234(a1, v5);
        if (v7)
        {
          if (sub_1003E0230(v7, 64))
          {
            unsigned __int8 v8 = (os_log_s *)qword_1008F7558;
            if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::string buf = 138412546;
              id v14 = v3;
              __int16 v15 = 1024;
              unsigned int v16 = v5;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Notify Foreground App Chanbed to BTHAL: %@, a2dpHandle:%u",  buf,  0x12u);
            }

            sub_100270370(v6, v3);
          }
        }
      }

      unsigned int v9 = (void *)v4[1];
      if (v9)
      {
        do
        {
          int v10 = v9;
          unsigned int v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          int v10 = (void *)v4[2];
          BOOL v11 = *v10 == (void)v4;
          unsigned int v4 = v10;
        }

        while (!v11);
      }

      unsigned int v4 = v10;
    }

    while (v10 != (void *)(a1 + 536));
  }

  return 0LL;
}

void sub_100377C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100377C68(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  unsigned int v6 = sub_10036CE14(a1, a2);
  uint64_t v7 = sub_10036D544((uint64_t)a1, v6);
  if (v7)
  {
    (*(void (**)(uint64_t, id))(*(void *)v7 + 136LL))(v7, v5);
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 7LL;
  }

  return v8;
}

void sub_100377CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100377CEC(void *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = sub_10036CE14(a1, a2);
  uint64_t v6 = sub_10036D544((uint64_t)a1, v5);
  if (!v6) {
    return 7LL;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 144LL))(v6, a3);
  return 0LL;
}

uint64_t sub_100377D3C(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 528);
  id v3 = (void *)(a1 + 536);
  if (v2 != (void *)(a1 + 536))
  {
    uint64_t v6 = "Off";
    if (a2) {
      uint64_t v6 = "On";
    }
    uint64_t v17 = v6;
    do
    {
      unsigned int v7 = *((unsigned __int16 *)v2 + 16);
      uint64_t v8 = sub_10036D544(a1, v7);
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = sub_10036C234(a1, v7);
        if (v10)
        {
          uint64_t v11 = v10;
          if (sub_1003E0230(v10, 64))
          {
            float v12 = (os_log_s *)qword_1008F7558;
            if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::string buf = 136315394;
              __int16 v19 = v17;
              __int16 v20 = 1024;
              unsigned int v21 = v7;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "Notify AccessHeadTrack Change to BTHAL: %s, a2dpHandle:%u",  buf,  0x12u);
            }

            sub_100270348(v9, a2);
            if (qword_1008D5F40 != -1) {
              dispatch_once(&qword_1008D5F40, &stru_100893D68);
            }
            sub_1003B0C84((uint64_t)off_1008D5F38, v11);
          }
        }
      }

      int v13 = (void *)v2[1];
      if (v13)
      {
        do
        {
          id v14 = v13;
          int v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          id v14 = (void *)v2[2];
          BOOL v15 = *v14 == (void)v2;
          uint64_t v2 = v14;
        }

        while (!v15);
      }

      uint64_t v2 = v14;
    }

    while (v14 != v3);
  }

  return 0LL;
}

uint64_t sub_100377F04(uint64_t a1)
{
  v1 = *(void **)(a1 + 528);
  uint64_t v2 = (void *)(a1 + 536);
  if (v1 != (void *)(a1 + 536))
  {
    do
    {
      unsigned int v4 = *((unsigned __int16 *)v1 + 16);
      uint64_t v5 = sub_10036D544(a1, v4);
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = sub_10036C234(a1, v4);
        if (sub_1003E0230(v7, 64))
        {
          uint64_t v8 = sub_1002E6BF0();
          int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 792LL))(v8, 3LL);
          if (v7)
          {
            if (v9)
            {
              if (qword_1008D60F0 != -1) {
                dispatch_once(&qword_1008D60F0, &stru_100893DC8);
              }
              id v10 = sub_1004B3C8C((uint64_t)off_1008D60E8);
              uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
              sub_100270998(v6, v11);

              if (qword_1008D60F0 != -1) {
                dispatch_once(&qword_1008D60F0, &stru_100893DC8);
              }
              BOOL v12 = sub_1004B3EFC((uint64_t)off_1008D60E8, v7);
              sub_10054F484(v6, v12);
            }
          }
        }
      }

      int v13 = (void *)v1[1];
      if (v13)
      {
        do
        {
          id v14 = v13;
          int v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          id v14 = (void *)v1[2];
          BOOL v15 = *v14 == (void)v1;
          v1 = v14;
        }

        while (!v15);
      }

      v1 = v14;
    }

    while (v14 != v2);
  }

  return 0LL;
}

void sub_100378068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100378078(void *a1, uint64_t a2)
{
  unsigned int v4 = sub_10036CE14(a1, a2);
  uint64_t v5 = sub_10036D544((uint64_t)a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    int v9 = 0;
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100893D48);
    }
    sub_100400F20((uint64_t)off_1008D5F48, a2, &v9);
    uint64_t v7 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 800LL))(v7) != 1)
    {
      sub_100270320(v6, v9 == 1);
      if (qword_1008D5F40 != -1) {
        dispatch_once(&qword_1008D5F40, &stru_100893D68);
      }
      sub_1003B2E8C((uint64_t)off_1008D5F38, a2);
    }
  }

  return 0LL;
}

uint64_t sub_100378160(void *a1, uint64_t a2, int a3)
{
  unsigned int v6 = sub_10036CE14(a1, a2);
  uint64_t v7 = sub_10036D544((uint64_t)a1, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    if (sub_1003E0230(a2, 64))
    {
      uint64_t v9 = sub_1002E6BF0();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v9 + 792LL))(v9, 3LL))
      {
        id v10 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = "NO";
          if (a3) {
            uint64_t v11 = "YES";
          }
          int v13 = 136315138;
          id v14 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Spatial Profile: Personalized HRTF enhanced Tuning %s",  (uint8_t *)&v13,  0xCu);
        }

        sub_10054F494(v8, a3);
      }
    }
  }

  return 0LL;
}

uint64_t sub_100378278(void *a1, uint64_t a2, void *a3, int a4, int a5)
{
  id v9 = a3;
  unsigned int v10 = sub_10036CE14(a1, a2);
  uint64_t v11 = sub_10036D544((uint64_t)a1, v10);
  int v22 = 0;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100893D48);
  }
  sub_100400F20((uint64_t)off_1008D5F48, a2, &v22);
  uint64_t v12 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 800LL))(v12) == 1)
  {
    int v13 = (void *)a1[66];
    if (v13 != a1 + 67)
    {
      do
      {
        unsigned int v14 = *((unsigned __int16 *)v13 + 16);
        uint64_t v15 = sub_10036D544((uint64_t)a1, v14);
        if (v15)
        {
          uint64_t v16 = sub_10036C234((uint64_t)a1, v14);
          uint64_t v17 = v16;
          if (v16)
          {
            if (sub_1003E0230(v16, 64))
            {
              if (v9) {
                sub_100270438(v15, a4, v9, a5);
              }
              if (qword_1008D5F40 != -1) {
                dispatch_once(&qword_1008D5F40, &stru_100893D68);
              }
              sub_1003B2E8C((uint64_t)off_1008D5F38, v17);
            }
          }
        }

        int v18 = (void *)v13[1];
        if (v18)
        {
          do
          {
            __int16 v19 = v18;
            int v18 = (void *)*v18;
          }

          while (v18);
        }

        else
        {
          do
          {
            __int16 v19 = (void *)v13[2];
            BOOL v20 = *v19 == (void)v13;
            int v13 = v19;
          }

          while (!v20);
        }

        int v13 = v19;
      }

      while (v19 != a1 + 67);
    }
  }

  else if (v9 && v11)
  {
    sub_100270438(v11, a4, v9, a5);
  }

  return 0LL;
}

void sub_100378440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100378460(void *a1, uint64_t a2)
{
  unsigned int v3 = sub_10036CE14(a1, a2);
  else {
    return 7LL;
  }
}

uint64_t sub_100378498(void *a1, uint64_t a2, int a3)
{
  unsigned int v5 = sub_10036CE14(a1, a2);
  uint64_t v6 = sub_10036D544((uint64_t)a1, v5);
  if (!v6) {
    return 7LL;
  }
  sub_100270BBC(v6, a3);
  return 0LL;
}

uint64_t sub_1003784E0(void *a1, uint64_t a2, int a3)
{
  unsigned int v5 = sub_10036CE14(a1, a2);
  uint64_t v6 = sub_10036D544((uint64_t)a1, v5);
  if (!v6) {
    return 7LL;
  }
  uint64_t v7 = v6;
  if (a3)
  {
    uint64_t v8 = sub_1002E6E9C();
    int v9 = sub_1002CD53C(v8, 2u);
  }

  else
  {
    int v9 = 0;
  }

  sub_100270B44(v7, v9);
  return 0LL;
}

uint64_t sub_100378548(void *a1, uint64_t a2, int *a3)
{
  unsigned int v6 = sub_10036CE14(a1, a2);
  uint64_t v7 = sub_10036D544((uint64_t)a1, v6);
  if (a3)
  {
    uint64_t v8 = v7;
    if (v7)
    {
      int v9 = sub_1003D2B2C(a2, 17);
      int v10 = *a3;
      if (v9)
      {
        v10 |= 2u;
        *a3 = v10;
      }

      sub_1003D8BCC(a2, v10);
      sub_100270310(v8, *(unsigned __int8 *)a3);
      return 0LL;
    }

    else
    {
      return 7LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100673E28();
    }
    return 3LL;
  }

uint64_t sub_100378618(void *a1, uint64_t a2, int a3)
{
  unsigned int v6 = sub_10036CE14(a1, a2);
  uint64_t v7 = sub_10036D544((uint64_t)a1, v6);
  if (!v7) {
    return 7LL;
  }
  uint64_t v8 = v7;
  if (a3)
  {
    uint64_t v9 = sub_1002E6E9C();
    int v10 = sub_1002CD53C(v9, 0);
  }

  else
  {
    int v10 = 0;
  }

  sub_100270AE4(v8, v10);
  int v12 = sub_1003DFE78(a2);
  sub_1003786A4(a1, a2, v12);
  return 0LL;
}

uint64_t sub_1003786A4(void *a1, uint64_t a2, int a3)
{
  unsigned int v5 = sub_10036CE14(a1, a2);
  uint64_t v6 = sub_10036D544((uint64_t)a1, v5);
  if (!v6) {
    return 7LL;
  }
  sub_100270B0C(v6, a3);
  return 0LL;
}

uint64_t sub_1003786EC(void *a1, uint64_t a2, int a3)
{
  unsigned int v5 = sub_10036CE14(a1, a2);
  uint64_t v6 = sub_10036D544((uint64_t)a1, v5);
  if (!v6) {
    return 7LL;
  }
  uint64_t v7 = v6;
  if (a3)
  {
    uint64_t v8 = sub_1002E6E9C();
    int v9 = sub_1002CD53C(v8, 1u);
  }

  else
  {
    int v9 = 0;
  }

  sub_100270B1C(v7, v9);
  return 0LL;
}

uint64_t sub_100378754(void *a1, uint64_t a2, int a3)
{
  unsigned int v6 = sub_10036CE14(a1, a2);
  uint64_t v7 = sub_10036D544((uint64_t)a1, v6);
  if (!v7) {
    return 7LL;
  }
  uint64_t v8 = v7;
  if (a3)
  {
    uint64_t v9 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v9 + 792LL))(v9, 1LL))
    {
      uint64_t v10 = sub_1002E6BF0();
      a3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 792LL))(v10, 3LL);
      int v11 = 1;
    }

    else
    {
      int v11 = 0;
      a3 = 0;
    }
  }

  else
  {
    int v11 = 0;
  }

  int v22 = 0;
  sub_100270948(v8, v11);
  sub_100270ABC(v8, a3);
  if (v11)
  {
    if (a3)
    {
      if (qword_1008D60F0 != -1) {
        dispatch_once(&qword_1008D60F0, &stru_100893DC8);
      }
      id v13 = sub_1004B3C8C((uint64_t)off_1008D60E8);
      unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      sub_100270998(v8, v14);

      if (qword_1008D60F0 != -1) {
        dispatch_once(&qword_1008D60F0, &stru_100893DC8);
      }
      BOOL v15 = sub_1004B3EFC((uint64_t)off_1008D60E8, a2);
      sub_10054F484(v8, v15);
    }

    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100893D48);
    }
    sub_100400F20((uint64_t)off_1008D5F48, a2, &v22);
    int v16 = v22;
    if (!v22)
    {
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_100893D48);
      }
      int v16 = 1;
      sub_100401068((uint64_t)off_1008D5F48, a2, 1LL);
      int v22 = 1;
    }

    sub_100270320(v8, v16 == 1);
    if (qword_1008D60F0 != -1) {
      dispatch_once(&qword_1008D60F0, &stru_100893DC8);
    }
    id v17 = sub_1004B34A0((uint64_t)off_1008D60E8);
    (*(void (**)(uint64_t, id))(*(void *)v8 + 128LL))(v8, v17);
    int v18 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      if (a3) {
        __int16 v19 = "YES";
      }
      else {
        __int16 v19 = "NO";
      }
      if (qword_1008D60F0 != -1) {
        dispatch_once(&qword_1008D60F0, &stru_100893DC8);
      }
      BOOL v20 = sub_1004B3EFC((uint64_t)off_1008D60E8, a2);
      unsigned int v21 = " NO ";
      *(_DWORD *)std::string buf = 136446722;
      int v24 = "YES ";
      __int16 v25 = 2082;
      __int16 v26 = v19;
      if (v20) {
        unsigned int v21 = " YES ";
      }
      __int16 v27 = 2082;
      __int16 v28 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "AudioDevice. Spatial Audio :  SpatialSupport  %{public}s Custom HRTF Support %{public}s Custom HRTF Allowed %{public}s",  buf,  0x20u);
    }
  }

  return 0LL;
}

void sub_100378A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100378A94(uint64_t a1, uint64_t a2)
{
  switch(sub_1003D062C(a2))
  {
    case 0u:
      unsigned int v3 = (os_log_s *)qword_1008F7558;
      BOOL v4 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0LL;
      if (v4)
      {
        sub_1003CF00C(a2, __p);
        if (v21 >= 0) {
          unsigned int v6 = __p;
        }
        else {
          unsigned int v6 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = v6;
        uint64_t v7 = "User selected device type is unknown. Returning user selected device type as kBluetoothAudioDeviceCategoryU"
             "nknown for device %{public}s.";
        goto LABEL_12;
      }

      break;
    case 1u:
      uint64_t v10 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a2, __p);
        int v11 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Returning user selected device type as kBluetoothAudioDeviceCategoryCarkit for device %{public}s.",  buf,  0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t result = 2LL;
      break;
    case 2u:
      int v12 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a2, __p);
        id v13 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Returning user selected device type as kBluetoothAudioDeviceCategoryHeadphone for device %{public}s.",  buf,  0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t result = 1LL;
      break;
    case 3u:
      unsigned int v14 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a2, __p);
        BOOL v15 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "User selected device type is hearing aid. Returning user selected device type as kBluetoothAudioDeviceCategory HearingAid for device %{public}s.",  buf,  0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t result = 4LL;
      break;
    case 4u:
      int v16 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a2, __p);
        id v17 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Returning user selected device type as kBluetoothAudioDeviceCategorySpeaker for device %{public}s.",  buf,  0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t result = 3LL;
      break;
    case 5u:
      int v18 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a2, __p);
        __int16 v19 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "User selected device type is other. Returning user selected device type as kBluetoothAudioDeviceCategoryOther for device %{public}s.",  buf,  0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t result = 5LL;
      break;
    default:
      unsigned int v3 = (os_log_s *)qword_1008F7558;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0LL;
      if (v8)
      {
        sub_1003CF00C(a2, __p);
        if (v21 >= 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446210;
        __int16 v23 = v9;
        uint64_t v7 = "Returning user selected device type as kBluetoothAudioDeviceCategoryUnknown for device %{public}s.";
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v7, buf, 0xCu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
        uint64_t result = 0LL;
      }

      break;
  }

  return result;
}

void sub_100378EB4(uint64_t a1, uint64_t a2)
{
  if ((sub_100270EE4(a2) & 1) != 0)
  {
    __int16 v4 = sub_10054EC18(a2);
    uint64_t v5 = sub_1004050C8();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_100378F7C;
    v7[3] = &unk_1008878D8;
    v7[4] = a1;
    __int16 v8 = v4;
    sub_100405384(v5, v7);
  }

  else
  {
    unsigned int v6 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Audio device is not valid, not handling streamWillStart",  buf,  2u);
    }
  }

uint64_t sub_100378F7C(uint64_t a1)
{
  uint64_t v2 = *(unint64_t **)(a1 + 32);
  v21[0] = 0LL;
  v21[1] = 0LL;
  sub_100242F28((uint64_t)v21, (uint64_t)(v2 + 69));
  uint64_t v3 = sub_10036C234((uint64_t)v2, *(unsigned __int16 *)(a1 + 40));
  __int16 v4 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int16 *)(a1 + 40);
    *(_DWORD *)std::string buf = 67109120;
    int v23 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Received system 'audio started' notification from HAL on a2dpHandle %d",  buf,  8u);
  }

  atomic_store(0LL, v2 + 93);
  atomic_store(0LL, v2 + 94);
  atomic_store(0LL, v2 + 95);
  if (v3)
  {
    *(_DWORD *)std::string buf = 0;
    uint64_t v20 = 0LL;
    int v19 = 0;
    sub_1003D55EC(v3, buf, (_DWORD *)&v20 + 1, &v20, &v19);
    uint64_t v6 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 720LL))(v6)
      && (v20 - 8202) <= 0x15
      && ((1 << (v20 - 10)) & 0x20033F) != 0)
    {
      if (qword_1008D60E0 != -1) {
        dispatch_once(&qword_1008D60E0, &stru_100893DA8);
      }
      int v7 = sub_100215778((uint64_t)off_1008D60D8, v3, 11LL, 500LL, 1u);
      if (v7)
      {
        __int16 v8 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
          sub_100673E54(v7, v8, v9);
        }
      }
    }

    sub_10036F008((uint64_t)v2, *(unsigned __int16 *)(a1 + 40));
    uint64_t v10 = *(unsigned int *)(v3 + 128);
    uint64_t v11 = *(unsigned __int16 *)(v3 + 132);
    uint64_t v12 = sub_1002E6E9C();
    uint64_t v13 = sub_1003D0268(v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v12 + 72LL))( v12,  (v10 | (v11 << 32)) & 0xFFFFFFFFFFFFLL,  v13,  2LL,  1LL,  1LL,  1LL,  0LL);
    uint64_t v14 = sub_1002E6E9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 944LL))(v14, 1LL, 1LL);
    char v18 = 0;
    sub_100242CA4(&v18);
    BOOL v15 = sub_1000DDB64(v3 + 128);
    sub_100242CD0(&v18);
    if (!v15)
    {
      uint64_t v16 = sub_1002E6E9C();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 296LL))(v16, v3, 1LL, 1LL);
    }

    sub_100242CD8(&v18);
  }

  return sub_100242FAC((uint64_t)v21);
}

void sub_100379200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10037923C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10037924C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t result = sub_10054EC18(a2);
  if ((_DWORD)result)
  {
    unsigned int v10 = result;
    if (*(_BYTE *)(a1 + 780))
    {
      uint64_t v11 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEBUG))
      {
        int v12 = 134218496;
        uint64_t v13 = a4;
        __int16 v14 = 1024;
        unsigned int v15 = v10;
        __int16 v16 = 1024;
        int v17 = a5;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Sending data of length %lu to a2dpHandle %d with frameCount %d",  (uint8_t *)&v12,  0x18u);
      }
    }

    return sub_100370CF0(a1, a3, a4, a5, v10);
  }

  return result;
}

uint64_t sub_100379350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_10037924C(a1 - 256, a2, a3, a4, a5);
}

void sub_100379358(uint64_t a1, uint64_t a2)
{
  if ((sub_100270EE4(a2) & 1) != 0)
  {
    __int16 v4 = sub_10054EC18(a2);
    uint64_t v5 = sub_1004050C8();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_100379420;
    v7[3] = &unk_1008878D8;
    v7[4] = a1;
    __int16 v8 = v4;
    sub_100405384(v5, v7);
  }

  else
  {
    uint64_t v6 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Audio device is not valid, not handling streamDidStop",  buf,  2u);
    }
  }

uint64_t sub_100379420(uint64_t a1)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 32);
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, (uint64_t)&v2[138]);
  uint64_t v3 = sub_10036C234((uint64_t)v2, *(unsigned __int16 *)(a1 + 40));
  __int16 v4 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int16 *)(a1 + 40);
    *(_DWORD *)std::string buf = 67109120;
    int v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Received system 'audio stop' notification from HAL on a2dpHandle %d",  buf,  8u);
  }

  if (v3)
  {
    sub_10036EA00(v2, *(unsigned __int16 *)(a1 + 40));
    uint64_t v6 = sub_1002E6E9C();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v6 + 944LL))(v6, 0LL, 1LL);
    buf[0] = 0;
    sub_100242CA4(buf);
    BOOL v7 = sub_1000DDB64(v3 + 128);
    sub_100242CD0(buf);
    if (!v7)
    {
      uint64_t v8 = sub_1002E6E9C();
      (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v8 + 296LL))(v8, v3, 0LL, 1LL);
    }

    sub_100242CD8(buf);
  }

  return sub_100242FAC((uint64_t)v10);
}

void sub_100379568( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100379598(uint64_t a1, uint64_t a2)
{
}

void sub_1003795A0(uint64_t a1, uint64_t a2)
{
  if ((sub_100270EE4(a2) & 1) != 0)
  {
    __int16 v4 = sub_10054EC18(a2);
    uint64_t v5 = sub_1004050C8();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_100379668;
    v7[3] = &unk_1008878D8;
    v7[4] = a1;
    __int16 v8 = v4;
    sub_100405384(v5, v7);
  }

  else
  {
    uint64_t v6 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Audio device is not valid, not handling streamDidReset",  buf,  2u);
    }
  }

uint64_t sub_100379668(uint64_t a1)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 32);
  uint64_t result = sub_10036C234((uint64_t)v2, *(unsigned __int16 *)(a1 + 40));
  if (result)
  {
    sub_10036EA00(v2, *(unsigned __int16 *)(a1 + 40));
    return sub_10036EE5C(v2, *(unsigned __int16 *)(a1 + 40));
  }

  return result;
}

void sub_1003796B8(uint64_t a1, uint64_t a2)
{
}

void sub_1003796C0(uint64_t a1, uint64_t a2, float a3)
{
  if ((sub_100270EE4(a2) & 1) != 0)
  {
    __int16 v6 = sub_10054EC18(a2);
    uint64_t v7 = sub_1004050C8();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_100379798;
    void v9[3] = &unk_100893818;
    void v9[4] = a1;
    __int16 v11 = v6;
    float v10 = a3;
    sub_100405384(v7, v9);
  }

  else
  {
    __int16 v8 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Audio device is not valid, not handling volumeDidUpdate",  buf,  2u);
    }
  }

uint64_t sub_100379798(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, v2 + 552);
  uint64_t v3 = sub_10036C234(v2, *(unsigned __int16 *)(a1 + 44));
  if (v3)
  {
    __int16 v4 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO))
    {
      int v5 = (int)(float)(*(float *)(a1 + 40) * 100.0);
      *(_DWORD *)std::string buf = 67109120;
      int v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending volume %d", buf, 8u);
    }

    if (qword_1008D9250 != -1) {
      dispatch_once(&qword_1008D9250, &stru_100893E68);
    }
    sub_100520A48(*(float *)(a1 + 40), (uint64_t)off_1008D9248, v3);
  }

  return sub_100242FAC((uint64_t)v7);
}

void sub_1003798C0(_Unwind_Exception *exception_object)
{
}

void sub_1003798DC(uint64_t a1, uint64_t a2, float a3)
{
}

uint64_t sub_1003798E4(void *a1, uint64_t a2, int a3)
{
  unsigned int v6 = sub_10036CE14(a1, a2);
  if (!v6) {
    return 1LL;
  }
  uint64_t v7 = sub_10036D544((uint64_t)a1, v6);
  __int16 v8 = (os_log_s *)qword_1008F7558;
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100673ECC();
    }
    return 1LL;
  }

  uint64_t v9 = v7;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    float v10 = (void **)__p[0];
    __int16 v11 = "No";
    if (v14 >= 0) {
      float v10 = __p;
    }
    if (a3) {
      __int16 v11 = "Yes";
    }
    *(_DWORD *)std::string buf = 136446466;
    __int16 v16 = v10;
    __int16 v17 = 2082;
    char v18 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "setAllowsAutoRoute: %{public}s, allows %{public}s",  buf,  0x16u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_100270C44(v9, a3);
  return 0LL;
}

uint64_t sub_100379A48(void *a1, uint64_t a2, int a3)
{
  unsigned int v6 = sub_10036CE14(a1, a2);
  if (!v6) {
    return 1LL;
  }
  uint64_t v7 = sub_10036D544((uint64_t)a1, v6);
  __int16 v8 = (os_log_s *)qword_1008F7558;
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100673F2C();
    }
    return 1LL;
  }

  uint64_t v9 = v7;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    float v10 = (void **)__p[0];
    __int16 v11 = "No";
    if (v14 >= 0) {
      float v10 = __p;
    }
    if (a3) {
      __int16 v11 = "Yes";
    }
    *(_DWORD *)std::string buf = 136446466;
    __int16 v16 = v10;
    __int16 v17 = 2082;
    char v18 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "setAudioRouteHidden: %{public}s, %{public}s",  buf,  0x16u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_100270CA4(v9, a3);
  return 0LL;
}

uint64_t sub_100379BAC(void *a1, uint64_t a2, int a3)
{
  unsigned int v5 = sub_10036CE14(a1, a2);
  if (v5)
  {
    uint64_t v6 = sub_10036D544((uint64_t)a1, v5);
    if (v6)
    {
      sub_100270BE4(v6, a3);
      return 0LL;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100673F8C();
    }
  }

  return 1LL;
}

uint64_t sub_100379C30(void *a1, uint64_t a2, int a3)
{
  unsigned int v6 = sub_10036CE14(a1, a2);
  if (!v6)
  {
LABEL_10:
    uint64_t v11 = 1LL;
    goto LABEL_11;
  }

  uint64_t v7 = sub_10036D544((uint64_t)a1, v6);
  __int16 v8 = (os_log_s *)qword_1008F7558;
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100673FEC();
    }
    goto LABEL_10;
  }

  uint64_t v9 = v7;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    float v10 = "No";
    if (a3) {
      float v10 = "Yes";
    }
    int v13 = 136315138;
    char v14 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Smart Route: [A2DP] Tipi Connection status : %s",  (uint8_t *)&v13,  0xCu);
  }

  sub_100270010(v9, a3);
  uint64_t v11 = 0LL;
LABEL_11:
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_100893DC8);
  }
  sub_1004B4B38((uint64_t)off_1008D60E8, a2, a3);
  return v11;
}

void sub_100379D98(void *a1, uint64_t a2, int a3)
{
  unsigned int v6 = sub_10036CE14(a1, a2);
  if (v6)
  {
    uint64_t v7 = sub_10036D544((uint64_t)a1, v6);
    if (v7)
    {
      uint64_t v8 = v7;
      else {
        int v9 = dword_1006C2530[a3 - 1];
      }
      float v10 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a2, __p);
        if (v14 >= 0) {
          uint64_t v11 = __p;
        }
        else {
          uint64_t v11 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 67109634;
        int v16 = a3;
        __int16 v17 = 1024;
        int v18 = v9;
        __int16 v19 = 2082;
        uint64_t v20 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "User selected device type is %d. Setting category as %d for device %{public}s.",  buf,  0x18u);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
      }

      sub_1005022F4(v8, v9);
      int v12 = sub_1003A439C(v8 + 400);
      sub_1005020A4(v8, v12);
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
    {
      sub_10067404C();
    }
  }

uint64_t sub_100379F24(os_unfair_lock_s *a1, unsigned int a2, int a3, int a4)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, (uint64_t)&a1[138]);
  uint64_t v8 = sub_10036D544((uint64_t)a1, a2);
  if (!v8) {
    goto LABEL_5;
  }
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_100893DC8);
  }
  if ((sub_1004A8760((uint64_t)off_1008D60E8, a2) & 1) == 0)
  {
    sub_10036E8C4((uint64_t)a1, v8, a3, a4);
    uint64_t v9 = 0LL;
    if (a4) {
      *(_BYTE *)(v8 + 710) = 1;
    }
  }

  else
  {
LABEL_5:
    if (a4)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
        sub_1006740AC();
      }
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      void v12[2] = sub_10036CA58;
      _OWORD v12[3] = &unk_100893710;
      __int16 v13 = a2;
      char v14 = 0;
      sub_10036C2E4(a1 + 108, v12);
    }

    uint64_t v9 = 1LL;
  }

  sub_100242FAC((uint64_t)v11);
  return v9;
}

void sub_10037A06C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10037A088(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  unsigned int v6 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Dynamic Latency ExpanseStateChanged to: %d",  (uint8_t *)v7,  8u);
  }

  sub_10036C698(a1, a2, a3);
}

void sub_10037A148(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_10037A150(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  unsigned int v6 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Dynamic Latency gameStateChanged to: %d",  (uint8_t *)v8,  8u);
  }

  sub_10036C730(a1, a2, a3);
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Dynamic Latency ExpanseState disabled",  (uint8_t *)v8,  2u);
    }

    sub_10036C698(a1, a2, 0);
  }

void sub_10037A268(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_10037A270(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  unsigned int v6 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Dynamic Latency aggregationStateChanged to: %d",  (uint8_t *)v7,  8u);
  }

  sub_10036C7C8(a1, a2, a3);
}

void sub_10037A330(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_10037A338(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  unsigned int v6 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Dynamic Latency voiceOverChanged to: %d",  (uint8_t *)v7,  8u);
  }

  sub_10036C870(a1, a2, a3);
}

void sub_10037A3F8(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_10037A400(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  unsigned int v6 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Dynamic Latency MUSIC spatial changed to: %d",  (uint8_t *)v7,  8u);
  }

  sub_10036C908(a1, a2, a3);
}

void sub_10037A4C0(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_10037A4C8(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  unsigned int v6 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Dynamic Latency VIDEO spatial changed to: %d",  (uint8_t *)v7,  8u);
  }

  sub_10036C9A0(a1, a2, a3);
}

void sub_10037A588(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_10037A590(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4, unsigned __int8 a5)
{
  id v9 = a4;
  unsigned int v10 = sub_10054EC18(a2);
  uint64_t v11 = sub_10036C234(a1, v10);
  if (v11)
  {
    v12[0] = 2;
    v12[1] = a3;
    void v12[2] = sub_10026F9D0(a2, v9);
    _OWORD v12[3] = a5;
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100893DA8);
    }
    if (sub_100222974((uint64_t)off_1008D60D8, v11, 4u, v12)
      && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
    {
      sub_10067413C();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
  {
    sub_100674110();
  }
}

void sub_10037A6B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10037A6D0(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4, unsigned __int8 a5)
{
}

void sub_10037A6D8( uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4, unsigned __int8 a5, unsigned __int8 a6)
{
  id v11 = a4;
  unsigned int v12 = sub_10054EC18(a2);
  uint64_t v13 = sub_10036C234(a1, v12);
  if (v13)
  {
    v14[0] = 3;
    v14[1] = sub_10026F9D0(a2, v11);
    void v14[2] = a3;
    v14[3] = a5;
    v14[4] = a6;
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100893DA8);
    }
    if (sub_100222974((uint64_t)off_1008D60D8, v13, 5u, v14)
      && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
    {
      sub_1006741C8();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
  {
    sub_10067419C();
  }
}

void sub_10037A804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10037A820( uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4, unsigned __int8 a5, unsigned __int8 a6)
{
}

void sub_10037A828(os_unfair_lock_s *a1, uint64_t a2, int a3, int a4)
{
  if ((*(_BYTE *)(a2 + 723) != 0) != a3)
  {
    *(_BYTE *)(a2 + 723) = a3;
    unsigned int v8 = sub_10054EC18(a2);
    uint64_t v9 = sub_10036C234((uint64_t)a1, v8);
    if (v9)
    {
      uint64_t v10 = v9;
      id v11 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v12 = a3 ? "enabled" : "disabled";
        sub_1003FE1B4((unsigned __int8 *)(v10 + 128), __p);
        uint64_t v13 = v15 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446466;
        __int16 v17 = v12;
        __int16 v18 = 2082;
        __int16 v19 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter: %{public}s for device %{public}s",  buf,  0x16u);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
      }

      if (sub_1003D2B2C(v10, 13) && sub_1003A46D4(a2 + 400) == 33023)
      {
        *(_BYTE *)(a2 + 704) = a3 ^ 1;
        sub_10054F414(a2, a3 ^ 1);
      }

      sub_10036CAAC(a1, a2, a3);
      if (a4 && (a3 & 1) == 0 && *(_BYTE *)(v10 + 960))
      {
        *(_DWORD *)(v10 + 980) = 3;
        if (qword_1008D67A8 != -1) {
          dispatch_once(&qword_1008D67A8, &stru_100893EA8);
        }
        sub_10052F37C((uint64_t)off_1008D67A0, (unsigned __int8 *)v10);
      }
    }
  }

void sub_10037AA08(uint64_t a1, uint64_t a2, int a3, int a4)
{
}

uint64_t sub_10037AA10(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5 = sub_10054EC18(a2);
  uint64_t result = sub_10036C234(a1, v5);
  if (result)
  {
    uint64_t v7 = result;
    unsigned int v8 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003FE1B4((unsigned __int8 *)(v7 + 128), __p);
      uint64_t v9 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 67109378;
      int v13 = a3;
      __int16 v14 = 2082;
      char v15 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Spatial Audio Active(via BTHAL) is : %d for device %{public}s",  buf,  0x12u);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_100893D68);
    }
    return sub_1003B3138((uint64_t)off_1008D5F38, v7, a3);
  }

  return result;
}

uint64_t sub_10037AB50(uint64_t a1, uint64_t a2, int a3)
{
  return sub_10037AA10(a1 - 256, a2, a3);
}

void sub_10037AB58(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v9 = a3;
  unsigned int v10 = sub_10054EC18(a2);
  uint64_t v11 = sub_10036C234(a1, v10);
  unsigned int v12 = (os_log_s *)qword_1008F7558;
  if (v11)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003FE1B4((unsigned __int8 *)(v11 + 128), __p);
      int v13 = @"None";
      if (v9) {
        int v13 = v9;
      }
      if (v16 >= 0) {
        __int16 v14 = __p;
      }
      else {
        __int16 v14 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 138412802;
      __int16 v18 = v13;
      __int16 v19 = 1024;
      int v20 = a4;
      __int16 v21 = 2082;
      int v22 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Spatial Audio: Spatial Audio mode for App: %@ From User(via BTHAL) is : %d for device %{public}s",  buf,  0x1Cu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }

    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_100893D68);
    }
    sub_1003B3260((uint64_t)off_1008D5F38, v11, v9, a4, a5);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
  {
    sub_100674228();
  }
}

void sub_10037ACF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10037AD10(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
}

void sub_10037AD18(uint64_t a1, uint64_t a2, char a3)
{
  __int16 v5 = sub_10054EC18(a2);
  uint64_t v6 = sub_1004050C8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_10037AD98;
  v7[3] = &unk_100893298;
  v7[4] = a1;
  __int16 v8 = v5;
  char v9 = a3;
  sub_100405384(v6, v7);
}

uint64_t sub_10037AD98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, v2 + 552);
  uint64_t v3 = sub_10036C234(v2, *(unsigned __int16 *)(a1 + 40));
  if (v3)
  {
    __int16 v4 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(a1 + 42)) {
        __int16 v5 = "enabled";
      }
      else {
        __int16 v5 = "disabled";
      }
      *(_DWORD *)std::string buf = 136315138;
      unsigned int v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PME On Buds: %s", buf, 0xCu);
    }

    *(_WORD *)std::string buf = 1;
    if (*(_BYTE *)(a1 + 42)) {
      uint8_t v6 = 1;
    }
    else {
      uint8_t v6 = 2;
    }
    buf[1] = v6;
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100893DA8);
    }
    if (sub_100222BA4((uint64_t)off_1008D60D8, v3, 2u, buf)
      && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
    {
      sub_100674254();
    }
  }

  return sub_100242FAC((uint64_t)v8);
}

void sub_10037AF0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10037AF2C(uint64_t a1, uint64_t a2, char a3)
{
}

void sub_10037AF34(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 <= 3 && *(_BYTE *)(a2 + 704))
  {
    __int16 v5 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      v6[0] = 67109120;
      v6[1] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "AAC-ELD frame count update notification from BTHALPlugIn received: %d",  (uint8_t *)v6,  8u);
    }

    *(_DWORD *)(a2 + 660) = a3;
  }

void sub_10037AFF8(os_unfair_lock_s *a1, uint64_t a2, unint64_t a3)
{
  if (sub_1003A46D4(a2 + 400) == 33023)
  {
    uint64_t v6 = sub_1002E6E00();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 440LL))(v6) & 1) == 0)
    {
      unint64_t v7 = a3 / (10 * *(_DWORD *)(a2 + 660));
      unsigned __int16 v8 = *(_WORD *)(a2 + 720) + v7;
      *(_WORD *)(a2 + 720) = v8;
      char v9 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v11 = 134218240;
        *(void *)&v11[4] = v7;
        *(_WORD *)&v11[12] = 1024;
        *(_DWORD *)&uint8_t v11[14] = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "AudioSkywalkReadLoop Skip A2DP sequence number Skipped = %llu, current seq Num = %d",  v11,  0x12u);
      }
    }
  }

  __int16 v10 = sub_10054EC18(a2);
  *(void *)uint64_t v11 = _NSConcreteStackBlock;
  *(void *)&v11[8] = 3221225472LL;
  *(void *)&v11[16] = sub_10036CA90;
  unsigned int v12 = &unk_100893750;
  __int16 v14 = v10;
  unint64_t v13 = a3;
  sub_10036C2E4(a1 + 108, v11);
}

void sub_10037B150(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

uint64_t sub_10037B158(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, (uint64_t)&a1[138]);
  unsigned int v6 = sub_10054EC18(a2);
  uint64_t v7 = sub_10036D544((uint64_t)a1, v6);
  unsigned __int16 v8 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v6;
    LOWORD(v12) = 1024;
    *(_DWORD *)((char *)&v12 + 2) = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Dynamic Latency received system 'audio speed change complete' notification from HAL on a2dpHandle %d, status %d",  buf,  0xEu);
  }

  if (v7)
  {
    if (*(_BYTE *)(v7 + 705))
    {
      sub_10036E8C4((uint64_t)a1, v7, 0, 0);
      *(_BYTE *)(v7 + 705) = 0;
      sub_10036C49C(a1, a2, 1);
    }

    else if (*(_BYTE *)(v7 + 710))
    {
      *(_BYTE *)(v7 + 710) = 0;
      *(void *)std::string buf = _NSConcreteStackBlock;
      uint64_t v12 = 3221225472LL;
      unint64_t v13 = sub_10036CA58;
      __int16 v14 = &unk_100893710;
      __int16 v15 = v6;
      char v16 = 1;
      sub_10036C2E4(a1 + 108, buf);
    }

    else
    {
      sub_10036E8C4((uint64_t)a1, v7, 0, 0);
    }
  }

  return sub_100242FAC((uint64_t)v10);
}

void sub_10037B2F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10037B310(uint64_t a1, uint64_t a2, int a3)
{
  return sub_10037B158((os_unfair_lock_s *)(a1 - 256), a2, a3);
}

void sub_10037B318(uint64_t a1, uint64_t a2)
{
  __int16 v3 = sub_10054EC18(a2);
  uint64_t v4 = sub_1004050C8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10037B388;
  v5[3] = &unk_1008878D8;
  v5[4] = a1;
  __int16 v6 = v3;
  sub_100405384(v4, v5);
}

uint64_t sub_10037B388(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, v2 + 552);
  uint64_t v3 = sub_10036C234(v2, *(unsigned __int16 *)(a1 + 40));
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (v4)
    {
      sub_1003CF00C(v3, v9);
      sub_1006742E0();
    }

    char v8 = 0;
    sub_100242CA4(&v8);
    int v5 = sub_10010CDEC(v3 + 128);
    __int16 v6 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v12 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Forced disconnect with return status %{bluetooth:OI_STATUS}u",  buf,  8u);
    }

    sub_100242CD8(&v8);
  }

  else if (v4)
  {
    sub_1006742B4();
  }

  return sub_100242FAC((uint64_t)v10);
}

void sub_10037B4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_10037B4F8(uint64_t a1, uint64_t a2)
{
}

void sub_10037B500(uint64_t a1, uint64_t a2)
{
  if ((sub_100270EE4(a2) & 1) != 0)
  {
    __int16 v4 = sub_10054EC18(a2);
    uint64_t v5 = sub_1004050C8();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    _DWORD v7[2] = sub_10037B5D0;
    v7[3] = &unk_10087FF20;
    __int16 v8 = v4;
    v7[4] = a1;
    void v7[5] = a2;
    sub_100405384(v5, v7);
  }

  else
  {
    __int16 v6 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Audio device is not valid, not handling uni to bi transition",  buf,  2u);
    }
  }

uint64_t sub_10037B5D0(uint64_t a1)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 32);
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, (uint64_t)&v2[138]);
  uint64_t v3 = sub_10036C234((uint64_t)v2, *(unsigned __int16 *)(a1 + 48));
  __int16 v4 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int16 *)(a1 + 48);
    *(_DWORD *)std::string buf = 67109120;
    int v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Received system 'uni to bi' notification from HAL on a2dpHandle %d",  buf,  8u);
  }

  if (*(_DWORD *)(*(void *)(a1 + 40) + 728LL) == 5)
  {
    sub_10036E1F4(v2, *(unsigned __int16 *)(a1 + 48));
    uint64_t v6 = sub_1002E6E9C();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v6 + 944LL))(v6, 0LL, 1LL);
    char v10 = 0;
    sub_100242CA4(&v10);
    BOOL v7 = sub_1000DDB64(v3 + 128);
    *(_WORD *)std::string buf = sub_1003A400C(*(void *)(a1 + 40) + 400LL);
    sub_1000DCFE4((__int16 *)buf, 1u, 0LL);
    sub_100242CD0(&v10);
    if (!v7)
    {
      uint64_t v8 = sub_1002E6E9C();
      (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v8 + 296LL))(v8, v3, 0LL, 1LL);
    }

    sub_100242CD8(&v10);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
  {
    sub_10067432C();
  }

  return sub_100242FAC((uint64_t)v11);
}

void sub_10037B770( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
}

void sub_10037B7A4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10037B7AC(uint64_t a1, unsigned int a2, int a3)
{
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, a1 + 552);
  uint64_t v6 = sub_10036D544(a1, a2);
  uint64_t v7 = sub_10036C234(a1, a2);
  if (v6 && (unint64_t v8 = v7) != 0)
  {
    if (!*(_BYTE *)(v6 + 705))
    {
      *(_BYTE *)(v6 + 705) = 1;
      int v10 = sub_10036E710(v7, v7, a3);
      *(_WORD *)(v6 + 708) = v10;
      uint64_t v11 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = *(_DWORD *)(v6 + 728);
        *(_DWORD *)std::string buf = 67109376;
        int v22 = v10;
        __int16 v23 = 1024;
        int v24 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Dynamic Latency trying to set jitter buffer to %d Current Stream state %d",  buf,  0xEu);
      }

      sub_100242F54((uint64_t)v20);
      if (qword_1008D60E0 != -1) {
        dispatch_once(&qword_1008D60E0, &stru_100893DA8);
      }
      int v13 = sub_100215778((uint64_t)off_1008D60D8, v8, 11LL, *(unsigned __int16 *)(v6 + 708), 1u);
      sub_100242ECC((uint64_t)v20);
      if (v13)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
          sub_10067438C();
        }
      }

      else
      {
        if (*(_DWORD *)(v6 + 728) == 5)
        {
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_10037BAB4;
          block[3] = &unk_10087FF20;
          __int16 v19 = a2;
          block[4] = a1;
          block[5] = v6;
          dispatch_block_t v14 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, block);
          __int16 v15 = *(void **)(a1 + 496);
          *(void *)(a1 + 496) = v14;

          uint64_t v16 = sub_1004050C8();
          sub_100405460(v16, 2000LL, *(void **)(a1 + 496));
          return sub_100242FAC((uint64_t)v20);
        }

        sub_100376D78((os_unfair_lock_s *)a1, v6, v8);
      }

      *(_BYTE *)(v6 + 705) = 0;
      sub_10036C49C((os_unfair_lock_s *)a1, v6, 0);
      return sub_100242FAC((uint64_t)v20);
    }

    char v9 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Dynamic Latency change already in progress",  buf,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
  {
    sub_100674404();
  }

  sub_10036C49C((os_unfair_lock_s *)a1, v6, 0);
  return sub_100242FAC((uint64_t)v20);
}

void sub_10037BA8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10037BAB4(uint64_t a1)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 32);
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, (uint64_t)&v2[138]);
  uint64_t v3 = sub_10036D544((uint64_t)v2, *(unsigned __int16 *)(a1 + 48));
  uint64_t v4 = sub_10036C234((uint64_t)v2, *(unsigned __int16 *)(a1 + 48));
  unint64_t v5 = v4;
  if (v3) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && *(_DWORD *)(v3 + 728) == 5)
  {
    uint64_t v7 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Dynamic Latency did not receive Delay Report from accessory assuming audio modification is not needed",  v9,  2u);
    }

    *(_BYTE *)(v3 + 705) = 0;
    sub_100376D78(v2, v3, v5);
    sub_10036C49C(v2, *(void *)(a1 + 40), 0);
  }

  return sub_100242FAC((uint64_t)v10);
}

void sub_10037BBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10037BBBC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = sub_10036D544(a1, a2);
  uint64_t v7 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(_DWORD *)(v6 + 728);
    int v9 = *(unsigned __int8 *)(v6 + 705);
    int v10 = *(unsigned __int16 *)(v6 + 708);
    v12[0] = 67109888;
    v12[1] = v8;
    __int16 v13 = 1024;
    int v14 = v9;
    __int16 v15 = 1024;
    int v16 = v10;
    __int16 v17 = 1024;
    unsigned int v18 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Adaptive Latency speed modify stream:%d, inprogress:%d, curr:%d, delay:%d",  (uint8_t *)v12,  0x1Au);
  }

  if (*(_DWORD *)(v6 + 728) == 5 && !*(_BYTE *)(v6 + 705))
  {
    uint64_t v11 = sub_10036D544(a1, a2);
    if (v11)
    {
      *(_BYTE *)(v11 + 705) = 1;
      sub_100377158(a1, v11, a3);
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
    {
      sub_100674464();
    }
  }

uint64_t sub_10037BD00(uint64_t a1, unsigned int a2)
{
  uint64_t result = sub_10036D544(a1, a2);
  if (result) {
    return *(unsigned __int16 *)(result + 720);
  }
  return result;
}

double sub_10037BD1C(void *a1, uint64_t a2)
{
  unsigned int v3 = sub_10036CE14(a1, a2);
  return *(double *)(sub_10036D544((uint64_t)a1, v3) + 672);
}

void sub_10037BD4C(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4 = sub_10036D544(a1, a2);
  if (v4) {
    sub_10054F454(v4, a3);
  }
}

void sub_10037BD80(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4 = sub_10036D544(a1, a2);
  if (v4) {
    sub_10054F464(v4, a3);
  }
}

uint64_t sub_10037BDB4(uint64_t a1, int *a2, __int16 *a3, _WORD *a4)
{
  uint64_t v4 = sub_1000E3428(a2, xmmword_1006C24F8, &unk_1008D95D8, a3, a4);
  if ((_DWORD)v4 && os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
    sub_100674490();
  }
  return v4;
}

uint64_t sub_10037BE20(uint64_t a1, uint64_t a2, __int16 *a3, __int16 *a4)
{
  uint64_t v7 = sub_1000B17F4(0x1F4uLL);
  if (v7)
  {
    int v8 = v7;
    __src = v7;
    uint64_t v17 = 0x2000001F401F4LL;
    uint64_t v9 = sub_1000E4000((uint64_t)&__src);
    uint64_t v10 = v9;
    int64_t v11 = WORD2(v17);
    if (BYTE6(v17) == 2) {
      WORD1(v17) = WORD2(v17);
    }
    BYTE6(v17) = 15;
    if ((_DWORD)v9)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
        sub_100674540();
      }
    }

    else
    {
      if (!__src || !(_WORD)v17) {
        sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/a2dp/A2DPClient.cpp",  5188,  "((bs).__data != NULL) && ((bs).__trueSize > 0)");
      }
      BYTE6(v17) = 1;
      *(_DWORD *)((char *)&v17 + 2) = (unsigned __int16)v17;
      if (v11 < 0x100)
      {
        sub_10040F938(a2, 17);
        sub_10040F938(a2, v11);
      }

      else
      {
        sub_10040F938(a2, 145);
        sub_10040F974(a2, v11);
      }

      sub_10040F91C(a2, (char *)__src, v11);
      __int16 v15 = 0;
      char v14 = 0;
      __int16 v13 = 0;
      if (sub_100173ADC((unsigned __int16)*a3, &v13, &v15, &v14))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
          sub_100674514();
        }
      }

      else
      {
        sub_10040F938(a2, 1);
        sub_10040F938(a2, 7);
        sub_10040F974(a2, *a3);
        sub_10040F974(a2, v13);
        sub_10040F974(a2, v15);
        sub_10040F938(a2, v14);
      }

      uint64_t v10 = sub_100173ADC((unsigned __int16)*a4, &v13, &v15, &v14);
      if ((_DWORD)v10)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
          sub_1006744E8();
        }
      }

      else
      {
        sub_10040F938(a2, 19);
        sub_10040F938(a2, 7);
        sub_10040F974(a2, *a4);
        sub_10040F974(a2, v13);
        sub_10040F974(a2, v15);
        sub_10040F938(a2, v14);
      }
    }

    sub_1000B1838(v8);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_1006744BC();
    }
    return 106LL;
  }

  return v10;
}

uint64_t sub_10037C0F4(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5, _WORD *a6)
{
  unsigned __int16 v47 = a4;
  v46[0] = 0LL;
  v46[1] = 0LL;
  sub_100242F28((uint64_t)v46, a1 + 552);
  int v45 = 0LL;
  unsigned int v8 = sub_10056AAD8(a2 + 8) - *(_DWORD *)(a2 + 24);
  unsigned int v9 = v8 << 16;
  __int16 v10 = 103;
  while (2)
  {
    int v11 = (char)sub_10040F7B0(a2);
    if (v11 < 0)
    {
      unsigned int v12 = sub_10040F7FC(a2);
      int v13 = HIWORD(v9) - 3;
    }

    else
    {
      unsigned int v12 = sub_10040F7B0(a2);
      LOWORD(v13) = v8 - 2;
    }

    int v14 = v11 & 0x7F;
    switch(v14)
    {
      case 16:
        if (v12 != 2)
        {
          uint64_t v28 = qword_1008F7558;
          if (!os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
            goto LABEL_39;
          }
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v12;
          __int16 v26 = (os_log_s *)v28;
          __int16 v27 = "parseA2DPDescriptor Error FC_A2DP_AVDTP_VERSION size wrong %d";
          goto LABEL_38;
        }

        __int16 v10 = sub_10040F7FC(a2);
        goto LABEL_49;
      case 17:
        sub_10037C744(a1, a2, a3, &v47, a6, v10, &v45, v12);
        goto LABEL_49;
      case 18:
        int v15 = sub_10040F7FC(a2);
        int v16 = v45;
        if (v45)
        {
          int v17 = v15;
          uint64_t v18 = sub_1002E6BF0();
          else {
            int v19 = v17;
          }
          int v20 = (os_log_s *)qword_1008F7558;
          if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEBUG))
          {
            if (a3)
            {
              sub_1003CF00C((uint64_t)a3, buf);
              char v32 = buf;
              if (v49 < 0) {
                char v32 = *(uint8_t **)buf;
              }
              *(_DWORD *)uint64_t v50 = 136446466;
              BOOL v51 = (const char *)v32;
              __int16 v52 = 1024;
              int v53 = v19;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "Fast Connect: Received delay report stream request from device %{public}s, delay in 1/10th of milliseconds %d",  v50,  0x12u);
              if (v49 < 0) {
                operator delete(*(void **)buf);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v50 = 136446466;
              BOOL v51 = "null";
              __int16 v52 = 1024;
              int v53 = v19;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "Fast Connect: Received delay report stream request from device %{public}s, delay in 1/10th of milliseconds %d",  v50,  0x12u);
            }
          }

          sub_1003A7004((uint64_t)(v16 + 50), 100 * v19);
        }

        goto LABEL_49;
      case 19:
        if (v12 < 7)
        {
          uint64_t v30 = qword_1008F7558;
          if (!os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
            goto LABEL_39;
          }
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v12;
          __int16 v26 = (os_log_s *)v30;
          __int16 v27 = "parseA2DPDescriptor Error FC_A2DP_L2CAP_MEDIA size wrong %d";
          goto LABEL_38;
        }

        __int16 v21 = sub_10040F7FC(a2);
        sub_10040F7FC(a2);
        __int16 v22 = sub_10040F7FC(a2);
        sub_10040F7B0(a2);
        *(void *)std::string buf = 0LL;
        v50[0] = 0;
        sub_100242CA4(v50);
        if (sub_100171EC4(a5, (uint64_t *)buf) || !sub_10017AB4C(*(unsigned int **)buf))
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
            sub_10067456C(&v41, v42);
          }
        }

        else
        {
          *(_WORD *)(sub_10017AB4C(*(unsigned int **)buf) + 8) = v21;
          *(_WORD *)(sub_10017AB4C(*(unsigned int **)buf) + 32) = v22;
        }

        sub_100242CD0(v50);
        if (v12 < 8) {
          goto LABEL_48;
        }
        goto LABEL_47;
      default:
        if (v14 != 1)
        {
          if (v14 == 3)
          {
            if (v12 == 2)
            {
              sub_10040F7FC(a2);
              goto LABEL_49;
            }

            uint64_t v29 = qword_1008F7558;
            if (!os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
              goto LABEL_39;
            }
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v12;
            __int16 v26 = (os_log_s *)v29;
            __int16 v27 = "parseA2DPDescriptor Error FC_COMMON_VERSION size wrong %d";
            goto LABEL_38;
          }

          uint64_t v25 = qword_1008F7558;
          if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v14;
            __int16 v26 = (os_log_s *)v25;
            __int16 v27 = "parseA2DPDescriptor Key not recognized %d";
LABEL_38:
            _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, v27, buf, 8u);
            goto LABEL_39;
          }

          goto LABEL_39;
        }

        if (v12 < 7)
        {
          uint64_t v31 = qword_1008F7558;
          if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v12;
            __int16 v26 = (os_log_s *)v31;
            __int16 v27 = "parseA2DPDescriptor Error FC_COMMON_L2CAP_CONFIG size wrong %d";
            goto LABEL_38;
          }

void sub_10037C6E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

uint64_t sub_10037C744( uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4, _WORD *a5, __int16 a6, uint64_t **a7, __int16 a8)
{
  unsigned int v15 = sub_10040F7B0(a2);
  if (!v15)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100674598();
    }
    return 129LL;
  }

  unsigned int v16 = v15;
  int v17 = sub_1000B17F4(4LL * v15);
  if (!v17)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_1006745C4();
    }
    return 129LL;
  }

  uint64_t v18 = v17;
  __int16 v70 = a8;
  *a5 = 0;
  char v78 = 0;
  sub_100242CA4(&v78);
  if (sub_1000D8A50(*a4, a5))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_10067467C();
    }
    uint64_t v19 = 129LL;
  }

  else
  {
    uint64_t v20 = *(void *)(a1 + 512);
    if (v20)
    {
      unsigned int v21 = (unsigned __int16)*a5;
      uint64_t v22 = a1 + 512;
      do
      {
        unsigned int v23 = *(unsigned __int16 *)(v20 + 32);
        BOOL v24 = v23 >= v21;
        if (v23 >= v21) {
          uint64_t v25 = (uint64_t *)v20;
        }
        else {
          uint64_t v25 = (uint64_t *)(v20 + 8);
        }
        if (v24) {
          uint64_t v22 = v20;
        }
        uint64_t v20 = *v25;
      }

      while (*v25);
      if (v22 != a1 + 512 && v21 >= *(unsigned __int16 *)(v22 + 32))
      {
        __int16 v26 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_FAULT)) {
          sub_100673170(v26, v27, v28, v29, v30, v31, v32, v33);
        }
      }
    }

    std::string __p = a5;
    sub_1002550B8((uint64_t **)(a1 + 504), a5, (uint64_t)&unk_1006C2518, (_WORD **)&__p)[5] = a3;
    int v34 = (uint64_t *)operator new(0x318uLL);
    sub_10054EBA8(v34, (unsigned __int16)*a5, a3, a1 + 256);
    *a7 = v34;
    int v35 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)a3, &__p);
      __int16 v36 = v77 >= 0 ? &__p : (void **)__p;
      int v37 = (unsigned __int16)*a5;
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = v36;
      __int16 v80 = 1024;
      int v81 = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "parseA2DPEndpoints Creating A2DPAudioDevice for device %{public}s with handle %d",  buf,  0x12u);
      if (v77 < 0) {
        operator delete(__p);
      }
    }

    uint64_t v38 = *(void *)(a1 + 536);
    if (v38)
    {
      unsigned int v39 = (unsigned __int16)*a5;
      uint64_t v40 = a1 + 536;
      do
      {
        unsigned int v41 = *(unsigned __int16 *)(v38 + 32);
        BOOL v42 = v41 >= v39;
        if (v41 >= v39) {
          char v43 = (uint64_t *)v38;
        }
        else {
          char v43 = (uint64_t *)(v38 + 8);
        }
        if (v42) {
          uint64_t v40 = v38;
        }
        uint64_t v38 = *v43;
      }

      while (*v43);
      if (v40 != a1 + 536 && v39 >= *(unsigned __int16 *)(v40 + 32))
      {
        unsigned __int8 v44 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_FAULT)) {
          sub_100673100(v44, v45, v46, v47, v48, v49, v50, v51);
        }
      }
    }

    __int16 v52 = *a7;
    std::string __p = a5;
    sub_1002550B8((uint64_t **)(a1 + 528), a5, (uint64_t)&unk_1006C2518, (_WORD **)&__p)[5] = v52;
    uint64_t v53 = sub_100242CD0(&v78);
    sub_10037275C(v53, (uint64_t)a3);
    sub_100242C98(&v78);
    uint64_t v54 = (uint64_t)(*a7 + 50);
    *((_DWORD *)*a7 + 182) = 1;
    sub_1003A438C(v54, a6);
    sub_100242CD0(&v78);
    uint64_t v55 = 0LL;
    LOWORD(v56) = v70 - 1;
    if (v16 <= 1) {
      uint64_t v57 = 1LL;
    }
    else {
      uint64_t v57 = v16;
    }
    do
    {
      unsigned int v58 = sub_10040F7B0(a2);
      unsigned __int16 v59 = &v18[v55];
      v59[2] = v58 >> 2;
      v59[3] = (v58 & 2) != 0;
      char v60 = sub_10040F7B0(a2);
      _BYTE *v59 = v60 & 0xF0;
      v59[1] = (v60 & 8) != 0;
      LOWORD(v56) = v56 - 2;
      v55 += 4LL;
    }

    while (4LL * v57 != v55);
    sub_1003A62A8((uint64_t)(*a7 + 50), (uint64_t)v18, v16);
    uint64_t v61 = 0LL;
    id v69 = "pBuf";
    do
    {
      unsigned int v62 = sub_10040F7B0(a2);
      unsigned int v63 = v62;
      size_t v64 = v62;
      if (v18[v61 + 3])
      {
        __int16 v65 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "parseA2DPEndpoints skipping Endpoint since in use",  (uint8_t *)&__p,  2u);
        }

        sub_10040F8BC(a2, v64);
      }

      else
      {
        int v66 = malloc(v62);
        sub_10040F778(a2, v66, v64);
        std::string __p = 0LL;
        uint64_t v76 = 0LL;
        *(void *)std::string buf = 0LL;
        unsigned __int8 v74 = 0;
        if (!v66) {
          goto LABEL_70;
        }
        if (!v63)
        {
          id v69 = "(endpointSize) > 0";
LABEL_70:
          sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/a2dp/A2DPClient.cpp",  5501,  v69);
        }

        std::string __p = v66;
        LOWORD(v76) = v63;
        HIDWORD(v76) = 0x10000;
        WORD1(v76) = v63;
        sub_100242C98(&v78);
        int v67 = sub_1000DDDFC((uint64_t *)&__p, (void **)buf, &v74);
        sub_100242CD0(&v78);
        if (v67 || !v74)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
            sub_100674650(&v72, v73);
          }
        }

        else
        {
          sub_1003A494C((uint64_t)(*a7 + 50), v74, *(uint64_t *)buf, v18[v61 + 2]);
          sub_100242C98(&v78);
          sub_1000D88A0((void **)buf, v74);
          sub_100242CD0(&v78);
        }

        free(v66);
      }

      int v56 = (__int16)(v56 + ~(_WORD)v63);
      v61 += 4LL;
    }

    while (4 * v57 != v61);
    sub_1000B1838(v18);
    if (v56 >= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
        sub_1006745F0();
      }
      sub_10040F8BC(a2, (unsigned __int16)v56);
    }

    uint64_t v19 = 0LL;
  }

  sub_100242CD8(&v78);
  return v19;
}

void sub_10037CCFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_10037CD44( uint64_t a1, unsigned int a2, _BYTE *a3, _BYTE *a4, unsigned __int16 *a5, unsigned int a6)
{
  v33[0] = 0LL;
  v33[1] = 0LL;
  sub_100242F28((uint64_t)v33, a1 + 552);
  uint64_t v12 = sub_10036D544(a1, a2);
  uint64_t v13 = v12 + 400;
  int v14 = *(_DWORD *)(v12 + 728);
  unsigned __int8 v15 = sub_1003A576C(v12 + 400);
  uint64_t v16 = sub_1003A8A04(a1 + 280, v15);
  uint64_t v17 = sub_1003A65A0(v12 + 400, v16);
  uint64_t v18 = sub_10036C234(a1, a2);
  *a5 = 0;
  if (v14 < 2)
  {
    if (v17)
    {
      unsigned int v31 = a6;
      int v20 = *(_DWORD *)(v12 + 556);
      int v21 = *(_DWORD *)(v12 + 552);
      uint64_t v22 = sub_1003A41D0(v13);
      uint64_t v30 = *(void *)(v22 + 32);
      char v23 = sub_1003A4278(v13);
      int v24 = *(unsigned __int8 *)(v12 + 592);
      *a3 = v21;
      *a4 = v20;
      int v25 = *(_DWORD *)(v22 + 44);
      LOBYTE(v32[0]) = 0;
      sub_100242CA4(v32);
      char v26 = v23 ^ 1;
      if (!v24) {
        char v26 = 0;
      }
      int v27 = sub_1000E42FC(a2, v20, v21, v30, (v25 - v26), a5, v31);
      sub_100242CD0(v32);
      if (v27)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
          sub_10067478C();
        }
      }

      else
      {
        sub_1003A405C(v13, *a5);
      }

      sub_100242CD8(v32);
    }

    else
    {
      uint64_t v28 = v18;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(v28, v32);
        sub_100674740();
      }
    }

    uint64_t v19 = 0LL;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_1006746E0();
    }
    uint64_t v19 = 1LL;
  }

  sub_100242FAC((uint64_t)v33);
  return v19;
}

void sub_10037CF7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10037CFC0()
{
}

uint64_t sub_10037CFC8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    if (v10 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Fast Connect A2DP Report Connection attempt for %{public}s",  buf,  0xCu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  return sub_100410910(a1, a2, a3);
}

uint64_t sub_10037D0C0(os_unfair_lock_s *a1, unsigned __int8 *a2, unsigned int a3, int a4, uint64_t a5)
{
  char v10 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    LODWORD(v28) = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Fast Connect A2DP Setup Complete result %d",  buf,  8u);
  }

  v26[0] = 0LL;
  v26[1] = 0LL;
  sub_100242F28((uint64_t)v26, (uint64_t)&a1[138]);
  uint64_t v11 = sub_10036D544((uint64_t)a1, a3);
  if ((_DWORD)a5)
  {
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_100893E08);
    }
    int v12 = sub_1004317E0((uint64_t)off_1008D60A8, a5, 20000);
    sub_100410A5C((uint64_t)a1, (uint64_t)a2, v12);
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v14 = v11;
    sub_100410A5C((uint64_t)a1, (uint64_t)a2, 0);
    if (v14)
    {
      *(_DWORD *)(v14 + 728) = 3;
      if (sub_1003D2B2C((uint64_t)a2, 13)
        && (uint64_t v15 = sub_1002E6BF0(), (*(unsigned int (**)(uint64_t, void))(*(void *)v15 + 792LL))(v15, 0LL))
        && sub_1003A46D4(v14 + 400) == 33023)
      {
        char v16 = 1;
        *(_BYTE *)(v14 + 704) = 1;
        *(_BYTE *)(v14 + 706) = 0;
      }

      else
      {
        char v16 = 0;
      }

      uint64_t v17 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_BYTE *)(v14 + 704)) {
          uint64_t v18 = "supported";
        }
        else {
          uint64_t v18 = "not supported";
        }
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v28 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Dynamic latency is %s", buf, 0xCu);
      }

      if (*(_BYTE *)(v14 + 704))
      {
        int v19 = sub_1003A6D9C(v14 + 400);
        sub_10054F434(v14, v19);
        int v20 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
        {
          int v21 = sub_1003A6D9C(v14 + 400);
          *(_DWORD *)std::string buf = 67109120;
          LODWORD(v28) = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Dynamic latency : Current JBL level %d MicroSec",  buf,  8u);
        }
      }

      if ((v16 & 1) != 0
        || (uint64_t v22 = sub_1002E6E00(), ((*(uint64_t (**)(uint64_t))(*(void *)v22 + 528LL))(v22) & 1) == 0))
      {
        *(_BYTE *)(v14 + 712) = 1;
      }

      sub_1003747BC(a1, (uint64_t)a2);
      sub_10036F80C((uint64_t)a1, 0LL, a3, a4, a2);
      uint64_t v13 = 0LL;
    }

    else
    {
      char v23 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
      {
        if (a2)
        {
          sub_1003CF00C((uint64_t)a2, buf);
          sub_10067482C();
        }

        else
        {
          sub_1006747EC((uint64_t)v29, v23, v24);
        }
      }

      sub_10036CFB0(a1, a3);
      uint64_t v13 = 7LL;
    }
  }

  sub_100242FAC((uint64_t)v26);
  return v13;
}

void sub_10037D3F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10037D41C(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned __int16 v25 = a5;
  v24[0] = 0LL;
  v24[1] = 0LL;
  sub_100242F28((uint64_t)v24, a1 + 552);
  if (a5)
  {
    sub_10036E1F4((os_unfair_lock_s *)a1, a5);
    uint64_t v12 = *(void *)(a1 + 512);
    if (v12)
    {
      uint64_t v13 = a1 + 512;
      do
      {
        unsigned int v14 = *(unsigned __int16 *)(v12 + 32);
        BOOL v15 = v14 >= a5;
        if (v14 >= a5) {
          char v16 = (uint64_t *)v12;
        }
        else {
          char v16 = (uint64_t *)(v12 + 8);
        }
        if (v15) {
          uint64_t v13 = v12;
        }
        uint64_t v12 = *v16;
      }

      while (*v16);
    }

    uint64_t v17 = *(void *)(a1 + 536);
    if (!v17) {
      goto LABEL_32;
    }
    uint64_t v18 = a1 + 536;
    do
    {
      unsigned int v19 = *(unsigned __int16 *)(v17 + 32);
      BOOL v20 = v19 >= v25;
      if (v19 >= v25) {
        int v21 = (uint64_t *)v17;
      }
      else {
        int v21 = (uint64_t *)(v17 + 8);
      }
      if (v20) {
        uint64_t v18 = v17;
      }
      uint64_t v17 = *v21;
    }

    while (*v21);
    if (v18 != a1 + 536 && v25 >= *(unsigned __int16 *)(v18 + 32))
    {
      uint64_t v23 = *sub_10036D800(a1 + 528, &v25);
      if (v23)
      {
        sub_100329E44(a1 + 528, &v25);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472LL;
        void v26[2] = sub_10036CA38;
        v26[3] = &unk_100893730;
        v26[4] = a2;
        unsigned __int16 v27 = v25;
        char v28 = 0;
        sub_10036C2E4((os_unfair_lock_s *)(a1 + 432), v26);
        sub_10026F644(v23);
      }
    }

    else
    {
LABEL_32:
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
        sub_100674878();
      }
    }
  }

  LOBYTE(v26[0]) = 0;
  sub_100242CA4(v26);
  sub_1000E3DE8(a2 + 128, a3, a4, a6);
  sub_100242CD8(v26);
  return sub_100242FAC((uint64_t)v24);
}

void sub_10037D5F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10037D620(uint64_t a1, const std::string *a2)
{
  *(_OWORD *)std::string __p = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  *(_OWORD *)char v10 = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)unsigned int v8 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_10037FDD8((uint64_t)v6);
  std::string::operator=((std::string *)&__p[1], a2);
  unsigned int v3 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    if (v12 >= 0) {
      uint64_t v4 = &__p[1];
    }
    else {
      uint64_t v4 = (void **)__p[1];
    }
    *(_DWORD *)std::string buf = 136315138;
    unsigned int v14 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter submitting following error metric: fErrorCode %s",  buf,  0xCu);
  }

  uint64_t v5 = sub_1002E8D94();
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v5 + 168LL))(v5, v6);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v10[0]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[1]);
  }
  if (SHIBYTE(v8[0]) < 0) {
    operator delete(v7[0]);
  }
}

void sub_10037D75C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10037D778(uint64_t a1)
{
  return a1;
}

void sub_10037D7D8(unsigned __int8 *a1, __int16 a2)
{
  unint64_t v3 = ((unint64_t)*a1 << 40) | ((unint64_t)a1[1] << 32) | ((unint64_t)a1[2] << 24) | ((unint64_t)a1[3] << 16) | ((unint64_t)a1[4] << 8) | a1[5];
  uint64_t v4 = sub_1004050C8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10037E504;
  v5[3] = &unk_1008878D8;
  v5[4] = v3;
  __int16 v6 = a2;
  sub_100405384(v4, v5);
}

void sub_10037D86C(unsigned __int8 *a1, __int16 a2, int a3)
{
  unint64_t v5 = ((unint64_t)*a1 << 40) | ((unint64_t)a1[1] << 32) | ((unint64_t)a1[2] << 24) | ((unint64_t)a1[3] << 16) | ((unint64_t)a1[4] << 8) | a1[5];
  uint64_t v6 = sub_1004050C8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_10037E59C;
  v7[3] = &unk_100893818;
  v7[4] = v5;
  __int16 v9 = a2;
  int v8 = a3;
  sub_100405384(v6, v7);
}

void sub_10037D910(unsigned __int8 *a1, __int16 a2, int a3)
{
  unint64_t v5 = ((unint64_t)*a1 << 40) | ((unint64_t)a1[1] << 32) | ((unint64_t)a1[2] << 24) | ((unint64_t)a1[3] << 16) | ((unint64_t)a1[4] << 8) | a1[5];
  uint64_t v6 = sub_1004050C8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_10037E5F4;
  v7[3] = &unk_100893818;
  v7[4] = v5;
  __int16 v9 = a2;
  int v8 = a3;
  sub_100405384(v6, v7);
}

BOOL sub_10037D9B4(char a1, __int16 a2, const void *a3, unsigned int a4, char a5)
{
  uint64_t v10 = sub_1004050C8();
  uint64_t v11 = operator new(0x20uLL);
  sub_10037E64C((uint64_t)v11, a1, a2, a3, a4, a5);
  return sub_100405744(v10, v11);
}

void sub_10037DA2C(_Unwind_Exception *a1)
{
}

BOOL sub_10037DA40(char a1, __int16 a2, char a3, unsigned __int8 *a4, unsigned int a5, char a6)
{
  uint64_t v12 = sub_1004050C8();
  uint64_t v13 = operator new(0x20uLL);
  sub_10037E7A8((uint64_t)v13, a1, a2, a3, a4, a5, a6);
  return sub_100405744(v12, v13);
}

void sub_10037DAC0(_Unwind_Exception *a1)
{
}

BOOL sub_10037DAD4(char a1, __int16 a2, char a3, char a4, __int16 a5, unsigned __int8 *a6, unsigned int a7)
{
  uint64_t v14 = sub_1004050C8();
  BOOL v15 = operator new(0x28uLL);
  sub_10037E9A4((uint64_t)v15, a1, a2, a3, a4, a5, a6, a7);
  return sub_100405744(v14, v15);
}

void sub_10037DB64(_Unwind_Exception *a1)
{
}

BOOL sub_10037DB78(char a1, __int16 a2, char a3, char a4)
{
  uint64_t v8 = sub_1004050C8();
  __int16 v9 = operator new(0x10uLL);
  void v9[4] = 1;
  *(void *)__int16 v9 = &off_100893910;
  *((_BYTE *)v9 + 10) = a1;
  v9[6] = a2;
  *((_BYTE *)v9 + 14) = a3;
  *((_BYTE *)v9 + 15) = a4;
  return sub_100405744(v8, v9);
}

BOOL sub_10037DBEC(char a1, __int16 a2, unsigned __int8 *a3, unsigned int a4, char a5)
{
  uint64_t v10 = sub_1004050C8();
  uint64_t v11 = operator new(0x20uLL);
  sub_10037EC0C((uint64_t)v11, a1, a2, a3, a4, a5);
  return sub_100405744(v10, v11);
}

void sub_10037DC64(_Unwind_Exception *a1)
{
}

BOOL sub_10037DC78(char a1, __int16 a2, __int16 a3, char a4)
{
  uint64_t v8 = sub_1004050C8();
  __int16 v9 = operator new(0x18uLL);
  void v9[4] = 1;
  *(void *)__int16 v9 = &off_100893980;
  *((_BYTE *)v9 + 10) = a1;
  v9[6] = a2;
  v9[7] = a3;
  *((_BYTE *)v9 + 16) = a4;
  return sub_100405744(v8, v9);
}

BOOL sub_10037DCEC(char a1, __int16 a2)
{
  uint64_t v4 = sub_1004050C8();
  unint64_t v5 = operator new(0x10uLL);
  v5[4] = 1;
  *(void *)unint64_t v5 = &off_1008939B8;
  *((_BYTE *)v5 + 10) = a1;
  v5[6] = a2;
  return sub_100405744(v4, v5);
}

BOOL sub_10037DD48(char a1, __int16 a2)
{
  uint64_t v4 = sub_1004050C8();
  unint64_t v5 = operator new(0x10uLL);
  v5[4] = 1;
  *(void *)unint64_t v5 = &off_1008939F0;
  *((_BYTE *)v5 + 10) = a1;
  v5[6] = a2;
  return sub_100405744(v4, v5);
}

BOOL sub_10037DDA4(char a1, __int16 a2, char a3)
{
  uint64_t v6 = sub_1004050C8();
  uint64_t v7 = operator new(0x10uLL);
  v7[4] = 1;
  *(void *)uint64_t v7 = &off_100893A28;
  *((_BYTE *)v7 + 10) = a1;
  void v7[6] = a2;
  *((_BYTE *)v7 + 14) = a3;
  return sub_100405744(v6, v7);
}

BOOL sub_10037DE08(char a1, const void *a2, unsigned int a3)
{
  uint64_t v6 = sub_1004050C8();
  uint64_t v7 = operator new(0x20uLL);
  sub_10037EF6C((uint64_t)v7, a1, a2, a3);
  return sub_100405744(v6, v7);
}

void sub_10037DE68(_Unwind_Exception *a1)
{
}

BOOL sub_10037DE7C(char a1, const void *a2, unsigned int a3, __int16 a4, char a5)
{
  uint64_t v10 = sub_1004050C8();
  uint64_t v11 = operator new(0x20uLL);
  sub_10037F0A4((uint64_t)v11, a1, a2, a3, a4, a5);
  return sub_100405744(v10, v11);
}

void sub_10037DEF4(_Unwind_Exception *a1)
{
}

BOOL sub_10037DF08(char a1, const void *a2, unsigned int a3)
{
  uint64_t v6 = sub_1004050C8();
  uint64_t v7 = operator new(0x20uLL);
  sub_10037F1EC((uint64_t)v7, a1, a2, a3);
  return sub_100405744(v6, v7);
}

void sub_10037DF68(_Unwind_Exception *a1)
{
}

BOOL sub_10037DF7C(char a1, const void *a2, unsigned int a3, __int16 a4, char a5)
{
  uint64_t v10 = sub_1004050C8();
  uint64_t v11 = operator new(0x20uLL);
  sub_10037F324((uint64_t)v11, a1, a2, a3, a4, a5);
  return sub_100405744(v10, v11);
}

void sub_10037DFF4(_Unwind_Exception *a1)
{
}

BOOL sub_10037E008(char a1, const void *a2, unsigned int a3, __int16 a4, char a5)
{
  uint64_t v10 = sub_1004050C8();
  uint64_t v11 = operator new(0x20uLL);
  sub_10037F46C((uint64_t)v11, a1, a2, a3, a4, a5);
  return sub_100405744(v10, v11);
}

void sub_10037E080(_Unwind_Exception *a1)
{
}

BOOL sub_10037E094(char a1, __int16 a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v8 = sub_1004050C8();
  __int16 v9 = operator new(0x20uLL);
  sub_10037F5B4((uint64_t)v9, a1, a2, a3, a4);
  return sub_100405744(v8, v9);
}

void sub_10037E0FC(_Unwind_Exception *a1)
{
}

BOOL sub_10037E110(char a1, __int16 a2, char a3, char a4)
{
  uint64_t v8 = sub_1004050C8();
  __int16 v9 = operator new(0x10uLL);
  void v9[4] = 1;
  *(void *)__int16 v9 = &off_100893BB0;
  *((_BYTE *)v9 + 10) = a1;
  v9[6] = a2;
  *((_BYTE *)v9 + 14) = a3;
  *((_BYTE *)v9 + 15) = a4;
  return sub_100405744(v8, v9);
}

BOOL sub_10037E184(char a1, __int16 a2, const void *a3, unsigned int a4)
{
  uint64_t v8 = sub_1004050C8();
  __int16 v9 = operator new(0x20uLL);
  void v9[4] = 1;
  *(void *)__int16 v9 = &off_100893BE8;
  *((_BYTE *)v9 + 10) = a1;
  v9[6] = a2;
  *((void *)v9 + 2) = 0LL;
  v9[12] = a4;
  if (a3 && a4)
  {
    uint64_t v10 = malloc(a4);
    *((void *)v9 + 2) = v10;
    memcpy(v10, a3, a4);
  }

  return sub_100405744(v8, v9);
}

BOOL sub_10037E220(char a1, __int16 a2, const void *a3, unsigned int a4, char a5)
{
  uint64_t v10 = sub_1004050C8();
  uint64_t v11 = operator new(0x20uLL);
  v11[4] = 1;
  *(void *)uint64_t v11 = &off_100893C20;
  *((_BYTE *)v11 + 10) = a1;
  v11[6] = a2;
  *((void *)v11 + 2) = 0LL;
  v11[12] = a4;
  *((_BYTE *)v11 + 26) = a5;
  if (a3 && a4)
  {
    uint64_t v12 = malloc(a4);
    *((void *)v11 + 2) = v12;
    memcpy(v12, a3, a4);
  }

  return sub_100405744(v10, v11);
}

BOOL sub_10037E2CC(char a1, __int16 a2)
{
  uint64_t v4 = sub_1004050C8();
  unint64_t v5 = operator new(0x10uLL);
  v5[4] = 1;
  *(void *)unint64_t v5 = &off_100893C58;
  *((_BYTE *)v5 + 10) = a1;
  v5[6] = a2;
  return sub_100405744(v4, v5);
}

BOOL sub_10037E328(char a1, __int16 a2, char a3)
{
  uint64_t v6 = sub_1004050C8();
  uint64_t v7 = operator new(0x10uLL);
  v7[4] = 1;
  *(void *)uint64_t v7 = &off_100893C90;
  *((_BYTE *)v7 + 10) = a1;
  void v7[6] = a2;
  *((_BYTE *)v7 + 14) = a3;
  return sub_100405744(v6, v7);
}

uint64_t sub_10037E390(unsigned int a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  return kdebug_trace(730021968LL, a1, a3, a4, 0LL);
}

BOOL sub_10037E3AC(char a1, __int16 a2, char a3, unsigned __int8 *a4, unsigned int a5, char a6)
{
  uint64_t v12 = sub_1004050C8();
  uint64_t v13 = operator new(0x20uLL);
  sub_10037FA54((uint64_t)v13, a1, a2, a3, a4, a5, a6);
  return sub_100405744(v12, v13);
}

void sub_10037E42C(_Unwind_Exception *a1)
{
}

BOOL sub_10037E440(__int16 a1, char a2, __int16 a3)
{
  uint64_t v6 = sub_1004050C8();
  uint64_t v7 = operator new(0x10uLL);
  v7[4] = 1;
  *(void *)uint64_t v7 = &off_100893D00;
  *((_BYTE *)v7 + 10) = a2;
  void v7[6] = a1;
  v7[7] = a3;
  return sub_100405744(v6, v7);
}

void sub_10037E4A4(__int16 a1)
{
  uint64_t v2 = sub_1004050C8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10037FCB0;
  v3[3] = &unk_100893D28;
  __int16 v4 = a1;
  sub_100405384(v2, v3);
}

uint64_t sub_10037E504(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_10037174C(qword_1008D6450, *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

void sub_10037E558(id a1)
{
  v1 = operator new(0x310uLL);
  sub_10036B9FC((uint64_t)v1);
  qword_1008D6450 = (uint64_t)v1;
}

void sub_10037E588(_Unwind_Exception *a1)
{
}

uint64_t sub_10037E59C(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_100371AD0(qword_1008D6450, *(void *)(a1 + 32), *(_WORD *)(a1 + 44), *(unsigned int *)(a1 + 40));
}

uint64_t sub_10037E5F4(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_1003729F0(qword_1008D6450, *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 44), *(_DWORD *)(a1 + 40));
}

uint64_t sub_10037E64C(uint64_t a1, char a2, __int16 a3, const void *a4, unsigned int a5, char a6)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = &off_100893868;
  *(_BYTE *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 25) = a6;
  if (a4)
  {
    uint64_t v10 = malloc(4LL * a5);
    *(void *)(a1 + 16) = v10;
    memcpy(v10, a4, 4LL * a5);
  }

  *(_BYTE *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 25) = a6;
  return a1;
}

void *sub_10037E6D8(void *a1)
{
  *a1 = &off_100893868;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    free(v2);
  }
  return a1;
}

void sub_10037E710(void *__p)
{
  void *__p = &off_100893868;
  uint64_t v2 = (void *)__p[2];
  if (v2) {
    free(v2);
  }
  operator delete(__p);
}

uint64_t sub_10037E748(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_100372D64( (os_unfair_lock_s *)qword_1008D6450,  0LL,  *(unsigned __int16 *)(a1 + 12),  *(void *)(a1 + 16),  *(unsigned __int8 *)(a1 + 24),  *(unsigned __int8 *)(a1 + 25));
}

uint64_t sub_10037E7A8( uint64_t a1, char a2, __int16 a3, char a4, unsigned __int8 *a5, unsigned int a6, char a7)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1008938A0;
  *(_BYTE *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(_BYTE *)(a1 + 14) = a4;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = a6;
  *(_BYTE *)(a1 + 25) = a7;
  if (a5)
  {
    size_t v10 = 16LL * a6;
    uint64_t v11 = malloc(v10);
    *(void *)(a1 + 16) = v11;
    memcpy(v11, a5, v10);
    if (a6)
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = 16LL * a6;
      do
      {
        int v14 = a5[v12];
        if (v14 == 7 || v14 == 4)
        {
          char v16 = (const void **)&a5[v12];
          if (*(void *)&a5[v12 + 8])
          {
            if (*((_BYTE *)v16 + 3))
            {
              *(void *)(*(void *)(a1 + 16) + v12 + 8) = malloc(*((unsigned __int8 *)v16 + 3));
              memcpy(*(void **)(*(void *)(a1 + 16) + v12 + 8), v16[1], *((unsigned __int8 *)v16 + 3));
            }
          }
        }

        v12 += 16LL;
      }

      while (v13 != v12);
    }
  }

  return a1;
}

void sub_10037E898(uint64_t a1)
{
  v1 = (void *)sub_10037E910(a1);
  operator delete(v1);
}

uint64_t sub_10037E8AC(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_1003731CC( (os_unfair_lock_s *)qword_1008D6450,  0LL,  *(unsigned __int16 *)(a1 + 12),  *(unsigned __int8 *)(a1 + 14),  *(void *)(a1 + 16),  *(unsigned __int8 *)(a1 + 24),  *(unsigned __int8 *)(a1 + 25));
}

uint64_t sub_10037E910(uint64_t a1)
{
  *(void *)a1 = off_1008938A0;
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
    if (*(_BYTE *)(a1 + 24))
    {
      uint64_t v4 = 0LL;
      unint64_t v5 = 0LL;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(unsigned __int8 *)(v6 + v4);
        if (v7 == 7 || v7 == 4)
        {
          uint64_t v9 = v6 + v4;
          size_t v10 = *(void **)(v9 + 8);
          if (v10)
          {
            if (*(_BYTE *)(v9 + 3))
            {
              free(v10);
              unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
            }
          }
        }

        ++v5;
        v4 += 16LL;
      }

      while (v5 < v3);
      uint64_t v2 = *(void **)(a1 + 16);
    }

    free(v2);
  }

  return a1;
}

uint64_t sub_10037E9A4( uint64_t a1, char a2, __int16 a3, char a4, char a5, __int16 a6, unsigned __int8 *a7, unsigned int a8)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1008938D8;
  *(_BYTE *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(_BYTE *)(a1 + 14) = a4;
  *(_BYTE *)(a1 + 15) = a5;
  *(_WORD *)(a1 + 16) = a6;
  *(void *)(a1 + 24) = 0LL;
  *(_BYTE *)(a1 + 32) = a8;
  if (a7)
  {
    size_t v11 = 16LL * a8;
    uint64_t v12 = malloc(v11);
    *(void *)(a1 + 24) = v12;
    memcpy(v12, a7, v11);
    if (a8)
    {
      uint64_t v13 = 0LL;
      uint64_t v14 = 16LL * a8;
      do
      {
        int v15 = a7[v13];
        if (v15 == 7 || v15 == 4)
        {
          uint64_t v17 = (const void **)&a7[v13];
          if (*(void *)&a7[v13 + 8])
          {
            if (*((_BYTE *)v17 + 3))
            {
              *(void *)(*(void *)(a1 + 24) + v13 + 8) = malloc(*((unsigned __int8 *)v17 + 3));
              memcpy(*(void **)(*(void *)(a1 + 24) + v13 + 8), v17[1], *((unsigned __int8 *)v17 + 3));
            }
          }
        }

        v13 += 16LL;
      }

      while (v14 != v13);
    }
  }

  return a1;
}

void sub_10037EA98(uint64_t a1)
{
  v1 = (void *)sub_10037EB14(a1);
  operator delete(v1);
}

uint64_t sub_10037EAAC(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_100373834( qword_1008D6450,  *(unsigned __int8 *)(a1 + 10),  *(unsigned __int16 *)(a1 + 12),  *(unsigned __int8 *)(a1 + 14),  *(unsigned __int8 *)(a1 + 15),  *(unsigned __int16 *)(a1 + 16),  *(void *)(a1 + 24),  *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_10037EB14(uint64_t a1)
{
  *(void *)a1 = off_1008938D8;
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
    if (*(_BYTE *)(a1 + 32))
    {
      uint64_t v4 = 0LL;
      unint64_t v5 = 0LL;
      do
      {
        uint64_t v6 = *(void *)(a1 + 24);
        int v7 = *(unsigned __int8 *)(v6 + v4);
        if (v7 == 7 || v7 == 4)
        {
          uint64_t v9 = v6 + v4;
          size_t v10 = *(void **)(v9 + 8);
          if (v10)
          {
            if (*(_BYTE *)(v9 + 3))
            {
              free(v10);
              unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
            }
          }
        }

        ++v5;
        v4 += 16LL;
      }

      while (v5 < v3);
      uint64_t v2 = *(void **)(a1 + 24);
    }

    free(v2);
  }

  return a1;
}

uint64_t sub_10037EBB0(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_100373BA8( (os_unfair_lock_s *)qword_1008D6450,  0LL,  *(unsigned __int16 *)(a1 + 12),  0LL,  *(unsigned __int8 *)(a1 + 15));
}

uint64_t sub_10037EC0C(uint64_t a1, char a2, __int16 a3, unsigned __int8 *a4, unsigned int a5, char a6)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_100893948;
  *(_BYTE *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 25) = a6;
  if (a4)
  {
    size_t v9 = 16LL * a5;
    size_t v10 = malloc(v9);
    *(void *)(a1 + 16) = v10;
    memcpy(v10, a4, v9);
    if (a5)
    {
      uint64_t v11 = 0LL;
      uint64_t v12 = 16LL * a5;
      do
      {
        int v13 = a4[v11];
        if (v13 == 7 || v13 == 4)
        {
          int v15 = (const void **)&a4[v11];
          if (*(void *)&a4[v11 + 8])
          {
            if (*((_BYTE *)v15 + 3))
            {
              *(void *)(*(void *)(a1 + 16) + v11 + 8) = malloc(*((unsigned __int8 *)v15 + 3));
              memcpy(*(void **)(*(void *)(a1 + 16) + v11 + 8), v15[1], *((unsigned __int8 *)v15 + 3));
            }
          }
        }

        v11 += 16LL;
      }

      while (v12 != v11);
    }
  }

  return a1;
}

void sub_10037ECF8(uint64_t a1)
{
  v1 = (void *)sub_10037ED68(a1);
  operator delete(v1);
}

uint64_t sub_10037ED0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_100373F1C(qword_1008D6450, 0LL, *(unsigned __int16 *)(a1 + 12), a4, 0LL, *(unsigned __int8 *)(a1 + 25));
}

uint64_t sub_10037ED68(uint64_t a1)
{
  *(void *)a1 = off_100893948;
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
    if (*(_BYTE *)(a1 + 24))
    {
      uint64_t v4 = 0LL;
      unint64_t v5 = 0LL;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(unsigned __int8 *)(v6 + v4);
        if (v7 == 7 || v7 == 4)
        {
          uint64_t v9 = v6 + v4;
          size_t v10 = *(void **)(v9 + 8);
          if (v10)
          {
            if (*(_BYTE *)(v9 + 3))
            {
              free(v10);
              unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
            }
          }
        }

        ++v5;
        v4 += 16LL;
      }

      while (v5 < v3);
      uint64_t v2 = *(void **)(a1 + 16);
    }

    free(v2);
  }

  return a1;
}

uint64_t sub_10037EE04(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_100374470( (os_unfair_lock_s *)qword_1008D6450,  0LL,  *(unsigned __int16 *)(a1 + 12),  *(unsigned __int16 *)(a1 + 14),  *(unsigned __int8 *)(a1 + 16));
}

uint64_t sub_10037EE68(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_100374240(qword_1008D6450, *(unsigned __int8 *)(a1 + 10), *(unsigned __int16 *)(a1 + 12));
}

uint64_t sub_10037EEC4(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_10037616C( (os_unfair_lock_s *)qword_1008D6450,  *(unsigned __int8 *)(a1 + 10),  *(unsigned __int16 *)(a1 + 12));
}

uint64_t sub_10037EF20()
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_100376364(qword_1008D6450);
}

uint64_t sub_10037EF6C(uint64_t a1, char a2, const void *a3, unsigned int a4)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = &off_100893A60;
  *(_BYTE *)(a1 + 10) = a2;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = a4;
  if (a3 && a4)
  {
    size_t v6 = 2LL * a4;
    int v7 = malloc(v6);
    *(void *)(a1 + 16) = v7;
    memcpy(v7, a3, v6);
  }

  return a1;
}

void *sub_10037EFDC(void *a1)
{
  *a1 = &off_100893A60;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    free(v2);
  }
  return a1;
}

void sub_10037F014(void *__p)
{
  void *__p = &off_100893A60;
  uint64_t v2 = (void *)__p[2];
  if (v2) {
    free(v2);
  }
  operator delete(__p);
}

uint64_t sub_10037F04C(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_100374E90( qword_1008D6450,  *(unsigned __int8 *)(a1 + 10),  *(__int16 **)(a1 + 16),  *(unsigned __int8 *)(a1 + 24));
}

uint64_t sub_10037F0A4(uint64_t a1, char a2, const void *a3, unsigned int a4, __int16 a5, char a6)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = &off_100893A98;
  *(_BYTE *)(a1 + 10) = a2;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = a5;
  *(_BYTE *)(a1 + 28) = a6;
  if (a3 && a4)
  {
    size_t v8 = 2LL * a4;
    uint64_t v9 = malloc(v8);
    *(void *)(a1 + 16) = v9;
    memcpy(v9, a3, v8);
  }

  return a1;
}

void *sub_10037F11C(void *a1)
{
  *a1 = &off_100893A98;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    free(v2);
  }
  return a1;
}

void sub_10037F154(void *__p)
{
  void *__p = &off_100893A98;
  uint64_t v2 = (void *)__p[2];
  if (v2) {
    free(v2);
  }
  operator delete(__p);
}

uint64_t sub_10037F18C(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_100375288( (os_unfair_lock_s *)qword_1008D6450,  0LL,  *(unsigned __int16 **)(a1 + 16),  *(unsigned __int8 *)(a1 + 24),  0LL,  *(unsigned __int8 *)(a1 + 28));
}

uint64_t sub_10037F1EC(uint64_t a1, char a2, const void *a3, unsigned int a4)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = &off_100893AD0;
  *(_BYTE *)(a1 + 10) = a2;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = a4;
  if (a3 && a4)
  {
    size_t v6 = 2LL * a4;
    int v7 = malloc(v6);
    *(void *)(a1 + 16) = v7;
    memcpy(v7, a3, v6);
  }

  return a1;
}

void *sub_10037F25C(void *a1)
{
  *a1 = &off_100893AD0;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    free(v2);
  }
  return a1;
}

void sub_10037F294(void *__p)
{
  void *__p = &off_100893AD0;
  uint64_t v2 = (void *)__p[2];
  if (v2) {
    free(v2);
  }
  operator delete(__p);
}

uint64_t sub_10037F2CC(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_100375654( (os_unfair_lock_s *)qword_1008D6450,  *(unsigned __int8 *)(a1 + 10),  *(__int16 **)(a1 + 16),  *(unsigned __int8 *)(a1 + 24));
}

uint64_t sub_10037F324(uint64_t a1, char a2, const void *a3, unsigned int a4, __int16 a5, char a6)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = &off_100893B08;
  *(_BYTE *)(a1 + 10) = a2;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = a5;
  *(_BYTE *)(a1 + 28) = a6;
  if (a3 && a4)
  {
    size_t v8 = 2LL * a4;
    uint64_t v9 = malloc(v8);
    *(void *)(a1 + 16) = v9;
    memcpy(v9, a3, v8);
  }

  return a1;
}

void *sub_10037F39C(void *a1)
{
  *a1 = &off_100893B08;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    free(v2);
  }
  return a1;
}

void sub_10037F3D4(void *__p)
{
  void *__p = &off_100893B08;
  uint64_t v2 = (void *)__p[2];
  if (v2) {
    free(v2);
  }
  operator delete(__p);
}

uint64_t sub_10037F40C(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_1003758F4( (os_unfair_lock_s *)qword_1008D6450,  0LL,  *(unsigned __int16 **)(a1 + 16),  *(unsigned __int8 *)(a1 + 24),  0LL,  *(unsigned __int8 *)(a1 + 28));
}

uint64_t sub_10037F46C(uint64_t a1, char a2, const void *a3, unsigned int a4, __int16 a5, char a6)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = &off_100893B40;
  *(_BYTE *)(a1 + 10) = a2;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = a5;
  *(_BYTE *)(a1 + 28) = a6;
  if (a3 && a4)
  {
    size_t v8 = 2LL * a4;
    uint64_t v9 = malloc(v8);
    *(void *)(a1 + 16) = v9;
    memcpy(v9, a3, v8);
  }

  return a1;
}

void *sub_10037F4E4(void *a1)
{
  *a1 = &off_100893B40;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    free(v2);
  }
  return a1;
}

void sub_10037F51C(void *__p)
{
  void *__p = &off_100893B40;
  uint64_t v2 = (void *)__p[2];
  if (v2) {
    free(v2);
  }
  operator delete(__p);
}

uint64_t sub_10037F554(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_100375CC4( (os_unfair_lock_s *)qword_1008D6450,  0LL,  *(unsigned __int16 **)(a1 + 16),  *(unsigned __int8 *)(a1 + 24),  0LL,  *(unsigned __int8 *)(a1 + 28));
}

uint64_t sub_10037F5B4(uint64_t a1, char a2, __int16 a3, unsigned __int8 *a4, unsigned int a5)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_100893B78;
  *(_BYTE *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = a5;
  if (a4)
  {
    size_t v8 = 16LL * a5;
    uint64_t v9 = malloc(v8);
    *(void *)(a1 + 16) = v9;
    memcpy(v9, a4, v8);
    if (a5)
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = 16LL * a5;
      do
      {
        int v12 = a4[v10];
        if (v12 == 7 || v12 == 4)
        {
          uint64_t v14 = (const void **)&a4[v10];
          if (*(void *)&a4[v10 + 8])
          {
            if (*((_BYTE *)v14 + 3))
            {
              *(void *)(*(void *)(a1 + 16) + v10 + 8) = malloc(*((unsigned __int8 *)v14 + 3));
              memcpy(*(void **)(*(void *)(a1 + 16) + v10 + 8), v14[1], *((unsigned __int8 *)v14 + 3));
            }
          }
        }

        v10 += 16LL;
      }

      while (v11 != v10);
    }
  }

  return a1;
}

void sub_10037F69C(uint64_t a1)
{
  v1 = (void *)sub_10037F708(a1);
  operator delete(v1);
}

uint64_t sub_10037F6B0(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_100375EA8(qword_1008D6450, *(unsigned __int8 *)(a1 + 10), *(unsigned __int16 *)(a1 + 12));
}

uint64_t sub_10037F708(uint64_t a1)
{
  *(void *)a1 = off_100893B78;
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
    if (*(_BYTE *)(a1 + 24))
    {
      uint64_t v4 = 0LL;
      unint64_t v5 = 0LL;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(unsigned __int8 *)(v6 + v4);
        if (v7 == 7 || v7 == 4)
        {
          uint64_t v9 = v6 + v4;
          uint64_t v10 = *(void **)(v9 + 8);
          if (v10)
          {
            if (*(_BYTE *)(v9 + 3))
            {
              free(v10);
              unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
            }
          }
        }

        ++v5;
        v4 += 16LL;
      }

      while (v5 < v3);
      uint64_t v2 = *(void **)(a1 + 16);
    }

    free(v2);
  }

  return a1;
}

uint64_t sub_10037F7A4(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_10037609C(qword_1008D6450, 0LL, *(_WORD *)(a1 + 12));
}

void *sub_10037F800(void *a1)
{
  *a1 = &off_100893BE8;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    free(v2);
  }
  return a1;
}

void sub_10037F838(void *__p)
{
  void *__p = &off_100893BE8;
  uint64_t v2 = (void *)__p[2];
  if (v2) {
    free(v2);
  }
  operator delete(__p);
}

uint64_t sub_10037F870(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_100374CE0( qword_1008D6450,  *(unsigned __int8 *)(a1 + 10),  *(_WORD *)(a1 + 12),  *(const void **)(a1 + 16),  *(unsigned __int16 *)(a1 + 24));
}

void *sub_10037F8CC(void *a1)
{
  *a1 = &off_100893C20;
  uint64_t v2 = (void *)a1[2];
  if (v2) {
    free(v2);
  }
  return a1;
}

void sub_10037F904(void *__p)
{
  void *__p = &off_100893C20;
  uint64_t v2 = (void *)__p[2];
  if (v2) {
    free(v2);
  }
  operator delete(__p);
}

uint64_t sub_10037F93C(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_100374DC0(qword_1008D6450, 0LL, *(_WORD *)(a1 + 12));
}

uint64_t sub_10037F9A0(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_1003763E4( (os_unfair_lock_s *)qword_1008D6450,  *(unsigned __int8 *)(a1 + 10),  *(unsigned __int16 *)(a1 + 12));
}

uint64_t sub_10037F9FC(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_1003765C8((os_unfair_lock_s *)qword_1008D6450, 0LL, *(unsigned __int16 *)(a1 + 12));
}

uint64_t sub_10037FA54( uint64_t a1, char a2, __int16 a3, char a4, unsigned __int8 *a5, unsigned int a6, char a7)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_100893CC8;
  *(_BYTE *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(_BYTE *)(a1 + 14) = a4;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = a6;
  *(_BYTE *)(a1 + 25) = a7;
  if (a5)
  {
    size_t v10 = 16LL * a6;
    uint64_t v11 = malloc(v10);
    *(void *)(a1 + 16) = v11;
    memcpy(v11, a5, v10);
    if (a6)
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = 16LL * a6;
      do
      {
        int v14 = a5[v12];
        if (v14 == 7 || v14 == 4)
        {
          char v16 = (const void **)&a5[v12];
          if (*(void *)&a5[v12 + 8])
          {
            if (*((_BYTE *)v16 + 3))
            {
              *(void *)(*(void *)(a1 + 16) + v12 + 8) = malloc(*((unsigned __int8 *)v16 + 3));
              memcpy(*(void **)(*(void *)(a1 + 16) + v12 + 8), v16[1], *((unsigned __int8 *)v16 + 3));
            }
          }
        }

        v12 += 16LL;
      }

      while (v13 != v12);
    }
  }

  return a1;
}

void sub_10037FB44(uint64_t a1)
{
  v1 = (void *)sub_10037FBBC(a1);
  operator delete(v1);
}

uint64_t sub_10037FB58(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_1003766E4( (os_unfair_lock_s *)qword_1008D6450,  0LL,  *(unsigned __int16 *)(a1 + 12),  *(unsigned __int8 *)(a1 + 14),  *(void *)(a1 + 16),  *(unsigned __int8 *)(a1 + 24),  *(unsigned __int8 *)(a1 + 25));
}

uint64_t sub_10037FBBC(uint64_t a1)
{
  *(void *)a1 = off_100893CC8;
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
    if (*(_BYTE *)(a1 + 24))
    {
      uint64_t v4 = 0LL;
      unint64_t v5 = 0LL;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(unsigned __int8 *)(v6 + v4);
        if (v7 == 7 || v7 == 4)
        {
          uint64_t v9 = v6 + v4;
          size_t v10 = *(void **)(v9 + 8);
          if (v10)
          {
            if (*(_BYTE *)(v9 + 3))
            {
              free(v10);
              unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
            }
          }
        }

        ++v5;
        v4 += 16LL;
      }

      while (v5 < v3);
      uint64_t v2 = *(void **)(a1 + 16);
    }

    free(v2);
  }

  return a1;
}

uint64_t sub_10037FC58(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  return sub_100376A98( qword_1008D6450,  *(unsigned __int16 *)(a1 + 12),  *(unsigned __int8 *)(a1 + 10),  *(unsigned __int16 *)(a1 + 14));
}

void sub_10037FCB0(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100893838);
  }
  sub_100377448(qword_1008D6450, *(unsigned __int16 *)(a1 + 32));
}

_BYTE *sub_10037FD00(uint64_t a1)
{
  __int16 v7 = 0;
  int v6 = 0;
  char v5 = 0;
  sub_100242CA4(&v5);
  int v2 = sub_10010EF78(*(void *)(a1 + 32), (uint64_t)&v6);
  sub_100242CD0(&v5);
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_1006748DC();
    }
  }

  else
  {
    if (qword_1008D6458 != -1) {
      dispatch_once(&qword_1008D6458, &stru_100893838);
    }
    sub_1003772A4( qword_1008D6450,  *(_DWORD *)(a1 + 48),  v3,  *(_DWORD *)(a1 + 52),  *(unsigned __int16 *)(a1 + 56),  *(void *)(a1 + 40));
  }

  return sub_100242CD8(&v5);
}

void sub_10037FDC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_10037FDD8(uint64_t a1)
{
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  sub_10002418C((void *)(a1 + 80), "");
  sub_10002418C((void *)(a1 + 104), "");
  sub_10002418C((void *)(a1 + 128), "");
  sub_10002418C((void *)(a1 + 152), "");
  return a1;
}

void sub_10037FE60(_Unwind_Exception *exception_object)
{
  if (v2[151] < 0) {
    operator delete(*v4);
  }
  if (v2[127] < 0) {
    operator delete(*v3);
  }
  if (v2[103] < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10037FEAC(id a1)
{
  v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_10037FEDC(_Unwind_Exception *a1)
{
}

void sub_10037FEF0(id a1)
{
  v1 = operator new(0x118uLL);
  sub_1003ADFF0((uint64_t)v1);
  off_1008D5F38 = v1;
}

void sub_10037FF20(_Unwind_Exception *a1)
{
}

void sub_10037FF34(id a1)
{
  v1 = (char *)operator new(0x200uLL);
  *(void *)v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 18) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 108) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 28) = v1 + 232;
  *((void *)v1 + 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 58) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_10038003C(_Unwind_Exception *a1)
{
}

void sub_100380050(id a1)
{
  v1 = operator new(0x2C8uLL);
  sub_100213DA8();
  off_1008D60D8 = v1;
}

void sub_100380080(_Unwind_Exception *a1)
{
}

void sub_100380094(id a1)
{
  v1 = operator new(0x4A8uLL);
  sub_100499870();
  off_1008D60E8 = v1;
}

void sub_1003800C4(_Unwind_Exception *a1)
{
}

void sub_1003800D8(id a1)
{
  v1 = operator new(0x58uLL);
  sub_10041A094(v1);
  qword_1008D95F8 = (uint64_t)v1;
}

void sub_100380108(_Unwind_Exception *a1)
{
}

void sub_10038011C(id a1)
{
  v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_10038014C(_Unwind_Exception *a1)
{
}

void sub_100380160(id a1)
{
  v1 = operator new(0x1C8uLL);
  sub_100352FF0();
  qword_1008D67D0 = (uint64_t)v1;
}

void sub_100380190(_Unwind_Exception *a1)
{
}

void sub_1003801A4(id a1)
{
  v1 = operator new(0x18uLL);
  *(void *)v1 = 0LL;
  v1[2] = 0;
  *((_BYTE *)v1 + 12) = 0;
  v1[4] = 0;
  qword_1008D9058 = (uint64_t)v1;
}

void sub_1003801D4(id a1)
{
  v1 = operator new(0x230uLL);
  sub_100271B18((uint64_t)v1);
  off_1008D9248 = v1;
}

void sub_100380204(_Unwind_Exception *a1)
{
}

void sub_100380218(id a1)
{
  v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_100380248(_Unwind_Exception *a1)
{
}

void sub_10038025C(id a1)
{
  v1 = operator new(0x260uLL);
  sub_1005285C8((uint64_t)v1);
  off_1008D67A0 = v1;
}

void sub_10038028C(_Unwind_Exception *a1)
{
}

uint64_t sub_1003802A0(uint64_t result, int a2, float a3)
{
  *(float *)uint64_t result = a3;
  *(_DWORD *)(result + 4) = a2;
  *(_WORD *)(result + 8) = 2082;
  return result;
}

void sub_1003802B4(float a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (v5 >= 0) {
    int v6 = a3;
  }
  else {
    int v6 = (void *)*a3;
  }
  *(float *)a4 = a1;
  *(_DWORD *)(a4 + 4) = v4;
  *(_WORD *)(a4 + 8) = 2082;
  *(void *)(a4 + 10) = v6;
}

  ;
}

  ;
}

uint64_t sub_100380304(uint64_t a1)
{
  *(void *)(a1 + 24) = off_100893F88;
  uint64_t v2 = a1 + 24;
  *(void *)a1 = off_100893ED8;
  *(void *)(a1 + 8) = off_100893F30;
  *(void *)(a1 + 16) = off_100893F58;
  *(_BYTE *)(a1 + 32) = 0;
  sub_100242DC4(a1 + 40);
  *(void *)(a1 + 240) = 0LL;
  *(void *)(a1 + 248) = 0LL;
  *(void *)(a1 + 264) = 0LL;
  *(void *)(a1 + 256) = a1 + 264;
  *(void *)(a1 + 232) = a1 + 240;
  *(void *)(a1 + 272) = 0LL;
  *(void *)(a1 + 288) = 0LL;
  *(void *)(a1 + 280) = a1 + 288;
  *(void *)(a1 + 296) = 0LL;
  *(void *)(a1 + 304) = 0LL;
  *(void *)(a1 + 312) = 0LL;
  *(void *)(a1 + 320) = 0LL;
  *(void *)(a1 + 392) = 0LL;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 384) = a1 + 392;
  *(void *)(a1 + 416) = 0LL;
  *(void *)(a1 + 424) = 0LL;
  *(void *)(a1 + 400) = 0LL;
  *(void *)(a1 + 408) = a1 + 416;
  *(void *)(a1 + 520) = 0LL;
  *(void *)(a1 + 528) = 0LL;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0LL;
  *(void *)(a1 + 496) = 0LL;
  *(void *)(a1 + 504) = 0LL;
  *(void *)(a1 + 512) = a1 + 520;
  *(void *)(a1 + 544) = 0LL;
  *(void *)(a1 + 552) = 0LL;
  *(void *)(a1 + 536) = a1 + 544;
  int v62 = 0;
  __int128 v61 = xmmword_1006BD9DC;
  sub_100634334(&v63, (__n128 *)&v61);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v59 = xmmword_1006BD964;
  int v60 = 0;
  sub_100634334(&v63, (__n128 *)&v59);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v57 = xmmword_1006BD978;
  int v58 = 0;
  sub_100634334(&v63, (__n128 *)&v57);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v55 = xmmword_1006BDAF4;
  int v56 = 0;
  sub_100634334(&v63, (__n128 *)&v55);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v53 = xmmword_1006BDAE0;
  int v54 = 0;
  sub_100634334(&v63, (__n128 *)&v53);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v51 = xmmword_1006BDAB8;
  int v52 = 0;
  sub_100634334(&v63, (__n128 *)&v51);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v49 = xmmword_1006BDB1C;
  int v50 = 0;
  sub_100634334(&v63, (__n128 *)&v49);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v47 = xmmword_1006BDB30;
  int v48 = -805294830;
  sub_100634334(&v63, (__n128 *)&v47);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v45 = xmmword_1006BDB44;
  int v46 = -587704915;
  sub_100634334(&v63, (__n128 *)&v45);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v43 = xmmword_1006BDB58;
  int v44 = -1765695659;
  sub_100634334(&v63, (__n128 *)&v43);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v41 = xmmword_1006BDB6C;
  int v42 = -601477452;
  sub_100634334(&v63, (__n128 *)&v41);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v39 = xmmword_1006BDC4C;
  int v40 = 1880579407;
  sub_100634334(&v63, (__n128 *)&v39);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v37 = xmmword_1006BDB80;
  int v38 = -1171415960;
  sub_100634334(&v63, (__n128 *)&v37);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v35 = xmmword_1006BDC88;
  int v36 = -815610143;
  sub_100634334(&v63, (__n128 *)&v35);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v33 = xmmword_1006BDC9C;
  int v34 = 1323364242;
  sub_100634334(&v63, (__n128 *)&v33);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v31 = xmmword_1006BDCB0;
  int v32 = 0;
  sub_100634334(&v63, (__n128 *)&v31);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v29 = xmmword_1006BDB08;
  int v30 = 0;
  sub_100634334(&v63, (__n128 *)&v29);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v27 = xmmword_1006BDBE4;
  int v28 = 0;
  sub_100634334(&v63, (__n128 *)&v27);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v25 = xmmword_1006BDBF8;
  int v26 = 1729713604;
  sub_100634334(&v63, (__n128 *)&v25);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v23 = xmmword_1006BDCD8;
  int v24 = 0;
  sub_100634334(&v63, (__n128 *)&v23);
  sub_10038CF98((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  __int128 v21 = xmmword_1006BDBD0;
  int v22 = 0;
  sub_100634334(&v63, (__n128 *)&v21);
  v20.n128_u64[0] = (unint64_t)&v63;
  uint64_t v3 = (uint64_t **)sub_10038D0B4((uint64_t **)(a1 + 280), (unsigned __int8 *)&v63, (uint64_t)&unk_1006C2518, &v20);
  __int128 v18 = xmmword_1006BDC60;
  int v19 = 295542594;
  sub_100634334(&v20, (__n128 *)&v18);
  sub_10038CF98(v3 + 7, (unsigned __int8 *)&v20, (uint64_t)&v20);
  __int128 v16 = xmmword_1006BDBD0;
  int v17 = 0;
  sub_100634334(&v63, (__n128 *)&v16);
  v20.n128_u64[0] = (unint64_t)&v63;
  int v4 = (uint64_t **)sub_10038D0B4((uint64_t **)(a1 + 280), (unsigned __int8 *)&v63, (uint64_t)&unk_1006C2518, &v20);
  __int128 v14 = xmmword_1006BDC74;
  int v15 = 312319810;
  sub_100634334(&v20, (__n128 *)&v14);
  sub_10038CF98(v4 + 7, (unsigned __int8 *)&v20, (uint64_t)&v20);
  uint64_t v5 = sub_1002E8D54();
  sub_10038BBBC(v5 + 208, v2);
  uint64_t v6 = sub_1002E8D54();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16LL))(v6, a1 + 304);
  uint64_t v7 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  size_t v8 = *(void **)(a1 + 488);
  *(void *)(a1 + 488) = v7;

  uint64_t v9 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  size_t v10 = *(void **)(a1 + 496);
  *(void *)(a1 + 496) = v9;

  uint64_t v11 = -[NSMapTable initWithKeyOptions:valueOptions:capacity:]( objc_alloc(&OBJC_CLASS___NSMapTable),  "initWithKeyOptions:valueOptions:capacity:",  0x10000LL,  256LL,  0LL);
  uint64_t v12 = *(void **)(a1 + 504);
  *(void *)(a1 + 504) = v11;

  return a1;
}

void sub_1003809D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v19 = (void **)(v16 + 96);
  sub_10038CEAC((void *)(v16 + 192));
  sub_10038CE5C(v16 + 168, *(void **)(v11 + 416));
  sub_10023BF24(v16 + 144, *(void **)(v11 + 392));
  __n128 v20 = *(void **)(v11 + 360);
  if (v20)
  {
    *(void *)(v11 + 368) = v20;
    operator delete(v20);
  }

  __int128 v21 = *v19;
  if (*v19)
  {
    *(void *)(v11 + 344) = v21;
    operator delete(v21);
  }

  sub_10038CE10(v14, *v12);
  sub_10023BF24(a10, *v17);
  sub_10023BF24(v13, *(void **)v16);
  sub_100242E28(a11);
  _Unwind_Resume(a1);
}

void sub_100380B14(uint64_t a1)
{
  char v69 = 0;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "GATT");
  sub_10002418C(&__p, "DUMMY_DIS");
  int v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v2 + 72LL))(v2, buf, &__p, &v69);
  if (v69) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v5 = (os_log_s *)qword_1008F75B0;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Warning: Creating Dumy DIS entry, with dummy data",  buf,  2u);
    }

    uint64_t v7 = operator new(0x58uLL);
    *(void *)std::string buf = &off_10087FAA8;
    int v67 = 0LL;
    sub_10038BEAC((uint64_t)v7, 0, (uint64_t)buf);
    *(void *)(a1 + 152) = v7;
    *(void *)std::string buf = &off_10087FAA8;
    if (v67 && (sub_1002CD254(v67), (uint64_t v7 = *(void **)(a1 + 152)) == 0LL))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
        sub_100674A94();
      }
    }

    else
    {
      *(_BYTE *)(v7[1] + 26LL) = 1;
      size_t v8 = (char *)operator new(0x88uLL);
      __int128 v122 = xmmword_1006BD9F0;
      int v123 = 0;
      sub_100634334(&v124, (__n128 *)&v122);
      *((_DWORD *)v8 + 6) = 0;
      *((_DWORD *)v8 + 4) = 0;
      *(void *)size_t v8 = off_1008A02C0;
      *((void *)v8 + 1) = v8 + 24;
      *((void *)v8 + 14) = 0LL;
      *((void *)v8 + 15) = 0LL;
      v8[128] = 0;
      *((_DWORD *)v8 + 11) = 0;
      *(_OWORD *)(v8 + 28) = xmmword_1006C259C;
      *((void *)v8 + 7) = 0LL;
      *((void *)v8 + 8) = 0LL;
      *((void *)v8 + 6) = 0LL;
      *((_DWORD *)v8 + 18) = 2;
      *((_DWORD *)v8 + 23) = v125;
      *(__n128 *)(v8 + 76) = v124;
      *((void *)v8 + 12) = *(void *)(a1 + 152);
      *((void *)v8 + 13) = 0LL;
      uint64_t v9 = operator new(0x58uLL);
      *(void *)std::string buf = &off_10087FAA8;
      int v67 = 0LL;
      sub_10038BEAC((uint64_t)v9, 0, (uint64_t)buf);
      *(void *)(a1 + 160) = v9;
      *(void *)std::string buf = &off_10087FAA8;
      if (v67 && (sub_1002CD254(v67), (uint64_t v9 = *(void **)(a1 + 160)) == 0LL))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
          sub_100674A68();
        }
      }

      else
      {
        *(_BYTE *)(v9[1] + 26LL) = 1;
        size_t v10 = (char *)operator new(0x88uLL);
        __int128 v118 = xmmword_1006BDA04;
        int v119 = 0;
        sub_100634334(&v120, (__n128 *)&v118);
        *((_DWORD *)v10 + 6) = 0;
        *((_DWORD *)v10 + 4) = 0;
        *(void *)size_t v10 = off_1008A02C0;
        *((void *)v10 + 1) = v10 + 24;
        *((void *)v10 + 14) = 0LL;
        *((void *)v10 + 15) = 0LL;
        v10[128] = 0;
        *((_DWORD *)v10 + 11) = 0;
        *(_OWORD *)(v10 + 28) = xmmword_1006C259C;
        *((void *)v10 + 7) = 0LL;
        *((void *)v10 + 8) = 0LL;
        *((void *)v10 + 6) = 0LL;
        *((_DWORD *)v10 + 18) = 2;
        *((_DWORD *)v10 + 23) = v121;
        *(__n128 *)(v10 + 76) = v120;
        *((void *)v10 + 12) = *(void *)(a1 + 160);
        *((void *)v10 + 13) = 0LL;
        uint64_t v11 = operator new(0x58uLL);
        *(void *)std::string buf = &off_10087FAA8;
        int v67 = 0LL;
        sub_10038BEAC((uint64_t)v11, 0, (uint64_t)buf);
        *(void *)(a1 + 168) = v11;
        *(void *)std::string buf = &off_10087FAA8;
        if (v67 && (sub_1002CD254(v67), (uint64_t v11 = *(void **)(a1 + 168)) == 0LL))
        {
          if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
            sub_100674A3C();
          }
        }

        else
        {
          *(_BYTE *)(v11[1] + 26LL) = 1;
          uint64_t v12 = (char *)operator new(0x88uLL);
          __int128 v114 = xmmword_1006BDA18;
          int v115 = 0;
          sub_100634334(&v116, (__n128 *)&v114);
          *((_DWORD *)v12 + 6) = 0;
          *((_DWORD *)v12 + 4) = 0;
          *(void *)uint64_t v12 = off_1008A02C0;
          *((void *)v12 + 1) = v12 + 24;
          *((void *)v12 + 14) = 0LL;
          *((void *)v12 + 15) = 0LL;
          v12[128] = 0;
          *((_DWORD *)v12 + 11) = 0;
          *(_OWORD *)(v12 + 28) = xmmword_1006C259C;
          *((void *)v12 + 7) = 0LL;
          *((void *)v12 + 8) = 0LL;
          *((void *)v12 + 6) = 0LL;
          *((_DWORD *)v12 + 18) = 2;
          *((_DWORD *)v12 + 23) = v117;
          *(__n128 *)(v12 + 76) = v116;
          *((void *)v12 + 12) = *(void *)(a1 + 168);
          *((void *)v12 + 13) = 0LL;
          uint64_t v13 = operator new(0x58uLL);
          *(void *)std::string buf = &off_10087FAA8;
          int v67 = 0LL;
          sub_10038BEAC((uint64_t)v13, 0, (uint64_t)buf);
          *(void *)(a1 + 176) = v13;
          *(void *)std::string buf = &off_10087FAA8;
          if (v67 && (sub_1002CD254(v67), (uint64_t v13 = *(void **)(a1 + 176)) == 0LL))
          {
            if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
              sub_100674A10();
            }
          }

          else
          {
            *(_BYTE *)(v13[1] + 26LL) = 1;
            uint64_t v14 = (char *)operator new(0x88uLL);
            __int128 v110 = xmmword_1006BDA2C;
            int v111 = 0;
            sub_100634334(&v112, (__n128 *)&v110);
            *((_DWORD *)v14 + 6) = 0;
            *((_DWORD *)v14 + 4) = 0;
            *(void *)uint64_t v14 = off_1008A02C0;
            *((void *)v14 + 1) = v14 + 24;
            *((void *)v14 + 14) = 0LL;
            *((void *)v14 + 15) = 0LL;
            v14[128] = 0;
            *((_DWORD *)v14 + 11) = 0;
            *(_OWORD *)(v14 + 28) = xmmword_1006C259C;
            *((void *)v14 + 7) = 0LL;
            *((void *)v14 + 8) = 0LL;
            *((void *)v14 + 6) = 0LL;
            *((_DWORD *)v14 + 18) = 2;
            *((_DWORD *)v14 + 23) = v113;
            *(__n128 *)(v14 + 76) = v112;
            *((void *)v14 + 12) = *(void *)(a1 + 176);
            *((void *)v14 + 13) = 0LL;
            int v15 = operator new(0x58uLL);
            *(void *)std::string buf = &off_10087FAA8;
            int v67 = 0LL;
            sub_10038BEAC((uint64_t)v15, 0, (uint64_t)buf);
            *(void *)(a1 + 184) = v15;
            *(void *)std::string buf = &off_10087FAA8;
            if (v67 && (sub_1002CD254(v67), (int v15 = *(void **)(a1 + 184)) == 0LL))
            {
              if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
                sub_1006749E4();
              }
            }

            else
            {
              *(_BYTE *)(v15[1] + 26LL) = 1;
              uint64_t v16 = (char *)operator new(0x88uLL);
              __int128 v106 = xmmword_1006BDA40;
              int v107 = 0;
              sub_100634334(&v108, (__n128 *)&v106);
              *((_DWORD *)v16 + 6) = 0;
              *((_DWORD *)v16 + 4) = 0;
              *(void *)uint64_t v16 = off_1008A02C0;
              *((void *)v16 + 1) = v16 + 24;
              *((void *)v16 + 14) = 0LL;
              *((void *)v16 + 15) = 0LL;
              v16[128] = 0;
              *((_DWORD *)v16 + 11) = 0;
              *(_OWORD *)(v16 + 28) = xmmword_1006C259C;
              *((void *)v16 + 7) = 0LL;
              *((void *)v16 + 8) = 0LL;
              *((void *)v16 + 6) = 0LL;
              *((_DWORD *)v16 + 18) = 2;
              *((_DWORD *)v16 + 23) = v109;
              *(__n128 *)(v16 + 76) = v108;
              *((void *)v16 + 12) = *(void *)(a1 + 184);
              *((void *)v16 + 13) = 0LL;
              int v17 = operator new(0x58uLL);
              *(void *)std::string buf = &off_10087FAA8;
              int v67 = 0LL;
              sub_10038BEAC((uint64_t)v17, 0, (uint64_t)buf);
              *(void *)(a1 + 192) = v17;
              *(void *)std::string buf = &off_10087FAA8;
              if (v67 && (sub_1002CD254(v67), (int v17 = *(void **)(a1 + 192)) == 0LL))
              {
                if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
                  sub_1006749B8();
                }
              }

              else
              {
                *(_BYTE *)(v17[1] + 26LL) = 1;
                __int128 v18 = (char *)operator new(0x88uLL);
                __int128 v102 = xmmword_1006BDA54;
                int v103 = 0;
                sub_100634334(&v104, (__n128 *)&v102);
                *((_DWORD *)v18 + 6) = 0;
                *((_DWORD *)v18 + 4) = 0;
                *(void *)__int128 v18 = off_1008A02C0;
                *((void *)v18 + 1) = v18 + 24;
                *((void *)v18 + 14) = 0LL;
                *((void *)v18 + 15) = 0LL;
                v18[128] = 0;
                *((_DWORD *)v18 + 11) = 0;
                *(_OWORD *)(v18 + 28) = xmmword_1006C259C;
                *((void *)v18 + 7) = 0LL;
                *((void *)v18 + 8) = 0LL;
                *((void *)v18 + 6) = 0LL;
                *((_DWORD *)v18 + 18) = 2;
                *((_DWORD *)v18 + 23) = v105;
                *(__n128 *)(v18 + 76) = v104;
                *((void *)v18 + 12) = *(void *)(a1 + 192);
                *((void *)v18 + 13) = 0LL;
                int v19 = operator new(0x58uLL);
                *(void *)std::string buf = &off_10087FAA8;
                int v67 = 0LL;
                sub_10038BEAC((uint64_t)v19, 0, (uint64_t)buf);
                *(void *)(a1 + 200) = v19;
                *(void *)std::string buf = &off_10087FAA8;
                if (v67 && (sub_1002CD254(v67), (int v19 = *(void **)(a1 + 200)) == 0LL))
                {
                  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
                    sub_10067498C();
                  }
                }

                else
                {
                  *(_BYTE *)(v19[1] + 26LL) = 1;
                  int v60 = (char *)operator new(0x88uLL);
                  __int128 v98 = xmmword_1006BDA68;
                  int v99 = 0;
                  sub_100634334(&v100, (__n128 *)&v98);
                  *((_DWORD *)v60 + 6) = 0;
                  *((_DWORD *)v60 + 4) = 0;
                  *(void *)int v60 = off_1008A02C0;
                  *((void *)v60 + 1) = v60 + 24;
                  *((void *)v60 + 14) = 0LL;
                  *((void *)v60 + 15) = 0LL;
                  v60[128] = 0;
                  *((_DWORD *)v60 + 11) = 0;
                  *(_OWORD *)(v60 + 28) = xmmword_1006C259C;
                  *((void *)v60 + 7) = 0LL;
                  *((void *)v60 + 8) = 0LL;
                  *((void *)v60 + 6) = 0LL;
                  *((_DWORD *)v60 + 18) = 2;
                  *((_DWORD *)v60 + 23) = v101;
                  *(__n128 *)(v60 + 76) = v100;
                  *((void *)v60 + 12) = *(void *)(a1 + 200);
                  *((void *)v60 + 13) = 0LL;
                  __n128 v20 = operator new(0x58uLL);
                  *(void *)std::string buf = &off_10087FAA8;
                  int v67 = 0LL;
                  sub_10038BEAC((uint64_t)v20, 0, (uint64_t)buf);
                  *(void *)(a1 + 208) = v20;
                  *(void *)std::string buf = &off_10087FAA8;
                  if (v67 && (sub_1002CD254(v67), (__n128 v20 = *(void **)(a1 + 208)) == 0LL))
                  {
                    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
                      sub_100674960();
                    }
                  }

                  else
                  {
                    *(_BYTE *)(v20[1] + 26LL) = 1;
                    __int128 v59 = (char *)operator new(0x88uLL);
                    __int128 v94 = xmmword_1006BDA7C;
                    int v95 = 0;
                    sub_100634334(&v96, (__n128 *)&v94);
                    *((_DWORD *)v59 + 6) = 0;
                    *((_DWORD *)v59 + 4) = 0;
                    *(void *)__int128 v59 = off_1008A02C0;
                    *((void *)v59 + 1) = v59 + 24;
                    *((void *)v59 + 14) = 0LL;
                    *((void *)v59 + 15) = 0LL;
                    v59[128] = 0;
                    *((_DWORD *)v59 + 11) = 0;
                    *(_OWORD *)(v59 + 28) = xmmword_1006C259C;
                    *((void *)v59 + 7) = 0LL;
                    *((void *)v59 + 8) = 0LL;
                    *((void *)v59 + 6) = 0LL;
                    *((_DWORD *)v59 + 18) = 2;
                    *((_DWORD *)v59 + 23) = v97;
                    *(__n128 *)(v59 + 76) = v96;
                    *((void *)v59 + 12) = *(void *)(a1 + 208);
                    *((void *)v59 + 13) = 0LL;
                    __int128 v21 = operator new(0x58uLL);
                    *(void *)std::string buf = &off_10087FAA8;
                    int v67 = 0LL;
                    sub_10038BEAC((uint64_t)v21, 0, (uint64_t)buf);
                    *(void *)(a1 + 216) = v21;
                    *(void *)std::string buf = &off_10087FAA8;
                    if (v67 && (sub_1002CD254(v67), (__int128 v21 = *(void **)(a1 + 216)) == 0LL))
                    {
                      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
                        sub_100674934();
                      }
                    }

                    else
                    {
                      *(_BYTE *)(v21[1] + 26LL) = 1;
                      int v58 = (char *)operator new(0x88uLL);
                      __int128 v90 = xmmword_1006BDA90;
                      int v91 = 0;
                      sub_100634334(&v92, (__n128 *)&v90);
                      *((_DWORD *)v58 + 6) = 0;
                      *((_DWORD *)v58 + 4) = 0;
                      *(void *)int v58 = off_1008A02C0;
                      *((void *)v58 + 1) = v58 + 24;
                      *((void *)v58 + 14) = 0LL;
                      *((void *)v58 + 15) = 0LL;
                      v58[128] = 0;
                      *((_DWORD *)v58 + 11) = 0;
                      *(_OWORD *)(v58 + 28) = xmmword_1006C259C;
                      *((void *)v58 + 7) = 0LL;
                      *((void *)v58 + 8) = 0LL;
                      *((void *)v58 + 6) = 0LL;
                      *((_DWORD *)v58 + 18) = 2;
                      *((_DWORD *)v58 + 23) = v93;
                      *(__n128 *)(v58 + 76) = v92;
                      *((void *)v58 + 12) = *(void *)(a1 + 216);
                      *((void *)v58 + 13) = 0LL;
                      int v22 = operator new(0x58uLL);
                      *(void *)std::string buf = &off_10087FAA8;
                      int v67 = 0LL;
                      sub_10038BEAC((uint64_t)v22, 0, (uint64_t)buf);
                      *(void *)(a1 + 224) = v22;
                      *(void *)std::string buf = &off_10087FAA8;
                      if (v67 && (sub_1002CD254(v67), (int v22 = *(void **)(a1 + 224)) == 0LL))
                      {
                        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
                          sub_100674908();
                        }
                      }

                      else
                      {
                        *(_BYTE *)(v22[1] + 26LL) = 1;
                        __int128 v23 = (char *)operator new(0x88uLL);
                        __int128 v86 = xmmword_1006BDAA4;
                        int v87 = 0;
                        sub_100634334(&v88, (__n128 *)&v86);
                        *((_DWORD *)v23 + 6) = 0;
                        *((_DWORD *)v23 + 4) = 0;
                        *(void *)__int128 v23 = off_1008A02C0;
                        *((void *)v23 + 1) = v23 + 24;
                        *((void *)v23 + 14) = 0LL;
                        *((void *)v23 + 15) = 0LL;
                        v23[128] = 0;
                        *((_DWORD *)v23 + 11) = 0;
                        *(_OWORD *)(v23 + 28) = xmmword_1006C259C;
                        *((void *)v23 + 7) = 0LL;
                        *((void *)v23 + 8) = 0LL;
                        *((void *)v23 + 6) = 0LL;
                        *((_DWORD *)v23 + 18) = 2;
                        *((_DWORD *)v23 + 23) = v89;
                        *(__n128 *)(v23 + 76) = v88;
                        *((void *)v23 + 12) = *(void *)(a1 + 224);
                        *((void *)v23 + 13) = 0LL;
                        int v24 = (char *)operator new(0xC0uLL);
                        __int128 v82 = xmmword_1006BD9DC;
                        int v83 = 0;
                        sub_100634334(&v84, (__n128 *)&v82);
                        *((_DWORD *)v24 + 4) = 0;
                        *(void *)int v24 = off_1008A0320;
                        *((void *)v24 + 1) = v24 + 24;
                        v24[96] = 1;
                        *((void *)v24 + 22) = 0LL;
                        *((void *)v24 + 23) = 0LL;
                        *((void *)v24 + 21) = 0LL;
                        *((void *)v24 + 14) = 0LL;
                        *((void *)v24 + 15) = 0LL;
                        *((void *)v24 + 13) = 0LL;
                        v24[128] = 0;
                        *((void *)v24 + 18) = 0LL;
                        *((void *)v24 + 19) = 0LL;
                        *((void *)v24 + 17) = 0LL;
                        v24[160] = 0;
                        unsigned int v25 = v85;
                        *(__n128 *)(v24 + 72) = v84;
                        *((_DWORD *)v24 + 6) = 0;
                        *((_DWORD *)v24 + 11) = 0;
                        *(_OWORD *)(v24 + 28) = xmmword_1006C2574;
                        *((void *)v24 + 7) = 0LL;
                        *((void *)v24 + 8) = 0LL;
                        *((void *)v24 + 6) = 0LL;
                        *((void *)v24 + 11) = v25;
                        *(void *)(a1 + 144) = v24;
                        sub_100381DC0(v24, (uint64_t)v8);
                        sub_100381DC0(*(void **)(a1 + 144), (uint64_t)v10);
                        sub_100381DC0(*(void **)(a1 + 144), (uint64_t)v12);
                        sub_100381DC0(*(void **)(a1 + 144), (uint64_t)v14);
                        sub_100381DC0(*(void **)(a1 + 144), (uint64_t)v16);
                        sub_100381DC0(*(void **)(a1 + 144), (uint64_t)v18);
                        sub_100381DC0(*(void **)(a1 + 144), (uint64_t)v60);
                        sub_100381DC0(*(void **)(a1 + 144), (uint64_t)v59);
                        sub_100381DC0(*(void **)(a1 + 144), (uint64_t)v58);
                        sub_100381DC0(*(void **)(a1 + 144), (uint64_t)v23);
                        sub_100381E90((void **)(a1 + 360), (void *)(a1 + 144));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return;
  }

  if (v6)
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Creating real DIS entry", buf, 2u);
  }

  *(void *)std::string buf = 0LL;
  int v67 = 0LL;
  uint64_t v68 = 0LL;
  int v26 = (uint64_t (***)(void, uint8_t *))sub_1002E6BF0();
  int v27 = (**v26)(v26, buf);
  int v28 = (char *)operator new(0x88uLL);
  __int128 v78 = xmmword_1006BD9F0;
  int v79 = 0;
  sub_100634334(&v80, (__n128 *)&v78);
  *((_DWORD *)v28 + 6) = 0;
  *((_DWORD *)v28 + 4) = 0;
  *(void *)int v28 = off_1008A02C0;
  *((void *)v28 + 1) = v28 + 24;
  *((_OWORD *)v28 + 6) = 0u;
  __int128 v29 = v28 + 96;
  *((_OWORD *)v28 + 7) = 0u;
  v28[128] = 0;
  *((_DWORD *)v28 + 11) = 0;
  *(_OWORD *)(v28 + 28) = xmmword_1006C259C;
  *((void *)v28 + 7) = 0LL;
  *((void *)v28 + 8) = 0LL;
  *((void *)v28 + 6) = 0LL;
  *((_DWORD *)v28 + 18) = 2;
  *(__n128 *)(v28 + 76) = v80;
  *((_DWORD *)v28 + 23) = v81;
  if (!v27)
  {
    int v30 = SHIBYTE(v68);
    __int128 v31 = v68 >= 0 ? (unsigned int *)HIBYTE(v68) : v67;
    if (v31)
    {
      int v32 = operator new(0x58uLL);
      if (v30 >= 0) {
        __int128 v33 = buf;
      }
      else {
        __int128 v33 = *(uint8_t **)buf;
      }
      sub_10056AB04(&__p, v33, (size_t)v31);
      sub_10038BEAC((uint64_t)v32, 0, (uint64_t)&__p);
      *(void *)(a1 + 152) = v32;
      std::string __p = &off_10087FAA8;
      if (v64)
      {
        sub_1002CD254(v64);
        int v32 = *(void **)(a1 + 152);
        if (!v32)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
            sub_100674AEC();
          }
          goto LABEL_83;
        }
      }

      *(_BYTE *)(v32[1] + 26LL) = 1;
      if (*v29) {
        (*(void (**)(void))(*(void *)*v29 + 8LL))(*v29);
      }
      *__int128 v29 = v32;
    }
  }

  std::string __p = 0LL;
  size_t v64 = 0LL;
  uint64_t v65 = 0LL;
  uint64_t v34 = sub_1002E6BF0();
  int v35 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v34 + 24LL))(v34, &__p);
  int v36 = (char *)operator new(0x88uLL);
  __int128 v74 = xmmword_1006BDA04;
  int v75 = 0;
  sub_100634334(&v76, (__n128 *)&v74);
  *((_DWORD *)v36 + 6) = 0;
  *((_DWORD *)v36 + 4) = 0;
  *(void *)int v36 = off_1008A02C0;
  *((void *)v36 + 1) = v36 + 24;
  *((_OWORD *)v36 + 6) = 0u;
  __int128 v37 = v36 + 96;
  *((_OWORD *)v36 + 7) = 0u;
  v36[128] = 0;
  *((_DWORD *)v36 + 11) = 0;
  *(_OWORD *)(v36 + 28) = xmmword_1006C259C;
  *((void *)v36 + 7) = 0LL;
  *((void *)v36 + 8) = 0LL;
  *((void *)v36 + 6) = 0LL;
  *((_DWORD *)v36 + 18) = 2;
  *(__n128 *)(v36 + 76) = v76;
  *((_DWORD *)v36 + 23) = v77;
  if (!v35)
  {
    int v38 = SHIBYTE(v65);
    __int128 v39 = v65 >= 0 ? (unsigned int *)HIBYTE(v65) : v64;
    if (v39)
    {
      int v40 = operator new(0x58uLL);
      if (v38 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      sub_10056AB04(&v61, p_p, (size_t)v39);
      sub_10038BEAC((uint64_t)v40, 0, (uint64_t)&v61);
      *(void *)(a1 + 160) = v40;
      __int128 v61 = &off_10087FAA8;
      if (v62)
      {
        sub_1002CD254(v62);
        int v40 = *(void **)(a1 + 160);
        if (!v40)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
            sub_100674AC0();
          }
          goto LABEL_81;
        }
      }

      *(_BYTE *)(v40[1] + 26LL) = 1;
      if (*v37) {
        (*(void (**)(void))(*(void *)*v37 + 8LL))(*v37);
      }
      *__int128 v37 = v40;
    }
  }

  int v42 = (char *)operator new(0xC0uLL);
  __int128 v70 = xmmword_1006BD9DC;
  int v71 = 0;
  sub_100634334(&v72, (__n128 *)&v70);
  *((_DWORD *)v42 + 4) = 0;
  *(void *)int v42 = off_1008A0320;
  *((void *)v42 + 1) = v42 + 24;
  v42[96] = 1;
  *((void *)v42 + 22) = 0LL;
  *((void *)v42 + 23) = 0LL;
  *((void *)v42 + 21) = 0LL;
  *((void *)v42 + 14) = 0LL;
  *((void *)v42 + 15) = 0LL;
  *((void *)v42 + 13) = 0LL;
  v42[128] = 0;
  *((void *)v42 + 18) = 0LL;
  *((void *)v42 + 19) = 0LL;
  *((void *)v42 + 17) = 0LL;
  v42[160] = 0;
  *(__n128 *)(v42 + 72) = v72;
  unsigned int v43 = v73;
  *((_DWORD *)v42 + 6) = 0;
  *((_DWORD *)v42 + 11) = 0;
  *(_OWORD *)(v42 + 28) = xmmword_1006C2574;
  *((void *)v42 + 7) = 0LL;
  *((void *)v42 + 8) = 0LL;
  *((void *)v42 + 6) = 0LL;
  *((void *)v42 + 11) = v43;
  *(void *)(a1 + 144) = v42;
  sub_100381DC0(v42, (uint64_t)v28);
  sub_100381DC0(*(void **)(a1 + 144), (uint64_t)v36);
  __int128 v45 = *(void **)(a1 + 368);
  unint64_t v44 = *(void *)(a1 + 376);
  if ((unint64_t)v45 >= v44)
  {
    uint64_t v47 = *(void *)(a1 + 360);
    uint64_t v48 = ((uint64_t)v45 - v47) >> 3;
    uint64_t v49 = v44 - v47;
    uint64_t v50 = v49 >> 2;
    else {
      unint64_t v51 = v50;
    }
    if (v51) {
      int v52 = (char *)sub_100008BA0(a1 + 376, v51);
    }
    else {
      int v52 = 0LL;
    }
    __int128 v53 = &v52[8 * v48];
    int v54 = &v52[8 * v51];
    *(void *)__int128 v53 = *(void *)(a1 + 144);
    int v46 = v53 + 8;
    int v56 = *(char **)(a1 + 360);
    __int128 v55 = *(char **)(a1 + 368);
    if (v55 != v56)
    {
      do
      {
        uint64_t v57 = *((void *)v55 - 1);
        v55 -= 8;
        *((void *)v53 - 1) = v57;
        v53 -= 8;
      }

      while (v55 != v56);
      __int128 v55 = *(char **)(a1 + 360);
    }

    *(void *)(a1 + 360) = v53;
    *(void *)(a1 + 368) = v46;
    *(void *)(a1 + 376) = v54;
    if (v55) {
      operator delete(v55);
    }
  }

  else
  {
    *__int128 v45 = *(void *)(a1 + 144);
    int v46 = v45 + 1;
  }

  *(void *)(a1 + 368) = v46;
LABEL_81:
  if (SHIBYTE(v65) < 0) {
    operator delete(__p);
  }
LABEL_83:
  if (SHIBYTE(v68) < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_100381BC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
}

void sub_100381DC0(void *a1, uint64_t a2)
{
  unint64_t v6 = a1[19];
  uint64_t v4 = (uint64_t)(a1 + 19);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = a1[17];
    uint64_t v10 = ((uint64_t)v7 - v9) >> 3;
    uint64_t v11 = v5 - v9;
    uint64_t v12 = v11 >> 2;
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      uint64_t v14 = (char *)sub_100008BA0(v4, v13);
    }
    else {
      uint64_t v14 = 0LL;
    }
    int v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    *(void *)int v15 = a2;
    size_t v8 = v15 + 8;
    __int128 v18 = (char *)a1[17];
    int v17 = (char *)a1[18];
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }

      while (v17 != v18);
      int v17 = (char *)a1[17];
    }

    a1[17] = v15;
    a1[18] = v8;
    a1[19] = v16;
    if (v17) {
      operator delete(v17);
    }
  }

  else
  {
    void *v7 = a2;
    size_t v8 = v7 + 1;
  }

  a1[18] = v8;
}

void sub_100381E90(void **a1, void *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v13 = (char *)sub_100008BA0(v4, v12);
    }
    else {
      unint64_t v13 = 0LL;
    }
    uint64_t v14 = &v13[8 * v9];
    int v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = *a2;
    size_t v8 = v14 + 8;
    int v17 = (char *)*a1;
    uint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      uint64_t v16 = (char *)*a1;
    }

    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }

  else
  {
    void *v7 = *a2;
    size_t v8 = v7 + 1;
  }

  a1[1] = v8;
}

void sub_100381F68(void *a1)
{
  if (qword_1008D9278 != -1) {
    dispatch_once(&qword_1008D9278, &stru_100894270);
  }
  sub_100413CBC(qword_1008D9270, (uint64_t)a1);
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_100894290);
  }
  sub_1006225C0((void *)qword_1008D5F18, (uint64_t)(a1 + 1));
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_1008942B0);
  }
  sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, (uint64_t)(a1 + 2));
  uint64_t v2 = operator new(0x58uLL);
  __int128 v45 = &off_10087FAA8;
  int v46 = 0LL;
  sub_10038BEAC((uint64_t)v2, 0, (uint64_t)&v45);
  a1[15] = v2;
  __int128 v45 = &off_10087FAA8;
  if (v46 && (sub_1002CD254(v46), (uint64_t v2 = (void *)a1[15]) == 0LL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100674B18();
    }
  }

  else
  {
    *(_BYTE *)(v2[1] + 26LL) = 1;
    __int16 v44 = 0;
    uint64_t v3 = sub_1002E6BF0();
    else {
      __int16 v4 = 640;
    }
    __int16 v44 = v4;
    unint64_t v5 = operator new(0x58uLL);
    sub_10056AB04(&v45, &v44, 2uLL);
    sub_10038BEAC((uint64_t)v5, 0, (uint64_t)&v45);
    __int128 v45 = &off_10087FAA8;
    if (v46) {
      sub_1002CD254(v46);
    }
    *(_BYTE *)(v5[1] + 26LL) = 1;
    unint64_t v6 = (char *)operator new(0x88uLL);
    __int128 v67 = xmmword_1006BD98C;
    int v68 = 0;
    sub_100634334(&v69, (__n128 *)&v67);
    *((_DWORD *)v6 + 6) = 0;
    *((_DWORD *)v6 + 4) = 0;
    *(void *)unint64_t v6 = off_1008A02C0;
    *((void *)v6 + 1) = v6 + 24;
    *((void *)v6 + 14) = 0LL;
    *((void *)v6 + 15) = 0LL;
    v6[128] = 0;
    *((_DWORD *)v6 + 11) = 0;
    *(_OWORD *)(v6 + 28) = xmmword_1006C259C;
    *((void *)v6 + 7) = 0LL;
    *((void *)v6 + 8) = 0LL;
    *((void *)v6 + 6) = 0LL;
    *((_DWORD *)v6 + 18) = 2;
    *((_DWORD *)v6 + 23) = v70;
    *(__n128 *)(v6 + 76) = v69;
    *((void *)v6 + 12) = a1[15];
    *((void *)v6 + 13) = 0LL;
    uint64_t v7 = (char *)operator new(0x88uLL);
    __int128 v63 = xmmword_1006BD9A0;
    int v64 = 0;
    sub_100634334(&v65, (__n128 *)&v63);
    *((_DWORD *)v7 + 6) = 0;
    *((_DWORD *)v7 + 4) = 0;
    *(void *)uint64_t v7 = off_1008A02C0;
    *((void *)v7 + 1) = v7 + 24;
    *((void *)v7 + 14) = 0LL;
    *((void *)v7 + 15) = 0LL;
    v7[128] = 0;
    *((_DWORD *)v7 + 11) = 0;
    *(_OWORD *)(v7 + 28) = xmmword_1006C259C;
    *((void *)v7 + 7) = 0LL;
    *((void *)v7 + 8) = 0LL;
    *((void *)v7 + 6) = 0LL;
    *((_DWORD *)v7 + 18) = 2;
    *((_DWORD *)v7 + 23) = v66;
    *(__n128 *)(v7 + 76) = v65;
    *((void *)v7 + 12) = v5;
    *((void *)v7 + 13) = 0LL;
    size_t v8 = (char *)operator new(0xC0uLL);
    __int128 v59 = xmmword_1006BD964;
    int v60 = 0;
    sub_100634334(&v61, (__n128 *)&v59);
    *((_DWORD *)v8 + 4) = 0;
    *(void *)size_t v8 = off_1008A0320;
    *((void *)v8 + 1) = v8 + 24;
    v8[96] = 1;
    *((void *)v8 + 22) = 0LL;
    *((void *)v8 + 23) = 0LL;
    *((void *)v8 + 21) = 0LL;
    *((void *)v8 + 14) = 0LL;
    *((void *)v8 + 15) = 0LL;
    *((void *)v8 + 13) = 0LL;
    v8[128] = 0;
    *((void *)v8 + 18) = 0LL;
    *((void *)v8 + 19) = 0LL;
    *((void *)v8 + 17) = 0LL;
    v8[160] = 0;
    *(__n128 *)(v8 + 72) = v61;
    unsigned int v9 = v62;
    *((_DWORD *)v8 + 6) = 0;
    *((_DWORD *)v8 + 11) = 0;
    *(_OWORD *)(v8 + 28) = xmmword_1006C2574;
    *((void *)v8 + 7) = 0LL;
    *((void *)v8 + 8) = 0LL;
    *((void *)v8 + 6) = 0LL;
    *((void *)v8 + 11) = v9;
    a1[14] = v8;
    sub_100381DC0(v8, (uint64_t)v6);
    sub_100381DC0((void *)a1[14], (uint64_t)v7);
    uint64_t v11 = (void *)a1[46];
    unint64_t v10 = a1[47];
    if ((unint64_t)v11 >= v10)
    {
      uint64_t v13 = a1[45];
      uint64_t v14 = ((uint64_t)v11 - v13) >> 3;
      uint64_t v15 = v10 - v13;
      uint64_t v16 = v15 >> 2;
      else {
        unint64_t v17 = v16;
      }
      if (v17) {
        uint64_t v18 = (char *)sub_100008BA0((uint64_t)(a1 + 47), v17);
      }
      else {
        uint64_t v18 = 0LL;
      }
      uint64_t v19 = &v18[8 * v14];
      __n128 v20 = &v18[8 * v17];
      *(void *)uint64_t v19 = a1[14];
      unint64_t v12 = v19 + 8;
      int v22 = (char *)a1[45];
      __int128 v21 = (char *)a1[46];
      if (v21 != v22)
      {
        do
        {
          uint64_t v23 = *((void *)v21 - 1);
          v21 -= 8;
          *((void *)v19 - 1) = v23;
          v19 -= 8;
        }

        while (v21 != v22);
        __int128 v21 = (char *)a1[45];
      }

      a1[45] = v19;
      a1[46] = v12;
      a1[47] = v20;
      if (v21) {
        operator delete(v21);
      }
    }

    else
    {
      *uint64_t v11 = a1[14];
      unint64_t v12 = v11 + 1;
    }

    a1[46] = v12;
    int v24 = operator new(0x58uLL);
    __int128 v45 = &off_10087FAA8;
    int v46 = 0LL;
    sub_10038BEAC((uint64_t)v24, 0, (uint64_t)&v45);
    __int128 v45 = &off_10087FAA8;
    if (v46) {
      sub_1002CD254(v46);
    }
    unsigned int v25 = (char *)operator new(0x50uLL);
    __int128 v55 = xmmword_1006BD914;
    int v56 = 0;
    sub_100634334(&v57, (__n128 *)&v55);
    *((_DWORD *)v25 + 6) = 0;
    *((_DWORD *)v25 + 4) = 0;
    v25[20] = 0;
    *(void *)unsigned int v25 = &off_1008A0178;
    *((void *)v25 + 1) = v25 + 24;
    *(__n128 *)(v25 + 28) = v57;
    *((_DWORD *)v25 + 11) = v58;
    *((_OWORD *)v25 + 3) = 0u;
    *((_OWORD *)v25 + 4) = 0u;
    a1[41] = v25;
    int v26 = (char *)operator new(0x88uLL);
    __int128 v51 = xmmword_1006BD9C8;
    int v52 = 0;
    sub_100634334(&v53, (__n128 *)&v51);
    *((_DWORD *)v26 + 6) = 0;
    *((_DWORD *)v26 + 4) = 0;
    *(void *)int v26 = off_1008A02C0;
    *((void *)v26 + 1) = v26 + 24;
    *((void *)v26 + 14) = 0LL;
    *((void *)v26 + 15) = 0LL;
    v26[128] = 0;
    *((_DWORD *)v26 + 11) = 0;
    *(_OWORD *)(v26 + 28) = xmmword_1006C259C;
    *((void *)v26 + 7) = 0LL;
    *((void *)v26 + 8) = 0LL;
    *((void *)v26 + 6) = 0LL;
    *((_DWORD *)v26 + 18) = 32;
    *((_DWORD *)v26 + 23) = v54;
    *(__n128 *)(v26 + 76) = v53;
    a1[17] = v26;
    uint64_t v27 = a1[41];
    *((void *)v26 + 12) = v24;
    *((void *)v26 + 13) = 0LL;
    sub_1003826DC(v26, v27);
    int v28 = (char *)operator new(0xC0uLL);
    __int128 v47 = xmmword_1006BD978;
    int v48 = 0;
    sub_100634334(&v49, (__n128 *)&v47);
    *((_DWORD *)v28 + 4) = 0;
    *(void *)int v28 = off_1008A0320;
    *((void *)v28 + 1) = v28 + 24;
    v28[96] = 1;
    *((void *)v28 + 22) = 0LL;
    *((void *)v28 + 23) = 0LL;
    *((void *)v28 + 21) = 0LL;
    *((void *)v28 + 14) = 0LL;
    *((void *)v28 + 15) = 0LL;
    *((void *)v28 + 13) = 0LL;
    v28[128] = 0;
    *((void *)v28 + 18) = 0LL;
    *((void *)v28 + 19) = 0LL;
    *((void *)v28 + 17) = 0LL;
    v28[160] = 0;
    unsigned int v29 = v50;
    *(__n128 *)(v28 + 72) = v49;
    *((_DWORD *)v28 + 6) = 0;
    *((_DWORD *)v28 + 11) = 0;
    *(_OWORD *)(v28 + 28) = xmmword_1006C2574;
    *((void *)v28 + 7) = 0LL;
    *((void *)v28 + 8) = 0LL;
    *((void *)v28 + 6) = 0LL;
    *((void *)v28 + 11) = v29;
    a1[16] = v28;
    sub_100381DC0(v28, a1[17]);
    __int128 v31 = (void *)a1[46];
    unint64_t v30 = a1[47];
    if ((unint64_t)v31 >= v30)
    {
      uint64_t v33 = a1[45];
      uint64_t v34 = ((uint64_t)v31 - v33) >> 3;
      uint64_t v35 = v30 - v33;
      uint64_t v36 = v35 >> 2;
      else {
        unint64_t v37 = v36;
      }
      if (v37) {
        int v38 = (char *)sub_100008BA0((uint64_t)(a1 + 47), v37);
      }
      else {
        int v38 = 0LL;
      }
      __int128 v39 = &v38[8 * v34];
      int v40 = &v38[8 * v37];
      *(void *)__int128 v39 = a1[16];
      int v32 = v39 + 8;
      int v42 = (char *)a1[45];
      __int128 v41 = (char *)a1[46];
      if (v41 != v42)
      {
        do
        {
          uint64_t v43 = *((void *)v41 - 1);
          v41 -= 8;
          *((void *)v39 - 1) = v43;
          v39 -= 8;
        }

        while (v41 != v42);
        __int128 v41 = (char *)a1[45];
      }

      a1[45] = v39;
      a1[46] = v32;
      a1[47] = v40;
      if (v41) {
        operator delete(v41);
      }
    }

    else
    {
      *__int128 v31 = a1[16];
      int v32 = v31 + 1;
    }

    a1[46] = v32;
    sub_100380B14((uint64_t)a1);
  }

void sub_100382678( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void sub_1003826DC(void *a1, uint64_t a2)
{
  unint64_t v6 = a1[15];
  uint64_t v4 = (uint64_t)(a1 + 15);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = a1[13];
    uint64_t v10 = ((uint64_t)v7 - v9) >> 3;
    uint64_t v11 = v5 - v9;
    uint64_t v12 = v11 >> 2;
    else {
      unint64_t v13 = v12;
    }
    if (v13) {
      uint64_t v14 = (char *)sub_100008BA0(v4, v13);
    }
    else {
      uint64_t v14 = 0LL;
    }
    uint64_t v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    *(void *)uint64_t v15 = a2;
    size_t v8 = v15 + 8;
    uint64_t v18 = (char *)a1[13];
    unint64_t v17 = (char *)a1[14];
    if (v17 != v18)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }

      while (v17 != v18);
      unint64_t v17 = (char *)a1[13];
    }

    a1[13] = v15;
    a1[14] = v8;
    a1[15] = v16;
    if (v17) {
      operator delete(v17);
    }
  }

  else
  {
    void *v7 = a2;
    size_t v8 = v7 + 1;
  }

  a1[14] = v8;
}

_BYTE *sub_1003827AC(uint64_t a1)
{
  char v44 = 0;
  sub_100242CA4(&v44);
  if (sub_1001BEB38())
  {
    if (sub_1001C4C9C())
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
        sub_100674BF0();
      }
    }

    else
    {
      v42[0] = *(_OWORD *)off_100893F90;
      v42[1] = *(_OWORD *)off_100893FA0;
      v42[2] = *(_OWORD *)off_100893FB0;
      uint64_t v43 = sub_100383284;
      sub_1001A5790((uint64_t)v42);
      sub_100242CD0(&v44);
      v41[0] = 0LL;
      v41[1] = 0LL;
      sub_100242F28((uint64_t)v41, a1 + 40);
      std::string __p = 0LL;
      __int128 v39 = 0LL;
      uint64_t v40 = 0LL;
      sub_100240540(&__p, a1 + 360);
      *(void *)(a1 + 368) = *(void *)(a1 + 360);
      *(_BYTE *)(a1 + 32) = 1;
      uint64_t v2 = (uint64_t *)__p;
      if (__p != v39)
      {
        unsigned __int16 v3 = 0;
        unsigned __int16 v4 = 0;
        while (1)
        {
          uint64_t v5 = *v2;
          if (sub_1003832E0(a1, *v2, 0))
          {
            uint64_t v6 = *(void *)(a1 + 112);
            if (v5 == v6 || v5 == *(void *)(a1 + 128))
            {
              unint64_t v30 = (os_log_s *)qword_1008F75B0;
              if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
                sub_100674B70(v5 == v6, v30, v31);
              }
              *(_BYTE *)(a1 + 32) = 0;
              goto LABEL_74;
            }

            uint64_t v7 = (os_log_s *)qword_1008F75B0;
            if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
            {
              sub_100531170((void *)v5, &src);
              size_t v8 = (src.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &src : (std::string *)src.__r_.__value_.__r.__words[0];
              LODWORD(buf) = 136446210;
              *(void *)((char *)&buf + 4) = v8;
              _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Failed to publish service %{public}s!",  (uint8_t *)&buf,  0xCu);
            }
          }

          else if (v2 == __p)
          {
            unsigned __int16 v3 = **(_WORD **)(v5 + 8);
          }

          else
          {
            unsigned __int16 v4 = *(_WORD *)(v5 + 48);
          }

          if (++v2 == v39) {
            goto LABEL_22;
          }
        }
      }

      unsigned __int16 v4 = 0;
      unsigned __int16 v3 = 0;
LABEL_22:
      char v37 = 0;
      uint64_t v9 = sub_1002E6E00();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 8LL))(v9))
      {
        uint64_t v10 = sub_1002E6E00();
        sub_10002418C(&src, "CATT");
        sub_10002418C(&buf, "DisableSdp");
        (*(void (**)(uint64_t, std::string *, __int128 *, char *))(*(void *)v10 + 72LL))( v10,  &src,  &buf,  &v37);
        if (v52 < 0) {
          operator delete((void *)buf);
        }
      }

      if (!v37)
      {
        sub_100242C98(&v44);
        sub_1000B2B44(v3, v4);
        sub_100242CD0(&v44);
      }

      if (*(unsigned __int16 *)(*(void *)(a1 + 128) + 48LL) <= *(unsigned __int16 *)(*(void *)(a1 + 112) + 48LL)
        && os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT))
      {
        sub_100674B44();
      }

      __int128 v35 = 0u;
      __int128 v36 = 0u;
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      if (qword_1008D5F20 != -1) {
        dispatch_once(&qword_1008D5F20, &stru_100894290);
      }
      id v11 = sub_100626468(qword_1008D5F18);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      id v13 = [v12 countByEnumeratingWithState:&v33 objects:v49 count:16];
      if (v13)
      {
        uint64_t v14 = *(void *)v34;
        do
        {
          uint64_t v15 = 0LL;
          do
          {
            if (*(void *)v34 != v14) {
              objc_enumerationMutation(v12);
            }
            uint64_t v16 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)v15);
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_1008942D0);
            }
            if (sub_1005CCCA0((uint64_t)off_1008D5F28, v16))
            {
              memset(&src, 0, 20);
              sub_100241F90(&src, v16);
              LOWORD(src.__r_.__value_.__r.__words[2]) = *(_WORD *)(*(void *)(a1 + 128) + 48LL) + 1;
              WORD1(src.__r_.__value_.__r.__words[2]) = -1;
              unint64_t v17 = *(void *)(a1 + 344);
              if (v17 >= *(void *)(a1 + 352))
              {
                uint64_t v18 = sub_10038D264((uint64_t *)(a1 + 336), (uint64_t)&src);
              }

              else
              {
                uuid_copy(*(unsigned __int8 **)(a1 + 344), (const unsigned __int8 *)&src);
                *(_DWORD *)(v17 + 16) = src.__r_.__value_.__r.__words[2];
                uint64_t v18 = v17 + 20;
                *(void *)(a1 + 344) = v17 + 20;
              }

              *(void *)(a1 + 344) = v18;
              uint64_t v19 = (os_log_s *)qword_1008F75B0;
              if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf) = 138543362;
                *(void *)((char *)&buf + 4) = v16;
                _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Queueing services changed notification for LE device %{public}@",  (uint8_t *)&buf,  0xCu);
              }
            }

            uint64_t v15 = (char *)v15 + 1;
          }

          while (v13 != v15);
          id v13 = [v12 countByEnumeratingWithState:&v33 objects:v49 count:16];
        }

        while (v13);
      }

      memset(&src, 0, sizeof(src));
      if (qword_1008D67A8 != -1) {
        dispatch_once(&qword_1008D67A8, &stru_1008942F0);
      }
      sub_10052AFEC((uint64_t)off_1008D67A0, (void ***)&src);
      std::string::size_type size = src.__r_.__value_.__l.__size_;
      for (i = (uint64_t *)src.__r_.__value_.__r.__words[0]; i != (uint64_t *)size; ++i)
      {
        int v22 = (unsigned __int8 *)*i;
        if (sub_1003D24F8(*i))
        {
          *(void *)uu = 0LL;
          uint64_t v48 = 0LL;
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_1008942D0);
          }
          sub_1005C8684( (uint64_t)off_1008D5F28,  ((unint64_t)v22[128] << 40) | ((unint64_t)v22[129] << 32) | ((unint64_t)v22[130] << 24) | ((unint64_t)v22[131] << 16) | ((unint64_t)v22[132] << 8) | v22[133],  1u,  0,  0LL,  0LL,  uu);
          if (uuid_is_null(uu))
          {
            uint64_t v23 = (os_log_s *)qword_1008F75B0;
            if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT))
            {
              sub_1003CF00C((uint64_t)v22, &buf);
              unsigned int v29 = v52 >= 0 ? &buf : (__int128 *)buf;
              *(_DWORD *)__int128 v45 = 136446210;
              int v46 = v29;
              _os_log_fault_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_FAULT,  "Failed to start tracking tracking a UUID for device %{public}s",  v45,  0xCu);
              if (v52 < 0) {
                operator delete((void *)buf);
              }
            }
          }

          __int128 buf = 0uLL;
          int v51 = 0;
          uuid_copy((unsigned __int8 *)&buf, uu);
          LOWORD(v51) = *(_WORD *)(*(void *)(a1 + 128) + 48LL) + 1;
          HIWORD(v51) = -1;
          unint64_t v24 = *(void *)(a1 + 344);
          if (v24 >= *(void *)(a1 + 352))
          {
            uint64_t v25 = sub_10038D264((uint64_t *)(a1 + 336), (uint64_t)&buf);
          }

          else
          {
            uuid_copy(*(unsigned __int8 **)(a1 + 344), (const unsigned __int8 *)&buf);
            *(_DWORD *)(v24 + 16) = v51;
            uint64_t v25 = v24 + 20;
            *(void *)(a1 + 344) = v24 + 20;
          }

          *(void *)(a1 + 344) = v25;
          int v26 = (os_log_s *)qword_1008F75B0;
          if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v27 = sub_100241F94(uu);
            int v28 = (__int128 *)objc_claimAutoreleasedReturnValue(v27);
            *(_DWORD *)__int128 v45 = 138543362;
            int v46 = v28;
            _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Queueing services changed notification for Classic device %{public}@",  v45,  0xCu);
          }
        }
      }

      sub_1003843F0(a1);
      if (src.__r_.__value_.__r.__words[0])
      {
        src.__r_.__value_.__l.__size_ = src.__r_.__value_.__r.__words[0];
        operator delete(src.__r_.__value_.__l.__data_);
      }

void sub_100382F30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a25);
  sub_100242CD8(&a37);
  _Unwind_Resume(a1);
}

BOOL sub_100383014(__n128 *a1)
{
  __n128 v9 = 0uLL;
  int v10 = 0;
  __n128 v7 = *a1;
  unsigned __int32 v8 = a1[1].n128_u32[0];
  sub_100634334(&v9, &v7);
  __int128 v5 = xmmword_1006BD89C;
  int v6 = 0;
  __int128 v3 = xmmword_1006BD8B0;
  int v4 = 0;
  return sub_1001BEC7C((unsigned __int8 *)&v9, (unsigned __int8 *)&v3);
}

BOOL sub_1003830CC(int a1)
{
  uint64_t v2 = sub_100404FE8();
  __int128 v3 = operator new(0x10uLL);
  void v3[4] = 1;
  *(void *)__int128 v3 = &off_100894030;
  *((_DWORD *)v3 + 3) = a1;
  return sub_100405744(v2, v3);
}

BOOL sub_100383118(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  __int128 v3 = operator new(0x18uLL);
  void v3[4] = 1;
  *(void *)__int128 v3 = &off_1008940C0;
  *((void *)v3 + 2) = a1;
  return sub_100405744(v2, v3);
}

BOOL sub_100383164(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  __int128 v3 = operator new(0x18uLL);
  void v3[4] = 1;
  *(void *)__int128 v3 = &off_1008940F8;
  *((void *)v3 + 2) = a1;
  return sub_100405744(v2, v3);
}

BOOL sub_1003831B0(int a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v10 = sub_100404FE8();
  id v11 = operator new(0x30uLL);
  v11[4] = 1;
  *(void *)id v11 = &off_100894168;
  *((_DWORD *)v11 + 3) = a1;
  *((void *)v11 + 2) = a2;
  *((_BYTE *)v11 + 24) = a3;
  *((void *)v11 + 4) = a4;
  *((_BYTE *)v11 + 40) = a5;
  return sub_100405744(v10, v11);
}

BOOL sub_10038322C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100404FE8();
  __int128 v5 = operator new(0x20uLL);
  v5[4] = 1;
  *(void *)__int128 v5 = &off_1008941A0;
  *((void *)v5 + 2) = a1;
  *((void *)v5 + 3) = a2;
  return sub_100405744(v4, v5);
}

BOOL sub_100383284(uint64_t a1, __int16 a2)
{
  uint64_t v4 = sub_100404FE8();
  __int128 v5 = operator new(0x20uLL);
  v5[4] = 1;
  *(void *)__int128 v5 = &off_100894088;
  *((void *)v5 + 2) = a1;
  v5[12] = a2;
  return sub_100405744(v4, v5);
}

uint64_t sub_1003832E0(uint64_t a1, uint64_t a2, int a3)
{
  int v111 = 0LL;
  __n128 v112 = 0LL;
  uint64_t v113 = 0LL;
  sub_100240540(&v111, a2 + 104);
  std::string __p = 0LL;
  int v109 = 0LL;
  uint64_t v110 = 0LL;
  sub_100240540(&__p, a2 + 136);
  uint64_t v6 = (v112 - (_BYTE *)v111) >> 3;
  for (i = (char *)__p; i != v109; i += 8)
  {
    sub_100240540(&buf, *(void *)i + 104LL);
    __n128 v8 = buf;
    if (buf.n128_u64[0])
    {
      buf.n128_u64[1] = buf.n128_u64[0];
      operator delete((void *)buf.n128_u64[0]);
    }

    uint64_t v6 = ((uint64_t)(v8.n128_u64[1] - v8.n128_u64[0]) >> 3) + (unsigned __int16)v6 + 2;
  }

  v107[0] = 0LL;
  v107[1] = 0LL;
  sub_100242F28((uint64_t)v107, a1 + 40);
  char v106 = 0;
  uint64_t v9 = sub_1002E6E00();
  sub_10002418C(&buf, "GATT");
  sub_10002418C(&v164, "DUMMY_DIS");
  int v10 = (*(uint64_t (**)(uint64_t, __n128 *, __n128 *, char *))(*(void *)v9 + 72LL))(v9, &buf, &v164, &v106);
  if (v106) {
    int v11 = 0;
  }
  else {
    int v11 = v10;
  }
  if (v11 == 1)
  {
    __n128 v170 = *(__n128 *)(a2 + 72);
    int v171 = *(_DWORD *)(a2 + 88);
    sub_100634334(&v163, &v170);
    __int128 v161 = xmmword_1006BD9DC;
    int v162 = 0;
    BOOL v13 = sub_1001BEC7C(v12, (unsigned __int8 *)&v161);
    if (v166 < 0) {
      operator delete((void *)v164.n128_u64[0]);
    }
    if (v169 < 0)
    {
      operator delete((void *)buf.n128_u64[0]);
      if (!v13) {
        goto LABEL_23;
      }
    }

    else if (!v13)
    {
      goto LABEL_23;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100674C1C();
    }
    uint64_t v14 = 905LL;
    goto LABEL_132;
  }

  if (v166 < 0) {
    operator delete((void *)v164.n128_u64[0]);
  }
  if (v169 < 0) {
    operator delete((void *)buf.n128_u64[0]);
  }
LABEL_23:
  if (!*(_BYTE *)(a1 + 32))
  {
    uint64_t v18 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = "publish";
      if (a3) {
        uint64_t v19 = "republish";
      }
      buf.n128_u32[0] = 136446210;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Stack not started during attempt to %{public}s LE service",  (uint8_t *)&buf,  0xCu);
    }

    if ((a3 & 1) != 0)
    {
      uint64_t v14 = 111LL;
    }

    else
    {
      uint64_t v23 = *(void **)(a1 + 368);
      unint64_t v22 = *(void *)(a1 + 376);
      if ((unint64_t)v23 >= v22)
      {
        uint64_t v70 = *(void *)(a1 + 360);
        uint64_t v71 = ((uint64_t)v23 - v70) >> 3;
        uint64_t v72 = v22 - v70;
        uint64_t v73 = v72 >> 2;
        else {
          unint64_t v74 = v73;
        }
        if (v74) {
          int v75 = (char *)sub_100008BA0(a1 + 376, v74);
        }
        else {
          int v75 = 0LL;
        }
        int v79 = &v75[8 * v71];
        __n128 v80 = &v75[8 * v74];
        *(void *)int v79 = a2;
        unint64_t v24 = v79 + 8;
        __int128 v82 = *(char **)(a1 + 360);
        int v81 = *(char **)(a1 + 368);
        if (v81 != v82)
        {
          do
          {
            uint64_t v83 = *((void *)v81 - 1);
            v81 -= 8;
            *((void *)v79 - 1) = v83;
            v79 -= 8;
          }

          while (v81 != v82);
          int v81 = *(char **)(a1 + 360);
        }

        *(void *)(a1 + 360) = v79;
        *(void *)(a1 + 368) = v24;
        *(void *)(a1 + 376) = v80;
        if (v81) {
          operator delete(v81);
        }
      }

      else
      {
        *uint64_t v23 = a2;
        unint64_t v24 = v23 + 1;
      }

      uint64_t v14 = 0LL;
      *(void *)(a1 + 368) = v24;
    }

LABEL_89:
      BOOL v45 = v17 == (char *)v28;
      unint64_t v17 = v102;
      if (!v45) {
        goto LABEL_90;
      }
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
        sub_100674DD4();
      }
      sub_1001C4E78(*(unsigned __int16 **)(a2 + 8));
      uint64_t v14 = 908LL;
      goto LABEL_29;
    }

    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    do
    {
      uint64_t v35 = *(void *)(*(void *)v17 + 8LL);
      int v36 = *(_DWORD *)(v35 + 20);
      __n128 buf = *(__n128 *)(v35 + 4);
      int v168 = v36;
      sub_100634334(&v164, &buf);
      __int128 v130 = xmmword_1006BD900;
      int v131 = 0;
      if (sub_1001BEC7C(v37, (unsigned __int8 *)&v130))
      {
        if (!v34)
        {
          uint64_t v34 = *(void *)v17;
          goto LABEL_72;
        }

        unint64_t v17 = v102;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
          sub_100674E2C();
        }
LABEL_156:
        sub_1001C4E78(*(unsigned __int16 **)(a2 + 8));
        uint64_t v14 = 906LL;
        goto LABEL_29;
      }

      uint64_t v38 = *(void *)(*(void *)v17 + 8LL);
      int v39 = *(_DWORD *)(v38 + 20);
      __n128 buf = *(__n128 *)(v38 + 4);
      int v168 = v39;
      sub_100634334(&v164, &buf);
      __int128 v128 = xmmword_1006BD93C;
      int v129 = 0;
      if (sub_1001BEC7C(v40, (unsigned __int8 *)&v128))
      {
        if (v33)
        {
          unint64_t v17 = v102;
          if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
            sub_100674E58();
          }
          goto LABEL_156;
        }

        uint64_t v33 = *(void *)v17;
      }

    sub_1003A4CBC(v29, *(void *)(a1 + 184) + 16LL);
    return 0LL;
  }

  if (v22)
  {
    int v36 = sub_1003A5ABC(a1, v22);
    *(double *)(a1 + 272) = v36;
    uint64_t v37 = (os_log_s *)qword_1008F7558;
    uint64_t v38 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR);
    if (v38)
    {
      uint64_t v70 = *v18;
      *(_DWORD *)__n128 buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v70;
      int v75 = 1024;
      *(_DWORD *)unint64_t v76 = a3;
      *(_WORD *)&v76[4] = 2048;
      *(double *)&v76[6] = v36 / 1000.0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "Accepting remote UNKNOWN A2DP codec %x SEID %u config with sample rate of %2.1f KHz",  buf,  0x18u);
    }

    sub_1003A4CBC(v38, *(void *)(a1 + 184) + 16LL);
    uint64_t result = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_FAULT);
    if ((_DWORD)result)
    {
      sub_1006769F4();
      return 0LL;
    }
  }

  else
  {
    uint64_t v23 = **(_BYTE **)(*(void *)(v20 + 16) + 8LL);
    unint64_t v24 = v23 & 0x30;
    if (v24 == 48)
    {
      uint64_t v25 = sub_1003A5ABC(a1, 0);
    }

    else
    {
      int v39 = (v23 & 0x20) == 0;
      if (v24)
      {
        uint64_t v25 = dbl_1006C26A0[v39];
      }

      else
      {
        uint64_t v40 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_error_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "SBC set config received without any acceptable sample rate. Using default sample rate instead of rejecting",  buf,  2u);
          char v41 = *v18;
        }

        else
        {
          char v41 = 0;
        }

        uint64_t v25 = sub_1003A5ABC(a1, v41);
      }
    }

    *(double *)(a1 + 272) = v25;
    if (v25 == 44100.0) {
      uint64_t v42 = 33;
    }
    else {
      uint64_t v42 = 17;
    }
    **(_BYTE **)(*(void *)(a1 + 184) + 24LL) = v42;
    else {
      int v43 = 42;
    }
    *(_DWORD *)(a1 + 264) = v43;
    uint64_t v73 = 0;
    char v44 = sub_1002E6E00();
    sub_10002418C(buf, "A2DP");
    sub_10002418C(__p, "SBCBitpool");
    BOOL v45 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v44 + 128LL))(v44, buf, __p, &v73);
    if (v72 < 0) {
      operator delete(__p[0]);
    }
    if ((v76[13] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v45)
    {
      uint64_t v46 = v73;
      int v47 = (os_log_s *)qword_1008F7558;
      if ((v73 - 251) > 0xFFFFFF06)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__n128 buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v46;
          _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Warning: Setting user defined SBC Bitpool value to %d",  buf,  8u);
          uint64_t v46 = v73;
        }

        *(_DWORD *)(a1 + 264) = v46;
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
      {
        sub_100676AC8(v47, v48, v49, v50, v51, v52, v53, v54);
      }
    }

    else
    {
      char v55 = sub_1002E6BF0();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v55 + 384LL))(v55))
      {
        uint64_t v56 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "Adjusting bitpool if needed - we are Peripheral",  buf,  2u);
        }

        sub_1003A5F30(a1);
      }
    }

    sub_1003A60AC(a1);
    uint64_t v57 = *(void *)(v20 + 16);
    uint64_t v58 = *(unsigned __int8 *)(*(void *)(v57 + 8) + 2LL);
    if (v43 >= v58)
    {
      if (*(_DWORD *)(a1 + 264) < v58)
      {
        int v60 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__n128 buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v58;
          _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "Warning: Increasing SBC Bitpool to %d based on sink's Minimum Bitpool Value",  buf,  8u);
          uint64_t v57 = *(void *)(v20 + 16);
          uint64_t v58 = *(unsigned __int8 *)(*(void *)(v57 + 8) + 2LL);
        }

        *(_DWORD *)(a1 + 264) = v58;
      }
    }

    else
    {
      int v59 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__n128 buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v58;
        _os_log_error_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_ERROR,  "Ignoring sink's SBC Minimum Bitpool Value of %d because it is too high",  buf,  8u);
        uint64_t v57 = *(void *)(v20 + 16);
      }
    }

    uint64_t v61 = *(unsigned __int8 *)(*(void *)(v57 + 8) + 3LL);
    if (v61 > 1)
    {
      if (*(_DWORD *)(a1 + 264) > v61)
      {
        int v62 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__n128 buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v61;
          _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "Warning: Reducing SBC Bitpool to %d based on sink's Maximum Bitpool Value",  buf,  8u);
          uint64_t v61 = *(unsigned __int8 *)(*(void *)(*(void *)(v20 + 16) + 8LL) + 3LL);
        }

        *(_DWORD *)(a1 + 264) = v61;
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
    {
      sub_100676A64();
    }

    __int128 v63 = (os_log_s *)qword_1008F7558;
    int v64 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v64)
    {
      __n128 v65 = *(_DWORD *)(a1 + 264);
      uint64_t v66 = *(double *)(a1 + 272);
      *(_DWORD *)__n128 buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = a3;
      int v75 = 1024;
      *(_DWORD *)unint64_t v76 = v65;
      *(_WORD *)&v76[4] = 2048;
      *(double *)&v76[6] = v66 / 1000.0;
      _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "Accepting remote SBC SEID %u config with bitpool %d and sample rate of %2.1f KHz",  buf,  0x18u);
      return 0LL;
    }
  }

  return result;
}

    dispatch_once(&qword_1008D9148, &stru_100897F38);
    uint64_t v21 = 0;
    goto LABEL_43;
  }

  if (qword_1008D9148 != -1) {
    dispatch_once(&qword_1008D9148, &stru_100897F38);
  }
  uint64_t v25 = sub_10057F588((uint64_t)off_1008D9140, a2);
  unint64_t v22 = v25;
  if (v25)
  {
    if (v25 == 4506)
    {
      unint64_t v28 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a2, buf);
        unsigned int v29 = v41 >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)uint64_t v35 = 136446210;
        *(void *)&v35[4] = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "PFC device %{public}s already connected!",  v35,  0xCu);
        if (SHIBYTE(v41) < 0) {
          operator delete(*(void **)buf);
        }
      }
    }

    else
    {
      if (v25 == 4508)
      {
        int v26 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C(a2, buf);
          uint64_t v27 = v41 >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)uint64_t v35 = 136446210;
          *(void *)&v35[4] = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "PFC connection for device %{public}s already in progress",  v35,  0xCu);
          if (SHIBYTE(v41) < 0) {
            operator delete(*(void **)buf);
          }
        }

        sub_1003E4044(a2, 0);
        unint64_t v22 = 0;
        goto LABEL_44;
      }

      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(a2, buf);
        sub_10067DE28();
      }
    }

    if (qword_1008D9148 == -1)
    {
      uint64_t v21 = 0;
      goto LABEL_43;
    }

    goto LABEL_89;
  }

  uint64_t v33 = 0;
LABEL_90:
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }

            return;
          case 18LL:
            uint64_t v73 = sub_10025E0F0(v9, "kCBMsgArgDeviceUUID");
            unint64_t v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
            int v75 = xpc_dictionary_get_int64(v10, "kCBLePowerControlDisable");
            unint64_t v76 = xpc_dictionary_get_int64(v10, "kCBLePowerControlRssiMin");
            int v77 = xpc_dictionary_get_int64(v10, "kCBLePowerControlRssiMax");
            __int128 v78 = sub_100404FE8();
            v182[0] = _NSConcreteStackBlock;
            v182[1] = 3221225472LL;
            v182[2] = sub_1004DFBF0;
            v182[3] = &unk_10089D0A8;
            v184 = a1;
            int v79 = v74;
            v186 = v75;
            v187 = v76;
            v188 = v77;
            v183 = v79;
            v185 = a2;
            sub_1004054B4(v78, v182);

            return;
          case 19LL:
            __n128 v80 = sub_10025E0F0(v9, "kCBMsgArgDeviceUUID");
            int v81 = (void *)objc_claimAutoreleasedReturnValue(v80);
            __int128 v82 = sub_10025E1C8(v10, "operation");
            uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
            __n128 v84 = xpc_dictionary_get_int64(v10, "command");
            uint64_t v85 = sub_100404FE8();
            v199[0] = _NSConcreteStackBlock;
            v199[1] = 3221225472LL;
            v199[2] = sub_1004DFA30;
            v199[3] = &unk_10089D058;
            v202 = a1;
            uint64_t v86 = v83;
            v200 = v86;
            v204 = v84;
            uint64_t v87 = v81;
            v201 = v87;
            v203 = a2;
            sub_1004054B4(v85, v199);

            return;
          case 20LL:
            uint64_t v88 = sub_10025E0F0(v9, "kCBMsgArgDeviceUUID");
            uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue(v88);
            unint64_t v90 = xpc_dictionary_get_double(v10, "kCBMsgArgMinConnectionInterval");
            int v91 = xpc_dictionary_get_double(v10, "kCBMsgArgPreferredConnectionInterval");
            __n128 v92 = xpc_dictionary_get_double(v10, "kCBMsgArgMaxConnectionInterval");
            int v93 = xpc_dictionary_get_int64(v10, "kCBMsgArgPreferredConnectionLatency");
            __int128 v94 = xpc_dictionary_get_int64(v10, "kCBMsgArgMaxConnectionLatency");
            int v95 = xpc_dictionary_get_int64(v10, "kCBMsgArgMinCELength");
            uint64_t v96 = xpc_dictionary_get_int64(v10, "kCBMsgArgMaxCELength");
            int v97 = xpc_dictionary_get_int64(v10, "kCBMsgArgSupervisionTimeout");
            uint64_t v98 = sub_100404FE8();
            v189[0] = _NSConcreteStackBlock;
            v189[1] = 3221225472LL;
            v189[2] = sub_1004DFB38;
            v189[3] = &unk_10089D080;
            uint64_t v99 = v89;
            v190 = v99;
            *(float *)&unint64_t v90 = v90;
            v191 = LODWORD(v90);
            *(float *)&int v91 = v91;
            v192 = LODWORD(v91);
            *(float *)&__n128 v92 = v92;
            v193 = LODWORD(v92);
            v194 = v95;
            v195 = v96;
            v196 = v93;
            v197 = v94;
            v198 = v97;
            sub_100405384(v98, v189);

            return;
          case 21LL:
            int v100 = sub_10025E0F0(v9, "kCBMsgArgDeviceUUID");
            int v101 = (void *)objc_claimAutoreleasedReturnValue(v100);
            __int128 v102 = xpc_dictionary_get_int64(v10, "command");
            int v103 = sub_100404FE8();
            v177[0] = _NSConcreteStackBlock;
            v177[1] = 3221225472LL;
            v177[2] = sub_1004DFC88;
            v177[3] = &unk_100889AA0;
            v179 = a1;
            v181 = v102;
            uint64_t v104 = v101;
            v178 = v104;
            v180 = a2;
            sub_1004054B4(v103, v177);

            return;
          case 22LL:
            char v105 = sub_10025E0F0(v9, "kCBMsgArgDeviceUUID");
            char v106 = (void *)objc_claimAutoreleasedReturnValue(v105);
            int v107 = xpc_dictionary_get_int64(v10, "command");
            __n128 v108 = sub_100404FE8();
            v172[0] = _NSConcreteStackBlock;
            v172[1] = 3221225472LL;
            v172[2] = sub_1004DFDB4;
            v172[3] = &unk_100889AA0;
            v174 = a1;
            v176 = v107;
            int v109 = v106;
            v173 = v109;
            v175 = a2;
            sub_1004054B4(v108, v172);

            return;
          default:
            if (os_log_type_enabled((os_log_t)qword_1008F75F0, OS_LOG_TYPE_ERROR)) {
              sub_100686DBC();
            }
            return;
        }
      }
    }
  }

  char v44 = sub_1002E6E00();
  sub_10002418C(buf, "CONNECTION");
  sub_10002418C(__p, "LeConnectionMagnetStageOneToDisabledValue");
  BOOL v45 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v44 + 88LL))(v44, buf, __p, &v79);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v45) {
      goto LABEL_97;
    }
  }

  else if (!v45)
  {
    goto LABEL_97;
  }

  uint64_t v46 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v79;
    _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "LeConnectionMagnetStageOneToDisabledValue =%d (override)",  buf,  8u);
  }

                  __int128 v5 = sub_1005963D8(a1, v3);
                  goto LABEL_94;
                case 4:
                  uint64_t v40 = (os_log_s *)qword_1008F7620;
                  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)__n128 buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "will add the device to connecting list once we're done with auto reconnecct",  buf,  2u);
                  }

  if (*((void *)a3 + 1) != 25LL) {
    goto LABEL_107;
  }
  uint64_t v35 = *(uint64_t **)a3;
LABEL_91:
  uint64_t v37 = *v35;
  uint64_t v38 = v35[1];
  int v39 = v35[2];
  uint64_t v40 = *((unsigned __int8 *)v35 + 24);
  if (v37 == 0x69464D736465656ELL && v38 == 0x69746E6568747541LL && v39 == 0x2E346E6F69746163LL && v40 == 48)
  {
    int v47 = sub_1002E8F6C();
    (*(void (**)(uint64_t))(*(void *)v47 + 168LL))(v47);
    uint64_t v19 = a3[23];
    if ((v19 & 0x80) == 0) {
      goto LABEL_102;
    }
  }

  else if ((v19 & 0x80) == 0)
  {
    goto LABEL_102;
  }

void sub_100384250( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }

  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100384384(uint64_t *a1, unsigned __int8 *src)
{
  unint64_t v4 = a1[1];
  if (v4 >= a1[2])
  {
    uint64_t result = sub_10038D264(a1, (uint64_t)src);
  }

  else
  {
    uuid_copy((unsigned __int8 *)a1[1], src);
    *(_DWORD *)(v4 + 16) = *((_DWORD *)src + 4);
    uint64_t result = v4 + 20;
    a1[1] = v4 + 20;
  }

  a1[1] = result;
  return result;
}

void sub_1003843E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1003843F0(uint64_t a1)
{
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, a1 + 40);
  uint64_t v1 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "statedump: Local database:",  (uint8_t *)&buf,  2u);
  }

  for (i = *(void ***)(a1 + 360); i != *(void ***)(a1 + 368); ++i)
  {
    __int128 v3 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      sub_100531170(*i, &buf);
      p_std::string buf = &buf;
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      LODWORD(v25.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "statedump:    %{public}s",  (uint8_t *)&v25,  0xCu);
    }

    memset(&buf, 0, sizeof(buf));
    sub_100240540(&buf, (uint64_t)(*i + 13));
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
    for (j = (void **)buf.__r_.__value_.__r.__words[0]; j != (void **)size; ++j)
    {
      __n128 v7 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
      {
        sub_100531170(*j, &v25);
        __n128 v8 = &v25;
        if ((v25.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          __n128 v8 = (std::string *)v25.__r_.__value_.__r.__words[0];
        }
        LODWORD(v24.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "statedump:    %{public}s",  (uint8_t *)&v24,  0xCu);
        std::string::size_type size = buf.__r_.__value_.__l.__size_;
      }
    }

    memset(&v25, 0, sizeof(v25));
    sub_100240540(&v25, (uint64_t)(*i + 17));
    uint64_t v9 = (void **)v25.__r_.__value_.__r.__words[0];
    if (v25.__r_.__value_.__r.__words[0] != v25.__r_.__value_.__l.__size_)
    {
      do
      {
        int v10 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
        {
          sub_100531170(*v9, &v24);
          if ((v24.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            int v11 = &v24;
          }
          else {
            int v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
          }
          LODWORD(v21.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v21.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "statedump:    %{public}s",  (uint8_t *)&v21,  0xCu);
          int v10 = (os_log_s *)qword_1008F75B0;
        }

        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          sub_100531170((void *)(*v9)[12], &v24);
          uint64_t v12 = (v24.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v24 : (std::string *)v24.__r_.__value_.__r.__words[0];
          LODWORD(v21.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v21.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "statedump:    %{public}s",  (uint8_t *)&v21,  0xCu);
        }

        memset(&v24, 0, sizeof(v24));
        sub_100240540(&v24, (uint64_t)(*v9 + 13));
        std::string::size_type v13 = v24.__r_.__value_.__l.__size_;
        uint64_t v14 = (void **)v24.__r_.__value_.__r.__words[0];
        if (v24.__r_.__value_.__r.__words[0] != v24.__r_.__value_.__l.__size_)
        {
          do
          {
            uint64_t v15 = (os_log_s *)qword_1008F75B0;
            if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
            {
              sub_100531170(*v14, &v21);
              if ((v21.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                int v16 = &v21;
              }
              else {
                int v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)unint64_t v22 = 136446210;
              uint64_t v23 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", v22, 0xCu);
              std::string::size_type v13 = v24.__r_.__value_.__l.__size_;
            }

            ++v14;
          }

          while (v14 != (void **)v13);
          uint64_t v14 = (void **)v24.__r_.__value_.__r.__words[0];
        }

        if (v14)
        {
          v24.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
          operator delete(v14);
        }

        ++v9;
      }

      while (v9 != (void **)v25.__r_.__value_.__l.__size_);
      uint64_t v9 = (void **)v25.__r_.__value_.__r.__words[0];
    }

    if (v9)
    {
      v25.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
      operator delete(v9);
    }

    if (buf.__r_.__value_.__r.__words[0])
    {
      buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }

  return sub_100242FAC((uint64_t)v20);
}

void sub_1003847F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26)
{
}

_BYTE *sub_10038486C(uint64_t a1)
{
  return sub_1003827AC(a1 - 16);
}

_BYTE *sub_100384874(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "GattServer::stackWillStop enter", buf, 2u);
  }

  char v21 = 0;
  sub_100242CA4(&v21);
  if (sub_1001BEB38())
  {
    sub_1001C4D10();
    sub_100242CD0(&v21);
    *(void *)std::string buf = 0LL;
    uint64_t v20 = 0LL;
    sub_100242F28((uint64_t)buf, a1 + 40);
    *(_BYTE *)(a1 + 32) = 0;
    *(void *)(a1 + 344) = *(void *)(a1 + 336);
    sub_10023BF24(a1 + 384, *(void **)(a1 + 392));
    *(void *)(a1 + 392) = 0LL;
    *(void *)(a1 + 400) = 0LL;
    *(void *)(a1 + 384) = a1 + 392;
    sub_10038CE5C(a1 + 408, *(void **)(a1 + 416));
    *(void *)(a1 + 416) = 0LL;
    *(void *)(a1 + 424) = 0LL;
    *(void *)(a1 + 408) = a1 + 416;
    unint64_t v3 = *(void *)(a1 + 464);
    unint64_t v4 = *(void ***)(a1 + 440);
    __int128 v5 = *(void ***)(a1 + 448);
    uint64_t v6 = &v4[v3 >> 8];
    if (v5 == v4) {
      uint64_t v7 = 0LL;
    }
    else {
      uint64_t v7 = (uint64_t)*v6 + 16 * v3;
    }
    while (1)
    {
      unint64_t v8 = (char *)v5 - (char *)v4;
      if (v8)
      {
        unint64_t v9 = *(void *)(a1 + 472) + *(void *)(a1 + 464);
        uint64_t v10 = *(uint64_t *)((char *)v4 + ((v9 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16 * v9;
      }

      else
      {
        uint64_t v10 = 0LL;
      }

      if (v7 == v10) {
        break;
      }
      uint64_t v11 = *(void *)(v7 + 8);
      if (v11)
      {
        *(void *)(v11 + 24) = &off_10087FAA8;
        uint64_t v12 = *(unsigned int **)(v11 + 32);
        if (v12) {
          sub_1002CD254(v12);
        }

        operator delete((void *)v11);
      }

      v7 += 16LL;
      if (v7 - (void)*v6 == 4096)
      {
        uint64_t v13 = (uint64_t)v6[1];
        ++v6;
        uint64_t v7 = v13;
      }

      unint64_t v4 = *(void ***)(a1 + 440);
      __int128 v5 = *(void ***)(a1 + 448);
    }

    *(void *)(a1 + 472) = 0LL;
    if (v8 >= 0x11)
    {
      do
      {
        operator delete(*v4);
        uint64_t v14 = *(void *)(a1 + 448);
        unint64_t v4 = (void **)(*(void *)(a1 + 440) + 8LL);
        *(void *)(a1 + 440) = v4;
        unint64_t v8 = v14 - (void)v4;
      }

      while (v8 > 0x10);
    }

    if (v8 >> 3 == 1)
    {
      uint64_t v15 = 128LL;
    }

    else
    {
      if (v8 >> 3 != 2)
      {
LABEL_25:
        *(_BYTE *)(a1 + 480) = 0;
        [*(id *)(a1 + 488) removeAllObjects];
        [*(id *)(a1 + 496) removeAllObjects];
        [*(id *)(a1 + 504) removeAllObjects];
        sub_10038CF40(a1 + 512, *(char **)(a1 + 520));
        *(void *)(a1 + 512) = a1 + 520;
        *(void *)(a1 + 528) = 0LL;
        *(void *)(a1 + 520) = 0LL;
        sub_10023BF24(a1 + 536, *(void **)(a1 + 544));
        *(void *)(a1 + 536) = a1 + 544;
        *(void *)(a1 + 552) = 0LL;
        *(void *)(a1 + 544) = 0LL;
        int v16 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v18 = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "GattServer::stackWillStop exit", v18, 2u);
        }

        sub_100242FAC((uint64_t)buf);
        return sub_100242CD8(&v21);
      }

      uint64_t v15 = 256LL;
    }

    *(void *)(a1 + 464) = v15;
    goto LABEL_25;
  }

  return sub_100242CD8(&v21);
}

void sub_100384AF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

_BYTE *sub_100384B18(uint64_t a1)
{
  return sub_100384874(a1 - 16);
}

uint64_t sub_100384B20(uint64_t a1, uint64_t a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 40);
  *(void *)(a1 + 104) = a2;
  return sub_100242FAC((uint64_t)v5);
}

void sub_100384B64(uint64_t a1, __int128 *a2)
{
  __int128 __dst = 0uLL;
  uint64_t v8 = 0LL;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100024238(&__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 __dst = *a2;
    uint64_t v8 = *((void *)a2 + 2);
  }

  uint64_t v3 = sub_100404FE8();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3321888768LL;
  void v4[2] = sub_100384C80;
  v4[3] = &unk_100893FC8;
  v4[4] = a1;
  if (SHIBYTE(v8) < 0)
  {
    sub_100024238(&__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }

  else
  {
    __int128 __p = __dst;
    uint64_t v6 = v8;
  }

  sub_100405384(v3, v4);
  if (SHIBYTE(v6) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_100384C4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_100384C80(uint64_t a1)
{
  return std::string::operator=((std::string *)(*(void *)(a1 + 32) + 304LL), (const std::string *)(a1 + 40));
}

void *sub_100384C90(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)(a1 + 40);
  __int128 v3 = *(_OWORD *)(a2 + 40);
  result[2] = *(void *)(a2 + 56);
  *(_OWORD *)uint64_t result = v3;
  return result;
}

void sub_100384CC0(uint64_t a1)
{
}

void sub_100384CD4(uint64_t a1, __int128 *a2)
{
}

uint64_t sub_100384CDC(uint64_t a1, int a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 40);
  unint64_t v4 = *(uint64_t **)(a1 + 360);
  __int128 v5 = *(uint64_t **)(a1 + 368);
  while (v4 != v5)
  {
    uint64_t v6 = *v4;
    if (*(_DWORD *)(*v4 + 16) == a2) {
      goto LABEL_6;
    }
    ++v4;
  }

  uint64_t v6 = 0LL;
LABEL_6:
  sub_100242FAC((uint64_t)v8);
  return v6;
}

uint64_t sub_100384D48( uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v14 = sub_100404FE8();
  uint64_t v15 = operator new(0x38uLL);
  v15[4] = 1;
  *(void *)uint64_t v15 = &off_100894210;
  *((_BYTE *)v15 + 10) = 0;
  *((void *)v15 + 2) = a1;
  v15[12] = a2;
  *((_DWORD *)v15 + 7) = a6;
  *((void *)v15 + 4) = a7;
  *((void *)v15 + 5) = a8;
  *((_BYTE *)v15 + 48) = a9;
  sub_100405744(v14, v15);
  return 240LL;
}

uint64_t sub_100384DDC( uint64_t a1, char a2, __int16 a3, const void *a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v17 = sub_100404FE8();
  uint64_t v18 = operator new(0x50uLL);
  sub_10056AB04(&v21, a4, a5);
  v18[4] = 1;
  *(void *)uint64_t v18 = &off_100894248;
  *((_BYTE *)v18 + 10) = 0;
  *((void *)v18 + 2) = a1;
  *((_BYTE *)v18 + 24) = a2;
  v18[13] = a3;
  uint64_t v19 = v22;
  *((void *)v18 + 4) = &off_10087FAA8;
  *((void *)v18 + 5) = v19;
  if (v19) {
    sub_1002CD1E0((uint64_t)v19);
  }
  *((_DWORD *)v18 + 12) = a6;
  *((void *)v18 + 7) = a7;
  *((void *)v18 + 8) = a8;
  *((_BYTE *)v18 + 72) = a9;
  sub_100405744(v17, v18);
  char v21 = &off_10087FAA8;
  if (v22) {
    sub_1002CD254(v22);
  }
  return 240LL;
}

void sub_100384ED4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_100384F0C( uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v14 = sub_100404FE8();
  uint64_t v15 = operator new(0x38uLL);
  v15[4] = 1;
  *(void *)uint64_t v15 = &off_100894210;
  *((_BYTE *)v15 + 10) = 1;
  *((void *)v15 + 2) = a1;
  v15[12] = a2;
  *((_DWORD *)v15 + 7) = a6;
  *((void *)v15 + 4) = a7;
  *((void *)v15 + 5) = a8;
  *((_BYTE *)v15 + 48) = a9;
  sub_100405744(v14, v15);
  return 240LL;
}

uint64_t sub_100384FA0( uint64_t a1, char a2, __int16 a3, const void *a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v17 = sub_100404FE8();
  uint64_t v18 = operator new(0x50uLL);
  sub_10056AB04(&v21, a4, a5);
  v18[4] = 1;
  *(void *)uint64_t v18 = &off_100894248;
  *((_BYTE *)v18 + 10) = 1;
  *((void *)v18 + 2) = a1;
  *((_BYTE *)v18 + 24) = a2;
  v18[13] = a3;
  uint64_t v19 = v22;
  *((void *)v18 + 4) = &off_10087FAA8;
  *((void *)v18 + 5) = v19;
  if (v19) {
    sub_1002CD1E0((uint64_t)v19);
  }
  *((_DWORD *)v18 + 12) = a6;
  *((void *)v18 + 7) = a7;
  *((void *)v18 + 8) = a8;
  *((_BYTE *)v18 + 72) = a9;
  sub_100405744(v17, v18);
  char v21 = &off_10087FAA8;
  if (v22) {
    sub_1002CD254(v22);
  }
  return 240LL;
}

void sub_100385098( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void sub_1003850D0(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  id v7 = a2;
  v31[0] = 0LL;
  v31[1] = 0LL;
  sub_100242F28((uint64_t)v31, a1 + 40);
  uint64_t v8 = *(void *)(a1 + 336);
  uint64_t v9 = *(void *)(a1 + 344);
  if (v8 != v9)
  {
    while (1)
    {
      memset(dst, 0, sizeof(dst));
      unsigned int v34 = 0;
      uuid_copy(dst, (const unsigned __int8 *)v8);
      unsigned int v10 = *(_DWORD *)(v8 + 16);
      unsigned int v34 = v10;
      if (!v7) {
        break;
      }
      uint64_t v11 = sub_100241F94(dst);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      unsigned int v13 = [v7 isEqual:v12];

      if (v13)
      {
        LOWORD(v10) = v34;
        unsigned int v14 = HIWORD(v34);
LABEL_6:
        __int16 v15 = v10;
        if ((_WORD)v10) {
          __int16 v16 = v15;
        }
        else {
          __int16 v16 = a3;
        }
        LOWORD(v34) = v16;
        if (v14 <= a4) {
          __int16 v17 = a4;
        }
        else {
          __int16 v17 = v14;
        }
        HIWORD(v34) = v17;
        if (*(_BYTE *)(a1 + 32))
        {
          if (qword_1008D9278 != -1) {
            dispatch_once(&qword_1008D9278, &stru_100894270);
          }
          uint64_t v18 = qword_1008D9270;
          uint64_t v19 = sub_100241F94(dst);
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
          LODWORD(v18) = sub_100413550(v18, v20);

          if ((_DWORD)v18)
          {
            *(_OWORD *)__int128 __p = 0u;
            __int128 v30 = 0u;
            sub_10040F90C((uint64_t)__p, 0);
            sub_10040F974((uint64_t)__p, a3);
            sub_10040F974((uint64_t)__p, a4);
            char v21 = sub_100241F94(dst);
            unint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
            int v32 = v22;
            uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v32,  1LL));

            std::string v24 = operator new(0x28uLL);
            uint64_t v25 = *(void *)(a1 + 136);
            uint64_t v26 = *(void *)(a1 + 328);
            sub_10056AB04(&v28, __p[1], v30 - (unint64_t)__p[1]);
            sub_10038C4C4(v24, v25, v26, v23, (uint64_t)&v28);
            v28.n128_u64[0] = (unint64_t)&off_10087FAA8;
            if (v28.n128_u64[1]) {
              sub_1002CD254((unsigned int *)v28.n128_u64[1]);
            }
            v28.n128_u64[0] = 0LL;
            v28.n128_u64[1] = (unint64_t)v24;
            __n128 v27 = sub_100386BD0((void *)(a1 + 432), &v28);
            sub_100386C58(a1, v27);

            if (__p[1])
            {
              *(void **)&__int128 v30 = __p[1];
              operator delete(__p[1]);
            }
          }
        }
      }

      v8 += 20LL;
      if (v8 == v9) {
        goto LABEL_23;
      }
    }

    unsigned int v14 = HIWORD(v10);
    goto LABEL_6;
  }

void sub_10038534C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003853F8(uint64_t a1, int *a2)
{
  v63[0] = 0LL;
  v63[1] = 0LL;
  sub_100242F28((uint64_t)v63, a1 + 40);
  uint64_t v3 = sub_100384CDC(a1, *a2);
  if (v3)
  {
    for (i = *(void **)(a1 + 360); i != *(void **)(a1 + 368); ++i)
    {
      __int128 __p = 0LL;
      uint64_t v61 = 0LL;
      uint64_t v62 = 0LL;
      sub_100240540(&__p, *i + 104LL);
      __int128 v5 = (char *)__p;
      uint64_t v6 = (char *)__p;
      if (__p != v61)
      {
        while (*(void *)(*(void *)v6 + 96LL) != v3)
        {
          v6 += 8;
          if (v6 == v61) {
            goto LABEL_7;
          }
        }

        uint64_t v9 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
        {
          sub_100531170((void *)v3, &v59);
          if ((v59.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v56 = &v59;
          }
          else {
            uint64_t v56 = (std::string *)v59.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = v56;
          _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Unable to unpublish service (%{public}s) as it is included by another service!",  buf,  0xCu);
          __int128 v5 = (char *)__p;
          if (__p)
          {
LABEL_15:
            uint64_t v61 = v5;
            operator delete(v5);
          }
        }

        else if (v5)
        {
          goto LABEL_15;
        }

        uint64_t v8 = 904LL;
        goto LABEL_111;
      }

void sub_100385A68( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (v19) {
    sub_1002CD254(v19);
  }
  sub_100242FAC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100385B0C(uint64_t a1, int a2, uint64_t *a3)
{
  v27[0] = 0LL;
  v27[1] = 0LL;
  sub_100242F28((uint64_t)v27, a1 + 40);
  for (i = *(uint64_t **)(a1 + 360); i != *(uint64_t **)(a1 + 368); ++i)
  {
    if (a3) {
      *a3 = *i;
    }
    uint64_t v8 = *i;
    if (*(_DWORD *)(*i + 16) == a2)
    {
      uint64_t v3 = *i;
      goto LABEL_39;
    }

    __int128 __p = 0LL;
    uint64_t v25 = 0LL;
    uint64_t v26 = 0LL;
    sub_100240540(&__p, v8 + 104);
    uint64_t v9 = (char *)__p;
    unsigned int v10 = (char *)__p;
    if (__p != v25)
    {
      while (*(_DWORD *)(*(void *)v10 + 16LL) != a2)
      {
        v10 += 8;
        if (v10 == v25) {
          goto LABEL_8;
        }
      }

      int v16 = 1;
      uint64_t v3 = *(void *)v10;
      if (!__p) {
        goto LABEL_32;
      }
LABEL_31:
      uint64_t v25 = v9;
      operator delete(v9);
      goto LABEL_32;
    }

void sub_100385D30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void *sub_100385D74(int64x2_t *a1, char *a2, uint64_t a3)
{
  unint64_t v4 = a1[2].u64[0];
  uint64_t v5 = a1->i64[1];
  uint64_t v6 = (uint64_t *)(v5 + 8 * (v4 >> 8));
  if (a1[1].i64[0] == v5) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = *v6 + 16LL * v4;
  }
  BOOL v35 = v6;
  uint64_t v36 = v7;
  if (v7 == a3) {
    unint64_t v8 = 0LL;
  }
  else {
    unint64_t v8 = ((a3 - *(void *)a2) >> 4) + 32 * (a2 - (char *)v6) - ((v7 - *v6) >> 4);
  }
  uint64_t v9 = sub_10038D560((uint64_t)&v35, v8);
  unint64_t v11 = (unint64_t)v9;
  unint64_t v12 = v10;
  uint64_t v13 = a1[2].i64[1];
  if (v8 <= (unint64_t)(v13 - 1) >> 1)
  {
    uint64_t v19 = v10 - *v9;
    uint64_t v20 = v19 >> 4;
    if (v19 < -15)
    {
      unint64_t v29 = 254 - v20;
      BOOL v22 = &v9[-(v29 >> 8)];
      uint64_t v23 = *v22 + 16LL * ~(_BYTE)v29;
    }

    else
    {
      unint64_t v21 = v20 + 1;
      BOOL v22 = &v9[v21 >> 8];
      uint64_t v23 = *v22 + 16LL * v21;
    }

    memset(&v37, 0, 32);
    sub_10038D684(v35, v36, v9, v10, v22, v23, &v37);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1006BFA70);
    sub_10038D5BC((uint64_t)a1, 1);
  }

  else
  {
    uint64_t v14 = v10 - *v9;
    uint64_t v15 = v14 >> 4;
    if (v14 < -15)
    {
      unint64_t v24 = 254 - v15;
      __int16 v17 = (char **)&v9[-(v24 >> 8)];
      uint64_t v18 = &(*v17)[16 * ~(_BYTE)v24];
    }

    else
    {
      unint64_t v16 = v15 + 1;
      __int16 v17 = (char **)&v9[v16 >> 8];
      uint64_t v18 = &(*v17)[16 * v16];
    }

    unint64_t v25 = a1[2].i64[0] + v13;
    uint64_t v26 = a1->i64[1];
    uint64_t v27 = (char **)(v26 + 8 * (v25 >> 8));
    if (a1[1].i64[0] == v26) {
      __n128 v28 = 0LL;
    }
    else {
      __n128 v28 = &(*v27)[16 * v25];
    }
    v37.n128_u64[0] = v11;
    v37.n128_u64[1] = v12;
    sub_10038D7FC(v17, v18, v27, v28, (uint64_t)&v37);
    --a1[2].i64[1];
    sub_10038D618(a1, 1);
  }

  unint64_t v30 = a1[2].u64[0];
  uint64_t v31 = a1->i64[1];
  unint64_t v32 = (void *)(v31 + 8 * (v30 >> 8));
  if (a1[1].i64[0] == v31) {
    uint64_t v33 = 0LL;
  }
  else {
    uint64_t v33 = *v32 + 16LL * v30;
  }
  v37.n128_u64[0] = (unint64_t)v32;
  v37.n128_u64[1] = v33;
  return sub_10038D560((uint64_t)&v37, v8);
}

uint64_t sub_100385F70(uint64_t a1, int *a2, uint64_t *a3)
{
  v31[0] = 0LL;
  v31[1] = 0LL;
  sub_100242F28((uint64_t)v31, a1 + 40);
  uint64_t v6 = sub_100384CDC(a1, *a2);
  uint64_t v7 = v6;
  if (v6)
  {
    __n128 v28 = 0LL;
    unint64_t v29 = 0LL;
    uint64_t v30 = 0LL;
    sub_100240540(&v28, v6 + 136);
    unint64_t v8 = v28;
    if (v28 != v29)
    {
      uint64_t v9 = (void *)(a1 + 416);
      do
      {
        unint64_t v25 = 0LL;
        uint64_t v26 = 0LL;
        uint64_t v27 = 0LL;
        sub_100240540(&v25, *(void *)v8 + 104LL);
        uint64_t v10 = v25;
        if (v25 != v26)
        {
          do
          {
            uint64_t v11 = *(void *)(*(void *)v10 + 8LL);
            int v12 = *(_DWORD *)(v11 + 20);
            *(_OWORD *)uuid_t dst = *(_OWORD *)(v11 + 4);
            int v36 = v12;
            sub_100634334(&v34, (__n128 *)dst);
            int v33 = 0;
            __int128 v32 = xmmword_1006C2588;
            if (sub_1001BEC7C((unsigned __int8 *)&v34, (unsigned __int8 *)&v32))
            {
              uint64_t v13 = (void *)*v9;
              if (*v9)
              {
                unint64_t v14 = *(void *)v10;
                uint64_t v15 = v9;
                do
                {
                  unint64_t v16 = v13[4];
                  BOOL v17 = v16 >= v14;
                  if (v16 >= v14) {
                    uint64_t v18 = v13;
                  }
                  else {
                    uint64_t v18 = v13 + 1;
                  }
                  if (v17) {
                    uint64_t v15 = v13;
                  }
                  uint64_t v13 = (void *)*v18;
                }

                while (*v18);
                if (v15 != v9 && v14 >= v15[4])
                {
                  uint64_t v20 = v15[5];
                  uint64_t v19 = v15[6];
                  while (v20 != v19)
                  {
                    if (*(_WORD *)(v20 + 16))
                    {
                      int v21 = *(_DWORD *)(*(void *)v8 + 16LL);
                      uuid_copy(dst, (const unsigned __int8 *)v20);
                      int v36 = v21;
                      unint64_t v22 = a3[1];
                      if (v22 >= a3[2])
                      {
                        uint64_t v23 = sub_10038D92C(a3, (uint64_t)dst);
                      }

                      else
                      {
                        uuid_copy((unsigned __int8 *)a3[1], dst);
                        *(_DWORD *)(v22 + 16) = v36;
                        uint64_t v23 = v22 + 20;
                        a3[1] = v22 + 20;
                      }

                      a3[1] = v23;
                      uint64_t v19 = v15[6];
                    }

                    v20 += 18LL;
                  }
                }
              }
            }

            v10 += 8;
          }

          while (v10 != v26);
          uint64_t v10 = v25;
        }

        if (v10)
        {
          uint64_t v26 = v10;
          operator delete(v10);
        }

        v8 += 8;
      }

      while (v8 != v29);
      unint64_t v8 = v28;
    }

    if (v8)
    {
      unint64_t v29 = v8;
      operator delete(v8);
    }
  }

  sub_100242FAC((uint64_t)v31);
  return v7;
}

void sub_1003861A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t sub_100386208(uint64_t a1)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (qword_1008D9278 != -1) {
      dispatch_once(&qword_1008D9278, &stru_100894270);
    }
    if (!sub_1004138A0(qword_1008D9270))
    {
      char v13 = 0;
      sub_100242CA4(&v13);
      if (sub_1001A63DC())
      {
        uint64_t v2 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_INFO))
        {
          LOWORD(v12.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Compacting database!", (uint8_t *)&v12, 2u);
        }

        unint64_t v4 = *(uint64_t **)(a1 + 360);
        uint64_t v3 = *(uint64_t **)(a1 + 368);
        while (v4 != v3)
        {
          uint64_t v5 = *v4;
          if (*v4 != *(void *)(a1 + 112) && v5 != *(void *)(a1 + 128))
          {
            sub_1001C4E78(*(unsigned __int16 **)(v5 + 8));
            uint64_t v3 = *(uint64_t **)(a1 + 368);
          }

          ++v4;
        }

        sub_1001A5C90();
        sub_100242CD0(&v13);
        sub_1003850D0(a1, 0LL, (unsigned __int16)(*(_WORD *)(*(void *)(a1 + 128) + 48LL) + 1), 0xFFFFu);
        sub_10038CE5C(a1 + 408, *(void **)(a1 + 416));
        *(void *)(a1 + 416) = 0LL;
        *(void *)(a1 + 424) = 0LL;
        *(void *)(a1 + 408) = a1 + 416;
        uint64_t v7 = *(uint64_t **)(a1 + 360);
        uint64_t v6 = *(uint64_t **)(a1 + 368);
        while (v7 != v6)
        {
          unint64_t v8 = (void *)*v7;
          if (*v7 != *(void *)(a1 + 112) && v8 != *(void **)(a1 + 128))
          {
            int v9 = sub_1003832E0(a1, *v7, 1);
            if (v9)
            {
              uint64_t v10 = (os_log_s *)qword_1008F75B0;
              if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
              {
                sub_100531170(v8, &v12);
                sub_10067503C((uint64_t *)&v12, (uint64_t)v15, v9, v10);
              }

              break;
            }

            uint64_t v6 = *(uint64_t **)(a1 + 368);
          }

          ++v7;
        }
      }

      sub_100242CD8(&v13);
    }
  }

  return sub_100242FAC((uint64_t)v14);
}

void sub_100386420( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t sub_10038645C(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v6 = sub_10038DAA8(a1 + 232, a2);
  uint64_t v7 = sub_10038DAA8(a1 + 256, a2);
  BOOL v8 = a1 + 240 == v6;
  if (a1 + 240 == v6) {
    unsigned int v9 = 0;
  }
  else {
    unsigned int v9 = a3;
  }
  if (a1 + 264 != v7) {
    BOOL v8 = 0;
  }
  return v8 | v9;
}

uint64_t sub_1003864C8(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int *a5)
{
  v39[0] = 0LL;
  v39[1] = 0LL;
  sub_100242F28((uint64_t)v39, a1 + 40);
  if (!*(_BYTE *)(a1 + 32)) {
    return sub_100242FAC((uint64_t)v39);
  }
  uint64_t v10 = *(void *)(a1 + 392);
  if (v10)
  {
    uint64_t v11 = (uint64_t **)(a1 + 384);
    unsigned int v12 = *a2;
    uint64_t v13 = a1 + 392;
    do
    {
      unsigned int v14 = *(_DWORD *)(v10 + 32);
      BOOL v15 = v14 >= v12;
      if (v14 >= v12) {
        unint64_t v16 = (uint64_t *)v10;
      }
      else {
        unint64_t v16 = (uint64_t *)(v10 + 8);
      }
      if (v15) {
        uint64_t v13 = v10;
      }
      uint64_t v10 = *v16;
    }

    while (*v16);
    if (v13 != a1 + 392 && v12 >= *(_DWORD *)(v13 + 32))
    {
      if (!*(_BYTE *)(v13 + 44))
      {
        char v38 = 0;
        sub_100242CA4(&v38);
        int v33 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v13 + 48);
        uint64_t v34 = *a2;
        uint64_t v35 = sub_10056AAF0(a4);
        unsigned __int16 v36 = sub_10056AAD8(a4);
        v33(v34, a3, v35, v36);
LABEL_26:
        sub_100242CD8(&v38);
        sub_1001FDBCC(v11, (uint64_t *)v13);
        operator delete((void *)v13);
        return sub_100242FAC((uint64_t)v39);
      }

      if ((_DWORD)a3)
      {
        uint64_t v24 = sub_100385B0C(a1, *a5, 0LL);
        if (v24)
        {
LABEL_21:
          char v38 = 0;
          sub_100242CA4(&v38);
          if (v24) {
            uint64_t v32 = *(void *)(v24 + 8);
          }
          else {
            uint64_t v32 = 0LL;
          }
          (*(void (**)(void, uint64_t, uint64_t))(v13 + 48))(*a2, a3, v32);
          goto LABEL_26;
        }

        unint64_t v25 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
          sub_100675110((uint64_t)a5, v25, v26, v27, v28, v29, v30, v31);
        }
      }

      uint64_t v24 = 0LL;
      goto LABEL_21;
    }
  }

  BOOL v17 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
    sub_1006750A8((uint64_t)a2, v17, v18, v19, v20, v21, v22, v23);
  }
  return sub_100242FAC((uint64_t)v39);
}

void sub_100386684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1003866B4(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  id v9 = a3;
  v45[0] = 0LL;
  v45[1] = 0LL;
  sub_100242F28((uint64_t)v45, a1 + 40);
  if (!*(_BYTE *)(a1 + 32))
  {
LABEL_22:
    sub_100242FAC((uint64_t)v45);
    goto LABEL_30;
  }

  unint64_t v10 = *(void *)(a1 + 464);
  uint64_t v11 = *(void *)(a1 + 440);
  uint64_t v12 = *(void *)(a1 + 448);
  uint64_t v13 = (void *)(v11 + 8 * (v10 >> 8));
  if (v12 == v11) {
    unsigned int v14 = 0LL;
  }
  else {
    unsigned int v14 = (void *)(*v13 + 16LL * v10);
  }
LABEL_5:
  BOOL v15 = v14 - 512;
  while (1)
  {
    uint64_t v16 = v12 == v11
        ? 0LL
        : *(void *)(v11 + (((*(void *)(a1 + 472) + v10) >> 5) & 0x7FFFFFFFFFFFFF8LL))
        + 16LL * (*(_BYTE *)(a1 + 472) + v10);
    if (v14 == (void *)v16) {
      break;
    }
    if (*v14 == a2)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
      {
        sub_100494958(a2, (uint64_t)&v51);
        sub_100675270();
      }

      goto LABEL_22;
    }

    v14 += 2;
    v15 += 2;
    if ((void *)*v13 == v15)
    {
      BOOL v17 = (void *)v13[1];
      ++v13;
      unsigned int v14 = v17;
      goto LABEL_5;
    }
  }

  uint64_t v18 = sub_100385B0C(a1, a4, 0LL);
  uint64_t v19 = (void *)v18;
  if (!v18
    || (uint64_t v20 = *(void *)(v18 + 8),
        int v21 = *(_DWORD *)(v20 + 20),
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)(v20 + 4),
        LODWORD(v51.__r_.__value_.__r.__words[2]) = v21,
        sub_100634334(v50, (__n128 *)&v51),
        int v49 = 0,
        __int128 v48 = xmmword_1006C259C,
        !sub_1001BEC7C((unsigned __int8 *)v50, (unsigned __int8 *)&v48)))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100675178();
    }
    uint64_t v22 = 0LL;
    goto LABEL_26;
  }

  sub_100240540(&v51, (uint64_t)(v19 + 13));
  std::string::size_type size = v51.__r_.__value_.__l.__size_;
  uint64_t v22 = (void *)v51.__r_.__value_.__r.__words[0];
  if (v51.__r_.__value_.__r.__words[0] == v51.__r_.__value_.__l.__size_) {
    goto LABEL_34;
  }
  std::string::size_type v24 = v51.__r_.__value_.__r.__words[0];
  while (1)
  {
    uint64_t v25 = *(void *)(*(void *)v24 + 8LL);
    int v26 = *(_DWORD *)(v25 + 20);
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)(v25 + 4);
    LODWORD(v51.__r_.__value_.__r.__words[2]) = v26;
    sub_100634334(v50, (__n128 *)&v51);
    int v47 = 0;
    __int128 v46 = xmmword_1006C2588;
    v24 += 8LL;
    if (v24 == size) {
      goto LABEL_34;
    }
  }

  uint64_t v28 = *(void *)v24;
  if (!*(void *)v24)
  {
LABEL_34:
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
    {
      sub_100531170(v19, &v51);
      sub_1006751D8();
    }

    goto LABEL_26;
  }

  if (![v9 count])
  {
    unint64_t v41 = v28;
    uint64_t v30 = (void *)(a1 + 416);
    uint64_t v31 = *(void **)(a1 + 416);
    if (!v31) {
      goto LABEL_47;
    }
    uint64_t v32 = (void *)(a1 + 416);
    do
    {
      unint64_t v33 = v31[4];
      BOOL v34 = v33 >= v41;
      if (v33 >= v41) {
        uint64_t v35 = v31;
      }
      else {
        uint64_t v35 = v31 + 1;
      }
      if (v34) {
        uint64_t v32 = v31;
      }
      uint64_t v31 = (void *)*v35;
    }

    while (*v35);
    if (v32 == v30 || v41 < v32[4]) {
LABEL_47:
    }
      uint64_t v32 = (void *)(a1 + 416);
    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array", v41));
    if (v32 != v30)
    {
      uint64_t v37 = v32[5];
      uint64_t v36 = v32[6];
      while (v37 != v36)
      {
        if (*(_WORD *)(v37 + 16))
        {
          char v38 = sub_100241F94((const unsigned __int8 *)v37);
          uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
          [v43 addObject:v39];

          uint64_t v36 = v32[6];
        }

        v37 += 18LL;
      }
    }

    if ([v43 count])
    {
      uint64_t v29 = operator new(0x28uLL);
      sub_10038C4C4(v29, (uint64_t)v19, (uint64_t)v42, v43, a5);

      goto LABEL_56;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
    {
      sub_100531170(v42, &v51);
      sub_100675224();
    }

LABEL_26:
    if (*(void *)(a1 + 104))
    {
      uint64_t v27 = sub_100404FE8();
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472LL;
      v44[2] = sub_100387848;
      v44[3] = &unk_10087F8E0;
      v44[4] = a1;
      v44[5] = a2;
      sub_100405384(v27, v44);
    }

    goto LABEL_28;
  }

  uint64_t v29 = operator new(0x28uLL);
  sub_10038C4C4(v29, (uint64_t)v19, v28, v9, a5);
LABEL_56:
  v51.__r_.__value_.__r.__words[0] = a2;
  v51.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
  __n128 v40 = sub_100386BD0((void *)(a1 + 432), (__n128 *)&v51);
  sub_100386C58(a1, v40);
LABEL_28:
  sub_100242FAC((uint64_t)v45);
  if (v22) {
    operator delete(v22);
  }
LABEL_30:
}

void sub_100386B30( _Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  sub_100242FAC((uint64_t)va);
  if (v10) {
    operator delete(v10);
  }

  _Unwind_Resume(a1);
}

__n128 sub_100386BD0(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10038DB20(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_100386C58(uint64_t a1, __n128 a2)
{
  if (*(_BYTE *)(a1 + 480))
  {
    uint64_t v2 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Not sending updates as TX queue is full",  buf,  2u);
    }

    return;
  }

  unint64_t v74 = (int64x2_t *)(a1 + 432);
  unint64_t v4 = *(void *)(a1 + 464);
  uint64_t v5 = *(void *)(a1 + 440);
  uint64_t v6 = *(void *)(a1 + 448);
  unint64_t v7 = (char *)(v5 + 8 * (v4 >> 8));
  if (v6 == v5) {
    BOOL v8 = 0LL;
  }
  else {
    BOOL v8 = (uint64_t *)(*(void *)v7 + 16LL * v4);
  }
  uint64_t v86 = (void *)(a1 + 416);
  uint64_t v80 = a1 + 544;
  uint64_t v81 = a1 + 536;
  a2.n128_u64[0] = 138543618LL;
  __n128 v73 = a2;
  while (1)
  {
    if (v6 == v5)
    {
      uint64_t v10 = 0LL;
    }

    else
    {
      unint64_t v9 = *(void *)(a1 + 472) + *(void *)(a1 + 464);
      uint64_t v10 = *(void *)(v5 + ((v9 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v9;
    }

    uint64_t v11 = (id *)v8[1];
    uint64_t v77 = *v8;
    id v84 = *(id *)(a1 + 328);
    id v85 = v11[2];
    __int128 __p = v11;
    if (v85 != v84)
    {
      uint64_t v12 = (void *)*v86;
      if (!*v86) {
        goto LABEL_24;
      }
      uint64_t v13 = v86;
      do
      {
        unint64_t v14 = v12[4];
        BOOL v15 = v14 >= (unint64_t)v85;
        else {
          uint64_t v16 = v12 + 1;
        }
        if (v15) {
          uint64_t v13 = v12;
        }
        uint64_t v12 = (void *)*v16;
      }

      while (*v16);
      if (v13 == v86 || (unint64_t)v85 < v13[4])
      {
LABEL_24:
        BOOL v17 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
          sub_1006752BC(&v95, v96, v17);
        }
        __int128 v78 = (char *)sub_100385D74(v74, v7, (uint64_t)v8);
        BOOL v8 = v18;
        if (__p)
        {
          __p[3] = &off_10087FAA8;
          uint64_t v19 = (unsigned int *)__p[4];
          if (v19) {
            sub_1002CD254(v19);
          }

          operator delete(__p);
        }

        if (*(void *)(a1 + 104))
        {
          uint64_t v20 = sub_100404FE8();
          v94[0] = _NSConcreteStackBlock;
          v94[1] = 3221225472LL;
          v94[2] = sub_10038A4D8;
          v94[3] = &unk_10087F8E0;
          v94[4] = a1;
          v94[5] = v77;
          sub_100405384(v20, v94);
        }

        goto LABEL_128;
      }
    }

    uint64_t v75 = (uint64_t)v8;
    __int128 v78 = v7;
    id v76 = objc_msgSend(*v11, "mutableCopy", *(_OWORD *)&v73);
    int v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    __int128 v92 = 0u;
    __int128 v93 = 0u;
    __int128 v90 = 0u;
    __int128 v91 = 0u;
    id obj = v76;
    id v22 = [obj countByEnumeratingWithState:&v90 objects:v101 count:16];
    if (v22) {
      break;
    }
    char v79 = 0;
LABEL_118:

    [obj removeObjectsInArray:v21];
    if ([obj count])
    {
      id v65 = [obj copy];
      id v66 = *__p;
      id *__p = v65;

      if (v75 + 16 - *(void *)v78 == 4096)
      {
        BOOL v8 = (uint64_t *)*((void *)v78 + 1);
        v78 += 8;
      }

      else
      {
        BOOL v8 = (uint64_t *)(v75 + 16);
      }
    }

    else
    {
      __int128 v78 = (char *)sub_100385D74(v74, v78, v75);
      BOOL v8 = v67;
      __p[3] = &off_10087FAA8;
      int v68 = (unsigned int *)__p[4];
      if (v68) {
        sub_1002CD254(v68);
      }

      operator delete(__p);
      if ((v79 & 1) == 0 && *(void *)(a1 + 104))
      {
        uint64_t v69 = sub_100404FE8();
        v88[0] = _NSConcreteStackBlock;
        v88[1] = 3221225472LL;
        v88[2] = sub_10038A4EC;
        v88[3] = &unk_10087F8E0;
        v88[4] = a1;
        v88[5] = v77;
        sub_100405384(v69, v88);
      }
    }

LABEL_128:
    uint64_t v5 = *(void *)(a1 + 440);
    uint64_t v6 = *(void *)(a1 + 448);
    unint64_t v7 = v78;
  }

  char v79 = 0;
  uint64_t v23 = *(void *)v91;
  uint64_t v82 = (uint64_t)(__p + 3);
LABEL_34:
  uint64_t v24 = 0LL;
  while (1)
  {
    if (*(void *)v91 != v23) {
      objc_enumerationMutation(obj);
    }
    uint64_t v25 = *(char **)(*((void *)&v90 + 1) + 8 * v24);
    if (qword_1008D9278 != -1) {
      dispatch_once(&qword_1008D9278, &stru_100894270);
    }
    if (!sub_100413550(qword_1008D9270, v25))
    {
      uint64_t v29 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 138543362;
        uint64_t v98 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Dropping update of device %{public}@ as it is no longer connected",  buf,  0xCu);
      }

      goto LABEL_72;
    }

    uint64_t v26 = qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138543362;
      uint64_t v98 = v25;
      uint64_t v27 = (os_log_s *)v26;
      uint64_t v28 = "Skipping update of device %{public}@ as it is being stalled";
LABEL_43:
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, v28, buf, 0xCu);
    }

void sub_1003877B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, int a36, __int16 a37, char a38, char a39)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100387848(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 32) + 104LL) + 8LL))( *(void *)(*(void *)(a1 + 32) + 104LL),  *(void *)(a1 + 40));
}

id sub_10038785C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 40);
  uint64_t v3 = *(void **)(a1 + 408);
  unint64_t v4 = (void *)(a1 + 416);
  if (v3 != (void *)(a1 + 416))
  {
    do
    {
      uint64_t v6 = v3[5];
      uint64_t v5 = v3[6];
      while (v6 != v5)
      {
        if (*(_WORD *)(v6 + 16))
        {
          unint64_t v7 = sub_100241F94((const unsigned __int8 *)v6);
          BOOL v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
          [v2 addObject:v8];

          uint64_t v5 = v3[6];
        }

        v6 += 18LL;
      }

      unint64_t v9 = (void *)v3[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          unint64_t v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          uint64_t v10 = (void *)v3[2];
          BOOL v11 = *v10 == (void)v3;
          uint64_t v3 = v10;
        }

        while (!v11);
      }

      uint64_t v3 = v10;
    }

    while (v10 != v4);
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v2 allObjects]);
  sub_100242FAC((uint64_t)v14);

  return v12;
}

void sub_10038795C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10038798C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1 + 40);
  sub_100241F90(uu2, v3);
  uint64_t v4 = sub_1001FDB10(a1 + 536, uu2);
  if (a1 + 544 == v4)
  {
    uint64_t v5 = 23LL;
  }

  else
  {
    uu2[0] = 0;
    sub_100242CA4(uu2);
    uint64_t v5 = sub_1001A5808(*(void *)(v4 + 48));
    sub_100242CD8(uu2);
  }

  sub_100242FAC((uint64_t)v7);

  return v5;
}

void sub_100387A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_100242CD8(va1);
  sub_100242FAC((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_100387A98(uint64_t a1, unsigned int a2)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 40);
  uint64_t v4 = *(void *)(a1 + 392);
  if (!v4) {
    goto LABEL_20;
  }
  uint64_t v5 = (uint64_t **)(a1 + 384);
  uint64_t v6 = a1 + 392;
  uint64_t v7 = a1 + 392;
  do
  {
    unsigned int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v4;
    }
    else {
      uint64_t v10 = (uint64_t *)(v4 + 8);
    }
    if (v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }

  while (*v10);
  if (v7 != v6 && *(_DWORD *)(v7 + 32) <= a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100675358();
    }
    sub_1001FDBCC(v5, (uint64_t *)v7);
    operator delete((void *)v7);
  }

  else
  {
LABEL_20:
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_1006752F8();
    }
  }

  return sub_100242FAC((uint64_t)v12);
}

uint64_t sub_100387B90(uint64_t a1, uint64_t a2, int a3)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, a1 + 40);
  id v6 = sub_100387D18(a1, a2);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v7)
  {
    unsigned int v8 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109378;
      int v17 = a3;
      __int16 v18 = 2114;
      uint64_t v19 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "MTU is now %u for device %{public}@",  buf,  0x12u);
    }

    if (*(void *)(a1 + 104))
    {
      uint64_t v9 = sub_100404FE8();
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      void v11[2] = sub_100387DC0;
      v11[3] = &unk_100890D88;
      uint64_t v13 = a1;
      id v12 = v7;
      __int16 v14 = a3;
      sub_100405384(v9, v11);
    }
  }

  return sub_100242FAC((uint64_t)v15);
}

void sub_100387CE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100387D18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const unsigned __int8 **)(a1 + 536);
  if (v2 == (const unsigned __int8 *)(a1 + 544))
  {
LABEL_9:
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_1006753B8();
    }
    id v6 = 0LL;
  }

  else
  {
    while (*((void *)v2 + 6) != a2)
    {
      id v3 = (unsigned __int8 *)*((void *)v2 + 1);
      if (v3)
      {
        do
        {
          uint64_t v4 = (const unsigned __int8 **)v3;
          id v3 = *(unsigned __int8 **)v3;
        }

        while (v3);
      }

      else
      {
        do
        {
          uint64_t v4 = (const unsigned __int8 **)*((void *)v2 + 2);
          BOOL v5 = *v4 == v2;
          uint64_t v2 = (const unsigned __int8 *)v4;
        }

        while (!v5);
      }

      uint64_t v2 = (const unsigned __int8 *)v4;
    }

    uint64_t v7 = sub_100241F94(v2 + 32);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v7);
  }

  return v6;
}

uint64_t sub_100387DC0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(*(void *)(a1 + 40) + 104LL) + 16LL))( *(void *)(*(void *)(a1 + 40) + 104LL),  *(void *)(a1 + 32),  *(unsigned __int16 *)(a1 + 48));
}

uint64_t sub_100387DDC(uint64_t a1, uint64_t a2)
{
  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_100242F28((uint64_t)v18, a1 + 40);
  id v4 = sub_100387D18(a1, a2);
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (v5)
  {
    if ([*(id *)(a1 + 496) containsObject:v5])
    {
      id v6 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "indicationConfirmed";
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s - Server Indication - Device:%{public}@",  buf,  0x16u);
      }

      [*(id *)(a1 + 496) removeObject:v5];
      uint64_t v8 = *(void *)(a1 + 336);
      uint64_t v9 = *(void *)(a1 + 344);
      while (v8 != v9)
      {
        memset(buf, 0, 20);
        uuid_copy(buf, (const unsigned __int8 *)v8);
        *(_DWORD *)&uint8_t buf[16] = *(_DWORD *)(v8 + 16);
        uint64_t v10 = sub_100241F94(buf);
        BOOL v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        [v5 isEqual:v11];

        v8 += 20LL;
      }
    }

    else
    {
      id v12 = [*(id *)(a1 + 504) objectForKey:v5];
      uint64_t v13 = (os_log_s *)qword_1008F75B0;
      if (v12)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "indicationConfirmed";
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&buf[14] = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s - App Indication - Device:%{public}@",  buf,  0x16u);
        }

        id v14 = [*(id *)(a1 + 504) objectForKey:v5];
        [*(id *)(a1 + 504) removeObjectForKey:v5];
        if (*(void *)(a1 + 104))
        {
          uint64_t v15 = sub_100404FE8();
          v17[0] = _NSConcreteStackBlock;
          v17[1] = 3221225472LL;
          v17[2] = sub_10038807C;
          v17[3] = &unk_10087F8E0;
          v17[4] = a1;
          v17[5] = v14;
          sub_100405384(v15, v17);
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
      {
        sub_1006753E4((uint64_t)v5, v13);
      }
    }

    sub_100386C58(a1, v7);
  }

  return sub_100242FAC((uint64_t)v18);
}

void sub_100388040( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10038807C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 32) + 104LL) + 8LL))( *(void *)(*(void *)(a1 + 32) + 104LL),  *(void *)(a1 + 40));
}

uint64_t sub_100388090(uint64_t a1, uint64_t a2)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1 + 40);
  if (a2)
  {
    id v4 = sub_100387D18(a1, a2);
    BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    if (v5)
    {
      id v6 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 138543362;
        uint64_t v13 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Received device %{public}@ ready event from stack",  buf,  0xCu);
      }

      if ([*(id *)(a1 + 488) containsObject:v5])
      {
        [*(id *)(a1 + 488) removeObject:v5];
        sub_100386C58(a1, v7);
      }
    }
  }

  else
  {
    uint64_t v8 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Received update queue ready event from stack",  buf,  2u);
    }

    *(_BYTE *)(a1 + 480) = 0;
    sub_100386C58(a1, v9);
  }

  return sub_100242FAC((uint64_t)v11);
}

void sub_1003881EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100388218(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t *a5, char a6)
{
  unsigned int v29 = a2;
  v28[0] = 0LL;
  v28[1] = 0LL;
  sub_100242F28((uint64_t)v28, a1 + 40);
  uint64_t v12 = a1 + 520;
  uint64_t v13 = *(void **)(a1 + 520);
  if (!v13) {
    goto LABEL_12;
  }
  uint64_t v14 = a1 + 520;
  do
  {
    unint64_t v15 = v13[4];
    BOOL v16 = v15 >= a3;
    if (v15 >= a3) {
      int v17 = v13;
    }
    else {
      int v17 = v13 + 1;
    }
    if (v16) {
      uint64_t v14 = (uint64_t)v13;
    }
    uint64_t v13 = (void *)*v17;
  }

  while (*v17);
  if (v14 == v12 || *(void *)(v14 + 32) > a3) {
LABEL_12:
  }
    uint64_t v14 = a1 + 520;
  if (v14 != v12 || a4 == 0)
  {
    if (a4)
    {
      id v19 = sub_100387D18(a1, a3);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      int v21 = v20;
      if (v20)
      {
        if (*(void *)(a1 + 104))
        {
          uint64_t v30 = &v29;
          id v22 = sub_1002DBC4C((uint64_t **)(a1 + 384), &v29, (uint64_t)&unk_1006C2518, &v30);
          *((_DWORD *)v22 + 10) = 0;
          *((_BYTE *)v22 + 44) = 1;
          *(_WORD *)((char *)v22 + 45) = 0;
          *((_BYTE *)v22 + 47) = 0;
          v22[6] = a5;
          uint64_t v23 = sub_100404FE8();
          uint64_t v24 = operator new(0x40uLL);
          sub_10038C6F0((uint64_t)v24, *(void *)(a1 + 104), v21, (int **)(v14 + 40), &v29, a6);
          sub_100405744(v23, v24);
          sub_10038D4D8((uint64_t **)(a1 + 512), v14);

          return sub_100242FAC((uint64_t)v28);
        }

        uint64_t v26 = 242LL;
      }

      else
      {
        uint64_t v26 = 14LL;
      }
    }

    else
    {
      uint64_t v26 = 0LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100675468();
    }
    uint64_t v26 = 14LL;
  }

  if (v14 != v12) {
    sub_10038D4D8((uint64_t **)(a1 + 512), v14);
  }
  if (a5)
  {
    LOBYTE(v30) = 0;
    sub_100242CA4(&v30);
    ((void (*)(uint64_t, uint64_t, void))a5)(a2, v26, 0LL);
    sub_100242CD8(&v30);
  }

  return sub_100242FAC((uint64_t)v28);
}

void sub_100388410( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_100242FAC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100388458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, a1 + 40);
  if (*(void *)(a1 + 104) && sub_100388580(a1, a2, &v16, &v17) && v16)
  {
    id v6 = sub_100387D18(a1, a3);
    __n128 v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    if (v7)
    {
      int v8 = *(_DWORD *)(v17 + 16);
      uint64_t v9 = sub_100404FE8();
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      void v11[2] = sub_100388858;
      v11[3] = &unk_100881060;
      uint64_t v13 = a1;
      id v12 = v7;
      int v14 = v8;
      sub_100405384(v9, v11);
    }
  }

  return sub_100242FAC((uint64_t)v15);
}

void sub_10038854C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100388580(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v29[0] = 0LL;
  v29[1] = 0LL;
  sub_100242F28((uint64_t)v29, a1 + 40);
  uint64_t v9 = *(uint64_t **)(a1 + 360);
  if (v9 == *(uint64_t **)(a1 + 368))
  {
LABEL_45:
    if (a3) {
      *a3 = 0LL;
    }
    uint64_t v4 = 0LL;
    if (a4) {
      *a4 = 0LL;
    }
    goto LABEL_53;
  }

void sub_100388814( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100388858(uint64_t a1)
{
  return (***(uint64_t (****)(void, void, void))(*(void *)(a1 + 40) + 104LL))( *(void *)(*(void *)(a1 + 40) + 104LL),  *(void *)(a1 + 32),  *(unsigned int *)(a1 + 48));
}

void sub_100388874(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t *a6, char a7)
{
  __int16 v44 = a3;
  unsigned int v43 = a4;
  uint64_t v41 = 0LL;
  uint64_t v42 = 0LL;
  v40[0] = 0LL;
  v40[1] = 0LL;
  sub_100242F28((uint64_t)v40, a1 + 40);
  char v39 = 0;
  uint64_t v14 = sub_100388580(a1, a2, &v42, &v41);
  if (!v14 || !v42)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_1006754EC();
    }
    unint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    unsigned __int16 v17 = 0;
    uint64_t v18 = 10LL;
    goto LABEL_10;
  }

  if ((*(_BYTE *)(v42 + 72) & 2) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100675494();
    }
    unint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    unsigned __int16 v17 = 0;
    uint64_t v18 = 2LL;
    goto LABEL_10;
  }

  id v19 = sub_100387D18(a1, a5);
  unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v19);
  if (!v15)
  {
    uint64_t v16 = 0LL;
    unsigned __int16 v17 = 0;
    uint64_t v18 = 14LL;
    goto LABEL_10;
  }

  if (v41 == *(void *)(a1 + 112) || v41 == *(void *)(a1 + 128) || v41 == *(void *)(a1 + 144))
  {
    uint64_t v25 = sub_1002E6E00();
    sub_10002418C(&v38, "GATT");
    sub_10002418C(&__p, "DUMMY_DIS");
    (*(void (**)(uint64_t, std::string *, std::string *, char *))(*(void *)v25 + 72LL))( v25,  &v38,  &__p,  &v39);
    memset(&v38, 0, sizeof(v38));
    sub_10002418C(&v38, "Dummy Apple DIS");
    memset(&__p, 0, sizeof(__p));
    uint64_t v26 = sub_1002E6E00();
    sub_10002418C(&v36, "GATT");
    sub_10002418C(&v45, "DUMMY_DIS_NAME");
    int v27 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t *, std::string *))(*(void *)v26 + 56LL))( v26,  &v36,  &v45,  &__p);
    if (v47 < 0) {
      operator delete((void *)v45);
    }
    if ((char)v36.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(v36.__r_.__value_.__l.__data_);
      if (!v27) {
        goto LABEL_32;
      }
    }

    else if (!v27)
    {
LABEL_32:
      if (v14 != *(void *)(a1 + 120))
      {
        if (v14 == *(void *)(a1 + 152))
        {
          if (v39)
          {
            memset(&v36, 0, sizeof(v36));
            sub_100389288(" MFGR Name", (const void **)&v38.__r_.__value_.__l.__data_, &v36);
            uint64_t v28 = *(void *)(a1 + 152);
            if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              unsigned int v29 = &v36;
            }
            else {
              unsigned int v29 = (std::string *)v36.__r_.__value_.__r.__words[0];
            }
            if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              size_t size = v36.__r_.__value_.__s.__size_;
            }
            else {
              size_t size = v36.__r_.__value_.__l.__size_;
            }
            goto LABEL_71;
          }
        }

        else if (v14 == *(void *)(a1 + 160))
        {
          if (v39)
          {
            memset(&v36, 0, sizeof(v36));
            sub_100389288(" Model Number", (const void **)&v38.__r_.__value_.__l.__data_, &v36);
            uint64_t v28 = *(void *)(a1 + 160);
            if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              unsigned int v29 = &v36;
            }
            else {
              unsigned int v29 = (std::string *)v36.__r_.__value_.__r.__words[0];
            }
            if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              size_t size = v36.__r_.__value_.__s.__size_;
            }
            else {
              size_t size = v36.__r_.__value_.__l.__size_;
            }
            goto LABEL_71;
          }
        }

        else
        {
          if (v14 == *(void *)(a1 + 168) && v39)
          {
            memset(&v36, 0, sizeof(v36));
            sub_100389288(" Serial Number", (const void **)&v38.__r_.__value_.__l.__data_, &v36);
            uint64_t v28 = *(void *)(a1 + 168);
            if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              unsigned int v29 = &v36;
            }
            else {
              unsigned int v29 = (std::string *)v36.__r_.__value_.__r.__words[0];
            }
            if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              size_t size = v36.__r_.__value_.__s.__size_;
            }
            else {
              size_t size = v36.__r_.__value_.__l.__size_;
            }
LABEL_71:
            sub_10056AB04(&v45, v29, size);
            sub_10002EAC8(v28 + 72, (uint64_t)&v45);
            uint64_t v45 = (uint64_t)&off_10087FAA8;
            if (v46) {
              sub_1002CD254(v46);
            }
            goto LABEL_75;
          }

          if (v14 == *(void *)(a1 + 176) && v39)
          {
            memset(&v36, 0, sizeof(v36));
            sub_100389288(" HW Revision", (const void **)&v38.__r_.__value_.__l.__data_, &v36);
            uint64_t v28 = *(void *)(a1 + 176);
            if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              unsigned int v29 = &v36;
            }
            else {
              unsigned int v29 = (std::string *)v36.__r_.__value_.__r.__words[0];
            }
            if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              size_t size = v36.__r_.__value_.__s.__size_;
            }
            else {
              size_t size = v36.__r_.__value_.__l.__size_;
            }
            goto LABEL_71;
          }

          if (v14 == *(void *)(a1 + 184) && v39)
          {
            memset(&v36, 0, sizeof(v36));
            sub_100389288(" FW Revision", (const void **)&v38.__r_.__value_.__l.__data_, &v36);
            uint64_t v28 = *(void *)(a1 + 184);
            if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              unsigned int v29 = &v36;
            }
            else {
              unsigned int v29 = (std::string *)v36.__r_.__value_.__r.__words[0];
            }
            if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              size_t size = v36.__r_.__value_.__s.__size_;
            }
            else {
              size_t size = v36.__r_.__value_.__l.__size_;
            }
            goto LABEL_71;
          }

          if (v14 == *(void *)(a1 + 192) && v39)
          {
            memset(&v36, 0, sizeof(v36));
            sub_100389288(" SW Revision", (const void **)&v38.__r_.__value_.__l.__data_, &v36);
            uint64_t v28 = *(void *)(a1 + 192);
            if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              unsigned int v29 = &v36;
            }
            else {
              unsigned int v29 = (std::string *)v36.__r_.__value_.__r.__words[0];
            }
            if ((v36.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              size_t size = v36.__r_.__value_.__s.__size_;
            }
            else {
              size_t size = v36.__r_.__value_.__l.__size_;
            }
            goto LABEL_71;
          }

          if (v14 == *(void *)(a1 + 200) && v39)
          {
            BYTE2(v45) = 26;
            LOWORD(v45) = 6682;
            sub_10056AB04(&v36, &v45, 3uLL);
            sub_10002EAC8(v14 + 72, (uint64_t)&v36);
            goto LABEL_131;
          }

          if (v14 == *(void *)(a1 + 208) && v39)
          {
            BYTE2(v45) = 27;
            LOWORD(v45) = 6939;
            sub_10056AB04(&v36, &v45, 3uLL);
            sub_10002EAC8(v14 + 72, (uint64_t)&v36);
            goto LABEL_131;
          }

          if (v14 == *(void *)(a1 + 216) && v39)
          {
            BYTE2(v45) = 28;
            LOWORD(v45) = 7196;
            sub_10056AB04(&v36, &v45, 3uLL);
            sub_10002EAC8(v14 + 72, (uint64_t)&v36);
            goto LABEL_131;
          }

          if (v14 == *(void *)(a1 + 224) && v39)
          {
            uint64_t v45 = 0x3837363534333231LL;
            sub_10056AB04(&v36, &v45, 8uLL);
            sub_10002EAC8(v14 + 72, (uint64_t)&v36);
LABEL_131:
            v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10087FAA8;
            if (v36.__r_.__value_.__l.__size_) {
              sub_1002CD254((unsigned int *)v36.__r_.__value_.__l.__size_);
            }
          }
        }

void sub_100389124( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, unsigned int *a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, char a29)
{
  if (a11) {
    sub_1002CD254(a11);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  sub_100242FAC((uint64_t)&a29);

  _Unwind_Resume(a1);
}

uint64_t sub_100389288@<X0>(char *__s@<X1>, const void **a2@<X0>, void *a3@<X8>)
{
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = strlen(__s);
  a3[1] = 0LL;
  a3[2] = 0LL;
  *a3 = 0LL;
  uint64_t result = sub_100271C18((uint64_t)a3, v6 + v7);
  if (v6)
  {
    else {
      uint64_t v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(a3, v9, v6);
  }

  uint64_t v10 = (char *)a3 + v6;
  if (v7) {
    uint64_t result = (uint64_t)memmove(v10, __s, v7);
  }
  v10[v7] = 0;
  return result;
}

uint64_t sub_100389348( uint64_t a1, uint64_t a2, int a3, unsigned __int16 a4, uint64_t a5, unsigned int a6, unint64_t a7, uint64_t *a8, char a9)
{
  unsigned int v52 = a6;
  uint64_t v50 = 0LL;
  unint64_t v51 = a7;
  v48[1] = 0LL;
  uint64_t v49 = 0LL;
  v48[0] = 0LL;
  sub_100242F28((uint64_t)v48, a1 + 40);
  uint64_t v16 = sub_100388580(a1, a2, &v50, (uint64_t *)&v49);
  if (!v16)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_1006754EC();
    }
    uint64_t v17 = 10LL;
    goto LABEL_11;
  }

  if (!v50) {
    goto LABEL_5;
  }
  if (a8)
  {
    if ((*(_BYTE *)(v50 + 72) & 8) == 0)
    {
LABEL_5:
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
        sub_100675518();
      }
      uint64_t v17 = 3LL;
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(v50 + 72) & 4) == 0)
  {
    goto LABEL_5;
  }

  if (a3)
  {
    std::string __p = 0LL;
    __int128 v46 = 0LL;
    unint64_t v47 = 0LL;
    sub_100240540(&__p, v50 + 104);
    id v19 = (char *)__p;
    if (__p == v46) {
      goto LABEL_31;
    }
    while (1)
    {
      uint64_t v20 = *(void *)(*(void *)v19 + 8LL);
      int v21 = *(_DWORD *)(v20 + 20);
      __n128 v54 = *(__n128 *)(v20 + 4);
      LODWORD(v55) = v21;
      sub_100634334(&v58, &v54);
      __int128 v56 = xmmword_1006BD8EC;
      int v57 = 0;
      v19 += 8;
      if (v19 == v46) {
        goto LABEL_31;
      }
    }

    if ((*(_WORD *)(*(void *)v19 + 72LL) & 1) == 0)
    {
LABEL_31:
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
        sub_100675544();
      }
      uint64_t v17 = 3LL;
LABEL_34:
      if (__p)
      {
        __int128 v46 = (char *)__p;
        operator delete(__p);
      }

      goto LABEL_11;
    }

    __n128 v54 = 0u;
    __int128 v55 = 0u;
    v54.n128_u32[0] = *(_DWORD *)(v16 + 16);
    v54.n128_u16[2] = a4;
    uint64_t v34 = *(void *)(a5 + 8);
    v54.n128_u64[1] = (unint64_t)&off_10087FAA8;
    *(void *)&__int128 v55 = v34;
    if (v34) {
      sub_1002CD1E0(v34);
    }
    BYTE8(v55) = 0;
    uint64_t v35 = *(void **)(a1 + 520);
    if (v35)
    {
      uint64_t v36 = a1 + 520;
      do
      {
        unint64_t v37 = v35[4];
        BOOL v38 = v37 >= a7;
        if (v37 >= a7) {
          char v39 = v35;
        }
        else {
          char v39 = v35 + 1;
        }
        if (v38) {
          uint64_t v36 = (uint64_t)v35;
        }
        uint64_t v35 = (void *)*v39;
      }

      while (*v39);
      if (v36 != a1 + 520 && *(void *)(v36 + 32) <= a7)
      {
        uint64_t v53 = 0LL;
        uint64_t v41 = *(void *)(v36 + 40);
        if (v41 == *(void *)(v36 + 48))
        {
          unsigned int v42 = 0;
        }

        else
        {
          unsigned int v42 = 0;
          do
          {
            v42 += sub_10056AAD8(v41 + 8);
            v41 += 32LL;
          }

          while (v41 != *(void *)(v36 + 48));
        }

        if (sub_10056AAD8(a5) + (unint64_t)v42 >= 0x201)
        {
          unsigned int v43 = (os_log_s *)qword_1008F75B0;
          if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
          {
            uint64_t v44 = sub_10056AAD8(a5);
            sub_100675570(v42, v44, (uint64_t)&v58, v43);
          }

          uint64_t v17 = 9LL;
          goto LABEL_57;
        }

        sub_100385B0C(a1, **(_DWORD **)(v36 + 40), (uint64_t *)&v53);
        if (v53 != v49)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
            sub_1006755C4();
          }
          uint64_t v17 = 244LL;
          goto LABEL_57;
        }
      }
    }

    v58.n128_u64[0] = (unint64_t)&v51;
    unsigned __int8 v40 = sub_10038DE34((uint64_t **)(a1 + 512), &v51, (uint64_t)&unk_1006C2518, (uint64_t **)&v58);
    sub_10038993C(v40 + 5, (int *)&v54);
    uint64_t v17 = 0LL;
LABEL_57:
    v54.n128_u64[1] = (unint64_t)&off_10087FAA8;
    if ((void)v55) {
      sub_1002CD254((unsigned int *)v55);
    }
    goto LABEL_34;
  }

  id v23 = sub_100387D18(a1, a7);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
  if (!v24)
  {
    uint64_t v17 = 14LL;
LABEL_11:
    if (a8)
    {
      v54.n128_u8[0] = 0;
      sub_100242CA4(&v54);
      ((void (*)(void, uint64_t, void, void))a8)(v52, v17, 0LL, 0LL);
      sub_100242CD8(&v54);
    }

    return sub_100242FAC((uint64_t)v48);
  }

  __n128 v54 = 0u;
  __int128 v55 = 0u;
  v54.n128_u32[0] = *(_DWORD *)(v16 + 16);
  v54.n128_u16[2] = a4;
  uint64_t v25 = *(void *)(a5 + 8);
  v54.n128_u64[1] = (unint64_t)&off_10087FAA8;
  *(void *)&__int128 v55 = v25;
  if (v25) {
    sub_1002CD1E0(v25);
  }
  BYTE8(v55) = a8 == 0LL;
  std::string __p = 0LL;
  __int128 v46 = 0LL;
  unint64_t v47 = 0LL;
  uint64_t v26 = *(void *)(a1 + 104);
  if (v26)
  {
    if (a8
      && (int v27 = *(_DWORD *)(v16 + 16),
          uint64_t v53 = &v52,
          uint64_t v28 = sub_1002DBC4C((uint64_t **)(a1 + 384), &v52, (uint64_t)&unk_1006C2518, &v53),
          *((_DWORD *)v28 + 10) = v27,
          *((_DWORD *)v28 + 11) = 0,
          v28[6] = a8,
          unsigned int v29 = v46,
          (unint64_t)v46 < v47))
    {
      unsigned __int32 v30 = v54.n128_u32[0];
      *((_WORD *)v46 + 2) = v54.n128_u16[2];
      *(_DWORD *)unsigned int v29 = v30;
      *((void *)v29 + 1) = &off_10087FAA8;
      *((void *)v29 + 2) = v25;
      if (v25) {
        sub_1002CD1E0(v25);
      }
      _BYTE v29[24] = a8 == 0LL;
      uint64_t v31 = (uint64_t)(v29 + 32);
      __int128 v46 = v29 + 32;
    }

    else
    {
      uint64_t v31 = sub_10038DF60((uint64_t *)&__p, (int *)&v54);
    }

    __int128 v46 = (char *)v31;
    uint64_t v32 = sub_100404FE8();
    std::string::size_type v33 = operator new(0x40uLL);
    sub_10038C6F0((uint64_t)v33, *(void *)(a1 + 104), v24, (int **)&__p, &v52, a9);
    sub_100405744(v32, v33);
    uint64_t v17 = 14LL;
  }

  else
  {
    uint64_t v17 = 242LL;
  }

  v58.n128_u64[0] = (unint64_t)&__p;
  sub_10038CD78((void ***)&v58);
  v54.n128_u64[1] = (unint64_t)&off_10087FAA8;
  if ((void)v55) {
    sub_1002CD254((unsigned int *)v55);
  }

  if (!v26) {
    goto LABEL_11;
  }
  return sub_100242FAC((uint64_t)v48);
}

void sub_10038986C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, unsigned int *a21)
{
  if (a21) {
    sub_1002CD254(a21);
  }
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_10038993C(uint64_t *a1, int *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_10038DF60(a1, a2);
  }

  else
  {
    sub_10038DEF4((uint64_t)a1, a2);
    uint64_t result = v3 + 32;
  }

  a1[1] = result;
  return result;
}

uint64_t sub_100389978( void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, __int16 *, void))
{
  __int16 v28 = 0;
  v27[0] = 0LL;
  v27[1] = 0LL;
  sub_100242F28((uint64_t)v27, (uint64_t)(a1 + 5));
  id v12 = sub_100387D18((uint64_t)a1, a5);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  if (!v13)
  {
    unsigned __int16 v22 = 0;
    uint64_t v23 = 14LL;
    goto LABEL_33;
  }

  if (*(void *)(a1[41] + 8LL) == a2)
  {
    for (uint64_t i = (const unsigned __int8 *)a1[42]; i != (const unsigned __int8 *)a1[43]; i += 20)
    {
      sub_100241F90(uu2, v13);
      if (!uuid_compare(i, uu2))
      {
        LOBYTE(v20) = 0;
        LOBYTE(v15) = 2;
        goto LABEL_17;
      }
    }

    goto LABEL_15;
  }

  unint64_t v14 = sub_100388580((uint64_t)a1, a2, 0LL, 0LL);
  if (!v14)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_1006754EC();
    }
    unsigned __int16 v22 = 0;
    uint64_t v23 = 10LL;
    goto LABEL_33;
  }

  unint64_t v15 = (void *)a1[52];
  if (v15)
  {
    uint64_t v16 = a1 + 52;
    do
    {
      unint64_t v17 = v15[4];
      BOOL v18 = v17 >= v14;
      if (v17 >= v14) {
        id v19 = v15;
      }
      else {
        id v19 = v15 + 1;
      }
      if (v18) {
        uint64_t v16 = v15;
      }
      unint64_t v15 = (void *)*v19;
    }

    while (*v19);
    if (v16 != a1 + 52 && v14 >= v16[4])
    {
      for (uint64_t j = v16[5]; j != v16[6]; j += 18LL)
      {
        sub_100241F90(uu2, v13);
        if (!uuid_compare((const unsigned __int8 *)j, uu2))
        {
          LODWORD(v15) = *(unsigned __int16 *)(j + 16);
          unsigned int v20 = v15 >> 8;
          goto LABEL_17;
        }
      }
    }

void sub_100389BC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100242FAC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100389C04( uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, void, void))
{
  uint64_t v45 = 0LL;
  uint64_t v46 = 0LL;
  v44[0] = 0LL;
  v44[1] = 0LL;
  sub_100242F28((uint64_t)v44, a1 + 40);
  if (a3)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_1006755F0();
    }
    uint64_t v16 = 0LL;
    uint64_t v17 = 244LL;
    goto LABEL_15;
  }

  if (a4 || sub_10056AAD8(a5) != 2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100675684();
    }
    uint64_t v16 = 0LL;
    if (a4) {
      uint64_t v17 = 7LL;
    }
    else {
      uint64_t v17 = 13LL;
    }
    goto LABEL_15;
  }

  int v18 = sub_10056AE48(a5, 0LL);
  int v19 = sub_10056AE48(a5, 1uLL);
  unint64_t v20 = *(void *)(a1 + 328);
  if (*(void *)(v20 + 8) == a2)
  {
    uint64_t v21 = *(void *)(a1 + 136);
    uint64_t v45 = v21;
    uint64_t v46 = v20;
    if (!v20)
    {
LABEL_25:
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
        sub_1006754EC();
      }
      uint64_t v16 = 0LL;
      uint64_t v17 = 10LL;
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v46 = sub_100388580(a1, a2, &v45, 0LL);
    uint64_t v21 = v45;
    if (!v46) {
      goto LABEL_25;
    }
  }

  if (!v21) {
    goto LABEL_25;
  }
  int v22 = v18 | (v19 << 8);
  if (v22)
  {
    if (v22 == 2)
    {
      if ((*(_BYTE *)(v21 + 72) & 0x20) == 0)
      {
        uint64_t v23 = "indicate";
        goto LABEL_39;
      }
    }

    else
    {
      if (v22 != 1)
      {
        uint64_t v23 = "unknown";
        goto LABEL_39;
      }

      if ((*(_BYTE *)(v21 + 72) & 0x10) == 0)
      {
        uint64_t v23 = "notify";
LABEL_39:
        __int16 v28 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
          sub_10067561C((uint64_t)v23, v28, v29);
        }
        uint64_t v16 = 0LL;
        uint64_t v17 = 245LL;
        goto LABEL_15;
      }
    }
  }

  id v24 = sub_100387D18(a1, a7);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v24);
  if (!v16)
  {
    uint64_t v17 = 14LL;
    goto LABEL_15;
  }

  if (v46 != *(void *)(a1 + 328))
  {
    *(void *)std::string src = &v46;
    uint64_t v25 = sub_10038DE34((uint64_t **)(a1 + 408), (unint64_t *)&v46, (uint64_t)&unk_1006C2518, (uint64_t **)src);
    uint64_t v26 = v25[5];
    *(void *)std::string src = 0LL;
    uint64_t v49 = 0LL;
    LOWORD(v50) = 0;
    sub_100241F90(src, v16);
    LOWORD(v50) = v22;
    if (v26 == v25[6]) {
      goto LABEL_50;
    }
    uint64_t v27 = -v26;
    while (1)
    {
      sub_100241F90(uu2, v16);
      v26 += 18LL;
      v27 -= 18LL;
      if (v26 == v25[6]) {
        goto LABEL_50;
      }
    }

    uint64_t v32 = (unsigned __int8 *)v25[6];
    if ((unsigned __int8 *)v26 == v32)
    {
LABEL_50:
      if (v22) {
        sub_10038A214(v25 + 5, src);
      }
    }

    else
    {
      if (v22)
      {
        uuid_copy((unsigned __int8 *)v26, src);
        *(_WORD *)(v26 + 16) = v50;
LABEL_69:
        uint64_t v17 = 0LL;
        goto LABEL_15;
      }

      sub_10038E284((unsigned __int8 *)(18 - v27), v32, (unsigned __int8 *)-v27);
      v25[6] = v37;
    }

    if (*(void *)(a1 + 104))
    {
      int v33 = *(_DWORD *)(v46 + 16);
      uint64_t v34 = sub_100404FE8();
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472LL;
      v38[2] = sub_10038A280;
      v38[3] = &unk_100894000;
      uint64_t v40 = a1;
      __int16 v42 = v22;
      int v41 = v33;
      id v39 = v16;
      BOOL v43 = v22 == 1;
      sub_100405384(v34, v38);
    }

    goto LABEL_69;
  }

  unsigned __int32 v30 = *(unsigned __int8 **)(a1 + 336);
  uint64_t v31 = -(uint64_t)v30;
  while (1)
  {
    sub_100241F90(src, v16);
    if (!uuid_compare(v30, src)) {
      break;
    }
    v30 += 20;
    v31 -= 20LL;
  }

  uint64_t v35 = *(unsigned __int8 **)(a1 + 344);
  if (v30 == v35)
  {
LABEL_62:
    if (v22)
    {
      *(void *)std::string src = 0LL;
      uint64_t v49 = 0LL;
      int v50 = 0;
      sub_100241F90(src, v16);
      int v50 = 0;
      sub_100384384((uint64_t *)(a1 + 336), src);
      if (qword_1008D9278 != -1) {
        dispatch_once(&qword_1008D9278, &stru_100894270);
      }
      if (sub_10041374C(qword_1008D9270, v16))
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_1008942D0);
        }
        sub_1005D3E78((uint64_t)off_1008D5F28, v16, 1);
      }
    }

    goto LABEL_69;
  }

  if (v22) {
    goto LABEL_69;
  }
  sub_10038E21C((unsigned __int8 *)(20 - v31), v35, (unsigned __int8 *)-v31);
  *(void *)(a1 + 344) = v36;
  if (qword_1008D9278 != -1) {
    dispatch_once(&qword_1008D9278, &stru_100894270);
  }
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_1008942D0);
  }
  uint64_t v17 = 0LL;
  sub_1005D3E78((uint64_t)off_1008D5F28, v16, 0);
LABEL_15:
  if (a8)
  {
    src[0] = 0;
    sub_100242CA4(src);
    a8(a6, v17, 0LL, 0LL);
    sub_100242CD8(src);
  }

  sub_100242FAC((uint64_t)v44);
}

void sub_10038A184( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10038A214(uint64_t *a1, unsigned __int8 *src)
{
  unint64_t v4 = a1[1];
  if (v4 >= a1[2])
  {
    uint64_t result = sub_10038E2EC(a1, (uint64_t)src);
  }

  else
  {
    uuid_copy((unsigned __int8 *)a1[1], src);
    *(_WORD *)(v4 + 16) = *((_WORD *)src + 8);
    uint64_t result = v4 + 18;
    a1[1] = v4 + 18;
  }

  a1[1] = result;
  return result;
}

void sub_10038A278(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10038A280(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 104LL);
  uint64_t v3 = a1 + 48;
  if (*(_WORD *)(a1 + 52)) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(*(void *)v2 + 40LL))( *(void *)(*(void *)(a1 + 40) + 104LL),  v3,  v1,  *(unsigned __int8 *)(a1 + 54));
  }
  else {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v2 + 48LL))( *(void *)(*(void *)(a1 + 40) + 104LL),  v3,  v1);
  }
}

void sub_10038A2B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v21[0] = 0LL;
  v21[1] = 0LL;
  sub_100242F28((uint64_t)v21, a1 + 40);
  [*(id *)(a1 + 496) removeObject:v3];
  [*(id *)(a1 + 504) removeObjectForKey:v3];
  [*(id *)(a1 + 488) removeObject:v3];
  if (qword_1008D9278 != -1) {
    dispatch_once(&qword_1008D9278, &stru_100894270);
  }
  if ((sub_10041374C(qword_1008D9270, v3) & 1) == 0)
  {
    unint64_t v4 = *(const unsigned __int8 **)(a1 + 336);
    if (v4 != *(const unsigned __int8 **)(a1 + 344))
    {
      uint64_t v5 = -(uint64_t)v4;
      while (1)
      {
        size_t v6 = sub_100241F94(v4);
        size_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
        unsigned int v8 = [v3 isEqual:v7];

        if (v8) {
          break;
        }
        v4 += 20;
        v5 -= 20LL;
      }

      sub_10038E21C((unsigned __int8 *)(20 - v5), *(unsigned __int8 **)(a1 + 344), (unsigned __int8 *)-v5);
      *(void *)(a1 + 344) = v9;
    }
  }

void sub_10038A490( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10038A4D8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 32) + 104LL) + 8LL))( *(void *)(*(void *)(a1 + 32) + 104LL),  *(void *)(a1 + 40));
}

uint64_t sub_10038A4EC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 32) + 104LL) + 8LL))( *(void *)(*(void *)(a1 + 32) + 104LL),  *(void *)(a1 + 40));
}

void sub_10038A500(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  size_t v7 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138543618;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(void *)&buf[14] = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "GattServer device %{public}@ connected for session %p",  buf,  0x16u);
  }

  sub_100241F90(buf, v6);
  if (a1 + 544 != sub_1001FDB10(a1 + 536, buf))
  {
    unsigned int v8 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_FAULT)) {
      sub_1006756DC(v8);
    }
  }

  *(void *)std::string buf = 0LL;
  *(void *)&uint8_t buf[8] = 0LL;
  sub_100242F28((uint64_t)buf, a1 + 40);
  if (a4)
  {
    sub_100241F90(uu1, v6);
    uint64_t v9 = uu1;
    sub_10038E490( (uint64_t **)(a1 + 536),  uu1,  (uint64_t)&unk_1006C2518,  (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v9)[6] = a4;
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
  {
    sub_1006756B0();
  }

  sub_100242F54((uint64_t)buf);
  if (qword_1008D9278 != -1) {
    dispatch_once(&qword_1008D9278, &stru_100894270);
  }
  if (sub_10041374C(qword_1008D9270, v6))
  {
    sub_100242ECC((uint64_t)buf);
    sub_1003850D0(a1, v6, (unsigned __int16)(*(_WORD *)(*(void *)(a1 + 128) + 48LL) + 1), 0xFFFFu);
  }

  sub_100242FAC((uint64_t)buf);
}

void sub_10038A6EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10038A71C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v21[0] = 0LL;
  v21[1] = 0LL;
  sub_100242F28((uint64_t)v21, a1 + 40);
  sub_100241F90(uu2, v3);
  unint64_t v4 = (uint64_t *)sub_1001FDB10(a1 + 536, uu2);
  if ((uint64_t *)(a1 + 544) == v4)
  {
    uint64_t v5 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100675758((uint64_t)v3, v5, v6);
    }
  }

  else
  {
    sub_1001FDBCC((uint64_t **)(a1 + 536), v4);
    operator delete(v4);
  }

  size_t v7 = *(void **)(a1 + 408);
  if (v7 != (void *)(a1 + 416))
  {
    do
    {
      for (uint64_t i = v7[5]; i != v7[6]; i += 18LL)
      {
        uint64_t v9 = sub_100241F94((const unsigned __int8 *)i);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        unsigned int v11 = [v3 isEqual:v10];

        if (v11)
        {
          if (*(_WORD *)(i + 16))
          {
            int v12 = *(_DWORD *)(v7[4] + 16LL);
            uint64_t v13 = sub_100404FE8();
            v17[0] = _NSConcreteStackBlock;
            v17[1] = 3221225472LL;
            v17[2] = sub_10038A978;
            v17[3] = &unk_100881060;
            uint64_t v19 = a1;
            int v20 = v12;
            id v18 = v3;
            sub_100405384(v13, v17);
          }

          break;
        }
      }

      unint64_t v14 = (void *)v7[1];
      if (v14)
      {
        do
        {
          unint64_t v15 = v14;
          unint64_t v14 = (void *)*v14;
        }

        while (v14);
      }

      else
      {
        do
        {
          unint64_t v15 = (void *)v7[2];
          BOOL v16 = *v15 == (void)v7;
          size_t v7 = v15;
        }

        while (!v16);
      }

      size_t v7 = v15;
    }

    while (v15 != (void *)(a1 + 416));
  }

  sub_10038A2B8(a1, v3);
  sub_100386208(a1);
  sub_100242FAC((uint64_t)v21);
}

void sub_10038A928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10038A978(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(*(void *)(a1 + 40) + 104LL) + 48LL))( *(void *)(*(void *)(a1 + 40) + 104LL),  a1 + 48,  *(void *)(a1 + 32));
}

void sub_10038A994(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1 + 40);
  if (!a3)
  {
    for (uint64_t i = *(const unsigned __int8 **)(a1 + 336); i != *(const unsigned __int8 **)(a1 + 344); i += 20)
    {
      sub_100241F90(uu2, v5);
      if (!uuid_compare(i, uu2))
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_1008942D0);
        }
        sub_1005D3E78((uint64_t)off_1008D5F28, v5, 1);
        break;
      }
    }
  }

  sub_100242FAC((uint64_t)v7);
}

void sub_10038AA8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _Unwind_Resume(a1);
}

void sub_10038AAB8(uint64_t a1, void *a2, int a3)
{
}

void sub_10038AAC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 40);
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894310);
  }
  unint64_t v4 = off_1008D5F08;
  sub_100241F90(v6, v3);
  sub_100242FAC((uint64_t)v5);
}

void sub_10038AB94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _Unwind_Resume(a1);
}

void sub_10038ABC0(uint64_t a1, void *a2)
{
}

uint64_t sub_10038ABC8(uint64_t a1)
{
  v96[0] = 0LL;
  v96[1] = 0LL;
  sub_100242F28((uint64_t)v96, a1 + 40);
  uint64_t v1 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "statedump: -------------------- GATT Server ---------------------",  buf,  2u);
  }

  sub_1003843F0(a1);
  uint64_t v2 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Client Config Descriptors:", buf, 2u);
    uint64_t v2 = (os_log_s *)qword_1008F75B0;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    GATT 'Service Changed':", buf, 2u);
  }

  uint64_t v3 = *(void *)(a1 + 336);
  for (uint64_t i = *(void *)(a1 + 344); v3 != i; v3 += 20LL)
  {
    id v5 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      memset(buf, 0, sizeof(buf));
      uuid_unparse_upper((const unsigned __int8 *)v3, buf);
      sub_10002418C(&v100, buf);
      if ((v100.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v6 = &v100;
      }
      else {
        uint64_t v6 = (std::stringbuf::string_type *)v100.__r_.__value_.__r.__words[0];
      }
      int v7 = *(unsigned __int16 *)(v3 + 16);
      int v8 = *(unsigned __int16 *)(v3 + 18);
      LODWORD(v101.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)v101.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
      WORD2(v101.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v101.__r_.__value_.__r.__words[1] + 6) = v7;
      WORD1(v101.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v101.__r_.__value_.__r.__words[2]) = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "statedump:       %{public}s - [0x%04x, 0x%04x]",  (uint8_t *)&v101,  0x18u);
      uint64_t i = *(void *)(a1 + 344);
    }
  }

  uint64_t v9 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:    User-specified:", buf, 2u);
  }

  uint64_t v10 = *(void **)(a1 + 408);
  if (v10 != (void *)(a1 + 416))
  {
    uint64_t v82 = 67109120LL;
    do
    {
      unsigned int v11 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = **(unsigned __int16 **)(v10[4] + 8LL);
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:       0x%04x", buf, 8u);
      }

      uint64_t v13 = v10[5];
      uint64_t v14 = v10[6];
      while (v13 != v14)
      {
        unint64_t v15 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
        {
          memset(buf, 0, sizeof(buf));
          uuid_unparse_upper((const unsigned __int8 *)v13, buf);
          sub_10002418C(&v101, buf);
          if ((v101.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            BOOL v16 = &v101;
          }
          else {
            BOOL v16 = (std::stringbuf::string_type *)v101.__r_.__value_.__r.__words[0];
          }
          uint64_t v17 = "Indicate";
          if (*(_WORD *)(v13 + 16) == 1) {
            uint64_t v17 = "Notify";
          }
          LODWORD(v100.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
          WORD2(v100.__r_.__value_.__r.__words[1]) = 2082;
          *(std::string::size_type *)((char *)&v100.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v17;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "statedump:          %{public}s (%{public}s)",  (uint8_t *)&v100,  0x16u);
          uint64_t v14 = v10[6];
        }

        v13 += 18LL;
      }

      id v18 = (void *)v10[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          id v18 = (void *)*v18;
        }

        while (v18);
      }

      else
      {
        do
        {
          uint64_t v19 = (void *)v10[2];
          BOOL v20 = *v19 == (void)v10;
          uint64_t v10 = v19;
        }

        while (!v20);
      }

      uint64_t v10 = v19;
    }

    while (v19 != (void *)(a1 + 416));
  }

  uint64_t v21 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump: Pending transactions:", buf, 2u);
    uint64_t v21 = (os_log_s *)qword_1008F75B0;
  }

  int v22 = *(void **)(a1 + 384);
  if (v22 != (void *)(a1 + 392))
  {
    do
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = *((_DWORD *)v22 + 8);
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump:    Transaction #%d", buf, 8u);
        uint64_t v21 = (os_log_s *)qword_1008F75B0;
      }

      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = *((_DWORD *)v22 + 10);
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "statedump:       Attribute ID: 0x%0x",  buf,  8u);
        uint64_t v21 = (os_log_s *)qword_1008F75B0;
      }

      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        if (*((_BYTE *)v22 + 44)) {
          uint64_t v25 = "Execute Write";
        }
        else {
          uint64_t v25 = "Read/Write";
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "statedump:       Type: %{public}s",  buf,  0xCu);
        uint64_t v21 = (os_log_s *)qword_1008F75B0;
      }

      uint64_t v26 = (void *)v22[1];
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          uint64_t v26 = (void *)*v26;
        }

        while (v26);
      }

      else
      {
        do
        {
          uint64_t v27 = (void *)v22[2];
          BOOL v20 = *v27 == (void)v22;
          int v22 = v27;
        }

        while (!v20);
      }

      int v22 = v27;
    }

    while (v27 != (void *)(a1 + 392));
  }

  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump: Update Queue:", buf, 2u);
    uint64_t v21 = (os_log_s *)qword_1008F75B0;
  }

  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 480)) {
      __int16 v28 = "yes";
    }
    else {
      __int16 v28 = "no";
    }
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v28;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump:    TX full: %{public}s", buf, 0xCu);
    uint64_t v21 = (os_log_s *)qword_1008F75B0;
  }

  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump:    Updates:", buf, 2u);
  }

  unint64_t v29 = *(void *)(a1 + 464);
  uint64_t v30 = *(void *)(a1 + 440);
  uint64_t v31 = *(void *)(a1 + 448);
  uint64_t v32 = (void *)(v30 + 8 * (v29 >> 8));
  if (v31 == v30) {
    int v33 = 0LL;
  }
  else {
    int v33 = (uint64_t *)(*v32 + 16LL * v29);
  }
  while (1)
  {
    if (v31 == v30)
    {
      uint64_t v35 = 0LL;
    }

    else
    {
      unint64_t v34 = *(void *)(a1 + 472) + *(void *)(a1 + 464);
      uint64_t v35 = *(void *)(v30 + ((v34 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v34;
    }

    uint64_t v36 = v33[1];
    uint64_t v37 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      if (*v33)
      {
        sub_100494958(*v33, (uint64_t)buf);
        if (buf[23] >= 0) {
          BOOL v38 = buf;
        }
        else {
          BOOL v38 = *(_BYTE **)buf;
        }
        LODWORD(v101.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v101.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "statedump:       %{public}s",  (uint8_t *)&v101,  0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      else
      {
        LODWORD(v101.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v101.__r_.__value_.__r.__words + 4) = 0LL;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "statedump:       %{public}s",  (uint8_t *)&v101,  0xCu);
      }

      uint64_t v37 = (os_log_s *)qword_1008F75B0;
    }

    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      int v39 = **(unsigned __int16 **)(*(void *)(v36 + 8) + 8LL);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v39;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "statedump:          Characteristic handle: 0x%04x",  buf,  8u);
      uint64_t v37 = (os_log_s *)qword_1008F75B0;
    }

    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      sub_10056B0A4(v36 + 24, (std::stringbuf::string_type *)buf);
      uint64_t v40 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      LODWORD(v101.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v101.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "statedump:          Value: %{public}s",  (uint8_t *)&v101,  0xCu);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    v33 += 2;
    if ((uint64_t *)((char *)v33 - *v32) == (uint64_t *)4096)
    {
      int v41 = (uint64_t *)v32[1];
      ++v32;
      int v33 = v41;
    }

    uint64_t v30 = *(void *)(a1 + 440);
    uint64_t v31 = *(void *)(a1 + 448);
  }

  __int16 v42 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump:    Stalled devices:", buf, 2u);
  }

  __int128 v94 = 0u;
  __int128 v95 = 0u;
  __int128 v92 = 0u;
  __int128 v93 = 0u;
  id v43 = *(id *)(a1 + 488);
  id v44 = [v43 countByEnumeratingWithState:&v92 objects:v99 count:16];
  if (v44)
  {
    uint64_t v45 = *(void *)v93;
    do
    {
      for (uint64_t j = 0LL; j != v44; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v93 != v45) {
          objc_enumerationMutation(v43);
        }
        unint64_t v47 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v48 = *(void *)(*((void *)&v92 + 1) + 8LL * (void)j);
          *(_DWORD *)std::string buf = 138543362;
          *(void *)&uint8_t buf[4] = v48;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "statedump:       %{public}@", buf, 0xCu);
        }
      }

      id v44 = [v43 countByEnumeratingWithState:&v92 objects:v99 count:16];
    }

    while (v44);
  }

  uint64_t v49 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "statedump:    Outstanding App Indications:",  buf,  2u);
  }

  __int128 v90 = 0u;
  __int128 v91 = 0u;
  __int128 v88 = 0u;
  __int128 v89 = 0u;
  id v50 = *(id *)(a1 + 504);
  id v51 = [v50 countByEnumeratingWithState:&v88 objects:v98 count:16];
  if (v51)
  {
    uint64_t v52 = *(void *)v89;
    do
    {
      for (k = 0LL; k != v51; k = (char *)k + 1)
      {
        if (*(void *)v89 != v52) {
          objc_enumerationMutation(v50);
        }
        std::string::size_type v54 = *(void *)(*((void *)&v88 + 1) + 8LL * (void)k);
        id v55 = objc_msgSend(*(id *)(a1 + 504), "objectForKey:", v54, v82);
        __int128 v56 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
        {
          if (v55)
          {
            sub_100494958((uint64_t)v55, (uint64_t)buf);
            int v57 = buf;
            if (buf[23] < 0) {
              int v57 = *(_BYTE **)buf;
            }
            LODWORD(v101.__r_.__value_.__l.__data_) = 136446466;
            *(std::string::size_type *)((char *)v101.__r_.__value_.__r.__words + 4) = (std::string::size_type)v57;
            WORD2(v101.__r_.__value_.__r.__words[1]) = 2114;
            *(std::string::size_type *)((char *)&v101.__r_.__value_.__r.__words[1] + 6) = v54;
            _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "statedump:       %{public}s - %{public}@",  (uint8_t *)&v101,  0x16u);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }

          else
          {
            LODWORD(v101.__r_.__value_.__l.__data_) = 136446466;
            *(std::string::size_type *)((char *)v101.__r_.__value_.__r.__words + 4) = 0LL;
            WORD2(v101.__r_.__value_.__r.__words[1]) = 2114;
            *(std::string::size_type *)((char *)&v101.__r_.__value_.__r.__words[1] + 6) = v54;
            _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "statedump:       %{public}s - %{public}@",  (uint8_t *)&v101,  0x16u);
          }
        }
      }

      id v51 = [v50 countByEnumeratingWithState:&v88 objects:v98 count:16];
    }

    while (v51);
  }

  __n128 v58 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "statedump:    Outstanding Server Indications:",  buf,  2u);
  }

  __int128 v86 = 0u;
  __int128 v87 = 0u;
  __int128 v84 = 0u;
  __int128 v85 = 0u;
  id v59 = *(id *)(a1 + 496);
  id v60 = [v59 countByEnumeratingWithState:&v84 objects:v97 count:16];
  if (v60)
  {
    uint64_t v61 = *(void *)v85;
    do
    {
      for (m = 0LL; m != v60; m = (char *)m + 1)
      {
        if (*(void *)v85 != v61) {
          objc_enumerationMutation(v59);
        }
        __int128 v63 = (os_log_s *)qword_1008F75B0;
        if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v64 = *(void *)(*((void *)&v84 + 1) + 8LL * (void)m);
          *(_DWORD *)std::string buf = 138543362;
          *(void *)&uint8_t buf[4] = v64;
          _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "statedump:       %{public}@",  buf,  0xCu);
        }
      }

      id v60 = [v59 countByEnumeratingWithState:&v84 objects:v97 count:16];
    }

    while (v60);
  }

  id v65 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "statedump: Prepared writes:", buf, 2u);
  }

  id v66 = *(void **)(a1 + 512);
  if (v66 != (void *)(a1 + 520))
  {
    uint64_t v67 = (const unsigned __int8 *)(a1 + 544);
    do
    {
      memset(&v101, 0, sizeof(v101));
      sub_10002418C(&v101, "Unknown");
      int v68 = *(const unsigned __int8 **)(a1 + 536);
      if (v68 != v67)
      {
        while (*((void *)v68 + 6) != v66[4])
        {
          uint64_t v69 = (const unsigned __int8 *)*((void *)v68 + 1);
          if (v69)
          {
            do
            {
              uint64_t v70 = v69;
              uint64_t v69 = *(const unsigned __int8 **)v69;
            }

            while (v69);
          }

          else
          {
            do
            {
              uint64_t v70 = (const unsigned __int8 *)*((void *)v68 + 2);
              BOOL v20 = *(void *)v70 == (void)v68;
              int v68 = v70;
            }

            while (!v20);
          }

          int v68 = v70;
          if (v70 == v67) {
            goto LABEL_148;
          }
        }

        memset(buf, 0, sizeof(buf));
        uuid_unparse_upper(v68 + 32, buf);
        sub_10002418C(&v100, buf);
        std::stringbuf::string_type v101 = v100;
      }

void sub_10038BB20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
  sub_100242FAC((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_10038BBBC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(char **)(a1 + 8);
  id v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }

  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }

  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_10038BC70(a1 + 8, v6, (char *)&v7);
      sub_100008A30(a1 + 8);
      goto LABEL_12;
    }

char *sub_10038BC70(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0LL;
    }
    BOOL v20 = &v19[8 * v16];
    std::string __p = v19;
    uint64_t v27 = v20;
    __int16 v28 = v20;
    unint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_100008BA0(v8, v22);
        BOOL v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        uint64_t v27 = v20;
        unint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }

    *(void *)BOOL v20 = *(void *)v3;
    __int16 v28 = v20 + 8;
    unint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__std::string src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }

  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    unsigned int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)unint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_10038BE74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10038BEAC(uint64_t a1, __int16 a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = &off_1008A0290;
  *(void *)(a1 + 8) = a1 + 24;
  uint64_t v5 = *(void *)(a3 + 8);
  *(void *)(a1 + 72) = &off_10087FAA8;
  *(void *)(a1 + 80) = v5;
  if (v5) {
    sub_1002CD1E0(v5);
  }
  *(_WORD *)(a1 + 24) = a2;
  *(_WORD *)(a1 + 26) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_OWORD *)(a1 + 28) = xmmword_1006C2560;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  return a1;
}

uint64_t sub_10038BF24(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)a1 = off_1008A0320;
  *(void *)(a1 + 8) = a1 + 24;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  __int128 v4 = *(_OWORD *)(a2 + 40);
  __int128 v5 = *(_OWORD *)(a2 + 56);
  __int128 v6 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  char v7 = *(_BYTE *)(a2 + 96);
  *(void *)(a1 + 168) = 0LL;
  *(_BYTE *)(a1 + 96) = v7;
  *(void *)(a1 + 104) = 0LL;
  uint64_t v8 = (char **)(a1 + 104);
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  uint64_t v9 = (char **)(a1 + 136);
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  id v43 = (void *)(a1 + 168);
  uint64_t v10 = *(uint64_t **)(a2 + 104);
  if (v10 != *(uint64_t **)(a2 + 112))
  {
    unsigned int v11 = 0LL;
    uint64_t v12 = (void *)(a1 + 120);
    do
    {
      uint64_t v13 = (char *)operator new(0x70uLL);
      unint64_t v14 = v13;
      uint64_t v15 = *v10;
      *((_DWORD *)v13 + 4) = *(_DWORD *)(*v10 + 16);
      *(void *)uint64_t v13 = &off_1008A02F0;
      *((void *)v13 + 1) = v13 + 24;
      *(_OWORD *)(v13 + 24) = *(_OWORD *)(v15 + 24);
      __int128 v16 = *(_OWORD *)(v15 + 40);
      __int128 v17 = *(_OWORD *)(v15 + 56);
      __int128 v18 = *(_OWORD *)(v15 + 72);
      *((void *)v13 + 11) = *(void *)(v15 + 88);
      *(_OWORD *)(v13 + 72) = v18;
      *(_OWORD *)(v13 + 56) = v17;
      *(_OWORD *)(v13 + 40) = v16;
      *((void *)v13 + 12) = *(void *)(v15 + 96);
      *((_DWORD *)v13 + 26) = *(_DWORD *)(v15 + 104);
      if ((unint64_t)v11 >= *v12)
      {
        uint64_t v19 = (v11 - *v8) >> 3;
        uint64_t v20 = *v12 - (void)*v8;
        uint64_t v21 = v20 >> 2;
        else {
          unint64_t v22 = v21;
        }
        if (v22) {
          int v23 = (char *)sub_100008BA0(a1 + 120, v22);
        }
        else {
          int v23 = 0LL;
        }
        uint64_t v24 = &v23[8 * v19];
        *(void *)uint64_t v24 = v14;
        unsigned int v11 = v24 + 8;
        uint64_t v26 = *(char **)(a1 + 104);
        uint64_t v25 = *(char **)(a1 + 112);
        if (v25 != v26)
        {
          do
          {
            uint64_t v27 = *((void *)v25 - 1);
            v25 -= 8;
            *((void *)v24 - 1) = v27;
            v24 -= 8;
          }

          while (v25 != v26);
          uint64_t v25 = *v8;
        }

        *(void *)(a1 + 104) = v24;
        *(void *)(a1 + 112) = v11;
        *(void *)(a1 + 120) = &v23[8 * v22];
        if (v25) {
          operator delete(v25);
        }
      }

      else
      {
        *(void *)unsigned int v11 = v13;
        v11 += 8;
      }

      *(void *)(a1 + 112) = v11;
      ++v10;
    }

    while (v10 != *(uint64_t **)(a2 + 112));
  }

  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  for (uint64_t i = *(uint64_t **)(a2 + 136); i != *(uint64_t **)(a2 + 144); ++i)
  {
    unint64_t v29 = operator new(0x88uLL);
    sub_10038C2B0((uint64_t)v29, *i);
    uint64_t v31 = *(void **)(a1 + 144);
    unint64_t v30 = *(void *)(a1 + 152);
    if ((unint64_t)v31 >= v30)
    {
      uint64_t v33 = ((char *)v31 - *v9) >> 3;
      uint64_t v34 = v30 - (void)*v9;
      uint64_t v35 = v34 >> 2;
      else {
        unint64_t v36 = v35;
      }
      if (v36) {
        uint64_t v37 = (char *)sub_100008BA0(a1 + 152, v36);
      }
      else {
        uint64_t v37 = 0LL;
      }
      BOOL v38 = &v37[8 * v33];
      *(void *)BOOL v38 = v29;
      uint64_t v32 = v38 + 8;
      uint64_t v40 = *(char **)(a1 + 136);
      int v39 = *(char **)(a1 + 144);
      if (v39 != v40)
      {
        do
        {
          uint64_t v41 = *((void *)v39 - 1);
          v39 -= 8;
          *((void *)v38 - 1) = v41;
          v38 -= 8;
        }

        while (v39 != v40);
        int v39 = *v9;
      }

      *(void *)(a1 + 136) = v38;
      *(void *)(a1 + 144) = v32;
      *(void *)(a1 + 152) = &v37[8 * v36];
      if (v39) {
        operator delete(v39);
      }
    }

    else
    {
      *uint64_t v31 = v29;
      uint64_t v32 = v31 + 1;
    }

    *(void *)(a1 + 144) = v32;
  }

  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  if (a1 != a2) {
    sub_100050224( v43,  *(__int128 **)(a2 + 168),  *(__int128 **)(a2 + 176),  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2));
  }
  return a1;
}

void sub_10038C250( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  unint64_t v14 = *a10;
  if (*a10)
  {
    v10[22] = v14;
    operator delete(v14);
  }

  uint64_t v15 = *v12;
  if (*v12)
  {
    v10[18] = v15;
    operator delete(v15);
  }

  __int128 v16 = *v11;
  if (*v11)
  {
    v10[14] = v16;
    operator delete(v16);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10038C2B0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)a1 = off_1008A02C0;
  *(void *)(a1 + 8) = a1 + 24;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  __int128 v4 = *(_OWORD *)(a2 + 40);
  __int128 v5 = *(_OWORD *)(a2 + 56);
  __int128 v6 = *(_OWORD *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v8 = (void *)(a1 + 96);
  *(void *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 112) = 0u;
  uint64_t v9 = *(void *)(a2 + 96);
  if (v9)
  {
    uint64_t v10 = (char *)operator new(0x58uLL);
    *((_DWORD *)v10 + 4) = *(_DWORD *)(v9 + 16);
    *(void *)uint64_t v10 = &off_1008A0290;
    *((void *)v10 + 1) = v10 + 24;
    __int128 v11 = *(_OWORD *)(v9 + 24);
    __int128 v12 = *(_OWORD *)(v9 + 40);
    *(_OWORD *)(v10 + 56) = *(_OWORD *)(v9 + 56);
    *(_OWORD *)(v10 + 40) = v12;
    *(_OWORD *)(v10 + 24) = v11;
    uint64_t v13 = *(void *)(v9 + 80);
    *((void *)v10 + 9) = &off_10087FAA8;
    *((void *)v10 + 10) = v13;
    if (v13) {
      sub_1002CD1E0(v13);
    }
    *uint64_t v8 = v10;
  }

  for (uint64_t i = *(void **)(a2 + 104); i != *(void **)(a2 + 112); ++i)
  {
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)*i + 16LL))(*i);
    uint64_t v16 = v15;
    __int128 v18 = *(uint64_t **)(a1 + 112);
    unint64_t v17 = *(void *)(a1 + 120);
    if ((unint64_t)v18 >= v17)
    {
      uint64_t v20 = *(void *)(a1 + 104);
      uint64_t v21 = ((uint64_t)v18 - v20) >> 3;
      uint64_t v22 = v17 - v20;
      uint64_t v23 = v22 >> 2;
      else {
        unint64_t v24 = v23;
      }
      if (v24) {
        uint64_t v25 = (char *)sub_100008BA0(a1 + 120, v24);
      }
      else {
        uint64_t v25 = 0LL;
      }
      uint64_t v26 = (uint64_t *)&v25[8 * v21];
      *uint64_t v26 = v16;
      uint64_t v19 = v26 + 1;
      __int16 v28 = *(char **)(a1 + 104);
      uint64_t v27 = *(char **)(a1 + 112);
      if (v27 != v28)
      {
        do
        {
          uint64_t v29 = *((void *)v27 - 1);
          v27 -= 8;
          *--uint64_t v26 = v29;
        }

        while (v27 != v28);
        uint64_t v27 = *(char **)(a1 + 104);
      }

      *(void *)(a1 + 104) = v26;
      *(void *)(a1 + 112) = v19;
      *(void *)(a1 + 120) = &v25[8 * v24];
      if (v27) {
        operator delete(v27);
      }
    }

    else
    {
      *__int128 v18 = v15;
      uint64_t v19 = v18 + 1;
    }

    *(void *)(a1 + 112) = v19;
  }

  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  return a1;
}

void sub_10038C490(_Unwind_Exception *a1)
{
  __int128 v4 = *(void **)(v1 + 104);
  if (v4)
  {
    *(void *)(v1 + 112) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

void *sub_10038C4C4(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9 = a4;
  *a1 = v9;
  a1[1] = a2;
  a1[2] = a3;
  a1[3] = &off_10087FAA8;
  uint64_t v10 = *(void *)(a5 + 8);
  a1[4] = v10;
  if (v10) {
    sub_1002CD1E0(v10);
  }

  return a1;
}

void sub_10038C530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10038C550(uint64_t a1)
{
  if (qword_1008D9268 != -1) {
    dispatch_once(&qword_1008D9268, &stru_100894058);
  }
  return sub_100387A98(qword_1008D9260, *(_DWORD *)(a1 + 12));
}

void sub_10038C5A0(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_100380304((uint64_t)v1);
  qword_1008D9260 = (uint64_t)v1;
}

void sub_10038C5D0(_Unwind_Exception *a1)
{
}

uint64_t sub_10038C5EC(uint64_t a1)
{
  if (qword_1008D9268 != -1) {
    dispatch_once(&qword_1008D9268, &stru_100894058);
  }
  return sub_100387B90(qword_1008D9260, *(void *)(a1 + 16), *(unsigned __int16 *)(a1 + 24));
}

uint64_t sub_10038C648(uint64_t a1)
{
  if (qword_1008D9268 != -1) {
    dispatch_once(&qword_1008D9268, &stru_100894058);
  }
  return sub_100387DDC(qword_1008D9260, *(void *)(a1 + 16));
}

uint64_t sub_10038C6A0(uint64_t a1)
{
  if (qword_1008D9268 != -1) {
    dispatch_once(&qword_1008D9268, &stru_100894058);
  }
  return sub_100388090(qword_1008D9260, *(void *)(a1 + 16));
}

uint64_t sub_10038C6F0(uint64_t a1, uint64_t a2, void *a3, int **a4, _DWORD *a5, char a6)
{
  id v11 = a3;
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_100894130;
  *(void *)(a1 + 16) = a2;
  id v12 = v11;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 24) = v12;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  sub_10038C858((void *)(a1 + 32), *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 5);
  *(_DWORD *)(a1 + 56) = *a5;
  *(_BYTE *)(a1 + 60) = a6;

  return a1;
}

void sub_10038C784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10038C79C(uint64_t a1)
{
  *(void *)a1 = off_100894130;
  uint64_t v3 = (void **)(a1 + 32);
  sub_10038CD78(&v3);

  return a1;
}

void sub_10038C7E8(id *a1)
{
  *a1 = off_100894130;
  uint64_t v2 = a1 + 4;
  sub_10038CD78(&v2);

  operator delete(a1);
}

uint64_t sub_10038C838(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t, void))(**(void **)(a1 + 16) + 32LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24),  a1 + 32,  a1 + 56,  *(unsigned __int8 *)(a1 + 60));
}

void *sub_10038C858(void *result, int *a2, int *a3, unint64_t a4)
{
  if (a4)
  {
    __int128 v6 = result;
    sub_100241124(result, a4);
    uint64_t result = (void *)sub_10038C8B4((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_10038C8AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10038C8B4(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  if (a2 != a3)
  {
    __int128 v6 = a2;
    do
    {
      int v7 = *v6;
      *(_WORD *)(a4 + 4) = *((_WORD *)v6 + 2);
      *(_DWORD *)a4 = v7;
      uint64_t v8 = *((void *)v6 + 2);
      *(void *)(a4 + 8) = &off_10087FAA8;
      *(void *)(a4 + 16) = v8;
      if (v8) {
        sub_1002CD1E0(v8);
      }
      *(_BYTE *)(a4 + 24) = *((_BYTE *)v6 + 24);
      a4 += 32LL;
      v6 += 8;
    }

    while (v6 != a3);
  }

  return a4;
}

uint64_t sub_10038C934(uint64_t a1)
{
  if (qword_1008D9268 != -1) {
    dispatch_once(&qword_1008D9268, &stru_100894058);
  }
  return sub_100388218( qword_1008D9260,  *(unsigned int *)(a1 + 12),  *(void *)(a1 + 16),  *(unsigned __int8 *)(a1 + 24),  *(uint64_t **)(a1 + 32),  *(_BYTE *)(a1 + 40));
}

uint64_t sub_10038C99C(uint64_t a1)
{
  if (qword_1008D9268 != -1) {
    dispatch_once(&qword_1008D9268, &stru_100894058);
  }
  return sub_100388458(qword_1008D9260, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_10038C9EC( uint64_t a1, uint64_t a2, void *a3, _DWORD *a4, _WORD *a5, uint64_t a6, _DWORD *a7, char a8)
{
  id v15 = a3;
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1008941D8;
  *(void *)(a1 + 16) = a2;
  id v16 = v15;
  *(void *)(a1 + 24) = v16;
  *(_DWORD *)(a1 + 32) = *a4;
  *(_WORD *)(a1 + 36) = *a5;
  uint64_t v17 = *(void *)(a6 + 8);
  *(void *)(a1 + 40) = &off_10087FAA8;
  *(void *)(a1 + 48) = v17;
  if (v17) {
    sub_1002CD1E0(v17);
  }
  *(_DWORD *)(a1 + 56) = *a7;
  *(_BYTE *)(a1 + 60) = a8;

  return a1;
}

void sub_10038CA9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10038CAB4(uint64_t a1)
{
  *(void *)a1 = off_1008941D8;
  *(void *)(a1 + 40) = &off_10087FAA8;
  uint64_t v2 = *(unsigned int **)(a1 + 48);
  if (v2) {
    sub_1002CD254(v2);
  }

  return a1;
}

void sub_10038CB00(void *a1)
{
  *(void *)a1 = off_1008941D8;
  *((void *)a1 + 5) = &off_10087FAA8;
  uint64_t v2 = (unsigned int *)*((void *)a1 + 6);
  if (v2) {
    sub_1002CD254(v2);
  }

  operator delete(a1);
}

uint64_t sub_10038CB4C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 16)
                                                                                               + 24LL))( *(void *)(a1 + 16),  *(void *)(a1 + 24),  a1 + 32,  a1 + 36,  a1 + 40,  a1 + 56,  *(unsigned __int8 *)(a1 + 60));
}

void sub_10038CB7C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 10))
  {
    if (qword_1008D9268 != -1) {
      dispatch_once(&qword_1008D9268, &stru_100894058);
    }
    sub_100389978( (void *)qword_1008D9260,  *(void *)(a1 + 16),  *(unsigned __int16 *)(a1 + 24),  *(unsigned int *)(a1 + 28),  *(void *)(a1 + 32),  *(void (**)(uint64_t, uint64_t, __int16 *, void))(a1 + 40));
  }

  else
  {
    if (qword_1008D9268 != -1) {
      dispatch_once(&qword_1008D9268, &stru_100894058);
    }
    sub_100388874( qword_1008D9260,  *(void *)(a1 + 16),  *(unsigned __int16 *)(a1 + 24),  *(unsigned int *)(a1 + 28),  *(void *)(a1 + 32),  *(uint64_t **)(a1 + 40),  *(_BYTE *)(a1 + 48));
  }

void *sub_10038CC28(void *a1)
{
  *a1 = &off_100894248;
  a1[4] = &off_10087FAA8;
  uint64_t v2 = (unsigned int *)a1[5];
  if (v2) {
    sub_1002CD254(v2);
  }
  return a1;
}

void sub_10038CC6C(void *__p)
{
  void *__p = &off_100894248;
  __p[4] = &off_10087FAA8;
  uint64_t v2 = (unsigned int *)__p[5];
  if (v2) {
    sub_1002CD254(v2);
  }
  operator delete(__p);
}

void sub_10038CCB0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 10))
  {
    if (qword_1008D9268 != -1) {
      dispatch_once(&qword_1008D9268, &stru_100894058);
    }
    sub_100389C04( qword_1008D9260,  *(void *)(a1 + 16),  *(unsigned __int8 *)(a1 + 24),  *(unsigned __int16 *)(a1 + 26),  a1 + 32,  *(unsigned int *)(a1 + 48),  *(void *)(a1 + 56),  *(void (**)(uint64_t, uint64_t, void, void))(a1 + 64));
  }

  else
  {
    if (qword_1008D9268 != -1) {
      dispatch_once(&qword_1008D9268, &stru_100894058);
    }
    sub_100389348( qword_1008D9260,  *(void *)(a1 + 16),  *(unsigned __int8 *)(a1 + 24),  *(_WORD *)(a1 + 26),  a1 + 32,  *(_DWORD *)(a1 + 48),  *(void *)(a1 + 56),  *(uint64_t **)(a1 + 64),  *(_BYTE *)(a1 + 72));
  }

void sub_10038CD78(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10038CDB8((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_10038CDB8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (v3 != *a1)
  {
    do
    {
      *(void *)(v3 - 24) = &off_10087FAA8;
      __int128 v4 = *(unsigned int **)(v3 - 16);
      if (v4) {
        sub_1002CD254(v4);
      }
      v3 -= 32LL;
    }

    while (v3 != v2);
  }

  a1[1] = v2;
}

void sub_10038CE10(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10038CE10(a1, *a2);
    sub_10038CE10(a1, a2[1]);
    sub_10023BF24((uint64_t)(a2 + 7), (void *)a2[8]);
    operator delete(a2);
  }

void sub_10038CE5C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10038CE5C(a1, *a2);
    sub_10038CE5C(a1, a2[1]);
    __int128 v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }

    operator delete(a2);
  }

uint64_t sub_10038CEAC(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 256LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    int v7 = *v2++;
    operator delete(v7);
  }

  return sub_10023DF04((uint64_t)a1);
}

void sub_10038CF40(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10038CF40(a1, *(void *)a2);
    sub_10038CF40(a1, *((void *)a2 + 1));
    unint64_t v4 = (void **)(a2 + 40);
    sub_10038CD78(&v4);
    operator delete(a2);
  }

char *sub_10038CF98(uint64_t **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v9 = 0LL;
  unint64_t v5 = (void **)sub_10038D024((uint64_t)a1, &v9, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    int v7 = (uint64_t **)v5;
    uint64_t v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 28) = *(_OWORD *)a3;
    *((_DWORD *)v6 + 11) = *(_DWORD *)(a3 + 16);
    sub_100029630(a1, v9, v7, (uint64_t *)v6);
  }

  return v6;
}

void *sub_10038D024(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        int v7 = (void *)v4;
        uint64_t v8 = (unsigned __int8 *)(v4 + 28);
        uint64_t v4 = *v7;
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (!sub_10063447C(v8, a3)) {
        break;
      }
      unint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }

    while (v4);
  }

  else
  {
    int v7 = (void *)(a1 + 8);
  }

_OWORD *sub_10038D0B4(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v11 = 0LL;
  uint64_t v6 = (void **)sub_10002E9C8((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    int v7 = operator new(0x50uLL);
    int v9 = *((_DWORD *)*a4 + 4);
    void v7[2] = **a4;
    *((_DWORD *)v7 + 12) = v9;
    *((void *)v7 + 9) = 0LL;
    *((void *)v7 + 8) = 0LL;
    *((void *)v7 + 7) = v7 + 4;
    sub_100029630(a1, v11, v8, (uint64_t *)v7);
  }

  return v7;
}

void sub_10038D154(id a1)
{
  uint64_t v1 = operator new(0x50uLL);
  sub_100411DB0((uint64_t)v1);
  qword_1008D9270 = (uint64_t)v1;
}

void sub_10038D184(_Unwind_Exception *a1)
{
}

void sub_10038D198(id a1)
{
  uint64_t v1 = operator new(0xEB0uLL);
  sub_10061991C();
  qword_1008D5F18 = (uint64_t)v1;
}

void sub_10038D1C8(_Unwind_Exception *a1)
{
}

void sub_10038D1DC(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_10038D20C(_Unwind_Exception *a1)
{
}

void sub_10038D220(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_10038D250(_Unwind_Exception *a1)
{
}

uint64_t sub_10038D264(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xCCCCCCCCCCCCCCCLL) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v2) >> 2);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x666666666666666LL) {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCLL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_100050420(v7, v10);
  }
  else {
    uint64_t v11 = 0LL;
  }
  std::string __p = v11;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = (unsigned __int8 *)&v11[20 * v3];
  id v16 = v15;
  uint64_t v17 = &v11[20 * v10];
  uuid_copy(v15, (const unsigned __int8 *)a2);
  *((_DWORD *)v15 + 4) = *(_DWORD *)(a2 + 16);
  v16 += 20;
  sub_10038D3E0(a1, &__p);
  uint64_t v12 = a1[1];
  if (v16 != v15) {
    id v16 = &v15[(v16 - v15 - 20) % 0x14uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void sub_10038D394( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10038D3E0(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  if (v5 == *a1)
  {
    uint64_t v7 = a2[1];
  }

  else
  {
    do
    {
      uint64_t v7 = v6 - 20;
      uuid_copy((unsigned __int8 *)(v6 - 20), (const unsigned __int8 *)(v5 - 20));
      *(_DWORD *)(v6 - 4) = *(_DWORD *)(v5 - 4);
      v5 -= 20LL;
      v6 -= 20LL;
    }

    while (v5 != v4);
  }

  a2[1] = v7;
  uint64_t v8 = *a1;
  *a1 = v7;
  a2[1] = v8;
  uint64_t v9 = a1[1];
  a1[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = a1[2];
  a1[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
}

void sub_10038D494(id a1)
{
  uint64_t v1 = operator new(0x260uLL);
  sub_1005285C8((uint64_t)v1);
  off_1008D67A0 = v1;
}

void sub_10038D4C4(_Unwind_Exception *a1)
{
}

uint64_t *sub_10038D4D8(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = sub_1001FDBCC(a1, (uint64_t *)a2);
  uint64_t v5 = (void **)(a2 + 40);
  sub_10038CD78(&v5);
  operator delete((void *)a2);
  return v3;
}

uint64_t *sub_10038D520(uint64_t **a1, uint64_t *a2)
{
  unint64_t v3 = sub_1001FDBCC(a1, a2);
  uint64_t v4 = (void *)a2[5];
  if (v4)
  {
    a2[6] = (uint64_t)v4;
    operator delete(v4);
  }

  operator delete(a2);
  return v3;
}

void *sub_10038D560(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 4);
    if (v4 < 1) {
      result -= (unint64_t)(255 - v4) >> 8;
    }
    else {
      result += (unint64_t)v4 >> 8;
    }
  }

  return result;
}

uint64_t sub_10038D5BC(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x100) {
    a2 = 1;
  }
  if (v2 < 0x200) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 256LL;
  }

  return v4 ^ 1u;
}

uint64_t sub_10038D618(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 32 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x100) {
    a2 = 1;
  }
  if (v5 < 0x200) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

__n128 sub_10038D684@<Q0>( uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v21 = 0LL;
    __n128 v22 = 0uLL;
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = a5;
    uint64_t v16 = a6;
  }

  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    uint64_t v21 = 0LL;
    __n128 v22 = 0uLL;
    uint64_t v14 = a4;
    unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_10038D770(v12, v14, v15, v16, &v21);
      uint64_t v16 = v22.n128_i64[1];
      unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = (uint64_t *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      uint64_t v14 = v17 + 4096;
      uint64_t v21 = 0LL;
      __n128 v22 = 0uLL;
    }

    uint64_t v18 = *a1 + 4096;
    uint64_t v21 = 0LL;
    __n128 v22 = 0uLL;
    uint64_t v19 = a2;
  }

  sub_10038D770(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

void sub_10038D770(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  if (a1 == a2)
  {
    a2 = a1;
  }

  else
  {
    uint64_t v5 = *a3;
    uint64_t v6 = a2;
    while (1)
    {
      uint64_t v7 = a4 - v5;
      if ((v6 - a1) >> 4 >= v7 >> 4) {
        uint64_t v8 = v7 >> 4;
      }
      else {
        uint64_t v8 = (v6 - a1) >> 4;
      }
      if (v8)
      {
        uint64_t v9 = (uint64_t *)(v6 - 8);
        uint64_t v10 = -16 * v8;
        do
        {
          *(void *)(a4 - 16) = *(v9 - 1);
          a4 -= 16LL;
          uint64_t v11 = *v9;
          v9 -= 2;
          *(void *)(a4 + 8) = v11;
          v10 += 16LL;
        }

        while (v10);
      }

      v6 -= 16 * v8;
      if (v6 == a1) {
        break;
      }
      uint64_t v12 = *--a3;
      uint64_t v5 = v12;
      a4 = v12 + 4096;
    }

    if (*a3 + 4096 == a4)
    {
      uint64_t v13 = a3[1];
      ++a3;
      a4 = v13;
    }
  }

  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

double sub_10038D7FC(char **a1, char *a2, char **a3, char *a4, uint64_t a5)
{
  uint64_t v7 = *(char ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = *a1 + 4096; ; uint64_t i = v12 + 4096)
    {
      uint64_t v14 = 0LL;
      __int128 v15 = 0uLL;
      sub_10038D89C(a2, i, v7, v8, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      uint64_t v7 = (char **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = *v10++;
      a2 = v12;
    }

    a2 = *a3;
  }

  uint64_t v14 = 0LL;
  __int128 v15 = 0uLL;
  sub_10038D89C(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_10038D89C(char *a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, char **a5@<X8>)
{
  if (a1 == a2)
  {
    a2 = a1;
  }

  else
  {
    uint64_t v5 = *a3;
    while (1)
    {
      uint64_t v6 = v5 - a4 + 4096;
      if ((a2 - a1) >> 4 >= v6 >> 4) {
        uint64_t v7 = v6 >> 4;
      }
      else {
        uint64_t v7 = (a2 - a1) >> 4;
      }
      if (v7)
      {
        uint64_t v8 = &a1[16 * v7];
        do
        {
          *(void *)a4 = *(void *)a1;
          *((void *)a4 + 1) = *((void *)a1 + 1);
          a4 += 16;
          a1 += 16;
        }

        while (a1 != v8);
        a1 = v8;
      }

      if (a1 == a2) {
        break;
      }
      uint64_t v9 = a3[1];
      ++a3;
      uint64_t v5 = v9;
      a4 = v9;
    }

    if (*a3 + 4096 == a4)
    {
      uint64_t v10 = a3[1];
      ++a3;
      a4 = v10;
    }
  }

  *a5 = a2;
  a5[1] = (char *)a3;
  a5[2] = a4;
}

uint64_t sub_10038D92C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xCCCCCCCCCCCCCCCLL) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v2) >> 2);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x666666666666666LL) {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCLL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_100050420(v7, v10);
  }
  else {
    uint64_t v11 = 0LL;
  }
  std::string __p = v11;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = (unsigned __int8 *)&v11[20 * v3];
  uint64_t v16 = v15;
  uint64_t v17 = &v11[20 * v10];
  uuid_copy(v15, (const unsigned __int8 *)a2);
  *((_DWORD *)v15 + 4) = *(_DWORD *)(a2 + 16);
  v16 += 20;
  sub_10038D3E0(a1, &__p);
  uint64_t v12 = a1[1];
  if (v16 != v15) {
    uint64_t v16 = &v15[(v16 - v15 - 20) % 0x14uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void sub_10038DA5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10038DAA8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    BOOL v6 = sub_10063447C((unsigned __int8 *)(v3 + 28), a2);
    uint64_t v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      uint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }

    uint64_t v3 = *v7;
  }

  while (*v7);
  return v5;
}

void sub_10038DB20(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    BOOL v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_100008BA0(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_10038DDE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10038DE34(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = **a4;
    v11[6] = 0LL;
    v11[7] = 0LL;
    void v11[4] = v12;
    v11[5] = 0LL;
    sub_100029630(a1, (uint64_t)v9, v7, v11);
    return v11;
  }

  return (uint64_t *)v9;
}

void sub_10038DEF4(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *a2;
  *(_WORD *)(v4 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)uint64_t v4 = v5;
  uint64_t v6 = *((void *)a2 + 2);
  *(void *)(v4 + 8) = &off_10087FAA8;
  *(void *)(v4 + 16) = v6;
  if (v6) {
    sub_1002CD1E0(v6);
  }
  *(_BYTE *)(v4 + 24) = *((_BYTE *)a2 + 24);
  *(void *)(a1 + 8) = v4 + 32;
}

void sub_10038DF58(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10038DF60(uint64_t *a1, int *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v9 = v8 - v2;
  if (v9 >> 4 > v4) {
    unint64_t v4 = v9 >> 4;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v21 = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_100240F38(v7, v10);
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = &v11[32 * v3];
  v18[0] = v11;
  v18[1] = v12;
  uint64_t v19 = v12;
  int64_t v20 = &v11[32 * v10];
  int v13 = *a2;
  *((_WORD *)v12 + 2) = *((_WORD *)a2 + 2);
  *(_DWORD *)uint64_t v12 = v13;
  *((void *)v12 + 1) = &off_10087FAA8;
  uint64_t v14 = *((void *)a2 + 2);
  *((void *)v12 + 2) = v14;
  if (v14)
  {
    sub_1002CD1E0(v14);
    uint64_t v15 = v19;
  }

  else
  {
    uint64_t v15 = v12;
  }

  v12[24] = *((_BYTE *)a2 + 24);
  uint64_t v19 = v15 + 32;
  sub_10038E06C(a1, v18);
  uint64_t v16 = a1[1];
  sub_10038E180((uint64_t)v18);
  return v16;
}

void sub_10038E058(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10038E06C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10038E0E0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10038E0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  if (a3 != a5)
  {
    uint64_t v10 = a3;
    uint64_t v11 = a7 - 16;
    uint64_t v12 = a3;
    do
    {
      int v13 = *(_DWORD *)(v12 - 32);
      v12 -= 32LL;
      *(_WORD *)(v11 - 12) = *(_WORD *)(v12 + 4);
      *(_DWORD *)(v11 - 16) = v13;
      *(void *)(v11 - 8) = &off_10087FAA8;
      uint64_t v14 = *(void *)(v12 + 16);
      *(void *)uint64_t v11 = v14;
      if (v14) {
        sub_1002CD1E0(v14);
      }
      *(_BYTE *)(v11 + 8) = *(_BYTE *)(v10 - 8);
      v11 -= 32LL;
      v7 -= 32LL;
      uint64_t v10 = v12;
    }

    while (v12 != a5);
  }

  return a6;
}

uint64_t sub_10038E180(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10038E1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 32;
    *(void *)(v2 - 24) = &off_10087FAA8;
    uint64_t v5 = *(unsigned int **)(v2 - 16);
    if (v5)
    {
      sub_1002CD254(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }

    else
    {
      v2 -= 32LL;
    }
  }

unsigned __int8 *sub_10038E21C(unsigned __int8 *src, unsigned __int8 *a2, uuid_t dst)
{
  unint64_t v4 = src;
  if (src == a2) {
    return src;
  }
  uint64_t v5 = a2;
  do
  {
    uuid_copy(dst, v4);
    *((_DWORD *)dst + 4) = *((_DWORD *)v4 + 4);
    dst += 20;
    v4 += 20;
  }

  while (v4 != v5);
  return v5;
}

unsigned __int8 *sub_10038E284(unsigned __int8 *src, unsigned __int8 *a2, uuid_t dst)
{
  unint64_t v4 = src;
  if (src == a2) {
    return src;
  }
  uint64_t v5 = a2;
  do
  {
    uuid_copy(dst, v4);
    *((_WORD *)dst + 8) = *((_WORD *)v4 + 8);
    dst += 18;
    v4 += 18;
  }

  while (v4 != v5);
  return v5;
}

uint64_t sub_10038E2EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0x8E38E38E38E38E39LL * ((a1[1] - *a1) >> 1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xE38E38E38E38E38LL) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0x8E38E38E38E38E39LL * ((v8 - v2) >> 1);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x71C71C71C71C71CLL) {
    unint64_t v10 = 0xE38E38E38E38E38LL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_100291C58(v7, v10);
  }
  else {
    uint64_t v11 = 0LL;
  }
  std::string __p = v11;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = (unsigned __int8 *)&v11[18 * v3];
  uint64_t v16 = v15;
  uint64_t v17 = &v11[18 * v10];
  uuid_copy(v15, (const unsigned __int8 *)a2);
  *((_WORD *)v15 + 8) = *(_WORD *)(a2 + 16);
  v16 += 18;
  sub_1002924C0(a1, &__p);
  uint64_t v12 = a1[1];
  if (v16 != v15) {
    uint64_t v16 = &v15[(v16 - v15 - 18) % 0x12uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void sub_10038E43C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10038E490( uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0LL;
  uint64_t v6 = (uint64_t **)sub_1001FD824((uint64_t)a1, &v9, uu1);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_10038E530((uint64_t)a1, a4, v8);
    sub_100029630(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }

  return result;
}

void sub_10038E530( uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  uint64_t v6 = (unsigned __int8 *)operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((void *)v6 + 6) = 0LL;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_10038E590(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_10038E5A8(id a1)
{
  uint64_t v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_10038E5D8(_Unwind_Exception *a1)
{
}

void sub_10038E670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10038E6D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10038E76C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10038E8BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10038EB98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10038EC54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10038ED44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10038F13C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_100894340;
  *(void *)(a1 + 21) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(_DWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 44) = 1;
  *(void *)(a1 + 56) = 0LL;
  *(_WORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_WORD *)(a1 + 128) = 257;
  *(void *)(a1 + 144) = 0LL;
  uint64_t v2 = a1 + 144;
  *(void *)(a1 + 136) = a1 + 144;
  uint64_t v3 = a1 + 136;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 168) = 0LL;
  uint64_t v4 = a1 + 168;
  *(void *)(a1 + 160) = a1 + 168;
  uint64_t v5 = a1 + 160;
  *(_WORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 186) = 0;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 200) = 0LL;
  *(_WORD *)(a1 + 208) = 0;
  uint64_t v6 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v7 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = v6;

  uint64_t v8 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v9 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = v8;

  sub_100291CA0(v3, *(void **)(a1 + 144));
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 136) = v2;
  sub_100291CA0(v5, *(void **)(a1 + 168));
  *(void *)(a1 + 168) = 0LL;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 160) = v4;
  return a1;
}

void sub_10038F244(_Unwind_Exception *a1)
{
  sub_100291CA0(v3, *(void **)(v1 + 168));
  sub_100291CA0(v2, *(void **)(v1 + 144));

  _Unwind_Resume(a1);
}

uint64_t sub_10038F2A0(uint64_t a1)
{
  *(void *)a1 = off_100894340;
  uint64_t v2 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = 0LL;

  uint64_t v3 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = 0LL;

  sub_100291CA0(a1 + 160, *(void **)(a1 + 168));
  sub_100291CA0(a1 + 136, *(void **)(a1 + 144));

  return a1;
}

id sub_10038F33C(uint64_t a1)
{
  id v2 = *(id *)(a1 + 112);
  objc_sync_enter(v2);
  id v3 = [*(id *)(a1 + 112) count];
  objc_sync_exit(v2);

  return v3;
}

void sub_10038F384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10038F39C(uint64_t a1, void *a2)
{
  id obj = *(id *)(a1 + 112);
  id v4 = a2;
  objc_sync_enter(obj);
  [*(id *)(a1 + 112) addObject:v4];

  objc_sync_exit(obj);
}

void sub_10038F3FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_10038F41C(uint64_t a1)
{
  id v2 = *(id *)(a1 + 112);
  objc_sync_enter(v2);
  if ([*(id *)(a1 + 112) count])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 112) objectAtIndex:0]);
    [*(id *)(a1 + 112) removeObjectAtIndex:0];
  }

  else
  {
    id v3 = 0LL;
  }

  objc_sync_exit(v2);

  return v3;
}

void sub_10038F4A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10038F4BC(void *a1, int64_t a2, void *a3)
{
  id v5 = a3;
  int v6 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  uint64_t v7 = a1[15];
  if (v6 == 3)
  {
    if (v7)
    {
      if (!sub_10038F33C((uint64_t)a1))
      {
        sub_10043F394(v7, a2, v5);
        goto LABEL_17;
      }

void sub_10038F6DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10038F728(void *a1)
{
  int v2 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  id v3 = 0LL;
  *(void *)&__int128 v4 = 134218242LL;
  __int128 v17 = v4;
  while (1)
  {
    id v5 = sub_10038F41C((uint64_t)a1);
    int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

    if (!v6) {
      break;
    }
    uint64_t v7 = a1[15];
    id v3 = v6;
    if (v2 == 3)
    {
      if (v7)
      {
        uint64_t v8 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = (char *)sub_10038F33C((uint64_t)a1);
          uint64_t v10 = a1[11];
          *(_DWORD *)std::string buf = v17;
          uint64_t v19 = v9 + 1;
          __int16 v20 = 2114;
          uint64_t v21 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "(CBSR) Sending classic %lu queued messages to application %{public}@",  buf,  0x16u);
        }

        id v11 = objc_msgSend(v6, "msgId", v17);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v6 arguments]);
        sub_10043F394(v7, (int64_t)v11, v12);
        goto LABEL_12;
      }
    }

    else if (v7)
    {
      uint64_t v13 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = (char *)sub_10038F33C((uint64_t)a1);
        uint64_t v15 = a1[11];
        *(_DWORD *)std::string buf = v17;
        uint64_t v19 = v14 + 1;
        __int16 v20 = 2114;
        uint64_t v21 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "(CBSR) Sending %lu queued messages to application %{public}@",  buf,  0x16u);
      }

      id v16 = objc_msgSend(v6, "msgId", v17);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v6 arguments]);
      sub_10043F394(v7 - 144, (int64_t)v16, v12);
LABEL_12:

      id v3 = v6;
    }
  }

void sub_10038F918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10038F960(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  v9[0] = @"kCBMsgArgDeviceUUID";
  v9[1] = @"kCBMsgArgAncsAuthorization";
  v10[0] = v5;
  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a3));
  v10[1] = v6;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v10,  v9,  2LL));

  if (!(*(unsigned int (**)(void *))(*a1 + 16LL))(a1))
  {
    int64_t v8 = 110LL;
    goto LABEL_5;
  }

  if ((*(unsigned int (**)(void *))(*a1 + 16LL))(a1) == 1)
  {
    int64_t v8 = 61LL;
LABEL_5:
    sub_10038F4BC(a1, v8, v7);
  }
}

void sub_10038FA68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSMutableString *sub_10038FA98(uint64_t a1)
{
  int v2 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16LL))(a1))
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16LL))(a1) == 1)
    {
      id v3 = "Peripheral";
    }

    else
    {
      int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
      id v3 = "Unknown";
      if (v4 == 3) {
        id v3 = "Classic";
      }
    }
  }

  else
  {
    id v3 = "Central";
  }

  -[NSMutableString appendFormat:](v2, "appendFormat:", @"Type: %s\n", v3);
  sub_10038FCC8((void *)(a1 + 8), __p);
  if (v14 >= 0) {
    id v5 = __p;
  }
  else {
    id v5 = (void **)__p[0];
  }
  -[NSMutableString appendFormat:](v2, "appendFormat:", @"Last foreground time: %s\n", v5);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (*(_BYTE *)(a1 + 24)) {
    int v6 = "Yes";
  }
  else {
    int v6 = "No";
  }
  -[NSMutableString appendFormat:](v2, "appendFormat:", @"Supports backgrounding: %s\n", v6);
  int v7 = *(_DWORD *)(a1 + 32);
  if (v7)
  {
    int64_t v8 = "Unknown";
    if (v7 == 1) {
      int64_t v8 = "Listener";
    }
    if (v7 == 2) {
      uint64_t v9 = "Programmatic";
    }
    else {
      uint64_t v9 = v8;
    }
    -[NSMutableString appendFormat:](v2, "appendFormat:", @"Pairing agent: %s\n", v9);
  }

  unsigned int v10 = *(unsigned __int8 *)(a1 + 129);
  if (v10 <= 7)
  {
    if (v10 == 2)
    {
      id v11 = "terminated";
      goto LABEL_34;
    }

    if (v10 == 4)
    {
      id v11 = "suspended";
      goto LABEL_34;
    }

void sub_10038FC9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *sub_10038FCC8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  *(_OWORD *)__str = 0u;
  __int128 v5 = 0u;
  snprintf(__str, 0x3FuLL, "%0llu.%0llu", *a1, a1[1]);
  return sub_10002418C(a2, __str);
}

BOOL sub_10038FD4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  return v1 && *(_DWORD *)(v1 - 64) > 0;
}

uint64_t sub_10038FD6C(uint64_t a1)
{
  uint64_t v2 = sub_10038F13C(a1);
  *(void *)uint64_t v2 = off_1008943D8;
  *(void *)(v2 + 216) = 0LL;
  id v3 = (void **)(v2 + 216);
  *(void *)(v2 + 248) = 0LL;
  *(void *)(v2 + 240) = v2 + 248;
  *(void *)(v2 + 256) = 0LL;
  *(void *)(v2 + 264) = 0LL;
  *(void *)(v2 + 224) = 0LL;
  *(void *)(v2 + 232) = 0LL;
  *(void *)(v2 + 288) = 0LL;
  *(void *)(v2 + 296) = 0LL;
  *(_DWORD *)(v2 + 271) = 0;
  *(void *)(v2 + 280) = v2 + 288;
  int v4 = (void **)(v2 + 304);
  *(_DWORD *)(v2 + 352) = 0;
  *(void *)(v2 + 360) = 0LL;
  *(void *)(v2 + 392) = 0LL;
  *(void *)(v2 + 400) = 0LL;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 335) = 0u;
  *(void *)(v2 + 376) = 0LL;
  *(void *)(v2 + 384) = v2 + 392;
  *(void *)(v2 + 424) = 0LL;
  *(void *)(v2 + 432) = 0LL;
  *(void *)(v2 + 416) = v2 + 424;
  uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  __int128 v6 = *v3;
  *id v3 = (void *)v5;

  uint64_t v7 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  int64_t v8 = *(void **)(a1 + 224);
  *(void *)(a1 + 224) = v7;

  uint64_t v9 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  unsigned int v10 = *(void **)(a1 + 376);
  *(void *)(a1 + 376) = v9;

  id v11 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
  uint64_t v12 = *v4;
  *int v4 = v11;

  uint64_t v13 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
  char v14 = *(void **)(a1 + 312);
  *(void *)(a1 + 312) = v13;

  uint64_t v15 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v16 = *(void **)(a1 + 232);
  *(void *)(a1 + 232) = v15;

  uint64_t v17 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  uint64_t v18 = *(void **)(a1 + 264);
  *(void *)(a1 + 264) = v17;

  *(void *)(a1 + 368) = 0LL;
  *(void *)(a1 + 448) = 0LL;
  *(void *)(a1 + 408) = 0LL;
  int v29 = 0;
  uint64_t v19 = sub_1002E6E00();
  sub_10002418C(v27, "BTUCM");
  sub_10002418C(__p, "DefaultWifiCoexPriority");
  int v20 = (*(uint64_t (**)(uint64_t, void **, void **, int *))(*(void *)v19 + 88LL))(v19, v27, __p, &v29);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  int v21 = v29;
  if (!v20) {
    int v21 = -1;
  }
  *(_DWORD *)(a1 + 456) = v21;
  unint64_t v22 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  uint64_t v23 = *(void **)(a1 + 360);
  *(void *)(a1 + 360) = v22;

  return a1;
}

void sub_10038FF5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_1003A0DFC(v21 + 416, *(void **)(v21 + 424));
  sub_100291CA0(v21 + 384, *(void **)(v21 + 392));

  sub_1003A0DAC(v21 + 280, *(void **)(v21 + 288));
  sub_1003A0D64(v22, *(void **)(v21 + 248));

  sub_10038F2A0(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_100390034(uint64_t a1)
{
  *(void *)a1 = off_1008943D8;
  uint64_t v2 = *(void **)(a1 + 216);
  *(void *)(a1 + 216) = 0LL;

  id v3 = *(void **)(a1 + 224);
  *(void *)(a1 + 224) = 0LL;

  int v4 = *(void **)(a1 + 376);
  *(void *)(a1 + 376) = 0LL;

  uint64_t v5 = *(void **)(a1 + 304);
  *(void *)(a1 + 304) = 0LL;

  sub_1003A0DAC(a1 + 280, *(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0LL;
  *(void *)(a1 + 296) = 0LL;
  *(void *)(a1 + 280) = a1 + 288;
  sub_1003A0DFC(a1 + 416, *(void **)(a1 + 424));
  *(void *)(a1 + 424) = 0LL;
  *(void *)(a1 + 432) = 0LL;
  *(void *)(a1 + 416) = a1 + 424;
  __int128 v6 = *(void **)(a1 + 312);
  *(void *)(a1 + 312) = 0LL;

  uint64_t v7 = *(void *)(a1 + 368);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    *(void *)(a1 + 368) = 0LL;
  }

  int64_t v8 = *(dispatch_source_s **)(a1 + 408);
  if (v8)
  {
    dispatch_source_cancel(v8);
    dispatch_release(*(dispatch_object_t *)(a1 + 408));
    *(void *)(a1 + 408) = 0LL;
  }

  sub_100291CA0(a1 + 384, *(void **)(a1 + 392));
  *(void *)(a1 + 392) = 0LL;
  *(void *)(a1 + 400) = 0LL;
  *(void *)(a1 + 384) = a1 + 392;
  if (*(int *)(a1 + 344) >= 1)
  {
    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_100894590);
    }
    sub_1002821A8((uint64_t)off_1008D67C0, *(void **)(a1 + 88), 0LL);
  }

  sub_1003A0DFC(a1 + 416, *(void **)(a1 + 424));
  sub_100291CA0(a1 + 384, *(void **)(a1 + 392));

  sub_1003A0DAC(a1 + 280, *(void **)(a1 + 288));
  sub_1003A0D64(a1 + 240, *(void **)(a1 + 248));

  return sub_10038F2A0(a1);
}

void sub_1003901F8(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  sub_1003A0DFC(v3, *(void **)(v1 + 424));
  sub_100291CA0(v5, *(void **)(v1 + 392));

  sub_1003A0DAC(v2, *(void **)(v1 + 288));
  sub_1003A0D64(v1 + 240, *(void **)(v1 + 248));

  sub_10038F2A0(v1);
  _Unwind_Resume(a1);
}

void sub_100390294(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100390034(a1);
  operator delete(v1);
}

uint64_t sub_1003902A8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 128))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEBUG)) {
      sub_100675880();
    }
    uint64_t v6 = *(void *)(a1 + 120);
    if (v6 && *(int *)(v6 - 64) >= 1)
    {
      if (qword_1008D92A8 != -1) {
        dispatch_once(&qword_1008D92A8, &stru_1008945B0);
      }
      if (sub_10064D4FC(qword_1008D92A0, 0LL, *(void **)(a1 + 88)))
      {
        int v7 = *(_DWORD *)(a3 + 168);
        id v8 = *(id *)(a3 + 176);
        uint64_t v9 = v8;
        if (v8 && [v8 count])
        {
          if ([v9 count] == (id)1)
          {
            unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectAtIndexedSubscript:0]);
            BOOL v11 = [v10 longLongValue] != 0;

            if (!v11 && v7 == 0)
            {
LABEL_13:
              if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
                sub_100675820();
              }

              return 348LL;
            }
          }
        }

        else if (!v7)
        {
          goto LABEL_13;
        }
      }
    }

    *(_BYTE *)(a1 + 349) = *(_BYTE *)(a3 + 199);
    *(_DWORD *)(a1 + 352) = *(_DWORD *)(a3 + 168);
    if (qword_1008D6608 != -1) {
      dispatch_once(&qword_1008D6608, &stru_1008945D0);
    }
    uint64_t result = sub_1005F08F8((uint64_t)off_1008D6600, a2, (unsigned __int8 *)a3);
    *(_BYTE *)(a1 + 348) = *(_BYTE *)(a3 + 184);
    if (!(_DWORD)result)
    {
      *(void *)(a1 + 336) = 0LL;
      [*(id *)(a1 + 312) removeAllObjects];
      uint64_t v13 = *(__int128 **)(a3 + 8);
      for (i = *(__int128 **)(a3 + 16); v13 != i; uint64_t v13 = (__int128 *)((char *)v13 + 20))
      {
        memset(buf, 0, sizeof(buf));
        LODWORD(v36) = 0;
        __int128 v15 = *v13;
        LODWORD(v36) = *((_DWORD *)v13 + 4);
        *(_OWORD *)std::string buf = v15;
        __int128 v41 = 0uLL;
        unsigned int v16 = sub_10063443C(buf, &v41);
        if (v16 == 16 || v16 == 2)
        {
          uint64_t v17 = *(void **)(a1 + 312);
          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", &v41, v16));
          [v17 addObject:v18];
        }
      }

      *(_BYTE *)(a1 + 274) = *(_BYTE *)(a3 + 143);
      *(_BYTE *)(a1 + 272) = 1;
      if (sub_100487C4C())
      {
        CTGreenTeaOsLogHandle = (os_log_s *)getCTGreenTeaOsLogHandle(qword_1008F7720);
        int v20 = CTGreenTeaOsLogHandle;
        if (CTGreenTeaOsLogHandle)
        {
          if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
          {
            uint64_t v21 = *(void *)(a1 + 88);
            *(_DWORD *)std::string buf = 138543362;
            *(void *)&uint8_t buf[4] = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "LE start scanning for application '%{public}@'",  buf,  0xCu);
          }
        }
      }

      if (qword_1008D67C8 != -1) {
        dispatch_once(&qword_1008D67C8, &stru_100894590);
      }
      uint64_t result = sub_100279BF8((uint64_t)off_1008D67C0, a2);
      if ((_DWORD)result)
      {
        if (qword_1008D67C8 != -1) {
          dispatch_once(&qword_1008D67C8, &stru_100894590);
        }
        id v22 = sub_100279C54((uint64_t)off_1008D67C0, a2);
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        uint64_t v24 = v23;
        __int128 v41 = 0uLL;
        uint64_t v42 = 0LL;
        if (v23) {
          sub_10002418C(&v41, (char *)[v23 UTF8String]);
        }
        else {
          sub_10002418C(&v41, "");
        }
        if (qword_1008D67C8 != -1) {
          dispatch_once(&qword_1008D67C8, &stru_100894590);
        }
        id v25 = sub_100279CB8((uint64_t)off_1008D67C0, a2);
        char v26 = (void *)objc_claimAutoreleasedReturnValue(v25);

        __int128 v33 = 0uLL;
        uint64_t v34 = 0LL;
        if (v26) {
          sub_10002418C(&v33, (char *)[v26 UTF8String]);
        }
        else {
          sub_10002418C(&v33, "");
        }
        if (qword_1008D67C8 != -1) {
          dispatch_once(&qword_1008D67C8, &stru_100894590);
        }
        id v27 = sub_100279D1C((uint64_t)off_1008D67C0, a2);
        char v28 = (void *)objc_claimAutoreleasedReturnValue(v27);

        __int128 v31 = 0uLL;
        uint64_t v32 = 0LL;
        if (v28) {
          sub_10002418C(&v31, (char *)[v28 UTF8String]);
        }
        else {
          sub_10002418C(&v31, "");
        }
        if (qword_1008D67C8 != -1) {
          dispatch_once(&qword_1008D67C8, &stru_100894590);
        }
        char v29 = sub_10028EE80((uint64_t)off_1008D67C0, a2);
        if (qword_1008D67C8 != -1) {
          dispatch_once(&qword_1008D67C8, &stru_100894590);
        }
        char v30 = sub_10027D798((uint64_t)off_1008D67C0, a2);
        uint64_t v40 = 0LL;
        __int128 v38 = 0u;
        *(_OWORD *)std::string __p = 0u;
        __int128 v36 = 0u;
        *(_OWORD *)uint64_t v37 = 0u;
        *(_OWORD *)std::string buf = 0u;
        sub_10040CEF4( (uint64_t)buf,  &v31,  v30,  [*(id *)(a1 + 312) count] == 0,  *(_BYTE *)a3,  v29,  1,  &v33,  &v41);
        if (qword_1008D9298 != -1) {
          dispatch_once(&qword_1008D9298, &stru_1008945F0);
        }
        sub_10040D074(qword_1008D9290, (uint64_t)buf);
        if (SHIBYTE(v40) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v38) < 0) {
          operator delete(v37[1]);
        }
        if (SHIBYTE(v36) < 0) {
          operator delete(*(void **)&buf[8]);
        }
        if (SHIBYTE(v32) < 0) {
          operator delete((void *)v31);
        }
        if (SHIBYTE(v34) < 0) {
          operator delete((void *)v33);
        }
        if (SHIBYTE(v42) < 0) {
          operator delete((void *)v41);
        }

        return 0LL;
      }
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
      sub_1006757C0();
    }
    return 341LL;
  }

  return result;
}

void sub_1003908AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, char a23)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100390964(uint64_t a1)
{
  return a1;
}

id sub_1003909B4(uint64_t a1, unint64_t a2)
{
  *(_BYTE *)(a1 + 349) = 0;
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_1008945D0);
  }
  sub_1005F24EC((uint64_t)off_1008D6600, a2, 1, 1, 0);
  *(_BYTE *)(a1 + 272) = 0;
  return [*(id *)(a1 + 312) removeAllObjects];
}

uint64_t sub_100390A24(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_1008945D0);
  }
  return sub_1005F4984((uint64_t)off_1008D6600, a2, a3);
}

void sub_100390A7C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  char v28 = 0LL;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  uint64_t v9 = off_1008D5F08;
  sub_100241F90(v31, v7);
  BOOL v10 = sub_100599890((uint64_t)v9, (unsigned __int8 *)v31, &v28);
  if (v28) {
    BOOL v11 = v10;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100894610);
    }
    uint64_t v12 = off_1008D5F08;
    sub_100241F90(v31, v7);
    if (!sub_100599994((uint64_t)v12, (unsigned __int8 *)v31)
      && os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
    {
      sub_100675944();
    }

    uint64_t v13 = sub_10024F00C();
    char v14 = v28;
    id v15 = v8;
    uint64_t v16 = sub_100252358(v13, v14, [v15 bytes], objc_msgSend(v15, "length"));
    if ((_DWORD)v16)
    {
      uint64_t v17 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
        sub_1006758E0(v16, v17, v18, v19, v20, v21, v22, v23);
      }
    }
  }

  else
  {
    uint64_t v24 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
    {
      sub_100494958(a2, (uint64_t)v31);
      sub_1006759A4(v31, (uint64_t)v7, (uint64_t)v32, v24);
    }

    LODWORD(v16) = 312;
  }

  uint64_t v25 = *(void *)(a1 + 120);
  xpc_object_t v26 = xpc_dictionary_create(0LL, 0LL, 0LL);
  *(void *)uuid = 0LL;
  uint64_t v30 = 0LL;
  [v7 getUUIDBytes:uuid];
  xpc_dictionary_set_uuid(v26, "kCBMsgArgDeviceUUID", uuid);
  xpc_dictionary_set_int64(v26, "kCBMsgArgResult", (int)v16);
  if ((_DWORD)v16) {
    id v27 = 0LL;
  }
  else {
    id v27 = [v8 length];
  }
  xpc_dictionary_set_int64(v26, "kCBMsgArgBytesSent", (int64_t)v27);
  if (v25) {
    sub_10043F1F4(v25 - 144, 138LL, v26, 1);
  }
  else {
    xpc_release(v26);
  }
  if (*(_DWORD *)(a1 + 344))
  {
    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_100894590);
    }
    sub_1002821A8((uint64_t)off_1008D67C0, *(void **)(a1 + 88), 1LL);
  }
}

void sub_100390D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100390D94(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  return v1 && *(_BYTE *)(v1 + 28) != 0;
}

void sub_100390DB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 120);
  if (v7 && *(_BYTE *)(v7 + 28))
  {
    id v8 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "sending data to upper layer",  (uint8_t *)v11,  2u);
    }

    xpc_object_t v9 = xpc_dictionary_create(0LL, 0LL, 0LL);
    v11[0] = 0LL;
    v11[1] = 0LL;
    [v5 getUUIDBytes:v11];
    xpc_dictionary_set_uuid(v9, "kCBMsgArgDeviceUUID", (const unsigned __int8 *)v11);
    id v10 = v6;
    xpc_dictionary_set_data( v9,  "kCBMsgArgObjectDiscoveryData",  [v10 bytes],  (size_t)objc_msgSend(v10, "length"));
    sub_10043F1F4(v7 - 144, 139LL, v9, 1);
  }
}

void sub_100390F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100390F24(uint64_t a1)
{
  if (*(void *)(a1 + 400))
  {
    uint64_t v2 = *(dispatch_object_s **)(a1 + 408);
    if (v2)
    {
      dispatch_suspend(v2);
    }

    else
    {
      uint64_t v5 = sub_100404FE8();
      id v6 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(v5 + 8));
      *(void *)(a1 + 408) = v6;
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472LL;
      handler[2] = sub_10039108C;
      handler[3] = &unk_10087EB20;
      handler[4] = a1;
      dispatch_source_set_event_handler(v6, handler);
    }

    uint64_t v7 = *(void **)(a1 + 384);
    dispatch_time_t v8 = -1LL;
    if (v7 != (void *)(a1 + 392))
    {
      do
      {
        if (v8 >= v7[5]) {
          dispatch_time_t v8 = v7[5];
        }
        xpc_object_t v9 = (void *)v7[1];
        if (v9)
        {
          do
          {
            id v10 = v9;
            xpc_object_t v9 = (void *)*v9;
          }

          while (v9);
        }

        else
        {
          do
          {
            id v10 = (void *)v7[2];
            BOOL v11 = *v10 == (void)v7;
            uint64_t v7 = v10;
          }

          while (!v11);
        }

        uint64_t v7 = v10;
      }

      while (v10 != (void *)(a1 + 392));
    }

    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 408), v8, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    dispatch_resume(*(dispatch_object_t *)(a1 + 408));
  }

  else
  {
    uint64_t v3 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "No delayed connection", buf, 2u);
    }

    uint64_t v4 = *(dispatch_source_s **)(a1 + 408);
    if (v4)
    {
      dispatch_source_cancel(v4);
      dispatch_release(*(dispatch_object_t *)(a1 + 408));
      *(void *)(a1 + 408) = 0LL;
    }
  }

void sub_10039108C(uint64_t a1)
{
}

void sub_100391094(uint64_t a1)
{
  dispatch_time_t v2 = dispatch_time(0LL, 0LL);
  uint64_t v19 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v3 = *(void **)(a1 + 384);
  if (v3 != (void *)(a1 + 392))
  {
    dispatch_time_t v4 = v2;
    do
    {
      if (v3[5] <= v4)
      {
        id v18 = 0LL;
        id v18 = (id)v3[4];
        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 376) objectForKeyedSubscript:v18]);
        uint64_t v6 = v3[6];
        uint64_t v7 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          id v8 = [v5 delay];
          id v9 = v18;
          sub_100494958(v6, (uint64_t)__p);
          id v10 = __p;
          if (v17 < 0) {
            id v10 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 134218498;
          *(void *)&uint8_t buf[4] = v8;
          __int16 v23 = 2114;
          id v24 = v9;
          __int16 v25 = 2082;
          xpc_object_t v26 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "delayed connection (%ld seconds) passed, connecting to device %{public}@ session %{public}s now",  buf,  0x20u);
          if (v17 < 0) {
            operator delete(__p[0]);
          }
        }

        [v5 setDelay:0];
        sub_100391320(a1, v6, v18, v5);
        sub_100393988(&v19, &v18);
      }

      BOOL v11 = (void *)v3[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          BOOL v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          uint64_t v12 = (void *)v3[2];
          BOOL v13 = *v12 == (void)v3;
          uint64_t v3 = v12;
        }

        while (!v13);
      }

      uint64_t v3 = v12;
    }

    while (v12 != (void *)(a1 + 392));
    char v14 = (unint64_t *)v19;
    id v15 = (unint64_t *)v20;
    if (v19 != v20)
    {
      do
      {
        sub_1003A0FD8(a1 + 384, v14);
        [*(id *)(a1 + 376) removeObjectForKey:*v14++];
      }

      while (v14 != v15);
    }
  }

  sub_100390F24(a1);
  *(void *)std::string buf = &v19;
  sub_1003A0F6C((void ***)buf);
}

void sub_1003912D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, void **a21)
{
  a21 = (void **)&a18;
  sub_1003A0F6C(&a21);
  _Unwind_Resume(a1);
}

void sub_100391320(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  v173 = v5;
  id v6 = a4;
  int v172 = 0xFFFF;
  if (qword_1008D9278 != -1) {
    dispatch_once(&qword_1008D9278, &stru_100894670);
  }
  uint64_t v7 = qword_1008D9270;
  sub_100241F90(v177, v5);
  sub_1004135EC(v7, v177, &v172);
  if (v172 == 0xFFFF || v172 == 2)
  {
    if (!*(_BYTE *)(a1 + 128))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
        sub_100675BA8();
      }
      if (qword_1008D67C8 != -1) {
        dispatch_once(&qword_1008D67C8, &stru_100894590);
      }
      sub_1002809BC((uint64_t)off_1008D67C0, a2, a1, v173, 341, 0);
      goto LABEL_351;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEBUG)) {
      sub_100675C68();
    }
    uint64_t v8 = *(void *)(a1 + 120);
    if (v8 && *(int *)(v8 - 64) >= 1)
    {
      if (qword_1008D92A8 != -1) {
        dispatch_once(&qword_1008D92A8, &stru_1008945B0);
      }
      if (sub_10064D4FC(qword_1008D92A0, 1uLL, *(void **)(a1 + 88)))
      {
        unsigned int v9 = [v6 connectionUseCase];
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 useCaseList]);
        BOOL v11 = v10;
        uint64_t v12 = v9;
        if (v10 && [v10 count])
        {
          if ([v11 count] == (id)1)
          {
            BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([v11 objectAtIndexedSubscript:0]);
            BOOL v14 = [v13 longLongValue] != 0;

            if (!v14 && v12 == 0) {
              goto LABEL_17;
            }
          }
        }

        else if (!v9)
        {
LABEL_17:
          if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
            sub_100675C08();
          }
          if (qword_1008D67C8 != -1) {
            dispatch_once(&qword_1008D67C8, &stru_100894590);
          }
          sub_1002809BC((uint64_t)off_1008D67C0, a2, a1, v173, 348, 0);

          goto LABEL_351;
        }
      }
    }
  }

  [*(id *)(a1 + 304) addObject:v173];
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  id v15 = off_1008D5F28;
  uint64_t v16 = v173;
  sub_10002418C(__p, "_FORCE_GATT_SERVICES_DISCOVERY_");
  int v17 = sub_1005CE5A8((uint64_t)v15, v16, (uint64_t)__p);
  int v18 = v17;
  if (v171 < 0)
  {
    operator delete(__p[0]);
    if (!v18) {
      goto LABEL_42;
    }
  }

  else if (!v17)
  {
    goto LABEL_42;
  }

  uint64_t v19 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Forcing GATT rediscovery later on, deleting cache database",  (uint8_t *)buf,  2u);
  }

  if (qword_1008D5F60 != -1) {
    dispatch_once(&qword_1008D5F60, &stru_100894690);
  }
  sub_1005528F8(qword_1008D5F58, v173);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  sub_1005C9A38((uint64_t)off_1008D5F28, v173, @"_FORCE_GATT_SERVICES_DISCOVERY_");
LABEL_42:
  if (*(_BYTE *)(a1 + 44))
  {
    if (qword_1008D92A8 != -1) {
      dispatch_once(&qword_1008D92A8, &stru_1008945B0);
    }
    sub_10064BFA0(qword_1008D92A0, a2, v173, v6);
  }

  if ([v6 resetDisconnectionHistory])
  {
    uint64_t v20 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 138543362;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v173;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Trigger resetDisconnectionHistory %{public}@ ",  (uint8_t *)buf,  0xCu);
    }

    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100894610);
    }
    uint64_t v21 = off_1008D5F08;
    id v22 = objc_claimAutoreleasedReturnValue([v173 UUIDString]);
    sub_10002418C(v168, (char *)[v22 UTF8String]);
    sub_1005B3510((uint64_t)v21, (const void **)v168);
    if (v169 < 0) {
      operator delete(v168[0]);
    }
  }

  __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 216) objectForKey:v173]);
  BOOL v24 = v23 == 0LL;

  if (v24)
  {
    id v27 = *(void **)(a1 + 288);
    if (v27)
    {
      std::string::size_type v28 = (std::string::size_type)v173;
      uint64_t v29 = a1 + 288;
      do
      {
        unint64_t v30 = v27[4];
        BOOL v31 = v30 >= (unint64_t)v173;
        else {
          uint64_t v32 = v27 + 1;
        }
        if (v31) {
          uint64_t v29 = (uint64_t)v27;
        }
        id v27 = (void *)*v32;
      }

      while (*v32);
      if (v29 != a1 + 288 && (unint64_t)v173 >= *(void *)(v29 + 32))
      {
        id v59 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 138543362;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v28;
          _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "FindMy Device %{public}@ already parked until new keys become available",  (uint8_t *)buf,  0xCu);
        }

        goto LABEL_351;
      }
    }

    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    id v33 = sub_1005D7650((uint64_t)off_1008D5F28, v173);
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
    if (v34)
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_100894630);
      }
      sub_1005D73C8((uint64_t)off_1008D5F28, v173, 2u, (uint64_t)buf);
      BOOL v35 = buf[0].__r_.__value_.__l.__cap_ == 0;
      sub_10023BF24((uint64_t)buf, (void *)buf[0].__r_.__value_.__l.__size_);

      if (v35)
      {
        id v60 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 138543362;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v173;
          _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "Device %{public}@ is FindMy but has no valid addresses/keys",  (uint8_t *)buf,  0xCu);
        }

        id v61 = v6;
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v173;
        uint64_t v62 = sub_1003A1170((uint64_t **)(a1 + 280), (unint64_t *)&v173, (uint64_t)&unk_1006C2518, (id **)buf);
        objc_storeStrong((id *)v62 + 5, a4);
        v62[6] = a2;
        [*(id *)(a1 + 216) setObject:v61 forKey:v173];

        goto LABEL_351;
      }
    }

    if ([v6 isLatencyCritical])
    {
      __int128 v36 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 138543362;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v173;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Latency Critical Action: LE Connection for device %{public}@",  (uint8_t *)buf,  0xCu);
      }

      sub_100393AA4(a1);
    }

    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100894610);
    }
    id v37 = sub_10059A34C((uint64_t)off_1008D5F08);
    __n128 v159 = (void *)objc_claimAutoreleasedReturnValue(v37);
    if (qword_1008D92A8 != -1) {
      dispatch_once(&qword_1008D92A8, &stru_1008945B0);
    }
    unsigned int v38 = sub_10064B99C(qword_1008D92A0, (int)[v6 connectionUseCase]);
    if (qword_1008D92A8 != -1) {
      dispatch_once(&qword_1008D92A8, &stru_1008945B0);
    }
    unsigned int v39 = sub_10064B7CC(qword_1008D92A0, [v6 connectionUseCase]);
    if (v38 >= v39)
    {
      uint64_t v49 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int16 v50 = (unsigned __int16)[v6 connectionUseCase];
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v50;
        LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = v38;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Exceeded max connection limit for use case:%d for counter: %d",  (uint8_t *)buf,  0xEu);
      }

      __int128 v166 = 0u;
      __int128 v167 = 0u;
      __int128 v164 = 0u;
      __int128 v165 = 0u;
      id v51 = v159;
      id v52 = [v51 countByEnumeratingWithState:&v164 objects:v176 count:16];
      if (v52)
      {
        uint64_t v53 = *(void *)v165;
        do
        {
          for (uint64_t i = 0LL; i != v52; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v165 != v53) {
              objc_enumerationMutation(v51);
            }
            __int128 v55 = *(void **)(*((void *)&v164 + 1) + 8LL * (void)i);
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_100894630);
            }
            int v56 = sub_1005CE2FC((uint64_t)off_1008D5F28, v55);
            if (v56 == [v6 connectionUseCase])
            {
              if (qword_1008D92A8 != -1) {
                dispatch_once(&qword_1008D92A8, &stru_1008945B0);
              }
              if (sub_10064B99C(qword_1008D92A0, (int)[v6 connectionUseCase]) >= v39)
              {
                int v57 = (os_log_s *)qword_1008F7628;
                if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
                {
                  unsigned __int16 v58 = (unsigned __int16)[v6 connectionUseCase];
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 138543618;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v55;
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v58;
                  _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "Exceeded max connection :device %{public}@ for use case:%d",  (uint8_t *)buf,  0x12u);
                }
              }
            }
          }

          id v52 = [v51 countByEnumeratingWithState:&v164 objects:v176 count:16];
        }

        while (v52);
      }

      if (qword_1008D67C8 != -1) {
        dispatch_once(&qword_1008D67C8, &stru_100894590);
      }
      sub_1002809BC((uint64_t)off_1008D67C0, a2, a1, v173, 336, 0);
      goto LABEL_350;
    }

    if ((uint64_t)[v6 delay] >= 1)
    {
      uint64_t v40 = (os_log_s *)qword_1008F7628;
      if (*(_BYTE *)(a1 + 24))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          std::string::size_type v41 = (std::string::size_type)v173;
          id v42 = [v6 delay];
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 138543618;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v41;
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v42;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Add delayed connection to device %{public}@ with %ld seconds delay.",  (uint8_t *)buf,  0x16u);
        }

        dispatch_time_t v43 = dispatch_time(0, 1000000000 * (void)[v6 delay]);
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v173;
        id v44 = sub_1003A1170((uint64_t **)(a1 + 384), (unint64_t *)&v173, (uint64_t)&unk_1006C2518, (id **)buf);
        v44[5] = v43;
        void v44[6] = a2;
        [*(id *)(a1 + 376) setObject:v6 forKey:v173];
        sub_100390F24(a1);
        goto LABEL_350;
      }

      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
        sub_100675B7C();
      }
    }

    sub_100393D98(a1, v173, v6);
    sub_1003942CC(a1, v173, v6);
    sub_1003944B0(a1, a2, v173, v6);
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    __int128 v63 = off_1008D5F28;
    uint64_t v64 = v173;
    sub_100494958(a2, (uint64_t)buf);
    int size = (char)buf[0].__r_.__value_.__s.__size_;
    std::string::size_type v66 = buf[0].__r_.__value_.__r.__words[0];
    NSStringEncoding v67 = +[NSString defaultCStringEncoding](&OBJC_CLASS___NSString, "defaultCStringEncoding");
    if (size >= 0) {
      int v68 = buf;
    }
    else {
      int v68 = (std::stringbuf::string_type *)v66;
    }
    uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  v68,  v67));
    uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([v6 clientBundleID]);
    sub_1005D33F0((uint64_t)v63, v64, v69, v70);

    sub_100394A38(v71, v173, v6);
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    sub_1005CFB80((uint64_t)off_1008D5F28, v173, (char)[v6 minRSSILevelForConnection]);
    id v72 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      signed __int8 v73 = [v6 minRSSILevelForConnection];
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109378;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v73;
      LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2114;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v173;
      _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEFAULT,  "Setting minimum RSSI level for connection to %d for device %{public}@",  (uint8_t *)buf,  0x12u);
    }

    unint64_t v74 = (os_log_s *)qword_1008F7658;
    if (os_log_type_enabled((os_log_t)qword_1008F7658, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v75 = *(void *)(a1 + 88);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 138543618;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v173;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2114;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v75;
      _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "App connecting - {cbuuid: %{public}@, bundle: %{public}@}",  (uint8_t *)buf,  0x16u);
    }

    int v76 = [v6 connectionUseCase];
    int v77 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v78 = sub_100394B80(v76);
      std::string::size_type v79 = *(void *)(a1 + 88);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v78;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2114;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v173;
      HIWORD(buf[0].__r_.__value_.__r.__words[2]) = 2114;
      buf[1].__r_.__value_.__r.__words[0] = v79;
      _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEFAULT,  "BLE Connecting %{public}s %{public}@ for %{public}@",  (uint8_t *)buf,  0x20u);
      int v77 = (os_log_s *)qword_1008F7628;
    }

    if (os_signpost_enabled(v77))
    {
      uint64_t v80 = sub_100394B80(v76);
      std::string::size_type v81 = *(void *)(a1 + 88);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v80;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2114;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v173;
      HIWORD(buf[0].__r_.__value_.__r.__words[2]) = 2114;
      buf[1].__r_.__value_.__r.__words[0] = v81;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v77,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "BTSignPost",  "BLE Connecting %{public}s %{public}@ for %{public}@",  (uint8_t *)buf,  0x20u);
    }

    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    uint64_t v82 = off_1008D5F28;
    uint64_t v83 = v173;
    double Current = CFAbsoluteTimeGetCurrent();
    sub_1005CC6A0((uint64_t)v82, v83, Current);
    __int128 v85 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v86 = (std::string::size_type)v173;
      sub_100494958(a2, (uint64_t)&v175);
      __int128 v87 = (v175.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v175 : (std::string *)v175.__r_.__value_.__r.__words[0];
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 138543874;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v86;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v87;
      HIWORD(buf[0].__r_.__value_.__r.__words[2]) = 2114;
      buf[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
      _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "Connecting device %{public}@ for session %{public}s with options %{public}@",  (uint8_t *)buf,  0x20u);
    }

    id v88 = [v6 ctkdChosenTransport];
    id v89 = v88;
    if (v172 == 1 && v88 != (id)1)
    {
      __int128 v90 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 138543618;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v173;
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1;
        _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_DEFAULT,  "Device %{public}@ is connected to CATT transport=%d",  (uint8_t *)buf,  0x12u);
      }

      [*(id *)(a1 + 216) setObject:v6 forKey:v173];
      if (qword_1008D67C8 != -1) {
        dispatch_once(&qword_1008D67C8, &stru_100894590);
      }
      sub_1002809BC((uint64_t)off_1008D67C0, a2, a1, v173, 0, 0);
      goto LABEL_350;
    }

    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100894610);
    }
    __int128 v91 = off_1008D5F08;
    sub_100241F90(buf, v173);
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100894610);
    }
    __int128 v92 = off_1008D5F08;
    sub_100241F90(&v175, v173);
    if ((sub_100592970(v92, (unsigned __int8 *)&v175) & 1) != 0)
    {
LABEL_174:
      if (([v6 disableLeGATT] & 1) == 0)
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_100894630);
        }
        if (sub_1005D49A4((uint64_t)off_1008D5F28, v173))
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
            sub_100675B1C();
          }
          if (qword_1008D67C8 != -1) {
            dispatch_once(&qword_1008D67C8, &stru_100894590);
          }
          sub_1002809BC((uint64_t)off_1008D67C0, a2, a1, v173, 117, 0);
        }
      }
    }

    unint64_t v93 = (unint64_t)[v6 connectionUseCase] & 0xFFFF0000;
    __int128 v94 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEBUG)) {
      sub_100675AA8(v93 == 589824, v94);
    }
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    sub_1005D4A34((uint64_t)off_1008D5F28, v173, v93 == 589824);
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    uint64_t v95 = sub_1005CC198((uint64_t)off_1008D5F28, v173, 0);
    int v96 = 0;
    if ((v95 & 0xFF000000000000LL) == 0 && (v95 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_1008946B0);
      }
      int v97 = sub_10040007C(off_1008D5F48, v95, 0);
      uint64_t v98 = (uint64_t)v97;
      if (v97 && sub_1003D0670((uint64_t)v97))
      {
        int v99 = sub_1003D24F8(v98);
        if (v89 == (id)1) {
          int v96 = 0;
        }
        else {
          int v96 = v99;
        }
      }

      else
      {
        int v96 = 0;
      }
    }

    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_100894590);
    }
    if ((sub_10028EC6C((uint64_t)off_1008D67C0, v173) | v96) == 1)
    {
      sub_1003952AC(a1, v173);
      goto LABEL_222;
    }

    sub_100494958(a2, (uint64_t)buf);
    if (sub_10029C238((uint64_t *)buf, "com.apple.bluetoothd", 0LL) == -1LL)
    {
      BOOL v101 = 0;
    }

    else
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_100894630);
      }
      sub_1005CF060((uint64_t)off_1008D5F28, v173, (uint64_t)&v175);
      std::string::size_type v100 = v175.__r_.__value_.__l.__size_;
      if ((v175.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v100 = v175.__r_.__value_.__s.__size_;
      }
      BOOL v101 = v100 != 0;
    }

    if (v101)
    {
      if (qword_1008D5F10 != -1) {
        dispatch_once(&qword_1008D5F10, &stru_100894610);
      }
      __int128 v102 = off_1008D5F08;
      sub_100241F90(buf, v173);
      sub_100599A04((uint64_t)v102, (const unsigned __int8 *)buf);
    }

    if ([v6 requiresLowLatency])
    {
      if (qword_1008D5F10 != -1) {
        dispatch_once(&qword_1008D5F10, &stru_100894610);
      }
      int v103 = off_1008D5F08;
      sub_100241F90(buf, v173);
      sub_100599A04((uint64_t)v103, (const unsigned __int8 *)buf);
    }

    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100894610);
    }
    int v110 = sub_100594D94((uint64_t)off_1008D5F08, v173);
    int v111 = v110;
    if (v110 <= 201)
    {
      if (!v110)
      {
LABEL_222:
        uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue([v6 temporaryLTK]);
        if (!v104) {
          goto LABEL_271;
        }
        char v105 = (void *)objc_claimAutoreleasedReturnValue([v6 temporaryLTK]);
        BOOL v106 = [v105 length] == 0;

        if (v106) {
          goto LABEL_271;
        }
        int v107 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 138543362;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v173;
          _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_DEFAULT,  "setting up temporary LTK for device %{public}@",  (uint8_t *)buf,  0xCu);
        }

        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_100894630);
        }
        if (sub_1005CC2D8((uint64_t)off_1008D5F28, v173))
        {
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_100894630);
          }
          __n128 v108 = off_1008D5F28;
          sub_100241F90(buf, v173);
          uint64_t v109 = sub_1005D16E0((uint64_t)v108, (const unsigned __int8 *)buf);
        }

        else
        {
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_100894630);
          }
          uint64_t v109 = sub_1005CC198((uint64_t)off_1008D5F28, v173, 0);
        }

        unint64_t v116 = v109;
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_100894630);
        }
        sub_1005D73C8((uint64_t)off_1008D5F28, v173, 2u, (uint64_t)buf);
        if (!buf[0].__r_.__value_.__l.__size_)
        {
LABEL_262:
          sub_10023BF24((uint64_t)buf, (void *)buf[0].__r_.__value_.__l.__size_);
          int v119 = (os_log_s *)qword_1008F7628;
          if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 138412290;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v173;
            _os_log_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_DEFAULT,  "setting up temporary LTK for device %@",  (uint8_t *)buf,  0xCu);
          }

          buf[0].__r_.__value_.__s.__data_[0] = 0;
          __n128 v120 = (void *)objc_claimAutoreleasedReturnValue([v6 temporaryLTK]);
          unsigned __int8 v121 = [v120 length];

          buf[0].__r_.__value_.__s.__data_[0] = v121;
          v175.__r_.__value_.__s.__data_[0] = 2;
          if (qword_1008D5F20 != -1) {
            dispatch_once(&qword_1008D5F20, &stru_1008946D0);
          }
          uint64_t v122 = qword_1008D5F18;
          id v123 = objc_claimAutoreleasedReturnValue([v6 temporaryLTK]);
          __int128 v124 = (unsigned __int8 *)[v123 bytes];
          int v125 = (void *)objc_claimAutoreleasedReturnValue([v6 temporaryLTK]);
          sub_10062A104(v122, v116, 5, v124, [v125 length]);

          if (qword_1008D5F20 != -1) {
            dispatch_once(&qword_1008D5F20, &stru_1008946D0);
          }
          sub_10062A104(qword_1008D5F18, v116, 6, (unsigned __int8 *)buf, 1u);
          if (qword_1008D5F20 != -1) {
            dispatch_once(&qword_1008D5F20, &stru_1008946D0);
          }
          sub_10062A104(qword_1008D5F18, v116, 7, (unsigned __int8 *)&v175, 1u);
          goto LABEL_271;
        }

        int v117 = (void *)buf[0].__r_.__value_.__l.__size_;
        while (1)
        {
          unint64_t v118 = v117[4];
          if (v116 >= v118)
          {
            if (v118 >= v116)
            {
              sub_10023BF24((uint64_t)buf, (void *)buf[0].__r_.__value_.__l.__size_);
              int v148 = (os_log_s *)qword_1008F7628;
              if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
              {
                std::string::size_type v149 = (std::string::size_type)v173;
                sub_1005BFC20(v116, buf);
                __int128 v150 = (buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0
                     ? buf
                     : (std::stringbuf::string_type *)buf[0].__r_.__value_.__r.__words[0];
                LODWORD(v175.__r_.__value_.__l.__data_) = 138412546;
                *(std::string::size_type *)((char *)v175.__r_.__value_.__r.__words + 4) = v149;
                WORD2(v175.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v175.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v150;
                _os_log_impl( (void *)&_mh_execute_header,  v148,  OS_LOG_TYPE_DEFAULT,  "Ignoring temporary LTK for device %@ with address %s as we already have extra addresses and LTK's set up",  (uint8_t *)&v175,  0x16u);
              }

LABEL_271:
              __int128 v126 = (void *)objc_claimAutoreleasedReturnValue([v6 temporaryIRK]);
              if (v126)
              {
                int v127 = (void *)objc_claimAutoreleasedReturnValue([v6 temporaryIdentityAddress]);
                BOOL v128 = v127 == 0LL;

                if (!v128)
                {
                  int v129 = (os_log_s *)qword_1008F7628;
                  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 138543362;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v173;
                    _os_log_impl( (void *)&_mh_execute_header,  v129,  OS_LOG_TYPE_DEFAULT,  "setting up temporary IRK for device %{public}@",  (uint8_t *)buf,  0xCu);
                  }

                  *(_DWORD *)((char *)v175.__r_.__value_.__r.__words + 3) = 0;
                  LODWORD(v175.__r_.__value_.__l.__data_) = 0;
                  __int128 v130 = (void *)objc_claimAutoreleasedReturnValue([v6 temporaryIdentityAddress]);
                  unint64_t v131 = sub_1005C02B0(v130);

                  v175.__r_.__value_.__s.__data_[0] = 0;
                  unint64_t v132 = sub_1001BEE0C(v131);
                  *(_DWORD *)((char *)&v175.__r_.__value_.__l.__data_ + 1) = v132;
                  *(_WORD *)((char *)v175.__r_.__value_.__r.__words + 5) = WORD2(v132);
                  int v133 = (void *)objc_claimAutoreleasedReturnValue([v6 temporaryIRK]);
                  id v134 = [v133 length];

                  if (v134 == (id)16)
                  {
                    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = 0uLL;
                    id v135 = objc_claimAutoreleasedReturnValue([v6 temporaryIRK]);
                    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = *(_OWORD *)[v135 bytes];

                    if (qword_1008D5F20 != -1) {
                      dispatch_once(&qword_1008D5F20, &stru_1008946D0);
                    }
                    sub_10062D3AC(qword_1008D5F18, (int *)&v175, buf, v173);
                    goto LABEL_279;
                  }

                  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
                    sub_100675A10();
                  }
LABEL_350:

                  goto LABEL_351;
                }
              }

LABEL_279:
              if ([v6 connectionUseCase] == (id)21
                || [v6 connectionUseCase] == (id)20
                || [v6 connectionUseCase] == (id)655360)
              {
                if (qword_1008D5F20 != -1) {
                  dispatch_once(&qword_1008D5F20, &stru_1008946D0);
                }
                if (!sub_10062D058(qword_1008D5F18, v173))
                {
                  int v136 = (os_log_s *)qword_1008F7628;
                  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 138543362;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v173;
                    _os_log_impl( (void *)&_mh_execute_header,  v136,  OS_LOG_TYPE_DEFAULT,  "fast IRK Resolution for device successful %{public}@",  (uint8_t *)buf,  0xCu);
                  }
                }
              }

              if (qword_1008D5F30 != -1) {
                dispatch_once(&qword_1008D5F30, &stru_100894630);
              }
              sub_1005D491C((uint64_t)off_1008D5F28, v173, (char)[v6 disableLeGATT]);
LABEL_290:
              __n128 v137 = (os_log_s *)qword_1008F7660;
              if (os_log_type_enabled((os_log_t)qword_1008F7660, OS_LOG_TYPE_DEFAULT))
              {
                std::string::size_type v138 = (std::string::size_type)v173;
                if (qword_1008D5F30 != -1) {
                  dispatch_once(&qword_1008D5F30, &stru_100894630);
                }
                int v139 = &v175;
                sub_1005CC0D4((uint64_t)off_1008D5F28, v173, (uint64_t)&v175);
                if ((v175.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  int v139 = (std::string *)v175.__r_.__value_.__r.__words[0];
                }
                if (qword_1008D5F30 != -1) {
                  dispatch_once(&qword_1008D5F30, &stru_100894630);
                }
                uint64_t v140 = sub_1005CC198((uint64_t)off_1008D5F28, v173, 1);
                id v141 = sub_1005BFF10(v140);
                id v142 = (id)objc_claimAutoreleasedReturnValue(v141);
                if (qword_1008D5F30 != -1) {
                  dispatch_once(&qword_1008D5F30, &stru_100894630);
                }
                BOOL v143 = sub_1005CC2D8((uint64_t)off_1008D5F28, v173);
                if (v143)
                {
                  if (qword_1008D5F30 != -1) {
                    dispatch_once(&qword_1008D5F30, &stru_100894630);
                  }
                  uint64_t v144 = sub_1005CC198((uint64_t)off_1008D5F28, v173, 0);
                  id v145 = sub_1005BFF10(v144);
                  __n128 v146 = (__CFString *)objc_claimAutoreleasedReturnValue(v145);
                }

                else
                {
                  __n128 v146 = &stru_1008A57D8;
                }

                LODWORD(buf[0].__r_.__value_.__l.__data_) = 138544386;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v138;
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v139;
                HIWORD(buf[0].__r_.__value_.__r.__words[2]) = 1024;
                LODWORD(buf[1].__r_.__value_.__l.__data_) = 0;
                WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2114;
                *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v142;
                HIWORD(buf[1].__r_.__value_.__r.__words[1]) = 2114;
                buf[1].__r_.__value_.__l.__cap_ = (std::string::size_type)v146;
                _os_log_impl( (void *)&_mh_execute_header,  v137,  OS_LOG_TYPE_DEFAULT,  "Device connecting - {cbuuid: %{public}@, devicename: %s, result: %d, adv-addr: %{public}@, resolved-addr: %{public}@}",  (uint8_t *)buf,  0x30u);
                if (v143) {
              }
                }

              [*(id *)(a1 + 216) setObject:v6 forKey:v173];
              if ([v6 opportunistic])
              {
                if (qword_1008D5F10 != -1) {
                  dispatch_once(&qword_1008D5F10, &stru_100894610);
                }
                __int128 v147 = off_1008D5F08;
                sub_100241F90(buf, v173);
                if (sub_1005996B4((uint64_t)v147, (unsigned __int8 *)buf))
                {
                  if (qword_1008D67C8 != -1) {
                    dispatch_once(&qword_1008D67C8, &stru_100894590);
                  }
                  sub_1002809BC((uint64_t)off_1008D67C0, a2, a1, v173, 0, 0);
                }
              }

LABEL_340:
              memset(buf, 0, sizeof(buf));
              sub_10002418C(&v175, (char *)[*(id *)(a1 + 88) UTF8String]);
              sub_10040CF00((uint64_t)buf, (__int128 *)&v175, *(_BYTE *)(a1 + 129), v173);
              if (qword_1008D9298 != -1) {
                dispatch_once(&qword_1008D9298, &stru_1008945F0);
              }
              sub_10040D074(qword_1008D9290, (uint64_t)buf);
              __int128 v153 = (void (***)(void, std::string *, uint64_t, void *))sub_1002E9074();
              sub_1004949D8(a2, &v175);
              if ((v175.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                int v154 = &v175;
              }
              else {
                int v154 = (std::string *)v175.__r_.__value_.__r.__words[0];
              }
              (**v153)(v153, v154, 1LL, v173);
              sub_100280C10((uint64_t)buf);
              goto LABEL_350;
            }

            ++v117;
          }

          int v117 = (void *)*v117;
          if (!v117) {
            goto LABEL_262;
          }
        }
      }

      if (v110 == 8)
      {
        if (qword_1008D9278 != -1) {
          dispatch_once(&qword_1008D9278, &stru_100894670);
        }
        if (sub_100413550(qword_1008D9270, v173)) {
          goto LABEL_290;
        }
      }
    }

    else
    {
      switch(v110)
      {
        case 202:
          [*(id *)(a1 + 304) removeObject:v173];
          break;
        case 310:
          __int128 v155 = (os_log_s *)qword_1008F7628;
          if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
          {
            uint64_t v156 = (uint64_t)v173;
            sub_100494958(a2, (uint64_t)buf);
            sub_100675A3C(v156, (uint64_t *)buf, (uint64_t)&v175, v155);
          }

          __int128 v157 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 224) objectForKey:v173]);
          BOOL v158 = v157 == 0LL;

          if (v158) {
            [*(id *)(a1 + 224) setObject:v6 forKey:v173];
          }
          goto LABEL_350;
        case 311:
          if (qword_1008D5F10 != -1) {
            dispatch_once(&qword_1008D5F10, &stru_100894610);
          }
          __n128 v112 = off_1008D5F08;
          sub_100241F90(buf, v173);
          if (sub_1005996B4((uint64_t)v112, (unsigned __int8 *)buf))
          {
            if (qword_1008D67C8 != -1) {
              dispatch_once(&qword_1008D67C8, &stru_100894590);
            }
            sub_1002809BC((uint64_t)off_1008D67C0, a2, a1, v173, 0, 0);
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_100894630);
            }
            uint64_t v113 = off_1008D5F28;
            __n128 v114 = v173;
            sub_10002418C(v162, "_CTKD_");
            int v115 = sub_1005CE5A8((uint64_t)v113, v114, (uint64_t)v162);
            if (v163 < 0) {
              operator delete(v162[0]);
            }
            if (v115)
            {
              if (qword_1008D67C8 != -1) {
                dispatch_once(&qword_1008D67C8, &stru_100894590);
              }
              sub_100285584((uint64_t)off_1008D67C0, v173, 1, 0);
            }
          }

          goto LABEL_290;
      }
    }

    if ([v6 isLatencyCritical])
    {
      int v151 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 138543362;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v173;
        _os_log_impl( (void *)&_mh_execute_header,  v151,  OS_LOG_TYPE_DEFAULT,  "Latency Critical Action: Disable LE Connection for connect failure to device %{public}@",  (uint8_t *)buf,  0xCu);
      }

      sub_100393C90(a1);
    }

    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100894610);
    }
    __n128 v152 = off_1008D5F08;
    sub_100241F90(buf, v173);
    sub_100599B60((uint64_t)v152, (const unsigned __int8 *)buf);
    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_100894590);
    }
    sub_1002809BC((uint64_t)off_1008D67C0, a2, a1, v173, v111, 0);
    goto LABEL_340;
  }

  if (v172 == 1)
  {
    if (qword_1008D9278 != -1) {
      dispatch_once(&qword_1008D9278, &stru_100894670);
    }
    BOOL v26 = sub_100413550(qword_1008D9270, v173);
    goto LABEL_96;
  }

  if (v172 == 2)
  {
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100894610);
    }
    __int16 v25 = off_1008D5F08;
    sub_100241F90(buf, v173);
    BOOL v26 = sub_1005996B4((uint64_t)v25, (unsigned __int8 *)buf);
LABEL_96:
    BOOL v45 = v26;
    goto LABEL_98;
  }

  BOOL v45 = 0;
LABEL_98:
  unint64_t v46 = (os_log_s *)qword_1008F7628;
  if (!os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO)) {
    goto LABEL_103;
  }
  std::string::size_type v47 = (std::string::size_type)v173;
  sub_100494958(a2, (uint64_t)buf);
  uint64_t v48 = (buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0
      ? buf
      : (std::stringbuf::string_type *)buf[0].__r_.__value_.__r.__words[0];
  LODWORD(v175.__r_.__value_.__l.__data_) = 138543618;
  *(std::string::size_type *)((char *)v175.__r_.__value_.__r.__words + 4) = v47;
  WORD2(v175.__r_.__value_.__r.__words[1]) = 2082;
  *(std::string::size_type *)((char *)&v175.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v48;
  _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_INFO,  "Attempting to add device %{public}@ more than once for session %{public}s",  (uint8_t *)&v175,  0x16u);
  if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
  {
    operator delete(buf[0].__r_.__value_.__l.__data_);
    if (!v45) {
      goto LABEL_351;
    }
  }

  else
  {
LABEL_103:
    if (!v45) {
      goto LABEL_351;
    }
  }

  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_100894590);
  }
  sub_1002809BC((uint64_t)off_1008D67C0, a2, a1, v173, 0, 0);
LABEL_351:
}

void sub_100393710( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, int a46, __int16 a47, char a48, char a49, uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  _Unwind_Resume(a1);
}

id sub_100393988(char **a1, id *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 3;
    uint64_t v11 = v5 - (void)*a1;
    uint64_t v12 = v11 >> 2;
    else {
      unint64_t v13 = v12;
    }
    uint64_t v25 = v4;
    if (v13) {
      BOOL v14 = (char *)sub_100008BA0(v4, v13);
    }
    else {
      BOOL v14 = 0LL;
    }
    id v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    BOOL v24 = v16;
    *(void *)id v15 = *a2;
    unsigned int v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    int v18 = *a1;
    int v17 = a1[1];
    if (v17 == *a1)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
    }

    else
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *(void *)int v17 = 0LL;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }

      while (v17 != v18);
      int64x2_t v20 = *(int64x2_t *)a1;
      unsigned int v9 = (char *)v23.i64[1];
      uint64_t v16 = v24;
    }

    *a1 = v15;
    a1[1] = v9;
    int64x2_t v23 = v20;
    uint64_t v21 = a1[2];
    a1[2] = v16;
    BOOL v24 = v21;
    uint64_t v22 = v20.i64[0];
    id result = (id)sub_1001FDFC0((uint64_t)&v22);
  }

  else
  {
    id result = *a2;
    *(void *)uint64_t v7 = result;
    unsigned int v9 = v7 + 8;
  }

  a1[1] = v9;
  return result;
}

void sub_100393AA4(uint64_t a1)
{
  if (!*(void *)(a1 + 448))
  {
    *(_BYTE *)(a1 + 440) = 1;
    if (qword_1008D6608 != -1) {
      dispatch_once(&qword_1008D6608, &stru_1008945D0);
    }
    sub_100609C14((uint64_t)off_1008D6600, @"com.apple.bluetooth.LatencyCriticalAction");
    uint64_t v2 = sub_100404FE8();
    uint64_t v3 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(v2 + 8));
    *(void *)(a1 + 448) = v3;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_100393C20;
    handler[3] = &unk_10087EB20;
    handler[4] = a1;
    dispatch_source_set_event_handler(v3, handler);
    uint64_t v4 = *(dispatch_source_s **)(a1 + 448);
    dispatch_time_t v5 = dispatch_time(0LL, 7500000000LL);
    dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    unint64_t v6 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 448);
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v10 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Latency Critical Action: Timer Start - %@",  buf,  0xCu);
    }

    dispatch_activate(*(dispatch_object_t *)(a1 + 448));
  }

uint64_t sub_100393C20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Latency Critical Action: Timer expired!",  v4,  2u);
  }

  return sub_100393C90(v1);
}

uint64_t sub_100393C90(uint64_t result)
{
  uint64_t v1 = *(dispatch_source_s **)(result + 448);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138412290;
      dispatch_time_t v5 = v1;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Latency Critical Action: Cancel timer: %@",  (uint8_t *)&v4,  0xCu);
      uint64_t v1 = *(dispatch_source_s **)(v2 + 448);
    }

    dispatch_source_cancel(v1);
    dispatch_release(*(dispatch_object_t *)(v2 + 448));
    *(void *)(v2 + 448) = 0LL;
    *(_BYTE *)(v2 + 440) = 0;
    if (qword_1008D6608 != -1) {
      dispatch_once(&qword_1008D6608, &stru_1008945D0);
    }
    return sub_100609ECC((uint64_t)off_1008D6600, @"com.apple.bluetooth.LatencyCriticalAction");
  }

  return result;
}

void sub_100393D98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(a1 + 456);
  if (v8 != -1)
  {
    unsigned int v9 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138543618;
      id v31 = v5;
      __int16 v32 = 1024;
      int v33 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Overriding device %{public}@ coexConnectionPriority to %d",  buf,  0x12u);
    }

    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    sub_1005D6E84((uint64_t)off_1008D5F28, v5, *(_BYTE *)(a1 + 456));
    goto LABEL_16;
  }

  if ([v6 connectionUseCase] != (id)21
    && [v7 connectionUseCase] != (id)20
    && [v7 connectionUseCase] != (id)655360)
  {
    char v10 = 0;
    int v12 = *(unsigned __int8 *)(a1 + 129);
    if (v12 == 4 || v12 == 8) {
      goto LABEL_11;
    }
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    if ((sub_1005CE518((uint64_t)off_1008D5F28, v5) & 1) == 0)
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_100894630);
      }
      unint64_t v13 = off_1008D5F28;
      sub_10002418C(__p, "A1603");
      if ((sub_1005CE5A8((uint64_t)v13, v5, (uint64_t)__p) & 1) != 0)
      {
        if (v29 < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_100894630);
        }
        BOOL v14 = off_1008D5F28;
        sub_10002418C(v26, "A2051");
        if ((sub_1005CE5A8((uint64_t)v14, v5, (uint64_t)v26) & 1) != 0)
        {
          char v15 = 1;
        }

        else
        {
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_100894630);
          }
          uint64_t v16 = off_1008D5F28;
          sub_10002418C(v24, "A3085");
          if ((sub_1005CE5A8((uint64_t)v16, v5, (uint64_t)v24) & 1) != 0)
          {
            char v15 = 1;
          }

          else
          {
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_100894630);
            }
            int v17 = off_1008D5F28;
            sub_10002418C(v22, "A2538");
            char v15 = sub_1005CE5A8((uint64_t)v17, v5, (uint64_t)v22);
            if (v23 < 0) {
              operator delete(v22[0]);
            }
          }

          if (v25 < 0) {
            operator delete(v24[0]);
          }
        }

        if (v27 < 0) {
          operator delete(v26[0]);
        }
        if (v29 < 0) {
          operator delete(__p[0]);
        }
        if ((v15 & 1) == 0)
        {
          if ([v7 connectionUseCase] == (id)19
            || [v7 connectionUseCase] == (id)196608
            || *(_BYTE *)(a1 + 129) == 32)
          {
            goto LABEL_54;
          }

          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_100894630);
          }
          int v18 = off_1008D5F28;
          sub_10002418C(v20, "_HID_DEVICE_");
          char v19 = sub_1005CE5A8((uint64_t)v18, v5, (uint64_t)v20);
          if (v21 < 0) {
            operator delete(v20[0]);
          }
          if ((v19 & 1) != 0)
          {
LABEL_54:
            char v10 = 1;
            goto LABEL_11;
          }

          if (*(_BYTE *)(a1 + 129) == 16)
          {
            char v10 = 2;
            goto LABEL_11;
          }

          if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
            sub_100675CC8();
          }
        }
      }
    }
  }

  char v10 = 0;
LABEL_11:
  uint64_t v11 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138543362;
    id v31 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Device %{public}@ overriding wifi coex policy",  buf,  0xCu);
  }

  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  sub_1005D6E84((uint64_t)off_1008D5F28, v5, v10);
LABEL_16:
}

void sub_100394238( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, uint64_t a35, int a36, __int16 a37, char a38, char a39)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1003942CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (([*(id *)(a1 + 88) isEqualToString:@"com.teslamotors.TeslaApp"] & 1) != 0
    || ([*(id *)(a1 + 88) isEqualToString:@"com.teslamotors.enterpriseapp"] & 1) != 0
    || [v6 connectionUseCase] == (id)3
    || [v6 connectionUseCase] == (id)4)
  {
    goto LABEL_9;
  }

  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  if ((sub_1005CE518((uint64_t)off_1008D5F28, v5) & 1) != 0 || [v6 waitForConnectionPoll])
  {
LABEL_9:
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    sub_1005CFC08((uint64_t)off_1008D5F28, v5, 1);
    uint64_t v7 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138543362;
      id v9 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Enabling Poll/Null check for device %{public}@",  (uint8_t *)&v8,  0xCu);
    }
  }

  else
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    sub_1005CFC08((uint64_t)off_1008D5F28, v5, 0);
  }
}

void sub_100394494(_Unwind_Exception *exception_object)
{
}

void sub_1003944B0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if ([v8 connectionUseCase])
  {
    id v9 = [v8 connectionUseCase];
    uint64_t v10 = (uint64_t)v9;
    if ((_DWORD)v9 != 23 && (_DWORD)v9) {
      goto LABEL_29;
    }
  }

  else
  {
    LODWORD(v10) = 0;
  }

  if (([*(id *)(a1 + 88) isEqualToString:@"com.teslamotors.TeslaApp"] & 1) != 0
    || ([*(id *)(a1 + 88) isEqualToString:@"com.teslamotors.enterpriseapp"] & 1) != 0
    || [*(id *)(a1 + 88) hasPrefix:@"com.rivian.ios.consumer"])
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    if (sub_1005CE518((uint64_t)off_1008D5F28, v7))
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_100894630);
      }
      sub_1005C9A38((uint64_t)off_1008D5F28, v7, @"HasTS");
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_100894630);
      }
      if ((sub_1005CF9D8((uint64_t)off_1008D5F28, v7) & 1) == 0)
      {
        if (qword_1008D9060 != -1) {
          dispatch_once(&qword_1008D9060, &stru_100894650);
        }
        uint64_t v11 = qword_1008D9058;
        sub_10002418C(v31, "HasTS");
        sub_10002418C(__p, "Tesla Tagged HasTS UnsetTag");
        sub_10040C784(60.0, v11, (uint64_t *)v31, (uint64_t *)__p);
        if (v30 < 0) {
          operator delete(__p[0]);
        }
        if (v32 < 0) {
          operator delete(v31[0]);
        }
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
          sub_100675CF4();
        }
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_100894630);
        }
        sub_1005CFA70((uint64_t)off_1008D5F28, v7, 1);
      }
    }

    uint64_t v10 = 16LL;
  }

  else
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    if ((sub_1005CE518((uint64_t)off_1008D5F28, v7) & 1) != 0)
    {
      uint64_t v10 = 11LL;
    }

    else
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_100894630);
      }
      char v25 = off_1008D5F28;
      sub_10002418C(v27, "ANCSAuthorized");
      int v26 = sub_1005CE5A8((uint64_t)v25, v7, (uint64_t)v27);
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (v26) {
        uint64_t v10 = 23LL;
      }
      else {
        uint64_t v10 = v10;
      }
    }
  }

void sub_100394988( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100394A38(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  if ([v5 minRSSILevelForConnection])
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    sub_1005CFB80((uint64_t)off_1008D5F28, v4, (char)[v5 minRSSILevelForConnection]);
    id v6 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 67109378;
      v7[1] = (char)[v5 minRSSILevelForConnection];
      __int16 v8 = 2114;
      id v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Setting minimum RSSI level for connection to %d for device %{public}@ requested in connectOptions",  (uint8_t *)v7,  0x12u);
    }
  }
}

void sub_100394B60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *sub_100394B80(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }

        else
        {
          switch(a1)
          {
            case 2147418112:
              id result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              id result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              id result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              id result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              id result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              id result = "InternalTestActiveScan";
              break;
            case 2147418118:
              id result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              id result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              id result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }

      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            id result = "ADPD";
            break;
          case 524289:
            id result = "ADPDBuffer";
            break;
          case 524290:
            id result = "MicroLocation";
            break;
          case 524291:
            id result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              id result = "PrecisionFindingFindee";
            }

            else
            {
              if (a1 != 589824) {
                return "?";
              }
              id result = "FindNearbyRemote";
            }

            break;
        }
      }

      else
      {
        switch(a1)
        {
          case 393216:
            id result = "CaptiveNetworkJoin";
            break;
          case 393217:
            id result = "UseCaseSIMTransfer";
            break;
          case 393218:
            id result = "MacSetup";
            break;
          case 393219:
            id result = "AppleIDSignIn";
            break;
          case 393220:
            id result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              id result = "RapportThirdParty";
            }

            else
            {
              if (a1 != 458752) {
                return "?";
              }
              id result = "PrecisionFindingFinder";
            }

            break;
        }
      }
    }

    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            id result = "DigitalIDTSA";
          }

          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            id result = "DigitalCarKeyThirdParty";
          }

          break;
      }
    }
  }

  else
  {
    id result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        id result = "HealthKit";
        break;
      case 2:
        id result = "HomeKit";
        break;
      case 3:
        id result = "FindMyObjectConnection";
        break;
      case 4:
        id result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        id result = "MIDI";
        break;
      case 6:
        id result = "Continuity";
        break;
      case 7:
        id result = "InstantHotSpot";
        break;
      case 8:
        id result = "NearBy";
        break;
      case 9:
        id result = "Sharing";
        break;
      case 10:
        id result = "HearingSupport";
        break;
      case 11:
        id result = "Magnet";
        break;
      case 12:
        id result = "HID";
        break;
      case 13:
        id result = "LEA";
        break;
      case 14:
        id result = "External";
        break;
      case 15:
        id result = "ExternalMedical";
        break;
      case 16:
        id result = "ExternalLock";
        break;
      case 17:
        id result = "ExternalWatch";
        break;
      case 18:
        id result = "SmartRouting";
        break;
      case 19:
        id result = "DigitalID";
        break;
      case 20:
        id result = "DigitalKey";
        break;
      case 21:
        id result = "DigitalCarKey";
        break;
      case 22:
        id result = "HeySiri";
        break;
      case 23:
        id result = "ThirdPartyApp";
        break;
      case 24:
        id result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            id result = "DevicePresenceDetection";
            break;
          case 257:
            id result = "AudioBox";
            break;
          case 258:
            id result = "SIMTransfer";
            break;
          case 259:
            id result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            id result = "MacMigrate";
            break;
          case 263:
            id result = "HIDUARTService";
            break;
          case 264:
            id result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            id result = "BaseBandFastConnect";
            break;
          case 266:
            id result = "SafetyAlerts";
            break;
          case 267:
            id result = "LECarPlay";
            break;
          case 268:
            id result = "TCCBluetooth";
            break;
          case 269:
            id result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }

        break;
    }
  }

  return result;
}

void sub_1003952AC(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = *(void *)(a1 + 368);
  if (v3)
  {
    sub_1002E58D0(v3, v5);
  }

  else
  {
    id v4 = operator new(0x28uLL);
    sub_1002E59C4(v4, *(void *)(a1 + 88), v5, *(_BYTE *)(a1 + 129) != 0);
    *(void *)(a1 + 368) = v4;
  }
}

void sub_100395318( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10039533C(uint64_t a1, uint64_t a2, void *a3, int a4, int a5, unsigned int a6)
{
  id v11 = a3;
  id v52 = v11;
  if (*(_BYTE *)(a1 + 44) && (a4 & 1) == 0)
  {
    if (qword_1008D92A8 != -1) {
      dispatch_once(&qword_1008D92A8, &stru_1008945B0);
    }
    uint64_t v12 = qword_1008D92A0;
    unint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 216) objectForKeyedSubscript:v11]);
    sub_10064C568(v12, a2, v11, v13);
  }

  [*(id *)(a1 + 80) removeObjectForKey:v11];
  int v14 = *(void **)(a1 + 288);
  if (v14)
  {
    uint64_t v15 = a1 + 288;
    do
    {
      unint64_t v16 = v14[4];
      BOOL v17 = v16 >= (unint64_t)v11;
      else {
        int v18 = v14 + 1;
      }
      if (v17) {
        uint64_t v15 = (uint64_t)v14;
      }
      int v14 = (void *)*v18;
    }

    while (*v18);
    if (v15 != a1 + 288 && *(void *)(v15 + 32) <= (unint64_t)v11)
    {
      sub_1003A12BC(a1 + 280, (unint64_t *)&v52);
      [*(id *)(a1 + 216) removeObjectForKey:v52];
      id v11 = v52;
      goto LABEL_111;
    }
  }

  char v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 376) objectForKey:v11]);

  if (!v19)
  {
    BOOL v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 224) objectForKey:v11]);
    if (v24)
    {
      char v25 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        sub_100494958(a2, (uint64_t)buf);
        int v26 = (SBYTE7(v57) & 0x80u) == 0 ? buf : *(uint8_t **)buf;
        LODWORD(v55.__r_.__value_.__l.__data_) = 138543618;
        *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
        WORD2(v55.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v55.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v26;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Device %{public}@ for session %{public}s is already disconnecting, removing it from the pending devices list",  (uint8_t *)&v55,  0x16u);
        if (SBYTE7(v57) < 0) {
          operator delete(*(void **)buf);
        }
      }

      [*(id *)(a1 + 224) removeObjectForKey:v11];
    }

    char v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 216) objectForKeyedSubscript:v11]);

    char v28 = v27;
    if (!v27) {
      goto LABEL_110;
    }
    if ([v27 isLatencyCritical])
    {
      char v29 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 138543362;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Latency Critical Action: Device %{public}@ disconnecting cancel timer",  buf,  0xCu);
      }

      sub_100393C90(a1);
    }

    __int128 v57 = 0u;
    __int128 v58 = 0u;
    *(_OWORD *)std::string buf = 0u;
    sub_10002418C(&v55, (char *)[*(id *)(a1 + 88) UTF8String]);
    sub_10040CF4C((uint64_t)buf, (__int128 *)&v55, *(_BYTE *)(a1 + 129), v11);
    int v50 = a5;
    if (qword_1008D9298 != -1) {
      dispatch_once(&qword_1008D9298, &stru_1008945F0);
    }
    sub_10040D074(qword_1008D9290, (uint64_t)buf);
    char v30 = (void (***)(void, std::string *, void, id))sub_1002E9074();
    sub_1004949D8(a2, &v55);
    if ((v55.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      id v31 = &v55;
    }
    else {
      id v31 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    (**v30)(v30, v31, 0LL, v11);
    char v32 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      sub_100494958(a2, (uint64_t)&v55);
      int v33 = (v55.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v55 : (std::string *)v55.__r_.__value_.__r.__words[0];
      *(_DWORD *)uint64_t v53 = 138543618;
      *(void *)&v53[4] = v11;
      *(_WORD *)&v53[12] = 2082;
      *(void *)&v53[14] = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Disconnecting device %{public}@ for session %{public}s",  v53,  0x16u);
    }

    [*(id *)(a1 + 216) removeObjectForKey:v11];
    sub_100494958(a2, (uint64_t)&v55);
    unsigned int v51 = a6;
    uint64_t size = v55.__r_.__value_.__s.__size_;
    unsigned __int8 v35 = v55.__r_.__value_.__s.__size_;
    if ((v55.__r_.__value_.__s.__size_ & 0x80u) == 0)
    {
      __int128 v36 = &v55;
    }

    else
    {
      uint64_t size = v55.__r_.__value_.__l.__size_;
      __int128 v36 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }

    if (size >= 20)
    {
      unsigned int v38 = (char *)v36 + size;
      unsigned int v39 = v36;
      while (1)
      {
        uint64_t v40 = (char *)memchr(v39, 99, size - 19);
        if (!v40)
        {
LABEL_77:
          BOOL v37 = 0;
          goto LABEL_78;
        }

        BOOL v41 = *(void *)v40 == 0x6C7070612E6D6F63LL && *((void *)v40 + 1) == 0x6F7465756C622E65LL;
        if (v41 && *((_DWORD *)v40 + 4) == 1684567151) {
          break;
        }
        unsigned int v39 = (std::string *)(v40 + 1);
        uint64_t size = v38 - (char *)v39;
      }

      BOOL v37 = 0;
      if (v40 != v38 && v40 - (char *)v36 != -1)
      {
        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_100894630);
        }
        sub_1005CF060((uint64_t)off_1008D5F28, v11, (uint64_t)v53);
        uint64_t v49 = *(void *)&v53[8];
        if ((v54 & 0x80u) == 0) {
          uint64_t v49 = v54;
        }
        BOOL v37 = v49 != 0;
        unsigned __int8 v35 = v55.__r_.__value_.__s.__size_;
      }
    }

    else
    {
      BOOL v37 = 0;
    }

void sub_100395C70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, char a24)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_100280C10((uint64_t)&a24);

  _Unwind_Resume(a1);
}

uint64_t sub_100395D28(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1[32])
  {
    int v26 = v3;
    std::string __p = 0LL;
    char v28 = 0LL;
    char v29 = 0LL;
    id v5 = (void *)a1[30];
    if (v5 != a1 + 31)
    {
      do
      {
        __int128 v30 = *((_OWORD *)v5 + 2);
        int v31 = *((_DWORD *)v5 + 12);
        id v6 = (id)v5[7];
        id v7 = v28;
        if (v28 >= v29)
        {
          unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v28 - (_BYTE *)__p) >> 2);
          unint64_t v10 = v9 + 1;
          if (v9 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            abort();
          }
          if (0x999999999999999ALL * ((v29 - (_BYTE *)__p) >> 2) > v10) {
            unint64_t v10 = 0x999999999999999ALL * ((v29 - (_BYTE *)__p) >> 2);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v29 - (_BYTE *)__p) >> 2) >= 0x666666666666666LL) {
            unint64_t v11 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v11 = v10;
          }
          if (v11) {
            uint64_t v12 = (char *)sub_100050420((uint64_t)&v29, v11);
          }
          else {
            uint64_t v12 = 0LL;
          }
          unint64_t v13 = &v12[4 * ((v28 - (_BYTE *)__p) >> 2)];
          *(_OWORD *)unint64_t v13 = v30;
          *((_DWORD *)v13 + 4) = v31;
          uint64_t v15 = (char *)__p;
          int v14 = v28;
          unint64_t v16 = &v12[20 * v9];
          if (v28 != __p)
          {
            do
            {
              __int128 v17 = *(_OWORD *)(v14 - 20);
              *((_DWORD *)v16 - 1) = *((_DWORD *)v14 - 1);
              *(_OWORD *)(v16 - 20) = v17;
              v16 -= 20;
              v14 -= 20;
            }

            while (v14 != v15);
            int v14 = (char *)__p;
          }

          __int16 v8 = v13 + 20;
          std::string __p = v16;
          char v28 = v13 + 20;
          char v29 = &v12[20 * v11];
          if (v14) {
            operator delete(v14);
          }
        }

        else
        {
          *(_OWORD *)char v28 = v30;
          *((_DWORD *)v7 + 4) = v31;
          __int16 v8 = v7 + 20;
        }

        char v28 = v8;

        int v18 = (void *)v5[1];
        if (v18)
        {
          do
          {
            char v19 = v18;
            int v18 = (void *)*v18;
          }

          while (v18);
        }

        else
        {
          do
          {
            char v19 = (void *)v5[2];
            BOOL v20 = *v19 == (void)v5;
            id v5 = v19;
          }

          while (!v20);
        }

        id v5 = v19;
      }

      while (v19 != a1 + 31);
    }

    uint64_t v21 = a1[15];
    if (qword_1008D5F60 != -1) {
      dispatch_once(&qword_1008D5F60, &stru_100894690);
    }
    id v4 = v26;
    if (v21)
    {
      unsigned int v22 = *(_BYTE *)(v21 + 39) != 0;
      uint64_t v23 = *(unsigned int *)(v21 + 52);
    }

    else
    {
      unsigned int v22 = 0;
      uint64_t v23 = 0LL;
    }

    uint64_t v24 = sub_10055679C(qword_1008D5F58, v26, (__int128 **)&__p, v22, v23, 1);
    if (__p)
    {
      char v28 = (char *)__p;
      operator delete(__p);
    }
  }

  else
  {
    uint64_t v24 = 0LL;
  }

  return v24;
}

void sub_100395FB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100395FEC(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 **a4, char a5)
{
  id v58 = a3;
  [*(id *)(a1 + 232) removeAllObjects];
  sub_1003A0D64(a1 + 240, *(void **)(a1 + 248));
  *(void *)(a1 + 240) = a1 + 248;
  *(void *)(a1 + 248) = 0LL;
  *(void *)(a1 + 256) = 0LL;
  [*(id *)(a1 + 264) removeAllObjects];
  *(_BYTE *)(a1 + 273) = a5;
  id v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
  id v7 = *a4;
  __int16 v8 = a4[1];
  if (*a4 == v8)
  {
    unsigned __int16 v10 = 0;
    unsigned __int16 v9 = 0;
  }

  else
  {
    unsigned __int16 v9 = 0;
    unsigned __int16 v10 = 0;
    do
    {
      sub_1006344B4((uint64_t)v7, buf);
      if (v87 >= 0) {
        unint64_t v11 = buf;
      }
      else {
        unint64_t v11 = *(_BYTE **)buf;
      }
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v11));
      unint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@ ", v12));
      [v61 appendString:v13];

      if (v87 < 0) {
        operator delete(*(void **)buf);
      }
      int v15 = *v7;
      v7 += 20;
      int v14 = v15;
      if (v15 == 16) {
        ++v9;
      }
      if (v14 == 2) {
        ++v10;
      }
    }

    while (v7 != v8);
  }

  [v60 setObject:v61 forKeyedSubscript:@"ServiceUUID"];
  unint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v10));
  [v60 setObject:v16 forKeyedSubscript:@"NumberOf16bitUUID"];

  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v9));
  [v60 setObject:v17 forKeyedSubscript:@"NumberOf128bitUUID"];

  [v60 setObject:*(void *)(a1 + 88) forKeyedSubscript:@"BundleID"];
  int v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a4[1] != *a4));
  [v60 setObject:v18 forKeyedSubscript:@"registerForSpecificGATTServices"];

  char v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v58 count] != 0));
  [v60 setObject:v19 forKeyedSubscript:@"registerForSpecificDevices"];

  uint64_t v20 = sub_100404FE8();
  v77[0] = _NSConcreteStackBlock;
  v77[1] = 3221225472LL;
  v77[2] = sub_100396B90;
  v77[3] = &unk_10087EA48;
  id v57 = v60;
  id v78 = v57;
  sub_100405384(v20, v77);
  if (!*(_BYTE *)(a1 + 273))
  {
    __int128 v71 = 0uLL;
    __int128 v72 = 0uLL;
    __int128 v69 = 0uLL;
    __int128 v70 = 0uLL;
    id v22 = v58;
    id v28 = [v22 countByEnumeratingWithState:&v69 objects:v84 count:16];
    if (!v28) {
      goto LABEL_58;
    }
    uint64_t v29 = *(void *)v70;
    while (1)
    {
      __int128 v30 = 0LL;
      do
      {
        if (*(void *)v70 != v29) {
          objc_enumerationMutation(v22);
        }
        int v31 = *(void **)(*((void *)&v69 + 1) + 8LL * (void)v30);
        char v32 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 138543362;
          *(void *)&uint8_t buf[4] = v31;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Parsing %{public}@", buf, 0xCu);
        }

        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_100894630);
        }
        int v33 = off_1008D5F28;
        sub_10002418C(__p, "IsAppleWatch");
        int v34 = sub_1005CE5A8((uint64_t)v33, v31, (uint64_t)__p);
        int v35 = v34;
        if (v68 < 0)
        {
          operator delete(__p[0]);
          if (v35)
          {
LABEL_45:
            __int128 v36 = (os_log_s *)qword_1008F7628;
            if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Not adding watch to connection options",  buf,  2u);
            }

            goto LABEL_56;
          }
        }

        else if (v34)
        {
          goto LABEL_45;
        }

        BOOL v37 = *(void **)(a1 + 232);
        unsigned int v38 = (void *)objc_claimAutoreleasedReturnValue( +[ConnectOptions alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:]( &OBJC_CLASS___ConnectOptions,  "alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:",  1LL,  0LL,  0LL,  0LL,  0LL));
        [v37 setObject:v38 forKey:v31];

        if (qword_1008D9278 != -1) {
          dispatch_once(&qword_1008D9278, &stru_100894670);
        }
        if (sub_100413550(qword_1008D9270, v31))
        {
          unsigned int v39 = (os_log_s *)qword_1008F7628;
          if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 138543362;
            *(void *)&uint8_t buf[4] = v31;
            _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "%{public}@ is already connected ! firing event now",  buf,  0xCu);
          }

          if (qword_1008D67C8 != -1) {
            dispatch_once(&qword_1008D67C8, &stru_100894590);
          }
          sub_100287E84((uint64_t)off_1008D67C0, a2, a1, v31, 1u);
        }

void sub_100396A5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *__p, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100396B90(uint64_t a1)
{
  uint64_t v2 = sub_1002E8D94();
  return (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 352LL))(v2, *(void *)(a1 + 32));
}

id sub_100396BBC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 304) containsObject:a2];
}

uint64_t sub_100396BC8(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  id v6 = a3;
  if (qword_1008D9278 != -1) {
    dispatch_once(&qword_1008D9278, &stru_100894670);
  }
  int v11 = 0;
  uint64_t v7 = qword_1008D9270;
  sub_100241F90(v13, v6);
  if (sub_1004135EC(v7, v13, &v11) || v11 != 1)
  {
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100894610);
    }
    unsigned __int16 v9 = off_1008D5F08;
    sub_100241F90(v12, v6);
    uint64_t v8 = sub_100599724((uint64_t)v9, a2, v12, a4);
  }

  else
  {
    uint64_t v8 = 11LL;
  }

  return v8;
}

void sub_100396CF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100396D0C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a3;
  id v9 = a5;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  __int128 v10 = *(_OWORD *)(a4 + 16);
  v13[0] = *(_OWORD *)a4;
  v13[1] = v10;
  int v14 = *(_DWORD *)(a4 + 32);
  uint64_t v11 = sub_10059ACC0((uint64_t)off_1008D5F08, a2, v8, (unsigned __int8 *)v13, v9);

  return v11;
}

void sub_100396DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100396DC8(uint64_t a1, uint64_t a2, int a3, void *a4, int a5, uint64_t a6)
{
  id v10 = a4;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  uint64_t v11 = sub_10059B868((uint64_t)off_1008D5F08, a2, a3, v10, a5, a6);

  return v11;
}

void sub_100396E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100396E6C( uint64_t a1, unint64_t a2, int a3, void *a4, uint64_t a5, __int128 *a6, uint64_t a7, void *a8)
{
  id v14 = a4;
  id v15 = a8;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  __int128 v16 = a6[1];
  v19[0] = *a6;
  v19[1] = v16;
  uint64_t v17 = sub_10059BD08((uint64_t)off_1008D5F08, a2, a3, v14, a5, v19, a7, v15);

  return v17;
}

void sub_100396F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100396F48()
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  return sub_10059C560();
}

uint64_t sub_100396F98(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  uint64_t v5 = sub_10059C704(off_1008D5F08, a2, (uint64_t)v4);

  return v5;
}

void sub_100397004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100397014(uint64_t a1, unint64_t a2, void *a3, __int128 *a4)
{
  id v6 = a3;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  __int128 v7 = a4[1];
  __int128 v10 = *a4;
  v11[0] = v7;
  *(_OWORD *)((char *)v11 + 10) = *(__int128 *)((char *)a4 + 26);
  uint64_t v8 = sub_10059C884(off_1008D5F08, a2, (uint64_t)v6, &v10);

  return v8;
}

void sub_1003970A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003970B8(uint64_t a1, unint64_t a2, void *a3)
{
  id v4 = a3;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  uint64_t v5 = sub_10059CB3C(off_1008D5F08, a2, (uint64_t)v4);

  return v5;
}

void sub_100397124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100397134(uint64_t a1, unint64_t a2, void *a3)
{
  id v4 = a3;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  uint64_t v5 = sub_10059CC80(off_1008D5F08, a2, (uint64_t)v4);

  return v5;
}

void sub_1003971A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003971B0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  __int128 v7 = *(_OWORD *)(a4 + 16);
  v10[0] = *(_OWORD *)a4;
  v10[1] = v7;
  void v10[2] = *(_OWORD *)(a4 + 32);
  int v11 = *(_DWORD *)(a4 + 48);
  uint64_t v8 = sub_10059CDC4(off_1008D5F08, a2, (uint64_t)v6, (unsigned __int16 *)v10);

  return v8;
}

void sub_10039724C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10039725C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  uint64_t v7 = sub_10059D008(off_1008D5F08, a2, v6, a4);

  return v7;
}

void sub_1003972D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003972E8(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8 = a3;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  uint64_t v9 = sub_10059D2E0(off_1008D5F08, a2, v8, a4, a5);

  return v9;
}

void sub_10039736C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10039737C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  __int128 v9 = *(_OWORD *)a4;
  uint64_t v10 = *(void *)(a4 + 16);
  uint64_t v7 = sub_10059D5C0(off_1008D5F08, a2, v6, &v9);

  return v7;
}

void sub_100397410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100397420(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  return sub_10059D8A8((uint64_t)off_1008D5F08, a2, a3);
}

uint64_t sub_100397478(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10 = a3;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  uint64_t v11 = sub_10059DA0C(off_1008D5F08, a2, (uint64_t)v10, a4, a5, a6);

  return v11;
}

void sub_10039750C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10039751C(uint64_t a1, unint64_t a2)
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  return sub_10059DC14((uint64_t)off_1008D5F08, a2);
}

uint64_t sub_10039756C(uint64_t a1, unint64_t a2, void *a3)
{
  id v4 = a3;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  uint64_t v5 = sub_10059DD68(off_1008D5F08, a2, (uint64_t)v4);

  return v5;
}

void sub_1003975D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003975E8(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  uint64_t v7 = sub_10059E21C(off_1008D5F08, a2, v6, a4);

  return v7;
}

void sub_100397664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100397674(uint64_t a1)
{
  return [*(id *)(a1 + 312) count] || objc_msgSend(*(id *)(a1 + 304), "count") != 0;
}

void sub_1003976B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(_BYTE *)(a1 + 349) && *(void *)(a1 + 120)) {
    sub_10038F4BC((void *)a1, 134LL, v3);
  }
}

void sub_100397704( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100397718(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, void *a7)
{
  value[0] = a5;
  id v12 = a2;
  id v13 = a7;
  id v14 = *(_BYTE **)(a1 + 120);
  if (!v14)
  {
    char v49 = 0;
    char v50 = 0;
    BOOL v16 = 0;
    int v15 = 0;
    BOOL v17 = 0;
    if (v12) {
      goto LABEL_3;
    }
LABEL_12:
    int v47 = v17;
    uint64_t v48 = a4;
    if (*(_BYTE *)(*(void *)(a3 + 8) + 304LL)) {
      goto LABEL_59;
    }
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
      sub_100675D80();
    }
    goto LABEL_75;
  }

  int v15 = *((_DWORD *)v14 - 16);
  BOOL v16 = v14[26] != 0;
  BOOL v17 = v14[27] != 0;
  char v49 = v14[30] != 0;
  char v50 = v14[29] != 0;
  if (!v12) {
    goto LABEL_12;
  }
LABEL_3:
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  if ((sub_1005D79C0((uint64_t)off_1008D5F28, v12, *(void **)(a1 + 88), *(void **)(a1 + 104)) & 1) != 0)
  {
    int v47 = v17;
    uint64_t v48 = a4;
    id v46 = v13;
    uint64_t v18 = *(void *)(a3 + 8);
    uint64_t v20 = *(unsigned __int8 **)(v18 + 64);
    char v19 = *(unsigned __int8 **)(v18 + 72);
    if (v20 == v19)
    {
      uint64_t v21 = *(void *)(a3 + 8);
      id v13 = v46;
    }

    else
    {
      while (1)
      {
        *(_OWORD *)std::string buf = xmmword_1006BDACC;
        *(_DWORD *)&uint8_t buf[16] = 0;
        if (sub_1001BEC7C(v20, buf)) {
          break;
        }
        v20 += 20;
        if (v20 == v19)
        {
          uint64_t v20 = v19;
          break;
        }
      }

      uint64_t v21 = *(void *)(a3 + 8);
      id v13 = v46;
    }

    if (*(_BYTE *)(v21 + 12) && v20 != *(unsigned __int8 **)(v18 + 72))
    {
      if (*(char *)(v21 + 39) < 0)
      {
        sub_100024238(buf, *(void **)(v21 + 16), *(void *)(v21 + 24));
      }

      else
      {
        *(_OWORD *)std::string buf = *(_OWORD *)(v21 + 16);
        *(void *)&uint8_t buf[16] = *(void *)(v21 + 32);
      }

      char v25 = buf[23];
      if ((buf[23] & 0x80000000) != 0)
      {
        if (*(void *)&buf[8] != 13LL) {
          goto LABEL_32;
        }
        int v26 = *(uint64_t **)buf;
      }

      else
      {
        if (buf[23] != 13) {
          goto LABEL_32;
        }
        int v26 = (uint64_t *)buf;
      }

      uint64_t v27 = *v26;
      uint64_t v28 = *(uint64_t *)((char *)v26 + 5);
      if (v27 == 0x6165627265776F50LL && v28 == 0x5248207374616562LL)
      {
        BOOL v32 = 1;
        goto LABEL_55;
      }

void sub_100397C98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100397CF4(void *a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v11 = 138543618;
    *(void *)&void v11[4] = v5;
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&uint8_t v11[14] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Device %{public}@ CL Ready with result %d",  v11,  0x12u);
  }

  xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
  *(void *)uint64_t v11 = 0LL;
  *(void *)&v11[8] = 0LL;
  [v5 getUUIDBytes:v11];
  xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", v11);
  xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a3);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  BOOL v8 = sub_1005D4EDC((uint64_t)off_1008D5F28, v5);
  xpc_dictionary_set_int64(v7, "kCBMsgArgVisibleInSettings", !v8);
  uint64_t v9 = sub_10043E46C(v7);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  sub_10038F4BC(a1, 86LL, v10);

  xpc_release(v7);
}

void sub_100397E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100397EA4(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  __int128 v71 = v5;
  id v6 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138543618;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Device %{public}@ connected with result %d",  buf,  0x12u);
  }

  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 120);
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    if ((sub_1005D79C0((uint64_t)off_1008D5F28, v5, *(void **)(a1 + 88), *(void **)(a1 + 104)) & 1) != 0)
    {
      xpc_object_t xdict = xpc_dictionary_create(0LL, 0LL, 0LL);
      if (qword_1008D5F10 != -1) {
        dispatch_once(&qword_1008D5F10, &stru_100894610);
      }
      BOOL v8 = off_1008D5F08;
      sub_100241F90(buf, v5);
      BOOL v61 = sub_100595874((uint64_t)v8, buf);
      uuid[0] = 0LL;
      uuid[1] = 0LL;
      [v5 getUUIDBytes:uuid];
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 216) objectForKeyedSubscript:v5]);
      xpc_dictionary_set_uuid(xdict, "kCBMsgArgDeviceUUID", (const unsigned __int8 *)uuid);
      xpc_dictionary_set_int64(xdict, "kCBMsgArgResult", a3);
      if (!a3)
      {
        id v59 = v9;
        if (v7) {
          BOOL v10 = *(_BYTE *)(v7 + 24) != 0;
        }
        else {
          BOOL v10 = 0;
        }
        if (qword_1008D5F10 != -1) {
          dispatch_once(&qword_1008D5F10, &stru_100894610);
        }
        id v14 = off_1008D5F08;
        sub_100241F90(buf, v5);
        unsigned int v15 = sub_10059A15C((uint64_t)v14, buf);
        xpc_dictionary_set_int64(xdict, "kCBMsgArgConnectionRole", v15);
        if (qword_1008D9268 != -1) {
          dispatch_once(&qword_1008D9268, &stru_1008946F0);
        }
        unsigned int v16 = sub_10038798C(qword_1008D9260, v5);
        xpc_dictionary_set_int64(xdict, "kCBMsgArgATTMTU", v16);
        if (v61) {
          int64_t v17 = 2LL;
        }
        else {
          int64_t v17 = 1LL;
        }
        xpc_dictionary_set_int64(xdict, "kCBMsgArgConnectionTransport", v17);
        if (v10)
        {
          if (qword_1008D5F10 != -1) {
            dispatch_once(&qword_1008D5F10, &stru_100894610);
          }
          uint64_t v18 = off_1008D5F08;
          sub_100241F90(buf, v5);
          char v19 = sub_10059A0AC((uint64_t)v18, buf);
          xpc_dictionary_set_BOOL(xdict, "kCBMsgArgIsLinkEncrypted", v19);
        }

        if (v7 && *(int *)(v7 - 64) >= 1)
        {
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_100894630);
          }
          BOOL v20 = sub_1005D4EDC((uint64_t)off_1008D5F28, v5);
          xpc_dictionary_set_int64(xdict, "kCBMsgArgVisibleInSettings", !v20);
        }

        uint64_t v9 = v59;
        if (v61)
        {
          uint64_t v75 = 0LL;
          __int128 v74 = 0u;
          __int128 v73 = 0u;
          memset(buf, 0, sizeof(buf));
          if (qword_1008D5F10 != -1) {
            dispatch_once(&qword_1008D5F10, &stru_100894610);
          }
          sub_10058C504((uint64_t)off_1008D5F08, v5, (uint64_t)buf);
          if (*(void *)buf)
          {
            uint64_t v21 = objc_claimAutoreleasedReturnValue([v59 connectingClients]);
            id v22 = *(void **)&buf[8];
            *(void *)&uint8_t buf[8] = v21;

            if (qword_1008D5F10 != -1) {
              dispatch_once(&qword_1008D5F10, &stru_100894610);
            }
            uint64_t v23 = off_1008D5F08;
            v66[0] = *(id *)buf;
            v66[1] = *(id *)&buf[8];
            __int128 v67 = *(_OWORD *)&buf[16];
            __int128 v68 = v73;
            __int128 v69 = v74;
            int v70 = v75;
            sub_10058C62C((uint64_t)v23, v5, (uint64_t)v66);
          }
        }

        ++*(_DWORD *)(a1 + 344);
      }

      uint64_t v24 = (os_log_s *)qword_1008F7658;
      if (os_log_type_enabled((os_log_t)qword_1008F7658, OS_LOG_TYPE_DEFAULT))
      {
        char v25 = "classic";
        uint64_t v26 = *(void *)(a1 + 88);
        *(_DWORD *)std::string buf = 138544130;
        if (v61) {
          char v25 = "le";
        }
        *(void *)&uint8_t buf[4] = v5;
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v26;
        *(_WORD *)&_BYTE buf[22] = 2082;
        *(void *)&_BYTE buf[24] = v25;
        LOWORD(v73) = 1024;
        *(_DWORD *)((char *)&v73 + 2) = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "App ready - {cbuuid: %{public}@, bundle: %{public}@, transport: %{public}s, result: %d}",  buf,  0x26u);
      }

      if (a3 != 341 && a3 != 348)
      {
        int v27 = [v9 connectionUseCase];
        uint64_t v28 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v29 = sub_100394B80(v27);
          uint64_t v30 = *(void *)(a1 + 88);
          *(_DWORD *)std::string buf = 136446722;
          *(void *)&uint8_t buf[4] = v29;
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&buf[14] = v5;
          *(_WORD *)&_BYTE buf[22] = 2114;
          *(void *)&_BYTE buf[24] = v30;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "BLE Connection Ready %{public}s %{public}@ for %{public}@",  buf,  0x20u);
          uint64_t v28 = (os_log_s *)qword_1008F7628;
        }

        if (os_signpost_enabled(v28))
        {
          int v31 = sub_100394B80(v27);
          uint64_t v32 = *(void *)(a1 + 88);
          *(_DWORD *)std::string buf = 136446722;
          *(void *)&uint8_t buf[4] = v31;
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&buf[14] = v5;
          *(_WORD *)&_BYTE buf[22] = 2114;
          *(void *)&_BYTE buf[24] = v32;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v28,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "BTSignPost",  "BLE Connection Ready %{public}s %{public}@ for %{public}@",  buf,  0x20u);
        }

        if (qword_1008D5F30 != -1) {
          dispatch_once(&qword_1008D5F30, &stru_100894630);
        }
        int v33 = off_1008D5F28;
        double Current = CFAbsoluteTimeGetCurrent();
        sub_1005CC848((uint64_t)v33, v5, Current);
      }

      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_100894630);
      }
      id v35 = sub_1005D7650((uint64_t)off_1008D5F28, v5);
      xpc_object_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
      BOOL v38 = a3 == 315 && v36 != 0LL;

      if (v38)
      {
        unsigned int v39 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 138543362;
          *(void *)&uint8_t buf[4] = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Device %{public}@ is FindMy but has no valid addresses/keys, parking connection attempt until we get an update",  buf,  0xCu);
        }

        if (!v9) {
          goto LABEL_80;
        }
        if (qword_1008D67C8 != -1) {
          dispatch_once(&qword_1008D67C8, &stru_100894590);
        }
        uint64_t v40 = sub_10028E0C8((uint64_t)off_1008D67C0, a1);
        if (!v40) {
          goto LABEL_80;
        }
        id v41 = v9;
        *(void *)std::string buf = &v71;
        uint64_t v42 = sub_1003A1170((uint64_t **)(a1 + 280), (unint64_t *)&v71, (uint64_t)&unk_1006C2518, (id **)buf);
        __int128 v43 = (void *)v42[5];
        v42[5] = (uint64_t)v41;
        id v44 = v41;

        v42[6] = v40;
      }

      else
      {
        uint64_t v45 = sub_10043E46C(xdict);
        id v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
        sub_10038F4BC((void *)a1, 85LL, v46);

        unsigned int v47 = [v9 connectionUseCase];
        id v48 = objc_claimAutoreleasedReturnValue([v5 UUIDString]);
        sub_10002418C(buf, (char *)[v48 UTF8String]);
        uint64_t v49 = sub_100024098(a1 + 416, (const void **)buf);

        if (v47 != 655360 && v47 != 21 || a3 || a1 + 424 == v49) {
          goto LABEL_80;
        }
        id v60 = v9;
        uint64_t v50 = *(unsigned __int16 *)(v49 + 56);
        HIDWORD(v58) = *(unsigned __int16 *)(v49 + 58);
        uint64_t v52 = *(unsigned int *)(v49 + 60);
        uint64_t v51 = *(unsigned int *)(v49 + 64);
        int v53 = *(_DWORD *)(v49 + 68);
        uint64_t v54 = *(void *)(v49 + 72);
        id v44 = *(id *)(v49 + 80);
        LODWORD(v58) = v53;
        (*(void (**)(void, void, id, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(**(void **)(a1 + 120) + 80LL))( *(void *)(a1 + 120),  0LL,  v44,  v50,  v54,  v52,  HIDWORD(v58),  v51,  v58);
        sub_10039896C((uint64_t **)(a1 + 416), (uint64_t *)v49);
        uint64_t v9 = v60;
      }

LABEL_80:
      if (*(int *)(a1 + 344) >= 1)
      {
        if (qword_1008D67C8 != -1) {
          dispatch_once(&qword_1008D67C8, &stru_100894590);
        }
        sub_1002821A8((uint64_t)off_1008D67C0, *(void **)(a1 + 88), 1LL);
      }

      sub_1003989A4(a1, v71);
      xpc_release(xdict);
      if (!a3)
      {
        int v64 = 0;
        int v65 = 0;
        unsigned __int16 v63 = 0;
        if (qword_1008D5F10 != -1) {
          dispatch_once(&qword_1008D5F10, &stru_100894610);
        }
        std::string v55 = off_1008D5F08;
        sub_100241F90(buf, v71);
        if (!sub_1005B12DC((uint64_t)v55, buf, (_WORD *)&v65 + 1, &v65, (_WORD *)&v64 + 1, &v64, &v63))
        {
          uint64_t v56 = *(void *)(a1 + 120);
          BOOL v57 = v61;
          if (!v56) {
            BOOL v57 = 0;
          }
          if (v57) {
            (*(void (**)(uint64_t, void, void *, void, void, void))(*(void *)v56 + 216LL))( v56,  0LL,  v71,  HIWORD(v65),  (unsigned __int16)v65,  v63);
          }
        }
      }

      id v5 = v71;
      goto LABEL_93;
    }

    uint64_t v11 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 88);
      uint64_t v13 = *(void *)(a1 + 104);
      *(_DWORD *)std::string buf = 138412802;
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&_BYTE buf[12] = 2112;
      *(void *)&buf[14] = v13;
      *(_WORD *)&_BYTE buf[22] = 2112;
      *(void *)&_BYTE buf[24] = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  buf,  0x20u);
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
      sub_100675D80();
    }
    id v5 = 0LL;
  }

void sub_1003988A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_10039896C(uint64_t **a1, uint64_t *a2)
{
  id v3 = sub_1001FDBCC(a1, a2);
  sub_1003A0E44((uint64_t)(a2 + 4));
  operator delete(a2);
  return v3;
}

void sub_1003989A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 368);
  if (v4)
  {
    id v7 = v3;
    sub_1002E6188(v4, v3);
    id v5 = sub_1002E5F14(*(void *)(a1 + 368));
    id v3 = v7;
    if (!v5)
    {
      uint64_t v6 = *(void *)(a1 + 368);
      if (v6)
      {
        (*(void (**)(uint64_t, id))(*(void *)v6 + 8LL))(v6, v7);
        id v3 = v7;
      }

      *(void *)(a1 + 368) = 0LL;
    }
  }
}

void sub_100398A0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100398A20(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 348))
  {
    xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a3);
    xpc_dictionary_set_uint64(v7, "kCBScanOptionTotalRXTimeMS", a4);
    uint64_t v8 = sub_10043E46C(v7);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    sub_10038F4BC((void *)a1, 133LL, v9);

    xpc_release(v7);
    *(_BYTE *)(a1 + 348) = 0;
  }

void sub_100398ABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100398ACC(uint64_t a1, void *a2)
{
  id v31 = a2;
  uint64_t v32 = a1;
  BOOL v37 = 0LL;
  v38[0] = 0LL;
  uint64_t v3 = a1 + 280;
  v38[1] = 0LL;
  sub_1003A1438((uint64_t *)&v37, a1 + 280);
  uint64_t v4 = v37;
  if (v37 != (uint64_t *)v38)
  {
    do
    {
      id v5 = (void **)(v4 + 4);
      uint64_t v6 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
      {
        xpc_object_t v7 = *v5;
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "notifyFindMyDevicesUpdated checking device %{public}@",  (uint8_t *)&buf,  0xCu);
      }

      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_100894630);
      }
      sub_1005D73C8((uint64_t)off_1008D5F28, *v5, 2u, (uint64_t)&buf);
      uint64_t v8 = v41;
      sub_10023BF24((uint64_t)&buf, *((void **)&buf + 1));
      uint64_t v9 = (os_log_s *)qword_1008F7628;
      BOOL v10 = os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO);
      if (v8)
      {
        if (v10)
        {
          uint64_t v11 = *v5;
          LODWORD(buf) = 138543362;
          *(void *)((char *)&buf + 4) = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "notifyFindMyDevicesUpdated Device %{public}@ is FindMy and now has valid keys, trying to connect again",  (uint8_t *)&buf,  0xCu);
        }

        *(void *)&__int128 buf = v4 + 4;
        uint64_t v12 = sub_1003A1170(&v37, (unint64_t *)v4 + 4, (uint64_t)&unk_1006C2518, (id **)&buf);
        id v13 = (id)v12[5];
        unint64_t v14 = v12[6];
        sub_1003A12BC(v3, (unint64_t *)v4 + 4);
        sub_100391320(v32, v14, *v5, v13);
      }

      else if (v10)
      {
        unsigned int v15 = *v5;
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "notifyFindMyDevicesUpdated Device %{public}@ is FindMy and still doesnt have valid keys",  (uint8_t *)&buf,  0xCu);
      }

      unsigned int v16 = (uint64_t *)v4[1];
      if (v16)
      {
        do
        {
          int64_t v17 = v16;
          unsigned int v16 = (uint64_t *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          int64_t v17 = (uint64_t *)v4[2];
          BOOL v18 = *v17 == (void)v4;
          uint64_t v4 = v17;
        }

        while (!v18);
      }

      uint64_t v4 = v17;
    }

    while (v17 != (uint64_t *)v38);
  }

  int v19 = *(unsigned __int8 *)(v32 + 350);
  if (*(_BYTE *)(v32 + 350))
  {
    BOOL v20 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "notifyFindMyDevicesUpdated",  (uint8_t *)&buf,  2u);
    }

    uint64_t v21 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    id v22 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    id v23 = v31;
    id v24 = [v23 countByEnumeratingWithState:&v33 objects:v39 count:16];
    if (v24)
    {
      uint64_t v25 = *(void *)v34;
      do
      {
        for (uint64_t i = 0LL; i != v24; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v34 != v25) {
            objc_enumerationMutation(v23);
          }
          xpc_object_t v27 = sub_1004DEC38(*(void **)(*((void *)&v33 + 1) + 8LL * (void)i), 0, 1);
          uint64_t v28 = sub_10043E46C(v27);
          uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
          -[NSMutableArray addObject:](v22, "addObject:", v29);

          xpc_release(v27);
        }

        id v24 = [v23 countByEnumeratingWithState:&v33 objects:v39 count:16];
      }

      while (v24);
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v21,  "setObject:forKeyedSubscript:",  v22,  @"kCBMsgArgDevices");
    sub_10038F4BC((void *)v32, 135LL, v21);
  }

  sub_1003A0DAC((uint64_t)&v37, v38[0]);

  return v19 != 0;
}

void sub_100398EB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, void *a22)
{
  sub_1003A0DAC((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

void sub_100398F38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  xpc_object_t v7 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 88);
    int v10 = 138543874;
    uint64_t v11 = v8;
    __int16 v12 = 1024;
    int v13 = a3;
    __int16 v14 = 2048;
    uint64_t v15 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Scan ended for bundle %{public}@ result:%d totalRXTimeMS:%llu",  (uint8_t *)&v10,  0x1Cu);
  }

  *(_BYTE *)(a1 + 272) = 0;
  [*(id *)(a1 + 312) removeAllObjects];
  sub_100398A20(a1, v9, a3, a4);
}

BOOL sub_100399020(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  if ((sub_1005D79C0((uint64_t)off_1008D5F28, v3, *(void **)(a1 + 88), *(void **)(a1 + 104)) & 1) != 0)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 232) objectForKeyedSubscript:v3]);
    if (v4) {
      BOOL v5 = 1LL;
    }
    else {
      BOOL v5 = *(_BYTE *)(a1 + 273) != 0;
    }
  }

  else
  {
    uint64_t v6 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 88);
      uint64_t v9 = *(void *)(a1 + 104);
      int v10 = 138412802;
      uint64_t v11 = v8;
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      id v15 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "App %@ for user %@ is not allowed to access %@",  (uint8_t *)&v10,  0x20u);
    }

    BOOL v5 = 0LL;
  }

  return v5;
}

void sub_100399170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10039918C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 264) containsObject:a2];
}

void sub_100399198(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  uint64_t v6 = *(void **)(a1 + 264);
  if ((a3 & 1) != 0) {
    [v6 addObject:v5];
  }
  else {
    [v6 removeObject:v5];
  }
  xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
  *(void *)uuid = 0LL;
  uint64_t v32 = 0LL;
  [v5 getUUIDBytes:uuid];
  uint64_t v8 = *(void *)(a1 + 120);
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  uint64_t v9 = off_1008D5F08;
  sub_100241F90(__p, v5);
  BOOL v10 = sub_100595874((uint64_t)v9, __p);
  xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", uuid);
  if (v10)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    sub_1005CC0D4((uint64_t)off_1008D5F28, v5, (uint64_t)__p);
    if (v30 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = *(const char **)__p;
    }
    xpc_dictionary_set_string(v7, "kCBMsgArgName", v11);
    if (v30 < 0) {
      operator delete(*(void **)__p);
    }
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    __int16 v12 = off_1008D5F28;
    sub_10002418C(v27, "ANCSAuthorized");
    char v13 = sub_1005CE5A8((uint64_t)v12, v5, (uint64_t)v27);
    xpc_dictionary_set_BOOL(v7, "kCBMsgArgAncsAuthorization", v13);
    if (v28 < 0) {
      operator delete(v27[0]);
    }
  }

  else
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    uint64_t v14 = sub_1005CC198((uint64_t)off_1008D5F28, v5, 0);
    if (!v14 || (v14 & 0xFF000000000000LL) != 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
        sub_100675E38();
      }
    }

    else
    {
      v26[0] = BYTE5(v14);
      v26[1] = BYTE4(v14);
      void v26[2] = BYTE3(v14);
      v26[3] = BYTE2(v14);
      v26[4] = BYTE1(v14);
      void v26[5] = v14;
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_1008946B0);
      }
      id v15 = sub_1003FFEB0(off_1008D5F48, (uint64_t)v26, 0);
      uint64_t v16 = (uint64_t)v15;
      if (v15)
      {
        sub_1003D01A0((uint64_t)v15, (uint64_t)__p);
        if (v30 >= 0) {
          int64_t v17 = __p;
        }
        else {
          int64_t v17 = *(const char **)__p;
        }
        xpc_dictionary_set_string(v7, "kCBMsgArgName", v17);
        if (v30 < 0) {
          operator delete(*(void **)__p);
        }
        *(_DWORD *)std::string __p = 0;
        int64_t value = 0LL;
        int v24 = 0;
        if (sub_1003D55EC(v16, __p, (_DWORD *)&value + 1, &value, &v24))
        {
          xpc_dictionary_set_int64(v7, "kCBMsgArgPID", value);
          xpc_dictionary_set_int64(v7, "kCBMsgArgVID", HIDWORD(value));
        }
      }

      else
      {
        BOOL v18 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string __p = 138543362;
          *(void *)&__p[4] = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Could not find a classic device object for %{public}@",  __p,  0xCu);
        }
      }
    }
  }

  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  int v19 = off_1008D5F08;
  sub_100241F90(__p, v5);
  unsigned int v20 = sub_10059A15C((uint64_t)v19, __p);
  xpc_dictionary_set_int64(v7, "kCBMsgArgConnectionRole", v20);
  if (qword_1008D9268 != -1) {
    dispatch_once(&qword_1008D9268, &stru_1008946F0);
  }
  unsigned int v21 = sub_10038798C(qword_1008D9260, v5);
  xpc_dictionary_set_int64(v7, "kCBMsgArgATTMTU", v21);
  if (a3)
  {
    if (v10) {
      int64_t v22 = 2LL;
    }
    else {
      int64_t v22 = 1LL;
    }
    xpc_dictionary_set_int64(v7, "kCBMsgArgConnectionTransport", v22);
  }

  xpc_dictionary_set_int64(v7, "kCBMsgArgConnectionEvent", a3);
  if (v8)
  {
    if (*(int *)(v8 - 64) >= 1)
    {
      if (qword_1008D5F30 != -1) {
        dispatch_once(&qword_1008D5F30, &stru_100894630);
      }
      BOOL v23 = sub_1005D4EDC((uint64_t)off_1008D5F28, v5);
      xpc_dictionary_set_int64(v7, "kCBMsgArgVisibleInSettings", !v23);
    }

    sub_10043F1F4(v8 - 144, 94LL, v7, 1);
  }

  else
  {
    xpc_release(v7);
  }

  if (*(_DWORD *)(a1 + 344))
  {
    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_100894590);
    }
    sub_1002821A8((uint64_t)off_1008D67C0, *(void **)(a1 + 88), 1LL);
  }
}

void sub_1003996FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10039976C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  --*(_DWORD *)(a1 + 344);
  uint64_t v8 = *(void *)(a1 + 120);
  if (v8 && *(int *)(v8 - 64) >= 1)
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    BOOL v9 = !sub_1005D4EDC((uint64_t)off_1008D5F28, v7);
  }

  else
  {
    if ((_DWORD)a3 == 182) {
      a3 = 1LL;
    }
    else {
      a3 = a3;
    }
    BOOL v9 = 1LL;
  }

  uint64_t v18 = 0LL;
  sub_1000B0740((_DWORD *)&v18 + 1, (__darwin_suseconds_t *)&v18);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  uint64_t v10 = sub_1005CC478((uint64_t)off_1008D5F28, v7);
  if (v10) {
    double v11 = (double)((1000 * HIDWORD(v18) - (int)v10 + (int)v18 / 1000) / 0x3E8u);
  }
  else {
    double v11 = 0.0;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  v20[0] = v7;
  v19[0] = @"kCBMsgArgDeviceUUID";
  v19[1] = @"kCBMsgArgResult";
  char v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
  v20[1] = v13;
  __int128 v19[2] = @"kCBMsgArgVisibleInSettings";
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v9));
  void v20[2] = v14;
  v19[3] = @"kCBDisconnectInfoTimestamp";
  id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", Current - v11));
  v20[3] = v15;
  v19[4] = @"kCBDisconnectInfoIsReconnecting";
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a4));
  v20[4] = v16;
  int64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v20,  v19,  5LL));

  if (sub_10038F4BC((void *)a1, 87LL, v17)) {
    (*(void (**)(void, void, id, uint64_t))(**(void **)(a1 + 120) + 16LL))( *(void *)(a1 + 120),  0LL,  v7,  a3);
  }
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  sub_1005D491C((uint64_t)off_1008D5F28, v7, 0);
  if (!*(_DWORD *)(a1 + 344))
  {
    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_100894590);
    }
    sub_1002821A8((uint64_t)off_1008D67C0, *(void **)(a1 + 88), 0LL);
  }

  sub_1003989A4(a1, v7);
}

void sub_100399A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100399AE0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)
    || !*(void *)(a1 + 96)
    || !(*(unsigned int (**)(uint64_t))(*(void *)a1 + 40LL))(a1))
  {
    return 0LL;
  }

  uint64_t v2 = -[NSKeyedArchiver initRequiringSecureCoding:]( objc_alloc(&OBJC_CLASS___NSKeyedArchiver),  "initRequiringSecureCoding:",  1LL);
  -[NSKeyedArchiver encodeObject:forKey:](v2, "encodeObject:forKey:", *(void *)(a1 + 88), @"bundleIdentifier");
  -[NSKeyedArchiver encodeObject:forKey:](v2, "encodeObject:forKey:", *(void *)(a1 + 96), @"restoreIdentifier");
  -[NSKeyedArchiver encodeObject:forKey:](v2, "encodeObject:forKey:", *(void *)(a1 + 312), @"servicesToScan");
  -[NSKeyedArchiver encodeBool:forKey:](v2, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 272), @"isScanning");
  -[NSKeyedArchiver encodeBool:forKey:]( v2,  "encodeBool:forKey:",  *(unsigned __int8 *)(a1 + 274),  @"isContactTracingScan");
  id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v4 = [*(id *)(a1 + 304) copy];
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v5 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v19 objects:v34 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v20;
    do
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v7) {
          objc_enumerationMutation(v5);
        }
        BOOL v9 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        *(void *)__int128 buf = 0LL;
        *(void *)&uint8_t buf[8] = 0LL;
        objc_msgSend(v9, "getUUIDBytes:", buf, (void)v19);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", buf, 16LL));
        -[NSMutableSet addObject:](v3, "addObject:", v10);
      }

      id v6 = [v5 countByEnumeratingWithState:&v19 objects:v34 count:16];
    }

    while (v6);
  }

  -[NSKeyedArchiver encodeObject:forKey:](v2, "encodeObject:forKey:", v3, @"peripherals");
  double v11 = (os_log_s *)qword_1008F7680;
  if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 88);
    uint64_t v13 = *(void *)(a1 + 96);
    uint64_t v14 = *(void *)(a1 + 312);
    id v15 = "True";
    if (!*(_BYTE *)(a1 + 272)) {
      id v15 = "False";
    }
    if (*(_BYTE *)(a1 + 274)) {
      uint64_t v16 = "YES";
    }
    else {
      uint64_t v16 = "NO";
    }
    *(_DWORD *)__int128 buf = 138413826;
    *(void *)&uint8_t buf[4] = v2;
    *(_WORD *)&_BYTE buf[12] = 2114;
    *(void *)&buf[14] = v12;
    __int16 v24 = 2114;
    uint64_t v25 = v13;
    __int16 v26 = 2114;
    uint64_t v27 = v14;
    __int16 v28 = 2114;
    uint64_t v29 = v3;
    __int16 v30 = 2082;
    id v31 = v15;
    __int16 v32 = 2082;
    __int128 v33 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Saving Central restoration data: %@ - bundleId %{public}@, restorationId: %{public}@, servicesToScan: %{public}@, peripherals: %{public}@, isScanning: %{public}s, fIsContactTracingScanning:%{public}s",  buf,  0x48u);
  }

  int64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[NSKeyedArchiver encodedData](v2, "encodedData", (void)v19));

  return v17;
}

void sub_100399DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100399E20(uint64_t a1, void *a2)
{
  id v57 = a2;
  if (v57)
  {
    id v66 = 0LL;
    id v3 = -[NSKeyedUnarchiver initForReadingFromData:error:]( objc_alloc(&OBJC_CLASS___NSKeyedUnarchiver),  "initForReadingFromData:error:",  v57,  &v66);
    id v55 = v66;
    id v4 = (os_log_s *)qword_1008F7680;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        __int128 v68 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Restoring Central restoration data: %@",  buf,  0xCu);
      }

      uint64_t v56 = v3;
      id v5 = -[NSKeyedUnarchiver decodeObjectOfClass:forKey:]( v3,  "decodeObjectOfClass:forKey:",  objc_opt_class(&OBJC_CLASS___NSString),  @"bundleIdentifier");
      uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
      uint64_t v7 = *(void **)(a1 + 88);
      *(void *)(a1 + 88) = v6;

      id v8 = -[NSKeyedUnarchiver decodeObjectOfClass:forKey:]( v3,  "decodeObjectOfClass:forKey:",  objc_opt_class(&OBJC_CLASS___NSString),  @"restoreIdentifier");
      uint64_t v9 = objc_claimAutoreleasedReturnValue(v8);
      uint64_t v10 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = v9;

      if (*(void *)(a1 + 88) && *(void *)(a1 + 96))
      {
        v81[0] = objc_opt_class(&OBJC_CLASS___NSSet);
        v81[1] = objc_opt_class(&OBJC_CLASS___NSData);
        double v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v81, 2LL));
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v11));
        int v53 = (void *)objc_claimAutoreleasedReturnValue( -[NSKeyedUnarchiver decodeObjectOfClasses:forKey:]( v3,  "decodeObjectOfClasses:forKey:",  v12,  @"servicesToScan"));

        uint64_t v13 = v53;
        if (v53)
        {
          uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSSet);
          if ((objc_opt_isKindOfClass(v53, v14) & 1) != 0)
          {
            uint64_t v13 = v53;
          }

          else
          {
            if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_ERROR)) {
              sub_100675FD4();
            }

            uint64_t v13 = 0LL;
          }
        }

        __int128 v64 = 0u;
        __int128 v65 = 0u;
        __int128 v62 = 0u;
        __int128 v63 = 0u;
        id v16 = v13;
        id v17 = [v16 countByEnumeratingWithState:&v62 objects:v80 count:16];
        uint64_t v54 = v16;
        if (v17)
        {
          uint64_t v18 = *(void *)v63;
          while (2)
          {
            for (uint64_t i = 0LL; i != v17; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v63 != v18) {
                objc_enumerationMutation(v16);
              }
              uint64_t v20 = *(void *)(*((void *)&v62 + 1) + 8LL * (void)i);
              uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSData);
              if ((objc_opt_isKindOfClass(v20, v21) & 1) == 0)
              {
                if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_ERROR)) {
                  sub_100675FA8();
                }

                uint64_t v54 = 0LL;
                goto LABEL_32;
              }
            }

            id v17 = [v16 countByEnumeratingWithState:&v62 objects:v80 count:16];
            if (v17) {
              continue;
            }
            break;
          }

          uint64_t v54 = v16;
        }

void sub_10039A6E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
}

void sub_10039A7B4(uint64_t a1, unint64_t a2)
{
  if (*(_BYTE *)(a1 + 209))
  {
    *(_BYTE *)(a1 + 209) = 0;
    if ([*(id *)(a1 + 312) count])
    {
      __int16 v28 = operator new(0x188uLL);
      sub_100050070((uint64_t)v28);
      uint64_t v41 = 0LL;
      uint64_t v42 = 0LL;
      unint64_t v43 = 0LL;
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      __int128 v39 = 0u;
      __int128 v40 = 0u;
      id obj = *(id *)(a1 + 312);
      id v4 = [obj countByEnumeratingWithState:&v37 objects:v47 count:16];
      if (v4)
      {
        uint64_t v5 = *(void *)v38;
        do
        {
          for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v38 != v5) {
              objc_enumerationMutation(obj);
            }
            id v7 = *(id *)(*((void *)&v37 + 1) + 8LL * (void)i);
            sub_1006343C4( (uint64_t)&v45,  (int8x16_t *)[v7 bytes],  objc_msgSend(v7, "length"));
            id v8 = v42;
            if ((unint64_t)v42 >= v43)
            {
              unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v42 - (_BYTE *)v41) >> 2);
              unint64_t v12 = v11 + 1;
              if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL) {
                abort();
              }
              else {
                unint64_t v13 = v12;
              }
              if (v13) {
                uint64_t v14 = (char *)sub_100050420((uint64_t)&v43, v13);
              }
              else {
                uint64_t v14 = 0LL;
              }
              uint64_t v15 = &v14[20 * v11];
              __int128 v16 = v45;
              *((_DWORD *)v15 + 4) = v46;
              *(_OWORD *)uint64_t v15 = v16;
              uint64_t v18 = (__int128 *)v41;
              id v17 = (__int128 *)v42;
              __int128 v19 = v15;
              if (v42 != v41)
              {
                do
                {
                  __int128 v20 = *(__int128 *)((char *)v17 - 20);
                  *((_DWORD *)v19 - 1) = *((_DWORD *)v17 - 1);
                  *(_OWORD *)(v19 - 20) = v20;
                  v19 -= 20;
                  id v17 = (__int128 *)((char *)v17 - 20);
                }

                while (v17 != v18);
                id v17 = (__int128 *)v41;
              }

              uint64_t v10 = (__int128 *)(v15 + 20);
              uint64_t v41 = v19;
              uint64_t v42 = v15 + 20;
              unint64_t v43 = (unint64_t)&v14[20 * v13];
              if (v17) {
                operator delete(v17);
              }
            }

            else
            {
              __int128 v9 = v45;
              *((_DWORD *)v42 + 4) = v46;
              *(_OWORD *)id v8 = v9;
              uint64_t v10 = (__int128 *)(v8 + 20);
            }

            uint64_t v42 = (char *)v10;
          }

          id v4 = [obj countByEnumeratingWithState:&v37 objects:v47 count:16];
        }

        while (v4);
      }

      std::string __p = 0LL;
      __int128 v35 = 0LL;
      uint64_t v36 = 0LL;
      sub_100050EE8((char *)&__p, (__int128 *)v41, (__int128 *)v42, 0xCCCCCCCCCCCCCCCDLL * ((v42 - (_BYTE *)v41) >> 2));
      sub_100050224(v28 + 1, (__int128 *)__p, v35, 0xCCCCCCCCCCCCCCCDLL * (((char *)v35 - (_BYTE *)__p) >> 2));
      if (__p)
      {
        __int128 v35 = (__int128 *)__p;
        operator delete(__p);
      }

      if (*(_BYTE *)(a1 + 274)) {
        *((_BYTE *)v28 + 143) = 1;
      }
      sub_1003902A8(a1, a2, (uint64_t)v28);
      if (v41)
      {
        uint64_t v42 = (char *)v41;
        operator delete(v41);
      }
    }

    id v21 = [*(id *)(a1 + 304) copy];
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    id v22 = v21;
    id v23 = [v22 countByEnumeratingWithState:&v30 objects:v44 count:16];
    if (v23)
    {
      uint64_t v24 = *(void *)v31;
      do
      {
        for (uint64_t j = 0LL; j != v23; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v31 != v24) {
            objc_enumerationMutation(v22);
          }
          __int16 v26 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)j);
          uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[ConnectOptions alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:]( &OBJC_CLASS___ConnectOptions,  "alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:",  1LL,  1LL,  1LL,  0LL,  0LL));
          sub_100391320(a1, a2, v26, v27);
        }

        id v23 = [v22 countByEnumeratingWithState:&v30 objects:v44 count:16];
      }

      while (v23);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
  {
    sub_100676000();
  }

void sub_10039ABA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *a34, uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a34) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

id sub_10039AC34(uint64_t a1, unint64_t a2)
{
  id v4 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 88);
    *(_DWORD *)__int128 buf = 138543362;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Clear all state for session %{public}@",  buf,  0xCu);
  }

  sub_100393C90(a1);
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  id obj = *(id *)(a1 + 216);
  id v6 = [obj countByEnumeratingWithState:&v40 objects:v49 count:16];
  if (v6)
  {
    uint64_t v37 = *(void *)v41;
    *(void *)&__int128 v7 = 138543618LL;
    __int128 v35 = v7;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v41 != v37) {
          objc_enumerationMutation(obj);
        }
        __int128 v9 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)v8);
        if (*(_BYTE *)(a1 + 44))
        {
          if (qword_1008D92A8 != -1) {
            dispatch_once(&qword_1008D92A8, &stru_1008945B0);
          }
          uint64_t v10 = qword_1008D92A0;
          unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 216), "objectForKeyedSubscript:", v9, v35));
          sub_10064C568(v10, a2, v9, v11);
        }

        unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 216), "objectForKeyedSubscript:", v9, v35));
        unsigned int v13 = [v12 isLatencyCritical];

        if (v13) {
          sub_100393C90(a1);
        }
        __int128 v47 = 0u;
        __int128 v48 = 0u;
        *(_OWORD *)__int128 buf = 0u;
        sub_10002418C(__p, (char *)[*(id *)(a1 + 88) UTF8String]);
        sub_10040CF4C((uint64_t)buf, (__int128 *)__p, *(_BYTE *)(a1 + 129), v9);
        if (qword_1008D9298 != -1) {
          dispatch_once(&qword_1008D9298, &stru_1008945F0);
        }
        sub_10040D074(qword_1008D9290, (uint64_t)buf);
        uint64_t v14 = (void (***)(void, _BYTE *, void, void *))sub_1002E9074();
        sub_100494958(a2, (uint64_t)__p);
        if ((v45 & 0x80u) == 0) {
          uint64_t v15 = __p;
        }
        else {
          uint64_t v15 = *(_BYTE **)__p;
        }
        (**v14)(v14, v15, 0LL, v9);
        sub_100494958(a2, (uint64_t)__p);
        uint64_t v16 = v45;
        unsigned __int8 v17 = v45;
        if ((v45 & 0x80u) == 0)
        {
          uint64_t v18 = __p;
        }

        else
        {
          uint64_t v16 = *(void *)&__p[8];
          uint64_t v18 = *(_BYTE **)__p;
        }

        if (v16 < 20)
        {
          BOOL v19 = 0;
          goto LABEL_40;
        }

        unint64_t v20 = a2;
        id v21 = &v18[v16];
        id v22 = v18;
        while (1)
        {
          id v23 = memchr(v22, 99, v16 - 19);
          if (!v23)
          {
LABEL_38:
            BOOL v19 = 0;
LABEL_39:
            a2 = v20;
            goto LABEL_40;
          }

          BOOL v24 = *v23 == 0x6C7070612E6D6F63LL && v23[1] == 0x6F7465756C622E65LL;
          if (v24 && *((_DWORD *)v23 + 4) == 1684567151) {
            break;
          }
          id v22 = (char *)v23 + 1;
          uint64_t v16 = v21 - (_BYTE *)v22;
          if (v21 - (_BYTE *)v22 < 20) {
            goto LABEL_38;
          }
        }

        BOOL v19 = 0;
        if (v23 == (void *)v21) {
          goto LABEL_39;
        }
        a2 = v20;
        if ((char *)v23 - v18 != -1)
        {
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_100894630);
          }
          sub_1005CF060((uint64_t)off_1008D5F28, v9, (uint64_t)v38);
          unint64_t v32 = (unint64_t)v38[1];
          if ((v39 & 0x80u) == 0) {
            unint64_t v32 = v39;
          }
          BOOL v19 = v32 != 0;
          unsigned __int8 v17 = v45;
        }

void sub_10039B20C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, char a32)
{
}

id sub_10039B2B0(uint64_t a1, unint64_t a2)
{
  id v3 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Clear for system sleep for central session %{public}@",  (uint8_t *)&buf,  0xCu);
  }

  sub_100393C90(a1);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 216) allKeys]);
  id v6 = [v5 countByEnumeratingWithState:&v14 objects:v21 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v15;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v5);
        }
        __int128 v9 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)v8);
        if (qword_1008D5F10 != -1) {
          dispatch_once(&qword_1008D5F10, &stru_100894610);
        }
        uint64_t v10 = off_1008D5F08;
        sub_100241F90(v20, v9);
        if (sub_100595874((uint64_t)v10, v20))
        {
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_100894630);
          }
          sub_1005CF060((uint64_t)off_1008D5F28, v9, (uint64_t)&buf);
          if ((v19 & 0x80u) == 0) {
            uint64_t v11 = v19;
          }
          else {
            uint64_t v11 = *((void *)&buf + 1);
          }
          if ((char)v19 < 0)
          {
            operator delete((void *)buf);
            if (!v11) {
              goto LABEL_21;
            }
LABEL_20:
            [*(id *)(a1 + 216) removeObjectForKey:v9];
            goto LABEL_21;
          }

          if (v11) {
            goto LABEL_20;
          }
        }

void sub_10039B524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10039B54C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  v12[0] = v7;
  v11[0] = @"kCBMsgArgDeviceUUID";
  v11[1] = @"kCBMsgArgServiceStartHandle";
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", a3));
  v12[1] = v8;
  _OWORD v11[2] = @"kCBMsgArgServiceEndHandle";
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", a4));
  void v12[2] = v9;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v12,  v11,  3LL));

  sub_10038F4BC(a1, 179LL, v10);
}

void sub_10039B654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10039B690(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = a2;
  uint64_t v12 = sub_10056AAF0(a4);
  unsigned int v13 = +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v12, sub_10056AAD8(a4));
  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v19[0] = @"kCBMsgArgResult";
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a6));
  v20[0] = v15;
  v20[1] = v11;
  v19[1] = @"kCBMsgArgDeviceUUID";
  __int128 v19[2] = @"kCBMsgArgCharacteristicHandle";
  __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", a3));
  void v20[2] = v16;
  v20[3] = v14;
  v19[3] = @"kCBMsgArgData";
  v19[4] = @"kCBMsgArgTimestamp";
  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a5));
  v20[4] = v17;
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v20,  v19,  5LL));

  sub_10038F4BC(a1, 196LL, v18);
}

void sub_10039B80C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10039B860(uint64_t a1, unsigned int a2)
{
  *(_BYTE *)(a1 + 129) = a2;
  id result = *(id *)(a1 + 368);
  if (result) {
    return sub_1002E5AB8((uint64_t)result, (a2 >> 4) & 1);
  }
  return result;
}

uint64_t sub_10039B878(uint64_t result, char a2)
{
  *(_BYTE *)(result + 129) = a2;
  return result;
}

uint64_t sub_10039B880(uint64_t result, char a2)
{
  *(_BYTE *)(result + 186) = a2;
  return result;
}

uint64_t sub_10039B888(uint64_t result, char a2)
{
  *(_BYTE *)(result + 186) = a2;
  return result;
}

NSMutableString *sub_10039B890(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
  id v3 = sub_10038FA98(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  -[NSMutableString appendString:](v2, "appendString:", v4);

  uint64_t v5 = *(void *)(a1 + 368);
  if (v5)
  {
    id v6 = sub_1002E6270(v5);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    -[NSMutableString appendFormat:](v2, "appendFormat:", @"Pending Catt Connections: %@\n", v7);
  }

  return v2;
}

void sub_10039B91C(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_10039B948(uint64_t a1, void *a2, __int16 a3, uint64_t a4, int a5, __int16 a6, int a7, int a8)
{
  id v15 = a2;
  id v16 = objc_claimAutoreleasedReturnValue([v15 UUIDString]);
  sub_10002418C(__p, (char *)[v16 UTF8String]);
  id v21 = __p;
  __int128 v17 = sub_1003A1604((uint64_t **)(a1 + 416), (const void **)__p, (uint64_t)&unk_1006C2518, (_OWORD **)&v21);
  *((_WORD *)v17 + 28) = a3;
  *((_WORD *)v17 + 29) = a6;
  *((_DWORD *)v17 + 15) = a5;
  *((_DWORD *)v17 + 16) = a7;
  *((_DWORD *)v17 + 17) = a8;
  *((void *)v17 + 9) = a4;
  objc_storeStrong((id *)v17 + 10, a2);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10039BA3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10039BA74(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8 = a3;
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894610);
  }
  uint64_t v9 = sub_10059DFDC((uint64_t)off_1008D5F08, a2, v8, a4, a5);

  return v9;
}

void sub_10039BAF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10039BB08(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  uint64_t v9 = sub_1002E6E9C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 2736LL))(v9))
  {
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    int v10 = sub_1005D95DC((uint64_t)off_1008D5F28, v7);
    id v11 = *(void **)(a1 + 360);
    if (a3)
    {
      if ([v11 containsObject:v7])
      {
        uint64_t v12 = 17LL;
        goto LABEL_23;
      }

      if (v10)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
          sub_100676188();
        }
LABEL_22:
        uint64_t v12 = 12LL;
        goto LABEL_23;
      }

      if ((unint64_t)[v8 length] < 2)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
          sub_10067615C();
        }
      }

      else
      {
        id v24 = v8;
        uint64_t v25 = [v24 bytes];
        int v26 = *v25;
        if (*v25)
        {
          if (qword_1008D5F30 != -1) {
            dispatch_once(&qword_1008D5F30, &stru_100894630);
          }
          uint64_t v27 = sub_1005D9458((uint64_t)off_1008D5F28, 3);
          __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
          if ((unint64_t)[v28 count] > 1)
          {
            __int128 v38 = (os_log_s *)qword_1008F7628;
            if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
              sub_1006760F0(v38, v39, v40, v41, v42, v43, v44, v45);
            }
            uint64_t v12 = 126LL;
          }

          else
          {
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_100894630);
            }
            uint64_t v29 = off_1008D5F28;
            __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "subdataWithRange:", 1, (char *)objc_msgSend(v24, "length") - 1));
            uint64_t v12 = sub_1005D9384((uint64_t)v29, v7, v26, v30, 3);

            if ((_DWORD)v12)
            {
              uint64_t v31 = (os_log_s *)qword_1008F7628;
              if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
                sub_10067608C(v12, v31, v32, v33, v34, v35, v36, v37);
              }
            }

            else
            {
              [*(id *)(a1 + 360) addObject:v7];
              uint64_t v12 = 0LL;
            }
          }

          goto LABEL_23;
        }

        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
          sub_100676060();
        }
      }

      uint64_t v12 = 3LL;
      goto LABEL_23;
    }

    if (![v11 containsObject:v7])
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
        sub_100676218();
      }
      goto LABEL_22;
    }

    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100894630);
    }
    uint64_t v12 = sub_1005D9384((uint64_t)off_1008D5F28, v7, 0, 0LL, 0);
    if ((_DWORD)v12)
    {
      unsigned int v13 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
        sub_1006761B4(v12, v13, v14, v15, v16, v17, v18, v19);
      }
    }

    [*(id *)(a1 + 360) removeObject:v7];
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
      sub_100676244();
    }
    uint64_t v12 = 11LL;
  }

void sub_10039BED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10039BF10(void *a1, void *a2)
{
  id v3 = a2;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEBUG)) {
    sub_100676270();
  }
  if (v3)
  {
    uint64_t v4 = a1[15];
    if (v4)
    {
      if (*(int *)(v4 - 64) >= 1)
      {
        id v6 = @"kCBMsgArgDeviceUUID";
        id v7 = v3;
        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));
        sub_10038F4BC(a1, 136LL, v5);
      }
    }
  }
}

void sub_10039BFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10039C01C(void *a1)
{
  uint64_t v2 = sub_10038F13C((uint64_t)a1);
  *(void *)uint64_t v2 = off_100894470;
  *(void *)(v2 + 216) = 0LL;
  *(_WORD *)(v2 + 224) = 0;
  *(_BYTE *)(v2 + 226) = 0;
  *(_OWORD *)(v2 + 232) = 0u;
  id v3 = (void **)(v2 + 232);
  *(_OWORD *)(v2 + 248) = 0u;
  *(_BYTE *)(v2 + 264) = 0;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  uint64_t v5 = (void *)a1[30];
  a1[30] = v4;

  id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v7 = *v3;
  *id v3 = v6;

  id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v9 = (void *)a1[27];
  a1[27] = v8;

  int v10 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v11 = (void *)a1[32];
  a1[32] = v10;

  uint64_t v12 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  unsigned int v13 = (void *)a1[31];
  a1[31] = v12;

  return a1;
}

void sub_10039C0E0(_Unwind_Exception *a1)
{
  sub_10038F2A0((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10039C120(uint64_t a1)
{
  *(void *)a1 = off_100894470;
  uint64_t v2 = *(void **)(a1 + 240);
  *(void *)(a1 + 240) = 0LL;

  id v3 = *(void **)(a1 + 232);
  *(void *)(a1 + 232) = 0LL;

  uint64_t v4 = *(void **)(a1 + 216);
  *(void *)(a1 + 216) = 0LL;

  uint64_t v5 = *(void **)(a1 + 256);
  *(void *)(a1 + 256) = 0LL;

  id v6 = *(void **)(a1 + 248);
  *(void *)(a1 + 248) = 0LL;

  return sub_10038F2A0(a1);
}

void sub_10039C1B4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10039C120(a1);
  operator delete(v1);
}

uint64_t sub_10039C1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned __int16 *)(a3 + 16);
  int v7 = *(unsigned __int16 *)(a1 + 224);
  *(_WORD *)(a3 + 18) = v7;
  id v8 = *(void **)(a1 + 216);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v6));
  int v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v9]);

  if (v10)
  {
    id v11 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
    {
      sub_100494958(a2, (uint64_t)&v36);
      if (v38 >= 0) {
        uint64_t v32 = &v36;
      }
      else {
        uint64_t v32 = v36;
      }
      *(_DWORD *)uint64_t v43 = 67109378;
      *(_DWORD *)&v43[4] = v6;
      LOWORD(v44) = 2082;
      *(void *)((char *)&v44 + 2) = v32;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Already published service ID 0x%x for session %{public}s",  v43,  0x12u);
      if (SHIBYTE(v38) < 0) {
        operator delete(v36);
      }
    }

    return 1LL;
  }

  else
  {
    uint64_t v36 = 0LL;
    uint64_t v37 = 0LL;
    uint64_t v38 = 0LL;
    sub_100240540(&v36, a3 + 104);
    int v13 = v7 << 16;
    uint64_t v14 = (uint64_t *)v36;
    uint64_t v15 = v37;
    while (v14 != v15)
    {
      uint64_t v16 = *v14++;
      *(_DWORD *)(v16 + 104) = *(unsigned __int16 *)(v16 + 104) | v13;
    }

    *(void *)uint64_t v43 = 0LL;
    __int128 v44 = 0uLL;
    sub_100240540(v43, a3 + 136);
    uint64_t v17 = *(char **)v43;
    if (*(void *)v43 == (void)v44)
    {
      uint64_t v18 = 0LL;
    }

    else
    {
      uint64_t v18 = 0LL;
      do
      {
        uint64_t v19 = *(void *)v17;
        int v20 = *(unsigned __int16 *)(*(void *)v17 + 16LL) | v13;
        *(_DWORD *)(v19 + 16) = v20;
        *(_DWORD *)(*(void *)(v19 + 96) + 16LL) = v20;
        sub_100240540(&__p, v19 + 104);
        if (v18) {
          operator delete(v18);
        }
        uint64_t v18 = __p;
        uint64_t v21 = v34;
        uint64_t v22 = (uint64_t *)__p;
        if (__p != v34)
        {
          do
          {
            uint64_t v23 = *v22++;
            *(_DWORD *)(v23 + 16) = *(unsigned __int16 *)(v23 + 16) | v13;
          }

          while (v22 != v21);
        }

        v17 += 8;
      }

      while (v17 != (char *)v44);
    }

    id v24 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
    {
      sub_100494958(a2, (uint64_t)&__p);
      uint64_t v25 = v35 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)__int128 buf = 67109378;
      int v40 = v6;
      __int16 v41 = 2082;
      uint64_t v42 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "Adding service ID 0x%x for session %{public}s",  buf,  0x12u);
      if (v35 < 0) {
        operator delete(__p);
      }
    }

    if (qword_1008D9268 != -1) {
      dispatch_once(&qword_1008D9268, &stru_1008946F0);
    }
    uint64_t v12 = sub_1003832E0(qword_1008D9260, a3, 0);
    if (!(_DWORD)v12)
    {
      int v26 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
      {
        sub_100494958(a2, (uint64_t)&__p);
        uint64_t v27 = v35 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)__int128 buf = 67109378;
        int v40 = v6;
        __int16 v41 = 2082;
        uint64_t v42 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "Successfully added service ID 0x%x for session %{public}s",  buf,  0x12u);
        if (v35 < 0) {
          operator delete(__p);
        }
      }

      if (qword_1008D9268 != -1) {
        dispatch_once(&qword_1008D9268, &stru_1008946F0);
      }
      sub_1003843F0(qword_1008D9260);
      __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      uint64_t v29 = *(void **)(a1 + 216);
      __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", v6));
      [v29 setObject:v28 forKeyedSubscript:v30];
    }

    if (v18) {
      operator delete(v18);
    }
    if (*(void *)v43)
    {
      *(void *)&__int128 v44 = *(void *)v43;
      operator delete(*(void **)v43);
    }

    if (v36)
    {
      uint64_t v37 = (uint64_t *)v36;
      operator delete(v36);
    }
  }

  return v12;
}

void sub_10039C5E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (v20) {
    operator delete(v20);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10039C658(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v6 = *(void **)(a1 + 216);
  int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", a3));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:v7]);

  uint64_t v9 = (os_log_s *)qword_1008F7628;
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
    {
      sub_100494958(a2, (uint64_t)__p);
      int v10 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__int128 buf = 67109378;
      int v21 = a3;
      __int16 v22 = 2082;
      uint64_t v23 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Removing service ID 0x%x for session %{public}s",  buf,  0x12u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }

    int v11 = *(unsigned __int16 *)(a1 + 224) << 16;
    if (qword_1008D9268 != -1) {
      dispatch_once(&qword_1008D9268, &stru_1008946F0);
    }
    LODWORD(__p[0]) = v11 | a3;
    uint64_t v12 = sub_1003853F8(qword_1008D9260, (int *)__p);
    if (!(_DWORD)v12)
    {
      int v13 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
      {
        sub_100494958(a2, (uint64_t)__p);
        uint64_t v14 = v19 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)__int128 buf = 67109378;
        int v21 = a3;
        __int16 v22 = 2082;
        uint64_t v23 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Successfully removed service ID 0x%x for session %{public}s",  buf,  0x12u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }

      if (qword_1008D9268 != -1) {
        dispatch_once(&qword_1008D9268, &stru_1008946F0);
      }
      sub_100386208(qword_1008D9260);
      if (qword_1008D9268 != -1) {
        dispatch_once(&qword_1008D9268, &stru_1008946F0);
      }
      sub_1003843F0(qword_1008D9260);
      uint64_t v15 = *(void **)(a1 + 216);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", a3));
      [v15 removeObjectForKey:v16];

      uint64_t v12 = 0LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR))
    {
      sub_100494958(a2, (uint64_t)__p);
      sub_1006762EC(a3, (uint64_t *)__p, buf, v9);
    }

    uint64_t v12 = 1010LL;
  }

  return v12;
}

void sub_10039C930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10039C970(uint64_t a1, uint64_t a2)
{
  if ([*(id *)(a1 + 216) count])
  {
    int v4 = *(unsigned __int16 *)(a1 + 224);
    uint64_t v5 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
    {
      sub_100494958(a2, (uint64_t)__p);
      uint64_t v6 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v27 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Removing all services for session %{public}s",  buf,  0xCu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 216) allKeys]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v7 sortedArrayUsingSelector:"compare:"]);

    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v18 reverseObjectEnumerator]);
    uint64_t v17 = a2;
    id v9 = [v8 countByEnumeratingWithState:&v19 objects:v25 count:16];
    if (v9)
    {
      int v10 = v4 << 16;
      uint64_t v11 = *(void *)v20;
      do
      {
        uint64_t v12 = 0LL;
        do
        {
          if (*(void *)v20 != v11) {
            objc_enumerationMutation(v8);
          }
          int v13 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)v12);
          if (qword_1008D9268 != -1) {
            dispatch_once(&qword_1008D9268, &stru_1008946F0);
          }
          uint64_t v14 = qword_1008D9260;
          LODWORD(__p[0]) = v10 | [v13 unsignedShortValue];
          sub_1003853F8(v14, (int *)__p);
          uint64_t v12 = (char *)v12 + 1;
        }

        while (v9 != v12);
        id v9 = [v8 countByEnumeratingWithState:&v19 objects:v25 count:16];
      }

      while (v9);
    }

    [*(id *)(a1 + 216) removeAllObjects];
    uint64_t v15 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
    {
      sub_100494958(v17, (uint64_t)__p);
      uint64_t v16 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v27 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Successfully removed all services for session %{public}s",  buf,  0xCu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    if (qword_1008D9268 != -1) {
      dispatch_once(&qword_1008D9268, &stru_1008946F0);
    }
    sub_100386208(qword_1008D9260);
    if (qword_1008D9268 != -1) {
      dispatch_once(&qword_1008D9268, &stru_1008946F0);
    }
    sub_1003843F0(qword_1008D9260);
  }

void sub_10039CC74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t sub_10039CCBC(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  if (*(_BYTE *)(a1 + 128))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEBUG)) {
      sub_1006764DC();
    }
    uint64_t v7 = *(void *)(a1 + 120);
    if (qword_1008D92A8 != -1) {
      dispatch_once(&qword_1008D92A8, &stru_1008945B0);
    }
    if (sub_10064D4FC(qword_1008D92A0, 2uLL, *(void **)(a1 + 88))
      && !*(_DWORD *)(*(void *)(a3 + 8) + 440LL))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
        sub_10067647C();
      }
      return 348LL;
    }

    else
    {
LABEL_89:
      if (*(_BYTE *)(a1 + 226))
      {
        id v8 = (os_log_s *)qword_1008F7628;
        if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
          sub_1006763C8(a2, v8);
        }
        return 122LL;
      }

      else
      {
        [*(id *)(a1 + 232) removeAllObjects];
        uint64_t v10 = *(void *)(a3 + 8);
        uint64_t v50 = 0LL;
        uint64_t v51 = 0LL;
        uint64_t v49 = 0LL;
        sub_100050EE8( (char *)&v49,  *(__int128 **)(v10 + 88),  *(__int128 **)(v10 + 96),  0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v10 + 96) - *(void *)(v10 + 88)) >> 2));
        uint64_t v12 = (unsigned __int8 *)v49;
        uint64_t v11 = v50;
        if (v49 != v50)
        {
          do
          {
            v52[0] = 0LL;
            v52[1] = 0LL;
            int v13 = +[BTUUID UUIDWithBytes:length:]( &OBJC_CLASS___BTUUID,  "UUIDWithBytes:length:",  v52,  sub_10063443C(v12, v52));
            uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
            if (v14) {
              [*(id *)(a1 + 232) addObject:v14];
            }

            v12 += 20;
          }

          while (v12 != v11);
        }

        if (qword_1008D6288 != -1) {
          dispatch_once(&qword_1008D6288, &stru_100894710);
        }
        uint64_t v9 = sub_100572984((uint64_t)off_1008D6280, a2, a3, a4);
        if (!(_DWORD)v9)
        {
          uint64_t v15 = *(void **)(a3 + 8);
          uint64_t v16 = (__int128 *)v15[8];
          uint64_t v17 = (__int128 *)v15[9];
          if (v16 != v17)
          {
            do
            {
              v52[0] = 0LL;
              v52[1] = 0LL;
              LODWORD(v53[0]) = 0;
              __int128 v18 = *v16;
              LODWORD(v53[0]) = *((_DWORD *)v16 + 4);
              *(_OWORD *)uint64_t v52 = v18;
              __int128 v57 = 0uLL;
              unsigned int v19 = sub_10063443C((unsigned __int8 *)v52, &v57);
              if (v19 == 16 || v19 == 2)
              {
                __int128 v20 = *(void **)(a1 + 240);
                __int128 v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  &v57,  v19));
                [v20 addObject:v21];
              }

              uint64_t v16 = (__int128 *)((char *)v16 + 20);
            }

            while (v16 != v17);
            uint64_t v15 = *(void **)(a3 + 8);
          }

          __int128 v22 = (void *)v15[14];
          uint64_t v23 = v15 + 15;
          if (v22 != v15 + 15)
          {
            do
            {
              memset((char *)v53 + 4, 0, 20);
              LODWORD(v53[0]) = *((_DWORD *)v22 + 12);
              *(_OWORD *)uint64_t v52 = *((_OWORD *)v22 + 2);
              uint64_t v24 = v22[8];
              *((void *)&v53[0] + 1) = &off_10087FAA8;
              *(void *)&v53[1] = v24;
              if (v24) {
                sub_1002CD1E0(v24);
              }
              __int128 v57 = 0uLL;
              int v25 = sub_10063443C((unsigned __int8 *)v52, &v57);
              uint64_t v26 = sub_10056AAF0((uint64_t)v53 + 8);
              uint64_t v27 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v26,  sub_10056AAD8((uint64_t)v53 + 8));
              __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
              if (v25 == 2)
              {
                uint64_t v29 = *(void **)(a1 + 248);
                __int128 v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  &v57,  2LL));
                [v29 addObject:v30];

                [*(id *)(a1 + 248) addObject:v28];
              }

              *((void *)&v53[0] + 1) = &off_10087FAA8;
              if (*(void *)&v53[1]) {
                sub_1002CD254(*(unsigned int **)&v53[1]);
              }
              uint64_t v31 = (void *)v22[1];
              if (v31)
              {
                do
                {
                  uint64_t v32 = v31;
                  uint64_t v31 = (void *)*v31;
                }

                while (v31);
              }

              else
              {
                do
                {
                  uint64_t v32 = (void *)v22[2];
                  BOOL v33 = *v32 == (void)v22;
                  __int128 v22 = v32;
                }

                while (!v33);
              }

              __int128 v22 = v32;
            }

            while (v32 != v23);
          }

          *(_BYTE *)(a1 + 226) = 1;
          if (qword_1008D67C8 != -1) {
            dispatch_once(&qword_1008D67C8, &stru_100894590);
          }
          if (sub_100279BF8((uint64_t)off_1008D67C0, a2))
          {
            if (qword_1008D67C8 != -1) {
              dispatch_once(&qword_1008D67C8, &stru_100894590);
            }
            id v34 = sub_100279C54((uint64_t)off_1008D67C0, a2);
            char v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
            uint64_t v36 = v35;
            __int128 v57 = 0uLL;
            uint64_t v58 = 0LL;
            if (v35) {
              sub_10002418C(&v57, (char *)[v35 UTF8String]);
            }
            else {
              sub_10002418C(&v57, "");
            }
            if (qword_1008D67C8 != -1) {
              dispatch_once(&qword_1008D67C8, &stru_100894590);
            }
            id v37 = sub_100279CB8((uint64_t)off_1008D67C0, a2);
            uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(v37);

            __int128 v47 = 0uLL;
            uint64_t v48 = 0LL;
            if (v38) {
              sub_10002418C(&v47, (char *)[v38 UTF8String]);
            }
            else {
              sub_10002418C(&v47, "");
            }
            if (qword_1008D67C8 != -1) {
              dispatch_once(&qword_1008D67C8, &stru_100894590);
            }
            id v39 = sub_100279D1C((uint64_t)off_1008D67C0, a2);
            int v40 = (void *)objc_claimAutoreleasedReturnValue(v39);

            __int128 v45 = 0uLL;
            uint64_t v46 = 0LL;
            if (v40) {
              sub_10002418C(&v45, (char *)[v40 UTF8String]);
            }
            else {
              sub_10002418C(&v45, "");
            }
            if (qword_1008D67C8 != -1) {
              dispatch_once(&qword_1008D67C8, &stru_100894590);
            }
            char v41 = sub_10028EE80((uint64_t)off_1008D67C0, a2);
            if (qword_1008D67C8 != -1) {
              dispatch_once(&qword_1008D67C8, &stru_100894590);
            }
            char v42 = sub_10027D798((uint64_t)off_1008D67C0, a2);
            uint64_t v56 = 0LL;
            __int128 v54 = 0u;
            *(_OWORD *)std::string __p = 0u;
            memset(v53, 0, sizeof(v53));
            *(_OWORD *)uint64_t v52 = 0u;
            sub_10040CEF4((uint64_t)v52, &v45, v42, 0, 0, v41, 2, &v47, &v57);
            if (qword_1008D9298 != -1) {
              dispatch_once(&qword_1008D9298, &stru_1008945F0);
            }
            sub_10040D074(qword_1008D9290, (uint64_t)v52);
            if (SHIBYTE(v56) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v54) < 0) {
              operator delete(*((void **)&v53[1] + 1));
            }
            if (SHIBYTE(v53[0]) < 0) {
              operator delete(v52[1]);
            }
            if (SHIBYTE(v46) < 0) {
              operator delete((void *)v45);
            }
            if (SHIBYTE(v48) < 0) {
              operator delete((void *)v47);
            }
            if (SHIBYTE(v58) < 0) {
              operator delete((void *)v57);
            }
          }

          uint64_t v9 = 0LL;
        }

        if (v49)
        {
          uint64_t v50 = (unsigned __int8 *)v49;
          operator delete(v49);
        }
      }
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
      sub_100676368();
    }
    return 341LL;
  }

  return v9;
}

void sub_10039D3C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }

  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10039D4CC(uint64_t result, unint64_t a2)
{
  if (*(_BYTE *)(result + 226))
  {
    uint64_t v3 = result;
    [*(id *)(result + 232) removeAllObjects];
    [*(id *)(v3 + 240) removeAllObjects];
    [*(id *)(v3 + 248) removeAllObjects];
    if (qword_1008D6288 != -1) {
      dispatch_once(&qword_1008D6288, &stru_100894710);
    }
    id result = sub_100575180((uint64_t)off_1008D6280, a2);
    *(_BYTE *)(v3 + 226) = 0;
  }

  return result;
}

BOOL sub_10039D548(uint64_t a1)
{
  return *(_BYTE *)(a1 + 226) || [*(id *)(a1 + 216) count] != 0;
}

void sub_10039D578( void *a1, uint64_t a2, void *a3, unsigned int *a4, unsigned __int16 *a5, unsigned int *a6)
{
  id v10 = a3;
  v18[0] = v10;
  v17[0] = @"kCBMsgArgDeviceUUID";
  v17[1] = @"kCBMsgArgATTMTU";
  if (qword_1008D9268 != -1) {
    dispatch_once(&qword_1008D9268, &stru_1008946F0);
  }
  uint64_t v11 = +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  sub_10038798C(qword_1008D9260, v10));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v18[1] = v12;
  v17[2] = @"kCBMsgArgAttributeID";
  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *a4));
  void v18[2] = v13;
  v17[3] = @"kCBMsgArgOffset";
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", *a5));
  v18[3] = v14;
  void v17[4] = @"kCBMsgArgTransactionID";
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *a6));
  v18[4] = v15;
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v17,  5LL));

  sub_10038F4BC(a1, 52LL, v16);
}

void sub_10039D718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10039D76C(void *a1, uint64_t a2, void *a3, unsigned int **a4, unsigned int *a5)
{
  id v22 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v22, @"kCBMsgArgDeviceUUID");
  if (qword_1008D9268 != -1) {
    dispatch_once(&qword_1008D9268, &stru_1008946F0);
  }
  uint64_t v9 = +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  sub_10038798C(qword_1008D9260, v22));
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v10, @"kCBMsgArgATTMTU");

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *a5));
  -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v11, @"kCBMsgArgTransactionID");
  __int128 v21 = a1;

  uint64_t v12 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  for (uint64_t i = *a4; i != a4[1]; i += 8)
  {
    uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v15 = sub_10056AAF0((uint64_t)(i + 2));
    uint64_t v16 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v15,  sub_10056AAD8((uint64_t)(i + 2)));
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *i));
    -[NSMutableDictionary setObject:forKey:](v14, "setObject:forKey:", v18, @"kCBMsgArgAttributeID");

    unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *((unsigned __int16 *)i + 2)));
    -[NSMutableDictionary setObject:forKey:](v14, "setObject:forKey:", v19, @"kCBMsgArgOffset");

    -[NSMutableDictionary setObject:forKey:](v14, "setObject:forKey:", v17, @"kCBMsgArgData");
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  *((unsigned __int8 *)i + 24)));
    -[NSMutableDictionary setObject:forKey:](v14, "setObject:forKey:", v20, @"kCBMsgArgIgnoreResponse");

    -[NSMutableArray addObject:](v12, "addObject:", v14);
  }

  -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v12, @"kCBMsgArgATTWrites");
  sub_10038F4BC(v21, 53LL, v8);
}

void sub_10039D9D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
}

void sub_10039DA5C(void *a1, uint64_t a2, unsigned int *a3, void *a4, int a5)
{
  id v13 = a4;
  id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v13, @"kCBMsgArgDeviceUUID");
  if (qword_1008D9268 != -1) {
    dispatch_once(&qword_1008D9268, &stru_1008946F0);
  }
  uint64_t v9 = +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  sub_10038798C(qword_1008D9260, v13));
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v10, @"kCBMsgArgATTMTU");

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *a3));
  -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v11, @"kCBMsgArgAttributeID");

  if (a5) {
    uint64_t v12 = @"Notify";
  }
  else {
    uint64_t v12 = @"Indicate";
  }
  -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v12, @"kCBMsgArgType");
  sub_10038F4BC(a1, 54LL, v8);
}

void sub_10039DB98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10039DBD0(void *a1, uint64_t a2, unsigned int *a3, void *a4)
{
  id v10 = a4;
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v10, @"kCBMsgArgDeviceUUID");
  if (qword_1008D9268 != -1) {
    dispatch_once(&qword_1008D9268, &stru_1008946F0);
  }
  uint64_t v7 = +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  sub_10038798C(qword_1008D9260, v10));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v8, @"kCBMsgArgATTMTU");

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", *a3));
  -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v9, @"kCBMsgArgAttributeID");

  sub_10038F4BC(a1, 55LL, v6);
}

void sub_10039DCE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10039DD18(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  id v9 = a3;
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a4));
  [*(id *)(a1 + 80) setObject:v10 forKeyedSubscript:v9];

  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_100894590);
  }
  int v11 = sub_10027CF60((uint64_t)off_1008D67C0, v9);
  uint64_t v12 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_INFO))
  {
    id v13 = sub_10028D0AC(v11);
    sub_100494958(a2, (uint64_t)__p);
    uint64_t v14 = v19 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 136446722;
    __int128 v21 = v13;
    __int16 v22 = 2114;
    id v23 = v9;
    __int16 v24 = 2082;
    int v25 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Requesting %{public}s connection latency to device %{public}@ for session %{public}s",  buf,  0x20u);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }

  if (v11 == (_DWORD)a4)
  {
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100894610);
    }
    uint64_t v15 = sub_100593618((uint64_t)off_1008D5F08, v9, a4, a5);
    uint64_t v16 = v15;
    if ((_DWORD)v15 && (_DWORD)v15 != 914) {
      [*(id *)(a1 + 80) removeObjectForKey:v9];
    }
  }

  else
  {
    uint64_t v16 = 915LL;
  }

  return v16;
}

void sub_10039DF1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10039DF4C(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (Current <= 86400.0) {
    double v3 = 0.0;
  }
  else {
    double v3 = Current + -86400.0;
  }
  v16[0] = 0LL;
  v16[1] = 0LL;
  uint64_t v15 = v16;
  sub_10039E160((uint64_t *)&v15, *(void **)(a1 + 136), (void *)(a1 + 144));
  sub_100291CA0(a1 + 136, *(void **)(a1 + 144));
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 136) = a1 + 144;
  uint64_t v4 = (uint64_t)v15;
  if (v15 != v16)
  {
    do
    {
      double v5 = *(double *)(v4 + 40);
      if (v5 > v3)
      {
        id v13 = (id *)(v4 + 32);
      }

      uint64_t v6 = *(void **)(v4 + 8);
      if (v6)
      {
        do
        {
          uint64_t v7 = (void **)v6;
          uint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v7 = *(void ***)(v4 + 16);
          BOOL v8 = *v7 == (void *)v4;
          uint64_t v4 = (uint64_t)v7;
        }

        while (!v8);
      }

      uint64_t v4 = (uint64_t)v7;
    }

    while (v7 != v16);
  }

  v14[0] = 0LL;
  v14[1] = 0LL;
  id v13 = (id *)v14;
  sub_10039E160((uint64_t *)&v13, *(void **)(a1 + 160), (void *)(a1 + 168));
  sub_100291CA0(a1 + 160, *(void **)(a1 + 168));
  *(void *)(a1 + 168) = 0LL;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 160) = a1 + 168;
  id v9 = v13;
  if (v13 != (id *)v14)
  {
    do
    {
      double v10 = *((double *)v9 + 5);
      if (v10 > v3)
      {
        uint64_t v17 = v9 + 4;
        *((double *)sub_1003A17F0((uint64_t **)(a1 + 160), (unint64_t *)v9 + 4, (uint64_t)&unk_1006C2518, &v17) + 5) = v10;
      }

      int v11 = (id *)v9[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = (id **)v11;
          int v11 = (id *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          uint64_t v12 = (id **)v9[2];
          BOOL v8 = *v12 == v9;
          id v9 = (id *)v12;
        }

        while (!v8);
      }

      id v9 = (id *)v12;
    }

    while (v12 != v14);
  }

  sub_100291CA0((uint64_t)&v13, v14[0]);
  sub_100291CA0((uint64_t)&v15, v16[0]);
}

void sub_10039E12C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t *sub_10039E160(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    double v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      id result = sub_1003A175C(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          BOOL v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }

        while (!v9);
      }

      uint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t sub_10039E1E4(uint64_t **a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  sub_10039DF4C((uint64_t)a1);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  if (sub_1005CE2FC((uint64_t)off_1008D5F28, v3) == 23)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v7 = &v6;
    *((CFAbsoluteTime *)sub_1003A17F0(a1 + 17, (unint64_t *)&v6, (uint64_t)&unk_1006C2518, &v7) + 5) = Current;
    ((void (*)(uint64_t **))(*a1)[15])(a1);
    id v3 = v6;
  }

  return 1LL;
}

void sub_10039E2B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_10039E2C4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134217984;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump:         fGattWakeHistoryMap: %f",  buf,  0xCu);
  }

  id v3 = *(void **)(a1 + 136);
  if (v3 != (void *)(a1 + 144))
  {
    uint64_t v4 = (os_log_s *)qword_1008F7628;
    do
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        id v5 = objc_claimAutoreleasedReturnValue([(id) v3[4] UUIDString]);
        id v6 = [v5 UTF8String];
        uint64_t v7 = v3[5];
        *(_DWORD *)__int128 buf = 136446466;
        CFAbsoluteTime Current = *(double *)&v6;
        __int16 v13 = 2048;
        uint64_t v14 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "statedump:         %{public}s: %f",  buf,  0x16u);

        uint64_t v4 = (os_log_s *)qword_1008F7628;
      }

      BOOL v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          BOOL v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          BOOL v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          id v3 = v9;
        }

        while (!v10);
      }

      id v3 = v9;
    }

    while (v9 != (void *)(a1 + 144));
  }

void sub_10039E450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10039E468(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  sub_10039DF4C(a1);
  unsigned int v3 = *(_DWORD *)(a1 + 152);
  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_100894590);
  }
  if (v3 > *((unsigned __int16 *)off_1008D67C0 + 176))
  {
    uint64_t v4 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 88);
      v7[0] = 67109378;
      v7[1] = v3;
      __int16 v8 = 2114;
      uint64_t v9 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "We are over GATT AP Wake limit count %d for session %{public}@ ",  (uint8_t *)v7,  0x12u);
    }

    return 1LL;
  }

  return 0LL;
}

uint64_t sub_10039E588(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E9C();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2400LL))(v2);
  if ((_DWORD)result)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 152);
    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_100894590);
    }
    unsigned int v5 = *((unsigned __int16 *)off_1008D67C0 + 177);
    if (v4 <= v5)
    {
      return 0LL;
    }

    else
    {
      id v6 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 88);
        v8[0] = 67109634;
        v8[1] = v4;
        __int16 v9 = 1024;
        unsigned int v10 = v5;
        __int16 v11 = 2114;
        uint64_t v12 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "We are near the max GATT AP Wake limit count %d : NearLimit %d for session %{public}@ ",  (uint8_t *)v8,  0x18u);
      }

      return 1LL;
    }
  }

  return result;
}

BOOL sub_10039E6AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v17 = v3;
  if (!*(_BYTE *)(a1 + 28)) {
    goto LABEL_11;
  }
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  if (sub_1005CE2FC((uint64_t)off_1008D5F28, v3) == 23)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    double v5 = Current - (double)0xAu;
    BOOL v6 = Current <= (double)0xAu;
    double v7 = 0.0;
    if (!v6) {
      double v7 = v5;
    }
    if (*(double *)(a1 + 48) > v7)
    {
      CFAbsoluteTime v8 = CFAbsoluteTimeGetCurrent();
      *(void *)__int128 buf = &v17;
      *((CFAbsoluteTime *)sub_1003A17F0( (uint64_t **)(a1 + 160),  (unint64_t *)&v17,  (uint64_t)&unk_1006C2518,  (id **)buf)
      + 5) = v8;
      __int16 v9 = (os_log_s *)qword_1008F7628;
      if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 48);
        CFAbsoluteTime v11 = CFAbsoluteTimeGetCurrent();
        int v12 = *(unsigned __int16 *)(a1 + 152);
        int v13 = *(unsigned __int16 *)(a1 + 176);
        uint64_t v14 = *(void *)(a1 + 88);
        *(_DWORD *)__int128 buf = 134219266;
        *(void *)&uint8_t buf[4] = v10;
        __int16 v19 = 2048;
        CFAbsoluteTime v20 = v11;
        __int16 v21 = 1024;
        int v22 = v12;
        __int16 v23 = 1024;
        int v24 = v13;
        __int16 v25 = 2114;
        unint64_t v26 = (unint64_t)v17;
        __int16 v27 = 2114;
        uint64_t v28 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "App is over assertion limit (%f:%f) while in background. Count %d:%d : this to count %{public}@ on suspend ed session %{public}@ ",  buf,  0x36u);
      }
    }

    BOOL v15 = *(void *)(a1 + 176) > 0xC8uLL;
    id v3 = v17;
  }

  else
  {
LABEL_11:
    BOOL v15 = 0LL;
  }

  return v15;
}

void sub_10039E87C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_10039E8A4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6)
{
  unsigned int v12 = a3;
  int v8 = *(unsigned __int16 *)(a1 + 224);
  int v9 = *a6;
  if (qword_1008D9268 != -1) {
    dispatch_once(&qword_1008D9268, &stru_1008946F0);
  }
  int v11 = v9 | (v8 << 16);
  return sub_1003864C8(qword_1008D9260, &v12, a4, a5, &v11);
}

void sub_10039E92C(uint64_t a1, uint64_t a2, void *a3, unsigned __int16 a4, uint64_t a5)
{
  id v9 = a3;
  int v10 = *(unsigned __int16 *)(a1 + 224) << 16;
  id v12 = v9;
  if (qword_1008D9268 == -1)
  {
    int v11 = v9;
  }

  else
  {
    dispatch_once(&qword_1008D9268, &stru_1008946F0);
    int v11 = v12;
  }

  sub_1003866B4(qword_1008D9260, a2, v11, v10 | a4, a5);
}

void sub_10039E9C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id sub_10039E9D8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)
    || !*(void *)(a1 + 96)
    || !(*(unsigned int (**)(uint64_t))(*(void *)a1 + 40LL))(a1))
  {
    return 0LL;
  }

  uint64_t v2 = -[NSKeyedArchiver initRequiringSecureCoding:]( objc_alloc(&OBJC_CLASS___NSKeyedArchiver),  "initRequiringSecureCoding:",  1LL);
  -[NSKeyedArchiver encodeObject:forKey:](v2, "encodeObject:forKey:", *(void *)(a1 + 88), @"bundleIdentifier");
  -[NSKeyedArchiver encodeObject:forKey:](v2, "encodeObject:forKey:", *(void *)(a1 + 96), @"restoreIdentifier");
  -[NSKeyedArchiver encodeObject:forKey:]( v2,  "encodeObject:forKey:",  *(void *)(a1 + 240),  @"advertisedServices");
  -[NSKeyedArchiver encodeObject:forKey:]( v2,  "encodeObject:forKey:",  *(void *)(a1 + 248),  @"advertisedServiceData");
  -[NSKeyedArchiver encodeBool:forKey:]( v2,  "encodeBool:forKey:",  *(unsigned __int8 *)(a1 + 226),  @"isAdvertising");
  id v3 = (os_log_s *)qword_1008F7680;
  if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    uint64_t v5 = *(void *)(a1 + 96);
    uint64_t v6 = *(void *)(a1 + 240);
    uint64_t v7 = *(void *)(a1 + 248);
    if (*(_BYTE *)(a1 + 226)) {
      int v8 = "True";
    }
    else {
      int v8 = "False";
    }
    int v11 = 138413570;
    id v12 = v2;
    __int16 v13 = 2114;
    uint64_t v14 = v4;
    __int16 v15 = 2114;
    uint64_t v16 = v5;
    __int16 v17 = 2114;
    uint64_t v18 = v6;
    __int16 v19 = 2114;
    uint64_t v20 = v7;
    __int16 v21 = 2082;
    int v22 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Saving Peripheral - restoration data: %@ bundleId: %{public}@, restorationId: %{public}@, advertisingServices: %{p ublic}@, advertisingServiceData: %{public}@, isAdvertising: %{public}s",  (uint8_t *)&v11,  0x3Eu);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue(-[NSKeyedArchiver encodedData](v2, "encodedData"));

  return v9;
}

void sub_10039EB90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10039EBA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v21 = 0LL;
    uint64_t v4 = -[NSKeyedUnarchiver initForReadingFromData:error:]( objc_alloc(&OBJC_CLASS___NSKeyedUnarchiver),  "initForReadingFromData:error:",  v3,  &v21);
    id v5 = v21;
    uint64_t v6 = (os_log_s *)qword_1008F7680;
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        __int16 v23 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Restoring Peripheral restoration data: %@",  buf,  0xCu);
      }

      id v7 = -[NSKeyedUnarchiver decodeObjectOfClass:forKey:]( v4,  "decodeObjectOfClass:forKey:",  objc_opt_class(&OBJC_CLASS___NSString),  @"bundleIdentifier");
      uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);
      id v9 = *(void **)(a1 + 88);
      *(void *)(a1 + 88) = v8;

      id v10 = -[NSKeyedUnarchiver decodeObjectOfClass:forKey:]( v4,  "decodeObjectOfClass:forKey:",  objc_opt_class(&OBJC_CLASS___NSString),  @"restoreIdentifier");
      uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
      id v12 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = v11;

      if (*(void *)(a1 + 88) && *(void *)(a1 + 96))
      {
        __int16 v13 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        uint64_t v14 = *(void **)(a1 + 240);
        *(void *)(a1 + 240) = v13;

        -[NSKeyedUnarchiver decodeBoolForKey:](v4, "decodeBoolForKey:", @"isAdvertisingContactTracing");
        *(_BYTE *)(a1 + 226) = 0;
        __int16 v15 = (os_log_s *)qword_1008F7680;
        uint64_t v16 = 1LL;
        if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_INFO))
        {
          __int16 v17 = *(NSKeyedUnarchiver **)(a1 + 88);
          uint64_t v18 = *(void *)(a1 + 96);
          uint64_t v19 = *(void *)(a1 + 240);
          *(_DWORD *)__int128 buf = 138544130;
          __int16 v23 = v17;
          __int16 v24 = 2114;
          uint64_t v25 = v18;
          __int16 v26 = 2114;
          uint64_t v27 = v19;
          __int16 v28 = 2082;
          uint64_t v29 = "False";
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Peripheral Restoring - bundleId: %{public}@, restorationId: %{public}@, advertisingServices: %{public}@, isA dvertising: %{public}s ",  buf,  0x2Au);
        }

        *(_BYTE *)(a1 + 209) = 1;
        goto LABEL_14;
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_ERROR))
    {
      sub_10067653C();
    }

    uint64_t v16 = 0LL;
LABEL_14:

    goto LABEL_15;
  }

  uint64_t v16 = 0LL;
LABEL_15:

  return v16;
}

void sub_10039EDE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10039EE0C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7680;
  if (os_log_type_enabled((os_log_t)qword_1008F7680, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 88);
    int v4 = 138543362;
    uint64_t v5 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Continuing after restore: %{public}@",  (uint8_t *)&v4,  0xCu);
  }

  if (qword_1008D67C8 != -1) {
    dispatch_once(&qword_1008D67C8, &stru_100894590);
  }
  sub_10028BF44((uint64_t)off_1008D67C0, *(void **)(a1 + 88));
}

uint64_t sub_10039EEE8(uint64_t a1, unint64_t a2)
{
  int v4 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 88);
    *(_DWORD *)__int128 buf = 138543362;
    uint64_t v18 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Clear all state for peripheral session %{public}@",  buf,  0xCu);
  }

  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v6 = *(id *)(a1 + 216);
  id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v13;
    do
    {
      id v9 = 0LL;
      do
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v6);
        }
        id v10 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 216),  "objectForKeyedSubscript:",  *(void *)(*((void *)&v12 + 1) + 8 * (void)v9),  (void)v12));
        [v10 removeAllObjects];

        id v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v7);
  }

  [*(id *)(a1 + 80) removeAllObjects];
  return sub_10039D4CC(a1, a2);
}

void sub_10039F05C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10039F088(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72LL))(a1);
}

void sub_10039F094(uint64_t a1)
{
  int v4 = @"kCBMsgArgResult";
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:"));
  uint64_t v5 = v2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL));

  *(_BYTE *)(a1 + 226) = 0;
  [*(id *)(a1 + 232) removeAllObjects];
  [*(id *)(a1 + 240) removeAllObjects];
  [*(id *)(a1 + 248) removeAllObjects];
  sub_10038F4BC((void *)a1, 48LL, v3);
}

void sub_10039F164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10039F188(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 256);
  if (!a3)
  {
    if ([v6 containsObject:v5])
    {
      [*(id *)(a1 + 256) removeObject:v5];
      goto LABEL_6;
    }

void sub_10039F324( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

id sub_10039F35C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 256) containsObject:a2];
}

uint64_t sub_10039F368(uint64_t a1)
{
  uint64_t v2 = sub_10038F13C(a1);
  *(void *)uint64_t v2 = &off_100894508;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_DWORD *)(v2 + 248) = 0;
  uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  int v4 = *(void **)(a1 + 232);
  *(void *)(a1 + 232) = v3;

  id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v6 = *(void **)(a1 + 240);
  *(void *)(a1 + 240) = v5;

  return a1;
}

void sub_10039F3DC(_Unwind_Exception *a1)
{
  sub_10038F2A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10039F404(uint64_t a1)
{
  *(void *)a1 = &off_100894508;
  uint64_t v2 = *(void **)(a1 + 232);
  *(void *)(a1 + 232) = 0LL;

  uint64_t v3 = *(void **)(a1 + 240);
  *(void *)(a1 + 240) = 0LL;

  return sub_10038F2A0(a1);
}

void sub_10039F45C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10039F404(a1);
  operator delete(v1);
}

BOOL sub_10039F470(uint64_t a1, int64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 216);
  if (v6)
  {
    sub_10043F394(v6 - 144, a2, v5);
  }

  else
  {
    id v7 = -[BTQueuedMessage initWithMsg:arguments:]( objc_alloc(&OBJC_CLASS___BTQueuedMessage),  "initWithMsg:arguments:",  a2,  v5);
    sub_10038F39C(a1, v7);
    if (sub_10038F33C(a1) == (id)1)
    {
      if (qword_1008D67C8 != -1) {
        dispatch_once(&qword_1008D67C8, &stru_100894590);
      }
      sub_10028BF44((uint64_t)off_1008D67C0, *(void **)(a1 + 88));
    }
  }

  return v6 != 0;
}

void sub_10039F540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10039F560(uint64_t a1)
{
  return [*(id *)(a1 + 240) count] != 0;
}

uint64_t sub_10039F580()
{
  return 0LL;
}

uint64_t sub_10039F588()
{
  return 0LL;
}

id sub_10039F594(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 88);
    int v5 = 138543362;
    uint64_t v6 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Clear all state for classic session %{public}@",  (uint8_t *)&v5,  0xCu);
  }

  [*(id *)(a1 + 232) removeAllObjects];
  return [*(id *)(a1 + 240) removeAllObjects];
}

uint64_t sub_10039F648(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72LL))(a1);
}

void sub_10039F654(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  uint64_t v9 = sub_1005CC198((uint64_t)off_1008D5F28, v7, 0);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008946B0);
  }
  uint64_t v10 = sub_10040007C(off_1008D5F48, v9, 1);
  if (!v10)
  {
    sub_10039FACC(a1, v7, 3LL, 0LL);
    goto LABEL_39;
  }

  [*(id *)(a1 + 240) addObject:v7];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 232) objectForKey:v7]);

  if (v11)
  {
    BOOL v12 = sub_1003D0670((uint64_t)v10);
    __int128 v13 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      sub_100494958(a2, (uint64_t)__p);
      __int128 v14 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__int128 buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)&uint8_t buf[8] = 2114;
      *(void *)&buf[10] = v7;
      *(_WORD *)&_BYTE buf[18] = 2082;
      *(void *)&buf[20] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Attempting to add device (%d) %{public}@ more than once for session %{public}s",  buf,  0x1Cu);
      if (v24 < 0)
      {
        operator delete(__p[0]);
        if (!v12) {
          goto LABEL_39;
        }
        goto LABEL_13;
      }
    }

    if (v12)
    {
LABEL_13:
      __int128 v15 = sub_1003D0818((uint64_t)v10);
      sub_10039FACC(a1, v7, 0LL, (uint64_t)v15);
    }
  }

  else
  {
    __int128 v16 = (os_log_s *)qword_1008F7658;
    if (os_log_type_enabled((os_log_t)qword_1008F7658, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 88);
      *(_DWORD *)__int128 buf = 138543618;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&_BYTE buf[12] = 2114;
      *(void *)&buf[14] = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "App connecting - {cbuuid: %{public}@, bundle: %{public}@}",  buf,  0x16u);
    }

    __int128 v18 = (os_log_s *)qword_1008F7628;
    if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
    {
      sub_100494958(a2, (uint64_t)__p);
      __int128 v19 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__int128 buf = 138543874;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v19;
      *(_WORD *)&_BYTE buf[22] = 2114;
      *(void *)&_BYTE buf[24] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Connecting device %{public}@ for session %{public}s with options %{public}@",  buf,  0x20u);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_1003DE1B8((uint64_t)v10, 0);
    if (v10[1332])
    {
      if (qword_1008D60E0 != -1) {
        dispatch_once(&qword_1008D60E0, &stru_100894730);
      }
      sub_10023BAB8((uint64_t)off_1008D60D8, (uint64_t)v10, 0);
      sub_10039FACC(a1, v7, 0LL, 2LL);
    }

    else
    {
      else {
        int v20 = -14657;
      }
      if (qword_1008D60D0 != -1) {
        dispatch_once(&qword_1008D60D0, &stru_100894750);
      }
      __int128 v21 = (int64x2_t *)off_1008D60C8;
      sub_100494958(a2, (uint64_t)buf);
      uint64_t v22 = sub_100424360(v21, (uint64_t)v10, v20, (const std::string *)buf, 2LL);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if ((_DWORD)v22) {
        sub_10039FACC(a1, v7, v22, 0LL);
      }
      else {
        [*(id *)(a1 + 232) setObject:v8 forKey:v7];
      }
    }
  }

void sub_10039FA7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_10039FACC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v24 = a2;
  if (!(_DWORD)a3) {
    ++*(_DWORD *)(a1 + 248);
  }
  if ((_DWORD)a4 != 2) {
    [*(id *)(a1 + 232) removeObjectForKey:v24];
  }
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  uint64_t v6 = sub_1005CC198((uint64_t)off_1008D5F28, v24, 0);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008946B0);
  }
  id v7 = sub_10040007C(off_1008D5F48, v6, 0);
  id v8 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D0100((uint64_t)v7, (uint64_t)__p);
    uint64_t v9 = v27 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 136446722;
    uint64_t v31 = v9;
    __int16 v32 = 1024;
    int v33 = a3;
    __int16 v34 = 1024;
    int v35 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "CBClassicSession::deviceConnected for device %{public}s with result: %d and internalState %d",  buf,  0x18u);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
  }

  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_100894790);
  }
  else {
    BOOL v10 = 1LL;
  }
  uint64_t v11 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D0100((uint64_t)v7, (uint64_t)__p);
    BOOL v12 = v27 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 136315906;
    uint64_t v31 = v12;
    __int16 v32 = 1024;
    int v33 = a3;
    __int16 v34 = 1024;
    int v35 = a4;
    __int16 v36 = 1024;
    BOOL v37 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "CBClassicSession::deviceConnected for device %s with result: %d and internalState %d and isIncoming %d",  buf,  0x1Eu);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
  }

  v29[0] = v24;
  v28[0] = @"kCBMsgArgDeviceUUID";
  v28[1] = @"kCBMsgArgResult";
  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
  v29[1] = v13;
  void v28[2] = @"kCBMsgArgInternalState";
  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a4));
  void v29[2] = v14;
  v28[3] = @"kCBMsgArgIsIncoming";
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v10));
  v29[3] = v15;
  __int128 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v29,  v28,  4LL));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v16));

  if (v10)
  {
    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a4));
    [v17 setObject:v18 forKeyedSubscript:@"kCBMsgArgState"];
  }

  if (v7)
  {
    id v19 = sub_1003E366C((uint64_t)v7);
    int v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    BOOL v21 = [v20 count] == 0;

    if (!v21)
    {
      id v22 = sub_1003E366C((uint64_t)v7);
      __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      [v17 setObject:v23 forKeyedSubscript:@"kCBMsgArgServices"];
    }
  }

  sub_10039F470(a1, 51LL, v17);
  sub_10039F470(a1, 49LL, v17);
  if (*(int *)(a1 + 248) >= 1)
  {
    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_100894590);
    }
    sub_1002821A8((uint64_t)off_1008D67C0, *(void **)(a1 + 88), 1LL);
  }
}

void sub_10039FF34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10039FFC8(uint64_t a1, unint64_t a2, void *a3, int a4)
{
  id v7 = a3;
  [*(id *)(a1 + 232) removeObjectForKey:v7];
  if (!a4)
  {
    sub_1003A0290(a1, v7, 0LL, 0LL);
    goto LABEL_21;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_ERROR)) {
    sub_100675D20();
  }
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  uint64_t v8 = sub_1005CC198((uint64_t)off_1008D5F28, v7, 0);
  if (!v8)
  {
    sub_1003A0290(a1, v7, 3LL, 0LL);
    goto LABEL_21;
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008946B0);
  }
  uint64_t v9 = sub_10040007C(off_1008D5F48, v8, 0);
  uint64_t v10 = (uint64_t)v9;
  if (!v9)
  {
    uint64_t v13 = 3LL;
LABEL_20:
    sub_1003A0290(a1, v7, v13, 0LL);
    goto LABEL_21;
  }

  if (!v9[1332])
  {
    uint64_t v13 = 0LL;
    goto LABEL_20;
  }

  if (sub_1003D994C((uint64_t)v9))
  {
    if (qword_1008D60D0 != -1) {
      dispatch_once(&qword_1008D60D0, &stru_100894750);
    }
    uint64_t v11 = sub_1004287C4((int64x2_t *)off_1008D60C8, v10, -1);
    if ((_DWORD)v11)
    {
      BOOL v12 = sub_1003D0818(v10);
      sub_1003A0290(a1, v7, v11, (uint64_t)v12);
    }
  }

  else
  {
    *(void *)std::string src = 0LL;
    uint64_t v17 = 0LL;
    sub_100241F90(src, v7);
    if (qword_1008D9050 != -1) {
      dispatch_once(&qword_1008D9050, &stru_100894770);
    }
    uint64_t v14 = qword_1008D9048;
    uuid_copy(dst, src);
    sub_100367760(v14, a2, dst);
    if (qword_1008D60D0 != -1) {
      dispatch_once(&qword_1008D60D0, &stru_100894750);
    }
    sub_100424304((uint64_t)off_1008D60C8, v10, 1);
  }

void sub_1003A0268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003A0290(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  [*(id *)(a1 + 232) removeObjectForKey:v7];
  v16[0] = v7;
  v15[0] = @"kCBMsgArgDeviceUUID";
  v15[1] = @"kCBMsgArgResult";
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
  v16[1] = v8;
  void v15[2] = @"kCBMsgArgInternalState";
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a4));
  void v16[2] = v9;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v16,  v15,  3LL));

  uint64_t v11 = (os_log_s *)qword_1008F7628;
  if (os_log_type_enabled((os_log_t)qword_1008F7628, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109376;
    v12[1] = a3;
    __int16 v13 = 1024;
    int v14 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "CBClassicSession::deviceDisconnected with result: %d and internalState %d",  (uint8_t *)v12,  0xEu);
  }

  --*(_DWORD *)(a1 + 248);
  sub_10039F470(a1, 51LL, v10);
  sub_10039F470(a1, 50LL, v10);
  if (!*(_DWORD *)(a1 + 248))
  {
    if (qword_1008D67C8 != -1) {
      dispatch_once(&qword_1008D67C8, &stru_100894590);
    }
    sub_1002821A8((uint64_t)off_1008D67C0, *(void **)(a1 + 88), 0LL);
  }
}

void sub_1003A0468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003A04A8(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_1005C8684( (uint64_t)off_1008D5F28,  ((unint64_t)a3[128] << 40) | ((unint64_t)a3[129] << 32) | ((unint64_t)a3[130] << 24) | ((unint64_t)a3[131] << 16) | ((unint64_t)a3[132] << 8) | a3[133],  1u,  0,  0LL,  0LL,  (unsigned __int8 *)v10);
  uint64_t v8 = @"kCBMsgArgDeviceUUID";
  int v5 = sub_100241F94((const unsigned __int8 *)v10);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v9 = v6;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL));
  sub_10039F470(a1, 16LL, v7);
}

void sub_1003A05D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003A05FC(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  *(void *)uuid = 0LL;
  uint64_t v12 = 0LL;
  sub_1005C8684( (uint64_t)off_1008D5F28,  ((unint64_t)a3[128] << 40) | ((unint64_t)a3[129] << 32) | ((unint64_t)a3[130] << 24) | ((unint64_t)a3[131] << 16) | ((unint64_t)a3[132] << 8) | a3[133],  1u,  0,  0LL,  0LL,  uuid);
  xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", uuid);
  xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a4);
  unsigned int v8 = sub_1003CF350(a3);
  xpc_dictionary_set_int64(v7, "kCBMsgArgPairingState", v8);
  uint64_t v9 = sub_10043E46C(v7);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  sub_10039F470(a1, 17LL, v10);

  xpc_release(v7);
}

void sub_1003A0758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003A0770(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_1005C8684( (uint64_t)off_1008D5F28,  ((unint64_t)a3[128] << 40) | ((unint64_t)a3[129] << 32) | ((unint64_t)a3[130] << 24) | ((unint64_t)a3[131] << 16) | ((unint64_t)a3[132] << 8) | a3[133],  1u,  0,  0LL,  0LL,  (unsigned __int8 *)v10);
  unsigned int v8 = @"kCBMsgArgDeviceUUID";
  int v5 = sub_100241F94((const unsigned __int8 *)v10);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v9 = v6;
  xpc_object_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL));
  sub_10039F470(a1, 18LL, v7);
}

void sub_1003A08A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003A08C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_1005C8684( (uint64_t)off_1008D5F28,  ((unint64_t)*(unsigned __int8 *)(a3 + 128) << 40) | ((unint64_t)*(unsigned __int8 *)(a3 + 129) << 32) | ((unint64_t)*(unsigned __int8 *)(a3 + 130) << 24) | ((unint64_t)*(unsigned __int8 *)(a3 + 131) << 16) | ((unint64_t)*(unsigned __int8 *)(a3 + 132) << 8) | *(unsigned __int8 *)(a3 + 133),  1u,  0,  0LL,  0LL,  (unsigned __int8 *)v20);
  v18[0] = @"kCBMsgArgDeviceUUID";
  int v5 = sub_100241F94((const unsigned __int8 *)v20);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v19[0] = v6;
  v18[1] = @"kCBMsgArgBatteryPercentRight";
  xpc_object_t v7 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", sub_1003D7EB4((unsigned int *)a3, 2));
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v19[1] = v8;
  void v18[2] = @"kCBMsgArgBatteryPercentLeft";
  uint64_t v9 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", sub_1003D7EB4((unsigned int *)a3, 4));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  __int128 v19[2] = v10;
  v18[3] = @"kCBMsgArgBatteryPercentCase";
  uint64_t v11 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", sub_1003D7EB4((unsigned int *)a3, 8));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v19[3] = v12;
  v18[4] = @"kCBMsgArgBatteryPercent";
  __int16 v13 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", sub_1003D7EB4((unsigned int *)a3, 1));
  int v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v19[4] = v14;
  void v18[5] = @"kCBMsgArgBatteryPercentCombined";
  __int128 v15 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", sub_1003D7EB4((unsigned int *)a3, 16));
  __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  void v19[5] = v16;
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v19,  v18,  6LL));
  sub_10039F470(a1, 45LL, v17);
}

void sub_1003A0B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003A0B80(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894630);
  }
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_1005C8684( (uint64_t)off_1008D5F28,  ((unint64_t)a3[128] << 40) | ((unint64_t)a3[129] << 32) | ((unint64_t)a3[130] << 24) | ((unint64_t)a3[131] << 16) | ((unint64_t)a3[132] << 8) | a3[133],  1u,  0,  0LL,  0LL,  (unsigned __int8 *)v11);
  v9[0] = @"kCBMsgArgDeviceUUID";
  int v5 = sub_100241F94((const unsigned __int8 *)v11);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v9[1] = @"kCBMsgArgIsConnectedOverUSB";
  v10[0] = v6;
  xpc_object_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a3[1296]));
  v10[1] = v7;
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v10,  v9,  2LL));
  sub_10039F470(a1, 45LL, v8);
}

void sub_1003A0CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003A0D08()
{
  return 0LL;
}

uint64_t sub_1003A0D10()
{
  return 1LL;
}

uint64_t sub_1003A0D18()
{
  return 3LL;
}

void sub_1003A0D20(id a1)
{
  uint64_t v1 = operator new(0x1A0uLL);
  sub_1002769A4();
  off_1008D67C0 = v1;
}

void sub_1003A0D50(_Unwind_Exception *a1)
{
}

void sub_1003A0D64(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1003A0D64(a1, *a2);
    sub_1003A0D64(a1, a2[1]);

    operator delete(a2);
  }

void sub_1003A0DAC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1003A0DAC(a1, *a2);
    sub_1003A0DAC(a1, a2[1]);

    operator delete(a2);
  }

void sub_1003A0DFC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1003A0DFC(a1, *a2);
    sub_1003A0DFC(a1, a2[1]);
    sub_1003A0E44((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void sub_1003A0E44(uint64_t a1)
{
}

void sub_1003A0E80(id a1)
{
  uint64_t v1 = operator new(0xA8uLL);
  sub_10064B7C8();
  qword_1008D92A0 = (uint64_t)v1;
}

void sub_1003A0EB0(_Unwind_Exception *a1)
{
}

void sub_1003A0EC4(id a1)
{
  uint64_t v1 = operator new(0x1128uLL);
  sub_1005DDADC();
  off_1008D6600 = v1;
}

void sub_1003A0EF4(_Unwind_Exception *a1)
{
}

void sub_1003A0F08(id a1)
{
  qword_1008D9290 = (uint64_t)operator new(1uLL);
}

void sub_1003A0F28(id a1)
{
  uint64_t v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_1003A0F58(_Unwind_Exception *a1)
{
}

void sub_1003A0F6C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }

      while (v4 != v2);
      int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_1003A0FD8(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0LL;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      xpc_object_t v7 = v2;
    }
    else {
      xpc_object_t v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = (uint64_t)v2;
    }
    uint64_t v2 = (void *)*v7;
  }

  while (*v7);
  if (v4 == a1 + 8 || v3 < *(void *)(v4 + 32)) {
    return 0LL;
  }
  sub_1003A103C((uint64_t **)a1, v4);
  return 1LL;
}

uint64_t *sub_1003A103C(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = sub_1001FDBCC(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

void sub_1003A1074(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_1003A10A4(_Unwind_Exception *a1)
{
}

void sub_1003A10B8(id a1)
{
  uint64_t v1 = operator new(0x18uLL);
  *(void *)uint64_t v1 = 0LL;
  v1[2] = 0;
  *((_BYTE *)v1 + 12) = 0;
  v1[4] = 0;
  qword_1008D9058 = (uint64_t)v1;
}

void sub_1003A10E8(id a1)
{
  uint64_t v1 = operator new(0x50uLL);
  sub_100411DB0((uint64_t)v1);
  qword_1008D9270 = (uint64_t)v1;
}

void sub_1003A1118(_Unwind_Exception *a1)
{
}

void sub_1003A112C(id a1)
{
  uint64_t v1 = operator new(0x110uLL);
  sub_100551DD0();
  qword_1008D5F58 = (uint64_t)v1;
}

void sub_1003A115C(_Unwind_Exception *a1)
{
}

uint64_t *sub_1003A1170(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  xpc_object_t v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        xpc_object_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        xpc_object_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x38uLL);
    id v12 = **a4;
    v11[5] = 0LL;
    v11[6] = 0LL;
    void v11[4] = (uint64_t)v12;
    sub_100029630(a1, (uint64_t)v9, v7, v11);
    return v11;
  }

  return (uint64_t *)v9;
}

void sub_1003A1234(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_1003A1264(_Unwind_Exception *a1)
{
}

void sub_1003A1278(id a1)
{
  uint64_t v1 = operator new(0xEB0uLL);
  sub_10061991C();
  qword_1008D5F18 = (uint64_t)v1;
}

void sub_1003A12A8(_Unwind_Exception *a1)
{
}

uint64_t sub_1003A12BC(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0LL;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      xpc_object_t v7 = v2;
    }
    else {
      xpc_object_t v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = (uint64_t)v2;
    }
    uint64_t v2 = (void *)*v7;
  }

  while (*v7);
  if (v4 == a1 + 8 || v3 < *(void *)(v4 + 32)) {
    return 0LL;
  }
  sub_1003A1320((uint64_t **)a1, v4);
  return 1LL;
}

uint64_t *sub_1003A1320(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = sub_1001FDBCC(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

_OWORD *sub_1003A1360(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v11 = 0LL;
  BOOL v6 = (void **)sub_10002E9C8((uint64_t)a1, &v11, a2);
  xpc_object_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    xpc_object_t v7 = operator new(0x40uLL);
    int v9 = *((_DWORD *)*a4 + 4);
    _DWORD v7[2] = **a4;
    *((_DWORD *)v7 + 12) = v9;
    *((void *)v7 + 7) = 0LL;
    sub_100029630(a1, v11, v8, (uint64_t *)v7);
  }

  return v7;
}

void sub_1003A13F4(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_100380B10();
  qword_1008D9260 = (uint64_t)v1;
}

void sub_1003A1424(_Unwind_Exception *a1)
{
}

uint64_t *sub_1003A1438(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_1003A148C(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1003A1474(_Unwind_Exception *a1)
{
}

uint64_t *sub_1003A148C(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    BOOL v6 = result + 1;
    do
    {
      uint64_t result = sub_1003A1510(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      xpc_object_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          xpc_object_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          unint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }

        while (!v9);
      }

      uint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_1003A1510(uint64_t **a1, void *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  BOOL v6 = (uint64_t **)sub_100268054(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1003A159C((uint64_t)a1, a4, v8);
    sub_100029630(a1, v10, v6, v8[0]);
    return v8[0];
  }

  return result;
}

id sub_1003A159C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  BOOL v6 = operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  v6[4] = *(id *)a2;
  id result = *(id *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  _OWORD v6[5] = result;
  v6[6] = v8;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

_OWORD *sub_1003A1604(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v14 = 0LL;
  BOOL v6 = (void **)sub_10023E6A4((uint64_t)a1, &v14, a2);
  xpc_object_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v13 = 0LL;
    xpc_object_t v7 = operator new(0x58uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    _DWORD v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0LL;
    void v9[2] = 0LL;
    *uint64_t v9 = 0LL;
    *(_OWORD *)((char *)v7 + 56) = 0u;
    *(_OWORD *)((char *)v7 + 72) = 0u;
    LOBYTE(v13) = 1;
    sub_100029630(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0LL;
    sub_1003A16D4((uint64_t)v12, 0LL);
  }

  return v7;
}

void sub_1003A16D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1003A0E44((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

void sub_1003A1718(id a1)
{
  uint64_t v1 = operator new(0x42C0uLL);
  sub_10056DFB4();
  off_1008D6280 = v1;
}

void sub_1003A1748(_Unwind_Exception *a1)
{
}

uint64_t *sub_1003A175C(uint64_t **a1, void *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  BOOL v6 = (uint64_t **)sub_100268054(a1, a2, &v11, &v10, a3);
  xpc_object_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    xpc_object_t v7 = (uint64_t *)operator new(0x30uLL);
    v7[4] = (uint64_t)*(id *)a4;
    void v7[5] = *(void *)(a4 + 8);
    sub_100029630(a1, v11, v8, v7);
  }

  return v7;
}

uint64_t *sub_1003A17F0(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  xpc_object_t v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        xpc_object_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        xpc_object_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x30uLL);
    void v11[4] = (uint64_t)**a4;
    v11[5] = 0LL;
    sub_100029630(a1, (uint64_t)v9, v7, v11);
    return v11;
  }

  return (uint64_t *)v9;
}

void sub_1003A18B0(id a1)
{
  uint64_t v1 = operator new(0x2C8uLL);
  sub_100213DA8();
  off_1008D60D8 = v1;
}

void sub_1003A18E0(_Unwind_Exception *a1)
{
}

void sub_1003A18F4(id a1)
{
  uint64_t v1 = operator new(0x2C0uLL);
  sub_1004219F0();
  off_1008D60C8 = v1;
}

void sub_1003A1924(_Unwind_Exception *a1)
{
}

void sub_1003A1938(id a1)
{
  uint64_t v1 = operator new(0x70uLL);
  sub_1003639FC((uint64_t)v1);
  qword_1008D9048 = (uint64_t)v1;
}

void sub_1003A1968(_Unwind_Exception *a1)
{
}

void sub_1003A197C(id a1)
{
  uint64_t v1 = operator new(0x98uLL);
  sub_1003C97E4((uint64_t)v1);
  off_1008D67E0 = v1;
}

void sub_1003A19AC(_Unwind_Exception *a1)
{
}

  ;
}

void sub_1003A19CC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1003A19D8(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t sub_1003A19E4(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10041BFD4(a1, "A2DPService", 16);
  *uint64_t v2 = off_1008947C0;
  sub_100242DC4(v2 + 41);
  *(void *)(a1 + 400) = 0LL;
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_1008948B0);
  }
  uint64_t v3 = qword_1008D6450;
  *(void *)(a1 + 400) = qword_1008D6450;
  sub_10041C264(a1, v3);
  return a1;
}

void sub_1003A1A74(_Unwind_Exception *a1)
{
}

uint64_t sub_1003A1A9C(void *a1)
{
  *a1 = off_1008947C0;
  sub_100242E28(a1 + 41);
  return sub_10041C0C4((uint64_t)a1);
}

void sub_1003A1AD0(void *a1)
{
  *a1 = off_1008947C0;
  sub_100242E28(a1 + 41);
  uint64_t v2 = (void *)sub_10041C0C4((uint64_t)a1);
  operator delete(v2);
}

uint64_t sub_1003A1B10(uint64_t a1, uint64_t a2)
{
  __int128 v12 = xmmword_1006C2550;
  memset(v14, 0, sizeof(v14));
  char v11 = 0;
  int v10 = 0;
  if (sub_1003D518C(a2))
  {
    if (sub_1003D2E50(a2, &v12, 4u)) {
      int v4 = 4;
    }
    else {
      int v4 = 1;
    }
  }

  else
  {
    BOOL v5 = sub_1003E235C(a2, v14, &v11);
    if (v11) {
      BOOL v6 = v5;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6) {
      int v4 = 4 * (sub_10011B978((unsigned __int8 *)v14, 4363, &v10) == 0);
    }
    else {
      int v4 = 0;
    }
  }

  unsigned int v7 = *(_DWORD *)(a1 + 32);
  uint64_t v13 = 0LL;
  sub_1000B0400((uint64_t)&v13);
  *(void *)&__int128 v9 = (int)v13;
  *((void *)&v9 + 1) = SWORD2(v13);
  return sub_1003D1FC4(a2, v7, v4, &v9, 0);
}

uint64_t sub_1003A1C58(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v8 = 0;
  __int128 v9 = xmmword_1006C2550;
  memset(v10, 0, sizeof(v10));
  char v7 = 0;
  int v6 = 0;
  *a3 = 0;
  if (sub_1003D518C(a2))
  {
    uint64_t result = sub_1003D2E50(a2, &v9, 4u);
    if ((result & 1) == 0) {
      return result;
    }
LABEL_13:
    *a3 = 1;
    return result;
  }

  if (sub_1003E235C(a2, v10, &v7))
  {
    if (v7)
    {
      uint64_t result = sub_10011B978((unsigned __int8 *)v10, 4363, &v6);
      if (!(_DWORD)result) {
        goto LABEL_13;
      }
    }
  }

  uint64_t result = sub_1003D0454(a2, &v8);
  if ((~v8 & 0x240000) == 0
    && ((v8 & 0x1F00) == 0x400
     || (v8 & 0x1FFC) == 0x118
     || (v8 & 0x1F00) == 0x700 && ((v8 & 0xF4) == 4 || (v8 & 0xF8) == 0x10)))
  {
    goto LABEL_13;
  }

  return result;
}

uint64_t sub_1003A1DAC(uint64_t a1, uint64_t a2, const char *a3, const char *a4)
{
  if (a3 && a4)
  {
    size_t v6 = strlen(aBtKeyHandsfree);
    if (!strncmp(a3, aBtKeyHandsfree, v6))
    {
      size_t v7 = strlen(a4);
      __int16 v27 = 0;
      uint64_t v26 = 0LL;
      char v25 = 0;
      int __dst = 0;
      if (v7)
      {
        size_t v8 = v7;
        unint64_t v9 = 0LL;
        size_t v10 = 0LL;
        if (v7 >= 4) {
          uint64_t v11 = 4LL;
        }
        else {
          uint64_t v11 = v7;
        }
        do
        {
          size_t v12 = 0LL;
          uint64_t v13 = &a4[v10];
          while (v13[v12] != 58)
          {
            if (v11 == ++v12)
            {
              size_t v12 = v11;
              break;
            }
          }

          memcpy(&__dst, v13, v12);
          *((_BYTE *)&__dst + v12) = 0;
          *((_BYTE *)&v26 + v9) = atoi((const char *)&__dst);
          v10 += v12 + 1;
          if (v10 >= v8) {
            break;
          }
        }

        while (v9++ < 9);
      }

      char v23 = 0;
      sub_100242CA4(&v23);
      sub_10011EA98((uint64_t)sub_1003A1F58, (uint64_t)&v26, v15, v16, v17, v18, v19, v20);
      sub_100242CD0(&v23);
      sub_100242CD8(&v23);
    }

    return 0LL;
  }

  else
  {
    id v22 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_10067659C(v22);
    }
    return 1LL;
  }

void sub_1003A1F3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1003A1F58()
{
  v0 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Set AFH enabled\n\n", v1, 2u);
  }

void sub_1003A1FBC(id a1)
{
  uint64_t v1 = operator new(0x310uLL);
  sub_10036BB90();
  qword_1008D6450 = (uint64_t)v1;
}

void sub_1003A1FEC(_Unwind_Exception *a1)
{
}

id *sub_1003A2000(id *a1)
{
  return a1;
}

BOOL sub_1003A2030(void *a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7728;
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting LEA easy pairing agent", buf, 2u);
  }

  *((_BYTE *)a1 + 96) = 0;
  uint64_t v3 = (void (***)(void, uint64_t, uint64_t, void))a1[11];
  if (v3)
  {
    int v4 = (os_log_s *)qword_1008F7728;
    BOOL v5 = os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT);
    size_t v6 = v3;
    if (v5)
    {
      sub_1003FE1B4((unsigned __int8 *)a1 + 72, buf);
      int v7 = v20;
      size_t v8 = *(uint8_t **)buf;
      sub_1003FE1B4((unsigned __int8 *)a1 + 79, __p);
      unint64_t v9 = buf;
      if (v7 < 0) {
        unint64_t v9 = v8;
      }
      if (v18 >= 0) {
        size_t v10 = __p;
      }
      else {
        size_t v10 = (void **)__p[0];
      }
      *(_DWORD *)BOOL v21 = 136315394;
      id v22 = v9;
      __int16 v23 = 2080;
      id v24 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Sending pair status request to %s for device %s ",  v21,  0x16u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(*(void **)buf);
      }
      size_t v6 = (void (***)(void, uint64_t, uint64_t, void))a1[11];
    }

    (**v6)(v6, (uint64_t)(a1 + 9), (uint64_t)a1 + 79, *a1);
    uint64_t v11 = (os_log_s *)qword_1008F7728;
    if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003FE1B4((unsigned __int8 *)a1 + 79, buf);
      int v12 = v20;
      uint64_t v13 = *(uint8_t **)buf;
      sub_1003FE1B4((unsigned __int8 *)a1 + 72, __p);
      uint64_t v14 = buf;
      if (v12 < 0) {
        uint64_t v14 = v13;
      }
      if (v18 >= 0) {
        uint64_t v15 = __p;
      }
      else {
        uint64_t v15 = (void **)__p[0];
      }
      *(_DWORD *)BOOL v21 = 136315394;
      id v22 = v14;
      __int16 v23 = 2080;
      id v24 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Sending pair status request to %s  for device %s ",  v21,  0x16u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(*(void **)buf);
      }
    }

    (**(void (***)(void, uint64_t, uint64_t, void))a1[11])( a1[11],  (uint64_t)a1 + 79,  (uint64_t)(a1 + 9),  *a1);
    *((_BYTE *)a1 + 96) += 2;
  }

  return v3 != 0LL;
}

void sub_1003A22AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A22D4(void *a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  size_t v8 = (os_log_s *)qword_1008F7728;
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v9 = a4 == 2 ? "Paired" : "Not paired";
    sub_1003FE1B4((unsigned __int8 *)a2, v67);
    size_t v10 = v68 >= 0 ? v67 : (void **)v67[0];
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&_BYTE buf[12] = 2080;
    *(void *)&buf[14] = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Received pair status response %{public}s from device %s",  buf,  0x16u);
    if (v68 < 0) {
      operator delete(v67[0]);
    }
  }

  v60[0] = 0LL;
  v60[1] = 0LL;
  sub_100242F28((uint64_t)v60, (uint64_t)(a1 + 1));
  if (*(_DWORD *)a2 == *((_DWORD *)a1 + 18) && *(unsigned __int16 *)(a2 + 4) == *((unsigned __int16 *)a1 + 38))
  {
    *((_BYTE *)a1 + 78) = a4;
    --*((_BYTE *)a1 + 96);
  }

  if (*(_DWORD *)a2 == *(_DWORD *)((char *)a1 + 79)
    && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)((char *)a1 + 83))
  {
    *((_BYTE *)a1 + 85) = a4;
    char v13 = *((_BYTE *)a1 + 96) - 1;
    *((_BYTE *)a1 + 96) = v13;
  }

  else
  {
    char v13 = *((_BYTE *)a1 + 96);
  }

  if (!v13)
  {
    int v15 = (*((_BYTE *)a1 + 85) & *((_BYTE *)a1 + 78));
    uint64_t v16 = (os_log_s *)qword_1008F7728;
    BOOL v17 = os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT);
    if (v15 == 2)
    {
      if (v17)
      {
        sub_1003FE1B4((unsigned __int8 *)a2, v67);
        int v18 = v68;
        uint64_t v19 = (void **)v67[0];
        sub_1003FE1B4(a3, buf);
        char v20 = v67;
        if (v18 < 0) {
          char v20 = v19;
        }
        if (v65 >= 0) {
          BOOL v21 = buf;
        }
        else {
          BOOL v21 = *(_BYTE **)buf;
        }
        *(_DWORD *)id v66 = 136315394;
        *(void *)&v66[4] = v20;
        *(_WORD *)&v66[12] = 2080;
        *(void *)&v66[14] = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Devices %s and %s are already paired",  v66,  0x16u);
        if (v65 < 0) {
          operator delete(*(void **)buf);
        }
        if (v68 < 0) {
          operator delete(v67[0]);
        }
      }
    }

    else
    {
      if (v17)
      {
        sub_1003FE1B4((unsigned __int8 *)a2, v67);
        int v22 = v68;
        __int16 v23 = (void **)v67[0];
        sub_1003FE1B4(a3, buf);
        id v24 = v67;
        if (v22 < 0) {
          id v24 = v23;
        }
        if (v65 >= 0) {
          char v25 = buf;
        }
        else {
          char v25 = *(_BYTE **)buf;
        }
        *(_DWORD *)id v66 = 136315394;
        *(void *)&v66[4] = v24;
        *(_WORD *)&v66[12] = 2080;
        *(void *)&v66[14] = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Generate bonding info to pair between %s and %s",  v66,  0x16u);
        if (v65 < 0) {
          operator delete(*(void **)buf);
        }
        if (v68 < 0) {
          operator delete(v67[0]);
        }
      }

      ____int128 buf = 0;
      uint64_t v63 = 0LL;
      *(void *)__int128 buf = 0LL;
      v67[0] = 0LL;
      v67[1] = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      *(void *)id v66 = 0LL;
      *(void *)&v66[8] = 0LL;
      if (qword_1008D5F20 != -1) {
        dispatch_once(&qword_1008D5F20, &stru_1008948D0);
      }
      *(_OWORD *)__int128 buf = *(_OWORD *)(qword_1008D5F18 + 168);
      int v26 = sub_1001115A4((__int128 *)(qword_1008D5F18 + 136), 3, 0, v66);
      if (v26)
      {
        __int16 v27 = (os_log_s *)qword_1008F7728;
        if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_FAULT)) {
          sub_1006766A4(v26, v27);
        }
      }

      else
      {
        arc4random_buf((char *)&__buf + 2, 2uLL);
        arc4random_buf(&v63, 8uLL);
        uint64_t v28 = sub_100110EC0((__int128 *)v66, &v63, &__buf);
        if ((_DWORD)v28)
        {
          uint64_t v29 = (os_log_s *)qword_1008F7728;
          if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR)) {
            sub_100676640(v28, v29, v30, v31, v32, v33, v34, v35);
          }
        }

        else
        {
          __int16 v36 = __buf;
          __int16 v37 = HIWORD(__buf);
          uint64_t v38 = sub_1001115A4((__int128 *)buf, SHIWORD(__buf), 0, v67);
          if ((_DWORD)v38)
          {
            id v39 = (os_log_s *)qword_1008F7728;
            if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_ERROR)) {
              sub_1006765DC(v38, v39, v40, v41, v42, v43, v44, v45);
            }
          }

          else
          {
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_1008948F0);
            }
            uint64_t v46 = off_1008D5F28;
            unint64_t v47 = sub_1003A2940((unsigned __int8 *)a2);
            sub_1005C8684((uint64_t)v46, v47, 0, 0, 0LL, 0LL, (unsigned __int8 *)v62);
            uint64_t v48 = sub_100241F94((const unsigned __int8 *)v62);
            uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
            v62[0] = 0LL;
            v62[1] = 0LL;
            char v58 = 16;
            unint64_t v57 = 0LL;
            if (qword_1008D5F20 != -1) {
              dispatch_once(&qword_1008D5F20, &stru_1008948D0);
            }
            sub_10062D968(qword_1008D5F18, v49, v62, &v58, &v57);
            if (qword_1008D5F30 != -1) {
              dispatch_once(&qword_1008D5F30, &stru_1008948F0);
            }
            uint64_t v50 = off_1008D5F28;
            unint64_t v51 = sub_1003A2940(a3);
            sub_1005C8684((uint64_t)v50, v51, 0, 0, 0LL, 0LL, (unsigned __int8 *)v61);
            uint64_t v52 = sub_100241F94((const unsigned __int8 *)v61);
            int v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
            v61[0] = 0LL;
            v61[1] = 0LL;
            char v56 = 16;
            unint64_t v55 = 0LL;
            if (qword_1008D5F20 != -1) {
              dispatch_once(&qword_1008D5F20, &stru_1008948D0);
            }
            sub_10062D968(qword_1008D5F18, v53, v61, &v56, &v55);
            uint64_t v54 = (unsigned __int16)(v37 ^ v36);
            (*(void (**)(void, uint64_t, unsigned __int8 *, uint64_t, uint64_t *, void **, void *, void))(*(void *)a1[11] + 8LL))( a1[11],  a2,  a3,  v54,  &v63,  v67,  v61,  *a1);
            (*(void (**)(void, unsigned __int8 *, uint64_t, uint64_t, uint64_t *, void **, void *, void))(*(void *)a1[11] + 8LL))( a1[11],  a3,  a2,  v54,  &v63,  v67,  v62,  *a1);
          }
        }
      }
    }
  }

  return sub_100242FAC((uint64_t)v60);
}

void sub_1003A28E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1003A2940(unsigned __int8 *a1)
{
  return ((unint64_t)*a1 << 40) | ((unint64_t)a1[1] << 32) | ((unint64_t)a1[2] << 24) | ((unint64_t)a1[3] << 16) | ((unint64_t)a1[4] << 8) | a1[5];
}

uint64_t sub_1003A2974(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  size_t v8 = (os_log_s *)qword_1008F7728;
  if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
  {
    if (a4) {
      unint64_t v9 = "Fail";
    }
    else {
      unint64_t v9 = "Success";
    }
    sub_1003FE1B4(a2, __p);
    if (v13 >= 0) {
      size_t v10 = __p;
    }
    else {
      size_t v10 = (void **)__p[0];
    }
    *(_DWORD *)__int128 buf = 136446466;
    int v15 = v9;
    __int16 v16 = 2080;
    BOOL v17 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Received bonding info store result %{public}s from device %s ",  buf,  0x16u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }

  return (*(uint64_t (**)(void, unsigned __int8 *, uint64_t, void))(**(void **)(a1 + 88) + 16LL))( *(void *)(a1 + 88),  a2,  a3,  2 * (a4 != 0));
}

uint64_t sub_1003A2AB0(uint64_t result, int a2, int a3)
{
  uint64_t v3 = *(void *)(result + 88);
  if (v3)
  {
    BOOL v5 = (unsigned __int8 *)result;
    if (a2)
    {
      size_t v6 = (os_log_s *)qword_1008F7728;
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003FE1B4(v5 + 72, v18);
        int v7 = v19;
        size_t v8 = (void **)v18[0];
        sub_1003FE1B4(v5 + 79, __p);
        unint64_t v9 = v18;
        if (v7 < 0) {
          unint64_t v9 = v8;
        }
        if (v17 >= 0) {
          size_t v10 = __p;
        }
        else {
          size_t v10 = (void **)__p[0];
        }
        *(_DWORD *)__int128 buf = 136315394;
        BOOL v21 = v9;
        __int16 v22 = 2080;
        __int16 v23 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sending easy unpair request to %s for device %s ",  buf,  0x16u);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
        uint64_t v3 = *((void *)v5 + 11);
      }

      uint64_t result = (*(uint64_t (**)(uint64_t, void *, unsigned __int8 *, void))(*(void *)v3 + 24LL))( v3,  (void *)v5 + 9,  v5 + 79,  *(void *)v5);
    }

    if (a3)
    {
      uint64_t v11 = (os_log_s *)qword_1008F7728;
      if (os_log_type_enabled((os_log_t)qword_1008F7728, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003FE1B4(v5 + 79, v18);
        int v12 = v19;
        char v13 = (void **)v18[0];
        sub_1003FE1B4(v5 + 72, __p);
        uint64_t v14 = v18;
        if (v12 < 0) {
          uint64_t v14 = v13;
        }
        if (v17 >= 0) {
          int v15 = __p;
        }
        else {
          int v15 = (void **)__p[0];
        }
        *(_DWORD *)__int128 buf = 136315394;
        BOOL v21 = v14;
        __int16 v22 = 2080;
        __int16 v23 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Sending easy unpair request to %s  for device %s ",  buf,  0x16u);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
      }

      return (*(uint64_t (**)(void, unsigned __int8 *, void *, void))(**((void **)v5 + 11) + 24LL))( *((void *)v5 + 11),  v5 + 79,  (void *)v5 + 9,  *(void *)v5);
    }
  }

  return result;
}

void sub_1003A2CD8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A2D00(uint64_t result, char a2)
{
  *(_BYTE *)(result + 97) = a2;
  return result;
}

uint64_t sub_1003A2D08(uint64_t result, char a2)
{
  *(_BYTE *)(result + 98) = a2;
  return result;
}

uint64_t sub_1003A2D10(uint64_t result)
{
  *(_BYTE *)(result + 99) = 1;
  return result;
}

uint64_t sub_1003A2D1C(uint64_t result)
{
  *(_BYTE *)(result + 99) = 0;
  return result;
}

uint64_t sub_1003A2D24(uint64_t result)
{
  *(_BYTE *)(result + 100) = 1;
  return result;
}

uint64_t sub_1003A2D30(uint64_t result)
{
  *(_BYTE *)(result + 100) = 0;
  return result;
}

uint64_t sub_1003A2D38(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 97);
}

uint64_t sub_1003A2D40(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 98);
}

uint64_t sub_1003A2D48(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 99);
}

id sub_1003A2D50(id *a1)
{
  return *a1;
}

uint64_t sub_1003A2D58(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 102);
}

uint64_t sub_1003A2D60(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 102) = a2;
  return result;
}

void sub_1003A2D68(id a1)
{
  uint64_t v1 = operator new(0xEB0uLL);
  sub_10061991C();
  qword_1008D5F18 = (uint64_t)v1;
}

void sub_1003A2D98(_Unwind_Exception *a1)
{
}

void sub_1003A2DAC(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_1003A2DDC(_Unwind_Exception *a1)
{
}

uint64_t sub_1003A2DF0(uint64_t result)
{
  *(void *)uint64_t result = 0LL;
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 16) = 0LL;
  return result;
}

void sub_1003A2E04(id *a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7710;
  if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v11 = "activate";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }

  uint64_t v3 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 8LL))(v3))
  {
    if ((_os_feature_enabled_impl("BluetoothFeatures", "BTVCLinkController") & 1) != 0)
    {
      if ((sub_100487FB4() & 1) != 0)
      {
        if (!*a1)
        {
          int v4 = (os_log_s *)qword_1008F7710;
          if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 136315138;
            uint64_t v11 = "activate";
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s: init", buf, 0xCu);
          }

          uint64_t v5 = objc_claimAutoreleasedReturnValue(+[BTVCLinkAgent sharedBTVCLinkAgent](&OBJC_CLASS___BTVCLinkAgent, "sharedBTVCLinkAgent"));
          id v6 = *a1;
          *a1 = (id)v5;

          [*a1 activate];
          v9[0] = _NSConcreteStackBlock;
          v9[1] = 3221225472LL;
          void v9[2] = sub_1003A3018;
          void v9[3] = &unk_100894910;
          void v9[4] = a1;
          [*a1 setAdvReportReceiveHandler:v9];
        }
      }

      else
      {
        size_t v8 = (os_log_s *)qword_1008F7710;
        if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_ERROR)) {
          sub_100676714(v8);
        }
      }
    }

    else
    {
      int v7 = (os_log_s *)qword_1008F7710;
      if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 136315138;
        uint64_t v11 = "activate";
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s: Bluetooth virtual link controller is disabled",  buf,  0xCu);
      }
    }
  }

void sub_1003A3018( uint64_t a1, int a2, int a3, uint64_t (*a4)(uint64_t a1, uint64_t (***a2)(void, void, void, void, void, void, void, void, char, void, char, void)), int a5, int a6, int a7, int a8, unsigned __int8 a9, unsigned __int16 a10, unsigned __int8 a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  int v18 = *(os_unfair_lock_s **)(a1 + 32);
  char v19 = (os_log_s *)qword_1008F7710;
  if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67111936;
    *(_DWORD *)&uint8_t buf[4] = a2;
    LOWORD(v24) = 1024;
    *(_DWORD *)((char *)&v24 + 2) = a3;
    HIWORD(v24) = 2048;
    char v25 = a4;
    LOWORD(v26) = 1024;
    *(_DWORD *)((char *)&v26 + 2) = a5;
    HIWORD(v26) = 1024;
    LODWORD(v27) = a6;
    WORD2(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 6) = a7;
    WORD5(v27) = 1024;
    HIDWORD(v27) = a8;
    LOWORD(v28) = 1024;
    *(_DWORD *)((char *)&v28 + 2) = a9;
    HIWORD(v28) = 1024;
    int v29 = a10;
    __int16 v30 = 1024;
    int v31 = a11;
    __int16 v32 = 2048;
    uint64_t v33 = a12;
    __int16 v34 = 1024;
    int v35 = a13;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "[BTVCLinkController] Receive ADV report: \n \tEventType:0x%04X, \n \tAddressType:0x%02X, \n \tPeerAddress:%llX, \n \tprimaryPHY:0x%02X, \n \tsecondaryPHY:0x%02X, \n \tadvertisingSID:0x%02X, \n \ttxPower:0x%02X, \n \trssi:0x%02X, \n \tperiodicAdvInterval:0x%02X, \n \tdirectAddressType:0x%02X, \n \tdirectAddress:0x%llX, \n \tDataLength:%d\n",  buf,  0x52u);
  }

  *(void *)__int128 buf = _NSConcreteStackBlock;
  uint64_t v24 = 3221225472LL;
  char v25 = sub_1003A3B84;
  int v26 = &unk_100894930;
  LOWORD(v29) = a2;
  LOBYTE(v30) = a3;
  HIBYTE(v30) = a5;
  LOBYTE(v31) = a6;
  BYTE1(v31) = a7;
  BYTE2(v31) = a8;
  HIBYTE(v31) = a9;
  HIWORD(v29) = a10;
  LOBYTE(v32) = a11;
  *(void *)&__int128 v27 = a4;
  *((void *)&v27 + 1) = a12;
  HIBYTE(v32) = a13;
  uint64_t v28 = a14;
  sub_1003A3AC8(v18 + 2, buf);
}

void sub_1003A3200(id *a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7710;
  if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "invalidate";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v4, 0xCu);
  }

  if (*a1)
  {
    [*a1 invalidate];
    id v3 = *a1;
    *a1 = 0LL;
  }

void sub_1003A32C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (os_log_s *)qword_1008F7710;
  if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    int v4 = "void BT::BTVCLinkController::addEventListener(BTVCLinkControllerListener *)";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v3, 0xCu);
  }

void sub_1003A336C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  int v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }

  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_1003A3BF8(a1 + 8, v4, (char *)&v6);
    sub_100008A30(a1 + 8);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1003A33F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (os_log_s *)qword_1008F7710;
  if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    int v4 = "void BT::BTVCLinkController::removeEventListener(BTVCLinkControllerListener *)";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v3, 0xCu);
  }

uint64_t sub_1003A34A0(id *a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7710;
  if (os_log_type_enabled((os_log_t)qword_1008F7710, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "uint8_t BT::BTVCLinkController::hciReset()";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v4, 0xCu);
  }

  if (*a1) {
    [*a1 reset];
  }
  return 0LL;
}

uint64_t sub_1003A3558(id *a1, uint64_t a2, uint64_t a3)
{
  int v9 = a3;
  __int16 v10 = WORD2(a3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", &v9, 6LL));
  if (a2 <= 5)
  {
    [v5 setObject:&off_1008C2AC8 forKeyedSubscript:@"at"];
    [v5 setObject:v6 forKeyedSubscript:@"pa"];
    if (*a1) {
      [*a1 leSetAdvertisingSetRandomAddress:a2 address:v5];
    }
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = 18LL;
  }

  return v7;
}

void sub_1003A3624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003A3640( id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, unsigned __int8 a11, unsigned __int8 a12, char a13, unsigned __int8 a14, unsigned __int8 a15)
{
  int v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  char v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", a3));
  char v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a12));
  BOOL v21 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a14));
  __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a15));
  __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a11));
  int v31 = -6700;
  uint64_t Int64 = CFPrefs_GetInt64(@"com.apple.bluetooth", @"btvcDefaultAdvRSSI", &v31);
  if (Int64 <= 127 && Int64 >= -128 && v31 == 0) {
    unsigned __int8 v27 = Int64;
  }
  else {
    unsigned __int8 v27 = -60;
  }
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v27));
  if (a2 <= 5)
  {

    [v18 setObject:v19 forKeyedSubscript:@"et"];
    [v18 setObject:v20 forKeyedSubscript:@"pPHY"];
    [v18 setObject:&off_1008C2AC8 forKeyedSubscript:@"sPHY"];
    [v18 setObject:v22 forKeyedSubscript:@"aSID"];
    [v18 setObject:v23 forKeyedSubscript:@"tp"];
    [v18 setObject:v28 forKeyedSubscript:@"rssi"];
    [v18 setObject:&off_1008C2AC8 forKeyedSubscript:@"pai"];
    [v18 setObject:&off_1008C2AC8 forKeyedSubscript:@"dat"];
    [v18 setObject:&off_1008C2AC8 forKeyedSubscript:@"da"];
    if (*a1) {
      [*a1 leSetExtendedAdvertisingParameters:a2 advertisingParameters:v18];
    }
    uint64_t v29 = 0LL;
    BOOL v21 = &off_1008C2AC8;
  }

  else
  {
    uint64_t v29 = 18LL;
  }

  return v29;
}

void sub_1003A3874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003A38D4(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int16 v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a5));
  int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a6, a5));
  if (a2 <= 5)
  {
    [v10 setObject:v11 forKeyedSubscript:@"dtl"];
    [v10 setObject:v12 forKeyedSubscript:@"data"];
    if (*a1) {
      [*a1 leSetExtendedAdvertisingData:a2 advertisingData:v10];
    }
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v13 = 18LL;
  }

  return v13;
}

void sub_1003A39B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003A39DC(id *a1, int a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v20 = v9;
  uint64_t v21 = v8;
  uint64_t v22 = v7;
  uint64_t v23 = v6;
  uint64_t v24 = v5;
  uint64_t v25 = v4;
  uint64_t v26 = v10;
  uint64_t v27 = v11;
  uint64_t result = (uint64_t)*a1;
  if (result)
  {
    if (a2 && (_DWORD)a3)
    {
      uint64_t v17 = a3;
      int v18 = a4;
      while (1)
      {
        unsigned int v19 = *v18++;
        if (!--v17)
        {
          uint64_t result = (uint64_t)*a1;
          goto LABEL_10;
        }
      }
    }

    else
    {
LABEL_10:
      [(id)result leSetExtendedAdvertisingEnable:a2 != 0 numSets:a3 advertisingHandles:a4];
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1003A3A78(id *a1, int a2)
{
  uint64_t result = (uint64_t)*a1;
  if (result)
  {
    if ([(id)result isScanningEnabled] == a2)
    {
      return 12LL;
    }

    else
    {
      [*a1 leSetExtendedScanEnable:a2 != 0];
      return 0LL;
    }
  }

  return result;
}

void sub_1003A3AC8(os_unfair_lock_s *a1, void *a2)
{
  int v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_1003A3B5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003A3B84( uint64_t a1, uint64_t (***a2)(void, void, void, void, void, void, void, void, char, void, char, void))
{
  char v6 = *(_BYTE *)(a1 + 67);
  char v5 = *(_BYTE *)(a1 + 66);
  __int16 v4 = *(_WORD *)(a1 + 58);
  char v3 = *(_BYTE *)(a1 + 65);
  return (**a2)( a2,  *(unsigned __int16 *)(a1 + 56),  *(unsigned __int8 *)(a1 + 60),  *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 61),  *(unsigned __int8 *)(a1 + 62),  *(unsigned __int8 *)(a1 + 63),  *(unsigned __int8 *)(a1 + 64),  v3,  *(void *)(a1 + 40),  v6,  *(void *)(a1 + 48));
}

char *sub_1003A3BF8(uint64_t a1, char *__src, char *a3)
{
  char v3 = a3;
  __int16 v4 = __src;
  char v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      unsigned int v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      unsigned int v19 = 0LL;
    }
    uint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    uint64_t v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)sub_100008BA0(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        uint64_t v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }

    *(void *)uint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    __int16 v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__std::string src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }

  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)__int16 v4 = *(void *)v3;
  }

  return v4;
}

void sub_1003A3DFC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A3E34(uint64_t a1, __int16 a2, uint64_t a3)
{
  *(_OWORD *)(v6 + 224) = 0u;
  *(_BYTE *)(v6 + 216) = 0;
  *(void *)(v6 + 280) = 0LL;
  *(void *)(v6 + 328) = 0LL;
  *(_DWORD *)(v6 + 302) = 0;
  *(_DWORD *)(v6 + 292) = 0;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 252) = 0u;
  *(_WORD *)(v6 + 200) = a2;
  *(void *)(v6 + 208) = a3;
  *(_BYTE *)(v6 + 300) = 0;
  *(_BYTE *)(v6 + 312) = 0;
  *(_DWORD *)(v6 + 316) = 1065353216;
  *(_DWORD *)(v6 + 308) = 150;
  *(_WORD *)(v6 + 322) = 0;
  *(_BYTE *)(v6 + 324) = 0;
  unint64_t v7 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO))
  {
    sub_1003CF00C(a3, __p);
    if (v11 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    *(_DWORD *)__int128 buf = 136446210;
    uint64_t v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Created new stream config for device %{public}s",  buf,  0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }

  *(void *)(a1 + 344) = 0LL;
  *(void *)(a1 + 352) = 0LL;
  *(void *)(a1 + 360) = 0LL;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return a1;
}

void sub_1003A3F8C(_Unwind_Exception *a1)
{
  __int16 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 232) = v4;
    operator delete(v4);
  }

  sub_1003A80E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A3FB4(uint64_t a1)
{
  *(_BYTE *)(a1 + 352) = 0;
  *(void *)(a1 + 344) = 0LL;
  sub_1003A5A68(a1);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(void *)(a1 + 232) = v2;
    operator delete(v2);
  }

  return sub_1003A80E0(a1);
}

uint64_t sub_1003A400C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 232);
  if (*(void *)(a1 + 224) == v1) {
    return 0LL;
  }
  else {
    return *(unsigned int *)(v1 - 4);
  }
}

BOOL sub_1003A4028(uint64_t a1, int a2)
{
  uint64_t v2 = *(_DWORD **)(a1 + 224);
  char v3 = *(_DWORD **)(a1 + 232);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        uint64_t v2 = *(_DWORD **)(a1 + 232);
        return v2 != v3;
      }
    }
  }

  return v2 != v3;
}

void sub_1003A405C(uint64_t a1, int a2)
{
  __int16 v4 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int16 *)(a1 + 200);
    v18[0] = 67109376;
    v18[1] = a2;
    __int16 v19 = 1024;
    int v20 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Set stream handle %d for a2dpHandle %d",  (uint8_t *)v18,  0xEu);
  }

  unint64_t v6 = *(void *)(a1 + 240);
  unint64_t v7 = *(char **)(a1 + 232);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *(char **)(a1 + 224);
    uint64_t v10 = (v7 - v9) >> 2;
    unint64_t v11 = v10 + 1;
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      unint64_t v14 = (char *)sub_10024E33C(a1 + 240, v13);
      uint64_t v9 = *(char **)(a1 + 224);
      unint64_t v7 = *(char **)(a1 + 232);
    }

    else
    {
      unint64_t v14 = 0LL;
    }

    uint64_t v15 = &v14[4 * v10];
    uint64_t v16 = &v14[4 * v13];
    *(_DWORD *)uint64_t v15 = a2;
    uint64_t v8 = v15 + 4;
    while (v7 != v9)
    {
      int v17 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v17;
      v15 -= 4;
    }

    *(void *)(a1 + 224) = v15;
    *(void *)(a1 + 232) = v8;
    *(void *)(a1 + 240) = v16;
    if (v9) {
      operator delete(v9);
    }
  }

  else
  {
    *(_DWORD *)unint64_t v7 = a2;
    uint64_t v8 = v7 + 4;
  }

  *(void *)(a1 + 232) = v8;
}

uint64_t sub_1003A41D0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int16 *)(a1 + 200);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Getting current channel info for a2dpHandle %d",  (uint8_t *)v5,  8u);
  }

  return a1 + 152;
}

uint64_t sub_1003A4278(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 156);
    v11[0] = 67109120;
    v11[1] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Getting supports delay reporting for remote seid %d",  (uint8_t *)v11,  8u);
  }

  unint64_t v5 = *(unsigned int *)(a1 + 344);
  if ((_DWORD)v5)
  {
    uint64_t v3 = *(void *)(a1 + 360);
    int v6 = *(_DWORD *)(a1 + 156);
    if (*(_DWORD *)(v3 + 4) == v6)
    {
      unint64_t v7 = 0LL;
      LODWORD(v5) = 1;
LABEL_10:
      LODWORD(v3) = *(unsigned __int8 *)(v3 + 32 * v7 + 24) != 0;
    }

    else
    {
      unint64_t v7 = 0LL;
      uint64_t v8 = (int *)(v3 + 36);
      while (v5 - 1 != v7)
      {
        int v9 = *v8;
        v8 += 8;
        ++v7;
        if (v9 == v6)
        {
          LODWORD(v5) = v7 < v5;
          goto LABEL_10;
        }
      }

      LODWORD(v5) = 0;
    }
  }

  return v5 & v3;
}

uint64_t sub_1003A438C(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 302) = a2;
  return result;
}

uint64_t sub_1003A4394(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 302);
}

uint64_t sub_1003A439C(uint64_t a1)
{
  int v2 = sub_1003D062C(*(void *)(a1 + 208));
  uint64_t v3 = 1LL;
  switch(v2)
  {
    case 0:
      unsigned int v4 = sub_1003D0268(*(void *)(a1 + 208));
      if (v4 > 0x17) {
        goto LABEL_26;
      }
      if (((1 << v4) & 0x150000) != 0)
      {
        int v9 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device type is headset", buf, 2u);
        }

        uint64_t v3 = 1LL;
      }

      else if (((1 << v4) & 0xA80000) != 0)
      {
        unint64_t v5 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Device type is speaker", buf, 2u);
        }

        uint64_t v3 = 3LL;
      }

      else if (((1 << v4) & 0x420000) != 0)
      {
        uint64_t v10 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          uint64_t v3 = 2LL;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device type is carkit", buf, 2u);
        }

        else
        {
          uint64_t v3 = 2LL;
        }
      }

      else
      {
LABEL_26:
        unint64_t v11 = (os_log_s *)qword_1008F7558;
        uint64_t v3 = 0LL;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device type is unknown", buf, 2u);
          uint64_t v3 = 0LL;
        }
      }

      uint64_t v12 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(*(void *)(a1 + 208), buf);
        unint64_t v13 = SHIBYTE(v23) >= 0 ? buf : *(uint8_t **)buf;
        LODWORD(__p) = 67109378;
        HIDWORD(__p) = v3;
        __int16 v16 = 2082;
        int v17 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "User selected device type is unknown. Returning device type as %d for device %{public}s.",  (uint8_t *)&__p,  0x12u);
        if (SHIBYTE(v23) < 0)
        {
          uint64_t v8 = *(void **)buf;
          goto LABEL_19;
        }
      }

      break;
    case 1:
      uint64_t v3 = 2LL;
      goto LABEL_13;
    case 2:
      goto LABEL_13;
    case 3:
      uint64_t v3 = 4LL;
      goto LABEL_13;
    case 4:
      uint64_t v3 = 3LL;
      goto LABEL_13;
    case 5:
      uint64_t v3 = 5LL;
      goto LABEL_13;
    default:
      uint64_t v3 = 0LL;
LABEL_13:
      int v6 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(*(void *)(a1 + 208), &__p);
        unint64_t v7 = v18 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)__int128 buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v2;
        __int16 v20 = 1024;
        int v21 = v3;
        __int16 v22 = 2082;
        uint64_t v23 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "User selected device type is %d. Returning device type as %d for device %{public}s.",  buf,  0x18u);
        if (v18 < 0)
        {
          uint64_t v8 = __p;
LABEL_19:
          operator delete(v8);
        }
      }

      break;
  }

  return v3;
}

uint64_t sub_1003A46D4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 176) == 255 && (uint64_t v2 = sub_1003A4724(a1, 255)) != 0 && sub_1003A47B8(v2, *(void *)(v2 + 16))) {
    return 33023LL;
  }
  else {
    return *(unsigned int *)(a1 + 176);
  }
}

uint64_t sub_1003A4724(uint64_t a1, int a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 344);
  if (!(_DWORD)v2) {
    return 0LL;
  }
  uint64_t v4 = a1;
  uint64_t v5 = 0LL;
  unint64_t v6 = 0LL;
  while (1)
  {
    uint64_t v7 = *(void *)(v4 + 360);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + v5 + 16);
      if (v8)
      {
        int v9 = *(unsigned __int8 *)(v8 + 2);
        if (v9 == a2) {
          return v7 + v5;
        }
        if (v9 == 255) {
          break;
        }
      }
    }

BOOL sub_1003A47B8(uint64_t a1, uint64_t a2)
{
  if (a2 && *(unsigned __int8 *)(a2 + 3) > 0xDu)
  {
    unint64_t v2 = *(_BYTE **)(a2 + 8);
    if (*v2 == 76
      && !v2[1]
      && !v2[2]
      && !v2[3]
      && v2[4] == 1
      && v2[5] == 128
      && (char)v2[7] < 0
      && (~v2[9] & 0x84) == 0)
    {
      return 1LL;
    }
  }

  else
  {
    uint64_t v4 = (os_log_s *)qword_1008F7558;
    BOOL result = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_100676794(v4, v5, v6, v7, v8, v9, v10, v11);
  }

  return 0LL;
}

uint64_t sub_1003A4868(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5 = result;
  int v6 = *(unsigned __int8 *)(a2 + 2);
  if (v6 == 255)
  {
    BOOL result = sub_1003A47B8(result, a2);
    if (!(_DWORD)result) {
      goto LABEL_6;
    }
    char v7 = -1;
  }

  else
  {
    char v7 = *(_BYTE *)(result + 352) | v6;
  }

  *(_BYTE *)(v5 + 352) = v7;
LABEL_6:
  unint64_t v8 = *(unsigned int *)(v5 + 344);
  if ((_DWORD)v8)
  {
    unint64_t v9 = 0LL;
    uint64_t v10 = 16LL;
    do
    {
      if (*(_DWORD *)(*(void *)(v5 + 360) + v10 - 12) == a3)
      {
        uint64_t v11 = calloc(1uLL, 0x10uLL);
        *(void *)(*(void *)(v5 + 360) + v10) = v11;
        *uint64_t v11 = *(_OWORD *)a2;
        *(void *)(*(void *)(*(void *)(v5 + 360) + v10) + 8LL) = calloc(*(unsigned __int8 *)(a2 + 3), 1uLL);
        BOOL result = (uint64_t)memcpy( *(void **)(*(void *)(*(void *)(v5 + 360) + v10) + 8LL),  *(const void **)(a2 + 8),  *(unsigned __int8 *)(a2 + 3));
        unint64_t v8 = *(unsigned int *)(v5 + 344);
      }

      ++v9;
      v10 += 32LL;
    }

    while (v9 < v8);
  }

  return result;
}

uint64_t sub_1003A494C(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  char v7 = (os_log_s *)qword_1008F7558;
  uint64_t v8 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO);
  if ((_DWORD)v8)
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Parsing Audio Codec ID and information for seid %d",  (uint8_t *)&buf,  8u);
  }

  if (a2)
  {
    uint64_t v9 = 0LL;
    uint64_t v23 = a2;
    do
    {
      uint64_t v10 = (unsigned __int8 *)(a3 + 16 * v9);
      int v11 = *v10;
      if (v11 == 7)
      {
        if (!v10[1])
        {
          memset(&buf, 0, sizeof(buf));
          sub_10002418C(&buf, "Unknown");
          unsigned int v17 = v10[2];
          if (v17 > 1)
          {
            if (v17 == 2)
            {
              sub_1003A4868(a1, (uint64_t)v10, a4);
              char v18 = "MPEG-2,4 AAC";
            }

            else
            {
              if (v17 != 255) {
                goto LABEL_34;
              }
              sub_1003A4868(a1, (uint64_t)v10, a4);
              char v18 = "VENDOR-SPECIFIC";
            }
          }

          else
          {
            if (v10[2])
            {
              if (v17 == 1)
              {
                sub_1003A4868(a1, (uint64_t)v10, a4);
                char v18 = "MPEG-1,2";
                goto LABEL_25;
              }

void sub_1003A4C98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1003A4CBC(uint64_t a1, uint64_t a2)
{
  char v5 = 0;
  sub_100242CA4(&v5);
  nullsub_63(a2, v3);
  sub_100242CD0(&v5);
  return sub_100242CD8(&v5);
}

void sub_1003A4D04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1003A4D18(uint64_t a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  *(_DWORD *)(a1 + 348) = a6;
  *(_DWORD *)(a1 + 344) = a6;
  *(_BYTE *)(a1 + 352) = 0;
  unint64_t v14 = *(void **)(a1 + 360);
  if (v14)
  {
    free(v14);
    unsigned int v15 = *(_DWORD *)(a1 + 344);
  }

  else
  {
    unsigned int v15 = a6;
  }

  __int16 v16 = calloc(v15, 0x20uLL);
  *(void *)(a1 + 360) = v16;
  v16[1] = a3;
  *((void *)v16 + 1) = 1LL;
  *(_BYTE *)__int16 v16 = 1;
  sub_1003A494C(a1, a6, a5, a3);
  int v17 = sub_1003A576C(a1);
  *(_DWORD *)(a1 + 176) = v17;
  char v18 = (int *)(a1 + 176);
  uint64_t v19 = sub_1003A4724(a1, v17);
  if (!v19)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_1006767C4();
    }
    return 1LL;
  }

  if (!a7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100676874();
    }
    return 1LL;
  }

  uint64_t v20 = v19;
  if (*v18) {
    goto LABEL_7;
  }
  if ((**(_BYTE **)(*(void *)(v19 + 16) + 8LL) & 0xF0 & **(_BYTE **)(*(void *)(a7 + 16) + 24LL) & 0xF0) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100676924();
    }
    return 3LL;
  }

  if ((**(_BYTE **)(*(void *)(v19 + 16) + 8LL) & 0xF & **(_BYTE **)(*(void *)(a7 + 16) + 24LL) & 0xF) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_10067698C();
    }
    return 3LL;
  }

void sub_1003A5730( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A576C(uint64_t a1)
{
  char v18 = 0;
  uint64_t v2 = sub_1002E6E00();
  uint64_t v3 = sub_1002E6E00();
  sub_10002418C(buf, "A2DP");
  sub_10002418C(__p, "DisableAAC");
  (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(void *)v3 + 72LL))(v3, buf, __p, &v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(*(void **)buf);
  }
  if (v18)
  {
    uint64_t v4 = 0LL;
    char v18 = 1;
  }

  else
  {
LABEL_8:
    uint64_t v5 = sub_1002E6BF0();
    char v18 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 784LL))(v5);
    if ((v18 & 1) != 0) {
      uint64_t v4 = 0LL;
    }
    else {
      uint64_t v4 = *(_BYTE *)(a1 + 352) & 2;
    }
  }

  unsigned __int8 v15 = 0;
  uint64_t v6 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 344LL))(v6))
  {
    int v7 = 1;
    unsigned __int8 v15 = 1;
  }

  else
  {
    int v7 = 0;
  }

  uint64_t v8 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 8LL))(v8))
  {
    uint64_t v9 = sub_1002E6E00();
    sub_10002418C(buf, "A2DP");
    sub_10002418C(__p, "DisableAACELD");
    (*(void (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(void *)v9 + 72LL))(v9, buf, __p, &v15);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(*(void **)buf);
    }
    int v7 = v15;
  }

  if (!v7)
  {
    if (*(_BYTE *)(a1 + 352))
    {
      uint64_t v12 = sub_1003A4724(a1, 255);
      if (v12)
      {
        if (sub_1003A47B8(v12, *(void *)(v12 + 16))) {
          uint64_t v4 = 33023LL;
        }
        else {
          uint64_t v4 = v4;
        }
      }
    }
  }

  uint64_t v10 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    if ((int)v4 > 254)
    {
      if ((_DWORD)v4 == 255)
      {
        int v11 = "Unknown AVDTP_CODEC_VENDOR_SPECIFIC";
        goto LABEL_37;
      }

      if ((_DWORD)v4 == 33023)
      {
        int v11 = "AVDTP_CODEC_APPLE_AACELD";
        goto LABEL_37;
      }
    }

    else
    {
      if (!(_DWORD)v4)
      {
        int v11 = "AVDTP_CODEC_SBC";
        goto LABEL_37;
      }

      if ((_DWORD)v4 == 2)
      {
        int v11 = "AVDTP_CODEC_MPEG_AAC";
LABEL_37:
        int v13 = *(_DWORD *)(a1 + 348);
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = v11;
        __int16 v20 = 1024;
        int v21 = v4;
        __int16 v22 = 1024;
        int v23 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Selected preferred codec %s (0x%0x) out of %d available endpoints",  buf,  0x18u);
        return v4;
      }
    }

    int v11 = "Unknown AVDTP codec";
    goto LABEL_37;
  }

  return v4;
}

void sub_1003A5A24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003A5A68(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 184);
  if (v2)
  {
    if (v2[1])
    {
      free(v2[1]);
      uint64_t v2 = *(void ***)(a1 + 184);
    }

    if (v2[3])
    {
      free(v2[3]);
      uint64_t v2 = *(void ***)(a1 + 184);
    }

    free(v2);
    *(void *)(a1 + 184) = 0LL;
  }

double sub_1003A5ABC(uint64_t a1, int a2)
{
  unsigned int v27 = 0;
  uint64_t v4 = sub_1002E6E00();
  sub_10002418C(buf, "A2DP");
  sub_10002418C(__p, "SampleRate");
  int v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned int *))(*(void *)v4 + 128LL))( v4,  buf,  __p,  &v27);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v29) < 0)
  {
    operator delete(*(void **)buf);
    if (!v5) {
      goto LABEL_14;
    }
  }

  else if (!v5)
  {
    goto LABEL_14;
  }

  uint64_t v6 = v27;
  if (v27 != 48000 && v27 != 44100)
  {
    uint64_t v9 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100676AF8(v6, v9, v10, v11, v12, v13, v14, v15);
    }
LABEL_14:
    uint64_t v36 = 0LL;
    __int128 v35 = 0u;
    memset(v34, 0, sizeof(v34));
    __int128 v32 = 0u;
    *(_OWORD *)uint64_t v33 = 0u;
    __int128 v30 = 0u;
    *(_OWORD *)char v31 = 0u;
    *(_OWORD *)std::string buf = 0u;
    __int128 v29 = 0u;
    sub_100532DC0((uint64_t)&buf[1]);
    BYTE2(v29) = 0;
    BYTE4(v29) = 0;
    BYTE2(v31[0]) = 0;
    BYTE4(v31[0]) = 0;
    DWORD1(v34[1]) = 0;
    __int128 v30 = 0uLL;
    *((void *)&v29 + 1) = 0LL;
    LOBYTE(v31[0]) = 0;
    __int128 v32 = 0uLL;
    v31[1] = 0LL;
    LOBYTE(v33[0]) = 0;
    memset(v34, 0, 19);
    v33[1] = 0LL;
    BYTE8(v34[1]) = 1;
    BYTE2(v36) = 0;
    *(void *)((char *)&v34[1] + 14) = 0LL;
    *(void *)((char *)&v34[1] + 9) = 0LL;
    __int128 v35 = 0uLL;
    *((void *)&v34[2] + 1) = 0LL;
    LOBYTE(v36) = 0;
    sub_1003D2408(*(void *)(a1 + 208), (uint64_t)buf);
    char v24 = 0;
    uint64_t v16 = sub_1002E6E00();
    sub_10002418C(__p, "A2DP");
    sub_10002418C(v22, "Default48KHz");
    (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v16 + 72LL))(v16, __p, v22, &v24);
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v24)
    {
      char v17 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Warning: GetPreferredSampleRate: Defaulting to 48 KHz based on defaults write - using denylist instead of allowlist",  (uint8_t *)__p,  2u);
      }

      double v8 = 48000.0;
      if (a2 != 2) {
        goto LABEL_30;
      }
      if (!BYTE8(v35)) {
        goto LABEL_30;
      }
      uint64_t v19 = (os_log_s *)qword_1008F7558;
      double v8 = 44100.0;
      if (!os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_30;
      }
      LOWORD(__p[0]) = 0;
      __int16 v20 = "GetPreferredSampleRate: Reducing sample rate - Device is in 48 KHz denylist";
    }

    else if (BYTE9(v35) || sub_1003D2AF4(*(void *)(a1 + 208)))
    {
      uint64_t v19 = (os_log_s *)qword_1008F7558;
      double v8 = 48000.0;
      if (!os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
LABEL_30:
        if (SHIBYTE(v34[0]) < 0) {
          operator delete(v33[1]);
        }
        if (SHIBYTE(v32) < 0) {
          operator delete(v31[1]);
        }
        if (SHIBYTE(v30) < 0) {
          operator delete(*((void **)&v29 + 1));
        }
        nullsub_63(&buf[1], v18);
        return v8;
      }

      LOWORD(__p[0]) = 0;
      __int16 v20 = "GetPreferredSampleRate: Device is in 48 KHz allowlist";
    }

    else
    {
      uint64_t v19 = (os_log_s *)qword_1008F7558;
      double v8 = 44100.0;
      if (!os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_30;
      }
      LOWORD(__p[0]) = 0;
      __int16 v20 = "GetPreferredSampleRate: Reducing sample rate - Device is NOT in 48 KHz allowlist";
    }

    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)__p, 2u);
    goto LABEL_30;
  }

  int v7 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Warning: GetPreferredSampleRate: Setting user defined A2DP Sample Rate to %d Hz",  buf,  8u);
    LODWORD(v6) = v27;
  }

  return (double)v6;
}

void sub_1003A5EAC( _Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_1002071FC((uint64_t)&a23, a2);
  _Unwind_Resume(a1);
}

void sub_1003A5F30(uint64_t a1)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100894950);
  }
  int v2 = sub_100401FDC((uint64_t)off_1008D5F48);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100894970);
  }
  __int16 v13 = 0;
  unsigned int v3 = sub_1005D8A0C((uint64_t)off_1008D5F28) + v2;
  __int16 v12 = 0;
  char v11 = 0;
  int v10 = 0;
  uint64_t v4 = sub_1002E8D54();
  (*(void (**)(uint64_t, char *, __int16 *, char *, __int16 *, char *, int *))(*(void *)v4 + 48LL))( v4,  (char *)&v13 + 1,  &v13,  (char *)&v12 + 1,  &v12,  &v11,  &v10);
  if (v3 > 2 || v3 == 2 && HIBYTE(v13))
  {
    int v5 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Adjusting SBC bitpool to to 37 either due to > 2 Hid's or wifi state is 2.4 Ghz with >1 Hid",  buf,  2u);
    }

    int v6 = 37;
LABEL_11:
    *(_DWORD *)(a1 + 264) = v6;
    return;
  }

  if (HIBYTE(v13))
  {
    int v7 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)double v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Adjusting SBC bitpool to 42, wifi state is 2.4 Ghz",  v8,  2u);
    }

    int v6 = 42;
    goto LABEL_11;
  }

uint64_t sub_1003A60AC(uint64_t a1)
{
  uint64_t v14 = 0LL;
  __int128 v13 = 0u;
  memset(v12, 0, sizeof(v12));
  __int128 v10 = 0u;
  *(_OWORD *)std::string __p = 0u;
  __int128 v8 = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  __int128 v6 = 0u;
  *(_OWORD *)int v7 = 0u;
  sub_100532DC0((uint64_t)&v6 + 1);
  BYTE2(v7[0]) = 0;
  BYTE4(v7[0]) = 0;
  BYTE2(v9[0]) = 0;
  BYTE4(v9[0]) = 0;
  DWORD1(v12[1]) = 0;
  __int128 v8 = 0uLL;
  v7[1] = 0LL;
  LOBYTE(v9[0]) = 0;
  __int128 v10 = 0uLL;
  v9[1] = 0LL;
  LOBYTE(__p[0]) = 0;
  memset(v12, 0, 19);
  __p[1] = 0LL;
  BYTE8(v12[1]) = 1;
  BYTE2(v14) = 0;
  *(void *)((char *)&v12[1] + 14) = 0LL;
  *(void *)((char *)&v12[1] + 9) = 0LL;
  __int128 v13 = 0uLL;
  *((void *)&v12[2] + 1) = 0LL;
  LOBYTE(v14) = 0;
  uint64_t v3 = *(void *)(a1 + 208);
  if (v3)
  {
    if (sub_1003D2408(v3, (uint64_t)&v6))
    {
      char v4 = BYTE12(v12[1]);
      if (HIDWORD(v12[1]))
      {
        *(_DWORD *)(a1 + 264) = HIDWORD(v12[1]);
        *(_BYTE *)(*(void *)(*(void *)(a1 + 184) + 24LL) + 3LL) = v4;
      }
    }
  }

  if (SHIBYTE(v12[0]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[1]);
  }
  return nullsub_63((char *)&v6 + 1, v2);
}

void sub_1003A61E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1003A6200(uint64_t a1, uint64_t a2)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  uint64_t v5 = 0LL;
  sub_1003A7C20(a1, a2, (uint64_t)v4);
  unint64_t v2 = v5 - 96000;
  return v2 < 0x24608;
}

uint64_t sub_1003A62A8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(_DWORD *)(a1 + 348) = a3;
  *(_DWORD *)(a1 + 344) = 0;
  unsigned int v5 = 0;
  if (a3)
  {
    uint64_t v6 = a3;
    int v7 = (_BYTE *)(a2 + 3);
    do
    {
      v7 += 4;
      --v6;
    }

    while (v6);
  }

  *(_BYTE *)(a1 + 352) = 0;
  __int128 v8 = *(void **)(a1 + 360);
  if (v8)
  {
    free(v8);
    unsigned int v5 = *(_DWORD *)(a1 + 344);
  }

  *(void *)(a1 + 360) = calloc(v5, 0x20uLL);
  uint64_t v9 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO))
  {
    int v10 = *(_DWORD *)(a1 + 344);
    *(_DWORD *)std::string buf = 67109120;
    int v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Available endpoints: %d", buf, 8u);
  }

  unint64_t v11 = *(unsigned int *)(a1 + 348);
  if ((_DWORD)v11)
  {
    unint64_t v12 = 0LL;
    unsigned int v13 = 0;
    uint64_t v14 = (_BYTE *)(a2 + 3);
    do
    {
      int v15 = *(v14 - 1);
      if (v15 != 255 && !*(v14 - 3) && *(v14 - 2) == 1 && !*v14)
      {
        uint64_t v16 = *(void *)(a1 + 360) + 32LL * v13;
        *(_DWORD *)(v16 + 4) = v15;
        *(void *)(v16 + 8) = 1LL;
        *(_BYTE *)uint64_t v16 = 0;
        char v17 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 67111168;
          int v20 = v12;
          __int16 v21 = 1024;
          int v22 = v15;
          __int16 v23 = 1024;
          int v24 = 0;
          __int16 v25 = 1024;
          int v26 = 1;
          __int16 v27 = 1024;
          unsigned int v28 = v13;
          __int16 v29 = 1024;
          int v30 = v15;
          __int16 v31 = 1024;
          int v32 = 0;
          __int16 v33 = 1024;
          int v34 = 1;
          __int16 v35 = 1024;
          int v36 = 0;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "SaveDiscoveredPeerEndpoints Current Record = %d, seid = %d, inUse = %d, endpointType = %d, Endpoint saved: s treamEndpointInfo = %d, seid = %d, inUse = %d, endpointType = %d, queryDone = %d",  buf,  0x38u);
          unint64_t v11 = *(unsigned int *)(a1 + 348);
        }

        ++v13;
      }

      ++v12;
      v14 += 4;
    }

    while (v12 < v11);
  }

  return 0LL;
}

void sub_1003A6508(uint64_t a1)
{
  unint64_t v2 = *(unsigned int *)(a1 + 344);
  uint64_t v3 = *(char **)(a1 + 360);
  if ((_DWORD)v2)
  {
    unint64_t v4 = 0LL;
    uint64_t v5 = 16LL;
    uint64_t v6 = v3;
    do
    {
      if (v6)
      {
        uint64_t v7 = *(void *)&v6[v5];
        if (v7)
        {
          if (*(void *)(v7 + 8))
          {
            free(*(void **)(v7 + 8));
            uint64_t v3 = *(char **)(a1 + 360);
          }

          free(*(void **)&v3[v5]);
          uint64_t v3 = *(char **)(a1 + 360);
          *(void *)&v3[v5] = 0LL;
          unint64_t v2 = *(unsigned int *)(a1 + 344);
          uint64_t v6 = v3;
        }
      }

      ++v4;
      v5 += 32LL;
    }

    while (v4 < v2);
  }

  __int128 v8 = (void *)(a1 + 344);
  if (v3) {
    free(v3);
  }
  *__int128 v8 = 0LL;
  v8[1] = 0LL;
  _DWORD v8[2] = 0LL;
}

uint64_t sub_1003A65A0(uint64_t a1, uint64_t a2)
{
  int v4 = sub_1003A576C(a1);
  *(_DWORD *)(a1 + 176) = v4;
  uint64_t v5 = sub_1003A4724(a1, v4);
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100676BC8();
    }
    return 0LL;
  }

  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100676C2C();
    }
    return 0LL;
  }

  uint64_t v6 = v5;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(v5 + 4);
  sub_1003A5A68(a1);
  *(_DWORD *)(a1 + 196) = 3;
  uint64_t v7 = calloc(3uLL, 0x10uLL);
  *(void *)(a1 + 184) = v7;
  _BYTE *v7 = 1;
  *(_BYTE *)(*(void *)(a1 + 184) + 16LL) = 7;
  *(_BYTE *)(*(void *)(a1 + 184) + 17LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 184) + 18LL) = *(_DWORD *)(a1 + 176);
  *(_BYTE *)(*(void *)(a1 + 184) + 19LL) = *(_BYTE *)(*(void *)(a2 + 16) + 19LL);
  *(void *)(*(void *)(a1 + 184) + 24LL) = calloc(*(unsigned __int8 *)(*(void *)(a2 + 16) + 19LL), 1uLL);
  *(_BYTE *)(*(void *)(a1 + 184) + 32LL) = 8;
  *(_BYTE *)(a1 + 192) = 1;
  memcpy( *(void **)(*(void *)(a1 + 184) + 24LL),  *(const void **)(*(void *)(a2 + 16) + 24LL),  *(unsigned __int8 *)(*(void *)(a2 + 16) + 19LL));
  double v8 = sub_1003A5ABC(a1, *(_DWORD *)(a1 + 176));
  *(double *)(a1 + 272) = v8;
  int v9 = *(_DWORD *)(a1 + 176);
  switch(v9)
  {
    case 255:
      uint64_t v23 = qword_1008F7558;
      BOOL v24 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT);
      if (!v24)
      {
LABEL_61:
        sub_1003A4CBC(v24, *(void *)(a1 + 184) + 16LL);
        return *(void *)(a1 + 184);
      }

      int v25 = *(_DWORD *)(a1 + 156);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v25;
      int v26 = "Selecting remote Vendor-Specific A2DP SEID %u";
      goto LABEL_31;
    case 2:
      *(_BYTE *)(*(void *)(*(void *)(a1 + 184) + 24LL) + 1LL) = v8 == 44100.0;
      else {
        char v27 = -124;
      }
      *(_BYTE *)(*(void *)(*(void *)(a1 + 184) + 24LL) + 2LL) = v27;
      if (sub_1003A6200(a1, *(void *)(*(void *)(v6 + 16) + 8LL)))
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 184) + 24LL) + 3LL) = *(_BYTE *)(*(void *)(*(void *)(v6 + 16) + 8LL)
                                                                               + 3LL);
        *(_BYTE *)(*(void *)(*(void *)(a1 + 184) + 24LL) + 4LL) = *(_BYTE *)(*(void *)(*(void *)(v6 + 16) + 8LL)
                                                                               + 4LL);
        *(_BYTE *)(*(void *)(*(void *)(a1 + 184) + 24LL) + 5LL) = *(_BYTE *)(*(void *)(*(void *)(v6 + 16) + 8LL)
                                                                               + 5LL);
      }

      uint64_t v23 = qword_1008F7558;
      BOOL v24 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT);
      if (!v24) {
        goto LABEL_61;
      }
      int v28 = *(_DWORD *)(a1 + 156);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v28;
      int v26 = "Selecting remote AAC SEID %u";
LABEL_31:
      __int16 v29 = (os_log_s *)v23;
      uint32_t v30 = 8;
LABEL_60:
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v26, buf, v30);
      goto LABEL_61;
    case 0:
      if (v8 == 44100.0) {
        unsigned int v10 = 48;
      }
      else {
        unsigned int v10 = 42;
      }
      *(_DWORD *)(a1 + 264) = v10;
      int v48 = 0;
      uint64_t v11 = sub_1002E6E00();
      sub_10002418C(buf, "A2DP");
      sub_10002418C(__p, "SBCBitpool");
      int v12 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v11 + 128LL))( v11,  buf,  __p,  &v48);
      if (v47 < 0) {
        operator delete(__p[0]);
      }
      if (v52 < 0) {
        operator delete(*(void **)buf);
      }
      if (v12)
      {
        int v13 = v48;
        uint64_t v14 = (os_log_s *)qword_1008F7558;
        if ((v48 - 251) > 0xFFFFFF06)
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Warning: Setting user defined SBC Bitpool value to %d",  buf,  8u);
            int v13 = v48;
          }

          *(_DWORD *)(a1 + 264) = v13;
        }

        else if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
        {
          sub_100676AC8(v14, v15, v16, v17, v18, v19, v20, v21);
        }
      }

      else
      {
        uint64_t v31 = sub_1002E6BF0();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v31 + 384LL))(v31))
        {
          int v32 = (os_log_s *)qword_1008F7558;
          if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Adjusting bitpool if needed - we are Central",  buf,  2u);
          }

          sub_1003A5F30(a1);
        }
      }

      uint64_t v33 = *(void *)(v6 + 16);
      unsigned int v34 = *(unsigned __int8 *)(*(void *)(v33 + 8) + 2LL);
      if (v10 >= v34)
      {
        if (*(_DWORD *)(a1 + 264) < v34)
        {
          int v36 = (os_log_s *)qword_1008F7558;
          if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v34;
            _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Warning: Increasing SBC Bitpool to %d based on sink's Minimum Bitpool Value",  buf,  8u);
            uint64_t v33 = *(void *)(v6 + 16);
            unsigned int v34 = *(unsigned __int8 *)(*(void *)(v33 + 8) + 2LL);
          }

          *(_DWORD *)(a1 + 264) = v34;
        }
      }

      else
      {
        __int16 v35 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v34;
          _os_log_error_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "Ignoring sink's SBC Minimum Bitpool Value of %d because it is too high",  buf,  8u);
          uint64_t v33 = *(void *)(v6 + 16);
        }
      }

      unsigned int v37 = *(unsigned __int8 *)(*(void *)(v33 + 8) + 3LL);
      if (v37 > 1)
      {
        if (*(_DWORD *)(a1 + 264) > v37)
        {
          BOOL v39 = (os_log_s *)qword_1008F7558;
          if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v37;
            _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Warning: Reducing SBC Bitpool to %d based on sink's Maximum Bitpool Value",  buf,  8u);
            uint64_t v33 = *(void *)(v6 + 16);
            unsigned int v37 = *(unsigned __int8 *)(*(void *)(v33 + 8) + 3LL);
          }

          *(_DWORD *)(a1 + 264) = v37;
        }
      }

      else
      {
        BOOL v38 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v37;
          _os_log_error_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "Ignoring sink's SBC Maximum Bitpool Value of %d because it is too low",  buf,  8u);
          uint64_t v33 = *(void *)(v6 + 16);
        }
      }

      uint64_t v40 = *(void *)(*(void *)(a1 + 184) + 24LL);
      unsigned int v41 = *(unsigned __int8 *)(*(void *)(v33 + 8) + 2LL);
      if (*(unsigned __int8 *)(v40 + 2) < v41)
      {
        *(_BYTE *)(v40 + 2) = v41;
        uint64_t v40 = *(void *)(*(void *)(a1 + 184) + 24LL);
      }

      *(_BYTE *)(v40 + 3) = *(_DWORD *)(a1 + 264);
      else {
        char v42 = 17;
      }
      **(_BYTE **)(*(void *)(a1 + 184) + 24LL) = v42;
      uint64_t v43 = qword_1008F7558;
      BOOL v24 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT);
      if (!v24) {
        goto LABEL_61;
      }
      int v44 = *(_DWORD *)(a1 + 156);
      int v45 = *(_DWORD *)(a1 + 264);
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v44;
      __int16 v50 = 1024;
      int v51 = v45;
      int v26 = "Selecting remote SBC SEID %u with bitpool %d";
      __int16 v29 = (os_log_s *)v43;
      uint32_t v30 = 14;
      goto LABEL_60;
  }

  return *(void *)(a1 + 184);
}

void sub_1003A6C44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A6C80(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 344);
  if (!(_DWORD)v1) {
    return 255LL;
  }
  int v3 = 0;
  uint64_t v4 = 0LL;
  uint64_t v5 = *(void *)(a1 + 360);
  uint64_t v6 = 32 * v1;
  while (*(_BYTE *)(v5 + v4))
  {
    v4 += 32LL;
    ++v3;
    if (v6 == v4) {
      return 255LL;
    }
  }

  *(_BYTE *)(v5 + v4) = 1;
  double v8 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *(_DWORD *)(v5 + v4 + 4);
    v10[0] = 67109632;
    v10[1] = v3;
    __int16 v11 = 1024;
    int v12 = v9;
    __int16 v13 = 1024;
    int v14 = 1;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "getNextSeidForGetCapQuery Position: %d seid: %d queryDone %d",  (uint8_t *)v10,  0x14u);
    uint64_t v5 = *(void *)(a1 + 360);
  }

  return *(unsigned int *)(v5 + v4 + 4);
}

uint64_t sub_1003A6D9C(uint64_t a1)
{
  uint64_t v2 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v2 + 792LL))(v2, 5LL))
  {
    int v3 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 67109120;
      unsigned int v14 = 60;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "A2DP Latency = %d ms for constant low latency",  (uint8_t *)&v13,  8u);
    }

    return 60000LL;
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 208);
    if (v5
      && sub_1003D2B2C(v5, 12)
      && (sub_1003D2B2C(*(void *)(a1 + 208), 13) & 1) == 0
      && !*(_DWORD *)(a1 + 292))
    {
      *(_DWORD *)(a1 + 292) = 150000;
    }

    uint64_t v4 = *(unsigned int *)(a1 + 292);
    if ((_DWORD)v4)
    {
      int v6 = *(unsigned __int8 *)(a1 + 304);
      uint64_t v7 = (os_log_s *)qword_1008F7558;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT);
      if (v6)
      {
        if (v8)
        {
          int v13 = 67109120;
          unsigned int v14 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "A2DP Latency = %d ms (DelayReport from accessory)",  (uint8_t *)&v13,  8u);
          return *(unsigned int *)(a1 + 292);
        }
      }

      else
      {
        if (v8)
        {
          unsigned int v11 = *(double *)(a1 + 280);
          int v13 = 67109632;
          unsigned int v14 = (v4 + v11) / 0x3E8;
          __int16 v15 = 1024;
          unsigned int v16 = v4 / 0x3E8;
          __int16 v17 = 1024;
          unsigned int v18 = v11 / 0x3E8;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "A2DP Latency = %d ms (%d ms DelayReport from accessory + %d ms RTP blocking)",  (uint8_t *)&v13,  0x14u);
          LODWORD(v4) = *(_DWORD *)(a1 + 292);
        }

        return (*(double *)(a1 + 280) + (double)v4);
      }
    }

    else
    {
      int v9 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v10 = *(_DWORD *)(a1 + 288) / 0x3E8u;
        int v13 = 67109120;
        unsigned int v14 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "A2DP Latency = %d ms (estimate) calculated based on RTP packet interval",  (uint8_t *)&v13,  8u);
      }

      return *(unsigned int *)(a1 + 288);
    }
  }

  return v4;
}

void sub_1003A7004(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Setting stream config delay report latency for %d",  (uint8_t *)v5,  8u);
  }

  *(_DWORD *)(a1 + 292) = a2;
}

void sub_1003A70B4(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = "not supported";
    if (a2) {
      uint64_t v5 = "supported";
    }
    int v6 = 136315138;
    uint64_t v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Setting absolute volume support to %s",  (uint8_t *)&v6,  0xCu);
  }

  *(_BYTE *)(a1 + 300) = a2;
}

void sub_1003A717C(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO))
  {
    int v8 = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Reported MTU = %d", (uint8_t *)&v8, 8u);
  }

  if (a2 >= 1004) {
    a2 = 1004;
  }
  if (a2 >= 680)
  {
    uint64_t v5 = sub_1002E6BF0();
  }

  int v6 = a2 - 16;
  *(_DWORD *)(a1 + 248) = v6;
  uint64_t v7 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO))
  {
    int v8 = 67109120;
    int v9 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Setting RTP frame length to %d",  (uint8_t *)&v8,  8u);
  }

void sub_1003A72AC(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 264);
  *(_BYTE *)(a2 + 2) = v2;
  unsigned int v3 = 2 * v2 + 13;
  double v4 = *(double *)(a1 + 272);
  *(_DWORD *)(a1 + 252) = v3;
  *(_DWORD *)(a1 + 256) = (v4 * (double)(8 * v3) * 0.0078125 / 1000.0);
  unsigned int v5 = *(_DWORD *)(a1 + 248);
  if (v5 / v3 >= 0xC) {
    unsigned int v6 = 12;
  }
  else {
    unsigned int v6 = v5 / v3;
  }
  *(_DWORD *)(a1 + 260) = v6;
  double v7 = (float)((float)((float)v6 * 1000000.0) * 128.0) / v4;
  *(double *)(a1 + 280) = v7;
  *(_DWORD *)(a1 + 288) = (v7 * 5.0);
  int v8 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 134219776;
    double v10 = v4 / 1000.0;
    __int16 v11 = 1024;
    int v12 = v2;
    __int16 v13 = 1024;
    unsigned int v14 = (v4 * (double)(8 * v3) * 0.0078125 / 1000.0);
    __int16 v15 = 1024;
    unsigned int v16 = v6;
    __int16 v17 = 1024;
    int v18 = 2 * v2 + 13;
    __int16 v19 = 1024;
    int v20 = v6 * v3;
    __int16 v21 = 1024;
    unsigned int v22 = v5;
    __int16 v23 = 2048;
    double v24 = v7 / 1000.0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "A2DP configured at %2.1f KHz. Codec: SBC, Bitpool: %d (%d kbps). %d frames * %d bytes = %d per RTP (max=%d) every %.2f ms",  (uint8_t *)&v9,  0x3Au);
  }

void sub_1003A7440(uint64_t a1, uint64_t a2)
{
  double v4 = (int *)(a1 + 256);
  unsigned int v5 = 244;
  *(_DWORD *)(a1 + 256) = 244;
  unsigned int v6 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = 244;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "For this platform, the default AAC-LC bitrate is %d",  buf,  8u);
    unsigned int v5 = *v4;
  }

  unint64_t v7 = *(void *)(a2 + 16);
  unint64_t v8 = v7 / 0x3E8;
  if (v7 >> 8 < 0x177 || v8 > v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100676CF4();
    }
  }

  else
  {
    *double v4 = v8;
    double v10 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Setting AAC-LC max bitrate to sink requested bitrate of %d",  buf,  8u);
    }
  }

  int v27 = *v4;
  uint64_t v12 = sub_1002E6E00();
  sub_10002418C(buf, "A2DP");
  sub_10002418C(__p, "AACBitrate");
  int v13 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v12 + 88LL))(v12, buf, __p, &v27);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v32) < 0)
  {
    operator delete(*(void **)buf);
    if (!v13) {
      goto LABEL_23;
    }
  }

  else if (!v13)
  {
    goto LABEL_23;
  }

  int v14 = v27;
  if (v27 < 96)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100676C90();
    }
  }

  else
  {
    *double v4 = v27;
    __int16 v15 = (os_log_s *)qword_1008F7558;
    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Warning: Setting user defined AAC-LC bitrate: %d kbps",  buf,  8u);
    }
  }

void sub_1003A7814( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003A7850(uint64_t a1)
{
  int v2 = (int *)(a1 + 256);
  *(_DWORD *)(a1 + 256) = 256;
  uint64_t v3 = sub_1002E6BF0();
  int v19 = 256;
  uint64_t v4 = sub_1002E6E00();
  sub_10002418C(buf, "A2DP");
  sub_10002418C(__p, "AACELDBitrate");
  int v5 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v4 + 88LL))(v4, buf, __p, &v19);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(*(void **)buf);
  }
  if (v5)
  {
    int v6 = v19;
    if (v19 < 96)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
        sub_100676D60();
      }
    }

    else
    {
      *int v2 = v19;
      unint64_t v7 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Setting user defined AAC-ELD bitrate: %d kbps",  buf,  8u);
      }
    }
  }

  int v8 = *(_DWORD *)(a1 + 248);
  unsigned int v9 = *(_DWORD *)(a1 + 256);
  double v10 = *(double *)(a1 + 272);
  unsigned int v11 = vcvtpd_u64_f64((double)(480000 * v9) / v10 * 0.125);
  unsigned int v12 = v8 - 2;
  *(_DWORD *)(a1 + 248) = v8 - 2;
  *(_DWORD *)(a1 + 252) = v11;
  unsigned int v13 = v8 - 4;
  if (v13 < v11)
  {
    unsigned int v9 = vcvtmd_u64_f64(v10 * (double)(8 * v13) / 480.0 / 1000.0);
    *(_DWORD *)(a1 + 252) = v13;
    *(_DWORD *)(a1 + 256) = v9;
    unsigned int v11 = v13;
  }

  if (v12 / v11 >= 3) {
    unsigned int v14 = 3;
  }
  else {
    unsigned int v14 = v12 / v11;
  }
  *(_DWORD *)(a1 + 260) = v14;
  double v15 = (float)((float)v14 * 1000000.0) * 480.0 / v10;
  *(double *)(a1 + 280) = v15;
  *(_DWORD *)(a1 + 288) = (v15 * 5.0);
  unsigned int v16 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134219776;
    *(double *)&uint8_t buf[4] = v10 / 1000.0;
    __int16 v21 = 1024;
    unsigned int v22 = v9;
    __int16 v23 = 1024;
    unsigned int v24 = v14;
    __int16 v25 = 1024;
    int v26 = 2;
    __int16 v27 = 1024;
    unsigned int v28 = v11;
    __int16 v29 = 1024;
    int v30 = v14 * (v11 + 2);
    __int16 v31 = 1024;
    unsigned int v32 = v12;
    __int16 v33 = 2048;
    double v34 = v15 / 1000.0;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "A2DP configured at %2.1f KHz. Codec: AAC-ELD, VBR max: %d kbps. %d frames * (%d+%d) bytes = %d per RTP (max=%d) every %.2f ms",  buf,  0x3Au);
  }

void sub_1003A7B34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003A7B70(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  a3[4] = *a2 >> 4;
  a3[5] = *a2 & 0xF;
  *a3 = a2[1] >> 4;
  a3[1] = (a2[1] >> 2) & 3;
  a3[6] = a2[1] & 3;
  a3[3] = a2[2];
  a3[2] = a2[3];
  uint64_t v3 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Extracted SBC configuration data", v4, 2u);
  }

void sub_1003A7C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a3 = *(_BYTE *)a2;
  *(_DWORD *)(a3 + 4) = bswap32(*(unsigned __int16 *)(a2 + 1)) >> 20;
  *(_BYTE *)(a3 + 8) = (*(_BYTE *)(a2 + 2) >> 2) & 3;
  *(_BYTE *)(a3 + 9) = *(_BYTE *)(a2 + 3) >> 7;
  *(void *)(a3 + 16) = (unsigned __int16)(*(unsigned __int8 *)(a2 + 4) << 8) | ((unint64_t)(*(_BYTE *)(a2 + 3) & 0x7F) << 16) | *(unsigned __int8 *)(a2 + 5);
  uint64_t v3 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Extracted AAC-LC configuration data", v4, 2u);
  }

void sub_1003A7CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = __rev16(*(unsigned __int16 *)(a2 + 6));
  *(_DWORD *)(a3 + 4) = (*(unsigned __int8 *)(a2 + 9) >> 4) | (16 * *(unsigned __int8 *)(a2 + 8));
  *(_DWORD *)(a3 + 8) = *(unsigned __int8 *)(a2 + 10) | ((*(_BYTE *)(a2 + 9) & 0xF) << 8);
  *(_BYTE *)(a3 + 12) = *(_BYTE *)(a2 + 11) >> 7;
  *(void *)(a3 + 16) = (unsigned __int16)(*(unsigned __int8 *)(a2 + 12) << 8) | ((unint64_t)(*(_BYTE *)(a2 + 11) & 0x7F) << 16) | *(unsigned __int8 *)(a2 + 13);
  uint64_t v3 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Extracted AAC-ELD configuration data", v4, 2u);
  }

void sub_1003A7D8C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 176);
  if ((int)v2 > 254)
  {
    if ((_DWORD)v2 == 255)
    {
      unsigned int v13 = (os_log_s *)qword_1008F7558;
      if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
        sub_100676E28(v13, v14, v15, v16, v17, v18, v19, v20);
      }
    }

    else
    {
      if ((_DWORD)v2 != 33023)
      {
LABEL_21:
        __int16 v21 = (os_log_s *)qword_1008F7558;
        if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
          sub_100676DC4(v2, v21, v22, v23, v24, v25, v26, v27);
        }
        return;
      }

      unint64_t v7 = (os_log_s *)qword_1008F7558;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO);
      if (v8)
      {
        v28[0] = 0x80FF04000100LL;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Found AVDTP_CODEC_APPLE_AACELD codec type 0x%x",  (uint8_t *)v28,  8u);
      }

      sub_1003A7CD0(v8, *(void *)(*(void *)(a1 + 184) + 24LL), (uint64_t)v28);
      sub_1003A7850(a1);
    }
  }

  else
  {
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == 2)
      {
        uint64_t v3 = (os_log_s *)qword_1008F7558;
        BOOL v4 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO);
        if (v4)
        {
          v28[0] = 0x204000100LL;
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Found AVDTP_CODEC_MPEG_AAC codec type 0x%x",  (uint8_t *)v28,  8u);
        }

        uint64_t v5 = *(void *)(a1 + 184);
        if (v5)
        {
          uint64_t v6 = *(void *)(v5 + 24);
          if (v6)
          {
            memset(v28, 0, sizeof(v28));
            sub_1003A7C20(v4, v6, (uint64_t)v28);
            sub_1003A7440(a1, (uint64_t)v28);
          }
        }

        return;
      }

      goto LABEL_21;
    }

    unsigned int v9 = (os_log_s *)qword_1008F7558;
    BOOL v10 = os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_INFO);
    if (v10)
    {
      v28[0] = 67109120LL;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Found AVDTP_CODEC_SBC codec type 0x%x",  (uint8_t *)v28,  8u);
    }

    uint64_t v11 = *(void *)(a1 + 184);
    if (v11)
    {
      unsigned int v12 = *(_BYTE **)(v11 + 24);
      if (v12)
      {
        sub_1003A7B70(v10, v12, v28);
        sub_1003A72AC(a1, (uint64_t)v28);
      }
    }
  }

void sub_1003A7FC8(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_1003A7FF8(_Unwind_Exception *a1)
{
}

void sub_1003A800C(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_1003A803C(_Unwind_Exception *a1)
{
}

  ;
}

  ;
}

void sub_1003A808C(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

double sub_1003A8098(uint64_t a1)
{
  *(_OWORD *)(a1 + 24) = *(_OWORD *)off_1008949A8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)off_1008949B8;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)off_1008949C8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)off_1008949D8;
  *(void *)(a1 + 88) = "None";
  *(void *)(a1 + 96) = "StartPending";
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

uint64_t sub_1003A80E0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(void *)(a1 + 136) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_1003A8114(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 104))
    {
      unint64_t v3 = 0LL;
      uint64_t v4 = 16LL;
      do
      {
        free(*(void **)(*(void *)(a1 + 120) + v4));
        ++v3;
        v4 += 32LL;
      }

      while (v3 < *(unsigned int *)(a1 + 104));
      uint64_t v2 = *(void **)(a1 + 120);
    }

    free(v2);
    *(void *)(a1 + 120) = 0LL;
  }

  return 0LL;
}

uint64_t sub_1003A8184(uint64_t a1)
{
  *(_DWORD *)a1 = -100526831;
  *(_BYTE *)(a1 + 112) = 0;
  uint64_t v2 = (char *)calloc(6uLL, 0x20uLL);
  *(void *)(a1 + 120) = v2;
  *((_DWORD *)v2 + 3) = 0;
  *(void *)(v2 + 4) = 1LL;
  *((_DWORD *)v2 + 7) = 3;
  unint64_t v3 = calloc(3uLL, 0x10uLL);
  *(void *)(*(void *)(a1 + 120) + 16LL) = v3;
  *unint64_t v3 = 1;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 16LL) + 16LL) = 7;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 16LL) + 17LL) = 0;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 16LL) + 18LL) = 0;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 16LL) + 19LL) = 4;
  *(void *)(*(void *)(*(void *)(a1 + 120) + 16LL) + 24LL) = a1;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 16LL) + 32LL) = 8;
  uint64_t v4 = *(void *)(a1 + 120);
  *(_BYTE *)(v4 + 24) = 1;
  *(_DWORD *)(v4 + 44) = 0;
  *(void *)(v4 + 36) = 2LL;
  *(_DWORD *)(v4 + 60) = 3;
  uint64_t v5 = calloc(3uLL, 0x10uLL);
  *(void *)(*(void *)(a1 + 120) + 48LL) = v5;
  *uint64_t v5 = 1;
  *(_WORD *)(*(void *)(*(void *)(a1 + 120) + 48LL) + 16LL) = 7;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 48LL) + 18LL) = 0;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 48LL) + 19LL) = 4;
  *(void *)(*(void *)(*(void *)(a1 + 120) + 48LL) + 24LL) = a1;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 48LL) + 32LL) = 8;
  *(_BYTE *)(*(void *)(a1 + 120) + 56LL) = 1;
  char v33 = 0;
  uint64_t v6 = sub_1002E6E00();
  uint64_t v7 = sub_1002E6E00();
  sub_10002418C(buf, "A2DP");
  sub_10002418C(__p, "DisableAAC");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v7 + 72LL))(v7, buf, __p, &v33);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  if (v32 < 0) {
    operator delete(*(void **)buf);
  }
  if (v33)
  {
    char v33 = 1;
    unsigned int v8 = 2;
  }

  else
  {
LABEL_8:
    uint64_t v9 = sub_1002E6BF0();
    char v33 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 784LL))(v9);
    unsigned int v8 = 2;
    if ((v33 & 1) == 0)
    {
      *(_DWORD *)(a1 + 4) = -2088501120;
      *(_WORD *)(a1 + 8) = 232;
      uint64_t v10 = *(void *)(a1 + 120);
      *(_DWORD *)(v10 + 76) = 0;
      *(void *)(v10 + 68) = 3LL;
      *(_DWORD *)(v10 + 92) = 3;
      uint64_t v11 = calloc(3uLL, 0x10uLL);
      *(void *)(*(void *)(a1 + 120) + 80LL) = v11;
      *uint64_t v11 = 1;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 80LL) + 16LL) = 7;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 80LL) + 17LL) = 0;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 80LL) + 18LL) = 2;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 80LL) + 19LL) = 6;
      *(void *)(*(void *)(*(void *)(a1 + 120) + 80LL) + 24LL) = a1 + 4;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 80LL) + 32LL) = 8;
      uint64_t v12 = *(void *)(a1 + 120);
      *(_BYTE *)(v12 + 88) = 1;
      *(_DWORD *)(v12 + 108) = 0;
      *(void *)(v12 + 100) = 4LL;
      *(_DWORD *)(v12 + 124) = 3;
      unsigned int v13 = calloc(3uLL, 0x10uLL);
      *(void *)(*(void *)(a1 + 120) + 112LL) = v13;
      _BYTE *v13 = 1;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 112LL) + 16LL) = 7;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 112LL) + 17LL) = 0;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 112LL) + 18LL) = 2;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 112LL) + 19LL) = 6;
      *(void *)(*(void *)(*(void *)(a1 + 120) + 112LL) + 24LL) = a1 + 4;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 112LL) + 32LL) = 8;
      *(_BYTE *)(*(void *)(a1 + 120) + 120LL) = 1;
      unsigned int v8 = 4;
    }
  }

  char v28 = 0;
  uint64_t v14 = sub_1002E6E00();
  uint64_t v15 = sub_1002E6E00();
  sub_10002418C(buf, "A2DP");
  sub_10002418C(__p, "DisableAACELD");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v15 + 72LL))(v15, buf, __p, &v28);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  if (v32 < 0) {
    operator delete(*(void **)buf);
  }
  if (v28)
  {
    char v28 = 1;
  }

  else
  {
LABEL_17:
    uint64_t v16 = sub_1002E6BF0();
    char v28 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 344LL))(v16);
    if ((v28 & 1) == 0)
    {
      *(void *)(a1 + 10) = 0x800080010000004CLL;
      *(_DWORD *)(a1 + 18) = -2080340992;
      *(_WORD *)(a1 + 22) = 226;
      uint64_t v17 = *(void *)(a1 + 120) + 32LL * v8;
      *(_DWORD *)(v17 + 12) = 0;
      *(void *)(v17 + 4) = 5LL;
      *(_DWORD *)(v17 + 28) = 3;
      uint64_t v18 = calloc(3uLL, 0x10uLL);
      *(void *)(*(void *)(a1 + 120) + 32LL * v8 + 16) = v18;
      *uint64_t v18 = 1;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 32LL * v8 + 16) + 16LL) = 7;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 32LL * v8 + 16) + 17LL) = 0;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 32LL * v8 + 16) + 18LL) = -1;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 32LL * v8 + 16) + 19LL) = 14;
      *(void *)(*(void *)(*(void *)(a1 + 120) + 32LL * v8 + 16) + 24LL) = a1 + 10;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 32LL * v8 + 16) + 32LL) = 8;
      uint64_t v19 = *(void *)(a1 + 120);
      *(_BYTE *)(v19 + 32LL * v8 + 24) = 1;
      uint64_t v20 = v8 | 1;
      uint64_t v21 = v19 + 32 * v20;
      *(_DWORD *)(v21 + 12) = 0;
      *(void *)(v21 + 4) = 6LL;
      *(_DWORD *)(v21 + 28) = 3;
      uint64_t v22 = calloc(3uLL, 0x10uLL);
      *(void *)(*(void *)(a1 + 120) + 32 * v20 + 16) = v22;
      _BYTE *v22 = 1;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 32 * v20 + 16) + 16LL) = 7;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 32 * v20 + 16) + 17LL) = 0;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 32 * v20 + 16) + 18LL) = -1;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 32 * v20 + 16) + 19LL) = 14;
      *(void *)(*(void *)(*(void *)(a1 + 120) + 32 * v20 + 16) + 24LL) = a1 + 10;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 32 * v20 + 16) + 32LL) = 8;
      *(_BYTE *)(*(void *)(a1 + 120) + 32 * v20 + 24) = 1;
      v8 += 2;
    }
  }

  *(_DWORD *)(a1 + 104) = v8;
  *(_DWORD *)(a1 + 108) = v8;
  uint64_t v23 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Local A2DP stream endpoints:", buf, 2u);
  }

  buf[0] = 0;
  sub_100242CA4(buf);
  if (*(_DWORD *)(a1 + 104))
  {
    unint64_t v25 = 0LL;
    uint64_t v26 = 16LL;
    do
    {
      nullsub_63(*(void *)(*(void *)(a1 + 120) + v26) + 16LL, v24);
      ++v25;
      v26 += 32LL;
    }

    while (v25 < *(unsigned int *)(a1 + 104));
  }

  sub_100242CD8(buf);
  return 0LL;
}

void sub_1003A8798( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A87E4(uint64_t a1)
{
  char v6 = 0;
  sub_100242CA4(&v6);
  if (*(_DWORD *)(a1 + 104))
  {
    unint64_t v2 = 0LL;
    uint64_t v3 = 16LL;
    while (!sub_1000D9948( 0,  0,  *(void *)(*(void *)(a1 + 120) + v3),  3,  1,  (_BYTE *)(*(void *)(a1 + 120) + v3 - 12)))
    {
      ++v2;
      v3 += 32LL;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100676EF4();
    }
    goto LABEL_10;
  }

void sub_1003A88E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1003A8900(uint64_t a1)
{
  char v6 = 0;
  sub_100242CA4(&v6);
  if (*(_DWORD *)(a1 + 104))
  {
    unint64_t v2 = 0LL;
    uint64_t v3 = 4LL;
    while (!sub_1000D9B78(*(unsigned __int8 *)(*(void *)(a1 + 120) + v3)))
    {
      ++v2;
      v3 += 32LL;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_ERROR)) {
      sub_100676F54();
    }
    uint64_t v4 = 1LL;
  }

  else
  {
LABEL_8:
    uint64_t v4 = 0LL;
  }

  sub_100242CD8(&v6);
  return v4;
}

void sub_1003A89EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1003A8A04(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 104);
  if (!(_DWORD)v2) {
    return 0LL;
  }
  uint64_t result = 0LL;
  uint64_t v5 = *(void *)(a1 + 120);
  do
  {
    v5 += 32LL;
    --v2;
  }

  while (v2);
  return result;
}

uint64_t sub_1003A8A40(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7558;
  if (os_log_type_enabled((os_log_t)qword_1008F7558, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Getting local stream config for local seid %d",  (uint8_t *)v8,  8u);
  }

  uint64_t v5 = *(unsigned int *)(a1 + 104);
  if (!(_DWORD)v5) {
    return 0LL;
  }
  uint64_t result = 0LL;
  uint64_t v7 = *(void *)(a1 + 120);
  do
  {
    if (*(_DWORD *)(v7 + 4) == a2) {
      uint64_t result = v7;
    }
    v7 += 32LL;
    --v5;
  }

  while (v5);
  return result;
}

void *sub_1003A8B1C@<X0>(const std::string *a1@<X0>, void *a2@<X8>)
{
  int size = (char)a1->__r_.__value_.__s.__size_;
  if (size >= 0) {
    uint64_t v5 = (std::string *)a1;
  }
  else {
    uint64_t v5 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if (size >= 0) {
    unint64_t v6 = a1->__r_.__value_.__s.__size_;
  }
  else {
    unint64_t v6 = a1->__r_.__value_.__l.__size_;
  }
  size_t __inbytesleft = v6 + 1;
  __instd::string buf = (char *)v5;
  __chkstk_darwin();
  unsigned int v8 = (char *)&v32 - v7;
  bzero((char *)&v32 - v7, v6 + 1);
  size_t __outbytesleft = v6 + 1;
  __outstd::string buf = v8;
  iconv_t v9 = iconv_open("UTF-8//IGNORE", "UTF-8");
  if (v9 == (iconv_t)-1LL)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100677014();
    }
  }

  else
  {
    uint64_t v10 = v9;
    size_t v11 = iconv(v9, &__inbuf, &__inbytesleft, &__outbuf, &__outbytesleft);
    if (iconv_close(v10))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_10067715C();
      }
    }

    else
    {
      if (v11 != -1LL) {
        return sub_10002418C(a2, v8);
      }
      if (*__error() == 92 || *__error() == 22)
      {
        unsigned int v13 = (char *)(__inbuf - (char *)v5);
        if (__inbuf - (char *)v5 >= 0 && (unint64_t)v13 <= v6)
        {
          std::string::copy(a1, v8, __inbuf - (char *)v5, 0LL);
          v13[(void)v8] = 0;
          return sub_10002418C(a2, v8);
        }

        uint64_t v14 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
          sub_100677084(v14, v15, v16, v17, v18, v19, v20, v21);
        }
      }

      else
      {
        int v22 = *__error();
        uint64_t v23 = (os_log_s *)qword_1008F7578;
        BOOL v24 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR);
        if (v22 == 7)
        {
          if (v24) {
            sub_1006770B8(v23, v25, v26, v27, v28, v29, v30, v31);
          }
        }

        else if (v24)
        {
          sub_1006770EC();
        }
      }
    }
  }

  unsigned int v8 = "";
  return sub_10002418C(a2, v8);
}

unint64_t sub_1003A8D54(uint64_t a1)
{
  int v2 = *(char *)(a1 + 23);
  if (v2 >= 0) {
    uint64_t v3 = (uint64_t *)a1;
  }
  else {
    uint64_t v3 = *(uint64_t **)a1;
  }
  if (v2 >= 0) {
    unint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    unint64_t v4 = *(void *)(a1 + 8);
  }
  unint64_t v5 = sub_1003313A4((uint64_t)&v9, v3, v4);
  unint64_t v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    else {
      uint64_t v7 = *(void *)a1;
    }
    int v9 = 136446466;
    uint64_t v10 = v7;
    __int16 v11 = 2048;
    unint64_t v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Hashing %{public}s as %zu",  (uint8_t *)&v9,  0x16u);
  }

  return v5;
}

void sub_1003A8E40( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v12 = a3;
  id v13 = a8;
  if (a2 && *(void *)(a1 + 80) == a2)
  {
    uint64_t v78 = 0LL;
    std::string::size_type v79 = 0LL;
    uint64_t v80 = 0LL;
    sub_1000518C4(&v78, *(void *)(a4 + 8) + 112LL);
    if (v80)
    {
      __int16 v76 = 0LL;
      int v77 = 0LL;
      __int128 v91 = xmmword_1006BDBA8;
      int v92 = 0;
      sub_100634334((__n128 *)buf, (__n128 *)&v91);
      uint64_t v14 = *(unsigned int **)(sub_1003A9530((uint64_t)&v78, buf) + 8);
      __int16 v76 = &off_10087FAA8;
      int v77 = v14;
      if (v14) {
        sub_1002CD1E0((uint64_t)v14);
      }
      if (sub_10056AAD8((uint64_t)&v76) == 20)
      {
        uint64_t v15 = *(void *)(a4 + 8);
        if (*(_BYTE *)(v15 + 370))
        {
          uint64_t v16 = sub_1002E6E00();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 176LL))(v16)
            && os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEBUG))
          {
            sub_1006771CC();
          }

          uint64_t v17 = *(void *)(a4 + 8);
          int v18 = *(char *)(v17 + 396);
          int v19 = *(char *)(v17 + 397);
          int v20 = *(char *)(a1 + 208);
          if (v18 > v20) {
            LOBYTE(v20) = v18;
          }
          *(_BYTE *)(a1 + 208) = v20;
          uint64_t v21 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  sub_10056AAF0((uint64_t)&v76),  16LL);
          char v67 = (void *)objc_claimAutoreleasedReturnValue(v21);
          int v22 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  sub_10056AAF0((uint64_t)&v76) + 16,  4LL);
          double v66 = (void *)objc_claimAutoreleasedReturnValue(v22);
          uint64_t v23 = *(void *)(a4 + 8);
          double v24 = *(double *)(v23 + 384) - *(double *)(v23 + 376);
          else {
            int v25 = (int)v24;
          }
          int v26 = sub_10056C420(v23, *(uint8x8_t *)&v24);
          double v27 = *(double *)(*(void *)(a4 + 8) + 384LL);
          uint64_t v28 = sub_1002E6E00();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v28 + 176LL))(v28))
          {
            uint64_t v29 = (os_log_s *)qword_1008F76C8;
            if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEBUG))
            {
              id v60 = sub_1005BFB9C(*(void *)(*(void *)(a4 + 8) + 200LL));
              uint64_t v61 = objc_claimAutoreleasedReturnValue(v60);
              uint64_t v62 = *(void *)(a4 + 8);
              CFTimeInterval v63 = kCFAbsoluteTimeIntervalSince1970 + *(double *)(v62 + 376);
              CFTimeInterval v64 = kCFAbsoluteTimeIntervalSince1970 + *(double *)(v62 + 384);
              *(_DWORD *)std::string buf = 138414594;
              *(void *)&uint8_t buf[4] = v12;
              *(_WORD *)&_BYTE buf[12] = 2112;
              *(void *)&buf[14] = v61;
              *(_WORD *)&_BYTE buf[22] = 2112;
              *(void *)__int128 v85 = v67;
              *(_WORD *)&v85[8] = 2112;
              *(void *)&v85[10] = v66;
              *(_WORD *)&v85[18] = 1024;
              *(_DWORD *)std::string::size_type v86 = v19;
              *(_WORD *)&v86[4] = 1024;
              *(_DWORD *)&v86[6] = v18;
              __int16 v87 = 2048;
              *(CFTimeInterval *)id v88 = v63;
              *(_WORD *)&v88[8] = 2048;
              *(CFTimeInterval *)id v89 = v64;
              *(_WORD *)&v89[8] = 1024;
              *(_DWORD *)__int128 v90 = v25;
              *(_WORD *)&v90[4] = 1024;
              *(_DWORD *)&v90[6] = v26;
              int v65 = (void *)v61;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "cached device %@ address:%@ rpi:%@ aem:%@ avgRSSI:%d maxRSSI:%d firstTimestamp:%f lastTimestamp:%f delta SinceLastStop:%d sec reports:%hu",  buf,  0x56u);
            }
          }

          uint64_t v30 = (os_unfair_lock_s *)(a1 + 176);
          v68[0] = _NSConcreteStackBlock;
          v68[1] = 3221225472LL;
          v68[2] = sub_1003A9624;
          v68[3] = &unk_1008949F0;
          id v31 = v67;
          id v69 = v31;
          id v32 = v66;
          id v70 = v32;
          char v74 = v19;
          char v75 = v18;
          __int16 v72 = v26;
          double v71 = v27 + kCFAbsoluteTimeIntervalSince1970;
          __int16 v73 = v25;
          sub_1003A9568(v30, v68);
        }

        else
        {
          int v40 = *(char *)(v15 + 216);
          if (v40 < 1)
          {
            __dst[0] = 0LL;
            __dst[1] = 0LL;
            int v83 = 0;
            int v44 = (const void *)sub_10056AAF0((uint64_t)&v76);
            size_t v45 = sub_10056AAD8((uint64_t)&v76);
            memcpy(__dst, v44, v45);
            int v46 = (uint64_t **)(a1 + 48);
            *(void *)std::string buf = __dst;
            char v47 = (uint64_t *)sub_1003AD854( (uint64_t **)(a1 + 48),  (uint64_t)__dst,  (uint64_t)&unk_1006C2518,  (_OWORD **)buf);
            sub_1003A9650(v47 + 7, a4);
            uint64_t v48 = sub_1002E6E00();
            if ((*(unsigned int (**)(uint64_t))(*(void *)v48 + 184LL))(v48))
            {
              uint64_t v49 = (os_log_s *)qword_1008F76C8;
              if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_INFO))
              {
                id v50 = sub_1005BFB9C(*(void *)(*(void *)(a4 + 8) + 200LL));
                id v51 = (id)objc_claimAutoreleasedReturnValue(v50);
                uint64_t v52 = sub_10056AAF0((uint64_t)&v76);
                uint64_t v53 = sub_10056AAF0((uint64_t)&v76);
                uint64_t v54 = *(void *)(a4 + 8);
                int v55 = *(char *)(v54 + 216);
                int v56 = *(unsigned __int8 *)(v54 + 217);
                double v57 = *(double *)(v54 + 240);
                std::string::size_type v81 = __dst;
                unsigned int v58 = sub_1003AD854(v46, (uint64_t)__dst, (uint64_t)&unk_1006C2518, &v81);
                uint64_t v59 = (uint64_t)(*((void *)v58 + 8) - *((void *)v58 + 7)) >> 4;
                *(_DWORD *)std::string buf = 138414594;
                *(void *)&uint8_t buf[4] = v12;
                *(_WORD *)&_BYTE buf[12] = 2112;
                *(void *)&buf[14] = v51;
                *(_WORD *)&_BYTE buf[22] = 1040;
                *(_DWORD *)__int128 v85 = 16;
                *(_WORD *)&v85[4] = 2096;
                *(void *)&v85[6] = v52;
                *(_WORD *)&v85[14] = 1040;
                *(_DWORD *)&v85[16] = 4;
                *(_WORD *)std::string::size_type v86 = 2096;
                *(void *)&v86[2] = v53 + 16;
                __int16 v87 = 1024;
                *(_DWORD *)id v88 = v55;
                *(_WORD *)&v88[4] = 1024;
                *(_DWORD *)&void v88[6] = v56;
                *(_WORD *)id v89 = 2048;
                *(double *)&v89[2] = v57 + kCFAbsoluteTimeIntervalSince1970;
                *(_WORD *)__int128 v90 = 2048;
                *(void *)&v90[2] = v59;
                _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_INFO,  "device %@ address:%@ rpi:%.16P aem:%.4P rssi:%d saturated:%d timestamp:%f totalReports:%lu",  buf,  0x56u);
              }
            }
          }

          else
          {
            int v41 = *(unsigned __int16 *)(a1 + 274);
            int v42 = 0xFFFF;
            if (v41 != 0xFFFF)
            {
              int v42 = v41 + 1;
              *(_WORD *)(a1 + 274) = v41 + 1;
            }

            uint64_t v43 = (os_log_s *)qword_1008F76B8;
            if (os_log_type_enabled((os_log_t)qword_1008F76B8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string buf = 67109634;
              *(_DWORD *)&uint8_t buf[4] = v40;
              *(_WORD *)&uint8_t buf[8] = 2112;
              *(void *)&buf[10] = v12;
              *(_WORD *)&_BYTE buf[18] = 1024;
              *(_DWORD *)&buf[20] = v42;
              _os_log_error_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "Ignoring invalid RSSI level (%d) received from device %@ (fInvalidRSSIReportCounter:%d)",  buf,  0x18u);
            }
          }
        }
      }

      else
      {
        char v33 = (os_log_s *)qword_1008F76B8;
        if (os_log_type_enabled((os_log_t)qword_1008F76B8, OS_LOG_TYPE_ERROR)) {
          sub_100677204((uint64_t)v12, v33, v34, v35, v36, v37, v38, v39);
        }
      }

      __int16 v76 = &off_10087FAA8;
      if (v77) {
        sub_1002CD254(v77);
      }
    }

    sub_100051CA8((uint64_t)&v78, v79);
  }
}

void sub_1003A947C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned int *a20, char a21, void *a22)
{
  if (a20) {
    sub_1002CD254(a20);
  }
  sub_100051CA8((uint64_t)&a21, a22);

  _Unwind_Resume(a1);
}

uint64_t sub_1003A9530(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = 0LL;
  uint64_t v2 = *sub_10002E9C8(a1, &v4, a2);
  if (!v2) {
    abort();
  }
  return v2 + 56;
}

void sub_1003A9568(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v3 = a2;
  os_unfair_lock_lock(a1);
  unint64_t v5 = 0LL;
  unint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    unint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_1003A95FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003A9624( uint64_t a1, uint64_t (***a2)(void, void, void, void, void, void, void, double))
{
  return (**a2)( a2,  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(unsigned __int16 *)(a1 + 60),  *(unsigned __int8 *)(a1 + 56),  0LL,  *(unsigned __int16 *)(a1 + 58),  *(double *)(a1 + 48));
}

uint64_t sub_1003A9650(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (void *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    uint64_t result = sub_1003AD978(a1, a2);
  }

  else
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *uint64_t v3 = &off_10087FAE8;
    v3[1] = v4;
    if (v4) {
      sub_1002CD1E0(v4);
    }
    uint64_t result = (uint64_t)(v3 + 2);
    a1[1] = (uint64_t)(v3 + 2);
  }

  a1[1] = result;
  return result;
}

void sub_1003A96A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003A96B0( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
}

uint64_t sub_1003A96BC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "stackDidStart", v5, 2u);
  }

  *(_BYTE *)(a1 + 72) = 1;
  uint64_t v3 = sub_1002E8D54();
  sub_1001FC8A8(v3 + 368, a1 + 32);
  sub_1003A9754(a1);
  return sub_1003A985C(a1);
}

void sub_1003A9754(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar autoupdatingCurrentCalendar](&OBJC_CLASS___NSCalendar, "autoupdatingCurrentCalendar"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 components:16 fromDate:v3]);
  unsigned __int16 v5 = (unsigned __int16)[v4 day];

  if (*(unsigned __int8 *)(a1 + 248) != v5)
  {
    *(_DWORD *)(a1 + 232) = 0;
    *(_BYTE *)(a1 + 248) = v5;
    unint64_t v6 = (os_log_s *)qword_1008F76C8;
    if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "resetting daily counters (fCurrentShortAPWakeTimeInSeconds, fDayOfMonth, fEstimatedAPWakeCount)",  v7,  2u);
    }
  }

void sub_1003A9834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003A985C(uint64_t a1)
{
  if (!*(void *)(a1 + 80) || !*(_BYTE *)(a1 + 72)) {
    return 12LL;
  }
  std::string __p = 0LL;
  uint64_t v23 = 0LL;
  double v24 = 0LL;
  uint64_t v2 = (char *)operator new(0x188uLL);
  sub_100050070((uint64_t)v2);
  *(_WORD *)(v2 + 1) = 0;
  v2[139] = 1;
  v2[143] = 1;
  v2[3] = 0;
  *uint64_t v2 = *(_BYTE *)(a1 + 112);
  uint64_t v23 = 0LL;
  __int128 v30 = xmmword_1006BDBA8;
  int v31 = 0;
  sub_100634334(&v27, (__n128 *)&v30);
  uint64_t v3 = (char *)sub_100050420((uint64_t)&v24, 1uLL);
  unsigned __int16 v5 = &v3[20 * v4];
  __n128 v6 = v27;
  *((_DWORD *)v3 + 4) = v28;
  *(__n128 *)uint64_t v3 = v6;
  uint64_t v7 = (__int128 *)(v3 + 20);
  int v9 = (char *)__p;
  unsigned int v8 = (char *)v23;
  if (v23 != __p)
  {
    do
    {
      __int128 v10 = *(_OWORD *)(v8 - 20);
      *((_DWORD *)v3 - 1) = *((_DWORD *)v8 - 1);
      *(_OWORD *)(v3 - 20) = v10;
      v3 -= 20;
      v8 -= 20;
    }

    while (v8 != v9);
    unsigned int v8 = (char *)__p;
  }

  std::string __p = v3;
  uint64_t v23 = v7;
  double v24 = v5;
  if (v8)
  {
    operator delete(v8);
    uint64_t v3 = (char *)__p;
  }

  uint64_t v23 = v7;
  int v20 = 0LL;
  uint64_t v21 = 0LL;
  int v19 = 0LL;
  sub_100050EE8((char *)&v19, (__int128 *)v3, v7, 0xCCCCCCCCCCCCCCCDLL * (((char *)v7 - v3) >> 2));
  sub_100050224((void *)v2 + 1, (__int128 *)v19, v20, 0xCCCCCCCCCCCCCCCDLL * (((char *)v20 - (_BYTE *)v19) >> 2));
  if (v19)
  {
    int v20 = (__int128 *)v19;
    operator delete(v19);
  }

  uint64_t v11 = objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", @"com.apple.bluetoothd.EN"));
  id v12 = (void *)*((void *)v2 + 19);
  *((void *)v2 + 19) = v11;

  v27.n128_u64[0] = 0LL;
  v27.n128_u64[1] = (unint64_t)&v27;
  uint64_t v28 = 0x2020000000LL;
  int v29 = 0;
  uint64_t v13 = sub_100404FE8();
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  _DWORD v18[2] = sub_1003AA6AC;
  v18[3] = &unk_10087FEE0;
  v18[4] = &v27;
  void v18[5] = a1;
  void v18[6] = v2;
  sub_1004054B4(v13, v18);
  uint64_t v14 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_INFO))
  {
    int v15 = *(_DWORD *)(v27.n128_u64[1] + 24);
    *(_DWORD *)std::string buf = 67109120;
    int v26 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "startScanning returning %d", buf, 8u);
  }

  uint64_t v16 = *(unsigned int *)(v27.n128_u64[1] + 24);
  _Block_object_dispose(&v27, 8);
  if (__p)
  {
    uint64_t v23 = (__int128 *)__p;
    operator delete(__p);
  }

  return v16;
}

void sub_1003A9AF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20, uint64_t a21)
{
}

uint64_t sub_1003A9B54(uint64_t a1)
{
  return sub_1003A96BC(a1 - 16);
}

void sub_1003A9B5C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "ContactTracingManager::stackWillStop enter",  buf,  2u);
  }

  *(_BYTE *)(a1 + 72) = 0;
  uint64_t v3 = sub_1002E8D54();
  sub_10024E060(v3 + 368, a1 + 32);
  uint64_t v4 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)unsigned __int16 v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "ContactTracingManager::stackWillStop exit", v5, 2u);
  }

void sub_1003A9C1C(uint64_t a1)
{
}

_BYTE *sub_1003A9C24()
{
  char v1 = 0;
  sub_100242CA4(&v1);
  if (sub_1001B9E04((uint64_t)sub_1003A9CEC))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F76B8, OS_LOG_TYPE_ERROR)) {
      sub_1006772C8();
    }
  }

  else if (sub_1001B9F84((uint64_t)sub_1003A9D50) {
         && os_log_type_enabled((os_log_t)qword_1008F76B8, OS_LOG_TYPE_ERROR))
  }
  {
    sub_100677268();
  }

  return sub_100242CD8(&v1);
}

void sub_1003A9CD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1003A9CEC()
{
  v0 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)char v1 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "ExposureNotification::leAddressChangedCallback",  v1,  2u);
  }

void sub_1003A9D50()
{
  v0 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)char v1 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "ExposureNotification::leAddressWillChangeCallback",  v1,  2u);
  }

void sub_1003A9DB8(uint64_t a1, int a2, int a3)
{
  unsigned __int16 v5 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109376;
    v6[1] = a3;
    __int16 v7 = 1024;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "New PowerState:%d module:%d", (uint8_t *)v6, 0xEu);
  }

void sub_1003A9E70(uint64_t a1, int a2)
{
  uint64_t v3 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = "NO";
    if (a2) {
      uint64_t v4 = "YES";
    }
    int v5 = 136315138;
    __n128 v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "ExposureNotification::leAdvertisingStateChanged advertising:%s",  (uint8_t *)&v5,  0xCu);
  }

void sub_1003A9F2C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "ExposureNotification::advertisingStoppedForSession",  v4,  2u);
  }

  if (*(void *)(a1 + 80))
  {
    uint64_t v3 = sub_100404FE8();
    sub_100405384(v3, &stru_100894A10);
  }

void sub_1003A9FAC(id a1)
{
  if (qword_1008D9700 != -1) {
    dispatch_once(&qword_1008D9700, &stru_100894BE8);
  }
  sub_1003A9FEC((uint64_t)off_1008D96F8);
}

uint64_t sub_1003A9FEC(uint64_t a1)
{
  if (!*(void *)(a1 + 80)) {
    return 12LL;
  }
  uint64_t v2 = operator new(0x1E0uLL);
  sub_10056B368((uint64_t)v2);
  int v8 = &off_10087FAE8;
  int v9 = (unsigned int *)v2;
  *((_WORD *)v2 + 111) = *(_WORD *)(a1 + 144);
  *((_BYTE *)v2 + 12) = 0;
  *((_BYTE *)v2 + 307) = 1;
  *((_DWORD *)v2 + 66) = 2;
  sub_10002418C(__p, "com.apple.bluetoothd.EN");
  sub_100329294((uint64_t)&v6, (const void **)__p, 1LL);
  sub_1003AD494((uint64_t **)v2 + 52, v6, &v7);
  sub_10023E78C((uint64_t)&v6, v7);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (qword_1008D6288 != -1) {
    dispatch_once(&qword_1008D6288, &stru_100894C08);
  }
  uint64_t v3 = sub_100572984((uint64_t)off_1008D6280, *(void *)(a1 + 80), (uint64_t)&v8, 1);
  uint64_t v4 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_INFO))
  {
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "startAdvertising returning %d", (uint8_t *)__p, 8u);
  }

  int v8 = &off_10087FAE8;
  if (v9) {
    sub_1002CD254(v9);
  }
  return v3;
}

void sub_1003AA188( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14) {
    sub_1002CD254(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003AA1F0(uint64_t a1)
{
}

void sub_1003AA200(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "ContactTracingManager Power : system woke up",  v3,  2u);
  }

  sub_1003A9754(a1);
}

void sub_1003AA270(uint64_t a1)
{
}

void sub_1003AA278(uint64_t a1, unint64_t a2)
{
  BOOL v3 = HIDWORD(a2) == 1;
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1003AA2E8;
  v5[3] = &unk_1008800D8;
  v5[4] = a1;
  BOOL v6 = v3;
  sub_100405384(v4, v5);
}

void sub_1003AA2E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 176LL))(v3))
  {
    uint64_t v4 = (os_log_s *)qword_1008F76C8;
    if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(a1 + 40);
      v6[0] = 67109120;
      v6[1] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "WifiStateChanged wiFiAssociatedToBand2GHz=%d",  (uint8_t *)v6,  8u);
    }
  }

  *(_BYTE *)(v2 + 250) = *(_BYTE *)(a1 + 40);
}

void sub_1003AA3B4(uint64_t a1, unint64_t a2)
{
}

double sub_1003AA3BC(uint64_t a1)
{
  *(void *)a1 = off_100894A40;
  *(void *)(a1 + 8) = off_100894AD0;
  *(void *)(a1 + 16) = off_100894B30;
  *(void *)(a1 + 24) = &off_100894B60;
  *(void *)(a1 + 32) = off_100894B88;
  *(void *)(a1 + 40) = &off_100894BB8;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 48) = a1 + 56;
  *(_BYTE *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0LL;
  *(_BYTE *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = @"unknown";
  *(void *)(a1 + 104) = 0LL;
  *(_WORD *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 168) = 0LL;
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 210) = xmmword_1006C2710;
  *(_WORD *)(a1 + 226) = 1800;
  *(_DWORD *)(a1 + 228) = 28800;
  *(_WORD *)(a1 + 234) = 0;
  *(void *)(a1 + 240) = 0LL;
  *(_WORD *)(a1 + 248) = 256;
  *(_BYTE *)(a1 + 250) = 0;
  *(_DWORD *)(a1 + 252) = 4;
  *(_WORD *)(a1 + 256) = 5;
  *(void *)(a1 + 260) = 150LL;
  *(void *)&double result = 0xAF000050030LL;
  *(void *)(a1 + 268) = 0xAF000050030LL;
  *(_BYTE *)(a1 + 276) = 0;
  return result;
}

uint64_t sub_1003AA494(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "restarting advertising", buf, 2u);
  }

  sub_1003AA544(a1);
  uint64_t v3 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1003AA634;
  v5[3] = &unk_10087EB20;
  v5[4] = a1;
  sub_100405384(v3, v5);
  return 0LL;
}

uint64_t sub_1003AA544(uint64_t a1)
{
  if (!*(void *)(a1 + 80)) {
    return 12LL;
  }
  if (qword_1008D6288 != -1) {
    dispatch_once(&qword_1008D6288, &stru_100894C08);
  }
  uint64_t v2 = sub_100575180((uint64_t)off_1008D6280, *(void *)(a1 + 80));
  uint64_t v3 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "stopAdvertising returning %d", (uint8_t *)v5, 8u);
  }

  return v2;
}

uint64_t sub_1003AA634(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(void *)(v1 + 80))
  {
    uint64_t v2 = (os_log_s *)qword_1008F76C8;
    if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "restarting advertising as we have a valid session",  v3,  2u);
    }

    return sub_1003A9FEC(v1);
  }

  return result;
}

uint64_t sub_1003AA6AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_100894C28);
  }
  uint64_t result = sub_1005F08F8((uint64_t)off_1008D6600, *(void *)(v2 + 80), *(unsigned __int8 **)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1003AA714(uint64_t a1)
{
  if (!*(void *)(a1 + 80)) {
    return 12LL;
  }
  uint64_t v8 = 0LL;
  int v9 = &v8;
  uint64_t v10 = 0x2020000000LL;
  int v11 = 0;
  uint64_t v2 = sub_100404FE8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1003AA850;
  v7[3] = &unk_100880D70;
  v7[4] = &v8;
  void v7[5] = a1;
  sub_1004054B4(v2, v7);
  uint64_t v3 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_INFO))
  {
    int v4 = *((_DWORD *)v9 + 6);
    *(_DWORD *)std::string buf = 67109120;
    int v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "stopScanning returning %d", buf, 8u);
  }

  uint64_t v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1003AA838( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1003AA850(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_100894C28);
  }
  uint64_t result = sub_1005F24EC((uint64_t)off_1008D6600, *(void *)(v2 + 80), 1, 1, 0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

void *sub_1003AA8C0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10056AB04(a2, (const void *)(a1 + 146), 0x14uLL);
}

uint64_t sub_1003AA8D0(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  uint64_t v6 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 352LL))(v6) & 1) != 0)
  {
    if (*(void *)(a1 + 80))
    {
      __int16 v7 = (os_log_s *)qword_1008F76B8;
      if (os_log_type_enabled((os_log_t)qword_1008F76B8, OS_LOG_TYPE_ERROR)) {
        sub_100677478(a1, v7, v8, v9, v10, v11, v12, v13);
      }
LABEL_16:
      uint64_t v14 = 12LL;
      goto LABEL_17;
    }

    if (v5)
    {
      uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@-ENClient", v5));
      uint64_t v16 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = v15;
    }

    unint64_t v37 = 0LL;
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_100894C48);
    }
    uint64_t v17 = qword_1008D61A0;
    sub_10002418C(&__p, (char *)[*(id *)(a1 + 96) UTF8String]);
    int v18 = sub_100496120(v17, (uint64_t)&__p, &v37, 1LL);
    int v19 = v18;
    if (SHIBYTE(v35) < 0)
    {
      operator delete(__p);
      if (v19)
      {
LABEL_14:
        int v20 = (os_log_s *)qword_1008F76B8;
        if (os_log_type_enabled((os_log_t)qword_1008F76B8, OS_LOG_TYPE_ERROR)) {
          sub_100677414((uint64_t)v5, v20, v21, v22, v23, v24, v25, v26);
        }
        goto LABEL_16;
      }
    }

    else if (v18)
    {
      goto LABEL_14;
    }

    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_100894C48);
    }
    uint64_t v28 = sub_100496954((void *)qword_1008D61A0, v37);
    *(void *)(a1 + 80) = v28;
    if (!v28)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F76B8, OS_LOG_TYPE_ERROR)) {
        sub_100677328();
      }
      goto LABEL_16;
    }

    if (*(_BYTE *)(a1 + 72) && (uint64_t v14 = sub_1003A985C(a1), (_DWORD)v14))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F76B8, OS_LOG_TYPE_ERROR)) {
        sub_1006773B4();
      }
    }

    else
    {
      std::string __p = 0LL;
      p_p = &__p;
      uint64_t v35 = 0x2020000000LL;
      int v36 = 0;
      uint64_t v29 = sub_100404FE8();
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472LL;
      void v32[2] = sub_1003AAC98;
      void v32[3] = &unk_100880D70;
      v32[4] = &__p;
      v32[5] = a1;
      sub_1004054B4(v29, v32);
      if (*((_DWORD *)p_p + 6))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F76B8, OS_LOG_TYPE_ERROR)) {
          sub_100677354();
        }
        sub_1003AA714(a1);
        uint64_t v14 = *((unsigned int *)p_p + 6);
      }

      else
      {
        *(double *)(a1 + 104) = a3;
        __int128 v30 = (os_log_s *)qword_1008F76C8;
        if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_INFO))
        {
          uint64_t v31 = *(void *)(a1 + 96);
          *(_DWORD *)std::string buf = 134218242;
          double v39 = a3;
          __int16 v40 = 2112;
          uint64_t v41 = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "started at %f with %@", buf, 0x16u);
        }

        uint64_t v14 = 0LL;
      }

      _Block_object_dispose(&__p, 8);
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F76B8, OS_LOG_TYPE_ERROR)) {
      sub_1006774E0();
    }
    uint64_t v14 = 11LL;
  }

void sub_1003AAC48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003AAC98(uint64_t a1)
{
  uint64_t result = sub_1003A9FEC(*(void *)(a1 + 40));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1003AACC8(uint64_t a1)
{
  uint64_t v2 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 352LL))(v2) & 1) != 0)
  {
    if (*(void *)(a1 + 80))
    {
      if (*(_BYTE *)(a1 + 72)
        && sub_1003AA714(a1)
        && os_log_type_enabled((os_log_t)qword_1008F76B8, OS_LOG_TYPE_ERROR))
      {
        sub_100677600();
      }

      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_100894C48);
      }
      uint64_t v3 = qword_1008D61A0;
      unint64_t v4 = sub_100494CF8(*(void *)(a1 + 80));
      if (sub_1004966BC(v3, v4))
      {
        id v5 = (os_log_s *)qword_1008F76B8;
        if (os_log_type_enabled((os_log_t)qword_1008F76B8, OS_LOG_TYPE_ERROR)) {
          sub_100677538(a1, v5, v6, v7, v8, v9, v10, v11);
        }
      }

      *(void *)(a1 + 80) = 0LL;
      uint64_t v12 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = @"unknown";

      return 0LL;
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F76B8, OS_LOG_TYPE_ERROR)) {
        sub_10067750C();
      }
      return 12LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F76B8, OS_LOG_TYPE_ERROR)) {
      sub_1006774E0();
    }
    return 11LL;
  }

void sub_1003AAE78(uint64_t a1)
{
  unsigned __int8 v111 = 0;
  uint64_t v2 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "ENScanWithDuplicateEnable");
  int v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v2 + 72LL))( v2,  buf,  __p,  &v111);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (v113 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      goto LABEL_9;
    }
  }

  else if (!v3)
  {
    goto LABEL_9;
  }

  int v4 = v111;
  *(_BYTE *)(a1 + 112) = v111;
  id v5 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Overriding contactTracingEnableScanDuplicateFilters = %d ",  buf,  8u);
  }

LABEL_152:
  int v93 = 0;
  uint64_t v79 = sub_1002E6E00();
  sub_10002418C(buf, "ENScanOverrides");
  sub_10002418C(__p, "ENOverrideScanWithDuplicatesDurationA2DPWifi2GInMS");
  int v80 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v79 + 88LL))(v79, buf, __p, &v93);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (v113 < 0)
  {
    operator delete(*(void **)buf);
    if (!v80) {
      goto LABEL_161;
    }
  }

  else if (!v80)
  {
    goto LABEL_161;
  }

  *(_WORD *)(a1 + 272) = v93;
  uint64_t v81 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v81 + 176LL))(v81))
  {
    __int128 v82 = (os_log_s *)qword_1008F76C8;
    if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v93;
      _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEFAULT,  "Overriding fNextScanWithDuplicatesDurationA2DPWifi2GInMs = %d ",  buf,  8u);
    }
  }

LABEL_161:
  int v92 = 0;
  uint64_t v83 = sub_1002E6E00();
  sub_10002418C(buf, "ENScanOverrides");
  sub_10002418C(__p, "ENOverrideMaxAllowedRSSILevel");
  int v84 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v83 + 88LL))(v83, buf, __p, &v92);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (v113 < 0)
  {
    operator delete(*(void **)buf);
    if (!v84) {
      goto LABEL_170;
    }
  }

  else if (!v84)
  {
    goto LABEL_170;
  }

  *(_BYTE *)(a1 + 276) = v92;
  uint64_t v85 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v85 + 176LL))(v85))
  {
    std::string::size_type v86 = (os_log_s *)qword_1008F76C8;
    if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT))
    {
      int v87 = *(char *)(a1 + 276);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v87;
      _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_DEFAULT,  "Overriding fMaxAllowedRSSILevel = %d ",  buf,  8u);
    }
  }

    sub_10023DF50(buf);
    sub_100242FAC((uint64_t)v87);
    return sub_100242FAC((uint64_t)v88);
  }

  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_100897E98);
  }
  sub_1003CA640((uint64_t)off_1008D67E0, (uint64_t)a2, a3);
  sub_100422B6C((uint64_t)a1, (uint64_t)a2, 0xFFFFFFFFLL, 0, 11LL, a3, 0);
  if ((_DWORD)a3 != 17)
  {
    if (qword_1008D9600 != -1) {
      dispatch_once(&qword_1008D9600, &stru_100897ED8);
    }
    sub_10041ABC8();
  }

  return sub_100423730(a1, (uint64_t)a2);
}

  uint64_t v89 = 0;
  uint64_t v61 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "LeMaxCEDigitalID");
  int v62 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v61 + 88LL))(v61, buf, __p, &v89);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v62) {
      goto LABEL_169;
    }
  }

  else if (!v62)
  {
    goto LABEL_169;
  }

  int v63 = v89;
  *(_BYTE *)(a1 + 1109) = v89;
  uint64_t v64 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v63;
    _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "Override LeMaxCEDigitalID:%d", buf, 8u);
  }

LABEL_170:
  uint64_t v88 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v88 + 352LL))(v88))
  {
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_100894C68);
    }
    sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1 + 16);
    if (qword_1008D6288 != -1) {
      dispatch_once(&qword_1008D6288, &stru_100894C08);
    }
    sub_100572580((uint64_t)off_1008D6280, a1 + 24);
    if (qword_1008D6788 != -1) {
      dispatch_once(&qword_1008D6788, &stru_100894C88);
    }
    sub_10024DD9C((uint64_t)off_1008D6780 + 80, a1);
    if (qword_1008D6608 != -1) {
      dispatch_once(&qword_1008D6608, &stru_100894C28);
    }
    sub_10004FAD0((uint64_t)off_1008D6600 + 1872, a1 + 8);
    uint64_t v89 = sub_1002E8D54();
    sub_1001FCB98(v89 + 288, a1 + 40);
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_100894C68);
    }
    *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = sub_1004313B0((uint64_t)off_1008D60A8);
    uint64_t v90 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    __int128 v91 = *(void **)(a1 + 168);
    *(void *)(a1 + 16_Block_object_dispose(va, 8) = v90;
  }

    int v107 = (void *)v79[1];
    if (v107)
    {
      do
      {
        int v108 = v107;
        int v107 = (void *)*v107;
      }

      while (v107);
    }

    else
    {
      do
      {
        int v108 = (void *)v79[2];
        int v32 = *v108 == (void)v79;
        uint64_t v79 = v108;
      }

      while (!v32);
    }

    uint64_t v79 = v108;
  }

  while (v108 != v141);
  int v115 = v146;
  unint64_t v116 = v147;
  *(_BYTE *)(a1 + 4383) = 0;
  uint64_t v42 = v140;
  if (v115 != v116)
  {
    if (qword_1008D6198 != -1) {
      dispatch_once(&qword_1008D6198, &stru_1008A4058);
    }
    int v117 = off_1008D6190;
    memset(v142, 0, sizeof(v142));
    sub_10060F6FC(v142, (__int128 *)v146, (__int128 *)v147, 0xCCCCCCCCCCCCCCCDLL * ((v147 - v146) >> 3));
    sub_10044B9F8((uint64_t)v117, v142);
    *(void *)std::string buf = v142;
    sub_10060F638((void ***)buf);
    unint64_t v118 = (__int128 *)v146;
    __int128 v147 = (char *)v118;
    __n128 v120 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v120,  OS_LOG_TYPE_INFO,  "Configuring RX Threshold, waiting for completion",  buf,  2u);
    }

    goto LABEL_207;
  }

void sub_1003AC048( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003AC110()
{
  if (qword_1008D5F10 != -1) {
    dispatch_once(&qword_1008D5F10, &stru_100894CA8);
  }
  sub_100593098((uint64_t)off_1008D5F08);
}

void sub_1003AC150(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 64);
    *(_DWORD *)std::string buf = 134217984;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "scanDurationDone, report the results for %lu total devices found",  buf,  0xCu);
  }

  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_100894C28);
  }
  double v4 = *((double *)off_1008D6600 + 285);
  *(_BYTE *)(a1 + 20_Block_object_dispose(va, 8) = -127;
  uint64_t v44 = a1;
  if (v4 == 0.0)
  {
    unsigned int v5 = 150;
  }

  else
  {
    unsigned int v5 = (CFAbsoluteTimeGetCurrent() - v4);
  }

  unsigned int v45 = v5;
  uint64_t v6 = a1;
  int v7 = *(_DWORD *)(a1 + 64);
  *(_WORD *)(v6 + 212) = v7 - *(_WORD *)(v6 + 210);
  uint64_t v8 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 176LL))(v8))
  {
    uint64_t v9 = (os_log_s *)qword_1008F76C8;
    if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *(unsigned __int16 *)(v44 + 210);
      int v11 = *(__int16 *)(v44 + 212);
      *(_DWORD *)std::string buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v7;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v10;
      LOWORD(v65) = 1024;
      *(_DWORD *)((char *)&v65 + 2) = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "newNumOfSightings:%d lastNumOfSightings:%d delta:%d",  buf,  0x14u);
    }
  }

  *(_WORD *)(v44 + 210) = v7;
  int v12 = *(void **)(v44 + 48);
  uint64_t v46 = (void *)(v44 + 56);
  if (v12 != (void *)(v44 + 56))
  {
    do
    {
      uint64_t v61 = 0LL;
      uint64_t v62 = 0LL;
      uint64_t v63 = 0LL;
      sub_1003ADD38(&v61, v12[7], v12[8], (uint64_t)(v12[8] - v12[7]) >> 4);
      uint64_t v14 = v61;
      uint64_t v13 = v62;
      if (v62 != v61)
      {
        unsigned __int8 v15 = 0;
        __int16 v16 = 0;
        uint64_t v17 = *(void *)(v61 + 8);
        uint64_t v47 = v17 + 112;
        double v18 = *(double *)(v17 + 240) + kCFAbsoluteTimeIntervalSince1970;
        char v19 = -127;
        char v20 = 1;
        do
        {
          uint64_t v21 = *(void *)(v14 + 8);
          int v22 = *(char *)(v21 + 216);
          if (v22 == 127)
          {
            int v23 = (os_log_s *)qword_1008F76B8;
            if (os_log_type_enabled((os_log_t)qword_1008F76B8, OS_LOG_TYPE_ERROR)) {
              sub_100677660(&v59, v60, v23);
            }
          }

          else
          {
            BOOL v24 = *(_BYTE *)(v21 + 217) != 0;
            if (v19 <= v22) {
              char v19 = *(_BYTE *)(v21 + 216);
            }
            uint64_t v25 = sub_1002E6E00();
            v20 &= v24;
            ++v15;
            v16 += v22;
            if ((*(unsigned int (**)(uint64_t))(*(void *)v25 + 184LL))(v25))
            {
              uint64_t v26 = (os_log_s *)qword_1008F76C8;
              if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEBUG))
              {
                int v27 = *(unsigned __int8 *)(*(void *)(v14 + 8) + 217LL);
                *(_DWORD *)std::string buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = v15;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v22;
                LOWORD(v65) = 1024;
                *(_DWORD *)((char *)&v65 + 2) = v27;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "%d) rssi:%d saturated:%d",  buf,  0x14u);
              }
            }
          }

          v14 += 16LL;
        }

        while (v14 != v13);
        int v28 = v15;
        if (v15)
        {
          int v29 = *(char *)(v44 + 208);
          if (v19 > v29) {
            LOBYTE(v29) = v19;
          }
          *(_BYTE *)(v44 + 20_Block_object_dispose(va, 8) = v29;
          __int16 v30 = v16 / v15;
        }

        else
        {
          char v20 = 1;
          LOBYTE(v30) = 127;
          char v19 = 127;
        }

        int v57 = 0LL;
        uint64_t v58 = 0LL;
        __int128 v80 = xmmword_1006BDBA8;
        int v81 = 0;
        sub_100634334((__n128 *)buf, (__n128 *)&v80);
        int v31 = *(unsigned int **)(sub_1003A9530(v47, buf) + 8);
        int v57 = &off_10087FAA8;
        uint64_t v58 = v31;
        if (v31) {
          sub_1002CD1E0((uint64_t)v31);
        }
        int v32 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  sub_10056AAF0((uint64_t)&v57),  16LL);
        char v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
        uint64_t v34 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  sub_10056AAF0((uint64_t)&v57) + 16,  4LL);
        int v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
        uint64_t v36 = sub_1002E6E00();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v36 + 184LL))(v36))
        {
          unint64_t v37 = (os_log_s *)qword_1008F76C8;
          if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 138414338;
            *(void *)&uint8_t buf[4] = v33;
            *(_WORD *)&_BYTE buf[12] = 2112;
            int v65 = v35;
            __int16 v66 = 1024;
            int v67 = (char)v30;
            __int16 v68 = 1024;
            int v69 = v19;
            __int16 v70 = 1024;
            int v71 = v20 & 1;
            __int16 v72 = 2048;
            double v73 = v18;
            __int16 v74 = 1024;
            unsigned int v75 = v45;
            __int16 v76 = 2048;
            uint64_t v77 = (v62 - v61) >> 4;
            __int16 v78 = 1024;
            int v79 = v28;
            _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "rpi:%@ aem:%@ avgRSSI:%d maxRSSI:%d saturated:%d timestamp:%f deltaSinceLastStop:%d reports:%lu validReports:%d",  buf,  0x48u);
          }
        }

        else {
          uint64_t v38 = (v62 - v61) >> 4;
        }
        v48[0] = _NSConcreteStackBlock;
        v48[1] = 3221225472LL;
        void v48[2] = sub_1003AC80C;
        v48[3] = &unk_100894BC8;
        id v39 = v33;
        id v49 = v39;
        id v40 = v35;
        id v50 = v40;
        char v53 = v30;
        char v54 = v19;
        char v55 = v38;
        char v56 = v20 & 1;
        double v51 = v18;
        unsigned int v52 = v45;
        sub_1003A9568((os_unfair_lock_s *)(v44 + 176), v48);

        int v57 = &off_10087FAA8;
        if (v58) {
          sub_1002CD254(v58);
        }
      }

      *(void *)std::string buf = &v61;
      sub_1003ADE48((void ***)buf);
      uint64_t v41 = (void *)v12[1];
      if (v41)
      {
        do
        {
          uint64_t v42 = v41;
          uint64_t v41 = (void *)*v41;
        }

        while (v41);
      }

      else
      {
        do
        {
          uint64_t v42 = (void *)v12[2];
          BOOL v43 = *v42 == (void)v12;
          int v12 = v42;
        }

        while (!v43);
      }

      int v12 = v42;
    }

    while (v42 != v46);
  }

  sub_1003AD7FC(v44 + 48, *(char **)(v44 + 56));
  *(void *)(v44 + 56) = 0LL;
  *(void *)(v44 + 64) = 0LL;
  *(void *)(v44 + 4_Block_object_dispose(va, 8) = v46;
}

void sub_1003AC78C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, void *a24, uint64_t a25, uint64_t a26, uint64_t a27, unsigned int *a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, void **a33)
{
  if (a28) {
    sub_1002CD254(a28);
  }
  a33 = (void **)&a30;
  sub_1003ADE48(&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_1003AC804(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 222);
}

uint64_t sub_1003AC80C( uint64_t a1, uint64_t (***a2)(void, void, void, void, void, void, void, double))
{
  return (**a2)( a2,  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(unsigned __int16 *)(a1 + 60),  *(unsigned __int8 *)(a1 + 62),  *(unsigned __int8 *)(a1 + 63),  *(unsigned __int16 *)(a1 + 56),  *(double *)(a1 + 48));
}

uint64_t sub_1003AC838(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 264);
  if (v1)
  {
    unsigned int v2 = 1000 * v1;
  }

  else
  {
    int v3 = *(_DWORD *)(a1 + 260);
    if (v3) {
      unsigned int v2 = 1000 * v3;
    }
    else {
      unsigned int v2 = 5;
    }
  }

  uint64_t v4 = v2;
  unsigned int v5 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 134217984;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "nextScanDelta=%llu ms", (uint8_t *)&v7, 0xCu);
  }

  return v4;
}

uint64_t sub_1003AC908(uint64_t a1)
{
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_100894CC8);
  }
  if (sub_100449204(off_1008D6190)) {
    int v2 = *(_DWORD *)(a1 + 252);
  }
  else {
    int v2 = *(unsigned __int16 *)(a1 + 256);
  }
  int v3 = 1000 * v2;
  if (qword_1008D9700 != -1) {
    dispatch_once(&qword_1008D9700, &stru_100894BE8);
  }
  unsigned int v4 = v3 + sub_1003ACAA0((uint64_t)off_1008D96F8);
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_100894CC8);
  }
  if (*((_BYTE *)off_1008D6190 + 197) && *(_BYTE *)(a1 + 250)) {
    unsigned int v4 = 1000 * *(unsigned __int16 *)(a1 + 270);
  }
  uint64_t v5 = v4;
  uint64_t v6 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *((unsigned __int8 *)off_1008D6190 + 197);
    int v8 = *(unsigned __int8 *)(a1 + 250);
    int v10 = 134218496;
    uint64_t v11 = v5;
    __int16 v12 = 1024;
    int v13 = v7;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "getNextTotalScanDurationInMs=%llu seconds A2DP:%d wifi2G:%d",  (uint8_t *)&v10,  0x18u);
  }

  return v5;
}

uint64_t sub_1003ACAA0(uint64_t a1)
{
  int v2 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int16 *)(a1 + 216);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "getExtraScanDurationInMs %d", (uint8_t *)v5, 8u);
  }

  return *(unsigned __int16 *)(a1 + 216);
}

uint64_t sub_1003ACB48(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 214);
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_100894CC8);
  }
  if (*((_BYTE *)off_1008D6190 + 197) && *(_BYTE *)(a1 + 250)) {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 272);
  }
  int v3 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *((unsigned __int8 *)off_1008D6190 + 197);
    int v5 = *(unsigned __int8 *)(a1 + 250);
    int v7 = 134218496;
    uint64_t v8 = v2;
    __int16 v9 = 1024;
    int v10 = v4;
    __int16 v11 = 1024;
    int v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "getNextScanWithDupsDurationInSeconds %llu A2DP:%d wifi2G:%d",  (uint8_t *)&v7,  0x18u);
  }

  return v2;
}

uint64_t sub_1003ACC60(uint64_t a1)
{
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_100894CC8);
  }
  if (sub_100449204(off_1008D6190)) {
    return 48LL;
  }
  else {
    return *(unsigned __int16 *)(a1 + 268);
  }
}

uint64_t sub_1003ACCC0(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v2 timeIntervalSinceDate:*(void *)(a1 + 240)];

  if (!*(_BYTE *)(a1 + 249))
  {
    uint64_t v21 = sub_1002E6E00();
    double v18 = (os_log_s *)qword_1008F76C8;
    if (!os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT)) {
      return *(unsigned __int16 *)(a1 + 222);
    }
    int v22 = *(unsigned __int16 *)(a1 + 222);
    *(_DWORD *)std::string buf = 67109120;
    int v31 = v22;
    char v20 = "getNextScanAPWakeDelta adaptive AP Wake scheduling disabled, returning fAPWakeDeltaDurationNormalSeconds:%d";
    goto LABEL_17;
  }

  int v3 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int16 *)(a1 + 210);
    int v5 = *(char *)(a1 + 208);
    int v6 = *(_DWORD *)(a1 + 228);
    int v7 = *(unsigned __int16 *)(a1 + 232);
    int v8 = *(__int16 *)(a1 + 220);
    int v9 = *(unsigned __int16 *)(a1 + 218);
    *(_DWORD *)std::string buf = 67110400;
    int v31 = v4;
    __int16 v32 = 1024;
    int v33 = v5;
    __int16 v34 = 1024;
    int v35 = v6;
    __int16 v36 = 1024;
    int v37 = v7;
    __int16 v38 = 1024;
    BOOL v39 = v8;
    __int16 v40 = 1024;
    int v41 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "getNextScanAPWakeDelta fLastScanNumOfIndividualSightings:%d fLastScanMaxRSSI:%d fMaxDailyShortAPWakeAllowanceInSec onds:%dseconds fCurrentShortAPWakeTimeInSeconds:%dseconds fHighRSSIThreshold:%d fNumOfSightingsHighThreshold:%d",  buf,  0x26u);
  }

  if (*(unsigned __int16 *)(a1 + 210) <= *(unsigned __int16 *)(a1 + 218)
    && *(__int16 *)(a1 + 220) > *(char *)(a1 + 208)
    || *(_DWORD *)(a1 + 228) <= *(unsigned __int16 *)(a1 + 232))
  {
    double v18 = (os_log_s *)qword_1008F76C8;
    if (!os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT)) {
      return *(unsigned __int16 *)(a1 + 222);
    }
    int v19 = *(unsigned __int16 *)(a1 + 222);
    *(_DWORD *)std::string buf = 67109120;
    int v31 = v19;
    char v20 = "getNextScanAPWakeDelta returning fAPWakeDeltaDurationNormalSeconds:%d";
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v20, buf, 8u);
    return *(unsigned __int16 *)(a1 + 222);
  }

  __int16 v29 = 0;
  uint64_t v10 = sub_1002E8D54();
  (*(void (**)(uint64_t, char *, __int16 *))(*(void *)v10 + 96LL))(v10, (char *)&v29 + 1, &v29);
  int v28 = 0;
  uint64_t v11 = sub_1002E8D54();
  (*(void (**)(uint64_t, int *))(*(void *)v11 + 120LL))(v11, &v28);
  int v12 = v28;
  int v13 = HIBYTE(v29);
  __int16 v14 = (os_log_s *)qword_1008F76C8;
  BOOL v15 = os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT);
  if (v13 || v12)
  {
    if (v15)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Connected to power, not changing fCurrentShortAPWakeTimeInSeconds",  buf,  2u);
    }
  }

  else
  {
    if (v15)
    {
      int v16 = *(unsigned __int16 *)(a1 + 232);
      int v17 = *(unsigned __int16 *)(a1 + 224);
      *(_DWORD *)std::string buf = 67109376;
      int v31 = v16;
      __int16 v32 = 1024;
      int v33 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "fCurrentShortAPWakeTimeInSeconds:%d adding %d",  buf,  0xEu);
    }

    *(_WORD *)(a1 + 232) += *(_WORD *)(a1 + 224);
  }

  BOOL v24 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT))
  {
    int v25 = *(unsigned __int16 *)(a1 + 224);
    int v26 = *(unsigned __int16 *)(a1 + 232);
    *(_DWORD *)std::string buf = 67110144;
    int v31 = v25;
    __int16 v32 = 1024;
    int v33 = v26;
    __int16 v34 = 1024;
    int v35 = HIBYTE(v29);
    __int16 v36 = 1024;
    int v37 = v29;
    __int16 v38 = 1024;
    BOOL v39 = v12 != 0;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "getNextScanAPWakeDelta returning fAPWakeDeltaDurationShortSeconds:%d fCurrentShortAPWakeTimeInSeconds:%d battCharg ing:%d battCapacity:%d powerAdapterConnected:%d",  buf,  0x20u);
  }

  return *(unsigned __int16 *)(a1 + 224);
}

void sub_1003AD024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AD03C(uint64_t a1)
{
  unsigned int v2 = (os_log_s *)qword_1008F76C8;
  if (os_log_type_enabled((os_log_t)qword_1008F76C8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v23) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: ---------------- ContactTracing Manager ----------------",  (uint8_t *)&v23,  2u);
    unsigned int v2 = (os_log_s *)qword_1008F76C8;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 80);
    int v4 = *(unsigned __int8 *)(a1 + 72);
    int v23 = 134218240;
    *(void *)BOOL v24 = v3;
    *(_WORD *)&v24[8] = 1024;
    LODWORD(v25) = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: fSession:%llx fStarted:%d",  (uint8_t *)&v23,  0x12u);
    unsigned int v2 = (os_log_s *)qword_1008F76C8;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 96);
    uint64_t v6 = *(void *)(a1 + 104);
    int v23 = 138412546;
    *(void *)BOOL v24 = v5;
    *(_WORD *)&v24[8] = 2048;
    uint64_t v25 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: fSessionOwner:%@ fStartTime:%f",  (uint8_t *)&v23,  0x16u);
    unsigned int v2 = (os_log_s *)qword_1008F76C8;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(char *)(a1 + 208);
    int v8 = *(unsigned __int16 *)(a1 + 210);
    int v9 = *(__int16 *)(a1 + 212);
    int v23 = 67109632;
    *(_DWORD *)BOOL v24 = v7;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = v8;
    LOWORD(v25) = 1024;
    *(_DWORD *)((char *)&v25 + 2) = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: fLastScanMaxRSSI:%d fLastScanNumOfIndividualSightings:%d fLastSightingDelta:%d",  (uint8_t *)&v23,  0x14u);
    unsigned int v2 = (os_log_s *)qword_1008F76C8;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(unsigned __int16 *)(a1 + 214);
    int v11 = *(unsigned __int16 *)(a1 + 216);
    int v23 = 67109376;
    *(_DWORD *)BOOL v24 = v10;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: fNextScanWithDuplicatesDurationInMs:%d fExtraScanTimeInMs:%d",  (uint8_t *)&v23,  0xEu);
    unsigned int v2 = (os_log_s *)qword_1008F76C8;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = *(unsigned __int16 *)(a1 + 218);
    int v13 = *(__int16 *)(a1 + 220);
    int v23 = 67109376;
    *(_DWORD *)BOOL v24 = v12;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: fNumOfSightingsHighThreshold:%d fHighRSSIThreshold:%d",  (uint8_t *)&v23,  0xEu);
    unsigned int v2 = (os_log_s *)qword_1008F76C8;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = *(unsigned __int16 *)(a1 + 222);
    int v15 = *(unsigned __int16 *)(a1 + 224);
    int v23 = 67109376;
    *(_DWORD *)BOOL v24 = v14;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: fAPWakeDeltaDurationNormalSeconds:%d fAPWakeDeltaDurationShortSeconds:%d",  (uint8_t *)&v23,  0xEu);
    unsigned int v2 = (os_log_s *)qword_1008F76C8;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = *(unsigned __int16 *)(a1 + 232);
    int v17 = *(_DWORD *)(a1 + 228);
    int v18 = *(unsigned __int8 *)(a1 + 248);
    int v23 = 67109632;
    *(_DWORD *)BOOL v24 = v16;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = v17;
    LOWORD(v25) = 1024;
    *(_DWORD *)((char *)&v25 + 2) = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: fCurrentShortAPWakeTimeInSeconds:%d fMaxDailyShortAPWakeAllowanceInSeconds:%d fDayOfMonth:%d",  (uint8_t *)&v23,  0x14u);
    unsigned int v2 = (os_log_s *)qword_1008F76C8;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = *(unsigned __int16 *)(a1 + 234);
    int v20 = *(unsigned __int8 *)(a1 + 249);
    int v23 = 67109376;
    *(_DWORD *)BOOL v24 = v19;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: fEstimatedAPWakeCount:%d fEnableAdaptiveAPWakeScheduling:%d",  (uint8_t *)&v23,  0xEu);
    unsigned int v2 = (os_log_s *)qword_1008F76C8;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = *(char *)(a1 + 276);
    int v23 = 67109120;
    *(_DWORD *)BOOL v24 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: fMaxAllowedRSSILevel:%d",  (uint8_t *)&v23,  8u);
    unsigned int v2 = (os_log_s *)qword_1008F76C8;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = *(unsigned __int16 *)(a1 + 274);
    int v23 = 67109120;
    *(_DWORD *)BOOL v24 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: fInvalidRSSIReportCounter:%d",  (uint8_t *)&v23,  8u);
  }

uint64_t sub_1003AD460()
{
  return 1LL;
}

void sub_1003AD46C(uint64_t a1)
{
  int v1 = (void *)sub_1003AD768(a1);
  operator delete(v1);
}

uint64_t sub_1003AD48C()
{
  return 1LL;
}

uint64_t **sub_1003AD494(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    _DWORD v7[2] = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    int v15 = result;
    int v16 = v8;
    int v17 = (const void **)v8;
    if (v8)
    {
      int v16 = sub_10026145C((uint64_t)v8);
      if (a2 != a3)
      {
        int v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          uint64_t v18 = 0LL;
          int v10 = (uint64_t **)sub_1003AD618((uint64_t)v5, &v18, v17 + 4);
          sub_100029630(v5, v18, v10, (uint64_t *)v17);
          int v17 = (const void **)v16;
          if (v16) {
            int v16 = sub_10026145C((uint64_t)v16);
          }
          int v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              int v11 = (void *)*v11;
            }

            while (v11);
          }

          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              int v9 = a2;
            }

            while (!v12);
          }

          int v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          int v9 = a2;
        }

        while (!v12);
      }
    }

    uint64_t result = (uint64_t **)sub_1003AD690((uint64_t)&v15);
  }

  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_1003AD6E4(v5, (uint64_t)(a2 + 4));
      int v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          int v14 = v13;
          int v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          int v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }

        while (!v12);
      }

      a2 = v14;
    }

    while (v14 != a3);
  }

  return result;
}

void sub_1003AD604( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1003AD618(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        uint64_t v4 = *v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }

      uint64_t v4 = v5[1];
    }

    while (v4);
    uint64_t result = v5 + 1;
  }

  else
  {
    uint64_t result = (void *)(a1 + 8);
  }

uint64_t sub_1003AD690(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }

      while (v3);
      *(void *)(a1 + _Block_object_dispose(va, 8) = v2;
    }

    sub_10023E78C(*(void *)a1, (char *)v2);
  }

  return a1;
}

uint64_t *sub_1003AD6E4(uint64_t **a1, uint64_t a2)
{
  uint64_t v5 = 0LL;
  uint64_t v3 = (uint64_t **)sub_1003AD618((uint64_t)a1, &v5, (const void **)v6[0] + 4);
  sub_100029630(a1, v5, v3, v6[0]);
  return v6[0];
}

void sub_1003AD744( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_10023E740((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AD768(uint64_t a1)
{
  *(void *)a1 = off_100894A40;
  *(void *)(a1 + _Block_object_dispose(va, 8) = off_100894AD0;
  *(void *)(a1 + 16) = off_100894B30;
  *(void *)(a1 + 24) = &off_100894B60;
  *(void *)(a1 + 32) = off_100894B88;
  *(void *)(a1 + 40) = &off_100894BB8;

  uint64_t v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(void *)(a1 + 192) = v2;
    operator delete(v2);
  }

  uint64_t v4 = (void **)(a1 + 120);
  sub_100024304(&v4);

  sub_1003AD7FC(a1 + 48, *(char **)(a1 + 56));
  return a1;
}

void sub_1003AD7FC(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1003AD7FC(a1, *(void *)a2);
    sub_1003AD7FC(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 56);
    sub_1003ADE48(&v4);
    operator delete(a2);
  }

_OWORD *sub_1003AD854(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v11 = 0LL;
  uint64_t v6 = (void **)sub_1003AD8EC((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    int v9 = *((_DWORD *)*a4 + 4);
    _DWORD v7[2] = **a4;
    *((_DWORD *)v7 + 12) = v9;
    *((void *)v7 + _Block_object_dispose(va, 8) = 0LL;
    *((void *)v7 + 9) = 0LL;
    *((void *)v7 + 7) = 0LL;
    sub_100029630(a1, v11, v8, (uint64_t *)v7);
  }

  return v7;
}

void *sub_1003AD8EC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
LABEL_2:
    while (2)
    {
      uint64_t v6 = 0LL;
      uint64_t v7 = v4;
      do
      {
        unsigned int v8 = *(unsigned __int8 *)(a3 + v6);
        unsigned int v9 = *((unsigned __int8 *)v7 + v6 + 32);
        if (v8 < v9)
        {
          uint64_t v4 = (void *)*v7;
          uint64_t result = v7;
          if (*v7) {
            goto LABEL_2;
          }
          goto LABEL_22;
        }
      }

      while (v9 >= v8 && v6++ != 19);
      uint64_t v11 = 0LL;
      while (1)
      {
        unsigned int v12 = *((unsigned __int8 *)v7 + v11 + 32);
        unsigned int v13 = *(unsigned __int8 *)(a3 + v11);
        if (v12 < v13) {
          break;
        }
        if (v13 < v12 || v11++ == 19) {
          goto LABEL_22;
        }
      }

      uint64_t result = v7 + 1;
      uint64_t v4 = (void *)v7[1];
      if (v4) {
        continue;
      }
      break;
    }
  }

  else
  {
    uint64_t v7 = result;
  }

uint64_t sub_1003AD978(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v9 = v8 - v2;
  if (v9 >> 3 > v4) {
    unint64_t v4 = v9 >> 3;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v20 = v7;
  uint64_t v11 = (char *)sub_1003ADAF8(v7, v10);
  unsigned int v12 = &v11[16 * v3];
  v17[0] = v11;
  v17[1] = v12;
  uint64_t v18 = v12;
  int v19 = &v11[16 * v13];
  *(void *)unsigned int v12 = &off_10087FAE8;
  uint64_t v14 = *(void *)(a2 + 8);
  *((void *)v12 + 1) = v14;
  if (v14)
  {
    sub_1002CD1E0(v14);
    unsigned int v12 = v18;
  }

  uint64_t v18 = v12 + 16;
  sub_1003ADA58(a1, v17);
  uint64_t v15 = a1[1];
  sub_1003ADB2C((uint64_t)v17);
  return v15;
}

void sub_1003ADA44(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1003ADA58(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 != *a1)
  {
    do
    {
      *(void *)(v6 - 16) = &off_10087FAE8;
      v6 -= 16LL;
      uint64_t v7 = *(void *)(v4 - 8);
      *(void *)(v6 + _Block_object_dispose(va, 8) = v7;
      if (v7) {
        sub_1002CD1E0(v7);
      }
      v4 -= 16LL;
    }

    while (v4 != v5);
  }

  a2[1] = v6;
  uint64_t v8 = *a1;
  *a1 = v6;
  a2[1] = v8;
  uint64_t v9 = a1[1];
  a1[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = a1[2];
  a1[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
}

void *sub_1003ADAF8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100008BD4();
  }
  return operator new(16 * a2);
}

uint64_t sub_1003ADB2C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 16);
    *(void *)(a1 + 16) = i - 16;
    (*v4)();
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1003ADB7C(id a1)
{
  int v1 = operator new(0x118uLL);
  sub_1003AA3BC((uint64_t)v1);
  off_1008D96F8 = v2;
}

void sub_1003ADBA0(id a1)
{
  int v1 = operator new(0x42C0uLL);
  sub_10056DFB4();
  off_1008D6280 = v1;
}

void sub_1003ADBD0(_Unwind_Exception *a1)
{
}

void sub_1003ADBE4(id a1)
{
  int v1 = operator new(0x1128uLL);
  sub_1005DDADC();
  off_1008D6600 = v1;
}

void sub_1003ADC14(_Unwind_Exception *a1)
{
}

void sub_1003ADC28(id a1)
{
  int v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_1003ADC58(_Unwind_Exception *a1)
{
}

void sub_1003ADC6C(id a1)
{
  int v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_1003ADC9C(_Unwind_Exception *a1)
{
}

void sub_1003ADCB0(id a1)
{
  int v1 = operator new(0xA8uLL);
  sub_10040D0A0((uint64_t)v1);
  off_1008D6780 = v1;
}

void sub_1003ADCE0(_Unwind_Exception *a1)
{
}

void sub_1003ADCF4(id a1)
{
  int v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_1003ADD24(_Unwind_Exception *a1)
{
}

void sub_1003ADD38(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    sub_1003ADD88(a1, a4);
    sub_1003ADDC4((uint64_t)a1, a2, a3);
  }

char *sub_1003ADD88(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    abort();
  }
  uint64_t result = (char *)sub_1003ADAF8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_1003ADDC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (a2 != a3)
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = *(void *)(a2 + v7 + 8);
      uint64_t v9 = (void *)(v4 + v7);
      *uint64_t v9 = &off_10087FAE8;
      v9[1] = v8;
      if (v8) {
        sub_1002CD1E0(v8);
      }
      v7 += 16LL;
    }

    while (a2 + v7 != a3);
    v4 += v7;
  }

  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
}

void sub_1003ADE40(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(va, 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003ADE48(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 16;
      uint64_t v7 = v4 - 16;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 16;
        (*v8)(v6);
        BOOL v9 = v6 == v2;
        uint64_t v6 = v7;
      }

      while (!v9);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_1003ADED4(id a1)
{
  uint64_t v1 = (char *)operator new(0x200uLL);
  *(void *)uint64_t v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 1_Block_object_dispose(va, 8) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 10_Block_object_dispose(va, 8) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 2_Block_object_dispose(va, 8) = v1 + 232;
  *((void *)v1 + 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 32_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 5_Block_object_dispose(va, 8) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_1003ADFDC(_Unwind_Exception *a1)
{
}

uint64_t sub_1003ADFF0(uint64_t a1)
{
  *(void *)a1 = off_100894CF8;
  *(void *)(a1 + _Block_object_dispose(va, 8) = off_100894D88;
  *(void *)(a1 + 16) = off_100894DA8;
  *(void *)(a1 + 24) = off_100894DD0;
  *(void *)(a1 + 32) = &off_100894E10;
  *(void *)(a1 + 40) = &off_100894E28;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = &off_100894E40;
  sub_100242DC4(a1 + 56);
  *(_WORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0LL;
  return a1;
}

void sub_1003AE068(uint64_t a1)
{
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100894F48);
  }
  sub_1003B423C(qword_1008D61A0 + 8, a1 + 8);
  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_100894F68);
  }
  sub_1000762CC((uint64_t)off_1008D67E0 + 24, a1 + 16);
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_100894F88);
  }
  sub_10052AB64(off_1008D67A0, a1 + 24);
  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_100894FA8);
  }
  sub_1004229CC(off_1008D60C8, a1 + 32);
  if (qword_1008D6788 != -1) {
    dispatch_once(&qword_1008D6788, &stru_100894FC8);
  }
  sub_10024DD9C((uint64_t)off_1008D6780 + 80, a1 + 40);
  *(_WORD *)(a1 + 120) = 0;
}

void sub_1003AE1AC(uint64_t a1)
{
  if (qword_1008D6788 != -1) {
    dispatch_once(&qword_1008D6788, &stru_100894FC8);
  }
  sub_100009168((uint64_t)off_1008D6780 + 80, a1 + 40);
  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_100894FA8);
  }
  sub_100422AD4((uint64_t)off_1008D60C8, a1 + 32);
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_100894F88);
  }
  sub_10052AC9C((uint64_t)off_1008D67A0, a1 + 24);
  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_100894F68);
  }
  sub_100009168((uint64_t)off_1008D67E0 + 24, a1 + 16);
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100894F48);
  }
  sub_100009168(qword_1008D61A0 + 8, a1 + 8);
  uint64_t v2 = *(unint64_t **)(a1 + 232);
  if (v2 != *(unint64_t **)(a1 + 240))
  {
    do
    {
      unint64_t v3 = *v2;
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_100894F48);
      }
      sub_100497354(qword_1008D61A0, v3);
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_100894F48);
      }
      sub_10049780C(qword_1008D61A0, v3);
      ++v2;
    }

    while (v2 != *(unint64_t **)(a1 + 240));
    uint64_t v2 = *(unint64_t **)(a1 + 232);
  }

  *(void *)(a1 + 240) = v2;
}

uint64_t sub_1003AE390(void *a1, uint64_t a2)
{
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, (uint64_t)(a1 + 7));
  uint64_t v4 = (void *)a1[26];
  uint64_t v5 = (void *)a1[27];
  uint64_t v6 = v4;
  if (v4 != v5)
  {
    while (*v6 != a2)
    {
      if (++v6 == v5)
      {
        uint64_t v6 = (void *)a1[27];
        break;
      }
    }
  }

  if (v6 == v5)
  {
    unint64_t v7 = a1[28];
    if ((unint64_t)v5 >= v7)
    {
      uint64_t v9 = v5 - v4;
      uint64_t v10 = v7 - (void)v4;
      uint64_t v11 = v10 >> 2;
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        uint64_t v13 = (char *)sub_100008BA0((uint64_t)(a1 + 28), v12);
      }
      else {
        uint64_t v13 = 0LL;
      }
      uint64_t v14 = &v13[8 * v9];
      uint64_t v15 = &v13[8 * v12];
      *(void *)uint64_t v14 = a2;
      uint64_t v8 = v14 + 8;
      int v17 = (char *)a1[26];
      int v16 = (char *)a1[27];
      if (v16 != v17)
      {
        do
        {
          uint64_t v18 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v14 - 1) = v18;
          v14 -= 8;
        }

        while (v16 != v17);
        int v16 = (char *)a1[26];
      }

      a1[26] = v14;
      a1[27] = v8;
      a1[28] = v15;
      if (v16) {
        operator delete(v16);
      }
    }

    else
    {
      *uint64_t v5 = a2;
      uint64_t v8 = v5 + 1;
    }

    a1[27] = v8;
  }

  return sub_100242FAC((uint64_t)v20);
}

void sub_1003AE4B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003AE4C8(uint64_t a1, uint64_t a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 56);
  uint64_t v5 = *(char **)(a1 + 208);
  uint64_t v4 = *(char **)(a1 + 216);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 216);
        break;
      }
    }
  }

  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 216) = &v5[v6];
  }

  return sub_100242FAC((uint64_t)v8);
}

uint64_t sub_1003AE560(uint64_t a1, uint64_t a2)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, a1 + 56);
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  sub_100240540(&v10, a1 + 208);
  sub_100242F54((uint64_t)v13);
  uint64_t v4 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device %{public}s was plugged in", buf, 0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  int64_t v6 = v10;
  if (v10 != v11)
  {
    do
    {
      (*(void (**)(void, uint64_t))(*(void *)*v6 + 16LL))(*v6, a2);
      ++v6;
    }

    while (v6 != v11);
    int64_t v6 = v10;
  }

  if (v6)
  {
    uint64_t v11 = v6;
    operator delete(v6);
  }

  return sub_100242FAC((uint64_t)v13);
}

void sub_1003AE6B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1003AE6F0(uint64_t a1, uint64_t a2)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, a1 + 56);
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  sub_100240540(&v10, a1 + 208);
  sub_100242F54((uint64_t)v13);
  uint64_t v4 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device %{public}s was unplugged", buf, 0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  int64_t v6 = v10;
  if (v10 != v11)
  {
    do
    {
      (*(void (**)(void, uint64_t))(*(void *)*v6 + 24LL))(*v6, a2);
      ++v6;
    }

    while (v6 != v11);
    int64_t v6 = v10;
  }

  if (v6)
  {
    uint64_t v11 = v6;
    operator delete(v6);
  }

  return sub_100242FAC((uint64_t)v13);
}

void sub_1003AE844( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1003AE880(uint64_t a1, uint64_t a2)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, a1 + 56);
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  sub_100240540(&v10, a1 + 208);
  sub_100242F54((uint64_t)v13);
  uint64_t v4 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v15 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Device %{public}s was registered as a new accessory",  buf,  0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  int64_t v6 = v10;
  if (v10 != v11)
  {
    do
    {
      (*(void (**)(void, uint64_t))(*(void *)*v6 + 32LL))(*v6, a2);
      ++v6;
    }

    while (v6 != v11);
    int64_t v6 = v10;
  }

  if (v6)
  {
    uint64_t v11 = v6;
    operator delete(v6);
  }

  return sub_100242FAC((uint64_t)v13);
}

void sub_1003AE9D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1003AEA10(uint64_t a1, uint64_t a2)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, a1 + 56);
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  sub_100240540(&v10, a1 + 208);
  sub_100242F54((uint64_t)v13);
  uint64_t v4 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_INFO))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v15 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Device %{public}s reported a battery level change",  buf,  0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  int64_t v6 = v10;
  if (v10 != v11)
  {
    do
    {
      (*(void (**)(void, uint64_t))(*(void *)*v6 + 40LL))(*v6, a2);
      ++v6;
    }

    while (v6 != v11);
    int64_t v6 = v10;
  }

  if (v6)
  {
    uint64_t v11 = v6;
    operator delete(v6);
  }

  return sub_100242FAC((uint64_t)v13);
}

void sub_1003AEB64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1003AEBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v19[0] = 0LL;
  v19[1] = 0LL;
  sub_100242F28((uint64_t)v19, a1 + 56);
  int v16 = 0LL;
  int v17 = 0LL;
  uint64_t v18 = 0LL;
  sub_100240540(&v16, a1 + 208);
  sub_100242F54((uint64_t)v19);
  uint64_t v10 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_INFO))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v11 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446978;
    int v21 = v11;
    __int16 v22 = 1024;
    int v23 = a3;
    __int16 v24 = 1024;
    int v25 = a4;
    __int16 v26 = 1024;
    int v27 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Device %{public}s reported command status: type %d, result %u, reason %u",  buf,  0x1Eu);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v12 = v16;
  if (v16 != v17)
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)*v12 + 48LL))( *v12,  a2,  a3,  a4,  a5);
      ++v12;
    }

    while (v12 != v17);
    uint64_t v12 = v16;
  }

  if (v12)
  {
    int v17 = v12;
    operator delete(v12);
  }

  return sub_100242FAC((uint64_t)v19);
}

void sub_1003AED30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1003AED6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[0] = 0LL;
  v17[1] = 0LL;
  sub_100242F28((uint64_t)v17, a1 + 56);
  uint64_t v14 = 0LL;
  char v15 = 0LL;
  uint64_t v16 = 0LL;
  sub_100240540(&v14, a1 + 208);
  sub_100242F54((uint64_t)v17);
  uint64_t v8 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_INFO))
  {
    sub_1003CF00C(a2, __p);
    char v9 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    int v19 = v9;
    __int16 v20 = 1024;
    int v21 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Device %{public}s Context Detect msg received, len: %d",  buf,  0x12u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v10 = v14;
  if (v14 != v15)
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v10 + 56LL))(*v10, a2, a3, a4);
      ++v10;
    }

    while (v10 != v15);
    uint64_t v10 = v14;
  }

  if (v10)
  {
    char v15 = v10;
    operator delete(v10);
  }

  return sub_100242FAC((uint64_t)v17);
}

void sub_1003AEEE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1003AEF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[0] = 0LL;
  v17[1] = 0LL;
  sub_100242F28((uint64_t)v17, a1 + 56);
  uint64_t v14 = 0LL;
  char v15 = 0LL;
  uint64_t v16 = 0LL;
  sub_100240540(&v14, a1 + 208);
  sub_100242F54((uint64_t)v17);
  uint64_t v8 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_INFO))
  {
    sub_1003CF00C(a2, __p);
    char v9 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    int v19 = v9;
    __int16 v20 = 1024;
    int v21 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Device %{public}s Conversation Detect msg received, len: %d",  buf,  0x12u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v10 = v14;
  if (v14 != v15)
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v10 + 64LL))(*v10, a2, a3, a4);
      ++v10;
    }

    while (v10 != v15);
    uint64_t v10 = v14;
  }

  if (v10)
  {
    char v15 = v10;
    operator delete(v10);
  }

  return sub_100242FAC((uint64_t)v17);
}

void sub_1003AF098( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1003AF0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[0] = 0LL;
  v17[1] = 0LL;
  sub_100242F28((uint64_t)v17, a1 + 56);
  uint64_t v14 = 0LL;
  char v15 = 0LL;
  uint64_t v16 = 0LL;
  sub_100240540(&v14, a1 + 208);
  sub_100242F54((uint64_t)v17);
  uint64_t v8 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_INFO))
  {
    sub_1003CF00C(a2, __p);
    char v9 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    int v19 = v9;
    __int16 v20 = 1024;
    int v21 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Device %{public}s PME config msg received, len: %d",  buf,  0x12u);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v10 = v14;
  if (v14 != v15)
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v10 + 72LL))(*v10, a2, a3, a4);
      ++v10;
    }

    while (v10 != v15);
    uint64_t v10 = v14;
  }

  if (v10)
  {
    char v15 = v10;
    operator delete(v10);
  }

  return sub_100242FAC((uint64_t)v17);
}

void sub_1003AF24C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1003AF288(uint64_t a1, uint64_t a2)
{
  v26[0] = 0LL;
  v26[1] = 0LL;
  sub_100242F28((uint64_t)v26, a1 + 56);
  int v23 = 0LL;
  __int16 v24 = 0LL;
  uint64_t v25 = 0LL;
  sub_100240540(&v23, a1 + 208);
  sub_100242F54((uint64_t)v26);
  uint64_t v4 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_INFO))
  {
    sub_1003CF00C(a2, __p);
    uint64_t v5 = v22 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    __int16 v30 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Device %{public}s reported in ear state change",  buf,  0xCu);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }

  for (uint64_t i = v23; i != v24; ++i)
    (*(void (**)(void, uint64_t))(*(void *)*i + 80LL))(*i, a2);
  if (sub_100487B60())
  {
    *(_DWORD *)std::string buf = 0;
    unsigned int v20 = 0;
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100894FE8);
    }
    sub_10021F164((uint64_t)off_1008D60D8, a2, (int *)buf, (int *)&v20);
    sub_1003D0100(a2, (uint64_t)__p);
    if (v22 >= 0) {
      unint64_t v7 = __p;
    }
    else {
      unint64_t v7 = (void **)__p[0];
    }
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v7));
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    sub_1003FE1B4((unsigned __int8 *)(a2 + 128), __p);
    if (v22 >= 0) {
      char v9 = __p;
    }
    else {
      char v9 = (void **)__p[0];
    }
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v9));
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    v27[0] = @"primaryInEarStatus";
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)buf));
    v28[0] = v11;
    v27[1] = @"secondaryInEarStatus";
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v20));
    v28[1] = v12;
    char v13 = (void *)objc_claimAutoreleasedReturnValue(+[_CDContextQueries bluetoothNameKey](&OBJC_CLASS____CDContextQueries, "bluetoothNameKey"));
    void v27[2] = v13;
    void v28[2] = v8;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[_CDContextQueries bluetoothAddressKey](&OBJC_CLASS____CDContextQueries, "bluetoothAddressKey"));
    _OWORD v27[3] = v14;
    void v28[3] = v10;
    char v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v28,  v27,  4LL));

    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[_CDContextualKeyPath keyPathWithKey:]( &OBJC_CLASS____CDContextualKeyPath,  "keyPathWithKey:",  @"/bluetooth/inEarStatus"));
    id v17 = [v15 copy];
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[_CDClientContext userContext](&OBJC_CLASS____CDClientContext, "userContext"));
    [v18 setObject:v17 forKeyedSubscript:v16];
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
  {
    sub_10067769C();
  }

  if (v23)
  {
    __int16 v24 = v23;
    operator delete(v23);
  }

  return sub_100242FAC((uint64_t)v26);
}

void sub_1003AF5F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1003AF6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v22[0] = 0LL;
  v22[1] = 0LL;
  sub_100242F28((uint64_t)v22, a1 + 56);
  int v19 = 0LL;
  unsigned int v20 = 0LL;
  uint64_t v21 = 0LL;
  sub_100240540(&v19, a1 + 208);
  sub_100242F54((uint64_t)v22);
  uint64_t v12 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_INFO))
  {
    sub_1003CF00C(a2, __p);
    char v13 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136448258;
    __int16 v24 = v13;
    __int16 v25 = 1024;
    int v26 = a3;
    __int16 v27 = 1024;
    int v28 = BYTE1(a3);
    __int16 v29 = 1024;
    int v30 = BYTE2(a3);
    __int16 v31 = 1024;
    int v32 = BYTE3(a3);
    __int16 v33 = 1024;
    int v34 = BYTE4(a3);
    __int16 v35 = 1024;
    int v36 = BYTE5(a3);
    __int16 v37 = 1024;
    int v38 = a4;
    __int16 v39 = 1024;
    int v40 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Device %{public}s relay msg received: srcAddr %02X:%02X:%02X:%02X:%02X:%02X, type %d, len %d",  buf,  0x3Cu);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v14 = v19;
  if (v19 != v20)
  {
    uint64_t v15 = a3 & 0xFFFFFFFFFFFFLL;
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)*v14 + 88LL))( *v14,  a2,  v15,  a4,  a5,  a6);
      ++v14;
    }

    while (v14 != v20);
    uint64_t v14 = v19;
  }

  if (v14)
  {
    unsigned int v20 = v14;
    operator delete(v14);
  }

  return sub_100242FAC((uint64_t)v22);
}

void sub_1003AF8D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1003AF90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, a1 + 56);
  uint64_t v12 = 0LL;
  char v13 = 0LL;
  uint64_t v14 = 0LL;
  sub_100240540(&v12, a1 + 208);
  sub_100242F54((uint64_t)v15);
  int64_t v6 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_INFO))
  {
    sub_1003CF00C(a2, __p);
    unint64_t v7 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    id v17 = v7;
    __int16 v18 = 1024;
    int v19 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Device %{public}s stream state changed: %u",  buf,  0x12u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v8 = v12;
  if (v12 != v13)
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v8 + 96LL))(*v8, a2, a3);
      ++v8;
    }

    while (v8 != v13);
    uint64_t v8 = v12;
  }

  if (v8)
  {
    char v13 = v8;
    operator delete(v8);
  }

  return sub_100242FAC((uint64_t)v15);
}

void sub_1003AFA74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1003AFAB0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  v28[0] = 0LL;
  v28[1] = 0LL;
  sub_100242F28((uint64_t)v28, a1 + 56);
  int64_t v6 = *(unint64_t **)(a1 + 256);
  if (v6 == *(unint64_t **)(a1 + 264))
  {
    uint64_t v21 = 106LL;
  }

  else
  {
    do
    {
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_100894F48);
      }
      if (sub_10049729C(qword_1008D61A0, *v6))
      {
        v6 += 7;
        uint64_t v7 = *(void *)(a1 + 264);
      }

      else
      {
        uint64_t v8 = (os_log_s *)qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Warning: AccessoryManager, Invalid BTAccessoryManager handle - removing associated callbacks",  buf,  2u);
        }

        sub_1003B4750((uint64_t)(v6 + 7), *(void *)(a1 + 264), (uint64_t)v6);
        uint64_t v7 = v9;
        *(void *)(a1 + 264) = v9;
      }
    }

    while (v6 != (unint64_t *)v7);
    uint64_t v10 = *(void *)(a1 + 256);
    *(void *)std::string buf = 0LL;
    int v26 = 0LL;
    uint64_t v27 = 0LL;
    sub_1003B47A4((char *)buf, v10, v7, 0x6DB6DB6DB6DB6DB7LL * ((v7 - v10) >> 3));
    sub_100242F54((uint64_t)v28);
    char v11 = *(unint64_t **)buf;
    uint64_t v12 = v26;
    if (*(unint64_t **)buf != v26)
    {
      do
      {
        if (qword_1008D61A8 != -1) {
          dispatch_once(&qword_1008D61A8, &stru_100894F48);
        }
        uint64_t v13 = sub_10049729C(qword_1008D61A0, *v11);
        if (qword_1008D5F50 != -1) {
          dispatch_once(&qword_1008D5F50, &stru_100895008);
        }
        unint64_t v14 = sub_1003FEFA8((uint64_t)off_1008D5F48, *v11, a2);
        if (v11[1])
        {
          unint64_t v15 = v14;
          if (qword_1008D9138 != -1) {
            dispatch_once(&qword_1008D9138, &stru_100895028);
          }
          uint64_t v16 = off_1008D9130;
          id v17 = operator new(0x48uLL);
          unint64_t v19 = *v11;
          unint64_t v18 = v11[1];
          unint64_t v20 = v11[6];
          void v17[4] = 1;
          *((void *)v17 + 2) = v13;
          *((void *)v17 + 3) = v18;
          *(void *)id v17 = &off_100894E58;
          *((void *)v17 + 4) = v20;
          *((void *)v17 + 5) = v19;
          *((_DWORD *)v17 + 12) = a3;
          *((void *)v17 + 7) = v15;
          *((_DWORD *)v17 + 16) = a4;
          sub_1004946C4((uint64_t)v16, v17);
        }

        v11 += 7;
      }

      while (v11 != v12);
      char v11 = *(unint64_t **)buf;
    }

    if (v11)
    {
      int v26 = v11;
      operator delete(v11);
    }

    uint64_t v21 = 0LL;
  }

  sub_100242FAC((uint64_t)v28);
  return v21;
}

void sub_1003AFD4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1003AFD88(uint64_t a1, uint64_t a2, int a3, char a4, unsigned int a5, const void *a6)
{
  v33[0] = 0LL;
  v33[1] = 0LL;
  sub_100242F28((uint64_t)v33, a1 + 56);
  uint64_t v8 = *(unint64_t **)(a1 + 256);
  if (v8 == *(unint64_t **)(a1 + 264))
  {
    uint64_t v24 = 106LL;
  }

  else
  {
    do
    {
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_100894F48);
      }
      if (sub_10049729C(qword_1008D61A0, *v8))
      {
        v8 += 7;
        uint64_t v9 = *(void *)(a1 + 264);
      }

      else
      {
        uint64_t v10 = (os_log_s *)qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Warning: AccessoryManager, Invalid BTAccessoryManager handle - removing associated callbacks",  buf,  2u);
        }

        sub_1003B4750((uint64_t)(v8 + 7), *(void *)(a1 + 264), (uint64_t)v8);
        uint64_t v9 = v11;
        *(void *)(a1 + 264) = v11;
      }
    }

    while (v8 != (unint64_t *)v9);
    uint64_t v12 = *(void *)(a1 + 256);
    *(void *)std::string buf = 0LL;
    __int16 v31 = 0LL;
    uint64_t v32 = 0LL;
    sub_1003B47A4((char *)buf, v12, v9, 0x6DB6DB6DB6DB6DB7LL * ((v9 - v12) >> 3));
    sub_100242F54((uint64_t)v33);
    unint64_t v14 = *(unint64_t **)buf;
    uint64_t v13 = v31;
    if (*(unint64_t **)buf != v31)
    {
      do
      {
        if (qword_1008D61A8 != -1) {
          dispatch_once(&qword_1008D61A8, &stru_100894F48);
        }
        uint64_t v15 = sub_10049729C(qword_1008D61A0, *v14);
        if (qword_1008D5F50 != -1) {
          dispatch_once(&qword_1008D5F50, &stru_100895008);
        }
        unint64_t v16 = sub_1003FEFA8((uint64_t)off_1008D5F48, *v14, a2);
        if (v14[2])
        {
          unint64_t v17 = v16;
          if (qword_1008D9138 != -1) {
            dispatch_once(&qword_1008D9138, &stru_100895028);
          }
          unint64_t v18 = off_1008D9130;
          unint64_t v19 = operator new(0x48uLL);
          unint64_t v20 = v14[2];
          unint64_t v21 = *v14;
          unint64_t v22 = v14[6];
          v19[4] = 1;
          *((void *)v19 + 2) = v15;
          *((void *)v19 + 3) = v20;
          *(void *)unint64_t v19 = off_100894E98;
          *((void *)v19 + 4) = v22;
          *((void *)v19 + 5) = v21;
          *((void *)v19 + 6) = v17;
          *((_DWORD *)v19 + 14) = a3;
          *((_BYTE *)v19 + 60) = a4;
          v19[31] = a5;
          int v23 = malloc(a5);
          *((void *)v19 + _Block_object_dispose(va, 8) = v23;
          memcpy(v23, a6, a5);
          sub_1004946C4((uint64_t)v18, v19);
        }

        v14 += 7;
      }

      while (v14 != v13);
      unint64_t v14 = *(unint64_t **)buf;
    }

    if (v14)
    {
      __int16 v31 = v14;
      operator delete(v14);
    }

    uint64_t v24 = 0LL;
  }

  sub_100242FAC((uint64_t)v33);
  return v24;
}

void sub_1003B005C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1003B0098(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, const void *a6)
{
  v33[0] = 0LL;
  v33[1] = 0LL;
  sub_100242F28((uint64_t)v33, a1 + 56);
  uint64_t v7 = *(unint64_t **)(a1 + 256);
  if (v7 == *(unint64_t **)(a1 + 264))
  {
    uint64_t v23 = 106LL;
  }

  else
  {
    do
    {
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_100894F48);
      }
      if (sub_10049729C(qword_1008D61A0, *v7))
      {
        v7 += 7;
        uint64_t v8 = *(void *)(a1 + 264);
      }

      else
      {
        uint64_t v9 = (os_log_s *)qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Warning: AccessoryManager, Invalid BTAccessoryManager handle - removing associated callbacks",  buf,  2u);
        }

        sub_1003B4750((uint64_t)(v7 + 7), *(void *)(a1 + 264), (uint64_t)v7);
        uint64_t v8 = v10;
        *(void *)(a1 + 264) = v10;
      }
    }

    while (v7 != (unint64_t *)v8);
    uint64_t v11 = *(void *)(a1 + 256);
    *(void *)std::string buf = 0LL;
    __int16 v31 = 0LL;
    uint64_t v32 = 0LL;
    sub_1003B47A4((char *)buf, v11, v8, 0x6DB6DB6DB6DB6DB7LL * ((v8 - v11) >> 3));
    sub_100242F54((uint64_t)v33);
    uint64_t v13 = *(unint64_t **)buf;
    uint64_t v12 = v31;
    if (*(unint64_t **)buf != v31)
    {
      do
      {
        if (qword_1008D61A8 != -1) {
          dispatch_once(&qword_1008D61A8, &stru_100894F48);
        }
        uint64_t v14 = sub_10049729C(qword_1008D61A0, *v13);
        if (qword_1008D5F50 != -1) {
          dispatch_once(&qword_1008D5F50, &stru_100895008);
        }
        unint64_t v15 = sub_1003FEFA8((uint64_t)off_1008D5F48, *v13, a2);
        if (v13[3])
        {
          unint64_t v16 = v15;
          if (qword_1008D9138 != -1) {
            dispatch_once(&qword_1008D9138, &stru_100895028);
          }
          unint64_t v17 = off_1008D9130;
          unint64_t v18 = operator new(0x50uLL);
          unint64_t v19 = v13[3];
          unint64_t v20 = *v13;
          unint64_t v21 = v13[6];
          v18[4] = 1;
          *((void *)v18 + 2) = v14;
          *((void *)v18 + 3) = v19;
          *(void *)unint64_t v18 = off_100894ED8;
          *((void *)v18 + 4) = v21;
          *((void *)v18 + 5) = v20;
          *((void *)v18 + 6) = v16;
          *((_DWORD *)v18 + 14) = a3;
          v18[30] = WORD2(a3);
          *((_DWORD *)v18 + 16) = a4;
          v18[34] = a5;
          unint64_t v22 = malloc(a5);
          *((void *)v18 + 9) = v22;
          memcpy(v22, a6, a5);
          sub_1004946C4((uint64_t)v17, v18);
        }

        v13 += 7;
      }

      while (v13 != v12);
      uint64_t v13 = *(unint64_t **)buf;
    }

    if (v13)
    {
      __int16 v31 = v13;
      operator delete(v13);
    }

    uint64_t v23 = 0LL;
  }

  sub_100242FAC((uint64_t)v33);
  return v23;
}

void sub_1003B037C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1003B03B8(uint64_t a1, uint64_t a2, int a3, __int16 a4, __int16 a5)
{
  v30[0] = 0LL;
  v30[1] = 0LL;
  sub_100242F28((uint64_t)v30, a1 + 56);
  uint64_t v7 = *(unint64_t **)(a1 + 256);
  if (v7 == *(unint64_t **)(a1 + 264))
  {
    uint64_t v22 = 106LL;
  }

  else
  {
    do
    {
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_100894F48);
      }
      if (sub_10049729C(qword_1008D61A0, *v7))
      {
        v7 += 7;
        uint64_t v8 = *(void *)(a1 + 264);
      }

      else
      {
        uint64_t v9 = (os_log_s *)qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Warning: AccessoryManager, Invalid BTAccessoryManager handle - removing associated callbacks",  buf,  2u);
        }

        sub_1003B4750((uint64_t)(v7 + 7), *(void *)(a1 + 264), (uint64_t)v7);
        uint64_t v8 = v10;
        *(void *)(a1 + 264) = v10;
      }
    }

    while (v7 != (unint64_t *)v8);
    uint64_t v11 = *(void *)(a1 + 256);
    *(void *)std::string buf = 0LL;
    int v28 = 0LL;
    uint64_t v29 = 0LL;
    sub_1003B47A4((char *)buf, v11, v8, 0x6DB6DB6DB6DB6DB7LL * ((v8 - v11) >> 3));
    sub_100242F54((uint64_t)v30);
    uint64_t v12 = *(unint64_t **)buf;
    uint64_t v13 = v28;
    if (*(unint64_t **)buf != v28)
    {
      do
      {
        if (qword_1008D61A8 != -1) {
          dispatch_once(&qword_1008D61A8, &stru_100894F48);
        }
        uint64_t v14 = sub_10049729C(qword_1008D61A0, *v12);
        if (qword_1008D5F50 != -1) {
          dispatch_once(&qword_1008D5F50, &stru_100895008);
        }
        unint64_t v15 = sub_1003FEFA8((uint64_t)off_1008D5F48, *v12, a2);
        if (v12[4])
        {
          unint64_t v16 = v15;
          if (qword_1008D9138 != -1) {
            dispatch_once(&qword_1008D9138, &stru_100895028);
          }
          unint64_t v17 = off_1008D9130;
          unint64_t v18 = operator new(0x40uLL);
          unint64_t v19 = v12[4];
          unint64_t v20 = *v12;
          unint64_t v21 = v12[6];
          v18[4] = 1;
          *((void *)v18 + 2) = v14;
          *((void *)v18 + 3) = v19;
          *(void *)unint64_t v18 = &off_100894F18;
          *((void *)v18 + 4) = v21;
          *((void *)v18 + 5) = v20;
          *((void *)v18 + 6) = v16;
          *((_DWORD *)v18 + 14) = a3;
          v18[30] = a4;
          v18[31] = a5;
          sub_1004946C4((uint64_t)v17, v18);
        }

        v12 += 7;
      }

      while (v12 != v13);
      uint64_t v12 = *(unint64_t **)buf;
    }

    if (v12)
    {
      int v28 = v12;
      operator delete(v12);
    }

    uint64_t v22 = 0LL;
  }

  sub_100242FAC((uint64_t)v30);
  return v22;
}

void sub_1003B0664( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1003B06A0(uint64_t a1)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1 + 56);
  unint64_t v3 = *(unsigned __int8 ***)(a1 + 160);
  uint64_t v2 = *(unsigned __int8 ***)(a1 + 168);
  if (v3 != v2)
  {
    int v4 = *(unsigned __int8 *)(a1 + 120);
    if (*(_BYTE *)(a1 + 120) || *(_BYTE *)(a1 + 121))
    {
      uint64_t v5 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
      {
        int64_t v6 = "(someone is connecting)";
        if (!v4) {
          int64_t v6 = "(someone is pairing)";
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Auto pairing is not allowed at the moment %{public}s, trying again later",  (uint8_t *)&buf,  0xCu);
      }
    }

    else
    {
      uint64_t v8 = *v3;
      int64_t v9 = (char *)v2 - (char *)(v3 + 1);
      if (v2 != v3 + 1) {
        memmove(*(void **)(a1 + 160), v3 + 1, (char *)v2 - (char *)(v3 + 1));
      }
      *(void *)(a1 + 16_Block_object_dispose(va, 8) = (char *)v3 + v9;
      sub_100242F54((uint64_t)v11);
      sub_1003AE560(a1, (uint64_t)v8);
      if ((sub_1003CF350(v8) & 1) == 0)
      {
        if (qword_1008D60D0 != -1) {
          dispatch_once(&qword_1008D60D0, &stru_100894FA8);
        }
        memset(&buf, 0, sizeof(buf));
        int v10 = sub_100424360((int64x2_t *)off_1008D60C8, (uint64_t)v8, -1, &buf, 2LL);
        if (!v10)
        {
          sub_100242ECC((uint64_t)v11);
          *(void *)(a1 + 12_Block_object_dispose(va, 8) = v8;
          sub_100242F54((uint64_t)v11);
        }
      }
    }
  }

  return sub_100242FAC((uint64_t)v11);
}

void sub_1003B0854( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t sub_1003B0894(void *a1, uint64_t a2)
{
  v24[0] = 0LL;
  v24[1] = 0LL;
  sub_100242F28((uint64_t)v24, (uint64_t)(a1 + 7));
  std::string __p = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  int v4 = (unint64_t *)a1[29];
  if (v4 != (unint64_t *)a1[30])
  {
    do
    {
      unint64_t v5 = *v4;
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_100894F48);
      }
      if (sub_10049729C(qword_1008D61A0, v5) == a2)
      {
        int64_t v6 = (unint64_t *)a1[30];
        int64_t v7 = (char *)v6 - (char *)(v4 + 1);
        if (v6 != v4 + 1) {
          memmove(v4, v4 + 1, (char *)v6 - (char *)(v4 + 1));
        }
        a1[30] = (char *)v4 + v7;
        if (v22 >= v23)
        {
          uint64_t v9 = v22 - __p;
          unint64_t v10 = ((char *)v23 - (char *)__p) >> 2;
          if (v10 <= v9 + 1) {
            unint64_t v10 = v9 + 1;
          }
          else {
            unint64_t v11 = v10;
          }
          if (v11) {
            uint64_t v12 = (char *)sub_100008BA0((uint64_t)&v23, v11);
          }
          else {
            uint64_t v12 = 0LL;
          }
          uint64_t v13 = (unint64_t *)&v12[8 * v9];
          unint64_t *v13 = v5;
          uint64_t v8 = (uint64_t *)(v13 + 1);
          uint64_t v14 = v22;
          if (v22 != __p)
          {
            do
            {
              unint64_t v15 = *--v14;
              *--uint64_t v13 = v15;
            }

            while (v14 != __p);
            uint64_t v14 = __p;
          }

          std::string __p = (uint64_t *)v13;
          uint64_t v23 = (uint64_t *)&v12[8 * v11];
          if (v14) {
            operator delete(v14);
          }
        }

        else
        {
          uint64_t *v22 = v5;
          uint64_t v8 = v22 + 1;
        }

        uint64_t v22 = v8;
      }

      else
      {
        ++v4;
      }
    }

    while (v4 != (unint64_t *)a1[30]);
    unint64_t v17 = __p;
    unint64_t v16 = v22;
    if (__p != v22)
    {
      do
      {
        unint64_t v18 = *v17;
        uint64_t v19 = sub_1003B48EC(a1[32], a1[33], *v17);
        sub_1003B48A8((uint64_t)(a1 + 32), v19, a1[33]);
        if (qword_1008D61A8 != -1) {
          dispatch_once(&qword_1008D61A8, &stru_100894F48);
        }
        sub_100497354(qword_1008D61A0, v18);
        if (qword_1008D61A8 != -1) {
          dispatch_once(&qword_1008D61A8, &stru_100894F48);
        }
        sub_10049780C(qword_1008D61A0, v18);
        ++v17;
      }

      while (v17 != v22);
      unint64_t v16 = __p;
    }

    if (v16) {
      operator delete(v16);
    }
  }

  return sub_100242FAC((uint64_t)v24);
}

void sub_1003B0AF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1003B0B20(uint64_t a1, uint64_t a2)
{
  return sub_1003B0894((void *)(a1 - 8), a2);
}

void *sub_1003B0B28(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v8 = (uint64_t)result;
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895008);
    }
    uint64_t result = sub_10040007C(off_1008D5F48, a2, 0);
    if (result)
    {
      uint64_t v9 = (uint64_t)result;
      if (a3) {
        int v10 = 7;
      }
      else {
        int v10 = 8;
      }
      unint64_t v11 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = "Not Ready";
        int v13 = 136446722;
        if (a3) {
          uint64_t v12 = "Ready";
        }
        uint64_t v14 = v12;
        __int16 v15 = 2048;
        uint64_t v16 = a5;
        __int16 v17 = 1024;
        int v18 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Remote Timesync: Timesync Notification %{public}s : %llx [%d]",  (uint8_t *)&v13,  0x1Cu);
      }

      return (void *)sub_1003AFAB0(v8, v9, v10, 0);
    }
  }

  return result;
}

void *sub_1003B0C7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_1003B0B28((void *)(a1 - 48), a2, a3, a4, a5);
}

void sub_1003B0C84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (os_log_s *)qword_1008F7568;
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Notify clients of head track change", v5, 2u);
    }

    sub_1003AFAB0(a1, a2, 14, 0);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
  {
    sub_1006776C8();
  }

uint64_t sub_1003B0D30(uint64_t result, int a2, int a3)
{
  if (a2 == 1)
  {
    uint64_t v3 = result;
    if (a3)
    {
      if (a3 == 1) {
        return sub_1003B06A0(result);
      }
    }

    else
    {
      v19[0] = 0LL;
      v19[1] = 0LL;
      sub_100242F28((uint64_t)v19, result + 56);
      *(_WORD *)(v3 + 120) = 0;
      uint64_t v4 = *(void *)(v3 + 128);
      if (v4)
      {
        sub_100242F54((uint64_t)v19);
        unint64_t v5 = *(void *)(v3 + 176);
        int64_t v6 = *(void **)(v3 + 168);
        if ((unint64_t)v6 >= v5)
        {
          uint64_t v8 = *(void *)(v3 + 160);
          uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
          uint64_t v10 = v5 - v8;
          uint64_t v11 = v10 >> 2;
          else {
            unint64_t v12 = v11;
          }
          if (v12) {
            int v13 = (char *)sub_100008BA0(v3 + 176, v12);
          }
          else {
            int v13 = 0LL;
          }
          uint64_t v14 = &v13[8 * v9];
          __int16 v15 = &v13[8 * v12];
          *(void *)uint64_t v14 = v4;
          int64_t v7 = v14 + 8;
          __int16 v17 = *(char **)(v3 + 160);
          uint64_t v16 = *(char **)(v3 + 168);
          if (v16 != v17)
          {
            do
            {
              uint64_t v18 = *((void *)v16 - 1);
              v16 -= 8;
              *((void *)v14 - 1) = v18;
              v14 -= 8;
            }

            while (v16 != v17);
            uint64_t v16 = *(char **)(v3 + 160);
          }

          *(void *)(v3 + 160) = v14;
          *(void *)(v3 + 16_Block_object_dispose(va, 8) = v7;
          *(void *)(v3 + 176) = v15;
          if (v16) {
            operator delete(v16);
          }
        }

        else
        {
          *int64_t v6 = v4;
          int64_t v7 = v6 + 1;
        }

        *(void *)(v3 + 16_Block_object_dispose(va, 8) = v7;
      }

      return sub_100242FAC((uint64_t)v19);
    }
  }

  return result;
}

void sub_1003B0E64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003B0E78(uint64_t a1, int a2, int a3)
{
  return sub_1003B0D30(a1 - 40, a2, a3);
}

uint64_t sub_1003B0E80(uint64_t a1, uint64_t a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 56);
  *(_BYTE *)(a1 + 120) = 0;
  if (*(void *)(a1 + 128) == a2) {
    *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  }
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003B0ED4(uint64_t a1, uint64_t a2)
{
  return sub_1003B0E80(a1 - 16, a2);
}

uint64_t sub_1003B0EDC(uint64_t a1, char a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 56);
  *(_BYTE *)(a1 + 120) = a2;
  if ((a2 & 1) == 0)
  {
    sub_100242F54((uint64_t)v5);
    sub_1003B06A0(a1);
  }

  return sub_100242FAC((uint64_t)v5);
}

void sub_1003B0F34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003B0F48(uint64_t a1, char a2)
{
  return sub_1003B0EDC(a1 - 16, a2);
}

uint64_t sub_1003B0F50(uint64_t a1)
{
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_100242F28((uint64_t)v3, a1 + 56);
  *(_BYTE *)(a1 + 120) = 0;
  return sub_100242FAC((uint64_t)v3);
}

uint64_t sub_1003B0F90(uint64_t a1)
{
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_100242F28((uint64_t)v3, a1 + 40);
  *(_BYTE *)(a1 + 104) = 0;
  return sub_100242FAC((uint64_t)v3);
}

uint64_t sub_1003B0FD0(uint64_t a1)
{
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_100242F28((uint64_t)v3, a1 + 56);
  *(_BYTE *)(a1 + 121) = 1;
  return sub_100242FAC((uint64_t)v3);
}

uint64_t sub_1003B1014(uint64_t a1)
{
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_100242F28((uint64_t)v3, a1 + 32);
  *(_BYTE *)(a1 + 97) = 1;
  return sub_100242FAC((uint64_t)v3);
}

uint64_t sub_1003B1058(uint64_t a1)
{
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_100242F28((uint64_t)v3, a1 + 56);
  *(_BYTE *)(a1 + 121) = 0;
  sub_100242F54((uint64_t)v3);
  sub_1003B06A0(a1);
  return sub_100242FAC((uint64_t)v3);
}

void sub_1003B10A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003B10BC(uint64_t a1)
{
  return sub_1003B1058(a1 - 24);
}

uint64_t sub_1003B10C4(uint64_t a1, uint64_t a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1 + 56);
  uint64_t v4 = (char **)(a1 + 136);
  return sub_100242FAC((uint64_t)v6);
}

void sub_1003B1124( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003B1138(uint64_t a1, uint64_t a2)
{
  return sub_1003B10C4(a1 - 24, a2);
}

void sub_1003B1140(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 <= 200)
  {
    if (a4 == 101)
    {
      byte_1008F0A00 = 1;
      return;
    }

    if (a4 != 102) {
      return;
    }
    unint64_t v5 = &byte_1008F0A00;
  }

  else
  {
    if (a4 == 201)
    {
      byte_1008F0A01 = 1;
      return;
    }

    if (a4 != 202)
    {
      if (a4 == 902)
      {
        if (qword_1008D60E0 != -1) {
          dispatch_once(&qword_1008D60E0, &stru_100894FE8);
        }
        sub_10021AB40((uint64_t)off_1008D60D8, a2);
      }

      return;
    }

    unint64_t v5 = &byte_1008F0A01;
  }

  *unint64_t v5 = 0;
  if (byte_1008F0A02 == 1)
  {
    int64_t v6 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)&uint8_t buf[4] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "AWD - Request is in queue already",  &buf[4],  2u);
    }
  }

  else
  {
    *(void *)std::string buf = 0LL;
    uint64_t v11 = 0LL;
    sub_1003D55EC(a2, &buf[4], buf, (_DWORD *)&v11 + 1, &v11);
    uint64_t v7 = sub_1002E6E00();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 8LL))(v7))
    {
      uint64_t v8 = sub_1002E6BF0();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 328LL))(v8))
      {
        if (qword_1008D60D0 != -1) {
          dispatch_once(&qword_1008D60D0, &stru_100894FA8);
        }
        if ((sub_100425684((uint64_t)off_1008D60C8, a2) & 0x80000) != 0
          && (HIDWORD(v11) - 8194) <= 0xE
          && ((1 << (BYTE4(v11) - 2)) & 0x409B) != 0)
        {
          byte_1008F0A02 = 1;
          uint64_t v9 = sub_100404EB8();
          v10[0] = _NSConcreteStackBlock;
          v10[1] = 3221225472LL;
          _DWORD v10[2] = sub_1003B1358;
          _OWORD v10[3] = &unk_10087EB20;
          v10[4] = a2;
          sub_100405460(v9, 250LL, v10);
        }
      }
    }
  }

void sub_1003B1358(uint64_t a1)
{
  if ((byte_1008F0A00 & 1) != 0 || (byte_1008F0A01 & 1) != 0) {
    goto LABEL_9;
  }
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100895048);
  }
  if (!*((_BYTE *)off_1008D60A8 + 76)) {
    goto LABEL_9;
  }
  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_100894FA8);
  }
  if ((sub_100425684((uint64_t)off_1008D60C8, *(void *)(a1 + 32)) & 0x80000) != 0)
  {
    uint64_t v3 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "AWD - Send request to collect diagnose",  buf,  2u);
    }

    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100894FE8);
    }
    sub_100214E98((uint64_t)off_1008D60D8, *(void *)(a1 + 32), 32LL, 0LL, 0LL);
  }

  else
  {
LABEL_9:
    uint64_t v2 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "AWD - Can't send request to collect diagnose",  v4,  2u);
    }
  }

  byte_1008F0A02 = 0;
}

uint64_t sub_1003B14E4(uint64_t a1, unint64_t a2)
{
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100894F48);
  }
  uint64_t v4 = sub_100496954((void *)qword_1008D61A0, a2);
  if (!a2) {
    return 0LL;
  }
  uint64_t v5 = v4;
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1 + 56);
  uint64_t v7 = *(void **)(a1 + 232);
  int64_t v6 = *(void **)(a1 + 240);
  if (v7 != v6)
  {
    while (*v7 != a2)
    {
      if (++v7 == v6)
      {
        uint64_t v7 = *(void **)(a1 + 240);
        break;
      }
    }
  }

  if (v7 == v6)
  {
    uint64_t v8 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
    {
      if (v5)
      {
        sub_100494958(v5, (uint64_t)v11);
        sub_100677734(v11, (uint64_t)v13, v8);
      }

      else
      {
        sub_1006776F4((uint64_t)v13, v8, v9);
      }
    }

    a1 = 0LL;
  }

  sub_100242FAC((uint64_t)v12);
  return a1;
}

void sub_1003B1624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

unint64_t sub_1003B1640(void *a1, unint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100894F48);
  }
  uint64_t v4 = sub_10049729C(qword_1008D61A0, a2);
  if (!v4) {
    return 0LL;
  }
  unint64_t v5 = v4;
  v23[0] = 0LL;
  v23[1] = 0LL;
  sub_100242F28((uint64_t)v23, (uint64_t)(a1 + 7));
  int64_t v6 = (unint64_t *)a1[29];
  if (v6 == (unint64_t *)a1[30])
  {
LABEL_13:
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_100894F48);
    }
    unint64_t v7 = sub_100496E90(qword_1008D61A0, v5);
    if (v7)
    {
      unint64_t v8 = a1[31];
      uint64_t v9 = (unint64_t *)a1[30];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = a1[29];
        uint64_t v12 = ((uint64_t)v9 - v11) >> 3;
        uint64_t v13 = v8 - v11;
        uint64_t v14 = v13 >> 2;
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          uint64_t v16 = (char *)sub_100008BA0((uint64_t)(a1 + 31), v15);
        }
        else {
          uint64_t v16 = 0LL;
        }
        __int16 v17 = (unint64_t *)&v16[8 * v12];
        uint64_t v18 = &v16[8 * v15];
        *__int16 v17 = v7;
        uint64_t v10 = v17 + 1;
        unint64_t v20 = (char *)a1[29];
        uint64_t v19 = (char *)a1[30];
        if (v19 != v20)
        {
          do
          {
            unint64_t v21 = *((void *)v19 - 1);
            v19 -= 8;
            *--__int16 v17 = v21;
          }

          while (v19 != v20);
          uint64_t v19 = (char *)a1[29];
        }

        a1[29] = v17;
        a1[30] = v10;
        a1[31] = v18;
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        *uint64_t v9 = v7;
        uint64_t v10 = v9 + 1;
      }

      a1[30] = v10;
    }
  }

  else
  {
    while (1)
    {
      unint64_t v7 = *v6;
      if (*v6 == a2) {
        break;
      }
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_100894F48);
      }
      if (sub_10049729C(qword_1008D61A0, v7) == v5) {
        goto LABEL_34;
      }
    }

    unint64_t v7 = a2;
  }

void sub_1003B184C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1003B1864(uint64_t a1, uint64_t a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1 + 56);
  BOOL v4 = sub_1003FE254(a1 + 136, a2);
  sub_100242FAC((uint64_t)v6);
  return v4;
}

void sub_1003B18B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003B18CC(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_100242F28((uint64_t)v18, (uint64_t)(a1 + 7));
  uint64_t v9 = (void *)a1[32];
  unint64_t v8 = a1[33];
  __int128 v10 = a3[1];
  __int128 v24 = *a3;
  __int128 v25 = v10;
  if (v9 != (void *)v8)
  {
    while (1)
    {
      if (*v9 == a2)
      {
        BOOL v11 = (void)v24 == v9[1] && *((void *)&v24 + 1) == v9[2];
        BOOL v12 = v11 && (void)v25 == v9[3];
        if (v12 && *((void *)&v25 + 1) == v9[4]) {
          break;
        }
      }

      v9 += 7;
      if (v9 == (void *)v8) {
        goto LABEL_16;
      }
    }
  }

  if (v9 == (void *)v8)
  {
LABEL_16:
    __int128 v14 = a3[1];
    __int128 v20 = *a3;
    __int128 v21 = v14;
    uint64_t v19 = a2;
    int v22 = -1;
    uint64_t v23 = a4;
    if (v8 >= a1[34])
    {
      uint64_t v16 = sub_1003B49A4(a1 + 32, (uint64_t)&v19);
    }

    else
    {
      *(void *)unint64_t v8 = a2;
      __int128 v15 = v20;
      *(_OWORD *)(v8 + 24) = v21;
      *(_OWORD *)(v8 + _Block_object_dispose(va, 8) = v15;
      *(_DWORD *)(v8 + 40) = -1;
      *(void *)(v8 + 4_Block_object_dispose(va, 8) = a4;
      uint64_t v16 = v8 + 56;
    }

    a1[33] = v16;
  }

  sub_100242FAC((uint64_t)v18);
  return 0LL;
}

void sub_1003B19DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003B19F0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1 + 56);
  __int128 v6 = a3[1];
  __int128 v13 = *a3;
  __int128 v14 = v6;
  uint64_t v7 = *(void *)(a1 + 256);
  uint64_t v8 = *(void *)(a1 + 264);
  uint64_t v12 = a2;
  uint64_t v9 = sub_1003B4BBC(v7, v8, &v12);
  sub_1003B48A8(a1 + 256, v9, *(void *)(a1 + 264));
  sub_100242FAC((uint64_t)v11);
  return 0LL;
}

void sub_1003B1A68(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1003B1A7C(void *a1, uint64_t a2)
{
  v24[0] = 0LL;
  v24[1] = 0LL;
  sub_100242F28((uint64_t)v24, (uint64_t)(a1 + 7));
  BOOL v4 = (char **)(a1 + 17);
  if (sub_1003FE254((uint64_t)(a1 + 17), a2))
  {
    unint64_t v5 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_INFO))
    {
      sub_1003CF00C(a2, __p);
      if (v23 >= 0) {
        __int128 v6 = __p;
      }
      else {
        __int128 v6 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      int v26 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Device %{public}s has already been registered",  buf,  0xCu);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v7 = 601LL;
  }

  else
  {
    unint64_t v8 = a1[19];
    uint64_t v9 = (uint64_t *)a1[18];
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = ((char *)v9 - *v4) >> 3;
      uint64_t v12 = v8 - (void)*v4;
      uint64_t v13 = v12 >> 2;
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        __int128 v15 = (char *)sub_100008BA0((uint64_t)(a1 + 19), v14);
      }
      else {
        __int128 v15 = 0LL;
      }
      uint64_t v16 = (uint64_t *)&v15[8 * v11];
      __int16 v17 = &v15[8 * v14];
      *uint64_t v16 = a2;
      __int128 v10 = v16 + 1;
      uint64_t v19 = (char *)a1[17];
      uint64_t v18 = (char *)a1[18];
      if (v18 != v19)
      {
        do
        {
          uint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          *--uint64_t v16 = v20;
        }

        while (v18 != v19);
        uint64_t v18 = *v4;
      }

      a1[17] = v16;
      a1[18] = v10;
      a1[19] = v17;
      if (v18) {
        operator delete(v18);
      }
    }

    else
    {
      *uint64_t v9 = a2;
      __int128 v10 = v9 + 1;
    }

    a1[18] = v10;
    sub_100242F54((uint64_t)v24);
    if (qword_1008D60D0 != -1) {
      dispatch_once(&qword_1008D60D0, &stru_100894FA8);
    }
    sub_10042A100((uint64_t)off_1008D60C8, a2);
    sub_1003AE880((uint64_t)a1, a2);
    uint64_t v7 = sub_1003AFAB0((uint64_t)a1, a2, 2, 0);
  }

  sub_100242FAC((uint64_t)v24);
  return v7;
}

void sub_1003B1CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003B1CC4(uint64_t a1, unsigned __int8 *a2)
{
  int v44 = 0;
  if (sub_1003B1864(a1, (uint64_t)a2))
  {
    sub_1003D8EB8((uint64_t)a2, &v44);
    if (v44 == 1) {
      return 603LL;
    }
    sub_1003D8E74((uint64_t)a2, 1);
    sub_1003AFAB0(a1, (uint64_t)a2, 0, 1);
    if (qword_1008D6788 != -1) {
      dispatch_once(&qword_1008D6788, &stru_100894FC8);
    }
    if (sub_1002075B4((uint64_t)off_1008D6780))
    {
      v42[0] = 0LL;
      v42[1] = 0LL;
      sub_100242F28((uint64_t)v42, a1 + 56);
      int v6 = *(unsigned __int8 *)(a1 + 120);
      if (*(_BYTE *)(a1 + 120) || *(_BYTE *)(a1 + 121))
      {
        uint64_t v7 = (os_log_s *)qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C((uint64_t)a2, &__p);
          unint64_t v8 = "(someone is connecting)";
          if (!v6) {
            unint64_t v8 = "(someone is pairing)";
          }
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v46 = (std::string *)v8;
          __int16 v47 = 2082;
          int v48 = p_p;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Auto pairing is not allowed at the moment %{public}s, queuing up device %{public}s for later",  buf,  0x16u);
        }

        unint64_t v10 = *(void *)(a1 + 176);
        uint64_t v11 = *(unsigned __int8 ***)(a1 + 168);
        if ((unint64_t)v11 >= v10)
        {
          uint64_t v18 = *(void *)(a1 + 160);
          uint64_t v19 = ((uint64_t)v11 - v18) >> 3;
          uint64_t v20 = v10 - v18;
          uint64_t v21 = v20 >> 2;
          else {
            unint64_t v22 = v21;
          }
          if (v22) {
            char v23 = (char *)sub_100008BA0(a1 + 176, v22);
          }
          else {
            char v23 = 0LL;
          }
          int v30 = (unsigned __int8 **)&v23[8 * v19];
          __int16 v31 = &v23[8 * v22];
          *int v30 = a2;
          uint64_t v12 = v30 + 1;
          __int16 v33 = *(char **)(a1 + 160);
          uint64_t v32 = *(char **)(a1 + 168);
          if (v32 != v33)
          {
            do
            {
              int v34 = (unsigned __int8 *)*((void *)v32 - 1);
              v32 -= 8;
              *--int v30 = v34;
            }

            while (v32 != v33);
            uint64_t v32 = *(char **)(a1 + 160);
          }

          *(void *)(a1 + 160) = v30;
          *(void *)(a1 + 16_Block_object_dispose(va, 8) = v12;
          *(void *)(a1 + 176) = v31;
          if (v32) {
            operator delete(v32);
          }
        }

        else
        {
          *uint64_t v11 = a2;
          uint64_t v12 = v11 + 1;
        }

        *(void *)(a1 + 16_Block_object_dispose(va, 8) = v12;
      }

      else
      {
        sub_100242F54((uint64_t)v42);
        sub_1003AE560(a1, (uint64_t)a2);
        if ((sub_1003CF350(a2) & 1) != 0) {
          goto LABEL_54;
        }
        if (qword_1008D60D0 != -1) {
          dispatch_once(&qword_1008D60D0, &stru_100894FA8);
        }
        memset(&__p, 0, sizeof(__p));
        int v35 = sub_100424360((int64x2_t *)off_1008D60C8, (uint64_t)a2, -1, &__p, 2LL);
        if (v35) {
          goto LABEL_54;
        }
        sub_100242ECC((uint64_t)v42);
        *(void *)(a1 + 12_Block_object_dispose(va, 8) = a2;
      }

      sub_100242F54((uint64_t)v42);
LABEL_54:
      sub_100242FAC((uint64_t)v42);
      return 0LL;
    }

    uint64_t v13 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)a2, &__p);
      unint64_t v14 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v46 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Queuing up device %{public}s for after power on",  buf,  0xCu);
    }

    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    sub_100242F28((uint64_t)&__p, a1 + 56);
    unint64_t v15 = *(void *)(a1 + 176);
    uint64_t v16 = *(unsigned __int8 ***)(a1 + 168);
    if ((unint64_t)v16 >= v15)
    {
      uint64_t v24 = *(void *)(a1 + 160);
      uint64_t v25 = ((uint64_t)v16 - v24) >> 3;
      uint64_t v26 = v15 - v24;
      uint64_t v27 = v26 >> 2;
      else {
        unint64_t v28 = v27;
      }
      if (v28) {
        uint64_t v29 = (char *)sub_100008BA0(a1 + 176, v28);
      }
      else {
        uint64_t v29 = 0LL;
      }
      int v36 = (unsigned __int8 **)&v29[8 * v25];
      __int16 v37 = &v29[8 * v28];
      *int v36 = a2;
      __int16 v17 = v36 + 1;
      __int16 v39 = *(char **)(a1 + 160);
      int v38 = *(char **)(a1 + 168);
      if (v38 != v39)
      {
        do
        {
          int v40 = (unsigned __int8 *)*((void *)v38 - 1);
          v38 -= 8;
          *--int v36 = v40;
        }

        while (v38 != v39);
        int v38 = *(char **)(a1 + 160);
      }

      *(void *)(a1 + 160) = v36;
      *(void *)(a1 + 16_Block_object_dispose(va, 8) = v17;
      *(void *)(a1 + 176) = v37;
      if (v38) {
        operator delete(v38);
      }
    }

    else
    {
      *uint64_t v16 = a2;
      __int16 v17 = v16 + 1;
    }

    *(void *)(a1 + 16_Block_object_dispose(va, 8) = v17;
    sub_100242F54((uint64_t)&__p);
    if (qword_1008D6788 != -1) {
      dispatch_once(&qword_1008D6788, &stru_100894FC8);
    }
    int v41 = sub_10040D3E4((uint64_t)off_1008D6780);
    sub_100242FAC((uint64_t)&__p);
    if (!v41) {
      return 0LL;
    }
    return 200LL;
  }

  else
  {
    uint64_t v5 = qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_10067779C((uint64_t)a2, v5);
    }
    return 600LL;
  }

void sub_1003B2184( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003B21C8(uint64_t a1, uint64_t a2)
{
  int v8 = 0;
  if (sub_1003B1864(a1, a2))
  {
    sub_1003D8EB8(a2, &v8);
    if (v8 == 2)
    {
      return 604LL;
    }

    else
    {
      sub_1003D8E74(a2, 2);
      v7[0] = 0LL;
      v7[1] = 0LL;
      sub_100242F28((uint64_t)v7, a1 + 56);
      sub_1003FE288((char **)(a1 + 160), a2);
      sub_100242F54((uint64_t)v7);
      sub_1003AE6F0(a1, a2);
      uint64_t v4 = sub_1003AFAB0(a1, a2, 0, 2);
      sub_100242FAC((uint64_t)v7);
    }
  }

  else
  {
    uint64_t v5 = qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677820(a2, v5);
    }
    return 600LL;
  }

  return v4;
}

void sub_1003B22B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1003B22C4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v7 = 0;
  if (sub_1003B1864(a1, a2))
  {
    sub_1003D8EB8(a2, &v7);
    uint64_t result = 0LL;
    *a3 = v7;
  }

  else
  {
    uint64_t v6 = qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_1006778A4(a2, v6);
    }
    return 600LL;
  }

  return result;
}

uint64_t sub_1003B2344(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v5 = 0;
  uint64_t result = sub_1003D7A08(a2, (uint64_t)&v5);
  if (!(_DWORD)result) {
    *a3 = v5;
  }
  return result;
}

uint64_t sub_1003B2384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003D8168(a2, a3);
}

uint64_t sub_1003B2390(uint64_t a1, char *a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 56);
  if ((char *)(a1 + 136) != a2) {
    sub_100240C80( a2,  *(char **)(a1 + 136),  *(void *)(a1 + 144),  (uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 3);
  }
  sub_100242FAC((uint64_t)v5);
  return 0LL;
}

void sub_1003B23F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003B2408(uint64_t a1, uint64_t a2)
{
  return sub_1003AFAB0(a1, a2, 1, 0);
}

uint64_t sub_1003B243C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_INFO))
  {
    sub_1003D0100(a2, (uint64_t)__p);
    if (v8 >= 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    unint64_t v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Sending BT_ACCESSORY_NAME_CHANGED for %s",  buf,  0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

  return sub_1003AFAB0(a1, a2, 4, 0);
}

uint64_t sub_1003B252C(uint64_t a1, uint64_t a2)
{
  return sub_1003AFAB0(a1, a2, 6, 0);
}

uint64_t sub_1003B2560(uint64_t a1, uint64_t a2)
{
  return sub_1003AFAB0(a1, a2, 12, 0);
}

uint64_t sub_1003B2570(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, const void *a6)
{
  unsigned int v7 = a5;
  int v8 = a4;
  sub_1003AF6E4(a1, a2, *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32), a4, a5, (uint64_t)a6);
  return sub_1003B0098(a1, a2, *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32), v8, v7, a6);
}

void sub_1003B25E4(uint64_t a1, uint64_t a2)
{
  int v2 = sub_1003AFAB0(a1, a2, 23, 0);
  uint64_t v3 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEBUG)) {
    sub_100677924(v2, v3);
  }
}

uint64_t sub_1003B2638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v5 = a5;
  __int16 v6 = a4;
  int v7 = a3;
  sub_1003AEBA0(a1, a2, a3, a4, a5);
  return sub_1003B03B8(a1, a2, v7, v6, v5);
}

uint64_t sub_1003B268C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  sub_1003AF90C(a1, a2, a3);
  switch(v3)
  {
    case 2:
      uint64_t v6 = a1;
      uint64_t v7 = a2;
      int v8 = 10;
      return sub_1003AFAB0(v6, v7, v8, 0);
    case 1:
      uint64_t v6 = a1;
      uint64_t v7 = a2;
      int v8 = 11;
      return sub_1003AFAB0(v6, v7, v8, 0);
    case 0:
      uint64_t v6 = a1;
      uint64_t v7 = a2;
      int v8 = 9;
      return sub_1003AFAB0(v6, v7, v8, 0);
  }

  unint64_t v10 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_100677994(v3, v10);
  }
  return 1LL;
}

uint64_t sub_1003B2740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100894FE8);
  }
  return sub_1002209A8((uint64_t)off_1008D60D8, a2, a3, 2u);
}

uint64_t sub_1003B279C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100894FE8);
  }
  return sub_100220A70((uint64_t)off_1008D60D8, a2, a3);
}

uint64_t sub_1003B27F4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100894FE8);
  }
  return sub_100220C0C((uint64_t)off_1008D60D8, a2, a3, a4, 2);
}

uint64_t sub_1003B2860(uint64_t a1, unsigned __int8 *a2, uint64_t a3, char a4, int a5)
{
  if (a2)
  {
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    sub_1003D55EC((uint64_t)a2, (_DWORD *)&v17 + 1, &v17, (_DWORD *)&v16 + 1, &v16);
    BOOL v10 = sub_1003D2AF4((uint64_t)a2);
    uint64_t v11 = (os_log_s *)qword_1008F7568;
    if (!v10)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_100677A5C();
      }
      return 11LL;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = sub_1003D2B2C((uint64_t)a2, 20);
      uint64_t v13 = "No";
      if (v12) {
        uint64_t v13 = "Yes";
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v19 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Sensor data support: %s",  buf,  0xCu);
    }

    BOOL v14 = (HIDWORD(v16) - 8202) > 9 || ((1 << (BYTE4(v16) - 10)) & 0x311) == 0;
    if (v14 && (sub_1003D2B2C((uint64_t)a2, 20) & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_100677A30();
      }
      return 11LL;
    }

    if (qword_1008D60F0 != -1) {
      dispatch_once(&qword_1008D60F0, &stru_100895068);
    }
    return sub_1004AA6A0( (uint64_t)off_1008D60E8,  ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133],  a3,  a4,  a1 + 48,  a5);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677A04();
    }
    return 1LL;
  }

uint64_t sub_1003B2A98(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_100895068);
  }
  uint64_t v5 = sub_1004AAEF4((uint64_t)off_1008D60E8, a2);
  *a3 = v5;
  uint64_t v6 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 134217984;
    uint64_t v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Audio Timesync: Reference Timestamp ID: %llx ",  (uint8_t *)&v8,  0xCu);
  }

  return 0LL;
}

uint64_t sub_1003B2B80(uint64_t a1, uint64_t a2, int *a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895008);
  }
  sub_100400F20((uint64_t)off_1008D5F48, a2, a3);
  uint64_t v5 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *a3;
    sub_1003D0100(a2, (uint64_t)__p);
    if (v10 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 67109378;
    int v12 = v6;
    __int16 v13 = 2080;
    BOOL v14 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "getSpatialAudioAllowSpatial: Allowed = %d For  %s",  buf,  0x12u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  return 0LL;
}

uint64_t sub_1003B2CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895008);
  }
  sub_100401068((uint64_t)off_1008D5F48, a2, a3);
  int v6 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D0100(a2, (uint64_t)__p);
    if (v12 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 67109378;
    int v14 = a3;
    __int16 v15 = 2080;
    uint64_t v16 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "notifySpatialAudioAllowSpatialChanged to %d  %s",  buf,  0x12u);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v8 = sub_1004050C8();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _DWORD v10[2] = sub_1003B2E28;
  _OWORD v10[3] = &unk_10087EB20;
  v10[4] = a2;
  sub_100405384(v8, v10);
  sub_1003B2E8C(a1, a2);
  return 0LL;
}

uint64_t sub_1003B2E28(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    uint64_t v1 = result;
    if (qword_1008D6458 != -1) {
      dispatch_once(&qword_1008D6458, &stru_100895088);
    }
    return sub_100378078((void *)qword_1008D6450, *(void *)(v1 + 32));
  }

  return result;
}

uint64_t sub_1003B2E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_INFO))
  {
    sub_1003D0100(a2, (uint64_t)__p);
    if (v8 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    char v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Sending BT_ACCESSORY_SETTINGS_CHANGED for %s",  buf,  0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

  return sub_1003AFAB0(a1, a2, 5, 0);
}

uint64_t sub_1003B2F7C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, _DWORD *a5)
{
  char v16 = 1;
  char v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:"));
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895008);
  }
  sub_100401438((uint64_t)off_1008D5F48, a2, v8, a4, &v16);
  *a5 = -v16;
  uint64_t v9 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D0100(a2, (uint64_t)__p);
    if (v15 >= 0) {
      char v10 = __p;
    }
    else {
      char v10 = (void **)__p[0];
    }
    int v11 = *a4;
    char v12 = "Off";
    if (*a5 == -1) {
      char v12 = "On";
    }
    *(_DWORD *)std::string buf = 136315906;
    uint64_t v18 = v10;
    __int16 v19 = 2112;
    uint64_t v20 = v8;
    __int16 v21 = 1024;
    int v22 = v11;
    __int16 v23 = 2080;
    uint64_t v24 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Get Spatial Audio Mode for device %s :[%@] Mode= %u Head Tracking %s",  buf,  0x26u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  return 0LL;
}

void sub_1003B311C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003B3138(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_100895068);
  }
  sub_1004B381C((uint64_t)off_1008D60E8, a2, a3);
  uint64_t v5 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D0100(a2, (uint64_t)__p);
    if (v9 >= 0) {
      int v6 = __p;
    }
    else {
      int v6 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 67109378;
    int v11 = a3;
    __int16 v12 = 2080;
    __int16 v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "updateSpatialAudioSpatialActiveChanged to %d  %s",  buf,  0x12u);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  return 0LL;
}

uint64_t sub_1003B3260(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  char v9 = a3;
  BOOL v10 = a5 == -1;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895008);
  }
  sub_10040119C((uint64_t)off_1008D5F48, a2, v9, a4, a5 == -1);
  int v11 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D0100(a2, (uint64_t)__p);
    if (v25 >= 0) {
      __int16 v12 = __p;
    }
    else {
      __int16 v12 = (void **)__p[0];
    }
    __int16 v13 = @"None";
    *(_DWORD *)std::string buf = 136315906;
    uint64_t v27 = v12;
    int v14 = "YES";
    if (v9) {
      __int16 v13 = v9;
    }
    __int16 v28 = 1024;
    int v29 = a4;
    if (a5 != -1) {
      int v14 = "NO";
    }
    __int16 v30 = 2112;
    __int16 v31 = v13;
    __int16 v32 = 2082;
    __int16 v33 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Notify Spatial Audio Mode changed for device %s to %d for App %@ Head Tracking %{public}s",  buf,  0x26u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }

  id v15 = -[__CFString copy](v9, "copy");
  uint64_t v16 = sub_1004050C8();
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  void v19[2] = sub_1003B34C8;
  v19[3] = &unk_100881010;
  uint64_t v21 = a2;
  id v17 = v15;
  id v20 = v17;
  int v22 = a4;
  BOOL v23 = v10;
  sub_100405384(v16, v19);
  sub_1003B2E8C(a1, a2);

  return 0LL;
}

void sub_1003B347C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003B34C8(uint64_t result)
{
  if (*(void *)(result + 40))
  {
    uint64_t v1 = result;
    if (qword_1008D6458 != -1) {
      dispatch_once(&qword_1008D6458, &stru_100895088);
    }
    return sub_100378278( (void *)qword_1008D6450,  *(void *)(v1 + 40),  *(void **)(v1 + 32),  *(_DWORD *)(v1 + 48),  *(unsigned __int8 *)(v1 + 52));
  }

  return result;
}

uint64_t sub_1003B3534(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100894FE8);
  }
  return sub_100220DDC((uint64_t)off_1008D60D8, a2, a3, 2u);
}

uint64_t sub_1003B3590(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100894FE8);
  }
  return sub_10021F164((uint64_t)off_1008D60D8, a2, a3, a4);
}

uint64_t sub_1003B35F8(uint64_t a1, uint64_t a2, int *a3)
{
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100894FE8);
  }
  return sub_10021F3F4((uint64_t)off_1008D60D8, a2, a3);
}

uint64_t sub_1003B3650(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  char v8 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_INFO))
  {
    sub_1003CF00C(a2, __p);
    if (v12 >= 0) {
      char v9 = __p;
    }
    else {
      char v9 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v14 = a4;
    __int16 v15 = 2082;
    uint64_t v16 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Sending %{public}s changed for %{public}s",  buf,  0x16u);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }

  return sub_1003AFAB0(a1, a2, a3, 0);
}

uint64_t sub_1003B375C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_INFO))
  {
    sub_1003CF00C(a2, __p);
    if (v8 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446210;
    BOOL v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Sending AACP capabilities received for %{public}s",  buf,  0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }

  return sub_1003AFAB0(a1, a2, 22, 0);
}

uint64_t sub_1003B384C(void *a1, char *a2)
{
  __int16 v33 = 0LL;
  int v34 = 0LL;
  uint64_t v35 = 0LL;
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_100894F88);
  }
  uint64_t v4 = sub_10052AFEC((uint64_t)off_1008D67A0, (void ***)&v33);
  if ((_DWORD)v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677A88();
    }
  }

  else
  {
    v32[0] = 0LL;
    v32[1] = 0LL;
    sub_100242F28((uint64_t)v32, (uint64_t)(a1 + 7));
    uint64_t v5 = (char *)(a1 + 23);
    a1[24] = a1[23];
    int v6 = (uint64_t *)v33;
    if (v33 != v34)
    {
      do
      {
        uint64_t v7 = *v6;
        float v8 = sub_1003E17A0(*v6);
        BOOL v9 = sub_1003D2AF4(v7);
        uint64_t v30 = 0LL;
        uint64_t v31 = 0LL;
        sub_1003D55EC(v7, (_DWORD *)&v31 + 1, &v31, (_DWORD *)&v30 + 1, &v30);
        BOOL v10 = (os_log_s *)qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEBUG))
        {
          sub_1003D0100(v7, (uint64_t)__p);
          uint64_t v24 = __p;
          if (v29 < 0) {
            uint64_t v24 = (void **)__p[0];
          }
          char v25 = "False";
          if (v9) {
            uint64_t v26 = "True";
          }
          else {
            uint64_t v26 = "False";
          }
          if (v8 != -1.0) {
            char v25 = "True";
          }
          *(_DWORD *)std::string buf = 136316162;
          __int16 v37 = v24;
          __int16 v38 = 1024;
          int v39 = HIDWORD(v30);
          __int16 v40 = 1024;
          int v41 = v31;
          __int16 v42 = 2080;
          BOOL v43 = v26;
          __int16 v44 = 2080;
          unsigned int v45 = v25;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "deviceName = %s, pid=0x%x, vid=0x%x, isAppleBT=%s, isHAESupported=%s",  buf,  0x2Cu);
          if (v29 < 0) {
            operator delete(__p[0]);
          }
        }

        char v11 = v8 == -1.0 || v9;
        if ((v11 & 1) == 0)
        {
          __int16 v13 = (uint64_t *)a1[24];
          unint64_t v12 = a1[25];
          if ((unint64_t)v13 >= v12)
          {
            uint64_t v15 = ((uint64_t)v13 - *(void *)v5) >> 3;
            uint64_t v16 = v12 - *(void *)v5;
            uint64_t v17 = v16 >> 2;
            else {
              unint64_t v18 = v17;
            }
            if (v18) {
              __int16 v19 = (char *)sub_100008BA0((uint64_t)(a1 + 25), v18);
            }
            else {
              __int16 v19 = 0LL;
            }
            id v20 = (uint64_t *)&v19[8 * v15];
            *id v20 = v7;
            uint64_t v14 = v20 + 1;
            int v22 = (char *)a1[23];
            uint64_t v21 = (char *)a1[24];
            if (v21 != v22)
            {
              do
              {
                uint64_t v23 = *((void *)v21 - 1);
                v21 -= 8;
                *--id v20 = v23;
              }

              while (v21 != v22);
              uint64_t v21 = *(char **)v5;
            }

            a1[23] = v20;
            a1[24] = v14;
            a1[25] = &v19[8 * v18];
            if (v21) {
              operator delete(v21);
            }
          }

          else
          {
            uint64_t *v13 = v7;
            uint64_t v14 = v13 + 1;
          }

          a1[24] = v14;
        }

        ++v6;
      }

      while (v6 != v34);
    }

    if (v5 != a2) {
      sub_100240C80(a2, (char *)a1[23], a1[24], (uint64_t)(a1[24] - a1[23]) >> 3);
    }
    sub_100242FAC((uint64_t)v32);
    uint64_t v4 = 0LL;
  }

  if (v33)
  {
    int v34 = v33;
    operator delete(v33);
  }

  return v4;
}

void sub_1003B3B84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

const char *sub_1003B3BD0(_DWORD *a1)
{
  uint64_t v1 = "Unknown";
  if (*a1 == 2) {
    uint64_t v1 = "Unplugged";
  }
  if (*a1 == 1) {
    return "Plugged in";
  }
  else {
    return v1;
  }
}

void *sub_1003B3C00(void *result)
{
  *uint64_t result = &off_100894E58;
  return result;
}

void sub_1003B3C14( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950A8);
  }
  float v8 = off_1008D5F38;
  if (sub_1003B3CF4(a1, *(void *)(a1 + 40)) && sub_1003B3CF4(a1, *(void *)(a1 + 56)) && v8[32] != v8[33])
  {
    sub_1003B4DA4( a2,  a3,  *(void *)(a1 + 40),  *(unsigned int *)(a1 + 48),  *(void *)(a1 + 56),  *(unsigned int *)(a1 + 64),  a4);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
  {
    sub_100677AB4();
  }

BOOL sub_1003B3CF4(uint64_t a1, unint64_t a2)
{
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100894F48);
  }
  return sub_100497204(qword_1008D61A0, a2);
}

uint64_t sub_1003B3D44(uint64_t a1)
{
  *(void *)a1 = off_100894E98;
  free(*(void **)(a1 + 64));
  return a1;
}

void sub_1003B3D78(void **a1)
{
  *a1 = off_100894E98;
  free(a1[8]);
  operator delete(a1);
}

void sub_1003B3DAC( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950A8);
  }
  float v8 = off_1008D5F38;
  if (sub_1003B3CF4(a1, *(void *)(a1 + 40)) && sub_1003B3CF4(a1, *(void *)(a1 + 48)) && v8[32] != v8[33])
  {
    sub_1003B4DC0( a2,  a3,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(unsigned int *)(a1 + 56),  *(unsigned __int8 *)(a1 + 60),  *(unsigned __int16 *)(a1 + 62),  *(void *)(a1 + 64),  a4);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
  {
    sub_100677AB4();
  }

uint64_t sub_1003B3E98(uint64_t a1)
{
  *(void *)a1 = off_100894ED8;
  free(*(void **)(a1 + 72));
  return a1;
}

void sub_1003B3ECC(void **a1)
{
  *a1 = off_100894ED8;
  free(a1[9]);
  operator delete(a1);
}

void sub_1003B3F00( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950A8);
  }
  float v8 = off_1008D5F38;
  if (sub_1003B3CF4(a1, *(void *)(a1 + 40)) && sub_1003B3CF4(a1, *(void *)(a1 + 48)) && v8[32] != v8[33])
  {
    sub_1003B4DE8( a2,  a3,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(unsigned int *)(a1 + 56) | ((unint64_t)*(unsigned __int16 *)(a1 + 60) << 32),  *(unsigned int *)(a1 + 64),  *(unsigned __int16 *)(a1 + 68),  *(void *)(a1 + 72),  a4);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
  {
    sub_100677AB4();
  }

void sub_1003B3FFC( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950A8);
  }
  float v8 = off_1008D5F38;
  if (sub_1003B3CF4(a1, *(void *)(a1 + 40)) && sub_1003B3CF4(a1, *(void *)(a1 + 48)) && v8[32] != v8[33])
  {
    sub_1003B4E10( a2,  a3,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(unsigned int *)(a1 + 56),  *(unsigned __int16 *)(a1 + 60),  *(unsigned __int16 *)(a1 + 62),  a4);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
  {
    sub_100677AB4();
  }

void sub_1003B40E0(void *a1)
{
  uint64_t v1 = sub_1003B4500(a1);
  operator delete(v1);
}

void *sub_1003B40F8(uint64_t a1)
{
  return sub_1003B4500((void *)(a1 - 24));
}

void sub_1003B4100(uint64_t a1)
{
  uint64_t v1 = sub_1003B4500((void *)(a1 - 24));
  operator delete(v1);
}

uint64_t sub_1003B411C(unint64_t *a1)
{
  uint64_t result = sub_1003B3CF4((uint64_t)a1, a1[2]);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))( a1,  a1[2],  a1[3],  a1[4]);
  }
  return result;
}

uint64_t sub_1003B4164(unint64_t *a1)
{
  uint64_t result = sub_1003B3CF4((uint64_t)a1, a1[2]);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))( a1,  a1[2],  a1[3],  a1[4]);
  }
  return result;
}

uint64_t sub_1003B41AC(unint64_t *a1)
{
  uint64_t result = sub_1003B3CF4((uint64_t)a1, a1[2]);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))( a1,  a1[2],  a1[3],  a1[4]);
  }
  return result;
}

uint64_t sub_1003B41F4(unint64_t *a1)
{
  uint64_t result = sub_1003B3CF4((uint64_t)a1, a1[2]);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))( a1,  a1[2],  a1[3],  a1[4]);
  }
  return result;
}

void sub_1003B423C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }

  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_1003B42C4(a1 + 8, v4, (char *)&v6);
    sub_100008A30(a1 + 8);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1003B42C4(uint64_t a1, char *__src, char *a3)
{
  int v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    __int16 v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      __int16 v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      __int16 v19 = 0LL;
    }
    id v20 = &v19[8 * v16];
    std::string __p = v19;
    uint64_t v27 = v20;
    __int16 v28 = v20;
    char v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)sub_100008BA0(v8, v22);
        id v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        uint64_t v27 = v20;
        char v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }

    *(void *)id v20 = *(void *)v3;
    __int16 v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__std::string src = *(void *)a3;
    *(void *)(a1 + _Block_object_dispose(va, 8) = __src + 8;
  }

  else
  {
    BOOL v9 = __src + 8;
    BOOL v10 = v6 - 8;
    char v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_1003B44C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003B4500(void *a1)
{
  *a1 = off_100894CF8;
  a1[1] = off_100894D88;
  a1[2] = off_100894DA8;
  a1[3] = off_100894DD0;
  a1[4] = &off_100894E10;
  a1[5] = &off_100894E28;
  a1[6] = &off_100894E40;
  int v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = v2;
    operator delete(v2);
  }

  int v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }

  uint64_t v4 = (void *)a1[26];
  if (v4)
  {
    a1[27] = v4;
    operator delete(v4);
  }

  uint64_t v5 = (void *)a1[23];
  if (v5)
  {
    a1[24] = v5;
    operator delete(v5);
  }

  uint64_t v6 = (void *)a1[20];
  if (v6)
  {
    a1[21] = v6;
    operator delete(v6);
  }

  unint64_t v7 = (void *)a1[17];
  if (v7)
  {
    a1[18] = v7;
    operator delete(v7);
  }

  sub_100242E28(a1 + 7);
  return a1;
}

void sub_1003B45B8(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_1003B45E8(_Unwind_Exception *a1)
{
}

void sub_1003B45FC(id a1)
{
  uint64_t v1 = operator new(0x98uLL);
  sub_1003C97E4((uint64_t)v1);
  off_1008D67E0 = v1;
}

void sub_1003B462C(_Unwind_Exception *a1)
{
}

void sub_1003B4640(id a1)
{
  uint64_t v1 = operator new(0x260uLL);
  sub_1005285C8((uint64_t)v1);
  off_1008D67A0 = v1;
}

void sub_1003B4670(_Unwind_Exception *a1)
{
}

void sub_1003B4684(id a1)
{
  uint64_t v1 = operator new(0x2C0uLL);
  sub_1004219F0();
  off_1008D60C8 = v1;
}

void sub_1003B46B4(_Unwind_Exception *a1)
{
}

void sub_1003B46C8(id a1)
{
  uint64_t v1 = operator new(0xA8uLL);
  sub_10040D0A0((uint64_t)v1);
  off_1008D6780 = v1;
}

void sub_1003B46F8(_Unwind_Exception *a1)
{
}

void sub_1003B470C(id a1)
{
  uint64_t v1 = operator new(0x2C8uLL);
  sub_100213DA8();
  off_1008D60D8 = v1;
}

void sub_1003B473C(_Unwind_Exception *a1)
{
}

uint64_t sub_1003B4750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  do
  {
    *(void *)a3 = *(void *)a1;
    __int128 v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a3 + _Block_object_dispose(va, 8) = v3;
    *(_DWORD *)(a3 + 40) = *(_DWORD *)(a1 + 40);
    *(void *)(a3 + 4_Block_object_dispose(va, 8) = *(void *)(a1 + 48);
    a3 += 56LL;
    a1 += 56LL;
  }

  while (a1 != a2);
  return a2;
}

char *sub_1003B47A4(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_100334ED4(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      *(void *)uint64_t v7 = *(void *)a2;
      __int128 v8 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v7 + _Block_object_dispose(va, 8) = v8;
      *(_DWORD *)(v7 + 40) = *(_DWORD *)(a2 + 40);
      *(void *)(v7 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
      v7 += 56LL;
      a2 += 56LL;
    }

    *((void *)v6 + 1) = v7;
  }

  return result;
}

void sub_1003B4820(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_1003B4850(_Unwind_Exception *a1)
{
}

void sub_1003B4864(id a1)
{
  uint64_t v1 = operator new(0x68uLL);
  sub_10049435C();
  off_1008D9130 = v1;
}

void sub_1003B4894(_Unwind_Exception *a1)
{
}

uint64_t sub_1003B48A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_1003B4750(a3, *(void *)(a1 + 8), a2);
    *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
  }

  return a2;
}

uint64_t sub_1003B48EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  while (1)
  {
    if (result == a2) {
      return a2;
    }
    if (*(void *)result == a3) {
      break;
    }
    result += 56LL;
  }

  if (result != a2)
  {
    for (uint64_t i = result + 56; i != a2; i += 56LL)
    {
      if (*(void *)i != a3)
      {
        *(void *)uint64_t result = *(void *)i;
        __int128 v4 = *(_OWORD *)(i + 8);
        *(_OWORD *)(result + 24) = *(_OWORD *)(i + 24);
        *(_OWORD *)(result + _Block_object_dispose(va, 8) = v4;
        *(_DWORD *)(result + 40) = *(_DWORD *)(i + 40);
        *(void *)(result + 4_Block_object_dispose(va, 8) = *(void *)(i + 48);
        result += 56LL;
      }
    }
  }

  return result;
}

void sub_1003B4960(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_1003B4990(_Unwind_Exception *a1)
{
}

uint64_t sub_1003B49A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7LL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0x6DB6DB6DB6DB6DB7LL * ((v8 - v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x249249249249249LL) {
    unint64_t v10 = 0x492492492492492LL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v21 = v7;
  char v11 = (char *)sub_100334E14(v7, v10);
  uint64_t v12 = &v11[56 * v3];
  std::string __p = v11;
  unint64_t v18 = v12;
  id v20 = &v11[56 * v13];
  *(void *)uint64_t v12 = *(void *)a2;
  __int128 v14 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v12 + _Block_object_dispose(va, 8) = v14;
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((void *)v12 + 6) = *(void *)(a2 + 48);
  __int16 v19 = v12 + 56;
  sub_1003B4B44(a1, &__p);
  uint64_t v15 = a1[1];
  if (v19 != v18) {
    __int16 v19 = &v18[(v19 - v18 - 56) % 0x38uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v15;
}

void sub_1003B4AF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1003B4B44(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(void *)(v2 - 56);
    v2 -= 56LL;
    *(void *)(v4 - 56) = v5;
    v4 -= 56LL;
    __int128 v6 = *(_OWORD *)(v2 + 8);
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(v2 + 24);
    *(_OWORD *)(v4 + _Block_object_dispose(va, 8) = v6;
    *(_DWORD *)(v4 + 40) = *(_DWORD *)(v2 + 40);
    *(void *)(v4 + 4_Block_object_dispose(va, 8) = *(void *)(v2 + 48);
  }

  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1003B4BBC(uint64_t result, uint64_t a2, void *a3)
{
  if (result == a2) {
    return a2;
  }
  while (1)
  {
    if (*a3 == *(void *)result)
    {
      BOOL v3 = a3[1] == *(void *)(result + 8) && a3[2] == *(void *)(result + 16);
      BOOL v4 = v3 && a3[3] == *(void *)(result + 24);
      if (v4 && a3[4] == *(void *)(result + 32)) {
        break;
      }
    }

    result += 56LL;
    if (result == a2) {
      return a2;
    }
  }

  if (result != a2)
  {
    for (uint64_t i = result + 56; i != a2; i += 56LL)
    {
      if (*a3 == *(void *)i)
      {
        BOOL v7 = a3[1] == *(void *)(i + 8) && a3[2] == *(void *)(i + 16);
        BOOL v8 = v7 && a3[3] == *(void *)(i + 24);
        if (v8 && a3[4] == *(void *)(i + 32)) {
          continue;
        }
      }

      *(void *)uint64_t result = *(void *)i;
      __int128 v10 = *(_OWORD *)(i + 8);
      *(_OWORD *)(result + 24) = *(_OWORD *)(i + 24);
      *(_OWORD *)(result + _Block_object_dispose(va, 8) = v10;
      *(_DWORD *)(result + 40) = *(_DWORD *)(i + 40);
      *(void *)(result + 4_Block_object_dispose(va, 8) = *(void *)(i + 48);
      result += 56LL;
    }
  }

  return result;
}

void sub_1003B4C84(id a1)
{
  uint64_t v1 = operator new(0x4A8uLL);
  sub_100499870();
  off_1008D60E8 = v1;
}

void sub_1003B4CB4(_Unwind_Exception *a1)
{
}

void sub_1003B4CC8(id a1)
{
  uint64_t v1 = operator new(0x310uLL);
  sub_10036BB90();
  qword_1008D6450 = (uint64_t)v1;
}

void sub_1003B4CF8(_Unwind_Exception *a1)
{
}

void sub_1003B4D0C(id a1)
{
  uint64_t v1 = operator new(0x118uLL);
  void *v1 = off_100894CF8;
  v1[1] = off_100894D88;
  v1[2] = off_100894DA8;
  v1[3] = off_100894DD0;
  v1[4] = &off_100894E10;
  v1[5] = &off_100894E28;
  v1[6] = &off_100894E40;
  sub_100242DC4(v1 + 7);
  *((_WORD *)v1 + 60) = 0;
  *((_OWORD *)v1 + _Block_object_dispose(va, 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 16) = 0u;
  v1[34] = 0LL;
  off_1008D5F38 = v1;
}

void sub_1003B4D90(_Unwind_Exception *a1)
{
}

uint64_t sub_1003B4DA4( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return a2(a3, a4, a5, a6, a7);
}

uint64_t sub_1003B4DC0( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return a2(a3, a4, a5, a6, a8, a7, a9);
}

uint64_t sub_1003B4DE8( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return a2(a3, a4, a5 & 0xFFFFFFFFFFFFLL, a6, a8, a7, a9);
}

uint64_t sub_1003B4E10( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a2(a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1003B4E30(unint64_t a1, unint64_t *a2)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  unint64_t v4 = sub_1003B1640(off_1008D5F38, a1);
  *a2 = v4;
  if (v4) {
    return 0LL;
  }
  else {
    return 7LL;
  }
}

uint64_t sub_1003B4E98(unint64_t a1, __int128 *a2, uint64_t a3)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  __int128 v6 = (uint64_t *)sub_1003B14E4((uint64_t)off_1008D5F38, a1);
  if (v6) {
    return sub_1003B18CC(v6, a1, a2, a3);
  }
  else {
    return 7LL;
  }
}

uint64_t sub_1003B4F20(unint64_t a1, __int128 *a2)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t v4 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
  if (v4) {
    return sub_1003B19F0(v4, a1, a2);
  }
  else {
    return 7LL;
  }
}

uint64_t sub_1003B4F94(unint64_t a1, int *a2, char *a3, uint64_t a4, char *a5, unint64_t *a6)
{
  v33[0] = 0LL;
  v33[1] = 0LL;
  char v34 = 0;
  sub_100532E28((char *)v33, 0LL);
  int v25 = *a2;
  __int16 v26 = *((_WORD *)a2 + 2);
  if (!a6 || !a2 || !a3 || !a5)
  {
    unint64_t v18 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
    {
      sub_1003FE1B4((unsigned __int8 *)&v25, &v28);
      uint64_t v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
      uint64_t v24 = "(Valid Handle)";
      if ((v28.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v23 = &v28;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
      if (!a6) {
        uint64_t v24 = "(NULL)";
      }
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)a5;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
      uint64_t v30 = v23;
      __int16 v31 = 2080;
      __int16 v32 = v24;
      _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Invalid argument - %s %s %s %s",  (uint8_t *)&__p,  0x2Au);
    }

    uint64_t v15 = 3LL;
    goto LABEL_41;
  }

  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t v12 = (void *)sub_1003B14E4((uint64_t)off_1008D5F38, a1);
  if (!v12)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    goto LABEL_28;
  }

  if (!(_BYTE)v25)
  {
    uint64_t v19 = 1LL;
    while (v19 != 6)
    {
      if (*((unsigned __int8 *)&v25 + v19++))
      {
        break;
      }
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
    {
      sub_1003FE1B4((unsigned __int8 *)&v25, &__p);
      sub_100677B0C();
    }

    goto LABEL_37;
  }

void sub_1003B5428( _Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
}

uint64_t sub_1003B5480(unint64_t a1, unint64_t a2)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t v4 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  if (a2 - 4294901761u < 2 || !a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677C9C();
    }
    return 3LL;
  }

  uint64_t v6 = v4;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v7 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677C70();
    }
    return 7LL;
  }

  BOOL v8 = (unsigned __int8 *)v7;
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100895128);
  }
  uint64_t v9 = sub_100496954((void *)qword_1008D61A0, a1);
  if (v9)
  {
    uint64_t v10 = v9;
    if (sub_100487C4C())
    {
      CTGreenTeaOsLogHandle = (os_log_s *)getCTGreenTeaOsLogHandle(qword_1008F7720);
      if (CTGreenTeaOsLogHandle)
      {
        uint64_t v12 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_100494958(v10, (uint64_t)v19);
          int v13 = v20;
          uint64_t v14 = (void **)v19[0];
          sub_1003CF00C((uint64_t)v8, __p);
          uint64_t v15 = v19;
          if (v13 < 0) {
            uint64_t v15 = v14;
          }
          if (v18 >= 0) {
            unint64_t v16 = __p;
          }
          else {
            unint64_t v16 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          unint64_t v22 = v15;
          __int16 v23 = 2082;
          uint64_t v24 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Session %{public}s is asking to plug device %{public}s",  buf,  0x16u);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
          if (v20 < 0) {
            operator delete(v19[0]);
          }
        }
      }
    }
  }

  return sub_1003B1CC4(v6, v8);
}

void sub_1003B5710( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B5734(unint64_t a1, unint64_t a2)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t v4 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
  if (!v4) {
    return 7LL;
  }
  uint64_t v5 = v4;
  uint64_t result = 3LL;
  if (a2 - 4294901761u >= 2 && a2)
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_1008950E8);
    }
    unint64_t v7 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
    if (v7) {
      return sub_1003B21C8(v5, v7);
    }
    return 7LL;
  }

  return result;
}

uint64_t sub_1003B5800(unint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (!a3) {
    return 3LL;
  }
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t v6 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
  if (!v6) {
    return 7LL;
  }
  uint64_t v7 = v6;
  uint64_t result = 3LL;
  if (a2 - 4294901761u >= 2 && a2)
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_1008950E8);
    }
    unint64_t v9 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
    if (v9) {
      return sub_1003B22C4(v7, v9, a3);
    }
    return 7LL;
  }

  return result;
}

uint64_t sub_1003B58EC(unint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  uint64_t v4 = 3LL;
  if (a2 && a3)
  {
    uint64_t v7 = a2;
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_1008950C8);
    }
    uint64_t v9 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
    if (v9)
    {
      std::string __p = 0LL;
      uint64_t v19 = 0LL;
      uint64_t v20 = 0LL;
      uint64_t v4 = sub_1003B2390(v9, (char *)&__p);
      if (!(_DWORD)v4)
      {
        unint64_t v10 = 0LL;
        if (a4 && __p != v19)
        {
          char v11 = (char *)__p + 8;
          unint64_t v12 = 1LL;
          do
          {
            uint64_t v13 = *((void *)v11 - 1);
            if (qword_1008D5F50 != -1) {
              dispatch_once(&qword_1008D5F50, &stru_1008950E8);
            }
            unint64_t v14 = sub_1003FEFA8((uint64_t)off_1008D5F48, a1, v13);
            if (!v14)
            {
              uint64_t v4 = 7LL;
              goto LABEL_21;
            }

            *v7++ = v14;
            unint64_t v15 = v12 + 1;
            if (v12 >= a4) {
              break;
            }
            ++v12;
            BOOL v16 = v11 == v19;
            v11 += 8;
          }

          while (!v16);
          unint64_t v10 = v15 - 1;
        }

        uint64_t v4 = 0LL;
        *a3 = v10;
      }

void sub_1003B5A5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B5A7C(unint64_t a1, unint64_t a2, _BYTE *a3)
{
  if (!a3) {
    return 3LL;
  }
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t v6 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
  if (!v6) {
    return 7LL;
  }
  uint64_t v7 = v6;
  uint64_t result = 3LL;
  if (a2 - 4294901761u >= 2 && a2)
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_1008950E8);
    }
    unint64_t v9 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
    if (v9) {
      return sub_1003B2344(v7, v9, a3);
    }
    return 7LL;
  }

  return result;
}

uint64_t sub_1003B5B68(unint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 3LL;
  }
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t v6 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
  if (!v6) {
    return 7LL;
  }
  uint64_t v7 = v6;
  uint64_t result = 3LL;
  if (a2 - 4294901761u >= 2 && a2)
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_1008950E8);
    }
    unint64_t v9 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
    if (v9) {
      return sub_1003B2384(v7, v9, a3);
    }
    return 7LL;
  }

  return result;
}

uint64_t sub_1003B5C54(unint64_t a1, unint64_t a2, int *a3)
{
  if (!a3) {
    return 3LL;
  }
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t v6 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
  if (!v6) {
    return 7LL;
  }
  uint64_t v7 = v6;
  uint64_t result = 3LL;
  if (a2 - 4294901761u >= 2 && a2)
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_1008950E8);
    }
    unint64_t v9 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
    if (v9)
    {
      int v10 = sub_1003B1864(v7, v9);
      uint64_t result = 0LL;
      *a3 = v10 << 31 >> 31;
      return result;
    }

    return 7LL;
  }

  return result;
}

uint64_t sub_1003B5D44(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BTAccessoryManagerGetLinkKey", v8, 2u);
  }

  if (a1 && a2 && a3)
  {
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_1008950C8);
    }
    if (sub_1003B14E4((uint64_t)off_1008D5F38, a1))
    {
      arc4random_buf(a3, 0x10uLL);
      return 0LL;
    }

    else
    {
      return 7LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677CC8();
    }
    return 3LL;
  }

uint64_t sub_1003B5E4C( unint64_t a1, std::string::size_type a2, char *a3, uint64_t a4, int a5, _OWORD *a6, unint64_t *a7)
{
  if (a2 && a3 && a6 && a7)
  {
    int v20 = *(_DWORD *)a2;
    __int16 v21 = *(_WORD *)(a2 + 4);
    __n128 v24 = 0uLL;
    int v25 = 0;
    sub_10052525C((uint64_t)&v24, a6, 5u);
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_1008950C8);
    }
    if (sub_1003B14E4((uint64_t)off_1008D5F38, a1))
    {
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_1008950E8);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = *(_DWORD *)a2;
      WORD2(__p.__r_.__value_.__r.__words[0]) = *(_WORD *)(a2 + 4);
      uint64_t v13 = (std::string *)sub_1003FFEB0(off_1008D5F48, (uint64_t)&__p, 1);
      if (v13)
      {
        if (qword_1008D5F50 != -1) {
          dispatch_once(&qword_1008D5F50, &stru_1008950E8);
        }
        sub_1004006DC((uint64_t)off_1008D5F48, (uint64_t)v13, a4);
        sub_10002418C(&__p, a3);
        uint64_t v22 = 0LL;
        sub_1000B0400((uint64_t)&v22);
        v23.__r_.__value_.__r.__words[0] = (int)v22;
        v23.__r_.__value_.__l.__size_ = SWORD2(v22);
        sub_1003D0F60(v13, &__p, &v23);
        for (int i = 0; i != 31; ++i)
        {
          if (((1 << i) & a5) != 0)
          {
            v23.__r_.__value_.__r.__words[0] = 0LL;
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
            sub_1000B0400((uint64_t)&v23);
            __p.__r_.__value_.__r.__words[0] = SLODWORD(v23.__r_.__value_.__l.__data_);
            __p.__r_.__value_.__l.__size_ = SWORD2(v23.__r_.__value_.__r.__words[0]);
            sub_1003D1FC4((uint64_t)v13, 1 << i, 4, &__p, 0);
          }
        }

        if (qword_1008D67B8 != -1) {
          dispatch_once(&qword_1008D67B8, &stru_100895108);
        }
        uint64_t v15 = sub_10053584C((uint64_t)off_1008D67B0, (unsigned __int8 *)v13, &v24, 0);
        if (qword_1008D5F50 != -1) {
          dispatch_once(&qword_1008D5F50, &stru_1008950E8);
        }
        *a7 = sub_1003FEFA8((uint64_t)off_1008D5F48, a1, (uint64_t)v13);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
        {
          sub_1003FE1B4((unsigned __int8 *)&v20, &__p);
          sub_100677B54();
        }

        uint64_t v15 = 8LL;
      }
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_100677AE0();
      }
      uint64_t v15 = 7LL;
    }

    nullsub_63(&v24, v16);
  }

  else
  {
    uint64_t v17 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = "(Valid Handle)";
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a3;
      if (!a7) {
        uint64_t v19 = "(NULL)";
      }
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = a2;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
      uint64_t v27 = v19;
      _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Invalid argument - %s %p %s",  (uint8_t *)&__p,  0x20u);
    }

    return 3LL;
  }

  return v15;
}

void sub_1003B61E4( _Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
}

uint64_t sub_1003B6238(unint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t v10 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
  if (!v10)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  uint64_t v11 = v10;
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100895128);
  }
  uint64_t v12 = sub_100496954((void *)qword_1008D61A0, a1);
  if (v12)
  {
    uint64_t v13 = v12;
    if (sub_100487C4C())
    {
      CTGreenTeaOsLogHandle = (os_log_s *)getCTGreenTeaOsLogHandle(qword_1008F7720);
      if (CTGreenTeaOsLogHandle)
      {
        uint64_t v15 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_100494958(v13, (uint64_t)v22);
          int v16 = v23;
          uint64_t v17 = (void **)v22[0];
          sub_1003CF00C(v9, __p);
          char v18 = v22;
          if (v16 < 0) {
            char v18 = v17;
          }
          if (v21 >= 0) {
            uint64_t v19 = __p;
          }
          else {
            uint64_t v19 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          int v25 = v18;
          __int16 v26 = 2082;
          uint64_t v27 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Session %{public}s is asking to set double tap action for device %{public}s",  buf,  0x16u);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
          if (v23 < 0) {
            operator delete(v22[0]);
          }
        }
      }
    }
  }

  else {
    return sub_1003B279C(v11, v9, a3);
  }
}

void sub_1003B64BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B64E0(unint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v10 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v10) {
    return 7LL;
  }
  uint64_t v11 = v10;
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t v12 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
  if (!v12)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  uint64_t v13 = v12;
  unsigned __int8 v14 = sub_1003D635C(v11);
  unsigned __int8 v15 = (unsigned __int16)sub_1003D635C(v11) >> 8;
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100895128);
  }
  uint64_t v16 = sub_100496954((void *)qword_1008D61A0, a1);
  if (v16)
  {
    uint64_t v17 = v16;
    if (sub_100487C4C())
    {
      CTGreenTeaOsLogHandle = (os_log_s *)getCTGreenTeaOsLogHandle(qword_1008F7720);
      if (CTGreenTeaOsLogHandle)
      {
        uint64_t v19 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_100494958(v17, (uint64_t)v26);
          int v20 = v27;
          char v21 = (void **)v26[0];
          sub_1003CF00C(v11, __p);
          uint64_t v22 = v26;
          if (v20 < 0) {
            uint64_t v22 = v21;
          }
          if (v25 >= 0) {
            char v23 = __p;
          }
          else {
            char v23 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          char v29 = v22;
          __int16 v30 = 2082;
          __int16 v31 = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "Session %{public}s is asking to set advanced double tap action for device %{public}s",  buf,  0x16u);
          if (v25 < 0) {
            operator delete(__p[0]);
          }
          if (v27 < 0) {
            operator delete(v26[0]);
          }
        }
      }
    }
  }

  if (v14 == a4 && v15 == a3) {
    return 0LL;
  }
  else {
    return sub_1003B27F4(v13, v11, a3, a4);
  }
}

void sub_1003B6794( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B67B8(unint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_1008950C8);
    }
    if (sub_1003B14E4((uint64_t)off_1008D5F38, a1))
    {
      int v10 = sub_1003D2B2C(v9, 14);
      uint64_t result = 0LL;
      *a3 = v10;
      return result;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_100677CF4();
  }
  return 212LL;
}

uint64_t sub_1003B6948(uint64_t a1, unint64_t a2, int a3, int *a4)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v9 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v9) {
    return 7LL;
  }
  uint64_t v10 = v9;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    int v11 = sub_1003D2B2C(v10, a3);
    uint64_t result = 0LL;
    *a4 = v11 << 31 >> 31;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  return result;
}

uint64_t sub_1003B6A5C(uint64_t a1, unint64_t a2, int *a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  void v16[5] = v3;
  v16[6] = v4;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v9 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v9) {
    return 7LL;
  }
  uint64_t v10 = v9;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    uint64_t v15 = 0LL;
    v16[0] = 0LL;
    sub_1003D55EC(v10, (_DWORD *)v16 + 1, v16, (_DWORD *)&v15 + 1, &v15);
    int v11 = HIDWORD(v15);
    if ((HIDWORD(v15) - 8194) <= 0x22 && ((1LL << (BYTE4(v15) - 2)) & 0x47A877F9BLL) != 0)
    {
      int v12 = HIDWORD(v15) - 8194;
      if ((HIDWORD(v15) - 8194) < 0xF && ((0x409Bu >> v12) & 1) != 0)
      {
        int v11 = dword_1006C2730[v12];
      }

      else
      {
        if ((sub_1003D2B2C(v10, 27) & 1) != 0) {
          goto LABEL_26;
        }
        int v11 = HIDWORD(v15);
      }
    }

    unsigned int v13 = v11 - 8214;
    if (v13 > 0xF || ((1 << v13) & 0x8003) == 0)
    {
      int v14 = 0;
      goto LABEL_27;
    }

uint64_t sub_1003B6C14(unint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t v10 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
  if (!v10)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  uint64_t v11 = v10;
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100895128);
  }
  uint64_t v12 = sub_100496954((void *)qword_1008D61A0, a1);
  if (v12)
  {
    uint64_t v13 = v12;
    if (sub_100487C4C())
    {
      CTGreenTeaOsLogHandle = (os_log_s *)getCTGreenTeaOsLogHandle(qword_1008F7720);
      if (CTGreenTeaOsLogHandle)
      {
        uint64_t v15 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_100494958(v13, (uint64_t)v22);
          int v16 = v23;
          uint64_t v17 = (void **)v22[0];
          sub_1003CF00C(v9, __p);
          char v18 = v22;
          if (v16 < 0) {
            char v18 = v17;
          }
          if (v21 >= 0) {
            uint64_t v19 = __p;
          }
          else {
            uint64_t v19 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          char v25 = v18;
          __int16 v26 = 2082;
          char v27 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Session %{public}s is asking to set Mic mode for device %{public}s",  buf,  0x16u);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
          if (v23 < 0) {
            operator delete(v22[0]);
          }
        }
      }
    }
  }

  return sub_1003B2740(v11, v9, a3);
}

void sub_1003B6E98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B6EBC(unint64_t a1, unint64_t a2, int a3, int a4)
{
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_100895148);
  }
  if ((sub_1004AAE04() & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677E28();
    }
    return 108LL;
  }

  if (a2 - 4294901761u < 2 || !a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677DFC();
    }
    return 3LL;
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v10 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v10)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677D20();
    }
    return 7LL;
  }

  uint64_t v11 = (unsigned __int8 *)v10;
  if (sub_1003D0070(v10, 0x80000u) != 4)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677DD0();
    }
    return 108LL;
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100895168);
  }
  if (*((_BYTE *)off_1008D60A8 + 76))
  {
    char v26 = 0;
    sub_100242CA4(&v26);
    char v12 = sub_10011257C((uint64_t)(v11 + 128));
    sub_100242CD0(&v26);
    if ((v12 & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_100677DA4();
      }
      uint64_t v8 = 108LL;
      goto LABEL_60;
    }

    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_1008950C8);
    }
    uint64_t v13 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
    if (v13)
    {
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_100895128);
      }
      uint64_t v14 = sub_100496954((void *)qword_1008D61A0, a1);
      uint64_t v15 = (os_log_s *)qword_1008F7568;
      BOOL v16 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        if (v16)
        {
          sub_100494958(v14, (uint64_t)v27);
          int v17 = v30;
          char v18 = *(_BYTE **)v27;
          sub_1003CF00C((uint64_t)v11, __p);
          uint64_t v19 = v27;
          if (v17 < 0) {
            uint64_t v19 = v18;
          }
          if (v25 >= 0) {
            int v20 = __p;
          }
          else {
            int v20 = (void **)__p[0];
          }
          char v21 = "Enabled";
          *(_DWORD *)std::string buf = 136446722;
          *(void *)&uint8_t buf[4] = v19;
          __int16 v32 = 2082;
          if (!a3) {
            char v21 = "Disabled";
          }
          __int16 v33 = v20;
          __int16 v34 = 2082;
          uint64_t v35 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "TimeSyncEnable: Session %{public}s is configuring Remote Timesync for device %{public}s to %{public}s",  buf,  0x20u);
          if (v25 < 0) {
            operator delete(__p[0]);
          }
          if (v30 < 0) {
            operator delete(*(void **)v27);
          }
        }

        uint64_t v22 = sub_100494CF8(v14);
        uint64_t v8 = sub_1003B2860(v13, v11, v22, a3 != 0, a4);
        goto LABEL_60;
      }

      if (v16)
      {
        sub_1003CF00C((uint64_t)v11, buf);
        char v23 = v34 >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)char v27 = 136446466;
        *(void *)&void v27[4] = v23;
        __int16 v28 = 1024;
        int v29 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Warning: TimeSyncEnable: Invalid Session Setting TimeSync, ignoring device %{public}s to %d",  v27,  0x12u);
        if (SHIBYTE(v34) < 0) {
          operator delete(*(void **)buf);
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
    {
      sub_100677D78();
    }

    uint64_t v8 = 7LL;
LABEL_60:
    sub_100242CD8(&v26);
    return v8;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_100677D4C();
  }
  return 111LL;
}

void sub_1003B7368( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_1003B73B0(unint64_t a1, unint64_t a2, int a3)
{
  return sub_1003B6EBC(a1, a2, a3, 0);
}

uint64_t sub_1003B73B8(unint64_t a1, unint64_t a2, int a3)
{
  return sub_1003B6EBC(a1, a2, a3, 1);
}

uint64_t sub_1003B73C0(unint64_t a1, unint64_t a2, uint64_t *a3)
{
  if (!a3) {
    return 3LL;
  }
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t v6 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
  if (!v6) {
    return 7LL;
  }
  uint64_t v7 = v6;
  uint64_t result = 3LL;
  if (a2 - 4294901761u >= 2 && a2)
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_1008950E8);
    }
    uint64_t v9 = (unsigned __int8 *)sub_1003FEF18((uint64_t)off_1008D5F48, a2);
    if (v9)
    {
      sub_1003B2A98(v7, v9, a3);
      return 0LL;
    }

    return 7LL;
  }

  return result;
}

uint64_t sub_1003B74A8(unint64_t a1, unint64_t a2, int a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t v10 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
  if (!v10)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  uint64_t v11 = v10;
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100895128);
  }
  uint64_t v12 = sub_100496954((void *)qword_1008D61A0, a1);
  uint64_t v13 = (os_log_s *)qword_1008F7568;
  BOOL v14 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    if (!v14) {
      return sub_1003B3534(v11, v9, a3 != 0);
    }
    sub_100494958(v12, (uint64_t)v23);
    int v15 = v26;
    BOOL v16 = *(_BYTE **)v23;
    sub_1003CF00C(v9, __p);
    int v17 = v23;
    if (v15 < 0) {
      int v17 = v16;
    }
    char v18 = v22 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446722;
    *(void *)&uint8_t buf[4] = v17;
    __int16 v28 = 2082;
    int v29 = v18;
    __int16 v30 = 1024;
    int v31 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s is asking to set in ear detection mode for device %{public}s to %d",  buf,  0x1Cu);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if ((v26 & 0x80000000) == 0) {
      return sub_1003B3534(v11, v9, a3 != 0);
    }
    uint64_t v19 = *(void **)v23;
  }

  else
  {
    if (!v14) {
      return sub_1003B3534(v11, v9, a3 != 0);
    }
    sub_1003CF00C(v9, buf);
    int v20 = v30 >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)char v23 = 136446466;
    *(void *)&v23[4] = v20;
    __int16 v24 = 1024;
    int v25 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Setting in ear detection mode for device %{public}s to %d",  v23,  0x12u);
    if ((SHIBYTE(v30) & 0x80000000) == 0) {
      return sub_1003B3534(v11, v9, a3 != 0);
    }
    uint64_t v19 = *(void **)buf;
  }

  operator delete(v19);
  return sub_1003B3534(v11, v9, a3 != 0);
}

void sub_1003B77A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B77CC(unint64_t a1, unint64_t a2, int *a3, int *a4)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v10 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v10) {
    return 7LL;
  }
  uint64_t v11 = v10;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_1008950C8);
    }
    uint64_t v12 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
    if (v12)
    {
      sub_1003B3590(v12, v11, a3, a4);
      return 0LL;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_100677CF4();
  }
  return 212LL;
}

uint64_t sub_1003B795C( unint64_t a1, unint64_t a2, unsigned __int8 a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t result = 3LL;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v13 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v13) {
    return 7LL;
  }
  uint64_t v14 = v13;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    if (sub_1003D0070(v14, 0x80000u) == 4)
    {
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_100895128);
      }
      uint64_t v15 = sub_100496954((void *)qword_1008D61A0, a1);
      if (v15)
      {
        uint64_t v16 = v15;
        int v17 = (os_log_s *)qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
        {
          sub_100494958(v16, (uint64_t)v24);
          int v18 = v25;
          uint64_t v19 = (void **)v24[0];
          sub_1003CF00C(v14, __p);
          int v20 = v24;
          if (v18 < 0) {
            int v20 = v19;
          }
          if (v23 >= 0) {
            char v21 = __p;
          }
          else {
            char v21 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          char v27 = v20;
          __int16 v28 = 2082;
          int v29 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s is asking to send Setup Command to device %{public}s",  buf,  0x16u);
          if (v23 < 0) {
            operator delete(__p[0]);
          }
          if (v25 < 0) {
            operator delete(v24[0]);
          }
        }
      }

      if (qword_1008D60E0 != -1) {
        dispatch_once(&qword_1008D60E0, &stru_100895188);
      }
      return sub_100218030((uint64_t)off_1008D60D8, v14, a3, a4, a6, a5);
    }

    else
    {
      return 108LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

void sub_1003B7C38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B7C5C( unint64_t a1, unint64_t a2, uint64_t a3, int a4, const void *a5, unsigned int a6)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t result = 3LL;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v13 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v13) {
    return 7LL;
  }
  uint64_t v14 = v13;
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100895128);
  }
  uint64_t v15 = sub_100496954((void *)qword_1008D61A0, a1);
  if (v15)
  {
    uint64_t v16 = v15;
    int v17 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      sub_100494958(v16, (uint64_t)v24);
      int v18 = v25;
      uint64_t v19 = (void **)v24[0];
      sub_1003CF00C(v14, __p);
      int v20 = v24;
      if (v18 < 0) {
        int v20 = v19;
      }
      if (v23 >= 0) {
        char v21 = __p;
      }
      else {
        char v21 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      char v27 = v20;
      __int16 v28 = 2082;
      int v29 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s is asking to send Relay Msg to device %{public}s",  buf,  0x16u);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v25 < 0) {
        operator delete(v24[0]);
      }
    }
  }

  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100895188);
  }
  return sub_1002182E4((uint64_t)off_1008D60D8, v14, a3, a4, a6, a5);
}

void sub_1003B7ED8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B7EFC(unint64_t a1, unint64_t a2, int a3, int *a4, unsigned int a5)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t result = 3LL;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v11 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v11) {
    return 7LL;
  }
  uint64_t v12 = v11;
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100895128);
  }
  uint64_t v13 = sub_100496954((void *)qword_1008D61A0, a1);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      sub_100494958(v14, (uint64_t)v22);
      int v16 = v23;
      int v17 = (void **)v22[0];
      sub_1003CF00C(v12, __p);
      int v18 = v22;
      if (v16 < 0) {
        int v18 = v17;
      }
      if (v21 >= 0) {
        uint64_t v19 = __p;
      }
      else {
        uint64_t v19 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      char v25 = v18;
      __int16 v26 = 2082;
      char v27 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s is asking to send Update Connection Priority List to device %{public}s",  buf,  0x16u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }
  }

  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100895188);
  }
  return sub_1002186B0((uint64_t)off_1008D60D8, v12, a3, a4, a5);
}

void sub_1003B8168( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B818C(unint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_1008950C8);
    }
    if (sub_1003B14E4((uint64_t)off_1008D5F38, a1))
    {
      int v10 = sub_1003D635C(v9);
      uint64_t result = 0LL;
      *a3 = v10;
      return result;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_100677CF4();
  }
  return 212LL;
}

uint64_t sub_1003B8318(unint64_t a1, unint64_t a2, _DWORD *a3, int *a4)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v10 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v10) {
    return 7LL;
  }
  uint64_t v11 = v10;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_1008950C8);
    }
    if (sub_1003B14E4((uint64_t)off_1008D5F38, a1))
    {
      *a4 = sub_1003D635C(v11);
      int v12 = ((unsigned __int16)sub_1003D635C(v11) >> 8);
      *a3 = v12;
      uint64_t v13 = (os_log_s *)qword_1008F7568;
      BOOL v14 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0LL;
      if (v14)
      {
        int v15 = *a4;
        v16[0] = 67109376;
        v16[1] = v12;
        __int16 v17 = 1024;
        int v18 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Double tap values read from device, left = %d, rght = %d",  (uint8_t *)v16,  0xEu);
        return 0LL;
      }

      return result;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_100677CF4();
  }
  return 212LL;
}

uint64_t sub_1003B8554(unint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (!a3) {
    return 3LL;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_1008950C8);
    }
    if (sub_1003B14E4((uint64_t)off_1008D5F38, a1))
    {
      int v10 = sub_1003DF900(v9);
      uint64_t result = 0LL;
      *a3 = v10;
      return result;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_100677CF4();
  }
  return 212LL;
}

uint64_t sub_1003B86EC(unint64_t a1, unint64_t a2, int *a3)
{
  if (!a3) {
    return 3LL;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_1008950C8);
    }
    if (sub_1003B14E4((uint64_t)off_1008D5F38, a1))
    {
      int v10 = sub_1003DF944(v9);
      uint64_t result = 0LL;
      *a3 = v10 << 31 >> 31;
      return result;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_100677CF4();
  }
  return 212LL;
}

uint64_t sub_1003B8888(unint64_t a1, unint64_t a2, int a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  if (!sub_1003B14E4((uint64_t)off_1008D5F38, a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    if (sub_1003D0070(v9, 0x80000u) == 4)
    {
      if (qword_1008D60E0 != -1) {
        dispatch_once(&qword_1008D60E0, &stru_100895188);
      }
      sub_10023BAB8((uint64_t)off_1008D60D8, v9, a3 != 0);
      return 0LL;
    }

    else
    {
      return 108LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

uint64_t sub_1003B8A44(unint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100895188);
  }
  return sub_100236180(off_1008D60D8, a1, a3, a2, a4);
}

uint64_t sub_1003B8B04(unint64_t a1, uint64_t *a2)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100895188);
  }
  return sub_1002365F4((uint64_t)off_1008D60D8, a1, a2);
}

uint64_t sub_1003B8BA8(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unsigned __int16 a5)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t result = 3LL;
  if (a3 - 4294901761u < 2 || !a3) {
    return result;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v11 = sub_1003FEF18((uint64_t)off_1008D5F48, a3);
  if (!v11) {
    return 7LL;
  }
  uint64_t v12 = v11;
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100895128);
  }
  uint64_t v13 = sub_100496954((void *)qword_1008D61A0, a1);
  if (v13)
  {
    uint64_t v14 = v13;
    if (sub_100487C4C())
    {
      CTGreenTeaOsLogHandle = (os_log_s *)getCTGreenTeaOsLogHandle(qword_1008F7720);
      if (CTGreenTeaOsLogHandle)
      {
        int v16 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_100494958(v14, (uint64_t)v23);
          int v17 = v24;
          int v18 = (void **)v23[0];
          sub_1003CF00C(v12, __p);
          uint64_t v19 = v23;
          if (v17 < 0) {
            uint64_t v19 = v18;
          }
          if (v22 >= 0) {
            int v20 = __p;
          }
          else {
            int v20 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          __int16 v26 = v19;
          __int16 v27 = 2082;
          __int16 v28 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "Session %{public}s is asking to send custom data to device %{public}s",  buf,  0x16u);
          if (v22 < 0) {
            operator delete(__p[0]);
          }
          if (v24 < 0) {
            operator delete(v23[0]);
          }
        }
      }
    }
  }

  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100895188);
  }
  return sub_100214E98((uint64_t)off_1008D60D8, v12, a2, a5, a4);
}

void sub_1003B8E24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B8E48(unint64_t a1, unint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t result = 3LL;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v9 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v9) {
    return 7LL;
  }
  uint64_t v10 = v9;
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100895188);
  }
  return sub_100222974((uint64_t)off_1008D60D8, v10, a3, a4);
}

uint64_t sub_1003B8F74(unint64_t a1, unint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t result = 3LL;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v9 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v9) {
    return 7LL;
  }
  uint64_t v10 = v9;
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100895188);
  }
  return sub_100222BA4((uint64_t)off_1008D60D8, v10, a3, a4);
}

uint64_t sub_1003B90A0(unint64_t a1, unint64_t a2, void *a3, void *a4, unint64_t a5)
{
  uint64_t v10 = sub_1002E6E00();
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t result = 3LL;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v12 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v12) {
    return 7LL;
  }
  LOBYTE(__n) = 0;
  memset(v14, 0, sizeof(v14));
  if (qword_1008D67D8 != -1) {
    dispatch_once(&qword_1008D67D8, &stru_1008951A8);
  }
  sub_1003558E8(qword_1008D67D0, v14);
  uint64_t v13 = __n;
  memcpy(a3, v14, __n);
  uint64_t result = 0LL;
  *a4 = v13;
  return result;
}

uint64_t sub_1003B9268(unint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned __int16 a4)
{
  uint64_t v8 = sub_1002E6E00();
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t result = 3LL;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v10 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v10) {
    return 7LL;
  }
  uint64_t v11 = v10;
  if (qword_1008D67D8 != -1) {
    dispatch_once(&qword_1008D67D8, &stru_1008951A8);
  }
  return sub_100355C00(qword_1008D67D0, v11, a3, a4);
}

uint64_t sub_1003B93B0(unint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  uint64_t v6 = sub_1002E6E00();
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t result = 3LL;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  if (qword_1008D67D8 != -1) {
    dispatch_once(&qword_1008D67D8, &stru_1008951A8);
  }
  return sub_100355DE8(qword_1008D67D0, v9, a3);
}

uint64_t sub_1003B94F0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t result = 3LL;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v9 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v9) {
    return 7LL;
  }
  uint64_t v10 = v9;
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100895128);
  }
  uint64_t v11 = sub_100496954((void *)qword_1008D61A0, a1);
  if (v11)
  {
    uint64_t v12 = v11;
    if (sub_100487C4C())
    {
      CTGreenTeaOsLogHandle = (os_log_s *)getCTGreenTeaOsLogHandle(qword_1008F7720);
      if (CTGreenTeaOsLogHandle)
      {
        uint64_t v14 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_100494958(v12, (uint64_t)v21);
          int v15 = v22;
          int v16 = (void **)v21[0];
          sub_1003CF00C(v10, __p);
          int v17 = v21;
          if (v15 < 0) {
            int v17 = v16;
          }
          if (v20 >= 0) {
            int v18 = __p;
          }
          else {
            int v18 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          char v24 = v17;
          __int16 v25 = 2082;
          __int16 v26 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "Session %{public}s is asking to send control command to device %{public}s",  buf,  0x16u);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
          if (v22 < 0) {
            operator delete(v21[0]);
          }
        }
      }
    }
  }

  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100895188);
  }
  return sub_100215778((uint64_t)off_1008D60D8, v10, a3, a4, 2u);
}

void sub_1003B9768( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B978C(unint64_t a1, unint64_t a2, int a3, int a4, int *a5)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t result = 3LL;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v11 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v11) {
    return 7LL;
  }
  uint64_t v12 = v11;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    if (sub_1003D0070(v12, 0x80000u) == 4)
    {
      uint64_t result = 0LL;
      switch(a3)
      {
        case 13:
          int v13 = sub_1003DFA38(v12);
          *a5 = v13;
          uint64_t v14 = (os_log_s *)qword_1008F7568;
          BOOL v15 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v15)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)std::string::size_type v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&v86[6] = v13;
            int v16 = "Get ListeningMode device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }

          break;
        case 20:
          int v17 = sub_1003DFB48(v12);
          *a5 = v17;
          uint64_t v14 = (os_log_s *)qword_1008F7568;
          BOOL v18 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v18)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)std::string::size_type v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&v86[6] = v17;
            int v16 = "Get SingleClickMode device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }

          break;
        case 21:
          int v19 = sub_1003DFB8C(v12);
          *a5 = v19;
          uint64_t v14 = (os_log_s *)qword_1008F7568;
          BOOL v20 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v20)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)std::string::size_type v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&v86[6] = v19;
            int v16 = "Get DoubleClickMode device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }

          break;
        case 22:
          int v21 = sub_1003DFBD0(v12);
          *a5 = v21;
          uint64_t v14 = (os_log_s *)qword_1008F7568;
          BOOL v22 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v22)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)std::string::size_type v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&v86[6] = v21;
            int v16 = "Get ClickHoldMode device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }

          break;
        case 23:
          int v23 = sub_1003DFC14(v12);
          *a5 = v23;
          uint64_t v14 = (os_log_s *)qword_1008F7568;
          BOOL v24 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v24)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)std::string::size_type v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&v86[6] = v23;
            int v16 = "Get DoubleClickInterval device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }

          break;
        case 24:
          int v25 = sub_1003DFC58(v12);
          *a5 = v25;
          uint64_t v14 = (os_log_s *)qword_1008F7568;
          BOOL v26 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v26)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)std::string::size_type v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&v86[6] = v25;
            int v16 = "Get ClickHoldInterval device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }

          break;
        case 26:
          int v27 = sub_1003DFA7C(v12);
          *a5 = v27;
          uint64_t v14 = (os_log_s *)qword_1008F7568;
          BOOL v28 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v28)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)std::string::size_type v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&v86[6] = v27;
            int v16 = "Get ListeningModeConfigs device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }

          break;
        case 27:
          int v29 = sub_1003DFC9C(v12);
          *a5 = v29;
          uint64_t v14 = (os_log_s *)qword_1008F7568;
          BOOL v30 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v30)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)std::string::size_type v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&v86[6] = v29;
            int v16 = "Get OneBudANCMode device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }

          break;
        case 28:
          int v31 = sub_1003DFCE0(v12);
          *a5 = v31;
          uint64_t v14 = (os_log_s *)qword_1008F7568;
          BOOL v32 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v32)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)std::string::size_type v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&v86[6] = v31;
            int v16 = "Get CrownRotationDirection device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }

          break;
        case 30:
          int v33 = sub_1003DFD24(v12);
          *a5 = v33;
          uint64_t v14 = (os_log_s *)qword_1008F7568;
          BOOL v34 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v34)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)std::string::size_type v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&v86[6] = v33;
            int v16 = "Get Auto Answer device setting : setting type %d, controlValue %d";
            goto LABEL_42;
          }

          break;
        case 31:
          int v35 = sub_1003DFD68(v12);
          *a5 = v35;
          uint64_t v14 = (os_log_s *)qword_1008F7568;
          BOOL v36 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v36)
          {
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)std::string::size_type v86 = a4;
            *(_WORD *)&v86[4] = 1024;
            *(_DWORD *)&v86[6] = v35;
            int v16 = "Get ChimeVolume device setting : setting type %d, controlValue %d";
LABEL_42:
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v16, buf, 0xEu);
            goto LABEL_116;
          }

          break;
        case 35:
          *a5 = sub_1003DFDF0(v12);
          __int16 v37 = (os_log_s *)qword_1008F7568;
          BOOL v38 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v38)
          {
            sub_1003CF00C(v12, __p);
            if (v84 >= 0) {
              int v39 = __p;
            }
            else {
              int v39 = (void **)__p[0];
            }
            int v40 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)std::string::size_type v86 = v39;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v40;
            int v41 = "Get VolumeSwipeInterval setting for device %{public}s : setting type %d, controlValue %d";
            goto LABEL_114;
          }

          break;
        case 36:
          *a5 = sub_1003DFE34(v12);
          __int16 v37 = (os_log_s *)qword_1008F7568;
          BOOL v42 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v42)
          {
            sub_1003CF00C(v12, __p);
            if (v84 >= 0) {
              BOOL v43 = __p;
            }
            else {
              BOOL v43 = (void **)__p[0];
            }
            int v44 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)std::string::size_type v86 = v43;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v44;
            int v41 = "Get CallManagementConfiguration setting for device %{public}s : setting type %d, controlValue 0x%08X";
            goto LABEL_114;
          }

          break;
        case 37:
          *a5 = sub_1003DFDAC(v12);
          __int16 v37 = (os_log_s *)qword_1008F7568;
          BOOL v45 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v45)
          {
            sub_1003CF00C(v12, __p);
            if (v84 >= 0) {
              uint64_t v46 = __p;
            }
            else {
              uint64_t v46 = (void **)__p[0];
            }
            int v47 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)std::string::size_type v86 = v46;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v47;
            int v41 = "Get VolumeSwipeMode setting for device %{public}s : setting type %d, controlValue %d";
            goto LABEL_114;
          }

          break;
        case 38:
          *a5 = sub_1003DFE78(v12);
          __int16 v37 = (os_log_s *)qword_1008F7568;
          BOOL v48 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v48)
          {
            sub_1003CF00C(v12, __p);
            if (v84 >= 0) {
              id v49 = __p;
            }
            else {
              id v49 = (void **)__p[0];
            }
            int v50 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)std::string::size_type v86 = v49;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v50;
            int v41 = "Get AdaptiveVolumeMode setting for device %{public}s : setting type %d, controlValue 0x%08X";
            goto LABEL_114;
          }

          break;
        case 39:
          *a5 = sub_1003DFEBC(v12);
          __int16 v37 = (os_log_s *)qword_1008F7568;
          BOOL v51 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v51)
          {
            sub_1003CF00C(v12, __p);
            if (v84 >= 0) {
              unsigned int v52 = __p;
            }
            else {
              unsigned int v52 = (void **)__p[0];
            }
            int v53 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)std::string::size_type v86 = v52;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v53;
            int v41 = "Get Software Mute device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_114;
          }

          break;
        case 40:
          *a5 = sub_1003DFF00(v12);
          __int16 v37 = (os_log_s *)qword_1008F7568;
          BOOL v54 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v54)
          {
            sub_1003CF00C(v12, __p);
            if (v84 >= 0) {
              char v55 = __p;
            }
            else {
              char v55 = (void **)__p[0];
            }
            int v56 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)std::string::size_type v86 = v55;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v56;
            int v41 = "Get Conversation Detect device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_114;
          }

          break;
        case 41:
          *a5 = sub_1003DFF44(v12);
          __int16 v37 = (os_log_s *)qword_1008F7568;
          BOOL v57 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v57)
          {
            sub_1003CF00C(v12, __p);
            if (v84 >= 0) {
              uint64_t v58 = __p;
            }
            else {
              uint64_t v58 = (void **)__p[0];
            }
            int v59 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)std::string::size_type v86 = v58;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v59;
            int v41 = "Get SSL device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_114;
          }

          break;
        case 44:
          unsigned __int8 v60 = sub_1003E5E08(v12);
          unsigned __int8 v61 = sub_1003E5D28(v12);
          uint64_t result = 0LL;
          *a5 = v61 | (v60 << 8);
          break;
        case 46:
          *a5 = sub_1003DFF88(v12);
          __int16 v37 = (os_log_s *)qword_1008F7568;
          BOOL v62 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v62)
          {
            sub_1003CF00C(v12, __p);
            if (v84 >= 0) {
              uint64_t v63 = __p;
            }
            else {
              uint64_t v63 = (void **)__p[0];
            }
            int v64 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)std::string::size_type v86 = v63;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v64;
            int v41 = "Get Auto ANC strength device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_114;
          }

          break;
        case 47:
          *a5 = sub_1003DFFCC(v12);
          __int16 v37 = (os_log_s *)qword_1008F7568;
          BOOL v65 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v65)
          {
            sub_1003CF00C(v12, __p);
            if (v84 >= 0) {
              __int16 v66 = __p;
            }
            else {
              __int16 v66 = (void **)__p[0];
            }
            int v67 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)std::string::size_type v86 = v66;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v67;
            int v41 = "Get HPS Gain Swipe device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_114;
          }

          break;
        case 48:
          *a5 = sub_1003E0098(v12);
          __int16 v37 = (os_log_s *)qword_1008F7568;
          BOOL v68 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v68)
          {
            sub_1003CF00C(v12, __p);
            if (v84 >= 0) {
              int v69 = __p;
            }
            else {
              int v69 = (void **)__p[0];
            }
            int v70 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)std::string::size_type v86 = v69;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v70;
            int v41 = "Get Heart Rate Monitor enabled device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_114;
          }

          break;
        case 49:
          *a5 = sub_1003E00DC(v12);
          __int16 v37 = (os_log_s *)qword_1008F7568;
          BOOL v71 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v71)
          {
            sub_1003CF00C(v12, __p);
            if (v84 >= 0) {
              __int16 v72 = __p;
            }
            else {
              __int16 v72 = (void **)__p[0];
            }
            int v73 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)std::string::size_type v86 = v72;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v73;
            int v41 = "Get In Case Tone device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_114;
          }

          break;
        case 50:
          *a5 = sub_1003E0120(v12);
          __int16 v37 = (os_log_s *)qword_1008F7568;
          BOOL v74 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v74)
          {
            sub_1003CF00C(v12, __p);
            if (v84 >= 0) {
              unsigned int v75 = __p;
            }
            else {
              unsigned int v75 = (void **)__p[0];
            }
            int v76 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)std::string::size_type v86 = v75;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v76;
            int v41 = "Get Siri Multitone device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_114;
          }

          break;
        case 51:
          *a5 = sub_1003E0010(v12);
          __int16 v37 = (os_log_s *)qword_1008F7568;
          BOOL v77 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v77)
          {
            sub_1003CF00C(v12, __p);
            if (v84 >= 0) {
              __int16 v78 = __p;
            }
            else {
              __int16 v78 = (void **)__p[0];
            }
            int v79 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)std::string::size_type v86 = v78;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v79;
            int v41 = "Get Hearing Assist device setting for device %{public}s : setting type %u, controlValue %u";
            goto LABEL_114;
          }

          break;
        case 52:
          *a5 = sub_1003E0054(v12);
          __int16 v37 = (os_log_s *)qword_1008F7568;
          BOOL v80 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0LL;
          if (v80)
          {
            sub_1003CF00C(v12, __p);
            if (v84 >= 0) {
              int v81 = __p;
            }
            else {
              int v81 = (void **)__p[0];
            }
            int v82 = *a5;
            *(_DWORD *)std::string buf = 136446722;
            *(void *)std::string::size_type v86 = v81;
            *(_WORD *)&v86[8] = 1024;
            int v87 = a4;
            __int16 v88 = 1024;
            int v89 = v82;
            int v41 = "Allow Off Option for Listening Mode device setting for device %{public}s : setting type %u, controlValue %u";
LABEL_114:
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, v41, buf, 0x18u);
            if (v84 < 0) {
              operator delete(__p[0]);
            }
LABEL_116:
            uint64_t result = 0LL;
          }

          break;
        default:
          return result;
      }
    }

    else
    {
      return 108LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  return result;
}

uint64_t sub_1003BA634(unint64_t a1, unint64_t a2, int *a3)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  if (!sub_1003B14E4((uint64_t)off_1008D5F38, a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  uint64_t result = 3LL;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v7 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v7) {
    return 7LL;
  }
  uint64_t v8 = v7;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    *a3 = 0;
    unint64_t v9 = (os_log_s *)qword_1008F7568;
    BOOL v10 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v10)
    {
      int v11 = *a3;
      v12[0] = 67109120;
      v12[1] = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Setting Feature BitMask : settingFeatureBitMask %8x",  (uint8_t *)v12,  8u);
      return 0LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  return result;
}

uint64_t sub_1003BA8FC(uint64_t a1, unint64_t a2, void *a3, void *a4, unint64_t a5)
{
  unint64_t v9 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  if (a2)
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_1008950E8);
    }
    unint64_t v10 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
    int v11 = (const std::string *)v10;
    if (v10)
    {
      int v40 = 0LL;
      int v41 = 0LL;
      uint64_t v42 = 0LL;
      if (sub_1003D8F04(v10, (uint64_t)&v40))
      {
        uint64_t v12 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
        for (int i = v40; i != v41; i += 3)
        {
          uint64_t v14 = i;
          uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v14));
          int v16 = (void *)v15;
          if (v15) {
            int v17 = (const __CFString *)v15;
          }
          else {
            int v17 = &stru_1008A57D8;
          }
          -[NSMutableArray addObject:](v12, "addObject:", v17);
        }

        -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v12, @"AACPVersionInfo");
      }

      memset(&v39, 0, sizeof(v39));
      if (sub_1003D95C0(v11, &v39))
      {
        if ((v39.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          BOOL v18 = &v39;
        }
        else {
          BOOL v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
        }
        int v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v18));
        -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v19, @"ANCAssetVersion");
      }

      uint64_t v38 = 0LL;
      __int128 v36 = 0u;
      *(_OWORD *)std::string __p = 0u;
      __int128 v35 = 0u;
      sub_10002418C(__p, "");
      if (sub_1003D9724((uint64_t)v11, (uint64_t)&v35))
      {
        BOOL v20 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
        if (v38 >= 0) {
          int v21 = __p;
        }
        else {
          int v21 = (void **)__p[0];
        }
        BOOL v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v21));
        unint64_t v23 = v36;
        if (v23)
        {
          unsigned __int16 v24 = v23 >> 4;
          if (v35 < 2u)
          {
            uint64_t v25 = v23 & 0xF;
          }

          else
          {
            uint64_t v25 = (v23 >> 20) & 0xFFF0 | v23 & 0xF;
            v24 |= WORD2(v23) & 0xFFF0;
          }

          int v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%u.%u.%u",  (unsigned __int16)(v23 >> 8),  v24,  v25));
          -[NSMutableDictionary setObject:forKey:](v20, "setObject:forKey:", v27, @"CaseInfoVersion");
        }

        if (-[NSMutableDictionary count](v20, "count")) {
          -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v20, @"CaseInfo");
        }
      }

      if (-[NSMutableDictionary count](v9, "count"))
      {
        id v34 = 0LL;
        BOOL v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v9,  0LL,  &v34));
        id v29 = v34;
        if (v29)
        {
          BOOL v30 = (os_log_s *)qword_1008F7568;
          if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
            sub_100677E54((uint64_t)v29, v30, v31);
          }
          uint64_t v26 = 1LL;
        }

        else if ((unint64_t)[v28 length] <= a5)
        {
          id v32 = v28;
          memcpy(a3, [v32 bytes], (size_t)objc_msgSend(v32, "length"));
          uint64_t v26 = 0LL;
          *a4 = [v32 length];
        }

        else
        {
          uint64_t v26 = 5LL;
        }
      }

      else
      {
        id v29 = 0LL;
        uint64_t v26 = 1LL;
      }

      if (SHIBYTE(v38) < 0) {
        operator delete(__p[0]);
      }
      *(void *)&__int128 v35 = &v40;
      sub_100024304((void ***)&v35);
    }

    else
    {
      uint64_t v26 = 3LL;
    }
  }

  else
  {
    uint64_t v26 = 7LL;
  }

  return v26;
}

void sub_1003BACF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  a15 = v34 - 112;
  sub_100024304((void ***)&a15);

  _Unwind_Resume(a1);
}

uint64_t sub_1003BADBC(uint64_t a1, unint64_t a2, void *a3, unint64_t *a4, unint64_t a5)
{
  if (!a2) {
    return 19LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v9 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v9) {
    return 3LL;
  }
  uint64_t v10 = v9;
  uint64_t v15 = 0LL;
  int v16 = 0LL;
  uint64_t v17 = 0LL;
  sub_1003E02B4(v10, &v15);
  int v11 = v15;
  unint64_t v12 = v16 - v15;
  if (v16 != v15)
  {
    if (v12 <= a5)
    {
      memcpy(a3, v15, v16 - v15);
      uint64_t v13 = 0LL;
      *a4 = v12;
      if (!v11) {
        return v13;
      }
    }

    else
    {
      uint64_t v13 = 5LL;
      if (!v15) {
        return v13;
      }
    }

    goto LABEL_14;
  }

  uint64_t v13 = 1LL;
  if (v15)
  {
LABEL_14:
    int v16 = v11;
    operator delete(v11);
  }

  return v13;
}

uint64_t sub_1003BAED4(uint64_t a1, unint64_t a2, unsigned int a3, _DWORD *a4)
{
  if (!a2) {
    return 19LL;
  }
  if (a3 > 0xFF) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v7 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v7) {
    return 3LL;
  }
  uint64_t v8 = v7;
  int v9 = sub_1003E0350(v8, a3);
  uint64_t result = 0LL;
  *a4 = v9;
  return result;
}

uint64_t sub_1003BAF8C( uint64_t a1, char *a2, size_t a3, char *a4, size_t a5, char *a6, size_t a7, char *a8, size_t a9, char *a10, size_t a11, char *a12, size_t a13, char *a14, size_t a15)
{
  BOOL v18 = a4;
  if (qword_1008D60E0 != -1)
  {
    uint64_t v26 = a6;
    size_t v27 = a7;
    size_t v25 = a5;
    unint64_t v23 = a8;
    dispatch_once(&qword_1008D60E0, &stru_100895188);
    a8 = v23;
    BOOL v18 = a4;
    a5 = v25;
    a6 = v26;
    a7 = v27;
  }

  return sub_1002321F4((uint64_t)off_1008D60D8, a1, a2, a3, v18, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_1003BB064(unint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  if (!sub_1003B14E4((uint64_t)off_1008D5F38, a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  if (!a3) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    uint64_t result = 3LL;
    if (a2 - 4294901761u >= 2 && a2)
    {
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_1008950E8);
      }
      unint64_t v7 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
      if (v7)
      {
        int v8 = sub_1003E16E4(v7);
        uint64_t result = 0LL;
        *a3 = v8;
        return result;
      }

      return 7LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  return result;
}

uint64_t sub_1003BB1CC(unint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  uint64_t v4 = 3LL;
  if (a2 && a3)
  {
    unint64_t v7 = a2;
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_1008950C8);
    }
    int v9 = (void *)sub_1003B14E4((uint64_t)off_1008D5F38, a1);
    if (v9)
    {
      std::string __p = 0LL;
      int v19 = 0LL;
      uint64_t v20 = 0LL;
      uint64_t v4 = sub_1003B384C(v9, (char *)&__p);
      if (!(_DWORD)v4)
      {
        unint64_t v10 = 0LL;
        if (a4 && __p != v19)
        {
          int v11 = (char *)__p + 8;
          unint64_t v12 = 1LL;
          do
          {
            uint64_t v13 = *((void *)v11 - 1);
            if (qword_1008D5F50 != -1) {
              dispatch_once(&qword_1008D5F50, &stru_1008950E8);
            }
            unint64_t v14 = sub_1003FEFA8((uint64_t)off_1008D5F48, a1, v13);
            if (!v14)
            {
              uint64_t v4 = 7LL;
              goto LABEL_23;
            }

            *v7++ = v14;
            unint64_t v15 = v12 + 1;
            if (v12 >= a4) {
              break;
            }
            ++v12;
            BOOL v16 = v11 == v19;
            v11 += 8;
          }

          while (!v16);
          unint64_t v10 = v15 - 1;
        }

        uint64_t v4 = 0LL;
        *a3 = v10;
      }

void sub_1003BB364( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BB384(unint64_t a1, unint64_t a2, int *a3)
{
  if (!a3) {
    return 3LL;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    uint64_t v10 = sub_1002E6BF0();
    uint64_t v11 = sub_1002E6BF0();
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_1008950C8);
    }
    if (sub_1003B14E4((uint64_t)off_1008D5F38, a1))
    {
      if (qword_1008D60F0 != -1) {
        dispatch_once(&qword_1008D60F0, &stru_100895148);
      }
      int v12 = sub_1004B39EC((uint64_t)off_1008D60E8, v9);
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_100895128);
      }
      uint64_t v13 = sub_100496954((void *)qword_1008D61A0, a1);
      unint64_t v14 = (os_log_s *)qword_1008F7568;
      BOOL v15 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
      if (v13)
      {
        if (!v15) {
          goto LABEL_49;
        }
        sub_100494958(v13, (uint64_t)v24);
        int v16 = v27;
        uint64_t v17 = *(_BYTE **)v24;
        sub_1003CF00C(v9, __p);
        BOOL v18 = v24;
        if (v16 < 0) {
          BOOL v18 = v17;
        }
        int v19 = v23 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446722;
        *(void *)&uint8_t buf[4] = v18;
        __int16 v29 = 2082;
        BOOL v30 = v19;
        __int16 v31 = 1024;
        int v32 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s reading in Spatial Audio Active device %{public}s to %d",  buf,  0x1Cu);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
        if ((v27 & 0x80000000) == 0) {
          goto LABEL_49;
        }
        uint64_t v20 = *(void **)v24;
      }

      else
      {
        if (!v15) {
          goto LABEL_49;
        }
        sub_1003CF00C(v9, buf);
        int v21 = v31 >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)unsigned __int16 v24 = 136446466;
        *(void *)&v24[4] = v21;
        __int16 v25 = 1024;
        int v26 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Spatial Audio Active for device %{public}s to %d",  v24,  0x12u);
        if ((SHIBYTE(v31) & 0x80000000) == 0) {
          goto LABEL_49;
        }
        uint64_t v20 = *(void **)buf;
      }

      operator delete(v20);
LABEL_49:
      uint64_t result = 0LL;
      *a3 = v12 << 31 >> 31;
      return result;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_100677CF4();
  }
  return 212LL;
}

void sub_1003BB720( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BB744(unint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  uint64_t v10 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(v9, __p);
    uint64_t v11 = v32 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v11;
    __int16 v26 = 1024;
    int v27 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "BTAccessoryManagerSpatialAudioAllowed:  %{public}s Allowed %d",  buf,  0x12u);
    if (SHIBYTE(v32) < 0) {
      operator delete(*(void **)__p);
    }
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    uint64_t v12 = sub_1002E6BF0();
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_1008950C8);
    }
    uint64_t v13 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
    if (v13)
    {
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_100895128);
      }
      uint64_t v14 = sub_100496954((void *)qword_1008D61A0, a1);
      BOOL v15 = (os_log_s *)qword_1008F7568;
      BOOL v16 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        if (!v16) {
          return sub_1003B2CAC(v13, v9, a3);
        }
        sub_100494958(v14, (uint64_t)buf);
        int v17 = v28;
        BOOL v18 = *(_BYTE **)buf;
        sub_1003CF00C(v9, v23);
        int v19 = buf;
        if (v17 < 0) {
          int v19 = v18;
        }
        uint64_t v20 = v24 >= 0 ? v23 : (void **)v23[0];
        *(_DWORD *)std::string __p = 136446722;
        *(void *)&__p[4] = v19;
        __int16 v30 = 2082;
        __int16 v31 = v20;
        __int16 v32 = 1024;
        int v33 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s is asking to Spatial Audio for device %{public}s to %d",  __p,  0x1Cu);
        if (v24 < 0) {
          operator delete(v23[0]);
        }
        if ((v28 & 0x80000000) == 0) {
          return sub_1003B2CAC(v13, v9, a3);
        }
        int v21 = *(void **)buf;
      }

      else
      {
        if (!v16) {
          return sub_1003B2CAC(v13, v9, a3);
        }
        sub_1003CF00C(v9, __p);
        BOOL v22 = v32 >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = v22;
        __int16 v26 = 1024;
        int v27 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Setting Spatial Audio for device %{public}s to %d",  buf,  0x12u);
        if ((SHIBYTE(v32) & 0x80000000) == 0) {
          return sub_1003B2CAC(v13, v9, a3);
        }
        int v21 = *(void **)__p;
      }

      operator delete(v21);
      return sub_1003B2CAC(v13, v9, a3);
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_100677CF4();
  }
  return 212LL;
}

void sub_1003BBB08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BBB2C(unint64_t a1, unint64_t a2, int *a3)
{
  if (!a3) {
    return 3LL;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  uint64_t v10 = sub_1002E6BF0();
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t v11 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
  if (!v11)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  sub_1003B2B80(v11, v9, a3);
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100895128);
  }
  uint64_t v12 = sub_100496954((void *)qword_1008D61A0, a1);
  uint64_t v13 = (os_log_s *)qword_1008F7568;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    if ((_DWORD)result)
    {
      sub_100494958(v12, (uint64_t)v24);
      int v14 = v27;
      BOOL v15 = *(_BYTE **)v24;
      sub_1003CF00C(v9, __p);
      BOOL v16 = v24;
      if (v14 < 0) {
        BOOL v16 = v15;
      }
      if (v23 >= 0) {
        int v17 = __p;
      }
      else {
        int v17 = (void **)__p[0];
      }
      int v18 = *a3;
      *(_DWORD *)std::string buf = 136446722;
      *(void *)&uint8_t buf[4] = v16;
      __int16 v29 = 2082;
      __int16 v30 = v17;
      __int16 v31 = 1024;
      int v32 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s reading in Spatial Audio Allowed device %{public}s to %d",  buf,  0x1Cu);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if ((v27 & 0x80000000) == 0) {
        return 0LL;
      }
      int v19 = *(void **)v24;
      goto LABEL_46;
    }
  }

  else if ((_DWORD)result)
  {
    sub_1003CF00C(v9, buf);
    if (v31 >= 0) {
      uint64_t v20 = buf;
    }
    else {
      uint64_t v20 = *(_BYTE **)buf;
    }
    int v21 = *a3;
    *(_DWORD *)char v24 = 136446466;
    *(void *)&v24[4] = v20;
    __int16 v25 = 1024;
    int v26 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Spatial Audio Allowed for device %{public}s to %d",  v24,  0x12u);
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      return 0LL;
    }
    int v19 = *(void **)buf;
LABEL_46:
    operator delete(v19);
    return 0LL;
  }

  return result;
}

void sub_1003BBE7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BBEA0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v13 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v13) {
    return 7LL;
  }
  if (a4 >= 4)
  {
    int v14 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677EBC(a4, v14, v15, v16, v17, v18, v19, v20);
    }
    return 3LL;
  }

  uint64_t v21 = v13;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  char v22 = sub_100401058((uint64_t)off_1008D5F48);
  char v23 = (os_log_s *)qword_1008F7568;
  if ((v22 & 1) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(v21, __p);
      char v24 = v47[9] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = v24;
      __int16 v42 = 1024;
      int v43 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "BTAccessoryManagerSpatialAudioConfig:  %{public}s Allowed %d",  buf,  0x12u);
      if ((v47[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

    uint64_t v25 = sub_1002E6BF0();
    if (qword_1008D5F40 != -1) {
      dispatch_once(&qword_1008D5F40, &stru_1008950C8);
    }
    uint64_t v26 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
    if (v26)
    {
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_100895128);
      }
      uint64_t v27 = sub_100496954((void *)qword_1008D61A0, a1);
      char v28 = (os_log_s *)qword_1008F7568;
      BOOL v29 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
      if (v27)
      {
        if (v29)
        {
          sub_100494958(v27, (uint64_t)buf);
          int v30 = v44;
          __int16 v31 = *(_BYTE **)buf;
          sub_1003CF00C(v21, v39);
          int v32 = buf;
          if (v30 < 0) {
            int v32 = v31;
          }
          if (v40 >= 0) {
            int v33 = v39;
          }
          else {
            int v33 = (void **)v39[0];
          }
          *(_DWORD *)std::string __p = 136446978;
          *(void *)&__p[4] = v32;
          uint64_t v34 = "YES";
          __int16 v46 = 2082;
          if (a5 != -1) {
            uint64_t v34 = "NO";
          }
          *(void *)int v47 = v33;
          *(_WORD *)&v47[8] = 1024;
          *(_DWORD *)&v47[10] = a4;
          __int16 v48 = 2082;
          id v49 = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s is asking to Spatial Audio config for device %{public}s to %d Head Tracking %{public}s",  __p,  0x26u);
          if (v40 < 0) {
            operator delete(v39[0]);
          }
LABEL_55:
          if (v44 < 0) {
            operator delete(*(void **)buf);
          }
        }
      }

      else if (v29)
      {
        sub_1003CF00C(v21, buf);
        if (v44 >= 0) {
          __int128 v35 = buf;
        }
        else {
          __int128 v35 = *(_BYTE **)buf;
        }
        __int128 v36 = "YES";
        *(_DWORD *)std::string __p = 136446722;
        if (!a5) {
          __int128 v36 = "NO";
        }
        *(void *)&__p[4] = v35;
        __int16 v46 = 1024;
        *(_DWORD *)int v47 = a4;
        *(_WORD *)&v47[4] = 2082;
        *(void *)&v47[6] = v36;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Setting Spatial Audio config for device %{public}s to %d Head Tracking %{public}s",  __p,  0x1Cu);
        goto LABEL_55;
      }

      __int16 v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a3));
      if ([v37 compare:@"global"]) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = 0LL;
      }
      uint64_t v6 = sub_1003B3260(v26, v21, v38, a4, a5);

      return v6;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
    sub_100677CF4();
  }
  return 212LL;
}

void sub_1003BC310( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BC340(unint64_t a1, unint64_t a2, uint64_t a3, int *a4, int *a5)
{
  if (!a4) {
    return 3LL;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v12 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v12) {
    return 7LL;
  }
  uint64_t v13 = v12;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  uint64_t v14 = sub_1002E6BF0();
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t v15 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
  if (!v15)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  sub_1003B2F7C(v15, v13, a3, a4, a5);
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100895128);
  }
  uint64_t v16 = sub_100496954((void *)qword_1008D61A0, a1);
  uint64_t v17 = (os_log_s *)qword_1008F7568;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
  if (v16)
  {
    if (!(_DWORD)result) {
      return result;
    }
    sub_100494958(v16, (uint64_t)v30);
    int v18 = v31;
    uint64_t v19 = (void **)v30[0];
    sub_1003CF00C(v13, __p);
    uint64_t v20 = v30;
    if (v18 < 0) {
      uint64_t v20 = v19;
    }
    if (v29 >= 0) {
      uint64_t v21 = __p;
    }
    else {
      uint64_t v21 = (void **)__p[0];
    }
    int v22 = *a4;
    int v23 = *a5;
    *(_DWORD *)std::string buf = 136446978;
    if (v23) {
      char v24 = "YES";
    }
    else {
      char v24 = "NO";
    }
    int v33 = v20;
    __int16 v34 = 2082;
    *(void *)__int128 v35 = v21;
    *(_WORD *)&v35[8] = 1024;
    *(_DWORD *)&v35[10] = v22;
    __int16 v36 = 2082;
    __int16 v37 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s reading in Spatial Audio config for device %{public}s to %dHead Tracking %{public}s",  buf,  0x26u);
    if (v29 < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    if (!(_DWORD)result) {
      return result;
    }
    sub_1003CF00C(v13, v30);
    if (v31 >= 0) {
      uint64_t v25 = v30;
    }
    else {
      uint64_t v25 = (void **)v30[0];
    }
    int v26 = *a4;
    if (*a5) {
      uint64_t v27 = "YES";
    }
    else {
      uint64_t v27 = "NO";
    }
    *(_DWORD *)std::string buf = 136446722;
    int v33 = v25;
    __int16 v34 = 1024;
    *(_DWORD *)__int128 v35 = v26;
    *(_WORD *)&v35[4] = 2082;
    *(void *)&v35[6] = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Spatial Audio config for device %{public}s to %d %{public}s",  buf,  0x1Cu);
  }

  if (v31 < 0) {
    operator delete(v30[0]);
  }
  return 0LL;
}

void sub_1003BC6E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BC70C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v7 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v7) {
    return 7LL;
  }
  uint64_t v8 = v7;
  return 0LL;
}

uint64_t sub_1003BC7D8(unint64_t a1, unint64_t a2, int *a3)
{
  if (!a3) {
    return 3LL;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  if (!sub_1003B14E4((uint64_t)off_1008D5F38, a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  *a3 = sub_1003DF988(v9);
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100895128);
  }
  uint64_t v10 = sub_100496954((void *)qword_1008D61A0, a1);
  uint64_t v11 = (os_log_s *)qword_1008F7568;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if ((_DWORD)result)
    {
      sub_100494958(v10, (uint64_t)v23);
      int v12 = v26;
      uint64_t v13 = *(_BYTE **)v23;
      sub_1003CF00C(v9, __p);
      uint64_t v14 = v23;
      if (v12 < 0) {
        uint64_t v14 = v13;
      }
      if (v22 >= 0) {
        uint64_t v15 = __p;
      }
      else {
        uint64_t v15 = (void **)__p[0];
      }
      int v16 = *a3;
      *(_DWORD *)std::string buf = 136446722;
      *(void *)&uint8_t buf[4] = v14;
      if (v16 == 1) {
        uint64_t v17 = "Auto";
      }
      else {
        uint64_t v17 = "Manual";
      }
      __int16 v28 = 2082;
      char v29 = v15;
      __int16 v30 = 2080;
      char v31 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s reading in smart routing mode for device %{public}s to %s",  buf,  0x20u);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      if ((v26 & 0x80000000) == 0) {
        return 0LL;
      }
      int v18 = *(void **)v23;
LABEL_51:
      operator delete(v18);
      return 0LL;
    }
  }

  else if ((_DWORD)result)
  {
    sub_1003CF00C(v9, buf);
    if (v30 >= 0) {
      uint64_t v19 = buf;
    }
    else {
      uint64_t v19 = *(_BYTE **)buf;
    }
    uint64_t v20 = "Manual";
    if (*a3 == 1) {
      uint64_t v20 = "Auto";
    }
    *(_DWORD *)int v23 = 136446466;
    *(void *)&v23[4] = v19;
    __int16 v24 = 2080;
    uint64_t v25 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "smart routing mode mode for device %{public}s to %s",  v23,  0x16u);
    if ((SHIBYTE(v30) & 0x80000000) == 0) {
      return 0LL;
    }
    int v18 = *(void **)buf;
    goto LABEL_51;
  }

  return result;
}

void sub_1003BCB54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BCB78(unint64_t a1, unint64_t a2, int *a3)
{
  if (!a3) {
    return 3LL;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  if (!sub_1003B14E4((uint64_t)off_1008D5F38, a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  else {
    int v10 = 2;
  }
  *a3 = v10;
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100895128);
  }
  uint64_t v11 = sub_100496954((void *)qword_1008D61A0, a1);
  int v12 = (os_log_s *)qword_1008F7568;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    if ((_DWORD)result)
    {
      sub_100494958(v11, (uint64_t)v24);
      int v13 = v27;
      uint64_t v14 = *(_BYTE **)v24;
      sub_1003CF00C(v9, __p);
      uint64_t v15 = v24;
      if (v13 < 0) {
        uint64_t v15 = v14;
      }
      if (v23 >= 0) {
        int v16 = __p;
      }
      else {
        int v16 = (void **)__p[0];
      }
      int v17 = *a3;
      *(_DWORD *)std::string buf = 136446722;
      *(void *)&uint8_t buf[4] = v15;
      if (v17 == 1) {
        int v18 = "Supported";
      }
      else {
        int v18 = "NOT Supported";
      }
      __int16 v29 = 2082;
      __int16 v30 = v16;
      __int16 v31 = 2080;
      int v32 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s reading in smart routing support for device %{public}s to %s",  buf,  0x20u);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if ((v27 & 0x80000000) == 0) {
        return 0LL;
      }
      uint64_t v19 = *(void **)v24;
LABEL_54:
      operator delete(v19);
      return 0LL;
    }
  }

  else if ((_DWORD)result)
  {
    sub_1003CF00C(v9, buf);
    if (v31 >= 0) {
      uint64_t v20 = buf;
    }
    else {
      uint64_t v20 = *(_BYTE **)buf;
    }
    uint64_t v21 = "NOT Supported";
    if (*a3 == 1) {
      uint64_t v21 = "Supported";
    }
    *(_DWORD *)__int16 v24 = 136446466;
    *(void *)&v24[4] = v20;
    __int16 v25 = 2080;
    char v26 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "smart routing support for device %{public}s to %s",  v24,  0x16u);
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      return 0LL;
    }
    uint64_t v19 = *(void **)buf;
    goto LABEL_54;
  }

  return result;
}

void sub_1003BCF00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BCF24(unint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t result = 3LL;
  if (a2 - 4294901761u < 2 || !a2) {
    return result;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v9 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v9) {
    return 7LL;
  }
  uint64_t v10 = v9;
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_100895128);
  }
  uint64_t v11 = sub_100496954((void *)qword_1008D61A0, a1);
  if (v11)
  {
    uint64_t v12 = v11;
    int v13 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      sub_100494958(v12, (uint64_t)v20);
      int v14 = v21;
      uint64_t v15 = (void **)v20[0];
      sub_1003CF00C(v10, __p);
      int v16 = v20;
      if (v14 < 0) {
        int v16 = v15;
      }
      if (v19 >= 0) {
        int v17 = __p;
      }
      else {
        int v17 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      char v23 = v16;
      __int16 v24 = 2082;
      __int16 v25 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s is asking to set device state on peer source for device %{public}s",  buf,  0x16u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (v21 < 0) {
        operator delete(v20[0]);
      }
    }
  }

  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100895188);
  }
  return sub_10021ABE4((uint64_t)off_1008D60D8, v10, a3, a4, 0);
}

void sub_1003BD18C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BD1B0(uint64_t a1, unint64_t a2, int *a3)
{
  if (!a3) {
    return 3LL;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v7 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v7) {
    return 7LL;
  }
  uint64_t v8 = v7;
  if (!sub_1003E0230(v8, 64))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677F20(v8);
    }
    return 108LL;
  }

  uint64_t v9 = sub_1002E6BF0();
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 792LL))(v9, 1LL);
  uint64_t result = 0LL;
  if (v10) {
    int v11 = 1;
  }
  else {
    int v11 = 2;
  }
  *a3 = v11;
  return result;
}

uint64_t sub_1003BD2C0(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (!a3) {
    return 3LL;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v7 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v7) {
    return 7LL;
  }
  uint64_t v8 = v7;
  if (sub_1003D2B2C(v8, 41))
  {
    uint64_t v9 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v9 + 792LL))(v9, 11LL))
    {
      uint64_t result = 0LL;
      *a3 = 2;
      return result;
    }
  }

  if (!sub_1003E01EC(v8)
    || (uint64_t v10 = sub_1002E6BF0(), !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v10 + 792LL))(v10, 8LL)))
  {
    *a3 = 0;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100678010(v8);
    }
    return 108LL;
  }

  *a3 = 1;
  uint64_t result = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    sub_100677F98(v8);
    return 0LL;
  }

  return result;
}

uint64_t sub_1003BD428(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  if (!a3) {
    return 3LL;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v7 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v7) {
    return 7LL;
  }
  uint64_t v8 = v7;
  int v9 = sub_1003DFE34(v8);
  uint64_t v10 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    v11[0] = 67109120;
    v11[1] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Prox Card Status: Get Call Management: 0x%x",  (uint8_t *)v11,  8u);
  }

  if ((v9 & 0xF) == 1)
  {
    uint64_t result = 0LL;
    *a3 = 1;
    a3[3] = v9 >> 4;
    a3[4] = BYTE1(v9) & 0xF;
    a3[5] = (unsigned __int16)v9 >> 12;
    a3[6] = BYTE2(v9) & 0xF;
  }

  else
  {
    uint64_t result = 0LL;
    if ((v9 & 0xF) == 0)
    {
      *a3 = 0;
      a3[1] = v9 >> 4;
      a3[2] = BYTE1(v9) & 0xF;
      a3[3] = v9 >> 4;
      a3[4] = BYTE1(v9) & 0xF;
    }
  }

  return result;
}

uint64_t sub_1003BD5BC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v7 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v7) {
    return 7LL;
  }
  uint64_t v8 = v7;
  *a3 = sub_1003D1EC8(v7);
  if (*a3 == 0xFFFFFFFFLL)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100678088();
    }
    return 105LL;
  }

  else
  {
    char v9 = sub_1003DF544(v8);
    uint64_t v10 = (os_log_s *)qword_1008F7568;
    if ((v9 & 1) == 0 && os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *a3;
      int v14 = 134217984;
      uint64_t v15 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Prox Card Status: Capabilities not received yet, returning local value: %llx",  (uint8_t *)&v14,  0xCu);
      uint64_t v10 = (os_log_s *)qword_1008F7568;
    }

    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v11)
    {
      uint64_t v12 = *a3;
      int v14 = 134217984;
      uint64_t v15 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Prox Card Status: Get Features: 0x%llx",  (uint8_t *)&v14,  0xCu);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1003BD79C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v7 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v7) {
    return 7LL;
  }
  uint64_t v8 = v7;
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100895188);
  }
  return sub_1002225A0((uint64_t)off_1008D60D8, v8, a3);
}

uint64_t sub_1003BD878(uint64_t a1, unint64_t a2, int *a3)
{
  *a3 = 0;
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v7 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v7) {
    return 7LL;
  }
  uint64_t v8 = v7;
  if (sub_1003D0070(v7, 0x80000u) == 4)
  {
    if (sub_1003E0230(v8, 64))
    {
      uint64_t v9 = sub_1002E6BF0();
      int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 792LL))(v9, 3LL);
      uint64_t result = 0LL;
      *a3 = v10 << 31 >> 31;
      return result;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_1006780B4(v8);
    }
  }

  return 108LL;
}

uint64_t sub_1003BD978(uint64_t a1, unint64_t a2, int *a3)
{
  if (!a3) {
    return 3LL;
  }
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v7 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v7) {
    return 7LL;
  }
  uint64_t v8 = v7;
  if (!sub_1003E0230(v8, 64))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_10067812C(v8);
    }
    return 108LL;
  }

  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100895168);
  }
  if (sub_10042BCE4((uint64_t)off_1008D60A8))
  {
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_100895168);
    }
    int v9 = sub_10042BCE4((uint64_t)off_1008D60A8) == 1;
  }

  else
  {
    uint64_t v10 = sub_1002E6BF0();
    int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 792LL))(v10, 3LL);
  }

  int v11 = v9 << 31 >> 31;
  *a3 = v11;
  uint64_t v12 = (os_log_s *)qword_1008F7568;
  BOOL v13 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v13)
  {
    v14[0] = 67109120;
    v14[1] = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Get Spatial Spatial Profile BTAccessoryManagerGetDeviceSoundProfileAllowed:  %d",  (uint8_t *)v14,  8u);
    return 0LL;
  }

  return result;
}

uint64_t sub_1003BDB78(uint64_t a1, unint64_t a2, int a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v7 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v7) {
    return 7LL;
  }
  uint64_t v8 = v7;
  if (!sub_1003E0230(v8, 64))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_1006781A4(v8);
    }
    return 108LL;
  }

  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_100895148);
  }
  (*(void (**)(void))(*(void *)off_1008D60E8 + 352LL))();
  int v9 = (os_log_s *)qword_1008F7568;
  BOOL v10 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v10)
  {
    v11[0] = 67109120;
    v11[1] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Set Spatial Spatial Profile BTAccessoryManagerGetDeviceSoundProfileAllowed:  %d",  (uint8_t *)v11,  8u);
    return 0LL;
  }

  return result;
}

uint64_t sub_1003BDD24(uint64_t a1, unint64_t a2, int *a3)
{
  if (a2 - 4294901761u < 2 || a2 == 0) {
    return 3LL;
  }
  unsigned __int8 v14[5] = v3;
  v14[6] = v4;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v9 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v9) {
    return 7LL;
  }
  uint64_t v10 = v9;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    uint64_t v13 = 0LL;
    v14[0] = 0LL;
    sub_1003D55EC(v10, (_DWORD *)v14 + 1, v14, (_DWORD *)&v13 + 1, &v13);
    int v11 = 0;
    if ((HIDWORD(v13) - 8194) <= 0x22 && ((1LL << (BYTE4(v13) - 2)) & 0x47A877F9BLL) != 0)
    {
      else {
        int v11 = dword_1006C276C[HIDWORD(v13) - 8194];
      }
    }

    int v12 = v11 | (HIDWORD(v13) == 8214);
    if (v12)
    {
      if ((sub_1003D2B2C(v10, 15) & 1) != 0) {
        int v12 = -1;
      }
      else {
        int v12 = (int)(sub_1003D2B2C(v10, 1) << 31) >> 31;
      }
    }

    uint64_t result = 0LL;
    *a3 = v12;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  return result;
}

uint64_t sub_1003BDED0(unint64_t a1, unint64_t *a2, unsigned __int16 *a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    uint64_t v6 = sub_1002E6BF0();
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 792LL))(v6, 2LL) & 1) != 0)
    {
      if (qword_1008D61A8 != -1) {
        dispatch_once(&qword_1008D61A8, &stru_100895128);
      }
      uint64_t result = sub_100496954((void *)qword_1008D61A0, a1);
      if (result)
      {
        uint64_t v8 = result;
        if (qword_1008D60F0 != -1) {
          dispatch_once(&qword_1008D60F0, &stru_100895148);
        }
        uint64_t v9 = sub_1004A8ACC((uint64_t)off_1008D60E8, (uint64_t)a3);
        if (v9)
        {
          uint64_t v10 = v9;
          if (qword_1008D5F50 != -1) {
            dispatch_once(&qword_1008D5F50, &stru_1008950E8);
          }
          *a2 = sub_1003FEFA8((uint64_t)off_1008D5F48, a1, v10);
          int v11 = (os_log_s *)qword_1008F7568;
          uint64_t result = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            sub_100494958(v8, (uint64_t)v19);
            int v12 = v20;
            uint64_t v13 = (void **)v19[0];
            sub_1003CF00C(v10, __p);
            int v14 = v19;
            if (v12 < 0) {
              int v14 = v13;
            }
            if (v18 >= 0) {
              uint64_t v15 = __p;
            }
            else {
              uint64_t v15 = (void **)__p[0];
            }
            int v16 = *a3;
            *(_DWORD *)std::string buf = 136446722;
            char v22 = v14;
            __int16 v23 = 2082;
            __int16 v24 = v15;
            __int16 v25 = 1024;
            int v26 = v16;
            _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "BTAccessoryManagerGetAdaptiveLatencyJitterBufferLevel Session %{public}s for device %{public}s is returning jitterBufferLevel %u",  buf,  0x1Cu);
            if (v18 < 0) {
              operator delete(__p[0]);
            }
            if (v20 < 0) {
              operator delete(v19[0]);
            }
            return 0LL;
          }
        }

        else
        {
          *a2 = 4294901761LL;
          uint64_t result = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            sub_10067821C();
            return 0LL;
          }
        }
      }
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_100678248();
      }
      return 2LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  return result;
}

void sub_1003BE1A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BE1C4(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100678274();
    }
    return 7LL;
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v5 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_1006782A0();
    }
    return 7LL;
  }

  uint64_t v6 = v5;
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_100895148);
  }
  int v7 = sub_1004A89A4((uint64_t)off_1008D60E8, v6);
  *a3 = v7;
  uint64_t v8 = (os_log_s *)qword_1008F7568;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v9)
  {
    v11[0] = 67109120;
    v11[1] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "BTAccessoryManagerGetSensorStreamingFrequency - %u",  (uint8_t *)v11,  8u);
    return 0LL;
  }

  return result;
}

uint64_t sub_1003BE350(uint64_t a1, unint64_t a2, void *a3, _WORD *a4)
{
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_1006782CC();
    }
    return 7LL;
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v7 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_1006782F8();
    }
    return 7LL;
  }

  uint64_t v13 = 0LL;
  int v14 = 0LL;
  uint64_t v15 = 0LL;
  sub_1003D1DBC(v7, &v13);
  uint64_t v8 = v13;
  size_t v9 = v14 - v13;
  if (v14 != v13)
  {
    uint64_t v10 = malloc(v14 - v13);
    *a3 = v10;
    memcpy(v10, v8, v9);
  }

  *a4 = v9;
  int v11 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134217984;
    size_t v17 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "BTAccessoryManagerGetGyroInformation - Retrieved gyro information of size %zu",  buf,  0xCu);
    uint64_t v8 = v13;
  }

  if (v8)
  {
    int v14 = v8;
    operator delete(v8);
  }

  return 0LL;
}

uint64_t sub_1003BE4E8(uint64_t a1, unint64_t a2, int *a3)
{
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100678324();
    }
    return 7LL;
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v5 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100678350();
    }
    return 7LL;
  }

  unint64_t v6 = v5;
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_100895148);
  }
  int v7 = sub_1004B1588((uint64_t)off_1008D60E8, v6);
  *a3 = v7 << 31 >> 31;
  uint64_t v8 = (os_log_s *)qword_1008F7568;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v9)
  {
    v11[0] = 67109120;
    v11[1] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "BTAccessoryManagerGetWirelessSharingSpatial - %d",  (uint8_t *)v11,  8u);
    return 0LL;
  }

  return result;
}

uint64_t sub_1003BE678(uint64_t a1, uint64_t a2, void *a3, void *a4, unint64_t a5)
{
  uint64_t v8 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  BOOL v9 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEBUG)) {
    sub_1006783E4(a2, v9, v10, v11, v12, v13, v14, v15);
  }
  int v33 = 0LL;
  __int16 v34 = 0LL;
  uint64_t v35 = 0LL;
  if (qword_1008D60E0 != -1) {
    dispatch_once(&qword_1008D60E0, &stru_100895188);
  }
  sub_10021B6F0(a2, (uint64_t)&v33);
  for (int i = v33; i != v34; int i = (__int128 *)((char *)i + 24))
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v32 = 0LL;
    if (*((char *)i + 23) < 0)
    {
      sub_100024238(__p, *(void **)i, *((void *)i + 1));
    }

    else
    {
      __int128 v17 = *i;
      uint64_t v32 = *((void *)i + 2);
      *(_OWORD *)std::string __p = v17;
    }

    char v18 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEBUG))
    {
      if (v32 >= 0) {
        char v21 = __p;
      }
      else {
        char v21 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      __int16 v37 = v21;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "BTAccessoryManagerGetCaseSerialNumbersForAppleProductId retrieved serial number %{public}s",  buf,  0xCu);
    }

    if (v32 >= 0) {
      char v19 = __p;
    }
    else {
      char v19 = (void **)__p[0];
    }
    char v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v19));

    if (SHIBYTE(v32) < 0) {
      operator delete(__p[0]);
    }
  }

  id v30 = 0LL;
  char v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v8,  0LL,  &v30));
  id v23 = v30;
  if (v23)
  {
    __int16 v24 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_10067837C((uint64_t)v23, v24, v25);
    }
    uint64_t v26 = 1LL;
  }

  else if ((unint64_t)[v22 length] <= a5)
  {
    id v27 = v22;
    memcpy(a3, [v27 bytes], (size_t)objc_msgSend(v27, "length"));
    uint64_t v26 = 0LL;
    *a4 = [v27 length];
  }

  else
  {
    uint64_t v26 = 5LL;
  }

  __p[0] = &v33;
  sub_100024304((void ***)__p);

  return v26;
}

void sub_1003BE954( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21)
{
  std::string __p = &a21;
  sub_100024304((void ***)&__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1003BE9B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, unint64_t a6)
{
  uint64_t v8 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  BOOL v9 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEBUG)) {
    sub_1006784B4(a3, v9, v10, v11, v12, v13, v14, v15);
  }
  if ((_DWORD)a3)
  {
    uint64_t v16 = 0LL;
    uint64_t v17 = a3;
    do
    {
      uint64_t v38 = 0LL;
      std::string v39 = 0LL;
      uint64_t v40 = 0LL;
      if (qword_1008D60E0 != -1) {
        dispatch_once(&qword_1008D60E0, &stru_100895188);
      }
      sub_10021B6F0(*(unsigned __int16 *)(a2 + 4 * v16), (uint64_t)&v38);
      for (int i = v38; i != v39; int i = (__int128 *)((char *)i + 24))
      {
        __p[0] = 0LL;
        __p[1] = 0LL;
        uint64_t v37 = 0LL;
        if (*((char *)i + 23) < 0)
        {
          sub_100024238(__p, *(void **)i, *((void *)i + 1));
        }

        else
        {
          __int128 v19 = *i;
          uint64_t v37 = *((void *)i + 2);
          *(_OWORD *)std::string __p = v19;
        }

        char v20 = (os_log_s *)qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEBUG))
        {
          if (v37 >= 0) {
            id v23 = __p;
          }
          else {
            id v23 = (void **)__p[0];
          }
          int v24 = *(_DWORD *)(a2 + 4 * v16);
          *(_DWORD *)std::string buf = 136446467;
          __int16 v42 = v23;
          __int16 v43 = 1025;
          int v44 = v24;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "BTAccessoryManagerGetCaseSerialNumbersForAppleProductIds retrieved serial number %{public}s for productID %{private}u",  buf,  0x12u);
        }

        if (v37 >= 0) {
          char v21 = __p;
        }
        else {
          char v21 = (void **)__p[0];
        }
        char v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v21));

        if (SHIBYTE(v37) < 0) {
          operator delete(__p[0]);
        }
      }

      __p[0] = &v38;
      sub_100024304((void ***)__p);
      ++v16;
    }

    while (v16 != v17);
  }

  id v35 = 0LL;
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v8,  0LL,  &v35));
  id v26 = v35;
  if (v26)
  {
    id v27 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_10067844C((uint64_t)v26, v27, v28);
    }
    uint64_t v29 = 1LL;
  }

  else if ((unint64_t)[v25 length] <= a6)
  {
    id v30 = v25;
    memcpy(a4, [v30 bytes], (size_t)objc_msgSend(v30, "length"));
    uint64_t v29 = 0LL;
    *a5 = [v30 length];
  }

  else
  {
    uint64_t v29 = 5LL;
  }

  return v29;
}

void sub_1003BECBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, char a23)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003BED20(unint64_t a1, unint64_t a2, int *a3)
{
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_10067851C();
    }
    return 7LL;
  }

  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_1008950C8);
  }
  uint64_t v6 = sub_1003B14E4((uint64_t)off_1008D5F38, a1);
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100677AE0();
    }
    return 7LL;
  }

  uint64_t v7 = v6;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100678548();
    }
    return 7LL;
  }

  uint64_t v9 = sub_1003B35F8(v7, v8, a3);
  uint64_t v10 = (os_log_s *)qword_1008F7568;
  if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
  {
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100895188);
    }
    uint64_t v11 = sub_10021F608((uint64_t)off_1008D60D8, *(unsigned __int8 *)a3);
    int v13 = 136315138;
    uint64_t v14 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "BTAccessoryManagerGetPrimaryBudSide - Primary Bud Side: %s",  (uint8_t *)&v13,  0xCu);
  }

  return v9;
}

uint64_t sub_1003BEF20(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100678574();
    }
    return 7LL;
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  unint64_t v7 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_1006785A0();
    }
    return 7LL;
  }

  uint64_t v8 = v7;
  switch((int)a3)
  {
    case 0:
      int v9 = sub_1003DFE78(v7);
      goto LABEL_30;
    case 1:
      int v11 = sub_1003E0230(v7, 144);
      if (v11)
      {
        uint64_t v12 = sub_1002E6E9C();
        int v11 = sub_1002CD53C(v12, 0);
      }

      *a4 = v11;
      uint64_t v13 = qword_1008F7568;
      if (!os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_43;
      }
      int v14 = sub_1003E0230(v8, 144);
      uint64_t v15 = sub_1002E6E9C();
      int v45 = 67109376;
      BOOL v46 = v14;
      __int16 v47 = 1024;
      int v48 = sub_1002CD53C(v15, 0);
      uint64_t v16 = "Adaptive Volume: BT_ACCESSORY_HEADPHONE_FEATURE_ADAPTIVE_VOLUME_SUPPORT: accessorySupport %d sourceSupport %d";
      goto LABEL_25;
    case 2:
      int v17 = sub_1003E0230(v7, 176);
      if (v17)
      {
        uint64_t v18 = sub_1002E6E9C();
        int v17 = sub_1002CD53C(v18, 3u);
      }

      *a4 = v17;
      uint64_t v13 = qword_1008F7568;
      if (!os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_43;
      }
      int v19 = sub_1003E0230(v8, 176);
      uint64_t v20 = sub_1002E6E9C();
      int v45 = 67109376;
      BOOL v46 = v19;
      __int16 v47 = 1024;
      int v48 = sub_1002CD53C(v20, 3u);
      uint64_t v16 = "AutoANC: BT_ACCESSORY_HEADPHONE_FEATURE_AUTO_ANC_SUPPORT: accessorySupport %d sourceSupport %d";
      goto LABEL_25;
    case 3:
      int v9 = sub_1003DFF00(v7);
      goto LABEL_30;
    case 4:
      int v21 = sub_1003E0230(v7, 160);
      if (v21)
      {
        uint64_t v22 = sub_1002E6E9C();
        int v21 = sub_1002CD53C(v22, 2u);
      }

      *a4 = v21;
      uint64_t v13 = qword_1008F7568;
      if (!os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_43;
      }
      int v23 = sub_1003E0230(v8, 160);
      uint64_t v24 = sub_1002E6E9C();
      int v45 = 67109376;
      BOOL v46 = v23;
      __int16 v47 = 1024;
      int v48 = sub_1002CD53C(v24, 2u);
      uint64_t v16 = "Conversation Detect: BT_ACCESSORY_HEADPHONE_FEATURE_CONVERSATION_DETECT_SUPPORT: accessorySupport %d sourceSupport %d";
LABEL_25:
      uint64_t v25 = (os_log_s *)v13;
      goto LABEL_41;
    case 5:
      *a4 = *(unsigned __int8 *)(v7 + 989);
      goto LABEL_43;
    case 7:
      int v9 = sub_1003DFF44(v7);
LABEL_30:
      *a4 = v9;
      goto LABEL_43;
    case 8:
      int v33 = sub_1003E0350(v7, 6u);
      if (v33 == 3)
      {
        uint64_t v34 = sub_1002E6E9C();
        int v35 = sub_1002CD53C(v34, 4u);
      }

      else
      {
        int v35 = 0;
      }

      *a4 = v35;
      uint64_t v40 = qword_1008F7568;
      if (!os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_43;
      }
      uint64_t v41 = sub_1002E6E9C();
      int v45 = 67109376;
      BOOL v46 = v33 == 3;
      __int16 v47 = 1024;
      int v48 = sub_1002CD53C(v41, 4u);
      uint64_t v16 = "SSL: BT_ACCESSORY_HEADPHONE_FEATURE_SSL_SUPPORT: accessorySupport %d sourceSupport %d";
      uint64_t v25 = (os_log_s *)v40;
LABEL_41:
      uint32_t v39 = 14;
      goto LABEL_42;
    case 9:
      int v36 = sub_1003E5D28(v7);
      *a4 = v36;
      uint64_t v37 = qword_1008F7568;
      if (!os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_43;
      }
      int v45 = 67109120;
      BOOL v46 = v36;
      uint64_t v16 = "Hearing Aid: BT_ACCESSORY_HEADPHONE_FEATURE_HEARING_AID_ENROLLED Get: %d";
      goto LABEL_37;
    case 10:
      int v38 = sub_1003E5E08(v7);
      *a4 = v38;
      uint64_t v37 = qword_1008F7568;
      if (!os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_43;
      }
      int v45 = 67109120;
      BOOL v46 = v38;
      uint64_t v16 = "Hearing Aid: BT_ACCESSORY_HEADPHONE_FEATURE_HEARING_AID_ENABLED Get: %d";
LABEL_37:
      uint64_t v25 = (os_log_s *)v37;
      uint32_t v39 = 8;
LABEL_42:
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v45, v39);
LABEL_43:
      __int16 v42 = (os_log_s *)qword_1008F7568;
      BOOL v43 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0LL;
      if (v43)
      {
        int v44 = *a4;
        int v45 = 67109376;
        BOOL v46 = a3;
        __int16 v47 = 1024;
        int v48 = v44;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "BTAccessoryManagerGetHeadphoneFeatureValue - Type: %d, Value: %d",  (uint8_t *)&v45,  0xEu);
        uint64_t result = 0LL;
      }

      break;
    default:
      id v26 = (os_log_s *)qword_1008F7568;
      if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
        sub_1006785CC(a3, v26, v27, v28, v29, v30, v31, v32);
      }
      goto LABEL_43;
  }

  return result;
}

uint64_t sub_1003BF3F8(unint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_100678630();
    }
    return 7LL;
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008950E8);
  }
  uint64_t v8 = (unsigned __int8 *)sub_1003FEF18((uint64_t)off_1008D5F48, a2);
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
      sub_10067865C();
    }
    return 7LL;
  }

  uint64_t v9 = (uint64_t)v8;
  if ((_DWORD)a3 == 10)
  {
    int v11 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 67109120;
      int v24 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Hearing Aid: BT_ACCESSORY_HEADPHONE_FEATURE_HEARING_AID_ENROLLED Set: %d",  (uint8_t *)&v23,  8u);
    }

    uint64_t v12 = sub_1003E5D28(v9) | (a4 << 8);
  }

  else
  {
    if ((_DWORD)a3 != 9)
    {
      if ((_DWORD)a3 == 5)
      {
        sub_1003DF0A0(v8, a4 != 0);
      }

      else
      {
        int v14 = (os_log_s *)qword_1008F7568;
        if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_ERROR)) {
          sub_100678688(a3, v14, v15, v16, v17, v18, v19, v20);
        }
      }

      goto LABEL_23;
    }

    uint64_t v13 = (os_log_s *)qword_1008F7568;
    if (os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 67109120;
      int v24 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Hearing Aid: BT_ACCESSORY_HEADPHONE_FEATURE_HEARING_AID_ENROLLED Set: %d",  (uint8_t *)&v23,  8u);
    }

    uint64_t v12 = a4 | (sub_1003E5E08(v9) << 8);
  }

  sub_1003B94F0(a1, a2, 44LL, v12);
LABEL_23:
  int v21 = (os_log_s *)qword_1008F7568;
  BOOL v22 = os_log_type_enabled((os_log_t)qword_1008F7568, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v22)
  {
    int v23 = 67109120;
    int v24 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "BTAccessoryManagerSetHeadphoneFeatureValue - %d",  (uint8_t *)&v23,  8u);
    return 0LL;
  }

  return result;
}

void sub_1003BF66C(id a1)
{
  uint64_t v1 = operator new(0x118uLL);
  sub_1003ADFF0((uint64_t)v1);
  off_1008D5F38 = v1;
}

void sub_1003BF69C(_Unwind_Exception *a1)
{
}

void sub_1003BF6B0(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_1003BF6E0(_Unwind_Exception *a1)
{
}

void sub_1003BF6F4(id a1)
{
  uint64_t v1 = operator new(0x198uLL);
  sub_100534AB0();
  off_1008D67B0 = v1;
}

void sub_1003BF724(_Unwind_Exception *a1)
{
}

void sub_1003BF738(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_1003BF768(_Unwind_Exception *a1)
{
}

void sub_1003BF77C(id a1)
{
  uint64_t v1 = operator new(0x4A8uLL);
  sub_100499870();
  off_1008D60E8 = v1;
}

void sub_1003BF7AC(_Unwind_Exception *a1)
{
}

void sub_1003BF7C0(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_1003BF7F0(_Unwind_Exception *a1)
{
}

void sub_1003BF804(id a1)
{
  uint64_t v1 = operator new(0x2C8uLL);
  sub_100213DA8();
  off_1008D60D8 = v1;
}

void sub_1003BF834(_Unwind_Exception *a1)
{
}

void sub_1003BF848(id a1)
{
  uint64_t v1 = operator new(0x1C8uLL);
  sub_100352FF0();
  qword_1008D67D0 = (uint64_t)v1;
}

void sub_1003BF878(_Unwind_Exception *a1)
{
}

void sub_1003BF88C(uint64_t a1@<X1>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(float *)a1 = a3;
  *(void *)(a1 + 4) = 1752392040LL;
  *(_WORD *)(a1 + 12) = 2081;
  *(void *)(a1 + 14) = a2;
}

void sub_1003BF8AC(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, ...)
{
  *(void *)(v3 - 24) = a2;
  sub_1003CF00C(a1, (uint64_t *)va);
}

void sub_1003BF8BC(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
}

void *sub_1003BF8CC(void *a1)
{
  uint64_t v2 = sub_100213C20((uint64_t)a1, 20);
  sub_1002BDC0C(v2 + 256, 0, 1, 1007);
  *a1 = off_1008951D8;
  a1[32] = off_100895248;
  return a1;
}

void sub_1003BF920(_Unwind_Exception *a1)
{
}

uint64_t sub_1003BF938(uint64_t a1)
{
  return sub_100213D34(a1);
}

uint64_t sub_1003BF960(uint64_t a1)
{
  uint64_t v1 = a1 - 256;
  sub_1002BDD0C(a1);
  return sub_100213D34(v1);
}

void sub_1003BF984(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100213D34(a1);
  operator delete(v2);
}

void sub_1003BF9B0(uint64_t a1)
{
  uint64_t v1 = a1 - 256;
  sub_1002BDD0C(a1);
  uint64_t v2 = (void *)sub_100213D34(v1);
  operator delete(v2);
}

uint64_t sub_1003BF9D8(uint64_t a1)
{
  uint64_t v2 = sub_1002E6BF0();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 344LL))(v2);
  if ((_DWORD)result)
  {
    char v8 = 0;
    sub_100242CA4(&v8);
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    if (sub_1001D9964( (uint64_t)sub_1003BFB30,  (uint64_t)off_100895280,  0x3EFu,  0x3B01u,  (_BYTE *)(a1 + 500),  (uint64_t)&unk_1006C27A8))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_ERROR)) {
        sub_10067874C();
      }
    }

    else
    {
      uint64_t v4 = &unk_1008952A8;
      LOWORD(v5) = 3;
      uint64_t v6 = &unk_100895268;
      LOWORD(v7) = 1;
      byte_1008F0A08 = 1;
      word_1008F0A0A = 1;
      dword_1008F0A10 = *(unsigned __int8 *)(a1 + 500);
      if (!sub_1001E139C((uint64_t)&v4, (int *)(a1 + 496)))
      {
        sub_100242CD8(&v8);
        return 0LL;
      }

      if (os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_ERROR)) {
        sub_1006786EC();
      }
    }

    sub_100242CD8(&v8);
    return 1LL;
  }

  return result;
}

void sub_1003BFB1C(_Unwind_Exception *a1)
{
}

void sub_1003BFB30(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (qword_1008D9710 != -1) {
    dispatch_once(&qword_1008D9710, &stru_100895318);
  }
  sub_1003C0118((uint64_t)off_1008D9708, a1, a4);
}

uint64_t sub_1003BFB88(uint64_t a1)
{
  uint64_t v2 = sub_1002E6BF0();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 344LL))(v2);
  if ((_DWORD)result)
  {
    char v12 = 0;
    sub_100242CA4(&v12);
    sub_1001E1520(*(_DWORD *)(a1 + 496));
    if (sub_1001D9C30(*(unsigned __int8 *)(a1 + 500)) == 101)
    {
      uint64_t v4 = (os_log_s *)qword_1008F7738;
      if (os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_ERROR)) {
        sub_1006787AC(v4, v5, v6, v7, v8, v9, v10, v11);
      }
      sub_100242CD8(&v12);
      return 1LL;
    }

    else
    {
      sub_100242CD8(&v12);
      return 0LL;
    }
  }

  return result;
}

void sub_1003BFC28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1003BFC40(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_1003BFC5C(uint64_t a1, unint64_t a2)
{
  __int128 v21 = xmmword_1006C2820;
  if (a2)
  {
    if (sub_1003D2E50(a2, &v21, 4u))
    {
      uint64_t v18 = 0LL;
      uint64_t v19 = 0LL;
      uint64_t v20 = 0LL;
      uint64_t v5 = v18;
      uint64_t v4 = v19;
      if (v18 == v19) {
        goto LABEL_49;
      }
      uint64_t v6 = v18;
      while (1)
      {
        if (*(_BYTE *)v6 == 6 && *((_WORD *)v6 + 1) == 2)
        {
          uint64_t v8 = v6[1];
          BOOL v9 = *(_BYTE *)v8 == 3 && *(_DWORD *)(v8 + 8) == 3;
          if (v9 && *(_BYTE *)(v8 + 16) == 1) {
            break;
          }
        }

        v6 += 2;
        if (v6 == (void *)v19)
        {
          int v10 = -1;
          goto LABEL_27;
        }
      }

      int v10 = *(_DWORD *)(v8 + 24);
LABEL_27:
      while (v5 != v4)
      {
        *(_OWORD *)std::string __p = *v5;
        sub_10025EB84(__p);
        ++v5;
        uint64_t v4 = v19;
      }

      if (v10 == -1)
      {
LABEL_49:
        if (os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_ERROR)) {
          sub_100678844();
        }
        uint64_t v11 = 305LL;
      }

      else
      {
        uint64_t v13 = (os_log_s *)qword_1008F7738;
        if (os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_INFO))
        {
          sub_1003CF00C(a2, __p);
          int v14 = v17 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)std::string buf = 136446466;
          int v23 = v14;
          __int16 v24 = 1024;
          int v25 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Initiating outgoing Braille connection request to device %{public}s on rfcomm channel %d",  buf,  0x12u);
          if (v17 < 0) {
            operator delete(__p[0]);
          }
        }

        buf[0] = 0;
        sub_100242CA4(buf);
        LOWORD(__p[0]) = 0;
        if (sub_1001D9F7C( (uint64_t)sub_1003BFF88,  off_1008952F0,  a2 + 128,  v10,  0x3EFu,  0x3B01u,  __p,  (uint64_t)&unk_1006C27A8))
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_ERROR)) {
            sub_100678870();
          }
          uint64_t v11 = 305LL;
        }

        else
        {
          sub_10041127C(a1, a2, (__int16)__p[0]);
          uint64_t v11 = 0LL;
        }

        sub_100242CD8(buf);
      }

      if (v18)
      {
        uint64_t v19 = v18;
        operator delete(v18);
      }
    }

    else
    {
      uint64_t v12 = qword_1008F7738;
      if (os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_ERROR)) {
        sub_1006788D0(a2, v12);
      }
      return 305LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_ERROR)) {
      sub_100678818();
    }
    return 1LL;
  }

  return v11;
}

void sub_1003BFF48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003BFF88(unsigned int a1, uint64_t a2, uint64_t a3)
{
  __int16 v8 = 0;
  int v7 = 0;
  if (sub_1001DA694(a1, (uint64_t)&v7))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_ERROR)) {
      sub_100678958();
    }
  }

  else
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895388);
    }
    int v5 = v7;
    __int16 v6 = v8;
    uint64_t v4 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v5, 1);
    if (qword_1008D9710 != -1) {
      dispatch_once(&qword_1008D9710, &stru_100895318);
    }
    sub_1003C032C((uint64_t)off_1008D9708, (unint64_t)v4, 0LL, a3);
  }

uint64_t sub_1003C0080(void *a1, unint64_t a2)
{
  unsigned int v2 = sub_100411370(a1, a2);
  char v5 = 0;
  sub_100242CA4(&v5);
  uint64_t v3 = sub_1001DA5AC(v2, 1818);
  if ((_DWORD)v3)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_ERROR)) {
      sub_1006789B8();
    }
    uint64_t v3 = 1LL;
  }

  sub_100242CD8(&v5);
  return v3;
}

void sub_1003C0104( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1003C0118(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895388);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  __int16 v6 = sub_1003FFEB0(off_1008D5F48, (uint64_t)__p, 1);
  int v7 = (os_log_s *)qword_1008F7738;
  if (os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)v6, __p);
    __int16 v8 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v18 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Received incoming connection attempt from device %{public}s",  buf,  0xCu);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }

  int v9 = sub_100411064(a1, (uint64_t)v6);
  if ((v9 & 1) != 0)
  {
    int v10 = sub_1001DA26C((uint64_t)sub_1003BFF88, a3, v9);
    char v11 = v9 ^ 1;
    if (v10) {
      char v11 = 1;
    }
    if ((v11 & 1) == 0)
    {
      sub_10041127C(a1, (unint64_t)v6, a3);
      sub_100410910(a1, (uint64_t)v6, 1);
      return;
    }
  }

  else
  {
    uint64_t v12 = (os_log_s *)qword_1008F7738;
    if (os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Denying connection attempt",  (uint8_t *)__p,  2u);
    }

    int v10 = sub_1001DA26C((uint64_t)sub_1003BFF88, a3, v9);
  }

  int v13 = v10;
  if (v10)
  {
    int v14 = (os_log_s *)qword_1008F7738;
    if (os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_ERROR)) {
      sub_100678A18(v9, v13, v14);
    }
  }

void sub_1003C032C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((_DWORD)a4)
  {
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_1008953A8);
    }
    int v7 = sub_1004317E0((uint64_t)off_1008D60A8, a4, 20000);
    uint64_t v8 = a1;
    uint64_t v9 = a2;
    goto LABEL_7;
  }

  if ((sub_1002BDE54(a1 + 256, a2) & 1) != 0)
  {
    uint64_t v8 = a1;
    uint64_t v9 = a2;
    int v7 = 0;
LABEL_7:
    sub_100410A5C(v8, v9, v7);
    return;
  }

  uint64_t v10 = qword_1008F7738;
  if (os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_ERROR)) {
    sub_100678AB4(a2, v10);
  }
}

void sub_1003C0400(void *a1, int a2, int a3)
{
  uint64_t v5 = sub_10041146C(a1, a2);
  sub_100411718((uint64_t)a1, v5, 0, a3);
  sub_1002BE5EC((uint64_t)(a1 + 32), v5);
}

void sub_1003C044C(void *a1, int a2, uint64_t a3, int a4)
{
  unint64_t v7 = sub_10041146C(a1, a2);
  if (v7)
  {
    sub_1002BE8FC((uint64_t)(a1 + 32), v7, a3, a4, 0);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_ERROR))
  {
    sub_100678B38();
  }

void sub_1003C04CC(void *a1, int a2)
{
  unint64_t v3 = sub_10041146C(a1, a2);
  if (v3)
  {
    sub_1002BEAF8((uint64_t)(a1 + 32), v3);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_ERROR))
  {
    sub_100678B64();
  }

BOOL sub_1003C052C(void *a1, unint64_t a2, char *a3, unsigned __int16 a4)
{
  unsigned int v6 = sub_100411370(a1, a2);
  char v9 = 0;
  sub_100242CA4(&v9);
  int v7 = sub_1001D9F70((uint64_t)sub_1003C05EC, v6, a3, a4);
  sub_100242CD0(&v9);
  if (v7 && os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_ERROR)) {
    sub_100678B90();
  }
  sub_100242CD8(&v9);
  return v7 == 0;
}

void sub_1003C05D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1003C05EC(int a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 && os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_ERROR)) {
    sub_100678BF0();
  }
  if (qword_1008D9710 != -1) {
    dispatch_once(&qword_1008D9710, &stru_100895318);
  }
  sub_1003C04CC(off_1008D9708, a1);
}

BOOL sub_1003C067C(uint64_t a1, unint64_t a2, char *a3, unsigned __int16 a4)
{
  return sub_1003C052C((void *)(a1 - 256), a2, a3, a4);
}

uint64_t sub_1003C0684()
{
  return 2LL;
}

void sub_1003C068C(int a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7738;
  if (os_log_type_enabled((os_log_t)qword_1008F7738, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "BrailleProfile RFCOMM Release Reason: %{bluetooth:OI_STATUS}u",  (uint8_t *)v5,  8u);
  }

  if (qword_1008D9710 != -1) {
    dispatch_once(&qword_1008D9710, &stru_100895318);
  }
  sub_1003C0400(off_1008D9708, a1, a2);
}

void sub_1003C0774(int a1, uint64_t a2, int a3)
{
  if (qword_1008D9710 != -1) {
    dispatch_once(&qword_1008D9710, &stru_100895318);
  }
  sub_1003C044C(off_1008D9708, a1, a2, a3);
}

void sub_1003C07DC(id a1)
{
  uint64_t v1 = operator new(0x1F8uLL);
  sub_1003BF8CC(v1);
  off_1008D9708 = v1;
}

void sub_1003C080C(_Unwind_Exception *a1)
{
}

void sub_1003C0820(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_1003C0850(_Unwind_Exception *a1)
{
}

void sub_1003C0864(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_1003C0894(_Unwind_Exception *a1)
{
}

uint64_t sub_1003C08A8(uint64_t a1)
{
  *(void *)sub_10041BFD4(a1, "BrailleService", 0x2000) = &off_1008953D8;
  if (qword_1008D9710 != -1) {
    dispatch_once(&qword_1008D9710, &stru_1008954C8);
  }
  sub_10041C264(a1, (uint64_t)off_1008D9708);
  return a1;
}

void sub_1003C091C(_Unwind_Exception *a1)
{
}

void sub_1003C0938(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10041C0C4(a1);
  operator delete(v1);
}

uint64_t sub_1003C0954(uint64_t a1, uint64_t a2)
{
  if (qword_1008D9710 != -1) {
    dispatch_once(&qword_1008D9710, &stru_1008954C8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(*((void *)off_1008D9708 + 32) + 16LL))( (char *)off_1008D9708 + 256,  a2);
}

uint64_t sub_1003C09B0(uint64_t a1, uint64_t a2)
{
  __int128 v8 = xmmword_1006C2820;
  if (sub_1003D518C(a2))
  {
    if (sub_1003D2E50(a2, &v8, 4u)) {
      int v4 = 4;
    }
    else {
      int v4 = 1;
    }
  }

  else
  {
    int v4 = 1;
  }

  unsigned int v5 = *(_DWORD *)(a1 + 32);
  uint64_t v9 = 0LL;
  sub_1000B0400((uint64_t)&v9);
  *(void *)&__int128 v7 = (int)v9;
  *((void *)&v7 + 1) = SWORD2(v9);
  return sub_1003D1FC4(a2, v5, v4, &v7, 0);
}

void sub_1003C0A54(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 0;
}

void sub_1003C0A5C(id a1)
{
  uint64_t v1 = operator new(0x1F8uLL);
  sub_1003BF934(v1);
  off_1008D9708 = v1;
}

void sub_1003C0A8C(_Unwind_Exception *a1)
{
}

uint64_t sub_1003C0AA0(unint64_t a1)
{
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008954E8);
  }
  if (!sub_100496954((void *)qword_1008D61A0, a1)) {
    return 7LL;
  }
  unsigned int v2 = (void (***)(void))sub_1002E6E00();
  (**v2)(v2);
  return 0LL;
}

uint64_t sub_1003C0B14(unint64_t a1)
{
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008954E8);
  }
  if (!sub_100496954((void *)qword_1008D61A0, a1)) {
    return 7LL;
  }
  uint64_t v2 = sub_1002E6E00();
  sub_1004FB5E8(v2, 0xE74u, 1);
  return 0LL;
}

void sub_1003C0B88(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_1003C0BB8(_Unwind_Exception *a1)
{
}

void sub_1003C0BCC(uint64_t a1)
{
  uint64_t v2 = sub_100404FE8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1003C1BCC;
  v3[3] = &unk_10087EB20;
  void v3[4] = a1;
  sub_100405384(v2, v3);
}

void sub_1003C0C2C(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1003C1C1C;
  v5[3] = &unk_10087EB68;
  v5[4] = a1;
  int v6 = a2;
  sub_100405384(v4, v5);
}

void sub_1003C0C94(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100404FE8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1003C1C70;
  v5[3] = &unk_10087EB68;
  v5[4] = a1;
  int v6 = a2;
  sub_100405384(v4, v5);
}

void *sub_1003C0CFC(uint64_t a1)
{
  uint64_t result = (void *)sub_100213C20(a1, 25);
  *uint64_t result = &off_100895530;
  result[32] = &off_1008955A0;
  return result;
}

uint64_t sub_1003C0D28()
{
  return 0LL;
}

_BYTE *sub_1003C0D30(uint64_t a1, unint64_t a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008955B8);
  }
  uint64_t v4 = sub_10040007C(off_1008D5F48, a2, 1);
  if (sub_1003D518C((uint64_t)v4))
  {
    else {
      int v5 = 0;
    }
    uint64_t v9 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = v5 ? "Accepting" : "Rejecting";
      sub_1003CF00C((uint64_t)v4, __p);
      char v11 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446466;
      int v23 = v10;
      __int16 v24 = 2082;
      int v25 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "ATT %{public}s incoming connection attempt from device %{public}s",  buf,  0x16u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    LOBYTE(__p[0]) = 0;
    sub_100242CA4(__p);
    uint64_t v12 = sub_1000B20D4(a2, v5);
    sub_100242CD0(__p);
    if ((_DWORD)v12)
    {
      int v13 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
        sub_100678C50(v12, v13, v14, v15, v16, v17, v18, v19);
      }
    }

    else if (v5)
    {
      sub_100410910(a1, (uint64_t)v4, 1);
      *(_BYTE *)(a1 + 264) = 0;
    }

    return sub_100242CD8(__p);
  }

  else
  {
    int v6 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)v4, __p);
      __int128 v7 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      int v23 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Delaying incoming ATT connection attempt for device %{public}s as SDP is missing",  buf,  0xCu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    if (qword_1008D9600 != -1) {
      dispatch_once(&qword_1008D9600, &stru_1008955D8);
    }
    return (_BYTE *)sub_10041AA14(qword_1008D95F8, (uint64_t)v4, a1 + 256, 1, 2);
  }

void sub_1003C0FE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

_BYTE *sub_1003C0FFC(uint64_t a1, unsigned __int8 *a2)
{
  else {
    int v4 = 0;
  }
  int v5 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = v4 ? "Accepting" : "Rejecting";
    sub_1003CF00C((uint64_t)a2, __p);
    __int128 v7 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v20 = v6;
    __int16 v21 = 2082;
    BOOL v22 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "QueryComplete, %{public}s ATT incoming connection attempt from  device %{public}s",  buf,  0x16u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }

  LOBYTE(__p[0]) = 0;
  sub_100242CA4(__p);
  uint64_t v8 = sub_1000B20D4( ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133],  v4);
  sub_100242CD0(__p);
  if ((_DWORD)v8)
  {
    uint64_t v9 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100678C50(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }

  else if (v4)
  {
    sub_100410910(a1, (uint64_t)a2, 1);
    *(_BYTE *)(a1 + 264) = 0;
  }

  return sub_100242CD8(__p);
}

void sub_1003C11C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

_BYTE *sub_1003C11DC(uint64_t a1, unsigned __int8 *a2)
{
  return sub_1003C0FFC(a1 - 256, a2);
}

void sub_1003C11E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008955B8);
  }
  int v6 = sub_10040007C(off_1008D5F48, a2, 0);
  __int128 v7 = (os_log_s *)qword_1008F75B0;
  if (v6)
  {
    uint64_t v8 = (uint64_t)v6;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT)
      && ((sub_1003CF00C(v8, __p), v21 >= 0) ? (uint64_t v9 = __p) : (uint64_t v9 = (void **)__p[0]),
          *(_DWORD *)std::string buf = 136446466,
          int v23 = v9,
          __int16 v24 = 1024,
          int v25 = a3,
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Att connection to device confirmed %{public}s with result %{bluetooth:OI_STATUS}u",  buf,  0x12u),  v21 < 0))
    {
      operator delete(__p[0]);
      if ((_DWORD)a3) {
        goto LABEL_10;
      }
    }

    else if ((_DWORD)a3)
    {
LABEL_10:
      if (qword_1008D60B0 != -1) {
        dispatch_once(&qword_1008D60B0, &stru_1008955F8);
      }
      int v10 = sub_1004317E0((uint64_t)off_1008D60A8, a3, 20000);
      uint64_t v11 = a1;
      uint64_t v12 = v8;
      goto LABEL_17;
    }

    uint64_t v11 = a1;
    uint64_t v12 = v8;
    int v10 = 0;
LABEL_17:
    sub_100410A5C(v11, v12, v10);
    return;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
    sub_100678CB4(v7, v13, v14, v15, v16, v17, v18, v19);
  }
}

void sub_1003C139C(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_1008955B8);
  }
  int v6 = sub_10040007C(off_1008D5F48, a2, 1);
  __int128 v7 = (os_log_s *)qword_1008F75B0;
  if (v6)
  {
    uint64_t v8 = (uint64_t)v6;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(v8, __p);
      if (v18 >= 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v20 = v9;
      __int16 v21 = 1024;
      int v22 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Att disconnection to devices %{public}s with reason %{bluetooth:OI_STATUS}u",  buf,  0x12u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_100411718(a1, v8, 0, a3);
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
  {
    sub_100678CB4(v7, v10, v11, v12, v13, v14, v15, v16);
  }

uint64_t sub_1003C1508(uint64_t a1, uint64_t a2, char a3)
{
  int v6 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    if (v10 >= 0) {
      __int128 v7 = __p;
    }
    else {
      __int128 v7 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Fast Connect GATT Report Connection attempt for %{public}s",  buf,  0xCu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  return sub_100410910(a1, a2, a3);
}

uint64_t sub_1003C1600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 67109120;
    v9[1] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Fast Connect GATT Setup Complete result %d",  (uint8_t *)v9,  8u);
  }

  if ((_DWORD)a3)
  {
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_1008955F8);
    }
    int v7 = sub_1004317E0((uint64_t)off_1008D60A8, a3, 20000);
  }

  else
  {
    int v7 = 0;
  }

  return sub_100410A5C(a1, a2, v7);
}

uint64_t sub_1003C1708()
{
  v0 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Register GATT Profile", buf, 2u);
  }

  char v2 = 0;
  sub_100242CA4(&v2);
  sub_1000B2C84((__n128 *)off_100895508);
  sub_100242CD8(&v2);
  return 0LL;
}

void sub_1003C1790( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1003C17A4()
{
  v0 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Deregister GATT profile", buf, 2u);
  }

  char v2 = 0;
  sub_100242CA4(&v2);
  sub_1000B2CE0();
  sub_100242CD8(&v2);
  return 0LL;
}

void sub_1003C1824( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1003C1838(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = (os_log_s *)qword_1008F75B0;
  if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D01A0((uint64_t)a2, (uint64_t)__p);
    int v5 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "GATT disconnecting device %s", buf, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }

  char v9 = 0;
  sub_100242CA4(&v9);
  uint64_t v6 = sub_1000B29F0(((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133]);
  sub_100242CD0(&v9);
  if ((_DWORD)v6)
  {
    int v7 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C((uint64_t)a2, __p);
      sub_100678CE4((char *)__p, buf, v6, v7);
    }

    uint64_t v6 = 1LL;
    sub_100411718(a1, (uint64_t)a2, 1, 122);
  }

  sub_100242CD8(&v9);
  return v6;
}

void sub_1003C19C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_1003C19E4(uint64_t a1, unsigned __int8 *a2)
{
  *(_BYTE *)(a1 + 264) = 1;
  if (qword_1008D9278 != -1) {
    dispatch_once(&qword_1008D9278, &stru_100895618);
  }
  if (!sub_100413664(qword_1008D9270, a2))
  {
    uint64_t v12 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003D01A0((uint64_t)a2, (uint64_t)__p);
      uint64_t v13 = v23 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      int v25 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Making classic GATT outgoing connection to device %s",  buf,  0xCu);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }

    LOBYTE(__p[0]) = 0;
    sub_100242CA4(__p);
    uint64_t v11 = sub_1000B27F8(((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133]);
    if ((_DWORD)v11)
    {
      uint64_t v14 = (os_log_s *)qword_1008F75B0;
      if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
        sub_100678D94(v11, v14, v15, v16, v17, v18, v19, v20);
      }
      uint64_t v11 = 1LL;
    }

    sub_100242CD8(__p);
  }

  else
  {
LABEL_5:
    unint64_t v3 = (os_log_s *)qword_1008F75B0;
    if (os_log_type_enabled((os_log_t)qword_1008F75B0, OS_LOG_TYPE_ERROR)) {
      sub_100678D64(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 305LL;
  }

  return v11;
}

void sub_1003C1BB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

_BYTE *sub_1003C1BCC(uint64_t a1)
{
  if (qword_1008D9720 != -1) {
    dispatch_once(&qword_1008D9720, &stru_100895638);
  }
  return sub_1003C0D30(qword_1008D9718, *(void *)(a1 + 32));
}

void sub_1003C1C1C(uint64_t a1)
{
  if (qword_1008D9720 != -1) {
    dispatch_once(&qword_1008D9720, &stru_100895638);
  }
  sub_1003C11E4(qword_1008D9718, *(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_1003C1C70(uint64_t a1)
{
  if (qword_1008D9720 != -1) {
    dispatch_once(&qword_1008D9720, &stru_100895638);
  }
  sub_1003C139C(qword_1008D9718, *(void *)(a1 + 32), *(_DWORD *)(a1 + 40));
}

void sub_1003C1CC8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100213D34(a1);
  operator delete(v1);
}

uint64_t sub_1003C1CDC()
{
  return 12LL;
}

uint64_t sub_1003C1CE4()
{
  return 1LL;
}

uint64_t sub_1003C1CEC(uint64_t a1)
{
  return sub_100213D34(a1 - 256);
}

void sub_1003C1CF4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100213D34(a1 - 256);
  operator delete(v1);
}

void sub_1003C1D0C(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_1003C1D3C(_Unwind_Exception *a1)
{
}

void sub_1003C1D50(id a1)
{
  uint64_t v1 = operator new(0x58uLL);
  sub_10041A094(v1);
  qword_1008D95F8 = (uint64_t)v1;
}

void sub_1003C1D80(_Unwind_Exception *a1)
{
}

void sub_1003C1D94(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_1003C1DC4(_Unwind_Exception *a1)
{
}

void sub_1003C1DD8(id a1)
{
  uint64_t v1 = operator new(0x50uLL);
  sub_100411DB0((uint64_t)v1);
  qword_1008D9270 = (uint64_t)v1;
}

void sub_1003C1E08(_Unwind_Exception *a1)
{
}

void sub_1003C1E1C(id a1)
{
  uint64_t v1 = operator new(0x110uLL);
  sub_100213C20((uint64_t)v1, 25);
  void *v1 = &off_100895530;
  v1[32] = &off_1008955A0;
  qword_1008D9718 = (uint64_t)v1;
}

void sub_1003C1E64(_Unwind_Exception *a1)
{
}

uint64_t sub_1003C1E78(int *a1, char *a2, size_t a3)
{
  int v11 = *a1;
  __int16 v12 = *((_WORD *)a1 + 2);
  __source = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  sub_1003FE1B4((unsigned __int8 *)&v11, &__source);
  if ((SHIBYTE(v10) & 0x80000000) == 0)
  {
    if (HIBYTE(v10) >= a3) {
      return 5LL;
    }
    p_source = (const char *)&__source;
LABEL_8:
    strlcpy(a2, p_source, a3);
    uint64_t v6 = 0LL;
    uint64_t result = 0LL;
    if ((SHIBYTE(v10) & 0x80000000) == 0) {
      return result;
    }
    goto LABEL_9;
  }

  if (v9 + 1 <= a3)
  {
    p_source = __source;
    goto LABEL_8;
  }

  uint64_t v6 = 5LL;
LABEL_9:
  operator delete(__source);
  return v6;
}

void sub_1003C1F2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003C1F48(unsigned __int8 *a1, uint64_t a2)
{
  __int16 v5 = 0;
  int v4 = 0;
  uint64_t result = 0LL;
  *(_DWORD *)a2 = v4;
  *(_WORD *)(a2 + 4) = v5;
  return result;
}

uint64_t sub_1003C1FA0(unint64_t a1, int *a2, unint64_t *a3)
{
  if (!a2) {
    return 8LL;
  }
  int v12 = *a2;
  __int16 v13 = *((_WORD *)a2 + 2);
  if (!(_BYTE)v12)
  {
    uint64_t v9 = 1LL;
    while (v9 != 6)
    {
      if (*((unsigned __int8 *)&v12 + v9++))
      {
        return 8LL;
      }
    }

    return 8LL;
  }

uint64_t sub_1003C20B0(unint64_t a1, uint64_t a2, unint64_t *a3)
{
  __int16 v5 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", a2);
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100895678);
  }
  uint64_t v6 = sub_1005CC198((uint64_t)off_1008D5F28, v5, 0);
  if (v6) {
    BOOL v7 = (v6 & 0xFF000000000000LL) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    goto LABEL_16;
  }
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  uint64_t v8 = sub_10040007C(off_1008D5F48, v6, 0);
  if (v8)
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895658);
    }
    unint64_t v9 = sub_1003FEFA8((uint64_t)off_1008D5F48, a1, (uint64_t)v8);
    *a3 = v9;
    if (v9) {
      uint64_t v10 = 0LL;
    }
    else {
      uint64_t v10 = 7LL;
    }
  }

  else
  {
LABEL_16:
    uint64_t v10 = 8LL;
  }

  return v10;
}

void sub_1003C21E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003C21F8(unint64_t a1, char *a2, size_t a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v6 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  *(void *)uu = 0LL;
  uint64_t v19 = 0LL;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100895678);
  }
  sub_1005CCD30((uint64_t)off_1008D5F28, a1, (uint64_t)uu);
  memset(&__p, 0, sizeof(__p));
  if (v6)
  {
    sub_1003FE1B4((unsigned __int8 *)(v6 + 128), &v16);
    std::string __p = v16;
  }

  else
  {
    if (uuid_is_null(uu))
    {
      uint64_t v8 = 7LL;
      goto LABEL_18;
    }

    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100895678);
    }
    uint64_t v10 = off_1008D5F28;
    uint64_t v11 = sub_100241F94(uu);
    int v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    uint64_t v13 = sub_1005CC198((uint64_t)v10, v12, 0);
    id v14 = sub_1005BFB9C(v13);
    id v15 = objc_claimAutoreleasedReturnValue(v14);
    std::string::assign(&__p, (const std::string::value_type *)[v15 UTF8String]);
  }

  if ((char)__p.__r_.__value_.__s.__size_ < 0)
  {
    if (__p.__r_.__value_.__l.__size_ + 1 <= a3)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_17;
    }

void sub_1003C23F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003C2438(unint64_t a1, int *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895658);
    }
    unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
    *(void *)uu = 0LL;
    uint64_t v9 = 0LL;
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100895678);
    }
    sub_1005CCD30((uint64_t)off_1008D5F28, a1, (uint64_t)uu);
    if (v4)
    {
      *a2 = sub_1003D0268(v4);
      int v5 = sub_1003D062C(v4);
      switch(v5)
      {
        case 4:
          int v6 = 19;
          break;
        case 2:
          int v6 = 20;
          break;
        case 1:
          int v6 = 22;
          break;
        default:
          return 0LL;
      }
    }

    else
    {
      if (uuid_is_null(uu)) {
        return 7LL;
      }
      int v6 = 48;
    }

    uint64_t result = 0LL;
    *a2 = v6;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  return result;
}

uint64_t sub_1003C25E0(unint64_t a1, _DWORD *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v4) {
    return 7LL;
  }
  uint64_t v5 = v4;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    else {
      return 408LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

uint64_t sub_1003C26C8(unint64_t a1, char *a2, size_t a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v6 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (v6)
  {
    sub_1003D032C(v6, (uint64_t)&v10);
  }

  else
  {
    *(void *)uu = 0LL;
    uint64_t v15 = 0LL;
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100895678);
    }
    sub_1005CCD30((uint64_t)off_1008D5F28, a1, (uint64_t)uu);
    if (uuid_is_null(uu)) {
      return 7LL;
    }
    sub_10002418C(&v10, "Peripheral");
  }

  *(_OWORD *)__source = v10;
  uint64_t v13 = v11;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if (HIBYTE(v11) >= a3) {
      return 5LL;
    }
    if (!HIBYTE(v11)) {
      return 408LL;
    }
    BOOL v7 = (const char *)__source;
    goto LABEL_24;
  }

  if (__source[1] + 1 > (char *)a3)
  {
    uint64_t v8 = 5LL;
LABEL_29:
    operator delete(__source[0]);
    return v8;
  }

  if (!__source[1])
  {
    uint64_t v8 = 408LL;
    goto LABEL_29;
  }

  BOOL v7 = __source[0];
LABEL_24:
  strlcpy(a2, v7, a3);
  uint64_t v8 = 0LL;
  if (SHIBYTE(v13) < 0) {
    goto LABEL_29;
  }
  return v8;
}

void sub_1003C28C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

uint64_t sub_1003C28F0(unint64_t a1, char *a2, size_t a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  __source[0] = 0LL;
  __source[1] = 0LL;
  uint64_t v17 = 0LL;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v6 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (v6)
  {
    sub_1003D0100(v6, (uint64_t)&v14);
    *(_OWORD *)__source = v14;
    uint64_t v17 = v15;
  }

  else
  {
    *(void *)uu = 0LL;
    uint64_t v19 = 0LL;
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100895678);
    }
    sub_1005CCD30((uint64_t)off_1008D5F28, a1, (uint64_t)uu);
    if (uuid_is_null(uu)) {
      return 7LL;
    }
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100895678);
    }
    uint64_t v11 = off_1008D5F28;
    int v12 = sub_100241F94(uu);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    sub_1005CC0D4((uint64_t)v11, v13, (uint64_t)&v14);
    *(_OWORD *)__source = v14;
    uint64_t v17 = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
  }

  char v7 = HIBYTE(v17);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17) >= a3) {
      return 5LL;
    }
    if (HIBYTE(v17))
    {
      uint64_t v8 = (const char *)__source;
      goto LABEL_24;
    }

void sub_1003C2B48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003C2B80(unint64_t a1, char *a2, size_t a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  __source[0] = 0LL;
  __source[1] = 0LL;
  uint64_t v17 = 0LL;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v6 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (v6)
  {
    sub_1003D01A0(v6, (uint64_t)&v14);
    *(_OWORD *)__source = v14;
    uint64_t v17 = v15;
  }

  else
  {
    *(void *)uu = 0LL;
    uint64_t v19 = 0LL;
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100895678);
    }
    sub_1005CCD30((uint64_t)off_1008D5F28, a1, (uint64_t)uu);
    if (uuid_is_null(uu)) {
      return 7LL;
    }
    if (qword_1008D5F30 != -1) {
      dispatch_once(&qword_1008D5F30, &stru_100895678);
    }
    uint64_t v11 = off_1008D5F28;
    int v12 = sub_100241F94(uu);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    sub_1005CC0D4((uint64_t)v11, v13, (uint64_t)&v14);
    *(_OWORD *)__source = v14;
    uint64_t v17 = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
  }

  char v7 = HIBYTE(v17);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17) >= a3) {
      return 5LL;
    }
    if (HIBYTE(v17))
    {
      uint64_t v8 = (const char *)__source;
      goto LABEL_24;
    }

void sub_1003C2DD8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003C2E10(unint64_t a1, char *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v4) {
    return 408LL;
  }
  uint64_t v5 = v4;
  unint64_t v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D0100(v5, (uint64_t)&__p);
    char v7 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v11 = v7;
    __int16 v12 = 2080;
    uint64_t v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Set user-defined name for %s to %s", buf, 0x16u);
  }

  sub_10002418C(&__p, a2);
  sub_1003D17B0(v5, &__p, 1);
  return 0LL;
}

void sub_1003C2F70( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003C2F94(unint64_t a1, int *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v4) {
    return 7LL;
  }
  uint64_t v5 = v4;
  int v6 = sub_1003D79C4(v4);
  int v7 = sub_1003D8940(v5);
  uint64_t result = 0LL;
  if (v7) {
    int v9 = v6 | 0x10;
  }
  else {
    int v9 = v6;
  }
  *a2 = v9;
  return result;
}

uint64_t sub_1003C3068(unint64_t a1, unsigned int a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v4) {
    return 7LL;
  }
  uint64_t v5 = v4;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  return sub_100401A48((uint64_t)off_1008D5F48, v5, 0LL, (a2 >> 1) & 1, (a2 & 4) != 0, (a2 & 8) != 0, (a2 >> 4) & 1);
}

uint64_t sub_1003C3124(unint64_t a1, uint64_t a2, void *a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v6 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v6) {
    return 7LL;
  }
  uint64_t v13 = 0LL;
  __int128 v14 = 0LL;
  uint64_t v15 = 0LL;
  sub_1003D8E14(v6, &v13);
  int v7 = v13;
  uint64_t v8 = v14;
  if (v13 == v14)
  {
    uint64_t v9 = 0LL;
  }

  else
  {
    LODWORD(v9) = 0;
    __int128 v10 = v13;
    do
    {
      int v11 = *v10++;
      *(_DWORD *)(a2 + 4LL * v9) = v11;
      uint64_t v9 = (v9 + 1);
    }

    while (v10 != v8);
  }

  *a3 = v9;
  if (v7)
  {
    __int128 v14 = v7;
    operator delete(v7);
  }

  return 0LL;
}

uint64_t sub_1003C31F0(unint64_t a1, int a2, int a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v6 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v6) {
    return 7LL;
  }
  int v7 = (void *)v6;
  std::string __p = 0LL;
  int v25 = 0LL;
  unint64_t v26 = 0LL;
  sub_1003D8E14(v6, &__p);
  uint64_t v8 = (char *)__p;
  int v25 = (char *)__p;
  if (!a3)
  {
    if ((unint64_t)__p < v26)
    {
      *(_DWORD *)std::string __p = -2;
      uint64_t v9 = v8 + 4;
      goto LABEL_28;
    }

    unint64_t v19 = (uint64_t)(v26 - (void)__p) >> 1;
    if (v19 <= 1) {
      unint64_t v19 = 1LL;
    }
    else {
      unint64_t v20 = v19;
    }
    uint64_t v13 = (char *)sub_10024E33C((uint64_t)&v26, v20);
    __int128 v14 = (char *)__p;
    __int16 v21 = v25;
    uint64_t v17 = &v13[4 * v22];
    *(_DWORD *)uint64_t v13 = -2;
    uint64_t v9 = v13 + 4;
    while (v21 != v14)
    {
      int v23 = *((_DWORD *)v21 - 1);
      v21 -= 4;
      *((_DWORD *)v13 - 1) = v23;
      v13 -= 4;
    }

void sub_1003C3398( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003C33B8(unint64_t a1, int *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = (unsigned __int8 *)sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  *(void *)uu = 0LL;
  uint64_t v11 = 0LL;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100895678);
  }
  sub_1005CCD30((uint64_t)off_1008D5F28, a1, (uint64_t)uu);
  if (v4)
  {
    int v5 = sub_1003CF350(v4);
    uint64_t result = 0LL;
    *a2 = v5 << 31 >> 31;
  }

  else if (uuid_is_null(uu))
  {
    return 7LL;
  }

  else
  {
    if (qword_1008D5F20 != -1) {
      dispatch_once(&qword_1008D5F20, &stru_100895698);
    }
    uint64_t v7 = qword_1008D5F18;
    uint64_t v8 = sub_100241F94(uu);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    *a2 = sub_10061C0F8(v7, v9) << 31 >> 31;

    return 0LL;
  }

  return result;
}

void sub_1003C3520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003C3538(unint64_t a1, _DWORD *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  uint64_t result = 0LL;
  *a2 = 0;
  return result;
}

uint64_t sub_1003C35A4(unint64_t a1, int *a2)
{
  *a2 = 0;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v4) {
    return 7LL;
  }
  uint64_t v5 = v4;
  if (qword_1008D60C0 != -1) {
    dispatch_once(&qword_1008D60C0, &stru_1008956B8);
  }
  int v6 = sub_1003EE52C((uint64_t)off_1008D60B8, v5);
  uint64_t result = 0LL;
  *a2 = v6 << 31 >> 31;
  return result;
}

uint64_t sub_1003C3658(unint64_t a1, int *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v4) {
    return 7LL;
  }
  int v5 = sub_1003D0670(v4);
  uint64_t result = 0LL;
  *a2 = v5 << 31 >> 31;
  return result;
}

uint64_t sub_1003C36D0(unint64_t a1, int *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v4) {
    return 7LL;
  }
  uint64_t v5 = v4;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    int v6 = sub_1003D2B2C(v5, 12);
    uint64_t result = 0LL;
    *a2 = v6 << 31 >> 31;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  return result;
}

uint64_t sub_1003C37BC(unint64_t a1, int *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v4) {
    return 7LL;
  }
  uint64_t v5 = v4;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    int v6 = sub_1003D2B2C(v5, 22);
    uint64_t result = 0LL;
    *a2 = v6 << 31 >> 31;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  return result;
}

uint64_t sub_1003C38A8(unint64_t a1, _DWORD *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v4) {
    return 7LL;
  }
  int v5 = sub_1003D5718(v4);
  uint64_t result = 0LL;
  *a2 = v5;
  return result;
}

uint64_t sub_1003C391C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_1008956D8);
  }
  return sub_100422854((uint64_t *)off_1008D60C8, a1, a2, a3, a4);
}

uint64_t sub_1003C398C(uint64_t a1, uint64_t a2)
{
  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_1008956D8);
  }
  return sub_100422948((uint64_t)off_1008D60C8, a1, a2);
}

uint64_t sub_1003C39E4(unint64_t a1, int a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v4) {
    return 7LL;
  }
  uint64_t v5 = v4;
  memset(&v28, 0, sizeof(v28));
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008956F8);
  }
  uint64_t v6 = sub_100496954((void *)qword_1008D61A0, a1);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_100494958(v7, (uint64_t)&v27);
      int size = (char)v27.__r_.__value_.__s.__size_;
      std::string::size_type v10 = v27.__r_.__value_.__r.__words[0];
      sub_1003D01A0(v5, (uint64_t)__p);
      uint64_t v11 = &v27;
      if (size < 0) {
        uint64_t v11 = (std::string *)v10;
      }
      if (v26 >= 0) {
        unint64_t v12 = __p;
      }
      else {
        unint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v30 = v11;
      __int16 v31 = 2082;
      uint64_t v32 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s is asking to connect device %{public}s",  buf,  0x16u);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v8 = (os_log_s *)qword_1008F7578;
    }

    if (os_signpost_enabled(v8))
    {
      sub_100494958(v7, (uint64_t)&v27);
      int v13 = (char)v27.__r_.__value_.__s.__size_;
      std::string::size_type v14 = v27.__r_.__value_.__r.__words[0];
      sub_1003D01A0(v5, (uint64_t)__p);
      uint64_t v15 = &v27;
      if (v13 < 0) {
        uint64_t v15 = (std::string *)v14;
      }
      if (v26 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v30 = v15;
      __int16 v31 = 2082;
      uint64_t v32 = v16;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "BTSignPost",  "Session %{public}s is asking to connect device %{public}s",  buf,  0x16u);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }

    if (sub_100487C4C())
    {
      CTGreenTeaOsLogHandle = (os_log_s *)getCTGreenTeaOsLogHandle(qword_1008F7720);
      int v18 = CTGreenTeaOsLogHandle;
      if (CTGreenTeaOsLogHandle)
      {
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_100494958(v7, (uint64_t)&v27);
          int v19 = (char)v27.__r_.__value_.__s.__size_;
          std::string::size_type v20 = v27.__r_.__value_.__r.__words[0];
          sub_1003D01A0(v5, (uint64_t)__p);
          __int16 v21 = &v27;
          if (v19 < 0) {
            __int16 v21 = (std::string *)v20;
          }
          if (v26 >= 0) {
            uint64_t v22 = __p;
          }
          else {
            uint64_t v22 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v30 = v21;
          __int16 v31 = 2082;
          uint64_t v32 = v22;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Session %{public}s is asking to connect device %{public}s",  buf,  0x16u);
          if (v26 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    sub_100494958(v7, (uint64_t)&v27);
    std::string v28 = v27;
  }

  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895718);
  }
  sub_100409094((uint64_t)off_1008D5EF8, 0LL, 0);
  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_1008956D8);
  }
  uint64_t v23 = sub_100424360((int64x2_t *)off_1008D60C8, v5, a2, &v28, 2LL);
  return v23;
}

void sub_1003C3DE4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003C3E30(unint64_t a1, int a2, int a3, _OWORD *a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v8) {
    return 7LL;
  }
  uint64_t v9 = v8;
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008956F8);
  }
  uint64_t v10 = sub_100496954((void *)qword_1008D61A0, a1);
  if (v10)
  {
    uint64_t v11 = v10;
    unint64_t v12 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_100494958(v11, (uint64_t)&v39);
      int size = (char)v39.__r_.__value_.__s.__size_;
      std::string::size_type v14 = v39.__r_.__value_.__r.__words[0];
      sub_1003D0100(v9, (uint64_t)__p);
      uint64_t v15 = &v39;
      if (size < 0) {
        uint64_t v15 = (std::string *)v14;
      }
      if (v38 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v41 = v15;
      __int16 v42 = 2082;
      BOOL v43 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "BTDeviceConnectServicesWithParameters %{public}s is asking to connect device %{public}s with params",  buf,  0x16u);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
    }

    if (sub_100487C4C())
    {
      CTGreenTeaOsLogHandle = (os_log_s *)getCTGreenTeaOsLogHandle(qword_1008F7720);
      int v18 = CTGreenTeaOsLogHandle;
      if (CTGreenTeaOsLogHandle)
      {
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_100494958(v11, (uint64_t)&v39);
          int v19 = (char)v39.__r_.__value_.__s.__size_;
          std::string::size_type v20 = v39.__r_.__value_.__r.__words[0];
          sub_1003D0100(v9, (uint64_t)__p);
          __int16 v21 = &v39;
          if (v19 < 0) {
            __int16 v21 = (std::string *)v20;
          }
          if (v38 >= 0) {
            uint64_t v22 = __p;
          }
          else {
            uint64_t v22 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v41 = v21;
          __int16 v42 = 2082;
          BOOL v43 = v22;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Session %{public}s is asking to connect device %{public}s with params",  buf,  0x16u);
          if (v38 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }

  if (a3 <= 15)
  {
    switch(a3)
    {
      case 0:
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
          sub_100678E50();
        }
        sub_1003DEF78(v9, 1);
        if (sub_1003D0670(v9))
        {
          uint64_t v23 = sub_1004050C8();
          v36[0] = _NSConcreteStackBlock;
          v36[1] = 3221225472LL;
          v36[2] = sub_1003C4754;
          v36[3] = &unk_10087EB20;
          v36[4] = v9;
          sub_100405384(v23, v36);
        }

        goto LABEL_80;
      case 1:
        std::string v28 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v39.__r_.__value_.__l.__data_) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "BTDeviceConnectServicesWithParameters BTDeviceConnectGuestMode",  (uint8_t *)&v39,  2u);
        }

        sub_1003DEE98(v9, 1);
        *(_DWORD *)(v9 + 972) = 1;
        goto LABEL_80;
      case 2:
        uint64_t v29 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v39.__r_.__value_.__l.__data_) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "BTDeviceConnectServicesWithParameters BTDeviceConnectGuestModeWithLinkey",  (uint8_t *)&v39,  2u);
        }

        memset(&v39, 0, 20);
        sub_10052525C((uint64_t)&v39, a4, 5u);
        if (qword_1008D67B8 != -1) {
          dispatch_once(&qword_1008D67B8, &stru_100895738);
        }
        uint64_t v24 = sub_10053584C((uint64_t)off_1008D67B0, (unsigned __int8 *)v9, (__n128 *)&v39, 0);
        sub_1003DEE98(v9, 1);
        *(_DWORD *)(v9 + 972) = 2;
        if ((_DWORD)v24 && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
          sub_100678E24();
        }
        goto LABEL_73;
      case 4:
        char v26 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v39.__r_.__value_.__l.__data_) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "BTDeviceConnectServicesWithParameters BTDeviceConnectGuestModeNotInContactsWithLinkkey",  (uint8_t *)&v39,  2u);
        }

        memset(&v39, 0, 20);
        sub_10052525C((uint64_t)&v39, a4, 5u);
        if (qword_1008D67B8 != -1) {
          dispatch_once(&qword_1008D67B8, &stru_100895738);
        }
        uint64_t v24 = sub_10053584C((uint64_t)off_1008D67B0, (unsigned __int8 *)v9, (__n128 *)&v39, 0);
        sub_1003DEE98(v9, 1);
        sub_1003DEF08(v9, 1);
        *(_DWORD *)(v9 + 972) = 2;
        if ((_DWORD)v24 && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
          sub_100678E24();
        }
        nullsub_63(&v39, v27);
        a2 = 524312;
        if (!(_DWORD)v24) {
          goto LABEL_80;
        }
        break;
      case 8:
        __int16 v31 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v39.__r_.__value_.__l.__data_) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "BTDeviceConnectServicesWithParameters BTDeviceConnectNormalModeNoOwnership",  (uint8_t *)&v39,  2u);
        }

        sub_1003DF238(v9, 0);
        goto LABEL_80;
      default:
        goto LABEL_86;
    }

    return v24;
  }

  if (a3 != 16)
  {
    if (a3 == 32)
    {
      uint64_t v34 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v39.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "BTDeviceConnectServicesWithParameters, BTDeviceConnectTiPiMode",  (uint8_t *)&v39,  2u);
      }

      if (qword_1008D60E0 != -1) {
        dispatch_once(&qword_1008D60E0, &stru_100895778);
      }
      sub_10021B4BC((uint64_t)off_1008D60D8, v9, 1);
    }

    else
    {
      if (a3 != 64)
      {
LABEL_86:
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
          sub_100678DF8();
        }
        return 2LL;
      }

      int v25 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v39.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "BTDeviceConnectServicesWithParameters, BTDeviceConnectGuestPairingMode",  (uint8_t *)&v39,  2u);
      }

      if (_os_feature_enabled_impl("BluetoothFeatures", "GuestPairing"))
      {
        sub_1003DF0A0((unsigned __int8 *)v9, 1);
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
      {
        sub_100678E7C();
      }
    }

void sub_1003C46EC( _Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
}

void sub_1003C4754(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100895758);
  }
  sub_1003747BC((os_unfair_lock_s *)qword_1008D6450, *(void *)(a1 + 32));
}

uint64_t sub_1003C47A4(unint64_t a1)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v2 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v2) {
    return 7LL;
  }
  uint64_t v3 = v2;
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008956F8);
  }
  uint64_t v4 = sub_100496954((void *)qword_1008D61A0, a1);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_100494958(v5, (uint64_t)v24);
      int v7 = v25;
      unint64_t v8 = (void **)v24[0];
      sub_1003D01A0(v3, (uint64_t)__p);
      uint64_t v9 = v24;
      if (v7 < 0) {
        uint64_t v9 = v8;
      }
      if (v23 >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v27 = v9;
      __int16 v28 = 2082;
      uint64_t v29 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s is asking to disconnect physical link for device %{public}s",  buf,  0x16u);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v25 < 0) {
        operator delete(v24[0]);
      }
      uint64_t v6 = (os_log_s *)qword_1008F7578;
    }

    if (os_signpost_enabled(v6))
    {
      sub_100494958(v5, (uint64_t)v24);
      int v11 = v25;
      unint64_t v12 = (void **)v24[0];
      sub_1003D01A0(v3, (uint64_t)__p);
      int v13 = v24;
      if (v11 < 0) {
        int v13 = v12;
      }
      if (v23 >= 0) {
        std::string::size_type v14 = __p;
      }
      else {
        std::string::size_type v14 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v27 = v13;
      __int16 v28 = 2082;
      uint64_t v29 = v14;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "BTSignPost",  "Session %{public}s is asking to disconnect physical link for device %{public}s",  buf,  0x16u);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v25 < 0) {
        operator delete(v24[0]);
      }
    }

    if (sub_100487C4C())
    {
      CTGreenTeaOsLogHandle = (os_log_s *)getCTGreenTeaOsLogHandle(qword_1008F7720);
      uint64_t v16 = CTGreenTeaOsLogHandle;
      if (CTGreenTeaOsLogHandle)
      {
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_100494958(v5, (uint64_t)v24);
          int v17 = v25;
          int v18 = (void **)v24[0];
          sub_1003D01A0(v3, (uint64_t)__p);
          int v19 = v24;
          if (v17 < 0) {
            int v19 = v18;
          }
          if (v23 >= 0) {
            std::string::size_type v20 = __p;
          }
          else {
            std::string::size_type v20 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          uint64_t v27 = v19;
          __int16 v28 = 2082;
          uint64_t v29 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "Session %{public}s is asking to disconnect physical link for device %{public}s",  buf,  0x16u);
          if (v23 < 0) {
            operator delete(__p[0]);
          }
          if (v25 < 0) {
            operator delete(v24[0]);
          }
        }
      }
    }
  }

  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_1008956D8);
  }
  sub_100424304((uint64_t)off_1008D60C8, v3, 1);
  return 0LL;
}

void sub_1003C4B24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003C4B50(unint64_t a1, int a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v4) {
    return 7LL;
  }
  uint64_t v5 = v4;
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008956F8);
  }
  uint64_t v6 = sub_100496954((void *)qword_1008D61A0, a1);
  if (v6)
  {
    uint64_t v7 = v6;
    unint64_t v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_100494958(v7, (uint64_t)v22);
      int v9 = v23;
      uint64_t v10 = (void **)v22[0];
      sub_1003D01A0(v5, (uint64_t)__p);
      int v11 = v22;
      if (v9 < 0) {
        int v11 = v10;
      }
      if (v21 >= 0) {
        unint64_t v12 = __p;
      }
      else {
        unint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      char v25 = v11;
      __int16 v26 = 2082;
      uint64_t v27 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s is asking to disconnect device %{public}s",  buf,  0x16u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }

    if (sub_100487C4C())
    {
      CTGreenTeaOsLogHandle = (os_log_s *)getCTGreenTeaOsLogHandle(qword_1008F7720);
      std::string::size_type v14 = CTGreenTeaOsLogHandle;
      if (CTGreenTeaOsLogHandle)
      {
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_100494958(v7, (uint64_t)v22);
          int v15 = v23;
          uint64_t v16 = (void **)v22[0];
          sub_1003D01A0(v5, (uint64_t)__p);
          int v17 = v22;
          if (v15 < 0) {
            int v17 = v16;
          }
          if (v21 >= 0) {
            int v18 = __p;
          }
          else {
            int v18 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          char v25 = v17;
          __int16 v26 = 2082;
          uint64_t v27 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "Session %{public}s is asking to disconnect device %{public}s",  buf,  0x16u);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
          if (v23 < 0) {
            operator delete(v22[0]);
          }
        }
      }
    }
  }

  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_1008956D8);
  }
  return sub_1004287C4((int64x2_t *)off_1008D60C8, v5, a2);
}

void sub_1003C4E0C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003C4E34(unint64_t a1, _DWORD *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  *(void *)uu = 0LL;
  uint64_t v7 = 0LL;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100895678);
  }
  sub_1005CCD30((uint64_t)off_1008D5F28, a1, (uint64_t)uu);
  *a2 = 0;
  if (v4) {
    *a2 |= sub_1003D994C(v4);
  }
  if (!uuid_is_null(uu))
  {
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100895798);
    }
  }

  if (v4 || !uuid_is_null(uu)) {
    return 0LL;
  }
  else {
    return 7LL;
  }
}

uint64_t sub_1003C4F98(unint64_t a1, _DWORD *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  *(void *)uu = 0LL;
  uint64_t v7 = 0LL;
  if (qword_1008D5F30 != -1) {
    dispatch_once(&qword_1008D5F30, &stru_100895678);
  }
  sub_1005CCD30((uint64_t)off_1008D5F28, a1, (uint64_t)uu);
  *a2 = 0;
  if (v4)
  {
    if (qword_1008D60D0 != -1) {
      dispatch_once(&qword_1008D60D0, &stru_1008956D8);
    }
    *a2 |= sub_1004272C4((uint64_t)off_1008D60C8, v4);
  }

  if (uuid_is_null(uu))
  {
    if (v4) {
      return 0LL;
    }
  }

  else
  {
    *a2 |= 0x8000u;
    if (v4) {
      return 0LL;
    }
  }

  if (uuid_is_null(uu)) {
    return 7LL;
  }
  return 0LL;
}

uint64_t sub_1003C50F8(unint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  uint64_t v9 = v8;
  if (a1 - 4294901761u >= 2 && !v8) {
    return 7LL;
  }
  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_1008956D8);
  }
  return sub_100429488((uint64_t)off_1008D60C8, v9, a2, a3, a4);
}

uint64_t sub_1003C51D8(unint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  uint64_t v9 = v8;
  if (a1 - 4294901761u >= 2 && !v8) {
    return 7LL;
  }
  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_1008956D8);
  }
  return sub_100429574((uint64_t)off_1008D60C8, v9, a2, a3, a4);
}

uint64_t sub_1003C52B8(unint64_t a1)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v2 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v2) {
    return 7LL;
  }
  sub_1003D1F0C(v2, 0);
  return 0LL;
}

uint64_t sub_1003C5324(unint64_t a1, int a2, char *a3, size_t a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  uint64_t v9 = v8;
  if (a1 - 4294901761u >= 2 && !v8) {
    return 7LL;
  }
  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_1008956D8);
  }
  return sub_10042966C((uint64_t)off_1008D60C8, v9, a2, a3, a4);
}

uint64_t sub_1003C5404(unint64_t a1, void *a2, size_t a3, int *a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v8) {
    return 7LL;
  }
  int v9 = sub_1003E39DC(v8, a2, a3);
  uint64_t result = 0LL;
  *a4 = v9 << 31 >> 31;
  return result;
}

uint64_t sub_1003C5494(unint64_t a1, void *a2, size_t a3, uint64_t a4, void *a5, unsigned int a6)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v12 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v12) {
    return 7LL;
  }
  return 1LL;
}

uint64_t sub_1003C5548(unint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v10 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v10) {
    return 7LL;
  }
  uint64_t v11 = v10;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    uint64_t result = 1LL;
    if (a2 && a3 && a4)
    {
      if (a5) {
        return !sub_1003D55EC(v11, a2, a3, a4, a5);
      }
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  return result;
}

uint64_t sub_1003C5664(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v6 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (qword_1008D9730 != -1) {
    dispatch_once(&qword_1008D9730, &stru_1008957B8);
  }
  (*(void (**)(void *, unint64_t, uint64_t, uint64_t))(*(void *)off_1008D9728 + 240LL))( off_1008D9728,  v6,  a2,  a3);
  return 0LL;
}

uint64_t sub_1003C5718(unint64_t a1, int *a2, uint64_t a3, int a4)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  int v9 = (os_log_s *)qword_1008F7578;
  if (a4 && (uint64_t v10 = v8) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003D0100(v10, (uint64_t)__p);
      uint64_t v11 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v16 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Sending linkkey to device %{public}s ",  buf,  0xCu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }

    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100895778);
    }
    return sub_10023B73C((uint64_t)off_1008D60D8, v10, a2, a3);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100678EA8(a4 != 0, v9);
    }
    return 7LL;
  }

uint64_t sub_1003C58B4(unint64_t a1, _DWORD *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (v4)
  {
    unint64_t v5 = v4;
    uint64_t result = 0LL;
    *a2 = -*(char *)(v5 + 960);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100678F34();
    }
    return 7LL;
  }

  return result;
}

uint64_t sub_1003C5954(unint64_t a1, int *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v4) {
    return 7LL;
  }
  uint64_t v5 = v4;
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    int v6 = sub_1003D2B2C(v5, 27);
    uint64_t result = 0LL;
    *a2 = v6 << 31 >> 31;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  return result;
}

uint64_t sub_1003C5A40(unint64_t a1, _DWORD *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (v4)
  {
    unint64_t v5 = v4;
    uint64_t result = 0LL;
    *a2 = -*(char *)(v5 + 976);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100678F60();
    }
    return 7LL;
  }

  return result;
}

uint64_t sub_1003C5AE0(unint64_t a1, _DWORD *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v4) {
    return 7LL;
  }
  int v5 = sub_1003D5D14(v4);
  uint64_t result = 0LL;
  *a2 = v5;
  return result;
}

uint64_t sub_1003C5B54(unint64_t a1, _DWORD *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v4) {
    return 7LL;
  }
  int v5 = sub_1003D5D98(v4);
  uint64_t result = 0LL;
  *a2 = v5;
  return result;
}

uint64_t sub_1003C5BC8(unint64_t a1, int a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (v4)
  {
    uint64_t v5 = v4;
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100895778);
    }
    return sub_10022B1FC((uint64_t)off_1008D60D8, v5, a2 != 0);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100678F8C();
    }
    return 7LL;
  }

uint64_t sub_1003C5C9C(unint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = sub_1002E6E9C();
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v7 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (v7)
  {
    uint64_t v8 = v7;
    unint64_t v9 = *(unsigned int *)(v7 + 128) | ((unint64_t)*(unsigned __int16 *)(v7 + 132) << 32);
    uint64_t v10 = sub_1002E6E9C();
    uint64_t v11 = sub_1003D0268(v8);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, BOOL, BOOL, uint64_t, uint64_t))(*(void *)v10 + 72LL))( v10,  v9,  v11,  a2,  a3 != 0,  a3 != 0,  1LL,  1LL);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100678FB8();
    }
    return 7LL;
  }

uint64_t sub_1003C5DB8(unint64_t a1, int *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v4) {
    return 7LL;
  }
  int v5 = sub_1003E5998(v4);
  uint64_t result = 0LL;
  *a2 = v5 << 31 >> 31;
  return result;
}

uint64_t sub_1003C5E30(unint64_t a1, _DWORD *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895658);
    }
    unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
    if (v4)
    {
      int v5 = sub_1003D062C(v4);
      uint64_t result = 0LL;
      *a2 = v5;
    }

    else
    {
      return 7LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

  return result;
}

uint64_t sub_1003C5F0C(unint64_t a1, int a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895658);
    }
    unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
    if (v4)
    {
      unint64_t v5 = v4;
      sub_1003D05BC(v4, a2);
      uint64_t v6 = sub_1004050C8();
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      _DWORD v11[2] = sub_1003C6060;
      void v11[3] = &unk_10087EB68;
      void v11[4] = v5;
      int v12 = a2;
      sub_100405384(v6, v11);
      uint64_t v7 = sub_100405058();
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      _DWORD v9[2] = sub_1003C60B4;
      void v9[3] = &unk_10087EB68;
      void v9[4] = v5;
      int v10 = a2;
      sub_100405384(v7, v9);
      return 0LL;
    }

    else
    {
      return 7LL;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100677CF4();
    }
    return 212LL;
  }

void sub_1003C6060(uint64_t a1)
{
  if (qword_1008D6458 != -1) {
    dispatch_once(&qword_1008D6458, &stru_100895758);
  }
  sub_100379D98((void *)qword_1008D6450, *(void *)(a1 + 32), *(_DWORD *)(a1 + 40));
}

void sub_1003C60B4(uint64_t a1)
{
  if (qword_1008D9030 != -1) {
    dispatch_once(&qword_1008D9030, &stru_1008957D8);
  }
  sub_1004751A4((uint64_t)off_1008D9028, *(void *)(a1 + 32), *(_DWORD *)(a1 + 40));
}

uint64_t sub_1003C6108(unint64_t a1, _DWORD *a2)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895658);
  }
  unint64_t v4 = sub_1003FEF18((uint64_t)off_1008D5F48, a1);
  if (!v4) {
    return 7LL;
  }
  unsigned int v5 = sub_1003D8484(v4);
  uint64_t result = 0LL;
  *a2 = ((v5 >> 1) & 1) - 1;
  return result;
}

void sub_1003C6184(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_1003C61B4(_Unwind_Exception *a1)
{
}

void sub_1003C61C8(id a1)
{
  uint64_t v1 = operator new(0x128uLL);
  sub_1005C69F8();
  off_1008D5F28 = v1;
}

void sub_1003C61F8(_Unwind_Exception *a1)
{
}

void sub_1003C620C(id a1)
{
  uint64_t v1 = operator new(0xEB0uLL);
  sub_10061991C();
  qword_1008D5F18 = (uint64_t)v1;
}

void sub_1003C623C(_Unwind_Exception *a1)
{
}

void sub_1003C6250(id a1)
{
  uint64_t v1 = operator new(0xF8uLL);
  sub_1003EC784((uint64_t)v1);
  off_1008D60B8 = v1;
}

void sub_1003C6280(_Unwind_Exception *a1)
{
}

void sub_1003C6294(id a1)
{
  uint64_t v1 = operator new(0x2C0uLL);
  sub_1004219F0();
  off_1008D60C8 = v1;
}

void sub_1003C62C4(_Unwind_Exception *a1)
{
}

void sub_1003C62D8(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_1003C6308(_Unwind_Exception *a1)
{
}

void sub_1003C631C(id a1)
{
  uint64_t v1 = operator new(0x2B0uLL);
  sub_10040749C((uint64_t)v1);
  off_1008D5EF8 = v1;
}

void sub_1003C634C(_Unwind_Exception *a1)
{
}

void sub_1003C6360(id a1)
{
  uint64_t v1 = operator new(0x198uLL);
  sub_100534AB0();
  off_1008D67B0 = v1;
}

void sub_1003C6390(_Unwind_Exception *a1)
{
}

void sub_1003C63A4(id a1)
{
  uint64_t v1 = operator new(0x310uLL);
  sub_10036BB90();
  qword_1008D6450 = (uint64_t)v1;
}

void sub_1003C63D4(_Unwind_Exception *a1)
{
}

void sub_1003C63E8(id a1)
{
  uint64_t v1 = operator new(0x2C8uLL);
  sub_100213DA8();
  off_1008D60D8 = v1;
}

void sub_1003C6418(_Unwind_Exception *a1)
{
}

void sub_1003C642C(id a1)
{
  uint64_t v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_1003C645C(_Unwind_Exception *a1)
{
}

void sub_1003C6470(id a1)
{
  uint64_t v1 = operator new(0x148uLL);
  sub_100493598();
  off_1008D9728 = v1;
}

void sub_1003C64A0(_Unwind_Exception *a1)
{
}

void sub_1003C64B4(id a1)
{
  uint64_t v1 = operator new(0x350uLL);
  sub_100461C70();
  off_1008D9028 = v1;
}

void sub_1003C64E4(_Unwind_Exception *a1)
{
}

uint64_t sub_1003C64F8( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a2(a3, a4, a5, a6);
}

uint64_t sub_1003C6510( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 a7, uint64_t a8)
{
  uint64_t v9 = a6;
  __int16 v10 = a7;
  return a2(a3, a4, a5, &v9, a8);
}

uint64_t sub_1003C657C(unint64_t a1, unint64_t *a2)
{
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008957F8);
  }
  uint64_t v4 = sub_100496954((void *)qword_1008D61A0, a1);
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  unint64_t v5 = sub_1004065D4(off_1008D5EF8, a1);
  *a2 = v5;
  if (v5) {
    return 0LL;
  }
  uint64_t v7 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
  {
    if (v4) {
      sub_10067902C(v4, (uint64_t)v8, v7);
    }
    else {
      sub_100678FE4(v8, v7);
    }
  }

  return 7LL;
}

uint64_t sub_1003C66A4(uint64_t a1, __int128 *a2, uint64_t a3)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v6 = (uint64_t *)sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v6) {
    return sub_100407BD8(v6, a1, a2, a3);
  }
  else {
    return 7LL;
  }
}

uint64_t sub_1003C672C(uint64_t a1, __int128 *a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v4 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v4) {
    return sub_100407D04(v4, a1, a2);
  }
  else {
    return 7LL;
  }
}

uint64_t sub_1003C67A0(unint64_t a1, int a2, int a3)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v6 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (!v6) {
    return 7LL;
  }
  uint64_t v7 = v6;
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008957F8);
  }
  uint64_t v8 = sub_100496954((void *)qword_1008D61A0, a1);
  if (v8)
  {
    uint64_t v9 = v8;
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_1008957F8);
    }
    uint64_t v10 = qword_1008D61A0;
    unint64_t v11 = sub_100494CF8(v9);
    char v12 = sub_100497980(v10, v11);
    int v13 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_100494958(v9, (uint64_t)__p);
      char v14 = (void **)__p[0];
      int v15 = "off";
      if (v27 >= 0) {
        char v14 = __p;
      }
      if (a3 == -1) {
        int v15 = "on";
      }
      *(_DWORD *)std::string buf = 136446722;
      uint64_t v29 = v14;
      __int16 v30 = 2082;
      __int16 v31 = v15;
      if (a2 == 1) {
        uint64_t v16 = "Bluetooth";
      }
      else {
        uint64_t v16 = "Unknown";
      }
      __int16 v32 = 2082;
      int v33 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s is turning power %{public}s for module %{public}s",  buf,  0x20u);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }

    if (sub_100487C4C())
    {
      CTGreenTeaOsLogHandle = (os_log_s *)getCTGreenTeaOsLogHandle(qword_1008F7720);
      if (CTGreenTeaOsLogHandle)
      {
        int v18 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_100494958(v9, (uint64_t)__p);
          int v19 = (void **)__p[0];
          std::string::size_type v20 = "off";
          if (v27 >= 0) {
            int v19 = __p;
          }
          if (a3 == -1) {
            std::string::size_type v20 = "on";
          }
          *(_DWORD *)std::string buf = 136446722;
          uint64_t v29 = v19;
          __int16 v30 = 2082;
          __int16 v31 = v20;
          if (a2 == 1) {
            char v21 = "Bluetooth";
          }
          else {
            char v21 = "Unknown";
          }
          __int16 v32 = 2082;
          int v33 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Session %{public}s is turning power %{public}s for module %{public}s",  buf,  0x20u);
          if (v27 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }

  else
  {
    char v12 = 0;
  }

  uint64_t v23 = sub_1002E6E00();
  char v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  if (a3 || (v24 & 1) != 0)
  {
    if (a3) {
      return sub_100409038(v7, v12);
    }
  }

  else
  {
    uint64_t v25 = sub_1002E8D94();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 152LL))(v25, 3LL);
  }

  return sub_100407B88(v7, v12);
}

uint64_t sub_1003C6AC8(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v3 = sub_1002E6BF0();
  return 0LL;
}

uint64_t sub_1003C6B0C(uint64_t a1, uint64_t a2, int *a3)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v5 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (!v5) {
    return 7LL;
  }
  unsigned int v10 = 0;
  uint64_t v6 = sub_100409238(v5, &v10);
  if (!(_DWORD)v6)
  {
    if (v10 > 4)
    {
      uint64_t v6 = 1LL;
    }

    else
    {
      uint64_t v6 = 0LL;
      *a3 = dword_1006C2830[v10];
    }
  }

  uint64_t v7 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *a3;
    *(_DWORD *)std::string buf = 67109120;
    int v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Returning bluetooth power state: %x", buf, 8u);
  }

  return v6;
}

uint64_t sub_1003C6C40(unint64_t a1)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008957F8);
  }
  uint64_t v2 = sub_100496954((void *)qword_1008D61A0, a1);
  if (v2)
  {
    uint64_t v3 = v2;
    if (sub_100487C4C())
    {
      CTGreenTeaOsLogHandle = (os_log_s *)getCTGreenTeaOsLogHandle(qword_1008F7720);
      if (CTGreenTeaOsLogHandle)
      {
        uint64_t v5 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_100494958(v3, (uint64_t)__p);
          if (v9 >= 0) {
            uint64_t v6 = __p;
          }
          else {
            uint64_t v6 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446210;
          unint64_t v11 = v6;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Session %{public}s is asking to power down local device ",  buf,  0xCu);
          if (v9 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }

  return sub_100409290();
}

uint64_t sub_1003C6DB8(unint64_t a1)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008957F8);
  }
  uint64_t v2 = sub_100496954((void *)qword_1008D61A0, a1);
  if (v2)
  {
    uint64_t v3 = v2;
    if (sub_100487C4C())
    {
      CTGreenTeaOsLogHandle = (os_log_s *)getCTGreenTeaOsLogHandle(qword_1008F7720);
      if (CTGreenTeaOsLogHandle)
      {
        uint64_t v5 = CTGreenTeaOsLogHandle;
        if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
        {
          sub_100494958(v3, (uint64_t)__p);
          if (v9 >= 0) {
            uint64_t v6 = __p;
          }
          else {
            uint64_t v6 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446210;
          unint64_t v11 = v6;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Session %{public}s is asking to reset local device",  buf,  0xCu);
          if (v9 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }

  return sub_1004092D0();
}

uint64_t sub_1003C6F30(uint64_t a1, _DWORD *a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v4 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (!v4) {
    return 7LL;
  }
  char v6 = 0;
  uint64_t result = sub_100409450(v4, &v6);
  if ((_DWORD)result) {
    return 1LL;
  }
  *a2 = -v6;
  return result;
}

uint64_t sub_1003C6FC0(uint64_t a1, char *a2, size_t a3)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v6 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (!v6) {
    return 7LL;
  }
  __int16 v14 = 0;
  int v13 = 0;
  uint64_t result = sub_100409630(v6, (uint64_t)&v13);
  if (!(_DWORD)result)
  {
    __source = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    sub_1003FE1B4((unsigned __int8 *)&v13, &__source);
    if (SHIBYTE(v12) < 0)
    {
      if (v11 + 1 > a3)
      {
        uint64_t v9 = 5LL;
LABEL_15:
        operator delete(__source);
        return v9;
      }

      p_source = __source;
    }

    else
    {
      if (HIBYTE(v12) >= a3) {
        return 5LL;
      }
      p_source = (const char *)&__source;
    }

    strlcpy(a2, p_source, a3);
    uint64_t v9 = 0LL;
    uint64_t result = 0LL;
    if (SHIBYTE(v12) < 0) {
      goto LABEL_15;
    }
  }

  return result;
}

void sub_1003C70C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003C70E4(unint64_t a1, int a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v4 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (!v4) {
    return 7LL;
  }
  uint64_t v5 = (void *)v4;
  if (qword_1008D61A8 != -1) {
    dispatch_once(&qword_1008D61A8, &stru_1008957F8);
  }
  uint64_t v6 = sub_100496954((void *)qword_1008D61A0, a1);
  if (v6)
  {
    uint64_t v7 = v6;
    int v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_100494958(v7, (uint64_t)__p);
      uint64_t v9 = (void **)__p[0];
      unsigned int v10 = "discoverable";
      if (v13 >= 0) {
        uint64_t v9 = __p;
      }
      if (!a2) {
        unsigned int v10 = "not discoverable";
      }
      *(_DWORD *)std::string buf = 136446466;
      int v15 = v9;
      __int16 v16 = 2080;
      int v17 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Session %{public}s is asking to set local device %s",  buf,  0x16u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  return sub_100407008(v5, a1, a2 != 0);
}

uint64_t sub_1003C7288(uint64_t a1, _DWORD *a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v4 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (!v4) {
    return 7LL;
  }
  char v6 = 0;
  uint64_t result = sub_10040A574(v4, &v6);
  if (!(_DWORD)result) {
    *a2 = -v6;
  }
  return result;
}

uint64_t sub_1003C7310(unint64_t a1, int a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v4 = (void *)sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v4) {
    return sub_100406DD8(v4, a1, a2 != 0);
  }
  else {
    return 7LL;
  }
}

uint64_t sub_1003C7388(uint64_t a1, _DWORD *a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v4 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (!v4) {
    return 7LL;
  }
  char v6 = 0;
  uint64_t result = sub_10040991C(v4, &v6);
  if (!(_DWORD)result) {
    *a2 = -v6;
  }
  return result;
}

uint64_t sub_1003C7410(uint64_t a1, _DWORD *a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v4 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (!v4) {
    return 7LL;
  }
  BOOL v6 = 0;
  uint64_t result = sub_10040A610(v4, &v6);
  if (!(_DWORD)result) {
    *a2 = -v6;
  }
  return result;
}

uint64_t sub_1003C7498(unint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v8 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (!v8) {
    return 7LL;
  }
  std::string __p = 0LL;
  int v19 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v9 = sub_10040A6A8(v8, (void ***)&__p);
  if (!(_DWORD)v9)
  {
    unint64_t v10 = 0LL;
    if (a4 && __p != v19)
    {
      uint64_t v11 = (char *)__p + 8;
      unint64_t v12 = 1LL;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        if (qword_1008D5F50 != -1) {
          dispatch_once(&qword_1008D5F50, &stru_100895838);
        }
        unint64_t v14 = sub_1003FEFA8((uint64_t)off_1008D5F48, a1, v13);
        if (!v14)
        {
          uint64_t v9 = 7LL;
          goto LABEL_19;
        }

        *a2++ = v14;
        unint64_t v15 = v12 + 1;
        if (v12 >= a4) {
          break;
        }
        ++v12;
        BOOL v16 = v11 == v19;
        v11 += 8;
      }

      while (!v16);
      unint64_t v10 = v15 - 1;
    }

    uint64_t v9 = 0LL;
    *a3 = v10;
  }

void sub_1003C75FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003C761C(uint64_t a1, _DWORD *a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v4 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (!v4) {
    return 7LL;
  }
  char v6 = 0;
  uint64_t result = sub_10040A6F8(v4, &v6);
  if (!(_DWORD)result) {
    *a2 = -v6;
  }
  return result;
}

uint64_t sub_1003C76A4(unint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v8 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (!v8) {
    return 7LL;
  }
  std::string __p = 0LL;
  int v19 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v9 = sub_10040A790(v8, &__p);
  if (!(_DWORD)v9)
  {
    unint64_t v10 = 0LL;
    if (!a4 || __p == v19)
    {
LABEL_20:
      uint64_t v9 = 0LL;
      *a3 = v10;
    }

    else
    {
      uint64_t v11 = (char *)__p + 8;
      unint64_t v12 = 1LL;
      while (1)
      {
        uint64_t v13 = *((void *)v11 - 1);
        if (qword_1008D5F50 != -1) {
          dispatch_once(&qword_1008D5F50, &stru_100895838);
        }
        unint64_t v14 = sub_1003FEFA8((uint64_t)off_1008D5F48, a1, v13);
        if (!v14) {
          break;
        }
        *a2++ = v14;
        unint64_t v15 = v12 + 1;
        if (v12 < a4)
        {
          ++v12;
          BOOL v16 = v11 == v19;
          v11 += 8;
          if (!v16) {
            continue;
          }
        }

        unint64_t v10 = v15 - 1;
        goto LABEL_20;
      }

      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_1006790BC();
      }
      uint64_t v9 = 7LL;
    }
  }

  if (__p)
  {
    int v19 = (char *)__p;
    operator delete(__p);
  }

  return v9;
}

void sub_1003C7830( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003C7850(unint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v8 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (!v8) {
    return 7LL;
  }
  std::string __p = 0LL;
  int v19 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v9 = sub_10040A7E8(v8, (char **)&__p);
  if (!(_DWORD)v9)
  {
    unint64_t v10 = 0LL;
    if (!a4 || __p == v19)
    {
LABEL_20:
      uint64_t v9 = 0LL;
      *a3 = v10;
    }

    else
    {
      uint64_t v11 = (char *)__p + 8;
      unint64_t v12 = 1LL;
      while (1)
      {
        uint64_t v13 = *((void *)v11 - 1);
        if (qword_1008D5F50 != -1) {
          dispatch_once(&qword_1008D5F50, &stru_100895838);
        }
        unint64_t v14 = sub_1003FEFA8((uint64_t)off_1008D5F48, a1, v13);
        if (!v14) {
          break;
        }
        *a2++ = v14;
        unint64_t v15 = v12 + 1;
        if (v12 < a4)
        {
          ++v12;
          BOOL v16 = v11 == v19;
          v11 += 8;
          if (!v16) {
            continue;
          }
        }

        unint64_t v10 = v15 - 1;
        goto LABEL_20;
      }

      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_1006790BC();
      }
      uint64_t v9 = 7LL;
    }
  }

  if (__p)
  {
    int v19 = (char *)__p;
    operator delete(__p);
  }

  return v9;
}

void sub_1003C79DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003C79FC(uint64_t a1, _DWORD *a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v4 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (!v4) {
    return 7LL;
  }
  BOOL v6 = 0;
  uint64_t result = sub_10040A840(v4, &v6);
  if (!(_DWORD)result) {
    *a2 = -v6;
  }
  return result;
}

uint64_t sub_1003C7A84(uint64_t a1, int *a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  int v4 = sub_10040B080();
  uint64_t result = 0LL;
  *a2 = v4 << 31 >> 31;
  return result;
}

void sub_1003C7AFC(uint64_t a1)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
}

uint64_t sub_1003C7B64(uint64_t a1, _DWORD *a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v4 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (!v4) {
    return 7LL;
  }
  char v6 = 0;
  uint64_t result = sub_1004095E0(v4, &v6);
  if (!(_DWORD)result) {
    *a2 = -v6;
  }
  return result;
}

uint64_t sub_1003C7BEC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v8 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v8) {
    return sub_1004094E8(v8, a2, a3, a4);
  }
  else {
    return 7LL;
  }
}

uint64_t sub_1003C7C78(uint64_t a1, int a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v4 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v4) {
    return sub_100409550(v4, a2);
  }
  else {
    return 7LL;
  }
}

uint64_t sub_1003C7CE8(uint64_t a1)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  else {
    return 7LL;
  }
}

uint64_t sub_1003C7D50(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a1)
  {
    if (qword_1008D5F00 != -1) {
      dispatch_once(&qword_1008D5F00, &stru_100895818);
    }
  }

  uint64_t v6 = sub_1002E6BF0();
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 48LL))(v6, a2);
  uint64_t result = 0LL;
  *a3 = v7;
  return result;
}

uint64_t sub_1003C7DE4(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v10 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v10) {
    return sub_100408578(v10, a1, a2, a3, a4, a5);
  }
  else {
    return 7LL;
  }
}

uint64_t sub_1003C7E88(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v10 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v10) {
    return sub_1004087F0(v10, a1, a2, a3, a4, a5);
  }
  else {
    return 7LL;
  }
}

uint64_t sub_1003C7F2C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v6 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v6) {
    return sub_100407D98(v6, a1, a2, a3);
  }
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_1006790E8();
  }
  return 7LL;
}

uint64_t sub_1003C7FDC(uint64_t a1)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v2 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v2) {
    return sub_100407238(v2, a1);
  }
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_100679114();
  }
  return 7LL;
}

uint64_t sub_1003C8070(uint64_t a1, uint64_t a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v4 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v4) {
    return sub_100407E4C(v4, a1, a2);
  }
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_100679140();
  }
  return 7LL;
}

uint64_t sub_1003C810C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v6 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v6) {
    return sub_100407EE4(v6, a1, a2, a3);
  }
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_10067916C();
  }
  return 7LL;
}

uint64_t sub_1003C81BC(uint64_t a1)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v2 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v2) {
    return sub_100407238(v2, a1);
  }
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_100679198();
  }
  return 7LL;
}

uint64_t sub_1003C8250(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v12 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v12) {
    return sub_100407F80(v12, a1, a2 != 0, a3, a4, a5, a6);
  }
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_1006791C4();
  }
  return 7LL;
}

uint64_t sub_1003C8328(uint64_t a1, int a2, uint64_t a3)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v6 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v6) {
    return sub_100408068(v6, a1, a2 != 0, a3);
  }
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_1006791F0();
  }
  return 7LL;
}

uint64_t sub_1003C83DC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v12 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v12) {
    return sub_1004081EC(v12, a1, a2, a3, a4, a5, a6);
  }
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_10067921C();
  }
  return 7LL;
}

uint64_t sub_1003C84B0( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v24 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v24) {
    return sub_1004082C8(v24, a1, a2 != 0, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_100679248();
  }
  return 7LL;
}

uint64_t sub_1003C85BC(uint64_t a1)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_100679274();
  }
  return 7LL;
}

uint64_t sub_1003C864C(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, unint64_t a5)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v10 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v10)
  {
    if (a5 >= 0xFE) {
      uint64_t v11 = 254LL;
    }
    else {
      uint64_t v11 = a5;
    }
    return sub_10040A9C8(v10, a2, a3, a4, v11);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_1006792A0();
    }
    return 7LL;
  }

uint64_t sub_1003C871C(unint64_t a1, char *a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v4 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v4)
  {
    uint64_t v5 = v4;
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_1008957F8);
    }
    uint64_t v6 = sub_100496954((void *)qword_1008D61A0, a1);
    if (v6) {
      return sub_100409310(v5, v6, a2);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
  {
    sub_1006792CC();
  }

  return 7LL;
}

uint64_t sub_1003C8808(unint64_t a1, uint64_t a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v4 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v4)
  {
    uint64_t v5 = v4;
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_1008957F8);
    }
    uint64_t v6 = sub_100496954((void *)qword_1008D61A0, a1);
    if (v6) {
      return sub_100408E54(v5, v6, a2);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
  {
    sub_1006792F8();
  }

  return 7LL;
}

uint64_t sub_1003C88F4(unint64_t a1, unint64_t a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v4 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v4)
  {
    uint64_t v5 = v4;
    if (qword_1008D61A8 != -1) {
      dispatch_once(&qword_1008D61A8, &stru_1008957F8);
    }
    uint64_t v6 = sub_100496954((void *)qword_1008D61A0, a1);
    if (v6)
    {
      uint64_t v7 = v6;
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_100895838);
      }
      unint64_t v8 = sub_1003FEF18((uint64_t)off_1008D5F48, a2);
      if (v8) {
        return sub_100408F34(v5, v7, v8);
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
  {
    sub_100679324();
  }

  return 7LL;
}

uint64_t sub_1003C8A20(uint64_t a1)
{
  char v8 = 0;
  __int16 v7 = 1;
  uint64_t v2 = sub_1002E6E9C();
  int v3 = sub_1002D0A7C(v2);
  uint64_t v4 = (void *)sub_1002E6E9C();
  uint64_t v5 = 1144LL;
  if (v3) {
    uint64_t v5 = 1600LL;
  }
  return (*(uint64_t (**)(void *, uint64_t, __int16 *, char *))(*v4 + v5))(v4, a1, &v7, &v8);
}

uint64_t sub_1003C8A88(unint64_t a1, int a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v4 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v4) {
    return sub_100409094(v4, a1, a2 != 0);
  }
  else {
    return 7LL;
  }
}

uint64_t sub_1003C8B00(uint64_t a1, int *a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  int v4 = sub_1004099B8();
  uint64_t result = 0LL;
  *a2 = v4 << 31 >> 31;
  return result;
}

uint64_t sub_1003C8B78(uint64_t a1, char *a2, unint64_t *a3, unint64_t a4)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  uint64_t v8 = sub_100406554((uint64_t)off_1008D5EF8, a1);
  if (v8) {
    return sub_100409E88(v8, a2, a3, a4);
  }
  else {
    return 7LL;
  }
}

uint64_t sub_1003C8BFC(uint64_t a1, uint64_t a2, void *a3)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_100895858);
  }
  if (sub_1004B18C0(off_1008D60E8, a2, a3)) {
    return 0LL;
  }
  else {
    return 12LL;
  }
}

uint64_t sub_1003C8CB4(uint64_t a1, int *a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  if (qword_1008D60F0 != -1) {
    dispatch_once(&qword_1008D60F0, &stru_100895858);
  }
  int v4 = sub_1004AB928((uint64_t)off_1008D60E8);
  uint64_t result = 0LL;
  *a2 = v4 << 31 >> 31;
  return result;
}

uint64_t sub_1003C8D5C(uint64_t a1)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  else {
    return 7LL;
  }
}

uint64_t sub_1003C8DC0(uint64_t a1, _WORD *a2)
{
  if (qword_1008D5F00 != -1) {
    dispatch_once(&qword_1008D5F00, &stru_100895818);
  }
  if (a2)
  {
    if (qword_1008D6778 != -1) {
      dispatch_once(&qword_1008D6778, &stru_100895878);
    }
    if (qword_1008D6770) {
      return sub_100200E20(qword_1008D6770, a2);
    }
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_10067937C();
    }
    return 7LL;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_100679350();
  }
  return 3LL;
}

uint64_t sub_1003C8EC0()
{
  return 2LL;
}

void sub_1003C8EC8(id a1)
{
  uint64_t v1 = operator new(0x120uLL);
  sub_100495250();
  qword_1008D61A0 = (uint64_t)v1;
}

void sub_1003C8EF8(_Unwind_Exception *a1)
{
}

void sub_1003C8F0C(id a1)
{
  uint64_t v1 = operator new(0x2B0uLL);
  sub_10040749C((uint64_t)v1);
  off_1008D5EF8 = v1;
}

void sub_1003C8F3C(_Unwind_Exception *a1)
{
}

void sub_1003C8F50(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_1003C8F80(_Unwind_Exception *a1)
{
}

void sub_1003C8F94(id a1)
{
  uint64_t v1 = operator new(0x4A8uLL);
  sub_100499870();
  off_1008D60E8 = v1;
}

void sub_1003C8FC4(_Unwind_Exception *a1)
{
}

void sub_1003C8FD8(id a1)
{
  uint64_t v1 = operator new(0x58uLL);
  sub_100242DC4(v1);
  v1[10] = 0LL;
  v1[9] = 0LL;
  v1[8] = v1 + 9;
  qword_1008D6770 = (uint64_t)v1;
}

void sub_1003C9018(_Unwind_Exception *a1)
{
}

uint64_t sub_1003C902C@<X0>(int *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v32 = 0LL;
  __int128 v30 = 0u;
  memset(v31, 0, sizeof(v31));
  *(_OWORD *)__int16 v28 = 0u;
  __int128 v29 = 0u;
  memset(v27, 0, sizeof(v27));
  __int128 v26 = 0u;
  sub_1001FCFC8((uint64_t)&v26);
  p_p = &__p;
  sub_1003CF00C(*((void *)a1 + 1), &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  size_t v5 = strlen((const char *)p_p);
  uint64_t v6 = sub_1001FD17C(v27, (uint64_t)p_p, v5);
  __int16 v7 = sub_1001FD17C(v6, (uint64_t)", ", 2LL);
  uint64_t v8 = *a1;
  else {
    uint64_t v9 = off_100895B20[v8];
  }
  size_t v10 = strlen(v9);
  uint64_t v11 = sub_1001FD17C(v7, (uint64_t)v9, v10);
  uint64_t v12 = sub_1001FD17C(v11, (uint64_t)", ", 2LL);
  if (*((_BYTE *)a1 + 16)) {
    uint64_t v13 = "Incoming";
  }
  else {
    uint64_t v13 = "Outgoing";
  }
  unint64_t v14 = sub_1001FD17C(v12, (uint64_t)v13, 8LL);
  sub_1001FD17C(v14, (uint64_t)", connected: [ ", 15LL);
  unint64_t v15 = &__p;
  sub_10042994C(a1 + 6, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    unint64_t v15 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  size_t v16 = strlen((const char *)v15);
  int v17 = sub_1001FD17C(v27, (uint64_t)v15, v16);
  sub_1001FD17C(v17, (uint64_t)"], pending: [ ", 14LL);
  int v18 = &__p;
  sub_10042994C(a1 + 5, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    int v18 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  size_t v19 = strlen((const char *)v18);
  uint64_t v20 = sub_1001FD17C(v27, (uint64_t)v18, v19);
  char v21 = sub_1001FD17C(v20, (uint64_t)"], ", 3LL);
  char v33 = *((_BYTE *)a1 + 17);
  uint64_t v22 = sub_1001FD17C(v21, (uint64_t)&v33, 1LL);
  sub_1001FD17C(v22, (uint64_t)" attempt(s)", 11LL);
  std::stringbuf::str(a2, (const std::stringbuf *)((char *)v27 + 8));
  *(void *)((char *)&v27[-1]
  *(void *)&v27[0] = v23;
  if (SHIBYTE(v29) < 0) {
    operator delete(v28[1]);
  }
  std::streambuf::~streambuf((char *)v27 + 8);
  return std::ios::~ios(v31);
}

void sub_1003C92C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t sub_1003C9300(int *a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(*((void *)a1 + 1), __p);
    if ((SBYTE7(v21) & 0x80u) == 0) {
      int v3 = __p;
    }
    else {
      int v3 = (void **)__p[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: Device %{public}s",  (uint8_t *)&buf,  0xCu);
    if (SBYTE7(v21) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v2 = (os_log_s *)qword_1008F7578;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *a1;
    else {
      size_t v5 = off_100895B20[v4];
    }
    LODWORD(__p[0]) = 136446210;
    *(void **)((char *)__p + 4) = (void *)v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump:    State: %{public}s",  (uint8_t *)__p,  0xCu);
    uint64_t v2 = (os_log_s *)qword_1008F7578;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)a1 + 16)) {
      uint64_t v6 = "Incoming";
    }
    else {
      uint64_t v6 = "Outgoing";
    }
    LODWORD(__p[0]) = 136446210;
    *(void **)((char *)__p + 4) = (void *)v6;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump:    Direction: %{public}s",  (uint8_t *)__p,  0xCu);
    uint64_t v2 = (os_log_s *)qword_1008F7578;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_10042994C(a1 + 6, (std::stringbuf::string_type *)__p);
    if ((SBYTE7(v21) & 0x80u) == 0) {
      __int16 v7 = __p;
    }
    else {
      __int16 v7 = (void **)__p[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump:    Connected services: %{public}s",  (uint8_t *)&buf,  0xCu);
    if (SBYTE7(v21) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v2 = (os_log_s *)qword_1008F7578;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_10042994C(a1 + 5, (std::stringbuf::string_type *)__p);
    uint64_t v8 = (SBYTE7(v21) & 0x80u) == 0 ? __p : (void **)__p[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump:    Pending services: %{public}s",  (uint8_t *)&buf,  0xCu);
    if (SBYTE7(v21) < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v28 = 0LL;
  __int128 v27 = 0u;
  memset(v26, 0, sizeof(v26));
  __int128 v24 = 0u;
  *(_OWORD *)uint64_t v25 = 0u;
  __int128 v22 = 0u;
  *(_OWORD *)uint64_t v23 = 0u;
  *(_OWORD *)std::stringbuf::string_type __p = 0u;
  __int128 v21 = 0u;
  sub_100532DC0((uint64_t)__p + 1);
  BYTE2(v21) = 0;
  BYTE4(v21) = 0;
  BYTE2(v23[0]) = 0;
  BYTE4(v23[0]) = 0;
  DWORD1(v26[1]) = 0;
  __int128 v22 = 0uLL;
  *((void *)&v21 + 1) = 0LL;
  LOBYTE(v23[0]) = 0;
  __int128 v24 = 0uLL;
  v23[1] = 0LL;
  LOBYTE(v25[0]) = 0;
  memset(v26, 0, 19);
  v25[1] = 0LL;
  BYTE8(v26[1]) = 1;
  BYTE2(v2_Block_object_dispose(va, 8) = 0;
  *(void *)((char *)&v26[1] + 14) = 0LL;
  *(void *)((char *)&v26[1] + 9) = 0LL;
  __int128 v27 = 0uLL;
  *((void *)&v26[2] + 1) = 0LL;
  LOBYTE(v2_Block_object_dispose(va, 8) = 0;
  memset(&buf, 0, sizeof(buf));
  if (sub_1003D2408(*((void *)a1 + 1), (uint64_t)__p)
    && LOBYTE(v25[0])
    && (std::string::operator=(&buf, (const std::string *)&v25[1]), LOBYTE(v25[0])))
  {
    uint64_t v9 = qword_1008F7578;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_41;
    }
    p_std::string buf = &buf;
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v17 = 136446210;
    int v18 = p_buf;
    uint64_t v12 = "statedump:    Make of device is: %{public}s";
    uint64_t v13 = (os_log_s *)v9;
    uint32_t v14 = 12;
  }

  else
  {
    uint64_t v15 = qword_1008F7578;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_41;
    }
    LOWORD(v17) = 0;
    uint64_t v12 = "statedump:    Make of device is unknown";
    uint64_t v13 = (os_log_s *)v15;
    uint32_t v14 = 2;
  }

  _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v17, v14);
LABEL_41:
  if (SHIBYTE(v26[0]) < 0) {
    operator delete(v25[1]);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[1]);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(*((void **)&v21 + 1));
  }
  return nullsub_63((char *)__p + 1, v10);
}

void sub_1003C973C( _Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1002071FC((uint64_t)&a18, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_1003C9768(uint64_t a1)
{
  *(void *)a1 = off_1008958A8;
  *(void *)(a1 + _Block_object_dispose(va, 8) = off_1008958F8;
  *(void *)(a1 + 16) = &off_100895928;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  sub_100242DC4(a1 + 56);
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  *(_WORD *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0LL;
  return a1;
}

void sub_1003C97C4(_Unwind_Exception *exception_object)
{
  int v3 = v2;
  size_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(exception_object);
}

void *sub_1003C97E8(void *a1)
{
  *a1 = off_1008958A8;
  a1[1] = off_1008958F8;
  a1[2] = &off_100895928;
  sub_1003C9870((uint64_t)a1);
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }

  sub_100242E28(a1 + 7);
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }

  return a1;
}

void sub_1003C984C(_Unwind_Exception *a1)
{
  int v3 = *(void **)(v1 + 120);
  if (v3)
  {
    *(void *)(v1 + 12_Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  sub_1006793A8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003C9870(uint64_t a1)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 56);
  int v3 = *(void ***)(a1 + 120);
  uint64_t v2 = *(void ***)(a1 + 128);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        operator delete(*v3);
        uint64_t v2 = *(void ***)(a1 + 128);
      }

      ++v3;
    }

    while (v3 != v2);
    int v3 = *(void ***)(a1 + 120);
  }

  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v3;
  *(_WORD *)(a1 + 144) = 0;
  return sub_100242FAC((uint64_t)v5);
}

void sub_1003C98E4(void *a1)
{
  uint64_t v1 = sub_1003C97E8(a1);
  operator delete(v1);
}

void sub_1003C98F8(uint64_t a1)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100895A40);
  }
  sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1 + 8);
  uint64_t v2 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 424LL))(v2))
  {
    unsigned __int8 v5 = 0;
    uint64_t v3 = sub_1002E8D54();
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v3 + 152LL))(v3, &v5);
    (*(void (**)(uint64_t, void))(*(void *)a1 + 56LL))(a1, v5);
    uint64_t v4 = sub_1002E8D54();
    sub_1003CBF90(v4 + 728, a1 + 16);
  }

void sub_1003C99AC(uint64_t a1)
{
  uint64_t v2 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 424LL))(v2))
  {
    uint64_t v3 = sub_1002E8D54();
    sub_10024E060(v3 + 728, a1 + 16);
  }

uint64_t sub_1003C99F4(uint64_t a1)
{
  uint64_t v1 = sub_1002E6BF0();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 408LL))(v1);
  if ((_DWORD)result)
  {
    uint64_t v3 = sub_1002E6E9C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 1064LL))(v3, 4LL, 12LL, 1LL);
  }

  return result;
}

uint64_t sub_1003C9A3C(uint64_t a1)
{
  return sub_1003C99F4(a1 - 8);
}

uint64_t sub_1003C9A48(uint64_t a1)
{
  return sub_1003C9870(a1 - 8);
}

BOOL sub_1003C9A50(uint64_t a1, uint64_t a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 56);
  for (uint64_t i = *(void *)(a1 + 120); ; i += 8LL)
  {
    if (i == *(void *)(a1 + 128))
    {
      BOOL v6 = 0LL;
      goto LABEL_9;
    }

    unsigned __int8 v5 = *(_DWORD **)i;
    if (*(void *)(*(void *)i + 8LL) == a2) {
      break;
    }
  }

  BOOL v6 = *v5 == 2 || v5[6] != 0;
LABEL_9:
  sub_100242FAC((uint64_t)v8);
  return v6;
}

BOOL sub_1003C9AE0(uint64_t a1, uint64_t a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1 + 56);
  for (uint64_t i = *(void *)(a1 + 120); ; i += 8LL)
  {
    if (i == *(void *)(a1 + 128))
    {
      BOOL v5 = 1LL;
      goto LABEL_7;
    }

    if (*(void *)(*(void *)i + 8LL) == a2) {
      break;
    }
  }

  BOOL v5 = **(_DWORD **)i == 0;
LABEL_7:
  sub_100242FAC((uint64_t)v7);
  return v5;
}

uint64_t sub_1003C9B5C(uint64_t a1)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 56);
  for (uint64_t i = *(void *)(a1 + 120); ; i += 8LL)
  {
    if (i == *(void *)(a1 + 128))
    {
      uint64_t v3 = 0LL;
      goto LABEL_8;
    }

    if (**(_DWORD **)i == 2 || *(_DWORD *)(*(void *)i + 24LL)) {
      break;
    }
  }

  uint64_t v3 = 1LL;
LABEL_8:
  sub_100242FAC((uint64_t)v5);
  return v3;
}

uint64_t sub_1003C9BD4(uint64_t a1)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 56);
  for (uint64_t i = *(_DWORD ***)(a1 + 120); ; ++i)
  {
    if (i == *(_DWORD ***)(a1 + 128))
    {
      uint64_t v3 = 0LL;
      goto LABEL_7;
    }

    if ((**i | 2) == 3) {
      break;
    }
  }

  uint64_t v3 = 1LL;
LABEL_7:
  sub_100242FAC((uint64_t)v5);
  return v3;
}

uint64_t sub_1003C9C48(uint64_t a1, void **a2)
{
  v21[0] = 0LL;
  v21[1] = 0LL;
  sub_100242F28((uint64_t)v21, a1 + 56);
  BOOL v5 = *(void **)(a1 + 120);
  for (uint64_t i = *(void **)(a1 + 128); v5 != i; ++v5)
  {
    BOOL v6 = (_DWORD *)*v5;
    if (*(_DWORD *)*v5 == 2 || v6[6])
    {
      uint64_t v7 = *((void *)v6 + 1);
      uint64_t v9 = a2[1];
      unint64_t v8 = (unint64_t)a2[2];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = ((char *)v9 - (_BYTE *)*a2) >> 3;
        uint64_t v12 = v8 - (void)*a2;
        uint64_t v13 = v12 >> 2;
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          uint64_t v15 = (char *)sub_100008BA0((uint64_t)(a2 + 2), v14);
        }
        else {
          uint64_t v15 = 0LL;
        }
        size_t v16 = &v15[8 * v11];
        *(void *)size_t v16 = v7;
        uint64_t v10 = v16 + 8;
        int v18 = (char *)*a2;
        int v17 = (char *)a2[1];
        if (v17 != *a2)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v16 - 1) = v19;
            v16 -= 8;
          }

          while (v17 != v18);
          int v17 = (char *)*a2;
        }

        *a2 = v16;
        a2[1] = v10;
        a2[2] = &v15[8 * v14];
        if (v17) {
          operator delete(v17);
        }
      }

      else
      {
        *uint64_t v9 = v7;
        uint64_t v10 = v9 + 1;
      }

      a2[1] = v10;
      uint64_t i = *(void **)(a1 + 128);
    }
  }

  return sub_100242FAC((uint64_t)v21);
}

void sub_1003C9D8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003C9DA4(uint64_t a1, char **a2)
{
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, a1 + 56);
  uint64_t v5 = *(void *)(a1 + 120);
  for (uint64_t i = *(void *)(a1 + 128); v5 != i; v5 += 8LL)
  {
    if ((**(_DWORD **)v5 | 2) == 3)
    {
      uint64_t v6 = *(void *)(*(void *)v5 + 8LL);
      unint64_t v8 = a2[1];
      unint64_t v7 = (unint64_t)a2[2];
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v10 = (v8 - *a2) >> 3;
        uint64_t v11 = v7 - (void)*a2;
        uint64_t v12 = v11 >> 2;
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          unint64_t v14 = (char *)sub_100008BA0((uint64_t)(a2 + 2), v13);
        }
        else {
          unint64_t v14 = 0LL;
        }
        uint64_t v15 = &v14[8 * v10];
        *(void *)uint64_t v15 = v6;
        uint64_t v9 = v15 + 8;
        int v17 = *a2;
        size_t v16 = a2[1];
        if (v16 != *a2)
        {
          do
          {
            uint64_t v18 = *((void *)v16 - 1);
            v16 -= 8;
            *((void *)v15 - 1) = v18;
            v15 -= 8;
          }

          while (v16 != v17);
          size_t v16 = *a2;
        }

        *a2 = v15;
        a2[1] = v9;
        a2[2] = &v14[8 * v13];
        if (v16) {
          operator delete(v16);
        }
      }

      else
      {
        *(void *)unint64_t v8 = v6;
        uint64_t v9 = v8 + 8;
      }

      a2[1] = v9;
      uint64_t i = *(void *)(a1 + 128);
    }
  }

  if (qword_1008D9148 != -1) {
    dispatch_once(&qword_1008D9148, &stru_100895A60);
  }
  sub_100586960((uint64_t)off_1008D9140, (void **)a2);
  if (qword_1008D93E0 != -1) {
    dispatch_once(&qword_1008D93E0, &stru_100895A80);
  }
  sub_1004F8F0C((uint64_t)off_1008D93D8, (void **)a2);
  return sub_100242FAC((uint64_t)v20);
}

void sub_1003C9F54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003C9F70(uint64_t a1, uint64_t a2)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, a1 + 56);
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 128);
  while (1)
  {
    if (v4 == v5)
    {
      int v6 = 0;
      goto LABEL_7;
    }

    if (*(void *)(*(void *)v4 + 8LL) == a2) {
      break;
    }
    v4 += 8LL;
  }

  LODWORD(v5) = *(_BYTE *)(*(void *)v4 + 16LL) == 0;
  int v6 = 1;
LABEL_7:
  uint64_t v7 = v6 & v5;
  sub_100242FAC((uint64_t)v9);
  return v7;
}

uint64_t sub_1003C9FF4(uint64_t a1, uint64_t a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1 + 56);
  uint64_t v4 = *(uint64_t **)(a1 + 120);
  uint64_t v5 = *(uint64_t **)(a1 + 128);
  while (v4 != v5)
  {
    uint64_t v6 = *v4;
    if (*(void *)(*v4 + 8) == a2) {
      goto LABEL_6;
    }
    ++v4;
  }

  uint64_t v6 = 0LL;
LABEL_6:
  sub_100242FAC((uint64_t)v8);
  return v6;
}

BOOL sub_1003CA060(uint64_t a1, uint64_t a2, int a3)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, a1 + 56);
  for (uint64_t i = *(void *)(a1 + 120); ; i += 8LL)
  {
    if (i == *(void *)(a1 + 128))
    {
      BOOL v7 = 0LL;
      goto LABEL_7;
    }

    if (*(void *)(*(void *)i + 8LL) == a2) {
      break;
    }
  }

  BOOL v7 = (*(_DWORD *)(*(void *)i + 24LL) & a3) != 0;
LABEL_7:
  sub_100242FAC((uint64_t)v9);
  return v7;
}

uint64_t sub_1003CA0E8(uint64_t a1, uint64_t a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1 + 56);
  for (uint64_t i = *(void *)(a1 + 120); ; i += 8LL)
  {
    if (i == *(void *)(a1 + 128))
    {
      uint64_t v5 = 0LL;
      goto LABEL_7;
    }

    if (*(void *)(*(void *)i + 8LL) == a2) {
      break;
    }
  }

  uint64_t v5 = *(unsigned int *)(*(void *)i + 20LL);
LABEL_7:
  sub_100242FAC((uint64_t)v7);
  return v5;
}

uint64_t sub_1003CA15C(uint64_t a1, uint64_t a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1 + 56);
  for (uint64_t i = *(void *)(a1 + 120); ; i += 8LL)
  {
    if (i == *(void *)(a1 + 128))
    {
      uint64_t v5 = 0LL;
      goto LABEL_7;
    }

    if (*(void *)(*(void *)i + 8LL) == a2) {
      break;
    }
  }

  uint64_t v5 = *(unsigned int *)(*(void *)i + 24LL);
LABEL_7:
  sub_100242FAC((uint64_t)v7);
  return v5;
}

uint64_t sub_1003CA1D0(uint64_t a1)
{
  char v2 = sub_1003C9BD4(a1);
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1 + 56);
  if (*(_BYTE *)(a1 + 145))
  {
    if ((v2 & 1) == 0 && !*(_BYTE *)(a1 + 144))
    {
      *(_BYTE *)(a1 + 145) = 0;
      sub_100242F54((uint64_t)v6);
      uint64_t v3 = sub_100404EB8();
      uint64_t v4 = &stru_100895930;
LABEL_8:
      sub_100405384(v3, v4);
    }
  }

  else if ((v2 & 1) != 0 || *(_BYTE *)(a1 + 144))
  {
    *(_BYTE *)(a1 + 145) = 1;
    sub_100242F54((uint64_t)v6);
    uint64_t v3 = sub_100404EB8();
    uint64_t v4 = &stru_100895950;
    goto LABEL_8;
  }

  return sub_100242FAC((uint64_t)v6);
}

void sub_1003CA270( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1003CA284(id a1)
{
  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_100895AA0);
  }
  sub_1003CA2C8((os_unfair_lock_s *)off_1008D67E0, 0);
}

void sub_1003CA2C8(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "not in progress";
    if (a2) {
      uint64_t v5 = "in progress";
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Sending 'connection %s' notification",  buf,  0xCu);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1003CB9A4;
  v6[3] = &unk_100895970;
  char v7 = a2;
  sub_1003CB8E8(a1 + 6, v6);
}

void sub_1003CA3C8(id a1)
{
  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_100895AA0);
  }
  sub_1003CA2C8((os_unfair_lock_s *)off_1008D67E0, 1);
}

uint64_t sub_1003CA40C(uint64_t a1)
{
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_100242F28((uint64_t)v3, a1 + 56);
  *(_BYTE *)(a1 + 144) = 1;
  sub_100242F54((uint64_t)v3);
  sub_1003CA1D0(a1);
  return sub_100242FAC((uint64_t)v3);
}

void sub_1003CA460( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003CA474(uint64_t a1)
{
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_100242F28((uint64_t)v3, a1 + 56);
  *(_BYTE *)(a1 + 144) = 0;
  sub_100242F54((uint64_t)v3);
  sub_1003CA1D0(a1);
  return sub_100242FAC((uint64_t)v3);
}

void sub_1003CA4C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003CA4D8(void *a1, uint64_t a2)
{
  v21[0] = 0LL;
  v21[1] = 0LL;
  sub_100242F28((uint64_t)v21, (uint64_t)(a1 + 7));
  uint64_t v5 = (void *)a1[15];
  uint64_t v4 = (void *)a1[16];
  if (v5 == v4)
  {
LABEL_5:
    char v7 = operator new(0x20uLL);
    *(_DWORD *)char v7 = 3;
    v7[1] = a2;
    *((_WORD *)v7 + _Block_object_dispose(va, 8) = 0;
    *((_DWORD *)v7 + 5) = 0;
    *((_DWORD *)v7 + 6) = 0;
    unint64_t v8 = a1[17];
    if ((unint64_t)v4 >= v8)
    {
      uint64_t v10 = v4 - v5;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = v8 - (void)v5;
      if (v12 >> 2 > v11) {
        unint64_t v11 = v12 >> 2;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13) {
        unint64_t v14 = (char *)sub_100008BA0((uint64_t)(a1 + 17), v13);
      }
      else {
        unint64_t v14 = 0LL;
      }
      uint64_t v15 = &v14[8 * v10];
      size_t v16 = &v14[8 * v13];
      *(void *)uint64_t v15 = v7;
      uint64_t v9 = v15 + 8;
      uint64_t v18 = (char *)a1[15];
      int v17 = (char *)a1[16];
      if (v17 != v18)
      {
        do
        {
          uint64_t v19 = *((void *)v17 - 1);
          v17 -= 8;
          *((void *)v15 - 1) = v19;
          v15 -= 8;
        }

        while (v17 != v18);
        int v17 = (char *)a1[15];
      }

      a1[15] = v15;
      a1[16] = v9;
      a1[17] = v16;
      if (v17) {
        operator delete(v17);
      }
    }

    else
    {
      *uint64_t v4 = v7;
      uint64_t v9 = v4 + 1;
    }

    a1[16] = v9;
  }

  else
  {
    uint64_t v6 = (void *)a1[15];
    while (*(void *)(*v6 + 8LL) != a2)
    {
      if (++v6 == v4) {
        goto LABEL_5;
      }
    }
  }

  sub_100242F54((uint64_t)v21);
  sub_1003CA1D0((uint64_t)a1);
  return sub_100242FAC((uint64_t)v21);
}

void sub_1003CA62C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003CA640(uint64_t a1, uint64_t a2, int a3)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1 + 56);
  char v7 = *(char **)(a1 + 120);
  uint64_t v6 = *(char **)(a1 + 128);
  if (v7 != v6)
  {
    uint64_t v8 = 0LL;
    while (1)
    {
      uint64_t v9 = *(void *)&v7[v8];
      if (*(void *)(v9 + 8) == a2) {
        break;
      }
      v8 += 8LL;
      if (&v7[v8] == v6) {
        goto LABEL_16;
      }
    }

    if (!*(_BYTE *)(v9 + 17) && !*(_DWORD *)(v9 + 24))
    {
      uint64_t v10 = &v7[v8];
      unint64_t v11 = &v7[v8 + 8];
      int64_t v12 = v6 - v11;
      if (v6 != v11) {
        memmove(&v7[v8], v11, v6 - v11);
      }
      *(void *)(a1 + 12_Block_object_dispose(va, 8) = &v10[v12];
      operator delete((void *)v9);
    }

    if (a3 && *(_BYTE *)(a1 + 144))
    {
      sub_100242F54((uint64_t)v14);
      if (qword_1008D67A8 != -1) {
        dispatch_once(&qword_1008D67A8, &stru_100895AC0);
      }
      sub_10052E40C((uint64_t)off_1008D67A0, a2, a3);
      sub_100242ECC((uint64_t)v14);
    }
  }

void sub_1003CA76C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003CA780(void *a1, uint64_t a2, int a3, unsigned int a4, int a5)
{
  uint64_t v10 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    if (a5) {
      unint64_t v11 = "incoming";
    }
    else {
      unint64_t v11 = "outgoing";
    }
    int64_t v12 = sub_10040FC0C(a4);
    sub_1003CF00C(a2, __p);
    if (v44 >= 0) {
      unint64_t v13 = __p;
    }
    else {
      unint64_t v13 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446722;
    BOOL v46 = (void *)v11;
    __int16 v47 = 2082;
    int v48 = (void *)v12;
    __int16 v49 = 2082;
    int v50 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Received %{public}s connection attempt for %{public}s profile on device %{public}s",  buf,  0x20u);
    if (v44 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = (os_log_s *)qword_1008F7578;
  }

  if (os_signpost_enabled(v10))
  {
    unint64_t v14 = a5 ? "incoming" : "outgoing";
    uint64_t v15 = sub_10040FC0C(a4);
    sub_1003CF00C(a2, __p);
    size_t v16 = v44 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446722;
    BOOL v46 = v14;
    __int16 v47 = 2082;
    int v48 = (void *)v15;
    __int16 v49 = 2082;
    int v50 = v16;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "BTSignPost",  "Received %{public}s connection attempt for %{public}s profile on device %{public}s",  buf,  0x20u);
    if (v44 < 0) {
      operator delete(__p[0]);
    }
  }

  v42[0] = 0LL;
  v42[1] = 0LL;
  sub_100242F28((uint64_t)v42, (uint64_t)(a1 + 7));
  uint64_t v18 = (void *)a1[15];
  int v17 = (void *)a1[16];
  if (v18 == v17)
  {
LABEL_24:
    __int128 v21 = operator new(0x20uLL);
    *(_DWORD *)__int128 v21 = 1;
    v21[1] = a2;
    *((_BYTE *)v21 + 16) = a5;
    *((_DWORD *)v21 + 5) = a3;
    *((_DWORD *)v21 + 6) = 0;
    *((_BYTE *)v21 + 17) = 1;
    unint64_t v22 = a1[17];
    if ((unint64_t)v17 >= v22)
    {
      uint64_t v24 = v17 - v18;
      unint64_t v25 = v24 + 1;
      uint64_t v26 = v22 - (void)v18;
      if (v26 >> 2 > v25) {
        unint64_t v25 = v26 >> 2;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27) {
        uint64_t v28 = (char *)sub_100008BA0((uint64_t)(a1 + 17), v27);
      }
      else {
        uint64_t v28 = 0LL;
      }
      int v36 = &v28[8 * v24];
      uint64_t v37 = &v28[8 * v27];
      *(void *)int v36 = v21;
      uint64_t v23 = v36 + 8;
      std::string v39 = (char *)a1[15];
      char v38 = (char *)a1[16];
      if (v38 != v39)
      {
        do
        {
          uint64_t v40 = *((void *)v38 - 1);
          v38 -= 8;
          *((void *)v36 - 1) = v40;
          v36 -= 8;
        }

        while (v38 != v39);
        char v38 = (char *)a1[15];
      }

      a1[15] = v36;
      a1[16] = v23;
      a1[17] = v37;
      if (v38) {
        operator delete(v38);
      }
    }

    else
    {
      *int v17 = v21;
      uint64_t v23 = v17 + 1;
    }

    a1[16] = v23;
    goto LABEL_51;
  }

  uint64_t v19 = (void *)a1[15];
  while (1)
  {
    uint64_t v20 = *v19;
    if (*(void *)(*v19 + 8LL) == a2) {
      break;
    }
    if (++v19 == v17) {
      goto LABEL_24;
    }
  }

  __int128 v29 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v30 = *(unsigned __int8 *)(v20 + 16);
    sub_1003CF00C(a2, __p);
    __int16 v31 = "incoming";
    if (!v30) {
      __int16 v31 = "outgoing";
    }
    uint64_t v32 = (void **)__p[0];
    int v33 = *(unsigned __int8 *)(v20 + 17);
    if (v44 >= 0) {
      uint64_t v32 = __p;
    }
    *(_DWORD *)std::string buf = 136446722;
    BOOL v46 = (void *)v31;
    __int16 v47 = 2082;
    int v48 = v32;
    __int16 v49 = 1024;
    LODWORD(v50) = v33;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Already tracking an %{public}s connection for device %{public}s with %d pending attempt(s)",  buf,  0x1Cu);
    if (v44 < 0) {
      operator delete(__p[0]);
    }
  }

  int v34 = *(_DWORD *)(v20 + 20);
  if ((v34 & a3) == 0)
  {
    *(_DWORD *)(v20 + 20) = v34 | a3;
    *(_BYTE *)(v20 + 16) = a5;
    *(_DWORD *)uint64_t v20 = 1;
    ++*(_BYTE *)(v20 + 17);
LABEL_51:
    sub_1003E3AA4(a2);
    sub_100242F54((uint64_t)v42);
    sub_1003CA1D0((uint64_t)a1);
    return sub_100242FAC((uint64_t)v42);
  }

  int v35 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    LODWORD(v46) = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Ignoring duplicate connection attempt for service 0x%x",  buf,  8u);
  }

  return sub_100242FAC((uint64_t)v42);
}

void sub_1003CABCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_1003CABEC(uint64_t a1, unsigned __int8 *a2, int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v11 = sub_10040FC0C(a4);
    sub_1003CF00C((uint64_t)a2, __p);
    if (v57 >= 0) {
      int64_t v12 = __p;
    }
    else {
      int64_t v12 = *(_BYTE **)__p;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v12;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
    unsigned int v59 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Received connection result for %{public}s profile on device %{public}s - result was %d",  (uint8_t *)&buf,  0x1Cu);
    if (v57 < 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v10 = (os_log_s *)qword_1008F7578;
  }

  if (os_signpost_enabled(v10))
  {
    unint64_t v13 = sub_10040FC0C(a4);
    sub_1003CF00C((uint64_t)a2, __p);
    unint64_t v14 = v57 >= 0 ? __p : *(_BYTE **)__p;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v14;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
    unsigned int v59 = a5;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "BTSignPost",  "Received connection result for %{public}s profile on device %{public}s - result was %d",  (uint8_t *)&buf,  0x1Cu);
    if (v57 < 0) {
      operator delete(*(void **)__p);
    }
  }

  v53[0] = 0LL;
  v53[1] = 0LL;
  sub_100242F28((uint64_t)v53, a1 + 56);
  uint64_t v16 = *(void *)(a1 + 120);
  uint64_t v15 = *(void **)(a1 + 128);
  if ((void *)v16 == v15)
  {
LABEL_18:
    if (!a5)
    {
      uint64_t v19 = operator new(0x20uLL);
      *(_DWORD *)uint64_t v19 = 2;
      v19[1] = a2;
      *((_WORD *)v19 + _Block_object_dispose(va, 8) = 1;
      *((_DWORD *)v19 + 5) = 0;
      *((_DWORD *)v19 + 6) = a3;
      unint64_t v22 = *(void *)(a1 + 136);
      if ((unint64_t)v15 >= v22)
      {
        uint64_t v24 = ((uint64_t)v15 - v16) >> 3;
        unint64_t v25 = v24 + 1;
        uint64_t v26 = v22 - v16;
        if (v26 >> 2 > v25) {
          unint64_t v25 = v26 >> 2;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27) {
          uint64_t v28 = (char *)sub_100008BA0(a1 + 136, v27);
        }
        else {
          uint64_t v28 = 0LL;
        }
        int v34 = &v28[8 * v24];
        int v35 = &v28[8 * v27];
        *(void *)int v34 = v19;
        uint64_t v23 = v34 + 8;
        uint64_t v37 = *(char **)(a1 + 120);
        int v36 = *(char **)(a1 + 128);
        if (v36 != v37)
        {
          do
          {
            uint64_t v38 = *((void *)v36 - 1);
            v36 -= 8;
            *((void *)v34 - 1) = v38;
            v34 -= 8;
          }

          while (v36 != v37);
          int v36 = *(char **)(a1 + 120);
        }

        *(void *)(a1 + 120) = v34;
        *(void *)(a1 + 12_Block_object_dispose(va, 8) = v23;
        *(void *)(a1 + 136) = v35;
        if (v36) {
          operator delete(v36);
        }
      }

      else
      {
        *uint64_t v15 = v19;
        uint64_t v23 = v15 + 1;
      }

      *(void *)(a1 + 12_Block_object_dispose(va, 8) = v23;
      goto LABEL_64;
    }

    goto LABEL_19;
  }

  uint64_t v17 = -v16;
  uint64_t v18 = *(void **)(a1 + 120);
  while (1)
  {
    uint64_t v19 = (void *)*v18;
    ++v18;
    v17 -= 8LL;
    if (v18 == v15) {
      goto LABEL_18;
    }
  }

  int v20 = *((_DWORD *)v19 + 5);
  if ((v20 & a3) != 0)
  {
    *((_DWORD *)v19 + 5) = v20 & ~a3;
    char v21 = *((_BYTE *)v19 + 17);
    if (v21)
    {
LABEL_22:
      *((_BYTE *)v19 + 17) = --v21;
      goto LABEL_38;
    }

    __int16 v31 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT))
    {
      sub_1003C902C((int *)v19, &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::stringbuf::string_type buf = &buf;
      }
      else {
        p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::stringbuf::string_type __p = 136446210;
      *(void *)&__p[4] = p_buf;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_FAULT,  "Found mismatch between connection attempts and connection results - dumping connection state:\n%{public}s",  __p,  0xCu);
      char v21 = *((_BYTE *)v19 + 17);
      if (v21) {
        goto LABEL_22;
      }
    }

    else
    {
      char v21 = 0;
    }

void sub_1003CB20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

BOOL sub_1003CB234(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5, int a6)
{
  int v34 = a3;
  int64_t v12 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v13 = sub_10040FC0C(a4);
    sub_1003CF00C(a2, __p);
    if (v33 >= 0) {
      unint64_t v14 = __p;
    }
    else {
      unint64_t v14 = (void **)__p[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446978;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v14;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
    int v37 = a5;
    __int16 v38 = 1024;
    int v39 = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Received disconnection result for %{public}s profile on device %{public}s - result was %d - reason was %d",  (uint8_t *)&buf,  0x22u);
    if (v33 < 0) {
      operator delete(__p[0]);
    }
    int64_t v12 = (os_log_s *)qword_1008F7578;
  }

  if (os_signpost_enabled(v12))
  {
    uint64_t v15 = sub_10040FC0C(a4);
    sub_1003CF00C(a2, __p);
    uint64_t v16 = v33 >= 0 ? __p : (void **)__p[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446978;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v16;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
    int v37 = a5;
    __int16 v38 = 1024;
    int v39 = a6;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "BTSignPost",  "Received disconnection result for %{public}s profile on device %{public}s - result was %d - reason was %d",  (uint8_t *)&buf,  0x22u);
    if (v33 < 0) {
      operator delete(__p[0]);
    }
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  sub_100242F28((uint64_t)__p, a1 + 56);
  uint64_t v18 = *(char **)(a1 + 120);
  uint64_t v17 = *(char **)(a1 + 128);
  if (v18 == v17)
  {
LABEL_18:
    if (a5)
    {
LABEL_22:
      uint64_t v20 = 0LL;
LABEL_24:
      BOOL v24 = v20 == 0;
      goto LABEL_25;
    }

    char v21 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT))
    {
      sub_10042994C(&v34, &buf);
      sub_100679458((char *)&buf, v35, v21);
    }

void sub_1003CB598( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1003CB5B8(uint64_t a1)
{
  char v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: ----------------- Connection Manager ----------------",  (uint8_t *)&buf,  2u);
    char v2 = (os_log_s *)qword_1008F7578;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 144)) {
      uint64_t v3 = "Yes";
    }
    else {
      uint64_t v3 = "No";
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: Pairing in progress: %{public}s",  (uint8_t *)&buf,  0xCu);
    char v2 = (os_log_s *)qword_1008F7578;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 145)) {
      uint64_t v4 = "Yes";
    }
    else {
      uint64_t v4 = "No";
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: Connection in progress: %{public}s",  (uint8_t *)&buf,  0xCu);
    char v2 = (os_log_s *)qword_1008F7578;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Connections:", (uint8_t *)&buf, 2u);
  }

  __int128 buf = 0uLL;
  unint64_t v25 = 0LL;
  v23[0] = 0LL;
  v23[1] = 0LL;
  sub_100242F28((uint64_t)v23, a1 + 56);
  uint64_t v5 = *(_OWORD ***)(a1 + 120);
  uint64_t v6 = *(_OWORD ***)(a1 + 128);
  if (v5 != v6)
  {
    char v7 = (char *)*((void *)&buf + 1);
    do
    {
      uint64_t v8 = *v5;
      if (v7 >= v25)
      {
        uint64_t v10 = (char *)buf;
        uint64_t v11 = (uint64_t)&v7[-buf] >> 5;
        unint64_t v12 = v11 + 1;
        uint64_t v13 = (uint64_t)&v25[-buf];
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_100240F38((uint64_t)&v25, v14);
          char v7 = (char *)*((void *)&buf + 1);
          uint64_t v10 = (char *)buf;
        }

        else
        {
          uint64_t v15 = 0LL;
        }

        __int128 v16 = v8[1];
        uint64_t v17 = &v15[32 * v11];
        *(_OWORD *)uint64_t v17 = *v8;
        *((_OWORD *)v17 + 1) = v16;
        if (v7 == v10)
        {
          uint64_t v19 = &v15[32 * v11];
        }

        else
        {
          uint64_t v18 = &v15[32 * v11];
          do
          {
            uint64_t v19 = v18 - 32;
            __int128 v20 = *((_OWORD *)v7 - 1);
            *((_OWORD *)v18 - 2) = *((_OWORD *)v7 - 2);
            *((_OWORD *)v18 - 1) = v20;
            v7 -= 32;
            v18 -= 32;
          }

          while (v7 != v10);
        }

        char v7 = v17 + 32;
        *(void *)&__int128 buf = v19;
        *((void *)&buf + 1) = v17 + 32;
        unint64_t v25 = &v15[32 * v14];
        if (v10) {
          operator delete(v10);
        }
      }

      else
      {
        __int128 v9 = v8[1];
        *(_OWORD *)char v7 = *v8;
        *((_OWORD *)v7 + 1) = v9;
        v7 += 32;
      }

      *((void *)&buf + 1) = v7;
      ++v5;
    }

    while (v5 != v6);
  }

  sub_100242FAC((uint64_t)v23);
  uint64_t v22 = (int *)*((void *)&buf + 1);
  char v21 = (int *)buf;
  if ((void)buf != *((void *)&buf + 1))
  {
    do
    {
      sub_1003C9300(v21);
      v21 += 8;
    }

    while (v21 != v22);
    char v21 = (int *)buf;
  }

  if (v21)
  {
    *((void *)&buf + 1) = v21;
    operator delete(v21);
  }

void sub_1003CB8B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003CB8E8(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_100240540(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }

  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_1003CB97C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003CB9A4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16LL))(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1003CB9BC(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  uint64_t v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, &__p);
    uint64_t v7 = v18 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sending 'device connected' notification for device %{public}s with result %d",  buf,  0x12u);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p);
    }
  }

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_1003CBC2C;
  v14[3] = &unk_100895990;
  v14[4] = a2;
  int v15 = a3;
  sub_1003CB8E8(a1 + 6, v14);
  std::stringbuf::string_type __p = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  sub_1003C9C48((uint64_t)a1, &__p);
  __int128 v9 = __p;
  uint64_t v8 = v17;
  uint64_t v10 = sub_100404EB8();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_1003CBC48;
  _OWORD v12[3] = &unk_10087F980;
  int v13 = (unint64_t)(v8 - v9) >> 3;
  sub_100405384(v10, v12);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100895A40);
  }
  sub_10042FC90((uint64_t)off_1008D60A8, 0);
  if (!a3)
  {
    sub_1003D01A0(a2, (uint64_t)buf);
    if ((v20 & 0x80u) == 0) {
      uint64_t v11 = v20;
    }
    else {
      uint64_t v11 = *(void *)&buf[8];
    }
    if ((char)v20 < 0)
    {
      operator delete(*(void **)buf);
      if (v11) {
        goto LABEL_20;
      }
    }

    else if (v11)
    {
      goto LABEL_20;
    }

    if (qword_1008D63D8 != -1) {
      dispatch_once(&qword_1008D63D8, &stru_100895B00);
    }
    sub_1004541B8((uint64_t)off_1008D63D0, a2);
  }

void sub_1003CBC00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003CBC2C(uint64_t a1, uint64_t (***a2)(void, void, void))
{
  return (**a2)(a2, *(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_1003CBC48(uint64_t a1)
{
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_100895AE0);
  }
  sub_100448134((os_unfair_lock_s *)off_1008D6190, *(_DWORD *)(a1 + 32));
}

void sub_1003CBC98(os_unfair_lock_s *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, &__p);
    __int128 v9 = v20 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v22 = v9;
    __int16 v23 = 1024;
    int v24 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Sending 'device disconnected' notification for device %{public}s with result %d",  buf,  0x12u);
    if (SHIBYTE(v20) < 0) {
      operator delete(__p);
    }
  }

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_1003CBE5C;
  void v15[3] = &unk_1008959B0;
  v15[4] = a2;
  int v16 = a3;
  int v17 = a4;
  sub_1003CB8E8(a1 + 6, v15);
  std::stringbuf::string_type __p = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v20 = 0LL;
  sub_1003C9C48((uint64_t)a1, &__p);
  uint64_t v11 = __p;
  uint64_t v10 = v19;
  uint64_t v12 = sub_100404EB8();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1003CBE78;
  void v13[3] = &unk_10087F980;
  int v14 = (unint64_t)(v10 - v11) >> 3;
  sub_100405384(v12, v13);
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }

void sub_1003CBE34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003CBE5C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a2 + 8LL))( a2,  *(void *)(a1 + 32),  *(unsigned int *)(a1 + 40),  *(unsigned int *)(a1 + 44));
}

void sub_1003CBE78(uint64_t a1)
{
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_100895AE0);
  }
  sub_100448134((os_unfair_lock_s *)off_1008D6190, *(_DWORD *)(a1 + 32));
}

void sub_1003CBED8(uint64_t a1)
{
  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_100895AA0);
  }
  sub_1003CB9BC((os_unfair_lock_s *)off_1008D67E0, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24));
}

void sub_1003CBF34(uint64_t a1)
{
  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_100895AA0);
  }
  sub_1003CBC98((os_unfair_lock_s *)off_1008D67E0, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28));
}

void sub_1003CBF90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }

  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }

  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1003CC044(a1 + 8, v6, (char *)&v7);
      sub_100008A30(a1 + 8);
      goto LABEL_12;
    }

char *sub_1003CC044(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    int v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_100008BA0(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0LL;
    }
    uint64_t v20 = &v19[8 * v16];
    std::stringbuf::string_type __p = v19;
    unint64_t v27 = v20;
    int v28 = v20;
    __int128 v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1LL;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        __int16 v23 = (char *)sub_100008BA0(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        std::stringbuf::string_type __p = v23;
        unint64_t v27 = v20;
        __int128 v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        unint64_t v27 = v20;
      }
    }

    *(void *)uint64_t v20 = *(void *)v3;
    int v28 = v20 + 8;
    uint64_t v4 = sub_100008ADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    if (__p) {
      operator delete(__p);
    }
  }

  else if (__src == v6)
  {
    *(void *)__std::string src = *(void *)a3;
    *(void *)(a1 + _Block_object_dispose(va, 8) = __src + 8;
  }

  else
  {
    __int128 v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }

  return v4;
}

void sub_1003CC248( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003CC280(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_1003CC2B0(_Unwind_Exception *a1)
{
}

void sub_1003CC2C4(id a1)
{
  uint64_t v1 = operator new(0x2B0uLL);
  sub_10057DEC8();
  off_1008D9140 = v1;
}

void sub_1003CC2F4(_Unwind_Exception *a1)
{
}

void sub_1003CC308(id a1)
{
  uint64_t v1 = operator new(0xF0uLL);
  sub_1004F66A8((uint64_t)v1);
  off_1008D93D8 = v1;
}

void sub_1003CC338(_Unwind_Exception *a1)
{
}

void sub_1003CC34C(id a1)
{
  uint64_t v1 = operator new(0x98uLL);
  sub_1003C9768((uint64_t)v1);
  off_1008D67E0 = v1;
}

void sub_1003CC37C(_Unwind_Exception *a1)
{
}

void sub_1003CC390(id a1)
{
  uint64_t v1 = operator new(0x260uLL);
  sub_1005285C8((uint64_t)v1);
  off_1008D67A0 = v1;
}

void sub_1003CC3C0(_Unwind_Exception *a1)
{
}

void sub_1003CC3D4(id a1)
{
  uint64_t v1 = (char *)operator new(0x200uLL);
  *(void *)uint64_t v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 1_Block_object_dispose(va, 8) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 10_Block_object_dispose(va, 8) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 2_Block_object_dispose(va, 8) = v1 + 232;
  *((void *)v1 + 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 32_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 5_Block_object_dispose(va, 8) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_1003CC4DC(_Unwind_Exception *a1)
{
}

void sub_1003CC4F0(id a1)
{
  uint64_t v1 = operator new(0x260uLL);
  sub_100451734((uint64_t)v1);
  off_1008D63D0 = v1;
}

void sub_1003CC520(_Unwind_Exception *a1)
{
}

uint64_t sub_1003CC534(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_100242DC4(a1);
  sub_100242DC4(v4 + 64);
  int v5 = *a2;
  __int16 v6 = *((_WORD *)a2 + 2);
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 336) = 0LL;
  *(_WORD *)(a1 + 132) = v6;
  *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = v5;
  *(void *)(a1 + 312) = 0LL;
  *(void *)(a1 + 320) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  *(_BYTE *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0LL;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(void *)(a1 + 32_Block_object_dispose(va, 8) = a1 + 336;
  *(void *)(a1 + 420) = 0LL;
  *(_DWORD *)(a1 + 36_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 344) = 0LL;
  *(void *)(a1 + 352) = 0LL;
  *(void *)(a1 + 360) = 0LL;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(void *)(a1 + 40_Block_object_dispose(va, 8) = 0LL;
  sub_100242DC4(a1 + 432);
  *(void *)(a1 + 496) = &off_10087FAA8;
  *(void *)(a1 + 504) = 0LL;
  *(_DWORD *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0LL;
  *(_DWORD *)(a1 + 52_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 532) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 540) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 54_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 556) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 564) = 0;
  *(void *)(a1 + 56_Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a1 + 57_Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(void *)(a1 + 584) = a1 + 592;
  *(_DWORD *)(a1 + 60_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 632) = 0LL;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_WORD *)(a1 + 640) = 256;
  *(_WORD *)(a1 + 650) = 0;
  *(_DWORD *)(a1 + 642) = 0;
  *(_DWORD *)(a1 + 645) = 0;
  *(_BYTE *)(a1 + 652) = 1;
  *(_DWORD *)(a1 + 716) = 0;
  *(_OWORD *)(a1 + 700) = 0u;
  *(_DWORD *)(a1 + 670) = 0;
  *(_OWORD *)(a1 + 654) = 0u;
  *(_OWORD *)(a1 + 676) = 0u;
  *(_WORD *)(a1 + 692) = 0;
  *(_OWORD *)(a1 + 740) = 0u;
  *(_DWORD *)(a1 + 764) = 0;
  *(void *)(a1 + 756) = 0LL;
  *(_DWORD *)(a1 + 76_Block_object_dispose(va, 8) = 4;
  *(void *)(a1 + 78_Block_object_dispose(va, 8) = 0xFFFF00000000LL;
  *(void *)(a1 + 776) = 0LL;
  *(_DWORD *)(a1 + 783) = 0;
  *(_BYTE *)(a1 + 796) = 1;
  *(void *)(a1 + 800) = 0LL;
  *(_WORD *)(a1 + 816) = 0;
  *(_BYTE *)(a1 + 841) = 0;
  *(_DWORD *)(a1 + 852) = 0;
  *(_BYTE *)(a1 + 990) = 0;
  *(_OWORD *)(a1 + 92_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_BYTE *)(a1 + 992) = 1;
  *(_DWORD *)(a1 + 994) = -65536;
  *(_DWORD *)(a1 + 1000) = 0;
  *(_BYTE *)(a1 + 1004) = 0;
  *(void *)(a1 + 100_Block_object_dispose(va, 8) = &off_10087FAA8;
  *(void *)(a1 + 1016) = 0LL;
  *(void *)(a1 + 1096) = 0LL;
  *(_WORD *)(a1 + 1120) = 0;
  *(_BYTE *)(a1 + 1122) = 0;
  *(void *)(a1 + 1144) = 0LL;
  *(_OWORD *)(a1 + 112_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 1240) = 0LL;
  *(_DWORD *)(a1 + 124_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 1234) = 0;
  *(void *)(a1 + 1226) = 0LL;
  *(_WORD *)(a1 + 1092) = 0;
  *(_OWORD *)(a1 + 106_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 1084) = 0LL;
  *(_OWORD *)(a1 + 1156) = 0u;
  *(_BYTE *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 120_Block_object_dispose(va, 8) = 0u;
  sub_10002418C((void *)(a1 + 1256), "");
  *(void *)(a1 + 128_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 1304) = 0LL;
  *(_BYTE *)(a1 + 1316) = 0;
  *(_DWORD *)(a1 + 1320) = 0;
  *(_BYTE *)(a1 + 1324) = 0;
  *(_DWORD *)(a1 + 132_Block_object_dispose(va, 8) = 0;
  *(_WORD *)(a1 + 1332) = 0;
  *(_DWORD *)(a1 + 1356) = 0;
  *(_BYTE *)(a1 + 1360) = 0;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_DWORD *)(a1 + 1351) = 0;
  *(_DWORD *)(a1 + 1372) = 0x10000;
  *(void *)(a1 + 1364) = 0LL;
  *(void *)(a1 + 1376) = 0LL;
  *(_BYTE *)(a1 + 1384) = 0;
  *(_DWORD *)(a1 + 1420) = 0;
  *(void *)(a1 + 1424) = 0LL;
  *(_DWORD *)(a1 + 1432) = 512;
  *(_BYTE *)(a1 + 1436) = 0;
  *(_BYTE *)(a1 + 1464) = 0;
  *(void *)(a1 + 1456) = 0LL;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(void *)(a1 + 1472) = 0xFFFFFFFFLL;
  sub_10002418C((void *)(a1 + 1480), "");
  *(_WORD *)(a1 + 1504) = 0;
  *(_DWORD *)(a1 + 150_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 52_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(void *)(a1 + 80_Block_object_dispose(va, 8) = 0x600000003LL;
  *(_OWORD *)(a1 + 820) = xmmword_1006C2880;
  *(_DWORD *)(a1 + 836) = 0;
  *(_BYTE *)(a1 + 840) = 2;
  *(_BYTE *)(a1 + 842) = 0;
  *(_DWORD *)(a1 + 844) = 80;
  *(_BYTE *)(a1 + 84_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  *(void *)(a1 + 872) = 0LL;
  *(_DWORD *)(a1 + 880) = 0;
  *(_BYTE *)(a1 + 1152) = 0;
  *(_BYTE *)(a1 + 960) = 0;
  *(_DWORD *)(a1 + 964) = 0;
  *(_DWORD *)(a1 + 972) = 0;
  *(_BYTE *)(a1 + 976) = 0;
  *(void *)(a1 + 732) = 0LL;
  *(_OWORD *)(a1 + 700) = 0u;
  *(_OWORD *)(a1 + 716) = 0u;
  *(void *)(a1 + 860) = 0LL;
  *(_BYTE *)(a1 + 86_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 904) = 0LL;
  *(_OWORD *)(a1 + 88_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 980) = 0LL;
  *(_WORD *)(a1 + 98_Block_object_dispose(va, 8) = 1;
  *(_BYTE *)(a1 + 991) = 0;
  *(_BYTE *)(a1 + 993) = 0;
  uint64_t v7 = sub_1002E6E00();
  sub_10002418C(v13, "Device");
  sub_10002418C(__p, "enableSDPPrint");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v7 + 72LL))(v7, v13, __p, a1 + 991);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  uint64_t v8 = sub_1002E6E00();
  sub_10002418C(v13, "Device");
  sub_10002418C(__p, "wipeIDCache");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v8 + 72LL))(v8, v13, __p, a1 + 993);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  *(_BYTE *)(a1 + 1296) = 0;
  *(void *)(a1 + 1280) = -1LL;
  __int128 v9 = *(void **)(a1 + 1288);
  *(void *)(a1 + 128_Block_object_dispose(va, 8) = 0LL;

  *(_OWORD *)(a1 + 138_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 1404) = 0u;
  sub_1003CCB84(a1);
  *(void *)(a1 + 144_Block_object_dispose(va, 8) = *(void *)(a1 + 1440);
  *(void *)(a1 + 1512) = 0LL;
  return a1;
}

void sub_1003CC9C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  __int128 v29 = *(void **)(v22 + 1440);
  if (v29)
  {
    *(void *)(v22 + 144_Block_object_dispose(va, 8) = v29;
    operator delete(v29);
  }

  sub_100024304((void ***)&a17);
  uint64_t v30 = *v27;
  if (*v27)
  {
    *(void *)(v22 + 1136) = v30;
    operator delete(v30);
  }

  *(void *)(v22 + 100_Block_object_dispose(va, 8) = &off_10087FAA8;
  int64_t v31 = *(unsigned int **)(v22 + 1016);
  if (v31) {
    sub_1002CD254(v31);
  }
  int v32 = (void **)(v22 + 912);
  char v33 = *(void **)(v22 + 936);
  if (v33)
  {
    *(void *)(v22 + 944) = v33;
    operator delete(v33);
  }

  int v34 = *v32;
  if (*v32)
  {
    *(void *)(v22 + 920) = v34;
    operator delete(v34);
  }

  int v35 = *(void **)(v22 + 744);
  if (v35)
  {
    *(void *)(v22 + 752) = v35;
    operator delete(v35);
  }

  sub_1003E5F28((void ***)&a17);
  sub_10025506C(v22 + 584, *(void **)(v22 + 592));
  *(void *)(v22 + 496) = &off_10087FAA8;
  int v36 = *(unsigned int **)(v22 + 504);
  if (v36) {
    sub_1002CD254(v36);
  }
  sub_100242E28(v23);
  sub_10023BF24(v26 - 8, *(void **)(v22 + 336));
  sub_100242E28(a10);
  sub_100242E28(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_1003CCB84(uint64_t a1)
{
  v307[0] = 0LL;
  v307[1] = 0LL;
  sub_100242F28((uint64_t)v307, a1);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895B68);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    if (qword_1008D6198 != -1) {
      dispatch_once(&qword_1008D6198, &stru_100895B88);
    }
    int v2 = sub_100447F04((uint64_t)off_1008D6190);
    uint64_t v3 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a1, __p);
      uint64_t v4 = (SBYTE7(__p[1]) & 0x80u) == 0 ? __p : *(_OWORD **)&__p[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Read device %{public}s settings",  (uint8_t *)&buf,  0xCu);
      if (SBYTE7(__p[1]) < 0) {
        operator delete(*(void **)&__p[0]);
      }
    }

    if ((v2 & 1) != 0 || *(_BYTE *)(a1 + 993))
    {
      *(_WORD *)(a1 + 740) = 0;
      int v5 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(unsigned __int8 *)(a1 + 993);
        LODWORD(__p[0]) = 67109376;
        DWORD1(__p[0]) = v2;
        WORD4(__p[0]) = 1024;
        *(_DWORD *)((char *)__p + 10) = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Identification - wiping ID cache due to build version update %d, override %d",  (uint8_t *)__p,  0xEu);
      }

      uint64_t v7 = sub_1002E6D7C();
      if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)v7 + 56LL))(v7, a1, 0LL)
        && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
      {
        sub_100679520();
      }

      uint64_t v8 = sub_1002E6D7C();
      if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)v8 + 72LL))(v8, a1, 0LL)
        && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
      {
        sub_1006794F4();
      }
    }

    *(void *)&__p[0] = 0LL;
    sub_1000B0400((uint64_t)__p);
    uint64_t v9 = SLODWORD(__p[0]);
    uint64_t v10 = SWORD2(__p[0]);
    memset(&buf, 0, sizeof(buf));
    uint64_t v11 = sub_1002E6D7C();
    int v12 = (*(uint64_t (**)(uint64_t, uint64_t, std::string *))(*(void *)v11 + 32LL))(v11, a1, &buf);
    if (v12)
    {
      uint64_t v13 = sub_1003CF350((unsigned __int8 *)a1);
      if (!(_DWORD)v13) {
        goto LABEL_61;
      }
      if (IsAppleInternalBuild(v13, v14))
      {
        uint64_t v323 = 0LL;
        __int128 v321 = 0u;
        memset(v322, 0, sizeof(v322));
        __int128 v319 = 0u;
        __int128 v320 = 0u;
        __int128 v317 = 0u;
        __int128 v318 = 0u;
        memset(__p, 0, sizeof(__p));
        sub_1001FCFC8((uint64_t)__p);
        uint64_t v15 = sub_1001FD17C(&__p[1], (uint64_t)"Read name result failure = ", 27LL);
        std::to_string(&__str, v12);
        if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t size = __str.__r_.__value_.__s.__size_;
        }
        else {
          uint64_t size = __str.__r_.__value_.__l.__size_;
        }
        unint64_t v18 = sub_1001FD17C(v15, (uint64_t)p_str, size);
        uint64_t v19 = sub_1001FD17C(v18, (uint64_t)", device address = ", 19LL);
        uint64_t v20 = (const char *)&v303;
        sub_1003FE1B4((unsigned __int8 *)(a1 + 128), &v303);
        if (v305 < 0) {
          uint64_t v20 = (const char *)v303;
        }
        size_t v21 = strlen(v20);
        uint64_t v22 = sub_1001FD17C(v19, (uint64_t)v20, v21);
        uint64_t v23 = sub_1001FD17C(v22, (uint64_t)", value = ", 10LL);
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        size_t v25 = strlen((const char *)p_buf);
        sub_1001FD17C(v23, (uint64_t)p_buf, v25);
        if (SHIBYTE(v305) < 0) {
          operator delete(v303);
        }
        std::stringbuf::str(&__str, (const std::stringbuf *)((char *)&__p[1] + 8));
        if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v26 = &__str;
        }
        else {
          uint64_t v26 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        sub_1000BAAF0((const char *)v26);
        *(void *)((char *)__p
        *(void *)&__p[1] = v27;
        if (SHIBYTE(v320) < 0) {
          operator delete(*((void **)&v319 + 1));
        }
        std::streambuf::~streambuf((char *)&__p[1] + 8);
        std::ios::~ios(v322);
      }

      else
      {
        int64_t v31 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_FAULT))
        {
          sub_1003FE1B4((unsigned __int8 *)(a1 + 128), &__str);
          if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v230 = &__str;
          }
          else {
            v230 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          v231 = &buf;
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            v231 = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          LODWORD(__p[0]) = 67109891;
          DWORD1(__p[0]) = v12;
          WORD4(__p[0]) = 2082;
          *(void *)((char *)__p + 10) = v230;
          WORD1(__p[1]) = 2160;
          *(void *)((char *)&__p[1] + 4) = 1752392040LL;
          WORD6(__p[1]) = 2081;
          *(void *)((char *)&__p[1] + 14) = v231;
          _os_log_fault_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_FAULT,  "Read name result failure = %d, device address = %{public}s, int64_t value = %{private, mask.hash}s",  (uint8_t *)__p,  0x26u);
        }
      }
    }

    else
    {
      int v28 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003FE1B4((unsigned __int8 *)(a1 + 128), &__str);
        if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v29 = &__str;
        }
        else {
          __int128 v29 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        uint64_t v30 = &buf;
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v30 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p[0]) = 136446723;
        *(void *)((char *)__p + 4) = v29;
        WORD6(__p[0]) = 2160;
        *(void *)((char *)__p + 14) = 1752392040LL;
        WORD3(__p[1]) = 2081;
        *((void *)&__p[1] + 1) = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Read name result success, device address = %{public}s, int64_t value = %{private, mask.hash}s",  (uint8_t *)__p,  0x20u);
      }

      std::string::operator=((std::string *)(a1 + 240), &buf);
      *(void *)(a1 + 264) = v9;
      *(void *)(a1 + 272) = v10;
      *(_BYTE *)(a1 + 1369) = 1;
    }

    uint64_t v32 = sub_1002E8D94();
    (*(void (**)(uint64_t, BOOL))(*(void *)v32 + 432LL))(v32, v12 == 0);
LABEL_61:
    memset(&__str, 0, sizeof(__str));
    uint64_t v33 = sub_1002E6D7C();
    uint64_t v34 = sub_1002E6D7C();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, std::string *))(*(void *)v34 + 224LL))(v34, a1, &buf))
    {
      std::string::operator=((std::string *)(a1 + 200), &buf);
      *(void *)(a1 + 224) = v9;
      *(void *)(a1 + 232) = v10;
    }

    int v302 = 0;
    uint64_t v35 = sub_1002E6D7C();
    int v36 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v35 + 256LL))(v35, a1, &v302);
    if (!v36)
    {
      *(_DWORD *)(a1 + 304) = v302;
      *(void *)(a1 + 312) = v9;
      *(void *)(a1 + 320) = v10;
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_100895B68);
      }
      *(_DWORD *)(a1 + 176) = sub_100400D7C((uint64_t)off_1008D5F48, (int *)(a1 + 304), a1);
      *(void *)(a1 + 184) = v9;
      *(void *)(a1 + 192) = v10;
    }

    int v37 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109376;
      DWORD1(__p[0]) = v36;
      WORD4(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 10) = v302;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Read classOfDevice result %d, int64_t value = 0x%x",  (uint8_t *)__p,  0xEu);
    }

    v304 = 0LL;
    uint64_t v305 = 0LL;
    v303 = &v304;
    uint64_t v38 = sub_1002E6D7C();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, void **))(*(void *)v38 + 240LL))(v38, a1, &v303))
    {
      *(void *)(a1 + 352) = v9;
      *(void *)(a1 + 360) = v10;
    }

    *(_WORD *)(a1 + 106_Block_object_dispose(va, 8) = 0;
    *(_BYTE *)(a1 + 1071) = 0;
    *(_DWORD *)(a1 + 108_Block_object_dispose(va, 8) = 0;
    *(void *)(a1 + 1096) = 0LL;
    uint64_t v39 = sub_1002E6D7C();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 1464LL))(v39, a1);
    int v301 = 0;
    uint64_t v40 = sub_1002E6D7C();
    int v41 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v40 + 1496LL))(v40, a1, &v301);
    int v42 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v43 = v301;
      sub_1003CF00C(a1, &v314);
      uint64_t v44 = v315 >= 0 ? &v314 : (__int128 *)v314;
      LODWORD(__p[0]) = 67109634;
      DWORD1(__p[0]) = v41;
      WORD4(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 10) = v43;
      HIWORD(__p[0]) = 2082;
      *(void *)&__p[1] = v44;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "readGAPA result %d, int64_t value = 0x%x for %{public}s",  (uint8_t *)__p,  0x18u);
      if (SHIBYTE(v315) < 0) {
        operator delete((void *)v314);
      }
    }

    int v45 = v301;
    if (v41) {
      int v45 = 0;
    }
    *(_DWORD *)(a1 + 572) = v45;
    uint64_t v46 = sub_1002E6D7C();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v46 + 288LL))(v46, a1, a1 + 584))
    {
      if (qword_1008D9730 != -1) {
        dispatch_once(&qword_1008D9730, &stru_100895BA8);
      }
      sub_10049359C((uint64_t)off_1008D9728, (_WORD *)a1);
      sub_100242F54((uint64_t)v307);
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_100895B68);
      }
      sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 4);
      sub_100242ECC((uint64_t)v307);
    }

    unsigned int v300 = 0;
    uint64_t v47 = sub_1002E6D7C();
    int v48 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(*(void *)v47 + 304LL))(v47, a1, &v300);
    if (v48)
    {
      char v50 = 0;
      unsigned int v51 = 0;
      v49.i64[0] = 0x100010000LL;
    }

    else
    {
      unsigned int v51 = v300;
      char v50 = v300 & 1;
      v49.i64[0] = *(void *)&vshl_u16( (uint16x4_t)(*(void *)&vdup_n_s16(v300) & 0xFF00FF00FF00FFLL),  (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01LL;
    }

    *(_BYTE *)(a1 + 642) = v50;
    *(_DWORD *)(a1 + 643) = vmovn_s16(v49).u32[0];
    *(_DWORD *)(a1 + 132_Block_object_dispose(va, 8) = v51;
    int v52 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109376;
      DWORD1(__p[0]) = v48;
      WORD4(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 10) = v300;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Read PhonebookSyncSettings result %d, settings 0x%x",  (uint8_t *)__p,  0xEu);
    }

    char v299 = 0;
    uint64_t v53 = sub_1002E6D7C();
    int v54 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v53 + 416LL))(v53, a1, &v299);
    char v55 = v299;
    if (v54) {
      char v55 = 0;
    }
    *(_BYTE *)(a1 + 647) = v55;
    unsigned __int16 v298 = 0;
    uint64_t v56 = sub_1002E6D7C();
    int v57 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v56 + 432LL))(v56, a1, &v298);
    if (v57) {
      unsigned __int16 v58 = 0;
    }
    else {
      unsigned __int16 v58 = v298;
    }
    *(_WORD *)(a1 + 654) = v58;
    unsigned int v59 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109376;
      DWORD1(__p[0]) = v57;
      WORD4(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 10) = v58;
      _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "Read lastAVRCPVersion result %d, version %d",  (uint8_t *)__p,  0xEu);
    }

    __int16 v297 = 0;
    uint64_t v60 = sub_1002E6D7C();
    int v61 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v60 + 448LL))(v60, a1, &v297);
    __int16 v62 = v297;
    if (v61) {
      __int16 v62 = 0;
    }
    *(_WORD *)(a1 + 656) = v62;
    __int16 v296 = 0;
    uint64_t v63 = sub_1002E6D7C();
    int v64 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v63 + 464LL))(v63, a1, &v296);
    __int16 v65 = v296;
    if (v64) {
      __int16 v65 = 0;
    }
    *(_WORD *)(a1 + 65_Block_object_dispose(va, 8) = v65;
    __int16 v295 = 0;
    uint64_t v66 = sub_1002E6D7C();
    int v67 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v66 + 480LL))(v66, a1, &v295);
    __int16 v68 = v295;
    if (v67) {
      __int16 v68 = 0;
    }
    *(_WORD *)(a1 + 660) = v68;
    __int16 v294 = 0;
    uint64_t v69 = sub_1002E6D7C();
    int v70 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v69 + 496LL))(v69, a1, &v294);
    __int16 v71 = v294;
    if (v70) {
      __int16 v71 = 0;
    }
    *(_WORD *)(a1 + 662) = v71;
    __int16 v293 = 0;
    uint64_t v72 = sub_1002E6D7C();
    int v73 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v72 + 512LL))(v72, a1, &v293);
    __int16 v74 = v293;
    if (v73) {
      __int16 v74 = 0;
    }
    *(_WORD *)(a1 + 664) = v74;
    __int16 v292 = 0;
    uint64_t v75 = sub_1002E6D7C();
    int v76 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v75 + 528LL))(v75, a1, &v292);
    __int16 v77 = v292;
    if (v76) {
      __int16 v77 = 0;
    }
    *(_WORD *)(a1 + 666) = v77;
    __int16 v291 = 0;
    uint64_t v78 = sub_1002E6D7C();
    int v79 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v78 + 544LL))(v78, a1, &v291);
    __int16 v80 = v291;
    if (v79) {
      __int16 v80 = 0;
    }
    *(_WORD *)(a1 + 66_Block_object_dispose(va, 8) = v80;
    __int16 v290 = 0;
    uint64_t v81 = sub_1002E6D7C();
    int v82 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v81 + 560LL))(v81, a1, &v290);
    __int16 v83 = v290;
    if (v82) {
      __int16 v83 = 0;
    }
    *(_WORD *)(a1 + 670) = v83;
    __int16 v289 = 0;
    uint64_t v84 = sub_1002E6D7C();
    int v85 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v84 + 576LL))(v84, a1, &v289);
    __int16 v86 = v289;
    if (v85) {
      __int16 v86 = 0;
    }
    *(_WORD *)(a1 + 672) = v86;
    __int16 v288 = 0;
    uint64_t v87 = sub_1002E6D7C();
    int v88 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v87 + 592LL))(v87, a1, &v288);
    __int16 v89 = v288;
    if (v88) {
      __int16 v89 = 0;
    }
    *(_WORD *)(a1 + 674) = v89;
    __int16 v287 = 0;
    uint64_t v90 = sub_1002E6D7C();
    int v91 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v90 + 608LL))(v90, a1, &v287);
    __int16 v92 = v287;
    if (v91) {
      __int16 v92 = 0;
    }
    *(_WORD *)(a1 + 676) = v92;
    __int16 v286 = 0;
    uint64_t v93 = sub_1002E6D7C();
    int v94 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v93 + 624LL))(v93, a1, &v286);
    __int16 v95 = v286;
    if (v94) {
      __int16 v95 = 0;
    }
    *(_WORD *)(a1 + 67_Block_object_dispose(va, 8) = v95;
    __int16 v285 = 0;
    uint64_t v96 = sub_1002E6D7C();
    int v97 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v96 + 640LL))(v96, a1, &v285);
    __int16 v98 = v285;
    if (v97) {
      __int16 v98 = 0;
    }
    *(_WORD *)(a1 + 680) = v98;
    __int16 v284 = 0;
    uint64_t v99 = sub_1002E6D7C();
    int v100 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v99 + 656LL))(v99, a1, &v284);
    __int16 v101 = v284;
    if (v100) {
      __int16 v101 = 0;
    }
    *(_WORD *)(a1 + 682) = v101;
    __int16 v283 = 0;
    uint64_t v102 = sub_1002E6D7C();
    int v103 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v102 + 672LL))(v102, a1, &v283);
    __int16 v104 = v283;
    if (v103) {
      __int16 v104 = 0;
    }
    *(_WORD *)(a1 + 684) = v104;
    __int16 v282 = 0;
    uint64_t v105 = sub_1002E6D7C();
    int v106 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v105 + 688LL))(v105, a1, &v282);
    __int16 v107 = v282;
    if (v106) {
      __int16 v107 = 0;
    }
    *(_WORD *)(a1 + 686) = v107;
    __int16 v281 = 0;
    uint64_t v108 = sub_1002E6D7C();
    int v109 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v108 + 704LL))(v108, a1, &v281);
    __int16 v110 = v281;
    if (v109) {
      __int16 v110 = 0;
    }
    *(_WORD *)(a1 + 68_Block_object_dispose(va, 8) = v110;
    __int16 v280 = 0;
    uint64_t v111 = sub_1002E6D7C();
    int v112 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v111 + 720LL))(v111, a1, &v280);
    __int16 v113 = v280;
    if (v112) {
      __int16 v113 = 0;
    }
    *(_WORD *)(a1 + 690) = v113;
    __int16 v279 = 0;
    uint64_t v114 = sub_1002E6D7C();
    int v115 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v114 + 736LL))(v114, a1, &v279);
    __int16 v116 = v279;
    if (v115) {
      __int16 v116 = 0;
    }
    *(_WORD *)(a1 + 692) = v116;
    *(_DWORD *)(a1 + 696) = 0;
    uint64_t v117 = sub_1002E6D7C();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v117 + 48LL))(v117, a1, a1 + 700))
    {
      *(_BYTE *)(a1 + 740) = 0;
    }

    else
    {
      *(_BYTE *)(a1 + 740) = 1;
      unint64_t v118 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a1, &v314);
        int v119 = v315 >= 0 ? &v314 : (__int128 *)v314;
        LODWORD(__p[0]) = 136446722;
        *(void *)((char *)__p + 4) = v119;
        WORD6(__p[0]) = 1042;
        *(_DWORD *)((char *)__p + 14) = 20;
        WORD1(__p[1]) = 2098;
        *(void *)((char *)&__p[1] + 4) = a1 + 700;
        _os_log_impl( (void *)&_mh_execute_header,  v118,  OS_LOG_TYPE_DEFAULT,  "Primary Identification - persisted {device %{public}s, %{public}.20P}",  (uint8_t *)__p,  0x1Cu);
        if (SHIBYTE(v315) < 0) {
          operator delete((void *)v314);
        }
      }
    }

    uint64_t v120 = sub_1002E6D7C();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v120 + 64LL))(v120, a1, a1 + 720))
    {
      *(_BYTE *)(a1 + 741) = 0;
    }

    else
    {
      *(_BYTE *)(a1 + 741) = 1;
      unsigned __int8 v121 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a1, &v314);
        uint64_t v122 = v315 >= 0 ? &v314 : (__int128 *)v314;
        LODWORD(__p[0]) = 136446722;
        *(void *)((char *)__p + 4) = v122;
        WORD6(__p[0]) = 1042;
        *(_DWORD *)((char *)__p + 14) = 20;
        WORD1(__p[1]) = 2098;
        *(void *)((char *)&__p[1] + 4) = a1 + 720;
        _os_log_impl( (void *)&_mh_execute_header,  v121,  OS_LOG_TYPE_DEFAULT,  "Secondary Identification  - persisted {device %{public}s, %{public}.20P}",  (uint8_t *)__p,  0x1Cu);
        if (SHIBYTE(v315) < 0) {
          operator delete((void *)v314);
        }
      }
    }

    id v123 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a1, __p);
      __int128 v124 = (SBYTE7(__p[1]) & 0x80u) == 0 ? __p : *(_OWORD **)&__p[0];
      LODWORD(v314) = 136446210;
      *(void *)((char *)&v314 + 4) = v124;
      _os_log_impl( (void *)&_mh_execute_header,  v123,  OS_LOG_TYPE_DEFAULT,  "Read SDP mirroring state for device %{public}s",  (uint8_t *)&v314,  0xCu);
      if (SBYTE7(__p[1]) < 0) {
        operator delete(*(void **)&__p[0]);
      }
    }

    char v278 = 0;
    uint64_t v125 = sub_1002E6D7C();
    int v126 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v125 + 752LL))(v125, a1, &v278);
    char v127 = v278;
    if (v126) {
      char v127 = 1;
    }
    *(_BYTE *)(a1 + 652) = v127;
    *(void *)(a1 + 752) = *(void *)(a1 + 744);
    BOOL v128 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a1, __p);
      int v129 = (SBYTE7(__p[1]) & 0x80u) == 0 ? __p : *(_OWORD **)&__p[0];
      LODWORD(v314) = 136446210;
      *(void *)((char *)&v314 + 4) = v129;
      _os_log_impl( (void *)&_mh_execute_header,  v128,  OS_LOG_TYPE_DEFAULT,  "Read group list for %{public}s",  (uint8_t *)&v314,  0xCu);
      if (SBYTE7(__p[1]) < 0) {
        operator delete(*(void **)&__p[0]);
      }
    }

    uint64_t v130 = sub_1002E6D7C();
    unint64_t v131 = (void **)(a1 + 744);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v130 + 320LL))(v130, a1, a1 + 744))
    {
      unint64_t v132 = *(char **)(a1 + 752);
      unint64_t v133 = *(void *)(a1 + 760);
      if ((unint64_t)v132 >= v133)
      {
        id v135 = (char *)*v131;
        uint64_t v136 = (v132 - (_BYTE *)*v131) >> 2;
        unint64_t v137 = v136 + 1;
        uint64_t v138 = v133 - (void)v135;
        if (v138 >> 1 > v137) {
          unint64_t v137 = v138 >> 1;
        }
        else {
          unint64_t v139 = v137;
        }
        if (v139)
        {
          uint64_t v140 = (char *)sub_10024E33C(a1 + 760, v139);
          unint64_t v132 = *(char **)(a1 + 752);
          id v135 = *(char **)(a1 + 744);
        }

        else
        {
          uint64_t v140 = 0LL;
        }

        id v141 = &v140[4 * v136];
        id v142 = &v140[4 * v139];
        *(_DWORD *)id v141 = -1;
        id v134 = v141 + 4;
        while (v132 != v135)
        {
          int v143 = *((_DWORD *)v132 - 1);
          v132 -= 4;
          *((_DWORD *)v141 - 1) = v143;
          v141 -= 4;
        }

        *(void *)(a1 + 744) = v141;
        *(void *)(a1 + 752) = v134;
        *(void *)(a1 + 760) = v142;
        if (v135) {
          operator delete(v135);
        }
      }

      else
      {
        *(_DWORD *)unint64_t v132 = -1;
        id v134 = v132 + 4;
      }

      *(void *)(a1 + 752) = v134;
    }

    unsigned __int8 v277 = 0;
    uint64_t v144 = sub_1002E6D7C();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v144 + 384LL))( v144,  a1,  &v277))
    {
      int v145 = v277;
      *(_BYTE *)(a1 + 743) = v277;
      *(_DWORD *)(a1 + 132_Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 1328) & 0xFFFFFFDF | (32 * v145);
      if ((sub_1003CF350((unsigned __int8 *)a1) & 1) == 0
        && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
      {
        sub_1006794C8();
      }
    }

    int v276 = 0;
    uint64_t v146 = sub_1002E6D7C();
    uint64_t v147 = sub_1002E6D7C();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v147 + 360LL))(v147, a1);
    int v275 = 0;
    uint64_t v148 = sub_1002E6D7C();
    char v274 = 0;
    uint64_t v149 = sub_1002E6D7C();
    (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v149 + 1232LL))(v149, a1, &v274);
    *(_BYTE *)(a1 + 960) = v274;
    unsigned __int8 v273 = 0;
    uint64_t v150 = sub_1002E6D7C();
    (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v150 + 1232LL))(v150, a1, &v273);
    int v151 = v273;
    *(_BYTE *)(a1 + 976) = v273;
    if (*(_BYTE *)(a1 + 960))
    {
      __n128 v152 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v153 = "is";
        if (!v151) {
          __int128 v153 = "is not";
        }
        LODWORD(__p[0]) = 136315138;
        *(void *)((char *)__p + 4) = v153;
        _os_log_impl( (void *)&_mh_execute_header,  v152,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter this is a guest device that %s in contacts",  (uint8_t *)__p,  0xCu);
      }

      LODWORD(__p[0]) = 0;
      uint64_t v154 = sub_1002E6D7C();
    }

    char v272 = 0;
    uint64_t v155 = sub_1002E6D7C();
    (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v155 + 1280LL))(v155, a1, &v272);
    *(_BYTE *)(a1 + 985) = v272;
    char v271 = 1;
    uint64_t v156 = sub_1002E6D7C();
    (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v156 + 1296LL))(v156, a1, &v271);
    *(_BYTE *)(a1 + 98_Block_object_dispose(va, 8) = v271;
    char v270 = 0;
    uint64_t v157 = sub_1002E6D7C();
    (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v157 + 1312LL))(v157, a1, &v270);
    *(_BYTE *)(a1 + 989) = v270;
    int v269 = 0;
    uint64_t v158 = sub_1002E6D7C();
    int v268 = 0;
    uint64_t v159 = sub_1002E6D7C();
    int v160 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v159 + 848LL))(v159, a1, &v268);
    if (!v160) {
      *(_DWORD *)(a1 + 792) = v268;
    }
    __int128 v161 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109376;
      DWORD1(__p[0]) = v160;
      WORD4(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 10) = v268;
      _os_log_impl( (void *)&_mh_execute_header,  v161,  OS_LOG_TYPE_DEFAULT,  "Read doubleTapAction result %d, int64_t value = %d",  (uint8_t *)__p,  0xEu);
    }

    unsigned __int8 v267 = 0;
    uint64_t v162 = sub_1002E6D7C();
    int v163 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v162 + 864LL))(v162, a1, &v267);
    if (!v163) {
      *(_BYTE *)(a1 + 796) = v267;
    }
    __int128 v164 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109376;
      DWORD1(__p[0]) = v163;
      WORD4(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 10) = v267;
      _os_log_impl( (void *)&_mh_execute_header,  v164,  OS_LOG_TYPE_DEFAULT,  "Read InEarDetectionEnabled result %d, int64_t value = %d",  (uint8_t *)__p,  0xEu);
    }

    int v266 = 0;
    uint64_t v165 = sub_1002E6D7C();
    int v166 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v165 + 880LL))(v165, a1, &v266);
    if (!v166) {
      *(_DWORD *)(a1 + 800) = v266;
    }
    __int128 v167 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a1, &v314);
      int v168 = v315 >= 0 ? &v314 : (__int128 *)v314;
      LODWORD(__p[0]) = 136446722;
      *(void *)((char *)__p + 4) = v168;
      WORD6(__p[0]) = 1024;
      *(_DWORD *)((char *)__p + 14) = v166;
      WORD1(__p[1]) = 1024;
      DWORD1(__p[1]) = v266;
      _os_log_impl( (void *)&_mh_execute_header,  v167,  OS_LOG_TYPE_DEFAULT,  "[%{public}s] Read smart route result %d, mode = %d",  (uint8_t *)__p,  0x18u);
      if (SHIBYTE(v315) < 0) {
        operator delete((void *)v314);
      }
    }

    int v265 = 0;
    uint64_t v169 = sub_1002E6D7C();
    __int128 v314 = 0uLL;
    uint64_t v315 = 0LL;
    uint64_t v170 = sub_1002E6D7C();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(void *)v170 + 936LL))(v170, a1, &v314))
    {
      uint64_t v171 = a1 + 1176;
      if ((__int128 *)(a1 + 1176) != &v314) {
        sub_1003E63F8( a1 + 1176,  (std::string *)v314,  *((__int128 **)&v314 + 1),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v314 + 1) - v314) >> 3));
      }
      int v172 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v173 = *(void *)v171;
        v174 = (void *)(*(void *)v171 + 72LL);
        std::string v175 = (void *)(v173 + 240);
        LODWORD(__p[0]) = 141558531;
        *(void *)((char *)__p + 4) = 1752392040LL;
        WORD6(__p[0]) = 2081;
        *(void *)((char *)__p + 14) = v174;
        WORD3(__p[1]) = 2082;
        *((void *)&__p[1] + 1) = v175;
        _os_log_impl( (void *)&_mh_execute_header,  v172,  OS_LOG_TYPE_DEFAULT,  "AACPVersionInfo initialized: serial number %{private, mask.hash}s firmware version %{public}s",  (uint8_t *)__p,  0x20u);
      }
    }

    memset(&v264, 0, sizeof(v264));
    uint64_t v176 = sub_1002E6D7C();
    *(void *)&__int128 v317 = 0LL;
    memset(__p, 0, sizeof(__p));
    sub_10002418C(&__p[2], "");
    uint64_t v177 = sub_1002E6D7C();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, _OWORD *))(*(void *)v177 + 968LL))(v177, a1, __p))
    {
      *(_OWORD *)(a1 + 1224) = __p[0];
      *(_OWORD *)(a1 + 1236) = *(_OWORD *)((char *)__p + 12);
      std::string::operator=((std::string *)(a1 + 1256), (const std::string *)&__p[2]);
    }

    int v263 = 0;
    uint64_t v178 = sub_1002E6D7C();
    int v262 = 0;
    uint64_t v179 = sub_1002E6D7C();
    int v261 = 0;
    uint64_t v180 = sub_1002E6D7C();
    int v260 = 0;
    uint64_t v181 = sub_1002E6D7C();
    int v259 = 0;
    uint64_t v182 = sub_1002E6D7C();
    int v258 = 0;
    uint64_t v183 = sub_1002E6D7C();
    char v257 = 0;
    uint64_t v184 = sub_1002E6D7C();
    int v256 = 0;
    uint64_t v185 = sub_1002E6D7C();
    char v255 = 0;
    uint64_t v186 = sub_1002E6D7C();
    uint64_t v254 = 0LL;
    uint64_t v187 = sub_1002E6D7C();
    int v253 = 0;
    uint64_t v188 = sub_1002E6D7C();
    char v252 = 0;
    uint64_t v189 = sub_1002E6D7C();
    v249 = 0LL;
    v250 = 0LL;
    uint64_t v251 = 0LL;
    uint64_t v190 = sub_1002E6D7C();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, void **))(*(void *)v190 + 1176LL))(v190, a1, &v249)
      && (void **)(a1 + 912) != &v249)
    {
      sub_1003E65C4((void *)(a1 + 912), (char *)v249, v250, v250 - (_BYTE *)v249);
    }

    v246 = 0LL;
    v247 = 0LL;
    uint64_t v248 = 0LL;
    uint64_t v191 = sub_1002E6D7C();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, void **))(*(void *)v191 + 1192LL))(v191, a1, &v246)
      && (void **)(a1 + 936) != &v246)
    {
      sub_100272430((char *)(a1 + 936), (char *)v246, (uint64_t)v247, (v247 - (_BYTE *)v246) >> 2);
    }

    int v245 = 0;
    uint64_t v192 = sub_1002E6D7C();
    int v244 = 0;
    uint64_t v193 = sub_1002E6D7C();
    float v243 = 0.0;
    uint64_t v194 = sub_1002E6D7C();
    int v195 = (*(uint64_t (**)(uint64_t, uint64_t, float *))(*(void *)v194 + 1352LL))(v194, a1, &v243);
    float v196 = v243;
    if (v195) {
      float v196 = -1.0;
    }
    *(float *)(a1 + 1124) = v196;
    uint64_t v197 = sub_1002E6D7C();
    v240 = 0LL;
    v241 = 0LL;
    uint64_t v242 = 0LL;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v197 + 1368LL))(v197, a1, &v240);
    if (v240)
    {
      v241 = v240;
      operator delete(v240);
    }

    sub_100272430((char *)(a1 + 1128), 0LL, 0LL, 0LL);
    *(void *)(a1 + 376) = 0LL;
    *(void *)(a1 + 384) = 0LL;
    char v239 = 0;
    uint64_t v198 = sub_1002E6D7C();
    int v199 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v198 + 1384LL))(v198, a1, &v239);
    if (v199)
    {
      v200 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v308 = 67109120;
        *(_DWORD *)&v308[4] = v199;
        _os_log_impl( (void *)&_mh_execute_header,  v200,  OS_LOG_TYPE_DEFAULT,  "Failed to read readEncryptionKeySize result: %d",  v308,  8u);
      }
    }

    else
    {
      *(_BYTE *)(a1 + 996) = v239;
    }

    char v238 = 0;
    uint64_t v201 = sub_1002E6D7C();
    int v202 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v201 + 1400LL))(v201, a1, &v238);
    if (v202)
    {
      v203 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v308 = 67109120;
        *(_DWORD *)&v308[4] = v202;
        _os_log_impl( (void *)&_mh_execute_header,  v203,  OS_LOG_TYPE_DEFAULT,  "Failed to read readEncryptionMode result: %d",  v308,  8u);
      }
    }

    else
    {
      *(_BYTE *)(a1 + 997) = v238;
    }

    int v237 = 0;
    uint64_t v204 = sub_1002E6D7C();
    uint64_t v205 = sub_1002E6BF0();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v205 + 384LL))(v205))
    {
      int v206 = sub_1003CF3A0(a1);
      v207 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v308 = 67109120;
        *(_DWORD *)&v308[4] = v206;
        _os_log_impl( (void *)&_mh_execute_header,  v207,  OS_LOG_TYPE_DEFAULT,  "Number of services %d supporting PSM/RFCOMM",  v308,  8u);
      }
    }

    int v236 = 0;
    uint64_t v208 = sub_1002E6D7C();
    int v209 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v208 + 1432LL))(v208, a1, &v236);
    v210 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v211 = *(_DWORD *)(a1 + 1364);
      *(_DWORD *)v308 = 67109120;
      *(_DWORD *)&v308[4] = v211;
      _os_log_impl((void *)&_mh_execute_header, v210, OS_LOG_TYPE_DEFAULT, "Read hidDeviceBehavior : %d", v308, 8u);
    }

    if (v209)
    {
      v212 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        int v213 = *(_DWORD *)(a1 + 1364);
        *(_DWORD *)v308 = 67109120;
        *(_DWORD *)&v308[4] = v213;
        _os_log_impl( (void *)&_mh_execute_header,  v212,  OS_LOG_TYPE_DEFAULT,  "Failed to read hidDeviceBehavior : %d",  v308,  8u);
      }
    }

    else
    {
      *(_DWORD *)(a1 + 1364) = v236;
    }

    unsigned __int8 v235 = 0;
    uint64_t v214 = sub_1002E6D7C();
    int v215 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v214 + 1448LL))(v214, a1, &v235);
    v216 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v308 = 67109120;
      *(_DWORD *)&v308[4] = v235;
      _os_log_impl((void *)&_mh_execute_header, v216, OS_LOG_TYPE_DEFAULT, "Read userSelectedDeviceType : %d", v308, 8u);
    }

    if (v215)
    {
      v217 = (os_log_s *)qword_1008F7578;
      BOOL v218 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
      int v219 = 0;
      if (v218)
      {
        *(_DWORD *)v308 = 67109120;
        *(_DWORD *)&v308[4] = v215;
        _os_log_impl( (void *)&_mh_execute_header,  v217,  OS_LOG_TYPE_DEFAULT,  "Failed to read userSelectedDeviceType due to error: %d",  v308,  8u);
        int v219 = 0;
      }
    }

    else
    {
      int v219 = v235;
    }

    *(_DWORD *)(a1 + 1420) = v219;
    int v234 = 0;
    uint64_t v220 = sub_1002E6D7C();
    int v221 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v220 + 1480LL))(v220, a1, &v234);
    v222 = (os_log_s *)qword_1008F7578;
    if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_307;
    }
    sub_10002418C(v308, off_100895D08[v234]);
    int v223 = v309;
    v224 = *(uint8_t **)v308;
    sub_1003CF00C(a1, v232);
    v225 = v308;
    if (v223 < 0) {
      v225 = v224;
    }
    if (v233 >= 0) {
      v226 = v232;
    }
    else {
      v226 = (void **)v232[0];
    }
    *(_DWORD *)v310 = 136315394;
    v311 = v225;
    __int16 v312 = 2082;
    v313 = v226;
    _os_log_impl( (void *)&_mh_execute_header,  v222,  OS_LOG_TYPE_DEFAULT,  "Read CarPlayType : %s for %{public}s",  v310,  0x16u);
    if (v233 < 0) {
      operator delete(v232[0]);
    }
    if (v309 < 0)
    {
      operator delete(*(void **)v308);
      if (v221) {
        goto LABEL_308;
      }
    }

    else
    {
LABEL_307:
      if (v221)
      {
LABEL_308:
        v227 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v308 = 67109120;
          *(_DWORD *)&v308[4] = v221;
          _os_log_impl( (void *)&_mh_execute_header,  v227,  OS_LOG_TYPE_DEFAULT,  "Failed to read CarPlayType due to error: %d",  v308,  8u);
        }

        if (sub_1003D0070(a1, 0x40000u) != 4)
        {
          *(_DWORD *)(a1 + 150_Block_object_dispose(va, 8) = 0;
LABEL_316:
          if (v246)
          {
            v247 = v246;
            operator delete(v246);
          }

          if (v249)
          {
            v250 = (char *)v249;
            operator delete(v249);
          }

          if (SBYTE7(v317) < 0) {
            operator delete(*(void **)&__p[2]);
          }
          *(void *)&__p[0] = &v314;
          sub_100024304((void ***)__p);
          sub_10023BF24((uint64_t)&v303, v304);
          return sub_100242FAC((uint64_t)v307);
        }

        int v228 = 1;
LABEL_315:
        *(_DWORD *)(a1 + 150_Block_object_dispose(va, 8) = v228;
        goto LABEL_316;
      }
    }

    int v228 = v234;
    goto LABEL_315;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_10067954C();
  }
  return sub_100242FAC((uint64_t)v307);
}

void sub_1003CEAB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,char a55)
{
}

uint64_t sub_1003CED44(uint64_t a1)
{
  v16[0] = 0LL;
  v16[1] = 0LL;
  sub_100242F28((uint64_t)v16, a1);
  int v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Clearing SDP local memory database", buf, 2u);
  }

  uint64_t v3 = *(void **)(a1 + 584);
  uint64_t v4 = (void *)(a1 + 592);
  if (v3 != (void *)(a1 + 592))
  {
    do
    {
      *(void *)std::string buf = 0LL;
      uint64_t v14 = 0LL;
      uint64_t v15 = 0LL;
      sub_1002DBF7C((uint64_t)buf, (uint64_t)(v3 + 5));
      int v5 = *(void ***)buf;
      if (*(void ***)buf != &v14)
      {
        do
        {
          __int128 v12 = *(_OWORD *)(v5 + 5);
          sub_10025EB84(&v12);
          int v6 = v5[1];
          if (v6)
          {
            do
            {
              uint64_t v7 = (void **)v6;
              int v6 = (void *)*v6;
            }

            while (v6);
          }

          else
          {
            do
            {
              uint64_t v7 = (void **)v5[2];
              BOOL v8 = *v7 == v5;
              int v5 = v7;
            }

            while (!v8);
          }

          int v5 = v7;
        }

        while (v7 != &v14);
      }

      sub_10023BF24((uint64_t)buf, v14);
      uint64_t v14 = 0LL;
      uint64_t v15 = 0LL;
      *(void *)std::string buf = &v14;
      sub_10025EB84((_BYTE *)v3[4]);
      free((void *)v3[4]);
      sub_10023BF24((uint64_t)buf, v14);
      uint64_t v9 = (void *)v3[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          uint64_t v10 = (void *)v3[2];
          BOOL v8 = *v10 == (void)v3;
          uint64_t v3 = v10;
        }

        while (!v8);
      }

      uint64_t v3 = v10;
    }

    while (v10 != v4);
  }

  sub_10025506C(a1 + 584, *(void **)(a1 + 592));
  *(void *)(a1 + 584) = v4;
  *(_OWORD *)(a1 + 592) = 0u;
  if ([*(id *)(a1 + 1304) count]) {
    [*(id *)(a1 + 1304) removeAllObjects];
  }
  return sub_100242FAC((uint64_t)v16);
}

void sub_1003CEEE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1003CEF18(unsigned __int8 *a1)
{
  uint64_t result = sub_1003CF350(a1);
  if ((result & 1) == 0)
  {
    uint64_t v3 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)a1, __p);
      if (v7 >= 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Removing device %{public}s from disk",  buf,  0xCu);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v5 = sub_1002E6D7C();
    return (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v5 + 24LL))(v5, a1);
  }

  return result;
}

void sub_1003CF00C(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v32 = *(_DWORD *)(a1 + 128);
  __int16 v33 = *(_WORD *)(a1 + 132);
  uint64_t v4 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 160LL))(v4))
  {
    memset(&v31, 0, sizeof(v31));
    sub_1003D0100(a1, (uint64_t)&v31);
    int v28 = 0LL;
    std::string::size_type v29 = 0LL;
    uint64_t v30 = 0LL;
    sub_1003D01A0(a1, (uint64_t)&v28);
    v27[0] = 0LL;
    v27[1] = 0LL;
    sub_100242F28((uint64_t)v27, a1);
    std::string::size_type size = v31.__r_.__value_.__s.__size_;
    if ((v31.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type size = v31.__r_.__value_.__l.__size_;
    }
    if (!size) {
      std::string::operator=(&v31, (const std::string *)(a1 + 200));
    }
    sub_100242F54((uint64_t)v27);
    sub_1003FE1B4((unsigned __int8 *)&v32, &v21);
    int v6 = std::string::append(&v21, " ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    if (v30 >= 0) {
      BOOL v8 = (const std::string::value_type *)&v28;
    }
    else {
      BOOL v8 = v28;
    }
    if (v30 >= 0) {
      std::string::size_type v9 = HIBYTE(v30);
    }
    else {
      std::string::size_type v9 = v29;
    }
    uint64_t v10 = std::string::append(&v22, v8, v9);
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v12 = std::string::append(&v23, "");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v14 = std::string::append(&v24, " - ");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    if ((v31.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v16 = &v31;
    }
    else {
      uint64_t v16 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    uint64_t v17 = std::string::append(&v25, (const std::string::value_type *)v16);
    __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0LL;
    v17->__r_.__value_.__l.__cap_ = 0LL;
    v17->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v19 = std::string::append(&v26, "");
    __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    a2[2] = v19->__r_.__value_.__l.__cap_;
    *(_OWORD *)a2 = v20;
    v19->__r_.__value_.__l.__size_ = 0LL;
    v19->__r_.__value_.__l.__cap_ = 0LL;
    v19->__r_.__value_.__r.__words[0] = 0LL;
    sub_100242FAC((uint64_t)v27);
    if (SHIBYTE(v30) < 0) {
      operator delete(v28);
    }
  }

  else
  {
    sub_1003FE1B4((unsigned __int8 *)&v32, a2);
  }

void sub_1003CF278( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, void *__p, uint64_t a38, int a39, __int16 a40, char a41, char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  sub_100242FAC(v42 - 104);
  _Unwind_Resume(a1);
}

uint64_t sub_1003CF350(unsigned __int8 *a1)
{
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_100895BC8);
  }
  return sub_100535618((uint64_t)off_1008D67B0, a1);
}

uint64_t sub_1003CF3A0(uint64_t a1)
{
  v75[0] = 0LL;
  v75[1] = 0LL;
  sub_100242F28((uint64_t)v75, a1);
  if ([*(id *)(a1 + 1304) count])
  {
    [*(id *)(a1 + 1304) removeAllObjects];
  }

  else
  {
    uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    int v2 = *(void **)(a1 + 1304);
    *(void *)(a1 + 1304) = v1;
  }

  uint64_t v3 = *(void **)(a1 + 584);
  __int16 v68 = (void *)(a1 + 592);
  if (v3 != (void *)(a1 + 592))
  {
    uint64_t v4 = 0LL;
LABEL_6:
    __int128 v74 = 0uLL;
    uint64_t v69 = v3;
    __int128 v74 = *(_OWORD *)v3[4];
    __int128 v92 = 0uLL;
    uint64_t v93 = 0LL;
    int v5 = sub_1003D4C9C(a1, (uint64_t)&v74, 4u, (void **)&v92);
    uint64_t v6 = *((void *)&v92 + 1);
    uint64_t v7 = v92;
    if ((void)v92 == *((void *)&v92 + 1)) {
      int v8 = 0;
    }
    else {
      int v8 = v5;
    }
    if (v8 != 1)
    {
LABEL_83:
      if (!v7) {
        goto LABEL_85;
      }
LABEL_84:
      *((void *)&v92 + 1) = v7;
      operator delete((void *)v7);
      goto LABEL_85;
    }

    while (1)
    {
      unint64_t v9 = *(unsigned __int16 *)(v7 + 2);
      if ((v9 & 1) == 0)
      {
        if (*(_WORD *)(v7 + 2)) {
          break;
        }
      }

void sub_1003CFED4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, void *a46, uint64_t a47, int a48, __int16 a49, char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
}

uint64_t sub_1003D0070(uint64_t a1, unsigned int a2)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1);
  uint64_t v4 = *(void *)(a1 + 336);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = a1 + 336;
  do
  {
    unsigned int v6 = *(_DWORD *)(v4 + 28);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      int v8 = (uint64_t *)v4;
    }
    else {
      int v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }

  while (*v8);
  if (v5 != a1 + 336 && *(_DWORD *)(v5 + 28) <= a2) {
    uint64_t v9 = *(unsigned int *)(v5 + 32);
  }
  else {
LABEL_12:
  }
    uint64_t v9 = 0LL;
  sub_100242FAC((uint64_t)v11);
  return v9;
}

uint64_t sub_1003D0100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  uint64_t v4 = a1 + 280;
  if (*(char *)(a1 + 303) < 0)
  {
    unint64_t v5 = *(void *)(a1 + 288);
    if (v5) {
      goto LABEL_8;
    }
    goto LABEL_5;
  }

  if (!*(_BYTE *)(a1 + 303))
  {
LABEL_5:
    uint64_t v4 = a1 + 240;
    unint64_t v5 = *(void *)(a1 + 248);
LABEL_8:
    sub_100024238((_BYTE *)a2, *(void **)v4, v5);
    return sub_100242FAC((uint64_t)v7);
  }

void sub_1003D018C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D01A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  if (*(char *)(a1 + 263) < 0)
  {
    sub_100024238((_BYTE *)a2, *(void **)(a1 + 240), *(void *)(a1 + 248));
  }

  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 240);
    *(void *)(a2 + 16) = *(void *)(a1 + 256);
  }

  return sub_100242FAC((uint64_t)v5);
}

void sub_1003D020C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D0220@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *a2 = *(_OWORD *)(a1 + 136);
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003D0268(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 176);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003D02AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  if (*(char *)(a1 + 303) < 0)
  {
    sub_100024238((_BYTE *)a2, *(void **)(a1 + 280), *(void *)(a1 + 288));
  }

  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 280);
    *(void *)(a2 + 16) = *(void *)(a1 + 296);
  }

  return sub_100242FAC((uint64_t)v5);
}

void sub_1003D0318( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D032C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  if (*(char *)(a1 + 223) < 0)
  {
    sub_100024238((_BYTE *)a2, *(void **)(a1 + 200), *(void *)(a1 + 208));
  }

  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 200);
    *(void *)(a2 + 16) = *(void *)(a1 + 216);
  }

  return sub_100242FAC((uint64_t)v5);
}

void sub_1003D0398( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D03AC(uint64_t a1)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, a1);
  uint64_t v2 = *(void **)(a1 + 328);
  uint64_t v3 = (void *)(a1 + 336);
  if (v2 == (void *)(a1 + 336))
  {
    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v4 = 0LL;
    do
    {
      if (*((_DWORD *)v2 + 8) == 4) {
        uint64_t v4 = *((_DWORD *)v2 + 7) | v4;
      }
      unint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          unsigned int v6 = v5;
          unint64_t v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          unsigned int v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }

        while (!v7);
      }

      uint64_t v2 = v6;
    }

    while (v6 != v3);
  }

  sub_100242FAC((uint64_t)v9);
  return v4;
}

uint64_t sub_1003D0454(uint64_t a1, _DWORD *a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  if (*(void *)(a1 + 312) || *(void *)(a1 + 320))
  {
    *a2 = *(_DWORD *)(a1 + 304);
    uint64_t v4 = 1LL;
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  sub_100242FAC((uint64_t)v6);
  return v4;
}

uint64_t sub_1003D04BC(void *a1)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, (uint64_t)a1);
  if (a1[23]) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = a1[24] != 0LL;
  }
  if (a1[28])
  {
    v2 |= 2u;
  }

  else if (a1[29])
  {
    v2 |= 2u;
  }

  if (a1[33])
  {
    v2 |= 8u;
  }

  else if (a1[34])
  {
    v2 |= 8u;
  }

  if (a1[44])
  {
    uint64_t v3 = v2 | 4;
  }

  else if (a1[45])
  {
    uint64_t v3 = v2 | 4;
  }

  else
  {
    uint64_t v3 = v2;
  }

  sub_100242FAC((uint64_t)v5);
  return v3;
}

uint64_t sub_1003D0578(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(char *)(a1 + 152);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003D05BC(uint64_t a1, int a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 1420) = a2;
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1456LL))(v4, a1, *(unsigned __int8 *)(a1 + 1420));
  return sub_100242FAC((uint64_t)v6);
}

void sub_1003D0618( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D062C(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 1420);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

BOOL sub_1003D0670(uint64_t a1)
{
  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_100895BE8);
  }
  return sub_1003C9A50((uint64_t)off_1008D67E0, a1);
}

BOOL sub_1003D06C0(uint64_t a1)
{
  char v7 = 0;
  sub_100242CA4(&v7);
  uint64_t v6 = 0LL;
  if (sub_10010EEE0(a1 + 128, &v6))
  {
    BOOL v2 = 1LL;
  }

  else
  {
    int v3 = *(unsigned __int8 *)(v6 + 278);
    BOOL v2 = *(_BYTE *)(v6 + 278) != 0;
    uint64_t v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HDR link is connected %d", buf, 8u);
    }
  }

  sub_100242CD8(&v7);
  return v2;
}

void sub_1003D07AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL sub_1003D07C8(uint64_t a1)
{
  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_100895BE8);
  }
  return sub_1003C9AE0((uint64_t)off_1008D67E0, a1);
}

unsigned int *sub_1003D0818(uint64_t a1)
{
  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_100895BE8);
  }
  uint64_t result = (unsigned int *)sub_1003C9FF4((uint64_t)off_1008D67E0, a1);
  if (result) {
    return (unsigned int *)*result;
  }
  return result;
}

BOOL sub_1003D0874(uint64_t a1)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  int v2 = *(_DWORD *)(a1 + 176);
  BOOL v4 = v2 == 17 || v2 == 22;
  sub_100242FAC((uint64_t)v6);
  return v4;
}

uint64_t sub_1003D08C4(uint64_t a1, uint64_t a2)
{
  if (qword_1008D92C0 != -1) {
    dispatch_once(&qword_1008D92C0, &stru_100895C08);
  }
  uint64_t v4 = sub_100292FBC(qword_1008D92B8, 2);
  int v32 = 0LL;
  v33[0] = 0LL;
  v33[1] = 0LL;
  sub_10054FAA4(v4, (uint64_t *)&v32);
  unint64_t v5 = v32;
  if (v32 == v33)
  {
LABEL_49:
    uint64_t v27 = 0LL;
  }

  else
  {
    uint64_t v29 = a1;
    while (1)
    {
      uint64_t v6 = (char *)(v5 + 4);
      char v7 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEBUG))
      {
        sub_1003D01A0(a1, (uint64_t)v30);
        std::string v21 = v30;
        if (v31 < 0) {
          std::string v21 = (void **)v30[0];
        }
        else {
          std::string v22 = v5 + 4;
        }
        int v26 = *((unsigned __int16 *)v5 + 28);
        *(_DWORD *)std::stringbuf::string_type __p = 136446978;
        *(void *)&__p[4] = v21;
        *(_WORD *)&_BYTE __p[12] = 2080;
        *(void *)&__p[14] = v22;
        __int16 v35 = 1024;
        int v36 = a2;
        __int16 v37 = 1024;
        int v38 = v26;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Identification - isAutomationDongle comparing Friendly Names: %{public}s and %s, and Chipset Manufactu rer IDs: %d and %d",  __p,  0x22u);
        if (v31 < 0) {
          operator delete(v30[0]);
        }
      }

      if (*((char *)v5 + 55) < 0)
      {
        if (!v5[5]) {
          goto LABEL_39;
        }
      }

      else if (!*((_BYTE *)v5 + 55))
      {
        goto LABEL_39;
      }

      sub_1003D01A0(a1, (uint64_t)__p);
      char v8 = HIBYTE(v35);
      int v9 = *(void **)__p;
      if (v35 >= 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = *(_BYTE **)__p;
      }
      if (*((char *)v5 + 55) >= 0)
      {
        int64_t v11 = *((unsigned __int8 *)v5 + 55);
      }

      else
      {
        uint64_t v6 = v5[4];
        int64_t v11 = (int64_t)v5[5];
      }

      if (!v11)
      {
LABEL_35:
        BOOL v13 = *((unsigned __int16 *)v5 + 28) == (_DWORD)a2;
        goto LABEL_36;
      }

      if (v35 >= 0) {
        int64_t v12 = HIBYTE(v35);
      }
      else {
        int64_t v12 = *(void *)&__p[8];
      }
      if (v12 < v11)
      {
        BOOL v13 = 0;
        goto LABEL_36;
      }

      uint64_t v14 = a2;
      __int128 v15 = &v10[v12];
      int v16 = *v6;
      uint64_t v17 = v10;
      while (1)
      {
        int64_t v18 = v12 - v11;
        if (v18 == -1 || (uint64_t v19 = (char *)memchr(v17, v16, v18 + 1)) == 0LL)
        {
LABEL_27:
          BOOL v13 = 0;
LABEL_28:
          a2 = v14;
          a1 = v29;
          goto LABEL_36;
        }

        __int128 v20 = v19;
        if (!memcmp(v19, v6, v11)) {
          break;
        }
        uint64_t v17 = v20 + 1;
        int64_t v12 = v15 - (v20 + 1);
        if (v12 < v11) {
          goto LABEL_27;
        }
      }

      BOOL v13 = 0;
      if (v20 == v15) {
        goto LABEL_28;
      }
      a2 = v14;
      a1 = v29;
      if (v20 - v10 != -1) {
        goto LABEL_35;
      }
LABEL_36:
      if (v8 < 0) {
        operator delete(v9);
      }
      if (v13) {
        break;
      }
LABEL_39:
      std::string v23 = v5[1];
      if (v23)
      {
        do
        {
          std::string v24 = (char **)v23;
          std::string v23 = *(char **)v23;
        }

        while (v23);
      }

      else
      {
        do
        {
          std::string v24 = (char **)v5[2];
          BOOL v25 = *v24 == (char *)v5;
          unint64_t v5 = v24;
        }

        while (!v25);
      }

      unint64_t v5 = v24;
      if (v24 == v33) {
        goto LABEL_49;
      }
    }

    uint64_t v27 = 1LL;
  }

  sub_10023E78C((uint64_t)&v32, v33[0]);
  return v27;
}

void sub_1003D0BDC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
}

BOOL sub_1003D0C00(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  BOOL v2 = *(_DWORD *)(a1 + 176) == 25;
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003D0C4C(uint64_t a1, _OWORD *a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  if ((_OWORD *)(a1 + 136) != a2) {
    *(_OWORD *)(a1 + 136) = *a2;
  }
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003D0CA0(uint64_t a1, char a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 984) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003D0CE4(uint64_t a1, __int16 a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_WORD *)(a1 + 986) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003D0D28(uint64_t a1, char a2, _OWORD *a3)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  *(_BYTE *)(a1 + 152) = a2;
  if ((_OWORD *)(a1 + 160) != a3) {
    *(_OWORD *)(a1 + 160) = *a3;
  }
  return sub_100242FAC((uint64_t)v7);
}

uint64_t sub_1003D0D8C(uint64_t a1, int a2, _OWORD *a3)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1);
  *(_DWORD *)(a1 + 176) = a2;
  if ((_OWORD *)(a1 + 184) != a3) {
    *(_OWORD *)(a1 + 184) = *a3;
  }
  uint64_t v6 = *(void *)(a1 + 520);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 16LL))(v6);
  }
  return sub_100242FAC((uint64_t)v8);
}

void sub_1003D0E04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D0E18(uint64_t a1, const std::string *a2, _OWORD *a3)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, a1);
  uint64_t v6 = (_OWORD *)(a1 + 224);
  if (*(void *)(a1 + 224) || *(void *)(a1 + 232))
  {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 223);
    if ((v7 & 0x80u) == 0LL) {
      uint64_t v8 = *(unsigned __int8 *)(a1 + 223);
    }
    else {
      uint64_t v8 = *(void *)(a1 + 208);
    }
    std::string::size_type size = a2->__r_.__value_.__s.__size_;
    int v10 = (char)size;
    if ((size & 0x80u) != 0LL) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    if (v8 == size)
    {
      int64_t v11 = (const void **)(a1 + 200);
      if (v10 >= 0) {
        int64_t v12 = a2;
      }
      else {
        int64_t v12 = (const std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if ((v7 & 0x80) == 0)
      {
        if (*(_BYTE *)(a1 + 223))
        {
          while (*(unsigned __int8 *)v11 == v12->__r_.__value_.__s.__data_[0])
          {
            int64_t v11 = (const void **)((char *)v11 + 1);
            int64_t v12 = (const std::string *)((char *)v12 + 1);
            if (!--v7) {
              goto LABEL_22;
            }
          }

          goto LABEL_18;
        }

void sub_1003D0F4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D0F60(std::string *a1, const std::string *a2, std::string *a3)
{
  v35[0] = 0LL;
  v35[1] = 0LL;
  sub_100242F28((uint64_t)v35, (uint64_t)a1);
  int v32 = 0LL;
  unint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
  sub_1003A8B1C(a2, &v32);
  uint64_t v29 = 0LL;
  unint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  sub_1003D1364(a1, &v29);
  memset(&__str, 0, sizeof(__str));
  char v6 = HIBYTE(v31);
  if (v31 >= 0) {
    unint64_t v7 = HIBYTE(v31);
  }
  else {
    unint64_t v7 = v30;
  }
  uint64_t v8 = (std::string *)&v32;
  if (v7) {
    uint64_t v8 = (std::string *)&v29;
  }
  else {
    char v6 = HIBYTE(v34);
  }
  if (v6 < 0)
  {
    if (v7) {
      unint64_t v9 = v30;
    }
    else {
      unint64_t v9 = v33;
    }
    sub_100024238(&__str, v8->__r_.__value_.__l.__data_, v9);
  }

  else
  {
    std::string __str = *v8;
  }

  int v10 = a1 + 11;
  if (a1[11].__r_.__value_.__r.__words[0] || a1[11].__r_.__value_.__l.__size_)
  {
    uint64_t size = a1[10].__r_.__value_.__s.__size_;
    if ((size & 0x80u) == 0LL) {
      std::string::size_type v12 = a1[10].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v12 = a1[10].__r_.__value_.__l.__size_;
    }
    std::string::size_type v13 = __str.__r_.__value_.__s.__size_;
    if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v13 = __str.__r_.__value_.__l.__size_;
    }
    if (v12 == v13)
    {
      p_data = (const void **)&a1[10].__r_.__value_.__l.__data_;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((size & 0x80) == 0)
      {
        if (a1[10].__r_.__value_.__s.__size_)
        {
          while (*(unsigned __int8 *)p_data == p_str->__r_.__value_.__s.__data_[0])
          {
            p_data = (const void **)((char *)p_data + 1);
            p_str = (std::string *)((char *)p_str + 1);
            if (!--size) {
              goto LABEL_48;
            }
          }

          goto LABEL_30;
        }

void sub_1003D12E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  sub_100242FAC(v36 - 96);
  _Unwind_Resume(a1);
}

void *sub_1003D1364@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[97];
  if ((v2 & 0x800) != 0)
  {
    int v3 = "DUALSHOCK 4 Wireless Controller";
  }

  else
  {
    if ((v2 & 0x2000) == 0)
    {
      *a2 = 0LL;
      a2[1] = 0LL;
      a2[2] = 0LL;
      return result;
    }

    int v3 = "DualSense Wireless Controller";
  }

  return sub_10002418C(a2, v3);
}

void sub_1003D1398(uint64_t a1)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895B68);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 740))
    {
      int v42 = *(_DWORD *)(a1 + 716);
      __int128 v41 = *(_OWORD *)(a1 + 700);
      if (*(_DWORD *)(a1 + 1076) != 76
        || (unsigned int v2 = *(_DWORD *)(a1 + 1080) - 8194, v2 > 0x1D)
        || ((1 << v2) & 0x20037F9B) == 0)
      {
        if (!*(_BYTE *)(a1 + 1069) || (*(_BYTE *)(a1 + 1089) & 0x10) == 0) {
          goto LABEL_25;
        }
      }

      __p[0] = 0LL;
      __p[1] = 0LL;
      sub_100242F28((uint64_t)__p, a1);
      int v3 = *(_DWORD *)(a1 + 696);
      sub_100242FAC((uint64_t)__p);
      if (!v3) {
        goto LABEL_25;
      }
      __int128 v39 = 0u;
      __int128 v40 = 0u;
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      __int128 v29 = 0u;
      __int128 v30 = 0u;
      __int128 v27 = 0u;
      __int128 v28 = 0u;
      __int128 v26 = 0u;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      __int128 v23 = 0u;
      memset(__p, 0, sizeof(__p));
      uint64_t v4 = sub_1002E6D7C();
      if ((*(unsigned int (**)(uint64_t, uint64_t, void **, uint64_t))(*(void *)v4 + 80LL))( v4,  a1,  __p,  80LL))
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
          sub_100679578();
        }
        goto LABEL_24;
      }

      int v7 = DWORD2(v24);
      *(void *)std::string buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1);
      int v8 = *(_DWORD *)(a1 + 696);
      sub_100242FAC((uint64_t)buf);
      if (v7 == v8)
      {
LABEL_24:
        sub_100328B0C((uint64_t)__p);
LABEL_25:
        unint64_t v9 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C(a1, buf);
          if (v21 >= 0) {
            int v10 = buf;
          }
          else {
            int v10 = *(_BYTE **)buf;
          }
          LODWORD(__p[0]) = 136446722;
          *(void **)((char *)__p + 4) = v10;
          WORD2(__p[1]) = 1042;
          *(_DWORD *)((char *)&__p[1] + 6) = 20;
          WORD1(__p[2]) = 2098;
          *(void **)((char *)&__p[2] + 4) = &v41;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Identification - Identification hash exists for device %{public}s, primary hash %{public}.20P",  (uint8_t *)__p,  0x1Cu);
          if (SHIBYTE(v21) < 0) {
            operator delete(*(void **)buf);
          }
        }

        return;
      }

      int64_t v11 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a1, v17);
        int v12 = v18;
        std::string::size_type v13 = (void **)v17[0];
        int v14 = DWORD2(v24);
        int v15 = sub_1003DB4C4(a1);
        uint64_t v16 = v17;
        *(_DWORD *)std::string buf = 136446722;
        if (v12 < 0) {
          uint64_t v16 = v13;
        }
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&_BYTE buf[12] = 1026;
        *(_DWORD *)&_BYTE buf[14] = v14;
        __int16 v20 = 1026;
        int v21 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Identification - Apple Audio Device - firmware version has changed for device %{public}s (old firmware version %{public}d, new firmware version %{public}d)- regenerating primary hash.",  buf,  0x18u);
        if (v18 < 0) {
          operator delete(v17[0]);
        }
      }

      *(_BYTE *)(a1 + 742) = 0;
      sub_1003DB62C(a1);
      sub_100328B0C((uint64_t)__p);
    }

    else
    {
      unint64_t v5 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a1, __p);
        char v6 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Identification - Identification hash does not exist for device %{public}s - generating.",  buf,  0xCu);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }

      sub_1003DB62C(a1);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
  {
    sub_1006795A4();
  }

void sub_1003D176C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100328B0C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D17A4(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 777) >> 3) & 1;
}

uint64_t sub_1003D17B0(uint64_t a1, const std::string *a2, int a3)
{
  v33[0] = 0LL;
  v33[1] = 0LL;
  sub_100242F28((uint64_t)v33, a1);
  memset(&__str, 0, sizeof(__str));
  sub_1003A8B1C(a2, &__str);
  int v6 = *(char *)(a1 + 263);
  if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __str.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v6 >= 0) {
    size_t v9 = *(unsigned __int8 *)(a1 + 263);
  }
  else {
    size_t v9 = *(void *)(a1 + 248);
  }
  if (v6 >= 0) {
    int v10 = (const void *)(a1 + 240);
  }
  else {
    int v10 = *(const void **)(a1 + 240);
  }
  if (v9 >= size) {
    size_t v11 = size;
  }
  else {
    size_t v11 = v9;
  }
  if (!memcmp(p_str, v10, v11) && v9 == size && v9 != 0)
  {
    std::string::assign((std::string *)(a1 + 280), "");
    uint64_t v18 = qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
      sub_1003CF00C(a1, __p);
      if (v41 >= 0) {
        __int16 v20 = __p;
      }
      else {
        __int16 v20 = *(_BYTE **)__p;
      }
      *(_DWORD *)std::string buf = 136315138;
      __int128 v35 = v20;
      int v21 = "Same username and name, empty out nickname for: %s";
      std::string v22 = (os_log_s *)v18;
      os_log_type_t v23 = OS_LOG_TYPE_INFO;
      uint32_t v24 = 12;
LABEL_47:
      _os_log_impl((void *)&_mh_execute_header, v22, v23, v21, buf, v24);
      if (v41 < 0) {
        operator delete(*(void **)__p);
      }
      goto LABEL_49;
    }

    goto LABEL_49;
  }

  uint64_t v14 = *(unsigned __int8 *)(a1 + 303);
  if ((v14 & 0x80u) == 0LL) {
    uint64_t v15 = *(unsigned __int8 *)(a1 + 303);
  }
  else {
    uint64_t v15 = *(void *)(a1 + 288);
  }
  if (v15 != size)
  {
LABEL_40:
    std::string::operator=((std::string *)(a1 + 280), &__str);
    uint64_t v25 = qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a1, __p);
      if (v41 >= 0) {
        __int128 v26 = __p;
      }
      else {
        __int128 v26 = *(_BYTE **)__p;
      }
      __int128 v27 = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int128 v27 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      __int128 v35 = v26;
      __int16 v36 = 2080;
      __int128 v37 = v27;
      int v21 = "User defined name for %s updated to %s";
      std::string v22 = (os_log_s *)v25;
      os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
      uint32_t v24 = 22;
      goto LABEL_47;
    }

void sub_1003D1B98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D1BD4(uint64_t a1, int a2)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1);
  int v4 = *(unsigned __int8 *)(a1 + 1436);
  *(_BYTE *)(a1 + 1436) = a2;
  unint64_t v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a1, __p);
    int v6 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "User routed changed: Device %{public}s, value %d",  buf,  0x12u);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  if (v4 != a2)
  {
    sub_100242F54((uint64_t)v10);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 15);
  }

  return sub_100242FAC((uint64_t)v10);
}

void sub_1003D1D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003D1D50(uint64_t a1, char **a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  return sub_100242FAC((uint64_t)v5);
}

void sub_1003D1DA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D1DBC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, a1);
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  int v4 = *(_BYTE **)(a1 + 1440);
  unint64_t v5 = *(_BYTE **)(a1 + 1448);
  size_t v6 = v5 - v4;
  if (v5 != v4)
  {
    sub_10023D39C(a2, v5 - v4);
    int v7 = (char *)a2[1];
    memmove(v7, v4, v6);
    a2[1] = &v7[v6];
  }

  return sub_100242FAC((uint64_t)v9);
}

void sub_1003D1E44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D1E58(uint64_t a1, uint64_t a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(void *)(a1 + 1472) = a2;
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1152LL))(v4, a1, *(void *)(a1 + 1472));
  return sub_100242FAC((uint64_t)v6);
}

void sub_1003D1EB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D1EC8(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(void *)(a1 + 1472);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003D1F0C(uint64_t a1, int a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  int v4 = *(_DWORD *)(a1 + 420);
  if (v4 != a2) {
    *(_DWORD *)(a1 + 420) = a2;
  }
  sub_100242F54((uint64_t)v6);
  if (v4 != a2)
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 3);
  }

  return sub_100242FAC((uint64_t)v6);
}

void sub_1003D1FB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D1FC4(uint64_t a1, unsigned int a2, int a3, _OWORD *a4, int a5)
{
  unsigned int v25 = a2;
  v24[0] = 0LL;
  v24[1] = 0LL;
  sub_100242F28((uint64_t)v24, a1);
  uint64_t v10 = *(void *)(a1 + 336);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = a1 + 336;
  do
  {
    unsigned int v12 = *(_DWORD *)(v10 + 28);
    BOOL v13 = v12 >= a2;
    if (v12 >= a2) {
      int v14 = (uint64_t *)v10;
    }
    else {
      int v14 = (uint64_t *)(v10 + 8);
    }
    if (v13) {
      uint64_t v11 = v10;
    }
    uint64_t v10 = *v14;
  }

  while (*v14);
  if (v11 == a1 + 336 || *(_DWORD *)(v11 + 28) > a2 || *(_DWORD *)(v11 + 32) != a3 && (a3 || a2 != 0x40000))
  {
LABEL_12:
    int v21 = &v25;
    *((_DWORD *)sub_1002DBB90((uint64_t **)(a1 + 328), &v25, (uint64_t)&unk_1006C2518, &v21) + _Block_object_dispose(va, 8) = a3;
    a5 = 1;
  }

  int v21 = 0LL;
  std::string v22 = 0LL;
  uint64_t v23 = 0LL;
  sub_1003E6844((uint64_t *)&v21, a1 + 328);
  if ((_OWORD *)(a1 + 352) != a4) {
    *(_OWORD *)(a1 + 352) = *a4;
  }
  sub_100242F54((uint64_t)v24);
  if ((a5 & sub_1003CF350((unsigned __int8 *)a1)) == 1)
  {
    uint64_t v15 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a1, __p);
      if (v20 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      __int128 v27 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Writing capabilities map to disk for device %{public}s",  buf,  0xCu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v17 = sub_1002E6D7C();
    (*(void (**)(uint64_t, uint64_t, unsigned int **))(*(void *)v17 + 248LL))(v17, a1, &v21);
  }

  *(_BYTE *)(a1 + 641) = 0;
  sub_10023BF24((uint64_t)&v21, v22);
  return sub_100242FAC((uint64_t)v24);
}

void sub_1003D21C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6 = va_arg(va1, void);
  int v8 = va_arg(va1, void *);
  uint64_t v9 = va_arg(va1, void);
  sub_10023BF24((uint64_t)va, v8);
  sub_100242FAC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D2200(uint64_t a1, uint64_t *a2)
{
  int v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    else {
      unint64_t v5 = (uint64_t *)*a2;
    }
    int v7 = 136315138;
    int v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Update magic paired device name to %s",  (uint8_t *)&v7,  0xCu);
  }

  if (qword_1008D5F40 != -1) {
    dispatch_once(&qword_1008D5F40, &stru_100895C28);
  }
  return sub_1003B243C((uint64_t)off_1008D5F38, a1);
}

uint64_t sub_1003D22F4(uint64_t a1)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  uint64_t v2 = *(void *)(a1 + 624);
  uint64_t v3 = *(void *)(a1 + 616);
  while (v2 != v3)
  {
    v2 -= 168LL;
    sub_1003E5FAC(a1 + 632, v2);
  }

  *(void *)(a1 + 624) = v3;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003D2368(uint64_t *a1, uint64_t a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, (uint64_t)a1);
  unint64_t v4 = a1[78];
  if (v4 >= a1[79])
  {
    uint64_t v5 = sub_1003E6B4C(a1 + 77, a2);
  }

  else
  {
    sub_1003E6C60(a1[78], a2);
    uint64_t v5 = v4 + 168;
    a1[78] = v4 + 168;
  }

  a1[78] = v5;
  return sub_100242FAC((uint64_t)v7);
}

void sub_1003D23E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1003D2408(uint64_t a1, uint64_t a2)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1);
  uint64_t v4 = *(void *)(a1 + 624);
  uint64_t v5 = *(void *)(a1 + 616);
  if (v4 != v5)
  {
    *(_BYTE *)a2 = *(_BYTE *)v5;
    sub_100532E50((__n128 *)(a2 + 1), (__n128 *)(v5 + 1));
    __int16 v6 = *(_WORD *)(v5 + 18);
    *(_BYTE *)(a2 + 20) = *(_BYTE *)(v5 + 20);
    *(_WORD *)(a2 + 1_Block_object_dispose(va, 8) = v6;
    std::string::operator=((std::string *)(a2 + 24), (const std::string *)(v5 + 24));
    int v7 = *(_DWORD *)(v5 + 48);
    *(_BYTE *)(a2 + 52) = *(_BYTE *)(v5 + 52);
    *(_DWORD *)(a2 + 4_Block_object_dispose(va, 8) = v7;
    std::string::operator=((std::string *)(a2 + 56), (const std::string *)(v5 + 56));
    *(_BYTE *)(a2 + 80) = *(_BYTE *)(v5 + 80);
    std::string::operator=((std::string *)(a2 + 88), (const std::string *)(v5 + 88));
    __int128 v8 = *(_OWORD *)(v5 + 112);
    __int128 v9 = *(_OWORD *)(v5 + 128);
    __int128 v10 = *(_OWORD *)(v5 + 144);
    *(_DWORD *)(a2 + 159) = *(_DWORD *)(v5 + 159);
    *(_OWORD *)(a2 + 12_Block_object_dispose(va, 8) = v9;
    *(_OWORD *)(a2 + 144) = v10;
    *(_OWORD *)(a2 + 112) = v8;
  }

  sub_100242FAC((uint64_t)v12);
  return v4 != v5;
}

void sub_1003D24E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D24F8(uint64_t a1)
{
  uint64_t v2 = sub_1002E6E00();
  LOBYTE(v36) = 0;
  uint64_t v3 = sub_1002E6E00();
  sub_10002418C(buf, "CATT");
  sub_10002418C(__p, "ForceDisableAll");
  (*(void (**)(uint64_t, uint8_t *, void **, __int128 *))(*(void *)v3 + 72LL))(v3, buf, __p, &v36);
  if (v38 < 0) {
    operator delete(__p[0]);
  }
  if ((_BYTE)v36)
  {
    uint64_t v4 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Classic GATT service ForceDisableAll override, disabling classic att support",  buf,  2u);
    }

    return 0LL;
  }

  v39[0] = 0;
  int v6 = *(_DWORD *)(a1 + 1072);
  if (v6 == 2)
  {
    int v8 = 1452;
  }

  else
  {
    BOOL v7 = 0;
    if (v6 != 1) {
      goto LABEL_15;
    }
    int v8 = 76;
  }

  BOOL v7 = *(_DWORD *)(a1 + 1076) == v8;
LABEL_15:
  uint64_t v9 = sub_1002E6E00();
  sub_10002418C(buf, "CATT");
  sub_10002418C(__p, "AllowAppleDevices");
  (*(void (**)(uint64_t, uint8_t *, void **, uint8_t *))(*(void *)v9 + 72LL))(v9, buf, __p, v39);
  if (v38 < 0) {
    operator delete(__p[0]);
  }
  if (v39[0]) {
    BOOL v10 = v7;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v11 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Classic GATT service AllowAppleDevices override, forcing classic att support",  buf,  2u);
    }

    return 1LL;
  }

void sub_1003D2A94( _Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
}

BOOL sub_1003D2AF4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 1072);
  if (v1 == 2)
  {
    int v2 = 1452;
    return *(_DWORD *)(a1 + 1076) == v2;
  }

  if (v1 == 1)
  {
    int v2 = 76;
    return *(_DWORD *)(a1 + 1076) == v2;
  }

  return 0LL;
}

uint64_t sub_1003D2B2C(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 1076) != 76) {
    goto LABEL_26;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 1080);
  if (v3 - 8194 > 0x1D) {
    goto LABEL_26;
  }
  int v4 = 1 << (v3 - 2);
  if ((v4 & 0x20033F00) != 0) {
    goto LABEL_4;
  }
  if ((v4 & 0x409B) == 0) {
    goto LABEL_26;
  }
  uint64_t result = 1LL;
  if (a2 <= 34)
  {
    if (a2 == 12) {
      return result;
    }
    if (a2 != 13)
    {
      if (a2 == 25) {
        return v3 == 8194;
      }
      goto LABEL_24;
    }

    if (v3 - 8201 > 0x16) {
      goto LABEL_26;
    }
    if (((1 << (v3 - 9)) & 0x40067E) != 0) {
      goto LABEL_4;
    }
    if (v3 == 8201) {
      return 0LL;
    }
LABEL_26:
    if (a2 != 32) {
      goto LABEL_29;
    }
    goto LABEL_27;
  }

BOOL sub_1003D2E50(uint64_t a1, _BYTE *a2, unsigned int a3)
{
  if (*a2 != 3) {
    return 0LL;
  }
  v24[0] = 0LL;
  v24[1] = 0LL;
  sub_100242F28((uint64_t)v24, a1);
  char v6 = *(void **)(a1 + 584);
  unsigned int v7 = (void *)(a1 + 592);
  if (v6 == v7)
  {
LABEL_10:
    BOOL v11 = 0LL;
  }

  else
  {
    while (!sub_10025FC8C(v6[4], (uint64_t)a2))
    {
      unsigned int v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          unsigned int v9 = v8;
          unsigned int v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          unsigned int v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          char v6 = v9;
        }

        while (!v10);
      }

      char v6 = v9;
      if (v9 == v7) {
        goto LABEL_10;
      }
    }

    uint64_t v22 = 0LL;
    v23[0] = 0LL;
    v23[1] = 0LL;
    sub_1002DBF7C((uint64_t)&v22, (uint64_t)(v6 + 5));
    unsigned int v12 = (void *)v23[0];
    if (!v23[0]) {
      goto LABEL_21;
    }
    unsigned int v13 = v23;
    uint64_t v14 = v23[0];
    do
    {
      int v15 = (uint64_t *)v14;
      BOOL v16 = v13;
      unsigned int v17 = *(_DWORD *)(v14 + 32);
      int v18 = (uint64_t *)(v14 + 8);
      if (v17 >= a3)
      {
        int v18 = v15;
        unsigned int v13 = v15;
      }

      uint64_t v14 = *v18;
    }

    while (v14);
    if (v13 == v23) {
      goto LABEL_21;
    }
    if (v17 < a3) {
      int v15 = v16;
    }
    if (*((_DWORD *)v15 + 8) > a3) {
LABEL_21:
    }
      unsigned int v13 = v23;
    BOOL v11 = v23 != v13;
    int v19 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
      BOOL v20 = "has not";
      if (v23 != v13) {
        BOOL v20 = "has";
      }
      *(_DWORD *)std::string buf = 67109378;
      unsigned int v26 = a3;
      __int16 v27 = 2082;
      BOOL v28 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "SDP attribute 0x%04x %{public}s been found",  buf,  0x12u);
      unsigned int v12 = (void *)v23[0];
    }

    sub_10023BF24((uint64_t)&v22, v12);
  }

  sub_100242FAC((uint64_t)v24);
  return v11;
}

void sub_1003D3044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003D3064(uint64_t a1)
{
  std::stringbuf::string_type __p = 0LL;
  int64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  p_p = (char *)&__p;
  sub_1003D01A0(a1, (uint64_t)&__p);
  if (v26 >= 0) {
    int v2 = (char *)&__p + HIBYTE(v26);
  }
  else {
    int v2 = (char *)__p + v25;
  }
  if (v26 < 0) {
    p_p = (char *)__p;
  }
  while (p_p != v2)
  {
    char *p_p = __tolower(*p_p);
    ++p_p;
  }

  if (qword_1008D92C0 != -1) {
    dispatch_once(&qword_1008D92C0, &stru_100895C08);
  }
  uint64_t v3 = sub_100292FBC(qword_1008D92B8, 2);
  uint64_t v22 = 0LL;
  v23[0] = 0LL;
  v23[1] = 0LL;
  sub_10054F9E4(v3, (uint64_t *)&v22);
  int v4 = v22;
  if (v22 == v23)
  {
LABEL_42:
    uint64_t v20 = 0LL;
  }

  else
  {
    if (v26 >= 0) {
      uint64_t v5 = (char *)&__p;
    }
    else {
      uint64_t v5 = (char *)__p;
    }
    if (v26 >= 0) {
      int64_t v6 = HIBYTE(v26);
    }
    else {
      int64_t v6 = v25;
    }
    unsigned int v7 = &v5[v6];
    while (1)
    {
      int v8 = *((char *)v4 + 55);
      unsigned int v9 = v8 >= 0 ? v4 + 4 : (char **)v4[4];
      int64_t v10 = v8 >= 0 ? *((unsigned __int8 *)v4 + 55) : (int64_t)v4[5];
      if (!v10) {
        break;
      }
      if (v6 >= v10)
      {
        int v14 = *(unsigned __int8 *)v9;
        int64_t v15 = v6;
        BOOL v16 = v5;
        do
        {
          int64_t v17 = v15 - v10;
          if (v17 == -1) {
            break;
          }
          int v18 = (char *)memchr(v16, v14, v17 + 1);
          if (!v18) {
            break;
          }
          int v19 = v18;
          if (!memcmp(v18, v9, v10))
          {
            if (v19 == v7 || v19 - v5 == -1) {
              break;
            }
            goto LABEL_41;
          }

          BOOL v16 = v19 + 1;
          int64_t v15 = v7 - (v19 + 1);
        }

        while (v15 >= v10);
      }

      BOOL v11 = v4[1];
      if (v11)
      {
        do
        {
          unsigned int v12 = (char **)v11;
          BOOL v11 = *(char **)v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          unsigned int v12 = (char **)v4[2];
          BOOL v13 = *v12 == (char *)v4;
          int v4 = v12;
        }

        while (!v13);
      }

      int v4 = v12;
      if (v12 == v23) {
        goto LABEL_42;
      }
    }

void sub_1003D3260( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D3284(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1068);
}

uint64_t sub_1003D328C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1069)) {
    int v1 = (*(unsigned __int8 *)(a1 + 1102) >> 3) & 1;
  }
  else {
    int v1 = 0;
  }
  unsigned int v2 = _os_feature_enabled_impl("BluetoothFeatures", "AACPTransportForUARP");
  uint64_t v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109376;
    v5[1] = v2;
    __int16 v6 = 1024;
    int v7 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Device::supportsUARPOverAACP: feature flag: %u, DID bit: %u",  (uint8_t *)v5,  0xEu);
  }

  return v1 & v2;
}

uint64_t sub_1003D3370(uint64_t a1)
{
  uint64_t v13 = 0LL;
  __int128 v12 = 0u;
  memset(v11, 0, sizeof(v11));
  __int128 v9 = 0u;
  *(_OWORD *)std::stringbuf::string_type __p = 0u;
  __int128 v7 = 0u;
  *(_OWORD *)int v8 = 0u;
  __int128 v5 = 0u;
  *(_OWORD *)__int16 v6 = 0u;
  sub_100532DC0((uint64_t)&v5 + 1);
  BYTE2(v6[0]) = 0;
  BYTE4(v6[0]) = 0;
  BYTE2(v8[0]) = 0;
  BYTE4(v8[0]) = 0;
  DWORD1(v11[1]) = 0;
  __int128 v7 = 0uLL;
  v6[1] = 0LL;
  LOBYTE(v8[0]) = 0;
  __int128 v9 = 0uLL;
  v8[1] = 0LL;
  LOBYTE(__p[0]) = 0;
  memset(v11, 0, 19);
  __p[1] = 0LL;
  BYTE8(v11[1]) = 1;
  BYTE2(v13) = 0;
  *(void *)((char *)&v11[1] + 14) = 0LL;
  *(void *)((char *)&v11[1] + 9) = 0LL;
  __int128 v12 = 0uLL;
  *((void *)&v11[2] + 1) = 0LL;
  LOBYTE(v13) = 0;
  LODWORD(a1) = sub_1003D2408(a1, (uint64_t)&v5);
  int v3 = BYTE14(v12);
  if (SHIBYTE(v11[0]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[1]);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(v6[1]);
  }
  if (v3) {
    a1 = a1;
  }
  else {
    a1 = 0LL;
  }
  nullsub_63((char *)&v5 + 1, v1);
  return a1;
}

void sub_1003D34A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D34C0(uint64_t a1)
{
  std::stringbuf::string_type __p = 0LL;
  int64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  p_p = (char *)&__p;
  sub_1003D01A0(a1, (uint64_t)&__p);
  if (v26 >= 0) {
    unsigned int v2 = (char *)&__p + HIBYTE(v26);
  }
  else {
    unsigned int v2 = (char *)__p + v25;
  }
  if (v26 < 0) {
    p_p = (char *)__p;
  }
  while (p_p != v2)
  {
    char *p_p = __tolower(*p_p);
    ++p_p;
  }

  if (qword_1008D92C0 != -1) {
    dispatch_once(&qword_1008D92C0, &stru_100895C08);
  }
  uint64_t v3 = sub_100292FBC(qword_1008D92B8, 2);
  uint64_t v22 = 0LL;
  v23[0] = 0LL;
  v23[1] = 0LL;
  sub_10054F924(v3, (uint64_t *)&v22);
  int v4 = v22;
  if (v22 == v23)
  {
LABEL_42:
    uint64_t v20 = 0LL;
  }

  else
  {
    if (v26 >= 0) {
      __int128 v5 = (char *)&__p;
    }
    else {
      __int128 v5 = (char *)__p;
    }
    if (v26 >= 0) {
      int64_t v6 = HIBYTE(v26);
    }
    else {
      int64_t v6 = v25;
    }
    __int128 v7 = &v5[v6];
    while (1)
    {
      int v8 = *((char *)v4 + 55);
      __int128 v9 = v8 >= 0 ? v4 + 4 : (char **)v4[4];
      int64_t v10 = v8 >= 0 ? *((unsigned __int8 *)v4 + 55) : (int64_t)v4[5];
      if (!v10) {
        break;
      }
      if (v6 >= v10)
      {
        int v14 = *(unsigned __int8 *)v9;
        int64_t v15 = v6;
        BOOL v16 = v5;
        do
        {
          int64_t v17 = v15 - v10;
          if (v17 == -1) {
            break;
          }
          int v18 = (char *)memchr(v16, v14, v17 + 1);
          if (!v18) {
            break;
          }
          int v19 = v18;
          if (!memcmp(v18, v9, v10))
          {
            if (v19 == v7 || v19 - v5 == -1) {
              break;
            }
            goto LABEL_41;
          }

          BOOL v16 = v19 + 1;
          int64_t v15 = v7 - (v19 + 1);
        }

        while (v15 >= v10);
      }

      BOOL v11 = v4[1];
      if (v11)
      {
        do
        {
          __int128 v12 = (char **)v11;
          BOOL v11 = *(char **)v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          __int128 v12 = (char **)v4[2];
          BOOL v13 = *v12 == (char *)v4;
          int v4 = v12;
        }

        while (!v13);
      }

      int v4 = v12;
      if (v12 == v23) {
        goto LABEL_42;
      }
    }

void sub_1003D36BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D36E0(uint64_t a1)
{
  std::stringbuf::string_type __p = 0LL;
  int64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  p_p = (char *)&__p;
  sub_1003D01A0(a1, (uint64_t)&__p);
  if (v26 >= 0) {
    unsigned int v2 = (char *)&__p + HIBYTE(v26);
  }
  else {
    unsigned int v2 = (char *)__p + v25;
  }
  if (v26 < 0) {
    p_p = (char *)__p;
  }
  while (p_p != v2)
  {
    char *p_p = __tolower(*p_p);
    ++p_p;
  }

  if (qword_1008D92C0 != -1) {
    dispatch_once(&qword_1008D92C0, &stru_100895C08);
  }
  uint64_t v3 = sub_100292FBC(qword_1008D92B8, 2);
  uint64_t v22 = 0LL;
  v23[0] = 0LL;
  v23[1] = 0LL;
  sub_10054F984(v3, (uint64_t *)&v22);
  int v4 = v22;
  if (v22 == v23)
  {
LABEL_42:
    uint64_t v20 = 0LL;
  }

  else
  {
    if (v26 >= 0) {
      __int128 v5 = (char *)&__p;
    }
    else {
      __int128 v5 = (char *)__p;
    }
    if (v26 >= 0) {
      int64_t v6 = HIBYTE(v26);
    }
    else {
      int64_t v6 = v25;
    }
    __int128 v7 = &v5[v6];
    while (1)
    {
      int v8 = *((char *)v4 + 55);
      __int128 v9 = v8 >= 0 ? v4 + 4 : (char **)v4[4];
      int64_t v10 = v8 >= 0 ? *((unsigned __int8 *)v4 + 55) : (int64_t)v4[5];
      if (!v10) {
        break;
      }
      if (v6 >= v10)
      {
        int v14 = *(unsigned __int8 *)v9;
        int64_t v15 = v6;
        BOOL v16 = v5;
        do
        {
          int64_t v17 = v15 - v10;
          if (v17 == -1) {
            break;
          }
          int v18 = (char *)memchr(v16, v14, v17 + 1);
          if (!v18) {
            break;
          }
          int v19 = v18;
          if (!memcmp(v18, v9, v10))
          {
            if (v19 == v7 || v19 - v5 == -1) {
              break;
            }
            goto LABEL_41;
          }

          BOOL v16 = v19 + 1;
          int64_t v15 = v7 - (v19 + 1);
        }

        while (v15 >= v10);
      }

      BOOL v11 = v4[1];
      if (v11)
      {
        do
        {
          __int128 v12 = (char **)v11;
          BOOL v11 = *(char **)v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          __int128 v12 = (char **)v4[2];
          BOOL v13 = *v12 == (char *)v4;
          int v4 = v12;
        }

        while (!v13);
      }

      int v4 = v12;
      if (v12 == v23) {
        goto LABEL_42;
      }
    }

void sub_1003D38DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D3900(uint64_t a1)
{
  uint64_t v13 = 0LL;
  __int128 v12 = 0u;
  memset(v11, 0, sizeof(v11));
  __int128 v9 = 0u;
  *(_OWORD *)std::stringbuf::string_type __p = 0u;
  __int128 v7 = 0u;
  *(_OWORD *)int v8 = 0u;
  __int128 v5 = 0u;
  *(_OWORD *)int64_t v6 = 0u;
  sub_100532DC0((uint64_t)&v5 + 1);
  BYTE2(v6[0]) = 0;
  BYTE4(v6[0]) = 0;
  BYTE2(v8[0]) = 0;
  BYTE4(v8[0]) = 0;
  DWORD1(v11[1]) = 0;
  __int128 v7 = 0uLL;
  v6[1] = 0LL;
  LOBYTE(v8[0]) = 0;
  __int128 v9 = 0uLL;
  v8[1] = 0LL;
  LOBYTE(__p[0]) = 0;
  memset(v11, 0, 19);
  __p[1] = 0LL;
  BYTE8(v11[1]) = 1;
  BYTE2(v13) = 0;
  *(void *)((char *)&v11[1] + 14) = 0LL;
  *(void *)((char *)&v11[1] + 9) = 0LL;
  __int128 v12 = 0uLL;
  *((void *)&v11[2] + 1) = 0LL;
  LOBYTE(v13) = 0;
  LODWORD(a1) = sub_1003D2408(a1, (uint64_t)&v5);
  int v3 = HIBYTE(v12);
  if (SHIBYTE(v11[0]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[1]);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(v6[1]);
  }
  if (v3) {
    a1 = a1;
  }
  else {
    a1 = 0LL;
  }
  nullsub_63((char *)&v5 + 1, v1);
  return a1;
}

void sub_1003D3A34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D3A50(uint64_t a1, int a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 416) = a2;
  return sub_100242FAC((uint64_t)v5);
}

void sub_1003D3A94(uint64_t a1)
{
  v44[0] = 0LL;
  v44[1] = 0LL;
  sub_100242F28((uint64_t)v44, a1);
  unsigned int v2 = *(void **)(a1 + 584);
  uint64_t v3 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 344LL))(v3, a1);
  BOOL v4 = sub_1000B17E0();
  if (v4 && (uint64_t v5 = sub_1000B1754(0LL), (_DWORD)v5))
  {
    uint64_t v26 = (os_log_s *)sub_100086554(0x5Cu);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = "Memory Manager initialization failed\n";
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    }

    sub_1000AFE20(v5);
    __break(1u);
  }

  else
  {
    if (v2 != (void *)(a1 + 592))
    {
      do
      {
        uint64_t v6 = v2[4];
        __int128 buf = 0uLL;
        uint64_t v47 = 0LL;
        sub_10002418C(&buf, "\n|>> ServiceClass: ");
        memset(&v43, 0, sizeof(v43));
        if (*(_BYTE *)v6 == 3)
        {
          else {
            __int128 v7 = sub_1001EBA4C(*(unsigned int *)(v6 + 8));
          }
          std::string::assign(&v43, v7);
        }

        __int128 v40 = 0LL;
        std::string::size_type v41 = 0LL;
        uint64_t v42 = 0LL;
        sub_10002418C(&v40, "\n");
        __int128 v38 = 0uLL;
        int64_t cap = 0LL;
        sub_1003D4034((const void **)&buf, (const void **)&v43.__r_.__value_.__l.__data_, &v45);
        if (v42 >= 0) {
          int v8 = (const std::string::value_type *)&v40;
        }
        else {
          int v8 = (const std::string::value_type *)v40;
        }
        if (v42 >= 0) {
          std::string::size_type v9 = HIBYTE(v42);
        }
        else {
          std::string::size_type v9 = v41;
        }
        int64_t v10 = std::string::append(&v45, v8, v9);
        __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        int64_t cap = v10->__r_.__value_.__l.__cap_;
        __int128 v38 = v11;
        v10->__r_.__value_.__l.__size_ = 0LL;
        v10->__r_.__value_.__l.__cap_ = 0LL;
        v10->__r_.__value_.__r.__words[0] = 0LL;
        __int128 v12 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v13 = &v38;
          if (cap < 0) {
            uint64_t v13 = (__int128 *)v38;
          }
          LODWORD(v45.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v45, 0xCu);
        }

        memset(&v45, 0, sizeof(v45));
        sub_1002DBF7C((uint64_t)&v45, (uint64_t)(v2 + 5));
        std::string::size_type v14 = v45.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v45.__r_.__value_.__l.__data_ != &v45.__r_.__value_.__r.__words[1])
        {
          do
          {
            __int128 v37 = *(_OWORD *)(v14 + 40);
            v35[0] = 0LL;
            v35[1] = 0LL;
            uint64_t v36 = 0LL;
            sub_10002418C(v35, "|Attribute Key: ");
            v33[0] = 0LL;
            v33[1] = 0LL;
            uint64_t v34 = 0LL;
            int64_t v15 = sub_1001EB6F4(*(unsigned __int16 *)(v14 + 32));
            sub_10002418C(v33, (char *)v15);
            int v30 = 0LL;
            std::string::size_type v31 = 0LL;
            uint64_t v32 = 0LL;
            sub_10002418C(&v30, "\n");
            __p[0] = 0LL;
            __p[1] = 0LL;
            int64_t v29 = 0LL;
            sub_1003D4034((const void **)v35, (const void **)v33, &v27);
            if (v32 >= 0) {
              BOOL v16 = (const std::string::value_type *)&v30;
            }
            else {
              BOOL v16 = (const std::string::value_type *)v30;
            }
            if (v32 >= 0) {
              std::string::size_type v17 = HIBYTE(v32);
            }
            else {
              std::string::size_type v17 = v31;
            }
            int v18 = std::string::append(&v27, v16, v17);
            __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
            int64_t v29 = v18->__r_.__value_.__l.__cap_;
            *(_OWORD *)std::stringbuf::string_type __p = v19;
            v18->__r_.__value_.__l.__size_ = 0LL;
            v18->__r_.__value_.__l.__cap_ = 0LL;
            v18->__r_.__value_.__r.__words[0] = 0LL;
            if (v29 >= 0) {
              uint64_t v20 = (char *)__p;
            }
            else {
              uint64_t v20 = (char *)__p[0];
            }
            sub_100109EA8((uint64_t)&v37, v20);
            if (SHIBYTE(v29) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v32) < 0) {
              operator delete(v30);
            }
            if (SHIBYTE(v34) < 0) {
              operator delete(v33[0]);
            }
            if (SHIBYTE(v36) < 0) {
              operator delete(v35[0]);
            }
            int v21 = *(std::string **)(v14 + 8);
            if (v21)
            {
              do
              {
                uint64_t v22 = v21;
                int v21 = (std::string *)v21->__r_.__value_.__r.__words[0];
              }

              while (v21);
            }

            else
            {
              do
              {
                uint64_t v22 = *(std::string **)(v14 + 16);
                BOOL v23 = v22->__r_.__value_.__r.__words[0] == v14;
                std::string::size_type v14 = (std::string::size_type)v22;
              }

              while (!v23);
            }

            std::string::size_type v14 = (std::string::size_type)v22;
          }

          while (v22 != (std::string *)&v45.__r_.__value_.__r.__words[1]);
        }

        sub_10023BF24((uint64_t)&v45, (void *)v45.__r_.__value_.__l.__size_);
        if (SHIBYTE(cap) < 0) {
          operator delete((void *)v38);
        }
        if (SHIBYTE(v42) < 0) {
          operator delete(v40);
        }
        if (SHIBYTE(v47) < 0) {
          operator delete((void *)buf);
        }
        uint32_t v24 = (void *)v2[1];
        if (v24)
        {
          do
          {
            int64_t v25 = v24;
            uint32_t v24 = (void *)*v24;
          }

          while (v24);
        }

        else
        {
          do
          {
            int64_t v25 = (void *)v2[2];
            BOOL v23 = *v25 == (void)v2;
            unsigned int v2 = v25;
          }

          while (!v23);
        }

        unsigned int v2 = v25;
      }

      while (v25 != (void *)(a1 + 592));
    }

    if (v4) {
      sub_1000B17B4();
    }
    sub_100242FAC((uint64_t)v44);
  }

void sub_1003D3F14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, void *a38, uint64_t a39, int a40, __int16 a41, char a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, int a48, __int16 a49, char a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
}

uint64_t sub_1003D4034@<X0>(const void **a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  else {
    size_t v5 = (size_t)a1[1];
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  a3[1] = 0LL;
  a3[2] = 0LL;
  *a3 = 0LL;
  uint64_t result = sub_100271C18((uint64_t)a3, v6 + v5);
  else {
    int v8 = *(char **)result;
  }
  if (v5)
  {
    else {
      std::string::size_type v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }

  int64_t v10 = &v8[v5];
  if (v6)
  {
    else {
      __int128 v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }

  v10[v6] = 0;
  return result;
}

uint64_t sub_1003D4104(uint64_t a1, uint64_t a2, void *a3)
{
  v41[0] = 0LL;
  v41[1] = 0LL;
  sub_100242F28((uint64_t)v41, a1);
  size_t v6 = *(void **)(a1 + 584);
  __int128 v7 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a1, &__p);
    int v8 = v40 >= 0 ? &__p : (void **)__p;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Setting SDP Attributes for %{public}s",  (uint8_t *)&buf,  0xCu);
    if (SHIBYTE(v40) < 0) {
      operator delete(__p);
    }
  }

  if (v6 != (void *)(a1 + 592))
  {
    while (!sub_10025FC8C(v6[4], a2))
    {
      std::string::size_type v9 = (void *)v6[1];
      if (v9)
      {
        do
        {
          int64_t v10 = v9;
          std::string::size_type v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          int64_t v10 = (void *)v6[2];
          BOOL v11 = *v10 == (void)v6;
          size_t v6 = v10;
        }

        while (!v11);
      }

      size_t v6 = v10;
      if (v10 == (void *)(a1 + 592)) {
        goto LABEL_24;
      }
    }

    std::stringbuf::string_type __p = 0LL;
    __int16 v39 = 0LL;
    uint64_t v40 = 0LL;
    sub_1002DBF7C((uint64_t)&__p, (uint64_t)(v6 + 5));
    __int128 v12 = (char *)__p;
    if (__p != &v39)
    {
      do
      {
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)(v12 + 40);
        sub_10025EB84(&buf);
        uint64_t v13 = (char *)*((void *)v12 + 1);
        if (v13)
        {
          do
          {
            std::string::size_type v14 = v13;
            uint64_t v13 = *(char **)v13;
          }

          while (v13);
        }

        else
        {
          do
          {
            std::string::size_type v14 = (char *)*((void *)v12 + 2);
            BOOL v11 = *(void *)v14 == (void)v12;
            __int128 v12 = v14;
          }

          while (!v11);
        }

        __int128 v12 = v14;
      }

      while (v14 != (char *)&v39);
    }

    sub_10023BF24((uint64_t)&__p, v39);
    __int16 v39 = 0LL;
    uint64_t v40 = 0LL;
    std::stringbuf::string_type __p = &v39;
    sub_10025EB84((_BYTE *)v6[4]);
    free((void *)v6[4]);
    sub_10032982C((uint64_t **)(a1 + 584), (uint64_t)v6);
    sub_10023BF24((uint64_t)&__p, v39);
  }

void sub_1003D4580( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, char a38)
{
}

BOOL sub_1003D463C(_BYTE *a1)
{
  __int128 v43 = xmmword_1006C28B0;
  BOOL v2 = sub_1003D2E50((uint64_t)a1, &v43, 0);
  if (v2)
  {
    uint64_t v40 = 0LL;
    std::string::size_type v41 = 0LL;
    uint64_t v42 = 0LL;
    uint64_t v37 = 0LL;
    __int128 v38 = 0LL;
    uint64_t v39 = 0LL;
    std::string v34 = 0LL;
    __int128 v35 = 0LL;
    uint64_t v36 = 0LL;
    __int128 v31 = 0LL;
    __int128 v32 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v28 = 0LL;
    int64_t v29 = 0LL;
    uint64_t v30 = 0LL;
    int64_t v25 = 0LL;
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v22 = 0LL;
    BOOL v23 = 0LL;
    uint64_t v24 = 0LL;
    if (sub_1003D4C9C((uint64_t)a1, (uint64_t)&v43, 0x205u, &v40)
      && sub_1003D4C9C((uint64_t)a1, (uint64_t)&v43, 0x201u, &v37))
    {
      uint64_t v3 = v40;
      if (v41 - (_BYTE *)v40 == 16) {
        int v4 = *((_DWORD *)v40 + 2);
      }
      else {
        int v4 = 0;
      }
      __int128 v19 = v37;
      int v18 = v38;
      if (v38 - (_BYTE *)v37 == 16) {
        int v5 = *((_DWORD *)v37 + 2);
      }
      else {
        int v5 = 0;
      }
      if (v40 != v41)
      {
        do
        {
          *(void *)std::string buf = 0LL;
          *(void *)&uint8_t buf[8] = 0LL;
          *(_OWORD *)std::string buf = *v3;
          sub_10025EB84(buf);
          ++v3;
        }

        while (v3 != (_OWORD *)v41);
        __int128 v19 = v37;
        int v18 = v38;
      }

      if (v19 != v18)
      {
        do
        {
          *(void *)std::string buf = 0LL;
          *(void *)&uint8_t buf[8] = 0LL;
          *(_OWORD *)std::string buf = *v19;
          sub_10025EB84(buf);
          ++v19;
        }

        while (v19 != (_OWORD *)v38);
      }
    }

    else
    {
      int v5 = 0;
      int v4 = 0;
    }

    if (sub_1003D4C9C((uint64_t)a1, (uint64_t)&v43, 0x202u, &v34))
    {
      __int128 v7 = v34;
      size_t v6 = v35;
      if (v35 - (_BYTE *)v34 == 16) {
        int v8 = *((_DWORD *)v34 + 2);
      }
      else {
        int v8 = 0;
      }
      while (v7 != v6)
      {
        *(void *)std::string buf = 0LL;
        *(void *)&uint8_t buf[8] = 0LL;
        *(_OWORD *)std::string buf = *v7;
        sub_10025EB84(buf);
        ++v7;
        size_t v6 = v35;
      }
    }

    else
    {
      int v8 = 0;
    }

    if (sub_1003D4C9C((uint64_t)a1, (uint64_t)&v43, 0x203u, &v31))
    {
      int64_t v10 = v31;
      std::string::size_type v9 = v32;
      if (v32 - (_BYTE *)v31 == 16) {
        int v11 = *((_DWORD *)v31 + 2);
      }
      else {
        int v11 = 0;
      }
      while (v10 != v9)
      {
        *(void *)std::string buf = 0LL;
        *(void *)&uint8_t buf[8] = 0LL;
        *(_OWORD *)std::string buf = *v10;
        sub_10025EB84(buf);
        ++v10;
        std::string::size_type v9 = v32;
      }
    }

    else
    {
      int v11 = 0;
    }

    __int128 v12 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)a1, __p);
      uint64_t v13 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136447234;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = v4;
      __int16 v45 = 1024;
      int v46 = v5;
      __int16 v47 = 1024;
      int v48 = v8;
      __int16 v49 = 1024;
      int v50 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "storeSdpDid “%{public}s deviceId information: vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x",  buf,  0x24u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_1003D6538((uint64_t)a1, v4, v5, v8, v11);
    if (sub_1003D4C9C((uint64_t)a1, (uint64_t)&v43, 0xA000u, &v28))
    {
      if (v29 != v28)
      {
        if (*((_WORD *)v28 + 1) == 4)
        {
          sub_1003D6758((uint64_t)a1, *((_DWORD *)v28 + 2), 0);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
            sub_1006796A8();
          }
          a1[1069] = 0;
        }
      }

      for (uint64_t i = v28; i != v29; ++i)
      {
        *(void *)std::string buf = 0LL;
        *(void *)&uint8_t buf[8] = 0LL;
        *(_OWORD *)std::string buf = *i;
        sub_10025EB84(buf);
      }
    }

    else
    {
      a1[1069] = 0;
    }

    if (sub_1003D4C9C((uint64_t)a1, (uint64_t)&v43, 0xA001u, &v22))
    {
      if (v23 != v22)
      {
        if (*((_WORD *)v22 + 1) == 8)
        {
          sub_1003D6A34((uint64_t)a1, **((void **)v22 + 1), 0);
        }

        else
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
            sub_10067963C();
          }
          a1[1070] = 0;
        }
      }

      for (uint64_t j = v22; j != v23; ++j)
      {
        *(void *)std::string buf = 0LL;
        *(void *)&uint8_t buf[8] = 0LL;
        *(_OWORD *)std::string buf = *j;
        sub_10025EB84(buf);
      }
    }

    else
    {
      a1[1070] = 0;
    }

    if (sub_1003D4C9C((uint64_t)a1, (uint64_t)&v43, 0xAFFFu, &v25))
    {
      if (v26 != v25)
      {
        if (*((_WORD *)v25 + 1) == 2)
        {
          sub_1003D6BC4((uint64_t)a1, *((unsigned __int16 *)v25 + 4));
        }

        else
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
            sub_1006795D0();
          }
          a1[1071] = 0;
        }
      }

      for (k = v25; k != v26; ++k)
      {
        *(void *)std::string buf = 0LL;
        *(void *)&uint8_t buf[8] = 0LL;
        *(_OWORD *)std::string buf = *k;
        sub_10025EB84(buf);
      }
    }

    else
    {
      a1[1071] = 0;
    }

    if (v22)
    {
      BOOL v23 = v22;
      operator delete(v22);
    }

    if (v25)
    {
      uint64_t v26 = v25;
      operator delete(v25);
    }

    if (v28)
    {
      int64_t v29 = v28;
      operator delete(v28);
    }

    if (v31)
    {
      __int128 v32 = v31;
      operator delete(v31);
    }

    if (v34)
    {
      __int128 v35 = v34;
      operator delete(v34);
    }

    if (v37)
    {
      __int128 v38 = v37;
      operator delete(v37);
    }

    if (v40)
    {
      std::string::size_type v41 = v40;
      operator delete(v40);
    }
  }

  return v2;
}

void sub_1003D4B9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a30) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D4C48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895B68);
  }
  return sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, v1, 4);
}

uint64_t sub_1003D4C9C(uint64_t a1, uint64_t a2, unsigned int a3, void **a4)
{
  v53[0] = 0LL;
  v53[1] = 0LL;
  sub_100242F28((uint64_t)v53, a1);
  int v8 = *(void **)(a1 + 584);
  std::string::size_type v9 = (void *)(a1 + 592);
  if (v8 != v9)
  {
    while (!sub_10025FC8C(v8[4], a2))
    {
      int64_t v10 = (void *)v8[1];
      if (v10)
      {
        do
        {
          int v11 = v10;
          int64_t v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          int v11 = (void *)v8[2];
          BOOL v12 = *v11 == (void)v8;
          int v8 = v11;
        }

        while (!v12);
      }

      int v8 = v11;
      if (v11 == v9) {
        goto LABEL_24;
      }
    }

    uint64_t v51 = 0LL;
    v52[0] = 0LL;
    v52[1] = 0LL;
    sub_1002DBF7C((uint64_t)&v51, (uint64_t)(v8 + 5));
    uint64_t v13 = (void *)v52[0];
    if (!v52[0]) {
      goto LABEL_21;
    }
    std::string::size_type v14 = v52;
    int64_t v15 = (uint64_t *)v52[0];
    do
    {
      BOOL v16 = v15;
      std::string::size_type v17 = v14;
      unsigned int v18 = *((_DWORD *)v15 + 8);
      if (v18 >= a3) {
        std::string::size_type v14 = v15;
      }
      else {
        ++v15;
      }
      int64_t v15 = (uint64_t *)*v15;
    }

    while (v15);
    if (v14 == v52 || (v18 >= a3 ? (__int128 v19 = v16) : (__int128 v19 = v17), *((_DWORD *)v19 + 8) > a3))
    {
LABEL_21:
      uint64_t v20 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Couldn't find SDP attribute 0x%04x", buf, 8u);
        uint64_t v13 = (void *)v52[0];
      }

      sub_10023BF24((uint64_t)&v51, v13);
      goto LABEL_24;
    }

    *(_OWORD *)std::string buf = *(_OWORD *)(v14 + 5);
    __int128 v50 = 0uLL;
    if (buf[0] - 6 < 2)
    {
      unsigned int v23 = *(unsigned __int16 *)&buf[2];
      if (*(_WORD *)&buf[2])
      {
        unint64_t v24 = 0LL;
        do
        {
          if (sub_10025FD88(&v50, *(void *)&buf[8] + 16 * v24))
          {
            uint64_t v26 = a4[1];
            unint64_t v25 = (unint64_t)a4[2];
            if ((unint64_t)v26 >= v25)
            {
              uint64_t v28 = ((char *)v26 - (_BYTE *)*a4) >> 4;
              unint64_t v29 = v28 + 1;
              uint64_t v30 = v25 - (void)*a4;
              if (v30 >> 3 > v29) {
                unint64_t v29 = v30 >> 3;
              }
              else {
                unint64_t v31 = v29;
              }
              if (v31) {
                __int128 v32 = (char *)sub_1003ADAF8((uint64_t)(a4 + 2), v31);
              }
              else {
                __int128 v32 = 0LL;
              }
              uint64_t v33 = &v32[16 * v28];
              *(_OWORD *)uint64_t v33 = v50;
              __int128 v35 = (char *)*a4;
              std::string v34 = (char *)a4[1];
              uint64_t v36 = v33;
              if (v34 != *a4)
              {
                do
                {
                  *((_OWORD *)v36 - 1) = *((_OWORD *)v34 - 1);
                  v36 -= 16;
                  v34 -= 16;
                }

                while (v34 != v35);
                std::string v34 = (char *)*a4;
              }

              uint64_t v27 = v33 + 16;
              *a4 = v36;
              a4[1] = v33 + 16;
              a4[2] = &v32[16 * v31];
              if (v34) {
                operator delete(v34);
              }
            }

            else
            {
              *uint64_t v26 = v50;
              uint64_t v27 = v26 + 1;
            }

            a4[1] = v27;
            unsigned int v23 = *(unsigned __int16 *)&buf[2];
          }

          ++v24;
        }

        while (v24 < v23);
      }

void sub_1003D5070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5 = va_arg(va1, void);
  __int128 v7 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  sub_10023BF24((uint64_t)va, v7);
  sub_100242FAC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_1003D50AC(uint64_t a1, _BYTE *a2)
{
  if (*a2 != 3) {
    return 0LL;
  }
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1);
  int v4 = *(void **)(a1 + 584);
  uint64_t v5 = (void *)(a1 + 592);
  if (v4 == (void *)(a1 + 592))
  {
    BOOL v6 = 0LL;
  }

  else
  {
    while (1)
    {
      BOOL v6 = sub_10025FC8C(v4[4], (uint64_t)a2);
      if (v6) {
        break;
      }
      __int128 v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          __int128 v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          int v4 = v8;
        }

        while (!v9);
      }

      int v4 = v8;
      if (v8 == v5) {
        goto LABEL_14;
      }
    }

    BOOL v6 = 1LL;
  }

void sub_1003D5178( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1003D518C(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  BOOL v2 = *(void *)(a1 + 600) != 0LL;
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003D51D8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1);
  BOOL v6 = (_OWORD *)(a1 + 312);
  if ((*(void *)(a1 + 312) || *(void *)(a1 + 320)) && *(_DWORD *)(a1 + 304) == (_DWORD)a2)
  {
    if (v6 != a3) {
      *BOOL v6 = *a3;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 304) = a2;
    if (v6 != a3) {
      *BOOL v6 = *a3;
    }
    sub_100242F54((uint64_t)v10);
    if (sub_1003CF350((unsigned __int8 *)a1))
    {
      __int128 v7 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v12 = a2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Set class of device to %u", buf, 8u);
      }

      uint64_t v8 = sub_1002E6D7C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 264LL))(v8, a1, a2);
    }

    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 5);
  }

  return sub_100242FAC((uint64_t)v10);
}

void sub_1003D5350(_Unwind_Exception *exception_object)
{
}

unsigned __int16 *sub_1003D536C(_WORD *a1, uint64_t a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6)
{
  a1[512] = a3;
  a1[513] = a4;
  a1[514] = a5;
  a1[515] = a6;
  return sub_1003D53C4((uint64_t)a1);
}

unsigned __int16 *sub_1003D53C4(uint64_t a1)
{
  BOOL v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Updating HID Device Types", v12, 2u);
  }

  uint64_t result = (unsigned __int16 *)sub_10056AAF0(a1 + 1008);
  if (result)
  {
    int v4 = *(unsigned __int16 *)(a1 + 1026);
    int v5 = *(unsigned __int16 *)(a1 + 1024);
    int v6 = *(unsigned __int16 *)(a1 + 1028);
  }

  else
  {
    if (!*(_BYTE *)(a1 + 1068)) {
      return result;
    }
    int v4 = *(_DWORD *)(a1 + 1072);
    int v5 = *(_DWORD *)(a1 + 1076);
    int v6 = *(_DWORD *)(a1 + 1080);
  }

  uint64_t v7 = qword_1008F7380;
  for (uint64_t i = qword_1008F7388; v7 != i; v7 += 40LL)
  {
    uint64_t result = (unsigned __int16 *)sub_1001FE810((uint64_t)&unk_1008F7338, (int *)v7);
    if (v4 == *result)
    {
      uint64_t result = (unsigned __int16 *)sub_1001FE810((uint64_t)&unk_1008F7350, (int *)(v7 + 4));
      if (v5 == *result)
      {
        int64_t v10 = *(int **)(v7 + 8);
        BOOL v9 = *(int **)(v7 + 16);
        if (v9 != v10)
        {
          while (1)
          {
            uint64_t result = (unsigned __int16 *)sub_1001FE810((uint64_t)&unk_1008F7368, v10);
            if (v6 == *result) {
              break;
            }
            if (++v10 == v9) {
              goto LABEL_16;
            }
          }
        }

        unsigned int v11 = *(_DWORD *)(v7 + 32);
        if (v11 >= 0x20) {
          abort();
        }
        *(void *)(a1 + 776) |= 1LL << v11;
      }
    }

BOOL sub_1003D5538(_WORD *a1, uint64_t a2, _WORD *a3, _WORD *a4, _WORD *a5, _WORD *a6)
{
  uint64_t v12 = (uint64_t)(a1 + 504);
  if (sub_10056AAF0((uint64_t)(a1 + 504)))
  {
    sub_10002EAC8(a2, v12);
    *a3 = a1[512];
    *a4 = a1[513];
    *a5 = a1[514];
    *a6 = a1[515];
  }

  return sub_10056AAF0(v12) != 0;
}

BOOL sub_1003D55CC(uint64_t a1)
{
  return sub_10056AAF0(a1 + 1008) != 0;
}

BOOL sub_1003D55EC(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  int v5 = *(unsigned __int8 *)(a1 + 1068);
  if (*(_BYTE *)(a1 + 1068))
  {
    *a2 = *(_DWORD *)(a1 + 1072);
    *a3 = *(_DWORD *)(a1 + 1076);
    *a4 = *(_DWORD *)(a1 + 1080);
    *a5 = *(_DWORD *)(a1 + 1084);
  }

  return v5 != 0;
}

uint64_t sub_1003D5620(uint64_t a1)
{
  return *(_DWORD *)(a1 + 776) & 1;
}

uint64_t sub_1003D562C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 776) >> 2) & 1;
}

uint64_t sub_1003D5638(uint64_t a1)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  int v2 = *(_DWORD *)(a1 + 176);
  sub_100242FAC((uint64_t)v7);
  if (v2 != 26) {
    return 0LL;
  }
  unint64_t v3 = *(void *)(a1 + 776);
  BOOL v4 = (v3 & 0x2E800) == 0;
  uint64_t v5 = (v3 >> 18) & 1;
  if (v4) {
    return v5;
  }
  else {
    return 1LL;
  }
}

uint64_t sub_1003D56A4(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 776) >> 4) & 1;
}

uint64_t sub_1003D56B0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 776) >> 5) & 1;
}

uint64_t sub_1003D56BC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 777) >> 1) & 1;
}

BOOL sub_1003D56C8(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 777) & 3) != 0;
}

uint64_t sub_1003D56D8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 777) >> 2) & 1;
}

uint64_t sub_1003D56E4(uint64_t a1)
{
  uint64_t result = sub_10056AAF0(a1 + 1008);
  if (result) {
    return *(unsigned __int16 *)(a1 + 1030) > 0x100u;
  }
  return result;
}

uint64_t sub_1003D5718(uint64_t a1)
{
  if ((_os_feature_enabled_impl("BluetoothFeatures", "GameControllerBlockListRemoval") & 1) != 0) {
    return 1LL;
  }
  unsigned __int8 v12 = 0;
  uint64_t v3 = sub_1002E6E00();
  sub_10002418C(buf, "HID");
  sub_10002418C(__p, "EnableGamepads");
  (*(void (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v3 + 72LL))(v3, buf, __p, &v12);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(*(void **)buf);
  }
  unint64_t v4 = *(void *)(a1 + 776);
  int v5 = v12;
  if ((v4 & 0x26800) != 0)
  {
    LODWORD(v6) = 1;
  }

  else
  {
    uint64_t v6 = (v4 >> 15) & 1;
    if ((v4 & 0x8000) == 0 && v12)
    {
      uint64_t v7 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Bypassing MFi gamepad authentication",  buf,  2u);
        LODWORD(v6) = 0;
        int v5 = v12;
      }

      else
      {
        LODWORD(v6) = 0;
        int v5 = 1;
      }
    }
  }

  if (v5) {
    return 1LL;
  }
  else {
    return v6;
  }
}

void sub_1003D5850( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D5884(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 778) >> 1) & 1;
}

uint64_t sub_1003D5890(uint64_t a1)
{
  return *(_BYTE *)(a1 + 778) & 1;
}

uint64_t sub_1003D589C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 778) >> 2) & 1;
}

uint64_t sub_1003D58A8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 778) >> 4) & 1;
}

uint64_t sub_1003D58B4(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 778) >> 5) & 1;
}

void sub_1003D58C0(uint64_t a1)
{
  int v2 = &off_10087FAA8;
  uint64_t v3 = 0LL;
  sub_10002EAC8(a1 + 1008, (uint64_t)&v2);
  int v2 = &off_10087FAA8;
  if (v3) {
    sub_1002CD254(v3);
  }
  *(void *)(a1 + 1024) = 0LL;
}

void sub_1003D5910( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  if (a10) {
    sub_1002CD254(a10);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1003D592C(_BYTE *result, char a2, char a3)
{
  result[994] = 1;
  result[995] = a2;
  result[1004] = a3;
  return result;
}

BOOL sub_1003D5940(_BYTE *a1, _BYTE *a2, _BYTE *a3)
{
  if (!a1[994]) {
    return 0LL;
  }
  *a2 = a1[995];
  *a3 = a1[1004];
  return a1[994] != 0;
}

uint64_t sub_1003D5970(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1168) += a2;
  return result;
}

uint64_t sub_1003D598C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1160) += a2;
  return result;
}

BOOL sub_1003D59A8(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  BOOL v2 = *(unsigned __int8 *)(a1 + 996) != 255;
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003D59F4(uint64_t a1, uint64_t a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1);
  *(_BYTE *)(a1 + 996) = a2;
  uint64_t v4 = sub_1002E6D7C();
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 1392LL))(v4, a1, a2);
  uint64_t v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    int v10 = a2;
    __int16 v11 = 1024;
    int v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "setEncryptionKeySize to %d with result %d",  buf,  0xEu);
  }

  return sub_100242FAC((uint64_t)v8);
}

void sub_1003D5AE4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1003D5B00(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 996);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

BOOL sub_1003D5B44(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  BOOL v2 = *(unsigned __int8 *)(a1 + 997) != 255;
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003D5B90(uint64_t a1, uint64_t a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1);
  *(_BYTE *)(a1 + 997) = a2;
  uint64_t v4 = sub_1002E6D7C();
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 1408LL))(v4, a1, a2);
  uint64_t v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    int v10 = a2;
    __int16 v11 = 1024;
    int v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "setEncryptionMode to %d with result %d",  buf,  0xEu);
  }

  return sub_100242FAC((uint64_t)v8);
}

void sub_1003D5C80(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1003D5C9C(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 997);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003D5CE0(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1000) = a2;
  uint64_t v3 = sub_1002E6D7C();
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v3 + 1424LL))( v3,  a1,  *(unsigned int *)(a1 + 1000));
}

uint64_t sub_1003D5D14(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1000);
}

void sub_1003D5D1C(uint64_t a1, int a2)
{
  if (sub_10056AAF0(a1 + 1008))
  {
    *(_DWORD *)(a1 + 1364) = a2;
    uint64_t v4 = sub_1002E6D7C();
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1440LL))(v4, a1, *(unsigned int *)(a1 + 1364));
  }

  else
  {
    int v5 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100679714(a1, v5);
    }
  }

uint64_t sub_1003D5D98(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1364);
}

uint64_t sub_1003D5DA0(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 1068);
  uint64_t v3 = (os_log_s *)qword_1008F7578;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      sub_1003D0100(a1, (uint64_t)__p);
      if (v15 >= 0) {
        int v5 = __p;
      }
      else {
        int v5 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      __int128 v19 = "BOOL BT::Device::isDeviceSupported()";
      __int16 v20 = 2082;
      uint64_t v21 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s - “%{public}s” has deviceID - calling CBUtil isDeviceSupported:",  buf,  0x16u);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }

    v16[0] = @"DeviceType";
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 176)));
    v17[0] = v6;
    v16[1] = @"VendorIDSrc";
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 1072)));
    v17[1] = v7;
    void v16[2] = @"VendorID";
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 1076)));
    void v17[2] = v8;
    void v16[3] = @"ProductID";
    char v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 1080)));
    v17[3] = v9;
    int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v17,  v16,  4LL));
    id v11 = +[CBUtil isDeviceSupported:](&OBJC_CLASS___CBUtil, "isDeviceSupported:", v10);
  }

  else
  {
    if (v4)
    {
      sub_1003D0100(a1, (uint64_t)__p);
      int v12 = v15 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446466;
      __int128 v19 = "BOOL BT::Device::isDeviceSupported()";
      __int16 v20 = 2082;
      uint64_t v21 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s - “%{public}s” no deviceID - returning true",  buf,  0x16u);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }

    return 1LL;
  }

  return (uint64_t)v11;
}

void sub_1003D600C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003D6054(uint64_t a1)
{
  if (qword_1008D92C0 != -1) {
    dispatch_once(&qword_1008D92C0, &stru_100895C08);
  }
  uint64_t v2 = sub_100292FBC(qword_1008D92B8, 2);
  uint64_t v16 = 0LL;
  std::string::size_type v17 = 0LL;
  uint64_t v18 = 0LL;
  sub_10054FA44(v2, &v16);
  uint64_t v3 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEBUG))
  {
    int v11 = *(_DWORD *)(a1 + 1072);
    int v12 = *(_DWORD *)(a1 + 1076);
    sub_1003CF00C(a1, __p);
    if (v15 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 67109634;
    int v20 = v11;
    __int16 v21 = 1024;
    int v22 = v12;
    __int16 v23 = 2082;
    unint64_t v24 = v13;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "Identification - isVendorWithInvalidOUIs looking for vidSrc: %d and vendorID: %d for device %{public}s",  buf,  0x18u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  if (v17)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 1072);
    unsigned int v5 = *(_DWORD *)(a1 + 1076);
    uint64_t v6 = v17;
    while (1)
    {
      unsigned int v7 = *((_DWORD *)v6 + 7);
      if (v4 >= v7)
      {
        if (v7 < v4) {
          goto LABEL_10;
        }
        unsigned int v8 = *((_DWORD *)v6 + 8);
        if (v5 >= v8) {
          break;
        }
      }

void sub_1003D6200( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t sub_1003D6220(uint64_t result, __int16 a2, int a3)
{
  if (a3 == 8194)
  {
    uint64_t v3 = result;
    if (*(_BYTE *)(result + 1069))
    {
      if ((a2 & 0x4000) != 0 && (*(_DWORD *)(result + 1088) & 0x4000) == 0)
      {
        unsigned int v4 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C(v3, &__p);
          if (v10 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          *(_DWORD *)std::string buf = 136446210;
          int v12 = p_p;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Upgrading Device %{public}s to enhanced double tap",  buf,  0xCu);
          if (v10 < 0) {
            operator delete(__p);
          }
        }

        std::stringbuf::string_type __p = 0LL;
        uint64_t v9 = 0LL;
        sub_100242F28((uint64_t)&__p, v3);
        int v6 = *(_DWORD *)(v3 + 792);
        sub_100242FAC((uint64_t)&__p);
        std::stringbuf::string_type __p = 0LL;
        uint64_t v9 = 0LL;
        sub_100242F28((uint64_t)&__p, v3);
        int v7 = *(_DWORD *)(v3 + 792);
        sub_100242FAC((uint64_t)&__p);
        return sub_1003D63A0(v3, v6 | (v7 << 8));
      }
    }
  }

  return result;
}

uint64_t sub_1003D635C(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 792);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003D63A0(uint64_t a1, int a2)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1);
  int v4 = *(_DWORD *)(a1 + 792);
  *(_DWORD *)(a1 + 792) = a2;
  uint64_t v5 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v5 + 856LL))(v5, a1, *(unsigned int *)(a1 + 792));
  int v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1 + 792);
    sub_1003CF00C(a1, __p);
    unsigned int v8 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 67109378;
    int v14 = v7;
    __int16 v15 = 2082;
    uint64_t v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Double tap settings is set to %d for Device %{public}s",  buf,  0x12u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }

  if (v4 != a2)
  {
    sub_100242F54((uint64_t)v12);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 10);
  }

  return sub_100242FAC((uint64_t)v12);
}

void sub_1003D6518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1003D6538(uint64_t a1, int a2, int a3, int a4, int a5)
{
  if ((*(_BYTE *)(a1 + 572) & 2) != 0)
  {
    uint64_t v13 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a1, __p);
      int v14 = v17 >= 0 ? __p : (void **)__p[0];
      int v15 = *(_DWORD *)(a1 + 572);
      *(_DWORD *)std::string buf = 136447490;
      __int128 v19 = v14;
      __int16 v20 = 1024;
      int v21 = a2;
      __int16 v22 = 1024;
      int v23 = a3;
      __int16 v24 = 1024;
      int v25 = a4;
      __int16 v26 = 1024;
      int v27 = a5;
      __int16 v28 = 1024;
      int v29 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Skip device ID for device %{public}s: vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x GAPA 0x%x",  buf,  0x2Au);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else
  {
    *(_BYTE *)(a1 + 106_Block_object_dispose(va, 8) = 1;
    *(_DWORD *)(a1 + 1072) = a2;
    *(_DWORD *)(a1 + 1076) = a3;
    *(_DWORD *)(a1 + 1080) = a4;
    if (a5) {
      *(_DWORD *)(a1 + 1084) = a5;
    }
    char v10 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a1, __p);
      char v11 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136447234;
      __int128 v19 = v11;
      __int16 v20 = 1024;
      int v21 = a2;
      __int16 v22 = 1024;
      int v23 = a3;
      __int16 v24 = 1024;
      int v25 = a4;
      __int16 v26 = 1024;
      int v27 = a5;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Setting device ID info for device %{public}s: vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x",  buf,  0x24u);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v12 = *(void *)(a1 + 520);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 16LL))(v12);
    }
  }

void sub_1003D6758(uint64_t a1, int a2, char a3)
{
  int v4 = *(_DWORD *)(a1 + 572);
  if ((v4 & 2) != 0)
  {
    char v11 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v15) = 67109376;
      DWORD1(v15) = a2;
      WORD4(v15) = 1024;
      *(_DWORD *)((char *)&v15 + 10) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Skip supportedFeatures 0x%x GAPA 0x%x",  (uint8_t *)&v15,  0xEu);
    }
  }

  else
  {
    int v7 = *(_DWORD *)(a1 + 1088);
    unsigned int v8 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v15) = 67109120;
      DWORD1(v15) = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "supportedFeatures 0x%x", (uint8_t *)&v15, 8u);
    }

    sub_1003D6220(a1, a2, *(_DWORD *)(a1 + 1080));
    *(_BYTE *)(a1 + 1069) = 1;
    *(_DWORD *)(a1 + 108_Block_object_dispose(va, 8) = a2;
    if (*(_DWORD *)(a1 + 1076) == 76
      && ((unsigned int v9 = *(_DWORD *)(a1 + 1080) - 8194, v9 <= 0x1D) ? (v10 = ((1 << v9) & 0x20037F9B) == 0) : (v10 = 1), !v10)
      || (a2 & 0x1000) != 0
      || (*(_BYTE *)(a1 + 1101) & 2) != 0)
    {
      *(void *)std::string buf = 0LL;
      sub_1000B0400((uint64_t)buf);
      *(void *)&__int128 v15 = *(int *)buf;
      *((void *)&v15 + 1) = *(__int16 *)&buf[4];
      if (!*(_DWORD *)(a1 + 176))
      {
        uint64_t v12 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Applying workaround for Apple Audio Device: BT_DEVICE_TYPE_GENERIC->BT_DEVICE_TYPE_HEADPHONES",  buf,  2u);
        }

        sub_1003D0D8C(a1, 20, &v15);
      }

      if (!*(_DWORD *)(a1 + 304))
      {
        uint64_t v13 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = 2098200;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Applying workaround for Apple Audio Device, CoD: 0->%u",  buf,  8u);
        }

        sub_1003D51D8(a1, 2098200LL, &v15);
      }

      uint64_t v14 = sub_1002E6BF0();
    }

    else
    {
      sub_1003D7014(a1, 1);
    }

    if ((a3 & 1) == 0 && v7 != a2)
    {
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_100895B68);
      }
      sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 4099);
    }
  }

void sub_1003D6A34(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v4 = HIDWORD(a2);
  int v5 = *(_DWORD *)(a1 + 572);
  if ((v5 & 2) != 0)
  {
    BOOL v10 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 67109632;
      int v12 = a2;
      __int16 v13 = 1024;
      int v14 = v4;
      __int16 v15 = 1024;
      int v16 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Skip supportedExtendedFeatures I1: 0x%x, I2: 0x%x GAPA 0x%x",  (uint8_t *)&v11,  0x14u);
    }
  }

  else
  {
    uint64_t v8 = *(void *)(a1 + 1096);
    *(_BYTE *)(a1 + 1070) = 1;
    *(void *)(a1 + 1096) = a2;
    unsigned int v9 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 67109376;
      int v12 = a2;
      __int16 v13 = 1024;
      int v14 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "supportedExtendedFeatures I1: 0x%x, I2: 0x%x",  (uint8_t *)&v11,  0xEu);
    }

    if ((a3 & 1) == 0 && v8 != a2)
    {
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_100895B68);
      }
      sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 4099);
    }
  }

void sub_1003D6BC4(uint64_t a1, int a2)
{
  unint64_t v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "supportedFeaturesVersion 0x%x",  (uint8_t *)v5,  8u);
  }

  *(_BYTE *)(a1 + 1071) = 1;
  *(_WORD *)(a1 + 1092) = a2;
}

uint64_t sub_1003D6C7C(unsigned __int8 *a1)
{
  uint64_t v21 = 0LL;
  __int128 v20 = 0u;
  memset(v19, 0, sizeof(v19));
  __int128 v17 = 0u;
  *(_OWORD *)uint64_t v18 = 0u;
  __int128 v15 = 0u;
  *(_OWORD *)int v16 = 0u;
  __int128 v13 = 0u;
  *(_OWORD *)int v14 = 0u;
  sub_100532DC0((uint64_t)&v13 + 1);
  BYTE2(v14[0]) = 0;
  BYTE4(v14[0]) = 0;
  BYTE2(v16[0]) = 0;
  BYTE4(v16[0]) = 0;
  HIDWORD(v19[2]) = 0;
  __int128 v15 = 0uLL;
  v14[1] = 0LL;
  LOBYTE(v16[0]) = 0;
  __int128 v17 = 0uLL;
  v16[1] = 0LL;
  LOBYTE(v18[0]) = 0;
  v19[0] = 0LL;
  v19[1] = 0LL;
  v18[1] = 0LL;
  *(_DWORD *)((char *)&v19[1] + 7) = 0;
  LOBYTE(v19[3]) = 1;
  BYTE2(v21) = 0;
  *(void *)((char *)&v19[3] + 6) = 0LL;
  *(void *)((char *)&v19[3] + 1) = 0LL;
  __int128 v20 = 0uLL;
  void v19[5] = 0LL;
  LOBYTE(v21) = 0;
  BOOL v2 = sub_1003D2408((uint64_t)a1, (uint64_t)&v13);
  if (BYTE13(v20)) {
    BOOL v4 = v2;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    int v5 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
      sub_1003CF00C((uint64_t)a1, __p);
      int v6 = v10 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      int v12 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Invoking Single Shot Role Switch WAR for %{public}s",  buf,  0xCu);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v7 = sub_1002E6E9C();
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(*(void *)v7 + 3360LL))( v7,  1LL,  ((unint64_t)a1[128] << 40) | ((unint64_t)a1[129] << 32) | ((unint64_t)a1[130] << 24) | ((unint64_t)a1[131] << 16) | ((unint64_t)a1[132] << 8) | a1[133])
      && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C((uint64_t)a1, __p);
      sub_1006797BC();
    }
  }

  if (SHIBYTE(v19[1]) < 0) {
    operator delete(v18[1]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[1]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[1]);
  }
  return nullsub_63((char *)&v13 + 1, v3);
}

void sub_1003D6EB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

BOOL sub_1003D6ED8(uint64_t a1, _DWORD *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 1069);
  if (*(_BYTE *)(a1 + 1069)) {
    *a2 = *(_DWORD *)(a1 + 1088);
  }
  return v2 != 0;
}

BOOL sub_1003D6EF4(uint64_t a1, _WORD *a2, _BYTE *a3, _WORD *a4)
{
  char v10 = 0;
  sub_100242CA4(&v10);
  BOOL v8 = sub_10010F13C(a1 + 128, a2, a3, a4) == 0;
  sub_100242CD8(&v10);
  return v8;
}

void sub_1003D6F60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL sub_1003D6F74(uint64_t a1, _DWORD *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 1071);
  if (*(_BYTE *)(a1 + 1071)) {
    *a2 = *(unsigned __int16 *)(a1 + 1092);
  }
  return v2 != 0;
}

BOOL sub_1003D6F90(uint64_t a1, void *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 1070);
  if (*(_BYTE *)(a1 + 1070)) {
    *a2 = *(void *)(a1 + 1096);
  }
  return v2 != 0;
}

uint64_t sub_1003D6FAC(uint64_t a1, int a2, int a3)
{
  if (a2 == 32)
  {
    uint64_t v3 = 0LL;
    *(_DWORD *)(a1 + 1100) |= a3;
  }

  else
  {
    uint64_t v3 = 2LL;
    if (a2 == 14 && *(_BYTE *)(a1 + 1069))
    {
      if (a3) {
        int v4 = 0x4000;
      }
      else {
        int v4 = 0;
      }
      sub_1003D6758(a1, *(_DWORD *)(a1 + 1088) & 0xFFFFBFFF | v4, 0);
      return 0LL;
    }
  }

  return v3;
}

uint64_t sub_1003D7014(uint64_t a1, char a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_BYTE *)(a1 + 98_Block_object_dispose(va, 8) = a2;
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1288LL))(v4, a1, *(unsigned __int8 *)(a1 + 988));
  return sub_100242FAC((uint64_t)v6);
}

void sub_1003D7070( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D7084(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 992);
}

uint64_t sub_1003D708C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 992) = a2;
  return result;
}

BOOL sub_1003D7094(uint64_t a1)
{
  return sub_1003D03AC(a1) == 0x2000;
}

void sub_1003D70B0(uint64_t a1)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895B68);
  }
  char v2 = sub_100401058((uint64_t)off_1008D5F48);
  uint64_t v3 = (os_log_s *)qword_1008F7578;
  if ((v2 & 1) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a1, &__dst);
      uint64_t v4 = v64 >= 0 ? &__dst : (__int128 *)__dst;
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Flushing settings to disk for device %{public}s",  (uint8_t *)&buf,  0xCu);
      if (SHIBYTE(v64) < 0) {
        operator delete((void *)__dst);
      }
    }

    v62[0] = 0LL;
    v62[1] = 0LL;
    sub_100242F28((uint64_t)v62, a1);
    __int128 __dst = 0uLL;
    uint64_t v64 = 0LL;
    if (*(char *)(a1 + 223) < 0)
    {
      sub_100024238(&__dst, *(void **)(a1 + 200), *(void *)(a1 + 208));
    }

    else
    {
      __int128 __dst = *(_OWORD *)(a1 + 200);
      uint64_t v64 = *(void *)(a1 + 216);
    }

    uint64_t v5 = *(void *)(a1 + 224);
    uint64_t v6 = *(void *)(a1 + 232);
    __int128 buf = 0uLL;
    uint64_t v69 = 0LL;
    if (*(char *)(a1 + 263) < 0)
    {
      sub_100024238(&buf, *(void **)(a1 + 240), *(void *)(a1 + 248));
    }

    else
    {
      __int128 buf = *(_OWORD *)(a1 + 240);
      uint64_t v69 = *(void *)(a1 + 256);
    }

    uint64_t v7 = *(void *)(a1 + 264);
    uint64_t v8 = *(void *)(a1 + 272);
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v61 = 0LL;
    if (*(char *)(a1 + 303) < 0)
    {
      sub_100024238(__p, *(void **)(a1 + 280), *(void *)(a1 + 288));
    }

    else
    {
      *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)(a1 + 280);
      uint64_t v61 = *(void *)(a1 + 296);
    }

    *(void *)&__int128 v48 = v8;
    *((void *)&v48 + 1) = v7;
    *(void *)&__int128 v49 = v6;
    *((void *)&v49 + 1) = v5;
    unsigned int v45 = *(_DWORD *)(a1 + 304);
    *(void *)&__int128 v47 = *(void *)(a1 + 320);
    *((void *)&v47 + 1) = *(void *)(a1 + 312);
    uint64_t v57 = 0LL;
    uint64_t v58 = 0LL;
    uint64_t v59 = 0LL;
    sub_1003E6844(&v57, a1 + 328);
    *(void *)&__int128 v46 = *(void *)(a1 + 360);
    *((void *)&v46 + 1) = *(void *)(a1 + 352);
    unsigned int v9 = *(unsigned __int8 *)(a1 + 642);
    unsigned int v10 = *(_DWORD *)(a1 + 1328) & 0xFFFFFFE0 | v9 | (2 * *(unsigned __int8 *)(a1 + 643));
    if (*(_BYTE *)(a1 + 643)) {
      v9 |= 2u;
    }
    int v11 = v10 | (4 * *(unsigned __int8 *)(a1 + 644));
    if (*(_BYTE *)(a1 + 644)) {
      v9 |= 4u;
    }
    int v12 = v11 | (8 * *(unsigned __int8 *)(a1 + 645));
    if (*(_BYTE *)(a1 + 645)) {
      v9 |= 8u;
    }
    int v13 = v12 | (16 * *(unsigned __int8 *)(a1 + 646));
    if (*(_BYTE *)(a1 + 646)) {
      v9 |= 0x10u;
    }
    unsigned int v44 = v9;
    *(_DWORD *)(a1 + 132_Block_object_dispose(va, 8) = v13;
    uint64_t v55 = 0LL;
    uint64_t v56 = 0LL;
    uint64_t v50 = a1;
    int v54 = (uint64_t *)&v55;
    int v14 = *(void **)(a1 + 584);
    if (v14 != (void *)(a1 + 592))
    {
      do
      {
        v53[0] = 0LL;
        v53[1] = 0LL;
        *(void *)int v52 = v53;
        __int128 v15 = (void *)v14[5];
        if (v15 != v14 + 6)
        {
          do
          {
            unsigned int v51 = *((_DWORD *)v15 + 8);
            __int128 v66 = *(_OWORD *)(v15 + 5);
            __int128 v67 = 0uLL;
            if (sub_10025FD88(&v67, (uint64_t)&v66))
            {
              __int16 v65 = &v51;
              int v16 = sub_1002DBC4C((uint64_t **)v52, &v51, (uint64_t)&unk_1006C2518, &v65);
              *(_OWORD *)(v16 + 5) = v67;
            }

            __int128 v17 = (void *)v15[1];
            if (v17)
            {
              do
              {
                uint64_t v18 = v17;
                __int128 v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                uint64_t v18 = (void *)v15[2];
                BOOL v19 = *v18 == (void)v15;
                __int128 v15 = v18;
              }

              while (!v19);
            }

            __int128 v15 = v18;
          }

          while (v18 != v14 + 6);
        }

        *(void *)&__int128 v67 = 0LL;
        *(void *)&__int128 v67 = calloc(1uLL, 0x10uLL);
        sub_10025FD88((_BYTE *)v67, v14[4]);
        *(void *)&__int128 v66 = &v67;
        __int128 v20 = (uint64_t **)(sub_1002554E8(&v54, (unint64_t *)&v67, (uint64_t)&unk_1006C2518, (uint64_t **)&v66) + 5);
        sub_10023BF24((uint64_t)v52, v53[0]);
        uint64_t v21 = (void *)v14[1];
        if (v21)
        {
          do
          {
            __int16 v22 = v21;
            uint64_t v21 = (void *)*v21;
          }

          while (v21);
        }

        else
        {
          do
          {
            __int16 v22 = (void *)v14[2];
            BOOL v19 = *v22 == (void)v14;
            int v14 = v22;
          }

          while (!v19);
        }

        int v14 = v22;
      }

      while (v22 != (void *)(a1 + 592));
    }

    sub_100242F54((uint64_t)v62);
    uint64_t v23 = sub_1002E6D7C();
    uint64_t v24 = v23;
    if (v49 != 0) {
      goto LABEL_52;
    }
    uint64_t v25 = HIBYTE(v64);
    if (v64 < 0) {
      uint64_t v25 = *((void *)&__dst + 1);
    }
    if (v25) {
LABEL_52:
    }
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)v23 + 232LL))(v23, v50, &__dst);
    if (v48 != 0) {
      goto LABEL_57;
    }
    uint64_t v26 = HIBYTE(v69);
    if (v69 < 0) {
      uint64_t v26 = *((void *)&buf + 1);
    }
    if (v26) {
LABEL_57:
    }
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)v24 + 40LL))(v24, v50, &buf);
    int v27 = (void *)HIBYTE(v61);
    if (v61 < 0) {
      int v27 = __p[1];
    }
    if (v27) {
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v24 + 216LL))(v24, v50, __p);
    }
    if (v47 != 0) {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v24 + 264LL))(v24, v50, v45);
    }
    if (v46 != 0
      && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v24 + 248LL))(v24, v50, &v57))
    {
      __int16 v28 = v55;
LABEL_106:
      sub_10025506C((uint64_t)&v54, v28);
      sub_10023BF24((uint64_t)&v57, v58);
      if (SHIBYTE(v61) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v69) < 0) {
        operator delete((void *)buf);
      }
      if (SHIBYTE(v64) < 0) {
        operator delete((void *)__dst);
      }
      sub_100242FAC((uint64_t)v62);
      return;
    }

    if (sub_10056AAF0(v50 + 1008)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 352LL))(v24, v50);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 1472LL))(v24, v50);
    if (qword_1008D9600 != -1) {
      dispatch_once(&qword_1008D9600, &stru_100895C48);
    }
    if (sub_10041AC1C())
    {
      int v29 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v52 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Skipping SDP write due to SDP in progress",  v52,  2u);
      }

      goto LABEL_82;
    }

    int v30 = *(_DWORD *)(v50 + 1072);
    if (v30 == 2)
    {
      int v31 = 1452;
    }

    else
    {
      if (v30 != 1)
      {
LABEL_82:
        __int128 v66 = 0uLL;
        uint64_t v32 = sub_100242F28((uint64_t)&v66, v50);
        int v33 = *(unsigned __int8 *)(v50 + 642);
        sub_100242FAC(v32);
        if (v33)
        {
          std::string v34 = (os_log_s *)qword_1008F7578;
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v66) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Flushing phonebook sync settings to disk",  (uint8_t *)&v66,  2u);
          }

          sub_100242ECC((uint64_t)v62);
          __int128 v35 = *(unsigned int **)(v50 + 744);
          else {
            uint64_t v36 = *v35;
          }
          sub_100242F54((uint64_t)v62);
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v24 + 312LL))(v24, v50, v44);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 336LL))(v24, v50, v36);
        }

        if (*(_BYTE *)(v50 + 647)) {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 424LL))(v24, v50, 1LL);
        }
LABEL_91:
        unint64_t v37 = v54;
        if (v54 != (uint64_t *)&v55)
        {
          do
          {
            __int128 v38 = (uint64_t *)v37[5];
            uint64_t v39 = v37 + 6;
            if (v38 != v37 + 6)
            {
              do
              {
                __int128 v66 = *(_OWORD *)(v38 + 5);
                sub_10025EB84(&v66);
                uint64_t v40 = (uint64_t *)v38[1];
                if (v40)
                {
                  do
                  {
                    uint64_t v41 = v40;
                    uint64_t v40 = (uint64_t *)*v40;
                  }

                  while (v40);
                }

                else
                {
                  do
                  {
                    uint64_t v41 = (uint64_t *)v38[2];
                    BOOL v19 = *v41 == (void)v38;
                    __int128 v38 = v41;
                  }

                  while (!v19);
                }

                __int128 v38 = v41;
              }

              while (v41 != v39);
            }

            sub_10023BF24((uint64_t)(v37 + 5), (void *)v37[6]);
            v37[6] = 0LL;
            v37[7] = 0LL;
            v37[5] = (uint64_t)v39;
            sub_10025EB84((_BYTE *)v37[4]);
            free((void *)v37[4]);
            unint64_t v42 = (uint64_t *)v37[1];
            if (v42)
            {
              do
              {
                uint64_t v43 = v42;
                unint64_t v42 = (uint64_t *)*v42;
              }

              while (v42);
            }

            else
            {
              do
              {
                uint64_t v43 = (uint64_t *)v37[2];
                BOOL v19 = *v43 == (void)v37;
                unint64_t v37 = v43;
              }

              while (!v19);
            }

            unint64_t v37 = v43;
          }

          while (v43 != (uint64_t *)&v55);
        }

        sub_10025506C((uint64_t)&v54, v55);
        __int16 v28 = 0LL;
        uint64_t v55 = 0LL;
        uint64_t v56 = 0LL;
        int v54 = (uint64_t *)&v55;
        goto LABEL_106;
      }

      int v31 = 76;
    }

    if (*(_DWORD *)(v50 + 1076) == v31
      && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t **))(*(void *)v24 + 296LL))(v24, v50, &v54)
      && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(v50, v52);
      sub_10067980C();
    }

    goto LABEL_82;
  }

  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
    sub_10067985C();
  }
}

void sub_1003D7910( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, void *a26, uint64_t a27, char a28, void *a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36, uint64_t a37, char a38)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a38);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D79C4(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 642);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003D7A08(uint64_t a1, uint64_t a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  uint64_t v4 = *(void *)(a1 + 520);
  else {
    uint64_t v5 = 602LL;
  }
  sub_100242FAC((uint64_t)v7);
  return v5;
}

void sub_1003D7A74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D7A88(uint64_t a1, uint64_t a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  uint64_t v4 = *(void **)(a1 + 520);
  if (!v4)
  {
    uint64_t v4 = sub_1002E91B0(a1);
    *(void *)(a1 + 520) = v4;
  }

  int v6 = 0;
  (*(void (**)(void *, int *))(*v4 + 56LL))(v4, &v6);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 520) + 48LL))(*(void *)(a1 + 520), a2);
  (*(void (**)(void))(**(void **)(a1 + 520) + 16LL))(*(void *)(a1 + 520));
  if (v6 != (_DWORD)a2) {
    sub_1003D7B40(a1);
  }
  return sub_100242FAC((uint64_t)v7);
}

void sub_1003D7B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1003D7B40(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 568);
  *(_DWORD *)(a1 + 56_Block_object_dispose(va, 8) = v1 + 1;
  if (!v1)
  {
    uint64_t v3 = sub_100404EB8();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    void v4[2] = sub_1003D7F7C;
    v4[3] = &unk_10087EB20;
    v4[4] = a1;
    sub_100405384(v3, v4);
  }

BOOL sub_1003D7BB0(uint64_t a1)
{
  return *(void *)(a1 + 520) != 0LL;
}

uint64_t sub_1003D7BC0(uint64_t a1, uint64_t a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  uint64_t v4 = *(void *)(a1 + 520);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 64LL))(v4, a2);
    (*(void (**)(void))(**(void **)(a1 + 520) + 16LL))(*(void *)(a1 + 520));
  }

  return sub_100242FAC((uint64_t)v6);
}

void sub_1003D7C28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D7C3C(uint64_t a1)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  int v6 = 0;
  uint64_t v2 = *(void *)(a1 + 520);
  if (v2)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v2 + 56LL))(v2, &v6);
    uint64_t v3 = *(void *)(a1 + 520);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    int v4 = v6;
    *(void *)(a1 + 520) = 0LL;
    if (v4) {
      sub_1003D7B40(a1);
    }
  }

  else
  {
    *(void *)(a1 + 520) = 0LL;
  }

  return sub_100242FAC((uint64_t)v7);
}

void sub_1003D7CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1003D7CD8(uint64_t a1, uint64_t a2)
{
  v19[0] = 0LL;
  v19[1] = 0LL;
  sub_100242F28((uint64_t)v19, a1);
  int v18 = 0;
  uint64_t v4 = *(void *)(a1 + 520);
  if (!v4 || ((*(void (**)(uint64_t, int *))(*(void *)v4 + 56LL))(v4, &v18), int v5 = v18, v18 <= 0))
  {
    int v5 = *(_DWORD *)(a1 + 528);
    if (v5 <= 0)
    {
      int v5 = *(_DWORD *)(a1 + 560);
      int v6 = (unsigned __int8 *)(a1 + 564);
    }

    else
    {
      int v6 = (unsigned __int8 *)(a1 + 532);
    }

    int v7 = *v6;
    if (v7) {
      goto LABEL_18;
    }
  }

  int v8 = *(unsigned __int16 *)(a1 + 1028);
  unsigned int v9 = v8 - 613;
  BOOL v10 = (v8 - 613) > 0x3A || ((1LL << (v8 - 101)) & 0x4A0000000000095LL) == 0;
  if ((!v10 || (v8 - 781) <= 0x17 && ((1 << (v8 - 13)) & 0xF80003) != 0) && *(_BYTE *)(a1 + 1296))
  {
    LOBYTE(v7) = 1;
LABEL_18:
    *(_DWORD *)a2 = v5;
    goto LABEL_19;
  }

  if (v5 >= 1)
  {
    LOBYTE(v7) = 2;
    goto LABEL_18;
  }

  *(_DWORD *)a2 = v5;
  LOBYTE(v7) = (v9 <= 0x3A && ((1LL << v9) & 0x4A0000000000095LL) != 0
LABEL_19:
  *(_BYTE *)(a2 + 4) = v7;
  int v11 = *(_DWORD *)(a1 + 536);
  *(_DWORD *)(a2 + _Block_object_dispose(va, 8) = v11;
  char v12 = 2 * (v11 > 0);
  if (*(_BYTE *)(a1 + 540)) {
    char v12 = *(_BYTE *)(a1 + 540);
  }
  *(_BYTE *)(a2 + 12) = v12;
  int v13 = *(_DWORD *)(a1 + 544);
  *(_DWORD *)(a2 + 16) = v13;
  char v14 = 2 * (v13 > 0);
  if (*(_BYTE *)(a1 + 548)) {
    char v14 = *(_BYTE *)(a1 + 548);
  }
  *(_BYTE *)(a2 + 20) = v14;
  int v15 = *(_DWORD *)(a1 + 552);
  *(_DWORD *)(a2 + 24) = v15;
  char v16 = 2 * (v15 > 0);
  if (*(_BYTE *)(a1 + 556)) {
    char v16 = *(_BYTE *)(a1 + 556);
  }
  *(_BYTE *)(a2 + 2_Block_object_dispose(va, 8) = v16;
  return sub_100242FAC((uint64_t)v19);
}

void sub_1003D7EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1003D7EB4(unsigned int *a1, int a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, (uint64_t)a1);
  switch(a2)
  {
    case 1:
      uint64_t v4 = a1[132];
      break;
    case 2:
      uint64_t v4 = a1[136];
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_5;
    case 4:
      uint64_t v4 = a1[134];
      break;
    case 8:
      uint64_t v4 = a1[138];
      break;
    default:
      if (a2 == 16)
      {
        uint64_t v4 = a1[140];
      }

      else
      {
LABEL_5:
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
          sub_100679888();
        }
        uint64_t v4 = 0xFFFFFFFFLL;
      }

      break;
  }

  sub_100242FAC((uint64_t)v6);
  return v4;
}

uint64_t sub_1003D7F7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_100242F28((uint64_t)v15, v1);
  int v2 = *(_DWORD *)(v1 + 568);
  if (v2)
  {
    *(_DWORD *)(v1 + 56_Block_object_dispose(va, 8) = 0;
    int v14 = 0;
    uint64_t v3 = *(void *)(v1 + 520);
    if (v3) {
      (*(void (**)(uint64_t, int *))(*(void *)v3 + 56LL))(v3, &v14);
    }
    int v4 = *(_DWORD *)(v1 + 528);
    int v5 = *(_DWORD *)(v1 + 536);
    int v6 = *(_DWORD *)(v1 + 544);
    int v7 = *(_DWORD *)(v1 + 552);
    int v8 = *(_DWORD *)(v1 + 560);
    sub_100242F54((uint64_t)v15);
    unsigned int v9 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(v1, __p);
      BOOL v10 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__int128 buf = 136448002;
      __int128 v17 = v10;
      __int16 v18 = 1024;
      int v19 = v14;
      __int16 v20 = 1024;
      int v21 = v4;
      __int16 v22 = 1024;
      int v23 = v5;
      __int16 v24 = 1024;
      int v25 = v6;
      __int16 v26 = 1024;
      int v27 = v7;
      __int16 v28 = 1024;
      int v29 = v8;
      __int16 v30 = 1024;
      int v31 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Battery changed: device %{public}s, I %d%%, S %d%%, L %d%%, R %d%%, Cs %d%%, Cm %d%%, CP %d",  buf,  0x36u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, v1, 13);
  }

  return sub_100242FAC((uint64_t)v15);
}

void sub_1003D8144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003D8168(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    v5[0] = 0LL;
    v5[1] = 0LL;
    sub_100242F28((uint64_t)v5, a1);
    *(_BYTE *)a2 = *(_DWORD *)(a1 + 528);
    *(_DWORD *)(a2 + 4) = *(unsigned __int8 *)(a1 + 532) == 1;
    *(_BYTE *)(a2 + 16) = *(_DWORD *)(a1 + 536);
    *(_DWORD *)(a2 + 20) = *(unsigned __int8 *)(a1 + 540) == 1;
    *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 544);
    *(_DWORD *)(a2 + 12) = *(unsigned __int8 *)(a1 + 548) == 1;
    *(_BYTE *)(a2 + 24) = *(_DWORD *)(a1 + 552);
    *(_DWORD *)(a2 + 2_Block_object_dispose(va, 8) = *(unsigned __int8 *)(a1 + 556) == 1;
    *(_BYTE *)(a2 + 32) = *(_DWORD *)(a1 + 560);
    *(_DWORD *)(a2 + 36) = *(unsigned __int8 *)(a1 + 564) == 1;
    sub_100242FAC((uint64_t)v5);
    return 0LL;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_1006798E8();
    }
    return 3LL;
  }

uint64_t sub_1003D8258(uint64_t a1, unsigned int a2, int a3)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, a1);
  if (a2 < 0x65)
  {
    switch(a3)
    {
      case 1:
        int v6 = (unsigned int *)(a1 + 528);
        goto LABEL_13;
      case 2:
        int v6 = (unsigned int *)(a1 + 544);
        goto LABEL_13;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_8;
      case 4:
        int v6 = (unsigned int *)(a1 + 536);
        goto LABEL_13;
      case 8:
        int v6 = (unsigned int *)(a1 + 552);
        goto LABEL_13;
      default:
        if (a3 == 16)
        {
          int v6 = (unsigned int *)(a1 + 560);
LABEL_13:
          unsigned int v7 = *v6;
          *int v6 = a2;
          if (v7 != a2) {
            sub_1003D7B40(a1);
          }
        }

        else
        {
LABEL_8:
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
            sub_100679888();
          }
        }

        break;
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
  {
    sub_100679914();
  }

  return sub_100242FAC((uint64_t)v9);
}

void sub_1003D836C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D8380(uint64_t a1, int a2, int a3)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1);
  switch(a3)
  {
    case 1:
      int v6 = (_BYTE *)(a1 + 532);
      goto LABEL_10;
    case 2:
      int v6 = (_BYTE *)(a1 + 548);
      goto LABEL_10;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_5;
    case 4:
      int v6 = (_BYTE *)(a1 + 540);
      goto LABEL_10;
    case 8:
      int v6 = (_BYTE *)(a1 + 556);
      goto LABEL_10;
    default:
      if (a3 != 16)
      {
LABEL_5:
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
          sub_100679888();
        }
LABEL_11:
        uint64_t v8 = 0LL;
        goto LABEL_13;
      }

      int v6 = (_BYTE *)(a1 + 564);
LABEL_10:
      int v7 = *v6;
      *int v6 = a2;
      if (v7 == a2) {
        goto LABEL_11;
      }
      sub_1003D7B40(a1);
      uint64_t v8 = 1LL;
LABEL_13:
      sub_100242FAC((uint64_t)v10);
      return v8;
  }

void sub_1003D8470( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D8484(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 572);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003D84C8(uint64_t a1, int a2, int a3)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1);
  int v6 = *(_DWORD *)(a1 + 572);
  int v7 = v6 & ~a3 | a3 & a2;
  *(_DWORD *)(a1 + 572) = v7;
  if (v7 != v6)
  {
    sub_100242F54((uint64_t)v10);
    uint64_t v8 = sub_1002E6D7C();
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v8 + 1504LL))(v8, a1, *(unsigned int *)(a1 + 572));
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 4102);
  }

  return sub_100242FAC((uint64_t)v10);
}

void sub_1003D858C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D85A0(uint64_t a1)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a1, __p);
    if (v6 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    *(_DWORD *)__int128 buf = 136446210;
    unsigned int v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Device %{public}s supports phonebook sync",  buf,  0xCu);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }

  *(_BYTE *)(a1 + 642) = 1;
  return sub_100242FAC((uint64_t)v7);
}

void sub_1003D8698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003D86B4(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 643);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003D86F8(uint64_t a1, int a2)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1);
  int v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a1, __p);
    int v5 = "disabled";
    if (a2) {
      int v5 = "enabled";
    }
    if (v9 >= 0) {
      char v6 = __p;
    }
    else {
      char v6 = (void **)__p[0];
    }
    *(_DWORD *)__int128 buf = 136315394;
    char v12 = v5;
    __int16 v13 = 2082;
    int v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Phonebook sync %s for device %{public}s",  buf,  0x16u);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  *(_BYTE *)(a1 + 643) = a2;
  return sub_100242FAC((uint64_t)v10);
}

void sub_1003D8814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003D8830(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 644);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003D8874(uint64_t a1, char a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 644) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003D88B8(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 645);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003D88FC(uint64_t a1, char a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 645) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003D8940(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 646);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003D8984(uint64_t a1, int a2)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1);
  int v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a1, __p);
    int v5 = "unselected";
    if (a2) {
      int v5 = "selected";
    }
    if (v9 >= 0) {
      char v6 = __p;
    }
    else {
      char v6 = (void **)__p[0];
    }
    *(_DWORD *)__int128 buf = 136315394;
    char v12 = v5;
    __int16 v13 = 2082;
    int v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Phonebook privacy %s for device %{public}s",  buf,  0x16u);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  *(_BYTE *)(a1 + 646) = a2;
  return sub_100242FAC((uint64_t)v10);
}

void sub_1003D8AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003D8ABC(uint64_t a1, char a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 64_Block_object_dispose(va, 8) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003D8B00(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 648);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003D8B44(uint64_t a1, __int16 a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_WORD *)(a1 + 650) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003D8B88(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int16 *)(a1 + 650);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003D8BCC(uint64_t a1, int a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 852) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003D8C10(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 852);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003D8C54(void *a1, _DWORD **a2)
{
  v17[0] = 0LL;
  v17[1] = 0LL;
  sub_100242F28((uint64_t)v17, (uint64_t)a1);
  int v4 = (char *)a1[93];
  a1[94] = v4;
  int v5 = *a2;
  if (*a2 != a2[1])
  {
    char v6 = a1 + 95;
    do
    {
      if ((unint64_t)v4 >= *v6)
      {
        uint64_t v8 = (char *)a1[93];
        uint64_t v9 = (v4 - v8) >> 2;
        unint64_t v10 = v9 + 1;
        uint64_t v11 = *v6 - (void)v8;
        if (v11 >> 1 > v10) {
          unint64_t v10 = v11 >> 1;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          __int16 v13 = (char *)sub_10024E33C((uint64_t)(a1 + 95), v12);
          int v4 = (char *)a1[94];
          uint64_t v8 = (char *)a1[93];
        }

        else
        {
          __int16 v13 = 0LL;
        }

        int v14 = &v13[4 * v9];
        *(_DWORD *)int v14 = *v5;
        int v7 = v14 + 4;
        while (v4 != v8)
        {
          int v15 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v14 - 1) = v15;
          v14 -= 4;
        }

        a1[93] = v14;
        a1[94] = v7;
        a1[95] = &v13[4 * v12];
        if (v8) {
          operator delete(v8);
        }
      }

      else
      {
        *(_DWORD *)int v4 = *v5;
        int v7 = v4 + 4;
      }

      a1[94] = v7;
      ++v5;
      int v4 = v7;
    }

    while (v5 != a2[1]);
  }

  return sub_100242FAC((uint64_t)v17);
}

void sub_1003D8D94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D8DAC(uint64_t a1, unsigned int a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  uint64_t v4 = *(void *)(a1 + 744);
  else {
    uint64_t v5 = *(unsigned int *)(v4 + 4LL * a2);
  }
  sub_100242FAC((uint64_t)v7);
  return v5;
}

uint64_t sub_1003D8E14@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  sub_100272534(a2, a1 + 744);
  return sub_100242FAC((uint64_t)v5);
}

void sub_1003D8E60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D8E74(uint64_t a1, int a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 512) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003D8EB8(uint64_t a1, _DWORD *a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *a2 = *(_DWORD *)(a1 + 512);
  sub_100242FAC((uint64_t)v5);
  return 0LL;
}

uint64_t sub_1003D8F04(uint64_t a1, uint64_t a2)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, a1);
  uint64_t v4 = *(__int128 **)(a1 + 1184);
  uint64_t v5 = *(std::string **)(a1 + 1176);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (char *)v5) >> 3);
  if (v6 < 0xB) {
    goto LABEL_2;
  }
  if ((char)v5[2].__r_.__value_.__s.__size_ < 0)
  {
    if (!v5[2].__r_.__value_.__l.__size_)
    {
LABEL_2:
      uint64_t v7 = 0LL;
      goto LABEL_10;
    }
  }

  else if (!v5[2].__r_.__value_.__s.__size_)
  {
    goto LABEL_2;
  }

  if (a1 + 1176 != a2) {
    sub_1003E63F8(a2, v5, v4, v6);
  }
  uint64_t v7 = 1LL;
LABEL_10:
  sub_100242FAC((uint64_t)v9);
  return v7;
}

void sub_1003D8FA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D8FB8(uint64_t a1, uint64_t a2)
{
  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_100242F28((uint64_t)v18, a1);
  uint64_t v4 = (uint64_t *)(a1 + 1176);
  if (a1 + 1176 != a2) {
    sub_1003E63F8( a1 + 1176,  *(std::string **)a2,  *(__int128 **)(a2 + 8),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1184) - *(void *)(a1 + 1176)) >> 3) >= 2)
  {
    unint64_t v5 = 1LL;
    uint64_t v6 = 24LL;
    do
    {
      if (qword_1008D60E0 != -1) {
        dispatch_once(&qword_1008D60E0, &stru_100895C68);
      }
      uint64_t v7 = (uint64_t)off_1008D60D8;
      memset(v17, 0, sizeof(v17));
      sub_10024062C( (char *)v17,  *(__int128 **)(a1 + 1176),  *(__int128 **)(a1 + 1184),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1184) - *(void *)(a1 + 1176)) >> 3));
      LOBYTE(v7) = sub_10022C844(v7, v17, v5);
      v16[0] = (void **)v17;
      sub_100024304(v16);
      if ((v7 & 1) == 0) {
        std::string::assign((std::string *)(*v4 + v6), "");
      }
      ++v5;
      v6 += 24LL;
    }

    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1184) - *(void *)(a1 + 1176)) >> 3) > v5);
  }

  memset(v16, 0, sizeof(v16));
  if (sub_1003D8F04(a1, (uint64_t)v16))
  {
    uint64_t v8 = *(void *)(a1 + 1176);
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 1184) - v8) >> 3) >= 2)
    {
      unint64_t v9 = 1LL;
      uint64_t v10 = 3LL;
      do
      {
        if (v9 != 5)
        {
          if (qword_1008D60E0 != -1) {
            dispatch_once(&qword_1008D60E0, &stru_100895C68);
          }
          uint64_t v11 = (uint64_t)off_1008D60D8;
          memset(v15, 0, sizeof(v15));
          sub_10024062C( (char *)v15,  *(__int128 **)(a1 + 1176),  *(__int128 **)(a1 + 1184),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1184) - *(void *)(a1 + 1176)) >> 3));
          LOBYTE(v11) = sub_10022C844(v11, v15, v9);
          int v19 = (void ***)v15;
          sub_100024304((void ***)&v19);
          uint64_t v8 = *v4;
          if ((v11 & 1) == 0)
          {
            std::string::operator=((std::string *)(v8 + v10 * 8), (const std::string *)&v16[0][v10]);
            uint64_t v8 = *v4;
          }
        }

        ++v9;
        v10 += 3LL;
      }

      while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 1184) - v8) >> 3) > v9);
    }
  }

  uint64_t v12 = sub_1002E6D7C();
  memset(v14, 0, sizeof(v14));
  sub_10024062C( (char *)v14,  *(__int128 **)(a1 + 1176),  *(__int128 **)(a1 + 1184),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1184) - *(void *)(a1 + 1176)) >> 3));
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v12 + 944LL))(v12, a1, v14);
  int v19 = (void ***)v14;
  sub_100024304((void ***)&v19);
  int v19 = v16;
  sub_100024304((void ***)&v19);
  return sub_100242FAC((uint64_t)v18);
}

void sub_1003D92A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

uint64_t sub_1003D930C@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, a1);
  uint64_t v6 = *(void *)(a1 + 1176);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 1184) - v6) >> 3);
  if (v7 < 0xB || v7 <= a2)
  {
    sub_10002418C(a3, "");
    return sub_100242FAC((uint64_t)v13);
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v8 = (__int128 *)(v6 + 24LL * a2);
  if (*((char *)v8 + 23) < 0)
  {
    sub_100024238(__p, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    uint64_t v12 = *((void *)v8 + 2);
    *(_OWORD *)std::stringbuf::string_type __p = v9;
  }

  if (SHIBYTE(v12) < 0)
  {
    if (__p[1] > (void *)1)
    {
      sub_100024238(a3, __p[0], (unint64_t)__p[1]);
      goto LABEL_14;
    }
  }

  else if (HIBYTE(v12) >= 2u)
  {
    *(_OWORD *)a3 = *(_OWORD *)__p;
    a3[2] = v12;
    goto LABEL_14;
  }

  sub_10002418C(a3, "");
LABEL_14:
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  return sub_100242FAC((uint64_t)v13);
}

void sub_1003D9438( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

uint64_t sub_1003D9468(uint64_t a1, int a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  if (a2 <= 2) {
    uint64_t v3 = byte_1006C2934[a2];
  }
  else {
    uint64_t v3 = 0LL;
  }
  sub_100242FAC((uint64_t)v5);
  return v3;
}

BOOL sub_1003D94C4(uint64_t a1)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  memset(&v5, 0, sizeof(v5));
  sub_1003D930C(a1, 7u, &v5);
  if ((v5.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v5.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v5.__r_.__value_.__l.__size_;
  }
  if (size >= 6) {
    BOOL v3 = !std::string::compare(&v5, size - 3, 3uLL, "dev") || std::string::compare(&v5, size - 5, 5uLL, "insec") == 0;
  }
  else {
    BOOL v3 = 0LL;
  }
  sub_100242FAC((uint64_t)v6);
  return v3;
}

void sub_1003D9594( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D95C0(const std::string *a1, std::string *a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, (uint64_t)a1);
  if ((char)a1[50].__r_.__value_.__s.__size_ < 0)
  {
    if (a1[50].__r_.__value_.__l.__size_) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v4 = 0LL;
    goto LABEL_6;
  }

  if (!a1[50].__r_.__value_.__s.__size_) {
    goto LABEL_5;
  }
LABEL_3:
  std::string::operator=(a2, a1 + 50);
  uint64_t v4 = 1LL;
LABEL_6:
  sub_100242FAC((uint64_t)v6);
  return v4;
}

void sub_1003D9630( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D9644(std::string *a1, const std::string *a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, (uint64_t)a1);
  std::string::operator=(a1 + 50, a2);
  uint64_t v4 = sub_1002E6D7C();
  if ((char)a1[50].__r_.__value_.__s.__size_ < 0)
  {
    sub_100024238(__p, a1[50].__r_.__value_.__l.__data_, a1[50].__r_.__value_.__l.__size_);
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)&a1[50].__r_.__value_.__l.__data_;
    std::string::size_type cap = a1[50].__r_.__value_.__l.__cap_;
  }

  (*(void (**)(uint64_t, std::string *, void **))(*(void *)v4 + 960LL))(v4, a1, __p);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return sub_100242FAC((uint64_t)v8);
}

void sub_1003D96F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_1003D9724(uint64_t a1, uint64_t a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  uint64_t v4 = *(void *)(a1 + 1240);
  if (v4)
  {
    __int128 v5 = *(_OWORD *)(a1 + 1224);
    *(_OWORD *)(a2 + 12) = *(_OWORD *)(a1 + 1236);
    *(_OWORD *)a2 = v5;
    std::string::operator=((std::string *)(a2 + 32), (const std::string *)(a1 + 1256));
  }

  sub_100242FAC((uint64_t)v7);
  return v4 != 0;
}

void sub_1003D97A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003D97B4( uint64_t a1, char a2, __int16 a3, int a4, __int16 a5, char a6, uint64_t a7, int a8, const std::string *a9)
{
  v22[0] = 0LL;
  v22[1] = 0LL;
  sub_100242F28((uint64_t)v22, a1);
  *(_BYTE *)(a1 + 1224) = a2;
  *(_WORD *)(a1 + 1226) = a3;
  *(_DWORD *)(a1 + 122_Block_object_dispose(va, 8) = a4;
  *(_WORD *)(a1 + 1232) = a5;
  *(_BYTE *)(a1 + 1234) = a6;
  *(void *)(a1 + 1240) = a7;
  *(_DWORD *)(a1 + 124_Block_object_dispose(va, 8) = a8;
  std::string::operator=((std::string *)(a1 + 1256), a9);
  uint64_t v17 = sub_1002E6D7C();
  v19[0] = *(_OWORD *)(a1 + 1224);
  *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)(a1 + 1236);
  if (*(char *)(a1 + 1279) < 0)
  {
    sub_100024238(&__p, *(void **)(a1 + 1256), *(void *)(a1 + 1264));
  }

  else
  {
    __int128 __p = *(_OWORD *)(a1 + 1256);
    uint64_t v21 = *(void *)(a1 + 1272);
  }

  (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(void *)v17 + 976LL))(v17, a1, v19);
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__p);
  }
  return sub_100242FAC((uint64_t)v22);
}

void sub_1003D98D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D98FC(uint64_t a1)
{
  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_100895BE8);
  }
  return sub_1003CA0E8((uint64_t)off_1008D67E0, a1);
}

uint64_t sub_1003D994C(uint64_t a1)
{
  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_100895BE8);
  }
  return sub_1003CA15C((uint64_t)off_1008D67E0, a1);
}

uint64_t sub_1003D999C(uint64_t a1)
{
  if (qword_1008D67E8 != -1) {
    dispatch_once(&qword_1008D67E8, &stru_100895BE8);
  }
  unsigned int v2 = sub_1003CA15C((uint64_t)off_1008D67E0, a1);
  unsigned __int8 v3 = 0;
  if (v2)
  {
    do
    {
      v3 += v2 & 1;
      BOOL v4 = v2 > 1;
      v2 >>= 1;
    }

    while (v4);
  }

  return v3;
}

void sub_1003D9A14(uint64_t a1, int a2, char a3)
{
  if (!a2)
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    sub_100242F28((uint64_t)__p, a1);
    *(_BYTE *)(a1 + 1332) = 1;
    *(void *)__int128 buf = 0LL;
    sub_1000B0400((uint64_t)buf);
    uint64_t v6 = *(__int16 *)&buf[4];
    *(void *)(a1 + 1336) = *(int *)buf;
    *(void *)(a1 + 1344) = v6;
    *(_BYTE *)(a1 + 1333) = a3;
    *(_BYTE *)(a1 + 1384) = 0;
    sub_100242F54((uint64_t)__p);
    sub_1003D6C7C((unsigned __int8 *)a1);
    sub_100242FAC((uint64_t)__p);
  }

  unint64_t v7 = (os_log_s *)qword_1008F7578;
  if (os_signpost_enabled((os_log_t)qword_1008F7578))
  {
    sub_1003CF00C(a1, __p);
    if (v10 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    *(_DWORD *)__int128 buf = 136446466;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v12 = 1024;
    int v13 = a2;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v7,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "BTSignPost",  "ACL connected for device %{public}s with result:%d",  buf,  0x12u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_1003D9B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1003D9B88(uint64_t a1, int a2, int a3)
{
  if (!a2)
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    sub_100242F28((uint64_t)__p, a1);
    *(_WORD *)(a1 + 1332) = 0;
    *(_BYTE *)(a1 + 1121) = 0;
    v13[0] = 0LL;
    sub_1000B0400((uint64_t)v13);
    if ((unint64_t)(SLODWORD(v13[0]) - *(void *)(a1 + 1336)) > 0x3C)
    {
      *(_WORD *)(a1 + 1353) = 0;
      *(_DWORD *)(a1 + 1356) = 0;
    }

    else
    {
      int v5 = *(_DWORD *)(a1 + 1356);
      if (!v5 || v5 == a3)
      {
        ++*(_BYTE *)(a1 + 1354);
      }

      else
      {
        *(_BYTE *)(a1 + 1354) = 0;
        *(_DWORD *)(a1 + 1356) = 0;
      }

      *(_DWORD *)(a1 + 1356) = a3;
      ++*(_BYTE *)(a1 + 1353);
    }

    *(void *)(a1 + 1336) = 0LL;
    *(void *)(a1 + 1344) = 0LL;
    sub_100242FAC((uint64_t)__p);
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  sub_100242F28((uint64_t)__p, a1);
  *(_BYTE *)(a1 + 1432) = 0;
  sub_100242FAC((uint64_t)__p);
  char v15 = 0;
  uint64_t v6 = sub_1002E6D7C();
  sub_10002418C(__p, "HasTS");
  (*(void (**)(uint64_t, uint64_t, void **, char *))(*(void *)v6 + 784LL))(v6, a1, __p, &v15);
  if (SBYTE7(v19) < 0) {
    operator delete(__p[0]);
  }
  if (!v15)
  {
    if (*(unsigned __int8 *)(a1 + 1353) >= 5u)
    {
      *(_BYTE *)(a1 + 1353) = 0;
      uint64_t v24 = 0LL;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      *(_OWORD *)__int128 __p = 0u;
      __int128 v19 = 0u;
      if (sub_1003D9F10(a1, 0, 409, a3, (uint64_t)__p))
      {
        unint64_t v7 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C(a1, v13);
          uint64_t v8 = v14 >= 0 ? v13 : (void **)v13[0];
          *(_DWORD *)__int128 buf = 136315138;
          uint64_t v17 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Submitting contextual metric for event 'BT_CONNECTION_DISCONNECTION_RED_FLAG' for %s",  buf,  0xCu);
          if (v14 < 0) {
            operator delete(v13[0]);
          }
        }

        uint64_t v9 = sub_1002E8D94();
        (*(void (**)(uint64_t, void **, void))(*(void *)v9 + 248LL))( v9,  __p,  *(unsigned __int8 *)(a1 + 1316));
      }
    }

    if (*(unsigned __int8 *)(a1 + 1354) >= 5u)
    {
      *(_BYTE *)(a1 + 1354) = 0;
      *(_DWORD *)(a1 + 1356) = 0;
      uint64_t v24 = 0LL;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      *(_OWORD *)__int128 __p = 0u;
      __int128 v19 = 0u;
      if (sub_1003D9F10(a1, 0, 410, a3, (uint64_t)__p))
      {
        char v10 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C(a1, v13);
          if (v14 >= 0) {
            uint64_t v11 = v13;
          }
          else {
            uint64_t v11 = (void **)v13[0];
          }
          *(_DWORD *)__int128 buf = 136315138;
          uint64_t v17 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Submitting contextual metric for event 'BT_CONNECTION_DISCONNECTION_SAME_REASON_RED_FLAG' for %s",  buf,  0xCu);
          if (v14 < 0) {
            operator delete(v13[0]);
          }
        }

        uint64_t v12 = sub_1002E8D94();
        (*(void (**)(uint64_t, void **, void))(*(void *)v12 + 248LL))( v12,  __p,  *(unsigned __int8 *)(a1 + 1316));
      }
    }
  }

void sub_1003D9E98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t sub_1003D9ECC(uint64_t a1, char a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 1432) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003D9F10(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_100895C88);
  }
  if (*((_BYTE *)off_1008D60A8 + 76))
  {
    char v37 = 0;
    sub_100242CA4(&v37);
    *(_BYTE *)(a5 + 54) = sub_10011257C(a1 + 128);
    sub_100242CD0(&v37);
    *(_DWORD *)a5 = a3;
    *(_DWORD *)(a5 + 44) = a2;
    *(_DWORD *)(a5 + 4_Block_object_dispose(va, 8) = a4;
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    *(_BYTE *)(a5 + 52) = sub_10040219C((uint64_t)off_1008D5F48);
    if (qword_1008D5F10 != -1) {
      dispatch_once(&qword_1008D5F10, &stru_100895CA8);
    }
    id v10 = sub_10059A34C((uint64_t)off_1008D5F08);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    *(_BYTE *)(a5 + 53) = [v11 count];

    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    *(void *)(a5 + 64) = *((unsigned int *)off_1008D5F48 + 75);
    v36[0] = 0LL;
    v36[1] = 0LL;
    sub_100242F28((uint64_t)v36, a1 + 64);
    uint64_t v12 = (_OWORD *)(a5 + 4);
    if (*(_BYTE *)(a1 + 740)
      && (v13 = *(_OWORD *)(a1 + 700), *(_DWORD *)(a5 + 20) = *(_DWORD *)(a1 + 716), *uint64_t v12 = v13, *(_BYTE *)(a1 + 741)))
    {
      __int128 v14 = *(_OWORD *)(a1 + 720);
      *(_DWORD *)(a5 + 40) = *(_DWORD *)(a1 + 736);
      *(_OWORD *)(a5 + 24) = v14;
      uint64_t v15 = 1LL;
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    *(_DWORD *)(a5 + 56) = *(_DWORD *)(a1 + 1320);
    *(_DWORD *)(a5 + 72) = sub_1003D994C(a1);
    *(_DWORD *)(a5 + 76) = sub_1003D98FC(a1);
    uint64_t v16 = *(unsigned int *)(a1 + 1328);
    *(void *)(a5 + 8_Block_object_dispose(va, 8) = v16;
    *(_WORD *)(a5 + 80) = 0;
    if (*(_BYTE *)(a1 + 1316))
    {
      *(_BYTE *)(a5 + 80) = *(_DWORD *)(a1 + 1312);
      *(_BYTE *)(a5 + 81) = *(_BYTE *)(a1 + 1324);
    }

    *(void *)(a5 + 8_Block_object_dispose(va, 8) = v16;
    int v17 = sub_1003D0070(a1, 0x20u);
    *(_BYTE *)(a5 + 9_Block_object_dispose(va, 8) = v17 == 4;
    if ((_DWORD)v15)
    {
      __int16 v18 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = *(_DWORD *)a5;
        int v20 = *(_DWORD *)(a5 + 44);
        int v21 = *(_DWORD *)(a5 + 48);
        int v22 = *(unsigned __int8 *)(a5 + 52);
        int v23 = *(unsigned __int8 *)(a5 + 53);
        int v24 = *(unsigned __int8 *)(a5 + 54);
        int v25 = *(_DWORD *)(a5 + 56);
        uint64_t v26 = *(void *)(a5 + 64);
        int v27 = *(_DWORD *)(a5 + 72);
        int v28 = *(_DWORD *)(a5 + 76);
        int v29 = *(unsigned __int8 *)(a5 + 80);
        int v30 = *(unsigned __int8 *)(a5 + 81);
        uint64_t v31 = *(void *)(a5 + 88);
        *(_DWORD *)__int128 buf = 67113474;
        int v39 = v19;
        __int16 v40 = 1042;
        *(_DWORD *)uint64_t v41 = 20;
        *(_WORD *)&v41[4] = 2098;
        *(void *)&v41[6] = a5 + 4;
        *(_WORD *)&v41[14] = 1042;
        *(_DWORD *)&v41[16] = 20;
        __int16 v42 = 2098;
        uint64_t v43 = a5 + 24;
        __int16 v44 = 1024;
        int v45 = v20;
        __int16 v46 = 1024;
        int v47 = v21;
        __int16 v48 = 1024;
        int v49 = v22;
        __int16 v50 = 1024;
        int v51 = v23;
        __int16 v52 = 1024;
        int v53 = v24;
        __int16 v54 = 1024;
        int v55 = v25;
        __int16 v56 = 2048;
        uint64_t v57 = v26;
        __int16 v58 = 1024;
        int v59 = v27;
        __int16 v60 = 1024;
        int v61 = v28;
        __int16 v62 = 1024;
        int v63 = v29;
        __int16 v64 = 1024;
        int v65 = v30;
        __int16 v66 = 2048;
        uint64_t v67 = v31;
        __int16 v68 = 1024;
        BOOL v69 = v17 == 4;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Contextual Metric - {0x%x, %{public}.20P, %{public}.20P, 0x%x, %d, %d, %d, %d, 0x%x, 0x%llx, 0x%x, 0x%x, %d, %d, 0x%llx, %d}",  buf,  0x7Eu);
      }

      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a5 + 4, 20LL));
      int v33 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 68289282;
        int v39 = 20;
        __int16 v40 = 2098;
        *(void *)uint64_t v41 = v12;
        *(_WORD *)&v41[8] = 2112;
        *(void *)&v41[10] = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Contextual Metric primary hash %{public}.20P    data hash %@",  buf,  0x1Cu);
      }
    }

    sub_100242FAC((uint64_t)v36);
    sub_100242CD8(&v37);
  }

  else
  {
    std::string v34 = (os_log_s *)qword_1008F7578;
    uint64_t v15 = 0LL;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Stack is not ready, not generating contextual metric",  buf,  2u);
      return 0LL;
    }
  }

  return v15;
}

void sub_1003DA35C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_1003DA39C(uint64_t a1, int a2)
{
  *(_BYTE *)(a1 + 786) = a2 != 0;
  uint64_t v3 = sub_1002E6D7C();
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v3 + 408LL))( v3,  a1,  *(unsigned __int8 *)(a1 + 786));
}

uint64_t sub_1003DA3D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 647);
}

uint64_t sub_1003DA3E0(uint64_t a1, int a2)
{
  BOOL v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    sub_1003CF00C(a1, __p);
    int v5 = (void **)__p[0];
    uint64_t v6 = "No";
    if (v10 >= 0) {
      int v5 = __p;
    }
    if (a2) {
      uint64_t v6 = "Yes";
    }
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v12 = v5;
    __int16 v13 = 2080;
    __int128 v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Setting device %{public}s to allow sco for turn by turn: %s",  buf,  0x16u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  *(_BYTE *)(a1 + 647) = a2;
  uint64_t v7 = sub_1002E6D7C();
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v7 + 424LL))( v7,  a1,  *(unsigned __int8 *)(a1 + 647));
}

uint64_t sub_1003DA4FC(uint64_t a1)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  unsigned int v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int16 *)(a1 + 654);
    *(_DWORD *)__int128 buf = 67109120;
    int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Last AVRCP version is %d", buf, 8u);
  }

  uint64_t v4 = *(unsigned __int16 *)(a1 + 654);
  sub_100242FAC((uint64_t)v6);
  return v4;
}

uint64_t sub_1003DA5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 440LL))(v4, a1, a2);
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  *(_WORD *)(a1 + 654) = a2;
  int v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting AVRCP version to %d", buf, 8u);
  }

  return sub_100242FAC((uint64_t)v7);
}

uint64_t sub_1003DA698(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int16 *)(a1 + 660);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DA6DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 488LL))(v4, a1, a2);
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  *(_WORD *)(a1 + 660) = a2;
  int v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v9 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Setting AVRCP Controller version to %d",  buf,  8u);
  }

  return sub_100242FAC((uint64_t)v7);
}

uint64_t sub_1003DA7B4(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int16 *)(a1 + 662);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DA7F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 504LL))(v4, a1, a2);
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_WORD *)(a1 + 662) = a2;
  return sub_100242FAC((uint64_t)v6);
}

uint64_t sub_1003DA854(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int16 *)(a1 + 664);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DA898(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 520LL))(v4, a1, a2);
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  *(_WORD *)(a1 + 664) = a2;
  int v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting AVRCP Target version to %d", buf, 8u);
  }

  return sub_100242FAC((uint64_t)v7);
}

uint64_t sub_1003DA970(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int16 *)(a1 + 666);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DA9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 536LL))(v4, a1, a2);
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_WORD *)(a1 + 666) = a2;
  return sub_100242FAC((uint64_t)v6);
}

uint64_t sub_1003DAA10(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int16 *)(a1 + 668);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DAA54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 552LL))(v4, a1, a2);
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  *(_WORD *)(a1 + 66_Block_object_dispose(va, 8) = a2;
  int v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting Handsfree version to %d", buf, 8u);
  }

  return sub_100242FAC((uint64_t)v7);
}

uint64_t sub_1003DAB2C(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int16 *)(a1 + 670);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DAB70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 568LL))(v4, a1, a2);
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_WORD *)(a1 + 670) = a2;
  return sub_100242FAC((uint64_t)v6);
}

uint64_t sub_1003DABCC(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 584LL))(v3, a1, &v8);
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 672) = v8;
  int v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting A2DP Sink version to %d", buf, 8u);
  }

  return sub_100242FAC((uint64_t)v7);
}

uint64_t sub_1003DACA8(uint64_t a1, __int16 a2)
{
  __int16 v6 = a2;
  uint64_t v3 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, __int16 *))(*(void *)v3 + 600LL))(v3, a1, &v6);
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_WORD *)(a1 + 674) = v6;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003DAD08(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 616LL))(v3, a1, &v8);
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 676) = v8;
  int v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting MAP version to %d", buf, 8u);
  }

  return sub_100242FAC((uint64_t)v7);
}

uint64_t sub_1003DADE4(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 632LL))(v3, a1, &v8);
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 67_Block_object_dispose(va, 8) = v8;
  int v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting Object Push version to %d", buf, 8u);
  }

  return sub_100242FAC((uint64_t)v7);
}

uint64_t sub_1003DAEC0(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 648LL))(v3, a1, &v8);
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 680) = v8;
  int v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting PNP version to %d", buf, 8u);
  }

  return sub_100242FAC((uint64_t)v7);
}

uint64_t sub_1003DAF9C(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 664LL))(v3, a1, &v8);
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 682) = v8;
  int v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting SerialPort version to %d", buf, 8u);
  }

  return sub_100242FAC((uint64_t)v7);
}

uint64_t sub_1003DB078(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 680LL))(v3, a1, &v8);
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 684) = v8;
  int v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting HID version to %d", buf, 8u);
  }

  return sub_100242FAC((uint64_t)v7);
}

uint64_t sub_1003DB154(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 696LL))(v3, a1, &v8);
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 686) = v8;
  int v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting GATT version to %d", buf, 8u);
  }

  return sub_100242FAC((uint64_t)v7);
}

uint64_t sub_1003DB230(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 712LL))(v3, a1, &v8);
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 68_Block_object_dispose(va, 8) = v8;
  int v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting WIAP version to %d", buf, 8u);
  }

  return sub_100242FAC((uint64_t)v7);
}

uint64_t sub_1003DB30C(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 728LL))(v3, a1, &v8);
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 690) = v8;
  int v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting AVDTP version to %d", buf, 8u);
  }

  return sub_100242FAC((uint64_t)v7);
}

uint64_t sub_1003DB3E8(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v8 = a2;
  uint64_t v3 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)v3 + 744LL))(v3, a1, &v8);
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  int v4 = v8;
  *(_WORD *)(a1 + 692) = v8;
  int v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting AVCTP version to %d", buf, 8u);
  }

  return sub_100242FAC((uint64_t)v7);
}

uint64_t sub_1003DB4C4(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 696);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DB508(uint64_t a1, int a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 696) = a2;
  int v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting Firmware version to %d", buf, 8u);
  }

  return sub_100242FAC((uint64_t)v6);
}

uint64_t sub_1003DB5C8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 740);
}

BOOL sub_1003DB5D0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 740);
  if (a2 && *(_BYTE *)(a1 + 740))
  {
    __int128 v3 = *(_OWORD *)(a1 + 700);
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 716);
    *(_OWORD *)a2 = v3;
  }

  return v2 != 0;
}

uint64_t sub_1003DB5FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 741);
}

BOOL sub_1003DB604(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 741);
  if (a2 && *(_BYTE *)(a1 + 741))
  {
    __int128 v3 = *(_OWORD *)(a1 + 720);
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 736);
    *(_OWORD *)a2 = v3;
  }

  return v2 != 0;
}

uint64_t sub_1003DB62C(uint64_t a1)
{
  v137[0] = 0LL;
  v137[1] = 0LL;
  sub_100242F28((uint64_t)v137, a1 + 64);
  *(_OWORD *)__int128 __p = 0u;
  __int128 v243 = 0u;
  memset(v241, 0, sizeof(v241));
  __int128 v239 = 0u;
  __int128 v240 = 0u;
  __int128 v237 = 0u;
  __int128 v238 = 0u;
  __int128 v235 = 0u;
  __int128 v236 = 0u;
  __int128 v233 = 0u;
  __int128 v234 = 0u;
  __int128 v231 = 0u;
  __int128 v232 = 0u;
  memset(v230, 0, sizeof(v230));
  __int128 v228 = 0u;
  __int128 v229 = 0u;
  *(_OWORD *)id v135 = 0u;
  __int128 v136 = 0u;
  sub_10040F90C((uint64_t)v135, 0);
  uint64_t v227 = 0LL;
  __int128 v226 = 0u;
  memset(v225, 0, sizeof(v225));
  __int128 v223 = 0u;
  __int128 v224 = 0u;
  __int128 v221 = 0u;
  __int128 v222 = 0u;
  __int128 v219 = 0u;
  __int128 v220 = 0u;
  sub_100532DC0((uint64_t)&v219 + 1);
  BYTE2(v220) = 0;
  BYTE4(v220) = 0;
  BYTE2(v222) = 0;
  BYTE4(v222) = 0;
  HIDWORD(v225[2]) = 0;
  *((void *)&v220 + 1) = 0LL;
  __int128 v221 = 0uLL;
  LOBYTE(v222) = 0;
  *((void *)&v222 + 1) = 0LL;
  __int128 v223 = 0uLL;
  LOBYTE(v224) = 0;
  *((void *)&v224 + 1) = 0LL;
  memset(v225, 0, 19);
  LOBYTE(v225[3]) = 1;
  BYTE2(v227) = 0;
  *(void *)((char *)&v225[3] + 6) = 0LL;
  *(void *)((char *)&v225[3] + 1) = 0LL;
  v225[5] = 0LL;
  __int128 v226 = 0uLL;
  LOBYTE(v227) = 0;
  if (*(_BYTE *)(a1 + 742))
  {
    int v2 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Identification - metric has already been updated",  buf,  2u);
    }

    goto LABEL_228;
  }

  int v4 = (int *)(a1 + 1076);
  int v5 = *(_DWORD *)(a1 + 1076);
  if (v5 == 76 && (unsigned int v6 = *(_DWORD *)(a1 + 1080) - 8194, v6 <= 0x1D) && ((1 << v6) & 0x20037F9B) != 0
    || *(_BYTE *)(a1 + 1069) && (*(_BYTE *)(a1 + 1089) & 0x10) != 0)
  {
    *(void *)__int128 buf = 0LL;
    *(void *)&uint8_t buf[8] = 0LL;
    sub_100242F28((uint64_t)buf, a1);
    int v7 = *(_DWORD *)(a1 + 696);
    sub_100242FAC((uint64_t)buf);
    if (!v7)
    {
      uint64_t v11 = (os_log_s *)qword_1008F7578;
      if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_228;
      }
      sub_1003CF00C(a1, buf);
      uint64_t v12 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      LODWORD(v217) = 136446210;
      *(void *)((char *)&v217 + 4) = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Identification - Apple Audio Device firmware version not yet known for device %{public}s. Waiting until firmware version comes in.",  (uint8_t *)&v217,  0xCu);
      if ((buf[23] & 0x80000000) == 0) {
        goto LABEL_228;
      }
      __int16 v13 = *(void **)buf;
LABEL_35:
      operator delete(v13);
      goto LABEL_228;
    }

    int v5 = *v4;
  }

  if (v5 == 76 && (unsigned int v8 = *(_DWORD *)(a1 + 1080) - 8194, v8 <= 0x1D) && ((1 << v8) & 0x20037F9B) != 0
    || *(_BYTE *)(a1 + 1069) && (*(_BYTE *)(a1 + 1089) & 0x10) != 0
    || *(_BYTE *)(a1 + 1369) && *(_BYTE *)(a1 + 1370) && (sub_1003CF350((unsigned __int8 *)a1) & 1) != 0)
  {
    sub_1003D01A0(a1, (uint64_t)buf);
    if (SBYTE7(v243) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)__int128 __p = *(_OWORD *)buf;
    *(void *)&__int128 v243 = *(void *)&buf[16];
    int v9 = *(_DWORD *)(a1 + 1072);
    if (v9 == 2)
    {
      int v10 = 1452;
    }

    else
    {
      if (v9 != 1) {
        goto LABEL_39;
      }
      int v10 = 76;
    }

    if (*v4 == v10)
    {
      LOWORD(v22_Block_object_dispose(va, 8) = 2560;
      char v21 = 39;
LABEL_42:
      BYTE2(v22_Block_object_dispose(va, 8) = v21;
      int v22 = (unsigned __int8 *)BYTE7(v243);
      if ((SBYTE7(v243) & 0x80u) == 0) {
        int v23 = __p;
      }
      else {
        int v23 = (void **)__p[0];
      }
      if (SBYTE7(v243) < 0) {
        int v22 = (unsigned __int8 *)__p[1];
      }
      buf[0] = 13;
      int v24 = sub_1003DCD38(v23, &v22[(void)v23], buf);
      int v25 = (char *)__p + BYTE7(v243);
      if ((SBYTE7(v243) & 0x80u) == 0)
      {
        uint64_t v26 = __p;
      }

      else
      {
        int v25 = (char *)__p[0] + (unint64_t)__p[1];
        uint64_t v26 = (void **)__p[0];
      }

      std::string::erase((std::string *)__p, v24 - (unsigned __int8 *)v26, v25 - (char *)v24);
      int v27 = (unsigned __int8 *)BYTE7(v243);
      if ((SBYTE7(v243) & 0x80u) == 0) {
        int v28 = __p;
      }
      else {
        int v28 = (void **)__p[0];
      }
      if (SBYTE7(v243) < 0) {
        int v27 = (unsigned __int8 *)__p[1];
      }
      buf[0] = 10;
      int v29 = sub_1003DCD38(v28, &v27[(void)v28], buf);
      int v30 = (char *)__p + BYTE7(v243);
      if ((SBYTE7(v243) & 0x80u) == 0)
      {
        uint64_t v31 = __p;
      }

      else
      {
        int v30 = (char *)__p[0] + (unint64_t)__p[1];
        uint64_t v31 = (void **)__p[0];
      }

      std::string::erase((std::string *)__p, v29 - (unsigned __int8 *)v31, v30 - (char *)v29);
      uint64_t v32 = (unsigned __int8 *)BYTE7(v243);
      if ((SBYTE7(v243) & 0x80u) == 0) {
        int v33 = __p;
      }
      else {
        int v33 = (void **)__p[0];
      }
      if (SBYTE7(v243) < 0) {
        uint64_t v32 = (unsigned __int8 *)__p[1];
      }
      buf[0] = 44;
      std::string v34 = sub_1003DCD38(v33, &v32[(void)v33], buf);
      __int128 v35 = (char *)__p + BYTE7(v243);
      if ((SBYTE7(v243) & 0x80u) == 0)
      {
        uint64_t v36 = __p;
      }

      else
      {
        __int128 v35 = (char *)__p[0] + (unint64_t)__p[1];
        uint64_t v36 = (void **)__p[0];
      }

      std::string::erase((std::string *)__p, v34 - (unsigned __int8 *)v36, v35 - (char *)v34);
      sub_100242F54((uint64_t)v137);
      sub_1003D6EF4(a1, (_WORD *)&v228 + 2, (_BYTE *)&v228 + 8, (_WORD *)&v228 + 3);
      char v134 = 0;
      sub_100242CA4(&v134);
      if (sub_10010F0DC(a1 + 128, &v231, (void *)&v231 + 1)
        && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
      {
        sub_100679A24();
      }

      sub_100242CD0(&v134);
      sub_100242ECC((uint64_t)v137);
      sub_1003D0454(a1, (_DWORD *)&v230[1] + 3);
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1);
      __int16 v37 = *(_WORD *)(a1 + 686);
      sub_100242FAC((uint64_t)buf);
      WORD5(v22_Block_object_dispose(va, 8) = v37;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1);
      __int16 v38 = *(_WORD *)(a1 + 688);
      sub_100242FAC((uint64_t)buf);
      WORD6(v22_Block_object_dispose(va, 8) = v38;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1);
      __int16 v39 = *(_WORD *)(a1 + 676);
      sub_100242FAC((uint64_t)buf);
      HIWORD(v22_Block_object_dispose(va, 8) = v39;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1);
      __int16 v40 = *(_WORD *)(a1 + 668);
      sub_100242FAC((uint64_t)buf);
      LOWORD(v229) = v40;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1);
      __int16 v41 = *(_WORD *)(a1 + 670);
      sub_100242FAC((uint64_t)buf);
      WORD1(v229) = v41;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1);
      __int16 v42 = *(_WORD *)(a1 + 672);
      sub_100242FAC((uint64_t)buf);
      WORD2(v229) = v42;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1);
      __int16 v43 = *(_WORD *)(a1 + 674);
      sub_100242FAC((uint64_t)buf);
      WORD3(v229) = v43;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1);
      __int16 v44 = *(_WORD *)(a1 + 660);
      sub_100242FAC((uint64_t)buf);
      WORD4(v229) = v44;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1);
      __int16 v45 = *(_WORD *)(a1 + 662);
      sub_100242FAC((uint64_t)buf);
      WORD5(v229) = v45;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1);
      __int16 v46 = *(_WORD *)(a1 + 680);
      sub_100242FAC((uint64_t)buf);
      WORD6(v229) = v46;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1);
      __int16 v47 = *(_WORD *)(a1 + 678);
      sub_100242FAC((uint64_t)buf);
      HIWORD(v229) = v47;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1);
      __int16 v48 = *(_WORD *)(a1 + 682);
      sub_100242FAC((uint64_t)buf);
      LOWORD(v230[0]) = v48;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1);
      __int16 v49 = *(_WORD *)(a1 + 684);
      sub_100242FAC((uint64_t)buf);
      WORD1(v230[0]) = v49;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1);
      __int16 v50 = *(_WORD *)(a1 + 690);
      sub_100242FAC((uint64_t)buf);
      WORD2(v230[0]) = v50;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1);
      __int16 v51 = *(_WORD *)(a1 + 692);
      sub_100242FAC((uint64_t)buf);
      WORD3(v230[0]) = v51;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      sub_100242F28((uint64_t)buf, a1);
      int v52 = *(_DWORD *)(a1 + 696);
      sub_100242FAC((uint64_t)buf);
      DWORD2(v230[1]) = v52;
      int v53 = *(_DWORD *)(a1 + 1072);
      if (*(_BYTE *)(a1 + 1068))
      {
        *(void *)((char *)v230 + 12) = *(void *)v4;
        int v54 = *(_DWORD *)(a1 + 1084);
        DWORD2(v230[0]) = v53;
        DWORD1(v230[1]) = v54;
      }

      BYTE3(v22_Block_object_dispose(va, 8) = 0;
      if (v53 == 2)
      {
        int v55 = 1452;
      }

      else
      {
        if (v53 != 1) {
          goto LABEL_76;
        }
        int v55 = 76;
      }

      if (*v4 == v55)
      {
LABEL_83:
        if (HIDWORD(v230[1]))
        {
          if ((WORD6(v230[1]) & 0x400) != 0 && (BYTE12(v230[1]) & 0x28) != 0) {
            HIDWORD(v230[1]) &= 0xFF001FFF;
          }
          int v59 = BYTE7(v233);
          if (SBYTE7(v233) < 0) {
            int v59 = DWORD2(v232);
          }
          int v60 = HIBYTE(v234);
          if (v234 < 0) {
            int v60 = v234;
          }
          int v61 = v59 + v60;
          int v62 = BYTE7(v236);
          if (SBYTE7(v236) < 0) {
            int v62 = DWORD2(v235);
          }
          CC_LONG v63 = v61 + v62 + 80;
          __int16 v64 = calloc(v63, 1uLL);
          *__int16 v64 = v228;
          __int128 v65 = v229;
          __int128 v66 = v230[0];
          __int128 v67 = v231;
          v64[3] = v230[1];
          v64[4] = v67;
          v64[1] = v65;
          v64[2] = v66;
          if ((SBYTE7(v233) & 0x80u) == 0) {
            __int16 v68 = &v232;
          }
          else {
            __int16 v68 = (__int128 *)v232;
          }
          if ((SBYTE7(v233) & 0x80u) == 0) {
            size_t v69 = BYTE7(v233);
          }
          else {
            size_t v69 = *((void *)&v232 + 1);
          }
          memcpy(v64 + 5, v68, v69);
          int v70 = BYTE7(v233);
          if (SBYTE7(v233) < 0) {
            int v70 = DWORD2(v232);
          }
          int v71 = v70 + 80;
          if (v234 >= 0) {
            uint64_t v72 = (char *)&v233 + 8;
          }
          else {
            uint64_t v72 = (char *)*((void *)&v233 + 1);
          }
          if (v234 >= 0) {
            size_t v73 = HIBYTE(v234);
          }
          else {
            size_t v73 = v234;
          }
          memcpy((char *)v64 + (v70 + 80), v72, v73);
          int v74 = HIBYTE(v234);
          if (v234 < 0) {
            int v74 = v234;
          }
          if ((SBYTE7(v236) & 0x80u) == 0) {
            uint64_t v75 = &v235;
          }
          else {
            uint64_t v75 = (__int128 *)v235;
          }
          if ((SBYTE7(v236) & 0x80u) == 0) {
            size_t v76 = BYTE7(v236);
          }
          else {
            size_t v76 = *((void *)&v235 + 1);
          }
          memcpy((char *)v64 + (v74 + v71), v75, v76);
          CC_SHA1(v64, v63, (unsigned __int8 *)&v241[3]);
          uint64_t v77 = sub_1002E6E00();
          if (((*(uint64_t (**)(uint64_t))(*(void *)v77 + 160LL))(v77) & 1) == 0)
          {
            uint64_t v78 = (os_log_s *)qword_1008F7578;
            if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "Identification - clearing friendly name due to release version",  buf,  2u);
            }

            if (SBYTE7(v243) < 0)
            {
              *(_BYTE *)__p[0] = 0;
              __p[1] = 0LL;
            }

            else
            {
              LOBYTE(__p[0]) = 0;
              BYTE7(v243) = 0;
            }
          }

          int v79 = (os_log_s *)qword_1008F7578;
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 67109634;
            *(_DWORD *)&uint8_t buf[4] = v63;
            *(_WORD *)&uint8_t buf[8] = 1040;
            *(_DWORD *)&buf[10] = v63;
            *(_WORD *)&_BYTE buf[14] = 2098;
            *(void *)&uint8_t buf[16] = &v228;
            _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "Identification - raw serialized data dump of length %d {%{public}.*P}",  buf,  0x18u);
            int v79 = (os_log_s *)qword_1008F7578;
          }

          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
          {
            if ((SBYTE7(v243) & 0x80u) == 0) {
              __int16 v80 = __p;
            }
            else {
              __int16 v80 = (void **)__p[0];
            }
            uint64_t v81 = (__int128 *)v232;
            if ((SBYTE7(v233) & 0x80u) == 0) {
              uint64_t v81 = &v232;
            }
            std::string v82 = (char *)*((void *)&v236 + 1);
            if (v237 >= 0) {
              std::string v82 = (char *)&v236 + 8;
            }
            __int16 v83 = (char *)&v233 + 8;
            if (v234 < 0) {
              __int16 v83 = (char *)*((void *)&v233 + 1);
            }
            uint64_t v84 = &v235;
            if (SBYTE7(v236) < 0) {
              uint64_t v84 = (__int128 *)v235;
            }
            int v85 = &v238;
            if (SBYTE7(v239) < 0) {
              int v85 = (__int128 *)v238;
            }
            __int16 v86 = (char *)&v239 + 8;
            if (v240 < 0) {
              __int16 v86 = (char *)*((void *)&v239 + 1);
            }
            *(_DWORD *)&uint8_t buf[4] = 20;
            *(_DWORD *)&buf[20] = 3;
            uint64_t v140 = &v228;
            id v142 = v80;
            int v144 = WORD2(v228);
            int v146 = BYTE8(v228);
            int v148 = WORD3(v228);
            *(_WORD *)&_BYTE buf[18] = 1042;
            __int16 v149 = 1042;
            __int16 v153 = 1042;
            int v150 = 8;
            int v154 = 8;
            *(_WORD *)&uint8_t buf[8] = 2098;
            __int16 v139 = 2098;
            __int16 v151 = 2098;
            __int16 v155 = 2098;
            int v160 = WORD5(v228);
            int v164 = HIWORD(v228);
            int v168 = WORD1(v229);
            int v172 = WORD3(v229);
            int v176 = WORD5(v229);
            int v180 = HIWORD(v229);
            int v184 = WORD1(v230[0]);
            int v188 = WORD3(v230[0]);
            int v192 = HIDWORD(v230[0]);
            int v196 = DWORD1(v230[1]);
            int v200 = BYTE3(v228);
            int v202 = v81;
            uint64_t v204 = v82;
            __n128 v152 = &v231;
            uint64_t v156 = (char *)&v231 + 8;
            uint64_t v208 = v84;
            v210 = v85;
            v212 = v86;
            int v216 = BYTE8(v243);
            int v158 = HIDWORD(v230[1]);
            int v162 = WORD6(v228);
            int v166 = (unsigned __int16)v229;
            int v170 = WORD2(v229);
            int v174 = WORD4(v229);
            int v178 = WORD6(v229);
            int v182 = LOWORD(v230[0]);
            int v186 = WORD2(v230[0]);
            int v190 = DWORD2(v230[0]);
            int v194 = v230[1];
            int v198 = DWORD2(v230[1]);
            int v206 = v83;
            __int16 v141 = 2082;
            __int16 v201 = 2082;
            __int16 v203 = 2082;
            __int16 v205 = 2082;
            __int16 v207 = 2082;
            __int16 v209 = 2082;
            __int16 v211 = 2082;
            __int16 v213 = 2082;
            uint64_t v87 = (void *)v241[0];
            if (v241[2] >= 0) {
              uint64_t v87 = v241;
            }
            uint64_t v214 = v87;
            __int16 v143 = 1024;
            __int16 v145 = 1024;
            __int16 v147 = 1024;
            __int16 v157 = 1024;
            __int16 v159 = 1024;
            __int16 v161 = 1024;
            __int16 v163 = 1024;
            __int16 v165 = 1024;
            __int16 v167 = 1024;
            __int16 v169 = 1024;
            __int16 v171 = 1024;
            __int16 v173 = 1024;
            __int16 v175 = 1024;
            __int16 v177 = 1024;
            __int16 v179 = 1024;
            __int16 v181 = 1024;
            __int16 v183 = 1024;
            __int16 v185 = 1024;
            __int16 v187 = 1024;
            __int16 v189 = 1024;
            __int16 v191 = 1024;
            __int16 v193 = 1024;
            __int16 v195 = 1024;
            __int16 v197 = 1024;
            __int16 v199 = 1024;
            __int16 v215 = 1024;
            *(_DWORD *)__int128 buf = 68299266;
            *(void *)&buf[10] = &v241[3];
            _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "Identification - generating metric {%{public}.20P, %{public}.3P, %{public}s, 0x%x, 0x%x, 0x%x, %{public}.8 P, %{public}.8P, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, %d, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{pub lic}s, %{public}s, %d}",  buf,  0x12Eu);
          }

          free(v64);
          *(_OWORD *)(a1 + 700) = *(_OWORD *)&v241[3];
          *(_DWORD *)(a1 + 716) = v241[5];
          uint64_t v88 = sub_1002E6D7C();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v88 + 56LL))(v88, a1, a1 + 700))
          {
            if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
              sub_1006799F8();
            }
          }

          else
          {
            *(_BYTE *)(a1 + 740) = 1;
            uint64_t v89 = sub_1002E6D7C();
            if ((*(unsigned int (**)(uint64_t, uint64_t, __int128 *, uint64_t))(*(void *)v89 + 88LL))( v89,  a1,  &v228,  80LL)
              && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
            {
              sub_1006799CC();
            }

            uint64_t v90 = BYTE7(v233);
            if (SBYTE7(v233) < 0) {
              uint64_t v90 = *((void *)&v232 + 1);
            }
            if (v90)
            {
              uint64_t v91 = sub_1002E6D7C();
              (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)v91 + 104LL))(v91, a1, &v232);
            }

            uint64_t v92 = HIBYTE(v237);
            if (v237 < 0) {
              uint64_t v92 = v237;
            }
            if (v92)
            {
              uint64_t v93 = sub_1002E6D7C();
              (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v93 + 120LL))(v93, a1, (char *)&v236 + 8);
            }

            uint64_t v94 = HIBYTE(v234);
            if (v234 < 0) {
              uint64_t v94 = v234;
            }
            if (v94)
            {
              uint64_t v95 = sub_1002E6D7C();
              (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v95 + 136LL))(v95, a1, (char *)&v233 + 8);
            }

            uint64_t v96 = BYTE7(v236);
            if (SBYTE7(v236) < 0) {
              uint64_t v96 = *((void *)&v235 + 1);
            }
            if (v96)
            {
              uint64_t v97 = sub_1002E6D7C();
              (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)v97 + 152LL))(v97, a1, &v235);
            }

            uint64_t v98 = BYTE7(v239);
            if (SBYTE7(v239) < 0) {
              uint64_t v98 = *((void *)&v238 + 1);
            }
            if (v98)
            {
              uint64_t v99 = sub_1002E6D7C();
              (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)v99 + 168LL))(v99, a1, &v238);
            }

            uint64_t v100 = HIBYTE(v240);
            if (v240 < 0) {
              uint64_t v100 = v240;
            }
            if (v100)
            {
              uint64_t v101 = sub_1002E6D7C();
              (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v101 + 184LL))(v101, a1, (char *)&v239 + 8);
            }

            uint64_t v102 = HIBYTE(v241[2]);
            if (v241[2] < 0) {
              uint64_t v102 = v241[1];
            }
            if (v102)
            {
              uint64_t v103 = sub_1002E6D7C();
              (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v103 + 200LL))(v103, a1, v241);
            }

            uint64_t v104 = sub_1002E6E00();
            if ((*(unsigned int (**)(uint64_t))(*(void *)v104 + 8LL))(v104)
              && (WORD1(v230[0]) || ((BOOL v105 = sub_1003D0874(a1), BYTE3(v228)) ? (v106 = 1) : (v106 = v105), v106 == 1)))
            {
              __int16 v107 = (os_log_s *)qword_1008F7578;
              if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v108 = sub_1002E6E00();
                int v109 = (*(uint64_t (**)(uint64_t))(*(void *)v108 + 8LL))(v108);
                int v110 = WORD1(v230[0]);
                BOOL v111 = sub_1003D0874(a1);
                *(_DWORD *)__int128 buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = v109;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v110;
                *(_WORD *)&_BYTE buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v111;
                _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_DEFAULT,  "Identification - routing friendly name: internal %d, hid %d, carkit %d",  buf,  0x14u);
              }
            }

            else
            {
              int v112 = (os_log_s *)qword_1008F7578;
              if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v113 = sub_1002E6E00();
                int v114 = (*(uint64_t (**)(uint64_t))(*(void *)v113 + 8LL))(v113);
                int v115 = WORD1(v230[0]);
                BOOL v116 = sub_1003D0874(a1);
                *(_DWORD *)__int128 buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = v114;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v115;
                *(_WORD *)&_BYTE buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v116;
                _os_log_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_DEFAULT,  "Identification - clearing friendly name: internal %d, hid %d, carkit %d",  buf,  0x14u);
              }

              if (SBYTE7(v243) < 0)
              {
                *(_BYTE *)__p[0] = 0;
                __p[1] = 0LL;
              }

              else
              {
                LOBYTE(__p[0]) = 0;
                BYTE7(v243) = 0;
              }
            }

            sub_10040F938((uint64_t)v135, SBYTE3(v228));
            sub_10040F974((uint64_t)v135, SWORD2(v228));
            sub_10040F974((uint64_t)v135, SWORD3(v228));
            sub_10040F938((uint64_t)v135, SBYTE8(v228));
            sub_10040F974((uint64_t)v135, SWORD5(v228));
            sub_10040F974((uint64_t)v135, SWORD6(v228));
            sub_10040F974((uint64_t)v135, SHIWORD(v228));
            sub_10040F974((uint64_t)v135, v229);
            sub_10040F974((uint64_t)v135, SWORD1(v229));
            sub_10040F974((uint64_t)v135, SWORD2(v229));
            sub_10040F974((uint64_t)v135, SWORD3(v229));
            sub_10040F974((uint64_t)v135, SWORD4(v229));
            sub_10040F974((uint64_t)v135, SWORD5(v229));
            sub_10040F974((uint64_t)v135, SWORD6(v229));
            sub_10040F974((uint64_t)v135, SHIWORD(v229));
            sub_10040F974((uint64_t)v135, v230[0]);
            sub_10040F974((uint64_t)v135, SWORD1(v230[0]));
            sub_10040F974((uint64_t)v135, SWORD2(v230[0]));
            sub_10040F974((uint64_t)v135, SWORD3(v230[0]));
            sub_10040F9C4((uint64_t)v135, DWORD2(v230[0]));
            sub_10040F9C4((uint64_t)v135, HIDWORD(v230[0]));
            sub_10040F9C4((uint64_t)v135, DWORD2(v230[1]));
            sub_10040F9C4((uint64_t)v135, HIDWORD(v230[1]));
            sub_10040F91C((uint64_t)v135, (char *)&v231, 8LL);
            sub_10040F91C((uint64_t)v135, (char *)&v231 + 8, 8LL);
            if (v234 >= 0) {
              uint64_t v117 = (char *)&v233 + 8;
            }
            else {
              uint64_t v117 = (char *)*((void *)&v233 + 1);
            }
            if (v234 >= 0) {
              int64_t v118 = HIBYTE(v234);
            }
            else {
              int64_t v118 = v234;
            }
            sub_10040F91C((uint64_t)v135, v117, v118);
            sub_10056AB04(buf, v135[1], v136 - (unint64_t)v135[1]);
            int v119 = (const void *)sub_10056AAF0((uint64_t)buf);
            sub_10056AB04(&v217, v135[1], v136 - (unint64_t)v135[1]);
            CC_LONG v120 = sub_10056AAD8((uint64_t)&v217);
            CC_SHA1(v119, v120, (unsigned __int8 *)&v241[5] + 4);
            *(void *)&__int128 v217 = &off_10087FAA8;
            if (*((void *)&v217 + 1)) {
              sub_1002CD254(*((unsigned int **)&v217 + 1));
            }
            *(void *)__int128 buf = &off_10087FAA8;
            if (*(void *)&buf[8]) {
              sub_1002CD254(*(unsigned int **)&buf[8]);
            }
            unsigned __int8 v121 = (os_log_s *)qword_1008F7578;
            if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 68289026;
              *(_DWORD *)&uint8_t buf[4] = 20;
              *(_WORD *)&uint8_t buf[8] = 2098;
              *(void *)&buf[10] = (char *)&v241[5] + 4;
              _os_log_impl( (void *)&_mh_execute_header,  v121,  OS_LOG_TYPE_DEFAULT,  "Identification - Secondary hash {%{public}.20P}",  buf,  0x12u);
              unsigned __int8 v121 = (os_log_s *)qword_1008F7578;
            }

            if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
            {
              sub_10056AB04(&v217, v135[1], v136 - (unint64_t)v135[1]);
              int v122 = sub_10056AAD8((uint64_t)&v217);
              sub_10056AB04(&v132, v135[1], v136 - (unint64_t)v135[1]);
              uint64_t v123 = sub_10056AAF0((uint64_t)&v132);
              *(_DWORD *)__int128 buf = 68157954;
              *(_DWORD *)&uint8_t buf[4] = v122;
              *(_WORD *)&uint8_t buf[8] = 2098;
              *(void *)&buf[10] = v123;
              _os_log_impl( (void *)&_mh_execute_header,  v121,  OS_LOG_TYPE_DEFAULT,  "Identification - Raw buffer to create secondary hash {%{public}.*P}",  buf,  0x12u);
              unint64_t v132 = &off_10087FAA8;
              if (v133) {
                sub_1002CD254(v133);
              }
              *(void *)&__int128 v217 = &off_10087FAA8;
              if (*((void *)&v217 + 1)) {
                sub_1002CD254(*((unsigned int **)&v217 + 1));
              }
            }

            *(_OWORD *)(a1 + 720) = *(_OWORD *)((char *)&v241[5] + 4);
            *(_DWORD *)(a1 + 736) = HIDWORD(v241[7]);
            uint64_t v124 = sub_1002E6D7C();
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v124 + 72LL))( v124,  a1,  a1 + 720))
            {
              if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
                sub_1006799A0();
              }
            }

            else
            {
              *(_BYTE *)(a1 + 741) = 1;
            }

            *(_BYTE *)(a1 + 742) = 1;
            if (sub_1003D08C4(a1, WORD2(v228))
              && (uint64_t v125 = sub_1002E6E00(), (*(unsigned int (**)(uint64_t))(*(void *)v125 + 8LL))(v125)))
            {
              int v126 = (os_log_s *)qword_1008F7578;
              if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
              {
                sub_1003CF00C(a1, buf);
                char v127 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
                LODWORD(v217) = 136446210;
                *(void *)((char *)&v217 + 4) = v127;
                _os_log_impl( (void *)&_mh_execute_header,  v126,  OS_LOG_TYPE_DEFAULT,  "Identification - skipping Core Analytics metric upload for automation dongle %{public}s",  (uint8_t *)&v217,  0xCu);
                if ((buf[23] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
              }
            }

            else
            {
              BOOL v128 = (os_log_s *)qword_1008F7578;
              if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
              {
                sub_1003CF00C(a1, buf);
                int v129 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
                LODWORD(v217) = 136446210;
                *(void *)((char *)&v217 + 4) = v129;
                _os_log_impl( (void *)&_mh_execute_header,  v128,  OS_LOG_TYPE_DEFAULT,  "Identification - submitting Core Analytics metric upload for device %{public}s",  (uint8_t *)&v217,  0xCu);
                if ((buf[23] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
              }

              sub_100242F54((uint64_t)v137);
              uint64_t v130 = sub_1002E8D94();
              (*(void (**)(uint64_t, __int128 *))(*(void *)v130 + 224LL))(v130, &v228);
            }
          }
        }

        else if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
        {
          sub_100679974();
        }

        sub_100242CD8(&v134);
        goto LABEL_228;
      }

LABEL_228:
  if (SHIBYTE(v225[1]) < 0) {
    operator delete(*((void **)&v224 + 1));
  }
  if (SHIBYTE(v223) < 0) {
    operator delete(*((void **)&v222 + 1));
  }
  if (SHIBYTE(v221) < 0) {
    operator delete(*((void **)&v220 + 1));
  }
  nullsub_63((char *)&v219 + 1, v3);
  if (v135[1])
  {
    *(void **)&__int128 v136 = v135[1];
    operator delete(v135[1]);
  }

  sub_100328B0C((uint64_t)&v228);
  return sub_100242FAC((uint64_t)v137);
}

void sub_1003DCC0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *__p, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }

  sub_100328B0C((uint64_t)&STACK[0x290]);
  sub_100242FAC((uint64_t)&a28);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1003DCD38(const void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t result = (unsigned __int8 *)memchr(a1, *a3, a2 - (_BYTE *)a1);
  if (!result) {
    uint64_t result = a2;
  }
  unsigned int v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      int v8 = *v6;
      if (v8 != *a3) {
        *result++ = v8;
      }
      ++v6;
    }

    while (v6 != a2);
  }

  return result;
}

uint64_t sub_1003DCD9C(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 652);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DCDE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 760LL))(v4, a1, a2);
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_BYTE *)(a1 + 652) = a2;
  return sub_100242FAC((uint64_t)v6);
}

uint64_t sub_1003DCE3C(uint64_t a1)
{
  uint64_t v2 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 272LL))(v2))
  {
    v5[0] = 0LL;
    v5[1] = 0LL;
    sub_100242F28((uint64_t)v5, a1);
    int v3 = *(_DWORD *)(a1 + 176);
    sub_100242FAC((uint64_t)v5);
    if (v3 == 25 || (*(_BYTE *)(a1 + 777) & 1) != 0) {
      return 1LL;
    }
  }

  if (*(_BYTE *)(a1 + 1368)) {
    return 1LL;
  }
  else {
    return (*(unsigned __int8 *)(a1 + 776) >> 1) & 1;
  }
}

void sub_1003DCEB8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003D01A0(a1, (uint64_t)&__p);
    int v3 = v32 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "HIDIdentification - Start identification for %s",  buf,  0xCu);
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
  }

  __int128 __p = 0LL;
  uint64_t v31 = 0LL;
  sub_100242F28((uint64_t)&__p, a1);
  int v4 = *(_DWORD *)(a1 + 176);
  sub_100242FAC((uint64_t)&__p);
  if (v4 == 25 || (*(void *)(a1 + 776) & 0x302LL) != 0)
  {
    if ((*(void *)(a1 + 776) & 2) != 0
      || (uint64_t v6 = sub_1002E6BF0(), ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 272LL))(v6) & 1) != 0))
    {
      int v7 = 1;
      goto LABEL_14;
    }

    if ((*(_BYTE *)(a1 + 777) & 3) != 0)
    {
      int v7 = 0;
      goto LABEL_14;
    }

    memset(buf, 0, 20);
    int v16 = *(unsigned __int8 *)(a1 + 740);
    if (*(_BYTE *)(a1 + 740))
    {
      *(_DWORD *)&uint8_t buf[16] = *(_DWORD *)(a1 + 716);
      *(_OWORD *)__int128 buf = *(_OWORD *)(a1 + 700);
    }

    if (*(char *)(a1 + 263) < 0)
    {
      if (*(void *)(a1 + 248)) {
        goto LABEL_42;
      }
    }

    else if (*(_BYTE *)(a1 + 263))
    {
LABEL_42:
      __int128 __p = 0LL;
      uint64_t v31 = 0LL;
      uint64_t v32 = 0LL;
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_100895B68);
      }
      BOOL v17 = v16 == 0;
      sub_10040272C((const void **)(a1 + 240), &__p);
      int v18 = __p;
      char v19 = __p == v31 || v17;
      if ((v19 & 1) == 0
        && (*(void *)__p == *(void *)buf ? (BOOL v20 = *((void *)__p + 1) == *(void *)&buf[8]) : (BOOL v20 = 0),
            v20 ? (BOOL v21 = *((unsigned int *)__p + 4) == (unint64_t)*(unsigned int *)&buf[16]) : (BOOL v21 = 0),
            v21))
      {
        *(_BYTE *)(a1 + 136_Block_object_dispose(va, 8) = 1;
        int v25 = (os_log_s *)qword_1008F7578;
        int v7 = 0;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v26 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "HIDIdentification - Device found in allowlist",  v26,  2u);
          int v7 = 0;
          int v18 = __p;
        }
      }

      else
      {
        int v7 = 2;
      }

      if (!v18)
      {
LABEL_14:
        if (_os_feature_enabled_impl("BluetoothFeatures", "RuleBasedHIDClassification"))
        {
          int v8 = (os_log_s *)qword_1008F7578;
          BOOL v9 = os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT);
          if (v7 == 2)
          {
            if (v9)
            {
              LOWORD(__p) = 0;
              int v10 = "HIDIdentification - Classic HID Device behavior is unknown. Wait for sniff param update";
              uint64_t v11 = v8;
LABEL_20:
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&__p, 2u);
              return;
            }
          }

          else
          {
            if (v9)
            {
              sub_1003D01A0(a1, (uint64_t)&__p);
              if (v32 >= 0) {
                p_p = &__p;
              }
              else {
                p_p = __p;
              }
              *(_DWORD *)__int128 buf = 67109378;
              *(_DWORD *)&uint8_t buf[4] = v7;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = p_p;
              _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "HIDIdentification - Set classic HID device behavior : %u for %s",  buf,  0x12u);
              if (SHIBYTE(v32) < 0) {
                operator delete(__p);
              }
            }

            sub_1003D5D1C(a1, v7);
          }
        }

        else
        {
          __int16 v13 = (os_log_s *)qword_1008F7578;
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003D01A0(a1, (uint64_t)&__p);
            __int128 v14 = v32 >= 0 ? &__p : (void **)__p;
            *(_DWORD *)__int128 buf = 67109378;
            *(_DWORD *)&uint8_t buf[4] = v7;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = v14;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "HIDIdentification - Set classic HID device behavior : %u for %s",  buf,  0x12u);
            if (SHIBYTE(v32) < 0) {
              operator delete(__p);
            }
          }

          sub_1003D5D1C(a1, v7);
        }

        return;
      }

      uint64_t v31 = v18;
LABEL_68:
      operator delete(v18);
      goto LABEL_14;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100679A84();
    }
    int v18 = operator new(0x14uLL);
    *(_OWORD *)int v18 = *(_OWORD *)buf;
    v18[4] = *(_DWORD *)&buf[16];
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    int v22 = off_1008D5F48;
    int v27 = 0LL;
    int v23 = operator new(0x14uLL);
    int v28 = v23 + 5;
    int v29 = (char *)(v23 + 5);
    *(_OWORD *)int v23 = *(_OWORD *)v18;
    v23[4] = v18[4];
    int v27 = v23;
    BOOL v24 = sub_100402B2C((uint64_t)v22, (uint64_t)&v27);
    if (v27)
    {
      int v28 = v27;
      operator delete(v27);
    }

    if (v24)
    {
      int v7 = 0;
      *(_BYTE *)(a1 + 136_Block_object_dispose(va, 8) = 1;
    }

    else
    {
      int v7 = 2;
    }

    goto LABEL_68;
  }

  uint64_t v12 = qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    int v10 = "HIDIdentification - Not a mouse/TP. Wait for sniff param update";
    uint64_t v11 = (os_log_s *)v12;
    goto LABEL_20;
  }

void sub_1003DD39C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_1003DD3D0(uint64_t a1, int a2)
{
  uint64_t v4 = sub_1002E6BF0();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 328LL))(v4) & 1) != 0)
  {
    char v5 = 0;
  }

  else
  {
    uint64_t v6 = sub_1002E6BF0();
    char v5 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 336LL))(v6) ^ 1;
  }

  if (_os_feature_enabled_impl("BluetoothFeatures", "RuleBasedHIDClassification")
    && (v5 & 1) == 0
    && sub_10056AAF0(a1 + 1008)
    && (sub_1003DCE3C(a1) & 1) == 0)
  {
    int v7 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003D01A0(a1, (uint64_t)__p);
      if (v12 >= 0) {
        int v8 = __p;
      }
      else {
        int v8 = (void **)__p[0];
      }
      *(_DWORD *)__int128 buf = 67109378;
      int v14 = a2;
      __int16 v15 = 2080;
      int v16 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "HIDIdentification - Update classic HID device behavior to %d for %s",  buf,  0x12u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_1003D5D1C(a1, a2);
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
    int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNotification notificationWithName:object:]( &OBJC_CLASS___NSNotification,  "notificationWithName:object:",  @"com.apple.bluetooth.leHIDBehaviorKnown",  0LL));
    [v9 postNotification:v10];
  }

void sub_1003DD570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003DD594(uint64_t a1, int a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  int v4 = *(_DWORD *)(a1 + 788);
  *(_DWORD *)(a1 + 78_Block_object_dispose(va, 8) = a2;
  uint64_t v5 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v5 + 840LL))(v5, a1, *(unsigned int *)(a1 + 788));
  if (v4 != a2)
  {
    sub_100242F54((uint64_t)v7);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 11);
  }

  return sub_100242FAC((uint64_t)v7);
}

void sub_1003DD648( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1003DD65C(uint64_t a1, uint64_t a2)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1);
  int v4 = *(_DWORD *)(a1 + 800);
  *(_DWORD *)(a1 + 800) = a2;
  uint64_t v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a1, __p);
    uint64_t v6 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 67109378;
    int v13 = a2;
    __int16 v14 = 2082;
    __int16 v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Smart Route enabled setting is set to %d for Device %{public}s",  buf,  0x12u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v7 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 888LL))(v7, a1, a2);
  if (v4 != (_DWORD)a2)
  {
    sub_100242F54((uint64_t)v11);
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100895C68);
    }
    sub_100215778((uint64_t)off_1008D60D8, a1, 32LL, a2, 1u);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 7);
  }

  sub_100242FAC((uint64_t)v11);
  return v4 != (_DWORD)a2;
}

void sub_1003DD820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003DD840(uint64_t a1)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895B68);
  }
  int v2 = *((unsigned __int8 *)off_1008D5F48 + 304);
  int v3 = *(_DWORD *)(a1 + 1100);
  int v4 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
  {
    sub_1003CF00C(a1, __p);
    if (v10 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    uint64_t v6 = "No";
    if (v2) {
      uint64_t v7 = "Yes";
    }
    else {
      uint64_t v7 = "No";
    }
    *(_DWORD *)__int128 buf = 136446722;
    char v12 = v5;
    __int16 v13 = 2080;
    if ((v3 & 1) != 0) {
      uint64_t v6 = "Yes";
    }
    __int16 v14 = v7;
    __int16 v15 = 2080;
    int v16 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Smart Route Support: Device: %{public}s, SRDaemon Support: %s, Device Support: %s",  buf,  0x20u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  return (v2 != 0) & v3;
}

BOOL sub_1003DD998(uint64_t a1)
{
  return *(_BYTE *)(a1 + 1069) && (*(_BYTE *)(a1 + 1102) & 0x10) != 0 && *(_DWORD *)(a1 + 1080) != 8212;
}

uint64_t sub_1003DD9C4(uint64_t a1)
{
  int v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEBUG))
  {
    sub_1003D0100(a1, (uint64_t)__p);
    int v4 = v9;
    uint64_t v5 = (void **)__p[0];
    int v6 = sub_1003DD840(a1);
    uint64_t v7 = __p;
    if (v4 < 0) {
      uint64_t v7 = v5;
    }
    *(_DWORD *)__int128 buf = 136446466;
    uint64_t v11 = v7;
    __int16 v12 = 1024;
    int v13 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Smart Route Supported was updated by SR daemon, updating device: “%{public}s” (state = %d)",  buf,  0x12u);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895B68);
  }
  return sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 17);
}

void sub_1003DDAF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DDB14(uint64_t a1, uint64_t a2)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1);
  int v4 = *(_DWORD *)(a1 + 804);
  *(_DWORD *)(a1 + 804) = a2;
  uint64_t v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a1, __p);
    int v6 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 67109378;
    int v13 = a2;
    __int16 v14 = 2082;
    __int16 v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Spatial Audio Allowed is set to %d for Device %{public}s",  buf,  0x12u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v7 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 912LL))(v7, a1, a2);
  if (v4 != (_DWORD)a2)
  {
    sub_100242F54((uint64_t)v11);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 12);
  }

  return sub_100242FAC((uint64_t)v11);
}

void sub_1003DDC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003DDCA8(uint64_t a1, int a2, int a3)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_100242F28((uint64_t)v13, a1);
  int v6 = *(unsigned __int8 *)(a1 + 796);
  *(_BYTE *)(a1 + 796) = a2;
  uint64_t v7 = (os_log_s *)qword_1008F7578;
  if (!os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT)
    || ((sub_1003CF00C(a1, __p), v12 >= 0) ? (int v8 = __p) : (int v8 = (void **)__p[0]),
        *(_DWORD *)__int128 buf = 67109378,
        int v15 = a2,
        __int16 v16 = 2082,
        BOOL v17 = v8,
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "IED enabled setting is set to %d for Device %{public}s",  buf,  0x12u),  (v12 & 0x80000000) == 0))
  {
    if (!a3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  operator delete(__p[0]);
  if (a3)
  {
LABEL_7:
    uint64_t v9 = sub_1002E6D7C();
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v9 + 872LL))(v9, a1, *(unsigned __int8 *)(a1 + 796));
  }

void sub_1003DDE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003DDE4C(uint64_t a1, int a2)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1);
  int v4 = *(_DWORD *)(a1 + 808);
  *(_DWORD *)(a1 + 80_Block_object_dispose(va, 8) = a2;
  uint64_t v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a1, __p);
    int v6 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 67109378;
    int v13 = a2;
    __int16 v14 = 2082;
    int v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Listening Mode is set to %d for Device %{public}s",  buf,  0x12u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v7 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v7 + 928LL))(v7, a1, *(unsigned int *)(a1 + 808));
  if (v4 != a2)
  {
    sub_100242F54((uint64_t)v11);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 15);
  }

  return sub_100242FAC((uint64_t)v11);
}

void sub_1003DDFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003DDFE0(uint64_t a1, int a2)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_100242F28((uint64_t)v11, a1);
  int v4 = *(_DWORD *)(a1 + 812);
  *(_DWORD *)(a1 + 812) = a2;
  uint64_t v5 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a1, __p);
    int v6 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 67109378;
    int v13 = a2;
    __int16 v14 = 2082;
    int v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Listening Mode Configs is set to %d for Device %{public}s",  buf,  0x12u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v7 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v7 + 992LL))(v7, a1, *(unsigned int *)(a1 + 812));
  if (v4 != a2)
  {
    sub_100242F54((uint64_t)v11);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 15);
  }

  return sub_100242FAC((uint64_t)v11);
}

void sub_1003DE154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003DE174(uint64_t a1, char a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 816) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003DE1B8(uint64_t a1, char a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 817) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003DE1FC(uint64_t a1, int a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 820) = a2;
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1008LL))(v4, a1, *(unsigned int *)(a1 + 820));
  return sub_100242FAC((uint64_t)v6);
}

void sub_1003DE258( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DE26C(uint64_t a1, int a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 824) = a2;
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1024LL))(v4, a1, *(unsigned int *)(a1 + 824));
  return sub_100242FAC((uint64_t)v6);
}

void sub_1003DE2C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DE2DC(uint64_t a1, int a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  int v4 = *(_DWORD *)(a1 + 828);
  *(_DWORD *)(a1 + 82_Block_object_dispose(va, 8) = a2;
  uint64_t v5 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v5 + 1040LL))(v5, a1, *(unsigned int *)(a1 + 828));
  if (v4 != a2)
  {
    sub_100242F54((uint64_t)v7);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 16);
  }

  return sub_100242FAC((uint64_t)v7);
}

void sub_1003DE390( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DE3A4(uint64_t a1, int a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 832) = a2;
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1056LL))(v4, a1, *(unsigned int *)(a1 + 832));
  return sub_100242FAC((uint64_t)v6);
}

void sub_1003DE400( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DE414(uint64_t a1, int a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 836) = a2;
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1072LL))(v4, a1, *(unsigned int *)(a1 + 836));
  return sub_100242FAC((uint64_t)v6);
}

void sub_1003DE470( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DE484(uint64_t a1, uint64_t a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_BYTE *)(a1 + 840) = a2;
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 1088LL))(v4, a1, a2);
  return sub_100242FAC((uint64_t)v6);
}

void sub_1003DE4E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DE4F4(uint64_t a1, char a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 841) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003DE538(uint64_t a1, char a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 842) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003DE57C(uint64_t a1, int a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 844) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003DE5C0(uint64_t a1, char a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 84_Block_object_dispose(va, 8) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003DE604(uint64_t a1, char a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_BYTE *)(a1 + 856) = a2;
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1104LL))(v4, a1, *(unsigned __int8 *)(a1 + 856));
  return sub_100242FAC((uint64_t)v6);
}

void sub_1003DE660( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DE674(uint64_t a1, int a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 860) = a2;
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1120LL))(v4, a1, *(unsigned int *)(a1 + 860));
  return sub_100242FAC((uint64_t)v6);
}

void sub_1003DE6D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DE6E4(uint64_t a1, int a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  int v4 = *(unsigned __int8 *)(a1 + 868);
  *(_BYTE *)(a1 + 86_Block_object_dispose(va, 8) = a2;
  uint64_t v5 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v5 + 1168LL))(v5, a1, *(unsigned __int8 *)(a1 + 868));
  if (v4 != a2)
  {
    sub_100242F54((uint64_t)v7);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 15);
  }

  return sub_100242FAC((uint64_t)v7);
}

void sub_1003DE798( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DE7AC(uint64_t a1, int a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  int v4 = *(_DWORD *)(a1 + 864);
  *(_DWORD *)(a1 + 864) = a2;
  if (v4 != a2)
  {
    sub_100242F54((uint64_t)v7);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 15);
  }

  uint64_t v5 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v5 + 1136LL))(v5, a1, *(unsigned int *)(a1 + 864));
  return sub_100242FAC((uint64_t)v7);
}

void sub_1003DE858( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DE86C(uint64_t a1, int a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  int v4 = *(_DWORD *)(a1 + 872);
  *(_DWORD *)(a1 + 872) = a2;
  if (v4 != a2)
  {
    sub_100242F54((uint64_t)v6);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 15);
  }

  return sub_100242FAC((uint64_t)v6);
}

void sub_1003DE900( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DE914(uint64_t a1, int a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  int v4 = *(_DWORD *)(a1 + 876);
  *(_DWORD *)(a1 + 876) = a2;
  if (v4 != a2)
  {
    sub_100242F54((uint64_t)v6);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 15);
  }

  return sub_100242FAC((uint64_t)v6);
}

void sub_1003DE9A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DE9BC(uint64_t a1, int a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  int v4 = *(_DWORD *)(a1 + 880);
  *(_DWORD *)(a1 + 880) = a2;
  if (v4 != a2)
  {
    sub_100242F54((uint64_t)v6);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 15);
  }

  return sub_100242FAC((uint64_t)v6);
}

void sub_1003DEA50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DEA64(uint64_t a1, int a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 904) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003DEAA8(uint64_t a1, int a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  int v4 = *(_DWORD *)(a1 + 884);
  *(_DWORD *)(a1 + 884) = a2;
  if (v4 != a2)
  {
    sub_100242F54((uint64_t)v6);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 15);
  }

  return sub_100242FAC((uint64_t)v6);
}

void sub_1003DEB3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DEB50(uint64_t a1, int a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  int v4 = *(_DWORD *)(a1 + 900);
  *(_DWORD *)(a1 + 900) = a2;
  if (v4 != a2)
  {
    sub_100242F54((uint64_t)v6);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 15);
  }

  return sub_100242FAC((uint64_t)v6);
}

void sub_1003DEBE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DEBF8(uint64_t a1, int a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  if (*(_DWORD *)(a1 + 908) != a2)
  {
    *(_DWORD *)(a1 + 90_Block_object_dispose(va, 8) = a2;
    sub_100242F54((uint64_t)v5);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 15);
  }

  return sub_100242FAC((uint64_t)v5);
}

void sub_1003DEC8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DECA0(uint64_t a1, int a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  int v4 = *(_DWORD *)(a1 + 888);
  *(_DWORD *)(a1 + 88_Block_object_dispose(va, 8) = a2;
  if (v4 != a2)
  {
    sub_100242F54((uint64_t)v6);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 15);
  }

  return sub_100242FAC((uint64_t)v6);
}

void sub_1003DED34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DED48(uint64_t a1, int a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  if (*(_DWORD *)(a1 + 892) != a2)
  {
    *(_DWORD *)(a1 + 892) = a2;
    sub_100242F54((uint64_t)v5);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 15);
  }

  return sub_100242FAC((uint64_t)v5);
}

void sub_1003DEDDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DEDF0(uint64_t a1, int a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  if (*(_DWORD *)(a1 + 896) != a2)
  {
    *(_DWORD *)(a1 + 896) = a2;
    sub_100242F54((uint64_t)v5);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 15);
  }

  return sub_100242FAC((uint64_t)v5);
}

void sub_1003DEE84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DEE98(uint64_t a1, char a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_BYTE *)(a1 + 960) = a2;
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1224LL))(v4, a1, *(unsigned __int8 *)(a1 + 960));
  return sub_100242FAC((uint64_t)v6);
}

void sub_1003DEEF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DEF08(uint64_t a1, char a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_BYTE *)(a1 + 976) = a2;
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1240LL))(v4, a1, *(unsigned __int8 *)(a1 + 976));
  return sub_100242FAC((uint64_t)v6);
}

void sub_1003DEF64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DEF78(uint64_t a1, char a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_BYTE *)(a1 + 985) = a2;
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 1272LL))(v4, a1, *(unsigned __int8 *)(a1 + 985));
  return sub_100242FAC((uint64_t)v6);
}

void sub_1003DEFD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DEFE8(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 964);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DF02C(uint64_t a1, _DWORD *a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 964) = *a2;
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 1264LL))(v4, a1, a1 + 964);
  return sub_100242FAC((uint64_t)v6);
}

void sub_1003DF08C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DF0A0(unsigned __int8 *a1, int a2)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, (uint64_t)a1);
  int v4 = a1[989];
  if (a1[989]) {
    int v5 = a2;
  }
  else {
    int v5 = 1;
  }
  int v6 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = "On";
    if (v4) {
      int v8 = "On";
    }
    else {
      int v8 = "Off";
    }
    if (!a2) {
      uint64_t v7 = "Off";
    }
    *(_DWORD *)__int128 buf = 136315650;
    __int16 v14 = v8;
    __int16 v15 = 2080;
    __int16 v16 = v7;
    if (v5) {
      uint64_t v9 = "No";
    }
    else {
      uint64_t v9 = "Yes";
    }
    __int16 v17 = 2080;
    int v18 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Guest Pairing: Changing Mode %s -> %s, trigger Magic Pairing: %s",  buf,  0x20u);
  }

  a1[989] = a2;
  uint64_t v10 = sub_1002E6D7C();
  (*(void (**)(uint64_t, unsigned __int8 *, void))(*(void *)v10 + 1304LL))(v10, a1, a1[989]);
  if ((v5 & 1) == 0)
  {
    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100895C68);
    }
    sub_10021EC58((uint64_t)off_1008D60D8, a1);
  }

  return sub_100242FAC((uint64_t)v12);
}

void sub_1003DF21C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1003DF238(uint64_t a1, int a2)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1);
  int v4 = *(unsigned __int8 *)(a1 + 990);
  *(_BYTE *)(a1 + 990) = a2;
  if (v4 != a2)
  {
    int v5 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a1, __p);
      int v6 = v9 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__int128 buf = 136446466;
      char v12 = v6;
      __int16 v13 = 1024;
      int v14 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Ownership changed: device %{public}s, state %d",  buf,  0x12u);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_100242F54((uint64_t)v10);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 8);
  }

  return sub_100242FAC((uint64_t)v10);
}

void sub_1003DF38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003DF3AC(uint64_t a1)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1);
  *(void *)(a1 + 920) = *(void *)(a1 + 912);
  *(void *)(a1 + 944) = *(void *)(a1 + 936);
  *(_BYTE *)(a1 + 1434) = 0;
  uint64_t v2 = sub_1002E6D7C();
  __int128 __p = 0LL;
  char v12 = 0LL;
  __int16 v13 = 0LL;
  int v3 = *(_BYTE **)(a1 + 912);
  int v4 = *(_BYTE **)(a1 + 920);
  size_t v5 = v4 - v3;
  if (v4 != v3)
  {
    if (v4 - v3 < 0) {
      abort();
    }
    int v6 = (char *)operator new(v4 - v3);
    uint64_t v7 = &v6[v5];
    __int128 __p = v6;
    __int16 v13 = &v6[v5];
    memmove(v6, v3, v5);
    char v12 = v7;
  }

  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v2 + 1184LL))(v2, a1, &__p);
  if (__p)
  {
    char v12 = __p;
    operator delete(__p);
  }

  uint64_t v8 = sub_1002E6D7C();
  sub_100272534(v10, a1 + 936);
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v8 + 1200LL))(v8, a1, v10);
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }

  return sub_100242FAC((uint64_t)v14);
}

void sub_1003DF4C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DF500(uint64_t a1)
{
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_100242F28((uint64_t)v3, a1);
  *(_BYTE *)(a1 + 1434) = 1;
  return sub_100242FAC((uint64_t)v3);
}

uint64_t sub_1003DF544(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 1434);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DF588(uint64_t a1, int a2, int a3)
{
  v26[0] = 0LL;
  v26[1] = 0LL;
  sub_100242F28((uint64_t)v26, a1);
  if (a2 >= 0) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = (a2 + 7);
  }
  uint64_t v7 = *(void *)(a1 + 912);
  unint64_t v8 = *(void *)(a1 + 920) - v7;
  unint64_t v9 = (unsigned __int16)(v6 >> 3);
  if (v8 <= (unsigned __int16)(v6 >> 3))
  {
    buf[0] = 0;
    sub_1002DC28C((void *)(a1 + 912), (v9 + 1) - v8, buf);
    uint64_t v7 = *(void *)(a1 + 912);
  }

  int v10 = *(unsigned __int8 *)(v7 + v9);
  char v11 = a2 - (v6 & 0xF8);
  if (((1 << v11) & v10) == a3 << v11)
  {
    if (v8 > v9) {
      return sub_100242FAC((uint64_t)v26);
    }
  }

  else
  {
    *(_BYTE *)(v7 + v9) = v10 ^ (1 << v11);
  }

  char v12 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a1, __p);
    __int16 v13 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 136446722;
    int v28 = v13;
    __int16 v29 = 1024;
    int v30 = a2;
    __int16 v31 = 1024;
    int v32 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "setAACPCapabilityBit: Writing device %{public}s, bit %d, value %d",  buf,  0x18u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v14 = sub_1002E6D7C();
  BOOL v21 = 0LL;
  int v22 = 0LL;
  int v23 = 0LL;
  __int16 v15 = *(_BYTE **)(a1 + 912);
  __int16 v16 = *(_BYTE **)(a1 + 920);
  size_t v17 = v16 - v15;
  if (v16 != v15)
  {
    if (v16 - v15 < 0) {
      abort();
    }
    int v18 = (char *)operator new(v16 - v15);
    char v19 = &v18[v17];
    BOOL v21 = v18;
    int v23 = &v18[v17];
    memmove(v18, v15, v17);
    int v22 = v19;
  }

  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v14 + 1184LL))(v14, a1, &v21);
  if (v21)
  {
    int v22 = v21;
    operator delete(v21);
  }

  return sub_100242FAC((uint64_t)v26);
}

void sub_1003DF79C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t sub_1003DF7D8(uint64_t result, unsigned int a2, int a3)
{
  if (a2 <= 0xFF)
  {
    uint64_t v5 = result;
    v11[0] = 0LL;
    v11[1] = 0LL;
    sub_100242F28((uint64_t)v11, result);
    uint64_t v6 = *(void *)(v5 + 936);
    if (a2 >= (unint64_t)((*(void *)(v5 + 944) - v6) >> 2))
    {
      if (!a3) {
        return sub_100242FAC((uint64_t)v11);
      }
      int v10 = 0;
      sub_1002DA83C(v5 + 936, a2 + 1, &v10);
      uint64_t v7 = (_DWORD *)(*(void *)(v5 + 936) + 4LL * a2);
      if (*v7 == a3)
      {
LABEL_8:
        uint64_t v8 = sub_1002E6D7C();
        sub_100272534(__p, v5 + 936);
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v8 + 1200LL))(v8, v5, __p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }

        return sub_100242FAC((uint64_t)v11);
      }
    }

    else
    {
      uint64_t v7 = (_DWORD *)(v6 + 4LL * a2);
      if (*v7 == a3) {
        return sub_100242FAC((uint64_t)v11);
      }
    }

    _DWORD *v7 = a3;
    goto LABEL_8;
  }

  return result;
}

void sub_1003DF8D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_1003DF900(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 788);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DF944(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 796);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DF988(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  if ((sub_1003DD840(a1) & 1) != 0) {
    uint64_t v2 = *(unsigned int *)(a1 + 800);
  }
  else {
    uint64_t v2 = 2LL;
  }
  sub_100242FAC((uint64_t)v4);
  return v2;
}

void sub_1003DF9E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003DF9F4(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 804);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFA38(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 808);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFA7C(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 812);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFAC0(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 816);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFB04(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 817);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFB48(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 820);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFB8C(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 824);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFBD0(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 828);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFC14(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 832);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFC58(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 836);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFC9C(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 840);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFCE0(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 841);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFD24(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 842);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFD68(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 844);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFDAC(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 856);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFDF0(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 860);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFE34(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 864);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFE78(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 868);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFEBC(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 872);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFF00(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 876);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFF44(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 880);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFF88(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 884);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003DFFCC(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 888);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E0010(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 892);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E0054(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 896);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E0098(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 900);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E00DC(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 904);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E0120(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 908);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E0164(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 990);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E01A8(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int16 *)(a1 + 1504);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E01EC(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 848);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E0230(uint64_t a1, int a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1);
  LODWORD(v4) = a2 + 7;
  if (a2 >= 0) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = v4;
  }
  uint64_t v5 = *(void *)(a1 + 912);
  else {
    uint64_t v6 = (*(unsigned __int8 *)(v5 + (unsigned __int16)(v4 >> 3)) >> (a2 & 7)) & 1;
  }
  sub_100242FAC((uint64_t)v8);
  return v6;
}

uint64_t sub_1003E02B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_100242F28((uint64_t)v9, a1);
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  unint64_t v4 = *(_BYTE **)(a1 + 912);
  uint64_t v5 = *(_BYTE **)(a1 + 920);
  size_t v6 = v5 - v4;
  if (v5 != v4)
  {
    sub_10023D39C(a2, v5 - v4);
    uint64_t v7 = (char *)a2[1];
    memmove(v7, v4, v6);
    a2[1] = &v7[v6];
  }

  return sub_100242FAC((uint64_t)v9);
}

void sub_1003E033C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003E0350(uint64_t a1, unsigned int a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  uint64_t v4 = *(void *)(a1 + 936);
  else {
    uint64_t v5 = *(unsigned int *)(v4 + 4LL * a2);
  }
  sub_100242FAC((uint64_t)v7);
  return v5;
}

id sub_1003E03B8(uint64_t a1, void *a2, uint64_t **a3)
{
  id v5 = a2;
  uint64_t v7 = *a3;
  size_t v6 = a3[1];
  if (*a3 == v6) {
    goto LABEL_26;
  }
  int v22 = 0;
  do
  {
    if (*v7 != a1)
    {
      sub_1003D0100(*v7, (uint64_t)__p);
      if (v26 >= 0) {
        uint64_t v8 = __p;
      }
      else {
        uint64_t v8 = *(_BYTE **)__p;
      }
      unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  v8,  4LL));
      if (v26 < 0) {
        operator delete(*(void **)__p);
      }
      int v10 = (os_log_s *)qword_1008F7600;
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 __p = 138412546;
        *(void *)&__p[4] = v9;
        __int16 v24 = 2112;
        id v25 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Device Name: %@, Localized Name: %@",  __p,  0x16u);
      }

      if ([v9 length] && objc_msgSend(v9, "hasPrefix:", v5))
      {
        if ([v5 isEqualToString:v9])
        {
          signed int v11 = 1;
        }

        else
        {
          BOOL v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"^%@ #\\d*$",  v5));
          char v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSRegularExpression regularExpressionWithPattern:options:error:]( &OBJC_CLASS___NSRegularExpression,  "regularExpressionWithPattern:options:error:"));
          if (objc_msgSend(v12, "numberOfMatchesInString:options:range:", v9, 0, 0, objc_msgSend(v9, "length")) == (id)1)
          {
            __int16 v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet decimalDigitCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "decimalDigitCharacterSet"));
            uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 invertedSet]);
            __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v9 componentsSeparatedByCharactersInSet:v14]);
            __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 componentsJoinedByString:&stru_1008A57D8]);

            signed int v11 = [v16 intValue];
          }

          else
          {
            signed int v11 = 0;
          }
        }

        int v17 = v22;
        if (v11 > v22) {
          int v17 = v11;
        }
        int v22 = v17;
      }

      size_t v6 = a3[1];
    }

    ++v7;
  }

  while (v7 != v6);
  if (v22 <= 0)
  {
LABEL_26:
    id v19 = v5;
  }

  else
  {
    int v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @" #%d",  (v22 + 1)));
    id v19 = (id)objc_claimAutoreleasedReturnValue([v5 stringByAppendingString:v18]);
  }

  return v19;
}

void sub_1003E0690( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1003E0730(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 1076) != 76
    || ((v2 = *(_DWORD *)(a1 + 1080) - 8194, v3 = v2 > 0x1D, int v4 = (1 << v2) & 0x20037F9B, !v3)
      ? (BOOL v5 = v4 == 0)
      : (BOOL v5 = 1),
        v5))
  {
    if (!*(_BYTE *)(a1 + 1069) || (*(_BYTE *)(a1 + 1089) & 0x10) == 0 && (*(_BYTE *)(a1 + 1101) & 2) == 0) {
      return;
    }
  }

  __int16 v46 = 0LL;
  __int16 v47 = 0LL;
  uint64_t v48 = 0LL;
  memset(&v45, 0, sizeof(v45));
  sub_1003D0100(a1, (uint64_t)&v45);
  if (!std::string::compare(&v45, "AirPods"))
  {
    id v13 = sub_1002E95B8(@"AIRPODS", @"Headsets");
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@", v14));
LABEL_41:
    int v10 = (__CFString *)v15;

    goto LABEL_42;
  }

  if (!std::string::compare(&v45, "Powerbeats³"))
  {
    id v16 = sub_1002E95B8(@"POWERBEATS3", @"Headsets");
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v16);
    uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@", v14));
    goto LABEL_41;
  }

  if (!std::string::compare(&v45, "Beats Solo³"))
  {
    id v18 = sub_1002E95B8(@"SOLO3", @"Headsets");
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v18);
    uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@", v14));
    goto LABEL_41;
  }

  if (!std::string::compare(&v45, "Beatsˣ") || !std::string::compare(&v45, "BeatsX"))
  {
    id v17 = sub_1002E95B8(@"BEATSX", @"Headsets");
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v17);
    uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@", v14));
    goto LABEL_41;
  }

  if (!std::string::compare(&v45, "Beats Studio³"))
  {
    id v37 = sub_1002E95B8(@"BEATSSTUDIO3", @"Headsets");
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v37);
    uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@", v14));
    goto LABEL_41;
  }

  if (!std::string::compare(&v45, "Beats Studio Pro"))
  {
    int v10 = @"Beats Studio Pro";
    goto LABEL_42;
  }

  if (!std::string::compare(&v45, "Powerbeats Pro"))
  {
    id v38 = sub_1002E95B8(@"POWERBEATSPRO", @"Headsets");
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v38);
    uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@", v14));
    goto LABEL_41;
  }

  if (!std::string::compare(&v45, "Solo Pro"))
  {
    id v39 = sub_1002E95D8(@"SOLOPRO", @"Headsets");
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v39);
    uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@", v14));
    goto LABEL_41;
  }

  if (!std::string::compare(&v45, "AirPods Pro"))
  {
    int v10 = @"AirPods Pro";
    goto LABEL_42;
  }

  if (!std::string::compare(&v45, "AirPods Max"))
  {
    int v10 = @"AirPods Max";
    goto LABEL_42;
  }

  if (!std::string::compare(&v45, "Beats Studio Buds"))
  {
    int v10 = @"Beats Studio Buds";
    goto LABEL_42;
  }

  if (!std::string::compare(&v45, "Beats Studio Buds +"))
  {
    int v10 = @"Beats Studio Buds +";
LABEL_42:
    if (!sub_1002E8E5C())
    {
      sub_1003E1140(a1);
      goto LABEL_47;
    }

    memset(&__p, 0, sizeof(__p));
    uint64_t v19 = sub_1002E8E5C();
    (*(void (**)(std::string *__return_ptr))(*(void *)v19 + 112LL))(&__p);
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      if (__p.__r_.__value_.__l.__size_)
      {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_50;
      }
    }

    else if (__p.__r_.__value_.__s.__size_)
    {
      p_p = &__p;
LABEL_50:
      std::string::size_type v21 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_p));
      int v22 = (os_log_s *)qword_1008F7600;
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 138412546;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v21;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v10;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Name prefix: %@, Device type: %@",  (uint8_t *)&buf,  0x16u);
      }

      id v23 = sub_1002E95B8(@"APPLE_AUDIO_DEVICE_NAME", v10);
      __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      id v43 = 0LL;
      char v12 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithValidatedFormat:validFormatSpecifiers:error:]( &OBJC_CLASS___NSString,  "stringWithValidatedFormat:validFormatSpecifiers:error:",  v24,  @"%@%@",  &v43,  v21,  v10));
      id v25 = v43;

      if (!v12)
      {
        __int128 v35 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
          sub_100679AB0((uint64_t)v25, v35, v36);
        }
        char v12 = 0LL;
        signed int v11 = (void *)v21;
        goto LABEL_74;
      }

      signed int v11 = (void *)v21;
LABEL_57:
      int v27 = (os_log_s *)qword_1008F7600;
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Localized name: %@", (uint8_t *)&buf, 0xCu);
      }

      if (qword_1008D67A8 != -1) {
        dispatch_once(&qword_1008D67A8, &stru_100895CC8);
      }
      sub_10052AFEC((uint64_t)off_1008D67A0, (void ***)&v46);
      __int16 v40 = 0LL;
      __int128 __dst = 0LL;
      uint64_t v42 = 0LL;
      int v28 = v46;
      int64_t v29 = v47 - (_BYTE *)v46;
      if (v47 != v46)
      {
        sub_10023DBC8(&v40, v29 >> 3);
        int v30 = (char *)__dst;
        memmove(__dst, v28, v29);
        __int128 __dst = &v30[8 * (v29 >> 3)];
      }

      id v31 = sub_1003E03B8(a1, v12, (uint64_t **)&v40);
      int v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      if (v40)
      {
        __int128 __dst = v40;
        operator delete(v40);
      }

      memset(&buf, 0, sizeof(buf));
      id v25 = v32;
      sub_10002418C(&buf, (char *)[v25 UTF8String]);
      int v33 = (os_log_s *)qword_1008F7600;
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
      {
        p_std::string buf = &buf;
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)__int16 v49 = 136315138;
        *(void *)&v49[4] = p_buf;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Renaming device to: %s", v49, 0xCu);
      }

      sub_1003D17B0(a1, &buf, 1);
LABEL_74:

      goto LABEL_76;
    }

    char v26 = (os_log_s *)qword_1008F7600;
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "No name prefix", (uint8_t *)&buf, 2u);
    }

    char v12 = v10;
    signed int v11 = 0LL;
    goto LABEL_57;
  }

  std::string::size_type size = v45.__r_.__value_.__s.__size_;
  if ((v45.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = v45.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v7 = (os_log_s *)qword_1008F7600;
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a1, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v8 = &__p;
      }
      else {
        uint64_t v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      unint64_t v9 = &v45;
      if ((v45.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        unint64_t v9 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Set user-defined name for Apple Audio Device: %s to: %s",  (uint8_t *)&buf,  0x16u);
    }

    sub_10002418C(&__p, "");
    *(void *)__int16 v49 = 0LL;
    sub_1000B0400((uint64_t)v49);
    buf.__r_.__value_.__r.__words[0] = *(int *)v49;
    buf.__r_.__value_.__l.__size_ = *(__int16 *)&v49[4];
    sub_1003D0F60((std::string *)a1, &__p, &buf);
    int v10 = 0LL;
    sub_1003D17B0(a1, &v45, 0);
    signed int v11 = 0LL;
    char v12 = 0LL;
    goto LABEL_76;
  }

  int v10 = 0LL;
LABEL_47:
  signed int v11 = 0LL;
  char v12 = 0LL;
LABEL_76:
  if (v46)
  {
    __int16 v47 = v46;
    operator delete(v46);
  }
}

void sub_1003E0FE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }

  _Unwind_Resume(a1);
}

void sub_1003E1140(uint64_t a1)
{
  if (v12 < 0)
  {
    if (v11[1])
    {
      operator delete(v11[0]);
      return;
    }
  }

  else if (v12)
  {
    return;
  }

  if (*(_DWORD *)(a1 + 1076) == 76
    && ((v2 = *(_DWORD *)(a1 + 1080) - 8194, v3 = v2 > 0x1D, int v4 = (1 << v2) & 0x20037F9B, !v3)
      ? (BOOL v5 = v4 == 0)
      : (BOOL v5 = 1),
        !v5)
    || *(_BYTE *)(a1 + 1069) && ((*(_BYTE *)(a1 + 1089) & 0x10) != 0 || (*(_BYTE *)(a1 + 1101) & 2) != 0))
  {
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 776);
    if (v12 < 0)
    {
      operator delete(v11[0]);
      if ((v6 & 1) == 0) {
        return;
      }
    }

    else if ((v6 & 1) == 0)
    {
      return;
    }
  }

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1003E127C;
  v8[3] = &unk_100895B48;
  unint64_t v9 = objc_alloc_init(&OBJC_CLASS___CBUserController);
  uint64_t v10 = a1;
  uint64_t v7 = v9;
  -[CBUserController getCurrentUserGivenNameWithCompletion:](v7, "getCurrentUserGivenNameWithCompletion:", v8);
}

void sub_1003E1264( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1003E127C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v31 = 0LL;
  int v32 = 0LL;
  uint64_t v33 = 0LL;
  sub_1003D01A0(*(void *)(a1 + 40), (uint64_t)&__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  p_p,  4LL));
  id v6 = [v3 length];
  if (v3 && v6)
  {
    id v7 = sub_1002E95B8(@"APPLE_DEVICE_NAME", v5);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    id v30 = 0LL;
    unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithValidatedFormat:validFormatSpecifiers:error:]( &OBJC_CLASS___NSString,  "stringWithValidatedFormat:validFormatSpecifiers:error:",  v8,  @"%@%@",  &v30,  v3,  v5));
    id v10 = v30;

    if (v9)
    {
      if (qword_1008D67A8 != -1) {
        dispatch_once(&qword_1008D67A8, &stru_100895CC8);
      }
      sub_10052AFEC((uint64_t)off_1008D67A0, (void ***)&v31);
      uint64_t v11 = *(void *)(a1 + 40);
      __int128 __dst = 0LL;
      uint64_t v29 = 0LL;
      int v27 = 0LL;
      char v12 = v31;
      int64_t v13 = v32 - (_BYTE *)v31;
      if (v32 != v31)
      {
        sub_10023DBC8(&v27, v13 >> 3);
        uint64_t v14 = (char *)__dst;
        memmove(__dst, v12, v13);
        __int128 __dst = &v14[8 * (v13 >> 3)];
      }

      id v15 = sub_1003E03B8(v11, v9, (uint64_t **)&v27);
      id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      if (v27)
      {
        __int128 __dst = v27;
        operator delete(v27);
      }

      id v17 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        id v18 = [v16 UTF8String];
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Bluetooth device name is auto updated to %s",  (uint8_t *)&__p,  0xCu);
      }

      uint64_t v19 = *(void *)(a1 + 40);
      id v20 = v16;
      sub_10002418C(&__p, (char *)[v20 UTF8String]);
      sub_1003D17B0(v19, &__p, 1);
    }

    else
    {
      __int16 v24 = (os_log_s *)qword_1008F7578;
      if (v10 && os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 138412290;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
        _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "stringWithValidatedFormat failed for APPLE_DEVICE_NAME: %@",  (uint8_t *)&__p,  0xCu);
        __int16 v24 = (os_log_s *)qword_1008F7578;
      }

      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_100679B18(v24, v25, v26);
      }
      id v20 = 0LL;
    }
  }

  else
  {
    std::string::size_type v21 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
      sub_100679B8C(v21, v22, v23);
    }
    unint64_t v9 = 0LL;
    id v20 = 0LL;
  }

  if (v31)
  {
    int v32 = v31;
    operator delete(v31);
  }
}

void sub_1003E15CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1003E1694(uint64_t result, int a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    if (*(_DWORD *)(result + 424) != a2)
    {
      *(_DWORD *)(result + 424) = a2;
      uint64_t v3 = sub_1002E6D7C();
      return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v3 + 1328LL))( v3,  v2,  *(unsigned int *)(v2 + 424));
    }
  }

  return result;
}

uint64_t sub_1003E16E4(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 424);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E1728(uint64_t a1, float a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(float *)(a1 + 1124) = a2;
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, float))(*(void *)v4 + 1360LL))(v4, a1, *(float *)(a1 + 1124));
  return sub_100242FAC((uint64_t)v6);
}

void sub_1003E178C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float sub_1003E17A0(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  float v2 = *(float *)(a1 + 1124);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E17EC(uint64_t a1, char a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 1152) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003E1830(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 1152);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E1874(uint64_t a1, uint64_t a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  if (a1 + 1128 != a2) {
    sub_100272430( (char *)(a1 + 1128),  *(char **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  uint64_t v4 = sub_1002E6D7C();
  sub_100272534(__p, a1 + 1128);
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v4 + 1376LL))(v4, a1, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return sub_100242FAC((uint64_t)v7);
}

void sub_1003E1918( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E1944(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(void *)(a1 + 1280);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

id sub_1003E1988(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  id v2 = *(id *)(a1 + 1288);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E19D4(uint64_t a1)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 432);
  uint64_t v3 = &off_10087FAA8;
  uint64_t v4 = 0LL;
  sub_10002EAC8(a1 + 496, (uint64_t)&v3);
  uint64_t v3 = &off_10087FAA8;
  if (v4) {
    sub_1002CD254(v4);
  }
  return sub_100242FAC((uint64_t)v5);
}

void sub_1003E1A38(_Unwind_Exception *a1, uint64_t a2, unsigned int *a3, ...)
{
  if (a3) {
    sub_1002CD254(a3);
  }
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

NSMutableDictionary *sub_1003E1A5C(unsigned __int8 *a1, unsigned int a2)
{
  int v4 = *a1;
  int v5 = v4 | (a1[1] << 8);
  BOOL v6 = v5 == 19456 || v5 == 76;
  if (v6) {
    unsigned __int8 v7 = 2;
  }
  else {
    unsigned __int8 v7 = 1;
  }
  if (v6) {
    unsigned int v8 = 3;
  }
  else {
    unsigned int v8 = 2;
  }
  BOOL v9 = v4 == 76 || v5 == 19456;
  if (!v9 && v5 != 76) {
    return (NSMutableDictionary *)0LL;
  }
  id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", 76LL));
  -[NSMutableDictionary setObject:forKey:](v10, "setObject:forKey:", v11, @"kCBMsgArgVID");

  -[NSMutableDictionary setObject:forKey:](v10, "setObject:forKey:", &off_1008C2AE0, @"kCBMsgArgVIDSource");
  uint64_t v12 = v7;
  LODWORD(v11) = a1[v7];
  int64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a1[v7]));
  -[NSMutableDictionary setObject:forKey:]( v10,  "setObject:forKey:",  v13,  @"CBCentralManagerScanOptionMatchingRuleTypeKey");

  int v14 = (_DWORD)v11 - 1;
  uint64_t v15 = v12 + 1;
  switch(v14)
  {
    case 0:
      if (a2 > v8)
      {
        if (a2 == 20)
        {
          id v16 = (NSString *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  &a1[v15],  16LL));
          -[NSMutableDictionary setObject:forKey:](v10, "setObject:forKey:", v16, @"ServiceUUIDHash");
        }

        else
        {
          id v16 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  &a1[v15],  a2 - v8,  4LL);
          if (v16) {
            -[NSMutableDictionary setObject:forKey:](v10, "setObject:forKey:", v16, @"kCBMsgArgModelIdentifier");
          }
        }

        goto LABEL_24;
      }

      break;
    case 1:
      id v18 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v22 = 0;
        uint64_t v19 = "Warning: Received Apple EIR 3rd party advertising data - not processed";
        id v20 = (uint8_t *)&v22;
        goto LABEL_27;
      }

      break;
    case 2:
      id v16 = (NSString *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  a1[v15]));
      -[NSMutableDictionary setObject:forKey:](v10, "setObject:forKey:", v16, @"kCBMsgArgColorID");
LABEL_24:

      break;
    case 6:
      id v18 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v21 = 0;
        uint64_t v19 = "Warning: Received Apple EIR ProxPairing data - not processed";
        id v20 = (uint8_t *)&v21;
LABEL_27:
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v19, v20, 2u);
      }

      break;
    default:
      return v10;
  }

  return v10;
}

void sub_1003E1CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1003E1D2C(uint64_t a1, void *a2, unsigned int a3)
{
  __s2 = 0LL;
  unsigned __int8 v42 = 0;
  *(void *)&__n[1] = 0LL;
  __n[0] = 0;
  __int16 v40 = 0LL;
  unsigned __int8 v39 = 0;
  v38[0] = 0LL;
  v38[1] = 0LL;
  sub_100242F28((uint64_t)v38, a1 + 432);
  size_t v6 = sub_10056AAD8(a1 + 496);
  if (v6 == a3)
  {
    unsigned __int8 v7 = (const void *)sub_10056AAF0(a1 + 496);
    if (!memcmp(a2, v7, v6))
    {
      BOOL v9 = 0LL;
      goto LABEL_50;
    }
  }

  if (!a3
    || sub_10011BCE4((unsigned __int8 *)a2, 255, __n, (unsigned __int8 **)&__n[1])
    || sub_10056AAD8(a1 + 496)
    && (id v31 = (unsigned __int8 *)sub_10056AAF0(a1 + 496),
        sub_10011BCE4(v31, 255, &v42, (unsigned __int8 **)&__s2)))
  {
    int v8 = 0;
LABEL_6:
    BOOL v9 = 1LL;
    goto LABEL_7;
  }

  if (__n[0] != v42)
  {
    int v8 = 1;
    goto LABEL_6;
  }

  BOOL v9 = memcmp(*(const void **)&__n[1], __s2, __n[0]) != 0;
  int v8 = 1;
LABEL_7:
  uint64_t v10 = sub_1002E6BF0();
  if (v8 & (*(unsigned int (**)(uint64_t))(*(void *)v10 + 384LL))(v10) & v9)
  {
    uint64_t v11 = sub_1003E1A5C(*(unsigned __int8 **)&__n[1], __n[0]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    NSLog(@"Received EIR dict: %@", v12);
    if (v12)
    {
      std::string v34 = (void *)objc_claimAutoreleasedReturnValue([v12 valueForKey:@"kCBMsgArgVID"]);
      int64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 valueForKey:@"kCBMsgArgVIDSource"]);
      uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSNumber);
      if ((objc_opt_isKindOfClass(v34, v14) & (v13 != 0LL)) == 1)
      {
        uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSNumber);
        if ((objc_opt_isKindOfClass(v13, v15) & 1) != 0)
        {
          int v33 = [v34 unsignedShortValue];
          int v16 = [v13 unsignedCharValue];
          id v17 = (os_log_s *)qword_1008F7578;
          if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C(a1, __p);
            id v18 = __p;
            if (v37 < 0) {
              id v18 = (void **)__p[0];
            }
            *(_DWORD *)std::string buf = 136447234;
            *(void *)&uint8_t buf[4] = v18;
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v16;
            *(_WORD *)&_BYTE buf[18] = 1024;
            *(_DWORD *)std::string v45 = v33;
            *(_WORD *)&uint8_t v45[4] = 1024;
            int v46 = 0;
            __int16 v47 = 1024;
            int v48 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "setEIRData %{public}s deviceId information: vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x",  buf,  0x24u);
            if (v37 < 0) {
              operator delete(__p[0]);
            }
          }

          sub_1003D6538(a1, v16, v33, 0, 0);
        }
      }

      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v12 valueForKey:@"kCBMsgArgColorID"]);
      if (v19)
      {
        uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSNumber);
        if ((objc_opt_isKindOfClass(v19, v20) & 1) != 0) {
          sub_1003E1694(a1, (int)[v19 unsignedCharValue]);
        }
      }

      __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v12 valueForKey:@"kCBMsgArgModelIdentifier"]);
      if (v21)
      {
        uint64_t v22 = objc_opt_class(&OBJC_CLASS___NSString);
        if ((objc_opt_isKindOfClass(v21, v22) & 1) != 0)
        {
          id v23 = v21;
          sub_10002418C(&__str, (char *)[v23 UTF8String]);
          std::string::operator=((std::string *)(a1 + 392), &__str);
        }
      }
    }
  }

  sub_10056AB04(buf, a2, a3);
  sub_10002EAC8(a1 + 496, (uint64_t)buf);
  *(void *)std::string buf = &off_10087FAA8;
  if (*(void *)&buf[8]) {
    sub_1002CD254(*(unsigned int **)&buf[8]);
  }
  if (a3)
  {
    int v24 = sub_10011BCE4((unsigned __int8 *)a2, 16, &v39, &v40);
    int v25 = v39;
    if (!v24 && v39)
    {
      if (!v40) {
        sub_1000E6B88( "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/Device.mm",  6212,  "(uint8_t *)newDeviceIdData");
      }
      if (v39 <= 1u)
      {
        sub_1001ED1C4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/Device.mm");
        int v26 = 0;
      }

      else
      {
        int v26 = *(unsigned __int16 *)v40;
        if (v39 > 3u)
        {
          int v27 = *((unsigned __int16 *)v40 + 1);
          if (v39 > 5u)
          {
            int v28 = *((unsigned __int16 *)v40 + 2);
            if (v39 >= 8u)
            {
              int v29 = *((unsigned __int16 *)v40 + 3);
LABEL_49:
              sub_1003D6538(a1, v26, v27, v28, v29);
              goto LABEL_50;
            }

void sub_1003E2290( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
  sub_100242FAC((uint64_t)&a22);
  _Unwind_Resume(a1);
}

BOOL sub_1003E235C(uint64_t a1, void *a2, _BYTE *a3)
{
  uint64_t v5 = a1;
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_100242F28((uint64_t)v10, a1 + 432);
  v5 += 496LL;
  size_t v6 = sub_10056AAD8(v5);
  char v7 = sub_10056AB74(v5, a2, v6);
  *a3 = v7;
  BOOL v8 = v7 != 0LL;
  sub_100242FAC((uint64_t)v10);
  return v8;
}

void sub_1003E23D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003E23E8(uint64_t a1, _BYTE *a2)
{
  __int16 v21 = 0LL;
  unsigned __int8 v20 = 0;
  v19[0] = 0LL;
  v19[1] = 0LL;
  sub_100242F28((uint64_t)v19, a1 + 432);
  if (!sub_10056AAD8(a1 + 496))
  {
LABEL_27:
    uint64_t v13 = 0LL;
    goto LABEL_28;
  }

  int v4 = (unsigned __int8 *)sub_10056AAF0(a1 + 496);
  if (sub_10011BCE4(v4, 255, &v20, &v21) || !v21 || !v20)
  {
    uint64_t v11 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Could not get the EIR manufacturer data",  (uint8_t *)__p,  2u);
    }

    goto LABEL_27;
  }

  if (*v21 && v21[1] != 76)
  {
    uint64_t v14 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
      sub_1003CF00C(a1, __p);
      uint64_t v15 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      id v23 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "Device %{public}s is not an Apple device",  buf,  0xCu);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }

    goto LABEL_27;
  }

  uint64_t v5 = 0LL;
  uint64_t v6 = 1LL;
  if (*v21 != 76) {
    uint64_t v6 = 2LL;
  }
  char v7 = &v21[v6];
  __int16 v21 = v7;
  unsigned __int8 v8 = *v7;
  while (v8 == 1)
  {
    uint64_t v9 = v5;
    do
    {
      uint64_t v5 = v9;
      int v10 = v7[v9];
      uint64_t v9 = (v9 + 1);
    }

    while (v10);
    unsigned __int8 v8 = 0;
  }

  if (v8 != 2) {
    goto LABEL_27;
  }
  uint64_t v12 = (v5 + 2);
  if (v7[v12] != 2) {
    goto LABEL_27;
  }
  *a2 = v7[v12 + 1];
  uint64_t v13 = 1LL;
LABEL_28:
  sub_100242FAC((uint64_t)v19);
  return v13;
}

void sub_1003E2614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003E2634(uint64_t a1, char *a2, uint64_t a3)
{
  int v27 = 0LL;
  unsigned __int8 v26 = 0;
  v25[0] = 0LL;
  v25[1] = 0LL;
  sub_100242F28((uint64_t)v25, a1 + 432);
  if (!sub_10056AAD8(a1 + 496))
  {
    uint64_t v15 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_INFO))
    {
      sub_1003CF00C(a1, __p);
      if (v24 >= 0) {
        int v16 = __p;
      }
      else {
        int v16 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      int v29 = v16;
      id v17 = "No EIR for device %{public}s";
LABEL_21:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, v17, buf, 0xCu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

void sub_1003E28E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003E2908(uint64_t a1, void *a2, size_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  v42[0] = 0LL;
  v42[1] = 0LL;
  sub_100242F28((uint64_t)v42, a1);
  if (!*(void *)(a1 + 600))
  {
    a5 = 0LL;
    goto LABEL_81;
  }

  unsigned __int8 v39 = 0LL;
  __int16 v40 = 0LL;
  uint64_t v41 = 0LL;
  std::string __p = 0LL;
  char v37 = 0LL;
  uint64_t v38 = 0LL;
  __int128 v35 = xmmword_1006C28C0;
  int v12 = sub_1003D4C9C(a1, (uint64_t)&v35, 0x200u, &__p);
  uint64_t v13 = (char *)__p;
  if (!v12 || v37 - (_BYTE *)__p != 16) {
    goto LABEL_76;
  }
  if (*(_BYTE *)__p == 1)
  {
    int v33 = *((_DWORD *)__p + 2);
    if (__p != v37)
    {
      do
      {
        __int128 v34 = 0uLL;
        __int128 v34 = *(_OWORD *)v13;
        sub_10025EB84(&v34);
        v13 += 16;
      }

      while (v13 != v37);
      uint64_t v13 = (char *)__p;
    }

    char v37 = v13;
    if (v33)
    {
      __s2 = a2;
      int v14 = 0;
      if (a4) {
        BOOL v15 = a6 == 0;
      }
      else {
        BOOL v15 = 1;
      }
      int v17 = !v15 && a5 != 0;
      int v31 = v17;
      do
      {
        char v18 = (__int128 *)v39;
        if (v39 == v40)
        {
          __int16 v40 = (__int128 *)v39;
        }

        else
        {
          do
          {
            __int128 v34 = 0uLL;
            __int128 v34 = *v18;
            sub_10025EB84(&v34);
            ++v18;
          }

          while (v18 != v40);
          unsigned int v19 = (char *)__p;
          uint64_t v13 = v37;
          __int16 v40 = (__int128 *)v39;
          if (__p != v37)
          {
            do
            {
              __int128 v34 = 0uLL;
              __int128 v34 = *(_OWORD *)v19;
              sub_10025EB84(&v34);
              v19 += 16;
            }

            while (v19 != v37);
            uint64_t v13 = (char *)__p;
          }
        }

        char v37 = v13;
        if (!sub_1003D4C9C(a1, (uint64_t)&v35, 2 * v14 + 513, &v39)
          || (sub_1003D4C9C(a1, (uint64_t)&v35, 2 * v14 + 514, &__p) & 1) == 0)
        {
          goto LABEL_74;
        }

        __int16 v21 = (__int128 *)v39;
        uint64_t v20 = v40;
        if ((char *)v40 - (_BYTE *)v39 == 16 && (uint64_t v22 = (char *)__p, v13 = v37, v37 - (_BYTE *)__p == 16))
        {
          if (*(_BYTE *)v39 == 4 && *(_BYTE *)__p == 4)
          {
            if (*((unsigned __int16 *)v39 + 1) == a3)
            {
              size_t __n = *((unsigned __int16 *)__p + 1);
              __std::string src = (void *)*((void *)__p + 1);
              if (!memcmp(*((const void **)v39 + 1), __s2, a3))
              {
                if (v31)
                {
                  uint64_t v23 = *(unsigned int *)a5;
                  unsigned int v24 = __n + v23 + 2;
                  if (v24 <= a6)
                  {
                    *(_WORD *)(a4 + v23) = __n;
                    uint64_t v25 = (*(_DWORD *)a5 + 2);
                    *(_DWORD *)a5 = v25;
                    memcpy((void *)(a4 + v25), __src, __n);
                    int v26 = __n;
                    int v27 = *(_DWORD *)a5;
                    goto LABEL_64;
                  }
                }

                else
                {
                  if (!a5)
                  {
                    if (v21 != v20)
                    {
                      do
                      {
                        __int128 v34 = *v21;
                        sub_10025EB84(&v34);
                        ++v21;
                      }

                      while (v21 != v40);
                      uint64_t v20 = (__int128 *)v39;
                      uint64_t v22 = (char *)__p;
                      uint64_t v13 = v37;
                    }

                    __int16 v40 = v20;
                    if (v22 == v13)
                    {
                      a5 = 1LL;
                      goto LABEL_77;
                    }

                    do
                    {
                      __int128 v34 = *(_OWORD *)v22;
                      sub_10025EB84(&v34);
                      v22 += 16;
                    }

                    while (v22 != v37);
                    a5 = 1LL;
                    goto LABEL_75;
                  }

                  int v27 = __n + 2;
                  int v26 = *(_DWORD *)a5;
LABEL_64:
                  unsigned int v24 = v27 + v26;
                }

                *(_DWORD *)a5 = v24;
                if (v21 != v20)
                {
                  do
                  {
                    __int128 v34 = 0uLL;
                    __int128 v34 = *v21;
                    sub_10025EB84(&v34);
                    ++v21;
                  }

                  while (v21 != v40);
                  uint64_t v20 = (__int128 *)v39;
                  uint64_t v22 = (char *)__p;
                  uint64_t v13 = v37;
                }

                __int16 v40 = v20;
                if (v22 == v13) {
                  goto LABEL_45;
                }
                do
                {
                  __int128 v34 = 0uLL;
                  __int128 v34 = *(_OWORD *)v22;
                  sub_10025EB84(&v34);
                  v22 += 16;
                }

                while (v22 != v37);
                goto LABEL_44;
              }

              if (v21 != v20)
              {
                do
                {
                  __int128 v34 = 0uLL;
                  __int128 v34 = *v21;
                  sub_10025EB84(&v34);
                  ++v21;
                }

                while (v21 != v40);
                uint64_t v20 = (__int128 *)v39;
                uint64_t v22 = (char *)__p;
                uint64_t v13 = v37;
              }

              __int16 v40 = v20;
              if (v22 == v13) {
                goto LABEL_45;
              }
              do
              {
                __int128 v34 = 0uLL;
                __int128 v34 = *(_OWORD *)v22;
                sub_10025EB84(&v34);
                v22 += 16;
              }

              while (v22 != v37);
            }

            else
            {
              if (v39 != v40)
              {
                do
                {
                  __int128 v34 = 0uLL;
                  __int128 v34 = *v21;
                  sub_10025EB84(&v34);
                  ++v21;
                }

                while (v21 != v40);
                uint64_t v20 = (__int128 *)v39;
                uint64_t v22 = (char *)__p;
                uint64_t v13 = v37;
              }

              __int16 v40 = v20;
              if (v22 == v13) {
                goto LABEL_45;
              }
              do
              {
                __int128 v34 = 0uLL;
                __int128 v34 = *(_OWORD *)v22;
                sub_10025EB84(&v34);
                v22 += 16;
              }

              while (v22 != v37);
            }
          }

          else
          {
            if (v39 != v40)
            {
              do
              {
                __int128 v34 = 0uLL;
                __int128 v34 = *v21;
                sub_10025EB84(&v34);
                ++v21;
              }

              while (v21 != v40);
              uint64_t v20 = (__int128 *)v39;
              uint64_t v22 = (char *)__p;
              uint64_t v13 = v37;
            }

            __int16 v40 = v20;
            if (v22 == v13) {
              goto LABEL_45;
            }
            do
            {
              __int128 v34 = 0uLL;
              __int128 v34 = *(_OWORD *)v22;
              sub_10025EB84(&v34);
              v22 += 16;
            }

            while (v22 != v37);
          }
        }

        else
        {
          if (v39 != v40)
          {
            do
            {
              __int128 v34 = 0uLL;
              __int128 v34 = *v21;
              sub_10025EB84(&v34);
              ++v21;
            }

            while (v21 != v40);
            uint64_t v20 = (__int128 *)v39;
          }

          __int16 v40 = v20;
          uint64_t v13 = (char *)__p;
          if (__p == v37) {
            goto LABEL_45;
          }
          do
          {
            __int128 v34 = 0uLL;
            __int128 v34 = *(_OWORD *)v13;
            sub_10025EB84(&v34);
            v13 += 16;
          }

          while (v13 != v37);
        }

void sub_1003E2EB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, void *a22, uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  sub_100242FAC(v23 - 96);
  _Unwind_Resume(a1);
}

void sub_1003E2F2C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v6 = *a2;
  if ((v6 - 6) < 2)
  {
    if (*((_WORD *)a2 + 1))
    {
      int v9 = 0;
      do
        sub_1003E2F2C(a1, *((void *)a2 + 1) + 16LL * v9++, a3);
      while (*((unsigned __int16 *)a2 + 1) > v9);
    }
  }

  else if (v6 == 3)
  {
    __int128 v10 = xmmword_1006C28D0;
  }

  else if (v6 == 1 && *(_BYTE *)(a1 + 579))
  {
    int v7 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *((_DWORD *)a2 + 2);
      LODWORD(v10) = 67109376;
      DWORD1(v10) = v8;
      WORD4(v10) = 1024;
      *(_DWORD *)((char *)&v10 + 10) = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Updating RFCOMM channel from %d -> %d ",  (uint8_t *)&v10,  0xEu);
    }

    *(_BYTE *)(a1 + 579) = 0;
    *((_DWORD *)a2 + 2) = a3;
  }

uint64_t sub_1003E307C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_100242F28((uint64_t)v20, a1);
  int v6 = *(void **)(a1 + 584);
  if (v6 != (void *)(a1 + 592))
  {
    while (!sub_10025FC8C(v6[4], a2))
    {
      int v7 = (void *)v6[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          int v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          int v8 = (void *)v6[2];
          BOOL v9 = *v8 == (void)v6;
          int v6 = v8;
        }

        while (!v9);
      }

      int v6 = v8;
      if (v8 == (void *)(a1 + 592)) {
        goto LABEL_23;
      }
    }

    uint64_t v18 = 0LL;
    v19[0] = 0LL;
    v19[1] = 0LL;
    sub_1002DBF7C((uint64_t)&v18, (uint64_t)(v6 + 5));
    __int128 v10 = (void *)v19[0];
    if (v19[0])
    {
      uint64_t v11 = (unsigned __int8 *)v19;
      int v12 = (uint64_t *)v19[0];
      do
      {
        uint64_t v13 = (unsigned __int8 *)v12;
        int v14 = v11;
        unsigned int v15 = *((_DWORD *)v12 + 8);
        if (v15 >= 4) {
          uint64_t v11 = (unsigned __int8 *)v12;
        }
        else {
          ++v12;
        }
        int v12 = (uint64_t *)*v12;
      }

      while (v12);
      if (v11 != (unsigned __int8 *)v19)
      {
        int v16 = v15 >= 4 ? v13 : v14;
        if (*((_DWORD *)v16 + 8) <= 4u)
        {
          sub_1003E2F2C(a1, v11 + 40, a3);
          __int128 v10 = (void *)v19[0];
        }
      }
    }

    sub_10023BF24((uint64_t)&v18, v10);
  }

void sub_1003E31BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  sub_10023BF24((uint64_t)va, v5);
  sub_100242FAC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E31E8(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  v40[0] = 0LL;
  v40[1] = 0LL;
  sub_100242F28((uint64_t)v40, a1);
  int v4 = *(void **)(v3 + 584);
  int v27 = (void *)(v3 + 592);
  if (v4 != (void *)(v3 + 592))
  {
    uint64_t v5 = 0LL;
    uint64_t v26 = v3;
    while (1)
    {
      __n128 v39 = 0uLL;
      __n128 v39 = *(__n128 *)v4[4];
      uint64_t v36 = 0LL;
      char v37 = 0LL;
      uint64_t v38 = 0LL;
      int v6 = sub_1003D4C9C(v3, (uint64_t)&v39, 4u, (void **)&v36);
      int v8 = v36;
      int v7 = v37;
      if (v36 == v37) {
        int v9 = 0;
      }
      else {
        int v9 = v6;
      }
      if (v9 == 1)
      {
        do
        {
          unint64_t v10 = *((unsigned __int16 *)v8 + 1);
          if ((v10 & 1) == 0 && *((_WORD *)v8 + 1))
          {
            unint64_t v11 = 0LL;
            int v12 = (int *)(v8[1] + 8LL);
            do
            {
              int v13 = *v12;
              v12 += 8;
              if (v13 == 3)
              {
                v34[0] = 0LL;
                v34[1] = 0LL;
                uint64_t v35 = 0LL;
                sub_10002418C(v34, "RFCOMM ServiceClass: ");
                memset(&v33, 0, sizeof(v33));
                if (v39.n128_u8[0] == 3)
                {
                  if (v39.n128_u16[1] > 4u) {
                    int v14 = sub_1001EB74C((unsigned int *)v39.n128_u64[1]);
                  }
                  else {
                    int v14 = sub_1001EBA4C(v39.n128_u32[2]);
                  }
                  std::string::assign(&v33, v14);
                }

                id v30 = 0LL;
                std::string::size_type v31 = 0LL;
                uint64_t v32 = 0LL;
                sub_10002418C(&v30, "\n");
                __p[0] = 0LL;
                __p[1] = 0LL;
                int64_t cap = 0LL;
                sub_1003D4034((const void **)v34, (const void **)&v33.__r_.__value_.__l.__data_, &v41);
                if (v32 >= 0) {
                  unsigned int v15 = (const std::string::value_type *)&v30;
                }
                else {
                  unsigned int v15 = (const std::string::value_type *)v30;
                }
                if (v32 >= 0) {
                  std::string::size_type v16 = HIBYTE(v32);
                }
                else {
                  std::string::size_type v16 = v31;
                }
                int v17 = std::string::append(&v41, v15, v16);
                __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
                int64_t cap = v17->__r_.__value_.__l.__cap_;
                *(_OWORD *)std::string __p = v18;
                v17->__r_.__value_.__l.__size_ = 0LL;
                v17->__r_.__value_.__l.__cap_ = 0LL;
                v17->__r_.__value_.__r.__words[0] = 0LL;
                unsigned int v19 = (os_log_s *)qword_1008F7578;
                if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v20 = __p;
                  if (cap < 0) {
                    uint64_t v20 = (void **)__p[0];
                  }
                  LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
                  _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v41, 0xCu);
                }

                sub_1003E35E4(a2, &v39);
                if (SHIBYTE(cap) < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(v32) < 0) {
                  operator delete(v30);
                }
                if (SHIBYTE(v35) < 0) {
                  operator delete(v34[0]);
                }
                uint64_t v5 = (v5 + 1);
              }

              v11 += 2LL;
            }

            while (v11 < v10);
            int v7 = v37;
          }

          v8 += 2;
        }

        while (v8 != (void *)v7);
        __int16 v21 = v36;
        if (v36 == v7)
        {
          int v8 = v7;
          if (!v7) {
            goto LABEL_45;
          }
LABEL_44:
          char v37 = v8;
          operator delete(v8);
          goto LABEL_45;
        }

        do
        {
          v34[0] = 0LL;
          v34[1] = 0LL;
          *(_OWORD *)__int128 v34 = *v21;
          sub_10025EB84(v34);
          ++v21;
        }

        while (v21 != v37);
        int v8 = v36;
      }

      if (v8) {
        goto LABEL_44;
      }
LABEL_45:
      uint64_t v22 = (void *)v4[1];
      if (v22)
      {
        do
        {
          uint64_t v23 = v22;
          uint64_t v22 = (void *)*v22;
        }

        while (v22);
      }

      else
      {
        do
        {
          uint64_t v23 = (void *)v4[2];
          BOOL v24 = *v23 == (void)v4;
          int v4 = v23;
        }

        while (!v24);
      }

      int v4 = v23;
      uint64_t v3 = v26;
      if (v23 == v27) {
        goto LABEL_55;
      }
    }
  }

  uint64_t v5 = 0LL;
LABEL_55:
  sub_100242FAC((uint64_t)v40);
  return v5;
}

void sub_1003E3540( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, void *__p, uint64_t a39)
{
}

__n128 sub_1003E35E4(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1003E7150(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v7) = *a2;
  ++a1[5];
  return result;
}

id sub_1003E366C(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  id v2 = [*(id *)(a1 + 1304) copy];
  sub_100242FAC((uint64_t)v4);
  return v2;
}

void sub_1003E36B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_1003E36CC(uint64_t a1, int a2)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v3 = *(id *)(a1 + 1304);
  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v3);
        }
        unint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
        int v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", @"kCBMsgArgPSM", (void)v12));
        int v9 = v8;
        if (v8 && [v8 intValue] == a2)
        {
          unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"kCBMsgArgServiceUUID"]);

          goto LABEL_12;
        }
      }

      id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  unint64_t v10 = 0LL;
LABEL_12:

  return v10;
}

void sub_1003E3820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1003E3854(uint64_t a1, int a2)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v3 = *(id *)(a1 + 1304);
  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v3);
        }
        unint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
        int v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", @"kCBMsgArgRFCOMMChannelID", (void)v12));
        int v9 = v8;
        if (v8 && [v8 intValue] == a2)
        {
          unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"kCBMsgArgServiceUUID"]);

          goto LABEL_12;
        }
      }

      id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  unint64_t v10 = 0LL;
LABEL_12:

  return v10;
}

void sub_1003E39A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E39DC(uint64_t a1, void *a2, size_t a3)
{
  return sub_1003E2908(a1, a2, a3, 0LL, 0LL, 0);
}

uint64_t sub_1003E39EC(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 368);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E3A30(uint64_t a1, _DWORD *a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_100242F28((uint64_t)v6, a1);
  *(_DWORD *)(a1 + 36_Block_object_dispose(va, 8) = *a2;
  uint64_t v4 = sub_1002E6D7C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 376LL))(v4, a1, a1 + 368);
  return sub_100242FAC((uint64_t)v6);
}

void sub_1003E3A90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003E3AA4(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v5 = 0LL;
  sub_1000B0400((uint64_t)&v5);
  uint64_t v2 = SWORD2(v5);
  *(void *)(a1 + 376) = (int)v5;
  *(void *)(a1 + 384) = v2;
  return sub_100242FAC((uint64_t)v4);
}

void sub_1003E3AF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_1003E3B0C(uint64_t a1, int a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1);
  unint64_t v4 = *(void *)(a1 + 384) + (1000 * a2);
  v8[0] = v4 / 0x3E8 + *(_DWORD *)(a1 + 376);
  v8[1] = v4 % 0x3E8;
  BOOL v5 = !sub_1001F4468((uint64_t)v8);
  sub_100242FAC((uint64_t)v7);
  return v5;
}

void sub_1003E3BA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1003E3BB4(uint64_t a1, char a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 1370) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003E3BF8(uint64_t a1)
{
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_100242F28((uint64_t)v3, a1);
  ++*(_BYTE *)(a1 + 1375);
  return sub_100242FAC((uint64_t)v3);
}

uint64_t sub_1003E3C40(uint64_t a1)
{
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_100242F28((uint64_t)v3, a1);
  *(_BYTE *)(a1 + 1375) = 0;
  return sub_100242FAC((uint64_t)v3);
}

uint64_t sub_1003E3C80(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 1375);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E3CC4(uint64_t a1)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_100242F28((uint64_t)v12, a1);
  uint64_t v2 = *(dispatch_source_s **)(a1 + 1376);
  if (v2) {
    goto LABEL_3;
  }
  uint64_t v3 = sub_100404EB8();
  unint64_t v4 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(v3 + 8));
  *(void *)(a1 + 1376) = v4;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_1003E3E98;
  handler[3] = &unk_10087EB20;
  handler[4] = a1;
  dispatch_source_set_event_handler(v4, handler);
  uint64_t v2 = *(dispatch_source_s **)(a1 + 1376);
  if (v2)
  {
LABEL_3:
    ++*(_WORD *)(a1 + 1400);
    ++*(_BYTE *)(a1 + 1384);
    BOOL v5 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a1, __p);
      if (v10 >= 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 67109378;
      int v14 = 300;
      __int16 v15 = 2082;
      std::string::size_type v16 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Start Scan Core Page Scan backoff timer of %d seconds for device %{public}s",  buf,  0x12u);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v2 = *(dispatch_source_s **)(a1 + 1376);
    }

    dispatch_time_t v7 = dispatch_time(0LL, 300000000000LL);
    dispatch_source_set_timer(v2, v7, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    dispatch_resume(*(dispatch_object_t *)(a1 + 1376));
  }

  return sub_100242FAC((uint64_t)v12);
}

void sub_1003E3E78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1003E3E98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  ++*(_WORD *)(v1 + 1408);
  return sub_1003E3EAC(v1);
}

uint64_t sub_1003E3EAC(uint64_t a1)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1);
  __p[0] = 0LL;
  __p[1] = 0LL;
  sub_100242F28((uint64_t)__p, a1);
  *(_BYTE *)(a1 + 1375) = 0;
  sub_100242FAC((uint64_t)__p);
  uint64_t v2 = *(dispatch_source_s **)(a1 + 1376);
  if (v2)
  {
    uint64_t v3 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a1, __p);
      if (v7 >= 0) {
        unint64_t v4 = __p;
      }
      else {
        unint64_t v4 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      char v10 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Stopping Scan Core Page Scan backoff timer for device %{public}s",  buf,  0xCu);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v2 = *(dispatch_source_s **)(a1 + 1376);
    }

    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 1376));
    *(void *)(a1 + 1376) = 0LL;
  }

  return sub_100242FAC((uint64_t)v8);
}

void sub_1003E3FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

BOOL sub_1003E3FF8(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  BOOL v2 = *(void *)(a1 + 1376) != 0LL;
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E4044(uint64_t a1, int a2)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  if (qword_1008D6198 != -1) {
    dispatch_once(&qword_1008D6198, &stru_100895B88);
  }
  sub_10044841C((uint64_t)off_1008D6190, a2);
  return sub_100242FAC((uint64_t)v4);
}

void sub_1003E40B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003E40CC(uint64_t a1, unsigned int a2)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_100242F28((uint64_t)v14, a1);
  unint64_t v4 = *(dispatch_source_s **)(a1 + 1424);
  if (v4) {
    goto LABEL_3;
  }
  uint64_t v5 = sub_100404EB8();
  uint64_t v6 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(v5 + 8));
  *(void *)(a1 + 1424) = v6;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_1003E427C;
  handler[3] = &unk_10087EB20;
  handler[4] = a1;
  dispatch_source_set_event_handler(v6, handler);
  unint64_t v4 = *(dispatch_source_s **)(a1 + 1424);
  if (v4)
  {
LABEL_3:
    char v7 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a1, __p);
      if (v12 >= 0) {
        int v8 = __p;
      }
      else {
        int v8 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      std::string::size_type v16 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Starting connection request watchdog timer for %{public}s",  buf,  0xCu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v4 = *(dispatch_source_s **)(a1 + 1424);
    }

    dispatch_time_t v9 = dispatch_time(0LL, 1000000000LL * a2);
    dispatch_source_set_timer(v4, v9, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    dispatch_resume(*(dispatch_object_t *)(a1 + 1424));
  }

  return sub_100242FAC((uint64_t)v14);
}

void sub_1003E425C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1003E427C(uint64_t a1)
{
  return sub_1003E4284(*(void *)(a1 + 32));
}

uint64_t sub_1003E4284(uint64_t a1)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1);
  BOOL v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a1, __p);
    uint64_t v3 = v7 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    char v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Stalled connection request for %{public}s",  buf,  0xCu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }

  dispatch_release(*(dispatch_object_t *)(a1 + 1424));
  *(void *)(a1 + 1424) = 0LL;
  sub_100242F54((uint64_t)v8);
  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_100895CE8);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1003E45CC;
  v5[3] = &unk_10087EB20;
  v5[4] = a1;
  sub_100424EB4((uint64_t)off_1008D60C8, v5);
  return sub_100242FAC((uint64_t)v8);
}

void sub_1003E43F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1003E4410(uint64_t a1)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_100242F28((uint64_t)v8, a1);
  BOOL v2 = *(dispatch_source_s **)(a1 + 1424);
  if (v2)
  {
    uint64_t v3 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a1, __p);
      if (v7 >= 0) {
        unint64_t v4 = __p;
      }
      else {
        unint64_t v4 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      char v10 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Stopping connection request watchdog timer for %{public}s",  buf,  0xCu);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      BOOL v2 = *(dispatch_source_s **)(a1 + 1424);
    }

    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 1424));
    *(void *)(a1 + 1424) = 0LL;
  }

  return sub_100242FAC((uint64_t)v8);
}

void sub_1003E4520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

BOOL sub_1003E453C(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  BOOL v2 = *(void *)(a1 + 1424) != 0LL;
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E4588(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 1464);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E45CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1008D60D0 != -1) {
    dispatch_once(&qword_1008D60D0, &stru_100895CE8);
  }
  return sub_100422FA0((int64x2_t *)off_1008D60C8, v1);
}

uint64_t sub_1003E461C(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 1432);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E4660(uint64_t a1, char a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 1433) = a2;
  return sub_100242FAC((uint64_t)v5);
}

uint64_t sub_1003E46A4(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 1433);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E46E8(uint64_t a1)
{
  v19[0] = 0LL;
  v19[1] = 0LL;
  sub_100242F28((uint64_t)v19, a1);
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a1, __p);
    uint64_t v3 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    __int16 v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Resetting device %{public}s ", buf, 0xCu);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }

  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 232) = 0LL;
  *(void *)(a1 + 264) = 0LL;
  *(void *)(a1 + 272) = 0LL;
  if (*(char *)(a1 + 263) < 0)
  {
    **(_BYTE **)(a1 + 240) = 0;
    *(void *)(a1 + 24_Block_object_dispose(va, 8) = 0LL;
  }

  else
  {
    *(_BYTE *)(a1 + 240) = 0;
    *(_BYTE *)(a1 + 263) = 0;
  }

  if (*(char *)(a1 + 303) < 0)
  {
    **(_BYTE **)(a1 + 280) = 0;
    *(void *)(a1 + 28_Block_object_dispose(va, 8) = 0LL;
  }

  else
  {
    *(_BYTE *)(a1 + 280) = 0;
    *(_BYTE *)(a1 + 303) = 0;
  }

  *(_OWORD *)(a1 + 312) = 0u;
  sub_10023BF24(a1 + 328, *(void **)(a1 + 336));
  *(void *)(a1 + 32_Block_object_dispose(va, 8) = a1 + 336;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  unint64_t v4 = *(_DWORD **)(a1 + 744);
  *(void *)(a1 + 752) = v4;
  unint64_t v5 = *(void *)(a1 + 760);
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v7 = v5 - (void)v4;
    uint64_t v8 = v7 >> 1;
    else {
      unint64_t v9 = v8;
    }
    char v10 = sub_10024E33C(a1 + 760, v9);
    unint64_t v11 = *(char **)(a1 + 752);
    char v12 = *(char **)(a1 + 744);
    int v14 = &v10[v13];
    _DWORD *v10 = -1;
    uint64_t v6 = v10 + 1;
    while (v11 != v12)
    {
      int v15 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *--char v10 = v15;
    }

    *(void *)(a1 + 744) = v10;
    *(void *)(a1 + 752) = v6;
    *(void *)(a1 + 760) = v14;
    if (v12) {
      operator delete(v12);
    }
  }

  else
  {
    *unint64_t v4 = -1;
    uint64_t v6 = v4 + 1;
  }

  *(void *)(a1 + 752) = v6;
  sub_1003CED44(a1);
  *(_DWORD *)(a1 + 642) = 16842752;
  *(_WORD *)(a1 + 646) = 0;
  *(_BYTE *)(a1 + 743) = 0;
  *(_BYTE *)(a1 + 1316) = 0;
  *(_DWORD *)(a1 + 1320) = 0;
  *(_BYTE *)(a1 + 1324) = 0;
  *(_DWORD *)(a1 + 132_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 1332) = 0;
  *(_DWORD *)(a1 + 1356) = 0;
  *(_BYTE *)(a1 + 1432) = 0;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_DWORD *)(a1 + 1351) = 0;
  sub_1003E19D4(a1);
  sub_1003D7C3C(a1);
  sub_1003D58C0(a1);
  *(void *)(a1 + 78_Block_object_dispose(va, 8) = 0xFFFF00000000LL;
  *(_BYTE *)(a1 + 796) = 1;
  *(_OWORD *)(a1 + 800) = xmmword_1006C2890;
  *(_OWORD *)(a1 + 820) = xmmword_1006C2880;
  *(_DWORD *)(a1 + 836) = 0;
  *(_WORD *)(a1 + 840) = 2;
  *(_BYTE *)(a1 + 842) = 0;
  *(_DWORD *)(a1 + 844) = 80;
  sub_1003DF3AC(a1);
  *(_BYTE *)(a1 + 856) = 0;
  *(_BYTE *)(a1 + 86_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 860) = 0LL;
  *(void *)(a1 + 904) = 0LL;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 88_Block_object_dispose(va, 8) = 0u;
  sub_100024344((uint64_t *)(a1 + 1176));
  *(_BYTE *)(a1 + 1434) = 0;
  *(void *)(a1 + 424) = 0LL;
  *(_DWORD *)(a1 + 1124) = -1082130432;
  *(void *)(a1 + 1136) = *(void *)(a1 + 1128);
  *(_BYTE *)(a1 + 1152) = 0;
  *(_BYTE *)(a1 + 992) = 1;
  *(_WORD *)(a1 + 994) = 0;
  *(_BYTE *)(a1 + 996) = -1;
  *(_DWORD *)(a1 + 1000) = 0;
  *(_DWORD *)(a1 + 1364) = 0;
  *(_BYTE *)(a1 + 136_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 1004) = 0;
  *(_BYTE *)(a1 + 652) = 1;
  *(_BYTE *)(a1 + 641) = 1;
  *(_BYTE *)(a1 + 1120) = 0;
  *(_BYTE *)(a1 + 960) = 0;
  *(_DWORD *)(a1 + 964) = 0;
  *(_DWORD *)(a1 + 972) = 0;
  *(_BYTE *)(a1 + 976) = 0;
  *(void *)(a1 + 980) = 0LL;
  *(_BYTE *)(a1 + 98_Block_object_dispose(va, 8) = 1;
  *(_WORD *)(a1 + 740) = 0;
  *(_BYTE *)(a1 + 742) = 0;
  *(_WORD *)(a1 + 1369) = 0;
  *(_DWORD *)(a1 + 696) = 0;
  *(void *)(a1 + 686) = 0LL;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 1156) = 0u;
  sub_1003E3EAC(a1);
  *(_BYTE *)(a1 + 1384) = 0;
  *(_BYTE *)(a1 + 1435) = 0;
  *(_WORD *)(a1 + 1372) = 0;
  *(_DWORD *)(a1 + 150_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 572) = 0;
  *(_DWORD *)(a1 + 1420) = 0;
  *(_OWORD *)(a1 + 138_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 1404) = 0u;
  if (*(char *)(a1 + 1503) < 0)
  {
    **(_BYTE **)(a1 + 1480) = 0;
    *(void *)(a1 + 148_Block_object_dispose(va, 8) = 0LL;
  }

  else
  {
    *(_BYTE *)(a1 + 1480) = 0;
    *(_BYTE *)(a1 + 1503) = 0;
  }

  return sub_100242FAC((uint64_t)v19);
}

void sub_1003E4A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003E4AB0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1120) = a2;
  return result;
}

uint64_t sub_1003E4AB8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1120);
}

uint64_t sub_1003E4AC0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)(a1 + 240);
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: %s", buf, 0xCu);
    uint64_t v2 = (os_log_s *)qword_1008F7578;
  }

  uint64_t v57 = a1;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003FE1B4((unsigned __int8 *)(a1 + 128), buf);
    if ((buf[23] & 0x80u) == 0) {
      unint64_t v4 = buf;
    }
    else {
      unint64_t v4 = *(uint8_t **)buf;
    }
    LODWORD(v58.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v58.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump:    Address: %{public}s",  (uint8_t *)&v58,  0xCu);
    uint64_t v2 = (os_log_s *)qword_1008F7578;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v5 = sub_100401AB4((int *)(a1 + 176));
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Type: %s", buf, 0xCu);
    uint64_t v2 = (os_log_s *)qword_1008F7578;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (void *)(a1 + 200);
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Default name: %s", buf, 0xCu);
    uint64_t v2 = (os_log_s *)qword_1008F7578;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(char *)(a1 + 152);
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    RSSI: %d", buf, 8u);
    uint64_t v2 = (os_log_s *)qword_1008F7578;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(a1 + 1120);
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: \tderivedFromLE: %d", buf, 8u);
    uint64_t v2 = (os_log_s *)qword_1008F7578;
  }

  if (*(_DWORD *)(a1 + 512) && os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v9 = sub_1003B3BD0((_DWORD *)(a1 + 512));
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump:    Accessory state: %{public}s",  buf,  0xCu);
    uint64_t v2 = (os_log_s *)qword_1008F7578;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    Supported services:", buf, 2u);
  }

  char v10 = *(void **)(a1 + 328);
  unint64_t v11 = (void *)(a1 + 336);
  if (v10 != (void *)(a1 + 336))
  {
    do
    {
      int v12 = *((_DWORD *)v10 + 8);
      LODWORD(v58.__r_.__value_.__l.__data_) = *((_DWORD *)v10 + 7);
      if (v12 >= 2)
      {
        uint64_t v13 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          int v14 = sub_100426610((int *)&v58);
          if (v12 == 3) {
            int v15 = "- Likely";
          }
          else {
            int v15 = "";
          }
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = v14;
          if (v12 == 2) {
            int v15 = "- Unlikely";
          }
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)&_BYTE buf[14] = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "statedump:       %{public}s %{public}s",  buf,  0x16u);
        }
      }

      std::string::size_type v16 = (void *)v10[1];
      if (v16)
      {
        do
        {
          int v17 = v16;
          std::string::size_type v16 = (void *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          int v17 = (void *)v10[2];
          BOOL v18 = *v17 == (void)v10;
          char v10 = v17;
        }

        while (!v18);
      }

      char v10 = v17;
    }

    while (v17 != v11);
  }

  unsigned int v19 = (os_log_s *)qword_1008F7578;
  if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = v57;
    if (*(_BYTE *)(v57 + 642)) {
      __int16 v21 = "Yes";
    }
    else {
      __int16 v21 = "No";
    }
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "statedump:    Supports phonebook sync: %{public}s",  buf,  0xCu);
    unsigned int v19 = (os_log_s *)qword_1008F7578;
  }

  else
  {
    uint64_t v20 = v57;
  }

  if (*(_BYTE *)(v20 + 642))
  {
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(v20 + 643)) {
        uint64_t v22 = "Yes";
      }
      else {
        uint64_t v22 = "No";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "statedump:       Sync enabled: %{public}s",  buf,  0xCu);
      unsigned int v19 = (os_log_s *)qword_1008F7578;
    }

    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(v20 + 644)) {
        uint64_t v23 = "Yes";
      }
      else {
        uint64_t v23 = "No";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "statedump:       Sync recents: %{public}s",  buf,  0xCu);
      unsigned int v19 = (os_log_s *)qword_1008F7578;
    }

    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(v20 + 645)) {
        BOOL v24 = "Yes";
      }
      else {
        BOOL v24 = "No";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "statedump:       Sync favorites: %{public}s",  buf,  0xCu);
      unsigned int v19 = (os_log_s *)qword_1008F7578;
    }

    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(v20 + 646)) {
        uint64_t v25 = "Yes";
      }
      else {
        uint64_t v25 = "No";
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "statedump:       Sync user permission: %{public}s",  buf,  0xCu);
    }

    *(void *)&__int128 v153 = 0LL;
    __int128 v151 = 0u;
    __int128 v152 = 0u;
    __int128 v149 = 0u;
    __int128 v150 = 0u;
    __int128 v147 = 0u;
    __int128 v148 = 0u;
    __int128 v145 = 0u;
    __int128 v146 = 0u;
    __int128 v143 = 0u;
    __int128 v144 = 0u;
    *(_OWORD *)std::string __p = 0u;
    __int128 v142 = 0u;
    __int128 v139 = 0u;
    __int128 v140 = 0u;
    __int128 v138 = 0u;
    memset(buf, 0, sizeof(buf));
    sub_1001FCFC8((uint64_t)buf);
    for (uint64_t i = *(unsigned int **)(v57 + 744); i != *(unsigned int **)(v57 + 752); ++i)
    {
      int v27 = (void *)std::ostream::operator<<(&buf[16], *i);
      sub_1001FD17C(v27, (uint64_t)" ", 1LL);
    }

    int v28 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str(&v58, (const std::stringbuf *)&buf[24]);
      int v29 = (v58.__r_.__value_.__s.__size_ & 0x80u) == 0
          ? &v58
          : (std::stringbuf::string_type *)v58.__r_.__value_.__r.__words[0];
      *(_DWORD *)uint64_t v156 = 136315138;
      __int16 v157 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "statedump:       Sync group ID(s): %s",  v156,  0xCu);
    }

    *(void *)&uint8_t buf[16] = v30;
    if (SHIBYTE(v142) < 0) {
      operator delete(__p[1]);
    }
    std::streambuf::~streambuf(&buf[24]);
    std::ios::~ios(&v144);
    unsigned int v19 = (os_log_s *)qword_1008F7578;
    uint64_t v20 = v57;
  }

  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(v20 + 647)) {
      std::string::size_type v31 = "Yes";
    }
    else {
      std::string::size_type v31 = "No";
    }
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v31;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "statedump: \tAllow sco for turn by turn enabled: %{public}s",  buf,  0xCu);
    unsigned int v19 = (os_log_s *)qword_1008F7578;
  }

  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    sub_10002418C(buf, off_100895D08[*(int *)(v20 + 1508)]);
    if ((buf[23] & 0x80u) == 0) {
      uint64_t v32 = buf;
    }
    else {
      uint64_t v32 = *(uint8_t **)buf;
    }
    LODWORD(v58.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v58.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "statedump: \tCarPlay type: %{public}s",  (uint8_t *)&v58,  0xCu);
    unsigned int v19 = (os_log_s *)qword_1008F7578;
    uint64_t v20 = v57;
  }

  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(v20 + 960)) {
      std::string v33 = "is";
    }
    else {
      std::string v33 = "is not";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v33;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump:  Device %s guest device", buf, 0xCu);
  }

  if (*(_BYTE *)(v20 + 960))
  {
    __int128 v34 = (os_log_s *)qword_1008F7578;
    if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
    {
      int v35 = *(_DWORD *)(v20 + 964);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "statedump:  Guest device last seen %d",  buf,  8u);
    }
  }

  sub_1003D3A94(v20);
  uint64_t v36 = sub_1002E6D7C();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v36 + 816LL))(v36, v57);
  if (*(_BYTE *)(v57 + 740))
  {
    *(_OWORD *)int v154 = 0u;
    __int128 v155 = 0u;
    __int128 v152 = 0u;
    __int128 v153 = 0u;
    __int128 v150 = 0u;
    __int128 v151 = 0u;
    __int128 v148 = 0u;
    __int128 v149 = 0u;
    __int128 v146 = 0u;
    __int128 v147 = 0u;
    __int128 v144 = 0u;
    __int128 v145 = 0u;
    __int128 v142 = 0u;
    __int128 v143 = 0u;
    __int128 v140 = 0u;
    *(_OWORD *)std::string __p = 0u;
    __int128 v138 = 0u;
    __int128 v139 = 0u;
    memset(buf, 0, sizeof(buf));
    uint64_t v38 = sub_1002E6D7C();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint8_t *, uint64_t))(*(void *)v38 + 80LL))( v38,  v57,  buf,  80LL))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_ERROR)) {
        sub_100679C00();
      }
    }

    else if (HIDWORD(v139))
    {
      uint64_t v39 = sub_1002E6E00();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v39 + 160LL))(v39))
      {
        sub_1003D01A0(v57, (uint64_t)&v58);
        if (SBYTE7(v155) < 0) {
          operator delete(v154[0]);
        }
        *(_OWORD *)int v154 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
        *(void *)&__int128 v155 = v58.__r_.__value_.__l.__cap_;
      }

      else
      {
        __int16 v40 = (os_log_s *)qword_1008F7578;
        if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v58.__r_.__value_.__l.__data_) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Identification - clearing friendly name in statedump. Release version with no profile installed.",  (uint8_t *)&v58,  2u);
        }
      }

      uint64_t v41 = sub_1002E6D7C();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 96LL))(v41, v57);
      uint64_t v42 = sub_1002E6D7C();
      (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v42 + 112LL))(v42, v57, (char *)&v145 + 8);
      uint64_t v43 = sub_1002E6D7C();
      (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v43 + 128LL))(v43, v57, (char *)&v142 + 8);
      uint64_t v44 = sub_1002E6D7C();
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)v44 + 144LL))(v44, v57, &v144);
      uint64_t v45 = sub_1002E6D7C();
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)v45 + 160LL))(v45, v57, &v147);
      uint64_t v46 = sub_1002E6D7C();
      (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v46 + 176LL))(v46, v57, (char *)&v148 + 8);
      uint64_t v47 = sub_1002E6D7C();
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)v47 + 192LL))(v47, v57, &v150);
      int v48 = (os_log_s *)qword_1008F7578;
      if (os_log_type_enabled((os_log_t)qword_1008F7578, OS_LOG_TYPE_DEFAULT))
      {
        v58.__r_.__value_.__r.__words[0] = 0x9804100202LL;
        LOWORD(v58.__r_.__value_.__r.__words[1]) = 2098;
        *(std::string::size_type *)((char *)&v58.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)buf;
        _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "Identification - raw dump {%{public}.*P}",  (uint8_t *)&v58,  0x12u);
        int v48 = (os_log_s *)qword_1008F7578;
      }

      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        if ((SBYTE7(v155) & 0x80u) == 0) {
          __int16 v49 = v154;
        }
        else {
          __int16 v49 = (void **)v154[0];
        }
        if ((SBYTE7(v142) & 0x80u) == 0) {
          __int16 v50 = __p;
        }
        else {
          __int16 v50 = (void **)__p[0];
        }
        if (v146 >= 0) {
          __int16 v51 = (char *)&v145 + 8;
        }
        else {
          __int16 v51 = (char *)*((void *)&v145 + 1);
        }
        int v52 = (char *)*((void *)&v142 + 1);
        if (v143 >= 0) {
          int v52 = (char *)&v142 + 8;
        }
        if ((SBYTE7(v145) & 0x80u) == 0) {
          int v53 = &v144;
        }
        else {
          int v53 = (__int128 *)v144;
        }
        if ((SBYTE7(v148) & 0x80u) == 0) {
          int v54 = &v147;
        }
        else {
          int v54 = (__int128 *)v147;
        }
        if (v149 >= 0) {
          int v55 = (char *)&v148 + 8;
        }
        else {
          int v55 = (char *)*((void *)&v148 + 1);
        }
        int v56 = (__int128 *)v150;
        if ((SBYTE7(v151) & 0x80u) == 0) {
          int v56 = &v150;
        }
        *(std::string::size_type *)((char *)&v58.__r_.__value_.__r.__words[1] + 2) = v57 + 700;
        HIDWORD(v58.__r_.__value_.__r.__words[2]) = 3;
        int v60 = buf;
        int v62 = v49;
        int v64 = *(unsigned __int16 *)&buf[4];
        int v66 = buf[8];
        int v68 = *(unsigned __int16 *)&buf[6];
        uint64_t v72 = &v140;
        WORD1(v58.__r_.__value_.__r.__words[2]) = 1042;
        __int16 v69 = 1042;
        __int16 v73 = 1042;
        int v70 = 8;
        int v74 = 8;
        LOWORD(v58.__r_.__value_.__r.__words[1]) = 2098;
        __int16 v59 = 2098;
        __int16 v71 = 2098;
        __int16 v75 = 2098;
        size_t v76 = (char *)&v140 + 8;
        int v92 = *(unsigned __int16 *)&buf[22];
        int v96 = *(unsigned __int16 *)&buf[26];
        int v100 = *(unsigned __int16 *)&buf[30];
        int v104 = WORD1(v138);
        int v108 = WORD3(v138);
        int v112 = HIDWORD(v138);
        int v116 = DWORD1(v139);
        int v120 = buf[3];
        int v122 = v50;
        uint64_t v124 = v51;
        BOOL v128 = v53;
        uint64_t v130 = v54;
        unint64_t v132 = v55;
        int v136 = BYTE8(v155);
        int v78 = HIDWORD(v139);
        int v80 = *(unsigned __int16 *)&buf[10];
        int v82 = *(unsigned __int16 *)&buf[12];
        int v84 = *(unsigned __int16 *)&buf[14];
        int v86 = *(unsigned __int16 *)&buf[16];
        int v88 = *(unsigned __int16 *)&buf[18];
        int v90 = *(unsigned __int16 *)&buf[20];
        int v94 = *(unsigned __int16 *)&buf[24];
        int v98 = *(unsigned __int16 *)&buf[28];
        int v102 = (unsigned __int16)v138;
        int v106 = WORD2(v138);
        int v110 = DWORD2(v138);
        int v114 = v139;
        int v118 = DWORD2(v139);
        int v126 = v52;
        __int16 v61 = 2082;
        __int16 v121 = 2082;
        __int16 v123 = 2082;
        __int16 v125 = 2082;
        __int16 v127 = 2082;
        __int16 v129 = 2082;
        __int16 v131 = 2082;
        __int16 v133 = 2082;
        char v134 = v56;
        __int16 v63 = 1024;
        __int16 v65 = 1024;
        __int16 v67 = 1024;
        __int16 v77 = 1024;
        __int16 v79 = 1024;
        __int16 v81 = 1024;
        __int16 v83 = 1024;
        __int16 v85 = 1024;
        __int16 v87 = 1024;
        __int16 v89 = 1024;
        __int16 v91 = 1024;
        __int16 v93 = 1024;
        __int16 v95 = 1024;
        __int16 v97 = 1024;
        __int16 v99 = 1024;
        __int16 v101 = 1024;
        __int16 v103 = 1024;
        __int16 v105 = 1024;
        __int16 v107 = 1024;
        __int16 v109 = 1024;
        __int16 v111 = 1024;
        __int16 v113 = 1024;
        __int16 v115 = 1024;
        __int16 v117 = 1024;
        __int16 v119 = 1024;
        __int16 v135 = 1024;
        v58.__r_.__value_.__r.__words[0] = 0x1404122A02LL;
        _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "statedump: Identification - metric dump {%{public}.20P, %{public}.3P, %{public}s, 0x%x, 0x%x, 0x%x, %{public}. 8P, %{public}.8P, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x %x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, %d, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %d}",  (uint8_t *)&v58,  0x12Eu);
      }
    }

    return sub_100328B0C((uint64_t)buf);
  }

  return result;
}

void sub_1003E5964( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

uint64_t sub_1003E5998(uint64_t a1)
{
  char v4 = 0;
  sub_100242CA4(&v4);
  uint64_t v2 = sub_10011257C(a1 + 128) ^ 1;
  sub_100242CD8(&v4);
  return v2;
}

void sub_1003E59E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1003E59F4(uint64_t result, int a2)
{
  if (a2)
  {
    __int16 v2 = a2;
    uint64_t v3 = result;
    if (*(unsigned __int16 *)(result + 1504) != a2)
    {
      v8[0] = 0LL;
      v8[1] = 0LL;
      uint64_t v4 = sub_100242F28((uint64_t)v8, result);
      *(_WORD *)(v3 + 1504) = v2;
      sub_100242F54(v4);
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_100895B68);
      }
      sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, v3, 19);
      uint64_t v5 = sub_100404EB8();
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      void v6[2] = sub_1003E5ADC;
      v6[3] = &unk_1008878D8;
      void v6[4] = v3;
      __int16 v7 = v2;
      sub_100405384(v5, v6);
      return sub_100242FAC((uint64_t)v8);
    }
  }

  return result;
}

void sub_1003E5AC8(_Unwind_Exception *a1)
{
}

uint64_t sub_1003E5ADC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = sub_1002E8EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v3 + 72LL))( v3,  v2,  *(unsigned __int16 *)(a1 + 40),  1LL);
}

uint64_t sub_1003E5B14(uint64_t a1)
{
  uint64_t result = _os_feature_enabled_impl("BluetoothFeatures", "HandsfreeAoS");
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 1069)) {
      return (*(unsigned __int8 *)(a1 + 1102) >> 5) & 1;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1003E5B60(uint64_t a1, int a2)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  uint64_t v4 = sub_100242F28((uint64_t)v9, a1);
  if (*(unsigned __int8 *)(a1 + 1371) != a2)
  {
    *(_BYTE *)(a1 + 1371) = a2;
    sub_100242F54(v4);
    uint64_t v5 = sub_100404EB8();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_1003E5C08;
    v7[3] = &unk_1008800D8;
    v7[4] = a1;
    char v8 = a2;
    sub_100405384(v5, v7);
  }

  return sub_100242FAC((uint64_t)v9);
}

void sub_1003E5BF4(_Unwind_Exception *a1)
{
}

uint64_t sub_1003E5C08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895B68);
  }
  sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, v2, 21);
  uint64_t v3 = sub_1002E8EE8();
  return (*(uint64_t (**)(uint64_t, BOOL))(*(void *)v3 + 80LL))(v3, (*(_BYTE *)(a1 + 40) & 0xFE) == 2);
}

uint64_t sub_1003E5C80(uint64_t a1, int a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  if (*(unsigned __int8 *)(a1 + 1373) != a2)
  {
    *(_BYTE *)(a1 + 1373) = a2;
    sub_100242F54((uint64_t)v5);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100895B68);
    }
    sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 20);
  }

  return sub_100242FAC((uint64_t)v5);
}

void sub_1003E5D14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003E5D28(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 1512);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E5D6C(uint64_t a1, int a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 1512) = a2;
  sub_100242F54((uint64_t)v5);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895B68);
  }
  sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 23);
  return sub_100242FAC((uint64_t)v5);
}

void sub_1003E5DF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003E5E08(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_100242F28((uint64_t)v4, a1);
  uint64_t v2 = *(unsigned int *)(a1 + 1516);
  sub_100242FAC((uint64_t)v4);
  return v2;
}

uint64_t sub_1003E5E4C(uint64_t a1, int a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 1516) = a2;
  sub_100242F54((uint64_t)v5);
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100895B68);
  }
  sub_1003FFDA4((os_unfair_lock_s *)off_1008D5F48, a1, 22);
  return sub_100242FAC((uint64_t)v5);
}

void sub_1003E5ED4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *sub_1003E5EE8(_DWORD *result, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  *a2 = result[259];
  *a3 = result[260];
  *a4 = result[261];
  *a5 = result[262];
  return result;
}

__n128 sub_1003E5F0C(uint64_t a1)
{
  *(_DWORD *)(a1 + 1064) = *(_DWORD *)(a1 + 1100);
  __n128 result = *(__n128 *)(a1 + 1068);
  __int128 v2 = *(_OWORD *)(a1 + 1084);
  *(__n128 *)(a1 + 10sub_100242FAC(v1 - 32) = result;
  *(_OWORD *)(a1 + 104_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_1003E5F28(void ***a1)
{
  uint64_t v1 = *a1;
  __int128 v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 168LL;
        sub_1003E5FAC((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_1003E5FAC(uint64_t a1, uint64_t a2)
{
  return nullsub_63(a2 + 1, a2);
}

void sub_1003E5FFC(id a1)
{
  uint64_t v1 = operator new(0x138uLL);
  sub_1003FE3E0((uint64_t)v1);
  off_1008D5F48 = v1;
}

void sub_1003E602C(_Unwind_Exception *a1)
{
}

void sub_1003E6040(id a1)
{
  uint64_t v1 = (char *)operator new(0x200uLL);
  *(void *)uint64_t v1 = off_100898F60;
  *((void *)v1 + 1) = &off_100898FF0;
  *((void *)v1 + 2) = off_100899008;
  *((void *)v1 + 3) = &off_100899060;
  *((void *)v1 + 4) = &off_100899078;
  sub_100242DC4(v1 + 40);
  *((void *)v1 + 14) = 0LL;
  *((_DWORD *)v1 + 30) = 0;
  *((void *)v1 + 17) = 0LL;
  *((void *)v1 + 1_Block_object_dispose(va, 8) = 0LL;
  *((void *)v1 + 16) = 0LL;
  *(_OWORD *)(v1 + 155) = 0u;
  *(_OWORD *)(v1 + 171) = 0u;
  *(_OWORD *)(v1 + 187) = 0u;
  *(_WORD *)(v1 + 203) = 1;
  *((void *)v1 + 26) = 0LL;
  *((_WORD *)v1 + 10_Block_object_dispose(va, 8) = 256;
  *((void *)v1 + 29) = 0LL;
  *((void *)v1 + 2_Block_object_dispose(va, 8) = v1 + 232;
  *((void *)v1 + sub_100242FAC(v1 - 32) = 0LL;
  *((void *)v1 + 33) = 0LL;
  *((void *)v1 + 30) = 0LL;
  *((void *)v1 + 31) = v1 + 256;
  v1[272] = 0;
  *((_DWORD *)v1 + 69) = 0;
  v1[280] = 0;
  *((_WORD *)v1 + 189) = 0;
  *(void *)(v1 + 313) = 0LL;
  *(_OWORD *)(v1 + 300) = 0u;
  *(_OWORD *)(v1 + 284) = 0u;
  *(_OWORD *)(v1 + 32_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  v1[376] = 0;
  *((void *)v1 + 51) = v1 + 416;
  *((void *)v1 + 52) = 0LL;
  *((void *)v1 + 55) = 0LL;
  *((void *)v1 + 56) = 0LL;
  *((void *)v1 + 53) = 0LL;
  *((void *)v1 + 54) = v1 + 440;
  *((void *)v1 + 57) = v1 + 464;
  *((void *)v1 + 5_Block_object_dispose(va, 8) = 0LL;
  *((void *)v1 + 59) = 0LL;
  *((void *)v1 + 60) = @"XZ";
  *((void *)v1 + 62) = 0LL;
  *((_DWORD *)v1 + 126) = 0;
  off_1008D6190 = v1;
}

void sub_1003E6148(_Unwind_Exception *a1)
{
}

uint64_t **sub_1003E615C(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    __int16 v7 = result[1];
    *__n128 result = (uint64_t *)(result + 1);
    void v7[2] = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    if (v6[1]) {
      char v8 = (uint64_t *)v6[1];
    }
    else {
      char v8 = v6;
    }
    int v14 = result;
    int v15 = v8;
    std::string::size_type v16 = v8;
    if (v8)
    {
      int v15 = sub_10026145C((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = a2;
        do
        {
          *(uint64_t *)((char *)v8 + 2_Block_object_dispose(va, 8) = *(void *)((char *)v9 + 28);
          sub_1003E62BC(v5, (uint64_t)v8);
          char v8 = v15;
          std::string::size_type v16 = v15;
          if (v15) {
            int v15 = sub_10026145C((uint64_t)v15);
          }
          char v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              char v10 = (void *)*v10;
            }

            while (v10);
          }

          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              unint64_t v9 = a2;
            }

            while (!v11);
          }

          if (!v8) {
            break;
          }
          unint64_t v9 = a2;
        }

        while (a2 != a3);
      }
    }

    __n128 result = (uint64_t **)sub_1002614B0((uint64_t)&v14);
  }

  if (a2 != a3)
  {
    do
    {
      __n128 result = (uint64_t **)sub_1003E6328(v5, (void *)((char *)a2 + 28));
      int v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          int v12 = (void *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }

        while (!v11);
      }

      a2 = v13;
    }

    while (v13 != a3);
  }

  return result;
}

void sub_1003E62A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1003E62BC(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }

      uint64_t v4 = (uint64_t *)v4[1];
    }

    while (v4);
    uint64_t v5 = v3 + 1;
  }

  else
  {
    uint64_t v5 = a1 + 1;
  }

uint64_t *sub_1003E6328(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x28uLL);
  uint64_t v5 = *a2;
  *(uint64_t *)((char *)v4 + 2_Block_object_dispose(va, 8) = *a2;
  uint64_t v6 = a1 + 1;
  __int16 v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        __int16 v7 = (uint64_t *)*v7;
        char v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }

      __int16 v7 = (uint64_t *)v7[1];
    }

    while (v7);
    char v8 = v6 + 1;
  }

  else
  {
    char v8 = a1 + 1;
  }

void sub_1003E63B4(id a1)
{
  uint64_t v1 = operator new(0x148uLL);
  sub_100493598();
  off_1008D9728 = v1;
}

void sub_1003E63E4(_Unwind_Exception *a1)
{
}

void sub_1003E63F8(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  int v8 = a1 + 16;
  unint64_t v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_1002E5588((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0x5555555555555556LL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_100240688((void *)a1, v11);
    int v12 = sub_1002406D4(v8, (__int128 *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    sub_1003E6568(__str, v13, v9);
    int v12 = sub_1002406D4(v8, (__int128 *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + _Block_object_dispose(va, 8) = v12;
    return;
  }

  sub_1003E6568(__str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 24LL;
    }

    while (v16 != v15);
  }

  *(void *)(a1 + _Block_object_dispose(va, 8) = v15;
}

void sub_1003E6558(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(va, 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1003E6560(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(va, 8) = v2;
  _Unwind_Resume(a1);
}

std::string *sub_1003E6568(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }

  return (std::string *)v4;
}

void *sub_1003E65C4(void *result, char *__src, char *a3, unint64_t a4)
{
  __int16 v7 = result;
  unint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0LL;
      void *v7 = 0LL;
      v7[1] = 0LL;
      void v7[2] = 0LL;
    }

    if ((a4 & 0x8000000000000000LL) != 0) {
      abort();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    __n128 result = sub_10023D39C(v7, v11);
    unint64_t v9 = (char *)v7[1];
    goto LABEL_17;
  }

  int v12 = (_BYTE *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      __n128 result = memmove(v9, __src, v16);
    }
    uint64_t v15 = &v9[v16];
    goto LABEL_20;
  }

  uint64_t v14 = &__src[v13];
  if (v12 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v13);
    unint64_t v9 = (char *)v7[1];
  }

  if (a3 != v14) {
    __n128 result = memmove(v9, v14, a3 - v14);
  }
  uint64_t v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

void sub_1003E66CC(id a1)
{
  uint64_t v1 = operator new(0x198uLL);
  sub_100534AB0();
  off_1008D67B0 = v1;
}

void sub_1003E66FC(_Unwind_Exception *a1)
{
}

void sub_1003E6710(id a1)
{
  uint64_t v1 = operator new(0x98uLL);
  sub_1003C97E4((uint64_t)v1);
  off_1008D67E0 = v1;
}

void sub_1003E6740(_Unwind_Exception *a1)
{
}

void sub_1003E6754(id a1)
{
  uint64_t v1 = operator new(0x88uLL);
  v1[2] = 0LL;
  void *v1 = @"com.apple.MobileAsset.MobileBluetoothAssets";
  v1[1] = v1 + 2;
  v1[3] = 0LL;
  *((_DWORD *)v1 + _Block_object_dispose(va, 8) = 0;
  v1[5] = 0LL;
  v1[6] = 0LL;
  v1[7] = 0LL;
  sub_100242DC4(v1 + 8);
  *((_BYTE *)v1 + 12_Block_object_dispose(va, 8) = 0;
  qword_1008D92B8 = (uint64_t)v1;
}

void sub_1003E67C4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 4_Block_object_dispose(va, 8) = v6;
    operator delete(v6);
  }

  sub_1002948EC(v2, *(void **)(v1 + 16));

  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void sub_1003E6800(id a1)
{
  uint64_t v1 = operator new(0x118uLL);
  sub_1003ADFF0((uint64_t)v1);
  off_1008D5F38 = v1;
}

void sub_1003E6830(_Unwind_Exception *a1)
{
}

uint64_t *sub_1003E6844(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_1003E6898(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1003E6880(_Unwind_Exception *a1)
{
}

uint64_t *sub_1003E6898(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = sub_1003E691C(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      __int16 v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          __int16 v7 = *(unsigned int **)v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          unint64_t v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }

        while (!v9);
      }

      uint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_1003E691C(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v10 = 0LL;
  size_t v11 = 0LL;
  uint64_t v6 = sub_1003E69A4(a1, a2, &v11, &v10, a3);
  __int16 v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    __int16 v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 2_Block_object_dispose(va, 8) = *a4;
    sub_100029630(a1, (uint64_t)v11, v8, v7);
  }

  return v7;
}

uint64_t *sub_1003E69A4(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }

      while (v9);
    }

    else
    {
      size_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        size_t v13 = v10;
      }

      while (v14);
    }

    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }

        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }

      while (v16);
    }

    else
    {
      int v17 = a1 + 1;
    }

uint64_t sub_1003E6B4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186LL) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xCF3CF3CF3CF3CF3DLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0xC30C30C30C30C3LL) {
    unint64_t v10 = 0x186186186186186LL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_1003E6E2C(v7, v10);
  }
  else {
    uint64_t v11 = 0LL;
  }
  BOOL v14 = v11;
  unsigned int v15 = &v11[168 * v3];
  int v17 = &v11[168 * v10];
  sub_1003E6C60((uint64_t)v15, a2);
  uint64_t v16 = v15 + 168;
  sub_1003E6DB8(a1, &v14);
  uint64_t v12 = a1[1];
  sub_1003E6F88(&v14);
  return v12;
}

void sub_1003E6C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1003E6C60(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  sub_100532E50((__n128 *)(a1 + 1), (__n128 *)(a2 + 1));
  __int16 v4 = *(_WORD *)(a2 + 18);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_WORD *)(a1 + 1_Block_object_dispose(va, 8) = v4;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_100024238((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(void *)(a2 + 32));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
  }

  int v6 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = v6;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_100024238((_BYTE *)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64));
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v7;
  }

  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  uint64_t v8 = (_BYTE *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    sub_100024238(v8, *(void **)(a2 + 88), *(void *)(a2 + 96));
  }

  else
  {
    __int128 v9 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)uint64_t v8 = v9;
  }

  __int128 v10 = *(_OWORD *)(a2 + 112);
  __int128 v11 = *(_OWORD *)(a2 + 128);
  __int128 v12 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v11;
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 112) = v10;
  return a1;
}

void sub_1003E6D74(_Unwind_Exception *a1, uint64_t a2)
{
}

uint64_t sub_1003E6DB8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1003E6E74((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1003E6E2C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x186186186186187LL) {
    sub_100008BD4();
  }
  return operator new(168 * a2);
}

uint64_t sub_1003E6E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0LL;
    do
    {
      uint64_t v12 = a7 + v11;
      uint64_t v13 = a3 + v11;
      *(_BYTE *)(a7 + v11 - 16_Block_object_dispose(va, 8) = *(_BYTE *)(a3 + v11 - 168);
      sub_100532E50((__n128 *)(a7 + v11 - 167), (__n128 *)(a3 + v11 - 167));
      __int16 v14 = *(_WORD *)(a3 + v11 - 150);
      *(_BYTE *)(v12 - 14_Block_object_dispose(va, 8) = *(_BYTE *)(a3 + v11 - 148);
      *(_WORD *)(v12 - 150) = v14;
      __int128 v15 = *(_OWORD *)(a3 + v11 - 144);
      *(void *)(v12 - 12_Block_object_dispose(va, 8) = *(void *)(a3 + v11 - 128);
      *(_OWORD *)(v12 - 144) = v15;
      *(void *)(v13 - 144) = 0LL;
      *(void *)(v13 - 136) = 0LL;
      *(void *)(v13 - 12_Block_object_dispose(va, 8) = 0LL;
      int v16 = *(_DWORD *)(a3 + v11 - 120);
      *(_BYTE *)(v12 - 116) = *(_BYTE *)(a3 + v11 - 116);
      *(_DWORD *)(v12 - 120) = v16;
      __int128 v17 = *(_OWORD *)(a3 + v11 - 112);
      *(void *)(v12 - 96) = *(void *)(a3 + v11 - 96);
      *(_OWORD *)(v12 - 112) = v17;
      *(void *)(v13 - 104) = 0LL;
      *(void *)(v13 - 96) = 0LL;
      *(void *)(v13 - 112) = 0LL;
      *(_BYTE *)(v12 - 8_Block_object_dispose(va, 8) = *(_BYTE *)(a3 + v11 - 88);
      __int128 v18 = *(_OWORD *)(a3 + v11 - 80);
      *(void *)(v12 - 64) = *(void *)(a3 + v11 - 64);
      *(_OWORD *)(v12 - 80) = v18;
      *(void *)(v13 - 72) = 0LL;
      *(void *)(v13 - 64) = 0LL;
      *(void *)(v13 - 80) = 0LL;
      __int128 v19 = *(_OWORD *)(a3 + v11 - 56);
      __int128 v20 = *(_OWORD *)(a3 + v11 - 40);
      __int128 v21 = *(_OWORD *)(a3 + v11 - 24);
      *(_DWORD *)(v12 - 9) = *(_DWORD *)(a3 + v11 - 9);
      *(_OWORD *)(v12 - 24) = v21;
      *(_OWORD *)(v12 - 40) = v20;
      *(_OWORD *)(v12 - 56) = v19;
      v11 -= 168LL;
    }

    while (a3 + v11 != a5);
  }

  return a6;
}

void **sub_1003E6F88(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_1003E6FB8(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 168;
      uint64_t result = sub_1003E5FAC(v4, v1 - 168);
      uint64_t v1 = *(void *)(v3 + 16);
    }

    while (v1 != v2);
  }

  return result;
}

void sub_1003E6FFC(id a1)
{
  uint64_t v1 = operator new(0x58uLL);
  sub_10041A094(v1);
  qword_1008D95F8 = (uint64_t)v1;
}

void sub_1003E702C(_Unwind_Exception *a1)
{
}

void sub_1003E7040(id a1)
{
  uint64_t v1 = operator new(0x2C8uLL);
  sub_100213DA8();
  off_1008D60D8 = v1;
}

void sub_1003E7070(_Unwind_Exception *a1)
{
}

void sub_1003E7084(id a1)
{
  uint64_t v1 = operator new(0x230uLL);
  sub_10042BC28();
  off_1008D60A8 = v1;
}

void sub_1003E70B4(_Unwind_Exception *a1)
{
}

void sub_1003E70C8(id a1)
{
  uint64_t v1 = operator new(0x618uLL);
  sub_10058B0A4();
  off_1008D5F08 = v1;
}

void sub_1003E70F8(_Unwind_Exception *a1)
{
}

void sub_1003E710C(id a1)
{
  uint64_t v1 = operator new(0x260uLL);
  sub_1005285C8((uint64_t)v1);
  off_1008D67A0 = v1;
}

void sub_1003E713C(_Unwind_Exception *a1)
{
}

void sub_1003E7150(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int128 v34 = (char *)sub_100008BA0(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      char v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_1003E7418( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1003E7464(id a1)
{
  uint64_t v1 = operator new(0x2C0uLL);
  sub_1004219F0();
  off_1008D60C8 = v1;
}

void sub_1003E7494(_Unwind_Exception *a1)
{
}

  ;
}

void sub_1003E7820( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_1003E787C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _handleCTCellularTransmitStateChangedNotification:a2];
}

void sub_1003E78E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E7944( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___Communicator;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1003E79D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E7A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E8054( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, void *__p, uint64_t a39, int a40, __int16 a41, char a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, char *a49)
{
  a49 = &a32;
  sub_1002077E0((void ***)&a49);
  a49 = &a35;
  sub_1002077E0((void ***)&a49);

  _Unwind_Resume(a1);
}

uint64_t sub_1003E81A0(uint64_t a1)
{
  return a1;
}

void sub_1003E8218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E8444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E8714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E8858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E89D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E8B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E8C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E8D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E8E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E90A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1003E90CC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) delegate];
  if (result)
  {
    BOOL v3 = (os_log_s *)qword_1008F75E8;
    if (os_log_type_enabled((os_log_t)qword_1008F75E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Received 'call status changed' notification",  v5,  2u);
    }

    [*(id *)(a1 + 32) _updateCalls];
    unint64_t v4 = (uint64_t (***)(id, void))[*(id *)(a1 + 32) delegate];
    return (id)(**v4)(v4, *(void *)(a1 + 40));
  }

  return result;
}

void sub_1003E9238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E947C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E9658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E978C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E996C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E9BA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1003E9DA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003EA12C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003EA39C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003EA598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003EA778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003EA8AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  a16 = &a22;
  sub_1002077E0((void ***)&a16);
  _Unwind_Resume(a1);
}

void sub_1003EAA98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_1003EAB6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003EAE48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a22 = v23 - 96;
  sub_1002077E0((void ***)&a22);
  _Unwind_Resume(a1);
}

void sub_1003EB000( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15, void **a16)
{
  a16 = (void **)&a12;
  sub_1002077E0(&a16);
  _Unwind_Resume(a1);
}

void sub_1003EB0B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_1002077E0(&a12);
  _Unwind_Resume(a1);
}

void sub_1003EB194( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 24) = &a10;
  sub_1002077E0((void ***)(v13 - 24));
  a10 = (void **)&a13;
  sub_1002077E0(&a10);
  _Unwind_Resume(a1);
}

void sub_1003EB3C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  a13 = (void **)&a15;
  sub_1002077E0(&a13);

  _Unwind_Resume(a1);
}

void sub_1003EB4D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 24) = &a10;
  sub_1002077E0((void ***)(v13 - 24));
  a10 = (void **)&a13;
  sub_1002077E0(&a10);
  _Unwind_Resume(a1);
}

void sub_1003EB684( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003EB800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003EB938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003EBA18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _Unwind_Resume(a1);
}

void sub_1003EBC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003EBD60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003EBE78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1003EC038(void *a1, uint64_t a2)
{
  *a1 = off_100895D58;
  a1[1] = 0LL;
  BOOL v3 = -[Communicator initWithDelegate:](objc_alloc(&OBJC_CLASS___Communicator), "initWithDelegate:", a2);
  unint64_t v4 = (void *)a1[1];
  a1[1] = v3;

  return a1;
}

void sub_1003EC088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003EC0A0(uint64_t a1)
{
  *(void *)a1 = off_100895D58;
  [*(id *)(a1 + 8) invalidate];
  unint64_t v2 = *(void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;

  return a1;
}

void sub_1003EC0E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003EC100(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1003EC0A0(a1);
  operator delete(v1);
}

id sub_1003EC114(uint64_t a1)
{
  return [*(id *)(a1 + 8) supports3WC];
}

id sub_1003EC11C(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100024238(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
  }

  id v4 = [v3 answerIncomingCall:__p];
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }

  return v4;
}

void sub_1003EC19C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

id sub_1003EC1C4(uint64_t a1)
{
  return [*(id *)(a1 + 8) rejectIncomingCall];
}

id sub_1003EC1CC(uint64_t a1)
{
  return [*(id *)(a1 + 8) hangupActiveCall];
}

id sub_1003EC1D4(uint64_t a1)
{
  return [*(id *)(a1 + 8) releaseHeldCalls];
}

id sub_1003EC1DC(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100024238(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
  }

  id v4 = [v3 releaseActiveCalls:__p];
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }

  return v4;
}

void sub_1003EC25C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

id sub_1003EC284(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100024238(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
  }

  id v4 = [v3 holdActiveCalls:__p];
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }

  return v4;
}

void sub_1003EC304( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

id sub_1003EC32C(uint64_t a1)
{
  return [*(id *)(a1 + 8) addHeldCall];
}

id sub_1003EC334(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) releaseCall:a2];
}

id sub_1003EC340(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) privateConference:a2];
}

id sub_1003EC34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = *(id *)(a1 + 8);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100024238(__p, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v9 = *(void *)(a3 + 16);
  }

  id v6 = [v5 dialNumber:a2 uid:__p];
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }

  return v6;
}

void sub_1003EC3DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

id sub_1003EC404(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100024238(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
  }

  id v4 = [v3 redialLastNumberWithUid:__p];
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }

  return v4;
}

void sub_1003EC484( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

id sub_1003EC4AC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) sendDTMFTone:a2];
}

id sub_1003EC4B8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) enableEchoCancellationNoiseReduction:a2];
}

id sub_1003EC4C4(uint64_t a1)
{
  return [*(id *)(a1 + 8) addVirtualCall];
}

id sub_1003EC4CC(uint64_t a1)
{
  return [*(id *)(a1 + 8) removeVirtualCall];
}

id sub_1003EC4D4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) getCurrentCalls:a2];
}

id sub_1003EC4E0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) getCurrentExpanseCalls:a2];
}

id sub_1003EC4EC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = (os_log_s *)qword_1008F75E8;
  if (os_log_type_enabled((os_log_t)qword_1008F75E8, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 67109120;
    v9[1] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Communicator isScreening: %d",  (uint8_t *)v9,  8u);
  }

  id v7 = [*(id *)(a1 + 8) setScreeningCall:v5 isScreening:a3];

  return v7;
}

void sub_1003EC5BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1003EC5D4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) getCurrentScreeningCalls:a2];
}

id sub_1003EC5E0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) getOperatorStatus:a2];
}

id sub_1003EC5EC(uint64_t a1)
{
  return (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) getRegistrationStatus]);
}

id sub_1003EC608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 8) getSignalStrength:a2 mode:a3];
}

id sub_1003EC618(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) getSubscriberNumber:a2];
}

id sub_1003EC624(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) getMobileSubscriberIdentity:a2];
}

id sub_1003EC630(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) getMobileEquipmentIdentity:a2];
}

id sub_1003EC63C(uint64_t a1, uint64_t *a2)
{
  id v3 = *(id *)(a1 + 8);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 getCountryCodeForIdentifier:v4]);

  return v5;
}

void sub_1003EC6B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1003EC6CC(uint64_t a1)
{
  return (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) getCountryCode]);
}

id sub_1003EC6E8(uint64_t a1)
{
  return (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) getCountryCodeIdentifer]);
}

id sub_1003EC704(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 8) getTransmitState:a2];
}

uint64_t sub_1003EC710(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_1003EC71C(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 16) = 0;
  sub_10054A050(a1 + 24);
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 96) = 0LL;

  return a1;
}

void sub_1003EC76C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003EC784(uint64_t a1)
{
  *(void *)a1 = off_100895E70;
  *(void *)(a1 + _Block_object_dispose(va, 8) = off_100895F30;
  *(void *)(a1 + 16) = off_100895F80;
  *(void *)(a1 + 24) = off_100895FB0;
  *(void *)(a1 + sub_100242FAC(v1 - 32) = off_100895FD0;
  *(void *)(a1 + 40) = off_100896010;
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 0;
  sub_100242DC4(a1 + 104);
  *(_DWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + sub_100242FAC(v58 - 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_WORD *)(a1 + 244) = 1;
  *(_OWORD *)(a1 + 49) = 0u;
  *(_OWORD *)(a1 + 65) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(void *)(a1 + 95) = 0LL;
  return a1;
}

uint64_t sub_1003EC800(uint64_t a1)
{
  *(void *)a1 = off_100895E70;
  *(void *)(a1 + _Block_object_dispose(va, 8) = off_100895F30;
  *(void *)(a1 + 16) = off_100895F80;
  *(void *)(a1 + 24) = off_100895FB0;
  *(void *)(a1 + sub_100242FAC(v1 - 32) = off_100895FD0;
  *(void *)(a1 + 40) = off_100896010;

  unint64_t v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(void *)(a1 + 184) = v2;
    operator delete(v2);
  }

  sub_100242E28(a1 + 104);
  return a1;
}

uint64_t sub_1003EC87C(uint64_t a1)
{
  return sub_1003EC800(a1 - 32);
}

void sub_1003EC884(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1003EC800(a1);
  operator delete(v1);
}

void sub_1003EC898(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1003EC800(a1 - 32);
  operator delete(v1);
}

void sub_1003EC8B0(uint64_t a1)
{
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = sub_1002E9258();
  dispatch_queue_attr_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v3 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v2);
  dispatch_queue_t v4 = dispatch_queue_create("com.apple.bluetooth.mp.serial", v3);
  id v5 = *(void **)(a1 + 208);
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = v4;

  sub_1003ECA4C(a1);
  if (qword_1008D60B0 != -1) {
    dispatch_once(&qword_1008D60B0, &stru_1008961D8);
  }
  sub_1001FC5E4((uint64_t)off_1008D60A8 + 80, a1 + 16);
  if ((sub_1003ECFD0() & 1) != 0)
  {
    uint64_t v6 = sub_1002E8D54();
    sub_1003FDB08(v6 + 328, a1 + 24);
    sub_1003ED05C(a1);
    if (qword_1008D67A8 != -1) {
      dispatch_once(&qword_1008D67A8, &stru_1008961F8);
    }
    sub_10052AB64(off_1008D67A0, a1 + 32);
    (***(void (****)(void, uint64_t))(a1 + 168))(*(void *)(a1 + 168), a1 + 8);
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100896218);
    }
    sub_10000876C((uint64_t)off_1008D5F48 + 240, a1 + 40);
  }

  else
  {
    id v7 = (os_log_s *)qword_1008F7600;
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Magic Pairing cannot initialize, not supported on this platform.",  v8,  2u);
    }
  }

uint64_t sub_1003ECA4C(uint64_t a1)
{
  v48[0] = 0LL;
  v48[1] = 0LL;
  sub_100242F28((uint64_t)v48, a1 + 104);
  uint64_t v2 = sub_1002E6C74();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 136LL))(v2, a1 + 49, a1 + 65);
  dispatch_queue_t v4 = (os_log_s *)qword_1008F7600;
  if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = "not available";
    if (!v3) {
      id v5 = "available";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Cloud master keys are %s in storage",  (uint8_t *)&buf,  0xCu);
  }

  __int128 buf = 0uLL;
  uint64_t v58 = 0LL;
  uint64_t v6 = (uint64_t (***)(void, __int128 *))sub_1002E6C74();
  int v7 = (**v6)(v6, &buf);
  uint64_t v8 = (os_log_s *)qword_1008F7600;
  if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v49 = 67109376;
    *(_DWORD *)&v49[4] = v7;
    *(_WORD *)&v49[8] = 2048;
    *(void *)&v49[10] = (uint64_t)(*((void *)&buf + 1) - buf) >> 3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "read device list result %d, pairedDev list std::string::size_type size = %lu",  v49,  0x12u);
  }

  for (uint64_t i = (unsigned __int8 **)buf; i != *((unsigned __int8 ***)&buf + 1); ++i)
  {
    uint64_t v10 = *i;
    if ((*i)[128])
    {
LABEL_9:
      __int128 v56 = 0uLL;
      __int128 v55 = 0uLL;
      __int128 v54 = 0uLL;
      __int128 v53 = 0uLL;
      unsigned __int8 v45 = 0;
      int v44 = 0;
      uint64_t v11 = sub_1002E6C74();
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *, void, __int128 *))(*(void *)v11 + 96LL))( v11,  v10,  0LL,  &v54))
      {
        uint64_t v12 = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          sub_1003CF00C((uint64_t)v10, v49);
          uint64_t v38 = v49;
          if (v50 < 0) {
            uint64_t v38 = *(_BYTE **)v49;
          }
          *(_DWORD *)__int16 v51 = 136446210;
          uint64_t v52 = v38;
          _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Unable to read Magic Keys for %{public}s",  v51,  0xCu);
          if (v50 < 0) {
            operator delete(*(void **)v49);
          }
        }
      }

      else
      {
        uint64_t v16 = sub_1002E6C74();
        (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, __int128 *))(*(void *)v16 + 96LL))( v16,  v10,  3LL,  &v55);
        uint64_t v17 = sub_1002E6C74();
        (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, __int128 *))(*(void *)v17 + 96LL))( v17,  v10,  2LL,  &v56);
        uint64_t v18 = sub_1002E6C74();
        (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, int *))(*(void *)v18 + 96LL))( v18,  v10,  4LL,  &v44);
        uint64_t v19 = sub_1002E6C74();
        (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, __int128 *))(*(void *)v19 + 96LL))( v19,  v10,  1LL,  &v53);
        int v20 = HIBYTE(v44);
        int v21 = BYTE2(v44);
        int v22 = BYTE1(v44);
        int v23 = v44;
        uint64_t v24 = operator new(0x78uLL);
        sub_1003FCFD0((uint64_t)v24, (uint64_t)v10, &v56, &v55, &v54, &v53, v20 | (v21 << 8) | (v22 << 16) | (v23 << 24));
        v24[21] = v45;
        uint64_t v26 = *(void **)(a1 + 184);
        unint64_t v25 = *(void *)(a1 + 192);
        if ((unint64_t)v26 >= v25)
        {
          uint64_t v28 = *(void *)(a1 + 176);
          uint64_t v29 = ((uint64_t)v26 - v28) >> 3;
          uint64_t v30 = v25 - v28;
          uint64_t v31 = v30 >> 2;
          else {
            unint64_t v32 = v31;
          }
          if (v32) {
            unint64_t v33 = (char *)sub_100008BA0(a1 + 192, v32);
          }
          else {
            unint64_t v33 = 0LL;
          }
          __int128 v34 = &v33[8 * v29];
          *(void *)__int128 v34 = v24;
          int v27 = v34 + 8;
          uint64_t v36 = *(char **)(a1 + 176);
          int v35 = *(char **)(a1 + 184);
          if (v35 != v36)
          {
            do
            {
              uint64_t v37 = *((void *)v35 - 1);
              v35 -= 8;
              *((void *)v34 - 1) = v37;
              v34 -= 8;
            }

            while (v35 != v36);
            int v35 = *(char **)(a1 + 176);
          }

          *(void *)(a1 + sub_100242FAC(v58 - 176) = v34;
          *(void *)(a1 + 184) = v27;
          *(void *)(a1 + 192) = &v33[8 * v32];
          if (v35) {
            operator delete(v35);
          }
        }

        else
        {
          *uint64_t v26 = v24;
          int v27 = v26 + 1;
        }

        *(void *)(a1 + 184) = v27;
        if (qword_1008D67B8 != -1) {
          dispatch_once(&qword_1008D67B8, &stru_100896238);
        }
        sub_10053645C((uint64_t)off_1008D67B0, v10);
      }
    }

    else
    {
      uint64_t v13 = 0LL;
      while (v13 != 5)
      {
        if (v10[v13++ + 129])
        {
          break;
        }
      }

      uint64_t v15 = (os_log_s *)qword_1008F7600;
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
        sub_10067A184(&v46, v47, v15);
      }
    }
  }

  if (*(void *)(a1 + 184) != *(void *)(a1 + 176)) {
    *(_BYTE *)(a1 + 240) = 1;
  }
  uint64_t v39 = sub_1002E6C74();
  int v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v39 + 144LL))(v39, a1 + 81, a1 + 97);
  uint64_t v41 = (os_log_s *)qword_1008F7600;
  if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v42 = "not available";
    if (!v40) {
      uint64_t v42 = "available";
    }
    *(_DWORD *)uint64_t v49 = 136315138;
    *(void *)&v49[4] = v42;
    _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Cloud master IRK and address are %s in storage",  v49,  0xCu);
  }

  sub_1003FBF84(a1);
  if ((void)buf)
  {
    *((void *)&buf + 1) = buf;
    operator delete((void *)buf);
  }

  return sub_100242FAC((uint64_t)v48);
}

void sub_1003ECF74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1003ECFD0()
{
  uint64_t v0 = sub_1002E6BF0();
  uint64_t v1 = sub_1002E6BF0();
  uint64_t v2 = sub_1002E6BF0();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 336LL))(v2))
  {
    uint64_t v3 = sub_1002E6BF0();
  }

  uint64_t v4 = sub_1002E6BF0();
  uint64_t v6 = sub_1002E6BF0();
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 384LL))(v6);
}

void sub_1003ED05C(uint64_t a1)
{
  CFPropertyListRef v2 = CFPreferencesCopyAppValue(@"SignInstatus", @"com.apple.BTServer");
  if (v2)
  {
    uint64_t v3 = v2;
    if (CFEqual(v2, @"SignedIn"))
    {
      char v4 = 1;
    }

    else
    {
      if (!CFEqual(v3, @"SignedOut"))
      {
LABEL_7:
        CFRelease(v3);
        goto LABEL_8;
      }

      char v4 = 0;
    }

    *(_BYTE *)(a1 + 241) = v4;
    goto LABEL_7;
  }

uint64_t sub_1003ED23C(void **a1)
{
  uint64_t result = sub_1003ECFD0();
  if ((_DWORD)result)
  {
    uint64_t v3 = sub_1002E8D54();
    sub_10024E060(v3 + 328, (uint64_t)(a1 + 3));
    v7[0] = 0LL;
    v7[1] = 0LL;
    sub_100242F28((uint64_t)v7, (uint64_t)(a1 + 13));
    id v5 = a1[22];
    char v4 = a1[23];
    if (v5 != v4)
    {
      do
      {
        uint64_t v6 = *v5;
        if (*v5)
        {
          operator delete((void *)v6);
          char v4 = a1[23];
        }

        ++v5;
      }

      while (v5 != v4);
      id v5 = a1[22];
    }

    a1[23] = v5;
    (*(void (**)(void *, void **))(*a1[21] + 8LL))(a1[21], a1 + 1);
    (*(void (**)(void *))(*a1[21] + 120LL))(a1[21]);
    if (qword_1008D60B0 != -1) {
      dispatch_once(&qword_1008D60B0, &stru_1008961D8);
    }
    sub_100009168((uint64_t)off_1008D60A8 + 80, (uint64_t)(a1 + 2));
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100896218);
    }
    sub_100009168((uint64_t)off_1008D5F48 + 240, (uint64_t)(a1 + 5));
    return sub_100242FAC((uint64_t)v7);
  }

  return result;
}

void sub_1003ED378( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1003ED38C(int *a1, int a2, _OWORD *a3, _OWORD *a4, int a5, __n128 *a6, __n128 *a7)
{
  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100896218);
  }
  int v18 = *a1;
  __int16 v19 = *((_WORD *)a1 + 2);
  BOOL v14 = sub_1003FFEB0(off_1008D5F48, (uint64_t)&v18, 1);
  uint64_t v15 = sub_100404EB8();
  uint64_t v16 = operator new(0x60uLL);
  sub_1004F5EA4((uint64_t)v16, (uint64_t)v14, a2, a3, a4, a5, a6, a7);
  return sub_100405744(v15, v16);
}

void sub_1003ED478(_Unwind_Exception *a1)
{
}

void sub_1003ED48C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 48))
  {
    *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 1;
    if ((sub_1003ECFD0() & 1) != 0)
    {
      char v14 = 0;
      sub_100242CA4(&v14);
      CFPropertyListRef v2 = (os_log_s *)qword_1008F7600;
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v3 = "Signed in";
        if (!*(_BYTE *)(a1 + 241)) {
          uint64_t v3 = "Not Signed in";
        }
        *(_DWORD *)__int128 buf = 136315394;
        *(void *)&uint8_t buf[4] = "stackDidStart";
        *(_WORD *)&_BYTE buf[12] = 2080;
        *(void *)&_BYTE buf[14] = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s, Device sign in status %s", buf, 0x16u);
      }

      sub_1001C39B0();
      sub_1001C3160((uint64_t)&off_100896030);
      sub_1003EDDE0((void *)a1);
      sub_100242CD0(&v14);
      for (uint64_t i = *(uint64_t **)(a1 + 176); i != *(uint64_t **)(a1 + 184); ++i)
      {
        uint64_t v5 = *i;
        __n128 v20 = 0uLL;
        int v21 = 0;
        sub_10052523C((uint64_t)&v20);
        uint64_t v6 = *(unsigned __int8 **)v5;
        if (qword_1008D67B8 != -1) {
          dispatch_once(&qword_1008D67B8, &stru_100896238);
        }
        if (sub_100535750((uint64_t)off_1008D67B0, v6, &v20) == 150)
        {
          uint64_t v8 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C((uint64_t)v6, buf);
            uint64_t v9 = buf;
            if (v17 < 0) {
              uint64_t v9 = *(_BYTE **)buf;
            }
            *(_DWORD *)int v18 = 136446210;
            __int16 v19 = v9;
            _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Deferred Magic pairing device from cloud %{public}s",  v18,  0xCu);
            if (v17 < 0) {
              operator delete(*(void **)buf);
            }
          }

          if (qword_1008D67A8 != -1) {
            dispatch_once(&qword_1008D67A8, &stru_1008961F8);
          }
          sub_100530264((uint64_t)off_1008D67A0, (uint64_t)v6);
          memset(buf, 0, 20);
          sub_10052525C((uint64_t)buf, (_OWORD *)(v5 + 40), 4u);
          if (qword_1008D67B8 != -1) {
            dispatch_once(&qword_1008D67B8, &stru_100896238);
          }
          sub_10053584C((uint64_t)off_1008D67B0, v6, (__n128 *)buf, 0);
          nullsub_63(buf, v10);
        }

        if (((unint64_t)*(unsigned __int8 *)(v5 + 78) << 40) | ((unint64_t)*(unsigned __int8 *)(v5 + 79) << 32) | ((unint64_t)*(unsigned __int8 *)(v5 + 80) << 24) | ((unint64_t)*(unsigned __int8 *)(v5 + 81) << 16) | ((unint64_t)*(unsigned __int8 *)(v5 + 82) << 8) | *(unsigned __int8 *)(v5 + 83))
        {
          uint64_t v11 = sub_100404FE8();
          v13[0] = _NSConcreteStackBlock;
          v13[1] = 3221225472LL;
          void v13[2] = sub_1003EE040;
          void v13[3] = &unk_10087EB20;
          void v13[4] = v5;
          sub_100405384(v11, v13);
        }

        nullsub_63(&v20, v7);
      }

      sub_100242CD8(&v14);
    }

    else
    {
      uint64_t v12 = *(dispatch_queue_s **)(a1 + 208);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1003ED874;
      block[3] = &unk_10087EB20;
      block[4] = a1;
      dispatch_async(v12, block);
    }
  }

void sub_1003ED824( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

_BYTE *sub_1003ED874(uint64_t a1)
{
  return sub_1003ED880(*(void *)(a1 + 32), 0);
}

_BYTE *sub_1003ED880(uint64_t a1, int a2)
{
  char v4 = (os_log_s *)qword_1008F7600;
  if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3;
    uint64_t v6 = (void *)(a1 + 216);
    *(_DWORD *)__int128 buf = 134218755;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&_BYTE buf[12] = 2160;
    if (a2) {
      uint64_t v7 = " <user-switched>";
    }
    else {
      uint64_t v7 = "";
    }
    *(void *)&_BYTE buf[14] = 1752392040LL;
    *(_WORD *)&_BYTE buf[22] = 2081;
    int v35 = v6;
    __int16 v36 = 2080;
    uint64_t v37 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Removing %lu magic paired devices from local device database for %{private, mask.hash}s%s",  buf,  0x2Au);
  }

  *(_BYTE *)(a1 + 240) = 0;
  if (a2)
  {
    memset(buf, 0, sizeof(buf));
    if (qword_1008D67A8 != -1) {
      dispatch_once(&qword_1008D67A8, &stru_1008961F8);
    }
    sub_10052AFEC((uint64_t)off_1008D67A0, (void ***)buf);
    for (uint64_t i = *(uint64_t **)buf; i != *(uint64_t **)&buf[8]; ++i)
    {
      uint64_t v9 = *i;
      for (uint64_t j = *(void ***)(a1 + 176); j != *(void ***)(a1 + 184); ++j)
      {
        if (**j == v9) {
          goto LABEL_18;
        }
      }

      sub_1003FE1B4((unsigned __int8 *)(v9 + 128), __p);
      (*(void (**)(uint64_t, void **))(*(void *)a1 + 104LL))(a1, __p);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
LABEL_18:
      ;
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 cloudClient]);
    [v12 invalidate];

    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }

  uint64_t v13 = *(uint64_t ***)(a1 + 176);
  while (1)
  {
    char v14 = *v13;
    if (!sub_1003D0670(**v13)) {
      goto LABEL_35;
    }
    char v27 = 0;
    sub_100242CA4(&v27);
    int v15 = sub_10010D064(*v14 + 128);
    uint64_t v16 = (os_log_s *)(id)qword_1008F7600;
    char v17 = v16;
    if (v15)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(*v14, buf);
        int v18 = buf;
        if ((buf[23] & 0x80u) != 0) {
          int v18 = *(uint8_t **)buf;
        }
        *(_DWORD *)uint64_t v30 = 136446466;
        uint64_t v31 = v18;
        __int16 v32 = 1024;
        int v33 = v15;
        _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Magic Pairing disconnect failed for %{public}s on user logout with status: %d",  v30,  0x12u);
LABEL_32:
      }
    }

    else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(*v14, buf);
      __int16 v19 = buf;
      if ((buf[23] & 0x80u) != 0) {
        __int16 v19 = *(uint8_t **)buf;
      }
      *(_DWORD *)uint64_t v30 = 136446210;
      uint64_t v31 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Magic Pairing disconnected for %{public}s on user logout",  v30,  0xCu);
      goto LABEL_32;
    }

    sub_100242CD8(&v27);
LABEL_35:
    *((_DWORD *)v14 + 21) = 3;
    uint64_t v20 = sub_1002E6C74();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 104LL))(v20, *v14);
    if (a2)
    {
      if (qword_1008D60E0 != -1) {
        dispatch_once(&qword_1008D60E0, &stru_100896298);
      }
      char v21 = 3;
    }

    else
    {
      if (qword_1008D60E0 != -1) {
        dispatch_once(&qword_1008D60E0, &stru_100896298);
      }
      char v21 = 1;
    }

    *((_BYTE *)off_1008D60D8 + 431) = v21;
    *(_OWORD *)(a1 + 49) = 0u;
    *(_OWORD *)(a1 + 65) = 0u;
    if (*(_BYTE *)(a1 + 48))
    {
      if (qword_1008D67A8 != -1) {
        dispatch_once(&qword_1008D67A8, &stru_1008961F8);
      }
      sub_10052F37C((uint64_t)off_1008D67A0, (unsigned __int8 *)*v14);
    }

    int v22 = *v13;
    if (*v13)
    {
      operator delete(v22);
    }

    int v23 = *(uint64_t ***)(a1 + 184);
    int64_t v24 = (char *)v23 - (char *)(v13 + 1);
    if (v23 == v13 + 1) {
      break;
    }
    memmove(v13, v13 + 1, (char *)v23 - (char *)(v13 + 1));
    *(void *)(a1 + 184) = (char *)v13 + v24;
  }

  *(void *)(a1 + 184) = v23 - 1;
LABEL_53:
  uint64_t v25 = sub_1002E6C74();
  uint64_t result = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(void *)v25 + 168LL))(v25);
  if (*(_BYTE *)(a1 + 48))
  {
    buf[0] = 0;
    sub_100242CA4(buf);
    sub_1003EDDE0((void *)a1);
    uint64_t result = sub_100242CD8(buf);
  }

  if (*(char *)(a1 + 239) < 0)
  {
    **(_BYTE **)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0LL;
  }

  else
  {
    *(_BYTE *)(a1 + 216) = 0;
    *(_BYTE *)(a1 + 239) = 0;
  }

  return result;
}

void sub_1003EDD54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *__p, uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003EDDE0(void *a1)
{
  uint64_t v1 = (uint64_t **)a1[22];
  uint64_t v2 = a1[23] - (void)v1;
  if (v2)
  {
    unint64_t v4 = v2 >> 3;
    if (is_mul_ok(v4, 0x2CuLL)) {
      size_t v5 = 44 * v4;
    }
    else {
      size_t v5 = -1LL;
    }
    uint64_t v6 = (char *)operator new[](v5);
    unsigned __int16 v7 = 0;
    do
    {
      uint64_t v8 = *v1;
      uint64_t v9 = **v1;
      uint64_t v10 = &v6[44 * v7];
      int v11 = *(_DWORD *)(v9 + 128);
      *((_WORD *)v10 + 2) = *(_WORD *)(v9 + 132);
      *(_DWORD *)uint64_t v10 = v11;
      *(_OWORD *)(v10 + 6) = *(_OWORD *)(v8 + 7);
      *(_OWORD *)(v10 + 22) = *(_OWORD *)(v8 + 5);
      *((_DWORD *)v10 + 10) = *((_DWORD *)v8 + 18);
      uint64_t v12 = sub_1002E6E00();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 8LL))(v12))
      {
        uint64_t v13 = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C(v9, __p);
          char v14 = __p;
          if (v20 < 0) {
            char v14 = (void **)__p[0];
          }
          int v15 = *((_DWORD *)v10 + 10);
          *(_DWORD *)__int128 buf = 136447490;
          int v22 = v14;
          __int16 v23 = 1024;
          int v24 = v15;
          __int16 v25 = 1040;
          int v26 = 16;
          __int16 v27 = 2096;
          uint64_t v28 = v10 + 22;
          __int16 v29 = 1040;
          int v30 = 16;
          __int16 v31 = 2096;
          __int16 v32 = v10 + 6;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Writing magic device info for device %{public}s to stack with ratchet = %d accessory key %.16P and Hint %.16P",  buf,  0x32u);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
        }
      }

      ++v7;
      ++v1;
    }

    while (v1 != (uint64_t **)a1[23]);
    uint64_t v16 = (void *)a1[25];
    if (v16) {
      operator delete[](v16);
    }
    a1[25] = v6;
    return sub_1001C3914((uint64_t)v6, v7);
  }

  else
  {
    int v18 = (os_log_s *)qword_1008F7600;
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Magic paired device list is empty", buf, 2u);
    }

    return sub_1001C3914(0LL, 0);
  }

void sub_1003EE028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003EE040(uint64_t a1)
{
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_100896258);
  }
  sub_1005E459C((uint64_t)off_1008D6600, (unsigned __int8 *)(*(void *)(a1 + 32) + 77LL), *(void *)(a1 + 32) + 24LL);
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_100896278);
  }
  sub_100621334(qword_1008D5F18, (unsigned __int8 *)(*(void *)(a1 + 32) + 77LL), *(void *)(a1 + 32) + 8LL);
}

void sub_1003EE0D8(uint64_t a1)
{
}

uint64_t sub_1003EE0E0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_1008F7600;
  if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "MagicPairingManager::stackWillStop enter",  buf,  2u);
  }

  uint64_t result = sub_1003ECFD0();
  if ((_DWORD)result)
  {
    *(void *)__int128 buf = 0LL;
    uint64_t v8 = 0LL;
    sub_100242F28((uint64_t)buf, a1 + 104);
    *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 0;
    char v6 = 0;
    sub_100242CA4(&v6);
    sub_1001C44B8();
    sub_100242CD0(&v6);
    unint64_t v4 = (os_log_s *)qword_1008F7600;
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)size_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "MagicPairingManager::stackWillStop exit",  v5,  2u);
    }

    sub_100242CD8(&v6);
    return sub_100242FAC((uint64_t)buf);
  }

  return result;
}

void sub_1003EE1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1003EE1F4(uint64_t a1)
{
  return sub_1003EE0E0(a1 - 16);
}

void sub_1003EE1FC(uint64_t a1)
{
  if (sub_1003ECFD0())
  {
    uint64_t v2 = *(void **)(a1 + 200);
    if (v2)
    {
      operator delete[](v2);
      *(void *)(a1 + 200) = 0LL;
    }
  }

void sub_1003EE230(uint64_t a1)
{
}

BTCloudDevice *sub_1003EE238(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = objc_alloc(&OBJC_CLASS___BTCloudDevice);
    sub_1003FE1B4((unsigned __int8 *)(a1 + 128), __p);
    if (v14 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3));
    size_t v5 = -[BTCloudDevice initWithBluetoothAddress:](v2, "initWithBluetoothAddress:", v4);

    if (v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    if (sub_1003D55EC(a1, (_DWORD *)&v12 + 1, &v12, (_DWORD *)&v11 + 1, &v11))
    {
      char v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%u",  HIDWORD(v11)));
      -[BTCloudDevice setProductID:](v5, "setProductID:", v6);

      unsigned __int16 v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%u",  v12));
      -[BTCloudDevice setVendorID:](v5, "setVendorID:", v7);
    }

    sub_1003D0100(a1, (uint64_t)__p);
    if (v14 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
    -[BTCloudDevice setNickname:](v5, "setNickname:", v9);

    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    size_t v5 = 0LL;
  }

  return v5;
}

void sub_1003EE3BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003EE428(uint64_t a1, char *a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_100242F28((uint64_t)v5, a1 + 104);
  if ((char *)(a1 + 176) != a2) {
    sub_100240C80( a2,  *(char **)(a1 + 176),  *(void *)(a1 + 184),  (uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3);
  }
  sub_100242FAC((uint64_t)v5);
  return 0LL;
}

void sub_1003EE48C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1003EE4A0(uint64_t a1, uint64_t a2)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  uint64_t v4 = sub_100242F28((uint64_t)v9, a1 + 104);
  if (sub_1003EE52C(v4, a2))
  {
    size_t v5 = *(void **)(a1 + 176);
    char v6 = *(void **)(a1 + 184);
    while (v5 != v6)
    {
      unsigned __int16 v7 = (void *)*v5;
      if (*(void *)*v5 == a2) {
        goto LABEL_7;
      }
      ++v5;
    }
  }

  unsigned __int16 v7 = 0LL;
LABEL_7:
  sub_100242FAC((uint64_t)v9);
  return v7;
}

void sub_1003EE518( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003EE52C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1003ECFD0();
  if ((_DWORD)result)
  {
    v5[0] = 0LL;
    v5[1] = 0LL;
    uint64_t v4 = sub_1002E6C74();
    return (*(unsigned int (**)(uint64_t, uint64_t, void, void *))(*(void *)v4 + 96LL))(v4, a2, 0LL, v5) == 0;
  }

  return result;
}

uint64_t sub_1003EE5AC(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (a2[960])
  {
    uint64_t v4 = sub_1002E6C74();
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v4 + 128LL))(v4, a2);
    return 1LL;
  }

  if ((a3 & 1) == 0)
  {
    unsigned __int16 v7 = (os_log_s *)(id)qword_1008F7600;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C((uint64_t)a2, v49);
      sub_10067A2E8();
    }

    if (qword_1008D60E0 != -1) {
      dispatch_once(&qword_1008D60E0, &stru_100896298);
    }
    *((_BYTE *)off_1008D60D8 + 431) = 1;
  }

  int v8 = sub_1003EE52C(a1, (uint64_t)a2);
  uint64_t v9 = sub_1002E6C74();
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v9 + 104LL))(v9, a2);
  if (a2[988]) {
    int v10 = v8;
  }
  else {
    int v10 = 1;
  }
  if (v10 != 1 || a2[989]) {
    return 1LL;
  }
  if (sub_1003ECFD0() && *(_BYTE *)(a1 + 240) && *(_BYTE *)(a1 + 241))
  {
    v48[0] = 0LL;
    v48[1] = 0LL;
    sub_100242F28((uint64_t)v48, a1 + 104);
    uint64_t v13 = *(char **)(a1 + 176);
    char v14 = *(unsigned __int8 ****)(a1 + 184);
    if (v13 == (char *)v14)
    {
LABEL_23:
      uint64_t v16 = 0LL;
    }

    else
    {
      int v15 = *(unsigned __int8 ****)(a1 + 176);
      while (1)
      {
        uint64_t v16 = *v15;
        if (**v15 == a2) {
          break;
        }
        if (++v15 == v14) {
          goto LABEL_23;
        }
      }
    }

    if (v16)
    {
      int v17 = *((_DWORD *)v16 + 21);
      int v18 = (os_log_s *)(id)qword_1008F7600;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C((uint64_t)a2, v54);
        __int16 v19 = v55 >= 0 ? v54 : *(_BYTE **)v54;
        *(_DWORD *)__int128 buf = 136446466;
        *(void *)&uint8_t buf[4] = v19;
        __int16 v51 = 1024;
        int v52 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Removing Magic Pairing, Cloud status of magic device %{public}s = %d",  buf,  0x12u);
        if (v55 < 0) {
          operator delete(*(void **)v54);
        }
      }

      if (v17 != 3)
      {
        if ((sub_1003EEE0C((uint64_t *)(a1 + 176), (uint64_t)a2) & 1) == 0)
        {
          uint64_t v39 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            sub_1003CF00C((uint64_t)a2, v54);
            sub_10067A29C();
          }

          uint64_t v11 = 0LL;
          goto LABEL_82;
        }

        if (*(_BYTE *)(a1 + 48))
        {
          if ((a3 & 1) == 0)
          {
            if (qword_1008D67A8 != -1) {
              dispatch_once(&qword_1008D67A8, &stru_1008961F8);
            }
            sub_10052F37C(off_1008D67A0, a2);
          }

          char v47 = 0;
          sub_100242CA4(&v47);
          sub_1003EDDE0((void *)a1);
          sub_100242CD0(&v47);
          sub_1003EEEB0(a1);
          if (a3 && *(_BYTE *)(a1 + 240))
          {
            char v20 = (os_log_s *)(id)qword_1008F7600;
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              sub_1003CF00C((uint64_t)a2, v54);
              sub_10067A250();
            }

            char v21 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
            int v22 = (void *)objc_claimAutoreleasedReturnValue([v21 cloudClient]);
            sub_1003FE1B4(a2 + 128, buf);
            if (v53 >= 0) {
              __int16 v23 = buf;
            }
            else {
              __int16 v23 = *(_BYTE **)buf;
            }
            int v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v23));
            v46[0] = _NSConcreteStackBlock;
            v46[1] = 3221225472LL;
            void v46[2] = sub_1003EEFC0;
            v46[3] = &unk_100896038;
            v46[4] = a2;
            [v22 deleteDeviceRecord:v24 completion:v46];

            if (v53 < 0) {
              operator delete(*(void **)buf);
            }

            __int16 v25 = (os_log_s *)(id)qword_1008F7600;
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              sub_1003CF00C((uint64_t)a2, buf);
              sub_10067A204();
            }

            int v26 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
            __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([v26 cloudClient]);
            sub_1003FE1B4(a2 + 128, __p);
            if (v45 >= 0) {
              uint64_t v28 = __p;
            }
            else {
              uint64_t v28 = (void **)__p[0];
            }
            __int16 v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v28));
            v43[0] = _NSConcreteStackBlock;
            v43[1] = 3221225472LL;
            v43[2] = sub_1003EF100;
            v43[3] = &unk_100896038;
            v43[4] = a2;
            [v27 deleteMagicSettingsRecord:v29 completion:v43];

            if (v45 < 0) {
              operator delete(__p[0]);
            }

            int v30 = (os_log_s *)(id)qword_1008F7600;
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              sub_1003CF00C((uint64_t)a2, __p);
              sub_10067A1B8();
            }

            __int16 v31 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
            __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 cloudClient]);
            sub_1003FE1B4(a2 + 128, v41);
            if (v42 >= 0) {
              int v33 = v41;
            }
            else {
              int v33 = (void **)v41[0];
            }
            __int128 v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v33));
            v40[0] = _NSConcreteStackBlock;
            v40[1] = 3221225472LL;
            void v40[2] = sub_1003EF240;
            v40[3] = &unk_100896038;
            v40[4] = a2;
            [v32 deleteDeviceSupportInformationRecord:v34 completion:v40];

            if (v42 < 0) {
              operator delete(v41[0]);
            }

            sub_1003EF380(a1);
          }

          sub_100242CD8(&v47);
        }
      }
    }

    else
    {
      uint64_t v37 = (os_log_s *)(id)qword_1008F7600;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C((uint64_t)a2, v54);
        uint64_t v38 = v55 >= 0 ? v54 : *(_BYTE **)v54;
        *(_DWORD *)__int128 buf = 136446210;
        *(void *)&uint8_t buf[4] = v38;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Device %{public}s not in Magic pairing list",  buf,  0xCu);
        if (v55 < 0) {
          operator delete(*(void **)v54);
        }
      }
    }

    uint64_t v11 = 1LL;
LABEL_82:
    sub_100242FAC((uint64_t)v48);
    return v11;
  }

  int v35 = (os_log_s *)(id)qword_1008F7600;
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    if (sub_1003ECFD0())
    {
      if (*(_BYTE *)(a1 + 241)) {
        __int16 v36 = "Signed In";
      }
      else {
        __int16 v36 = "Not Signed in";
      }
    }

    else
    {
      __int16 v36 = "Not Supported";
    }

    *(_DWORD *)__int128 v54 = 136315138;
    *(void *)&v54[4] = v36;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Magic pairing: %s", v54, 0xCu);
  }

  return 0LL;
}

void sub_1003EECC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, char a41)
{
  sub_100242CD8(&a40);
  sub_100242FAC((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t sub_1003EEE0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void **)a1[1];
  if ((void **)*a1 == v3) {
    return 0LL;
  }
  for (uint64_t i = -v2; ; i -= 8LL)
  {
    char v6 = *(void **)v2;
    if (**(void **)v2 == a2) {
      break;
    }
    v2 += 8LL;
    if ((void **)v2 == v3) {
      return 0LL;
    }
  }

  operator delete(v6);
  uint64_t v8 = -i;
  uint64_t v9 = (const void *)(8 - i);
  size_t v10 = a1[1] - (8 - i);
  if (v10) {
    memmove((void *)v8, v9, v10);
  }
  a1[1] = v8 + v10;
  return 1LL;
}

uint64_t sub_1003EEEB0(uint64_t a1)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_100242F28((uint64_t)v7, a1 + 104);
  uint64_t v2 = *(uint64_t ***)(a1 + 176);
  do
    int v3 = sub_1003F0354(a1, **v2++);
  while (v2 != *(uint64_t ***)(a1 + 184));
  if (v3)
  {
LABEL_12:
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
      sub_10067A334();
    }
  }

  else
  {
    uint64_t v4 = (os_log_s *)qword_1008F7600;
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v6 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Successfully stored MagicPairing device information in storage",  v6,  2u);
    }

    sub_1003FBF84(a1);
  }

  return sub_100242FAC((uint64_t)v7);
}

void sub_1003EEFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1003EEFC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)(id)qword_1008F7600;
  size_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(*(void *)(a1 + 32), __p);
      sub_10067A394();
    }
  }

  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(*(void *)(a1 + 32), __p);
    char v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 136446210;
    size_t v10 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[MP-] Removed cloud device for %{public}s",  buf,  0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1003EF0E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003EF100(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)(id)qword_1008F7600;
  size_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(*(void *)(a1 + 32), __p);
      sub_10067A3D8();
    }
  }

  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(*(void *)(a1 + 32), __p);
    char v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 136446210;
    size_t v10 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[MP-] Removed new cloud magic settings for %{public}s",  buf,  0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1003EF220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003EF240(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)(id)qword_1008F7600;
  size_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(*(void *)(a1 + 32), __p);
      sub_10067A41C();
    }
  }

  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(*(void *)(a1 + 32), __p);
    char v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)__int128 buf = 136446210;
    size_t v10 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[MP-] Removed Device Support Information for %{public}s",  buf,  0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1003EF360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003EF380(uint64_t a1)
{
  if (!sub_1003ECFD0() || !*(_BYTE *)(a1 + 240))
  {
    uint64_t v43 = (os_log_s *)(id)qword_1008F7600;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      int v44 = sub_1003ECFD0();
      char v45 = "supported";
      if (v44) {
        char v45 = "initialized";
      }
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v45;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "writeDeviceListToCloud, Magic Pairing not %s.",  buf,  0xCu);
    }

    return;
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100896218);
  }
  if ((sub_100401058((uint64_t)off_1008D5F48) & 1) != 0)
  {
    int v2 = *(unsigned __int8 *)(a1 + 241);
    id v3 = (os_log_s *)qword_1008F7600;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT);
    if (!v2)
    {
      if (!v4) {
        return;
      }
      *(_WORD *)__int128 buf = 0;
      char v47 = "Warning: Account not signed in";
      int v48 = v3;
      goto LABEL_125;
    }

    if (v4)
    {
      uint64_t v5 = (uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3;
      *(_DWORD *)__int128 buf = 134217984;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "CloudSync: Uploading information for %lu devices to cloud",  buf,  0xCu);
    }

    char v6 = *(uint64_t **)(a1 + 176);
    if (*(uint64_t **)(a1 + 184) != v6)
    {
      uint64_t v60 = a1;
      while (1)
      {
        int v66 = 1;
        int v67 = 0;
        __int16 v63 = v6;
        uint64_t v64 = *v6;
        uint64_t v65 = 0LL;
        uint64_t v7 = *(void *)v64;
        char v8 = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          sub_1003CF00C(v7, buf);
          uint64_t v9 = buf;
          if (v70 < 0) {
            uint64_t v9 = *(_BYTE **)buf;
          }
          int v10 = *(_DWORD *)(v64 + 84);
          *(_DWORD *)__int16 v79 = 136446466;
          *(void *)&v79[4] = v9;
          __int16 v80 = 1024;
          LODWORD(v81) = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Sync device for %{public}s, local state: %d",  v79,  0x12u);
          if (SHIBYTE(v70) < 0) {
            operator delete(*(void **)buf);
          }
        }

        if (_os_feature_enabled_impl("BluetoothFeatures", "GAPA"))
        {
          if ((sub_1003D8484(v7) & 2) != 0)
          {
            uint64_t v41 = (os_log_s *)(id)qword_1008F7600;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
            {
              sub_1003CF00C(v7, buf);
              char v42 = buf;
              if (v70 < 0) {
                char v42 = *(_BYTE **)buf;
              }
              *(_DWORD *)__int16 v79 = 136315138;
              *(void *)&v79[4] = v42;
              _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_INFO,  "Skipping information for %s devices to cloud",  v79,  0xCu);
              if (SHIBYTE(v70) < 0) {
                operator delete(*(void **)buf);
              }
            }

            *(_DWORD *)(v64 + 84) = 3;
            goto LABEL_92;
          }

          sub_1003D8484(v7);
        }

        *(_DWORD *)(v64 + 84) = 2;
        sub_1003D0100(v7, (uint64_t)buf);
        unint64_t v11 = HIBYTE(v70);
        if (v70 < 0) {
          unint64_t v11 = *(void *)&buf[8];
        }
        if (v11 <= 0x37) {
          break;
        }
        unsigned __int8 v12 = 55;
        if (v70 < 0) {
          goto LABEL_30;
        }
LABEL_31:
        sub_1003D0100(v7, (uint64_t)buf);
        if (SHIBYTE(v70) < 0) {
          operator delete(*(void **)buf);
        }
        if (!sub_1003D55EC(v7, &v67, (_DWORD *)&v65 + 1, &v65, &v66))
        {
          uint64_t v13 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C(v7, v79);
            char v14 = v79;
            if (v82 < 0) {
              char v14 = *(_BYTE **)v79;
            }
            *(_DWORD *)__int128 buf = 136446722;
            *(void *)&uint8_t buf[4] = v14;
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v65;
            __int16 v69 = 1024;
            int v70 = HIDWORD(v65);
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Error fetching DeviceId for magic paired device %{public}s with pid: %x, vid: %x",  buf,  0x18u);
            if (v82 < 0) {
              operator delete(*(void **)v79);
            }
          }
        }

        int v15 = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C(v7, v79);
          uint64_t v16 = v79;
          if (v82 < 0) {
            uint64_t v16 = *(_BYTE **)v79;
          }
          *(_DWORD *)__int128 buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v12;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = v16;
          __int16 v69 = 1024;
          int v70 = v65;
          __int16 v71 = 1024;
          int v72 = HIDWORD(v65);
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Uploading device with length %d for magic paired device %{public}s with pid: %x, vid: %x",  buf,  0x1Eu);
          if (v82 < 0) {
            operator delete(*(void **)v79);
          }
        }

        int v17 = sub_1003DF900(v7);
        if (v17 == 2) {
          unsigned __int8 v18 = 2;
        }
        else {
          unsigned __int8 v18 = v17 == 1;
        }
        __int16 v19 = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C(v7, buf);
          int v20 = SHIBYTE(v70);
          char v21 = *(_BYTE **)buf;
          int v22 = sub_1003DF944(v7);
          __int16 v23 = buf;
          if (v20 < 0) {
            __int16 v23 = v21;
          }
          *(_DWORD *)__int16 v79 = 136446466;
          *(void *)&v79[4] = v23;
          int v24 = "disabled";
          if (v22) {
            int v24 = "Enabled";
          }
          __int16 v80 = 2080;
          __int16 v81 = v24;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "In Ear Detection  state for device  %{public}s is %s",  v79,  0x16u);
          if (SHIBYTE(v70) < 0) {
            operator delete(*(void **)buf);
          }
        }

        sub_1003D635C(v7);
        sub_1003D635C(v7);
        if (qword_1008D60D0 != -1) {
          dispatch_once(&qword_1008D60D0, &stru_1008962B8);
        }
        sub_1004272C4((uint64_t)off_1008D60C8, *(void *)v64);
        __int16 v25 = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C(v7, buf);
          int v26 = buf;
          if (v70 < 0) {
            int v26 = *(_BYTE **)buf;
          }
          *(_DWORD *)__int16 v79 = 136446466;
          *(void *)&v79[4] = v26;
          __int16 v80 = 1024;
          LODWORD(v81) = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  " Settings mask for device %{public}s is 0x%2x",  v79,  0x12u);
          if (SHIBYTE(v70) < 0) {
            operator delete(*(void **)buf);
          }
        }

        sub_1003E16E4(v7);
        int v27 = sub_1003DFBD0(v7);
        char v28 = sub_1003DFBD0(v7);
        char v29 = sub_1003DFA7C(v7);
        int v30 = sub_1003D2B2C(v7, 32);
        char v31 = sub_1003DFC9C(v7);
        char v32 = sub_1003D8484(v7);
        log = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
        {
          if (v30) {
            int v33 = 64;
          }
          else {
            int v33 = 0;
          }
          int v61 = v33;
          sub_1003CF00C(v7, v79);
          if (v82 >= 0) {
            __int128 v34 = v79;
          }
          else {
            __int128 v34 = *(_BYTE **)v79;
          }
          int v35 = sub_1003DFBD0(v7);
          int v36 = sub_1003DFA7C(v7);
          int v37 = sub_1003DFC9C(v7);
          *(_DWORD *)__int128 buf = 67110658;
          *(_DWORD *)&uint8_t buf[4] = (32 * v27) & 0xE000 | ((v28 & 7) << 10) | ((v29 & 7) << 7) | v61 & 0xFFFFFFF3 | (4 * (v31 & 3)) | (2 * (v32 & 1));
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = v34;
          __int16 v69 = 1024;
          int v70 = v35;
          uint64_t v38 = "yes";
          if ((v32 & 1) == 0) {
            uint64_t v38 = "no";
          }
          __int16 v71 = 1024;
          int v72 = v36;
          __int16 v73 = 1024;
          int v74 = v30;
          __int16 v75 = 1024;
          int v76 = v37;
          __int16 v77 = 2080;
          int v78 = v38;
          _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEFAULT,  "writeDeviceListToCloud Listening mode configs mask %d for device %{public}s is %d-%d-%d-%d-%s",  buf,  0x34u);
          if (v82 < 0) {
            operator delete(*(void **)v79);
          }
          a1 = v60;
        }

        uint64_t v39 = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C(v7, buf);
          int v40 = buf;
          if (v70 < 0) {
            int v40 = *(_BYTE **)buf;
          }
          *(_DWORD *)__int16 v79 = 136446210;
          *(void *)&v79[4] = v40;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "CloudSync: New magic paired device, write magic pairing setting to cloud services for %{public}s",  v79,  0xCu);
          if (SHIBYTE(v70) < 0) {
            operator delete(*(void **)buf);
          }
        }

        sub_1003F8D14(a1, v64);
LABEL_92:
        char v6 = v63 + 1;
        if (v63 + 1 == *(uint64_t **)(a1 + 184))
        {
          uint64_t v49 = *(uint64_t ***)(a1 + 176);
          if (v6 != (uint64_t *)v49)
          {
            char v50 = (uint64_t **)(v63 + 1);
            do
            {
              if (*((_DWORD *)*v49 + 21) == 3)
              {
                __int16 v51 = (os_log_s *)(id)qword_1008F7600;
                if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
                {
                  sub_1003CF00C(**v49, buf);
                  int v52 = v70 >= 0 ? buf : *(_BYTE **)buf;
                  *(_DWORD *)__int16 v79 = 136446210;
                  *(void *)&v79[4] = v52;
                  _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "Local device info for %{public}s needs to be removed",  v79,  0xCu);
                  if (SHIBYTE(v70) < 0) {
                    operator delete(*(void **)buf);
                  }
                }

                char v53 = *v49;
                if (*v49)
                {
                  operator delete(v53);
                }

                __int128 v54 = *(uint64_t ***)(a1 + 184);
                int64_t v55 = (char *)v54 - (char *)(v49 + 1);
                if (v54 != v49 + 1) {
                  memmove(v49, v49 + 1, (char *)v54 - (char *)(v49 + 1));
                }
                __int128 v56 = (uint64_t **)((char *)v49 + v55);
                *(void *)(a1 + 184) = (char *)v49 + v55;
              }

              else
              {
                ++v49;
                __int128 v56 = v50;
              }

              char v50 = v56;
            }

            while (v49 != v56);
          }

          uint64_t v57 = qword_1008F7600;
          if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v58 = (uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3;
            *(_DWORD *)__int128 buf = 134217984;
            *(void *)&uint8_t buf[4] = v58;
            char v47 = "CloudSync: Skip pushing %lu updates to legacy layer for TVOS";
            int v48 = (os_log_s *)v57;
            uint32_t v59 = 12;
            goto LABEL_126;
          }

          return;
        }
      }

      sub_1003D0100(v7, (uint64_t)v79);
      if (v82 >= 0) {
        unsigned __int8 v12 = v82;
      }
      else {
        unsigned __int8 v12 = v79[8];
      }
      if (v82 < 0) {
        operator delete(*(void **)v79);
      }
      if ((v70 & 0x80000000) == 0) {
        goto LABEL_31;
      }
LABEL_30:
      operator delete(*(void **)buf);
      goto LABEL_31;
    }

    uint64_t v46 = qword_1008F7600;
    if (!os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)__int128 buf = 0;
    char v47 = "CloudSync: Skip pushing updates to legacy layer for TVOS";
  }

  else
  {
    uint64_t v46 = qword_1008F7600;
    if (!os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)__int128 buf = 0;
    char v47 = "System has not passed first unlock (or device prefs not read yet). Do not write DeviceList to Cloud";
  }

  int v48 = (os_log_s *)v46;
LABEL_125:
  uint32_t v59 = 2;
LABEL_126:
  _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, v47, buf, v59);
}

void sub_1003EFEA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  _Unwind_Resume(a1);
}

void sub_1003EFF78(uint64_t a1, uint64_t a2)
{
  if (sub_1003ECFD0() && *(_BYTE *)(a1 + 240))
  {
    if (a2)
    {
      if (*(_OWORD *)(a1 + 49) == 0LL || *(_OWORD *)(a1 + 65) == 0LL)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
          sub_10067A4B8();
        }
      }

      else
      {
        v11[0] = 0LL;
        v11[1] = 0LL;
        if (!sub_1001C43F0(a1 + 65, a2 + 56, (uint64_t)v11, 0x10uLL)
          && LODWORD(v11[0]) == *(_DWORD *)(*(void *)a2 + 128LL)
          && WORD2(v11[0]) == *(unsigned __int16 *)(*(void *)a2 + 132LL))
        {
          if (sub_1003F01F0((uint64_t *)a2, a1 + 49, a1 + 65))
          {
            if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
              sub_10067A4E4();
            }
          }

          else
          {
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 84) = 2;
            uint64_t v5 = (os_log_s *)(id)qword_1008F7600;
            if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
            {
              sub_1003CF00C(*(void *)a2, __p);
              char v6 = v8 >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)__int128 buf = 136446210;
              int v10 = v6;
              _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Reset Magic Pairing keys for device %{public}s",  buf,  0xCu);
              if (v8 < 0) {
                operator delete(__p[0]);
              }
            }

            if (*(_BYTE *)(a1 + 48))
            {
              LOBYTE(__p[0]) = 0;
              sub_100242CA4(__p);
              sub_1003EDDE0((void *)a1);
              sub_100242CD8(__p);
            }

            sub_1003F0354(a1, *(void *)a2);
          }
        }
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR))
    {
      sub_10067A48C();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR))
  {
    sub_10067A460();
  }

void sub_1003F01C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003F01F0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  __int16 v16 = 0;
  int v15 = 0;
  int v13 = *(_DWORD *)(v5 + 128);
  __int16 v14 = *(_WORD *)(v5 + 132);
  char v6 = (char *)(v5 + 133);
  for (uint64_t i = 6LL; i != 12; ++i)
  {
    char v8 = *v6--;
    *((_BYTE *)&v13 + i) = v8;
  }

  char v9 = *(_BYTE *)(v5 + 129);
  char v17 = v9 ^ *(_BYTE *)(v5 + 128);
  char v10 = *(_BYTE *)(v5 + 130);
  char v18 = v10 ^ v9;
  char v11 = *(_BYTE *)(v5 + 131);
  char v19 = v11 ^ v10;
  char v20 = *(_BYTE *)(v5 + 132) ^ v11;
  if (sub_1001C4454(a2, (uint64_t)&v13, (uint64_t)(a1 + 5), 0x10uLL))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
      sub_10067A570();
    }
  }

  else
  {
    uint64_t result = sub_1001C4454(a3, (uint64_t)&v13, (uint64_t)(a1 + 7), 0x10uLL);
    if (!(_DWORD)result) {
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
      sub_10067A510();
    }
  }

  return 1LL;
}

uint64_t sub_1003F0354(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 1LL;
  }
  for (uint64_t i = *(void **)(a1 + 176); i != *(void **)(a1 + 184); ++i)
  {
    uint64_t v5 = (void *)*i;
    if (*(void *)*i == a2) {
      goto LABEL_7;
    }
  }

  uint64_t v5 = 0LL;
LABEL_7:
  unsigned int v41 = bswap32(*((_DWORD *)v5 + 18));
  char v42 = *((_DWORD *)v5 + 21);
  uint64_t v6 = sub_1002E6C74();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void *))(*(void *)v6 + 88LL))(v6, a2, 0LL, v5 + 5);
  if (!(_DWORD)result)
  {
    uint64_t v8 = sub_1002E6C74();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v8 + 88LL))( v8,  a2,  3LL,  v5 + 3);
    if (!(_DWORD)result)
    {
      uint64_t v9 = sub_1002E6C74();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v9 + 88LL))( v9,  a2,  2LL,  v5 + 1);
      if (!(_DWORD)result)
      {
        uint64_t v10 = sub_1002E6C74();
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v10 + 88LL))( v10,  a2,  1LL,  v5 + 7);
        if (!(_DWORD)result)
        {
          uint64_t v11 = sub_1002E6C74();
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)v11 + 88LL))( v11,  a2,  4LL,  &v41);
          if (!(_DWORD)result)
          {
            if ((sub_1003D2B2C(a2, 12) & 1) != 0 || sub_1003D2B2C(a2, 39))
            {
              *(void *)std::string __p = 0LL;
              sub_1000B0400((uint64_t)__p);
              *(void *)&__int128 v40 = *(int *)__p;
              *((void *)&v40 + 1) = *(__int16 *)&__p[4];
              if (!sub_1003D0268(a2))
              {
                unsigned __int8 v12 = (os_log_s *)(id)qword_1008F7600;
                if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
                {
                  sub_1003CF00C(a2, __p);
                  int v13 = v45 >= 0 ? __p : *(_BYTE **)__p;
                  *(_DWORD *)__int128 buf = 136446210;
                  *(void *)&uint8_t buf[4] = v13;
                  _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Applying workaround for Apple Audio Device: BT_DEVICE_TYPE_GENERIC->BT_DEVICE_TYPE_HEADPHONES for %{public}s",  buf,  0xCu);
                  if (SHIBYTE(v45) < 0) {
                    operator delete(*(void **)__p);
                  }
                }

                sub_1003D0D8C(a2, 20, &v40);
              }

              HIDWORD(v39) = 0;
              sub_1003D0454(a2, (_DWORD *)&v39 + 1);
              if (!HIDWORD(v39))
              {
                __int16 v14 = (os_log_s *)(id)qword_1008F7600;
                if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
                {
                  sub_1003CF00C(a2, __p);
                  int v15 = v45 >= 0 ? __p : *(_BYTE **)__p;
                  *(_DWORD *)__int128 buf = 67109378;
                  *(_DWORD *)&uint8_t buf[4] = 2098200;
                  *(_WORD *)&uint8_t buf[8] = 2082;
                  *(void *)&buf[10] = v15;
                  _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Applying workaround for Apple Audio Device, CoD: 0->%u for %{public}s",  buf,  0x12u);
                  if (SHIBYTE(v45) < 0) {
                    operator delete(*(void **)__p);
                  }
                }

                sub_1003D51D8(a2, 2098200LL, &v40);
              }
            }

            else
            {
              __int16 v16 = (os_log_s *)(id)qword_1008F7600;
              if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
              {
                sub_1003CF00C(a2, __p);
                char v17 = v45 >= 0 ? __p : *(_BYTE **)__p;
                *(_DWORD *)__int128 buf = 136446210;
                *(void *)&uint8_t buf[4] = v17;
                _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "Cannot apply workaround this device is not Apple Audio Device: %{public}s",  buf,  0xCu);
                if (SHIBYTE(v45) < 0) {
                  operator delete(*(void **)__p);
                }
              }
            }

            uint64_t v18 = sub_1002E6E00();
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
            if ((_DWORD)result)
            {
              LODWORD(v40) = 0;
              uint64_t v39 = 0LL;
              int v38 = 0;
              sub_1003D55EC(a2, &v40, (_DWORD *)&v39 + 1, &v39, &v38);
              char v19 = (os_log_s *)qword_1008F7600;
              if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::string __p = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "statedump: ----------------- Magic Pairing Manager ------------------",  __p,  2u);
              }

              char v20 = (os_log_s *)(id)qword_1008F7600;
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                char v21 = (void *)(a1 + 216);
                int v22 = *(unsigned __int8 *)(a1 + 241);
                else {
                  int v23 = 0;
                }
                *(_DWORD *)std::string __p = 136315650;
                *(void *)&__p[4] = v21;
                *(_WORD *)&_BYTE __p[12] = 1024;
                *(_DWORD *)&__p[14] = v22;
                __int16 v44 = 1024;
                int v45 = v23;
                _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Cloud Account ID: %s, Cloud Signed in: %d, Initialized: %d",  __p,  0x18u);
              }

              int v24 = (os_log_s *)qword_1008F7600;
              if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
              {
                *(void *)std::string __p = 0x1004100202LL;
                *(_WORD *)&__p[8] = 2096;
                *(void *)&__p[10] = a1 + 49;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Cached Acc Master Key:%.16P",  __p,  0x12u);
              }

              __int16 v25 = (os_log_s *)qword_1008F7600;
              if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
              {
                *(void *)std::string __p = 0x1004100202LL;
                *(_WORD *)&__p[8] = 2096;
                *(void *)&__p[10] = a1 + 65;
                _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Cached Acc Master Hint:%.16P",  __p,  0x12u);
              }

              int v26 = (os_log_s *)qword_1008F7600;
              if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
              {
                *(void *)std::string __p = 0x1004100202LL;
                *(_WORD *)&__p[8] = 2096;
                *(void *)&__p[10] = a1 + 81;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Cached Acc Master Cloud IRK:%.16P",  __p,  0x12u);
              }

              int v27 = (os_log_s *)qword_1008F7600;
              if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
              {
                *(void *)std::string __p = 0x604100202LL;
                *(_WORD *)&__p[8] = 2096;
                *(void *)&__p[10] = a1 + 97;
                _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Cached Acc Master Cloud Addr:%.6P",  __p,  0x12u);
              }

              char v28 = (os_log_s *)(id)qword_1008F7600;
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
              {
                sub_1003CF00C(a2, buf);
                int v29 = v51;
                int v30 = *(_BYTE **)buf;
                int v31 = HIDWORD(v39);
                int v37 = v39;
                char v32 = sub_1003D8484(a2);
                int v33 = buf;
                *(_DWORD *)std::string __p = 136446978;
                if (v29 < 0) {
                  int v33 = v30;
                }
                *(void *)&__p[4] = v33;
                *(_WORD *)&_BYTE __p[12] = 1024;
                *(_DWORD *)&__p[14] = v31;
                __int16 v44 = 1024;
                int v45 = v37;
                __int16 v46 = 1024;
                LODWORD(v47) = v32 & 2;
                _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "statedump: Cached Device %{public}s, vid: %x, pid: %x, Fake: %d",  __p,  0x1Eu);
                if (v51 < 0) {
                  operator delete(*(void **)buf);
                }
              }

              __int128 v34 = (os_log_s *)qword_1008F7600;
              if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
              {
                int v35 = *((_DWORD *)v5 + 18);
                *(void *)std::string __p = 0x1004100502LL;
                *(_WORD *)&__p[8] = 2096;
                *(void *)&__p[10] = v5 + 5;
                __int16 v44 = 1040;
                int v45 = 16;
                __int16 v46 = 2096;
                char v47 = v5 + 7;
                __int16 v48 = 1024;
                int v49 = v35;
                _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Cached Acc Key %.16P for Hint %.16P and Ratchet %d ",  __p,  0x28u);
              }

              int v36 = (os_log_s *)qword_1008F7600;
              if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
              {
                *(void *)std::string __p = 0x1004100402LL;
                *(_WORD *)&__p[8] = 2096;
                *(void *)&__p[10] = v5 + 1;
                __int16 v44 = 1040;
                int v45 = 16;
                __int16 v46 = 2096;
                char v47 = v5 + 3;
                _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Cached IRK %.16P and Encryption key %.16P",  __p,  0x22u);
              }

              return 0LL;
            }
          }
        }
      }
    }
  }

  return result;
}

void sub_1003F0B18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003F0B7C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = IsAppleInternalBuild(a1, a2);
  if ((_DWORD)result)
  {
    uint64_t result = sub_1003ECFD0();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a1 + 240))
      {
        v22[0] = 0LL;
        v22[1] = 0LL;
        sub_100242F28((uint64_t)v22, a1 + 104);
        for (uint64_t i = *(unsigned __int8 ***)(a1 + 176); ; ++i)
        {
          uint64_t v8 = *i;
          if (*(void *)*i == a2) {
            break;
          }
        }

        v32[0] = 0LL;
        v32[1] = 0LL;
        int v9 = v8[72];
        if (!sub_1001C43F0(a1 + 65, (uint64_t)(v8 + 56), (uint64_t)v32, 0x10uLL)
          && (LODWORD(v32[0]) != *(_DWORD *)(*(void *)v8 + 128LL)
           || WORD2(v32[0]) != *(unsigned __int16 *)(*(void *)v8 + 132LL)))
        {
          uint64_t v18 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            char v19 = sub_1001C3008(a3);
            sub_1003CF00C(a2, &__p);
            char v20 = SHIBYTE(v31) >= 0 ? &__p : (void **)__p;
            *(_DWORD *)__int128 buf = 136315394;
            *(void *)&uint8_t buf[4] = v19;
            __int16 v24 = 2082;
            __int16 v25 = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Bad Main Account Keys; Unable to simulate Magic Pairing Error %s for device %{public}s",
              buf,
              0x16u);
            if (SHIBYTE(v31) < 0) {
              operator delete(__p);
            }
          }

          return sub_100242FAC((uint64_t)v22);
        }

        uint64_t v10 = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = sub_1001C3008(a3);
          sub_1003CF00C(a2, &__p);
          unsigned __int8 v12 = SHIBYTE(v31) >= 0 ? &__p : (void **)__p;
          *(_DWORD *)__int128 buf = 136315394;
          *(void *)&uint8_t buf[4] = v11;
          __int16 v24 = 2082;
          __int16 v25 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Simulating Magic Pairing Error %s for device %{public}s",  buf,  0x16u);
          if (SHIBYTE(v31) < 0) {
            operator delete(__p);
          }
        }

        if (a3 == 7)
        {
          if (sub_1003F01F0((uint64_t *)v8, a1 + 49, a1 + 65))
          {
            if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
              sub_10067A4E4();
            }
            return sub_100242FAC((uint64_t)v22);
          }

          int v13 = (os_log_s *)(id)qword_1008F7600;
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_44;
          }
          sub_1003CF00C(a2, &__p);
          char v21 = SHIBYTE(v31) >= 0 ? &__p : (void **)__p;
          *(_DWORD *)__int128 buf = 136446210;
          *(void *)&uint8_t buf[4] = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Simulating Magic Pairing Error reset accessory key without changing ratchet for device %{public}s",  buf,  0xCu);
          if ((SHIBYTE(v31) & 0x80000000) == 0) {
            goto LABEL_44;
          }
          __int16 v16 = __p;
        }

        else
        {
          if (a3 != 1)
          {
LABEL_45:
            if (*(_BYTE *)(a1 + 48))
            {
              LOBYTE(__p) = 0;
              sub_100242CA4(&__p);
              sub_1003EDDE0((void *)a1);
              sub_100242CD8(&__p);
            }

            sub_1003F0354(a1, *(void *)v8);
            return sub_100242FAC((uint64_t)v22);
          }

          *((_DWORD *)v8 + 1_Block_object_dispose(va, 8) = v9 + 10;
          int v13 = (os_log_s *)(id)qword_1008F7600;
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_44;
          }
          int v14 = *((_DWORD *)v8 + 18);
          sub_1003CF00C(a2, buf);
          int v15 = v26 >= 0 ? buf : *(_BYTE **)buf;
          LODWORD(__p) = 67109634;
          HIDWORD(__p) = v9;
          __int16 v28 = 1024;
          int v29 = v14;
          __int16 v30 = 2082;
          int v31 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Simulating Magic Pairing Error bumped ratchet from %d -> %d for device %{public}s",  (uint8_t *)&__p,  0x18u);
          if ((v26 & 0x80000000) == 0)
          {
LABEL_44:

            goto LABEL_45;
          }

          __int16 v16 = *(void **)buf;
        }

        operator delete(v16);
        goto LABEL_44;
      }
    }
  }

  return result;
}

void sub_1003F0F60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100242FAC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F0FC8(uint64_t a1, unsigned __int8 *a2, _OWORD *a3, _OWORD *a4)
{
  if (!a2[128])
  {
    unint64_t v15 = 0LL;
    while (v15 != 5)
    {
      unint64_t v16 = v15;
      if (a2[v15++ + 129])
      {
        if (v16 < 5) {
          goto LABEL_2;
        }
        break;
      }
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
      sub_10067A5D0();
    }
    return 1LL;
  }

void sub_1003F138C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1003F13C8(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3 = a1 + 49;
  if (*(_OWORD *)(a1 + 49) == 0LL || !*(_BYTE *)(a1 + 241))
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
      sub_10067A654();
    }
  }

  else
  {
    uint64_t v7 = (_OWORD *)(a1 + 81);
    if (*(_OWORD *)(a1 + 81) != 0LL)
    {
LABEL_4:
      uint64_t result = 0LL;
      *a2 = *v7;
      int v9 = *(_DWORD *)(a1 + 97);
      *(_WORD *)(a3 + 4) = *(_WORD *)(a1 + 101);
      *(_DWORD *)a3 = v9;
      return result;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
      sub_10067A7A0();
    }
    v13[0] = 0LL;
    v13[1] = 0LL;
    sub_100242F28((uint64_t)v13, a1 + 104);
    v18[0] = 0LL;
    v18[1] = 0LL;
    *(_DWORD *)(a1 + 97) = 0;
    *(_WORD *)(a1 + 101) = 0;
    if (sub_1001C4454(v3, a1 + 65, a1 + 81, 0x10uLL))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
        sub_10067A740();
      }
    }

    else if (sub_1001C4454(a1 + 65, v3, (uint64_t)v18, 0x10uLL))
    {
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
        sub_10067A6E0();
      }
    }

    else
    {
      *(_DWORD *)(a1 + 97) = v18[0];
      *(_WORD *)(a1 + 101) = WORD2(v18[0]);
      uint64_t v10 = (os_log_s *)qword_1008F7600;
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 68157954;
        int v15 = 16;
        __int16 v16 = 2096;
        uint64_t v17 = a1 + 81;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "fcCloudIRK %.16P ", buf, 0x12u);
      }

      uint64_t v11 = (os_log_s *)qword_1008F7600;
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 68157954;
        int v15 = 6;
        __int16 v16 = 2096;
        uint64_t v17 = a1 + 97;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "fMasterCloudAddress %.6P ", buf, 0x12u);
      }

      uint64_t v12 = sub_1002E6C74();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 160LL))(v12, a1 + 81, a1 + 97))
      {
        sub_100242FAC((uint64_t)v13);
        goto LABEL_4;
      }

      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
        sub_10067A680();
      }
    }

    sub_100242FAC((uint64_t)v13);
  }

  return 1LL;
}

void sub_1003F1698( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003F16B8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  if (*(_BYTE *)(a2 + 128))
  {
LABEL_3:
    if (*(_OWORD *)(a1 + 49) != 0LL && *(_BYTE *)(a1 + 241))
    {
      *(void *)__int128 buf = 0LL;
      uint64_t v23 = 0LL;
      sub_100242F28((uint64_t)buf, a1 + 104);
      uint64_t v6 = *(_WORD ***)(a1 + 176);
      uint64_t v7 = *(void ***)(a1 + 184);
      if (v6 == (_WORD **)v7)
      {
LABEL_9:
        int v9 = (char *)operator new(0x78uLL);
        uint64_t v10 = v9;
        *((void *)v9 + 11) = 0LL;
        uint64_t v11 = (void **)(v9 + 88);
        *((void *)v9 + 12) = 0LL;
        *((void *)v9 + 13) = 0LL;
        v9[112] = -1;
        *(void *)int v9 = a2;
        *(_OWORD *)(v9 + _Block_object_dispose(va, 8) = 0u;
        *((_DWORD *)v9 + 21) = 0;
        *(_OWORD *)(v9 + 24) = 0u;
        *(_OWORD *)(v9 + 40) = 0u;
        *(_OWORD *)(v9 + 56) = 0u;
        *((_DWORD *)v9 + 1_Block_object_dispose(va, 8) = 0;
        uint64_t v21 = v9;
        if (a3)
        {
          *(_OWORD *)(v9 + _Block_object_dispose(va, 8) = *a3;
          v9[77] = 0;
          *(_DWORD *)(v9 + 7_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 128);
          *((_WORD *)v9 + 41) = *(_WORD *)(a2 + 132);
        }

        if (sub_1003F01F0((uint64_t *)v9, a1 + 49, a1 + 65))
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
            sub_10067A628();
          }
          if (v10[111] < 0) {
            operator delete(*v11);
          }
          operator delete(v10);
          uint64_t v12 = 1LL;
          goto LABEL_37;
        }

        sub_100381E90((void **)(a1 + 176), &v21);
        if (qword_1008D67B8 != -1) {
          dispatch_once(&qword_1008D67B8, &stru_100896238);
        }
        sub_10053645C((uint64_t)off_1008D67B0, (unsigned __int8 *)a2);
      }

      else
      {
        uint64_t v8 = *(void ***)(a1 + 176);
        while (**v8 != a2)
        {
          if (++v8 == v7) {
            goto LABEL_9;
          }
        }

        while (1)
        {
          int v13 = *v6;
          if (*(void *)*v6 == a2) {
            break;
          }
          if (++v6 == (_WORD **)v7)
          {
            int v13 = 0LL;
            break;
          }
        }

        uint64_t v21 = (char *)v13;
        if (a3)
        {
          *(_OWORD *)(v13 + 4) = *a3;
          *((_BYTE *)v13 + 77) = 0;
          __int16 v19 = *(_WORD *)(*(void *)v13 + 132LL);
          *(_DWORD *)(v13 + 39) = *(_DWORD *)(*(void *)v13 + 128LL);
          v13[41] = v19;
        }
      }

      (*(void (**)(void))(**(void **)(a1 + 168) + 144LL))(*(void *)(a1 + 168));
      uint64_t v12 = 0LL;
LABEL_37:
      sub_100242FAC((uint64_t)buf);
      return v12;
    }

    uint64_t v14 = (os_log_s *)qword_1008F7600;
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *(unsigned __int8 *)(a1 + 241);
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Device not signed in / master key not available. signed in = %d",  buf,  8u);
    }
  }

  else
  {
    unint64_t v16 = 0LL;
    while (v16 != 5)
    {
      unint64_t v17 = v16;
      if (*(unsigned __int8 *)(a2 + 129 + v16++))
      {
        if (v17 < 5) {
          goto LABEL_3;
        }
        break;
      }
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
      sub_10067A7CC();
    }
  }

  return 1LL;
}

void sub_1003F19C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

__n128 sub_1003F19DC(_WORD *a1, __n128 *a2)
{
  if (a2)
  {
    __n128 result = *a2;
    *(__n128 *)(a1 + 4) = *a2;
    *((_BYTE *)a1 + 77) = 0;
    __int16 v3 = *(_WORD *)(*(void *)a1 + 132LL);
    *(_DWORD *)(a1 + 39) = *(_DWORD *)(*(void *)a1 + 128LL);
    a1[41] = v3;
  }

  return result;
}

uint64_t sub_1003F1A04(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = (os_log_s *)(id)qword_1008F7600;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)a2, __p);
    uint64_t v7 = v32 >= 0 ? __p : (void **)__p[0];
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "updating encryption key for device %{public}s",  (uint8_t *)&buf,  0xCu);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
  }

  if (!a2[128])
  {
    unint64_t v18 = 0LL;
    while (v18 != 5)
    {
      unint64_t v19 = v18;
      if (a2[v18++ + 129])
      {
        if (v19 < 5) {
          goto LABEL_9;
        }
        break;
      }
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
      sub_10067A7F8();
    }
    return 1LL;
  }

void sub_1003F1E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F1E6C(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  if (!a2[128])
  {
    unint64_t v17 = 0LL;
    while (v17 != 5)
    {
      unint64_t v18 = v17;
      if (a2[v17++ + 129])
      {
        if (v18 < 5) {
          goto LABEL_3;
        }
        break;
      }
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
      sub_10067A824();
    }
    return 1LL;
  }

void sub_1003F2338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003F2384(uint64_t a1, void *a2, void *a3)
{
  if ((sub_1003ECFD0() & 1) != 0)
  {
    if (*a2 != *(void *)(a1 + 49) || a2[1] != *(void *)(a1 + 57))
    {
      if (!a2 || !a3) {
        goto LABEL_31;
      }
      goto LABEL_20;
    }

    BOOL v9 = *a3 != *(void *)(a1 + 65) || a3[1] != *(void *)(a1 + 73);
    if (a2 && a3 && v9)
    {
LABEL_20:
      uint64_t v10 = (os_log_s *)qword_1008F7600;
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *(unsigned __int8 *)(a1 + 240);
        LODWORD(v19) = 67109376;
        HIDWORD(v19) = v11;
        LOWORD(v20[0]) = 1024;
        *(_DWORD *)((char *)v20 + 2) = 1;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "MagicPairingInitialized: %d, keysChanged: %d, Cloud master keys are updated. Updating local keys",  (uint8_t *)&v19,  0xEu);
      }

      *(_OWORD *)(a1 + 49) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 65) = *(_OWORD *)a3;
      uint64_t v12 = sub_1002E6C74();
      int v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 152LL))(v12, a1 + 49, a1 + 65);
      uint64_t v14 = sub_1002E6E00();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 8LL))(v14))
      {
        int v15 = (os_log_s *)qword_1008F7600;
        if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v19 = 0x1004100202LL;
          LOWORD(v20[0]) = 2096;
          *(void *)((char *)v20 + 2) = a1 + 49;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "cloudKeysAvailable Acc Master Key:%.16P",  (uint8_t *)&v19,  0x12u);
        }

        int v16 = (os_log_s *)qword_1008F7600;
        if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v19 = 0x1004100202LL;
          LOWORD(v20[0]) = 2096;
          *(void *)((char *)v20 + 2) = a1 + 65;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "cloudKeysAvailable Acc Master Hint:%.16P",  (uint8_t *)&v19,  0x12u);
        }
      }

      if (v13)
      {
        if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
          sub_10067AA74();
        }
      }

      else
      {
        uint64_t v19 = 0LL;
        v20[0] = 0LL;
        sub_100242F28((uint64_t)&v19, a1 + 104);
        uint64_t v17 = *(void *)(a1 + 176);
        uint64_t v18 = *(void *)(a1 + 184);
        sub_100242FAC((uint64_t)&v19);
        if (v17 == v18 && !*(_BYTE *)(a1 + 240))
        {
          if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
            sub_10067AA48();
          }
          (*(void (**)(void))(**(void **)(a1 + 168) + 32LL))(*(void *)(a1 + 168));
        }
      }

      return;
    }

    if (v9)
    {
LABEL_31:
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEBUG)) {
        sub_10067A9E4();
      }
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
        sub_10067A97C();
      }
      return;
    }

    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEBUG)) {
      sub_10067A918();
    }
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
      sub_10067A8B0();
    }
  }

  else
  {
    uint64_t v7 = (os_log_s *)qword_1008F7600;
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v19) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "cloudKeysAvailable, Magic Pairing not supported",  (uint8_t *)&v19,  2u);
    }
  }

void sub_1003F271C(uint64_t a1, void *a2, void *a3)
{
}

uint64_t sub_1003F2724(uint64_t a1, uint64_t a2)
{
  v28[0] = 0LL;
  v28[1] = 0LL;
  sub_100242F28((uint64_t)v28, a1 + 104);
  BOOL v4 = *(unsigned __int8 **)a2;
  for (uint64_t i = *(unsigned __int8 ****)(a1 + 176); i != *(unsigned __int8 ****)(a1 + 184); ++i)
  {
    if (**i == v4)
    {
      uint64_t v17 = (os_log_s *)(id)qword_1008F7600;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C((uint64_t)v4, &__p);
        uint64_t v18 = v31 >= 0 ? &__p : (__n128 *)__p.n128_u64[0];
        *(_DWORD *)__int128 buf = 136446210;
        unsigned int v33 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Update Magic pairing device from cloud %{public}s",  buf,  0xCu);
        if (v31 < 0) {
          operator delete((void *)__p.n128_u64[0]);
        }
      }

      goto LABEL_35;
    }
  }

  uint64_t v6 = (os_log_s *)(id)qword_1008F7600;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C((uint64_t)v4, &__p);
    uint64_t v7 = v31 >= 0 ? &__p : (__n128 *)__p.n128_u64[0];
    *(_DWORD *)__int128 buf = 136446210;
    unsigned int v33 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "New Magic pairing device from cloud %{public}s",  buf,  0xCu);
    if (v31 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }

  unint64_t v8 = *(void *)(a1 + 192);
  BOOL v9 = *(void **)(a1 + 184);
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = *(void *)(a1 + 176);
    uint64_t v12 = ((uint64_t)v9 - v11) >> 3;
    uint64_t v13 = v8 - v11;
    uint64_t v14 = v13 >> 2;
    else {
      unint64_t v15 = v14;
    }
    if (v15) {
      int v16 = (char *)sub_100008BA0(a1 + 192, v15);
    }
    else {
      int v16 = 0LL;
    }
    uint64_t v19 = &v16[8 * v12];
    char v20 = &v16[8 * v15];
    *(void *)uint64_t v19 = a2;
    uint64_t v10 = v19 + 8;
    uint64_t v22 = *(char **)(a1 + 176);
    uint64_t v21 = *(char **)(a1 + 184);
    if (v21 != v22)
    {
      do
      {
        uint64_t v23 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v19 - 1) = v23;
        v19 -= 8;
      }

      while (v21 != v22);
      uint64_t v21 = *(char **)(a1 + 176);
    }

    *(void *)(a1 + sub_100242FAC(v58 - 176) = v19;
    *(void *)(a1 + 184) = v10;
    *(void *)(a1 + 192) = v20;
    if (v21) {
      operator delete(v21);
    }
  }

  else
  {
    *BOOL v9 = a2;
    uint64_t v10 = v9 + 1;
  }

  *(void *)(a1 + 184) = v10;
LABEL_35:
  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_100896238);
  }
  if ((sub_100535618((uint64_t)off_1008D67B0, v4) & 1) == 0 && *(_BYTE *)(a1 + 48))
  {
    if (qword_1008D67A8 != -1) {
      dispatch_once(&qword_1008D67A8, &stru_1008961F8);
    }
    sub_100530264((uint64_t)off_1008D67A0, (uint64_t)v4);
    __n128 __p = 0uLL;
    int v30 = 0;
    sub_10052525C((uint64_t)&__p, (_OWORD *)(a2 + 40), 4u);
    if (qword_1008D67B8 != -1) {
      dispatch_once(&qword_1008D67B8, &stru_100896238);
    }
    sub_10053584C((uint64_t)off_1008D67B0, v4, &__p, 0);
    nullsub_63(&__p, v24);
  }

  if (qword_1008D67B8 != -1) {
    dispatch_once(&qword_1008D67B8, &stru_100896238);
  }
  sub_10053645C((uint64_t)off_1008D67B0, v4);
  if (*(_BYTE *)(a1 + 48))
  {
    __p.n128_u8[0] = 0;
    sub_100242CA4(&__p);
    sub_1003EDDE0((void *)a1);
    sub_100242CD0(&__p);
    if (((unint64_t)*(unsigned __int8 *)(a2 + 78) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 79) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 80) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 81) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 82) << 8) | *(unsigned __int8 *)(a2 + 83))
    {
      uint64_t v25 = sub_100404FE8();
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472LL;
      void v27[2] = sub_1003F2BA4;
      _OWORD v27[3] = &unk_10087EB20;
      _OWORD v27[4] = a2;
      sub_100405384(v25, v27);
    }

    sub_100242CD8(&__p);
  }

  sub_1003F0354(a1, (uint64_t)v4);
  *(_DWORD *)(a2 + 84) = 1;
  *(_BYTE *)(a1 + 240) = 1;
  return sub_100242FAC((uint64_t)v28);
}

void sub_1003F2B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003F2BA4(uint64_t a1)
{
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_100896258);
  }
  sub_1005E459C((uint64_t)off_1008D6600, (unsigned __int8 *)(*(void *)(a1 + 32) + 77LL), *(void *)(a1 + 32) + 24LL);
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_100896278);
  }
  sub_100621334(qword_1008D5F18, (unsigned __int8 *)(*(void *)(a1 + 32) + 77LL), *(void *)(a1 + 32) + 8LL);
}

uint64_t sub_1003F2C3C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v248[1] = 0LL;
  v248[0] = 0LL;
  sub_100242F28((uint64_t)v248, a1 + 104);
  *(_BYTE *)(a1 + 242) = 1;
  BOOL v4 = (os_log_s *)(id)qword_1008F7600;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "device info update callback from cloudkit for %d devices",  buf,  8u);
  }

  if (a3)
  {
    uint64_t v5 = 0LL;
    uint64_t v227 = a3;
    do
    {
      uint64_t v6 = a2 + 152 * v5;
      *(_DWORD *)v249 = *(_DWORD *)v6;
      LOWORD(v250) = *(_WORD *)(v6 + 4);
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_100896218);
      }
      uint64_t v7 = (unsigned __int8 *)sub_1003FFEB0(off_1008D5F48, (uint64_t)v249, 1);
      unint64_t v8 = v7;
      uint64_t v9 = a2 + 152 * v5;
      __int16 v11 = *(_WORD *)(v9 + 150);
      uint64_t v10 = (_WORD *)(v9 + 150);
      if ((v11 & 2) != 0) {
        sub_1003D84C8((uint64_t)v7, 1, 1);
      }
      uint64_t v232 = v5;
      if (v8[128])
      {
LABEL_10:
        unint64_t v245 = 0LL;
        int v244 = 1;
        memset(&v257, 0, sizeof(v257));
        sub_10002418C(&v257, (char *)(a2 + 152 * v5 + 74));
        int v12 = 0;
        uint64_t v13 = (int *)(a2 + 152 * v5 + 138);
        do
        {
          if ((*v13 & (1 << v12)) != 0)
          {
            *(void *)int v253 = 0LL;
            *(void *)__int128 buf = 0LL;
            *(void *)&uint8_t buf[8] = 0LL;
            sub_1000B0400((uint64_t)v253);
            *(void *)__int128 buf = *(int *)v253;
            *(void *)&uint8_t buf[8] = *(__int16 *)&v253[4];
            sub_1003D1FC4((uint64_t)v8, 1 << v12, 4, buf, 0);
          }

          ++v12;
        }

        while (v12 != 31);
        uint64_t v14 = (os_log_s *)(id)qword_1008F75E0;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = *v13;
          if (qword_1008D60D0 != -1) {
            dispatch_once(&qword_1008D60D0, &stru_1008962B8);
          }
          int v16 = sub_1004272C4((uint64_t)off_1008D60C8, (uint64_t)v8);
          int v17 = *(unsigned __int8 *)(a2 + 152 * v232 + 130);
          *(_DWORD *)__int128 buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v15;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v16;
          *(_WORD *)&_BYTE buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Updating in memory device service capability details: received service mask %x, device service mask after up date %x, blob version %d",  buf,  0x14u);
        }

        uint64_t v18 = sub_1002E6E00();
        uint64_t v19 = a2;
        if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 8LL))(v18))
        {
          char v20 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C((uint64_t)v8, v253);
            uint64_t v21 = v253;
            if (v256 < 0) {
              uint64_t v21 = *(_BYTE **)v253;
            }
            uint64_t v22 = a2 + 152 * v232;
            int v23 = *(_DWORD *)(v22 + 38);
            *(_DWORD *)__int128 buf = 136447490;
            *(void *)&uint8_t buf[4] = v21;
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v23;
            *(_WORD *)&_BYTE buf[18] = 1040;
            *(_DWORD *)&_BYTE buf[20] = 16;
            *(_WORD *)&uint8_t buf[24] = 2096;
            *(void *)&buf[26] = v22 + 6;
            *(_WORD *)&buf[34] = 1040;
            *(_DWORD *)&buf[36] = 16;
            *(_WORD *)char v252 = 2096;
            *(void *)&v252[2] = v22 + 22;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Update received for magic device %{public}s with info,  ratchet = %d accessory key %.16P and Hint %.16P",  buf,  0x32u);
            if (v256 < 0) {
              operator delete(*(void **)v253);
            }
          }

          uint64_t v24 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C((uint64_t)v8, v253);
            uint64_t v25 = v253;
            if (v256 < 0) {
              uint64_t v25 = *(_BYTE **)v253;
            }
            char v26 = &v257;
            if ((v257.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              char v26 = (std::string *)v257.__r_.__value_.__r.__words[0];
            }
            uint64_t v27 = a2 + 152 * v232;
            *(_DWORD *)__int128 buf = 136447490;
            *(void *)&uint8_t buf[4] = v25;
            *(_WORD *)&_BYTE buf[12] = 2080;
            *(void *)&_BYTE buf[14] = v26;
            *(_WORD *)&_BYTE buf[22] = 1040;
            *(_DWORD *)&uint8_t buf[24] = 16;
            *(_WORD *)&buf[28] = 2096;
            *(void *)&buf[30] = v27 + 42;
            *(_WORD *)&buf[38] = 1040;
            *(_DWORD *)char v252 = 16;
            *(_WORD *)&v252[4] = 2096;
            *(void *)&v252[6] = v27 + 58;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Update received for magic device %{public}s with info,  name = %s IRK %.16P and Enc Key %.16P",  buf,  0x36u);
            if (v256 < 0) {
              operator delete(*(void **)v253);
            }
          }

          uint64_t v19 = a2;
        }

        for (uint64_t i = *(unsigned __int8 ****)(a1 + 176); i != *(unsigned __int8 ****)(a1 + 184); ++i)
        {
          int v29 = *i;
          if (**i == v8) {
            goto LABEL_37;
          }
        }

        int v29 = 0LL;
LABEL_37:
        unsigned int v243 = 0;
        BOOL v30 = sub_1003D55EC((uint64_t)v8, &v243, (_DWORD *)&v245 + 1, &v245, &v244);
        char v31 = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v32 = v19 + 152 * v232;
          int v33 = *(unsigned __int16 *)(v32 + 142);
          LODWORD(vsub_100242FAC(v1 - 32) = *(unsigned __int16 *)(v32 + 144);
          *(_DWORD *)__int128 buf = 67110400;
          *(_DWORD *)&uint8_t buf[4] = v33;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v32;
          *(_WORD *)&_BYTE buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v30;
          *(_WORD *)&_BYTE buf[20] = 1024;
          *(_DWORD *)&_BYTE buf[22] = HIDWORD(v245);
          *(_WORD *)&buf[26] = 1024;
          *(_DWORD *)&buf[28] = v245;
          *(_WORD *)&uint8_t buf[32] = 1024;
          *(_DWORD *)&buf[34] = v243;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Device vid/pid from cloud vid - %x, cloud pid - %x; (%d) Local vid - %x, Local pid - %x, Local vidSrc - %x",
            buf,
            0x26u);
        }

        uint64_t v34 = a2;
        uint64_t v35 = v232;
        uint64_t v36 = a2 + 152 * v232;
        int v38 = *(unsigned __int16 *)(v36 + 142);
        int v37 = (unsigned __int16 *)(v36 + 142);
        if (v38)
        {
          uint64_t v39 = a2 + 152 * v232;
          int v41 = *(unsigned __int16 *)(v39 + 144);
          __int128 v40 = (unsigned __int16 *)(v39 + 144);
          if (v41)
          {
            if (v243 <= 1) {
              int v42 = 1;
            }
            else {
              int v42 = v243;
            }
            uint64_t v43 = (os_log_s *)(id)qword_1008F7600;
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
            {
              int v44 = *v37;
              int v45 = *v40;
              *(_DWORD *)__int128 buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v44;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v45;
              _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "New Magic Paired Device's Cloud vid - %x, Cloud pid - %x",  buf,  0xEu);
            }

            int v46 = *v37;
            int v47 = *v40;
            unint64_t v245 = __PAIR64__(v46, v47);
            sub_1003D6538((uint64_t)v8, v42, v46, v47, v244);
            uint64_t v34 = a2;
            uint64_t v35 = v232;
          }
        }

        __int128 v228 = (_BYTE *)(v34 + 152 * v35 + 130);
        uint64_t v48 = v34;
        if (*v228)
        {
          uint64_t v49 = v34 + 152 * v232;
          unsigned int v52 = *(unsigned __int8 *)(v49 + 147);
          char v50 = (_BYTE *)(v49 + 147);
          unsigned int v51 = v52;
          unsigned int v53 = v50[1];
          int v54 = v53 & 0xF;
          unsigned int v55 = v53 >> 4;
          int v56 = v54 | (v53 >> 4 << 8);
          uint64_t v57 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v56;
            _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "Retrieved double tap from cloud: %d",  buf,  8u);
          }

          __int128 v226 = v10;
          if (qword_1008D60E0 != -1) {
            dispatch_once(&qword_1008D60E0, &stru_100896298);
          }
          int v58 = sub_10021EA3C((uint64_t)off_1008D60D8, (uint64_t)v8, v54 | (v55 << 8), (v51 >> 4) & 1);
          BOOL v59 = v56 == v58;
          if (v56 == v58) {
            unsigned int v60 = v54;
          }
          else {
            unsigned int v60 = v58;
          }
          if (v59) {
            unsigned int v61 = v55;
          }
          else {
            unsigned int v61 = BYTE1(v58);
          }
          if (sub_1003D635C((uint64_t)v8) != v58)
          {
            int v62 = (os_log_s *)(id)qword_1008F7600;
            if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "Updating double tap settings from cloud",  buf,  2u);
            }

            if ((v51 & 8) != 0)
            {
              if (qword_1008D60E0 != -1) {
                dispatch_once(&qword_1008D60E0, &stru_100896298);
              }
              sub_100220C0C((uint64_t)off_1008D60D8, (uint64_t)v8, v61, v60, 4);
            }
          }

          int v63 = *v50 & 3;
          if (v63 == 2) {
            uint64_t v64 = 2LL;
          }
          else {
            uint64_t v64 = v63 == 1;
          }
          if (sub_1003DF900((uint64_t)v8) != (_DWORD)v64)
          {
            if (qword_1008D60E0 != -1) {
              dispatch_once(&qword_1008D60E0, &stru_100896298);
            }
            sub_1002209A8((uint64_t)off_1008D60D8, (uint64_t)v8, v64, 4u);
          }

          uint64_t v65 = a2 + 152 * v232;
          if (*(_BYTE *)(v65 + 149))
          {
            sub_1003E1694((uint64_t)v8, *(unsigned __int8 *)(v65 + 149));
            int v66 = (os_log_s *)(id)qword_1008F7600;
            if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
            {
              sub_1003CF00C((uint64_t)v8, buf);
              int v67 = buf[23];
              int v68 = *(_BYTE **)buf;
              int v69 = sub_1003E16E4((uint64_t)v8);
              *(_DWORD *)int v253 = 136446466;
              int v70 = buf;
              if (v67 < 0) {
                int v70 = v68;
              }
              *(void *)&v253[4] = v70;
              __int16 v254 = 1024;
              int v255 = v69;
              _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "Color info updated for device %{public}s, color code %d",  v253,  0x12u);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
          }

          unsigned int v71 = *v50 & 4;
          int v72 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C((uint64_t)v8, v253);
            int v73 = v256;
            int v74 = *(_BYTE **)v253;
            int v75 = sub_1003DF944((uint64_t)v8);
            int v76 = v253;
            if (v73 < 0) {
              int v76 = v74;
            }
            if (v71) {
              __int16 v77 = "Enabled";
            }
            else {
              __int16 v77 = "Disabled";
            }
            *(_DWORD *)__int128 buf = 136446722;
            *(void *)&uint8_t buf[4] = v76;
            *(_WORD *)&_BYTE buf[12] = 2080;
            if (v75) {
              int v78 = "Enabled";
            }
            else {
              int v78 = "Disabled";
            }
            *(void *)&_BYTE buf[14] = v77;
            *(_WORD *)&_BYTE buf[22] = 2080;
            *(void *)&uint8_t buf[24] = v78;
            _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEFAULT,  "In Ear Detection state update from cloud for device %{public}s is %s, local state %s",  buf,  0x20u);
            if (v256 < 0) {
              operator delete(*(void **)v253);
            }
          }

          if (sub_1003DF944((uint64_t)v8) != v71 >> 2)
          {
            if (qword_1008D60E0 != -1) {
              dispatch_once(&qword_1008D60E0, &stru_100896298);
            }
            sub_100220DDC((uint64_t)off_1008D60D8, (uint64_t)v8, v71 != 0, 4u);
          }

          __int16 v79 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C((uint64_t)v8, buf);
            __int16 v80 = buf;
            if (buf[23] < 0) {
              __int16 v80 = *(_BYTE **)buf;
            }
            int v81 = (unsigned __int16)*v226;
            *(_DWORD *)int v253 = 136446466;
            *(void *)&v253[4] = v80;
            __int16 v254 = 1024;
            int v255 = v81;
            _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "Update listening mode services for device %{public}s with service - %d",  v253,  0x12u);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }

          uint64_t v82 = ((unsigned __int16)*v226 >> 5) & 0x700 | ((unsigned __int16)*v226 >> 10) & 7u;
          __int16 v83 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C((uint64_t)v8, v253);
            int v84 = v256;
            __int16 v85 = *(_BYTE **)v253;
            int v86 = sub_1003DFBD0((uint64_t)v8);
            *(_DWORD *)__int128 buf = 136446722;
            __int16 v87 = v253;
            if (v84 < 0) {
              __int16 v87 = v85;
            }
            *(void *)&uint8_t buf[4] = v87;
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v86;
            *(_WORD *)&_BYTE buf[18] = 1024;
            *(_DWORD *)&_BYTE buf[20] = v82;
            _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_DEFAULT,  "Click Hold mode info update for device %{public}s, current value: %d, cloud value %d",  buf,  0x18u);
            if (v256 < 0) {
              operator delete(*(void **)v253);
            }
          }

          if ((_DWORD)v82 && sub_1003DFBD0((uint64_t)v8) != (_DWORD)v82)
          {
            if (qword_1008D60E0 != -1) {
              dispatch_once(&qword_1008D60E0, &stru_100896298);
            }
            sub_100215778((uint64_t)off_1008D60D8, (uint64_t)v8, 22LL, v82, 4u);
            int v88 = (os_log_s *)(id)qword_1008F7600;
            if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
            {
              sub_1003CF00C((uint64_t)v8, buf);
              int v89 = buf[23];
              int v90 = *(_BYTE **)buf;
              int v91 = sub_1003DFBD0((uint64_t)v8);
              *(_DWORD *)int v253 = 136446466;
              int v92 = buf;
              if (v89 < 0) {
                int v92 = v90;
              }
              *(void *)&v253[4] = v92;
              __int16 v254 = 1024;
              int v255 = v91;
              _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEFAULT,  "Click Hold mode info updated for device %{public}s, new mode %d",  v253,  0x12u);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
          }

          uint64_t v93 = ((unsigned __int16)*v226 >> 7) & 7;
          int v94 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C((uint64_t)v8, v253);
            int v95 = v256;
            int v96 = *(_BYTE **)v253;
            int v97 = sub_1003DFA7C((uint64_t)v8);
            *(_DWORD *)__int128 buf = 136446722;
            int v98 = v253;
            if (v95 < 0) {
              int v98 = v96;
            }
            *(void *)&uint8_t buf[4] = v98;
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v97;
            *(_WORD *)&_BYTE buf[18] = 1024;
            *(_DWORD *)&_BYTE buf[20] = v93;
            _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "Listening mode config update for device %{public}s, current value: %d, cloud configs: %d",  buf,  0x18u);
            if (v256 < 0) {
              operator delete(*(void **)v253);
            }
          }

          if ((_DWORD)v93 && sub_1003DFA7C((uint64_t)v8) != (_DWORD)v93)
          {
            if (qword_1008D60E0 != -1) {
              dispatch_once(&qword_1008D60E0, &stru_100896298);
            }
            sub_100215778((uint64_t)off_1008D60D8, (uint64_t)v8, 26LL, v93, 4u);
            __int16 v99 = (os_log_s *)(id)qword_1008F7600;
            if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
            {
              sub_1003CF00C((uint64_t)v8, buf);
              int v100 = buf[23];
              __int16 v101 = *(_BYTE **)buf;
              int v102 = sub_1003DFA7C((uint64_t)v8);
              *(_DWORD *)int v253 = 136446466;
              __int16 v103 = buf;
              if (v100 < 0) {
                __int16 v103 = v101;
              }
              *(void *)&v253[4] = v103;
              __int16 v254 = 1024;
              int v255 = v102;
              _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_DEFAULT,  "Listening mode config updated for device %{public}s, new configs %d",  v253,  0x12u);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
          }

          unsigned int v104 = *v226 & 0x40;
          __int16 v105 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C((uint64_t)v8, v253);
            int v106 = v256;
            __int16 v107 = *(_BYTE **)v253;
            int v108 = sub_1003D2B2C((uint64_t)v8, 32);
            *(_DWORD *)__int128 buf = 136446722;
            __int16 v109 = v253;
            if (v106 < 0) {
              __int16 v109 = v107;
            }
            *(void *)&uint8_t buf[4] = v109;
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v108;
            *(_WORD *)&_BYTE buf[18] = 1024;
            *(_DWORD *)&_BYTE buf[20] = v104 >> 6;
            _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_DEFAULT,  "TiPi supported flag update from macOS %{public}s, current local value: %d, macOS value: %d",  buf,  0x18u);
            if (v256 < 0) {
              operator delete(*(void **)v253);
            }
          }

          if (v104)
          {
            if ((sub_1003D2B2C((uint64_t)v8, 32) & 1) == 0)
            {
              sub_1003D6FAC((uint64_t)v8, 32, 1);
            }
          }

          uint64_t v110 = (*(unsigned __int8 *)v226 >> 2) & 3;
          __int16 v111 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C((uint64_t)v8, v253);
            int v112 = v256;
            __int16 v113 = *(_BYTE **)v253;
            int v114 = sub_1003DFC9C((uint64_t)v8);
            *(_DWORD *)__int128 buf = 136446722;
            __int16 v115 = v253;
            if (v112 < 0) {
              __int16 v115 = v113;
            }
            *(void *)&uint8_t buf[4] = v115;
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v114;
            *(_WORD *)&_BYTE buf[18] = 1024;
            *(_DWORD *)&_BYTE buf[20] = v110;
            _os_log_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_DEFAULT,  "One Bud ANC mode update for device %{public}s, current value: %d, cloud value %d",  buf,  0x18u);
            if (v256 < 0) {
              operator delete(*(void **)v253);
            }
          }

          char v116 = sub_1003D2B2C((uint64_t)v8, 43);
          uint64_t v48 = a2;
          if ((_DWORD)v110) {
            char v117 = v116;
          }
          else {
            char v117 = 1;
          }
          if ((v117 & 1) == 0 && sub_1003DFC9C((uint64_t)v8) != (_DWORD)v110)
          {
            if (qword_1008D60E0 != -1) {
              dispatch_once(&qword_1008D60E0, &stru_100896298);
            }
            sub_100215778((uint64_t)off_1008D60D8, (uint64_t)v8, 27LL, v110, 4u);
            int v118 = (os_log_s *)(id)qword_1008F7600;
            if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
            {
              sub_1003CF00C((uint64_t)v8, buf);
              int v119 = buf[23];
              int v120 = *(_BYTE **)buf;
              int v121 = sub_1003DFC9C((uint64_t)v8);
              *(_DWORD *)int v253 = 136446466;
              int v122 = buf;
              if (v119 < 0) {
                int v122 = v120;
              }
              *(void *)&v253[4] = v122;
              __int16 v254 = 1024;
              int v255 = v121;
              _os_log_impl( (void *)&_mh_execute_header,  v118,  OS_LOG_TYPE_DEFAULT,  "One Bud ANC mode updated for device %{public}s, new mode %d",  v253,  0x12u);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }

            uint64_t v48 = a2;
          }
        }

        if (v29)
        {
          uint64_t v123 = v48 + 152 * v232;
          *(_OWORD *)(v29 + 5) = *(_OWORD *)(v123 + 6);
          *(_OWORD *)(v29 + 7) = *(_OWORD *)(v123 + 22);
          int v124 = *(_DWORD *)(v123 + 38);
          if (v124) {
            *((_DWORD *)v29 + 1_Block_object_dispose(va, 8) = v124;
          }
          uint64_t v125 = v48 + 152 * v232;
          *(_OWORD *)(v29 + 1) = *(_OWORD *)(v125 + 42);
          *((_BYTE *)v29 + 77) = 0;
          __int16 v126 = *((_WORD *)*v29 + 66);
          *(_DWORD *)((char *)v29 + 7_Block_object_dispose(va, 8) = *((_DWORD *)*v29 + 32);
          *((_WORD *)v29 + 41) = v126;
          *(_OWORD *)(v29 + 3) = *(_OWORD *)(v125 + 58);
          else {
            std::string __str = v257;
          }
          std::string::operator=((std::string *)(v29 + 11), &__str);
          sub_1003D17B0((uint64_t)v8, &v257, 1);
          *((_DWORD *)v29 + 21) = 2;
          if (*(_BYTE *)(a1 + 48)
            && ((unint64_t)*((unsigned __int8 *)v29 + 78) << 40) | ((unint64_t)*((unsigned __int8 *)v29
                                                                                             + 79) << 32) | ((unint64_t)*((unsigned __int8 *)v29 + 80) << 24) | ((unint64_t)*((unsigned __int8 *)v29 + 81) << 16) | ((unint64_t)*((unsigned __int8 *)v29 + 82) << 8) | *((unsigned __int8 *)v29 + 83))
          {
            uint64_t v138 = sub_100404FE8();
            v240[0] = _NSConcreteStackBlock;
            v240[1] = 3221225472LL;
            v240[2] = sub_1003F5458;
            v240[3] = &unk_10087F900;
            v240[4] = v29;
            v240[5] = v48;
            int v241 = v232;
            sub_1004054B4(v138, v240);
          }
        }

        else
        {
          uint64_t v130 = (unsigned __int8 *)operator new(0x78uLL);
          uint64_t v131 = v48 + 152 * v232;
          unint64_t v132 = (_OWORD *)(v131 + 6);
          sub_1003FCFD0( (uint64_t)v130,  (uint64_t)v8,  (_OWORD *)(v131 + 42),  (_OWORD *)(v131 + 58),  (_OWORD *)(v131 + 6),  (_OWORD *)(v131 + 22),  *(_DWORD *)(v131 + 38));
          if (qword_1008D67B8 != -1) {
            dispatch_once(&qword_1008D67B8, &stru_100896238);
          }
          char v133 = sub_100535618((uint64_t)off_1008D67B0, v8);
          if (*(_BYTE *)(a1 + 48)
            && ((unint64_t)v130[78] << 40) | ((unint64_t)v130[79] << 32) | ((unint64_t)v130[80] << 24) | ((unint64_t)v130[81] << 16) | ((unint64_t)v130[82] << 8) | v130[83])
          {
            uint64_t v134 = sub_100404FE8();
            v238[0] = _NSConcreteStackBlock;
            v238[1] = 3221225472LL;
            v238[2] = sub_1003F550C;
            v238[3] = &unk_10087F900;
            v238[4] = v130;
            v238[5] = v48;
            int v239 = v232;
            sub_1004054B4(v134, v238);
          }

          int v136 = *(void **)(a1 + 184);
          unint64_t v135 = *(void *)(a1 + 192);
          if ((unint64_t)v136 >= v135)
          {
            uint64_t v139 = *(void *)(a1 + 176);
            uint64_t v140 = ((uint64_t)v136 - v139) >> 3;
            uint64_t v141 = v135 - v139;
            uint64_t v142 = v141 >> 2;
            else {
              unint64_t v143 = v142;
            }
            if (v143) {
              __int128 v144 = (char *)sub_100008BA0(a1 + 192, v143);
            }
            else {
              __int128 v144 = 0LL;
            }
            __int128 v145 = &v144[8 * v140];
            *(void *)__int128 v145 = v130;
            unint64_t v137 = v145 + 8;
            __int128 v147 = *(char **)(a1 + 176);
            __int128 v146 = *(char **)(a1 + 184);
            if (v146 == v147)
            {
              __int128 v149 = (void *)a1;
            }

            else
            {
              do
              {
                uint64_t v148 = *((void *)v146 - 1);
                v146 -= 8;
                *((void *)v145 - 1) = v148;
                v145 -= 8;
              }

              while (v146 != v147);
              __int128 v149 = (void *)a1;
              __int128 v146 = *(char **)(a1 + 176);
            }

            v149[22] = v145;
            v149[23] = v137;
            v149[24] = &v144[8 * v143];
            if (v146) {
              operator delete(v146);
            }
          }

          else
          {
            *int v136 = v130;
            unint64_t v137 = v136 + 1;
          }

          *(void *)(a1 + 184) = v137;
          if ((v133 & 1) != 0 || !*(_BYTE *)(a1 + 48))
          {
            __int128 v153 = (os_log_s *)(id)qword_1008F7600;
            if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
            {
              sub_1003CF00C((uint64_t)v8, buf);
              int v154 = buf;
              if (buf[23] < 0) {
                int v154 = *(_BYTE **)buf;
              }
              *(_DWORD *)int v253 = 136446210;
              *(void *)&v253[4] = v154;
              _os_log_impl( (void *)&_mh_execute_header,  v153,  OS_LOG_TYPE_DEFAULT,  "Stack is off it seems flush New Magic pairing device settings from cloud %{public}s",  v253,  0xCu);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }

            sub_1003D70B0((uint64_t)v8);
          }

          else
          {
            __int128 v150 = (os_log_s *)(id)qword_1008F7600;
            if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
            {
              sub_1003CF00C((uint64_t)v8, buf);
              __int128 v151 = buf;
              if (buf[23] < 0) {
                __int128 v151 = *(_BYTE **)buf;
              }
              *(_DWORD *)int v253 = 136446210;
              *(void *)&v253[4] = v151;
              _os_log_impl( (void *)&_mh_execute_header,  v150,  OS_LOG_TYPE_DEFAULT,  "New Magic pairing device from cloud %{public}s",  v253,  0xCu);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }

            if (qword_1008D67A8 != -1) {
              dispatch_once(&qword_1008D67A8, &stru_1008961F8);
            }
            sub_100530264((uint64_t)off_1008D67A0, (uint64_t)v8);
            memset(buf, 0, 20);
            sub_10052525C((uint64_t)buf, v132, 4u);
            if (qword_1008D67B8 != -1) {
              dispatch_once(&qword_1008D67B8, &stru_100896238);
            }
            sub_10053584C((uint64_t)off_1008D67B0, v8, (__n128 *)buf, 0);
            nullsub_63(buf, v152);
          }

          if (qword_1008D67B8 != -1) {
            dispatch_once(&qword_1008D67B8, &stru_100896238);
          }
          sub_10053645C((uint64_t)off_1008D67B0, v8);
          else {
            std::string __dst = v257;
          }
          std::string::operator=((std::string *)(v130 + 88), &__dst);
          sub_1003D17B0((uint64_t)v8, &v257, 0);
          *((_DWORD *)v130 + 21) = 2;
          sub_1003FE1B4(v8 + 128, buf);
          if (buf[23] >= 0) {
            __int128 v155 = buf;
          }
          else {
            __int128 v155 = *(_BYTE **)buf;
          }
          uint64_t v156 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v155));
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          __int16 v157 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
          int v158 = (void *)objc_claimAutoreleasedReturnValue([v157 cloudClient]);
          v236[0] = _NSConcreteStackBlock;
          v236[1] = 3221225472LL;
          v236[2] = sub_1003F55BC;
          v236[3] = &unk_100896058;
          v236[4] = v8;
          [v158 magicSettingsRecord:v156 completion:v236];

          if (sub_1003D2B2C((uint64_t)v8, 32) && !sub_1003DF988((uint64_t)v8))
          {
            __int16 v159 = (os_log_s *)(id)qword_1008F7600;
            if (os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT))
            {
              sub_1003CF00C((uint64_t)v8, v253);
              if (v256 >= 0) {
                int v160 = v253;
              }
              else {
                int v160 = *(_BYTE **)v253;
              }
              int v161 = sub_1003D2B2C((uint64_t)v8, 32);
              int v162 = sub_1003DF988((uint64_t)v8);
              *(_DWORD *)__int128 buf = 136446722;
              __int16 v163 = "No";
              if (v161) {
                __int16 v163 = "Yes";
              }
              *(void *)&uint8_t buf[4] = v160;
              *(_WORD *)&_BYTE buf[12] = 2080;
              *(void *)&_BYTE buf[14] = v163;
              *(_WORD *)&_BYTE buf[22] = 1024;
              *(_DWORD *)&uint8_t buf[24] = v162;
              _os_log_impl( (void *)&_mh_execute_header,  v159,  OS_LOG_TYPE_DEFAULT,  "%{public}s Initialize setSmartRouteMode via MagicPairing Tipi Support = %s current SR Mode =%d",  buf,  0x1Cu);
              if (v256 < 0) {
                operator delete(*(void **)v253);
              }
            }

            sub_1003DD65C((uint64_t)v8, 1LL);
          }
        }

        for (int j = 0; j != 31; ++j)
        {
          if ((*v13 & (1 << j)) != 0)
          {
            *(void *)int v253 = 0LL;
            *(void *)__int128 buf = 0LL;
            *(void *)&uint8_t buf[8] = 0LL;
            sub_1000B0400((uint64_t)v253);
            *(void *)__int128 buf = *(int *)v253;
            *(void *)&uint8_t buf[8] = *(__int16 *)&v253[4];
            sub_1003D1FC4((uint64_t)v8, 1 << j, 4, buf, 1);
          }
        }

        __int16 v165 = (os_log_s *)(id)qword_1008F75E0;
        if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
        {
          int v166 = *v13;
          if (qword_1008D60D0 != -1) {
            dispatch_once(&qword_1008D60D0, &stru_1008962B8);
          }
          int v167 = sub_1004272C4((uint64_t)off_1008D60C8, (uint64_t)v8);
          int v168 = *v228;
          *(_DWORD *)__int128 buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v166;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v167;
          *(_WORD *)&_BYTE buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v168;
          _os_log_impl( (void *)&_mh_execute_header,  v165,  OS_LOG_TYPE_DEFAULT,  "Device service capability details: received service mask %x, device service mask after update %x, blob version %d",  buf,  0x14u);
        }
      }

      else
      {
        uint64_t v127 = 0LL;
        while (v127 != 5)
        {
          if (v8[v127++ + 129])
          {
            break;
          }
        }

        __int16 v129 = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR)) {
          sub_10067AAD4(&v246, v247, v129);
        }
      }

      uint64_t v5 = v232 + 1;
    }

    while (v232 + 1 != v227);
  }

  memset(buf, 0, 24);
  __int16 v169 = *(uint64_t **)(a1 + 176);
  if (v169 != *(uint64_t **)(a1 + 184))
  {
    char v230 = 0;
    while (1)
    {
      uint64_t v170 = *v169;
      int v171 = *(_DWORD *)(*v169 + 84);
      if (v171 == 1)
      {
        *(_DWORD *)(v170 + 84) = 3;
        uint64_t v172 = *(void *)v170;
        uint64_t v173 = *(void *)&buf[8];
        if (*(void *)&buf[8] >= *(void *)&buf[16])
        {
          uint64_t v175 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
          unint64_t v176 = (uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 2;
          if (v176 <= v175 + 1) {
            unint64_t v176 = v175 + 1;
          }
          if (*(void *)&buf[16] - *(void *)buf >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v177 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v177 = v176;
          }
          if (v177) {
            int v178 = (char *)sub_100008BA0((uint64_t)&buf[16], v177);
          }
          else {
            int v178 = 0LL;
          }
          __int16 v179 = (uint64_t *)&v178[8 * v175];
          *__int16 v179 = v172;
          int v174 = v179 + 1;
          __int16 v181 = *(char **)buf;
          int v180 = *(char **)&buf[8];
          if (*(void *)&buf[8] != *(void *)buf)
          {
            do
            {
              uint64_t v182 = *((void *)v180 - 1);
              v180 -= 8;
              *--__int16 v179 = v182;
            }

            while (v180 != v181);
            int v180 = *(char **)buf;
          }

          *(void *)__int128 buf = v179;
          *(void *)&uint8_t buf[8] = v174;
          *(void *)&uint8_t buf[16] = &v178[8 * v177];
          if (v180) {
            operator delete(v180);
          }
        }

        else
        {
          **(void **)&uint8_t buf[8] = v172;
          int v174 = (void *)(v173 + 8);
        }

        *(void *)&uint8_t buf[8] = v174;
        __int16 v183 = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C(*(void *)v170, &v257);
          int v184 = (v257.__r_.__value_.__s.__size_ & 0x80u) == 0
               ? &v257
               : (std::string *)v257.__r_.__value_.__r.__words[0];
          *(_DWORD *)int v253 = 136446210;
          *(void *)&v253[4] = v184;
          _os_log_impl( (void *)&_mh_execute_header,  v183,  OS_LOG_TYPE_DEFAULT,  "Local device info for device %{public}s needs to be pruned",  v253,  0xCu);
        }

        int v171 = *(_DWORD *)(v170 + 84);
      }

      if (!v171) {
        break;
      }
      if (v171 == 2)
      {
        *(_DWORD *)(v170 + 84) = 1;
        __int16 v185 = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(v185, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C(*(void *)v170, &v257);
          int v186 = (v257.__r_.__value_.__s.__size_ & 0x80u) == 0
               ? &v257
               : (std::string *)v257.__r_.__value_.__r.__words[0];
          *(_DWORD *)int v253 = 136446210;
          *(void *)&v253[4] = v186;
          _os_log_impl( (void *)&_mh_execute_header,  v185,  OS_LOG_TYPE_DEFAULT,  "Local device info for device %{public}s needs to be updated",  v253,  0xCu);
        }

LABEL_290:
      }
    }

    __int16 v185 = (os_log_s *)(id)qword_1008F7600;
    if (os_log_type_enabled(v185, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(*(void *)v170, &v257);
      __int16 v187 = (v257.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v257 : (std::string *)v257.__r_.__value_.__r.__words[0];
      *(_DWORD *)int v253 = 136446210;
      *(void *)&v253[4] = v187;
      _os_log_impl( (void *)&_mh_execute_header,  v185,  OS_LOG_TYPE_DEFAULT,  "Local device info for device %{public}s needs to be sent to cloud",  v253,  0xCu);
    }

    char v230 = 1;
    goto LABEL_290;
  }

  char v230 = 0;
LABEL_294:
  sub_100242F54((uint64_t)v248);
  int v188 = *(unsigned __int8 ***)buf;
  if (*(void *)buf != *(void *)&buf[8])
  {
    while (1)
    {
      uint64_t v189 = sub_1002E6C74();
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v189 + 104LL))(v189, *v188);
      if (*(_BYTE *)(a1 + 48)) {
        break;
      }
LABEL_329:
    }

    uint64_t v190 = (uint64_t)*v188;
    __int16 v191 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
    int v192 = (void *)objc_claimAutoreleasedReturnValue([v191 cloudClient]);
    sub_1003FE1B4((unsigned __int8 *)(v190 + 128), &v257);
    if ((v257.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v193 = &v257;
    }
    else {
      __int16 v193 = (std::string *)v257.__r_.__value_.__r.__words[0];
    }
    int v194 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v193));
    v235[0] = _NSConcreteStackBlock;
    v235[1] = 3221225472LL;
    v235[2] = sub_1003F59FC;
    v235[3] = &unk_100896038;
    v235[4] = v190;
    [v192 deleteDeviceRecord:v194 completion:v235];

    __int16 v195 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
    int v196 = (void *)objc_claimAutoreleasedReturnValue([v195 cloudClient]);
    sub_1003FE1B4((unsigned __int8 *)(v190 + 128), &v257);
    if ((v257.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v197 = &v257;
    }
    else {
      __int16 v197 = (std::string *)v257.__r_.__value_.__r.__words[0];
    }
    int v198 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v197));
    v234[0] = _NSConcreteStackBlock;
    v234[1] = 3221225472LL;
    v234[2] = sub_1003F5B3C;
    v234[3] = &unk_100896038;
    v234[4] = v190;
    [v196 deleteMagicSettingsRecord:v198 completion:v234];

    __int16 v199 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
    int v200 = (void *)objc_claimAutoreleasedReturnValue([v199 cloudClient]);
    sub_1003FE1B4((unsigned __int8 *)(v190 + 128), &v257);
    if ((v257.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v201 = &v257;
    }
    else {
      __int16 v201 = (std::string *)v257.__r_.__value_.__r.__words[0];
    }
    int v202 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v201));
    v233[0] = _NSConcreteStackBlock;
    v233[1] = 3221225472LL;
    v233[2] = sub_1003F5C7C;
    v233[3] = &unk_100896038;
    v233[4] = v190;
    [v200 deleteDeviceSupportInformationRecord:v202 completion:v233];

    if (!sub_1003D0670(v190))
    {
LABEL_326:
      if (qword_1008D67A8 != -1) {
        dispatch_once(&qword_1008D67A8, &stru_1008961F8);
      }
      sub_10052F37C((uint64_t)off_1008D67A0, *v188);
      goto LABEL_329;
    }

    v249[0] = 0;
    sub_100242CA4(v249);
    int v203 = sub_10010D064(v190 + 128);
    uint64_t v204 = (os_log_s *)(id)qword_1008F7600;
    __int16 v205 = v204;
    if (v203)
    {
      if (os_log_type_enabled(v204, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(v190, &v257);
        if ((v257.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v206 = &v257;
        }
        else {
          int v206 = (std::string *)v257.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int v253 = 136315394;
        *(void *)&v253[4] = v206;
        __int16 v254 = 1024;
        int v255 = v203;
        _os_log_error_impl( (void *)&_mh_execute_header,  v205,  OS_LOG_TYPE_ERROR,  "Magic Pairing disconnect failed for %s when removing magic pairing status: %d",  v253,  0x12u);
        goto LABEL_323;
      }
    }

    else if (os_log_type_enabled(v204, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(v190, &v257);
      if ((v257.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v207 = &v257;
      }
      else {
        __int16 v207 = (std::string *)v257.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int v253 = 136315138;
      *(void *)&v253[4] = v207;
      _os_log_impl( (void *)&_mh_execute_header,  v205,  OS_LOG_TYPE_DEFAULT,  "Magic Pairing disconnected for %s as update is from legacy cloud removing magic pairing",  v253,  0xCu);
LABEL_323:
    }

    sub_100242CD8(v249);
    goto LABEL_326;
  }

  int v136 = sub_1002E6E00();
  sub_10002418C(buf, "LE");
  sub_10002418C(__p, "ConnRSSIStageOneLECarPlay");
  unint64_t v137 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(void *)v136 + 88LL))(v136, buf, __p, &v163);
  if (v171 < 0) {
    operator delete(__p[0]);
  }
  if (v175 < 0)
  {
    operator delete(*(void **)buf);
    if (!v137) {
      goto LABEL_298;
    }
  }

  else if (!v137)
  {
    goto LABEL_298;
  }

  uint64_t v138 = v163;
  *(_BYTE *)(a1 + 1350) = v163;
  uint64_t v139 = (os_log_s *)qword_1008F7620;
  if (os_log_type_enabled((os_log_t)qword_1008F7620, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v138;
    _os_log_impl( (void *)&_mh_execute_header,  v139,  OS_LOG_TYPE_DEFAULT,  "LEConnectionLECarPlayStageOneThresholdRssi %d overridden",  buf,  8u);
  }

LABEL_330:
  sub_100242ECC((uint64_t)v248);
  __int16 v209 = *(uint64_t **)(a1 + 176);
  uint64_t v208 = *(uint64_t **)(a1 + 184);
  while (v209 != v208)
  {
    uint64_t v210 = *v209;
    if (*(_DWORD *)(*v209 + 84) == 3)
    {
      operator delete((void *)v210);
      __int16 v211 = *(uint64_t **)(a1 + 184);
      uint64_t v212 = (char *)v211 - (char *)(v209 + 1);
      if (v211 != v209 + 1) {
        memmove(v209, v209 + 1, (char *)v211 - (char *)(v209 + 1));
      }
      uint64_t v208 = (uint64_t *)((char *)v209 + v212);
      *(void *)(a1 + 184) = (char *)v209 + v212;
    }

    else
    {
      ++v209;
    }
  }

  sub_100242F54((uint64_t)v248);
  if (*(_BYTE *)(a1 + 48))
  {
    v257.__r_.__value_.__s.__data_[0] = 0;
    sub_100242CA4(&v257);
    sub_1003EDDE0((void *)a1);
    sub_100242CD8(&v257);
  }

  sub_1003EEEB0(a1);
  *(_BYTE *)(a1 + 242) = 0;
  __int16 v213 = (os_log_s *)(id)qword_1008F7600;
  if (os_log_type_enabled(v213, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v214 = "No";
    if ((v230 & 1) != 0) {
      uint64_t v214 = "Yes";
    }
    LODWORD(v257.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v214;
    _os_log_impl( (void *)&_mh_execute_header,  v213,  OS_LOG_TYPE_DEFAULT,  "Magic Device list Update Required ? %{public}s",  (uint8_t *)&v257,  0xCu);
  }

  if ((v230 & 1) != 0) {
    sub_1003EF380(a1);
  }
  if (!*(_BYTE *)(a1 + 240))
  {
    __int16 v215 = (os_log_s *)(id)qword_1008F7600;
    if (os_log_type_enabled(v215, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v216 = (uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3;
      LODWORD(v257.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = v216;
      _os_log_impl( (void *)&_mh_execute_header,  v215,  OS_LOG_TYPE_DEFAULT,  "Initial Magic Devices Initialized with devices: %lu",  (uint8_t *)&v257,  0xCu);
    }

    *(_BYTE *)(a1 + 240) = 1;
    memset(&v257, 0, sizeof(v257));
    if (qword_1008D5F00 != -1) {
      dispatch_once(&qword_1008D5F00, &stru_1008962D8);
    }
    sub_10040A790((uint64_t)off_1008D5EF8, (void **)&v257.__r_.__value_.__l.__data_);
    __int128 v217 = (unsigned __int8 **)v257.__r_.__value_.__r.__words[0];
    if (v257.__r_.__value_.__r.__words[0] != v257.__r_.__value_.__l.__size_)
    {
      do
      {
        char v218 = *v217;
        int v219 = (*v217)[960];
        if (_os_feature_enabled_impl("BluetoothFeatures", "GAPA"))
        {
          if ((sub_1003D8484((uint64_t)v218) & 2) != 0)
          {
            BOOL v220 = 0;
          }

          else
          {
            if (qword_1008D60E0 != -1) {
              dispatch_once(&qword_1008D60E0, &stru_100896298);
            }
            BOOL v220 = sub_10021A598((uint64_t)off_1008D60D8, (uint64_t)v218);
          }
        }

        else
        {
          BOOL v220 = 1;
        }

        uint64_t v221 = sub_1003D0070((uint64_t)v218, 0x80000u);
        if (v219) {
          BOOL v222 = 0;
        }
        else {
          BOOL v222 = (_DWORD)v221 == 4;
        }
        if (v222 && v220 && !v218[989] && (!v218[988] || sub_1003EE52C(v221, (uint64_t)v218)))
        {
          __int128 v223 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v223, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C((uint64_t)v218, v253);
            __int128 v224 = v253;
            if (v256 < 0) {
              __int128 v224 = *(_BYTE **)v253;
            }
            *(_DWORD *)v249 = 136446210;
            v250 = v224;
            _os_log_impl( (void *)&_mh_execute_header,  v223,  OS_LOG_TYPE_DEFAULT,  "Send Magic Keys to connected device: %{public}s",  v249,  0xCu);
            if (v256 < 0) {
              operator delete(*(void **)v253);
            }
          }

          if (qword_1008D60E0 != -1) {
            dispatch_once(&qword_1008D60E0, &stru_100896298);
          }
          sub_10021EC58((uint64_t)off_1008D60D8, v218);
        }

        ++v217;
      }

      while (v217 != (unsigned __int8 **)v257.__r_.__value_.__l.__size_);
      __int128 v217 = (unsigned __int8 **)v257.__r_.__value_.__r.__words[0];
    }

    if (v217)
    {
      v257.__r_.__value_.__l.__size_ = (std::string::size_type)v217;
      operator delete(v217);
    }
  }

  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  return sub_100242FAC((uint64_t)v248);
}

void sub_1003F503C(_Unwind_Exception *a1)
{
  __int16 v3 = *(void **)(v1 - 144);
  if (v3)
  {
    *(void *)(v1 - 136) = v3;
    operator delete(v3);
  }

  BOOL v4 = *(void **)(v1 - 240);
  if (v4)
  {
    *(void *)(v1 - 2sub_100242FAC(v1 - 32) = v4;
    operator delete(v4);
  }

  sub_100242FAC((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_1003F5458(uint64_t a1)
{
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_100896258);
  }
  sub_1005E459C( (uint64_t)off_1008D6600,  (unsigned __int8 *)(*(void *)(a1 + 32) + 77LL),  *(void *)(a1 + 40) + 152LL * *(int *)(a1 + 48) + 58);
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_100896278);
  }
  sub_100621334( qword_1008D5F18,  (unsigned __int8 *)(*(void *)(a1 + 32) + 77LL),  *(void *)(a1 + 40) + 152LL * *(int *)(a1 + 48) + 42);
}

void sub_1003F550C(uint64_t a1)
{
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_100896258);
  }
  sub_1005E459C( (uint64_t)off_1008D6600,  (unsigned __int8 *)(*(void *)(a1 + 32) + 77LL),  *(void *)(a1 + 40) + 152LL * *(int *)(a1 + 48) + 58);
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_100896278);
  }
  sub_100621334( qword_1008D5F18,  (unsigned __int8 *)(*(void *)(a1 + 32) + 77LL),  *(void *)(a1 + 40) + 152LL * *(int *)(a1 + 48) + 42);
}

void sub_1003F55BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)qword_1008F7600;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT);
  if (!v5 || v6)
  {
    if (v8)
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412546;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "After legacy magic pairing, unable to fetch magic setting record: %@, Error: %@",  (uint8_t *)&buf,  0x16u);
    }
  }

  else
  {
    if (v8)
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "After legacy magic pairing, fetched magic setting record: %@",  (uint8_t *)&buf,  0xCu);
    }

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 deviceIDFeatureBitsV1]);
    BOOL v10 = [v9 length] == 0;

    if (!v10)
    {
      LODWORD(v23) = 0;
      id v11 = objc_claimAutoreleasedReturnValue([v5 deviceIDFeatureBitsV1]);
      sub_10002418C(&buf, (char *)[v11 UTF8String]);
      int v12 = std::stoul(&buf, 0LL, 0);

      BOOL v13 = sub_1003D6ED8(*(void *)(a1 + 32), &v23);
      if ((_DWORD)v23 != v12 || !v13)
      {
        int v15 = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003FE1B4((unsigned __int8 *)(*(void *)(a1 + 32) + 128LL), &buf);
          int v16 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &buf : (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)uint64_t v24 = 136446466;
          *(void *)&v24[4] = v16;
          __int16 v25 = 1024;
          int v26 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Fetched iCloud update for DID supported feature bits version 1, address: %{public}s, supported feature bits 0x%x",  v24,  0x12u);
        }

        sub_1003D6758(*(void *)(a1 + 32), v12, 0);
      }
    }

    int v17 = (void *)objc_claimAutoreleasedReturnValue([v5 deviceIDFeatureBitsV2]);
    BOOL v18 = [v17 length] == 0;

    if (!v18)
    {
      unint64_t v23 = 0LL;
      id v19 = objc_claimAutoreleasedReturnValue([v5 deviceIDFeatureBitsV2]);
      sub_10002418C(&buf, (char *)[v19 UTF8String]);
      unint64_t v20 = std::stoull(&buf, 0LL, 0);

      if (!sub_1003D6F90(*(void *)(a1 + 32), &v23) || v23 != (HIDWORD(v20) | (v20 << 32)))
      {
        uint64_t v21 = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003FE1B4((unsigned __int8 *)(*(void *)(a1 + 32) + 128LL), v24);
          if (v27 >= 0) {
            uint64_t v22 = v24;
          }
          else {
            uint64_t v22 = *(_BYTE **)v24;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446722;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = HIDWORD(v20);
          WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(buf.__r_.__value_.__r.__words[2]) = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Apply Fetched iCloud update for DID extended supported feature bits version 2, address: %{public}s, extended supported feature bits I1: 0x%x, I2: 0x%x",  (uint8_t *)&buf,  0x18u);
          if (v27 < 0) {
            operator delete(*(void **)v24);
          }
        }

        HIDWORD(v23) |= v20;
        sub_1003D6A34(*(void *)(a1 + 32), v23, 0);
      }
    }
  }
}

void sub_1003F595C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1003F59FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (os_log_s *)(id)qword_1008F7600;
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(*(void *)(a1 + 32), __p);
      sub_10067AB08();
    }
  }

  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(*(void *)(a1 + 32), __p);
    id v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    BOOL v10 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[MP] Removed cloud device for %{public}s",  buf,  0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1003F5B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003F5B3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (os_log_s *)(id)qword_1008F7600;
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(*(void *)(a1 + 32), __p);
      sub_10067AB4C();
    }
  }

  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(*(void *)(a1 + 32), __p);
    id v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    BOOL v10 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[MP] Removed new cloud magic settings for %{public}s",  buf,  0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1003F5C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003F5C7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (os_log_s *)(id)qword_1008F7600;
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(*(void *)(a1 + 32), __p);
      sub_10067AB90();
    }
  }

  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(*(void *)(a1 + 32), __p);
    id v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    BOOL v10 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[MP] Removed cloud info settings for %{public}s",  buf,  0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1003F5D9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003F5DBC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_1003F2C3C(a1 - 8, a2, a3);
}

void sub_1003F5DC4(uint64_t a1, int a2, const std::string *a3)
{
  char v6 = sub_1003ECFD0();
  uint64_t v7 = (os_log_s *)qword_1008F7600;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT);
  if ((v6 & 1) != 0)
  {
    if (v8)
    {
      uint64_t v9 = "Signed in";
      if (!a2) {
        uint64_t v9 = "Not Signed in";
      }
      BOOL v10 = a3;
      *(_DWORD *)std::string buf = 136446723;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&_BYTE buf[12] = 2160;
      *(void *)&_BYTE buf[14] = 1752392040LL;
      __int16 v17 = 2081;
      BOOL v18 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Received Cloud Sign in status as %{public}s for %{private, mask.hash}s",  buf,  0x20u);
    }

    *(_BYTE *)(a1 + 241) = a2;
    if (a2)
    {
      std::string::operator=((std::string *)(a1 + 216), a3);
      (*(void (**)(void))(**(void **)(a1 + 168) + 16LL))(*(void *)(a1 + 168));
      if (*(_OWORD *)(a1 + 49) != 0LL)
      {
        *(void *)std::string buf = 0LL;
        *(void *)&uint8_t buf[8] = 0LL;
        sub_100242F28((uint64_t)buf, a1 + 104);
        uint64_t v11 = *(void *)(a1 + 176);
        uint64_t v12 = *(void *)(a1 + 184);
        sub_100242FAC((uint64_t)buf);
        if (v11 == v12 && !*(_BYTE *)(a1 + 240)) {
          (*(void (**)(void))(**(void **)(a1 + 168) + 32LL))(*(void *)(a1 + 168));
        }
      }

      sub_1003F6038(a1);
    }

    else
    {
      sub_1003ED880(a1, 0);
    }

    sub_1003F6144(a1);
    if (qword_1008D9040 != -1) {
      dispatch_once(&qword_1008D9040, &stru_1008962F8);
    }
    uint64_t v13 = qword_1008D9038;
    int v14 = *(unsigned __int8 *)(a1 + 241);
    else {
      std::string __p = *(std::string *)(a1 + 216);
    }
    sub_100200588(v13, v14 != 0, &__p);
  }

  else if (v8)
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "cloudSignStatusChanged, Magic Pairing not supported",  buf,  2u);
  }

void sub_1003F6014( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003F6038(uint64_t a1)
{
  int v2 = (os_log_s *)qword_1008F7600;
  if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 245);
    *(_DWORD *)std::string buf = 67109120;
    int v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Resync Local Records to Cloud, in-progress - %d",  buf,  8u);
  }

  if (!*(_BYTE *)(a1 + 245))
  {
    if (*(void *)(a1 + 208))
    {
      *(_BYTE *)(a1 + 245) = 1;
      dispatch_time_t v4 = dispatch_time(0LL, 120000000000LL);
      id v5 = *(dispatch_queue_s **)(a1 + 208);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1003F8C44;
      block[3] = &unk_10087EB20;
      block[4] = a1;
      dispatch_after(v4, v5, block);
    }
  }

void sub_1003F6144(uint64_t a1)
{
  uint64_t v1 = @"SignedOut";
  if (!*(_BYTE *)(a1 + 241))
  {
    CFStringRef v4 = 0LL;
    goto LABEL_15;
  }

  int v3 = (const char *)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
  {
    if (!*(void *)(a1 + 224))
    {
LABEL_14:
      CFStringRef v4 = 0LL;
      uint64_t v1 = @"SignedIn";
      goto LABEL_15;
    }

    int v3 = *(const char **)v3;
  }

  else if (!*(_BYTE *)(a1 + 239))
  {
    goto LABEL_14;
  }

  CFStringRef v5 = CFStringCreateWithCString(0LL, v3, 0x8000100u);
  if (v5) {
    CFStringRef v4 = v5;
  }
  else {
    CFStringRef v4 = 0LL;
  }
  if (*(_BYTE *)(a1 + 241)) {
    uint64_t v1 = @"SignedIn";
  }
LABEL_15:
  CFPreferencesSetAppValue(@"SignInstatus", v1, @"com.apple.BTServer");
  CFPreferencesSetAppValue(@"CloudAccountID", v4, @"com.apple.BTServer");
  CFPreferencesAppSynchronize(@"com.apple.BTServer");
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1003F622C(uint64_t a1, int a2, const std::string *a3)
{
}

void sub_1003F6234(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  *a2 = *(_BYTE *)(a1 + 241);
  CFStringRef v5 = (_OWORD *)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
  {
    sub_100024238(v8, *(void **)(a1 + 216), *(void *)(a1 + 224));
  }

  else
  {
    *(_OWORD *)int v8 = *v5;
    *(void *)&uint8_t v8[16] = *(void *)(a1 + 232);
  }

  *(_OWORD *)a3 = *(_OWORD *)v8;
  *(void *)(a3 + 16) = *(void *)&v8[16];
  char v6 = (os_log_s *)qword_1008F7600;
  if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = "Signed in";
    if (!*(_BYTE *)(a1 + 241)) {
      uint64_t v7 = "Not Signed in";
    }
    *(_DWORD *)int v8 = 136446723;
    *(void *)&void v8[4] = v7;
    *(_WORD *)&v8[12] = 2160;
    *(void *)&v8[14] = 1752392040LL;
    *(_WORD *)&v8[22] = 2081;
    uint64_t v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Current Cloud Sign in status as %{public}s with login %{private, mask.hash}s",  v8,  0x20u);
  }

uint64_t sub_1003F637C(uint64_t result, uint64_t a2, int a3)
{
  if (a3 > 4096)
  {
    uint64_t v5 = result;
    v50[0] = 0LL;
    v50[1] = 0LL;
    sub_100242F28((uint64_t)v50, result + 104);
    char v6 = *(void ***)(v5 + 176);
    uint64_t v7 = *(void ***)(v5 + 184);
    if (v6 == v7) {
      return sub_100242FAC((uint64_t)v50);
    }
    while (1)
    {
      int v8 = *v6;
      if (**v6 == a2) {
        break;
      }
      if (++v6 == v7) {
        return sub_100242FAC((uint64_t)v50);
      }
    }

    uint64_t v9 = (os_log_s *)(id)qword_1008F7600;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, &v52);
      BOOL v10 = (v52.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v52 : (std::string *)v52.__r_.__value_.__r.__words[0];
      uint64_t v11 = *(_BYTE *)(v5 + 242) ? "in" : "not in";
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = a3;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = v10;
      *(_WORD *)&_BYTE buf[18] = 2082;
      *(void *)&_BYTE buf[20] = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Local Magic device info changed (%d) for device %{public}s with cloud sync is %{public}s progress",  buf,  0x1Cu);
    }

    if (*(_BYTE *)(v5 + 242)) {
      return sub_100242FAC((uint64_t)v50);
    }
    switch(a3)
    {
      case 4102:
        if ((sub_1003D8484(a2) & 2) != 0)
        {
          __int16 v17 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C(a2, buf);
            BOOL v18 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
            LODWORD(v52.__r_.__value_.__l.__data_) = 136446210;
            *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Fake magic paired device %{public}s",  (uint8_t *)&v52,  0xCu);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }

          int v19 = *((_DWORD *)v8 + 21);
          if (v19 != 1)
          {
            if (!v19)
            {
              sub_1003D01A0(a2, (uint64_t)buf);
              sub_1003D17B0(a2, (const std::string *)buf, 0);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              sub_1003EEE0C((uint64_t *)(v5 + 176), a2);
              uint64_t v20 = sub_1002E6C74();
              (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 104LL))(v20, a2);
            }

            return sub_100242FAC((uint64_t)v50);
          }

          if (qword_1008D60E0 != -1) {
            dispatch_once(&qword_1008D60E0, &stru_100896298);
          }
          BOOL v27 = v8[3] != 0x101010101010101LL || v8[4] != 0x101010101010101LL;
          v8[1] = 0x101010101010101LL;
          void v8[2] = 0x101010101010101LL;
          *((_BYTE *)v8 + 77) = 0;
          __int16 v28 = *(_WORD *)(*v8 + 132LL);
          *(_DWORD *)((char *)v8 + 7_Block_object_dispose(va, 8) = *(_DWORD *)(*v8 + 128LL);
          *((_WORD *)v8 + 41) = v28;
          v8[3] = 0x101010101010101LL;
          void v8[4] = 0x101010101010101LL;
          if (*(_BYTE *)(v5 + 48)
            && ((unint64_t)*((unsigned __int8 *)v8 + 78) << 40) | ((unint64_t)*((unsigned __int8 *)v8 + 79) << 32) | ((unint64_t)*((unsigned __int8 *)v8 + 80) << 24) | ((unint64_t)*((unsigned __int8 *)v8 + 81) << 16) | ((unint64_t)*((unsigned __int8 *)v8 + 82) << 8) | *((unsigned __int8 *)v8 + 83))
          {
            uint64_t v29 = sub_100404FE8();
            v41[0] = _NSConcreteStackBlock;
            v41[1] = 3221225472LL;
            void v41[2] = sub_1003F6D54;
            v41[3] = &unk_10087EB20;
            v41[4] = v8;
            sub_100405384(v29, v41);
          }

          if (!v27) {
            return sub_100242FAC((uint64_t)v50);
          }
        }

        else
        {
          if (*((_DWORD *)v8 + 21)) {
            return sub_100242FAC((uint64_t)v50);
          }
          if ((sub_1003D8484(a2) & 2) != 0)
          {
            if (qword_1008D60E0 != -1) {
              dispatch_once(&qword_1008D60E0, &stru_100896298);
            }
          }

          if (qword_1008D60E0 != -1) {
            dispatch_once(&qword_1008D60E0, &stru_100896298);
          }
          uint64_t v12 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C(a2, buf);
            uint64_t v13 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
            LODWORD(v52.__r_.__value_.__l.__data_) = 136446210;
            *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Seems like genuine magic paired device %{public}s, needs to be synced",  (uint8_t *)&v52,  0xCu);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
        }

        break;
      case 4099:
        __dst[0] = 0LL;
        BOOL v14 = sub_1003D6F90(a2, __dst);
        if (HIDWORD(__dst[0]) == -1 && v14)
        {
          int v16 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            sub_1003FE1B4((unsigned __int8 *)(a2 + 128), &v52);
            BOOL v30 = (v52.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v52 : (std::string *)v52.__r_.__value_.__r.__words[0];
            *(_DWORD *)std::string buf = 136446722;
            *(void *)&uint8_t buf[4] = v30;
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = __dst[0];
            *(_WORD *)&_BYTE buf[18] = 1024;
            *(_DWORD *)&_BYTE buf[20] = HIDWORD(__dst[0]);
            _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Dropping iCloud update for DID extended supported feature bits version 2, address: %{public}s, extended su pported feature bits I1: 0x%x, I2: 0x%x",  buf,  0x18u);
          }

          return sub_100242FAC((uint64_t)v50);
        }

        break;
      case 4098:
        sub_1003D0100(a2, (uint64_t)buf);
        if ((buf[23] & 0x80000000) != 0)
        {
          uint64_t v21 = *(void *)&buf[8];
          operator delete(*(void **)buf);
          if (!v21) {
            goto LABEL_58;
          }
        }

        else if (!buf[23])
        {
LABEL_58:
          int v48 = 1;
          int v49 = 0;
          uint64_t v47 = 0LL;
          if (sub_1003D55EC(a2, &v49, (_DWORD *)&v47 + 1, &v47, &v48))
          {
            uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[CBProductInfo productInfoWithProductID:]( &OBJC_CLASS___CBProductInfo,  "productInfoWithProductID:",  v47));
            unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 productName]);

            if (v23)
            {
              uint64_t v24 = (os_log_s *)(id)qword_1008F7600;
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                __int16 v25 = &v52;
                sub_1003CF00C(a2, &v52);
                if ((v52.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  __int16 v25 = (std::string *)v52.__r_.__value_.__r.__words[0];
                }
                if (*((char *)v8 + 111) < 0)
                {
                  sub_100024238(__dst, (void *)v8[11], v8[12]);
                }

                else
                {
                  *(_OWORD *)std::string __dst = *(_OWORD *)(v8 + 11);
                  uint64_t v46 = v8[13];
                }

                int v31 = SHIBYTE(v46);
                uint64_t v32 = (void **)__dst[0];
                sub_1003D0100(a2, (uint64_t)__p);
                int v33 = __dst;
                if (v31 < 0) {
                  int v33 = v32;
                }
                uint64_t v34 = __p;
                if (v44 < 0) {
                  uint64_t v34 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446722;
                *(void *)&uint8_t buf[4] = v25;
                *(_WORD *)&_BYTE buf[12] = 2080;
                *(void *)&_BYTE buf[14] = v33;
                *(_WORD *)&_BYTE buf[22] = 2080;
                *(void *)&uint8_t buf[24] = v34;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Device name changed to default for %{public}s, Old Name: %s, New Name: %s",  buf,  0x20u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(v46) < 0) {
                  operator delete(__dst[0]);
                }
              }

              sub_10002418C(buf, (char *)[v23 utf8ValueSafe]);
              __dst[0] = 0LL;
              *(_OWORD *)&v52.__r_.__value_.__l.__data_ = 0uLL;
              sub_1000B0400((uint64_t)__dst);
              v52.__r_.__value_.__r.__words[0] = SLODWORD(__dst[0]);
              v52.__r_.__value_.__l.__size_ = SWORD2(__dst[0]);
              sub_1003D0F60((std::string *)a2, (const std::string *)buf, &v52);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
          }
        }

        uint64_t v35 = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v36 = &v52;
          sub_1003CF00C(a2, &v52);
          if ((v52.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v36 = (std::string *)v52.__r_.__value_.__r.__words[0];
          }
          if (*((char *)v8 + 111) < 0)
          {
            sub_100024238(__dst, (void *)v8[11], v8[12]);
          }

          else
          {
            *(_OWORD *)std::string __dst = *(_OWORD *)(v8 + 11);
            uint64_t v46 = v8[13];
          }

          int v37 = SHIBYTE(v46);
          int v38 = (void **)__dst[0];
          sub_1003D0100(a2, (uint64_t)__p);
          uint64_t v39 = __dst;
          if (v37 < 0) {
            uint64_t v39 = v38;
          }
          if (v44 >= 0) {
            __int128 v40 = __p;
          }
          else {
            __int128 v40 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446722;
          *(void *)&uint8_t buf[4] = v36;
          *(_WORD *)&_BYTE buf[12] = 2080;
          *(void *)&_BYTE buf[14] = v39;
          *(_WORD *)&_BYTE buf[22] = 2080;
          *(void *)&uint8_t buf[24] = v40;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Magic device name changed for %{public}s, Old Name: %s, New Name: %s",  buf,  0x20u);
          if (v44 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v46) < 0) {
            operator delete(__dst[0]);
          }
        }

        sub_1003D0100(a2, (uint64_t)&__str);
        std::string::operator=((std::string *)(v8 + 11), &__str);
        break;
    }

    if (*(_OWORD *)(v8 + 3) != 0LL && *(_OWORD *)(v8 + 1) != 0LL) {
      sub_1003EF380(v5);
    }
    return sub_100242FAC((uint64_t)v50);
  }

  return result;
}

void sub_1003F6C1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  sub_100242FAC((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_1003F6D54(uint64_t a1)
{
  if (qword_1008D6608 != -1) {
    dispatch_once(&qword_1008D6608, &stru_100896258);
  }
  sub_1005E459C((uint64_t)off_1008D6600, (unsigned __int8 *)(*(void *)(a1 + 32) + 77LL), *(void *)(a1 + 32) + 24LL);
  if (qword_1008D5F20 != -1) {
    dispatch_once(&qword_1008D5F20, &stru_100896278);
  }
  sub_100621334(qword_1008D5F18, (unsigned __int8 *)(*(void *)(a1 + 32) + 77LL), *(void *)(a1 + 32) + 8LL);
}

void sub_1003F6DEC(uint64_t a1, int a2)
{
  CFStringRef v4 = (os_log_s *)qword_1008F7600;
  if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 244);
    *(_DWORD *)std::string buf = 67109376;
    int v10 = v5;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "deviceOnlineStatusChanged from [%d] to [%d]",  buf,  0xEu);
  }

  char v6 = *(dispatch_queue_s **)(a1 + 208);
  if (v6)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_1003F6EEC;
    v7[3] = &unk_1008800D8;
    v7[4] = a1;
    char v8 = a2;
    dispatch_async(v6, v7);
  }

void sub_1003F6EEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 244) && *(_BYTE *)(a1 + 40)) {
    sub_1003F6038(*(void *)(a1 + 32));
  }
  *(_BYTE *)(v2 + 244) = *(_BYTE *)(a1 + 40);
}

void sub_1003F6F2C(uint64_t a1, int a2)
{
}

void sub_1003F6F34(uint64_t a1, uint64_t a2)
{
  if (a2 && *(_BYTE *)(a1 + 241) && (!*(_BYTE *)(a2 + 988) || (sub_1003EE52C(a1, a2) & 1) != 0))
  {
    CFStringRef v4 = (os_log_s *)(id)qword_1008F7600;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, __p);
      int v5 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      unint64_t v23 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "updateAACPVersionInfo: Updating %{public}s",  buf,  0xCu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_1003FE1B4((unsigned __int8 *)(a2 + 128), __p);
    if (v21 >= 0) {
      char v6 = __p;
    }
    else {
      char v6 = (void **)__p[0];
    }
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v6));
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    char v8 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 cloudClient]);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_1003F7228;
    void v17[3] = &unk_1008960A8;
    id v10 = v7;
    id v18 = v10;
    uint64_t v19 = a2;
    [v9 deviceRecord:v10 completion:v17];

    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
    int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 cloudClient]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_1003F7988;
    void v15[3] = &unk_100896110;
    id v13 = v10;
    id v16 = v13;
    [v12 deviceSupportInformationRecord:v13 completion:v15];
  }

  else
  {
    BOOL v14 = (os_log_s *)qword_1008F7600;
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEBUG)) {
      sub_10067ABD4(a1, v14);
    }
  }

void sub_1003F719C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  _Unwind_Resume(a1);
}

void sub_1003F7228(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
      sub_10067AD44();
    }
LABEL_4:

    goto LABEL_5;
  }

  unint64_t v7 = sub_1005C02B0(*(void **)(a1 + 32));
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
      sub_10067AC48();
    }
    goto LABEL_4;
  }

  if (qword_1008D5F50 != -1) {
    dispatch_once(&qword_1008D5F50, &stru_100896218);
  }
  char v8 = sub_10040007C(off_1008D5F48, v7, 0);
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
      sub_10067AC74();
    }
    goto LABEL_4;
  }

  uint64_t v9 = (os_log_s *)qword_1008F7600;
  BOOL v10 = os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v10)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "updateAACPVersionInfo: updating pid/vid for cloudDevice",  buf,  2u);
    }

    *(_DWORD *)std::string buf = 0;
    LODWORD(v33) = 0;
    LODWORD(__p[0]) = 0;
    LODWORD(v36) = 0;
    if (sub_1003D55EC(*(void *)(a1 + 40), buf, &v33, __p, &v36))
    {
      __int16 v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%u",  LODWORD(__p[0])));
      [v5 setProductID:v11];

      int v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%u",  v33));
      [v5 setVendorID:v12];
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR))
    {
      sub_10067AD18();
    }

void sub_1003F7828( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  *(void *)(v32 - 144) = &a21;
  sub_100024304((void ***)(v32 - 144));

  _Unwind_Resume(a1);
}

void sub_1003F792C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32) && os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
    sub_10067ADA8();
  }
}

void sub_1003F7988(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  id v7 = a3;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
      sub_10067AE0C();
    }
  }

  else
  {
    unint64_t v8 = sub_1005C02B0(*(void **)(a1 + 32));
    if (v8)
    {
      if (qword_1008D5F50 != -1) {
        dispatch_once(&qword_1008D5F50, &stru_100896218);
      }
      uint64_t v9 = (const std::string *)sub_10040007C(off_1008D5F48, v8, 0);
      if (v9)
      {
        if (!v5)
        {
          BOOL v10 = (os_log_s *)qword_1008F7600;
          if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "updateAACPVersionInfo: Creating new deviceSupportInformation",  buf,  2u);
          }

          id v6 = [[BTCloudDeviceSupportInformation alloc] initWithBluetoothAddress:*(void *)(a1 + 32)];
        }

        *(void *)std::string buf = 0LL;
        __int16 v40 = 0LL;
        uint64_t v41 = 0LL;
        if ((sub_1003D8F04((uint64_t)v9, (uint64_t)buf) & 1) != 0)
        {
          if (qword_1008D60E0 != -1) {
            dispatch_once(&qword_1008D60E0, &stru_100896298);
          }
          __int16 v11 = off_1008D60D8;
          memset(v37, 0, sizeof(v37));
          sub_10024062C( (char *)v37,  *(__int128 **)buf,  v40,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(void *)buf) >> 3));
          LODWORD(v11) = sub_10022C844((uint64_t)v11, v37, 3u);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
          sub_100024304((void ***)&__p);
          if ((_DWORD)v11)
          {
            int v12 = (void *)(*(void *)buf + 72LL);
            id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v12));
            [v6 setCaseSerialNumber:v13];
          }

          if (qword_1008D60E0 != -1) {
            dispatch_once(&qword_1008D60E0, &stru_100896298);
          }
          BOOL v14 = off_1008D60D8;
          memset(v36, 0, sizeof(v36));
          sub_10024062C( (char *)v36,  *(__int128 **)buf,  v40,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(void *)buf) >> 3));
          LODWORD(v14) = sub_10022C844((uint64_t)v14, v36, 6u);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
          sub_100024304((void ***)&__p);
          if ((_DWORD)v14)
          {
            int v15 = (void *)(*(void *)buf + 144LL);
            id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v15));
            [v6 setHardwareVersion:v16];
          }

          if (qword_1008D60E0 != -1) {
            dispatch_once(&qword_1008D60E0, &stru_100896298);
          }
          __int16 v17 = off_1008D60D8;
          memset(v35, 0, sizeof(v35));
          sub_10024062C( (char *)v35,  *(__int128 **)buf,  v40,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(void *)buf) >> 3));
          LODWORD(v17) = sub_10022C844((uint64_t)v17, v35, 8u);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
          sub_100024304((void ***)&__p);
          if ((_DWORD)v17)
          {
            id v18 = (void *)(*(void *)buf + 192LL);
            uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v18));
            [v6 setLeftBudSerialNumber:v19];
          }

          if (qword_1008D60E0 != -1) {
            dispatch_once(&qword_1008D60E0, &stru_100896298);
          }
          uint64_t v20 = off_1008D60D8;
          memset(v34, 0, sizeof(v34));
          sub_10024062C( (char *)v34,  *(__int128 **)buf,  v40,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(void *)buf) >> 3));
          LODWORD(v20) = sub_10022C844((uint64_t)v20, v34, 9u);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
          sub_100024304((void ***)&__p);
          if ((_DWORD)v20)
          {
            char v21 = (void *)(*(void *)buf + 216LL);
            id v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v21));
            [v6 setRightBudSerialNumber:v22];
          }

          if (qword_1008D60E0 != -1) {
            dispatch_once(&qword_1008D60E0, &stru_100896298);
          }
          id v23 = off_1008D60D8;
          memset(v33, 0, sizeof(v33));
          sub_10024062C( (char *)v33,  *(__int128 **)buf,  v40,  0xAAAAAAAAAAAAAAABLL * (((uint64_t)v40 - *(void *)buf) >> 3));
          LODWORD(v23) = sub_10022C844((uint64_t)v23, v33, 0xAu);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
          sub_100024304((void ***)&__p);
          if ((_DWORD)v23)
          {
            uint64_t v24 = (void *)(*(void *)buf + 240LL);
            __int16 v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v24));
            [v6 setBudsFirmwareVersion:v25];
          }

          memset(&__p, 0, sizeof(__p));
          if (sub_1003D95C0(v9, &__p))
          {
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            BOOL v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_p));
            [v6 setAncAssetVersion:v27];
          }

          __int16 v28 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C((uint64_t)v9, v42);
            uint64_t v29 = v43 >= 0 ? v42 : (void **)v42[0];
            *(_DWORD *)__int16 v44 = 136446210;
            *(void *)&v44[4] = v29;
            _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "updateAACPVersionInfo: Writing cloud record for %{public}s",  v44,  0xCu);
            if (v43 < 0) {
              operator delete(v42[0]);
            }
          }

          if (v5)
          {
            BOOL v30 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
            int v31 = (void *)objc_claimAutoreleasedReturnValue([v30 cloudClient]);
            [v31 modifyDeviceSupportInformationRecord:v6 completion:&stru_1008960E8];
          }

          else
          {
            BOOL v30 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
            int v31 = (void *)objc_claimAutoreleasedReturnValue([v30 cloudClient]);
            [v31 createDeviceSupportInformationRecord:v6 completion:&stru_1008960C8];
          }
        }

        else
        {
          uint64_t v32 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            sub_1003CF00C((uint64_t)v9, &__p);
            sub_10067ACCC();
          }
        }

        *(void *)__int16 v44 = buf;
        sub_100024304((void ***)v44);
      }

      else if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR))
      {
        sub_10067AC74();
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR))
    {
      sub_10067AC48();
    }
  }
}

void sub_1003F8088( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, char a30)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  std::string __p = &a30;
  sub_100024304((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1003F8190(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
    sub_10067AE70();
  }
}

void sub_1003F81E4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
    sub_10067AED4();
  }
}

void sub_1003F8238(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = (os_log_s *)(id)qword_1008F7600;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(a2, __p);
      CFStringRef v4 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      int v15 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "updateCaseInfo: Updating %{public}s",  buf,  0xCu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    sub_1003FE1B4((unsigned __int8 *)(a2 + 128), __p);
    if (v13 >= 0) {
      id v5 = __p;
    }
    else {
      id v5 = (void **)__p[0];
    }
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
    unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 cloudClient]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_1003F843C;
    _OWORD v10[3] = &unk_100896110;
    id v9 = v6;
    id v11 = v9;
    [v8 deviceSupportInformationRecord:v9 completion:v10];
  }

void sub_1003F83E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _Unwind_Resume(a1);
}

void sub_1003F843C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  id v7 = a3;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
      sub_10067AF84();
    }
    goto LABEL_34;
  }

  if (!v5)
  {
    unint64_t v8 = (os_log_s *)qword_1008F7600;
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "updateCaseInfo: Creating new deviceSupportInformation",  buf,  2u);
    }

    id v6 = [[BTCloudDeviceSupportInformation alloc] initWithBluetoothAddress:*(void *)(a1 + 32)];
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 bluetoothAddress]);
  unint64_t v10 = sub_1005C02B0(v9);

  if (v10)
  {
    if (qword_1008D5F50 != -1) {
      dispatch_once(&qword_1008D5F50, &stru_100896218);
    }
    id v11 = sub_10040007C(off_1008D5F48, v10, 0);
    if (v11)
    {
      int v12 = v23;
      uint64_t v24 = 0LL;
      __int128 v22 = 0u;
      *(_OWORD *)id v23 = 0u;
      *(_OWORD *)std::string buf = 0u;
      sub_10002418C(v23, "");
      if (!sub_1003D9724((uint64_t)v11, (uint64_t)buf))
      {
        BOOL v14 = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          sub_1003CF00C((uint64_t)v11, v27);
          sub_10067AF38();
        }

        goto LABEL_32;
      }

      char v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%llu",  (void)v22));
      [v6 setCaseFirmwareVersion:v13];

      if (SHIBYTE(v24) < 0)
      {
        if (v23[1] <= (void *)1)
        {
LABEL_21:
          id v16 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C((uint64_t)v11, __p);
            if (v26 >= 0) {
              __int16 v17 = __p;
            }
            else {
              __int16 v17 = (void **)__p[0];
            }
            id v18 = (void *)objc_claimAutoreleasedReturnValue([v6 caseFirmwareVersion]);
            uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v6 caseName]);
            *(_DWORD *)BOOL v27 = 136446722;
            __int16 v28 = v17;
            __int16 v29 = 2112;
            BOOL v30 = v18;
            __int16 v31 = 2112;
            uint64_t v32 = v19;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "updateCaseInfo: Writing cloud record for %{public}s: caseVersion %@, caseName %@",  v27,  0x20u);
            if (v26 < 0) {
              operator delete(__p[0]);
            }
          }

          if (v5)
          {
            BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
            uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s cloudClient](v14, "cloudClient"));
            [v20 modifyDeviceSupportInformationRecord:v6 completion:&stru_100896150];
          }

          else
          {
            BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
            uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s cloudClient](v14, "cloudClient"));
            [v20 createDeviceSupportInformationRecord:v6 completion:&stru_100896130];
          }

LABEL_32:
          if (SHIBYTE(v24) < 0) {
            operator delete(v23[0]);
          }
          goto LABEL_34;
        }

        int v12 = (void **)v23[0];
      }

      else if (HIBYTE(v24) <= 1u)
      {
        goto LABEL_21;
      }

      int v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v12));
      [v6 setCaseName:v15];

      goto LABEL_21;
    }
  }

void sub_1003F87F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1003F88C0(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
    sub_10067AFE8();
  }
}

void sub_1003F8914(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
    sub_10067B04C();
  }
}

void sub_1003F8968(uint64_t a1)
{
  char v2 = sub_1003ECFD0();
  id v3 = (os_log_s *)qword_1008F7600;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT);
  if ((v2 & 1) != 0)
  {
    if (v4)
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "UpdateCloudDeviceInformation triggered",  (uint8_t *)__p,  2u);
    }

    if (*(_OWORD *)(a1 + 49) == 0LL)
    {
      id v9 = (os_log_s *)qword_1008F7600;
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "UpdateCloudDeviceInformation trigger, no master key found, pull from cloud",  (uint8_t *)__p,  2u);
      }

      (*(void (**)(void))(**(void **)(a1 + 168) + 16LL))(*(void *)(a1 + 168));
    }

    else
    {
      __p[0] = 0LL;
      __p[1] = 0LL;
      sub_100242F28((uint64_t)__p, a1 + 104);
      uint64_t v5 = *(void *)(a1 + 176);
      uint64_t v6 = *(void *)(a1 + 184);
      sub_100242FAC((uint64_t)__p);
      if (v5 == v6 && !*(_BYTE *)(a1 + 240))
      {
        unint64_t v10 = (os_log_s *)qword_1008F7600;
        if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "UpdateCloudDeviceInformation triggers, Master key is available but no Magic Paired Devices. Let's fetch if any available.",  (uint8_t *)__p,  2u);
        }

        (*(void (**)(void))(**(void **)(a1 + 168) + 32LL))(*(void *)(a1 + 168));
      }

      else
      {
        v15[0] = 0LL;
        v15[1] = 0LL;
        sub_100242F28((uint64_t)v15, a1 + 104);
        for (uint64_t i = *(uint64_t **)(a1 + 176); i != *(uint64_t **)(a1 + 184); ++i)
        {
          uint64_t v8 = *i;
          if (*(_DWORD *)(*i + 84) != 1 && *(_OWORD *)(v8 + 24) != 0LL && *(_OWORD *)(v8 + 8) != 0LL)
          {
            id v11 = (os_log_s *)(id)qword_1008F7600;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              sub_1003CF00C(*(void *)v8, __p);
              if (v14 >= 0) {
                int v12 = __p;
              }
              else {
                int v12 = (void **)__p[0];
              }
              *(_DWORD *)std::string buf = 136446210;
              __int16 v17 = v12;
              _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Local device info for device %{public}s needs to be pushed again",  buf,  0xCu);
              if (v14 < 0) {
                operator delete(__p[0]);
              }
            }

            goto LABEL_30;
          }
        }

        if (!*(_BYTE *)(a1 + 243)) {
          goto LABEL_31;
        }
LABEL_30:
        *(_BYTE *)(a1 + 243) = 0;
        sub_1003EF380(a1);
LABEL_31:
        sub_100242F54((uint64_t)v15);
        sub_100242FAC((uint64_t)v15);
      }
    }
  }

  else if (v4)
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Skipping UpdateCloudDeviceInformation for Magic Pairing, not supported on this platform",  (uint8_t *)__p,  2u);
  }

void sub_1003F8C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003F8C44(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 32);
  char v2 = (os_log_s *)qword_1008F7600;
  if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = v1[241];
    int v4 = v1[244];
    v5[0] = 67109376;
    v5[1] = v3;
    __int16 v6 = 1024;
    int v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Initiate Sync, Signed in - %d, Network available - %d",  (uint8_t *)v5,  0xEu);
  }

  if (v1[241] && v1[244]) {
    sub_1003F8968((uint64_t)v1);
  }
  v1[245] = 0;
}

void sub_1003F8D14(uint64_t a1, uint64_t a2)
{
  if (sub_1003ECFD0() && *(_BYTE *)(a1 + 240))
  {
    if (!a2 || !*(_BYTE *)(a1 + 241)) {
      return;
    }
    uint64_t v4 = *(void *)a2;
    uint64_t v5 = (os_log_s *)(id)qword_1008F7600;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(v4, &v87);
      __int16 v6 = (v87.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v87 : (std::string *)v87.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "writeMagicPairingSettingToCloud Update cloud device information, write magic pairing setting to cloud for %{public}s",  buf,  0xCu);
    }

    int v81 = 1;
    int v82 = 0;
    uint64_t v80 = 0LL;
    if (!sub_1003D55EC(v4, &v82, (_DWORD *)&v80 + 1, &v80, &v81))
    {
      int v7 = (os_log_s *)(id)qword_1008F7600;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(v4, buf);
        uint64_t v8 = v86 >= 0 ? buf : *(_BYTE **)buf;
        LODWORD(v87.__r_.__value_.__l.__data_) = 136446722;
        *(std::string::size_type *)((char *)v87.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
        WORD2(v87.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v87.__r_.__value_.__r.__words[1] + 6) = v80;
        WORD1(v87.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v87.__r_.__value_.__r.__words[2]) = HIDWORD(v80);
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "writeMagicPairingSettingToCloud Error fetching DeviceId for magic paired device %{public}s with pid: %x, vid: %x",  (uint8_t *)&v87,  0x18u);
        if (v86 < 0) {
          operator delete(*(void **)buf);
        }
      }
    }

    int v9 = sub_1003DF900(v4);
    if (v9 == 2) {
      unsigned __int8 v10 = 2;
    }
    else {
      unsigned __int8 v10 = v9 == 1;
    }
    id v11 = (os_log_s *)(id)qword_1008F7600;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(v4, &v87);
      int size = (char)v87.__r_.__value_.__s.__size_;
      std::string::size_type v13 = v87.__r_.__value_.__r.__words[0];
      int v14 = sub_1003DF944(v4);
      int v15 = &v87;
      id v16 = "disabled";
      if (size < 0) {
        int v15 = (std::string *)v13;
      }
      if (v14) {
        id v16 = "Enabled";
      }
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = v15;
      __int16 v84 = 2080;
      __int16 v85 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "In Ear Detection  state for device  %{public}s is %s",  buf,  0x16u);
    }

    unsigned __int8 v75 = sub_1003D635C(v4);
    unsigned int v17 = sub_1003D635C(v4);
    int v74 = sub_1003DFBD0(v4);
    char v73 = sub_1003DFBD0(v4);
    char v72 = sub_1003DFA7C(v4);
    char v70 = sub_1003DFA7C(v4);
    int v18 = sub_1003D2B2C(v4, 32);
    char v71 = sub_1003DFC9C(v4);
    char v69 = sub_1003D8484(v4);
    if (v18) {
      int v19 = 64;
    }
    else {
      int v19 = 0;
    }
    int v68 = v19;
    int v20 = _os_feature_enabled_impl("PowerUI", "audioAccessoryOBC");
    if (v20)
    {
      id v21 = sub_1003E1988(v4);
      __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      BOOL v23 = v22 == 0LL;

      if (v23)
      {
        int v76 = 0LL;
      }

      else
      {
        uint64_t v24 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
        __int16 v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone localTimeZone](&OBJC_CLASS___NSTimeZone, "localTimeZone"));
        -[NSDateFormatter setTimeZone:](v24, "setTimeZone:", v25);

        -[NSDateFormatter setDateFormat:](v24, "setDateFormat:", @"yyyy-MM-dd'T'HH:mm:ss.SSSSSSSZZZZZ");
        id v26 = sub_1003E1988(v4);
        BOOL v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        int v76 = (void *)objc_claimAutoreleasedReturnValue(-[NSDateFormatter stringFromDate:](v24, "stringFromDate:", v27));
      }

      if (sub_1003E1944(v4) != -1)
      {
        __int16 v31 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%lu",  sub_1003E1944(v4));
        __int16 v77 = (void *)objc_claimAutoreleasedReturnValue(v31);
LABEL_52:
        id v32 = objc_alloc(&OBJC_CLASS___BTMagicPairingSettings);
        sub_1003FE1B4((unsigned __int8 *)(v4 + 128), &v87);
        if ((v87.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v33 = &v87;
        }
        else {
          int v33 = (std::string *)v87.__r_.__value_.__r.__words[0];
        }
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v33));
        id v35 = [v32 initWithBluetoothAddress:v34];

        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%u",  HIDWORD(v80)));
        [v35 setVendorID:v36];

        int v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%u",  v80));
        [v35 setProductID:v37];

        char v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a1 + 49, 16LL));
        [v35 setMasterKey:v38];

        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a1 + 65, 16LL));
        [v35 setMasterHint:v39];

        __int16 v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a2 + 40, 16LL));
        [v35 setAccessoryKey:v40];

        uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a2 + 56, 16LL));
        [v35 setAccessoryHint:v41];

        __int16 v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a2 + 24, 16LL));
        [v35 setEncryptionKey:v42];

        char v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a2 + 8, 16LL));
        [v35 setIrk:v43];

        __int16 v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%u",  *(unsigned int *)(a2 + 72)));
        [v35 setRatchet:v44];

        int v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", v10));
        [v35 setSettingsMask:v45];

        __int16 v46 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%d",  (v17 >> 4) & 0xFF0 | v75));
        [v35 setButtonModes:v46];

        uint64_t v47 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%u", sub_1003E16E4(v4));
        int v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
        [v35 setColor:v48];

        int v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", 2LL));
        [v35 setVersion:v49];

        if (qword_1008D60D0 != -1) {
          dispatch_once(&qword_1008D60D0, &stru_1008962B8);
        }
        char v50 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%u",  sub_1004272C4((uint64_t)off_1008D60C8, v4));
        unsigned int v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
        [v35 setSupportedServices:v51];

        std::string v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%u",  (32 * v74) & 0xE000 | ((v73 & 7) << 10) | ((v72 & 7) << 7) | v68 & 0xFFFFFFF1 | (4 * (v71 & 3)) | (2 * (v69 & 1))));
        [v35 setListeningServices:v52];

        unsigned int v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%u",  v70 & 0xF));
        [v35 setListeningServicesV2:v53];

        if (v20)
        {
          if (v77) {
            [v35 setOptimizedBatteryCharging:v77];
          }
          if (v76) {
            [v35 setOptimizedBatteryFullChargeDeadline:v76];
          }
        }

        unsigned int __val = 0;
        *(void *)std::string buf = 0LL;
        if (sub_1003D6ED8(v4, &__val))
        {
          int v54 = (os_log_s *)qword_1008F7600;
          if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v87.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(v87.__r_.__value_.__r.__words[0]) = __val;
            _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "DID supported fetaure bits (version 1) is updated to 0x%x. Sync to iCloud",  (uint8_t *)&v87,  8u);
          }

          std::to_string(&v87, __val);
          if ((v87.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            unsigned int v55 = &v87;
          }
          else {
            unsigned int v55 = (std::string *)v87.__r_.__value_.__r.__words[0];
          }
          int v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v55));
          [v35 setDeviceIDFeatureBitsV1:v56];

          BOOL v57 = sub_1003D6F90(v4, buf);
          if (*(_DWORD *)&buf[4] != -1 && v57)
          {
            BOOL v59 = (os_log_s *)qword_1008F7600;
            if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(v87.__r_.__value_.__l.__data_) = 67109376;
              HIDWORD(v87.__r_.__value_.__r.__words[0]) = *(_DWORD *)buf;
              LOWORD(v87.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v87.__r_.__value_.__r.__words[1] + 2) = *(_DWORD *)&buf[4];
              _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "DID extended supported fetaure bits (version 2) is updated to I1 0x%x I2 0x%x. Sync to iCloud",  (uint8_t *)&v87,  0xEu);
            }

            std::to_string(&v87, *(unsigned int *)&buf[4] | ((unint64_t)*(unsigned int *)buf << 32));
            if ((v87.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              unsigned int v60 = &v87;
            }
            else {
              unsigned int v60 = (std::string *)v87.__r_.__value_.__r.__words[0];
            }
            unsigned int v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v60));
            [v35 setDeviceIDFeatureBitsV2:v61];
          }
        }

        int v62 = sub_1003EE238(v4);
        int v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
        if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEBUG)) {
          sub_10067B110();
        }
        if (v63)
        {
          uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
          uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([v64 cloudClient]);
          [v65 createDeviceRecord:v63 completion:&stru_100896170];
        }

        if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEBUG)) {
          sub_10067B0B0();
        }
        int v66 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
        int v67 = (void *)objc_claimAutoreleasedReturnValue([v66 cloudClient]);
        v78[0] = _NSConcreteStackBlock;
        v78[1] = 3221225472LL;
        void v78[2] = sub_1003F9B0C;
        v78[3] = &unk_100896038;
        v78[4] = v4;
        [v67 createMagicSettingsRecord:v35 completion:v78];

        return;
      }
    }

    else
    {
      int v76 = 0LL;
    }

    __int16 v77 = 0LL;
    goto LABEL_52;
  }

  __int16 v28 = (os_log_s *)(id)qword_1008F7600;
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    int v29 = sub_1003ECFD0();
    BOOL v30 = "supported";
    if (v29) {
      BOOL v30 = "initialized";
    }
    LODWORD(v87.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v87.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "writeMagicPairingSettingToCloud, Magic Pairing not %s.",  (uint8_t *)&v87,  0xCu);
  }
}

void sub_1003F9890( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1003F9AB8(id a1, NSError *a2)
{
  char v2 = a2;
  if (v2 && os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
    sub_10067B170();
  }
}

void sub_1003F9B0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
      sub_10067B1D4();
    }
  }

  else
  {
    uint64_t v4 = (os_log_s *)(id)qword_1008F7600;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(*(void *)(a1 + 32), __p);
      uint64_t v5 = v7 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      int v9 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Magic Setting created cloud device %{public}s",  buf,  0xCu);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1003F9C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003F9C34(uint64_t a1, uint64_t a2, int a3)
{
  __int16 v6 = (os_log_s *)(id)qword_1008F7600;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, __p);
    char v7 = v19 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    id v21 = v7;
    __int16 v22 = 1024;
    int v23 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Pairing Completed for device: %{public}s with result - %d",  buf,  0x12u);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }

  if (!a3)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
    int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 cloudClient]);
    sub_1003FE1B4((unsigned __int8 *)(a2 + 128), __p);
    if (v19 >= 0) {
      unsigned __int8 v10 = __p;
    }
    else {
      unsigned __int8 v10 = (void **)__p[0];
    }
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v10));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_1003F9F20;
    void v17[3] = &unk_100896058;
    void v17[4] = a2;
    [v9 magicSettingsRecord:v11 completion:v17];

    if (v19 < 0) {
      operator delete(__p[0]);
    }

    int v12 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
    std::string::size_type v13 = (void *)objc_claimAutoreleasedReturnValue([v12 cloudClient]);
    sub_1003FE1B4((unsigned __int8 *)(a2 + 128), __p);
    if (v19 >= 0) {
      int v14 = __p;
    }
    else {
      int v14 = (void **)__p[0];
    }
    int v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v14));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_1003FA274;
    void v16[3] = &unk_100896190;
    void v16[4] = a1;
    void v16[5] = a2;
    [v13 deviceRecord:v15 completion:v16];

    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_1003F9EA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1003F9F20(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  char v7 = v6;
  if (!v5 || v6)
  {
    id v16 = (os_log_s *)(id)qword_1008F7600;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(*(void *)(a1 + 32), &__p);
      sub_10067B238();
    }

    goto LABEL_20;
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 supportedServices]);
  id v9 = [v8 length];

  if (v9)
  {
    unsigned __int8 v10 = (os_log_s *)(id)qword_1008F7600;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(*(void *)(a1 + 32), &__p);
      id v11 = v24 >= 0 ? &__p : (__int128 *)__p;
      *(_DWORD *)std::string buf = 138412546;
      *(void *)&uint8_t buf[4] = v5;
      __int16 v26 = 2082;
      BOOL v27 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[Pairing] fetched magic settings: %@ for device: %{public}s",  buf,  0x16u);
      if (v24 < 0) {
        operator delete((void *)__p);
      }
    }

    for (int i = 0; i != 31; ++i)
    {
      std::string::size_type v13 = (void *)objc_claimAutoreleasedReturnValue([v5 supportedServices]);
      BOOL v14 = ([v13 integerValue] & (1 << i)) == 0;

      if (!v14)
      {
        uint64_t v15 = *(void *)(a1 + 32);
        *(void *)std::string buf = 0LL;
        __int128 __p = 0uLL;
        sub_1000B0400((uint64_t)buf);
        *(void *)&__int128 __p = *(int *)buf;
        *((void *)&__p + 1) = *(__int16 *)&buf[4];
        sub_1003D1FC4(v15, 1 << i, 4, &__p, 1);
      }
    }

    id v16 = (os_log_s *)(id)qword_1008F7600;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue([v5 supportedServices]);
      unsigned int v18 = [v17 intValue];
      if (qword_1008D60D0 != -1) {
        dispatch_once(&qword_1008D60D0, &stru_1008962B8);
      }
      int v19 = sub_1004272C4((uint64_t)off_1008D60C8, *(void *)(a1 + 32));
      int v20 = (void *)objc_claimAutoreleasedReturnValue([v5 version]);
      unsigned int v21 = [v20 intValue];
      LODWORD(__p) = 67109632;
      DWORD1(__p) = v18;
      WORD4(__p) = 1024;
      *(_DWORD *)((char *)&__p + 10) = v19;
      HIWORD(__p) = 1024;
      unsigned int v23 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Cloud: Device service capability details: received service mask %x, device service mask after update %x, blob version %d",  (uint8_t *)&__p,  0x14u);
    }

void sub_1003FA1F4(_Unwind_Exception *a1)
{
  id v6 = v3;

  _Unwind_Resume(a1);
}

void sub_1003FA274(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = (os_log_s *)(id)qword_1008F7600;
  id v9 = v8;
  if (!v5 || v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(*(void *)(a1 + 40), __p);
      sub_10067B27C();
    }
  }

  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(*(void *)(a1 + 40), __p);
      unsigned __int8 v10 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 138412546;
      id v19 = v5;
      __int16 v20 = 2082;
      unsigned int v21 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[Pairing] fetched cloud record: %@ for device: %{public}s",  buf,  0x16u);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }

    id v9 = (os_log_s *) objc_claimAutoreleasedReturnValue([v5 bluetoothAddress]);
    sub_10002418C(v14, (char *)-[os_log_s UTF8String](v9, "UTF8String"));
    id v11 = objc_claimAutoreleasedReturnValue([v5 nickname]);
    sub_10002418C(v12, (char *)[v11 UTF8String]);
    (*(void (**)(uint64_t, void **, void **))(*(void *)v7 + 96LL))(v7, v14, v12);
    if (v13 < 0) {
      operator delete(v12[0]);
    }

    if (v15 < 0) {
      operator delete(v14[0]);
    }
  }
}

void sub_1003FA450( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  _Unwind_Resume(a1);
}

void sub_1003FA4CC(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_1003FA4E4(uint64_t a1, int a2)
{
  id v3 = (os_log_s *)qword_1008F7600;
  if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Airplane mode is now %d", (uint8_t *)v4, 8u);
  }

uint64_t sub_1003FA590(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_1008F7600;
  if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = "fail";
    if (a2) {
      id v5 = "success";
    }
    LODWORD(v10) = 136446210;
    *(void *)((char *)&v10 + 4) = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Device info upload status from cloud with status = %{public}s",  (uint8_t *)&v10,  0xCu);
  }

  __int128 v10 = 0uLL;
  sub_100242F28((uint64_t)&v10, a1 + 104);
  if (a2)
  {
    id v6 = *(uint64_t **)(a1 + 176);
    *(_BYTE *)(a1 + 243) = 0;
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
      sub_10067B2C0();
    }
    *(_BYTE *)(a1 + 243) = *(void *)(a1 + 176) == *(void *)(a1 + 184);
  }

  sub_1003EEEB0(a1);
  return sub_100242FAC((uint64_t)&v10);
}

void sub_1003FA6CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003FA6E8(uint64_t a1, int a2)
{
  return sub_1003FA590(a1 - 8, a2);
}

void sub_1003FA6F0(void *a1, char *a2, const std::string *a3)
{
  uint64_t v4 = a2;
  if (((char)a3->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    if (a3->__r_.__value_.__s.__size_) {
      goto LABEL_3;
    }
LABEL_23:
    if (a2[23] < 0)
    {
      sub_100024238(__dst, *(void **)a2, *((void *)a2 + 1));
    }

    else
    {
      *(_OWORD *)std::string __dst = *(_OWORD *)a2;
      uint64_t v23 = *((void *)a2 + 2);
    }

    (*(void (**)(void *, void **))(*a1 + 104LL))(a1, __dst);
    if (SHIBYTE(v23) < 0) {
      operator delete(__dst[0]);
    }
    return;
  }

  if (!a3->__r_.__value_.__l.__size_) {
    goto LABEL_23;
  }
LABEL_3:
  int v6 = a2[23];
  __int16 v21 = 0;
  int v20 = 0;
  if (v6 < 0) {
    a2 = *(char **)a2;
  }
  if (!sub_1003FE1A4((uint64_t)&v20, (unsigned __int8 *)a2))
  {
LABEL_32:
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
      sub_10067B2EC();
    }
    return;
  }

  if (!(_BYTE)v20)
  {
    uint64_t v15 = 1LL;
    while (v15 != 6)
    {
      if (*((unsigned __int8 *)&v20 + v15++))
      {
        goto LABEL_32;
      }
    }

    goto LABEL_32;
  }

void sub_1003FA9DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
}

void sub_1003FAA34(uint64_t a1, char *a2, const std::string *a3)
{
}

uint64_t sub_1003FAA3C(uint64_t a1, uint64_t a2)
{
  v34[0] = 0LL;
  v34[1] = 0LL;
  sub_100242F28((uint64_t)v34, a1 + 104);
  __int16 v33 = 0;
  int v32 = 0;
  uint64_t v4 = (unsigned __int8 *)a2;
  if (!(_BYTE)v32)
  {
    uint64_t v22 = 1LL;
    do
    {
      if (v22 == 6) {
        goto LABEL_56;
      }
    }

    while (!*((unsigned __int8 *)&v32 + v22++));
    if ((unint64_t)(v22 - 2) >= 5)
    {
LABEL_56:
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
        sub_10067B2EC();
      }
      return sub_100242FAC((uint64_t)v34);
    }
  }

  int v29 = 0LL;
  BOOL v30 = 0LL;
  uint64_t v31 = 0LL;
  if (qword_1008D67A8 != -1) {
    dispatch_once(&qword_1008D67A8, &stru_1008961F8);
  }
  sub_10052AFEC((uint64_t)off_1008D67A0, (void ***)&v29);
  id v5 = (uint64_t *)v29;
  if (v30 != v29)
  {
    while (1)
    {
      uint64_t v6 = *v5;
      sub_1003FE1B4((unsigned __int8 *)(*v5 + 128), &__p);
      int v7 = *(char *)(a2 + 23);
      int size = (char)__p.__r_.__value_.__s.__size_;
      id v9 = (void *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v10 = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v7 >= 0) {
        size_t v12 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v12 = *(void *)(a2 + 8);
      }
      if (v7 >= 0) {
        char v13 = (const void *)a2;
      }
      else {
        char v13 = *(const void **)a2;
      }
      if (v12 >= v10) {
        size_t v14 = v10;
      }
      else {
        size_t v14 = v12;
      }
      BOOL v15 = memcmp(p_p, v13, v14) == 0;
      BOOL v16 = v12 == v10 && v15;
      if (size < 0)
      {
        operator delete(v9);
        if (v16)
        {
LABEL_30:
          for (int i = *(void ***)(a1 + 176); i != *(void ***)(a1 + 184); ++i)
          {
            if (**i == v6)
            {
              int v20 = (os_log_s *)(id)qword_1008F7600;
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                sub_1003CF00C(v6, &__p);
                __int16 v21 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
                    ? &__p
                    : (std::string *)__p.__r_.__value_.__r.__words[0];
                *(_DWORD *)std::string buf = 136446210;
                uint64_t v36 = v21;
                _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Magic Device do not set empty nickname - %{public}s",  buf,  0xCu);
              }

              goto LABEL_49;
            }
          }

          unsigned int v18 = (os_log_s *)(id)qword_1008F7600;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003CF00C(v6, &__p);
            char v19 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)std::string buf = 136446210;
            uint64_t v36 = v19;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Device nickname being set to empty for %{public}s",  buf,  0xCu);
          }

          sub_10002418C(&__p, "");
          sub_1003D17B0(v6, &__p, 0);
        }
      }

      else if (v16)
      {
        goto LABEL_30;
      }

void sub_1003FAE84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100242FAC((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_1003FAF08(uint64_t a1, uint64_t a2)
{
  return sub_1003FAA3C(a1 - 8, a2);
}

void sub_1003FAF10(uint64_t a1, uint64_t a2)
{
  if (sub_1003ECFD0())
  {
    sub_1003D02AC(a2, (uint64_t)__p);
    if (v21 >= 0) {
      id v3 = __p;
    }
    else {
      id v3 = (void **)__p[0];
    }
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3));
    if (SHIBYTE(v21) < 0) {
      operator delete(__p[0]);
    }
    if ([v4 hasSuffix:@" - Find My"])
    {
      id v5 = (os_log_s *)(id)qword_1008F7600;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C(a2, __p);
        uint64_t v6 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v23 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Device has FM suffix: %{public}s",  buf,  0xCu);
        if (SHIBYTE(v21) < 0) {
          operator delete(__p[0]);
        }
      }

      *(_DWORD *)std::string buf = *(_DWORD *)(a2 + 128);
      LOWORD(v23) = *(_WORD *)(a2 + 132);
      int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", buf, 6LL));
      __p[0] = 0LL;
      __p[1] = 0LL;
      uint64_t v21 = 0LL;
      sub_1003FE1B4(buf, __p);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v4,  "substringToIndex:",  (_BYTE *)objc_msgSend(v4, "length") - (_BYTE *)objc_msgSend(@" - Find My", "length")));
      id v9 = objc_alloc_init(&OBJC_CLASS___SPOwnerInterface);
      std::string::size_type v10 = (void *)objc_claimAutoreleasedReturnValue([v9 ownerSession]);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      void v14[2] = sub_1003FB240;
      void v14[3] = &unk_1008961B8;
      id v11 = v9;
      id v15 = v11;
      id v16 = v10;
      uint64_t v19 = a2;
      id v12 = v8;
      id v17 = v12;
      id v18 = v4;
      id v13 = v10;
      [v13 fetchFindMyNetworkStatusForMACAddress:v7 completion:v14];

      if (SHIBYTE(v21) < 0) {
        operator delete(__p[0]);
      }
    }
  }

void sub_1003FB194( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  _Unwind_Resume(a1);
}

void sub_1003FB240(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (os_log_s *)(id)qword_1008F7600;
  int v7 = v6;
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(*(void *)(a1 + 64), &__p);
      sub_10067B390();
    }
  }

  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C(*(void *)(a1 + 64), &__p);
      uint64_t v8 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 136446466;
      id v15 = v8;
      __int16 v16 = 1024;
      int v17 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "FM Status for %{public}s device is: %d",  buf,  0x12u);
    }

    if (a2 && *(void *)(a1 + 48))
    {
      id v9 = (os_log_s *)qword_1008F7600;
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
      {
        std::string::size_type v11 = *(void *)(a1 + 48);
        std::string::size_type v10 = *(void *)(a1 + 56);
        LODWORD(__p.__r_.__value_.__l.__data_) = 138412546;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v10;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Renaming '%@' -> '%@'",  (uint8_t *)&__p,  0x16u);
      }

      uint64_t v12 = *(void *)(a1 + 64);
      sub_10002418C(&__p, (char *)[*(id *)(a1 + 48) UTF8String]);
      sub_1003D17B0(v12, &__p, 1);
    }
  }
}

void sub_1003FB41C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1003FB464(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = sub_100404EB8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1003FB4D8;
  v7[3] = &unk_10087F900;
  v7[4] = a1;
  void v7[5] = a2;
  int v8 = a3;
  sub_100405384(v6, v7);
}

void sub_1003FB4D8(uint64_t a1)
{
}

void sub_1003FB4E8(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (*(_BYTE *)(a1 + 241))
  {
    uint64_t v6 = (os_log_s *)(id)qword_1008F7600;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      sub_1003CF00C((uint64_t)a2, __p);
      int v7 = v42 >= 0 ? __p : *(_BYTE **)__p;
      int v8 = *(_BYTE *)(a1 + 242) ? "in" : "not in";
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = a3;
      *(_WORD *)__int16 v44 = 2082;
      *(void *)&void v44[2] = v7;
      __int16 v45 = 2082;
      __int16 v46 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Device info changed (%d) for device %{public}s with cloud sync is %{public}s progress",  buf,  0x1Cu);
      if (v42 < 0) {
        operator delete(*(void **)__p);
      }
    }

    if (a3 > 4096)
    {
      v34[0] = 0LL;
      v34[1] = 0LL;
      sub_100242F28((uint64_t)v34, a1 + 104);
      for (int i = *(unsigned __int8 ****)(a1 + 176); i != *(unsigned __int8 ****)(a1 + 184); ++i)
      {
        std::string::size_type v10 = *i;
        if (**i == a2) {
          goto LABEL_19;
        }
      }

      std::string::size_type v10 = 0LL;
LABEL_19:
      sub_100242F54((uint64_t)v34);
      if (v10)
      {
        if (a3 == 4101) {
          sub_1003F8D14(a1, (uint64_t)v10);
        }
        else {
          sub_1003F637C(a1, (uint64_t)a2, a3);
        }
        goto LABEL_80;
      }

      if (a3 == 4102)
      {
        if (qword_1008D60C0 != -1) {
          dispatch_once(&qword_1008D60C0, &stru_100896318);
        }
        uint64_t v22 = off_1008D60B8;
        if (sub_1003ECFD0())
        {
          if (v22[240])
          {
            if (!a2[988]
              && !a2[989]
              && !sub_1003D0670((uint64_t)a2)
              && sub_1003D0070((uint64_t)a2, 0x80000u) == 4)
            {
              uint64_t v23 = sub_1003D8484((uint64_t)a2);
              if ((v23 & 2) == 0)
              {
                if (qword_1008D60C0 != -1) {
                  dispatch_once(&qword_1008D60C0, &stru_100896318);
                }
                if ((sub_1003EE52C(v23, (uint64_t)a2) & 1) == 0)
                {
                  char v24 = (os_log_s *)(id)qword_1008F7600;
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
                  {
                    int v25 = sub_1003D8484((uint64_t)a2);
                    sub_1003D0100((uint64_t)a2, (uint64_t)__p);
                    __int16 v26 = v42 >= 0 ? __p : *(char **)__p;
                    *(_DWORD *)std::string buf = 67109635;
                    *(_DWORD *)&uint8_t buf[4] = v25;
                    strcpy(v44, "p\bhash");
                    v44[7] = 0;
                    *(_WORD *)&v44[8] = 0;
                    __int16 v45 = 2081;
                    __int16 v46 = v26;
                    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "GAPA Flags - %d, sending magic keys and renaming genuine device %{private, mask.hash}s",  buf,  0x1Cu);
                    if (v42 < 0) {
                      operator delete(*(void **)__p);
                    }
                  }

                  if (qword_1008D60E0 != -1) {
                    dispatch_once(&qword_1008D60E0, &stru_100896298);
                  }
                  sub_10021EC58((uint64_t)off_1008D60D8, a2);
                  if (qword_1008D5F50 != -1) {
                    dispatch_once(&qword_1008D5F50, &stru_100896218);
                  }
                  sub_100401ADC((uint64_t)off_1008D5F48, (uint64_t)a2);
                }
              }
            }
          }
        }

        goto LABEL_80;
      }

      if (a3 != 4098)
      {
LABEL_80:
        sub_100242FAC((uint64_t)v34);
        return;
      }

      std::string::size_type v11 = (os_log_s *)(id)qword_1008F7600;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003D01A0((uint64_t)a2, (uint64_t)buf);
        int v12 = SBYTE3(v46);
        id v13 = *(uint8_t **)buf;
        sub_1003D0100((uint64_t)a2, (uint64_t)__p);
        size_t v14 = buf;
        if (v12 < 0) {
          size_t v14 = v13;
        }
        if (v42 >= 0) {
          id v15 = __p;
        }
        else {
          id v15 = *(_BYTE **)__p;
        }
        *(_DWORD *)id v35 = 136315394;
        uint64_t v36 = v14;
        __int16 v37 = 2080;
        char v38 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[3rd] Nickname info changed from %s to %s",  v35,  0x16u);
        if (v42 < 0) {
          operator delete(*(void **)__p);
        }
        if (SBYTE3(v46) < 0) {
          operator delete(*(void **)buf);
        }
      }

      sub_1003D02AC((uint64_t)a2, (uint64_t)buf);
      if (SBYTE3(v46) < 0)
      {
        uint64_t v27 = *(void *)v44;
        operator delete(*(void **)buf);
        if (v27) {
          goto LABEL_36;
        }
      }

      else if (BYTE3(v46))
      {
LABEL_36:
        __int16 v16 = sub_1003EE238((uint64_t)a2);
        int v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        id v18 = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003CF00C((uint64_t)a2, buf);
          if (SBYTE3(v46) >= 0) {
            uint64_t v19 = buf;
          }
          else {
            uint64_t v19 = *(uint8_t **)buf;
          }
          *(_DWORD *)std::string __p = 136446466;
          *(void *)&__p[4] = v19;
          __int16 v40 = 2112;
          uint64_t v41 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "[3rd] Add nickname info from %{public}s with record: %@",  __p,  0x16u);
          if (SBYTE3(v46) < 0) {
            operator delete(*(void **)buf);
          }
        }

        int v20 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 cloudClient]);
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472LL;
        void v32[2] = sub_1003FBE44;
        void v32[3] = &unk_100896038;
        v32[4] = a2;
        [v21 createDeviceRecord:v17 completion:v32];

LABEL_79:
        goto LABEL_80;
      }

      __int16 v28 = (os_log_s *)(id)qword_1008F7600;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003CF00C((uint64_t)a2, buf);
        int v29 = SBYTE3(v46) >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)std::string __p = 136446210;
        *(void *)&__p[4] = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "[3rd] Remove nickname info from %{public}s",  __p,  0xCu);
        if (SBYTE3(v46) < 0) {
          operator delete(*(void **)buf);
        }
      }

      int v17 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](&OBJC_CLASS___CloudPairing, "sharedInstance"));
      int v20 = (void *)objc_claimAutoreleasedReturnValue([v17 cloudClient]);
      sub_1003FE1B4(a2 + 128, buf);
      if (SBYTE3(v46) >= 0) {
        BOOL v30 = buf;
      }
      else {
        BOOL v30 = *(uint8_t **)buf;
      }
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v30));
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472LL;
      void v33[2] = sub_1003FBD04;
      void v33[3] = &unk_100896038;
      v33[4] = a2;
      [v20 deleteDeviceRecord:v31 completion:v33];

      if (SBYTE3(v46) < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_79;
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR))
  {
    sub_10067B3D4();
  }

void sub_1003FBBB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  sub_100242FAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003FBC90(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 - 40;
  uint64_t v6 = sub_100404EB8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1003FB4D8;
  v7[3] = &unk_10087F900;
  v7[4] = v5;
  void v7[5] = a2;
  int v8 = a3;
  sub_100405384(v6, v7);
}

void sub_1003FBD04(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)(id)qword_1008F7600;
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(*(void *)(a1 + 32), __p);
      sub_10067B400();
    }
  }

  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(*(void *)(a1 + 32), __p);
    uint64_t v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    std::string::size_type v10 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[3rd] Removed cloud device %{public}s",  buf,  0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1003FBE24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003FBE44(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)(id)qword_1008F7600;
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_1003CF00C(*(void *)(a1 + 32), __p);
      sub_10067B444();
    }
  }

  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(*(void *)(a1 + 32), __p);
    uint64_t v6 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    std::string::size_type v10 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[3rd] Create cloud device %{public}s",  buf,  0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1003FBF64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003FBF84(uint64_t a1)
{
  char v2 = (os_log_s *)qword_1008F7600;
  if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "statedump: ----------------- Magic Pairing Manager ------------------",  buf,  2u);
  }

  id v3 = (os_log_s *)qword_1008F7600;
  if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: Magic Paired devices:", buf, 2u);
  }

  uint64_t v4 = sub_1002E6E00();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 8LL))(v4))
  {
    uint64_t v5 = (os_log_s *)(id)qword_1008F7600;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = (void *)(a1 + 216);
      int v7 = *(unsigned __int8 *)(a1 + 241);
      else {
        int v8 = 0;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)uint64_t v39 = v6;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)&v39[10] = v7;
      __int16 v40 = 1024;
      int v41 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Cloud Account ID: %s, Cloud Signed in: %d, Initialized: %d",  buf,  0x18u);
    }

    id v9 = (os_log_s *)qword_1008F7600;
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68157954;
      *(_DWORD *)uint64_t v39 = 16;
      *(_WORD *)&uint8_t v39[4] = 2096;
      *(void *)&v39[6] = a1 + 49;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Acc Master Key:%.16P", buf, 0x12u);
    }

    std::string::size_type v10 = (os_log_s *)qword_1008F7600;
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68157954;
      *(_DWORD *)uint64_t v39 = 16;
      *(_WORD *)&uint8_t v39[4] = 2096;
      *(void *)&v39[6] = a1 + 65;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Acc Master Hint:%.16P", buf, 0x12u);
    }

    std::string::size_type v11 = (os_log_s *)qword_1008F7600;
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68157954;
      *(_DWORD *)uint64_t v39 = 16;
      *(_WORD *)&uint8_t v39[4] = 2096;
      *(void *)&v39[6] = a1 + 81;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Acc Master Cloud IRK:%.16P", buf, 0x12u);
    }

    int v12 = (os_log_s *)qword_1008F7600;
    if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68157954;
      *(_DWORD *)uint64_t v39 = 6;
      *(_WORD *)&uint8_t v39[4] = 2096;
      *(void *)&v39[6] = a1 + 97;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Acc Master Cloud Addr:%.6P", buf, 0x12u);
    }

    id v13 = *(uint64_t ***)(a1 + 176);
    if (v13 != *(uint64_t ***)(a1 + 184))
    {
      size_t v14 = (mach_header_64 *)&_mh_execute_header;
      do
      {
        uint64_t v15 = **v13;
        uint64_t v36 = 0LL;
        uint64_t v37 = 0LL;
        BOOL v16 = sub_1003D55EC(v15, (_DWORD *)&v37 + 1, &v37, (_DWORD *)&v36 + 1, &v36);
        uint64_t v33 = ccsha256_di(v16);
        memset(v47, 0, sizeof(v47));
        memset(v46, 0, sizeof(v46));
        int v17 = (os_log_s *)(id)qword_1008F7600;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          id v18 = v14;
          sub_1003CF00C(v15, __p);
          int v19 = v35;
          int v20 = (void **)__p[0];
          int v21 = HIDWORD(v36);
          int v22 = v37;
          char v23 = sub_1003D8484(v15);
          *(_DWORD *)std::string buf = 136446978;
          char v24 = __p;
          if (v19 < 0) {
            char v24 = v20;
          }
          *(void *)uint64_t v39 = v24;
          *(_WORD *)&v39[8] = 1024;
          *(_DWORD *)&v39[10] = v22;
          __int16 v40 = 1024;
          int v41 = v21;
          __int16 v42 = 1024;
          LODWORD(v43) = v23 & 2;
          size_t v14 = v18;
          _os_log_impl( v18,  v17,  OS_LOG_TYPE_DEFAULT,  "statedump: Device %{public}s, vid: %x, pid: %x, Fake: %d",  buf,  0x1Eu);
          if (v35 < 0) {
            operator delete(__p[0]);
          }
        }

        int v25 = (os_log_s *)qword_1008F7600;
        if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v26 = (uint64_t)(*v13 + 5);
          uint64_t v27 = (uint64_t)(*v13 + 7);
          int v28 = *((_DWORD *)*v13 + 18);
          *(_DWORD *)std::string buf = 68158722;
          *(_DWORD *)uint64_t v39 = 16;
          *(_WORD *)&uint8_t v39[4] = 2096;
          *(void *)&v39[6] = v26;
          __int16 v40 = 1040;
          int v41 = 16;
          __int16 v42 = 2096;
          char v43 = (_OWORD *)v27;
          __int16 v44 = 1024;
          int v45 = v28;
          _os_log_impl(v14, v25, OS_LOG_TYPE_DEFAULT, "Acc Key %.16P for Hint %.16P  and Ratchet %d ", buf, 0x28u);
        }

        int v29 = (os_log_s *)qword_1008F7600;
        if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v30 = (uint64_t)(*v13 + 1);
          uint64_t v31 = (uint64_t)(*v13 + 3);
          *(_DWORD *)std::string buf = 68158466;
          *(_DWORD *)uint64_t v39 = 16;
          *(_WORD *)&uint8_t v39[4] = 2096;
          *(void *)&v39[6] = v30;
          __int16 v40 = 1040;
          int v41 = 16;
          __int16 v42 = 2096;
          char v43 = (_OWORD *)v31;
          _os_log_impl(v14, v29, OS_LOG_TYPE_DEFAULT, "IRK %.16P and Encryption key %.16P", buf, 0x22u);
        }

        ccdigest(v33, 16LL, *v13 + 1, v47);
        ccdigest(v33, 16LL, *v13 + 3, v46);
        int v32 = (os_log_s *)qword_1008F7600;
        if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 68158466;
          *(_DWORD *)uint64_t v39 = 32;
          *(_WORD *)&uint8_t v39[4] = 2096;
          *(void *)&v39[6] = v47;
          __int16 v40 = 1040;
          int v41 = 32;
          __int16 v42 = 2096;
          char v43 = v46;
          _os_log_impl(v14, v32, OS_LOG_TYPE_DEFAULT, "Hashed IRK %.32P and Hashed Encryption key %.32P", buf, 0x22u);
        }

        ++v13;
      }

      while (v13 != *(uint64_t ***)(a1 + 184));
    }
  }

void sub_1003FC530( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  _Unwind_Resume(a1);
}

void sub_1003FC56C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, _OWORD *a7)
{
  int v12 = (os_log_s *)(id)qword_1008F7600;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    sub_1003CF00C(a2, &v55);
    int v13 = v57;
    unint64_t v14 = v55.n128_u64[0];
    uint64_t v15 = sub_1001C3008(a3);
    BOOL v16 = &v55;
    *(_DWORD *)std::string buf = 136446722;
    if (v13 < 0) {
      BOOL v16 = (__n128 *)v14;
    }
    *(void *)&uint8_t buf[4] = v16;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = a3;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&_BYTE buf[20] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Magic pairing completed with device %{public}s status:%d, %s",  buf,  0x1Cu);
    if (v57 < 0) {
      operator delete((void *)v55.n128_u64[0]);
    }
  }

  v48[0] = 0LL;
  v48[1] = 0LL;
  sub_100242F28((uint64_t)v48, a1 + 104);
  for (int i = *(void ***)(a1 + 176); i != *(void ***)(a1 + 184); ++i)
  {
    id v18 = *i;
    if (**i == a2) {
      goto LABEL_11;
    }
  }

  id v18 = 0LL;
LABEL_11:
  switch((int)a3)
  {
    case 0:
      __n128 v55 = 0uLL;
      int v56 = 0;
      sub_10052525C((uint64_t)&v55, a7, 4u);
      if (qword_1008D67B8 != -1) {
        dispatch_once(&qword_1008D67B8, &stru_100896238);
      }
      sub_10053584C((uint64_t)off_1008D67B0, (unsigned __int8 *)a2, &v55, 1);
      if (v18)
      {
        if (a5) {
          *(_OWORD *)(v18 + 5) = *a5;
        }
        if ((_DWORD)a6) {
          *((_DWORD *)v18 + 1_Block_object_dispose(va, 8) = a6;
        }
        if (*(_BYTE *)(a1 + 48))
        {
          buf[0] = 0;
          sub_100242CA4(buf);
          sub_1003EDDE0((void *)a1);
          sub_100242CD8(buf);
        }

        sub_1003F0354(a1, a2);
        nullsub_63(&v55, v22);
        int v20 = @"Success";
        goto LABEL_40;
      }

      uint64_t v30 = (os_log_s *)(id)qword_1008F7600;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(a2, buf);
        sub_10067B534();
      }

      nullsub_63(&v55, v31);
      int v20 = @"Success";
      goto LABEL_71;
    case 1:
    case 7:
      int v19 = "BT_MAGIC_PAIRING_FAILED_VERIFICATION";
      if ((_DWORD)a3 == 1) {
        int v19 = "BT_MAGIC_PAIRING_INTERNAL_ERROR";
      }
      int v20 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Magic Pairing failed due to %s",  v19));
      int v21 = (os_log_s *)qword_1008F7600;
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 138412290;
        *(void *)&uint8_t buf[4] = v20;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }

      sub_1003EFF78(a1, (uint64_t)v18);
      goto LABEL_28;
    case 2:
      int v25 = (os_log_s *)qword_1008F7600;
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 138412290;
        *(void *)&uint8_t buf[4] = @"Peer device has no pairing keys BT_MAGIC_PAIRING_KEY_NOT_FOUND";
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }

      *(void *)std::string buf = 0LL;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3812000000LL;
      *(void *)&uint8_t buf[24] = sub_1003FCEF4;
      std::string v52 = nullsub_313;
      unsigned int v53 = &unk_1007C41D6;
      *(_DWORD *)((char *)v54 + 3) = 0;
      v54[0] = 0;
      *(_WORD *)((char *)&v54[1] + 1) = *(_WORD *)(a2 + 132);
      *(_DWORD *)((char *)v54 + 1) = *(_DWORD *)(a2 + 128);
      uint64_t v26 = sub_100404FE8();
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472LL;
      _OWORD v47[2] = sub_1003FCF0C;
      v47[3] = &unk_100880C30;
      v47[4] = buf;
      sub_100405384(v26, v47);
      _Block_object_dispose(buf, 8);
      int v20 = @"Peer device has no pairing keys BT_MAGIC_PAIRING_KEY_NOT_FOUND";
      goto LABEL_40;
    case 8:
      uint64_t v27 = (os_log_s *)qword_1008F7600;
      int v20 = @"We dont have keys for the peer device BT_MAGIC_PAIRING_NO_KEYS_FOR_PEER";
      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 138412290;
        *(void *)&uint8_t buf[4] = @"We dont have keys for the peer device BT_MAGIC_PAIRING_NO_KEYS_FOR_PEER";
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }

      goto LABEL_40;
    default:
      char v23 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Magic Pairing failed due to %s",  sub_1001C3008(a3));
      int v20 = (__CFString *)objc_claimAutoreleasedReturnValue(v23);
LABEL_28:
      char v24 = (os_log_s *)(id)qword_1008F7600;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        sub_1003CF00C(a2, buf);
        sub_10067B4E8();
      }

      v55.n128_u8[0] = 0;
      sub_100242CA4(&v55);
      if (sub_10010D064(a2 + 128))
      {

        int v20 = @"Magic Pairing error disconnect failed";
      }

      if (os_log_type_enabled((os_log_t)qword_1008F7600, OS_LOG_TYPE_ERROR)) {
        sub_10067B488();
      }
      sub_100242CD8(&v55);
LABEL_40:
      uint64_t v45 = 0LL;
      uint64_t v46 = 0LL;
      sub_1003D55EC(a2, (_DWORD *)&v46 + 1, &v46, (_DWORD *)&v45 + 1, &v45);
      if (v18)
      {
        uint64_t v28 = *((unsigned __int8 *)v18 + 112);
        if ((_DWORD)v28 != (_DWORD)a3) {
          *((_BYTE *)v18 + 112) = a3;
        }
        if (a6 <= 0x3A98)
        {
          if ((a6 - 10001) >> 3 > 0x270)
          {
            if ((a6 - 7501) >= 0x9C4)
            {
              if ((a6 - 5001) >= 0x9C4)
              {
                if ((a6 - 2501) >= 0x9C4)
                {
                  if ((a6 - 1001) >= 0x5DC)
                  {
                    if ((a6 - 501) >= 0x1F4)
                    {
                      if ((a6 - 251) >= 0xFA)
                      {
                        else {
                          uint64_t v29 = 250LL;
                        }
                      }

                      else
                      {
                        uint64_t v29 = 500LL;
                      }
                    }

                    else
                    {
                      uint64_t v29 = 1000LL;
                    }
                  }

                  else
                  {
                    uint64_t v29 = 2500LL;
                  }
                }

                else
                {
                  uint64_t v29 = 5000LL;
                }
              }

              else
              {
                uint64_t v29 = 7500LL;
              }
            }

            else
            {
              uint64_t v29 = 10000LL;
            }
          }

          else
          {
            uint64_t v29 = 15000LL;
          }
        }

        else
        {
          uint64_t v29 = 0xFFFFFFFFLL;
        }

        v49[0] = @"FWVersion";
        sub_1003D930C(a2, 0xAu, &v55);
        if (v57 >= 0) {
          int v32 = &v55;
        }
        else {
          int v32 = (__n128 *)v55.n128_u64[0];
        }
        __int16 v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v32));
        v50[0] = v42;
        v49[1] = @"PID";
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  HIDWORD(v45)));
        v50[1] = v33;
        v49[2] = @"PreviousStatus";
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v28));
        void v50[2] = v34;
        uint64_t v49[3] = @"RatchetRange";
        char v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v29));
        v50[3] = v35;
        v49[4] = @"RatchetInternal";
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a6));
        uint8_t v50[4] = v36;
        v50[5] = v20;
        v49[5] = @"Reason";
        v49[6] = @"RepeatingStatus";
        uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  (_DWORD)v28 == (_DWORD)a3));
        v50[6] = v37;
        v49[7] = @"Status";
        char v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a3));
        v50[7] = v38;
        v49[8] = @"VID";
        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  v46));
        v50[8] = v39;
        __int16 v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v50,  v49,  9LL));

        if (v57 < 0) {
          operator delete((void *)v55.n128_u64[0]);
        }
        int v41 = *(dispatch_queue_s **)(a1 + 208);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_1003FCFA4;
        block[3] = &unk_1008800B8;
        block[4] = v40;
        void block[5] = a2;
        dispatch_async(v41, block);
      }